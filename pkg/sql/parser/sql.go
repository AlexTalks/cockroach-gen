// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:64

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:579
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9314

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 26,
	-2, 1006,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 69,
	178, 845,
	195, 845,
	210, 237,
	286, 237,
	294, 701,
	321, 237,
	330, 701,
	367, 701,
	392, 237,
	416, 701,
	-2, 0,
	-1, 75,
	210, 241,
	-2, 0,
	-1, 76,
	106, 1006,
	184, 1006,
	402, 1006,
	403, 1006,
	-2, 0,
	-1, 87,
	119, 980,
	133, 980,
	192, 980,
	221, 980,
	252, 980,
	262, 980,
	397, 980,
	-2, 967,
	-1, 116,
	124, 621,
	201, 613,
	209, 621,
	288, 607,
	339, 607,
	385, 621,
	-2, 0,
	-1, 117,
	4, 1008,
	21, 1008,
	22, 1008,
	23, 1008,
	24, 1008,
	25, 1008,
	27, 1008,
	32, 1008,
	37, 1008,
	38, 1008,
	39, 1008,
	40, 1008,
	41, 1008,
	42, 1008,
	43, 1008,
	44, 1008,
	45, 1008,
	46, 1008,
	47, 1008,
	49, 1008,
	50, 1008,
	51, 1008,
	52, 1008,
	53, 1008,
	54, 1008,
	57, 1008,
	58, 1008,
	59, 1008,
	60, 1008,
	62, 1008,
	63, 1008,
	67, 1008,
	68, 1008,
	69, 1008,
	70, 1008,
	71, 1008,
	73, 1008,
	74, 1008,
	75, 1008,
	76, 1008,
	78, 1008,
	80, 1008,
	81, 1008,
	82, 1008,
	85, 1008,
	86, 1008,
	94, 1008,
	95, 1008,
	96, 1008,
	97, 1008,
	98, 1008,
	99, 1008,
	100, 1008,
	101, 1008,
	103, 1008,
	105, 1008,
	106, 1008,
	108, 1008,
	111, 1008,
	112, 1008,
	113, 1008,
	115, 1008,
	117, 1008,
	118, 1008,
	120, 1008,
	121, 1008,
	122, 1008,
	123, 1008,
	124, 1008,
	125, 1008,
	126, 1008,
	127, 1008,
	128, 1008,
	129, 1008,
	130, 1008,
	132, 1008,
	138, 1008,
	139, 1008,
	140, 1008,
	141, 1008,
	142, 1008,
	143, 1008,
	145, 1008,
	147, 1008,
	151, 1008,
	152, 1008,
	154, 1008,
	155, 1008,
	157, 1008,
	158, 1008,
	160, 1008,
	161, 1008,
	162, 1008,
	163, 1008,
	164, 1008,
	165, 1008,
	166, 1008,
	167, 1008,
	169, 1008,
	170, 1008,
	172, 1008,
	173, 1008,
	174, 1008,
	178, 1008,
	179, 1008,
	180, 1008,
	181, 1008,
	184, 1008,
	185, 1008,
	186, 1008,
	187, 1008,
	188, 1008,
	189, 1008,
	190, 1008,
	191, 1008,
	193, 1008,
	195, 1008,
	197, 1008,
	199, 1008,
	200, 1008,
	201, 1008,
	203, 1008,
	204, 1008,
	207, 1008,
	208, 1008,
	209, 1008,
	210, 1008,
	212, 1008,
	213, 1008,
	215, 1008,
	216, 1008,
	218, 1008,
	219, 1008,
	222, 1008,
	223, 1008,
	226, 1008,
	227, 1008,
	229, 1008,
	230, 1008,
	231, 1008,
	232, 1008,
	233, 1008,
	234, 1008,
	235, 1008,
	236, 1008,
	237, 1008,
	238, 1008,
	240, 1008,
	241, 1008,
	242, 1008,
	243, 1008,
	245, 1008,
	248, 1008,
	249, 1008,
	250, 1008,
	251, 1008,
	253, 1008,
	254, 1008,
	255, 1008,
	257, 1008,
	258, 1008,
	259, 1008,
	260, 1008,
	263, 1008,
	264, 1008,
	266, 1008,
	268, 1008,
	269, 1008,
	270, 1008,
	271, 1008,
	272, 1008,
	273, 1008,
	274, 1008,
	275, 1008,
	276, 1008,
	278, 1008,
	279, 1008,
	280, 1008,
	281, 1008,
	282, 1008,
	283, 1008,
	285, 1008,
	287, 1008,
	288, 1008,
	289, 1008,
	290, 1008,
	291, 1008,
	292, 1008,
	293, 1008,
	294, 1008,
	295, 1008,
	297, 1008,
	298, 1008,
	299, 1008,
	300, 1008,
	301, 1008,
	303, 1008,
	304, 1008,
	305, 1008,
	306, 1008,
	307, 1008,
	308, 1008,
	309, 1008,
	310, 1008,
	312, 1008,
	314, 1008,
	315, 1008,
	316, 1008,
	317, 1008,
	318, 1008,
	319, 1008,
	321, 1008,
	322, 1008,
	323, 1008,
	324, 1008,
	325, 1008,
	326, 1008,
	327, 1008,
	328, 1008,
	330, 1008,
	331, 1008,
	332, 1008,
	333, 1008,
	334, 1008,
	335, 1008,
	336, 1008,
	337, 1008,
	338, 1008,
	339, 1008,
	341, 1008,
	342, 1008,
	343, 1008,
	344, 1008,
	346, 1008,
	347, 1008,
	348, 1008,
	349, 1008,
	351, 1008,
	352, 1008,
	353, 1008,
	354, 1008,
	355, 1008,
	356, 1008,
	357, 1008,
	358, 1008,
	359, 1008,
	360, 1008,
	361, 1008,
	362, 1008,
	364, 1008,
	365, 1008,
	366, 1008,
	368, 1008,
	369, 1008,
	370, 1008,
	371, 1008,
	372, 1008,
	373, 1008,
	374, 1008,
	375, 1008,
	376, 1008,
	378, 1008,
	379, 1008,
	380, 1008,
	381, 1008,
	383, 1008,
	385, 1008,
	386, 1008,
	387, 1008,
	388, 1008,
	389, 1008,
	391, 1008,
	392, 1008,
	393, 1008,
	395, 1008,
	396, 1008,
	399, 1008,
	400, 1008,
	401, 1008,
	402, 1008,
	403, 1008,
	404, 1008,
	406, 1008,
	408, 1008,
	409, 1008,
	410, 1008,
	411, 1008,
	412, 1008,
	413, 1008,
	414, 1008,
	416, 1008,
	417, 1008,
	418, 1008,
	423, 1008,
	424, 1008,
	425, 1008,
	426, 1008,
	427, 1008,
	428, 1008,
	-2, 0,
	-1, 118,
	1, 898,
	199, 898,
	285, 898,
	292, 898,
	431, 898,
	454, 898,
	-2, 0,
	-1, 120,
	1, 898,
	454, 898,
	-2, 0,
	-1, 121,
	1, 898,
	454, 898,
	-2, 0,
	-1, 122,
	1, 902,
	454, 902,
	-2, 0,
	-1, 146,
	119, 979,
	133, 979,
	192, 979,
	221, 979,
	252, 979,
	262, 979,
	397, 979,
	-2, 976,
	-1, 178,
	4, 1015,
	5, 1015,
	6, 1015,
	7, 1015,
	8, 1015,
	9, 1015,
	10, 1015,
	21, 1015,
	22, 1015,
	23, 1015,
	24, 1015,
	25, 1015,
	27, 1015,
	32, 1015,
	33, 1015,
	37, 1015,
	38, 1015,
	39, 1015,
	40, 1015,
	41, 1015,
	42, 1015,
	43, 1015,
	44, 1015,
	45, 1015,
	46, 1015,
	47, 1015,
	49, 1015,
	50, 1015,
	51, 1015,
	52, 1015,
	53, 1015,
	54, 1015,
	55, 1015,
	56, 1015,
	57, 1015,
	58, 1015,
	59, 1015,
	60, 1015,
	62, 1015,
	63, 1015,
	65, 1015,
	67, 1015,
	68, 1015,
	69, 1015,
	70, 1015,
	71, 1015,
	73, 1015,
	74, 1015,
	75, 1015,
	76, 1015,
	78, 1015,
	80, 1015,
	81, 1015,
	82, 1015,
	84, 1015,
	85, 1015,
	86, 1015,
	87, 1015,
	88, 1015,
	89, 1015,
	90, 1015,
	91, 1015,
	92, 1015,
	93, 1015,
	94, 1015,
	95, 1015,
	96, 1015,
	97, 1015,
	98, 1015,
	99, 1015,
	100, 1015,
	101, 1015,
	102, 1015,
	103, 1015,
	105, 1015,
	106, 1015,
	108, 1015,
	111, 1015,
	112, 1015,
	113, 1015,
	115, 1015,
	117, 1015,
	118, 1015,
	120, 1015,
	121, 1015,
	122, 1015,
	123, 1015,
	124, 1015,
	125, 1015,
	126, 1015,
	127, 1015,
	128, 1015,
	129, 1015,
	130, 1015,
	131, 1015,
	132, 1015,
	138, 1015,
	139, 1015,
	140, 1015,
	141, 1015,
	142, 1015,
	143, 1015,
	145, 1015,
	147, 1015,
	150, 1015,
	151, 1015,
	152, 1015,
	154, 1015,
	155, 1015,
	157, 1015,
	158, 1015,
	160, 1015,
	161, 1015,
	162, 1015,
	163, 1015,
	164, 1015,
	165, 1015,
	166, 1015,
	167, 1015,
	168, 1015,
	169, 1015,
	170, 1015,
	172, 1015,
	173, 1015,
	174, 1015,
	178, 1015,
	179, 1015,
	180, 1015,
	181, 1015,
	183, 1015,
	184, 1015,
	185, 1015,
	186, 1015,
	187, 1015,
	188, 1015,
	189, 1015,
	190, 1015,
	191, 1015,
	193, 1015,
	195, 1015,
	196, 1015,
	197, 1015,
	198, 1015,
	199, 1015,
	200, 1015,
	201, 1015,
	202, 1015,
	203, 1015,
	204, 1015,
	207, 1015,
	208, 1015,
	209, 1015,
	210, 1015,
	212, 1015,
	213, 1015,
	215, 1015,
	216, 1015,
	217, 1015,
	218, 1015,
	219, 1015,
	220, 1015,
	222, 1015,
	223, 1015,
	226, 1015,
	227, 1015,
	229, 1015,
	230, 1015,
	231, 1015,
	232, 1015,
	233, 1015,
	234, 1015,
	235, 1015,
	236, 1015,
	237, 1015,
	238, 1015,
	239, 1015,
	240, 1015,
	241, 1015,
	242, 1015,
	243, 1015,
	244, 1015,
	245, 1015,
	246, 1015,
	247, 1015,
	248, 1015,
	249, 1015,
	250, 1015,
	251, 1015,
	253, 1015,
	254, 1015,
	255, 1015,
	258, 1015,
	259, 1015,
	260, 1015,
	263, 1015,
	264, 1015,
	265, 1015,
	266, 1015,
	267, 1015,
	268, 1015,
	269, 1015,
	270, 1015,
	271, 1015,
	272, 1015,
	273, 1015,
	274, 1015,
	275, 1015,
	276, 1015,
	278, 1015,
	279, 1015,
	280, 1015,
	281, 1015,
	282, 1015,
	283, 1015,
	285, 1015,
	287, 1015,
	288, 1015,
	289, 1015,
	290, 1015,
	291, 1015,
	292, 1015,
	293, 1015,
	294, 1015,
	295, 1015,
	297, 1015,
	298, 1015,
	299, 1015,
	300, 1015,
	301, 1015,
	303, 1015,
	304, 1015,
	305, 1015,
	306, 1015,
	307, 1015,
	308, 1015,
	309, 1015,
	310, 1015,
	312, 1015,
	313, 1015,
	314, 1015,
	315, 1015,
	316, 1015,
	317, 1015,
	318, 1015,
	319, 1015,
	321, 1015,
	322, 1015,
	323, 1015,
	324, 1015,
	325, 1015,
	326, 1015,
	327, 1015,
	328, 1015,
	330, 1015,
	331, 1015,
	332, 1015,
	333, 1015,
	334, 1015,
	335, 1015,
	336, 1015,
	337, 1015,
	338, 1015,
	339, 1015,
	340, 1015,
	341, 1015,
	342, 1015,
	343, 1015,
	344, 1015,
	345, 1015,
	346, 1015,
	347, 1015,
	348, 1015,
	349, 1015,
	351, 1015,
	352, 1015,
	353, 1015,
	354, 1015,
	355, 1015,
	356, 1015,
	357, 1015,
	358, 1015,
	359, 1015,
	360, 1015,
	361, 1015,
	362, 1015,
	364, 1015,
	365, 1015,
	366, 1015,
	368, 1015,
	369, 1015,
	370, 1015,
	371, 1015,
	372, 1015,
	373, 1015,
	374, 1015,
	375, 1015,
	376, 1015,
	378, 1015,
	379, 1015,
	380, 1015,
	381, 1015,
	383, 1015,
	385, 1015,
	386, 1015,
	387, 1015,
	388, 1015,
	389, 1015,
	390, 1015,
	391, 1015,
	392, 1015,
	393, 1015,
	395, 1015,
	396, 1015,
	398, 1015,
	399, 1015,
	400, 1015,
	401, 1015,
	402, 1015,
	403, 1015,
	404, 1015,
	405, 1015,
	406, 1015,
	408, 1015,
	409, 1015,
	410, 1015,
	411, 1015,
	412, 1015,
	413, 1015,
	414, 1015,
	416, 1015,
	417, 1015,
	418, 1015,
	423, 1015,
	424, 1015,
	425, 1015,
	426, 1015,
	427, 1015,
	428, 1015,
	429, 1015,
	437, 1015,
	442, 1015,
	443, 1015,
	444, 1015,
	451, 1015,
	456, 1015,
	-2, 0,
	-1, 547,
	149, 1684,
	382, 1684,
	434, 1684,
	453, 1684,
	-2, 0,
	-1, 548,
	149, 1761,
	382, 1761,
	434, 1761,
	453, 1761,
	-2, 0,
	-1, 549,
	149, 1674,
	382, 1674,
	434, 1674,
	453, 1674,
	-2, 0,
	-1, 551,
	149, 1848,
	382, 1848,
	434, 1848,
	453, 1848,
	-2, 0,
	-1, 553,
	149, 1876,
	382, 1876,
	434, 1876,
	453, 1876,
	-2, 0,
	-1, 560,
	149, 1771,
	382, 1771,
	434, 1771,
	453, 1771,
	-2, 486,
	-1, 577,
	453, 1633,
	455, 1633,
	-2, 670,
	-1, 578,
	453, 1635,
	455, 1635,
	-2, 671,
	-1, 579,
	453, 1634,
	455, 1634,
	-2, 672,
	-1, 580,
	455, 1580,
	-2, 673,
	-1, 724,
	288, 608,
	339, 608,
	-2, 0,
	-1, 725,
	288, 607,
	339, 607,
	-2, 564,
	-1, 727,
	1, 586,
	450, 586,
	452, 586,
	454, 586,
	-2, 0,
	-1, 728,
	1, 669,
	146, 669,
	450, 669,
	452, 669,
	454, 669,
	-2, 0,
	-1, 737,
	1, 631,
	450, 631,
	452, 631,
	454, 631,
	-2, 0,
	-1, 738,
	1, 633,
	450, 633,
	452, 633,
	454, 633,
	-2, 0,
	-1, 739,
	1, 636,
	450, 636,
	452, 636,
	454, 636,
	-2, 0,
	-1, 743,
	1, 650,
	450, 650,
	452, 650,
	454, 650,
	-2, 0,
	-1, 744,
	1, 652,
	450, 652,
	452, 652,
	454, 652,
	-2, 0,
	-1, 789,
	133, 1019,
	221, 1019,
	252, 1019,
	-2, 976,
	-1, 804,
	133, 1018,
	221, 1018,
	252, 1018,
	-2, 976,
	-1, 828,
	453, 1632,
	-2, 494,
	-1, 857,
	451, 1624,
	-2, 1615,
	-1, 863,
	5, 1154,
	-2, 1665,
	-1, 864,
	5, 1155,
	-2, 1669,
	-1, 865,
	5, 1156,
	-2, 1668,
	-1, 866,
	5, 1157,
	-2, 1874,
	-1, 867,
	5, 1158,
	-2, 1773,
	-1, 868,
	5, 1159,
	-2, 1840,
	-1, 869,
	5, 1160,
	-2, 1842,
	-1, 870,
	5, 1161,
	-2, 1853,
	-1, 871,
	5, 1162,
	-2, 1843,
	-1, 872,
	5, 1163,
	-2, 1844,
	-1, 873,
	5, 1164,
	-2, 1664,
	-1, 874,
	5, 1165,
	-2, 1889,
	-1, 875,
	5, 1166,
	-2, 1736,
	-1, 876,
	5, 1167,
	-2, 1781,
	-1, 877,
	5, 1168,
	-2, 1783,
	-1, 878,
	5, 1169,
	-2, 1740,
	-1, 879,
	5, 1170,
	451, 1642,
	-2, 1633,
	-1, 880,
	5, 1226,
	451, 1226,
	-2, 1924,
	-1, 885,
	451, 1643,
	-2, 1634,
	-1, 887,
	5, 1174,
	-2, 1922,
	-1, 888,
	5, 1175,
	-2, 1923,
	-1, 889,
	5, 1176,
	-2, 1739,
	-1, 890,
	5, 1177,
	-2, 1935,
	-1, 891,
	5, 1178,
	-2, 1741,
	-1, 892,
	5, 1179,
	-2, 1742,
	-1, 893,
	5, 1180,
	-2, 1743,
	-1, 894,
	5, 1181,
	-2, 1904,
	-1, 895,
	5, 1182,
	-2, 1933,
	-1, 896,
	5, 1183,
	-2, 1719,
	-1, 897,
	5, 1184,
	-2, 1720,
	-1, 898,
	5, 1198,
	-2, 1916,
	-1, 900,
	5, 1173,
	-2, 1912,
	-1, 901,
	5, 1173,
	-2, 1911,
	-1, 902,
	5, 1173,
	-2, 1928,
	-1, 903,
	5, 1190,
	-2, 1906,
	-1, 904,
	5, 1191,
	-2, 1666,
	-1, 905,
	5, 1201,
	-2, 1905,
	-1, 906,
	5, 1203,
	-2, 1944,
	-1, 908,
	5, 1214,
	-2, 1694,
	-1, 909,
	5, 1225,
	-2, 1937,
	-1, 910,
	5, 1217,
	-2, 1938,
	-1, 911,
	5, 1225,
	-2, 1939,
	-1, 912,
	5, 1221,
	-2, 1940,
	-1, 913,
	5, 1141,
	-2, 1749,
	-1, 914,
	5, 1142,
	-2, 1750,
	-1, 915,
	453, 1630,
	-2, 1614,
	-1, 916,
	451, 1964,
	-2, 1631,
	-1, 936,
	5, 1209,
	-2, 1863,
	-1, 953,
	5, 1208,
	-2, 1945,
	-1, 963,
	5, 1210,
	417, 1210,
	-2, 1907,
	-1, 964,
	5, 1211,
	417, 1211,
	-2, 1908,
	-1, 1000,
	451, 1642,
	-2, 1633,
	-1, 1029,
	149, 1876,
	382, 1876,
	434, 1876,
	453, 1876,
	-2, 0,
	-1, 1030,
	1, 474,
	454, 474,
	-2, 910,
	-1, 1150,
	303, 1611,
	444, 1611,
	-2, 1610,
	-1, 1173,
	456, 1611,
	-2, 1612,
	-1, 1208,
	294, 701,
	416, 701,
	-2, 236,
	-1, 1228,
	274, 1004,
	-2, 818,
	-1, 1237,
	256, 1637,
	-2, 0,
	-1, 1301,
	1, 351,
	450, 351,
	452, 351,
	454, 351,
	-2, 978,
	-1, 1304,
	4, 1943,
	11, 1943,
	12, 1943,
	14, 1943,
	15, 1943,
	16, 1943,
	17, 1943,
	18, 1943,
	19, 1943,
	21, 1943,
	22, 1943,
	23, 1943,
	24, 1943,
	25, 1943,
	27, 1943,
	30, 1943,
	32, 1943,
	34, 1943,
	37, 1943,
	38, 1943,
	39, 1943,
	40, 1943,
	41, 1943,
	42, 1943,
	43, 1943,
	44, 1943,
	45, 1943,
	46, 1943,
	47, 1943,
	49, 1943,
	50, 1943,
	51, 1943,
	52, 1943,
	53, 1943,
	54, 1943,
	57, 1943,
	58, 1943,
	59, 1943,
	60, 1943,
	62, 1943,
	63, 1943,
	64, 1943,
	67, 1943,
	68, 1943,
	69, 1943,
	70, 1943,
	71, 1943,
	72, 1943,
	73, 1943,
	74, 1943,
	75, 1943,
	76, 1943,
	78, 1943,
	79, 1943,
	80, 1943,
	81, 1943,
	82, 1943,
	84, 1943,
	85, 1943,
	86, 1943,
	94, 1943,
	95, 1943,
	96, 1943,
	97, 1943,
	98, 1943,
	99, 1943,
	100, 1943,
	101, 1943,
	103, 1943,
	105, 1943,
	106, 1943,
	108, 1943,
	111, 1943,
	112, 1943,
	113, 1943,
	115, 1943,
	117, 1943,
	118, 1943,
	120, 1943,
	121, 1943,
	122, 1943,
	123, 1943,
	124, 1943,
	125, 1943,
	126, 1943,
	127, 1943,
	128, 1943,
	129, 1943,
	130, 1943,
	134, 1943,
	135, 1943,
	136, 1943,
	137, 1943,
	138, 1943,
	139, 1943,
	140, 1943,
	141, 1943,
	142, 1943,
	143, 1943,
	144, 1943,
	145, 1943,
	147, 1943,
	150, 1943,
	151, 1943,
	152, 1943,
	154, 1943,
	155, 1943,
	157, 1943,
	158, 1943,
	160, 1943,
	161, 1943,
	162, 1943,
	163, 1943,
	164, 1943,
	165, 1943,
	166, 1943,
	167, 1943,
	168, 1943,
	169, 1943,
	170, 1943,
	171, 1943,
	172, 1943,
	173, 1943,
	174, 1943,
	175, 1943,
	176, 1943,
	177, 1943,
	179, 1943,
	180, 1943,
	181, 1943,
	183, 1943,
	184, 1943,
	185, 1943,
	186, 1943,
	187, 1943,
	188, 1943,
	189, 1943,
	190, 1943,
	191, 1943,
	193, 1943,
	195, 1943,
	196, 1943,
	197, 1943,
	198, 1943,
	199, 1943,
	200, 1943,
	201, 1943,
	202, 1943,
	203, 1943,
	204, 1943,
	205, 1943,
	206, 1943,
	207, 1943,
	208, 1943,
	209, 1943,
	210, 1943,
	212, 1943,
	213, 1943,
	215, 1943,
	216, 1943,
	217, 1943,
	218, 1943,
	219, 1943,
	220, 1943,
	222, 1943,
	223, 1943,
	226, 1943,
	227, 1943,
	228, 1943,
	229, 1943,
	230, 1943,
	231, 1943,
	232, 1943,
	233, 1943,
	234, 1943,
	235, 1943,
	236, 1943,
	237, 1943,
	238, 1943,
	239, 1943,
	240, 1943,
	241, 1943,
	242, 1943,
	243, 1943,
	246, 1943,
	248, 1943,
	249, 1943,
	250, 1943,
	251, 1943,
	253, 1943,
	254, 1943,
	255, 1943,
	258, 1943,
	259, 1943,
	260, 1943,
	261, 1943,
	263, 1943,
	264, 1943,
	266, 1943,
	268, 1943,
	269, 1943,
	270, 1943,
	271, 1943,
	272, 1943,
	273, 1943,
	274, 1943,
	275, 1943,
	276, 1943,
	278, 1943,
	279, 1943,
	280, 1943,
	281, 1943,
	282, 1943,
	283, 1943,
	285, 1943,
	287, 1943,
	288, 1943,
	289, 1943,
	290, 1943,
	291, 1943,
	292, 1943,
	293, 1943,
	294, 1943,
	295, 1943,
	297, 1943,
	298, 1943,
	299, 1943,
	300, 1943,
	301, 1943,
	302, 1943,
	303, 1943,
	304, 1943,
	305, 1943,
	306, 1943,
	307, 1943,
	308, 1943,
	309, 1943,
	310, 1943,
	312, 1943,
	313, 1943,
	314, 1943,
	315, 1943,
	316, 1943,
	317, 1943,
	318, 1943,
	319, 1943,
	320, 1943,
	321, 1943,
	322, 1943,
	323, 1943,
	324, 1943,
	325, 1943,
	326, 1943,
	327, 1943,
	328, 1943,
	330, 1943,
	331, 1943,
	332, 1943,
	333, 1943,
	334, 1943,
	335, 1943,
	336, 1943,
	337, 1943,
	338, 1943,
	339, 1943,
	341, 1943,
	342, 1943,
	343, 1943,
	344, 1943,
	345, 1943,
	346, 1943,
	347, 1943,
	348, 1943,
	349, 1943,
	351, 1943,
	352, 1943,
	353, 1943,
	354, 1943,
	355, 1943,
	356, 1943,
	357, 1943,
	358, 1943,
	359, 1943,
	360, 1943,
	361, 1943,
	362, 1943,
	364, 1943,
	365, 1943,
	366, 1943,
	368, 1943,
	369, 1943,
	370, 1943,
	371, 1943,
	372, 1943,
	373, 1943,
	374, 1943,
	375, 1943,
	376, 1943,
	378, 1943,
	379, 1943,
	380, 1943,
	381, 1943,
	383, 1943,
	385, 1943,
	386, 1943,
	387, 1943,
	388, 1943,
	389, 1943,
	391, 1943,
	392, 1943,
	393, 1943,
	395, 1943,
	396, 1943,
	399, 1943,
	400, 1943,
	401, 1943,
	402, 1943,
	403, 1943,
	404, 1943,
	406, 1943,
	408, 1943,
	409, 1943,
	410, 1943,
	411, 1943,
	412, 1943,
	413, 1943,
	414, 1943,
	416, 1943,
	417, 1943,
	418, 1943,
	423, 1943,
	424, 1943,
	425, 1943,
	426, 1943,
	427, 1943,
	428, 1943,
	429, 1943,
	430, 1943,
	432, 1943,
	433, 1943,
	434, 1943,
	435, 1943,
	436, 1943,
	437, 1943,
	439, 1943,
	440, 1943,
	441, 1943,
	442, 1943,
	443, 1943,
	444, 1943,
	445, 1943,
	446, 1943,
	447, 1943,
	449, 1943,
	452, 1943,
	453, 1943,
	455, 1943,
	456, 1943,
	-2, 0,
	-1, 1307,
	149, 1848,
	382, 1848,
	434, 1848,
	453, 1848,
	-2, 0,
	-1, 1334,
	288, 608,
	339, 608,
	-2, 0,
	-1, 1353,
	1, 603,
	450, 603,
	452, 603,
	454, 603,
	-2, 0,
	-1, 1354,
	1, 622,
	450, 622,
	452, 622,
	454, 622,
	-2, 0,
	-1, 1355,
	1, 610,
	450, 610,
	452, 610,
	454, 610,
	-2, 0,
	-1, 1377,
	1, 1896,
	450, 1896,
	452, 1896,
	453, 1896,
	454, 1896,
	-2, 648,
	-1, 1378,
	1, 1846,
	450, 1846,
	452, 1846,
	453, 1846,
	454, 1846,
	-2, 649,
	-1, 1391,
	1, 905,
	454, 905,
	-2, 910,
	-1, 1396,
	133, 1018,
	221, 1018,
	252, 1018,
	-2, 976,
	-1, 1489,
	119, 980,
	133, 980,
	192, 980,
	221, 980,
	252, 980,
	262, 980,
	397, 980,
	-2, 1382,
	-1, 1542,
	452, 1515,
	-2, 0,
	-1, 1584,
	119, 980,
	133, 980,
	192, 980,
	221, 980,
	252, 980,
	262, 980,
	397, 980,
	-2, 1091,
	-1, 1639,
	451, 1213,
	-2, 1201,
	-1, 1678,
	1, 476,
	454, 476,
	-2, 910,
	-1, 1866,
	1, 605,
	450, 605,
	452, 605,
	454, 605,
	-2, 0,
	-1, 1867,
	1, 624,
	450, 624,
	452, 624,
	454, 624,
	-2, 0,
	-1, 1943,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	205, 0,
	206, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1262,
	-1, 1944,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	205, 0,
	206, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1263,
	-1, 1945,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	205, 0,
	206, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1264,
	-1, 1946,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	205, 0,
	206, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1265,
	-1, 1947,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	205, 0,
	206, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1266,
	-1, 1948,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	205, 0,
	206, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1267,
	-1, 1949,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	205, 0,
	206, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1268,
	-1, 1950,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	205, 0,
	206, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1269,
	-1, 1962,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	205, 0,
	206, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1281,
	-1, 1963,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	205, 0,
	206, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1282,
	-1, 1964,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	205, 0,
	206, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1283,
	-1, 1967,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	429, 0,
	437, 0,
	-2, 1288,
	-1, 1973,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	429, 0,
	437, 0,
	-2, 1292,
	-1, 1975,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	429, 0,
	437, 0,
	-2, 1300,
	-1, 1976,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	429, 0,
	437, 0,
	-2, 1301,
	-1, 1977,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	429, 0,
	437, 0,
	-2, 1302,
	-1, 1978,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	429, 0,
	437, 0,
	-2, 1303,
	-1, 2072,
	5, 1170,
	149, 1526,
	451, 1642,
	-2, 1633,
	-1, 2073,
	149, 1527,
	-2, 1900,
	-1, 2074,
	149, 1528,
	-2, 1770,
	-1, 2075,
	149, 1529,
	-2, 1695,
	-1, 2076,
	149, 1530,
	-2, 1730,
	-1, 2077,
	149, 1531,
	-2, 1768,
	-1, 2078,
	149, 1532,
	-2, 1839,
	-1, 2154,
	1, 1092,
	84, 1092,
	119, 1092,
	133, 1092,
	146, 1092,
	150, 1092,
	156, 1092,
	159, 1092,
	183, 1092,
	192, 1092,
	202, 1092,
	217, 1092,
	221, 1092,
	239, 1092,
	252, 1092,
	256, 1092,
	262, 1092,
	311, 1092,
	313, 1092,
	397, 1092,
	407, 1092,
	420, 1092,
	421, 1092,
	422, 1092,
	431, 1092,
	450, 1092,
	452, 1092,
	454, 1092,
	455, 1092,
	-2, 1091,
	-1, 2159,
	451, 1616,
	-2, 1628,
	-1, 2181,
	451, 1212,
	-2, 1202,
	-1, 2406,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	429, 0,
	437, 0,
	-2, 1290,
	-1, 2407,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	429, 0,
	437, 0,
	-2, 1294,
	-1, 2413,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	429, 0,
	437, 0,
	-2, 1296,
	-1, 2594,
	199, 910,
	285, 910,
	292, 910,
	431, 910,
	-2, 473,
	-1, 2669,
	452, 1585,
	455, 1585,
	-2, 1602,
	-1, 2683,
	274, 1004,
	-2, 818,
	-1, 2761,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	429, 0,
	437, 0,
	-2, 1298,
	-1, 2768,
	196, 0,
	198, 0,
	246, 0,
	-2, 1317,
	-1, 2831,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1346,
	-1, 2832,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1347,
	-1, 2833,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1348,
	-1, 2837,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1352,
	-1, 2838,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1353,
	-1, 2839,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1354,
	-1, 2882,
	451, 1617,
	-2, 1629,
	-1, 2965,
	453, 2046,
	-2, 953,
	-1, 3009,
	196, 0,
	198, 0,
	246, 0,
	-2, 1318,
	-1, 3012,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	429, 0,
	437, 0,
	-2, 1321,
	-1, 3013,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	429, 0,
	437, 0,
	-2, 1323,
	-1, 3157,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	429, 0,
	437, 0,
	-2, 1322,
	-1, 3158,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	429, 0,
	437, 0,
	-2, 1324,
	-1, 3168,
	196, 0,
	-2, 1355,
	-1, 3264,
	196, 0,
	-2, 1356,
	-1, 3376,
	41, 0,
	168, 0,
	220, 0,
	345, 0,
	429, 0,
	437, 0,
	-2, 1903,
}

const sqlPrivate = 57344

const sqlLast = 71507

var sqlAct = [...]int{

	885, 3198, 3459, 3221, 3111, 3375, 3201, 3385, 2309, 3449,
	2670, 3386, 3348, 3345, 2103, 3332, 3387, 1596, 2318, 3187,
	3224, 1001, 2799, 3374, 2995, 3268, 2210, 2310, 3126, 1930,
	1846, 2903, 2956, 1154, 2951, 2434, 3148, 1036, 814, 210,
	2700, 210, 210, 3072, 3229, 210, 210, 210, 210, 210,
	1990, 2611, 210, 2694, 2146, 2667, 1609, 2904, 805, 2961,
	579, 1404, 2692, 558, 2399, 2306, 1055, 2350, 3172, 2283,
	1147, 2569, 1579, 993, 2286, 2555, 1577, 2142, 210, 2542,
	1293, 2432, 579, 2994, 2360, 3044, 2515, 675, 1804, 1487,
	1360, 2341, 1796, 2531, 1551, 1289, 2349, 1807, 2343, 1797,
	2319, 813, 139, 2212, 2267, 2514, 1927, 1723, 1923, 3269,
	2147, 2854, 1497, 2021, 2003, 1732, 1515, 1166, 2395, 1757,
	1825, 881, 2284, 1750, 842, 1391, 907, 4, 884, 1710,
	86, 2121, 1043, 1708, 1987, 1552, 2033, 2244, 2149, 2668,
	1156, 1302, 802, 1276, 1286, 2359, 2574, 3222, 2312, 985,
	1793, 2100, 1610, 1222, 2202, 2015, 988, 2129, 2353, 2004,
	526, 580, 1561, 202, 581, 1032, 967, 1163, 1478, 204,
	1510, 857, 2111, 210, 210, 1403, 2068, 1587, 139, 510,
	146, 1405, 542, 804, 534, 1792, 2041, 147, 575, 2145,
	620, 1813, 1300, 552, 203, 651, 1252, 1176, 1722, 841,
	529, 990, 37, 965, 670, 36, 34, 537, 1390, 26,
	2243, 24, 22, 1409, 734, 1234, 2871, 2430, 719, 2872,
	1827, 2262, 2487, 2488, 1847, 2505, 2506, 2507, 2311, 584,
	1827, 2315, 1827, 1040, 2018, 2230, 208, 3487, 1578, 3478,
	2120, 3007, 2120, 3477, 3458, 3445, 2120, 1764, 3086, 32,
	3443, 584, 2756, 3086, 587, 1417, 1418, 1839, 3407, 3405,
	809, 2120, 2120, 2709, 3402, 3399, 3396, 3403, 3400, 1764,
	685, 3372, 3371, 2710, 1764, 1764, 587, 3370, 1760, 810,
	1839, 1420, 3367, 2502, 3366, 1839, 3327, 1839, 2592, 2174,
	3317, 178, 3316, 3086, 3310, 3086, 3304, 1764, 2019, 3086,
	3302, 3266, 3250, 3086, 2174, 1764, 809, 3247, 1419, 996,
	3086, 968, 968, 2113, 3215, 3214, 1439, 1764, 1764, 3207,
	790, 3206, 1764, 3178, 3086, 3159, 1764, 789, 2174, 180,
	3138, 3108, 1040, 2722, 2120, 178, 3102, 3085, 3011, 2120,
	3086, 2174, 2973, 2967, 2877, 2738, 2738, 2878, 2867, 178,
	2860, 2868, 999, 2120, 2792, 2493, 2857, 1764, 982, 2120,
	2737, 3328, 3005, 2738, 797, 2729, 671, 3252, 2730, 2020,
	2017, 1197, 2528, 180, 179, 2120, 1019, 969, 1442, 1443,
	1444, 1445, 2526, 2170, 172, 2120, 828, 180, 1425, 1014,
	1839, 58, 173, 673, 2525, 2479, 2462, 2120, 2120, 2463,
	2449, 2451, 2857, 59, 2120, 2450, 2339, 2508, 2187, 1843,
	2112, 2120, 2173, 148, 3103, 2174, 1764, 63, 179, 1447,
	1448, 1449, 2167, 2161, 2119, 2120, 1764, 2120, 172, 1764,
	2487, 2488, 179, 2505, 2506, 2507, 173, 1842, 2730, 2503,
	1843, 2258, 172, 2201, 2487, 2488, 1681, 69, 2722, 3006,
	173, 971, 972, 2120, 2293, 2398, 1763, 148, 178, 2199,
	1547, 1191, 1015, 2022, 2487, 2488, 1175, 2505, 2506, 2507,
	2711, 148, 1440, 1362, 178, 1828, 2140, 75, 2139, 2138,
	2137, 2136, 973, 2487, 2488, 1828, 85, 1828, 970, 2712,
	76, 2502, 796, 795, 794, 793, 180, 792, 3061, 2433,
	788, 1701, 787, 786, 2380, 2502, 785, 784, 783, 782,
	781, 780, 180, 779, 778, 210, 777, 1185, 717, 716,
	715, 714, 713, 812, 210, 2502, 712, 711, 710, 2487,
	2488, 2504, 709, 1196, 77, 708, 707, 706, 705, 704,
	703, 179, 702, 701, 700, 210, 1446, 699, 698, 697,
	696, 172, 210, 695, 694, 693, 692, 179, 684, 173,
	683, 642, 2016, 2493, 1441, 641, 600, 599, 210, 1058,
	210, 210, 1159, 210, 1058, 210, 598, 2493, 3023, 2709,
	2314, 590, 589, 210, 210, 588, 2179, 565, 564, 1488,
	563, 562, 546, 2875, 1015, 1042, 148, 2493, 200, 1047,
	199, 1179, 198, 197, 196, 195, 194, 193, 210, 192,
	191, 1012, 190, 189, 188, 2508, 2493, 187, 2739, 2112,
	2572, 1835, 210, 1190, 1159, 1159, 210, 210, 186, 210,
	2456, 1826, 1488, 1903, 185, 184, 183, 182, 181, 78,
	2445, 210, 2271, 2499, 2500, 2501, 2162, 2503, 2153, 210,
	2498, 2496, 2497, 2489, 2490, 2491, 2492, 2494, 2495, 1849,
	2059, 2503, 2493, 210, 210, 210, 210, 210, 1159, 1159,
	1169, 145, 81, 1159, 82, 210, 1159, 210, 210, 1030,
	2057, 2503, 1015, 1430, 1428, 1429, 1421, 1422, 1423, 1424,
	1426, 1427, 1580, 178, 1706, 1518, 1518, 2299, 178, 2055,
	2503, 1517, 1517, 1417, 1418, 674, 2053, 2051, 116, 1594,
	1504, 1181, 1049, 1003, 1416, 3392, 3373, 1051, 3298, 1144,
	1149, 3259, 1521, 1516, 1159, 1848, 3255, 3139, 3253, 1420,
	3134, 180, 3065, 3043, 1150, 3197, 180, 3042, 1173, 2504,
	3030, 3029, 3028, 210, 1178, 1027, 2503, 1177, 3027, 1297,
	76, 3021, 584, 2504, 3020, 117, 1419, 3019, 1056, 210,
	3018, 2938, 2892, 1167, 2891, 2889, 2881, 2851, 149, 2850,
	2487, 2488, 2849, 2504, 210, 139, 179, 587, 2776, 2772,
	2567, 179, 2733, 2522, 2513, 2486, 172, 2483, 178, 1235,
	1235, 172, 2504, 828, 173, 1499, 1239, 828, 2482, 173,
	2480, 1305, 2469, 810, 2468, 1142, 2467, 1280, 1283, 2464,
	1142, 2461, 2439, 1303, 2438, 672, 1769, 2431, 2340, 2154,
	148, 1499, 2026, 1416, 981, 1396, 180, 1801, 1415, 1173,
	1486, 1767, 3485, 3457, 1290, 3456, 1425, 3408, 2504, 1002,
	2801, 3362, 1236, 1184, 178, 1189, 3360, 1195, 1397, 3293,
	178, 2499, 2500, 2501, 3290, 3289, 3288, 3284, 2498, 2496,
	2497, 2489, 2490, 2491, 2492, 2494, 2495, 1447, 1448, 1449,
	2300, 179, 2498, 2496, 2497, 2489, 2490, 2491, 2492, 2494,
	2495, 172, 180, 3278, 2586, 2499, 2500, 2501, 180, 173,
	3251, 3246, 2498, 2496, 2497, 2489, 2490, 2491, 2492, 2494,
	2495, 3245, 1993, 2493, 1589, 3193, 3170, 3144, 1389, 3143,
	148, 2498, 2496, 2497, 2489, 2490, 2491, 2492, 2494, 2495,
	1440, 3124, 3121, 3291, 3115, 3133, 1500, 179, 1498, 3060,
	3041, 1313, 1395, 179, 2987, 1702, 2245, 172, 1316, 1321,
	1335, 2984, 2919, 172, 2394, 173, 2918, 1402, 2487, 2488,
	2907, 173, 2906, 178, 1999, 2863, 1394, 2767, 2496, 2497,
	2489, 2490, 2491, 2492, 2494, 2495, 148, 210, 116, 2639,
	2723, 2686, 148, 1392, 2657, 2636, 2614, 883, 2613, 2588,
	810, 2487, 2488, 2527, 2460, 2459, 2444, 2422, 2280, 1522,
	1549, 180, 1519, 210, 790, 1558, 2487, 2488, 1511, 1508,
	2183, 789, 2182, 210, 1058, 210, 210, 210, 1417, 1418,
	2157, 2134, 1441, 1159, 579, 210, 210, 1398, 2118, 579,
	210, 1412, 1413, 2049, 1603, 210, 1482, 1850, 1520, 1851,
	1593, 2298, 1606, 2548, 1420, 1550, 179, 1673, 1546, 1545,
	1544, 1676, 1543, 1542, 1541, 1540, 172, 1539, 2487, 2488,
	1058, 2505, 2506, 2507, 173, 2614, 1538, 1536, 1535, 1417,
	1418, 1419, 1534, 1588, 1533, 1532, 1531, 2771, 1530, 840,
	1555, 1556, 1512, 1513, 1568, 148, 1529, 1528, 1527, 1526,
	1525, 2493, 1704, 1524, 1501, 1420, 139, 1483, 1675, 1481,
	1476, 1026, 1017, 1009, 3271, 3120, 3062, 3015, 2888, 1417,
	1418, 2870, 2866, 2448, 2176, 968, 2135, 1679, 3182, 2502,
	2058, 3064, 1419, 2887, 2493, 1500, 996, 2584, 996, 1479,
	810, 1044, 2487, 2488, 2695, 1420, 3230, 3137, 1600, 2493,
	2056, 1430, 1428, 1429, 1421, 1422, 1423, 1424, 1426, 1427,
	1701, 3104, 1616, 1046, 1641, 1040, 1585, 1531, 1701, 2054,
	2873, 3256, 1419, 3254, 2725, 1678, 2052, 2050, 995, 999,
	1727, 999, 1531, 2724, 2946, 2503, 1697, 1580, 1701, 2466,
	1548, 2917, 1598, 1040, 1040, 1159, 210, 839, 1601, 1700,
	1518, 2493, 1058, 584, 3196, 1387, 1517, 1576, 584, 1582,
	1575, 1574, 1425, 1597, 1572, 1045, 1571, 1570, 2503, 1716,
	1334, 2465, 1605, 2491, 2492, 2494, 2495, 1672, 587, 2247,
	2404, 2232, 1041, 587, 1692, 1691, 1607, 1037, 1701, 1698,
	1687, 210, 210, 775, 2672, 1361, 2671, 1506, 210, 1847,
	3225, 1362, 1425, 2508, 1573, 1798, 2742, 2651, 210, 1707,
	1142, 1693, 1745, 1046, 1802, 3173, 3460, 210, 2311, 210,
	2803, 210, 2034, 3393, 2665, 210, 2181, 2504, 2454, 1537,
	1514, 1789, 776, 1212, 3404, 2503, 3401, 210, 2638, 1031,
	1731, 1747, 2705, 980, 1749, 2899, 1485, 1754, 1325, 3342,
	828, 2952, 2347, 3432, 2596, 3096, 1142, 1200, 3309, 2018,
	2504, 637, 1785, 2188, 1210, 1045, 771, 769, 767, 3482,
	3433, 765, 2205, 1038, 1037, 762, 3220, 1159, 210, 1159,
	1039, 3394, 1695, 2203, 1891, 1159, 2205, 1758, 210, 2307,
	210, 210, 1889, 3216, 2932, 2929, 2585, 2203, 2928, 2896,
	1159, 1159, 1819, 210, 2895, 2443, 2442, 1178, 210, 1810,
	1177, 2441, 2440, 579, 210, 584, 210, 2408, 210, 2264,
	210, 2257, 210, 2019, 1046, 1560, 2254, 2504, 997, 2235,
	210, 753, 2169, 1358, 210, 1211, 210, 2598, 1753, 638,
	587, 1765, 1359, 1762, 1974, 210, 1393, 1174, 2497, 2489,
	2490, 2491, 2492, 2494, 2495, 1788, 2045, 1985, 2044, 1688,
	1038, 1932, 1264, 1817, 210, 1852, 1862, 1039, 2214, 1778,
	210, 1830, 1223, 1642, 1832, 1779, 1045, 1834, 1724, 1983,
	3154, 1837, 2489, 2490, 2491, 2492, 2494, 2495, 1142, 2743,
	1058, 1564, 1323, 1318, 2020, 2017, 2234, 2489, 2490, 2491,
	2492, 2494, 2495, 1696, 3083, 759, 1720, 810, 1221, 1206,
	2419, 818, 1815, 1812, 1427, 3308, 1901, 1303, 1357, 1040,
	1858, 1727, 1777, 632, 1567, 1245, 1243, 1244, 1242, 1725,
	1726, 3080, 2417, 1907, 2195, 1372, 1037, 1910, 1900, 2499,
	2500, 2501, 2160, 1562, 3092, 1220, 2498, 2496, 2497, 2489,
	2490, 2491, 2492, 2494, 2495, 2217, 1721, 1854, 1565, 1989,
	1421, 1422, 1423, 1424, 1426, 1427, 808, 2005, 2006, 1844,
	2224, 1027, 3081, 1853, 3390, 1058, 1989, 3203, 3364, 1902,
	1563, 2909, 584, 1865, 1979, 2005, 2031, 1319, 2022, 2223,
	2177, 1816, 1980, 803, 631, 1981, 1400, 2544, 1986, 1589,
	2745, 1874, 1423, 1424, 1426, 1427, 1040, 587, 2744, 1905,
	2377, 2022, 1616, 1616, 1641, 1641, 1908, 808, 210, 2396,
	2397, 2067, 1038, 2071, 2071, 2084, 1866, 2005, 2495, 1039,
	2104, 2106, 2251, 2034, 1007, 2110, 1336, 2414, 1333, 807,
	1928, 1929, 1353, 1906, 1702, 2245, 1904, 2166, 2415, 1058,
	210, 2420, 1702, 2245, 1566, 2703, 1909, 640, 639, 210,
	790, 2383, 210, 790, 790, 1058, 3432, 1919, 2786, 3153,
	1920, 1921, 1702, 2245, 690, 3325, 3424, 1867, 2158, 1931,
	2595, 1386, 810, 2030, 1997, 2233, 3090, 2016, 2920, 1995,
	807, 2216, 1025, 1354, 1356, 810, 3391, 2702, 1006, 810,
	1208, 1718, 2204, 3452, 1223, 2168, 2648, 2643, 1744, 809,
	2702, 1729, 522, 2155, 3076, 1362, 2001, 3077, 2783, 1718,
	2141, 3285, 1702, 1699, 2151, 2152, 1142, 1899, 1004, 3472,
	2028, 2660, 1369, 1827, 1263, 2626, 517, 1711, 1982, 1727,
	630, 1712, 629, 2386, 2597, 210, 773, 1984, 2543, 1756,
	772, 763, 763, 1324, 3079, 764, 968, 669, 1509, 763,
	809, 996, 2022, 2125, 2035, 2582, 3082, 1890, 1040, 1755,
	3389, 633, 2095, 2043, 2930, 1888, 2625, 1058, 2047, 2048,
	139, 1205, 210, 2295, 2108, 996, 2079, 810, 2255, 2784,
	210, 2416, 1718, 2131, 2132, 2996, 2127, 1751, 2116, 2117,
	2418, 210, 3091, 3164, 999, 2215, 2171, 3323, 3439, 2910,
	2126, 1142, 591, 1585, 210, 3353, 3423, 1159, 1370, 3295,
	1725, 1726, 2458, 748, 1475, 2628, 2025, 1713, 999, 2130,
	210, 1058, 2150, 566, 210, 210, 3324, 809, 2385, 1715,
	3119, 2884, 2178, 2991, 806, 801, 1020, 1752, 2630, 2206,
	2999, 1520, 3388, 824, 2159, 2382, 3204, 1341, 1320, 3039,
	210, 3431, 210, 3429, 3150, 210, 3235, 1711, 3078, 2268,
	760, 1712, 3123, 2940, 2086, 2281, 2690, 1971, 2186, 2290,
	210, 2302, 1791, 2022, 2252, 1142, 2410, 210, 1371, 210,
	3450, 210, 2997, 2629, 1717, 806, 1557, 210, 1512, 1513,
	210, 1142, 210, 1988, 210, 2185, 210, 210, 2266, 210,
	1159, 1159, 1159, 2322, 1159, 749, 2189, 2237, 210, 210,
	1408, 210, 210, 1018, 1864, 2265, 1013, 572, 1616, 210,
	1641, 1322, 2384, 748, 915, 2575, 1399, 2218, 2220, 2226,
	2209, 509, 210, 691, 210, 1407, 1728, 210, 2361, 210,
	2236, 210, 3422, 2362, 2364, 801, 2238, 1713, 3451, 2372,
	2363, 2373, 2268, 2253, 2268, 3149, 2200, 1748, 2304, 1715,
	210, 210, 210, 206, 210, 512, 513, 1150, 1332, 530,
	512, 530, 540, 545, 3473, 2840, 561, 1718, 1828, 518,
	3453, 2335, 2336, 1173, 206, 1178, 1689, 210, 2269, 1005,
	3040, 2331, 2278, 584, 1969, 3467, 2346, 1972, 1996, 574,
	592, 593, 679, 1142, 139, 2294, 206, 2632, 1733, 2246,
	2248, 2249, 2250, 1686, 1717, 749, 3209, 2324, 587, 2365,
	2371, 2366, 1024, 1406, 2317, 995, 1737, 995, 3208, 1564,
	2337, 519, 2229, 2328, 3191, 2329, 3275, 2330, 2898, 2691,
	2609, 2332, 2605, 2381, 1303, 2338, 1968, 750, 3095, 1475,
	2348, 2303, 2285, 3151, 1408, 3094, 2388, 1142, 2191, 1173,
	1173, 2282, 1567, 2261, 1811, 3296, 2333, 1800, 1734, 520,
	2193, 521, 1799, 1773, 1915, 2782, 3333, 1560, 2273, 1684,
	2275, 2128, 2239, 2411, 2436, 2437, 210, 2122, 595, 594,
	1407, 1896, 2557, 1682, 568, 1685, 1565, 512, 512, 2446,
	2957, 1342, 2194, 2447, 2374, 206, 2375, 1718, 2376, 2391,
	2841, 573, 2393, 2390, 1714, 2192, 2842, 3127, 2279, 1266,
	3192, 2616, 2615, 2313, 1173, 2313, 1859, 2865, 2402, 1355,
	689, 2541, 2540, 2165, 2164, 2163, 2292, 2601, 596, 597,
	3466, 807, 1237, 1564, 682, 3280, 1738, 1613, 3112, 751,
	3199, 570, 1251, 2124, 2734, 1809, 1711, 750, 2123, 1238,
	1712, 3436, 2662, 1249, 2558, 3223, 2409, 2576, 3189, 3336,
	524, 1970, 3281, 3045, 1916, 1058, 1567, 2524, 1406, 2855,
	2529, 2039, 3438, 1384, 810, 2536, 2537, 752, 567, 3406,
	3292, 1366, 1566, 2538, 210, 1562, 3169, 3093, 3038, 2934,
	3190, 1364, 210, 2516, 2556, 1352, 1739, 1740, 2766, 210,
	1565, 3297, 210, 210, 1058, 1735, 2038, 2579, 1350, 2481,
	2240, 2241, 2421, 1058, 2560, 997, 571, 997, 3200, 2453,
	210, 2562, 1563, 3337, 1348, 2289, 3282, 569, 2263, 1346,
	2231, 1344, 2184, 1736, 1714, 210, 1713, 2580, 1595, 1338,
	1592, 1247, 1385, 1314, 2517, 1887, 2552, 803, 1715, 751,
	2379, 2378, 2591, 210, 210, 210, 2563, 2564, 2551, 210,
	2368, 1898, 210, 1871, 2794, 1674, 1523, 1317, 1227, 210,
	210, 210, 210, 210, 2550, 2593, 3384, 2566, 2693, 2602,
	2603, 2570, 761, 2553, 210, 210, 210, 752, 2599, 2559,
	2571, 3239, 996, 210, 2547, 2617, 1566, 2620, 2530, 2519,
	2520, 2521, 3330, 1717, 3069, 210, 1159, 996, 210, 2545,
	2955, 2915, 2913, 3433, 2897, 1058, 2689, 1741, 687, 688,
	1383, 2618, 1058, 2622, 2623, 2674, 2606, 210, 1365, 2673,
	210, 210, 680, 681, 1250, 999, 996, 2561, 1363, 2308,
	210, 2533, 1351, 1159, 210, 1248, 1159, 1159, 1159, 1616,
	999, 1641, 523, 210, 2535, 1349, 2546, 3356, 2675, 210,
	2642, 2577, 2578, 1410, 2594, 210, 2297, 210, 2296, 2276,
	1841, 1347, 2679, 1840, 210, 2649, 1345, 2583, 1343, 999,
	2641, 2600, 1742, 1838, 1836, 1616, 1337, 1641, 1246, 1886,
	1833, 2361, 2658, 2565, 1831, 2698, 1718, 1159, 1159, 1716,
	2361, 1142, 2573, 766, 768, 210, 210, 1829, 2707, 210,
	2631, 1820, 1770, 2610, 2644, 2637, 1768, 1759, 2697, 2589,
	2590, 2721, 1746, 1743, 1716, 2647, 1709, 1730, 2653, 1010,
	1719, 210, 1602, 1058, 210, 210, 1058, 210, 679, 2659,
	1142, 977, 2400, 3146, 2740, 3141, 1411, 3140, 1173, 1142,
	2237, 1705, 1202, 210, 3241, 2222, 1758, 2966, 2205, 1021,
	2205, 2205, 1727, 1758, 1601, 978, 561, 1868, 1788, 2203,
	1893, 2221, 2219, 828, 3287, 2652, 1381, 1382, 1417, 1418,
	3261, 3046, 206, 2242, 206, 206, 828, 1164, 525, 206,
	2225, 139, 1417, 1418, 2732, 810, 1058, 206, 1180, 2715,
	2716, 2717, 2750, 2718, 2719, 2706, 2736, 1058, 2645, 210,
	2704, 2573, 2646, 1414, 2401, 2260, 2259, 2720, 1420, 2713,
	2228, 2227, 1204, 3329, 3299, 2944, 2696, 2633, 2634, 2769,
	2635, 1419, 2751, 1714, 2939, 536, 1226, 1613, 1613, 2880,
	206, 206, 2316, 1164, 2109, 1419, 2804, 1677, 979, 1608,
	2747, 1142, 3448, 2581, 3465, 206, 3301, 2754, 1142, 2654,
	2655, 2752, 2656, 1262, 2487, 2488, 1488, 2778, 2779, 2780,
	1417, 1418, 2197, 2196, 799, 2042, 748, 206, 206, 206,
	206, 1164, 2886, 2789, 2197, 2587, 2198, 1327, 2852, 561,
	995, 206, 206, 1326, 2046, 2774, 2040, 1616, 801, 1641,
	1173, 2748, 210, 2013, 3016, 2785, 2787, 2788, 1368, 2885,
	2781, 1367, 1486, 2793, 995, 1484, 3474, 210, 2800, 2268,
	3272, 3183, 1167, 1058, 3181, 1056, 3114, 3063, 2809, 2990,
	2983, 2806, 2972, 2874, 800, 2807, 2950, 2937, 2936, 2935,
	2817, 2912, 2714, 210, 2819, 2687, 1616, 1616, 1641, 1641,
	2685, 2844, 2370, 2369, 2326, 2301, 2869, 206, 2277, 2000,
	2893, 1885, 1616, 1616, 1641, 1641, 1884, 1883, 749, 1142,
	1823, 2845, 1142, 206, 1928, 2810, 1822, 1821, 1803, 139,
	1781, 1780, 1776, 1491, 1775, 2791, 2856, 1496, 545, 210,
	1928, 2820, 1774, 1616, 1772, 1641, 2797, 1771, 2858, 2859,
	2805, 2921, 1401, 1380, 1379, 2853, 1339, 1275, 1274, 1273,
	1272, 1271, 1270, 1269, 1268, 1267, 1265, 1260, 1259, 996,
	996, 2848, 2931, 210, 210, 210, 1258, 2876, 1257, 1256,
	1219, 1218, 1142, 1217, 1216, 1215, 1214, 1213, 1207, 1201,
	1058, 210, 2933, 1142, 1199, 1159, 1198, 1023, 1022, 952,
	862, 1680, 2925, 774, 624, 758, 3202, 1374, 74, 1209,
	210, 611, 999, 999, 2947, 2901, 68, 2968, 2861, 2862,
	2911, 3341, 746, 210, 210, 1159, 1159, 1159, 2959, 210,
	210, 210, 2624, 1870, 210, 210, 2322, 1340, 210, 210,
	997, 2914, 2963, 2916, 210, 2943, 1872, 2958, 2926, 2927,
	2549, 2133, 3322, 3024, 2457, 3267, 3163, 1058, 2979, 2962,
	750, 2037, 2882, 2237, 997, 2361, 1505, 2953, 2948, 70,
	850, 935, 3070, 2900, 2352, 2890, 2949, 2351, 817, 1061,
	1690, 856, 1703, 1296, 2180, 2070, 1612, 859, 3014, 1614,
	861, 860, 1615, 1507, 858, 1611, 2960, 2964, 2291, 2320,
	1254, 735, 210, 1613, 2970, 736, 1694, 1994, 2032, 1142,
	2969, 2452, 1502, 830, 852, 2975, 2980, 2981, 2029, 1016,
	3001, 2974, 2985, 2989, 3010, 2988, 829, 2982, 2554, 2883,
	2701, 512, 2986, 2879, 3002, 2998, 3132, 2993, 1788, 996,
	1914, 2392, 1911, 627, 2484, 2014, 1008, 2092, 2085, 2081,
	1918, 1388, 206, 1477, 206, 2321, 1048, 206, 833, 1992,
	798, 1493, 751, 2426, 210, 2568, 2708, 1180, 2175, 1164,
	206, 1922, 1790, 976, 1058, 975, 1058, 974, 206, 1180,
	530, 3051, 999, 206, 1180, 3347, 3344, 1683, 2533, 561,
	2190, 1469, 1616, 2676, 1641, 846, 210, 210, 210, 1172,
	752, 2534, 2735, 1224, 3037, 3286, 1468, 770, 210, 3277,
	1035, 1034, 1033, 2608, 210, 3471, 210, 2908, 177, 210,
	210, 210, 3066, 3067, 174, 3089, 1142, 176, 1559, 210,
	210, 1159, 175, 1058, 2923, 1159, 3099, 3100, 3088, 2661,
	3097, 90, 3050, 3053, 3048, 3049, 35, 3055, 17, 115,
	3059, 3056, 2570, 210, 114, 113, 1058, 112, 3054, 1159,
	111, 110, 109, 108, 3116, 3068, 107, 3098, 106, 105,
	3087, 104, 103, 102, 101, 100, 99, 98, 97, 96,
	95, 94, 93, 2087, 92, 91, 996, 557, 210, 554,
	50, 49, 3129, 1142, 996, 89, 88, 1058, 16, 33,
	3106, 14, 3131, 3105, 2698, 3145, 54, 996, 55, 13,
	3109, 3128, 29, 3117, 30, 3110, 3142, 80, 79, 28,
	15, 27, 25, 11, 1058, 8, 3130, 3136, 7, 999,
	10, 1569, 12, 3125, 144, 3047, 143, 999, 73, 142,
	206, 72, 141, 3052, 140, 71, 23, 9, 136, 3228,
	999, 2945, 67, 138, 137, 64, 135, 134, 65, 133,
	132, 3175, 1058, 3152, 66, 3058, 131, 3155, 21, 5,
	210, 53, 210, 6, 1058, 210, 3147, 2741, 816, 83,
	84, 31, 62, 210, 61, 206, 206, 60, 20, 52,
	19, 995, 206, 1788, 168, 167, 166, 165, 3171, 3160,
	160, 159, 1808, 3186, 210, 164, 995, 162, 161, 163,
	1142, 206, 1142, 206, 158, 206, 210, 3176, 3177, 512,
	130, 170, 169, 3185, 210, 156, 3179, 3227, 152, 1159,
	151, 1824, 155, 157, 210, 995, 154, 3184, 153, 150,
	171, 129, 57, 3219, 3205, 128, 127, 3180, 126, 125,
	124, 3240, 56, 3232, 210, 210, 3234, 3231, 18, 2,
	1, 0, 3237, 0, 0, 0, 1616, 3217, 1641, 1142,
	3244, 3226, 561, 0, 210, 3248, 3249, 0, 0, 0,
	210, 3236, 206, 0, 1164, 206, 1056, 0, 3243, 3113,
	210, 0, 1142, 3238, 3118, 0, 3242, 561, 2962, 2698,
	0, 0, 206, 0, 0, 0, 3283, 206, 206, 3274,
	206, 0, 206, 3161, 206, 0, 206, 3135, 3212, 3213,
	0, 1616, 3260, 1641, 1892, 0, 0, 3265, 1894, 3273,
	1895, 0, 3294, 1142, 3270, 0, 210, 1159, 0, 206,
	0, 0, 210, 0, 1613, 0, 1159, 1159, 0, 3211,
	3258, 3161, 1159, 0, 3315, 210, 0, 210, 545, 1998,
	1142, 0, 0, 1931, 561, 0, 3231, 0, 3303, 0,
	3306, 3307, 3320, 3300, 3321, 0, 3326, 0, 1491, 210,
	1613, 0, 0, 3312, 0, 210, 210, 3338, 1058, 3319,
	0, 997, 0, 3311, 0, 1616, 210, 1641, 1142, 0,
	0, 0, 3339, 3357, 0, 3350, 997, 0, 3354, 3359,
	1142, 3361, 0, 3346, 3349, 0, 0, 3343, 1173, 0,
	3368, 0, 0, 3369, 0, 2091, 3313, 3314, 0, 210,
	3351, 0, 3318, 0, 0, 997, 3363, 0, 3365, 0,
	3395, 828, 0, 0, 0, 0, 0, 0, 3380, 3381,
	0, 0, 3383, 0, 3382, 1152, 0, 0, 0, 0,
	0, 3409, 3397, 0, 3411, 210, 3413, 0, 0, 1417,
	1418, 0, 3418, 0, 3419, 0, 0, 0, 0, 3410,
	1417, 1418, 3421, 3415, 0, 210, 1460, 1461, 1462, 0,
	0, 2322, 3412, 0, 3414, 1420, 0, 3416, 3417, 3430,
	0, 3420, 0, 3428, 3427, 0, 1420, 1228, 1231, 210,
	1466, 0, 512, 3434, 3435, 3442, 3437, 3444, 0, 0,
	3441, 0, 1419, 3447, 3446, 3346, 3440, 206, 3349, 2087,
	2087, 0, 0, 1419, 0, 1417, 1418, 0, 0, 0,
	0, 1439, 3455, 3454, 512, 0, 0, 3462, 1417, 1418,
	3461, 206, 3463, 512, 3464, 0, 206, 3468, 0, 1309,
	0, 1420, 0, 0, 0, 0, 3475, 0, 3476, 0,
	0, 3469, 3470, 0, 1420, 0, 0, 1931, 0, 3479,
	3480, 3481, 3483, 3484, 0, 816, 0, 0, 1419, 816,
	0, 3488, 1613, 0, 0, 0, 0, 0, 0, 0,
	3486, 1419, 1425, 1442, 1443, 1444, 1445, 1328, 0, 0,
	0, 0, 0, 1425, 0, 0, 0, 0, 995, 995,
	0, 1182, 0, 1186, 1142, 1192, 0, 0, 828, 0,
	2087, 2087, 2087, 1447, 1448, 1449, 0, 1457, 0, 530,
	1467, 1613, 1613, 0, 1447, 1448, 1449, 0, 0, 3358,
	0, 0, 0, 0, 0, 0, 0, 1613, 1613, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1425, 0,
	0, 0, 0, 0, 0, 0, 2213, 0, 0, 0,
	0, 1425, 0, 0, 206, 0, 1440, 0, 1613, 1455,
	0, 0, 0, 0, 0, 206, 0, 1440, 0, 1447,
	1448, 1449, 0, 0, 0, 0, 0, 0, 206, 1312,
	0, 0, 1447, 1448, 1449, 0, 1315, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 0, 0, 206, 2270,
	0, 0, 0, 0, 0, 0, 0, 3083, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1440, 0, 206, 0, 1180, 0, 0, 206,
	0, 0, 0, 0, 3080, 1440, 0, 3073, 0, 0,
	0, 1446, 0, 0, 1808, 0, 0, 0, 1441, 0,
	3071, 2213, 0, 512, 0, 2325, 3075, 0, 995, 1441,
	0, 206, 0, 0, 206, 0, 206, 0, 206, 0,
	206, 206, 0, 1164, 0, 3081, 0, 0, 0, 0,
	0, 0, 2344, 679, 1458, 2213, 2213, 0, 997, 997,
	0, 0, 0, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3074, 1180, 0, 1180, 0,
	0, 1164, 0, 1164, 1441, 1164, 0, 0, 1470, 1471,
	1472, 1473, 1474, 0, 0, 0, 0, 1441, 0, 0,
	0, 0, 0, 0, 206, 206, 206, 0, 206, 0,
	0, 2091, 2091, 0, 0, 0, 0, 0, 1490, 0,
	0, 0, 0, 0, 1503, 0, 0, 0, 0, 0,
	0, 206, 2423, 2424, 0, 0, 1604, 0, 1456, 1429,
	1421, 1422, 1423, 1424, 1426, 1427, 1459, 0, 1430, 1428,
	1429, 1421, 1422, 1423, 1424, 1426, 1427, 0, 0, 0,
	0, 0, 58, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 59, 995, 0, 1613, 0, 0,
	0, 0, 0, 995, 0, 0, 0, 3076, 63, 0,
	3077, 2087, 2087, 0, 0, 0, 995, 0, 0, 0,
	0, 0, 0, 0, 1428, 1429, 1421, 1422, 1423, 1424,
	1426, 1427, 2091, 2091, 2091, 0, 0, 0, 69, 1421,
	1422, 1423, 1424, 1426, 1427, 0, 0, 3079, 997, 0,
	1180, 0, 0, 2510, 2511, 2512, 0, 0, 0, 3082,
	0, 0, 0, 1553, 1553, 1553, 0, 0, 75, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 0, 0,
	0, 76, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2087, 2087, 2087, 2087, 2087, 2087, 2087, 2087, 2087,
	2087, 2087, 2087, 2087, 2087, 2087, 2087, 2087, 2087, 2087,
	0, 2087, 0, 0, 0, 0, 0, 0, 1761, 0,
	0, 0, 0, 0, 0, 77, 0, 0, 0, 0,
	0, 0, 816, 0, 0, 0, 0, 0, 206, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 0, 0, 0, 512, 0,
	0, 3078, 0, 0, 0, 0, 512, 0, 0, 0,
	0, 0, 0, 512, 0, 0, 512, 512, 0, 0,
	2487, 2488, 206, 2505, 2506, 2507, 0, 0, 0, 0,
	0, 0, 0, 0, 1180, 997, 0, 0, 0, 2770,
	0, 0, 0, 997, 0, 0, 0, 0, 0, 1180,
	0, 0, 0, 2172, 0, 0, 997, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2213, 2213, 206,
	78, 0, 0, 2213, 0, 0, 2612, 0, 0, 0,
	0, 2502, 0, 2213, 2612, 2213, 2612, 2612, 0, 0,
	0, 0, 1845, 0, 0, 0, 0, 0, 206, 206,
	206, 0, 145, 81, 0, 82, 0, 0, 0, 0,
	0, 1613, 0, 1860, 1861, 0, 0, 0, 0, 206,
	0, 0, 1164, 0, 178, 0, 0, 0, 2487, 2488,
	0, 2505, 2506, 2507, 0, 0, 674, 0, 0, 116,
	0, 2664, 0, 0, 2666, 2669, 0, 0, 0, 0,
	0, 0, 0, 2493, 206, 0, 0, 0, 206, 0,
	0, 0, 180, 0, 0, 0, 1613, 206, 0, 0,
	0, 0, 0, 1164, 0, 0, 0, 0, 0, 2213,
	0, 512, 0, 0, 0, 0, 117, 0, 2213, 2502,
	0, 0, 0, 2091, 2091, 0, 0, 0, 0, 149,
	0, 0, 0, 0, 0, 2508, 0, 179, 0, 0,
	0, 0, 0, 0, 2762, 2763, 0, 172, 0, 206,
	1808, 0, 0, 1808, 0, 173, 0, 991, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2503, 0, 0,
	1613, 0, 0, 0, 0, 2746, 148, 0, 1164, 206,
	0, 206, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2493, 0, 0, 0, 0, 201, 206, 0, 0,
	0, 0, 0, 2091, 2091, 2091, 2091, 2091, 2091, 2091,
	2091, 2091, 2091, 2091, 2091, 2091, 2091, 2091, 2091, 2091,
	2091, 2091, 0, 2091, 2821, 2822, 2823, 2824, 2825, 2826,
	2827, 2828, 2829, 2830, 2831, 2832, 2833, 2834, 2835, 2836,
	2837, 2838, 2839, 2508, 2843, 0, 0, 0, 0, 0,
	0, 0, 0, 2802, 0, 0, 0, 0, 0, 2504,
	0, 0, 0, 0, 0, 1912, 0, 1917, 0, 0,
	0, 0, 0, 1924, 0, 2503, 0, 0, 0, 0,
	1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942,
	1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952,
	1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962,
	1963, 1964, 1965, 1966, 1967, 0, 1973, 0, 1975, 1976,
	1977, 1978, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 206, 0, 2002, 0,
	0, 0, 0, 0, 0, 0, 512, 0, 0, 0,
	0, 0, 0, 1490, 0, 0, 0, 2027, 0, 0,
	0, 512, 0, 0, 0, 0, 0, 2504, 0, 0,
	0, 2499, 2500, 2501, 0, 0, 0, 0, 2498, 2496,
	2497, 2489, 2490, 2491, 2492, 2494, 2495, 1180, 2060, 2061,
	2062, 2063, 2064, 2065, 2066, 0, 0, 0, 0, 2083,
	0, 2094, 2096, 2101, 0, 0, 0, 0, 0, 0,
	2087, 0, 0, 0, 58, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 59, 0, 0, 0,
	0, 0, 0, 561, 0, 0, 0, 0, 0, 0,
	63, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2087, 0, 0, 0, 0, 0, 0,
	2256, 0, 0, 0, 0, 0, 0, 2941, 206, 206,
	69, 0, 0, 0, 0, 0, 0, 0, 0, 2499,
	2500, 2501, 0, 0, 0, 206, 2498, 2496, 2497, 2489,
	2490, 2491, 2492, 2494, 2495, 0, 0, 0, 0, 0,
	75, 0, 0, 0, 2213, 206, 0, 0, 0, 85,
	1417, 1418, 0, 76, 0, 0, 0, 2344, 2344, 0,
	0, 0, 0, 679, 679, 2213, 0, 0, 1808, 1808,
	0, 916, 679, 2213, 0, 0, 1420, 0, 206, 0,
	0, 2087, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2334, 0, 0, 0, 77, 0, 0,
	0, 0, 0, 1419, 0, 0, 0, 0, 0, 0,
	207, 1439, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 0, 0, 0, 3025, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 0, 0, 2765, 0, 0,
	0, 0, 0, 0, 0, 0, 2272, 0, 2274, 0,
	0, 0, 0, 1442, 1443, 1444, 1445, 0, 0, 0,
	0, 0, 0, 1425, 0, 0, 0, 0, 0, 0,
	0, 0, 206, 0, 0, 0, 0, 0, 1180, 0,
	206, 0, 78, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 1447, 1448, 1449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2213, 2213, 2213, 0, 145, 81, 0, 82, 0, 0,
	0, 0, 1180, 0, 0, 0, 0, 0, 2213, 0,
	2612, 0, 0, 1180, 1180, 206, 178, 0, 0, 0,
	0, 0, 0, 206, 206, 1053, 0, 1440, 674, 0,
	0, 116, 1171, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3122, 0, 0,
	0, 58, 2091, 0, 180, 0, 0, 0, 0, 0,
	0, 0, 0, 59, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3168, 0, 0, 0, 63, 117, 0,
	0, 0, 1180, 0, 0, 0, 0, 0, 0, 0,
	0, 149, 0, 0, 0, 2091, 0, 0, 1255, 179,
	0, 1446, 0, 0, 0, 0, 0, 69, 0, 172,
	0, 0, 0, 0, 0, 0, 3194, 173, 0, 1441,
	1279, 1279, 1279, 1171, 0, 0, 0, 2406, 2407, 0,
	0, 0, 0, 2413, 1310, 1311, 0, 75, 148, 0,
	0, 0, 0, 0, 0, 0, 85, 0, 0, 0,
	76, 0, 2427, 2428, 0, 0, 0, 0, 2027, 0,
	0, 0, 0, 0, 2213, 0, 2612, 2435, 0, 3188,
	0, 0, 0, 0, 0, 0, 0, 206, 0, 0,
	0, 0, 0, 2091, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2455, 77, 0, 0, 0, 561, 0,
	1373, 0, 0, 0, 3264, 0, 0, 0, 2470, 0,
	2669, 0, 0, 0, 0, 0, 0, 0, 206, 0,
	0, 0, 0, 0, 0, 0, 2487, 2488, 1180, 2505,
	2506, 2507, 0, 0, 0, 0, 0, 0, 1430, 1428,
	1429, 1421, 1422, 1423, 1424, 1426, 1427, 0, 206, 206,
	0, 0, 0, 0, 0, 0, 2101, 2101, 2101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2802, 2650,
	0, 1553, 0, 0, 512, 0, 0, 0, 0, 2539,
	0, 0, 0, 0, 3188, 0, 0, 2502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 78,
	0, 0, 0, 0, 0, 0, 2680, 0, 0, 2682,
	2683, 2684, 0, 0, 0, 0, 1417, 1418, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 145, 81, 0, 82, 0, 2612, 0, 0, 0,
	0, 0, 1420, 0, 0, 816, 0, 0, 0, 1180,
	0, 1180, 0, 178, 0, 0, 0, 0, 816, 2493,
	2727, 2728, 0, 0, 0, 674, 0, 0, 116, 1419,
	0, 0, 0, 3334, 0, 0, 0, 1439, 0, 1180,
	206, 0, 0, 2627, 0, 0, 2509, 0, 0, 0,
	206, 180, 0, 0, 0, 0, 0, 0, 0, 207,
	1063, 207, 207, 1063, 0, 1063, 207, 0, 0, 0,
	0, 2508, 0, 0, 207, 117, 0, 0, 0, 0,
	0, 0, 0, 2802, 0, 0, 0, 0, 149, 0,
	0, 0, 0, 0, 0, 0, 179, 0, 0, 1442,
	1443, 1444, 1445, 2503, 0, 0, 172, 0, 0, 1425,
	1590, 0, 211, 0, 173, 1063, 1063, 207, 207, 2213,
	0, 0, 0, 1599, 0, 0, 0, 0, 0, 0,
	2699, 0, 207, 0, 0, 1306, 0, 0, 0, 3188,
	1447, 1448, 1449, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 207, 207, 207, 207, 0, 1063,
	1063, 0, 0, 1180, 1063, 0, 0, 1063, 207, 207,
	0, 0, 578, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1440, 578, 2504, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2753, 0, 1063, 0, 1924, 0, 0,
	0, 0, 0, 2757, 2758, 0, 0, 2761, 0, 0,
	0, 2764, 0, 0, 207, 0, 0, 0, 0, 0,
	2768, 0, 0, 0, 0, 0, 0, 0, 0, 2775,
	207, 0, 2539, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1446, 0, 0,
	0, 0, 0, 2795, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1441, 0, 0, 0, 0,
	0, 0, 2811, 2812, 0, 2813, 2814, 2815, 0, 0,
	2816, 0, 0, 0, 2818, 882, 0, 2499, 2500, 2501,
	0, 0, 0, 0, 2498, 2496, 2497, 2489, 2490, 2491,
	2492, 2494, 2495, 0, 0, 1417, 1418, 0, 1450, 1451,
	1452, 1460, 1461, 1462, 0, 2846, 2847, 0, 1783, 0,
	0, 0, 0, 0, 205, 1795, 0, 0, 0, 0,
	0, 1420, 0, 0, 0, 1466, 0, 0, 0, 0,
	0, 0, 0, 2864, 1255, 585, 1814, 0, 1814, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1419, 0,
	0, 0, 0, 0, 0, 0, 1439, 585, 0, 0,
	0, 0, 0, 1436, 0, 0, 0, 0, 2976, 2977,
	2978, 0, 0, 0, 1430, 1428, 1429, 1421, 1422, 1423,
	1424, 1426, 1427, 0, 0, 0, 0, 2894, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2902, 2905, 0, 1795, 0, 0, 1856, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1442, 1443,
	1444, 1445, 0, 0, 0, 1869, 2922, 0, 1425, 0,
	0, 1875, 0, 1877, 0, 1879, 0, 1881, 0, 1882,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1457, 0, 207, 1467, 998, 0, 0, 1447,
	1448, 1449, 1897, 0, 0, 1063, 0, 207, 207, 0,
	0, 0, 0, 0, 1063, 207, 0, 0, 0, 0,
	207, 0, 0, 0, 0, 0, 0, 0, 0, 1434,
	1435, 1553, 0, 0, 0, 0, 0, 0, 0, 0,
	2971, 0, 0, 0, 1455, 0, 0, 0, 0, 0,
	0, 1063, 1440, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3003, 3004,
	0, 0, 0, 0, 3008, 3009, 0, 0, 0, 3012,
	3013, 0, 0, 0, 0, 0, 3017, 0, 0, 0,
	0, 0, 0, 0, 3107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3022, 1446, 0, 0, 0,
	0, 0, 3026, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1441, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1458,
	0, 0, 0, 0, 0, 0, 1063, 207, 0, 0,
	0, 0, 0, 1063, 0, 0, 0, 0, 0, 0,
	0, 1059, 0, 0, 1160, 0, 1059, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2156,
	0, 0, 207, 207, 0, 0, 0, 0, 0, 207,
	0, 0, 0, 0, 0, 2905, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1160, 1160, 207, 0,
	207, 0, 207, 1456, 0, 0, 1431, 1432, 1438, 1437,
	1433, 1459, 0, 1430, 1428, 1429, 1421, 1422, 1423, 1424,
	1426, 1427, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1160, 1160, 0, 0, 0, 1160, 0, 0, 1160, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1063, 0,
	1063, 0, 0, 2905, 0, 0, 1063, 0, 0, 207,
	0, 0, 207, 0, 0, 0, 0, 0, 0, 0,
	0, 1063, 1063, 0, 3156, 3157, 3158, 0, 0, 207,
	0, 0, 0, 0, 207, 207, 1160, 207, 0, 207,
	0, 207, 0, 207, 0, 0, 0, 0, 0, 0,
	3166, 3167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3174, 0, 207, 0, 0, 0,
	0, 0, 0, 205, 0, 205, 205, 1171, 0, 0,
	205, 0, 0, 0, 0, 0, 0, 0, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2905, 0, 2288, 0, 0,
	0, 1063, 1795, 3210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 816, 0, 0, 0, 0, 0, 0,
	0, 205, 205, 0, 0, 0, 0, 0, 0, 0,
	2905, 0, 0, 2905, 2327, 0, 205, 1279, 0, 1279,
	0, 1279, 0, 1171, 1171, 0, 0, 0, 0, 0,
	0, 0, 2905, 2905, 0, 0, 0, 0, 205, 205,
	205, 205, 0, 0, 0, 0, 2367, 0, 0, 0,
	0, 0, 205, 205, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1063, 0, 0, 0,
	0, 851, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3276, 0, 0, 3279, 0, 2387, 1171, 2389,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2403, 0, 0, 0, 205, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 0, 58,
	0, 0, 0, 0, 205, 0, 0, 0, 0, 0,
	1063, 59, 118, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 207, 0, 63, 1063, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	39, 120, 0, 0, 0, 0, 0, 0, 0, 0,
	816, 0, 0, 38, 0, 69, 1059, 0, 0, 0,
	0, 0, 0, 0, 0, 1160, 578, 0, 0, 0,
	0, 578, 0, 0, 0, 41, 0, 0, 1417, 1418,
	42, 791, 3379, 3379, 3379, 75, 0, 0, 121, 0,
	811, 0, 0, 40, 85, 0, 0, 0, 76, 43,
	0, 3398, 1059, 0, 1420, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2905,
	0, 2905, 986, 0, 0, 44, 0, 0, 0, 0,
	0, 1419, 0, 0, 0, 3379, 0, 0, 1063, 1439,
	0, 0, 77, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 0, 1063, 0,
	0, 0, 0, 0, 0, 2760, 0, 0, 0, 0,
	0, 207, 1063, 0, 0, 207, 0, 0, 0, 0,
	0, 1442, 1443, 1444, 1445, 0, 0, 3379, 0, 0,
	0, 1425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 0, 0, 0, 207, 1160, 0, 0,
	0, 886, 0, 1583, 1059, 998, 0, 0, 205, 0,
	0, 0, 1447, 1448, 1449, 0, 0, 78, 0, 0,
	0, 205, 1583, 0, 0, 45, 0, 0, 207, 585,
	0, 207, 2604, 207, 585, 207, 0, 207, 207, 0,
	0, 1063, 1063, 1063, 0, 1063, 0, 0, 48, 145,
	81, 0, 82, 0, 46, 0, 0, 0, 122, 0,
	207, 2640, 1171, 2288, 47, 1440, 0, 0, 0, 0,
	0, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 51, 0, 0, 116, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 0,
	0, 207, 207, 207, 0, 207, 0, 0, 0, 180,
	0, 0, 0, 0, 0, 0, 0, 2677, 0, 601,
	0, 2681, 0, 0, 0, 0, 0, 0, 207, 1160,
	2688, 1160, 0, 117, 0, 0, 0, 1160, 0, 1446,
	0, 0, 602, 0, 0, 0, 149, 0, 0, 0,
	0, 0, 1160, 1160, 179, 0, 0, 1441, 0, 0,
	0, 0, 0, 0, 172, 578, 0, 0, 0, 0,
	0, 0, 173, 603, 622, 0, 0, 0, 0, 0,
	0, 0, 2731, 0, 0, 0, 0, 0, 0, 0,
	0, 585, 0, 148, 604, 0, 3, 605, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2749, 628, 1171, 0, 0, 0, 0, 606,
	0, 0, 0, 0, 0, 0, 0, 0, 626, 0,
	2755, 0, 0, 0, 0, 0, 205, 205, 0, 0,
	0, 0, 1059, 205, 0, 607, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 0, 205, 608, 205, 0, 609, 632,
	0, 0, 0, 635, 0, 0, 1430, 1428, 1429, 1421,
	1422, 1423, 1424, 1426, 1427, 1417, 1418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 87, 0, 87,
	0, 1420, 0, 0, 0, 0, 1063, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1059, 0, 0,
	0, 0, 0, 205, 0, 0, 205, 0, 1419, 0,
	631, 0, 0, 0, 0, 0, 1439, 612, 0, 0,
	0, 0, 0, 205, 0, 1063, 0, 0, 585, 205,
	0, 205, 0, 205, 1063, 205, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 610, 0,
	0, 0, 0, 0, 811, 87, 0, 613, 0, 0,
	205, 0, 2759, 87, 0, 0, 0, 0, 0, 0,
	87, 1059, 0, 0, 614, 0, 207, 0, 1442, 1443,
	1444, 1445, 0, 0, 0, 0, 0, 1059, 1425, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 634, 0, 0, 0, 207, 207, 207, 0, 0,
	0, 615, 0, 0, 207, 0, 0, 0, 0, 1447,
	1448, 1449, 0, 0, 616, 0, 207, 1063, 0, 0,
	0, 0, 0, 0, 0, 0, 1063, 0, 0, 0,
	0, 621, 0, 1063, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 617, 0, 0, 630, 0, 629, 0,
	0, 207, 0, 618, 1063, 207, 0, 1063, 1063, 1063,
	0, 2942, 1440, 0, 207, 619, 0, 0, 0, 0,
	625, 0, 0, 0, 0, 636, 0, 633, 2954, 0,
	0, 0, 623, 0, 0, 791, 0, 0, 0, 1059,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1480, 0, 0, 0, 0, 1063, 1063,
	0, 0, 0, 0, 0, 0, 207, 0, 0, 0,
	0, 1489, 0, 0, 0, 1495, 0, 0, 0, 1160,
	1060, 2992, 0, 1161, 0, 1060, 1446, 0, 998, 0,
	0, 0, 0, 1059, 1063, 0, 207, 1063, 207, 0,
	0, 0, 0, 0, 1441, 0, 0, 0, 0, 0,
	0, 0, 998, 0, 207, 0, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1161, 1161, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1063, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1063, 0,
	0, 0, 1160, 1160, 1160, 0, 1160, 0, 0, 1161,
	1161, 1417, 1418, 0, 1161, 0, 0, 1161, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 1420, 0, 1581,
	0, 1584, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1430, 1428, 1429, 1421, 1422, 1423, 1424,
	1426, 1427, 0, 0, 1419, 1161, 0, 0, 0, 0,
	0, 0, 1439, 0, 0, 205, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 0, 3101, 0,
	0, 0, 0, 0, 0, 0, 2288, 0, 0, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1063, 205, 0, 0, 2412, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1442, 1443, 1444, 1445, 0, 0,
	0, 0, 0, 0, 1425, 205, 0, 1417, 1418, 0,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1420, 0, 1447, 1448, 1449, 0, 0,
	0, 0, 205, 0, 0, 205, 0, 205, 0, 205,
	0, 205, 205, 0, 0, 0, 0, 0, 0, 0,
	1419, 0, 0, 0, 0, 0, 0, 0, 1439, 0,
	0, 0, 0, 0, 205, 207, 207, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1440, 0,
	0, 1063, 207, 0, 0, 0, 1063, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3195, 0, 0, 0, 2405, 205, 205, 205, 0, 205,
	0, 0, 0, 0, 0, 0, 1063, 1063, 1063, 0,
	1442, 1443, 1444, 1445, 0, 0, 0, 1059, 0, 0,
	1425, 0, 205, 0, 0, 207, 0, 0, 0, 0,
	0, 3233, 0, 0, 0, 0, 0, 0, 1063, 0,
	0, 0, 1446, 0, 0, 0, 0, 0, 0, 0,
	0, 1447, 1448, 1449, 0, 0, 1059, 0, 0, 0,
	1441, 3257, 1171, 0, 0, 1059, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1060, 0, 0, 0, 0,
	0, 0, 0, 0, 1161, 0, 0, 0, 811, 0,
	0, 0, 0, 0, 1440, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1060, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3305, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1063, 0, 1063, 1160, 0,
	0, 0, 0, 0, 0, 0, 0, 1059, 0, 0,
	0, 0, 0, 0, 1059, 0, 0, 0, 1446, 1430,
	1428, 1429, 1421, 1422, 1423, 1424, 1426, 1427, 0, 0,
	0, 0, 0, 3340, 0, 1160, 1441, 0, 1160, 1160,
	1160, 791, 207, 3355, 791, 791, 0, 0, 0, 998,
	207, 207, 1063, 0, 1063, 0, 1063, 0, 0, 0,
	0, 0, 0, 0, 998, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1063, 0, 0,
	1063, 0, 0, 0, 0, 0, 0, 0, 0, 1160,
	1160, 0, 0, 1583, 0, 0, 1161, 0, 0, 1991,
	0, 0, 0, 1060, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 811, 0, 0, 0, 0, 1063, 0,
	0, 0, 0, 0, 0, 1059, 1489, 0, 1059, 0,
	1489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 0, 0, 0, 0, 1063, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1430, 1428, 1429, 1421, 1422,
	1423, 1424, 1426, 1427, 0, 0, 0, 0, 0, 205,
	205, 205, 0, 0, 0, 0, 0, 0, 1583, 0,
	0, 0, 0, 1063, 0, 0, 0, 0, 1059, 0,
	205, 0, 0, 0, 986, 1063, 0, 0, 0, 1059,
	0, 0, 0, 661, 207, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1584, 0,
	0, 0, 0, 0, 0, 205, 643, 0, 1161, 205,
	1161, 0, 0, 0, 0, 0, 1161, 0, 205, 0,
	87, 0, 0, 0, 0, 207, 0, 0, 0, 0,
	1063, 1161, 1161, 0, 0, 0, 0, 644, 0, 0,
	0, 0, 0, 0, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 207, 0, 0, 0,
	0, 646, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 0, 0, 0, 0, 0, 0, 666, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 647, 0, 0, 1059, 0, 0, 0, 0,
	205, 0, 205, 0, 0, 0, 0, 0, 0, 648,
	0, 0, 0, 0, 0, 0, 0, 0, 205, 0,
	0, 1060, 0, 0, 0, 0, 0, 0, 0, 649,
	0, 0, 650, 0, 87, 0, 0, 207, 1063, 0,
	0, 0, 0, 0, 0, 0, 0, 1063, 1063, 0,
	0, 0, 0, 1063, 0, 0, 0, 0, 0, 665,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 87, 0, 0, 0, 0, 207, 0, 1063,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 0,
	0, 0, 0, 0, 0, 0, 1060, 0, 0, 0,
	0, 0, 1059, 0, 0, 0, 0, 1160, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1160, 1160, 1160,
	0, 652, 0, 0, 87, 0, 998, 998, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 669, 653, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1059,
	1060, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 668, 1060, 0, 0, 0,
	0, 0, 654, 0, 0, 655, 0, 0, 0, 1417,
	1418, 663, 1450, 1451, 1452, 1460, 1461, 1462, 656, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1453, 0,
	0, 0, 0, 0, 0, 1420, 0, 0, 0, 1466,
	0, 0, 0, 0, 0, 0, 0, 657, 664, 0,
	0, 0, 0, 0, 0, 0, 0, 658, 0, 0,
	0, 0, 1419, 0, 0, 0, 0, 0, 0, 660,
	1439, 0, 0, 0, 659, 0, 0, 1436, 0, 0,
	0, 0, 0, 0, 1991, 0, 667, 0, 0, 205,
	205, 0, 0, 0, 0, 0, 1059, 662, 1059, 0,
	0, 0, 0, 0, 0, 1489, 205, 0, 1060, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 998, 0, 0, 0,
	0, 0, 1442, 1443, 1444, 1445, 0, 0, 0, 0,
	0, 0, 1425, 0, 0, 0, 0, 0, 1161, 0,
	0, 0, 0, 1160, 0, 1059, 0, 1160, 0, 205,
	0, 0, 1060, 0, 0, 0, 1457, 0, 0, 1467,
	0, 0, 0, 1447, 1448, 1449, 0, 0, 1059, 0,
	0, 1160, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1463, 0, 1464, 0, 0, 0,
	0, 0, 0, 1434, 1435, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1455, 1059,
	0, 0, 0, 0, 0, 986, 1440, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	986, 1161, 1161, 1161, 1465, 1161, 1059, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1454,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 998, 0, 0, 0, 0, 0, 0,
	0, 998, 0, 0, 1059, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1583, 0, 1059, 0, 0, 0,
	1446, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1441, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 0, 0, 87,
	87, 0, 87, 1458, 205, 205, 0, 0, 0, 0,
	0, 1160, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 87, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 811, 1456, 0, 0,
	1431, 1432, 1438, 1437, 1433, 1459, 0, 1430, 1428, 1429,
	1421, 1422, 1423, 1424, 1426, 1427, 0, 0, 0, 0,
	3033, 87, 0, 3032, 0, 0, 0, 0, 0, 1160,
	0, 0, 0, 0, 0, 0, 0, 0, 1160, 1160,
	0, 0, 0, 0, 1160, 0, 0, 0, 0, 0,
	0, 0, 0, 1417, 1418, 0, 1450, 1451, 1452, 1460,
	1461, 1462, 0, 0, 0, 0, 0, 0, 205, 0,
	0, 0, 1453, 0, 0, 0, 0, 0, 0, 1420,
	1059, 0, 0, 1466, 0, 0, 1060, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1419, 0, 0, 205,
	0, 0, 0, 0, 1439, 0, 0, 0, 0, 0,
	0, 1436, 0, 0, 0, 1060, 0, 0, 0, 0,
	0, 0, 0, 0, 1060, 0, 0, 0, 0, 205,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1442, 1443, 1444, 1445,
	0, 0, 0, 0, 0, 0, 1425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	1457, 0, 0, 1467, 0, 0, 0, 1447, 1448, 1449,
	0, 205, 986, 986, 0, 0, 0, 1161, 0, 0,
	0, 0, 0, 0, 0, 0, 1060, 0, 1463, 0,
	1464, 0, 0, 1060, 0, 0, 0, 1434, 1435, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 1455, 0, 1161, 0, 0, 1161, 1161, 1161,
	1440, 205, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 0, 0, 0, 0, 0, 0, 1465, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1454, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1161, 1161,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1446, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1060, 0, 0, 1060, 0, 0,
	0, 0, 1441, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1417, 1418, 0,
	1450, 1451, 1452, 1460, 1461, 1462, 0, 1458, 0, 0,
	0, 0, 986, 0, 0, 0, 1453, 0, 0, 0,
	0, 0, 0, 1420, 0, 0, 0, 1466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1060, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1060, 0,
	1419, 0, 0, 0, 0, 0, 0, 0, 1439, 0,
	0, 0, 0, 1417, 1418, 1436, 1450, 1451, 1452, 1460,
	1461, 1462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1453, 0, 0, 0, 0, 0, 0, 1420,
	0, 1456, 0, 1466, 1431, 1432, 1438, 1437, 1433, 1459,
	0, 1430, 1428, 1429, 1421, 1422, 1423, 1424, 1426, 1427,
	0, 0, 0, 0, 2475, 0, 1419, 2476, 0, 0,
	1442, 1443, 1444, 1445, 1439, 0, 0, 0, 0, 0,
	1425, 1436, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1457, 0, 0, 1467, 0, 986,
	0, 1447, 1448, 1449, 1060, 0, 0, 986, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1463, 0, 1464, 0, 1442, 1443, 1444, 1445,
	0, 1434, 1435, 0, 0, 0, 1425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1455, 0, 0, 0,
	0, 0, 0, 0, 1440, 0, 0, 0, 0, 0,
	1457, 0, 0, 1467, 0, 0, 0, 1447, 1448, 1449,
	0, 0, 1465, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 87, 1454, 1463, 0,
	1464, 0, 0, 0, 0, 0, 0, 1434, 1435, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 1455, 0, 0, 0, 0, 0, 0, 0,
	1440, 1060, 0, 0, 0, 0, 1161, 0, 1446, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1465, 0,
	0, 0, 0, 0, 0, 0, 1441, 0, 0, 0,
	0, 0, 0, 1454, 0, 0, 1161, 1161, 1161, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1458, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1060, 0,
	0, 0, 0, 0, 1446, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1441, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1458, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1456, 0, 0, 1431, 1432,
	1438, 1437, 1433, 1459, 0, 1430, 1428, 1429, 1421, 1422,
	1423, 1424, 1426, 1427, 0, 0, 0, 0, 2023, 1991,
	718, 2024, 748, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 725, 1060, 0, 1060, 0, 0,
	0, 0, 0, 0, 0, 0, 754, 723, 0, 0,
	0, 1456, 0, 0, 1431, 1432, 1438, 1437, 1433, 1459,
	0, 1430, 1428, 1429, 1421, 1422, 1423, 1424, 1426, 1427,
	724, 0, 0, 0, 0, 726, 0, 3031, 0, 755,
	0, 0, 0, 0, 0, 732, 733, 0, 0, 0,
	0, 742, 1161, 0, 1060, 0, 1161, 0, 0, 0,
	0, 0, 0, 0, 749, 727, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1060, 0, 0,
	1161, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 747, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1060, 0,
	0, 0, 728, 0, 0, 0, 0, 0, 0, 0,
	722, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1060, 729, 730, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 731, 0, 0, 0,
	0, 0, 0, 1060, 0, 0, 0, 0, 0, 0,
	0, 753, 0, 0, 0, 1060, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 750, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1161, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 744, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 738, 0, 0, 0, 0, 0, 739,
	0, 0, 0, 0, 0, 0, 720, 0, 751, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 721, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 740, 0, 0, 0, 737, 0, 0, 0,
	756, 757, 0, 0, 0, 0, 752, 0, 0, 0,
	0, 0, 0, 0, 741, 0, 0, 0, 1161, 0,
	0, 0, 0, 0, 0, 0, 0, 1161, 1161, 0,
	0, 0, 0, 1161, 743, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1057, 0, 0, 745, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1060,
	215, 216, 217, 218, 219, 1064, 220, 1065, 1066, 1067,
	1068, 463, 1069, 1070, 1071, 1072, 221, 222, 223, 224,
	464, 465, 225, 466, 226, 227, 467, 1073, 228, 229,
	230, 231, 232, 233, 1074, 1075, 234, 468, 469, 470,
	1076, 235, 471, 1077, 1062, 1078, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 1079, 245, 0, 246,
	247, 248, 1080, 937, 249, 250, 1081, 1082, 1084, 1083,
	1085, 1086, 1087, 251, 252, 253, 254, 255, 256, 472,
	473, 1088, 257, 1089, 259, 258, 1090, 260, 1091, 1092,
	261, 262, 263, 1093, 264, 1094, 265, 266, 1095, 474,
	267, 268, 270, 273, 269, 274, 275, 276, 475, 476,
	1096, 212, 1097, 0, 0, 0, 0, 277, 278, 279,
	477, 280, 281, 0, 282, 1098, 283, 1099, 1100, 938,
	284, 285, 1101, 286, 478, 1102, 479, 287, 1103, 288,
	289, 290, 291, 480, 481, 482, 339, 940, 292, 293,
	1104, 294, 295, 297, 0, 0, 0, 213, 296, 298,
	305, 1105, 939, 299, 483, 301, 300, 302, 303, 304,
	484, 1106, 485, 1107, 306, 941, 486, 942, 307, 308,
	309, 943, 310, 311, 0, 0, 312, 313, 314, 315,
	1108, 317, 316, 1109, 318, 487, 944, 319, 320, 945,
	1110, 321, 322, 1111, 1112, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 334, 332, 946, 335,
	336, 338, 337, 1113, 214, 947, 1114, 488, 489, 340,
	341, 1115, 342, 343, 344, 1116, 1117, 346, 347, 348,
	1118, 1119, 349, 490, 948, 350, 949, 491, 351, 345,
	352, 353, 354, 355, 356, 357, 1120, 358, 359, 492,
	360, 493, 361, 1121, 362, 0, 363, 364, 365, 366,
	367, 368, 494, 369, 370, 1122, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	1123, 384, 950, 385, 386, 387, 388, 495, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 1124, 407,
	408, 401, 403, 404, 405, 402, 406, 409, 410, 1125,
	411, 391, 392, 412, 951, 413, 496, 414, 415, 1126,
	425, 416, 417, 418, 393, 419, 423, 424, 420, 421,
	422, 497, 1127, 427, 428, 426, 1128, 429, 430, 431,
	432, 433, 271, 434, 272, 435, 1129, 498, 499, 500,
	501, 1130, 442, 1131, 436, 437, 502, 438, 503, 1132,
	439, 440, 441, 0, 443, 444, 1133, 1134, 445, 446,
	447, 448, 449, 451, 1135, 452, 1136, 450, 453, 454,
	455, 504, 505, 506, 1137, 457, 456, 507, 1138, 1139,
	1140, 1141, 458, 459, 508, 460, 461, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1057, 0, 0, 0, 0, 0, 0, 0, 2143, 0,
	0, 0, 0, 0, 0, 0, 2144, 215, 216, 217,
	218, 219, 1064, 220, 1065, 1066, 1067, 1068, 463, 1069,
	1070, 1071, 1072, 221, 222, 223, 224, 464, 465, 225,
	466, 226, 227, 467, 1073, 228, 229, 230, 231, 232,
	233, 1074, 1075, 234, 468, 469, 470, 1076, 235, 471,
	1077, 1062, 1078, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 1079, 245, 0, 246, 247, 248, 1080,
	937, 249, 250, 1081, 1082, 1084, 1083, 1085, 1086, 1087,
	251, 252, 253, 254, 255, 256, 472, 473, 1088, 257,
	1089, 259, 258, 1090, 260, 1091, 1092, 261, 262, 263,
	1093, 264, 1094, 265, 266, 1095, 474, 267, 268, 270,
	273, 269, 274, 275, 276, 475, 476, 1096, 212, 1097,
	0, 0, 0, 0, 277, 278, 279, 477, 280, 281,
	0, 282, 1098, 283, 1099, 1100, 938, 284, 285, 1101,
	286, 478, 1102, 479, 287, 1103, 288, 289, 290, 291,
	480, 481, 482, 339, 940, 292, 293, 1104, 294, 295,
	297, 0, 0, 0, 213, 296, 298, 305, 1105, 939,
	299, 483, 301, 300, 302, 303, 304, 484, 1106, 485,
	1107, 306, 941, 486, 942, 307, 308, 309, 943, 310,
	311, 0, 0, 312, 313, 314, 315, 1108, 317, 316,
	1109, 318, 487, 944, 319, 320, 945, 1110, 321, 322,
	1111, 1112, 323, 324, 0, 325, 326, 328, 330, 327,
	329, 331, 333, 334, 332, 946, 335, 336, 338, 337,
	1113, 214, 947, 1114, 488, 489, 340, 341, 1115, 342,
	343, 344, 1116, 1117, 346, 347, 348, 1118, 1119, 349,
	490, 948, 350, 949, 491, 351, 345, 352, 353, 354,
	355, 356, 357, 1120, 358, 359, 492, 360, 493, 361,
	1121, 362, 0, 363, 364, 365, 366, 367, 368, 494,
	369, 370, 1122, 371, 372, 373, 374, 375, 0, 377,
	378, 379, 376, 380, 381, 382, 383, 1123, 384, 950,
	385, 386, 387, 388, 495, 389, 0, 390, 394, 395,
	396, 397, 398, 399, 400, 1124, 407, 408, 401, 403,
	404, 405, 402, 406, 409, 410, 1125, 411, 391, 392,
	412, 951, 413, 496, 414, 415, 1126, 425, 416, 417,
	418, 393, 419, 423, 424, 420, 421, 422, 497, 1127,
	427, 428, 426, 1128, 429, 430, 431, 432, 433, 271,
	434, 272, 435, 1129, 498, 499, 500, 501, 1130, 442,
	1131, 436, 437, 502, 438, 503, 1132, 439, 440, 441,
	0, 443, 444, 1133, 1134, 445, 446, 447, 448, 449,
	451, 1135, 452, 1136, 450, 453, 454, 455, 504, 505,
	506, 1137, 457, 456, 507, 1138, 1139, 1140, 1141, 458,
	459, 508, 460, 461, 462, 0, 0, 0, 0, 1057,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3057, 215, 216, 217, 218,
	219, 1064, 220, 1065, 1066, 1067, 1068, 463, 1069, 1070,
	1071, 1072, 221, 222, 223, 224, 464, 465, 225, 466,
	226, 227, 467, 1073, 228, 229, 230, 231, 232, 233,
	1074, 1075, 234, 468, 469, 470, 1076, 235, 471, 1077,
	1062, 1078, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 1079, 245, 0, 246, 247, 248, 1080, 937,
	249, 250, 1081, 1082, 1084, 1083, 1085, 1086, 1087, 251,
	252, 253, 254, 255, 256, 472, 473, 1088, 257, 1089,
	259, 258, 1090, 260, 1091, 1092, 261, 262, 263, 1093,
	264, 1094, 265, 266, 1095, 474, 267, 268, 270, 273,
	269, 274, 275, 276, 475, 476, 1096, 212, 1097, 0,
	0, 0, 0, 277, 278, 279, 477, 280, 281, 0,
	282, 1098, 283, 1099, 1100, 938, 284, 285, 1101, 286,
	478, 1102, 479, 287, 1103, 288, 289, 290, 291, 480,
	481, 482, 339, 940, 292, 293, 1104, 294, 295, 297,
	0, 0, 0, 213, 296, 298, 305, 1105, 939, 299,
	483, 301, 300, 302, 303, 304, 484, 1106, 485, 1107,
	306, 941, 486, 942, 307, 308, 309, 943, 310, 311,
	0, 0, 312, 313, 314, 315, 1108, 317, 316, 1109,
	318, 487, 944, 319, 320, 945, 1110, 321, 322, 1111,
	1112, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 946, 335, 336, 338, 337, 1113,
	214, 947, 1114, 488, 489, 340, 341, 1115, 342, 343,
	344, 1116, 1117, 346, 347, 348, 1118, 1119, 349, 490,
	948, 350, 949, 491, 351, 345, 352, 353, 354, 355,
	356, 357, 1120, 358, 359, 492, 360, 493, 361, 1121,
	362, 0, 363, 364, 365, 366, 367, 368, 494, 369,
	370, 1122, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 1123, 384, 950, 385,
	386, 387, 388, 495, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 1124, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 1125, 411, 391, 392, 412,
	951, 413, 496, 414, 415, 1126, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 497, 1127, 427,
	428, 426, 1128, 429, 430, 431, 432, 433, 271, 434,
	272, 435, 1129, 498, 499, 500, 501, 1130, 442, 1131,
	436, 437, 502, 438, 503, 1132, 439, 440, 441, 0,
	443, 444, 1133, 1134, 445, 446, 447, 448, 449, 451,
	1135, 452, 1136, 450, 453, 454, 455, 504, 505, 506,
	1137, 457, 456, 507, 1138, 1139, 1140, 1141, 458, 459,
	508, 460, 461, 462, 1057, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3162,
	0, 215, 216, 217, 218, 219, 1064, 220, 1065, 1066,
	1067, 1068, 463, 1069, 1070, 1071, 1072, 221, 222, 223,
	224, 464, 465, 225, 466, 226, 227, 467, 1073, 228,
	229, 230, 231, 232, 233, 1074, 1075, 234, 468, 469,
	470, 1076, 235, 471, 1077, 1062, 1078, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 1079, 245, 0,
	246, 247, 248, 1080, 937, 249, 250, 1081, 1082, 1084,
	1083, 1085, 1086, 1087, 251, 252, 253, 254, 255, 256,
	472, 473, 1088, 257, 1089, 259, 258, 1090, 260, 1091,
	1092, 261, 262, 263, 1093, 264, 1094, 265, 266, 1095,
	474, 267, 268, 270, 273, 269, 274, 275, 276, 475,
	476, 1096, 212, 1097, 0, 0, 0, 0, 277, 278,
	279, 477, 280, 281, 0, 282, 1098, 283, 1099, 1100,
	938, 284, 285, 1101, 286, 478, 1102, 479, 287, 1103,
	288, 289, 290, 291, 480, 481, 482, 339, 940, 292,
	293, 1104, 294, 295, 297, 0, 0, 0, 213, 296,
	298, 305, 1105, 939, 299, 483, 301, 300, 302, 303,
	304, 484, 1106, 485, 1107, 306, 941, 486, 942, 307,
	308, 309, 943, 310, 311, 0, 0, 312, 313, 314,
	315, 1108, 317, 316, 1109, 318, 487, 944, 319, 320,
	945, 1110, 321, 322, 1111, 1112, 323, 324, 0, 325,
	326, 328, 330, 327, 329, 331, 333, 334, 332, 946,
	335, 336, 338, 337, 1113, 214, 947, 1114, 488, 489,
	340, 341, 1115, 342, 343, 344, 1116, 1117, 346, 347,
	348, 1118, 1119, 349, 490, 948, 350, 949, 491, 351,
	345, 352, 353, 354, 355, 356, 357, 1120, 358, 359,
	492, 360, 493, 361, 1121, 362, 0, 363, 364, 365,
	366, 367, 368, 494, 369, 370, 1122, 371, 372, 373,
	374, 375, 0, 377, 378, 379, 376, 380, 381, 382,
	383, 1123, 384, 950, 385, 386, 387, 388, 495, 389,
	0, 390, 394, 395, 396, 397, 398, 399, 400, 1124,
	407, 408, 401, 403, 404, 405, 402, 406, 409, 410,
	1125, 411, 391, 392, 412, 951, 413, 496, 414, 415,
	1126, 425, 416, 417, 418, 393, 419, 423, 424, 420,
	421, 422, 497, 1127, 427, 428, 426, 1128, 429, 430,
	431, 432, 433, 271, 434, 272, 435, 1129, 498, 499,
	500, 501, 1130, 442, 1131, 436, 437, 502, 438, 503,
	1132, 439, 440, 441, 0, 443, 444, 1133, 1134, 445,
	446, 447, 448, 449, 451, 1135, 452, 1136, 450, 453,
	454, 455, 504, 505, 506, 1137, 457, 456, 507, 1138,
	1139, 1140, 1141, 458, 459, 508, 460, 461, 462, 1057,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2798, 0, 215, 216, 217, 218,
	219, 1064, 220, 1065, 1066, 1067, 1068, 463, 1069, 1070,
	1071, 1072, 221, 222, 223, 224, 464, 465, 225, 466,
	226, 227, 467, 1073, 228, 229, 230, 231, 232, 233,
	1074, 1075, 234, 468, 469, 470, 1076, 235, 471, 1077,
	1062, 1078, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 1079, 245, 0, 246, 247, 248, 1080, 937,
	249, 250, 1081, 1082, 1084, 1083, 1085, 1086, 1087, 251,
	252, 253, 254, 255, 256, 472, 473, 1088, 257, 1089,
	259, 258, 1090, 260, 1091, 1092, 261, 262, 263, 1093,
	264, 1094, 265, 266, 1095, 474, 267, 268, 270, 273,
	269, 274, 275, 276, 475, 476, 1096, 212, 1097, 0,
	0, 0, 0, 277, 278, 279, 477, 280, 281, 0,
	282, 1098, 283, 1099, 1100, 938, 284, 285, 1101, 286,
	478, 1102, 479, 287, 1103, 288, 289, 290, 291, 480,
	481, 482, 339, 940, 292, 293, 1104, 294, 295, 297,
	0, 0, 0, 213, 296, 298, 305, 1105, 939, 299,
	483, 301, 300, 302, 303, 304, 484, 1106, 485, 1107,
	306, 941, 486, 942, 307, 308, 309, 943, 310, 311,
	0, 0, 312, 313, 314, 315, 1108, 317, 316, 1109,
	318, 487, 944, 319, 320, 945, 1110, 321, 322, 1111,
	1112, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 946, 335, 336, 338, 337, 1113,
	214, 947, 1114, 488, 489, 340, 341, 1115, 342, 343,
	344, 1116, 1117, 346, 347, 348, 1118, 1119, 349, 490,
	948, 350, 949, 491, 351, 345, 352, 353, 354, 355,
	356, 357, 1120, 358, 359, 492, 360, 493, 361, 1121,
	362, 0, 363, 364, 365, 366, 367, 368, 494, 369,
	370, 1122, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 1123, 384, 950, 385,
	386, 387, 388, 495, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 1124, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 1125, 411, 391, 392, 412,
	951, 413, 496, 414, 415, 1126, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 497, 1127, 427,
	428, 426, 1128, 429, 430, 431, 432, 433, 271, 434,
	272, 435, 1129, 498, 499, 500, 501, 1130, 442, 1131,
	436, 437, 502, 438, 503, 1132, 439, 440, 441, 0,
	443, 444, 1133, 1134, 445, 446, 447, 448, 449, 451,
	1135, 452, 1136, 450, 453, 454, 455, 504, 505, 506,
	1137, 457, 456, 507, 1138, 1139, 1140, 1141, 458, 459,
	508, 460, 461, 462, 1057, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2790,
	0, 215, 216, 217, 218, 219, 1064, 220, 1065, 1066,
	1067, 1068, 463, 1069, 1070, 1071, 1072, 221, 222, 223,
	224, 464, 465, 225, 466, 226, 227, 467, 1073, 228,
	229, 230, 231, 232, 233, 1074, 1075, 234, 468, 469,
	470, 1076, 235, 471, 1077, 1062, 1078, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 1079, 245, 0,
	246, 247, 248, 1080, 937, 249, 250, 1081, 1082, 1084,
	1083, 1085, 1086, 1087, 251, 252, 253, 254, 255, 256,
	472, 473, 1088, 257, 1089, 259, 258, 1090, 260, 1091,
	1092, 261, 262, 263, 1093, 264, 1094, 265, 266, 1095,
	474, 267, 268, 270, 273, 269, 274, 275, 276, 475,
	476, 1096, 212, 1097, 0, 0, 0, 0, 277, 278,
	279, 477, 280, 281, 0, 282, 1098, 283, 1099, 1100,
	938, 284, 285, 1101, 286, 478, 1102, 479, 287, 1103,
	288, 289, 290, 291, 480, 481, 482, 339, 940, 292,
	293, 1104, 294, 295, 297, 0, 0, 0, 213, 296,
	298, 305, 1105, 939, 299, 483, 301, 300, 302, 303,
	304, 484, 1106, 485, 1107, 306, 941, 486, 942, 307,
	308, 309, 943, 310, 311, 0, 0, 312, 313, 314,
	315, 1108, 317, 316, 1109, 318, 487, 944, 319, 320,
	945, 1110, 321, 322, 1111, 1112, 323, 324, 0, 325,
	326, 328, 330, 327, 329, 331, 333, 334, 332, 946,
	335, 336, 338, 337, 1113, 214, 947, 1114, 488, 489,
	340, 341, 1115, 342, 343, 344, 1116, 1117, 346, 347,
	348, 1118, 1119, 349, 490, 948, 350, 949, 491, 351,
	345, 352, 353, 354, 355, 356, 357, 1120, 358, 359,
	492, 360, 493, 361, 1121, 362, 0, 363, 364, 365,
	366, 367, 368, 494, 369, 370, 1122, 371, 372, 373,
	374, 375, 0, 377, 378, 379, 376, 380, 381, 382,
	383, 1123, 384, 950, 385, 386, 387, 388, 495, 389,
	0, 390, 394, 395, 396, 397, 398, 399, 400, 1124,
	407, 408, 401, 403, 404, 405, 402, 406, 409, 410,
	1125, 411, 391, 392, 412, 951, 413, 496, 414, 415,
	1126, 425, 416, 417, 418, 393, 419, 423, 424, 420,
	421, 422, 497, 1127, 427, 428, 426, 1128, 429, 430,
	431, 432, 433, 271, 434, 272, 435, 1129, 498, 499,
	500, 501, 1130, 442, 1131, 436, 437, 502, 438, 503,
	1132, 439, 440, 441, 0, 443, 444, 1133, 1134, 445,
	446, 447, 448, 449, 451, 1135, 452, 1136, 450, 453,
	454, 455, 504, 505, 506, 1137, 457, 456, 507, 1138,
	1139, 1140, 1141, 458, 459, 508, 460, 461, 462, 1057,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2663, 0, 215, 216, 217, 218,
	219, 1064, 220, 1065, 1066, 1067, 1068, 463, 1069, 1070,
	1071, 1072, 221, 222, 223, 224, 464, 465, 225, 466,
	226, 227, 467, 1073, 228, 229, 230, 231, 232, 233,
	1074, 1075, 234, 468, 469, 470, 1076, 235, 471, 1077,
	1062, 1078, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 1079, 245, 0, 246, 247, 248, 1080, 937,
	249, 250, 1081, 1082, 1084, 1083, 1085, 1086, 1087, 251,
	252, 253, 254, 255, 256, 472, 473, 1088, 257, 1089,
	259, 258, 1090, 260, 1091, 1092, 261, 262, 263, 1093,
	264, 1094, 265, 266, 1095, 474, 267, 268, 270, 273,
	269, 274, 275, 276, 475, 476, 1096, 212, 1097, 0,
	0, 0, 0, 277, 278, 279, 477, 280, 281, 0,
	282, 1098, 283, 1099, 1100, 938, 284, 285, 1101, 286,
	478, 1102, 479, 287, 1103, 288, 289, 290, 291, 480,
	481, 482, 339, 940, 292, 293, 1104, 294, 295, 297,
	0, 0, 0, 213, 296, 298, 305, 1105, 939, 299,
	483, 301, 300, 302, 303, 304, 484, 1106, 485, 1107,
	306, 941, 486, 942, 307, 308, 309, 943, 310, 311,
	0, 0, 312, 313, 314, 315, 1108, 317, 316, 1109,
	318, 487, 944, 319, 320, 945, 1110, 321, 322, 1111,
	1112, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 946, 335, 336, 338, 337, 1113,
	214, 947, 1114, 488, 489, 340, 341, 1115, 342, 343,
	344, 1116, 1117, 346, 347, 348, 1118, 1119, 349, 490,
	948, 350, 949, 491, 351, 345, 352, 353, 354, 355,
	356, 357, 1120, 358, 359, 492, 360, 493, 361, 1121,
	362, 0, 363, 364, 365, 366, 367, 368, 494, 369,
	370, 1122, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 1123, 384, 950, 385,
	386, 387, 388, 495, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 1124, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 1125, 411, 391, 392, 412,
	951, 413, 496, 414, 415, 1126, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 497, 1127, 427,
	428, 426, 1128, 429, 430, 431, 432, 433, 271, 434,
	272, 435, 1129, 498, 499, 500, 501, 1130, 442, 1131,
	436, 437, 502, 438, 503, 1132, 439, 440, 441, 0,
	443, 444, 1133, 1134, 445, 446, 447, 448, 449, 451,
	1135, 452, 1136, 450, 453, 454, 455, 504, 505, 506,
	1137, 457, 456, 507, 1138, 1139, 1140, 1141, 458, 459,
	508, 460, 461, 462, 1057, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2036,
	0, 215, 216, 217, 218, 219, 1064, 220, 1065, 1066,
	1067, 1068, 463, 1069, 1070, 1071, 1072, 221, 222, 223,
	224, 464, 465, 225, 466, 226, 227, 467, 1073, 228,
	229, 230, 231, 232, 233, 1074, 1075, 234, 468, 469,
	470, 1076, 235, 471, 1077, 1062, 1078, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 1079, 245, 0,
	246, 247, 248, 1080, 937, 249, 250, 1081, 1082, 1084,
	1083, 1085, 1086, 1087, 251, 252, 253, 254, 255, 256,
	472, 473, 1088, 257, 1089, 259, 258, 1090, 260, 1091,
	1092, 261, 262, 263, 1093, 264, 1094, 265, 266, 1095,
	474, 267, 268, 270, 273, 269, 274, 275, 276, 475,
	476, 1096, 212, 1097, 0, 0, 0, 0, 277, 278,
	279, 477, 280, 281, 0, 282, 1098, 283, 1099, 1100,
	938, 284, 285, 1101, 286, 478, 1102, 479, 287, 1103,
	288, 289, 290, 291, 480, 481, 482, 339, 940, 292,
	293, 1104, 294, 295, 297, 0, 0, 0, 213, 296,
	298, 305, 1105, 939, 299, 483, 301, 300, 302, 303,
	304, 484, 1106, 485, 1107, 306, 941, 486, 942, 307,
	308, 309, 943, 310, 311, 0, 0, 312, 313, 314,
	315, 1108, 317, 316, 1109, 318, 487, 944, 319, 320,
	945, 1110, 321, 322, 1111, 1112, 323, 324, 0, 325,
	326, 328, 330, 327, 329, 331, 333, 334, 332, 946,
	335, 336, 338, 337, 1113, 214, 947, 1114, 488, 489,
	340, 341, 1115, 342, 343, 344, 1116, 1117, 346, 347,
	348, 1118, 1119, 349, 490, 948, 350, 949, 491, 351,
	345, 352, 353, 354, 355, 356, 357, 1120, 358, 359,
	492, 360, 493, 361, 1121, 362, 0, 363, 364, 365,
	366, 367, 368, 494, 369, 370, 1122, 371, 372, 373,
	374, 375, 0, 377, 378, 379, 376, 380, 381, 382,
	383, 1123, 384, 950, 385, 386, 387, 388, 495, 389,
	0, 390, 394, 395, 396, 397, 398, 399, 400, 1124,
	407, 408, 401, 403, 404, 405, 402, 406, 409, 410,
	1125, 411, 391, 392, 412, 951, 413, 496, 414, 415,
	1126, 425, 416, 417, 418, 393, 419, 423, 424, 420,
	421, 422, 497, 1127, 427, 428, 426, 1128, 429, 430,
	431, 432, 433, 271, 434, 272, 435, 1129, 498, 499,
	500, 501, 1130, 442, 1131, 436, 437, 502, 438, 503,
	1132, 439, 440, 441, 0, 443, 444, 1133, 1134, 445,
	446, 447, 448, 449, 451, 1135, 452, 1136, 450, 453,
	454, 455, 504, 505, 506, 1137, 457, 456, 507, 1138,
	1139, 1140, 1141, 458, 459, 508, 460, 461, 462, 1165,
	0, 1057, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1766, 0, 0, 0, 215, 216,
	217, 218, 219, 1064, 220, 1065, 1066, 1067, 1068, 463,
	1069, 1070, 1071, 1072, 221, 222, 223, 224, 464, 465,
	225, 466, 226, 227, 467, 1073, 228, 229, 230, 231,
	232, 233, 1074, 1075, 234, 468, 469, 470, 1076, 235,
	471, 1077, 1062, 1078, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 1079, 245, 0, 246, 247, 248,
	1080, 937, 249, 250, 1081, 1082, 1084, 1083, 1085, 1086,
	1087, 251, 252, 253, 254, 255, 256, 472, 473, 1088,
	257, 1089, 259, 258, 1090, 260, 1091, 1092, 261, 262,
	263, 1093, 264, 1094, 265, 266, 1095, 474, 267, 268,
	270, 273, 269, 274, 275, 276, 475, 476, 1096, 212,
	1097, 0, 0, 0, 0, 277, 278, 279, 477, 280,
	281, 0, 282, 1098, 283, 1099, 1100, 938, 284, 285,
	1101, 286, 478, 1102, 479, 287, 1103, 288, 289, 290,
	291, 480, 481, 482, 339, 940, 292, 293, 1104, 294,
	295, 297, 0, 0, 0, 213, 296, 298, 305, 1105,
	939, 299, 483, 301, 300, 302, 303, 304, 484, 1106,
	485, 1107, 306, 941, 486, 942, 307, 308, 309, 943,
	310, 311, 0, 0, 312, 313, 314, 315, 1108, 317,
	316, 1109, 318, 487, 944, 319, 320, 945, 1110, 321,
	322, 1111, 1112, 323, 324, 0, 325, 326, 328, 330,
	327, 329, 331, 333, 334, 332, 946, 335, 336, 338,
	337, 1113, 214, 947, 1114, 488, 489, 340, 341, 1115,
	342, 343, 344, 1116, 1117, 346, 347, 348, 1118, 1119,
	349, 490, 948, 350, 949, 491, 351, 345, 352, 353,
	354, 355, 356, 357, 1120, 358, 359, 492, 360, 493,
	361, 1121, 362, 0, 363, 364, 365, 366, 367, 368,
	494, 369, 370, 1122, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 1123, 384,
	950, 385, 386, 387, 388, 495, 389, 0, 390, 394,
	395, 396, 397, 398, 399, 400, 1124, 407, 408, 401,
	403, 404, 405, 402, 406, 409, 410, 1125, 411, 391,
	392, 412, 951, 413, 496, 414, 415, 1126, 425, 416,
	417, 418, 393, 419, 423, 424, 420, 421, 422, 497,
	1127, 427, 428, 426, 1128, 429, 430, 431, 432, 433,
	271, 434, 272, 435, 1129, 498, 499, 500, 501, 1130,
	442, 1131, 436, 437, 502, 438, 503, 1132, 439, 440,
	441, 0, 443, 444, 1133, 1134, 445, 446, 447, 448,
	449, 451, 1135, 452, 1136, 450, 453, 454, 455, 504,
	505, 506, 1137, 457, 456, 507, 1138, 1139, 1140, 1141,
	458, 459, 508, 460, 461, 462, 1054, 0, 1057, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	1064, 220, 1065, 1066, 1067, 1068, 463, 1069, 1070, 1071,
	1072, 221, 222, 223, 224, 464, 465, 225, 466, 226,
	227, 467, 1073, 228, 229, 230, 231, 232, 233, 1074,
	1075, 234, 468, 469, 470, 1076, 235, 471, 1077, 1062,
	1078, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 1079, 245, 0, 246, 247, 248, 1080, 937, 249,
	250, 1081, 1082, 1084, 1083, 1085, 1086, 1087, 251, 252,
	253, 254, 255, 256, 472, 473, 1088, 257, 1089, 259,
	258, 1090, 260, 1091, 1092, 261, 262, 263, 1093, 264,
	1094, 265, 266, 1095, 474, 267, 268, 270, 273, 269,
	274, 275, 276, 475, 476, 1096, 212, 1097, 0, 0,
	0, 0, 277, 278, 279, 477, 280, 281, 0, 282,
	1098, 283, 1099, 1100, 938, 284, 285, 1101, 286, 478,
	1102, 479, 287, 1103, 288, 289, 290, 291, 480, 481,
	482, 339, 940, 292, 293, 1104, 294, 295, 297, 0,
	0, 0, 213, 296, 298, 305, 1105, 939, 299, 483,
	301, 300, 302, 303, 304, 484, 1106, 485, 1107, 306,
	941, 486, 942, 307, 308, 309, 943, 310, 311, 0,
	0, 312, 313, 314, 315, 1108, 317, 316, 1109, 318,
	487, 944, 319, 320, 945, 1110, 321, 322, 1111, 1112,
	323, 324, 0, 325, 326, 328, 330, 327, 329, 331,
	333, 334, 332, 946, 335, 336, 338, 337, 1113, 214,
	947, 1114, 488, 489, 340, 341, 1115, 342, 343, 344,
	1116, 1117, 346, 347, 348, 1118, 1119, 349, 490, 948,
	350, 949, 491, 351, 345, 352, 353, 354, 355, 356,
	357, 1120, 358, 359, 492, 360, 493, 361, 1121, 362,
	0, 363, 364, 365, 366, 367, 368, 494, 369, 370,
	1122, 371, 372, 373, 374, 375, 0, 377, 378, 379,
	376, 380, 381, 382, 383, 1123, 384, 950, 385, 386,
	387, 388, 495, 389, 0, 390, 394, 395, 396, 397,
	398, 399, 400, 1124, 407, 408, 401, 403, 404, 405,
	402, 406, 409, 410, 1125, 411, 391, 392, 412, 951,
	413, 496, 414, 415, 1126, 425, 416, 417, 418, 393,
	419, 423, 424, 420, 421, 422, 497, 1127, 427, 428,
	426, 1128, 429, 430, 431, 432, 433, 271, 434, 272,
	435, 1129, 498, 499, 500, 501, 1130, 442, 1131, 436,
	437, 502, 438, 503, 1132, 439, 440, 441, 0, 443,
	444, 1133, 1134, 445, 446, 447, 448, 449, 451, 1135,
	452, 1136, 450, 453, 454, 455, 504, 505, 506, 1137,
	457, 456, 507, 1138, 1139, 1140, 1141, 458, 459, 508,
	460, 461, 462, 1057, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 1064, 220, 1065, 1066, 1067,
	1068, 463, 1069, 1070, 1071, 1072, 221, 222, 223, 224,
	464, 465, 225, 466, 226, 227, 467, 1073, 228, 229,
	230, 231, 232, 233, 1074, 1075, 234, 468, 469, 470,
	1076, 235, 471, 1077, 1062, 1078, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 1079, 245, 0, 246,
	247, 248, 1080, 937, 249, 250, 1081, 1082, 1084, 1083,
	1085, 1086, 1087, 251, 252, 253, 254, 255, 256, 472,
	473, 1088, 257, 1089, 259, 258, 1090, 260, 1091, 1092,
	261, 262, 263, 1093, 264, 1094, 265, 266, 1095, 474,
	267, 268, 270, 273, 269, 274, 275, 276, 475, 476,
	1096, 212, 1097, 0, 0, 0, 0, 277, 278, 279,
	477, 280, 281, 0, 282, 1098, 283, 1099, 1100, 938,
	284, 285, 1101, 286, 478, 1102, 479, 287, 1103, 288,
	289, 290, 291, 480, 481, 482, 339, 940, 292, 293,
	1104, 294, 295, 297, 0, 0, 0, 213, 296, 298,
	305, 1105, 939, 299, 483, 301, 300, 302, 303, 304,
	484, 1106, 485, 1107, 306, 941, 486, 942, 307, 308,
	309, 943, 310, 311, 0, 0, 312, 313, 314, 315,
	1108, 317, 316, 1109, 318, 487, 944, 319, 320, 945,
	1110, 321, 322, 1111, 1112, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 334, 332, 946, 335,
	336, 338, 337, 1113, 214, 947, 1114, 488, 489, 340,
	341, 1115, 342, 343, 344, 1116, 1117, 346, 347, 348,
	1118, 1119, 349, 490, 948, 350, 949, 491, 351, 345,
	352, 353, 354, 355, 356, 357, 1120, 358, 359, 492,
	360, 493, 361, 1121, 362, 0, 363, 364, 365, 366,
	367, 368, 494, 369, 370, 1122, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	1123, 384, 950, 385, 386, 387, 388, 495, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 1124, 407,
	408, 401, 403, 404, 405, 402, 406, 409, 410, 1125,
	411, 391, 392, 412, 951, 413, 496, 414, 415, 1126,
	425, 416, 417, 418, 393, 419, 423, 424, 420, 421,
	422, 497, 1127, 427, 428, 426, 1128, 429, 430, 431,
	432, 433, 271, 434, 272, 435, 1129, 498, 499, 500,
	501, 1130, 442, 1131, 436, 437, 502, 438, 503, 1132,
	439, 440, 441, 0, 443, 444, 1133, 1134, 445, 446,
	447, 448, 449, 451, 1135, 452, 1136, 450, 453, 454,
	455, 504, 505, 506, 1137, 457, 456, 507, 1138, 1139,
	1140, 1141, 458, 459, 508, 460, 461, 462, 2012, 0,
	879, 836, 837, 838, 834, 835, 848, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 2009, 220, 0, 0, 0, 0, 928, 853,
	0, 0, 0, 221, 222, 223, 224, 464, 894, 873,
	905, 863, 904, 903, 0, 228, 865, 864, 231, 232,
	233, 855, 927, 234, 963, 964, 470, 0, 235, 934,
	0, 917, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	937, 249, 250, 920, 918, 919, 924, 922, 921, 923,
	251, 252, 253, 254, 908, 256, 901, 900, 825, 257,
	0, 259, 258, 0, 260, 2010, 0, 261, 899, 263,
	0, 264, 0, 265, 266, 0, 831, 267, 268, 270,
	273, 269, 274, 275, 276, 954, 955, 844, 212, 0,
	0, 0, 0, 0, 277, 278, 279, 898, 896, 897,
	0, 282, 0, 283, 0, 0, 938, 284, 285, 0,
	286, 961, 0, 854, 287, 0, 288, 289, 290, 291,
	929, 930, 933, 339, 940, 292, 293, 0, 294, 295,
	875, 0, 0, 0, 213, 296, 298, 305, 0, 939,
	299, 887, 878, 889, 891, 892, 893, 888, 0, 880,
	0, 306, 941, 931, 942, 307, 308, 309, 943, 913,
	914, 0, 0, 312, 313, 314, 315, 0, 317, 316,
	0, 318, 962, 944, 319, 320, 945, 0, 321, 322,
	0, 0, 323, 324, 0, 325, 326, 328, 330, 327,
	329, 331, 333, 867, 332, 946, 335, 336, 338, 337,
	822, 214, 947, 845, 932, 902, 340, 341, 0, 876,
	343, 877, 0, 0, 346, 347, 348, 0, 0, 349,
	490, 948, 350, 949, 956, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 957, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 895,
	369, 370, 0, 371, 372, 373, 374, 375, 0, 377,
	378, 379, 376, 380, 381, 382, 383, 0, 384, 950,
	385, 386, 387, 388, 832, 389, 0, 390, 394, 395,
	396, 397, 398, 399, 400, 0, 407, 408, 868, 869,
	871, 872, 402, 406, 409, 410, 925, 411, 391, 392,
	412, 951, 413, 890, 870, 415, 0, 425, 416, 417,
	418, 393, 419, 423, 936, 420, 421, 422, 958, 0,
	427, 428, 426, 0, 429, 430, 431, 432, 433, 271,
	434, 272, 866, 0, 909, 910, 911, 912, 0, 442,
	0, 436, 437, 959, 438, 960, 843, 439, 440, 441,
	0, 443, 444, 0, 826, 445, 446, 447, 448, 449,
	451, 926, 452, 0, 874, 453, 454, 455, 504, 906,
	953, 2008, 457, 456, 507, 0, 0, 0, 0, 458,
	459, 508, 460, 461, 462, 823, 0, 0, 0, 0,
	0, 0, 0, 821, 0, 0, 0, 0, 819, 820,
	2011, 0, 0, 0, 0, 0, 0, 849, 2007, 0,
	0, 812, 847, 879, 836, 837, 838, 834, 835, 848,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 928, 853, 0, 0, 0, 221, 222, 223, 224,
	464, 894, 873, 905, 863, 904, 903, 0, 228, 865,
	864, 231, 232, 233, 855, 927, 234, 963, 964, 470,
	0, 235, 934, 0, 917, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 937, 249, 250, 920, 918, 919, 924,
	922, 921, 923, 251, 252, 253, 254, 908, 256, 901,
	900, 825, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 899, 263, 0, 264, 0, 265, 266, 0, 831,
	267, 268, 270, 273, 269, 274, 275, 276, 954, 955,
	844, 212, 0, 0, 0, 0, 0, 277, 278, 279,
	898, 896, 897, 0, 282, 0, 283, 0, 0, 938,
	284, 285, 0, 286, 961, 0, 854, 287, 0, 288,
	289, 290, 291, 929, 930, 933, 339, 940, 292, 293,
	0, 294, 295, 875, 0, 0, 0, 213, 296, 298,
	305, 0, 939, 299, 887, 878, 889, 891, 892, 893,
	888, 0, 880, 0, 306, 941, 931, 942, 307, 308,
	309, 943, 913, 914, 0, 0, 312, 313, 314, 315,
	0, 317, 316, 0, 318, 962, 944, 319, 320, 945,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 867, 332, 946, 335,
	336, 338, 337, 822, 214, 947, 845, 932, 902, 340,
	341, 0, 876, 343, 877, 0, 0, 346, 347, 348,
	0, 0, 349, 490, 948, 350, 949, 956, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 957,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 895, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 950, 385, 386, 387, 388, 832, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 178, 407,
	408, 868, 869, 871, 872, 402, 406, 409, 410, 925,
	411, 391, 392, 412, 951, 413, 890, 870, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 936, 420, 421,
	422, 958, 0, 427, 428, 426, 180, 429, 430, 431,
	432, 433, 271, 434, 272, 866, 0, 909, 910, 911,
	912, 0, 442, 0, 436, 437, 959, 438, 960, 843,
	439, 440, 441, 0, 443, 444, 0, 826, 445, 446,
	447, 448, 449, 451, 926, 452, 0, 874, 453, 454,
	455, 1304, 906, 953, 0, 457, 456, 507, 0, 0,
	0, 172, 458, 459, 508, 460, 461, 462, 823, 173,
	0, 0, 0, 0, 0, 0, 821, 0, 0, 0,
	0, 819, 820, 879, 836, 837, 838, 834, 835, 848,
	1494, 1492, 0, 0, 0, 847, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 928, 853, 0, 0, 0, 221, 222, 223, 224,
	464, 894, 873, 905, 863, 904, 903, 0, 228, 865,
	864, 231, 232, 233, 855, 927, 234, 963, 964, 470,
	0, 235, 934, 0, 917, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 937, 249, 250, 920, 918, 919, 924,
	922, 921, 923, 251, 252, 253, 254, 908, 256, 901,
	900, 825, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 899, 263, 0, 264, 0, 265, 266, 0, 831,
	267, 268, 270, 273, 269, 274, 275, 276, 954, 955,
	844, 212, 0, 0, 0, 0, 0, 277, 278, 279,
	898, 896, 897, 0, 282, 0, 283, 0, 0, 938,
	284, 285, 0, 286, 961, 0, 854, 287, 0, 288,
	289, 290, 291, 929, 930, 933, 339, 940, 292, 293,
	0, 294, 295, 875, 0, 0, 0, 213, 296, 298,
	305, 0, 939, 299, 887, 878, 889, 891, 892, 893,
	888, 0, 880, 0, 306, 941, 931, 942, 307, 308,
	309, 943, 913, 914, 0, 0, 312, 313, 314, 315,
	0, 317, 316, 0, 318, 962, 944, 319, 320, 945,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 867, 332, 946, 335,
	336, 338, 337, 822, 214, 947, 845, 932, 902, 340,
	341, 0, 876, 343, 877, 0, 0, 346, 347, 348,
	0, 0, 349, 490, 948, 350, 949, 956, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 957,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 895, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 950, 385, 386, 387, 388, 832, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 178, 407,
	408, 868, 869, 871, 872, 402, 406, 409, 410, 925,
	411, 391, 392, 412, 951, 413, 890, 870, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 936, 420, 421,
	422, 958, 0, 427, 428, 426, 180, 429, 430, 431,
	432, 433, 271, 434, 272, 866, 0, 909, 910, 911,
	912, 0, 442, 0, 436, 437, 959, 438, 960, 843,
	439, 440, 441, 0, 443, 444, 0, 826, 445, 446,
	447, 448, 449, 451, 926, 452, 0, 874, 453, 454,
	455, 1304, 906, 953, 0, 457, 456, 507, 0, 0,
	0, 172, 458, 459, 508, 460, 461, 462, 823, 173,
	0, 0, 0, 0, 0, 0, 821, 0, 0, 0,
	0, 819, 820, 879, 836, 837, 838, 834, 835, 848,
	1494, 2425, 0, 0, 0, 847, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 928, 853, 0, 0, 0, 221, 222, 223, 224,
	464, 894, 873, 905, 863, 904, 903, 0, 228, 865,
	864, 231, 232, 233, 855, 927, 234, 963, 964, 470,
	0, 235, 934, 0, 917, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 937, 249, 250, 920, 918, 919, 924,
	922, 921, 923, 251, 252, 253, 254, 908, 256, 901,
	900, 825, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 899, 263, 0, 264, 0, 265, 266, 0, 831,
	267, 268, 270, 273, 269, 274, 275, 276, 954, 955,
	844, 212, 0, 0, 0, 0, 0, 277, 278, 279,
	898, 896, 897, 0, 282, 0, 283, 0, 0, 938,
	284, 285, 0, 286, 961, 0, 854, 287, 0, 288,
	289, 290, 291, 929, 930, 933, 339, 940, 292, 293,
	0, 294, 295, 875, 0, 0, 0, 213, 296, 298,
	305, 0, 939, 299, 887, 878, 889, 891, 892, 893,
	888, 0, 880, 0, 306, 941, 931, 942, 307, 308,
	309, 943, 913, 914, 0, 0, 312, 313, 314, 315,
	0, 317, 316, 0, 318, 962, 944, 319, 320, 945,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 867, 332, 946, 335,
	336, 338, 337, 822, 214, 947, 845, 932, 902, 340,
	341, 0, 876, 343, 877, 0, 0, 346, 347, 348,
	0, 0, 349, 490, 948, 350, 949, 956, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 957,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 895, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 950, 385, 386, 387, 388, 832, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 178, 407,
	408, 868, 869, 871, 872, 402, 406, 409, 410, 925,
	411, 391, 392, 412, 951, 413, 890, 870, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 936, 420, 421,
	422, 958, 0, 427, 428, 426, 180, 429, 430, 431,
	432, 433, 271, 434, 272, 866, 0, 909, 910, 911,
	912, 0, 442, 0, 436, 437, 959, 438, 960, 843,
	439, 440, 441, 0, 443, 444, 0, 826, 445, 446,
	447, 448, 449, 451, 926, 452, 0, 874, 453, 454,
	455, 1304, 906, 953, 0, 457, 456, 507, 0, 0,
	0, 172, 458, 459, 508, 460, 461, 462, 823, 173,
	0, 0, 0, 0, 0, 0, 821, 0, 0, 0,
	0, 819, 820, 879, 836, 837, 838, 834, 835, 848,
	1494, 1492, 0, 0, 0, 847, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 928, 853, 0, 0, 0, 221, 222, 223, 224,
	464, 894, 873, 905, 863, 904, 903, 2097, 228, 865,
	864, 231, 232, 233, 855, 927, 234, 963, 964, 470,
	0, 235, 934, 0, 917, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 937, 249, 250, 920, 918, 919, 924,
	922, 921, 923, 251, 252, 253, 254, 908, 256, 901,
	900, 825, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 899, 263, 0, 264, 0, 265, 266, 0, 831,
	267, 268, 270, 273, 269, 274, 275, 276, 954, 955,
	844, 212, 0, 0, 0, 0, 0, 277, 278, 279,
	898, 896, 897, 0, 282, 0, 283, 0, 2102, 938,
	284, 285, 0, 286, 961, 0, 854, 287, 0, 288,
	289, 290, 291, 929, 930, 933, 339, 940, 292, 293,
	0, 294, 295, 875, 0, 0, 0, 213, 296, 298,
	305, 0, 939, 299, 887, 878, 889, 891, 892, 893,
	888, 0, 880, 0, 306, 941, 931, 942, 307, 308,
	309, 943, 913, 914, 0, 0, 312, 313, 314, 315,
	0, 317, 316, 2098, 318, 962, 944, 319, 320, 945,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 867, 332, 946, 335,
	336, 338, 337, 822, 214, 947, 845, 932, 902, 340,
	341, 0, 876, 343, 877, 0, 0, 346, 347, 348,
	0, 0, 349, 490, 948, 350, 949, 956, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 957,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 895, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 950, 385, 386, 387, 388, 832, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 0, 407,
	408, 868, 869, 871, 872, 402, 406, 409, 410, 925,
	411, 391, 392, 412, 951, 413, 890, 870, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 936, 420, 421,
	422, 958, 0, 427, 428, 426, 0, 429, 430, 431,
	432, 433, 271, 434, 272, 866, 0, 909, 910, 911,
	912, 0, 442, 2099, 436, 437, 959, 438, 960, 843,
	439, 440, 441, 0, 443, 444, 0, 826, 445, 446,
	447, 448, 449, 451, 926, 452, 0, 874, 453, 454,
	455, 504, 906, 953, 0, 457, 456, 507, 0, 0,
	0, 0, 458, 459, 508, 460, 461, 462, 823, 0,
	0, 0, 0, 0, 0, 0, 821, 0, 0, 0,
	0, 819, 820, 0, 0, 0, 0, 0, 0, 0,
	849, 0, 0, 0, 815, 847, 879, 836, 837, 838,
	834, 835, 848, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 928, 853, 0, 0, 0, 221,
	222, 223, 224, 464, 894, 873, 905, 863, 904, 903,
	0, 228, 865, 864, 231, 232, 233, 855, 927, 234,
	963, 964, 470, 0, 235, 934, 0, 917, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 937, 249, 250, 920,
	918, 919, 924, 922, 921, 923, 251, 252, 253, 254,
	908, 256, 901, 900, 825, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 899, 263, 0, 264, 0, 265,
	266, 0, 831, 267, 268, 270, 273, 269, 274, 275,
	276, 954, 955, 844, 212, 0, 0, 0, 0, 0,
	277, 278, 279, 898, 896, 897, 0, 282, 0, 283,
	0, 0, 938, 284, 285, 0, 286, 961, 0, 854,
	287, 0, 288, 289, 290, 291, 929, 930, 933, 339,
	940, 292, 293, 0, 294, 295, 875, 0, 0, 0,
	213, 296, 298, 305, 0, 939, 299, 887, 878, 889,
	891, 892, 893, 888, 0, 880, 0, 306, 941, 931,
	942, 307, 308, 309, 943, 913, 914, 0, 0, 312,
	313, 314, 315, 0, 317, 316, 0, 318, 962, 944,
	319, 320, 945, 0, 321, 322, 0, 0, 323, 324,
	0, 325, 326, 328, 330, 327, 329, 331, 333, 867,
	332, 946, 335, 336, 338, 337, 822, 214, 947, 845,
	932, 902, 340, 341, 0, 876, 343, 877, 827, 0,
	346, 347, 348, 0, 0, 349, 490, 948, 350, 949,
	956, 351, 345, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 957, 360, 493, 361, 0, 362, 0, 363,
	364, 365, 366, 367, 368, 895, 369, 370, 0, 371,
	372, 373, 374, 375, 0, 377, 378, 379, 376, 380,
	381, 382, 383, 0, 384, 950, 385, 386, 387, 388,
	832, 389, 0, 390, 394, 395, 396, 397, 398, 399,
	400, 0, 407, 408, 868, 869, 871, 872, 402, 406,
	409, 410, 925, 411, 391, 392, 412, 951, 413, 890,
	870, 415, 0, 425, 416, 417, 418, 393, 419, 423,
	936, 420, 421, 422, 958, 0, 427, 428, 426, 0,
	429, 430, 431, 432, 433, 271, 434, 272, 866, 0,
	909, 910, 911, 912, 0, 442, 0, 436, 437, 959,
	438, 960, 843, 439, 440, 441, 0, 443, 444, 0,
	826, 445, 446, 447, 448, 449, 451, 926, 452, 0,
	874, 453, 454, 455, 504, 906, 953, 0, 457, 456,
	507, 0, 0, 0, 0, 458, 459, 508, 460, 461,
	462, 823, 0, 0, 0, 0, 0, 0, 0, 821,
	0, 0, 0, 0, 819, 820, 879, 836, 837, 838,
	834, 835, 848, 849, 0, 0, 0, 0, 847, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 928, 853, 0, 0, 0, 221,
	222, 223, 224, 464, 894, 873, 905, 863, 904, 903,
	0, 228, 865, 864, 231, 232, 233, 855, 927, 234,
	963, 964, 470, 0, 235, 934, 0, 917, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 3352, 248, 0, 937, 249, 250, 920,
	918, 919, 924, 922, 921, 923, 251, 252, 253, 254,
	908, 256, 901, 900, 825, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 899, 263, 0, 264, 0, 265,
	266, 0, 831, 267, 268, 270, 273, 269, 274, 275,
	276, 954, 955, 844, 212, 0, 0, 0, 0, 0,
	277, 278, 279, 898, 896, 897, 0, 282, 0, 283,
	0, 0, 938, 284, 285, 0, 286, 961, 0, 854,
	287, 0, 288, 289, 290, 291, 929, 930, 933, 339,
	940, 292, 293, 0, 294, 295, 875, 0, 0, 0,
	213, 296, 298, 305, 0, 939, 299, 887, 878, 889,
	891, 892, 893, 888, 0, 880, 0, 306, 941, 931,
	942, 307, 308, 309, 943, 913, 914, 0, 0, 312,
	313, 314, 315, 0, 317, 316, 0, 318, 962, 944,
	319, 320, 945, 0, 321, 322, 0, 0, 323, 324,
	0, 325, 326, 328, 330, 327, 329, 331, 333, 867,
	332, 946, 335, 336, 338, 337, 822, 214, 947, 845,
	932, 902, 340, 341, 0, 876, 343, 877, 827, 0,
	346, 347, 348, 0, 0, 349, 490, 948, 350, 949,
	956, 351, 345, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 957, 360, 493, 361, 0, 362, 0, 363,
	364, 365, 366, 367, 368, 895, 369, 370, 0, 371,
	372, 373, 374, 375, 0, 377, 378, 379, 376, 380,
	381, 382, 383, 0, 384, 950, 385, 386, 387, 388,
	832, 389, 0, 390, 394, 395, 396, 397, 398, 399,
	400, 0, 407, 408, 868, 869, 871, 872, 402, 406,
	409, 410, 925, 411, 391, 392, 412, 951, 413, 890,
	870, 415, 0, 425, 416, 417, 418, 393, 419, 423,
	936, 420, 421, 422, 958, 0, 427, 428, 426, 0,
	429, 430, 431, 432, 433, 271, 434, 272, 866, 0,
	909, 910, 911, 912, 0, 442, 0, 436, 437, 959,
	438, 960, 843, 439, 440, 441, 0, 443, 444, 0,
	826, 445, 446, 447, 448, 449, 451, 926, 452, 0,
	874, 453, 454, 455, 504, 906, 953, 0, 457, 456,
	507, 0, 0, 0, 0, 458, 459, 508, 460, 461,
	462, 823, 0, 0, 0, 0, 0, 0, 0, 821,
	0, 0, 0, 0, 819, 820, 879, 836, 837, 838,
	834, 835, 848, 849, 0, 0, 0, 0, 847, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 928, 853, 0, 0, 0, 221,
	222, 223, 224, 464, 894, 873, 905, 863, 904, 903,
	0, 228, 865, 864, 231, 232, 233, 855, 927, 234,
	963, 964, 470, 0, 235, 934, 0, 917, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 3218, 248, 0, 937, 249, 250, 920,
	918, 919, 924, 922, 921, 923, 251, 252, 253, 254,
	908, 256, 901, 900, 825, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 899, 263, 0, 264, 0, 265,
	266, 0, 831, 267, 268, 270, 273, 269, 274, 275,
	276, 954, 955, 844, 212, 0, 0, 0, 0, 0,
	277, 278, 279, 898, 896, 897, 0, 282, 0, 283,
	0, 0, 938, 284, 285, 0, 286, 961, 0, 854,
	287, 0, 288, 289, 290, 291, 929, 930, 933, 339,
	940, 292, 293, 0, 294, 295, 875, 0, 0, 0,
	213, 296, 298, 305, 0, 939, 299, 887, 878, 889,
	891, 892, 893, 888, 0, 880, 0, 306, 941, 931,
	942, 307, 308, 309, 943, 913, 914, 0, 0, 312,
	313, 314, 315, 0, 317, 316, 0, 318, 962, 944,
	319, 320, 945, 0, 321, 322, 0, 0, 323, 324,
	0, 325, 326, 328, 330, 327, 329, 331, 333, 867,
	332, 946, 335, 336, 338, 337, 822, 214, 947, 845,
	932, 902, 340, 341, 0, 876, 343, 877, 827, 0,
	346, 347, 348, 0, 0, 349, 490, 948, 350, 949,
	956, 351, 345, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 957, 360, 493, 361, 0, 362, 0, 363,
	364, 365, 366, 367, 368, 895, 369, 370, 0, 371,
	372, 373, 374, 375, 0, 377, 378, 379, 376, 380,
	381, 382, 383, 0, 384, 950, 385, 386, 387, 388,
	832, 389, 0, 390, 394, 395, 396, 397, 398, 399,
	400, 0, 407, 408, 868, 869, 871, 872, 402, 406,
	409, 410, 925, 411, 391, 392, 412, 951, 413, 890,
	870, 415, 0, 425, 416, 417, 418, 393, 419, 423,
	936, 420, 421, 422, 958, 0, 427, 428, 426, 0,
	429, 430, 431, 432, 433, 271, 434, 272, 866, 0,
	909, 910, 911, 912, 0, 442, 0, 436, 437, 959,
	438, 960, 843, 439, 440, 441, 0, 443, 444, 0,
	826, 445, 446, 447, 448, 449, 451, 926, 452, 0,
	874, 453, 454, 455, 504, 906, 953, 0, 457, 456,
	507, 0, 0, 0, 0, 458, 459, 508, 460, 461,
	462, 823, 0, 0, 0, 0, 0, 0, 0, 821,
	0, 0, 0, 0, 819, 820, 879, 836, 837, 838,
	834, 835, 848, 849, 0, 0, 0, 0, 847, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 928, 853, 0, 0, 0, 221,
	222, 223, 224, 464, 894, 873, 905, 863, 904, 903,
	0, 228, 865, 864, 231, 232, 233, 855, 927, 234,
	963, 964, 470, 0, 235, 934, 0, 917, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 937, 249, 250, 920,
	918, 919, 924, 922, 921, 923, 251, 252, 253, 254,
	908, 256, 901, 900, 825, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 899, 263, 0, 264, 0, 265,
	266, 0, 831, 267, 268, 270, 273, 269, 274, 275,
	276, 954, 955, 844, 212, 0, 0, 0, 0, 0,
	277, 278, 279, 898, 896, 897, 0, 282, 0, 283,
	0, 0, 938, 284, 285, 0, 286, 961, 0, 854,
	287, 0, 288, 289, 290, 291, 929, 930, 933, 339,
	940, 292, 293, 0, 294, 295, 875, 0, 0, 0,
	213, 296, 298, 305, 0, 939, 299, 887, 878, 889,
	891, 892, 893, 888, 0, 880, 0, 306, 941, 931,
	942, 307, 308, 309, 943, 913, 914, 0, 0, 312,
	313, 314, 315, 0, 317, 316, 0, 318, 962, 944,
	319, 320, 945, 0, 321, 322, 0, 0, 323, 324,
	0, 325, 326, 328, 330, 327, 329, 331, 333, 867,
	332, 946, 335, 336, 338, 337, 822, 2965, 947, 845,
	932, 902, 340, 341, 0, 876, 343, 877, 0, 0,
	346, 347, 348, 0, 0, 349, 490, 948, 350, 949,
	956, 351, 345, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 957, 360, 493, 361, 0, 362, 0, 363,
	364, 365, 366, 367, 368, 895, 369, 370, 0, 371,
	372, 373, 374, 375, 0, 377, 378, 379, 376, 380,
	381, 382, 383, 0, 384, 950, 385, 386, 387, 388,
	832, 389, 0, 390, 394, 395, 396, 397, 398, 399,
	400, 0, 407, 408, 868, 869, 871, 872, 402, 406,
	409, 410, 925, 411, 391, 392, 412, 951, 413, 890,
	870, 415, 0, 425, 416, 417, 418, 393, 419, 423,
	936, 420, 421, 422, 958, 0, 427, 428, 426, 0,
	429, 430, 431, 432, 433, 271, 434, 272, 866, 0,
	909, 910, 911, 912, 0, 442, 0, 436, 437, 959,
	438, 960, 843, 439, 440, 441, 0, 443, 444, 0,
	826, 445, 446, 447, 448, 449, 451, 926, 452, 0,
	874, 453, 454, 455, 504, 906, 953, 0, 457, 456,
	507, 0, 0, 0, 0, 458, 459, 508, 460, 461,
	462, 823, 0, 0, 0, 0, 0, 0, 0, 821,
	0, 0, 0, 0, 819, 820, 1554, 0, 0, 0,
	0, 0, 0, 849, 0, 0, 0, 0, 847, 879,
	836, 837, 838, 834, 835, 848, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 928, 853, 0,
	0, 0, 221, 222, 223, 224, 464, 894, 873, 905,
	863, 904, 903, 0, 228, 865, 864, 231, 232, 233,
	855, 927, 234, 963, 964, 470, 0, 235, 934, 0,
	917, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 937,
	249, 250, 920, 918, 919, 924, 922, 921, 923, 251,
	252, 253, 254, 908, 256, 901, 900, 825, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 899, 263, 0,
	264, 0, 265, 266, 0, 831, 267, 268, 270, 273,
	269, 274, 275, 276, 954, 955, 844, 212, 0, 0,
	0, 0, 0, 277, 278, 279, 898, 896, 897, 0,
	282, 0, 283, 0, 0, 938, 284, 285, 0, 286,
	961, 0, 854, 287, 0, 288, 289, 290, 291, 929,
	930, 933, 339, 940, 292, 293, 0, 294, 295, 875,
	0, 0, 0, 213, 296, 298, 305, 0, 939, 299,
	887, 878, 889, 891, 892, 893, 888, 0, 880, 0,
	306, 941, 931, 942, 307, 308, 309, 943, 913, 914,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 962, 944, 319, 320, 945, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 867, 332, 946, 335, 336, 338, 337, 822,
	214, 947, 845, 932, 902, 340, 341, 0, 876, 343,
	877, 0, 0, 346, 347, 348, 0, 0, 349, 490,
	948, 350, 949, 956, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 957, 360, 493, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 895, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 950, 385,
	386, 387, 388, 832, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 868, 869, 871,
	872, 402, 406, 409, 410, 925, 411, 391, 392, 412,
	951, 413, 890, 870, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 936, 420, 421, 422, 958, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	272, 866, 0, 909, 910, 911, 912, 0, 442, 0,
	436, 437, 959, 438, 960, 843, 439, 440, 441, 0,
	443, 444, 0, 826, 445, 446, 447, 448, 449, 451,
	926, 452, 0, 874, 453, 454, 455, 504, 906, 953,
	2777, 457, 456, 507, 0, 0, 0, 0, 458, 459,
	508, 460, 461, 462, 823, 0, 0, 0, 0, 0,
	0, 0, 821, 0, 0, 0, 0, 819, 820, 879,
	836, 837, 838, 834, 835, 848, 849, 0, 0, 0,
	0, 847, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 928, 853, 0,
	0, 0, 221, 222, 223, 224, 464, 894, 873, 905,
	863, 904, 903, 0, 228, 865, 864, 231, 232, 233,
	855, 927, 234, 963, 964, 470, 0, 235, 934, 0,
	917, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 937,
	249, 250, 920, 918, 919, 924, 922, 921, 923, 251,
	252, 253, 254, 908, 256, 901, 900, 825, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 899, 263, 0,
	264, 0, 265, 266, 0, 831, 267, 268, 270, 273,
	269, 274, 275, 276, 954, 955, 844, 212, 0, 0,
	0, 0, 0, 277, 278, 279, 898, 896, 897, 0,
	282, 0, 283, 0, 0, 938, 284, 285, 0, 286,
	961, 0, 854, 287, 0, 288, 289, 290, 291, 929,
	930, 933, 339, 940, 292, 293, 0, 294, 295, 875,
	0, 0, 0, 1926, 296, 298, 305, 0, 939, 299,
	887, 878, 889, 891, 892, 893, 888, 0, 880, 0,
	306, 941, 931, 942, 307, 308, 309, 943, 913, 914,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 962, 944, 319, 320, 945, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 867, 332, 946, 335, 336, 338, 337, 822,
	214, 947, 845, 932, 902, 340, 341, 0, 876, 343,
	877, 0, 0, 346, 347, 348, 0, 0, 349, 490,
	948, 350, 949, 956, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 957, 360, 493, 361, 1925,
	362, 0, 363, 364, 365, 366, 367, 368, 895, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 950, 385,
	386, 387, 388, 832, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 868, 869, 871,
	872, 402, 406, 409, 410, 925, 411, 391, 392, 412,
	951, 413, 890, 870, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 936, 420, 421, 422, 958, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	272, 866, 0, 909, 910, 911, 912, 0, 442, 0,
	436, 437, 959, 438, 960, 843, 439, 440, 441, 0,
	443, 444, 0, 826, 445, 446, 447, 448, 449, 451,
	926, 452, 0, 874, 453, 454, 455, 504, 906, 953,
	0, 457, 456, 507, 0, 0, 0, 0, 458, 459,
	508, 460, 461, 462, 823, 0, 0, 0, 0, 0,
	0, 0, 821, 0, 0, 0, 0, 819, 820, 879,
	836, 837, 838, 834, 835, 848, 849, 0, 0, 0,
	0, 847, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 928, 853, 0,
	0, 0, 221, 222, 223, 224, 464, 894, 873, 905,
	863, 904, 903, 0, 228, 865, 864, 231, 232, 233,
	855, 927, 234, 963, 964, 470, 0, 235, 934, 0,
	917, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 937,
	249, 250, 920, 918, 919, 924, 922, 921, 923, 251,
	252, 253, 254, 908, 256, 901, 900, 825, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 899, 263, 0,
	264, 0, 265, 266, 0, 831, 267, 268, 270, 273,
	269, 274, 275, 276, 954, 955, 844, 212, 0, 0,
	0, 0, 0, 277, 278, 279, 898, 896, 897, 0,
	282, 0, 283, 0, 0, 938, 284, 285, 0, 286,
	961, 0, 854, 287, 0, 288, 289, 290, 291, 929,
	930, 933, 339, 940, 292, 293, 0, 294, 295, 875,
	0, 0, 0, 213, 296, 298, 305, 0, 939, 299,
	887, 878, 889, 891, 892, 893, 888, 0, 880, 0,
	306, 941, 931, 942, 307, 308, 309, 943, 913, 914,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 962, 944, 319, 320, 945, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 867, 332, 946, 335, 336, 338, 337, 822,
	214, 947, 845, 932, 902, 340, 341, 0, 876, 343,
	877, 827, 0, 346, 347, 348, 0, 0, 349, 490,
	948, 350, 949, 956, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 957, 360, 493, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 895, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 950, 385,
	386, 387, 388, 832, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 868, 869, 871,
	872, 402, 406, 409, 410, 925, 411, 391, 392, 412,
	951, 413, 890, 870, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 936, 420, 421, 422, 958, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	272, 866, 0, 909, 910, 911, 912, 0, 442, 0,
	436, 437, 959, 438, 960, 843, 439, 440, 441, 0,
	443, 444, 0, 826, 445, 446, 447, 448, 449, 451,
	926, 452, 0, 874, 453, 454, 455, 504, 906, 953,
	0, 457, 456, 507, 0, 0, 0, 0, 458, 459,
	508, 460, 461, 462, 823, 0, 0, 0, 0, 0,
	0, 0, 821, 0, 0, 0, 0, 819, 820, 879,
	836, 837, 838, 834, 835, 848, 849, 0, 0, 0,
	0, 847, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 928, 853, 0,
	0, 0, 221, 222, 223, 224, 464, 894, 873, 905,
	863, 904, 903, 0, 228, 865, 864, 231, 232, 233,
	855, 927, 234, 963, 964, 470, 0, 235, 934, 0,
	917, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 937,
	249, 250, 920, 918, 919, 924, 922, 921, 923, 251,
	252, 253, 254, 908, 256, 901, 900, 825, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 899, 263, 0,
	264, 0, 265, 266, 0, 831, 267, 268, 270, 273,
	269, 274, 275, 276, 954, 955, 844, 212, 0, 0,
	0, 0, 0, 277, 278, 279, 898, 896, 897, 0,
	282, 0, 283, 0, 0, 938, 284, 285, 0, 286,
	961, 0, 854, 287, 0, 288, 289, 290, 291, 929,
	930, 933, 339, 940, 292, 293, 0, 294, 295, 875,
	0, 0, 0, 213, 296, 298, 305, 0, 939, 299,
	887, 878, 889, 891, 892, 893, 888, 0, 880, 0,
	306, 941, 931, 942, 307, 308, 309, 943, 913, 914,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 962, 944, 319, 320, 945, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 867, 332, 946, 335, 336, 338, 337, 822,
	214, 947, 845, 932, 902, 340, 341, 0, 876, 343,
	877, 0, 0, 346, 347, 348, 0, 0, 349, 490,
	948, 350, 949, 956, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 957, 360, 493, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 895, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 950, 385,
	386, 387, 388, 832, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 868, 869, 871,
	872, 402, 406, 409, 410, 925, 411, 391, 392, 412,
	951, 413, 890, 870, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 936, 420, 421, 422, 958, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	272, 866, 0, 909, 910, 911, 912, 0, 442, 0,
	436, 437, 959, 438, 960, 843, 439, 440, 441, 0,
	443, 444, 0, 826, 445, 446, 447, 448, 449, 451,
	926, 452, 0, 874, 453, 454, 455, 504, 906, 953,
	0, 457, 456, 507, 0, 0, 0, 0, 458, 459,
	508, 460, 461, 462, 823, 0, 0, 0, 0, 0,
	0, 0, 821, 0, 0, 0, 0, 819, 820, 1554,
	0, 0, 0, 0, 0, 0, 849, 0, 0, 0,
	0, 847, 879, 836, 837, 838, 834, 835, 848, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	928, 853, 0, 0, 0, 221, 222, 223, 224, 464,
	894, 873, 905, 863, 904, 903, 0, 228, 865, 864,
	231, 232, 233, 855, 927, 234, 963, 964, 470, 0,
	235, 934, 0, 917, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 937, 249, 250, 920, 918, 919, 924, 922,
	921, 923, 251, 252, 253, 254, 908, 256, 901, 900,
	825, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	899, 263, 0, 264, 0, 265, 266, 0, 831, 267,
	268, 270, 273, 269, 274, 275, 276, 954, 955, 844,
	212, 0, 0, 0, 0, 0, 277, 278, 279, 898,
	896, 897, 0, 282, 0, 283, 0, 2102, 938, 284,
	285, 0, 286, 961, 0, 854, 287, 0, 288, 289,
	290, 291, 929, 930, 933, 339, 940, 292, 293, 0,
	294, 295, 875, 0, 0, 0, 213, 296, 298, 305,
	0, 939, 299, 887, 878, 889, 891, 892, 893, 888,
	0, 880, 0, 306, 941, 931, 942, 307, 308, 309,
	943, 913, 914, 0, 0, 312, 313, 314, 315, 0,
	317, 316, 0, 318, 962, 944, 319, 320, 945, 0,
	321, 322, 0, 0, 323, 324, 0, 325, 326, 328,
	330, 327, 329, 331, 333, 867, 332, 946, 335, 336,
	338, 337, 822, 214, 947, 845, 932, 902, 340, 341,
	0, 876, 343, 877, 0, 0, 346, 347, 348, 0,
	0, 349, 490, 948, 350, 949, 956, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 957, 360,
	493, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 895, 369, 370, 0, 371, 372, 373, 374, 375,
	0, 377, 378, 379, 376, 380, 381, 382, 383, 0,
	384, 950, 385, 386, 387, 388, 832, 389, 0, 390,
	394, 395, 396, 397, 398, 399, 400, 0, 407, 408,
	868, 869, 871, 872, 402, 406, 409, 410, 925, 411,
	391, 392, 412, 951, 413, 890, 870, 415, 0, 425,
	416, 417, 418, 393, 419, 423, 936, 420, 421, 422,
	958, 0, 427, 428, 426, 0, 429, 430, 431, 432,
	433, 271, 434, 272, 866, 0, 909, 910, 911, 912,
	0, 442, 0, 436, 437, 959, 438, 960, 843, 439,
	440, 441, 0, 443, 444, 0, 826, 445, 446, 447,
	448, 449, 451, 926, 452, 0, 874, 453, 454, 455,
	504, 906, 953, 0, 457, 456, 507, 0, 0, 0,
	0, 458, 459, 508, 460, 461, 462, 823, 0, 0,
	0, 0, 0, 0, 0, 821, 0, 0, 0, 0,
	819, 820, 879, 836, 837, 838, 834, 835, 848, 849,
	0, 0, 0, 0, 847, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	928, 853, 0, 0, 0, 221, 222, 223, 224, 464,
	894, 873, 905, 863, 904, 903, 0, 228, 865, 864,
	231, 232, 233, 855, 927, 234, 963, 964, 470, 0,
	235, 934, 0, 917, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 937, 249, 250, 920, 918, 919, 924, 922,
	921, 923, 251, 252, 253, 254, 908, 256, 901, 900,
	825, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	899, 263, 0, 264, 0, 265, 266, 0, 831, 267,
	268, 270, 273, 269, 274, 275, 276, 954, 955, 844,
	212, 0, 0, 0, 0, 0, 277, 278, 279, 898,
	896, 897, 0, 282, 0, 283, 0, 0, 938, 284,
	285, 0, 286, 961, 0, 854, 287, 0, 288, 289,
	290, 291, 929, 930, 933, 339, 940, 292, 293, 0,
	294, 295, 875, 0, 0, 0, 213, 296, 298, 305,
	0, 939, 299, 887, 878, 889, 891, 892, 893, 888,
	0, 880, 0, 306, 941, 931, 942, 307, 308, 309,
	943, 913, 914, 0, 0, 312, 313, 314, 315, 0,
	317, 316, 0, 318, 962, 944, 319, 320, 945, 0,
	321, 322, 0, 0, 323, 324, 0, 325, 326, 328,
	330, 327, 329, 331, 333, 867, 332, 946, 335, 336,
	338, 337, 822, 214, 947, 845, 932, 902, 340, 341,
	0, 876, 343, 877, 0, 0, 346, 347, 348, 0,
	0, 349, 490, 948, 350, 949, 956, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 957, 360,
	493, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 895, 369, 370, 0, 371, 372, 373, 374, 375,
	0, 377, 378, 379, 376, 380, 381, 382, 383, 0,
	384, 950, 385, 386, 387, 388, 832, 389, 0, 390,
	394, 395, 396, 397, 398, 399, 400, 0, 407, 408,
	868, 869, 871, 872, 402, 406, 409, 410, 925, 411,
	391, 392, 412, 951, 413, 890, 870, 415, 0, 425,
	416, 417, 418, 393, 419, 423, 936, 420, 421, 422,
	958, 0, 427, 428, 426, 0, 429, 430, 431, 432,
	433, 271, 434, 272, 866, 0, 909, 910, 911, 912,
	0, 442, 0, 436, 437, 959, 438, 960, 843, 439,
	440, 441, 0, 443, 444, 0, 826, 445, 446, 447,
	448, 449, 451, 926, 452, 0, 874, 453, 454, 455,
	504, 906, 953, 0, 457, 456, 507, 0, 0, 0,
	0, 458, 459, 508, 460, 461, 462, 823, 0, 0,
	0, 0, 0, 0, 0, 821, 0, 0, 0, 0,
	819, 820, 0, 0, 0, 0, 0, 0, 0, 849,
	1492, 0, 0, 2107, 847, 879, 836, 837, 838, 834,
	835, 848, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 928, 853, 0, 0, 0, 221, 222,
	223, 224, 464, 894, 873, 905, 863, 904, 903, 0,
	228, 865, 864, 231, 232, 233, 855, 927, 234, 963,
	964, 470, 0, 235, 934, 0, 917, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 937, 249, 250, 920, 918,
	919, 924, 922, 921, 923, 251, 252, 253, 254, 908,
	256, 901, 900, 825, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 899, 263, 0, 264, 0, 265, 266,
	0, 831, 267, 268, 270, 273, 269, 274, 275, 276,
	954, 955, 844, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 898, 896, 897, 0, 282, 0, 283, 0,
	0, 938, 284, 285, 0, 286, 961, 0, 854, 287,
	0, 288, 289, 290, 291, 929, 930, 933, 339, 940,
	292, 293, 0, 294, 295, 875, 0, 0, 0, 213,
	296, 298, 305, 0, 939, 299, 887, 878, 889, 891,
	892, 893, 888, 0, 880, 0, 306, 941, 931, 942,
	307, 308, 309, 943, 913, 914, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 962, 944, 319,
	320, 945, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 867, 332,
	946, 335, 336, 338, 337, 822, 214, 947, 845, 932,
	902, 340, 341, 0, 876, 343, 877, 0, 0, 346,
	347, 348, 0, 0, 349, 490, 948, 350, 949, 956,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 957, 360, 493, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 895, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 950, 385, 386, 387, 388, 832,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 407, 408, 868, 869, 871, 872, 402, 406, 409,
	410, 925, 411, 391, 392, 412, 951, 413, 890, 870,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 936,
	420, 421, 422, 958, 0, 427, 428, 426, 0, 429,
	430, 431, 432, 433, 271, 434, 272, 866, 0, 909,
	910, 911, 912, 0, 442, 0, 436, 437, 959, 438,
	960, 843, 439, 440, 441, 0, 443, 444, 0, 826,
	445, 446, 447, 448, 449, 451, 926, 452, 0, 874,
	453, 454, 455, 504, 906, 953, 0, 457, 456, 507,
	0, 0, 0, 0, 458, 459, 508, 460, 461, 462,
	823, 0, 0, 0, 0, 0, 0, 0, 821, 0,
	0, 0, 0, 819, 820, 0, 0, 0, 0, 0,
	0, 0, 849, 0, 0, 0, 2105, 847, 879, 836,
	837, 838, 834, 835, 848, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 928, 853, 0, 0,
	0, 221, 222, 223, 224, 464, 894, 873, 905, 863,
	904, 903, 0, 228, 865, 864, 231, 232, 233, 855,
	927, 234, 963, 964, 470, 0, 235, 934, 0, 917,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 937, 249,
	250, 920, 918, 919, 924, 922, 921, 923, 251, 252,
	253, 254, 908, 256, 901, 900, 825, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 899, 263, 0, 264,
	0, 265, 266, 0, 831, 267, 268, 270, 273, 269,
	274, 275, 276, 954, 955, 844, 212, 0, 0, 0,
	0, 0, 277, 278, 279, 898, 896, 897, 0, 282,
	0, 283, 0, 0, 938, 284, 285, 0, 286, 961,
	0, 854, 287, 0, 288, 289, 290, 291, 929, 930,
	933, 339, 940, 292, 293, 0, 294, 295, 875, 0,
	0, 0, 213, 296, 298, 305, 0, 939, 299, 887,
	878, 889, 891, 892, 893, 888, 0, 880, 0, 306,
	941, 931, 942, 307, 308, 309, 943, 913, 914, 0,
	0, 312, 313, 314, 315, 0, 317, 316, 0, 318,
	962, 944, 319, 320, 945, 0, 321, 322, 0, 0,
	323, 324, 0, 325, 326, 328, 330, 327, 329, 331,
	333, 867, 332, 946, 335, 336, 338, 337, 822, 214,
	947, 845, 932, 902, 340, 341, 0, 876, 343, 877,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 948,
	350, 949, 956, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 957, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 895, 369, 370,
	0, 371, 372, 373, 374, 375, 0, 377, 378, 379,
	376, 380, 381, 382, 383, 0, 384, 950, 385, 386,
	387, 388, 832, 389, 0, 390, 394, 395, 396, 397,
	398, 399, 400, 0, 407, 408, 868, 869, 871, 872,
	402, 406, 409, 410, 925, 411, 391, 392, 412, 951,
	413, 890, 870, 415, 0, 425, 416, 417, 418, 393,
	419, 423, 936, 420, 421, 422, 958, 0, 427, 428,
	426, 0, 429, 430, 431, 432, 433, 271, 434, 272,
	866, 0, 909, 910, 911, 912, 0, 442, 0, 436,
	437, 959, 438, 960, 843, 439, 440, 441, 0, 443,
	444, 0, 826, 445, 446, 447, 448, 449, 451, 926,
	452, 0, 874, 453, 454, 455, 504, 906, 953, 0,
	457, 456, 507, 0, 0, 0, 0, 458, 459, 508,
	460, 461, 462, 823, 0, 0, 0, 0, 0, 0,
	0, 821, 0, 0, 0, 0, 819, 820, 0, 0,
	0, 0, 0, 0, 0, 849, 0, 0, 0, 2093,
	847, 879, 836, 837, 838, 834, 835, 848, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 928,
	853, 0, 0, 0, 221, 222, 223, 224, 464, 894,
	873, 905, 863, 904, 903, 0, 228, 865, 864, 231,
	232, 233, 855, 927, 234, 963, 964, 470, 0, 235,
	934, 0, 917, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 937, 249, 250, 920, 918, 919, 924, 922, 921,
	923, 251, 252, 253, 254, 908, 256, 901, 900, 825,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 899,
	263, 0, 264, 0, 265, 266, 0, 831, 267, 268,
	270, 273, 269, 274, 275, 276, 954, 955, 844, 212,
	0, 0, 0, 0, 0, 277, 278, 279, 898, 896,
	897, 0, 282, 0, 283, 0, 0, 938, 284, 285,
	0, 286, 961, 0, 854, 287, 0, 288, 289, 290,
	291, 929, 930, 933, 339, 940, 292, 293, 0, 294,
	295, 875, 0, 0, 0, 213, 296, 298, 305, 0,
	939, 299, 887, 878, 889, 891, 892, 893, 888, 0,
	880, 0, 306, 941, 931, 942, 307, 308, 309, 943,
	913, 914, 0, 0, 312, 313, 314, 315, 0, 317,
	316, 0, 318, 962, 944, 319, 320, 945, 0, 321,
	322, 0, 0, 323, 324, 0, 325, 326, 328, 330,
	327, 329, 331, 333, 867, 332, 946, 335, 336, 338,
	337, 822, 214, 947, 845, 932, 902, 340, 341, 0,
	876, 343, 877, 0, 0, 346, 347, 348, 0, 0,
	349, 490, 948, 350, 949, 956, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 957, 360, 493,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	895, 369, 370, 0, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 0, 384,
	950, 385, 386, 387, 388, 832, 389, 0, 390, 394,
	395, 396, 397, 398, 399, 400, 0, 407, 408, 868,
	869, 871, 872, 402, 406, 409, 410, 925, 411, 391,
	392, 412, 951, 413, 890, 870, 415, 0, 425, 416,
	417, 418, 393, 419, 423, 936, 420, 421, 422, 958,
	0, 427, 428, 426, 0, 429, 430, 431, 432, 433,
	271, 434, 272, 866, 0, 909, 910, 911, 912, 0,
	442, 0, 436, 437, 959, 438, 960, 843, 439, 440,
	441, 0, 443, 444, 0, 826, 445, 446, 447, 448,
	449, 451, 926, 452, 0, 874, 453, 454, 455, 504,
	906, 953, 0, 457, 456, 507, 0, 0, 0, 0,
	458, 459, 508, 460, 461, 462, 823, 0, 0, 0,
	0, 0, 0, 0, 821, 0, 0, 0, 0, 819,
	820, 0, 0, 0, 0, 0, 0, 0, 849, 0,
	0, 0, 2082, 847, 879, 836, 837, 838, 834, 835,
	848, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 928, 853, 0, 0, 0, 221, 222, 223,
	224, 464, 894, 873, 905, 863, 904, 903, 0, 228,
	865, 864, 231, 232, 233, 855, 927, 234, 963, 964,
	470, 0, 235, 934, 0, 917, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 937, 249, 250, 920, 918, 919,
	924, 922, 921, 923, 251, 252, 253, 254, 908, 256,
	901, 900, 825, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 899, 263, 0, 264, 0, 265, 266, 0,
	831, 267, 268, 270, 273, 269, 274, 275, 276, 954,
	955, 844, 212, 0, 0, 0, 0, 0, 277, 278,
	279, 898, 896, 897, 0, 282, 0, 283, 0, 0,
	938, 284, 285, 0, 286, 961, 0, 854, 287, 0,
	288, 289, 290, 291, 929, 930, 933, 339, 940, 292,
	293, 0, 294, 295, 875, 0, 0, 0, 213, 296,
	298, 305, 0, 939, 299, 887, 878, 889, 891, 892,
	893, 888, 0, 880, 0, 306, 941, 931, 942, 307,
	308, 309, 943, 913, 914, 0, 0, 312, 313, 314,
	315, 0, 317, 316, 0, 318, 962, 944, 319, 320,
	945, 0, 321, 322, 0, 0, 323, 324, 0, 325,
	326, 328, 330, 327, 329, 331, 333, 867, 332, 946,
	335, 336, 338, 337, 822, 214, 947, 845, 932, 902,
	340, 341, 0, 876, 343, 877, 0, 0, 346, 347,
	348, 0, 0, 349, 490, 948, 350, 949, 956, 351,
	345, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	957, 360, 493, 361, 0, 362, 0, 363, 364, 365,
	366, 367, 368, 895, 369, 370, 0, 371, 372, 373,
	374, 375, 0, 377, 378, 379, 376, 380, 381, 382,
	383, 0, 384, 950, 385, 386, 387, 388, 832, 389,
	0, 390, 394, 395, 396, 397, 398, 399, 400, 0,
	407, 408, 868, 869, 871, 872, 402, 406, 409, 410,
	925, 411, 391, 392, 412, 951, 413, 890, 870, 415,
	0, 425, 416, 417, 418, 393, 419, 423, 936, 420,
	421, 422, 958, 0, 427, 428, 426, 0, 429, 430,
	431, 432, 433, 271, 434, 272, 866, 0, 909, 910,
	911, 912, 0, 442, 0, 436, 437, 959, 438, 960,
	843, 439, 440, 441, 0, 443, 444, 0, 826, 445,
	446, 447, 448, 449, 451, 926, 452, 0, 874, 453,
	454, 455, 504, 906, 953, 0, 457, 456, 507, 0,
	0, 0, 0, 458, 459, 508, 460, 461, 462, 823,
	0, 0, 0, 0, 0, 0, 0, 821, 0, 0,
	0, 0, 819, 820, 0, 0, 0, 0, 0, 0,
	0, 849, 0, 0, 0, 2080, 847, 2072, 836, 837,
	838, 834, 835, 848, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 928, 853, 0, 0, 0,
	221, 222, 223, 224, 464, 894, 873, 905, 863, 904,
	903, 0, 228, 865, 864, 231, 232, 233, 855, 927,
	234, 963, 964, 470, 0, 235, 934, 0, 917, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 937, 249, 250,
	920, 918, 919, 924, 922, 921, 923, 251, 252, 253,
	254, 908, 2075, 901, 900, 825, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 899, 263, 0, 264, 0,
	265, 266, 0, 831, 267, 268, 270, 273, 269, 274,
	275, 276, 954, 955, 844, 212, 0, 0, 0, 0,
	0, 277, 278, 279, 898, 896, 897, 0, 282, 0,
	283, 0, 0, 938, 284, 285, 0, 286, 961, 0,
	854, 287, 0, 288, 289, 290, 2076, 929, 930, 933,
	339, 940, 292, 293, 0, 294, 295, 875, 0, 0,
	0, 213, 296, 298, 305, 0, 939, 299, 887, 878,
	889, 891, 892, 893, 888, 0, 880, 0, 306, 941,
	931, 942, 307, 308, 309, 943, 913, 914, 0, 0,
	312, 313, 314, 315, 0, 317, 316, 0, 318, 962,
	944, 319, 320, 945, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 2077, 2074, 333,
	867, 332, 946, 335, 336, 338, 337, 822, 214, 947,
	845, 932, 902, 340, 341, 0, 876, 343, 877, 0,
	0, 346, 347, 348, 0, 0, 349, 490, 948, 350,
	949, 956, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 957, 360, 493, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 895, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 950, 385, 386, 387,
	388, 832, 389, 0, 390, 394, 395, 396, 397, 398,
	399, 2078, 0, 407, 408, 868, 869, 871, 872, 402,
	406, 409, 410, 925, 411, 391, 392, 412, 951, 413,
	890, 870, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 936, 420, 421, 422, 958, 0, 427, 428, 426,
	0, 429, 430, 431, 432, 433, 271, 434, 272, 866,
	0, 909, 910, 911, 912, 0, 442, 0, 436, 437,
	959, 438, 960, 843, 439, 440, 441, 0, 443, 444,
	0, 826, 445, 446, 447, 448, 449, 451, 926, 452,
	0, 874, 453, 454, 455, 504, 906, 953, 0, 457,
	456, 507, 0, 0, 0, 0, 458, 459, 508, 460,
	2073, 462, 823, 0, 0, 0, 0, 0, 0, 0,
	821, 0, 0, 0, 0, 819, 820, 0, 0, 0,
	0, 0, 0, 0, 849, 0, 0, 0, 2069, 847,
	2072, 836, 837, 838, 834, 835, 848, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 928, 853,
	0, 0, 0, 221, 222, 223, 224, 464, 894, 873,
	905, 863, 904, 903, 0, 228, 865, 864, 231, 232,
	233, 855, 927, 234, 963, 964, 470, 0, 235, 934,
	0, 917, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	937, 249, 250, 920, 918, 919, 924, 922, 921, 923,
	251, 252, 253, 254, 908, 2075, 901, 900, 825, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 899, 263,
	0, 264, 0, 265, 266, 0, 831, 267, 268, 270,
	273, 269, 274, 275, 276, 954, 955, 844, 212, 0,
	0, 0, 0, 0, 277, 278, 279, 898, 896, 897,
	0, 282, 0, 283, 0, 0, 938, 284, 285, 0,
	286, 961, 0, 854, 287, 0, 288, 289, 290, 2076,
	929, 930, 933, 339, 940, 292, 293, 0, 294, 295,
	875, 0, 0, 0, 213, 296, 298, 305, 0, 939,
	299, 887, 878, 889, 891, 892, 893, 888, 0, 880,
	0, 306, 941, 931, 942, 307, 308, 309, 943, 913,
	914, 0, 0, 312, 313, 314, 315, 0, 317, 316,
	0, 318, 962, 944, 319, 320, 945, 0, 321, 322,
	0, 0, 323, 324, 0, 325, 326, 328, 330, 327,
	2077, 2074, 333, 867, 332, 946, 335, 336, 338, 337,
	822, 214, 947, 845, 932, 902, 340, 341, 0, 876,
	343, 877, 0, 0, 346, 347, 348, 0, 0, 349,
	490, 948, 350, 949, 956, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 957, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 895,
	369, 370, 0, 371, 372, 373, 374, 375, 0, 377,
	378, 379, 376, 380, 381, 382, 383, 0, 384, 950,
	385, 386, 387, 388, 832, 389, 0, 390, 394, 395,
	396, 397, 398, 399, 2078, 0, 407, 408, 868, 869,
	871, 872, 402, 406, 409, 410, 925, 411, 391, 392,
	412, 951, 413, 890, 870, 415, 0, 425, 416, 417,
	418, 393, 419, 423, 936, 420, 421, 422, 958, 0,
	427, 428, 426, 0, 429, 430, 431, 432, 433, 271,
	434, 272, 866, 0, 909, 910, 911, 912, 0, 442,
	0, 436, 437, 959, 438, 960, 843, 439, 440, 441,
	0, 443, 444, 0, 826, 445, 446, 447, 448, 449,
	451, 926, 452, 0, 874, 453, 454, 455, 504, 906,
	953, 0, 457, 456, 507, 0, 0, 0, 0, 458,
	459, 508, 460, 2073, 462, 823, 0, 0, 0, 0,
	0, 0, 0, 821, 0, 0, 0, 0, 819, 820,
	879, 836, 837, 838, 834, 835, 848, 849, 0, 0,
	0, 0, 847, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 928, 853,
	0, 0, 0, 221, 222, 223, 224, 464, 894, 873,
	905, 863, 904, 903, 0, 228, 865, 864, 231, 232,
	233, 855, 927, 234, 963, 964, 470, 0, 235, 934,
	0, 917, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	937, 249, 250, 920, 918, 919, 924, 922, 921, 923,
	251, 252, 253, 254, 908, 256, 901, 900, 825, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 899, 263,
	0, 264, 0, 265, 266, 0, 831, 267, 268, 270,
	273, 269, 274, 275, 276, 954, 955, 844, 212, 0,
	0, 0, 0, 0, 277, 278, 279, 898, 896, 897,
	0, 282, 0, 283, 0, 0, 938, 284, 285, 0,
	286, 961, 0, 854, 287, 0, 288, 289, 290, 291,
	929, 930, 933, 339, 940, 292, 293, 0, 294, 295,
	875, 0, 0, 0, 213, 296, 298, 305, 0, 939,
	299, 887, 878, 889, 891, 892, 893, 888, 0, 880,
	0, 306, 941, 931, 942, 307, 308, 309, 943, 913,
	914, 0, 0, 312, 313, 314, 315, 0, 317, 316,
	0, 318, 962, 944, 319, 320, 945, 0, 321, 322,
	0, 0, 323, 324, 0, 325, 326, 328, 330, 327,
	329, 331, 333, 867, 332, 946, 335, 336, 338, 337,
	822, 214, 947, 845, 932, 902, 340, 341, 0, 876,
	343, 877, 0, 0, 346, 347, 348, 0, 0, 349,
	490, 948, 350, 949, 956, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 957, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 895,
	369, 370, 0, 371, 372, 373, 374, 375, 0, 377,
	378, 379, 376, 380, 381, 382, 383, 0, 384, 950,
	385, 386, 387, 388, 832, 389, 0, 390, 394, 395,
	396, 397, 398, 399, 400, 0, 407, 408, 868, 869,
	871, 872, 402, 406, 409, 410, 925, 411, 391, 392,
	412, 951, 413, 890, 870, 415, 0, 425, 416, 417,
	418, 393, 419, 423, 936, 420, 421, 422, 958, 0,
	427, 428, 426, 0, 429, 430, 431, 432, 433, 271,
	434, 272, 866, 0, 909, 910, 911, 912, 0, 442,
	0, 436, 437, 959, 438, 960, 843, 439, 440, 441,
	0, 443, 444, 0, 826, 445, 446, 447, 448, 449,
	451, 926, 452, 0, 874, 453, 454, 455, 504, 906,
	953, 0, 457, 456, 507, 0, 0, 0, 0, 458,
	459, 508, 460, 461, 462, 823, 0, 0, 0, 0,
	0, 0, 0, 821, 0, 0, 0, 0, 819, 820,
	0, 0, 0, 0, 0, 1500, 0, 849, 0, 0,
	0, 0, 847, 879, 836, 837, 838, 834, 835, 848,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 1913, 220, 0, 0, 0,
	0, 928, 853, 0, 0, 0, 221, 222, 223, 224,
	464, 894, 873, 905, 863, 904, 903, 0, 228, 865,
	864, 231, 232, 233, 855, 927, 234, 963, 964, 470,
	0, 235, 934, 0, 917, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 937, 249, 250, 920, 918, 919, 924,
	922, 921, 923, 251, 252, 253, 254, 908, 256, 901,
	900, 825, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 899, 263, 0, 264, 0, 265, 266, 0, 831,
	267, 268, 270, 273, 269, 274, 275, 276, 954, 955,
	844, 212, 0, 0, 0, 0, 0, 277, 278, 279,
	898, 896, 897, 0, 282, 0, 283, 0, 0, 938,
	284, 285, 0, 286, 961, 0, 854, 287, 0, 288,
	289, 290, 291, 929, 930, 933, 339, 940, 292, 293,
	0, 294, 295, 875, 0, 0, 0, 213, 296, 298,
	305, 0, 939, 299, 887, 878, 889, 891, 892, 893,
	888, 0, 880, 0, 306, 941, 931, 942, 307, 308,
	309, 943, 913, 914, 0, 0, 312, 313, 314, 315,
	0, 317, 316, 0, 318, 962, 944, 319, 320, 945,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 867, 332, 946, 335,
	336, 338, 337, 822, 214, 947, 845, 932, 902, 340,
	341, 0, 876, 343, 877, 0, 0, 346, 347, 348,
	0, 0, 349, 490, 948, 350, 949, 956, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 957,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 895, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 950, 385, 386, 387, 388, 832, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 0, 407,
	408, 868, 869, 871, 872, 402, 406, 409, 410, 925,
	411, 391, 392, 412, 951, 413, 890, 870, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 936, 420, 421,
	422, 958, 0, 427, 428, 426, 0, 429, 430, 431,
	432, 433, 271, 434, 272, 866, 0, 909, 910, 911,
	912, 0, 442, 0, 436, 437, 959, 438, 960, 843,
	439, 440, 441, 0, 443, 444, 0, 826, 445, 446,
	447, 448, 449, 451, 926, 452, 0, 874, 453, 454,
	455, 504, 906, 953, 0, 457, 456, 507, 0, 0,
	0, 0, 458, 459, 508, 460, 461, 462, 823, 0,
	0, 0, 0, 0, 0, 0, 821, 0, 0, 0,
	0, 819, 820, 0, 0, 0, 0, 0, 0, 0,
	849, 0, 0, 0, 1194, 847, 879, 836, 837, 838,
	834, 835, 848, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 928, 853, 0, 0, 0, 221,
	222, 223, 224, 464, 894, 873, 905, 863, 904, 903,
	0, 228, 865, 864, 231, 232, 233, 855, 927, 234,
	963, 964, 470, 0, 235, 934, 0, 917, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 937, 249, 250, 920,
	918, 919, 924, 922, 921, 923, 251, 252, 253, 254,
	908, 256, 901, 900, 825, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 899, 263, 0, 264, 0, 265,
	266, 0, 831, 267, 268, 270, 273, 269, 274, 275,
	276, 954, 955, 844, 212, 0, 0, 0, 0, 0,
	277, 278, 279, 898, 896, 897, 0, 282, 0, 283,
	0, 0, 938, 284, 285, 0, 286, 961, 0, 854,
	287, 0, 288, 289, 290, 291, 1193, 930, 933, 339,
	940, 292, 293, 0, 294, 295, 875, 0, 0, 0,
	213, 296, 298, 305, 0, 939, 299, 887, 878, 889,
	891, 892, 893, 888, 0, 880, 0, 306, 941, 931,
	942, 307, 308, 309, 943, 913, 914, 0, 0, 312,
	313, 314, 315, 0, 317, 316, 0, 318, 962, 944,
	319, 320, 945, 0, 321, 322, 0, 0, 323, 324,
	0, 325, 326, 328, 330, 327, 329, 331, 333, 867,
	332, 946, 335, 336, 338, 337, 822, 214, 947, 845,
	932, 902, 340, 341, 0, 876, 343, 877, 0, 0,
	346, 347, 348, 0, 0, 349, 490, 948, 350, 949,
	956, 351, 345, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 957, 360, 493, 361, 0, 362, 0, 363,
	364, 365, 366, 367, 368, 895, 369, 370, 0, 371,
	372, 373, 374, 375, 0, 377, 378, 379, 376, 380,
	381, 382, 383, 0, 384, 950, 385, 386, 387, 388,
	832, 389, 0, 390, 394, 395, 396, 397, 398, 399,
	400, 0, 407, 408, 868, 869, 871, 872, 402, 406,
	409, 410, 925, 411, 391, 392, 412, 951, 413, 890,
	870, 415, 0, 425, 416, 417, 418, 393, 419, 423,
	936, 420, 421, 422, 958, 0, 427, 428, 426, 0,
	429, 430, 431, 432, 433, 271, 434, 272, 866, 0,
	909, 910, 911, 912, 0, 442, 0, 436, 437, 959,
	438, 960, 843, 439, 440, 441, 0, 443, 444, 0,
	826, 445, 446, 447, 448, 449, 451, 926, 452, 0,
	874, 453, 454, 455, 504, 906, 953, 0, 457, 456,
	507, 0, 0, 0, 0, 458, 459, 508, 460, 461,
	462, 823, 0, 0, 0, 0, 0, 0, 0, 821,
	0, 0, 0, 0, 819, 820, 0, 0, 0, 0,
	0, 0, 0, 849, 0, 0, 0, 1188, 847, 879,
	836, 837, 838, 834, 835, 848, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 928, 853, 0,
	0, 0, 221, 222, 223, 224, 464, 894, 873, 905,
	863, 904, 903, 0, 228, 865, 864, 231, 232, 233,
	855, 927, 234, 963, 964, 470, 0, 235, 934, 0,
	917, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 937,
	249, 250, 920, 918, 919, 924, 922, 921, 923, 251,
	252, 253, 254, 908, 256, 901, 900, 825, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 899, 263, 0,
	264, 0, 265, 266, 0, 831, 267, 268, 270, 273,
	269, 274, 275, 276, 954, 955, 844, 212, 0, 0,
	0, 0, 0, 277, 278, 279, 898, 896, 897, 0,
	282, 0, 283, 0, 0, 938, 284, 285, 0, 286,
	961, 0, 854, 287, 0, 288, 289, 290, 291, 1187,
	930, 933, 339, 940, 292, 293, 0, 294, 295, 875,
	0, 0, 0, 213, 296, 298, 305, 0, 939, 299,
	887, 878, 889, 891, 892, 893, 888, 0, 880, 0,
	306, 941, 931, 942, 307, 308, 309, 943, 913, 914,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 962, 944, 319, 320, 945, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 867, 332, 946, 335, 336, 338, 337, 822,
	214, 947, 845, 932, 902, 340, 341, 0, 876, 343,
	877, 0, 0, 346, 347, 348, 0, 0, 349, 490,
	948, 350, 949, 956, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 957, 360, 493, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 895, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 950, 385,
	386, 387, 388, 832, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 868, 869, 871,
	872, 402, 406, 409, 410, 925, 411, 391, 392, 412,
	951, 413, 890, 870, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 936, 420, 421, 422, 958, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	272, 866, 0, 909, 910, 911, 912, 0, 442, 0,
	436, 437, 959, 438, 960, 843, 439, 440, 441, 0,
	443, 444, 0, 826, 445, 446, 447, 448, 449, 451,
	926, 452, 0, 874, 453, 454, 455, 504, 906, 953,
	0, 457, 456, 507, 0, 0, 0, 0, 458, 459,
	508, 460, 461, 462, 823, 0, 0, 0, 0, 0,
	0, 0, 821, 0, 0, 0, 0, 819, 820, 0,
	0, 0, 0, 0, 0, 0, 849, 0, 0, 0,
	1183, 847, 879, 836, 837, 838, 834, 835, 848, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	928, 853, 0, 0, 0, 221, 222, 223, 224, 464,
	894, 873, 905, 863, 904, 903, 0, 228, 865, 864,
	231, 232, 233, 855, 927, 234, 963, 964, 470, 0,
	235, 934, 0, 917, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 937, 249, 250, 920, 918, 919, 924, 922,
	921, 923, 251, 252, 253, 254, 908, 256, 901, 900,
	825, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	899, 263, 0, 264, 0, 265, 266, 0, 831, 267,
	268, 270, 273, 269, 274, 275, 276, 954, 955, 844,
	212, 0, 0, 0, 0, 0, 277, 278, 279, 898,
	896, 897, 0, 282, 0, 283, 0, 0, 938, 284,
	285, 0, 286, 961, 0, 854, 287, 0, 288, 289,
	290, 291, 929, 930, 933, 339, 940, 292, 293, 0,
	294, 295, 875, 0, 0, 0, 213, 296, 298, 305,
	0, 939, 299, 887, 878, 889, 891, 892, 893, 888,
	0, 880, 0, 306, 941, 931, 942, 307, 308, 309,
	943, 913, 914, 0, 0, 312, 313, 314, 315, 0,
	317, 316, 0, 318, 962, 944, 319, 320, 945, 0,
	321, 322, 0, 0, 323, 324, 0, 325, 326, 328,
	330, 327, 329, 331, 333, 867, 332, 946, 335, 336,
	338, 337, 822, 214, 947, 845, 932, 902, 340, 341,
	0, 876, 343, 877, 0, 0, 346, 347, 348, 0,
	0, 349, 490, 948, 350, 949, 956, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 957, 360,
	493, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 895, 369, 370, 0, 371, 372, 373, 374, 375,
	0, 377, 378, 379, 376, 380, 381, 382, 383, 0,
	384, 950, 385, 386, 387, 388, 832, 389, 0, 390,
	394, 395, 396, 397, 398, 399, 400, 0, 407, 408,
	868, 869, 871, 872, 402, 406, 409, 410, 925, 411,
	391, 392, 412, 951, 413, 890, 870, 415, 0, 425,
	416, 417, 418, 393, 419, 423, 936, 420, 421, 422,
	958, 0, 427, 428, 426, 0, 429, 430, 431, 432,
	433, 271, 434, 272, 866, 0, 909, 910, 911, 912,
	0, 442, 0, 436, 437, 959, 438, 960, 843, 439,
	440, 441, 0, 443, 444, 0, 826, 445, 446, 447,
	448, 449, 451, 926, 452, 0, 874, 453, 454, 455,
	504, 906, 953, 0, 457, 456, 507, 0, 0, 0,
	0, 458, 459, 508, 460, 461, 462, 823, 0, 0,
	0, 0, 0, 0, 0, 821, 0, 0, 0, 0,
	819, 820, 879, 836, 837, 838, 834, 835, 848, 849,
	0, 0, 0, 0, 847, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	928, 853, 0, 0, 0, 221, 222, 223, 224, 464,
	894, 873, 905, 863, 904, 903, 0, 228, 865, 864,
	231, 232, 233, 855, 927, 234, 963, 964, 470, 0,
	235, 934, 0, 917, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 937, 249, 250, 920, 918, 919, 924, 922,
	921, 923, 251, 252, 253, 254, 908, 256, 901, 900,
	825, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	899, 263, 0, 264, 0, 265, 266, 0, 831, 267,
	268, 270, 273, 269, 274, 275, 276, 954, 955, 844,
	212, 0, 0, 0, 0, 0, 277, 278, 279, 898,
	896, 897, 0, 282, 0, 283, 0, 0, 938, 284,
	285, 0, 286, 961, 0, 854, 287, 0, 288, 289,
	290, 291, 929, 930, 933, 339, 940, 292, 293, 0,
	294, 295, 875, 0, 0, 0, 213, 296, 298, 305,
	0, 939, 299, 887, 878, 889, 891, 892, 893, 888,
	0, 880, 0, 306, 941, 931, 942, 307, 308, 309,
	943, 913, 914, 0, 0, 312, 313, 314, 315, 0,
	317, 316, 0, 318, 962, 944, 319, 320, 945, 0,
	321, 322, 0, 0, 323, 324, 0, 325, 326, 328,
	330, 327, 329, 331, 333, 867, 332, 946, 335, 336,
	338, 337, 822, 214, 947, 845, 932, 902, 340, 341,
	0, 876, 343, 877, 0, 0, 346, 347, 348, 0,
	0, 349, 490, 948, 350, 949, 956, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 957, 360,
	493, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 895, 369, 370, 0, 371, 372, 373, 374, 375,
	0, 377, 378, 379, 376, 380, 381, 382, 383, 0,
	384, 950, 385, 386, 387, 388, 832, 389, 0, 390,
	394, 395, 396, 397, 398, 399, 400, 0, 407, 408,
	868, 869, 871, 872, 402, 406, 409, 410, 925, 411,
	391, 392, 412, 951, 413, 890, 870, 415, 0, 425,
	416, 417, 418, 393, 419, 423, 936, 420, 421, 422,
	958, 0, 427, 428, 426, 0, 429, 430, 431, 432,
	433, 271, 434, 272, 866, 0, 909, 910, 911, 912,
	0, 442, 0, 436, 437, 959, 438, 960, 843, 439,
	440, 441, 0, 443, 444, 0, 826, 445, 446, 447,
	448, 449, 451, 926, 452, 0, 874, 453, 454, 455,
	504, 906, 953, 0, 457, 456, 507, 0, 0, 0,
	0, 458, 459, 508, 460, 461, 462, 823, 0, 0,
	0, 0, 0, 0, 0, 821, 0, 0, 0, 0,
	819, 820, 879, 836, 837, 838, 834, 835, 848, 849,
	0, 0, 0, 0, 847, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	928, 853, 0, 0, 0, 221, 222, 223, 224, 464,
	894, 873, 905, 863, 904, 903, 0, 228, 865, 864,
	231, 232, 233, 855, 927, 234, 963, 964, 470, 0,
	235, 934, 0, 917, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 937, 249, 3378, 920, 918, 919, 924, 922,
	921, 923, 251, 252, 253, 254, 908, 256, 901, 900,
	825, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	899, 263, 0, 264, 0, 265, 266, 0, 831, 267,
	268, 270, 273, 269, 274, 275, 276, 954, 955, 844,
	212, 0, 0, 0, 0, 0, 277, 278, 279, 898,
	896, 897, 0, 282, 0, 283, 0, 0, 938, 284,
	285, 0, 286, 961, 0, 854, 287, 0, 288, 289,
	290, 291, 929, 930, 933, 339, 940, 292, 293, 0,
	294, 295, 875, 0, 0, 0, 213, 296, 298, 305,
	0, 939, 299, 887, 878, 889, 891, 892, 893, 888,
	0, 880, 0, 306, 941, 931, 942, 307, 308, 309,
	943, 913, 914, 0, 0, 312, 313, 314, 315, 0,
	317, 316, 0, 318, 962, 944, 319, 320, 945, 0,
	321, 322, 0, 0, 323, 324, 0, 325, 326, 328,
	330, 327, 329, 331, 333, 867, 332, 946, 335, 336,
	338, 337, 822, 214, 947, 845, 932, 902, 340, 341,
	0, 876, 343, 877, 0, 0, 346, 347, 348, 0,
	0, 349, 490, 948, 350, 949, 956, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 957, 360,
	493, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 895, 369, 370, 0, 371, 372, 373, 374, 375,
	0, 377, 378, 379, 376, 380, 381, 382, 383, 0,
	384, 950, 385, 386, 387, 388, 832, 389, 0, 390,
	394, 395, 396, 397, 398, 399, 400, 0, 407, 408,
	868, 869, 871, 872, 402, 406, 409, 410, 925, 411,
	391, 392, 412, 951, 413, 890, 870, 415, 0, 425,
	416, 417, 418, 393, 419, 423, 936, 420, 421, 422,
	958, 0, 427, 428, 426, 0, 429, 430, 431, 432,
	433, 271, 434, 272, 866, 0, 909, 910, 911, 912,
	0, 442, 0, 436, 437, 959, 438, 960, 843, 439,
	440, 441, 0, 3377, 444, 0, 826, 445, 446, 447,
	448, 449, 451, 926, 452, 0, 874, 453, 454, 455,
	504, 906, 953, 0, 457, 456, 507, 0, 0, 0,
	0, 458, 459, 508, 460, 461, 462, 823, 0, 0,
	0, 0, 0, 0, 0, 821, 0, 0, 0, 0,
	819, 820, 879, 836, 837, 838, 834, 835, 848, 849,
	0, 0, 0, 0, 847, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	928, 853, 0, 0, 0, 221, 222, 223, 224, 3376,
	894, 873, 905, 863, 904, 903, 0, 228, 865, 864,
	231, 232, 233, 855, 927, 234, 963, 964, 470, 0,
	235, 934, 0, 917, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 937, 249, 3378, 920, 918, 919, 924, 922,
	921, 923, 251, 252, 253, 254, 908, 256, 901, 900,
	825, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	899, 263, 0, 264, 0, 265, 266, 0, 831, 267,
	268, 270, 273, 269, 274, 275, 276, 954, 955, 844,
	212, 0, 0, 0, 0, 0, 277, 278, 279, 898,
	896, 897, 0, 282, 0, 283, 0, 0, 938, 284,
	285, 0, 286, 961, 0, 854, 287, 0, 288, 289,
	290, 291, 929, 930, 933, 339, 940, 292, 293, 0,
	294, 295, 875, 0, 0, 0, 213, 296, 298, 305,
	0, 939, 299, 887, 878, 889, 891, 892, 893, 888,
	0, 880, 0, 306, 941, 931, 942, 307, 308, 309,
	943, 913, 914, 0, 0, 312, 313, 314, 315, 0,
	317, 316, 0, 318, 962, 944, 319, 320, 945, 0,
	321, 322, 0, 0, 323, 324, 0, 325, 326, 328,
	330, 327, 329, 331, 333, 867, 332, 946, 335, 336,
	338, 337, 822, 214, 947, 845, 932, 902, 340, 341,
	0, 876, 343, 877, 0, 0, 346, 347, 348, 0,
	0, 349, 490, 948, 350, 949, 956, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 957, 360,
	493, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 895, 369, 370, 0, 371, 372, 373, 374, 375,
	0, 377, 378, 379, 376, 380, 381, 382, 383, 0,
	384, 950, 385, 386, 387, 388, 832, 389, 0, 390,
	394, 395, 396, 397, 398, 399, 400, 0, 407, 408,
	868, 869, 871, 872, 402, 406, 409, 410, 925, 411,
	391, 392, 412, 951, 413, 890, 870, 415, 0, 425,
	416, 417, 418, 393, 419, 423, 936, 420, 421, 422,
	958, 0, 427, 428, 426, 0, 429, 430, 431, 432,
	433, 271, 434, 272, 866, 0, 909, 910, 911, 912,
	0, 442, 0, 436, 437, 959, 438, 960, 843, 439,
	440, 441, 0, 3377, 444, 0, 826, 445, 446, 447,
	448, 449, 451, 926, 452, 0, 874, 453, 454, 455,
	504, 906, 953, 0, 457, 456, 507, 0, 0, 0,
	0, 458, 459, 508, 460, 461, 462, 823, 0, 0,
	0, 0, 0, 0, 0, 821, 0, 0, 0, 0,
	819, 820, 879, 836, 837, 838, 834, 835, 848, 849,
	0, 0, 0, 0, 847, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	928, 853, 0, 0, 0, 221, 222, 223, 224, 464,
	894, 873, 905, 863, 904, 903, 0, 228, 865, 864,
	231, 232, 233, 855, 927, 234, 963, 964, 470, 0,
	235, 934, 0, 917, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 937, 249, 250, 920, 918, 919, 924, 922,
	921, 923, 251, 252, 253, 254, 908, 256, 901, 900,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	899, 263, 0, 264, 0, 265, 266, 0, 831, 267,
	268, 270, 273, 269, 274, 275, 276, 954, 955, 844,
	212, 0, 0, 0, 0, 0, 277, 278, 279, 898,
	896, 897, 0, 282, 0, 283, 0, 0, 938, 284,
	285, 0, 286, 961, 0, 854, 287, 0, 288, 289,
	290, 291, 929, 930, 933, 339, 940, 292, 293, 0,
	294, 295, 875, 0, 0, 0, 213, 296, 298, 305,
	0, 939, 299, 887, 878, 889, 891, 892, 893, 888,
	0, 880, 0, 306, 941, 931, 942, 307, 308, 309,
	943, 913, 914, 0, 0, 312, 313, 314, 315, 0,
	317, 316, 0, 318, 962, 944, 319, 320, 945, 0,
	321, 322, 0, 0, 323, 324, 0, 325, 326, 328,
	330, 327, 329, 331, 333, 867, 332, 946, 335, 336,
	338, 337, 0, 214, 947, 845, 932, 902, 340, 341,
	0, 876, 343, 877, 0, 0, 346, 347, 348, 0,
	0, 349, 490, 948, 350, 949, 956, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 957, 360,
	493, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 895, 369, 370, 0, 371, 372, 373, 374, 375,
	0, 377, 378, 379, 376, 380, 381, 382, 383, 0,
	384, 950, 385, 386, 387, 388, 832, 389, 0, 390,
	394, 395, 396, 397, 398, 399, 400, 0, 407, 408,
	868, 869, 871, 872, 402, 406, 409, 410, 925, 411,
	391, 392, 412, 951, 413, 890, 870, 415, 0, 425,
	416, 417, 418, 393, 419, 423, 936, 420, 421, 422,
	958, 0, 427, 428, 426, 0, 429, 430, 431, 432,
	433, 271, 434, 272, 866, 0, 909, 910, 911, 912,
	0, 442, 0, 436, 437, 959, 438, 960, 843, 439,
	440, 441, 0, 443, 444, 0, 0, 445, 446, 447,
	448, 449, 451, 926, 452, 0, 874, 453, 454, 455,
	504, 906, 953, 0, 457, 456, 507, 0, 0, 0,
	0, 458, 459, 508, 460, 461, 462, 879, 836, 837,
	838, 834, 835, 848, 0, 2090, 0, 0, 0, 0,
	2088, 2089, 0, 0, 215, 216, 217, 218, 219, 849,
	220, 0, 0, 0, 847, 928, 853, 0, 0, 0,
	221, 222, 223, 224, 0, 894, 873, 905, 863, 904,
	903, 0, 228, 865, 864, 231, 232, 233, 855, 927,
	234, 963, 964, 470, 0, 235, 934, 0, 917, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 937, 249, 3378,
	920, 918, 919, 924, 922, 921, 923, 251, 252, 253,
	254, 908, 256, 901, 900, 825, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 899, 263, 0, 264, 0,
	265, 266, 0, 831, 267, 268, 270, 273, 269, 274,
	275, 276, 954, 955, 844, 212, 0, 0, 0, 0,
	0, 277, 278, 279, 898, 896, 897, 0, 282, 0,
	283, 0, 0, 938, 284, 285, 0, 286, 961, 0,
	854, 287, 0, 288, 289, 290, 291, 929, 930, 933,
	339, 0, 292, 293, 0, 294, 295, 875, 0, 0,
	0, 213, 296, 298, 305, 0, 939, 299, 887, 878,
	889, 891, 892, 893, 888, 0, 880, 0, 306, 0,
	931, 0, 307, 308, 309, 943, 913, 914, 0, 0,
	312, 313, 314, 315, 0, 317, 316, 0, 318, 962,
	944, 319, 320, 0, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	867, 332, 946, 335, 336, 338, 337, 822, 214, 0,
	845, 932, 902, 340, 341, 0, 876, 343, 877, 0,
	0, 346, 347, 348, 0, 0, 349, 490, 948, 350,
	949, 956, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 957, 360, 493, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 895, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 950, 385, 386, 387,
	388, 832, 389, 0, 390, 394, 395, 396, 397, 398,
	399, 400, 0, 407, 408, 868, 869, 871, 872, 402,
	406, 409, 410, 925, 411, 391, 392, 412, 0, 413,
	890, 870, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 936, 420, 421, 422, 958, 0, 427, 428, 426,
	0, 429, 430, 431, 432, 433, 271, 434, 272, 866,
	0, 909, 910, 911, 912, 0, 442, 0, 436, 437,
	959, 438, 960, 843, 439, 440, 441, 0, 3377, 444,
	0, 826, 445, 446, 447, 448, 449, 451, 926, 452,
	0, 874, 453, 454, 455, 504, 906, 953, 0, 457,
	456, 507, 0, 0, 0, 0, 458, 459, 508, 460,
	461, 462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 812, 0, 1000, 0, 819, 820, 0, 0, 0,
	0, 0, 0, 0, 849, 0, 0, 0, 0, 847,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 928, 0, 0, 0, 0, 221, 222, 223, 224,
	464, 465, 225, 466, 226, 227, 467, 0, 228, 229,
	230, 231, 232, 233, 0, 927, 234, 468, 469, 470,
	0, 235, 934, 0, 917, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 937, 249, 250, 920, 918, 919, 924,
	922, 921, 923, 251, 252, 253, 254, 255, 256, 472,
	473, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 474,
	267, 268, 270, 273, 269, 274, 275, 276, 954, 955,
	0, 212, 0, 0, 0, 0, 0, 277, 278, 279,
	477, 280, 281, 0, 282, 0, 283, 0, 0, 938,
	284, 285, 0, 286, 961, 0, 479, 287, 0, 288,
	289, 290, 291, 929, 930, 933, 339, 940, 292, 293,
	0, 294, 295, 297, 0, 0, 0, 213, 296, 298,
	305, 0, 939, 299, 483, 301, 300, 302, 303, 304,
	484, 0, 485, 0, 306, 941, 931, 942, 307, 308,
	309, 943, 310, 311, 0, 0, 312, 313, 314, 315,
	987, 317, 316, 0, 318, 962, 944, 319, 320, 945,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 334, 332, 946, 335,
	336, 338, 337, 0, 214, 947, 0, 932, 489, 340,
	341, 0, 342, 343, 344, 0, 992, 346, 347, 348,
	0, 0, 349, 490, 948, 350, 949, 956, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 957,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 494, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 950, 385, 386, 387, 388, 495, 994, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 178, 407,
	408, 401, 403, 404, 405, 402, 406, 409, 410, 925,
	411, 391, 392, 412, 951, 413, 496, 414, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 424, 420, 421,
	422, 958, 0, 427, 428, 426, 180, 429, 430, 431,
	432, 433, 271, 434, 272, 435, 0, 498, 499, 500,
	501, 0, 442, 0, 436, 437, 959, 438, 960, 0,
	439, 440, 441, 0, 443, 444, 0, 0, 445, 446,
	447, 448, 449, 451, 926, 452, 0, 450, 453, 454,
	455, 1304, 505, 506, 0, 457, 456, 507, 1000, 0,
	0, 172, 458, 459, 508, 460, 461, 462, 0, 173,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 928, 0, 984, 0,
	1586, 221, 222, 223, 224, 464, 465, 225, 466, 226,
	227, 467, 0, 228, 229, 230, 231, 232, 233, 0,
	927, 234, 468, 469, 470, 0, 235, 934, 0, 917,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 937, 249,
	250, 920, 918, 919, 924, 922, 921, 923, 251, 252,
	253, 254, 255, 256, 472, 473, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 474, 267, 268, 270, 273, 269,
	274, 275, 276, 954, 955, 0, 212, 0, 0, 0,
	0, 0, 277, 278, 279, 477, 280, 281, 0, 282,
	0, 283, 0, 0, 938, 284, 285, 0, 286, 961,
	0, 479, 287, 0, 288, 289, 290, 291, 929, 930,
	933, 339, 940, 292, 293, 0, 294, 295, 297, 0,
	0, 0, 213, 296, 298, 305, 0, 939, 299, 483,
	301, 300, 302, 303, 304, 484, 0, 485, 0, 306,
	941, 931, 942, 307, 308, 309, 943, 310, 311, 0,
	0, 312, 313, 314, 315, 987, 317, 316, 0, 318,
	962, 944, 319, 320, 945, 0, 321, 322, 0, 0,
	323, 324, 0, 325, 326, 328, 330, 327, 329, 331,
	333, 334, 332, 946, 335, 336, 338, 337, 0, 214,
	947, 0, 932, 489, 340, 341, 0, 342, 343, 344,
	0, 992, 346, 347, 348, 0, 0, 349, 490, 948,
	350, 949, 956, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 957, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 494, 369, 370,
	0, 371, 372, 373, 374, 375, 0, 377, 378, 379,
	376, 380, 381, 382, 383, 0, 384, 950, 385, 386,
	387, 388, 495, 994, 0, 390, 394, 395, 396, 397,
	398, 399, 400, 178, 407, 408, 401, 403, 404, 405,
	402, 406, 409, 410, 925, 411, 391, 392, 412, 951,
	413, 496, 414, 415, 0, 425, 416, 417, 418, 393,
	419, 423, 424, 420, 421, 422, 958, 0, 427, 428,
	426, 180, 429, 430, 431, 432, 433, 271, 434, 272,
	435, 0, 498, 499, 500, 501, 0, 442, 0, 436,
	437, 959, 438, 960, 0, 439, 440, 441, 0, 443,
	444, 0, 0, 445, 446, 447, 448, 449, 451, 926,
	452, 0, 450, 453, 454, 455, 1304, 505, 506, 0,
	457, 456, 507, 0, 0, 0, 172, 458, 459, 508,
	460, 461, 462, 0, 173, 0, 0, 2532, 0, 1000,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 984, 0, 1586, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 928, 0, 0,
	0, 0, 221, 222, 223, 224, 464, 465, 225, 466,
	226, 227, 467, 0, 228, 229, 230, 231, 232, 233,
	0, 927, 234, 468, 469, 470, 0, 235, 934, 0,
	917, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 937,
	249, 250, 920, 918, 919, 924, 922, 921, 923, 251,
	252, 253, 254, 255, 256, 472, 473, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 474, 267, 268, 270, 273,
	269, 274, 275, 276, 954, 955, 0, 212, 0, 0,
	0, 0, 0, 277, 278, 279, 477, 280, 281, 0,
	282, 0, 283, 0, 0, 938, 284, 285, 0, 286,
	961, 0, 479, 287, 0, 288, 289, 290, 291, 929,
	930, 933, 339, 940, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 213, 296, 298, 305, 0, 939, 299,
	483, 301, 300, 302, 303, 304, 484, 0, 485, 0,
	306, 941, 931, 942, 307, 308, 309, 943, 310, 311,
	0, 0, 312, 313, 314, 315, 987, 317, 316, 0,
	318, 962, 944, 319, 320, 945, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 946, 335, 336, 338, 337, 0,
	214, 947, 0, 932, 489, 340, 341, 0, 342, 343,
	344, 0, 992, 346, 347, 348, 0, 0, 349, 490,
	948, 350, 949, 956, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 957, 360, 493, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 494, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 950, 385,
	386, 387, 388, 495, 994, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 925, 411, 391, 392, 412,
	951, 413, 496, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 958, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	272, 435, 0, 498, 499, 500, 501, 0, 442, 0,
	436, 437, 959, 438, 960, 0, 439, 440, 441, 0,
	443, 444, 0, 0, 445, 446, 447, 448, 449, 451,
	926, 452, 0, 450, 453, 454, 455, 504, 505, 506,
	0, 457, 456, 507, 0, 983, 0, 1000, 458, 459,
	508, 460, 461, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 984, 928, 989, 0, 0, 0,
	221, 222, 223, 224, 464, 465, 225, 466, 226, 227,
	467, 0, 228, 229, 230, 231, 232, 233, 0, 927,
	234, 468, 469, 470, 0, 235, 934, 0, 917, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 937, 249, 250,
	920, 918, 919, 924, 922, 921, 923, 251, 252, 253,
	254, 255, 256, 472, 473, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 474, 267, 268, 270, 273, 269, 274,
	275, 276, 954, 955, 0, 212, 0, 0, 0, 0,
	0, 277, 278, 279, 477, 280, 281, 0, 282, 0,
	283, 0, 0, 938, 284, 285, 0, 286, 961, 0,
	479, 287, 0, 288, 289, 290, 291, 929, 930, 933,
	339, 940, 292, 293, 0, 294, 295, 297, 0, 0,
	0, 213, 296, 298, 305, 0, 939, 299, 483, 301,
	300, 302, 303, 304, 484, 0, 485, 0, 306, 941,
	931, 942, 307, 308, 309, 943, 310, 311, 0, 0,
	312, 313, 314, 315, 987, 317, 316, 0, 318, 962,
	944, 319, 320, 945, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	334, 332, 946, 335, 336, 338, 337, 0, 214, 947,
	0, 932, 489, 340, 341, 0, 342, 343, 344, 0,
	992, 346, 347, 348, 0, 0, 349, 490, 948, 350,
	949, 956, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 957, 360, 493, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 494, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 950, 385, 386, 387,
	388, 495, 994, 0, 390, 394, 395, 396, 397, 398,
	399, 400, 0, 407, 408, 401, 403, 404, 405, 402,
	406, 409, 410, 925, 411, 391, 392, 412, 951, 413,
	496, 414, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 424, 420, 421, 422, 958, 0, 427, 428, 426,
	0, 429, 430, 431, 432, 433, 271, 434, 272, 435,
	0, 498, 499, 500, 501, 0, 442, 0, 436, 437,
	959, 438, 960, 0, 439, 440, 441, 0, 443, 444,
	0, 0, 445, 446, 447, 448, 449, 451, 926, 452,
	0, 450, 453, 454, 455, 504, 505, 506, 0, 457,
	456, 507, 1000, 0, 0, 0, 458, 459, 508, 460,
	461, 462, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	928, 0, 984, 0, 989, 221, 222, 223, 224, 464,
	465, 225, 466, 226, 227, 467, 0, 228, 229, 230,
	231, 232, 233, 0, 927, 234, 468, 469, 470, 0,
	235, 934, 0, 917, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 937, 249, 250, 920, 918, 919, 924, 922,
	921, 923, 251, 252, 253, 254, 255, 256, 472, 473,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 474, 267,
	268, 270, 273, 269, 274, 275, 276, 954, 955, 0,
	212, 0, 0, 0, 0, 0, 277, 278, 279, 477,
	280, 281, 0, 282, 0, 283, 0, 0, 938, 284,
	285, 0, 286, 961, 0, 479, 287, 0, 288, 289,
	290, 291, 929, 930, 933, 339, 940, 292, 293, 0,
	294, 295, 297, 0, 0, 0, 213, 296, 298, 305,
	0, 939, 299, 483, 301, 300, 302, 303, 304, 484,
	0, 485, 0, 306, 941, 931, 942, 307, 308, 309,
	943, 310, 311, 0, 0, 312, 313, 314, 315, 987,
	317, 316, 0, 318, 962, 944, 319, 320, 945, 0,
	321, 322, 0, 0, 323, 324, 0, 325, 326, 328,
	330, 327, 329, 331, 333, 334, 332, 946, 335, 336,
	338, 337, 0, 214, 947, 0, 932, 489, 340, 341,
	0, 342, 343, 344, 0, 992, 346, 347, 348, 0,
	0, 349, 490, 948, 350, 949, 956, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 957, 360,
	493, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 494, 369, 370, 0, 371, 372, 373, 374, 375,
	0, 377, 378, 379, 376, 380, 381, 382, 383, 0,
	384, 950, 385, 386, 387, 388, 495, 994, 0, 390,
	394, 395, 396, 397, 398, 399, 400, 0, 407, 408,
	401, 403, 404, 405, 402, 406, 409, 410, 925, 411,
	391, 392, 412, 951, 413, 496, 414, 415, 0, 425,
	416, 417, 418, 393, 419, 423, 424, 420, 421, 422,
	958, 0, 427, 428, 426, 0, 429, 430, 431, 432,
	433, 271, 434, 272, 435, 0, 498, 499, 500, 501,
	0, 442, 0, 436, 437, 959, 438, 960, 0, 439,
	440, 441, 0, 443, 444, 0, 0, 445, 446, 447,
	448, 449, 451, 926, 452, 0, 450, 453, 454, 455,
	504, 505, 506, 0, 457, 456, 507, 1000, 0, 0,
	0, 458, 459, 508, 460, 461, 462, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 928, 0, 984, 0, 989,
	221, 222, 223, 224, 464, 465, 225, 466, 226, 227,
	467, 0, 228, 229, 230, 231, 232, 233, 0, 927,
	234, 468, 469, 470, 0, 235, 934, 0, 917, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 937, 249, 250,
	920, 918, 919, 924, 922, 921, 923, 251, 252, 253,
	254, 255, 256, 472, 473, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 474, 267, 268, 270, 273, 269, 274,
	275, 276, 954, 955, 0, 212, 0, 0, 0, 0,
	0, 277, 278, 279, 477, 280, 281, 0, 282, 0,
	283, 0, 0, 938, 284, 285, 0, 286, 961, 0,
	479, 287, 0, 288, 289, 290, 291, 929, 930, 933,
	339, 940, 292, 293, 0, 294, 295, 297, 0, 0,
	0, 213, 296, 298, 305, 0, 939, 299, 483, 301,
	300, 302, 303, 304, 484, 0, 485, 0, 306, 941,
	931, 942, 307, 308, 309, 943, 310, 311, 0, 0,
	312, 313, 314, 315, 0, 317, 316, 0, 318, 962,
	944, 319, 320, 945, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	334, 332, 946, 335, 336, 338, 337, 0, 214, 947,
	0, 932, 489, 340, 341, 0, 342, 343, 344, 0,
	0, 346, 347, 348, 0, 0, 349, 490, 948, 350,
	949, 956, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 957, 360, 493, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 494, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 950, 385, 386, 387,
	388, 495, 994, 0, 390, 394, 395, 396, 397, 398,
	399, 400, 0, 407, 408, 401, 403, 404, 405, 402,
	406, 409, 410, 925, 411, 391, 392, 412, 951, 413,
	496, 414, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 424, 420, 421, 422, 958, 0, 427, 428, 426,
	0, 429, 430, 431, 432, 433, 271, 434, 272, 435,
	0, 498, 499, 500, 501, 0, 442, 0, 436, 437,
	959, 438, 960, 0, 439, 440, 441, 0, 443, 444,
	0, 0, 445, 446, 447, 448, 449, 451, 926, 452,
	0, 450, 453, 454, 455, 504, 505, 506, 0, 457,
	456, 507, 812, 0, 1158, 0, 458, 459, 508, 460,
	461, 462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 463, 0, 1481, 0, 0, 221, 222, 223,
	224, 464, 465, 225, 466, 226, 227, 467, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 468, 469,
	470, 0, 235, 471, 0, 1062, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 937, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	472, 473, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	474, 267, 268, 270, 273, 269, 274, 275, 276, 475,
	476, 0, 212, 0, 0, 0, 0, 0, 277, 278,
	279, 477, 280, 281, 0, 282, 0, 283, 0, 0,
	938, 284, 285, 0, 286, 478, 0, 479, 287, 0,
	288, 289, 290, 291, 480, 481, 482, 339, 940, 292,
	293, 0, 294, 295, 297, 0, 0, 0, 0, 296,
	298, 305, 0, 939, 299, 483, 301, 300, 302, 303,
	304, 484, 0, 485, 0, 306, 941, 486, 942, 307,
	308, 309, 943, 310, 311, 0, 0, 312, 313, 314,
	315, 0, 317, 316, 0, 318, 487, 944, 319, 320,
	945, 0, 321, 322, 0, 0, 323, 324, 0, 325,
	326, 328, 330, 327, 329, 331, 333, 334, 332, 946,
	335, 336, 338, 337, 0, 0, 947, 0, 488, 489,
	340, 341, 0, 342, 343, 344, 0, 0, 346, 347,
	348, 0, 0, 349, 490, 948, 350, 949, 491, 351,
	345, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	492, 360, 493, 361, 0, 362, 0, 363, 364, 365,
	366, 367, 368, 494, 369, 370, 0, 371, 372, 373,
	374, 375, 0, 377, 378, 379, 376, 380, 381, 382,
	383, 0, 384, 950, 385, 386, 387, 388, 495, 389,
	0, 390, 394, 395, 396, 397, 398, 399, 400, 178,
	407, 408, 401, 403, 404, 405, 402, 406, 409, 410,
	0, 411, 391, 392, 412, 951, 413, 496, 414, 415,
	0, 425, 416, 417, 418, 393, 419, 423, 424, 420,
	421, 422, 497, 0, 427, 428, 426, 180, 429, 430,
	431, 432, 433, 271, 434, 272, 435, 0, 498, 499,
	500, 501, 0, 442, 0, 436, 437, 502, 438, 503,
	0, 439, 440, 441, 0, 443, 444, 0, 0, 445,
	446, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 1304, 505, 506, 0, 457, 456, 507, 1301,
	0, 1158, 172, 458, 459, 508, 460, 461, 462, 0,
	173, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 463,
	0, 148, 0, 0, 221, 222, 223, 224, 464, 465,
	225, 466, 226, 227, 467, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 468, 469, 470, 0, 235,
	471, 0, 1062, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 937, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 472, 473, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 474, 267, 268,
	270, 273, 269, 274, 275, 276, 475, 476, 0, 212,
	0, 0, 0, 0, 0, 277, 278, 279, 477, 280,
	281, 0, 282, 0, 283, 0, 0, 938, 284, 285,
	0, 286, 478, 0, 479, 287, 0, 288, 289, 290,
	291, 480, 481, 482, 339, 940, 292, 293, 0, 294,
	295, 297, 0, 0, 0, 0, 296, 298, 305, 0,
	939, 299, 483, 301, 300, 302, 303, 304, 484, 0,
	485, 0, 306, 941, 486, 942, 307, 308, 309, 943,
	310, 311, 0, 0, 312, 313, 314, 315, 0, 317,
	316, 0, 318, 487, 944, 319, 320, 945, 0, 321,
	322, 0, 0, 323, 324, 0, 325, 326, 328, 330,
	327, 329, 331, 333, 334, 332, 946, 335, 336, 338,
	337, 0, 0, 947, 0, 488, 489, 340, 341, 0,
	342, 343, 344, 0, 0, 346, 347, 348, 0, 0,
	349, 490, 948, 350, 949, 491, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 492, 360, 493,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	494, 369, 370, 0, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 0, 384,
	950, 385, 386, 387, 388, 495, 389, 0, 390, 394,
	395, 396, 397, 398, 399, 400, 178, 407, 408, 401,
	403, 404, 405, 402, 406, 409, 410, 0, 411, 391,
	392, 412, 951, 413, 496, 414, 415, 0, 425, 416,
	417, 418, 393, 419, 423, 424, 420, 421, 422, 497,
	0, 427, 428, 426, 180, 429, 430, 431, 432, 433,
	271, 434, 272, 435, 0, 498, 499, 500, 501, 0,
	442, 0, 436, 437, 502, 438, 503, 0, 439, 440,
	441, 0, 443, 444, 0, 0, 445, 446, 447, 448,
	449, 451, 0, 452, 0, 450, 453, 454, 455, 1304,
	505, 506, 0, 457, 456, 507, 0, 0, 0, 172,
	458, 459, 508, 460, 461, 462, 0, 173, 0, 0,
	0, 0, 1158, 1157, 0, 0, 0, 0, 1155, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 148, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	463, 0, 0, 0, 0, 221, 222, 223, 224, 464,
	465, 225, 466, 226, 227, 467, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 468, 469, 470, 0,
	235, 471, 0, 1062, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 937, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 472, 473,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 474, 267,
	268, 270, 273, 269, 274, 275, 276, 475, 476, 0,
	212, 0, 0, 0, 0, 0, 277, 278, 279, 477,
	280, 281, 0, 282, 0, 283, 0, 0, 938, 284,
	285, 0, 286, 478, 0, 479, 287, 0, 288, 289,
	290, 291, 480, 481, 482, 339, 940, 292, 293, 0,
	294, 295, 297, 0, 0, 0, 0, 296, 298, 305,
	0, 939, 299, 483, 301, 300, 302, 303, 304, 484,
	0, 485, 0, 306, 941, 486, 942, 307, 308, 309,
	943, 310, 311, 0, 0, 312, 313, 314, 315, 0,
	317, 316, 0, 318, 487, 944, 319, 320, 945, 0,
	321, 322, 0, 0, 323, 324, 0, 325, 326, 328,
	330, 327, 329, 331, 333, 334, 332, 946, 335, 336,
	338, 337, 0, 0, 947, 0, 488, 489, 340, 341,
	0, 342, 343, 344, 0, 0, 346, 347, 348, 0,
	0, 349, 490, 948, 350, 949, 491, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 492, 360,
	493, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 494, 369, 370, 0, 371, 372, 373, 374, 375,
	0, 377, 378, 379, 376, 380, 381, 382, 383, 0,
	384, 950, 385, 386, 387, 388, 495, 389, 0, 390,
	394, 395, 396, 397, 398, 399, 400, 0, 407, 408,
	401, 403, 404, 405, 402, 406, 409, 410, 0, 411,
	391, 392, 412, 951, 413, 496, 414, 415, 0, 425,
	416, 417, 418, 393, 419, 423, 424, 420, 421, 422,
	497, 0, 427, 428, 426, 0, 429, 430, 431, 432,
	433, 271, 434, 272, 435, 0, 498, 499, 500, 501,
	0, 442, 0, 436, 437, 502, 438, 503, 0, 439,
	440, 441, 0, 443, 444, 0, 0, 445, 446, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	504, 505, 506, 0, 457, 456, 507, 0, 0, 0,
	0, 458, 459, 508, 460, 461, 462, 1158, 1157, 0,
	0, 0, 0, 1155, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 2726,
	220, 0, 0, 0, 0, 463, 0, 0, 0, 0,
	221, 222, 223, 224, 464, 465, 225, 466, 226, 227,
	467, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 468, 469, 470, 0, 235, 471, 0, 1062, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 937, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 472, 473, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 474, 267, 268, 270, 273, 269, 274,
	275, 276, 475, 476, 0, 212, 0, 0, 0, 0,
	0, 277, 278, 279, 477, 280, 281, 0, 282, 0,
	283, 0, 0, 938, 284, 285, 0, 286, 478, 0,
	479, 287, 0, 288, 289, 290, 291, 480, 481, 482,
	339, 940, 292, 293, 0, 294, 295, 297, 0, 0,
	0, 0, 296, 298, 305, 0, 939, 299, 483, 301,
	300, 302, 303, 304, 484, 0, 485, 0, 306, 941,
	486, 942, 307, 308, 309, 943, 310, 311, 0, 0,
	312, 313, 314, 315, 0, 317, 316, 0, 318, 487,
	944, 319, 320, 945, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	334, 332, 946, 335, 336, 338, 337, 0, 0, 947,
	0, 488, 489, 340, 341, 0, 342, 343, 344, 0,
	0, 346, 347, 348, 0, 0, 349, 490, 948, 350,
	949, 491, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 492, 360, 493, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 494, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 950, 385, 386, 387,
	388, 495, 389, 0, 390, 394, 395, 396, 397, 398,
	399, 400, 0, 407, 408, 401, 403, 404, 405, 402,
	406, 409, 410, 0, 411, 391, 392, 412, 951, 413,
	496, 414, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 424, 420, 421, 422, 497, 0, 427, 428, 426,
	0, 429, 430, 431, 432, 433, 271, 434, 272, 435,
	0, 498, 499, 500, 501, 0, 442, 0, 436, 437,
	502, 438, 503, 0, 439, 440, 441, 0, 443, 444,
	0, 0, 445, 446, 447, 448, 449, 451, 0, 452,
	0, 450, 453, 454, 455, 504, 505, 506, 0, 457,
	456, 507, 1000, 0, 0, 0, 458, 459, 508, 460,
	461, 462, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	928, 0, 0, 0, 1308, 221, 222, 223, 224, 464,
	465, 225, 466, 226, 227, 467, 0, 228, 229, 230,
	231, 232, 233, 0, 927, 234, 468, 469, 470, 0,
	235, 934, 0, 917, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 937, 249, 250, 920, 918, 919, 924, 922,
	921, 923, 251, 252, 253, 254, 255, 256, 472, 473,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 474, 267,
	268, 270, 273, 269, 274, 275, 276, 954, 955, 0,
	212, 0, 0, 0, 0, 0, 277, 278, 279, 477,
	280, 281, 0, 282, 0, 283, 0, 0, 938, 284,
	285, 0, 286, 961, 0, 479, 287, 0, 288, 289,
	290, 291, 929, 930, 933, 339, 940, 292, 293, 0,
	294, 295, 297, 0, 0, 0, 213, 296, 298, 305,
	0, 939, 299, 483, 301, 300, 302, 303, 304, 484,
	0, 485, 0, 306, 941, 931, 942, 307, 308, 309,
	943, 310, 311, 0, 0, 312, 313, 314, 315, 0,
	317, 316, 0, 318, 962, 944, 319, 320, 945, 0,
	321, 322, 0, 0, 323, 324, 0, 325, 326, 328,
	330, 327, 329, 331, 333, 334, 332, 946, 335, 336,
	338, 337, 0, 214, 947, 0, 932, 489, 340, 341,
	0, 342, 343, 344, 0, 0, 346, 347, 348, 0,
	0, 349, 490, 948, 350, 949, 956, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 957, 360,
	493, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 494, 369, 370, 0, 371, 372, 373, 374, 375,
	0, 377, 378, 379, 376, 380, 381, 382, 383, 0,
	384, 950, 385, 386, 387, 388, 495, 389, 0, 390,
	394, 395, 396, 397, 398, 399, 400, 0, 407, 408,
	401, 403, 404, 405, 402, 406, 409, 410, 925, 411,
	391, 392, 412, 951, 413, 496, 414, 415, 0, 425,
	416, 417, 418, 393, 419, 423, 424, 420, 421, 422,
	958, 0, 427, 428, 426, 0, 429, 430, 431, 432,
	433, 271, 434, 272, 435, 0, 498, 499, 500, 501,
	0, 442, 0, 436, 437, 959, 438, 960, 0, 439,
	440, 441, 0, 443, 444, 0, 0, 445, 446, 447,
	448, 449, 451, 926, 452, 0, 450, 453, 454, 455,
	504, 505, 506, 0, 457, 456, 507, 812, 0, 209,
	0, 458, 459, 508, 460, 461, 462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 463, 0, 0,
	0, 0, 221, 222, 223, 224, 464, 465, 225, 466,
	226, 227, 467, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 468, 469, 470, 0, 235, 471, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 472, 473, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 474, 267, 268, 270, 273,
	269, 274, 275, 276, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 277, 278, 279, 477, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	478, 0, 479, 287, 0, 288, 289, 290, 291, 480,
	481, 482, 339, 0, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 0, 296, 298, 305, 0, 0, 299,
	483, 301, 300, 302, 303, 304, 484, 0, 485, 0,
	306, 0, 486, 0, 307, 308, 309, 0, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 487, 0, 319, 320, 0, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 0, 335, 336, 338, 337, 0,
	0, 0, 0, 488, 489, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 490,
	0, 350, 0, 491, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 492, 360, 493, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 494, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 495, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 178, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	0, 413, 496, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 497, 0, 427,
	428, 426, 180, 429, 430, 431, 432, 433, 271, 434,
	272, 435, 0, 498, 499, 500, 501, 0, 442, 0,
	436, 437, 502, 438, 503, 0, 439, 440, 441, 0,
	443, 444, 0, 0, 445, 446, 447, 448, 449, 451,
	0, 452, 0, 450, 453, 454, 455, 1304, 505, 506,
	0, 457, 456, 507, 209, 0, 0, 172, 458, 459,
	508, 460, 461, 462, 0, 173, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 463, 0, 0, 0, 148, 221, 222, 223,
	224, 464, 465, 225, 466, 226, 227, 467, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 468, 469,
	470, 0, 235, 471, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	472, 473, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	474, 267, 268, 270, 273, 269, 274, 275, 276, 475,
	476, 0, 212, 0, 0, 0, 0, 0, 277, 278,
	279, 477, 280, 281, 0, 282, 0, 283, 0, 0,
	0, 284, 285, 0, 286, 478, 0, 479, 287, 0,
	288, 289, 290, 291, 480, 481, 482, 339, 0, 292,
	293, 0, 294, 295, 297, 0, 0, 0, 213, 296,
	298, 305, 0, 0, 299, 483, 301, 300, 302, 303,
	304, 484, 0, 485, 0, 306, 0, 486, 0, 307,
	308, 309, 0, 310, 311, 0, 0, 312, 313, 314,
	315, 0, 317, 316, 0, 318, 487, 0, 319, 320,
	0, 0, 321, 322, 0, 0, 323, 324, 0, 325,
	326, 328, 330, 327, 329, 331, 333, 334, 332, 0,
	335, 336, 338, 337, 0, 214, 0, 0, 488, 489,
	340, 341, 0, 342, 343, 344, 0, 0, 346, 347,
	348, 0, 0, 349, 490, 0, 350, 0, 491, 351,
	345, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	492, 360, 493, 361, 0, 362, 0, 363, 364, 365,
	366, 367, 368, 494, 369, 370, 0, 371, 372, 373,
	374, 375, 0, 377, 378, 379, 376, 380, 381, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 495, 389,
	0, 390, 394, 395, 396, 397, 398, 399, 400, 0,
	407, 408, 401, 403, 404, 405, 402, 406, 409, 410,
	0, 411, 391, 392, 412, 0, 413, 496, 414, 415,
	0, 425, 416, 417, 418, 393, 419, 423, 424, 420,
	421, 422, 497, 0, 427, 428, 426, 0, 429, 430,
	431, 432, 433, 271, 434, 272, 435, 0, 498, 499,
	500, 501, 0, 442, 0, 436, 437, 502, 438, 503,
	0, 439, 440, 441, 0, 443, 444, 0, 0, 445,
	446, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 504, 505, 506, 0, 457, 456, 507, 209,
	0, 0, 0, 458, 459, 508, 460, 461, 462, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 463, 0, 0,
	0, 1591, 221, 222, 223, 224, 464, 465, 225, 466,
	226, 227, 467, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 468, 469, 470, 0, 235, 471, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 472, 473, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 474, 267, 268, 270, 273,
	269, 274, 275, 276, 475, 476, 0, 212, 0, 0,
	0, 0, 0, 277, 278, 279, 477, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	478, 0, 479, 287, 0, 288, 289, 290, 291, 480,
	481, 482, 339, 0, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 213, 296, 298, 305, 0, 0, 299,
	483, 301, 300, 302, 303, 304, 484, 0, 485, 0,
	306, 0, 486, 0, 307, 308, 309, 0, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 487, 0, 319, 320, 0, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 0, 335, 336, 338, 337, 0,
	214, 0, 0, 488, 489, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 490,
	0, 350, 0, 491, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 492, 360, 493, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 494, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 495, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	0, 413, 496, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 497, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	272, 435, 0, 498, 499, 500, 501, 0, 442, 0,
	436, 437, 502, 438, 503, 0, 439, 440, 441, 0,
	443, 444, 0, 0, 445, 446, 447, 448, 449, 451,
	0, 452, 0, 450, 453, 454, 455, 504, 505, 506,
	0, 457, 456, 507, 209, 0, 0, 0, 458, 459,
	508, 460, 461, 462, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 463, 0, 2678, 0, 0, 221, 222, 223,
	224, 464, 465, 225, 466, 226, 227, 467, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 468, 469,
	470, 0, 235, 471, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	472, 473, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	474, 267, 268, 270, 273, 269, 274, 275, 276, 475,
	476, 0, 0, 0, 0, 0, 0, 0, 277, 278,
	279, 477, 280, 281, 0, 282, 0, 283, 0, 0,
	0, 284, 285, 0, 286, 478, 0, 479, 287, 0,
	288, 289, 290, 291, 480, 481, 482, 339, 0, 292,
	293, 0, 294, 295, 297, 0, 0, 0, 0, 296,
	298, 305, 0, 0, 299, 483, 301, 300, 302, 303,
	304, 484, 0, 485, 0, 306, 0, 486, 0, 307,
	308, 309, 0, 310, 311, 0, 0, 312, 313, 314,
	315, 0, 317, 316, 0, 318, 487, 0, 319, 320,
	0, 0, 321, 322, 0, 0, 323, 324, 0, 325,
	326, 328, 330, 327, 329, 331, 333, 334, 332, 0,
	335, 336, 338, 337, 0, 0, 0, 0, 488, 489,
	340, 341, 0, 342, 343, 344, 0, 0, 346, 347,
	348, 0, 0, 349, 490, 0, 350, 0, 491, 351,
	345, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	492, 360, 493, 361, 0, 362, 0, 363, 364, 365,
	366, 367, 368, 494, 369, 370, 0, 371, 372, 373,
	374, 375, 0, 377, 378, 379, 376, 380, 381, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 495, 389,
	0, 390, 394, 395, 396, 397, 398, 399, 400, 0,
	407, 408, 401, 403, 404, 405, 402, 406, 409, 410,
	0, 411, 391, 392, 412, 0, 413, 496, 414, 415,
	0, 425, 416, 417, 418, 393, 419, 423, 424, 420,
	421, 422, 497, 0, 427, 428, 426, 0, 429, 430,
	431, 432, 433, 271, 434, 272, 435, 0, 498, 499,
	500, 501, 0, 442, 0, 436, 437, 502, 438, 503,
	0, 439, 440, 441, 0, 443, 444, 0, 0, 445,
	446, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 504, 505, 506, 0, 457, 456, 507, 209,
	0, 0, 0, 458, 459, 508, 460, 461, 462, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 463, 0, 0,
	0, 2323, 221, 222, 223, 224, 464, 465, 225, 466,
	226, 227, 467, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 468, 469, 470, 0, 235, 471, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 472, 473, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 474, 267, 268, 270, 273,
	269, 274, 275, 276, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 277, 278, 279, 477, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	478, 0, 479, 287, 0, 288, 289, 290, 291, 480,
	481, 482, 339, 0, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 0, 296, 298, 305, 0, 0, 299,
	483, 301, 300, 302, 303, 304, 484, 0, 485, 0,
	306, 0, 486, 0, 307, 308, 309, 0, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 487, 0, 319, 320, 0, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 0, 335, 336, 338, 337, 0,
	0, 0, 0, 488, 489, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 490,
	0, 350, 0, 491, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 492, 360, 493, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 494, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 495, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	0, 413, 496, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 497, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	272, 435, 0, 498, 499, 500, 501, 0, 442, 0,
	436, 437, 502, 438, 503, 0, 439, 440, 441, 0,
	443, 444, 0, 0, 445, 446, 447, 448, 449, 451,
	0, 452, 0, 450, 453, 454, 455, 504, 505, 506,
	0, 457, 456, 507, 686, 0, 577, 0, 458, 459,
	508, 460, 461, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 463, 0, 2801, 0, 0, 221,
	222, 223, 224, 464, 465, 225, 466, 226, 227, 467,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	468, 469, 470, 0, 235, 471, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 583, 254,
	255, 256, 472, 473, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 474, 267, 268, 270, 273, 269, 274, 275,
	276, 475, 476, 0, 212, 0, 0, 0, 0, 0,
	277, 278, 279, 477, 280, 281, 0, 282, 0, 283,
	0, 0, 0, 284, 285, 0, 286, 478, 0, 479,
	287, 0, 288, 289, 290, 291, 480, 481, 482, 339,
	0, 292, 293, 0, 294, 295, 297, 0, 0, 0,
	213, 296, 298, 305, 0, 0, 299, 483, 301, 300,
	302, 303, 304, 484, 0, 485, 0, 306, 0, 486,
	0, 307, 308, 309, 0, 310, 311, 0, 0, 312,
	313, 314, 315, 0, 317, 316, 0, 318, 487, 0,
	319, 320, 0, 0, 321, 322, 0, 0, 323, 324,
	0, 325, 326, 328, 330, 327, 329, 331, 333, 334,
	332, 0, 335, 336, 338, 337, 0, 214, 0, 0,
	488, 489, 340, 341, 0, 342, 343, 344, 0, 0,
	346, 347, 348, 0, 0, 349, 490, 0, 350, 0,
	491, 351, 345, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 492, 360, 493, 361, 0, 362, 0, 363,
	364, 365, 366, 367, 368, 494, 369, 370, 0, 371,
	372, 373, 374, 375, 0, 377, 378, 379, 376, 380,
	381, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	495, 389, 0, 390, 394, 395, 396, 397, 398, 399,
	400, 0, 407, 408, 401, 403, 404, 405, 402, 406,
	409, 410, 0, 411, 391, 392, 412, 0, 413, 496,
	414, 415, 0, 425, 416, 417, 418, 393, 419, 423,
	424, 420, 421, 422, 497, 0, 427, 428, 426, 582,
	429, 430, 431, 432, 433, 271, 434, 272, 435, 0,
	498, 499, 500, 501, 0, 442, 0, 436, 437, 502,
	438, 503, 0, 439, 440, 441, 0, 443, 444, 0,
	0, 445, 446, 447, 448, 449, 451, 0, 452, 0,
	450, 453, 454, 455, 504, 505, 506, 0, 457, 456,
	507, 0, 576, 0, 577, 458, 459, 508, 460, 461,
	462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 586, 220, 0, 0,
	0, 0, 463, 0, 0, 0, 0, 221, 222, 223,
	224, 464, 465, 225, 466, 226, 227, 467, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 468, 469,
	470, 0, 235, 471, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 583, 254, 255, 256,
	472, 473, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	474, 267, 268, 270, 273, 269, 274, 275, 276, 475,
	476, 0, 212, 0, 0, 0, 0, 0, 277, 278,
	279, 477, 280, 281, 0, 282, 0, 283, 0, 0,
	0, 284, 285, 0, 286, 478, 0, 479, 287, 0,
	288, 289, 290, 291, 480, 481, 482, 339, 0, 292,
	293, 0, 294, 295, 297, 0, 0, 0, 213, 296,
	298, 305, 0, 0, 299, 483, 301, 300, 302, 303,
	304, 484, 0, 485, 0, 306, 0, 486, 0, 307,
	308, 309, 0, 310, 311, 0, 0, 312, 313, 314,
	315, 0, 317, 316, 0, 318, 487, 0, 319, 320,
	0, 0, 321, 322, 0, 0, 323, 324, 0, 325,
	326, 328, 330, 327, 329, 331, 333, 334, 332, 0,
	335, 336, 338, 337, 0, 214, 0, 0, 488, 489,
	340, 341, 0, 342, 343, 344, 0, 0, 346, 347,
	348, 0, 0, 349, 490, 0, 350, 0, 491, 351,
	345, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	492, 360, 493, 361, 0, 362, 0, 363, 364, 365,
	366, 367, 368, 494, 369, 370, 0, 371, 372, 373,
	374, 375, 0, 377, 378, 379, 376, 380, 381, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 495, 389,
	0, 390, 394, 395, 396, 397, 398, 399, 400, 0,
	407, 408, 401, 403, 404, 405, 402, 406, 409, 410,
	0, 411, 391, 392, 412, 0, 413, 496, 414, 415,
	0, 425, 416, 417, 418, 393, 419, 423, 424, 420,
	421, 422, 497, 0, 427, 428, 426, 582, 429, 430,
	431, 432, 433, 271, 434, 272, 435, 0, 498, 499,
	500, 501, 0, 442, 0, 436, 437, 502, 438, 503,
	0, 439, 440, 441, 0, 443, 444, 0, 0, 445,
	446, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 504, 505, 506, 577, 457, 456, 507, 0,
	0, 0, 0, 458, 459, 508, 460, 461, 462, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 463, 586, 0, 0, 0, 221, 222,
	223, 224, 464, 465, 225, 466, 226, 227, 467, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 468,
	469, 470, 0, 235, 471, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 583, 254, 255,
	256, 472, 473, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 474, 267, 268, 270, 273, 269, 274, 275, 276,
	475, 476, 0, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 477, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 0, 286, 478, 0, 479, 287,
	0, 288, 289, 290, 291, 480, 481, 482, 339, 0,
	292, 293, 0, 294, 295, 297, 0, 0, 0, 213,
	296, 298, 305, 0, 0, 299, 483, 301, 300, 302,
	303, 304, 484, 0, 485, 0, 306, 0, 486, 0,
	307, 308, 309, 0, 310, 311, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 487, 0, 319,
	320, 0, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	0, 335, 336, 338, 337, 0, 214, 0, 0, 488,
	489, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 490, 0, 350, 0, 491,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 492, 360, 493, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 494, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 0, 1873, 386, 387, 388, 495,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 0, 411, 391, 392, 412, 0, 413, 496, 414,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 497, 0, 427, 428, 426, 582, 429,
	430, 431, 432, 433, 271, 434, 272, 435, 0, 498,
	499, 500, 501, 0, 442, 0, 436, 437, 502, 438,
	503, 0, 439, 440, 441, 0, 443, 444, 0, 0,
	445, 446, 447, 448, 449, 451, 0, 452, 0, 450,
	453, 454, 455, 504, 505, 506, 577, 457, 456, 507,
	0, 0, 0, 0, 458, 459, 508, 460, 461, 462,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 463, 586, 0, 0, 0, 221,
	222, 223, 224, 464, 465, 225, 466, 226, 227, 467,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	468, 469, 470, 0, 235, 471, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 583, 254,
	255, 256, 472, 473, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 474, 267, 268, 270, 273, 269, 274, 275,
	276, 475, 476, 0, 212, 0, 0, 0, 0, 0,
	277, 278, 279, 477, 280, 281, 0, 282, 0, 283,
	0, 0, 0, 284, 285, 0, 286, 478, 0, 479,
	287, 0, 288, 289, 290, 291, 480, 481, 482, 339,
	0, 292, 293, 0, 294, 295, 297, 0, 0, 0,
	213, 296, 298, 305, 0, 0, 299, 483, 301, 300,
	302, 303, 304, 484, 0, 485, 0, 306, 0, 486,
	0, 307, 308, 309, 0, 310, 311, 0, 0, 312,
	313, 314, 315, 0, 317, 316, 0, 318, 487, 0,
	319, 320, 0, 0, 321, 322, 0, 0, 323, 324,
	0, 325, 326, 328, 330, 327, 329, 331, 333, 334,
	332, 0, 335, 336, 338, 337, 0, 214, 0, 0,
	488, 489, 340, 341, 0, 342, 343, 344, 0, 0,
	346, 347, 348, 0, 0, 349, 490, 0, 350, 0,
	491, 351, 345, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 492, 360, 493, 361, 0, 362, 0, 363,
	364, 365, 366, 367, 368, 494, 369, 370, 0, 371,
	372, 373, 374, 375, 0, 377, 378, 379, 376, 380,
	381, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	495, 389, 0, 390, 394, 395, 396, 397, 398, 399,
	400, 0, 407, 408, 401, 403, 404, 405, 402, 406,
	409, 410, 0, 411, 391, 392, 412, 0, 413, 496,
	414, 415, 0, 425, 416, 417, 418, 393, 419, 423,
	424, 420, 421, 422, 497, 0, 427, 428, 426, 582,
	429, 430, 431, 432, 433, 271, 434, 272, 435, 0,
	498, 499, 500, 501, 0, 442, 0, 436, 437, 502,
	438, 503, 0, 439, 440, 441, 0, 443, 444, 0,
	0, 445, 446, 447, 448, 449, 451, 0, 452, 0,
	450, 453, 454, 455, 504, 505, 506, 209, 457, 456,
	507, 0, 0, 0, 0, 458, 459, 508, 460, 461,
	462, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 463, 586, 0, 0, 0,
	221, 222, 223, 224, 464, 465, 225, 466, 226, 227,
	467, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 468, 469, 470, 0, 235, 471, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 472, 473, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 474, 267, 268, 270, 273, 269, 274,
	275, 276, 475, 476, 0, 212, 0, 0, 0, 0,
	0, 277, 278, 279, 477, 280, 281, 0, 282, 0,
	283, 0, 0, 0, 284, 285, 0, 286, 478, 0,
	479, 287, 0, 288, 289, 290, 291, 480, 481, 482,
	339, 0, 292, 293, 0, 294, 295, 297, 0, 0,
	0, 213, 296, 298, 305, 0, 0, 299, 483, 301,
	300, 302, 303, 304, 484, 0, 485, 0, 306, 0,
	486, 0, 307, 308, 309, 0, 310, 311, 0, 0,
	312, 313, 314, 315, 0, 317, 316, 0, 318, 487,
	0, 319, 320, 0, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	334, 332, 0, 335, 336, 338, 337, 0, 214, 0,
	0, 488, 489, 340, 341, 0, 342, 343, 344, 0,
	0, 346, 347, 348, 0, 0, 349, 490, 0, 350,
	0, 491, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 492, 360, 493, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 494, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 495, 389, 0, 390, 394, 395, 396, 397, 398,
	399, 400, 0, 407, 408, 401, 403, 404, 405, 402,
	406, 409, 410, 0, 411, 391, 392, 412, 0, 413,
	496, 414, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 424, 420, 421, 422, 497, 0, 427, 428, 426,
	0, 429, 430, 431, 432, 433, 271, 434, 272, 435,
	0, 498, 499, 500, 501, 0, 442, 0, 436, 437,
	502, 438, 503, 0, 439, 440, 441, 0, 443, 444,
	0, 0, 445, 446, 447, 448, 449, 451, 0, 452,
	0, 450, 453, 454, 455, 504, 505, 506, 0, 457,
	456, 507, 0, 0, 0, 0, 458, 459, 508, 460,
	461, 462, 1331, 0, 1158, 1157, 0, 0, 0, 0,
	1155, 0, 0, 0, 0, 0, 0, 586, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 463, 0, 0, 0, 0, 221, 222, 223,
	224, 464, 465, 225, 466, 226, 227, 467, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 468, 469,
	470, 0, 235, 471, 0, 1062, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 937, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	472, 473, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	474, 267, 268, 270, 273, 269, 274, 275, 276, 475,
	476, 0, 212, 0, 0, 0, 0, 0, 1330, 278,
	279, 477, 280, 281, 0, 282, 0, 283, 0, 0,
	938, 284, 285, 0, 286, 478, 0, 479, 287, 0,
	288, 289, 290, 291, 480, 481, 482, 339, 940, 292,
	293, 0, 294, 295, 297, 0, 0, 0, 0, 296,
	298, 305, 0, 939, 299, 483, 301, 300, 302, 303,
	304, 484, 0, 485, 0, 306, 941, 486, 942, 307,
	308, 309, 943, 310, 311, 0, 0, 312, 313, 314,
	315, 0, 317, 316, 0, 318, 487, 944, 319, 320,
	945, 0, 321, 322, 0, 0, 323, 324, 0, 325,
	326, 328, 330, 327, 329, 331, 333, 334, 332, 946,
	335, 336, 338, 337, 0, 0, 947, 0, 488, 489,
	340, 341, 0, 342, 343, 344, 0, 0, 346, 347,
	348, 0, 0, 349, 490, 948, 350, 949, 491, 351,
	345, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	492, 360, 493, 361, 0, 362, 0, 363, 364, 365,
	366, 1329, 368, 494, 369, 370, 0, 371, 372, 373,
	374, 375, 0, 377, 378, 379, 376, 380, 381, 382,
	383, 0, 384, 950, 385, 386, 387, 388, 495, 389,
	0, 390, 394, 395, 396, 397, 398, 399, 400, 0,
	407, 408, 401, 403, 404, 405, 402, 406, 409, 410,
	0, 411, 391, 392, 412, 951, 413, 496, 414, 415,
	0, 425, 416, 417, 418, 393, 419, 423, 424, 420,
	421, 422, 497, 0, 427, 428, 426, 0, 429, 430,
	431, 432, 433, 271, 434, 272, 435, 0, 498, 499,
	500, 501, 0, 442, 0, 436, 437, 502, 438, 503,
	0, 439, 440, 441, 0, 443, 444, 0, 0, 445,
	446, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 504, 505, 506, 0, 457, 456, 507, 0,
	0, 0, 0, 458, 459, 508, 460, 461, 462, 1299,
	0, 1158, 1157, 0, 0, 0, 0, 1155, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 463,
	0, 0, 0, 0, 221, 222, 223, 224, 464, 465,
	225, 466, 226, 227, 467, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 468, 469, 470, 0, 235,
	471, 0, 1062, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 937, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 472, 473, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 474, 267, 268,
	270, 273, 269, 274, 275, 276, 475, 476, 0, 212,
	0, 0, 0, 0, 0, 277, 278, 279, 477, 280,
	281, 0, 282, 0, 283, 0, 0, 938, 284, 285,
	0, 286, 478, 0, 479, 287, 0, 288, 289, 290,
	291, 1298, 481, 482, 339, 940, 292, 293, 0, 294,
	295, 297, 0, 0, 0, 0, 296, 298, 305, 0,
	939, 299, 483, 301, 300, 302, 303, 304, 484, 0,
	485, 0, 306, 941, 486, 942, 307, 308, 309, 943,
	310, 311, 0, 0, 312, 313, 314, 315, 0, 317,
	316, 0, 318, 487, 944, 319, 320, 945, 0, 321,
	322, 0, 0, 323, 324, 0, 325, 326, 328, 330,
	327, 329, 331, 333, 334, 332, 946, 335, 336, 338,
	337, 0, 0, 947, 0, 488, 489, 340, 341, 0,
	342, 343, 344, 0, 0, 346, 347, 348, 0, 0,
	349, 490, 948, 350, 949, 491, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 492, 360, 493,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	494, 369, 370, 0, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 0, 384,
	950, 385, 386, 387, 388, 495, 389, 0, 390, 394,
	395, 396, 397, 398, 399, 400, 0, 407, 408, 401,
	403, 404, 405, 402, 406, 409, 410, 0, 411, 391,
	392, 412, 951, 413, 496, 414, 415, 0, 425, 416,
	417, 418, 393, 419, 423, 424, 420, 421, 422, 497,
	0, 427, 428, 426, 0, 429, 430, 431, 432, 433,
	271, 434, 272, 435, 0, 498, 499, 500, 501, 0,
	442, 0, 436, 437, 502, 438, 503, 0, 439, 440,
	441, 0, 443, 444, 0, 0, 445, 446, 447, 448,
	449, 451, 0, 452, 0, 450, 453, 454, 455, 504,
	505, 506, 0, 457, 456, 507, 0, 0, 0, 0,
	458, 459, 508, 460, 461, 462, 1295, 0, 1158, 1157,
	0, 0, 0, 0, 1155, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 463, 0, 0, 0,
	0, 221, 222, 223, 224, 464, 465, 225, 466, 226,
	227, 467, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 468, 469, 470, 0, 235, 471, 0, 1062,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 937, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 472, 473, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 474, 267, 268, 270, 273, 269,
	274, 275, 276, 475, 476, 0, 212, 0, 0, 0,
	0, 0, 277, 278, 279, 477, 280, 281, 0, 282,
	0, 283, 0, 0, 938, 284, 285, 0, 286, 478,
	0, 479, 287, 0, 288, 289, 290, 291, 1294, 481,
	482, 339, 940, 292, 293, 0, 294, 295, 297, 0,
	0, 0, 0, 296, 298, 305, 0, 939, 299, 483,
	301, 300, 302, 303, 304, 484, 0, 485, 0, 306,
	941, 486, 942, 307, 308, 309, 943, 310, 311, 0,
	0, 312, 313, 314, 315, 0, 317, 316, 0, 318,
	487, 944, 319, 320, 945, 0, 321, 322, 0, 0,
	323, 324, 0, 325, 326, 328, 330, 327, 329, 331,
	333, 334, 332, 946, 335, 336, 338, 337, 0, 0,
	947, 0, 488, 489, 340, 341, 0, 342, 343, 344,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 948,
	350, 949, 491, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 492, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 494, 369, 370,
	0, 371, 372, 373, 374, 375, 0, 377, 378, 379,
	376, 380, 381, 382, 383, 0, 384, 950, 385, 386,
	387, 388, 495, 389, 0, 390, 394, 395, 396, 397,
	398, 399, 400, 0, 407, 408, 401, 403, 404, 405,
	402, 406, 409, 410, 0, 411, 391, 392, 412, 951,
	413, 496, 414, 415, 0, 425, 416, 417, 418, 393,
	419, 423, 424, 420, 421, 422, 497, 0, 427, 428,
	426, 0, 429, 430, 431, 432, 433, 271, 434, 272,
	435, 0, 498, 499, 500, 501, 0, 442, 0, 436,
	437, 502, 438, 503, 0, 439, 440, 441, 0, 443,
	444, 0, 0, 445, 446, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 504, 505, 506, 0,
	457, 456, 507, 0, 0, 0, 0, 458, 459, 508,
	460, 461, 462, 1233, 0, 1158, 1157, 0, 0, 0,
	0, 1155, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 463, 0, 0, 0, 0, 221, 222,
	223, 224, 464, 465, 225, 466, 226, 227, 467, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 468,
	469, 470, 0, 235, 471, 0, 1062, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 937, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 472, 473, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 474, 267, 268, 270, 273, 269, 274, 275, 276,
	475, 476, 0, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 477, 280, 281, 0, 282, 0, 283, 0,
	0, 938, 284, 285, 0, 286, 478, 0, 479, 287,
	0, 288, 289, 290, 291, 1232, 481, 482, 339, 940,
	292, 293, 0, 294, 295, 297, 0, 0, 0, 0,
	296, 298, 305, 0, 939, 299, 483, 301, 300, 302,
	303, 304, 484, 0, 485, 0, 306, 941, 486, 942,
	307, 308, 309, 943, 310, 311, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 487, 944, 319,
	320, 945, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	946, 335, 336, 338, 337, 0, 0, 947, 0, 488,
	489, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 490, 948, 350, 949, 491,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 492, 360, 493, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 494, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 950, 385, 386, 387, 388, 495,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 0, 411, 391, 392, 412, 951, 413, 496, 414,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 497, 0, 427, 428, 426, 0, 429,
	430, 431, 432, 433, 271, 434, 272, 435, 0, 498,
	499, 500, 501, 0, 442, 0, 436, 437, 502, 438,
	503, 0, 439, 440, 441, 0, 443, 444, 0, 0,
	445, 446, 447, 448, 449, 451, 0, 452, 0, 450,
	453, 454, 455, 504, 505, 506, 0, 457, 456, 507,
	0, 0, 0, 0, 458, 459, 508, 460, 461, 462,
	1230, 0, 1158, 1157, 0, 0, 0, 0, 1155, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	463, 0, 0, 0, 0, 221, 222, 223, 224, 464,
	465, 225, 466, 226, 227, 467, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 468, 469, 470, 0,
	235, 471, 0, 1062, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 937, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 472, 473,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 474, 267,
	268, 270, 273, 269, 274, 275, 276, 475, 476, 0,
	212, 0, 0, 0, 0, 0, 277, 278, 279, 477,
	280, 281, 0, 282, 0, 283, 0, 0, 938, 284,
	285, 0, 286, 478, 0, 479, 287, 0, 288, 289,
	290, 291, 1229, 481, 482, 339, 940, 292, 293, 0,
	294, 295, 297, 0, 0, 0, 0, 296, 298, 305,
	0, 939, 299, 483, 301, 300, 302, 303, 304, 484,
	0, 485, 0, 306, 941, 486, 942, 307, 308, 309,
	943, 310, 311, 0, 0, 312, 313, 314, 315, 0,
	317, 316, 0, 318, 487, 944, 319, 320, 945, 0,
	321, 322, 0, 0, 323, 324, 0, 325, 326, 328,
	330, 327, 329, 331, 333, 334, 332, 946, 335, 336,
	338, 337, 0, 0, 947, 0, 488, 489, 340, 341,
	0, 342, 343, 344, 0, 0, 346, 347, 348, 0,
	0, 349, 490, 948, 350, 949, 491, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 492, 360,
	493, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 494, 369, 370, 0, 371, 372, 373, 374, 375,
	0, 377, 378, 379, 376, 380, 381, 382, 383, 0,
	384, 950, 385, 386, 387, 388, 495, 389, 0, 390,
	394, 395, 396, 397, 398, 399, 400, 0, 407, 408,
	401, 403, 404, 405, 402, 406, 409, 410, 0, 411,
	391, 392, 412, 951, 413, 496, 414, 415, 0, 425,
	416, 417, 418, 393, 419, 423, 424, 420, 421, 422,
	497, 0, 427, 428, 426, 0, 429, 430, 431, 432,
	433, 271, 434, 272, 435, 0, 498, 499, 500, 501,
	0, 442, 0, 436, 437, 502, 438, 503, 0, 439,
	440, 441, 0, 443, 444, 0, 0, 445, 446, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	504, 505, 506, 0, 457, 456, 507, 0, 0, 0,
	0, 458, 459, 508, 460, 461, 462, 1151, 0, 1158,
	1157, 0, 0, 0, 0, 1155, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 463, 0, 0,
	0, 0, 221, 222, 223, 224, 464, 465, 225, 466,
	226, 227, 467, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 468, 469, 470, 0, 235, 471, 0,
	1062, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 937,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 472, 473, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 474, 267, 268, 270, 273,
	269, 274, 275, 276, 475, 476, 0, 212, 0, 0,
	0, 0, 0, 277, 278, 279, 477, 280, 281, 0,
	282, 0, 283, 0, 0, 938, 284, 285, 0, 286,
	478, 0, 479, 287, 0, 288, 289, 290, 291, 1153,
	481, 482, 339, 940, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 0, 296, 298, 305, 0, 939, 299,
	483, 301, 300, 302, 303, 304, 484, 0, 485, 0,
	306, 941, 486, 942, 307, 308, 309, 943, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 487, 944, 319, 320, 945, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 946, 335, 336, 338, 337, 0,
	0, 947, 0, 488, 489, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 490,
	948, 350, 949, 491, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 492, 360, 493, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 494, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 950, 385,
	386, 387, 388, 495, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	951, 413, 496, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 497, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	272, 435, 0, 498, 499, 500, 501, 0, 442, 0,
	436, 437, 502, 438, 503, 0, 439, 440, 441, 0,
	443, 444, 0, 0, 445, 446, 447, 448, 449, 451,
	0, 452, 0, 450, 453, 454, 455, 504, 505, 506,
	0, 457, 456, 507, 0, 0, 0, 0, 458, 459,
	508, 460, 461, 462, 1158, 1157, 0, 0, 0, 0,
	1155, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 463, 0, 0, 0, 0, 221, 222, 223,
	224, 464, 465, 225, 466, 226, 227, 467, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 468, 469,
	470, 0, 235, 471, 0, 1062, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 937, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	472, 473, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	474, 267, 268, 270, 273, 269, 274, 275, 276, 475,
	476, 0, 212, 0, 0, 0, 0, 0, 277, 278,
	279, 477, 280, 281, 0, 282, 0, 283, 0, 0,
	938, 284, 285, 0, 286, 478, 0, 479, 287, 0,
	288, 289, 290, 291, 480, 481, 482, 339, 940, 292,
	293, 0, 294, 295, 297, 0, 0, 0, 0, 296,
	298, 305, 0, 939, 299, 483, 301, 300, 302, 303,
	304, 484, 0, 485, 0, 306, 941, 486, 942, 307,
	308, 309, 943, 310, 311, 0, 0, 312, 313, 314,
	315, 0, 317, 316, 0, 318, 487, 944, 319, 320,
	945, 0, 321, 322, 0, 0, 323, 324, 0, 325,
	326, 328, 330, 327, 329, 331, 333, 334, 332, 946,
	335, 336, 338, 337, 0, 0, 947, 0, 488, 489,
	340, 341, 0, 342, 343, 344, 0, 0, 346, 347,
	348, 0, 0, 349, 490, 948, 350, 949, 491, 351,
	345, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	492, 360, 493, 361, 0, 362, 0, 363, 364, 365,
	366, 367, 368, 494, 369, 370, 0, 371, 372, 373,
	374, 375, 0, 377, 378, 379, 376, 380, 381, 382,
	383, 0, 384, 950, 385, 386, 387, 388, 495, 389,
	0, 390, 394, 395, 396, 397, 398, 399, 400, 0,
	407, 408, 401, 403, 404, 405, 402, 406, 409, 410,
	0, 411, 391, 392, 412, 951, 413, 496, 414, 415,
	0, 425, 416, 417, 418, 393, 419, 423, 424, 420,
	421, 422, 497, 0, 427, 428, 426, 0, 429, 430,
	431, 432, 433, 271, 434, 272, 435, 0, 498, 499,
	500, 501, 0, 442, 0, 436, 437, 502, 438, 503,
	0, 439, 440, 441, 0, 443, 444, 0, 0, 445,
	446, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 504, 505, 506, 0, 457, 456, 507, 1158,
	1157, 0, 0, 458, 459, 508, 460, 461, 462, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 463, 0, 0,
	0, 0, 221, 222, 223, 224, 464, 465, 225, 466,
	226, 227, 467, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 468, 469, 470, 0, 235, 471, 0,
	1062, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 937,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 472, 473, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 474, 267, 268, 270, 273,
	269, 274, 275, 276, 475, 476, 0, 212, 0, 0,
	0, 0, 0, 277, 278, 279, 477, 280, 281, 0,
	282, 0, 283, 0, 0, 938, 284, 285, 0, 286,
	478, 0, 479, 287, 0, 288, 289, 290, 291, 480,
	481, 482, 339, 940, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 0, 296, 298, 305, 0, 939, 299,
	483, 301, 300, 302, 303, 304, 484, 0, 485, 0,
	306, 941, 486, 942, 307, 308, 309, 943, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 487, 944, 319, 320, 945, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 946, 335, 336, 338, 337, 0,
	0, 947, 0, 488, 489, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 490,
	948, 350, 949, 491, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 492, 360, 493, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 494, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 950, 385,
	386, 387, 388, 495, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	951, 413, 496, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 497, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	272, 435, 0, 498, 499, 500, 501, 0, 442, 0,
	436, 437, 502, 438, 503, 0, 439, 440, 441, 0,
	443, 444, 0, 0, 445, 446, 447, 448, 449, 451,
	0, 452, 0, 450, 453, 454, 455, 504, 505, 506,
	1158, 457, 456, 507, 0, 0, 0, 0, 458, 459,
	508, 460, 461, 462, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 463, 0,
	0, 0, 0, 221, 222, 223, 224, 464, 465, 225,
	466, 226, 227, 467, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 468, 469, 470, 0, 235, 471,
	0, 1062, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	937, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 472, 473, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 474, 267, 268, 270,
	273, 269, 274, 275, 276, 475, 476, 0, 212, 0,
	0, 0, 0, 0, 277, 278, 279, 477, 280, 281,
	0, 282, 0, 283, 0, 0, 938, 284, 285, 0,
	286, 478, 0, 479, 287, 0, 288, 289, 290, 291,
	480, 481, 482, 339, 940, 292, 293, 0, 294, 295,
	297, 0, 0, 0, 0, 296, 298, 305, 0, 939,
	299, 483, 301, 300, 302, 303, 304, 484, 0, 485,
	0, 306, 941, 486, 942, 307, 308, 309, 943, 310,
	311, 0, 0, 312, 313, 314, 315, 0, 317, 316,
	0, 318, 487, 944, 319, 320, 945, 0, 321, 322,
	0, 0, 323, 324, 0, 325, 326, 328, 330, 327,
	329, 331, 333, 334, 332, 946, 335, 336, 338, 337,
	0, 0, 947, 0, 488, 489, 340, 341, 0, 342,
	343, 344, 0, 0, 346, 347, 348, 0, 0, 349,
	490, 948, 350, 949, 491, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 492, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 494,
	369, 370, 0, 371, 372, 373, 374, 375, 0, 377,
	378, 379, 376, 380, 381, 382, 383, 0, 384, 950,
	385, 386, 387, 388, 495, 389, 0, 390, 394, 395,
	396, 397, 398, 399, 400, 0, 407, 408, 401, 403,
	404, 405, 402, 406, 409, 410, 0, 411, 391, 392,
	412, 951, 413, 496, 414, 415, 0, 425, 416, 417,
	418, 393, 419, 423, 424, 420, 421, 422, 497, 0,
	427, 428, 426, 0, 429, 430, 431, 432, 433, 271,
	434, 272, 435, 0, 498, 499, 500, 501, 0, 442,
	0, 436, 437, 502, 438, 503, 0, 439, 440, 441,
	0, 443, 444, 0, 0, 445, 446, 447, 448, 449,
	451, 0, 452, 0, 450, 453, 454, 455, 504, 505,
	506, 209, 457, 456, 507, 0, 0, 0, 0, 458,
	459, 508, 460, 461, 462, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 463,
	0, 0, 0, 0, 221, 222, 223, 224, 464, 465,
	225, 466, 226, 227, 467, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 468, 469, 470, 2214, 235,
	471, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 2211, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 472, 473, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 474, 267, 268,
	270, 273, 269, 274, 275, 276, 475, 476, 0, 2358,
	0, 0, 0, 0, 0, 277, 278, 279, 477, 280,
	281, 0, 282, 0, 283, 2217, 0, 0, 284, 285,
	0, 286, 478, 0, 479, 287, 0, 288, 289, 290,
	291, 480, 481, 482, 339, 0, 292, 293, 0, 294,
	295, 297, 0, 0, 0, 2355, 296, 298, 305, 0,
	0, 299, 483, 301, 300, 302, 303, 304, 484, 0,
	485, 0, 2357, 0, 486, 0, 307, 308, 309, 0,
	310, 311, 0, 0, 312, 313, 314, 315, 0, 317,
	316, 0, 318, 487, 0, 319, 320, 2354, 0, 321,
	322, 0, 0, 323, 324, 0, 325, 326, 328, 330,
	327, 329, 331, 333, 334, 332, 0, 335, 336, 338,
	337, 0, 0, 0, 0, 488, 489, 340, 341, 0,
	342, 343, 344, 0, 0, 346, 347, 348, 0, 0,
	349, 490, 0, 350, 0, 491, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 492, 360, 493,
	361, 2216, 362, 0, 363, 364, 365, 366, 367, 368,
	494, 369, 370, 0, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 495, 389, 0, 390, 394,
	395, 396, 397, 398, 399, 400, 0, 407, 408, 401,
	403, 404, 405, 402, 406, 409, 410, 0, 411, 391,
	392, 412, 0, 413, 496, 414, 415, 0, 425, 416,
	417, 418, 393, 419, 423, 424, 420, 421, 422, 497,
	0, 427, 428, 426, 0, 429, 430, 431, 432, 433,
	271, 434, 272, 435, 0, 498, 499, 500, 501, 0,
	442, 0, 436, 437, 502, 438, 503, 0, 439, 440,
	441, 0, 443, 444, 0, 2356, 445, 446, 447, 448,
	449, 451, 0, 452, 0, 450, 453, 454, 455, 504,
	505, 506, 209, 457, 456, 507, 0, 0, 0, 0,
	458, 459, 508, 460, 461, 462, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	463, 0, 0, 0, 0, 221, 222, 223, 224, 464,
	465, 225, 466, 226, 227, 467, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 468, 469, 470, 2214,
	235, 471, 0, 0, 2208, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 2211, 245, 0, 246, 247,
	248, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 472, 473,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 474, 267,
	268, 270, 273, 269, 274, 275, 276, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 277, 278, 279, 477,
	280, 281, 0, 282, 0, 283, 2217, 0, 0, 284,
	285, 0, 286, 478, 0, 479, 287, 0, 288, 289,
	290, 291, 2207, 481, 482, 339, 0, 292, 293, 0,
	294, 295, 297, 0, 0, 0, 0, 296, 298, 305,
	0, 0, 299, 483, 301, 300, 302, 303, 304, 484,
	0, 485, 0, 306, 0, 486, 0, 307, 308, 309,
	0, 310, 311, 0, 0, 312, 313, 314, 315, 0,
	317, 316, 0, 318, 487, 0, 319, 320, 0, 0,
	321, 322, 0, 0, 323, 324, 0, 325, 326, 328,
	330, 327, 329, 331, 333, 334, 332, 0, 335, 336,
	338, 337, 0, 0, 0, 0, 488, 489, 340, 341,
	0, 342, 343, 344, 0, 0, 346, 347, 348, 0,
	0, 349, 490, 0, 350, 0, 491, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 492, 360,
	493, 361, 2216, 362, 0, 363, 364, 365, 366, 367,
	368, 494, 369, 370, 0, 371, 372, 373, 374, 375,
	0, 377, 378, 379, 376, 380, 381, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 495, 389, 0, 390,
	394, 395, 396, 397, 398, 399, 400, 0, 407, 408,
	401, 403, 404, 405, 402, 406, 409, 410, 0, 411,
	391, 392, 412, 0, 413, 496, 414, 415, 0, 425,
	416, 417, 418, 393, 419, 423, 424, 420, 421, 422,
	497, 0, 427, 428, 426, 0, 429, 430, 431, 432,
	433, 271, 434, 272, 435, 0, 498, 499, 500, 501,
	0, 442, 0, 436, 437, 502, 438, 503, 0, 439,
	440, 441, 0, 443, 444, 0, 2215, 445, 446, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	504, 505, 506, 0, 457, 456, 507, 1375, 0, 209,
	0, 458, 459, 508, 460, 461, 462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 463, 0, 0,
	0, 0, 221, 222, 223, 224, 464, 465, 225, 466,
	226, 227, 467, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 468, 469, 470, 0, 235, 471, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 472, 473, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 474, 267, 268, 270, 273,
	269, 274, 275, 276, 475, 476, 0, 212, 0, 0,
	0, 0, 0, 277, 278, 279, 477, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	478, 0, 479, 287, 0, 288, 289, 290, 291, 480,
	481, 482, 339, 0, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 213, 296, 298, 305, 0, 0, 299,
	483, 301, 300, 302, 303, 304, 484, 0, 485, 0,
	306, 0, 486, 0, 307, 308, 309, 0, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 487, 0, 319, 320, 0, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 0, 335, 336, 338, 337, 0,
	214, 0, 0, 488, 489, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 490,
	0, 350, 0, 491, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 492, 360, 493, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 494, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 495, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 1378, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	0, 413, 496, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 497, 0, 427,
	428, 426, 1376, 429, 430, 431, 432, 433, 271, 434,
	272, 435, 0, 498, 499, 500, 501, 0, 442, 0,
	436, 437, 502, 438, 503, 0, 439, 440, 441, 0,
	443, 444, 0, 0, 445, 446, 447, 448, 449, 451,
	0, 452, 0, 450, 453, 454, 455, 504, 505, 506,
	0, 1377, 456, 507, 1146, 0, 209, 0, 458, 459,
	508, 460, 461, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 463, 0, 0, 0, 0, 221,
	222, 223, 224, 464, 465, 225, 466, 226, 227, 467,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	468, 469, 470, 0, 235, 471, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 472, 473, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 474, 267, 268, 270, 273, 269, 274, 275,
	276, 475, 476, 0, 212, 0, 0, 0, 0, 0,
	277, 278, 279, 477, 280, 281, 0, 282, 0, 283,
	0, 0, 0, 284, 285, 0, 286, 478, 0, 479,
	287, 0, 288, 289, 290, 291, 1148, 481, 482, 339,
	0, 292, 293, 0, 294, 295, 297, 0, 0, 0,
	213, 296, 298, 305, 0, 0, 299, 483, 301, 300,
	302, 303, 304, 484, 0, 485, 0, 306, 0, 486,
	0, 307, 308, 309, 0, 310, 311, 0, 0, 312,
	313, 314, 315, 0, 317, 316, 0, 318, 487, 0,
	319, 320, 0, 0, 321, 322, 0, 0, 323, 324,
	0, 325, 326, 328, 330, 327, 329, 331, 333, 334,
	332, 0, 335, 336, 338, 337, 0, 214, 0, 0,
	488, 489, 340, 341, 0, 342, 343, 344, 0, 992,
	346, 347, 348, 0, 0, 349, 490, 0, 350, 0,
	491, 351, 345, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 492, 360, 493, 361, 0, 362, 0, 363,
	364, 365, 366, 367, 368, 494, 369, 370, 0, 371,
	372, 373, 374, 375, 0, 377, 378, 379, 376, 380,
	381, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	495, 389, 0, 390, 394, 395, 396, 397, 398, 399,
	400, 0, 407, 408, 401, 403, 404, 405, 402, 406,
	409, 410, 0, 411, 391, 392, 412, 0, 413, 496,
	414, 415, 0, 425, 416, 417, 418, 393, 419, 423,
	424, 420, 421, 422, 497, 0, 427, 428, 426, 0,
	429, 430, 431, 432, 433, 271, 434, 272, 435, 0,
	498, 499, 500, 501, 0, 442, 0, 436, 437, 502,
	438, 503, 0, 439, 440, 441, 0, 443, 444, 0,
	0, 445, 446, 447, 448, 449, 451, 0, 452, 0,
	450, 453, 454, 455, 504, 505, 506, 0, 457, 456,
	507, 1143, 0, 209, 0, 458, 459, 508, 460, 461,
	462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 463, 0, 0, 0, 0, 221, 222, 223, 224,
	464, 465, 225, 466, 226, 227, 467, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 468, 469, 470,
	0, 235, 471, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 472,
	473, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 474,
	267, 268, 270, 273, 269, 274, 275, 276, 475, 476,
	0, 212, 0, 0, 0, 0, 0, 277, 278, 279,
	477, 280, 281, 0, 282, 0, 283, 0, 0, 0,
	284, 285, 0, 286, 478, 0, 479, 287, 0, 288,
	289, 290, 291, 1145, 481, 482, 339, 0, 292, 293,
	0, 294, 295, 297, 0, 0, 0, 213, 296, 298,
	305, 0, 0, 299, 483, 301, 300, 302, 303, 304,
	484, 0, 485, 0, 306, 0, 486, 0, 307, 308,
	309, 0, 310, 311, 0, 0, 312, 313, 314, 315,
	0, 317, 316, 0, 318, 487, 0, 319, 320, 0,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 334, 332, 0, 335,
	336, 338, 337, 0, 214, 0, 0, 488, 489, 340,
	341, 0, 342, 343, 344, 0, 992, 346, 347, 348,
	0, 0, 349, 490, 0, 350, 0, 491, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 492,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 494, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 495, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 0, 407,
	408, 401, 403, 404, 405, 402, 406, 409, 410, 0,
	411, 391, 392, 412, 0, 413, 496, 414, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 424, 420, 421,
	422, 497, 0, 427, 428, 426, 0, 429, 430, 431,
	432, 433, 271, 434, 272, 435, 0, 498, 499, 500,
	501, 0, 442, 0, 436, 437, 502, 438, 503, 0,
	439, 440, 441, 0, 443, 444, 0, 0, 445, 446,
	447, 448, 449, 451, 0, 452, 0, 450, 453, 454,
	455, 504, 505, 506, 0, 457, 456, 507, 1050, 0,
	209, 0, 458, 459, 508, 460, 461, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 463, 0,
	0, 0, 0, 221, 222, 223, 224, 464, 465, 225,
	466, 226, 227, 467, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 468, 469, 470, 0, 235, 471,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 472, 473, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 474, 267, 268, 270,
	273, 269, 274, 275, 276, 475, 476, 0, 212, 0,
	0, 0, 0, 0, 277, 278, 279, 477, 280, 281,
	0, 282, 0, 283, 0, 0, 0, 284, 285, 0,
	286, 478, 0, 479, 287, 0, 288, 289, 290, 291,
	1052, 481, 482, 339, 0, 292, 293, 0, 294, 295,
	297, 0, 0, 0, 213, 296, 298, 305, 0, 0,
	299, 483, 301, 300, 302, 303, 304, 484, 0, 485,
	0, 306, 0, 486, 0, 307, 308, 309, 0, 310,
	311, 0, 0, 312, 313, 314, 315, 0, 317, 316,
	0, 318, 487, 0, 319, 320, 0, 0, 321, 322,
	0, 0, 323, 324, 0, 325, 326, 328, 330, 327,
	329, 331, 333, 334, 332, 0, 335, 336, 338, 337,
	0, 214, 0, 0, 488, 489, 340, 341, 0, 342,
	343, 344, 0, 992, 346, 347, 348, 0, 0, 349,
	490, 0, 350, 0, 491, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 492, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 494,
	369, 370, 0, 371, 372, 373, 374, 375, 0, 377,
	378, 379, 376, 380, 381, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 495, 389, 0, 390, 394, 395,
	396, 397, 398, 399, 400, 0, 407, 408, 401, 403,
	404, 405, 402, 406, 409, 410, 0, 411, 391, 392,
	412, 0, 413, 496, 414, 415, 0, 425, 416, 417,
	418, 393, 419, 423, 424, 420, 421, 422, 497, 0,
	427, 428, 426, 0, 429, 430, 431, 432, 433, 271,
	434, 272, 435, 0, 498, 499, 500, 501, 0, 442,
	0, 436, 437, 502, 438, 503, 0, 439, 440, 441,
	0, 443, 444, 0, 0, 445, 446, 447, 448, 449,
	451, 0, 452, 0, 450, 453, 454, 455, 504, 505,
	506, 0, 457, 456, 507, 539, 0, 209, 0, 458,
	459, 508, 460, 461, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 538, 219, 528,
	220, 0, 0, 0, 0, 463, 0, 0, 0, 0,
	221, 222, 223, 224, 464, 465, 225, 466, 226, 227,
	467, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 468, 469, 470, 0, 235, 471, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 531, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 472, 473, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 474, 267, 268, 270, 273, 269, 274,
	275, 276, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 277, 278, 279, 477, 280, 281, 0, 282, 0,
	283, 0, 0, 0, 284, 285, 532, 286, 478, 0,
	479, 287, 0, 288, 289, 290, 291, 480, 481, 482,
	339, 0, 292, 293, 0, 294, 295, 297, 0, 0,
	0, 0, 296, 298, 305, 0, 0, 299, 483, 301,
	300, 302, 303, 304, 484, 0, 485, 0, 306, 0,
	486, 0, 307, 308, 309, 0, 310, 311, 0, 0,
	312, 313, 314, 315, 0, 317, 316, 0, 318, 487,
	0, 319, 320, 0, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	334, 332, 0, 335, 336, 338, 337, 0, 0, 0,
	0, 488, 489, 340, 341, 0, 342, 343, 344, 0,
	0, 346, 347, 348, 0, 0, 349, 490, 0, 350,
	0, 491, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 492, 360, 493, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 494, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 495, 389, 0, 390, 394, 395, 396, 397, 398,
	399, 400, 533, 407, 408, 401, 403, 404, 405, 402,
	406, 409, 410, 0, 411, 391, 392, 412, 0, 413,
	496, 414, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 424, 420, 421, 422, 497, 0, 427, 428, 426,
	0, 429, 430, 431, 432, 433, 271, 434, 272, 435,
	0, 498, 499, 500, 501, 0, 442, 0, 436, 437,
	502, 438, 503, 0, 439, 440, 441, 0, 443, 444,
	0, 0, 445, 446, 447, 448, 449, 451, 0, 452,
	0, 450, 453, 454, 455, 504, 505, 506, 0, 457,
	456, 507, 527, 0, 209, 0, 458, 459, 508, 460,
	461, 462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 528, 220, 0, 0,
	0, 0, 463, 0, 0, 0, 0, 221, 222, 223,
	224, 464, 465, 225, 466, 226, 227, 467, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 468, 469,
	470, 0, 235, 471, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 531, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	472, 473, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	474, 267, 268, 270, 273, 269, 274, 275, 276, 475,
	476, 0, 0, 0, 0, 0, 0, 0, 277, 278,
	279, 477, 280, 281, 0, 282, 0, 283, 0, 0,
	0, 284, 285, 532, 286, 478, 0, 479, 287, 0,
	288, 289, 290, 291, 480, 481, 482, 339, 0, 292,
	293, 0, 294, 295, 297, 0, 0, 0, 0, 296,
	298, 305, 0, 0, 299, 483, 301, 300, 302, 303,
	304, 484, 0, 485, 0, 306, 0, 486, 0, 307,
	308, 309, 0, 310, 311, 0, 0, 312, 313, 314,
	315, 0, 317, 316, 0, 318, 487, 0, 319, 320,
	0, 0, 321, 322, 0, 0, 323, 324, 0, 325,
	326, 328, 330, 327, 329, 331, 333, 334, 332, 0,
	335, 336, 338, 337, 0, 0, 0, 0, 488, 489,
	340, 341, 0, 342, 343, 344, 0, 0, 346, 347,
	348, 0, 0, 349, 490, 0, 350, 0, 491, 351,
	345, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	492, 360, 493, 361, 0, 362, 0, 363, 364, 365,
	366, 367, 368, 494, 369, 370, 0, 371, 372, 373,
	374, 375, 0, 377, 378, 379, 376, 380, 381, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 495, 389,
	0, 390, 394, 395, 396, 397, 398, 399, 400, 533,
	407, 408, 401, 403, 404, 405, 402, 406, 409, 410,
	0, 411, 391, 392, 412, 0, 413, 496, 414, 415,
	0, 425, 416, 417, 418, 393, 419, 423, 424, 420,
	421, 422, 497, 0, 427, 428, 426, 0, 429, 430,
	431, 432, 433, 271, 434, 272, 435, 0, 498, 499,
	500, 501, 0, 442, 0, 436, 437, 502, 438, 503,
	0, 439, 440, 441, 0, 443, 444, 0, 0, 445,
	446, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 504, 505, 506, 209, 457, 456, 507, 0,
	0, 0, 0, 458, 459, 508, 460, 461, 462, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 463, 0, 0, 0, 0, 221, 222,
	223, 224, 464, 465, 225, 466, 226, 227, 467, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 468,
	469, 470, 0, 235, 471, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 472, 473, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 474, 267, 268, 270, 273, 269, 274, 275, 276,
	475, 476, 0, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 477, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 0, 286, 478, 0, 479, 287,
	0, 288, 289, 290, 291, 480, 481, 482, 339, 0,
	292, 293, 0, 294, 295, 297, 0, 0, 0, 213,
	296, 298, 305, 0, 0, 299, 483, 301, 300, 302,
	303, 304, 484, 0, 485, 0, 306, 0, 486, 0,
	307, 308, 309, 0, 310, 311, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 487, 0, 319,
	320, 0, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	0, 335, 336, 338, 337, 0, 214, 0, 0, 488,
	489, 340, 341, 0, 342, 343, 344, 0, 992, 346,
	347, 348, 0, 0, 349, 490, 0, 350, 0, 491,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 492, 360, 493, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 494, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 495,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 0, 411, 391, 392, 412, 0, 413, 496, 414,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 497, 0, 427, 428, 426, 0, 429,
	430, 431, 432, 433, 271, 434, 272, 435, 0, 498,
	499, 500, 501, 0, 442, 0, 436, 437, 502, 438,
	503, 0, 439, 440, 441, 0, 443, 444, 0, 0,
	445, 446, 447, 448, 449, 451, 0, 452, 0, 450,
	453, 454, 455, 504, 505, 506, 0, 457, 456, 507,
	2287, 0, 209, 0, 458, 459, 508, 460, 461, 462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	463, 0, 0, 0, 0, 221, 222, 223, 224, 464,
	465, 225, 466, 226, 227, 467, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 468, 469, 470, 0,
	235, 471, 0, 0, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 472, 473,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 474, 267,
	268, 270, 273, 269, 274, 275, 276, 475, 476, 0,
	212, 0, 0, 0, 0, 0, 277, 278, 279, 477,
	280, 281, 0, 282, 0, 283, 0, 0, 0, 284,
	285, 0, 286, 478, 0, 479, 287, 0, 288, 289,
	290, 291, 480, 481, 482, 339, 0, 292, 293, 0,
	294, 295, 297, 0, 0, 0, 213, 296, 298, 305,
	0, 0, 299, 483, 301, 300, 302, 303, 304, 484,
	0, 485, 0, 306, 0, 486, 0, 307, 308, 309,
	0, 310, 311, 0, 0, 312, 313, 314, 315, 0,
	317, 316, 0, 318, 487, 0, 319, 320, 0, 0,
	321, 322, 0, 0, 323, 324, 0, 325, 326, 328,
	330, 327, 329, 331, 333, 334, 332, 0, 335, 336,
	338, 337, 0, 214, 0, 0, 488, 489, 340, 341,
	0, 342, 343, 344, 0, 0, 346, 347, 348, 0,
	0, 349, 490, 0, 350, 0, 491, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 492, 360,
	493, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 494, 369, 370, 0, 371, 372, 373, 374, 375,
	0, 377, 378, 379, 376, 380, 381, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 495, 389, 0, 390,
	394, 395, 396, 397, 398, 399, 400, 0, 407, 408,
	401, 403, 404, 405, 402, 406, 409, 410, 0, 411,
	391, 392, 412, 0, 413, 496, 414, 415, 0, 425,
	416, 417, 418, 393, 419, 423, 424, 420, 421, 422,
	497, 0, 427, 428, 426, 0, 429, 430, 431, 432,
	433, 271, 434, 272, 435, 0, 498, 499, 500, 501,
	0, 442, 0, 436, 437, 502, 438, 503, 0, 439,
	440, 441, 0, 443, 444, 0, 0, 445, 446, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	504, 505, 506, 0, 457, 456, 507, 1857, 0, 209,
	0, 458, 459, 508, 460, 461, 462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 463, 0, 0,
	0, 0, 221, 222, 223, 224, 464, 465, 225, 466,
	226, 227, 467, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 468, 469, 470, 0, 235, 471, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 472, 473, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 474, 267, 268, 270, 273,
	269, 274, 275, 276, 475, 476, 0, 212, 0, 0,
	0, 0, 0, 277, 278, 279, 477, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	478, 0, 479, 287, 0, 288, 289, 290, 291, 480,
	481, 482, 339, 0, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 213, 296, 298, 305, 0, 0, 299,
	483, 301, 300, 302, 303, 304, 484, 0, 485, 0,
	306, 0, 486, 0, 307, 308, 309, 0, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 487, 0, 319, 320, 0, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 0, 335, 336, 338, 337, 0,
	214, 0, 0, 488, 489, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 490,
	0, 350, 0, 491, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 492, 360, 493, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 494, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 495, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	0, 413, 496, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 497, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	272, 435, 0, 498, 499, 500, 501, 0, 442, 0,
	436, 437, 502, 438, 503, 0, 439, 440, 441, 0,
	443, 444, 0, 0, 445, 446, 447, 448, 449, 451,
	0, 452, 0, 450, 453, 454, 455, 504, 505, 506,
	209, 457, 456, 507, 0, 0, 0, 0, 458, 459,
	508, 460, 461, 462, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 463, 0,
	0, 0, 0, 221, 222, 223, 224, 464, 465, 225,
	466, 226, 227, 467, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 468, 469, 470, 0, 235, 471,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 472, 473, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 474, 267, 268, 270,
	273, 269, 274, 275, 276, 475, 476, 0, 212, 0,
	0, 0, 0, 0, 277, 278, 279, 477, 280, 281,
	0, 282, 0, 283, 0, 0, 0, 284, 285, 0,
	286, 478, 0, 479, 287, 0, 288, 289, 290, 291,
	480, 481, 482, 339, 0, 292, 293, 0, 294, 295,
	297, 0, 0, 0, 213, 296, 298, 305, 0, 0,
	299, 483, 301, 300, 302, 303, 304, 484, 0, 485,
	0, 306, 0, 486, 0, 307, 308, 309, 0, 310,
	311, 0, 0, 312, 313, 314, 315, 0, 317, 316,
	0, 318, 487, 0, 319, 320, 0, 0, 321, 322,
	0, 0, 323, 324, 0, 325, 326, 328, 330, 327,
	329, 331, 333, 334, 332, 0, 335, 336, 338, 337,
	0, 214, 0, 0, 488, 489, 340, 341, 0, 342,
	343, 344, 0, 0, 346, 347, 348, 0, 0, 349,
	490, 0, 350, 0, 491, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 492, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 494,
	369, 370, 0, 371, 372, 373, 374, 375, 0, 377,
	378, 379, 376, 380, 381, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 495, 389, 0, 390, 394, 395,
	396, 397, 398, 399, 400, 0, 407, 408, 401, 403,
	404, 405, 402, 406, 409, 410, 0, 411, 391, 392,
	412, 0, 413, 496, 414, 415, 0, 425, 416, 417,
	418, 393, 419, 423, 424, 420, 421, 422, 497, 0,
	427, 428, 426, 1794, 429, 430, 431, 432, 433, 271,
	434, 272, 435, 0, 498, 499, 500, 501, 0, 442,
	0, 436, 437, 502, 438, 503, 0, 439, 440, 441,
	0, 443, 444, 0, 0, 445, 446, 447, 448, 449,
	451, 0, 452, 0, 450, 453, 454, 455, 504, 505,
	506, 0, 457, 456, 507, 1787, 0, 209, 0, 458,
	459, 508, 460, 461, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 463, 0, 0, 0, 0,
	221, 222, 223, 224, 464, 465, 225, 466, 226, 227,
	467, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 468, 469, 470, 0, 235, 471, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 472, 473, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 474, 267, 268, 270, 273, 269, 274,
	275, 276, 475, 476, 0, 212, 0, 0, 0, 0,
	0, 277, 278, 279, 477, 280, 281, 0, 282, 0,
	283, 0, 0, 0, 284, 285, 0, 286, 478, 0,
	479, 287, 0, 288, 289, 290, 291, 1786, 481, 482,
	339, 0, 292, 293, 0, 294, 295, 297, 0, 0,
	0, 213, 296, 298, 305, 0, 0, 299, 483, 301,
	300, 302, 303, 304, 484, 0, 485, 0, 306, 0,
	486, 0, 307, 308, 309, 0, 310, 311, 0, 0,
	312, 313, 314, 315, 0, 317, 316, 0, 318, 487,
	0, 319, 320, 0, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	334, 332, 0, 335, 336, 338, 337, 0, 214, 0,
	0, 488, 489, 340, 341, 0, 342, 343, 344, 0,
	0, 346, 347, 348, 0, 0, 349, 490, 0, 350,
	0, 491, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 492, 360, 493, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 494, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 495, 389, 0, 390, 394, 395, 396, 397, 398,
	399, 400, 0, 407, 408, 401, 403, 404, 405, 402,
	406, 409, 410, 0, 411, 391, 392, 412, 0, 413,
	496, 414, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 424, 420, 421, 422, 497, 0, 427, 428, 426,
	0, 429, 430, 431, 432, 433, 271, 434, 272, 435,
	0, 498, 499, 500, 501, 0, 442, 0, 436, 437,
	502, 438, 503, 0, 439, 440, 441, 0, 443, 444,
	0, 0, 445, 446, 447, 448, 449, 451, 0, 452,
	0, 450, 453, 454, 455, 504, 505, 506, 0, 457,
	456, 507, 1782, 0, 209, 0, 458, 459, 508, 460,
	461, 462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 463, 0, 0, 0, 0, 221, 222, 223,
	224, 464, 465, 225, 466, 226, 227, 467, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 468, 469,
	470, 0, 235, 471, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	472, 473, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	474, 267, 268, 270, 273, 269, 274, 275, 276, 475,
	476, 0, 212, 0, 0, 0, 0, 0, 277, 278,
	279, 477, 280, 281, 0, 282, 0, 283, 0, 0,
	0, 284, 285, 0, 286, 478, 0, 479, 287, 0,
	288, 289, 290, 291, 1784, 481, 482, 339, 0, 292,
	293, 0, 294, 295, 297, 0, 0, 0, 213, 296,
	298, 305, 0, 0, 299, 483, 301, 300, 302, 303,
	304, 484, 0, 485, 0, 306, 0, 486, 0, 307,
	308, 309, 0, 310, 311, 0, 0, 312, 313, 314,
	315, 0, 317, 316, 0, 318, 487, 0, 319, 320,
	0, 0, 321, 322, 0, 0, 323, 324, 0, 325,
	326, 328, 330, 327, 329, 331, 333, 334, 332, 0,
	335, 336, 338, 337, 0, 214, 0, 0, 488, 489,
	340, 341, 0, 342, 343, 344, 0, 0, 346, 347,
	348, 0, 0, 349, 490, 0, 350, 0, 491, 351,
	345, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	492, 360, 493, 361, 0, 362, 0, 363, 364, 365,
	366, 367, 368, 494, 369, 370, 0, 371, 372, 373,
	374, 375, 0, 377, 378, 379, 376, 380, 381, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 495, 389,
	0, 390, 394, 395, 396, 397, 398, 399, 400, 0,
	407, 408, 401, 403, 404, 405, 402, 406, 409, 410,
	0, 411, 391, 392, 412, 0, 413, 496, 414, 415,
	0, 425, 416, 417, 418, 393, 419, 423, 424, 420,
	421, 422, 497, 0, 427, 428, 426, 0, 429, 430,
	431, 432, 433, 271, 434, 272, 435, 0, 498, 499,
	500, 501, 0, 442, 0, 436, 437, 502, 438, 503,
	0, 439, 440, 441, 0, 443, 444, 0, 0, 445,
	446, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 504, 505, 506, 0, 457, 456, 507, 1288,
	0, 209, 0, 458, 459, 508, 460, 461, 462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 463,
	0, 0, 0, 0, 221, 222, 223, 224, 464, 465,
	225, 466, 226, 227, 467, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 468, 469, 470, 0, 235,
	471, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 472, 473, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 474, 267, 268,
	270, 273, 269, 274, 275, 276, 475, 476, 0, 212,
	0, 0, 0, 0, 0, 277, 278, 279, 477, 280,
	281, 0, 282, 0, 283, 0, 0, 0, 284, 285,
	0, 286, 478, 0, 479, 287, 0, 288, 289, 290,
	291, 1287, 481, 482, 339, 0, 292, 293, 0, 294,
	295, 297, 0, 0, 0, 213, 296, 298, 305, 0,
	0, 299, 483, 301, 300, 302, 303, 304, 484, 0,
	485, 0, 306, 0, 486, 0, 307, 308, 309, 0,
	310, 311, 0, 0, 312, 313, 314, 315, 0, 317,
	316, 0, 318, 487, 0, 319, 320, 0, 0, 321,
	322, 0, 0, 323, 324, 0, 325, 326, 328, 330,
	327, 329, 331, 333, 334, 332, 0, 335, 336, 338,
	337, 0, 214, 0, 0, 488, 489, 340, 341, 0,
	342, 343, 344, 0, 0, 346, 347, 348, 0, 0,
	349, 490, 0, 350, 0, 491, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 492, 360, 493,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	494, 369, 370, 0, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 495, 389, 0, 390, 394,
	395, 396, 397, 398, 399, 400, 0, 407, 408, 401,
	403, 404, 405, 402, 406, 409, 410, 0, 411, 391,
	392, 412, 0, 413, 496, 414, 415, 0, 425, 416,
	417, 418, 393, 419, 423, 424, 420, 421, 422, 497,
	0, 427, 428, 426, 0, 429, 430, 431, 432, 433,
	271, 434, 272, 435, 0, 498, 499, 500, 501, 0,
	442, 0, 436, 437, 502, 438, 503, 0, 439, 440,
	441, 0, 443, 444, 0, 0, 445, 446, 447, 448,
	449, 451, 0, 452, 0, 450, 453, 454, 455, 504,
	505, 506, 0, 457, 456, 507, 1285, 0, 209, 0,
	458, 459, 508, 460, 461, 462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 463, 0, 0, 0,
	0, 221, 222, 223, 224, 464, 465, 225, 466, 226,
	227, 467, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 468, 469, 470, 0, 235, 471, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 472, 473, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 474, 267, 268, 270, 273, 269,
	274, 275, 276, 475, 476, 0, 212, 0, 0, 0,
	0, 0, 277, 278, 279, 477, 280, 281, 0, 282,
	0, 283, 0, 0, 0, 284, 285, 0, 286, 478,
	0, 479, 287, 0, 288, 289, 290, 291, 1284, 481,
	482, 339, 0, 292, 293, 0, 294, 295, 297, 0,
	0, 0, 213, 296, 298, 305, 0, 0, 299, 483,
	301, 300, 302, 303, 304, 484, 0, 485, 0, 306,
	0, 486, 0, 307, 308, 309, 0, 310, 311, 0,
	0, 312, 313, 314, 315, 0, 317, 316, 0, 318,
	487, 0, 319, 320, 0, 0, 321, 322, 0, 0,
	323, 324, 0, 325, 326, 328, 330, 327, 329, 331,
	333, 334, 332, 0, 335, 336, 338, 337, 0, 214,
	0, 0, 488, 489, 340, 341, 0, 342, 343, 344,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 0,
	350, 0, 491, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 492, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 494, 369, 370,
	0, 371, 372, 373, 374, 375, 0, 377, 378, 379,
	376, 380, 381, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 495, 389, 0, 390, 394, 395, 396, 397,
	398, 399, 400, 0, 407, 408, 401, 403, 404, 405,
	402, 406, 409, 410, 0, 411, 391, 392, 412, 0,
	413, 496, 414, 415, 0, 425, 416, 417, 418, 393,
	419, 423, 424, 420, 421, 422, 497, 0, 427, 428,
	426, 0, 429, 430, 431, 432, 433, 271, 434, 272,
	435, 0, 498, 499, 500, 501, 0, 442, 0, 436,
	437, 502, 438, 503, 0, 439, 440, 441, 0, 443,
	444, 0, 0, 445, 446, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 504, 505, 506, 0,
	457, 456, 507, 1282, 0, 209, 0, 458, 459, 508,
	460, 461, 462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 463, 0, 0, 0, 0, 221, 222,
	223, 224, 464, 465, 225, 466, 226, 227, 467, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 468,
	469, 470, 0, 235, 471, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 472, 473, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 474, 267, 268, 270, 273, 269, 274, 275, 276,
	475, 476, 0, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 477, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 0, 286, 478, 0, 479, 287,
	0, 288, 289, 290, 291, 1281, 481, 482, 339, 0,
	292, 293, 0, 294, 295, 297, 0, 0, 0, 213,
	296, 298, 305, 0, 0, 299, 483, 301, 300, 302,
	303, 304, 484, 0, 485, 0, 306, 0, 486, 0,
	307, 308, 309, 0, 310, 311, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 487, 0, 319,
	320, 0, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	0, 335, 336, 338, 337, 0, 214, 0, 0, 488,
	489, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 490, 0, 350, 0, 491,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 492, 360, 493, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 494, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 495,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 0, 411, 391, 392, 412, 0, 413, 496, 414,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 497, 0, 427, 428, 426, 0, 429,
	430, 431, 432, 433, 271, 434, 272, 435, 0, 498,
	499, 500, 501, 0, 442, 0, 436, 437, 502, 438,
	503, 0, 439, 440, 441, 0, 443, 444, 0, 0,
	445, 446, 447, 448, 449, 451, 0, 452, 0, 450,
	453, 454, 455, 504, 505, 506, 0, 457, 456, 507,
	1278, 0, 209, 0, 458, 459, 508, 460, 461, 462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	463, 0, 0, 0, 0, 221, 222, 223, 224, 464,
	465, 225, 466, 226, 227, 467, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 468, 469, 470, 0,
	235, 471, 0, 0, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 472, 473,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 474, 267,
	268, 270, 273, 269, 274, 275, 276, 475, 476, 0,
	212, 0, 0, 0, 0, 0, 277, 278, 279, 477,
	280, 281, 0, 282, 0, 283, 0, 0, 0, 284,
	285, 0, 286, 478, 0, 479, 287, 0, 288, 289,
	290, 291, 1277, 481, 482, 339, 0, 292, 293, 0,
	294, 295, 297, 0, 0, 0, 213, 296, 298, 305,
	0, 0, 299, 483, 301, 300, 302, 303, 304, 484,
	0, 485, 0, 306, 0, 486, 0, 307, 308, 309,
	0, 310, 311, 0, 0, 312, 313, 314, 315, 0,
	317, 316, 0, 318, 487, 0, 319, 320, 0, 0,
	321, 322, 0, 0, 323, 324, 0, 325, 326, 328,
	330, 327, 329, 331, 333, 334, 332, 0, 335, 336,
	338, 337, 0, 214, 0, 0, 488, 489, 340, 341,
	0, 342, 343, 344, 0, 0, 346, 347, 348, 0,
	0, 349, 490, 0, 350, 0, 491, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 492, 360,
	493, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 494, 369, 370, 0, 371, 372, 373, 374, 375,
	0, 377, 378, 379, 376, 380, 381, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 495, 389, 0, 390,
	394, 395, 396, 397, 398, 399, 400, 0, 407, 408,
	401, 403, 404, 405, 402, 406, 409, 410, 0, 411,
	391, 392, 412, 0, 413, 496, 414, 415, 0, 425,
	416, 417, 418, 393, 419, 423, 424, 420, 421, 422,
	497, 0, 427, 428, 426, 0, 429, 430, 431, 432,
	433, 271, 434, 272, 435, 0, 498, 499, 500, 501,
	0, 442, 0, 436, 437, 502, 438, 503, 0, 439,
	440, 441, 0, 443, 444, 0, 0, 445, 446, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	504, 505, 506, 0, 457, 456, 507, 1253, 0, 209,
	0, 458, 459, 508, 460, 461, 462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 463, 0, 0,
	0, 0, 221, 222, 223, 224, 464, 465, 225, 466,
	226, 227, 467, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 468, 469, 470, 0, 235, 471, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 472, 473, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 474, 267, 268, 270, 273,
	269, 274, 275, 276, 475, 476, 0, 212, 0, 0,
	0, 0, 0, 277, 278, 279, 477, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	478, 0, 479, 287, 0, 288, 289, 290, 291, 480,
	481, 482, 339, 0, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 213, 296, 298, 305, 0, 0, 299,
	483, 301, 300, 302, 303, 304, 484, 0, 485, 0,
	306, 0, 486, 0, 307, 308, 309, 0, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 487, 0, 319, 320, 0, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 0, 335, 336, 338, 337, 0,
	214, 0, 0, 488, 489, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 490,
	0, 350, 0, 491, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 492, 360, 493, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 494, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 495, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	0, 413, 496, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 497, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	272, 435, 0, 498, 499, 500, 501, 0, 442, 0,
	436, 437, 502, 438, 503, 0, 439, 440, 441, 0,
	443, 444, 0, 0, 445, 446, 447, 448, 449, 451,
	0, 452, 0, 450, 453, 454, 455, 504, 505, 506,
	0, 457, 456, 507, 1168, 0, 209, 0, 458, 459,
	508, 460, 461, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 463, 0, 0, 0, 0, 221,
	222, 223, 224, 464, 465, 225, 466, 226, 227, 467,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	468, 469, 470, 0, 235, 471, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 472, 473, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 474, 267, 268, 270, 273, 269, 274, 275,
	276, 475, 476, 0, 212, 0, 0, 0, 0, 0,
	277, 278, 279, 477, 280, 281, 0, 282, 0, 283,
	0, 0, 0, 284, 285, 0, 286, 478, 0, 479,
	287, 0, 288, 289, 290, 291, 1170, 481, 482, 339,
	0, 292, 293, 0, 294, 295, 297, 0, 0, 0,
	213, 296, 298, 305, 0, 0, 299, 483, 301, 300,
	302, 303, 304, 484, 0, 485, 0, 306, 0, 486,
	0, 307, 308, 309, 0, 310, 311, 0, 0, 312,
	313, 314, 315, 0, 317, 316, 0, 318, 487, 0,
	319, 320, 0, 0, 321, 322, 0, 0, 323, 324,
	0, 325, 326, 328, 330, 327, 329, 331, 333, 334,
	332, 0, 335, 336, 338, 337, 0, 214, 0, 0,
	488, 489, 340, 341, 0, 342, 343, 344, 0, 0,
	346, 347, 348, 0, 0, 349, 490, 0, 350, 0,
	491, 351, 345, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 492, 360, 493, 361, 0, 362, 0, 363,
	364, 365, 366, 367, 368, 494, 369, 370, 0, 371,
	372, 373, 374, 375, 0, 377, 378, 379, 376, 380,
	381, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	495, 389, 0, 390, 394, 395, 396, 397, 398, 399,
	400, 0, 407, 408, 401, 403, 404, 405, 402, 406,
	409, 410, 0, 411, 391, 392, 412, 0, 413, 496,
	414, 415, 0, 425, 416, 417, 418, 393, 419, 423,
	424, 420, 421, 422, 497, 0, 427, 428, 426, 0,
	429, 430, 431, 432, 433, 271, 434, 272, 435, 0,
	498, 499, 500, 501, 0, 442, 0, 436, 437, 502,
	438, 503, 0, 439, 440, 441, 0, 443, 444, 0,
	0, 445, 446, 447, 448, 449, 451, 0, 452, 0,
	450, 453, 454, 455, 504, 505, 506, 209, 457, 456,
	507, 0, 0, 0, 0, 458, 459, 508, 460, 461,
	462, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 463, 0, 0, 0, 0,
	221, 222, 223, 224, 464, 465, 225, 466, 226, 227,
	467, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 468, 469, 470, 0, 235, 471, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 472, 473, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 474, 267, 268, 270, 273, 269, 274,
	275, 276, 475, 476, 0, 212, 0, 0, 0, 0,
	0, 277, 278, 279, 477, 280, 281, 0, 282, 0,
	283, 0, 0, 0, 284, 285, 0, 286, 478, 0,
	479, 287, 0, 288, 289, 290, 291, 480, 481, 482,
	339, 0, 292, 293, 0, 294, 295, 297, 0, 0,
	0, 213, 296, 298, 305, 0, 0, 299, 483, 301,
	300, 302, 303, 304, 484, 0, 485, 0, 306, 0,
	486, 0, 307, 308, 309, 0, 310, 311, 0, 0,
	312, 313, 314, 315, 0, 317, 316, 0, 318, 487,
	0, 319, 320, 0, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	334, 332, 0, 335, 336, 338, 337, 0, 214, 0,
	0, 488, 489, 340, 341, 0, 342, 343, 344, 0,
	0, 346, 347, 348, 0, 0, 349, 490, 0, 350,
	0, 491, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 492, 360, 493, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 494, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 495, 389, 0, 390, 394, 395, 396, 397, 398,
	399, 400, 0, 407, 408, 401, 403, 404, 405, 402,
	406, 409, 410, 0, 411, 391, 392, 412, 0, 413,
	496, 414, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 424, 420, 421, 422, 497, 0, 427, 428, 426,
	0, 429, 430, 431, 432, 433, 271, 434, 272, 435,
	0, 498, 499, 500, 501, 0, 442, 0, 436, 437,
	502, 438, 503, 0, 439, 440, 441, 0, 443, 444,
	0, 0, 445, 446, 447, 448, 449, 451, 0, 452,
	0, 450, 453, 454, 455, 504, 505, 506, 209, 457,
	456, 507, 0, 0, 0, 0, 458, 459, 508, 460,
	461, 462, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 463, 0, 0, 0,
	0, 221, 222, 223, 224, 464, 465, 225, 466, 226,
	227, 467, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 468, 469, 470, 0, 235, 471, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 531, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 472, 473, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 474, 267, 268, 270, 273, 269,
	274, 275, 276, 475, 476, 0, 0, 0, 0, 0,
	0, 0, 277, 278, 279, 477, 280, 281, 0, 282,
	0, 283, 0, 0, 0, 284, 285, 532, 286, 478,
	0, 479, 287, 0, 288, 289, 290, 291, 480, 481,
	482, 339, 0, 292, 293, 0, 294, 295, 297, 0,
	0, 0, 0, 296, 298, 305, 0, 0, 299, 483,
	301, 300, 302, 303, 304, 484, 0, 485, 0, 306,
	0, 486, 0, 307, 308, 309, 0, 310, 311, 0,
	0, 312, 313, 314, 315, 0, 317, 316, 0, 318,
	487, 0, 319, 320, 0, 0, 321, 322, 0, 0,
	323, 324, 0, 325, 326, 328, 330, 327, 329, 331,
	333, 334, 332, 0, 335, 336, 338, 337, 0, 0,
	0, 0, 488, 489, 340, 341, 0, 342, 343, 344,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 0,
	350, 0, 491, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 492, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 494, 369, 370,
	0, 371, 372, 373, 374, 375, 0, 377, 378, 379,
	376, 380, 381, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 495, 389, 0, 390, 394, 395, 396, 397,
	398, 399, 400, 533, 407, 408, 401, 403, 404, 405,
	402, 406, 409, 410, 0, 411, 391, 392, 412, 0,
	413, 496, 414, 415, 0, 425, 416, 417, 418, 393,
	419, 423, 424, 420, 421, 422, 497, 0, 427, 428,
	426, 0, 429, 430, 431, 432, 433, 271, 434, 272,
	435, 0, 498, 499, 500, 501, 0, 442, 0, 436,
	437, 502, 438, 503, 0, 439, 440, 441, 0, 443,
	444, 0, 0, 445, 446, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 504, 505, 506, 209,
	457, 456, 507, 0, 0, 0, 0, 458, 459, 508,
	460, 461, 462, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 463, 0, 0,
	0, 0, 221, 222, 223, 224, 464, 465, 225, 466,
	226, 227, 467, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 468, 469, 470, 0, 235, 471, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 1880, 254, 255, 256, 472, 473, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 474, 267, 268, 270, 273,
	269, 274, 275, 276, 475, 476, 0, 212, 0, 0,
	0, 0, 0, 277, 278, 279, 477, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	478, 0, 479, 287, 0, 288, 289, 290, 291, 480,
	481, 482, 339, 0, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 213, 296, 298, 305, 0, 0, 299,
	483, 301, 300, 302, 303, 304, 484, 0, 485, 0,
	306, 0, 486, 0, 307, 308, 309, 0, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 487, 0, 319, 320, 0, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 0, 335, 336, 338, 337, 0,
	214, 0, 0, 488, 489, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 490,
	0, 350, 0, 491, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 492, 360, 493, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 494, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 495, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	0, 413, 496, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 497, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	272, 435, 0, 498, 499, 500, 501, 0, 442, 0,
	436, 437, 502, 438, 503, 0, 439, 440, 441, 0,
	443, 444, 0, 0, 445, 446, 447, 448, 449, 451,
	0, 452, 0, 450, 453, 454, 455, 504, 505, 506,
	209, 457, 456, 507, 0, 0, 0, 0, 458, 459,
	508, 460, 461, 462, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 463, 0,
	0, 0, 0, 221, 222, 223, 224, 464, 465, 225,
	466, 226, 227, 467, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 468, 469, 470, 0, 235, 471,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 1878, 254, 255, 256, 472, 473, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 474, 267, 268, 270,
	273, 269, 274, 275, 276, 475, 476, 0, 212, 0,
	0, 0, 0, 0, 277, 278, 279, 477, 280, 281,
	0, 282, 0, 283, 0, 0, 0, 284, 285, 0,
	286, 478, 0, 479, 287, 0, 288, 289, 290, 291,
	480, 481, 482, 339, 0, 292, 293, 0, 294, 295,
	297, 0, 0, 0, 213, 296, 298, 305, 0, 0,
	299, 483, 301, 300, 302, 303, 304, 484, 0, 485,
	0, 306, 0, 486, 0, 307, 308, 309, 0, 310,
	311, 0, 0, 312, 313, 314, 315, 0, 317, 316,
	0, 318, 487, 0, 319, 320, 0, 0, 321, 322,
	0, 0, 323, 324, 0, 325, 326, 328, 330, 327,
	329, 331, 333, 334, 332, 0, 335, 336, 338, 337,
	0, 214, 0, 0, 488, 489, 340, 341, 0, 342,
	343, 344, 0, 0, 346, 347, 348, 0, 0, 349,
	490, 0, 350, 0, 491, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 492, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 494,
	369, 370, 0, 371, 372, 373, 374, 375, 0, 377,
	378, 379, 376, 380, 381, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 495, 389, 0, 390, 394, 395,
	396, 397, 398, 399, 400, 0, 407, 408, 401, 403,
	404, 405, 402, 406, 409, 410, 0, 411, 391, 392,
	412, 0, 413, 496, 414, 415, 0, 425, 416, 417,
	418, 393, 419, 423, 424, 420, 421, 422, 497, 0,
	427, 428, 426, 0, 429, 430, 431, 432, 433, 271,
	434, 272, 435, 0, 498, 499, 500, 501, 0, 442,
	0, 436, 437, 502, 438, 503, 0, 439, 440, 441,
	0, 443, 444, 0, 0, 445, 446, 447, 448, 449,
	451, 0, 452, 0, 450, 453, 454, 455, 504, 505,
	506, 209, 457, 456, 507, 0, 0, 0, 0, 458,
	459, 508, 460, 461, 462, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 463,
	0, 0, 0, 0, 221, 222, 223, 224, 464, 465,
	225, 466, 226, 227, 467, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 468, 469, 470, 0, 235,
	471, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 1876, 254, 255, 256, 472, 473, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 474, 267, 268,
	270, 273, 269, 274, 275, 276, 475, 476, 0, 212,
	0, 0, 0, 0, 0, 277, 278, 279, 477, 280,
	281, 0, 282, 0, 283, 0, 0, 0, 284, 285,
	0, 286, 478, 0, 479, 287, 0, 288, 289, 290,
	291, 480, 481, 482, 339, 0, 292, 293, 0, 294,
	295, 297, 0, 0, 0, 213, 296, 298, 305, 0,
	0, 299, 483, 301, 300, 302, 303, 304, 484, 0,
	485, 0, 306, 0, 486, 0, 307, 308, 309, 0,
	310, 311, 0, 0, 312, 313, 314, 315, 0, 317,
	316, 0, 318, 487, 0, 319, 320, 0, 0, 321,
	322, 0, 0, 323, 324, 0, 325, 326, 328, 330,
	327, 329, 331, 333, 334, 332, 0, 335, 336, 338,
	337, 0, 214, 0, 0, 488, 489, 340, 341, 0,
	342, 343, 344, 0, 0, 346, 347, 348, 0, 0,
	349, 490, 0, 350, 0, 491, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 492, 360, 493,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	494, 369, 370, 0, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 495, 389, 0, 390, 394,
	395, 396, 397, 398, 399, 400, 0, 407, 408, 401,
	403, 404, 405, 402, 406, 409, 410, 0, 411, 391,
	392, 412, 0, 413, 496, 414, 415, 0, 425, 416,
	417, 418, 393, 419, 423, 424, 420, 421, 422, 497,
	0, 427, 428, 426, 0, 429, 430, 431, 432, 433,
	271, 434, 272, 435, 0, 498, 499, 500, 501, 0,
	442, 0, 436, 437, 502, 438, 503, 0, 439, 440,
	441, 0, 443, 444, 0, 0, 445, 446, 447, 448,
	449, 451, 0, 452, 0, 450, 453, 454, 455, 504,
	505, 506, 0, 457, 456, 507, 678, 0, 209, 0,
	458, 459, 508, 460, 461, 462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 463, 0, 0, 0,
	0, 221, 222, 223, 224, 464, 465, 225, 466, 226,
	227, 467, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 468, 469, 470, 0, 235, 471, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 472, 473, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 474, 267, 268, 270, 273, 269,
	274, 275, 276, 475, 476, 0, 0, 0, 0, 0,
	0, 0, 277, 278, 279, 477, 280, 281, 0, 282,
	0, 283, 0, 0, 0, 284, 285, 0, 286, 478,
	0, 479, 287, 0, 288, 289, 290, 291, 480, 481,
	482, 339, 0, 292, 293, 0, 294, 295, 297, 0,
	0, 0, 0, 296, 298, 305, 0, 0, 299, 483,
	301, 300, 302, 303, 304, 484, 0, 485, 677, 306,
	0, 486, 0, 307, 308, 309, 0, 310, 311, 0,
	0, 312, 313, 314, 315, 0, 317, 316, 0, 318,
	487, 0, 319, 320, 0, 0, 321, 322, 0, 0,
	323, 324, 0, 325, 326, 328, 330, 327, 329, 331,
	333, 334, 332, 0, 335, 336, 338, 337, 0, 0,
	0, 0, 488, 489, 340, 341, 0, 342, 343, 344,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 0,
	350, 0, 491, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 492, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 494, 369, 370,
	0, 371, 372, 373, 374, 375, 0, 377, 378, 379,
	376, 380, 381, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 495, 389, 0, 390, 394, 395, 396, 397,
	398, 399, 400, 0, 407, 408, 401, 403, 404, 405,
	402, 406, 409, 410, 0, 411, 391, 392, 412, 0,
	413, 496, 414, 415, 0, 425, 416, 417, 418, 393,
	419, 423, 424, 420, 421, 422, 497, 0, 427, 428,
	426, 676, 429, 430, 431, 432, 433, 271, 434, 272,
	435, 0, 498, 499, 500, 501, 0, 442, 0, 436,
	437, 502, 438, 503, 0, 439, 440, 441, 0, 443,
	444, 0, 0, 445, 446, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 504, 505, 506, 0,
	457, 456, 507, 516, 0, 209, 0, 458, 459, 508,
	460, 461, 462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 515, 220, 0,
	0, 0, 0, 463, 0, 0, 0, 0, 221, 222,
	223, 224, 464, 465, 225, 466, 226, 227, 467, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 468,
	469, 470, 0, 235, 471, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 472, 473, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 474, 267, 268, 270, 273, 269, 274, 275, 276,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 277,
	278, 279, 477, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 0, 286, 478, 0, 479, 287,
	0, 288, 289, 290, 291, 480, 481, 482, 339, 0,
	292, 293, 0, 294, 295, 297, 0, 0, 0, 0,
	296, 298, 305, 0, 0, 299, 483, 301, 300, 302,
	303, 304, 484, 0, 485, 0, 306, 0, 486, 0,
	307, 308, 309, 0, 310, 311, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 487, 0, 319,
	320, 0, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	0, 335, 336, 338, 337, 0, 0, 0, 0, 488,
	489, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 490, 0, 350, 0, 491,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 492, 360, 493, 514, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 494, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 495,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 0, 411, 391, 392, 412, 0, 413, 496, 414,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 497, 0, 427, 428, 426, 0, 429,
	430, 431, 432, 433, 271, 434, 272, 435, 0, 498,
	499, 500, 501, 0, 442, 0, 436, 437, 502, 438,
	503, 0, 439, 440, 441, 0, 443, 444, 0, 0,
	445, 446, 447, 448, 449, 451, 0, 452, 0, 450,
	453, 454, 455, 504, 505, 506, 209, 457, 456, 507,
	0, 0, 0, 0, 458, 459, 508, 460, 461, 462,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 463, 0, 2148, 0, 0, 221,
	222, 223, 224, 464, 465, 225, 466, 226, 227, 467,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	468, 469, 470, 0, 235, 471, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 472, 473, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 474, 267, 268, 270, 273, 269, 274, 275,
	276, 475, 476, 0, 0, 0, 0, 0, 0, 0,
	277, 278, 279, 477, 280, 281, 0, 282, 0, 283,
	0, 0, 0, 284, 285, 0, 286, 478, 0, 479,
	287, 0, 288, 289, 290, 291, 480, 481, 482, 339,
	0, 292, 293, 0, 294, 295, 297, 0, 0, 0,
	0, 296, 298, 305, 0, 0, 299, 483, 301, 300,
	302, 303, 304, 484, 0, 485, 0, 306, 0, 486,
	0, 307, 308, 309, 0, 310, 311, 0, 0, 312,
	313, 314, 315, 0, 317, 316, 0, 318, 487, 0,
	319, 320, 0, 0, 321, 322, 0, 0, 323, 324,
	0, 325, 326, 328, 330, 327, 329, 331, 333, 334,
	332, 0, 335, 336, 338, 337, 0, 0, 0, 0,
	488, 489, 340, 341, 0, 342, 343, 344, 0, 0,
	346, 347, 348, 0, 0, 349, 490, 0, 350, 0,
	491, 351, 345, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 492, 360, 493, 361, 0, 362, 0, 363,
	364, 365, 366, 367, 368, 494, 369, 370, 0, 371,
	372, 373, 374, 375, 0, 377, 378, 379, 376, 380,
	381, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	495, 389, 0, 390, 394, 395, 396, 397, 398, 399,
	400, 0, 407, 408, 401, 403, 404, 405, 402, 406,
	409, 410, 0, 411, 391, 392, 412, 0, 413, 496,
	414, 415, 0, 425, 416, 417, 418, 393, 419, 423,
	424, 420, 421, 422, 497, 0, 427, 428, 426, 0,
	429, 430, 431, 432, 433, 271, 434, 272, 435, 0,
	498, 499, 500, 501, 0, 442, 0, 436, 437, 502,
	438, 503, 0, 439, 440, 441, 0, 443, 444, 0,
	0, 445, 446, 447, 448, 449, 451, 0, 452, 0,
	450, 453, 454, 455, 504, 505, 506, 0, 457, 456,
	507, 209, 2345, 0, 0, 458, 459, 508, 460, 461,
	462, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 463,
	0, 0, 0, 0, 221, 222, 223, 224, 464, 465,
	225, 466, 226, 227, 467, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 468, 469, 470, 0, 235,
	471, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 472, 473, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 474, 267, 268,
	270, 273, 269, 274, 275, 276, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 277, 278, 279, 477, 280,
	281, 0, 282, 0, 283, 0, 0, 0, 284, 285,
	0, 286, 478, 0, 479, 287, 0, 288, 289, 290,
	291, 480, 481, 482, 339, 0, 292, 293, 0, 294,
	295, 297, 0, 0, 0, 0, 296, 298, 305, 0,
	0, 299, 483, 301, 300, 302, 303, 304, 484, 0,
	485, 0, 306, 0, 486, 0, 307, 308, 309, 0,
	310, 311, 0, 0, 312, 313, 314, 315, 0, 317,
	316, 0, 318, 487, 0, 319, 320, 0, 0, 321,
	322, 0, 0, 323, 324, 0, 325, 326, 328, 330,
	327, 329, 331, 333, 334, 332, 0, 335, 336, 338,
	337, 0, 0, 0, 0, 488, 489, 340, 341, 0,
	342, 343, 344, 0, 0, 346, 347, 348, 0, 0,
	349, 490, 0, 350, 0, 491, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 492, 360, 493,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	494, 369, 370, 0, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 495, 389, 0, 390, 394,
	395, 396, 397, 398, 399, 400, 0, 407, 408, 401,
	403, 404, 405, 402, 406, 409, 410, 0, 411, 391,
	392, 412, 0, 413, 496, 414, 415, 0, 425, 416,
	417, 418, 393, 419, 423, 424, 420, 421, 422, 497,
	0, 427, 428, 426, 0, 429, 430, 431, 432, 433,
	271, 434, 272, 435, 0, 498, 499, 500, 501, 0,
	442, 0, 436, 437, 502, 438, 503, 0, 439, 440,
	441, 0, 443, 444, 0, 0, 445, 446, 447, 448,
	449, 451, 0, 452, 0, 450, 453, 454, 455, 504,
	505, 506, 209, 457, 456, 507, 0, 0, 0, 0,
	458, 459, 508, 460, 461, 462, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	463, 0, 0, 0, 0, 221, 222, 223, 224, 464,
	465, 225, 466, 226, 227, 467, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 468, 469, 470, 0,
	235, 471, 0, 0, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 472, 473,
	2924, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 474, 267,
	268, 270, 273, 269, 274, 275, 276, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 277, 278, 279, 477,
	280, 281, 0, 282, 0, 283, 0, 0, 0, 284,
	285, 0, 286, 478, 0, 479, 287, 0, 288, 289,
	290, 291, 480, 481, 482, 339, 0, 292, 293, 0,
	294, 295, 297, 0, 0, 0, 0, 296, 298, 305,
	0, 0, 299, 483, 301, 300, 302, 303, 304, 484,
	0, 485, 0, 306, 0, 486, 0, 307, 308, 309,
	0, 310, 311, 0, 0, 312, 313, 314, 315, 0,
	317, 316, 0, 318, 487, 0, 319, 320, 0, 0,
	321, 322, 0, 0, 323, 324, 0, 325, 326, 328,
	330, 327, 329, 331, 333, 334, 332, 0, 335, 336,
	338, 337, 0, 0, 0, 0, 488, 489, 340, 341,
	0, 342, 343, 344, 0, 0, 346, 347, 348, 0,
	0, 349, 490, 0, 350, 0, 491, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 492, 360,
	493, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 494, 369, 370, 0, 371, 372, 373, 374, 375,
	0, 377, 378, 379, 376, 380, 381, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 495, 389, 0, 390,
	394, 395, 396, 397, 398, 399, 400, 0, 407, 408,
	401, 403, 404, 405, 402, 406, 409, 410, 0, 411,
	391, 392, 412, 0, 413, 496, 414, 415, 0, 425,
	416, 417, 418, 393, 419, 423, 424, 420, 421, 422,
	497, 0, 427, 428, 426, 0, 429, 430, 431, 432,
	433, 271, 434, 272, 435, 0, 498, 499, 500, 501,
	0, 442, 0, 436, 437, 502, 438, 503, 0, 439,
	440, 441, 0, 443, 444, 0, 0, 445, 446, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	504, 505, 506, 0, 457, 456, 507, 209, 2345, 0,
	0, 458, 459, 508, 460, 461, 462, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 463, 0, 0, 0, 0,
	221, 222, 223, 224, 464, 465, 225, 466, 226, 227,
	467, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 468, 469, 470, 0, 235, 471, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 472, 473, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 474, 267, 268, 270, 273, 269, 274,
	275, 276, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 277, 278, 279, 477, 280, 281, 0, 282, 0,
	283, 0, 0, 0, 284, 285, 0, 286, 478, 0,
	479, 287, 0, 288, 289, 290, 291, 480, 481, 482,
	339, 0, 292, 293, 0, 294, 295, 297, 0, 0,
	0, 0, 296, 298, 305, 0, 0, 299, 483, 301,
	300, 302, 303, 304, 484, 0, 485, 0, 306, 0,
	486, 0, 307, 308, 309, 0, 310, 311, 0, 0,
	312, 313, 314, 315, 0, 317, 316, 0, 318, 487,
	0, 319, 320, 0, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	334, 332, 0, 335, 336, 338, 337, 0, 0, 0,
	0, 488, 489, 340, 341, 0, 342, 343, 344, 0,
	0, 346, 347, 2342, 0, 0, 349, 490, 0, 350,
	0, 491, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 492, 360, 493, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 494, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 495, 389, 0, 390, 394, 395, 396, 397, 398,
	399, 400, 0, 407, 408, 401, 403, 404, 405, 402,
	406, 409, 410, 0, 411, 391, 392, 412, 0, 413,
	496, 414, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 424, 420, 421, 422, 497, 0, 427, 428, 426,
	0, 429, 430, 431, 432, 433, 271, 434, 272, 435,
	0, 498, 499, 500, 501, 0, 442, 0, 436, 437,
	502, 438, 503, 0, 439, 440, 441, 0, 443, 444,
	0, 0, 445, 446, 447, 448, 449, 451, 0, 452,
	0, 450, 453, 454, 455, 504, 505, 506, 209, 457,
	456, 507, 0, 0, 0, 0, 458, 459, 508, 460,
	461, 462, 0, 0, 0, 215, 216, 217, 218, 219,
	1863, 220, 0, 0, 0, 0, 463, 0, 0, 0,
	0, 221, 222, 223, 224, 464, 465, 225, 466, 226,
	227, 467, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 468, 469, 470, 0, 235, 471, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 472, 473, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 474, 267, 268, 270, 273, 269,
	274, 275, 276, 475, 476, 0, 0, 0, 0, 0,
	0, 0, 277, 278, 279, 477, 280, 281, 0, 282,
	0, 283, 0, 0, 0, 284, 285, 0, 286, 478,
	0, 479, 287, 0, 288, 289, 290, 291, 480, 481,
	482, 339, 0, 292, 293, 0, 294, 295, 297, 0,
	0, 0, 0, 296, 298, 305, 0, 0, 299, 483,
	301, 300, 302, 303, 304, 484, 0, 485, 0, 306,
	0, 486, 0, 307, 308, 309, 0, 310, 311, 0,
	0, 312, 313, 314, 315, 0, 317, 316, 0, 318,
	487, 0, 319, 320, 0, 0, 321, 322, 0, 0,
	323, 324, 0, 325, 326, 328, 330, 327, 329, 331,
	333, 334, 332, 0, 335, 336, 338, 337, 0, 0,
	0, 0, 488, 489, 340, 341, 0, 342, 343, 344,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 0,
	350, 0, 491, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 492, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 494, 369, 370,
	0, 371, 372, 373, 374, 375, 0, 377, 378, 379,
	376, 380, 381, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 495, 389, 0, 390, 394, 395, 396, 397,
	398, 399, 400, 0, 407, 408, 401, 403, 404, 405,
	402, 406, 409, 410, 0, 411, 391, 392, 412, 0,
	413, 496, 414, 415, 0, 425, 416, 417, 418, 393,
	419, 423, 424, 420, 421, 422, 497, 0, 427, 428,
	426, 0, 429, 430, 431, 432, 433, 271, 434, 272,
	435, 0, 498, 499, 500, 501, 0, 442, 0, 436,
	437, 502, 438, 503, 0, 439, 440, 441, 0, 443,
	444, 0, 0, 445, 446, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 504, 505, 506, 0,
	457, 456, 507, 1855, 0, 209, 0, 458, 459, 508,
	460, 461, 462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 463, 0, 0, 0, 0, 221, 222,
	223, 224, 464, 465, 225, 466, 226, 227, 467, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 468,
	469, 470, 0, 235, 471, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 472, 473, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 474, 267, 268, 270, 273, 269, 274, 275, 276,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 277,
	278, 279, 477, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 0, 286, 478, 0, 479, 287,
	0, 288, 289, 290, 291, 480, 481, 482, 339, 0,
	292, 293, 0, 294, 295, 297, 0, 0, 0, 0,
	296, 298, 305, 0, 0, 299, 483, 301, 300, 302,
	303, 304, 484, 0, 485, 0, 306, 0, 486, 0,
	307, 308, 309, 0, 310, 311, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 487, 0, 319,
	320, 0, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	0, 335, 336, 338, 337, 0, 0, 0, 0, 488,
	489, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 490, 0, 350, 0, 491,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 492, 360, 493, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 494, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 495,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 0, 411, 391, 392, 412, 0, 413, 496, 414,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 497, 0, 427, 428, 426, 0, 429,
	430, 431, 432, 433, 271, 434, 272, 435, 0, 498,
	499, 500, 501, 0, 442, 0, 436, 437, 502, 438,
	503, 0, 439, 440, 441, 0, 443, 444, 0, 0,
	445, 446, 447, 448, 449, 451, 0, 452, 0, 450,
	453, 454, 455, 504, 505, 506, 0, 457, 456, 507,
	559, 0, 209, 0, 458, 459, 508, 460, 461, 462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	463, 0, 0, 0, 0, 221, 222, 223, 224, 464,
	465, 225, 466, 226, 227, 467, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 468, 469, 1028, 0,
	235, 471, 0, 0, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 472, 473,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 474, 267,
	268, 270, 273, 269, 274, 275, 276, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 277, 278, 279, 477,
	280, 281, 0, 282, 0, 283, 0, 0, 0, 284,
	285, 0, 286, 478, 0, 479, 287, 0, 288, 289,
	290, 291, 480, 481, 482, 339, 0, 292, 293, 0,
	294, 295, 297, 0, 0, 0, 0, 296, 298, 305,
	0, 0, 299, 483, 301, 300, 302, 303, 304, 484,
	0, 485, 0, 306, 0, 486, 0, 307, 308, 309,
	0, 310, 311, 0, 0, 312, 313, 314, 315, 0,
	317, 316, 0, 318, 487, 0, 319, 320, 0, 0,
	321, 322, 0, 0, 323, 324, 0, 325, 326, 328,
	330, 327, 329, 331, 333, 334, 560, 0, 335, 336,
	338, 337, 0, 0, 0, 0, 488, 489, 340, 341,
	0, 342, 343, 344, 0, 0, 346, 347, 348, 0,
	0, 349, 490, 0, 350, 0, 491, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 492, 360,
	493, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 494, 369, 370, 0, 371, 372, 373, 374, 375,
	0, 377, 378, 379, 376, 380, 381, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 495, 389, 0, 390,
	394, 395, 556, 397, 398, 399, 400, 0, 407, 408,
	401, 403, 404, 405, 402, 406, 409, 410, 0, 411,
	391, 392, 412, 0, 413, 496, 414, 415, 0, 425,
	416, 417, 418, 393, 419, 423, 424, 420, 421, 422,
	497, 0, 427, 428, 426, 0, 429, 430, 431, 432,
	433, 271, 434, 272, 435, 0, 555, 499, 500, 501,
	0, 442, 0, 436, 437, 502, 438, 503, 0, 439,
	440, 441, 0, 443, 444, 0, 0, 445, 446, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	504, 505, 506, 0, 457, 456, 507, 1806, 0, 209,
	0, 458, 459, 508, 460, 461, 462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 463, 0, 0,
	0, 0, 221, 222, 223, 224, 464, 465, 225, 466,
	226, 227, 467, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 468, 469, 470, 0, 235, 471, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 472, 473, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 474, 267, 268, 270, 273,
	269, 274, 275, 276, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 277, 278, 279, 477, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	478, 0, 479, 287, 0, 288, 289, 290, 291, 1805,
	481, 482, 339, 0, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 0, 296, 298, 305, 0, 0, 299,
	483, 301, 300, 302, 303, 304, 484, 0, 485, 0,
	306, 0, 486, 0, 307, 308, 309, 0, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 487, 0, 319, 320, 0, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 0, 335, 336, 338, 337, 0,
	0, 0, 0, 488, 489, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 490,
	0, 350, 0, 491, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 492, 360, 493, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 494, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 495, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	0, 413, 496, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 497, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	272, 435, 0, 498, 499, 500, 501, 0, 442, 0,
	436, 437, 502, 438, 503, 0, 439, 440, 441, 0,
	443, 444, 0, 0, 445, 446, 447, 448, 449, 451,
	0, 452, 0, 450, 453, 454, 455, 504, 505, 506,
	0, 457, 456, 507, 559, 0, 209, 0, 458, 459,
	508, 460, 461, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 463, 0, 0, 0, 0, 221,
	222, 223, 224, 464, 465, 225, 466, 226, 227, 467,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	468, 469, 470, 0, 549, 471, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 472, 473, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 474, 267, 268, 270, 273, 269, 274, 275,
	276, 475, 476, 0, 0, 0, 0, 0, 0, 0,
	277, 278, 279, 477, 280, 281, 0, 282, 0, 283,
	0, 0, 0, 284, 285, 0, 286, 478, 0, 479,
	287, 0, 288, 289, 290, 291, 480, 481, 482, 339,
	0, 292, 293, 0, 294, 295, 297, 0, 0, 0,
	0, 296, 298, 305, 0, 0, 299, 483, 301, 300,
	302, 303, 304, 484, 0, 485, 0, 306, 0, 486,
	0, 307, 308, 309, 0, 310, 311, 0, 0, 312,
	313, 314, 315, 0, 317, 316, 0, 318, 487, 0,
	319, 320, 0, 0, 321, 322, 0, 0, 323, 324,
	0, 325, 326, 328, 330, 327, 329, 331, 333, 334,
	560, 0, 335, 336, 338, 337, 0, 0, 0, 0,
	488, 489, 340, 341, 0, 342, 343, 344, 0, 0,
	346, 347, 348, 0, 0, 349, 490, 0, 350, 0,
	491, 351, 345, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 492, 360, 493, 361, 0, 362, 0, 363,
	364, 365, 366, 367, 368, 494, 369, 370, 0, 371,
	372, 373, 374, 375, 0, 377, 378, 379, 376, 380,
	381, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	495, 389, 0, 390, 394, 395, 556, 397, 398, 399,
	400, 0, 407, 408, 401, 403, 404, 405, 402, 406,
	1307, 410, 0, 411, 391, 392, 412, 0, 413, 496,
	414, 415, 0, 425, 416, 417, 418, 393, 419, 423,
	424, 420, 421, 422, 497, 0, 427, 428, 426, 0,
	429, 430, 431, 432, 433, 271, 434, 272, 435, 0,
	555, 499, 500, 501, 0, 442, 0, 436, 437, 502,
	438, 503, 0, 439, 440, 441, 0, 443, 444, 0,
	0, 445, 446, 447, 448, 449, 451, 0, 452, 0,
	450, 453, 454, 455, 504, 505, 506, 0, 457, 456,
	507, 1292, 0, 209, 0, 458, 459, 508, 460, 461,
	462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 463, 0, 0, 0, 0, 221, 222, 223, 224,
	464, 465, 225, 466, 226, 227, 467, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 468, 469, 470,
	0, 235, 471, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 472,
	473, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 474,
	267, 268, 270, 273, 269, 274, 275, 276, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 277, 278, 279,
	477, 280, 281, 0, 282, 0, 283, 0, 0, 0,
	284, 285, 0, 286, 478, 0, 479, 287, 0, 288,
	289, 290, 291, 1291, 481, 482, 339, 0, 292, 293,
	0, 294, 295, 297, 0, 0, 0, 0, 296, 298,
	305, 0, 0, 299, 483, 301, 300, 302, 303, 304,
	484, 0, 485, 0, 306, 0, 486, 0, 307, 308,
	309, 0, 310, 311, 0, 0, 312, 313, 314, 315,
	0, 317, 316, 0, 318, 487, 0, 319, 320, 0,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 334, 332, 0, 335,
	336, 338, 337, 0, 0, 0, 0, 488, 489, 340,
	341, 0, 342, 343, 344, 0, 0, 346, 347, 348,
	0, 0, 349, 490, 0, 350, 0, 491, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 492,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 494, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 495, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 0, 407,
	408, 401, 403, 404, 405, 402, 406, 409, 410, 0,
	411, 391, 392, 412, 0, 413, 496, 414, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 424, 420, 421,
	422, 497, 0, 427, 428, 426, 0, 429, 430, 431,
	432, 433, 271, 434, 272, 435, 0, 498, 499, 500,
	501, 0, 442, 0, 436, 437, 502, 438, 503, 0,
	439, 440, 441, 0, 443, 444, 0, 0, 445, 446,
	447, 448, 449, 451, 0, 452, 0, 450, 453, 454,
	455, 504, 505, 506, 0, 457, 456, 507, 1241, 0,
	209, 0, 458, 459, 508, 460, 461, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 463, 0,
	0, 0, 0, 221, 222, 223, 224, 464, 465, 225,
	466, 226, 227, 467, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 468, 469, 470, 0, 235, 471,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 472, 473, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 474, 267, 268, 270,
	273, 269, 274, 275, 276, 475, 476, 0, 0, 0,
	0, 0, 0, 0, 277, 278, 279, 477, 280, 281,
	0, 282, 0, 283, 0, 0, 0, 284, 285, 0,
	286, 478, 0, 479, 287, 0, 288, 289, 290, 291,
	1240, 481, 482, 339, 0, 292, 293, 0, 294, 295,
	297, 0, 0, 0, 0, 296, 298, 305, 0, 0,
	299, 483, 301, 300, 302, 303, 304, 484, 0, 485,
	0, 306, 0, 486, 0, 307, 308, 309, 0, 310,
	311, 0, 0, 312, 313, 314, 315, 0, 317, 316,
	0, 318, 487, 0, 319, 320, 0, 0, 321, 322,
	0, 0, 323, 324, 0, 325, 326, 328, 330, 327,
	329, 331, 333, 334, 332, 0, 335, 336, 338, 337,
	0, 0, 0, 0, 488, 489, 340, 341, 0, 342,
	343, 344, 0, 0, 346, 347, 348, 0, 0, 349,
	490, 0, 350, 0, 491, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 492, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 494,
	369, 370, 0, 371, 372, 373, 374, 375, 0, 377,
	378, 379, 376, 380, 381, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 495, 389, 0, 390, 394, 395,
	396, 397, 398, 399, 400, 0, 407, 408, 401, 403,
	404, 405, 402, 406, 409, 410, 0, 411, 391, 392,
	412, 0, 413, 496, 414, 415, 0, 425, 416, 417,
	418, 393, 419, 423, 424, 420, 421, 422, 497, 0,
	427, 428, 426, 0, 429, 430, 431, 432, 433, 271,
	434, 272, 435, 0, 498, 499, 500, 501, 0, 442,
	0, 436, 437, 502, 438, 503, 0, 439, 440, 441,
	0, 443, 444, 0, 0, 445, 446, 447, 448, 449,
	451, 0, 452, 0, 450, 453, 454, 455, 504, 505,
	506, 0, 457, 456, 507, 1225, 0, 209, 0, 458,
	459, 508, 460, 461, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 463, 0, 0, 0, 0,
	221, 222, 223, 224, 464, 465, 225, 466, 226, 227,
	467, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 468, 469, 470, 0, 235, 471, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 472, 473, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 474, 267, 268, 270, 273, 269, 274,
	275, 276, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 277, 278, 279, 477, 280, 281, 0, 282, 0,
	283, 0, 0, 0, 284, 285, 0, 286, 478, 0,
	479, 287, 0, 288, 289, 290, 291, 480, 481, 482,
	339, 0, 292, 293, 0, 294, 295, 297, 0, 0,
	0, 0, 296, 298, 305, 0, 0, 299, 483, 301,
	300, 302, 303, 304, 484, 0, 485, 0, 306, 0,
	486, 0, 307, 308, 309, 0, 310, 311, 0, 0,
	312, 313, 314, 315, 0, 317, 316, 0, 318, 487,
	0, 319, 320, 0, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	334, 332, 0, 335, 336, 338, 337, 0, 0, 0,
	0, 488, 489, 340, 341, 0, 342, 343, 344, 0,
	0, 346, 347, 348, 0, 0, 349, 490, 0, 350,
	0, 491, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 492, 360, 493, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 494, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 495, 389, 0, 390, 394, 395, 396, 397, 398,
	399, 400, 0, 407, 408, 401, 403, 404, 405, 402,
	406, 409, 410, 0, 411, 391, 392, 412, 0, 413,
	496, 414, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 424, 420, 421, 422, 497, 0, 427, 428, 426,
	0, 429, 430, 431, 432, 433, 271, 434, 272, 435,
	0, 498, 499, 500, 501, 0, 442, 0, 436, 437,
	502, 438, 503, 0, 439, 440, 441, 0, 443, 444,
	0, 0, 445, 446, 447, 448, 449, 451, 0, 452,
	0, 450, 453, 454, 455, 504, 505, 506, 0, 457,
	456, 507, 1162, 0, 209, 0, 458, 459, 508, 460,
	461, 462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 463, 0, 0, 0, 0, 221, 222, 223,
	224, 464, 465, 225, 466, 226, 227, 467, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 468, 469,
	470, 0, 235, 471, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	472, 473, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	474, 267, 268, 270, 273, 269, 274, 275, 276, 475,
	476, 0, 0, 0, 0, 0, 0, 0, 277, 278,
	279, 477, 280, 281, 0, 282, 0, 283, 0, 0,
	0, 284, 285, 0, 286, 478, 0, 479, 287, 0,
	288, 289, 290, 291, 480, 481, 482, 339, 0, 292,
	293, 0, 294, 295, 297, 0, 0, 0, 0, 296,
	298, 305, 0, 0, 299, 483, 301, 300, 302, 303,
	304, 484, 0, 485, 0, 306, 0, 486, 0, 307,
	308, 309, 0, 310, 311, 0, 0, 312, 313, 314,
	315, 0, 317, 316, 0, 318, 487, 0, 319, 320,
	0, 0, 321, 322, 0, 0, 323, 324, 0, 325,
	326, 328, 330, 327, 329, 331, 333, 334, 332, 0,
	335, 336, 338, 337, 0, 0, 0, 0, 488, 489,
	340, 341, 0, 342, 343, 344, 0, 0, 346, 347,
	348, 0, 0, 349, 490, 0, 350, 0, 491, 351,
	345, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	492, 360, 493, 361, 0, 362, 0, 363, 364, 365,
	366, 367, 368, 494, 369, 370, 0, 371, 372, 373,
	374, 375, 0, 377, 378, 379, 376, 380, 381, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 495, 389,
	0, 390, 394, 395, 396, 397, 398, 399, 400, 0,
	407, 408, 401, 403, 404, 405, 402, 406, 409, 410,
	0, 411, 391, 392, 412, 0, 413, 496, 414, 415,
	0, 425, 416, 417, 418, 393, 419, 423, 424, 420,
	421, 422, 497, 0, 427, 428, 426, 0, 429, 430,
	431, 432, 433, 271, 434, 272, 435, 0, 498, 499,
	500, 501, 0, 442, 0, 436, 437, 502, 438, 503,
	0, 439, 440, 441, 0, 443, 444, 0, 0, 445,
	446, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 504, 505, 506, 0, 457, 456, 507, 559,
	0, 209, 0, 458, 459, 508, 460, 461, 462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 463,
	0, 0, 0, 0, 221, 222, 223, 224, 464, 465,
	225, 466, 226, 227, 467, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 468, 469, 1028, 0, 235,
	471, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 472, 473, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 474, 267, 268,
	270, 273, 269, 274, 275, 276, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 277, 278, 279, 477, 280,
	281, 0, 282, 0, 283, 0, 0, 0, 284, 285,
	0, 286, 478, 0, 479, 287, 0, 288, 289, 290,
	291, 480, 481, 482, 339, 0, 292, 293, 0, 294,
	295, 297, 0, 0, 0, 0, 296, 298, 305, 0,
	0, 299, 483, 301, 300, 302, 303, 304, 484, 0,
	485, 0, 306, 0, 486, 0, 307, 308, 309, 0,
	310, 311, 0, 0, 312, 313, 314, 315, 0, 317,
	316, 0, 318, 487, 0, 319, 320, 0, 0, 321,
	322, 0, 0, 323, 324, 0, 325, 326, 328, 330,
	327, 329, 331, 333, 334, 560, 0, 335, 336, 338,
	337, 0, 0, 0, 0, 488, 489, 340, 341, 0,
	342, 343, 344, 0, 0, 346, 347, 348, 0, 0,
	349, 490, 0, 350, 0, 491, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 492, 360, 493,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	494, 369, 370, 0, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 495, 389, 0, 390, 394,
	395, 556, 397, 398, 399, 400, 0, 407, 408, 401,
	403, 404, 405, 402, 406, 409, 410, 0, 411, 391,
	392, 412, 0, 413, 496, 414, 415, 0, 425, 416,
	417, 418, 393, 419, 423, 424, 420, 421, 422, 497,
	0, 427, 428, 426, 0, 429, 430, 431, 432, 433,
	271, 434, 272, 435, 0, 555, 499, 500, 501, 0,
	442, 0, 436, 1029, 502, 438, 503, 0, 439, 440,
	441, 0, 443, 444, 0, 0, 445, 446, 447, 448,
	449, 451, 0, 452, 0, 450, 453, 454, 455, 504,
	505, 506, 209, 457, 456, 507, 0, 0, 0, 0,
	458, 459, 508, 460, 461, 462, 0, 0, 0, 215,
	216, 217, 218, 219, 1011, 220, 0, 0, 0, 0,
	463, 0, 0, 0, 0, 221, 222, 223, 224, 464,
	465, 225, 466, 226, 227, 467, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 468, 469, 470, 0,
	235, 471, 0, 0, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 472, 473,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 474, 267,
	268, 270, 273, 269, 274, 275, 276, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 277, 278, 279, 477,
	280, 281, 0, 282, 0, 283, 0, 0, 0, 284,
	285, 0, 286, 478, 0, 479, 287, 0, 288, 289,
	290, 291, 480, 481, 482, 339, 0, 292, 293, 0,
	294, 295, 297, 0, 0, 0, 0, 296, 298, 305,
	0, 0, 299, 483, 301, 300, 302, 303, 304, 484,
	0, 485, 0, 306, 0, 486, 0, 307, 308, 309,
	0, 310, 311, 0, 0, 312, 313, 314, 315, 0,
	317, 316, 0, 318, 487, 0, 319, 320, 0, 0,
	321, 322, 0, 0, 323, 324, 0, 325, 326, 328,
	330, 327, 329, 331, 333, 334, 332, 0, 335, 336,
	338, 337, 0, 0, 0, 0, 488, 489, 340, 341,
	0, 342, 343, 344, 0, 0, 346, 347, 348, 0,
	0, 349, 490, 0, 350, 0, 491, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 492, 360,
	493, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 494, 369, 370, 0, 371, 372, 373, 374, 375,
	0, 377, 378, 379, 376, 380, 381, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 495, 389, 0, 390,
	394, 395, 396, 397, 398, 399, 400, 0, 407, 408,
	401, 403, 404, 405, 402, 406, 409, 410, 0, 411,
	391, 392, 412, 0, 413, 496, 414, 415, 0, 425,
	416, 417, 418, 393, 419, 423, 424, 420, 421, 422,
	497, 0, 427, 428, 426, 0, 429, 430, 431, 432,
	433, 271, 434, 272, 435, 0, 498, 499, 500, 501,
	0, 442, 0, 436, 437, 502, 438, 503, 0, 439,
	440, 441, 0, 443, 444, 0, 0, 445, 446, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	504, 505, 506, 0, 457, 456, 507, 559, 0, 209,
	0, 458, 459, 508, 460, 461, 462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 463, 0, 0,
	0, 0, 221, 222, 223, 224, 464, 465, 225, 466,
	226, 227, 467, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 468, 469, 470, 0, 549, 471, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 547, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 472, 473, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 474, 267, 268, 270, 273,
	269, 274, 275, 276, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 277, 278, 279, 477, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	478, 0, 479, 287, 0, 288, 289, 290, 291, 480,
	481, 482, 339, 0, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 0, 296, 298, 305, 0, 0, 299,
	483, 301, 300, 302, 303, 304, 484, 0, 485, 0,
	306, 0, 486, 0, 307, 308, 309, 0, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 487, 0, 319, 320, 0, 0, 321, 548, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 560, 0, 335, 336, 338, 337, 0,
	0, 0, 0, 488, 489, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 490,
	0, 350, 0, 491, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 492, 360, 493, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 494, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 550, 389, 0, 390, 394, 395, 556,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 551, 410, 0, 411, 391, 392, 412,
	0, 413, 496, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 497, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	272, 435, 0, 555, 499, 500, 501, 0, 442, 0,
	436, 553, 502, 438, 503, 0, 439, 440, 441, 0,
	443, 444, 0, 0, 445, 446, 447, 448, 449, 451,
	0, 452, 0, 450, 453, 454, 455, 504, 505, 506,
	0, 457, 456, 507, 543, 0, 209, 0, 458, 459,
	508, 460, 461, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 463, 0, 0, 0, 0, 221,
	222, 223, 224, 464, 465, 225, 466, 226, 227, 467,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	468, 469, 470, 0, 235, 471, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 472, 473, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 474, 267, 268, 270, 273, 269, 274, 275,
	276, 475, 476, 0, 0, 0, 0, 0, 0, 0,
	277, 278, 279, 477, 280, 281, 0, 282, 0, 283,
	0, 0, 0, 284, 285, 0, 286, 478, 0, 479,
	287, 0, 288, 289, 290, 291, 480, 481, 482, 339,
	0, 292, 293, 0, 294, 295, 297, 0, 0, 0,
	0, 296, 298, 305, 0, 0, 299, 483, 301, 300,
	302, 303, 304, 484, 0, 485, 0, 306, 0, 486,
	0, 307, 308, 309, 0, 310, 311, 0, 0, 312,
	313, 314, 315, 0, 317, 316, 0, 318, 487, 0,
	319, 320, 0, 0, 321, 322, 0, 0, 323, 324,
	0, 325, 326, 328, 330, 327, 329, 331, 333, 334,
	332, 0, 335, 336, 338, 337, 0, 0, 0, 0,
	488, 489, 340, 341, 0, 342, 343, 344, 0, 0,
	346, 347, 348, 0, 0, 349, 490, 0, 350, 0,
	491, 351, 345, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 492, 360, 493, 361, 0, 362, 0, 363,
	364, 365, 366, 367, 368, 494, 369, 370, 0, 371,
	372, 373, 374, 375, 0, 377, 378, 379, 376, 380,
	381, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	495, 389, 0, 390, 544, 395, 396, 397, 398, 399,
	400, 0, 407, 408, 401, 403, 404, 405, 402, 406,
	409, 410, 0, 411, 391, 392, 412, 0, 413, 496,
	414, 415, 0, 425, 416, 417, 418, 393, 419, 423,
	424, 420, 421, 422, 497, 0, 427, 428, 426, 0,
	429, 430, 431, 432, 433, 271, 434, 272, 435, 0,
	498, 499, 500, 501, 0, 442, 0, 436, 437, 502,
	438, 503, 0, 439, 440, 441, 0, 443, 444, 0,
	0, 445, 446, 447, 448, 449, 451, 0, 452, 0,
	450, 453, 454, 455, 504, 505, 506, 0, 457, 456,
	507, 541, 0, 209, 0, 458, 459, 508, 460, 461,
	462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 463, 0, 0, 0, 0, 221, 222, 223, 224,
	464, 465, 225, 466, 226, 227, 467, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 468, 469, 470,
	0, 235, 471, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 472,
	473, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 474,
	267, 268, 270, 273, 269, 274, 275, 276, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 277, 278, 279,
	477, 280, 281, 0, 282, 0, 283, 0, 0, 0,
	284, 285, 0, 286, 478, 0, 479, 287, 0, 288,
	289, 290, 291, 480, 481, 482, 339, 0, 292, 293,
	0, 294, 295, 297, 0, 0, 0, 0, 296, 298,
	305, 0, 0, 299, 483, 301, 300, 302, 303, 304,
	484, 0, 485, 0, 306, 0, 486, 0, 307, 308,
	309, 0, 310, 311, 0, 0, 312, 313, 314, 315,
	0, 317, 316, 0, 318, 487, 0, 319, 320, 0,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 334, 332, 0, 335,
	336, 338, 337, 0, 0, 0, 0, 488, 489, 340,
	341, 0, 342, 343, 344, 0, 0, 346, 347, 348,
	0, 0, 349, 490, 0, 350, 0, 491, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 492,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 494, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 495, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 0, 407,
	408, 401, 403, 404, 405, 402, 406, 409, 410, 0,
	411, 391, 392, 412, 0, 413, 496, 414, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 424, 420, 421,
	422, 497, 0, 427, 428, 426, 0, 429, 430, 431,
	432, 433, 271, 434, 272, 435, 0, 498, 499, 500,
	501, 0, 442, 0, 436, 437, 502, 438, 503, 0,
	439, 440, 441, 0, 443, 444, 0, 0, 445, 446,
	447, 448, 449, 451, 0, 452, 0, 450, 453, 454,
	455, 504, 505, 506, 0, 457, 456, 507, 535, 0,
	209, 0, 458, 459, 508, 460, 461, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 463, 0,
	0, 0, 0, 221, 222, 223, 224, 464, 465, 225,
	466, 226, 227, 467, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 468, 469, 470, 0, 235, 471,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 472, 473, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 474, 267, 268, 270,
	273, 269, 274, 275, 276, 475, 476, 0, 0, 0,
	0, 0, 0, 0, 277, 278, 279, 477, 280, 281,
	0, 282, 0, 283, 0, 0, 0, 284, 285, 0,
	286, 478, 0, 479, 287, 0, 288, 289, 290, 291,
	480, 481, 482, 339, 0, 292, 293, 0, 294, 295,
	297, 0, 0, 0, 0, 296, 298, 305, 0, 0,
	299, 483, 301, 300, 302, 303, 304, 484, 0, 485,
	0, 306, 0, 486, 0, 307, 308, 309, 0, 310,
	311, 0, 0, 312, 313, 314, 315, 0, 317, 316,
	0, 318, 487, 0, 319, 320, 0, 0, 321, 322,
	0, 0, 323, 324, 0, 325, 326, 328, 330, 327,
	329, 331, 333, 334, 332, 0, 335, 336, 338, 337,
	0, 0, 0, 0, 488, 489, 340, 341, 0, 342,
	343, 344, 0, 0, 346, 347, 348, 0, 0, 349,
	490, 0, 350, 0, 491, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 492, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 494,
	369, 370, 0, 371, 372, 373, 374, 375, 0, 377,
	378, 379, 376, 380, 381, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 495, 389, 0, 390, 394, 395,
	396, 397, 398, 399, 400, 0, 407, 408, 401, 403,
	404, 405, 402, 406, 409, 410, 0, 411, 391, 392,
	412, 0, 413, 496, 414, 415, 0, 425, 416, 417,
	418, 393, 419, 423, 424, 420, 421, 422, 497, 0,
	427, 428, 426, 0, 429, 430, 431, 432, 433, 271,
	434, 272, 435, 0, 498, 499, 500, 501, 0, 442,
	0, 436, 437, 502, 438, 503, 0, 439, 440, 441,
	0, 443, 444, 0, 0, 445, 446, 447, 448, 449,
	451, 0, 452, 0, 450, 453, 454, 455, 504, 505,
	506, 0, 457, 456, 507, 511, 0, 209, 0, 458,
	459, 508, 460, 461, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 463, 0, 0, 0, 0,
	221, 222, 223, 224, 464, 465, 225, 466, 226, 227,
	467, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 468, 469, 470, 0, 235, 471, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 472, 473, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 474, 267, 268, 270, 273, 269, 274,
	275, 276, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 277, 278, 279, 477, 280, 281, 0, 282, 0,
	283, 0, 0, 0, 284, 285, 0, 286, 478, 0,
	479, 287, 0, 288, 289, 290, 291, 480, 481, 482,
	339, 0, 292, 293, 0, 294, 295, 297, 0, 0,
	0, 0, 296, 298, 305, 0, 0, 299, 483, 301,
	300, 302, 303, 304, 484, 0, 485, 0, 306, 0,
	486, 0, 307, 308, 309, 0, 310, 311, 0, 0,
	312, 313, 314, 315, 0, 317, 316, 0, 318, 487,
	0, 319, 320, 0, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	334, 332, 0, 335, 336, 338, 337, 0, 0, 0,
	0, 488, 489, 340, 341, 0, 342, 343, 344, 0,
	0, 346, 347, 348, 0, 0, 349, 490, 0, 350,
	0, 491, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 492, 360, 493, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 494, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 495, 389, 0, 390, 394, 395, 396, 397, 398,
	399, 400, 0, 407, 408, 401, 403, 404, 405, 402,
	406, 409, 410, 0, 411, 391, 392, 412, 0, 413,
	496, 414, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 424, 420, 421, 422, 497, 0, 427, 428, 426,
	0, 429, 430, 431, 432, 433, 271, 434, 272, 435,
	0, 498, 499, 500, 501, 0, 442, 0, 436, 437,
	502, 438, 503, 0, 439, 440, 441, 0, 443, 444,
	0, 0, 445, 446, 447, 448, 449, 451, 0, 452,
	0, 450, 453, 454, 455, 504, 505, 506, 209, 457,
	456, 507, 0, 0, 0, 0, 458, 459, 508, 460,
	461, 462, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 463, 0, 0, 0,
	0, 221, 222, 223, 224, 464, 465, 225, 466, 226,
	227, 467, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 468, 469, 470, 0, 235, 471, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 472, 473, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 474, 267, 268, 270, 273, 269,
	274, 275, 276, 475, 476, 0, 0, 0, 0, 0,
	0, 0, 277, 278, 279, 477, 280, 281, 0, 282,
	0, 283, 0, 0, 0, 284, 285, 0, 286, 478,
	0, 479, 287, 0, 288, 289, 290, 291, 480, 481,
	482, 339, 0, 292, 293, 0, 294, 295, 297, 0,
	0, 0, 0, 296, 298, 305, 0, 0, 299, 483,
	301, 300, 302, 303, 304, 484, 0, 485, 0, 306,
	0, 486, 0, 307, 308, 309, 0, 310, 311, 0,
	0, 312, 313, 314, 315, 0, 317, 316, 0, 318,
	487, 0, 319, 320, 0, 0, 321, 322, 0, 0,
	323, 324, 0, 325, 326, 328, 330, 327, 329, 331,
	333, 334, 332, 0, 335, 336, 338, 337, 0, 0,
	0, 0, 488, 489, 340, 341, 0, 342, 343, 344,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 0,
	350, 0, 491, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 492, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 494, 369, 370,
	0, 371, 372, 373, 374, 375, 0, 377, 378, 379,
	376, 380, 381, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 495, 389, 0, 390, 394, 395, 396, 397,
	398, 399, 400, 0, 407, 408, 401, 403, 404, 405,
	402, 406, 409, 410, 0, 411, 391, 392, 412, 0,
	413, 496, 414, 415, 0, 425, 416, 417, 418, 393,
	419, 423, 424, 420, 421, 422, 497, 0, 427, 428,
	426, 0, 429, 430, 431, 432, 433, 271, 434, 272,
	435, 0, 498, 499, 500, 501, 0, 442, 0, 436,
	437, 502, 438, 503, 0, 439, 440, 441, 0, 443,
	444, 0, 0, 445, 446, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 504, 505, 506, 209,
	457, 456, 507, 0, 0, 0, 0, 458, 459, 508,
	460, 461, 462, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 463, 0, 0,
	0, 0, 221, 222, 223, 224, 464, 465, 225, 466,
	226, 227, 467, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 468, 469, 470, 0, 235, 471, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 472, 473, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 474, 267, 268, 270, 273,
	269, 274, 275, 276, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 277, 278, 279, 477, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	478, 0, 479, 287, 0, 288, 289, 290, 291, 2621,
	481, 482, 339, 0, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 0, 296, 298, 305, 0, 0, 299,
	483, 301, 300, 302, 303, 304, 484, 0, 485, 0,
	306, 0, 486, 0, 307, 308, 309, 0, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 487, 0, 319, 320, 0, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 0, 335, 336, 338, 337, 0,
	0, 0, 0, 488, 489, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 490,
	0, 350, 0, 491, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 492, 360, 493, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 494, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 495, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	0, 413, 496, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 497, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	272, 435, 0, 498, 499, 500, 501, 0, 442, 0,
	436, 437, 502, 438, 503, 0, 439, 440, 441, 0,
	443, 444, 0, 0, 445, 446, 447, 448, 449, 451,
	0, 452, 0, 450, 453, 454, 455, 504, 505, 506,
	209, 457, 456, 507, 0, 0, 0, 0, 458, 459,
	508, 460, 461, 462, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 463, 0,
	0, 0, 0, 221, 222, 223, 224, 464, 465, 225,
	466, 226, 227, 467, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 468, 469, 470, 0, 235, 471,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 472, 473, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 474, 267, 268, 270,
	273, 269, 274, 275, 276, 475, 476, 0, 0, 0,
	0, 0, 0, 0, 277, 278, 279, 477, 280, 281,
	0, 282, 0, 283, 0, 0, 0, 284, 285, 0,
	286, 478, 0, 479, 287, 0, 288, 289, 290, 291,
	2619, 481, 482, 339, 0, 292, 293, 0, 294, 295,
	297, 0, 0, 0, 0, 296, 298, 305, 0, 0,
	299, 483, 301, 300, 302, 303, 304, 484, 0, 485,
	0, 306, 0, 486, 0, 307, 308, 309, 0, 310,
	311, 0, 0, 312, 313, 314, 315, 0, 317, 316,
	0, 318, 487, 0, 319, 320, 0, 0, 321, 322,
	0, 0, 323, 324, 0, 325, 326, 328, 330, 327,
	329, 331, 333, 334, 332, 0, 335, 336, 338, 337,
	0, 0, 0, 0, 488, 489, 340, 341, 0, 342,
	343, 344, 0, 0, 346, 347, 348, 0, 0, 349,
	490, 0, 350, 0, 491, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 492, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 494,
	369, 370, 0, 371, 372, 373, 374, 375, 0, 377,
	378, 379, 376, 380, 381, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 495, 389, 0, 390, 394, 395,
	396, 397, 398, 399, 400, 0, 407, 408, 401, 403,
	404, 405, 402, 406, 409, 410, 0, 411, 391, 392,
	412, 0, 413, 496, 414, 415, 0, 425, 416, 417,
	418, 393, 419, 423, 424, 420, 421, 422, 497, 0,
	427, 428, 426, 0, 429, 430, 431, 432, 433, 271,
	434, 272, 435, 0, 498, 499, 500, 501, 0, 442,
	0, 436, 437, 502, 438, 503, 0, 439, 440, 441,
	0, 443, 444, 0, 0, 445, 446, 447, 448, 449,
	451, 0, 452, 0, 450, 453, 454, 455, 504, 505,
	506, 209, 457, 456, 507, 0, 0, 0, 0, 458,
	459, 508, 460, 461, 462, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 463,
	0, 0, 0, 0, 221, 222, 223, 224, 464, 465,
	225, 466, 226, 227, 467, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 468, 469, 470, 0, 235,
	471, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 472, 473, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 474, 267, 268,
	270, 273, 269, 274, 275, 276, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 277, 278, 279, 477, 280,
	281, 0, 282, 0, 283, 0, 0, 0, 284, 285,
	0, 286, 478, 0, 479, 287, 0, 288, 289, 290,
	291, 2607, 481, 482, 339, 0, 292, 293, 0, 294,
	295, 297, 0, 0, 0, 0, 296, 298, 305, 0,
	0, 299, 483, 301, 300, 302, 303, 304, 484, 0,
	485, 0, 306, 0, 486, 0, 307, 308, 309, 0,
	310, 311, 0, 0, 312, 313, 314, 315, 0, 317,
	316, 0, 318, 487, 0, 319, 320, 0, 0, 321,
	322, 0, 0, 323, 324, 0, 325, 326, 328, 330,
	327, 329, 331, 333, 334, 332, 0, 335, 336, 338,
	337, 0, 0, 0, 0, 488, 489, 340, 341, 0,
	342, 343, 344, 0, 0, 346, 347, 348, 0, 0,
	349, 490, 0, 350, 0, 491, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 492, 360, 493,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	494, 369, 370, 0, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 495, 389, 0, 390, 394,
	395, 396, 397, 398, 399, 400, 0, 407, 408, 401,
	403, 404, 405, 402, 406, 409, 410, 0, 411, 391,
	392, 412, 0, 413, 496, 414, 415, 0, 425, 416,
	417, 418, 393, 419, 423, 424, 420, 421, 422, 497,
	0, 427, 428, 426, 0, 429, 430, 431, 432, 433,
	271, 434, 272, 435, 0, 498, 499, 500, 501, 0,
	442, 0, 436, 437, 502, 438, 503, 0, 439, 440,
	441, 0, 443, 444, 0, 0, 445, 446, 447, 448,
	449, 451, 0, 452, 0, 450, 453, 454, 455, 504,
	505, 506, 209, 457, 456, 507, 0, 0, 0, 0,
	458, 459, 508, 460, 461, 462, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	463, 0, 0, 0, 0, 221, 222, 223, 224, 464,
	465, 225, 466, 226, 227, 467, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 468, 469, 470, 0,
	235, 471, 0, 0, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 472, 473,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 474, 267,
	268, 270, 273, 269, 274, 275, 276, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 277, 278, 279, 477,
	280, 281, 0, 282, 0, 283, 0, 0, 0, 284,
	285, 0, 286, 478, 0, 479, 287, 0, 288, 289,
	290, 291, 2305, 481, 482, 339, 0, 292, 293, 0,
	294, 295, 297, 0, 0, 0, 0, 296, 298, 305,
	0, 0, 299, 483, 301, 300, 302, 303, 304, 484,
	0, 485, 0, 306, 0, 486, 0, 307, 308, 309,
	0, 310, 311, 0, 0, 312, 313, 314, 315, 0,
	317, 316, 0, 318, 487, 0, 319, 320, 0, 0,
	321, 322, 0, 0, 323, 324, 0, 325, 326, 328,
	330, 327, 329, 331, 333, 334, 332, 0, 335, 336,
	338, 337, 0, 0, 0, 0, 488, 489, 340, 341,
	0, 342, 343, 344, 0, 0, 346, 347, 348, 0,
	0, 349, 490, 0, 350, 0, 491, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 492, 360,
	493, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 494, 369, 370, 0, 371, 372, 373, 374, 375,
	0, 377, 378, 379, 376, 380, 381, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 495, 389, 0, 390,
	394, 395, 396, 397, 398, 399, 400, 0, 407, 408,
	401, 403, 404, 405, 402, 406, 409, 410, 0, 411,
	391, 392, 412, 0, 413, 496, 414, 415, 0, 425,
	416, 417, 418, 393, 419, 423, 424, 420, 421, 422,
	497, 0, 427, 428, 426, 0, 429, 430, 431, 432,
	433, 271, 434, 272, 435, 0, 498, 499, 500, 501,
	0, 442, 0, 436, 437, 502, 438, 503, 0, 439,
	440, 441, 0, 443, 444, 0, 0, 445, 446, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	504, 505, 506, 209, 457, 456, 507, 0, 0, 0,
	0, 458, 459, 508, 460, 461, 462, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 463, 0, 0, 0, 0, 221, 222, 223, 224,
	464, 465, 225, 466, 226, 227, 467, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 468, 469, 470,
	0, 235, 471, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 472,
	473, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 474,
	267, 268, 270, 273, 269, 274, 275, 276, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 277, 278, 279,
	477, 280, 281, 0, 282, 0, 283, 0, 0, 0,
	284, 285, 0, 286, 478, 0, 479, 287, 0, 288,
	289, 290, 291, 480, 481, 482, 339, 0, 292, 293,
	0, 294, 295, 297, 0, 0, 0, 0, 296, 298,
	305, 0, 0, 299, 483, 301, 300, 302, 303, 304,
	484, 0, 485, 0, 306, 0, 486, 0, 307, 308,
	309, 0, 310, 311, 0, 0, 312, 313, 314, 315,
	0, 317, 316, 0, 318, 487, 0, 319, 320, 0,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 334, 332, 0, 335,
	336, 338, 337, 0, 0, 0, 0, 488, 489, 340,
	341, 0, 342, 343, 344, 0, 0, 346, 347, 348,
	0, 0, 349, 490, 0, 350, 0, 491, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 492,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 494, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 495, 389, 0,
	390, 544, 395, 396, 397, 398, 399, 400, 0, 407,
	408, 401, 403, 404, 405, 402, 406, 409, 410, 0,
	411, 391, 392, 412, 0, 413, 496, 414, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 424, 420, 421,
	422, 497, 0, 427, 428, 426, 0, 429, 430, 431,
	432, 433, 271, 434, 272, 435, 0, 498, 499, 500,
	501, 0, 442, 0, 436, 437, 502, 438, 503, 0,
	439, 440, 441, 0, 443, 444, 0, 0, 445, 446,
	447, 448, 449, 451, 0, 452, 0, 450, 453, 454,
	455, 504, 505, 506, 209, 457, 456, 507, 0, 0,
	0, 0, 458, 459, 508, 460, 461, 462, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 463, 0, 1818, 0, 0, 221, 222, 223,
	224, 464, 465, 225, 466, 226, 227, 467, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 468, 469,
	470, 0, 235, 471, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	472, 473, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	474, 267, 268, 270, 273, 269, 274, 275, 276, 475,
	476, 0, 0, 0, 0, 0, 0, 0, 277, 278,
	279, 477, 280, 281, 0, 282, 0, 283, 0, 0,
	0, 284, 285, 0, 286, 478, 0, 479, 287, 0,
	288, 289, 290, 291, 480, 481, 482, 339, 0, 292,
	293, 0, 294, 295, 297, 0, 0, 0, 0, 296,
	298, 305, 0, 0, 299, 483, 301, 300, 302, 303,
	304, 484, 0, 485, 0, 306, 0, 486, 0, 307,
	308, 309, 0, 310, 311, 0, 0, 312, 313, 314,
	315, 0, 317, 316, 0, 318, 487, 0, 319, 320,
	0, 0, 321, 322, 0, 0, 323, 324, 0, 325,
	326, 328, 330, 327, 329, 331, 333, 334, 332, 0,
	335, 336, 338, 337, 0, 0, 0, 0, 488, 489,
	340, 341, 0, 342, 343, 344, 0, 0, 346, 347,
	348, 0, 0, 349, 490, 0, 350, 0, 491, 351,
	345, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	492, 360, 493, 361, 0, 362, 0, 363, 364, 365,
	366, 367, 368, 494, 369, 370, 0, 371, 372, 373,
	374, 375, 0, 377, 378, 379, 376, 380, 381, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 495, 389,
	0, 390, 394, 395, 396, 397, 398, 399, 400, 0,
	407, 408, 401, 403, 404, 405, 402, 406, 409, 410,
	0, 0, 391, 392, 412, 0, 413, 496, 414, 415,
	0, 425, 416, 417, 418, 393, 419, 423, 424, 420,
	421, 422, 497, 0, 427, 428, 426, 0, 429, 430,
	431, 432, 433, 271, 434, 272, 435, 0, 498, 499,
	500, 501, 0, 442, 0, 436, 437, 502, 438, 503,
	0, 439, 440, 441, 0, 443, 444, 0, 0, 445,
	446, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 504, 505, 506, 209, 457, 456, 507, 0,
	0, 0, 0, 458, 459, 508, 460, 461, 462, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 463, 0, 0, 0, 0, 221, 222,
	223, 224, 464, 465, 225, 466, 226, 227, 467, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 468,
	469, 470, 0, 235, 471, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 472, 473, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 474, 267, 268, 270, 273, 269, 274, 275, 276,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 277,
	278, 279, 477, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 0, 286, 478, 0, 479, 287,
	0, 288, 289, 290, 291, 1261, 481, 482, 339, 0,
	292, 293, 0, 294, 295, 297, 0, 0, 0, 0,
	296, 298, 305, 0, 0, 299, 483, 301, 300, 302,
	303, 304, 484, 0, 485, 0, 306, 0, 486, 0,
	307, 308, 309, 0, 310, 311, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 487, 0, 319,
	320, 0, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	0, 335, 336, 338, 337, 0, 0, 0, 0, 488,
	489, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 490, 0, 350, 0, 491,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 492, 360, 493, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 494, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 495,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 0, 411, 391, 392, 412, 0, 413, 496, 414,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 497, 0, 427, 428, 426, 0, 429,
	430, 431, 432, 433, 271, 434, 272, 435, 0, 498,
	499, 500, 501, 0, 442, 0, 436, 437, 502, 438,
	503, 0, 439, 440, 441, 0, 443, 444, 0, 0,
	445, 446, 447, 448, 449, 451, 0, 452, 0, 450,
	453, 454, 455, 504, 505, 506, 209, 457, 456, 507,
	0, 0, 0, 0, 458, 459, 508, 460, 461, 462,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 463, 0, 0, 0, 0, 221,
	222, 223, 224, 464, 465, 225, 466, 226, 227, 467,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	468, 469, 470, 0, 235, 471, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 472, 473, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 474, 267, 268, 270, 273, 269, 274, 275,
	276, 475, 476, 0, 0, 0, 0, 0, 0, 0,
	277, 278, 279, 477, 280, 281, 0, 282, 0, 283,
	0, 0, 0, 284, 285, 0, 286, 478, 0, 479,
	287, 0, 288, 289, 290, 291, 1203, 481, 482, 339,
	0, 292, 293, 0, 294, 295, 297, 0, 0, 0,
	0, 296, 298, 305, 0, 0, 299, 483, 301, 300,
	302, 303, 304, 484, 0, 485, 0, 306, 0, 486,
	0, 307, 308, 309, 0, 310, 311, 0, 0, 312,
	313, 314, 315, 0, 317, 316, 0, 318, 487, 0,
	319, 320, 0, 0, 321, 322, 0, 0, 323, 324,
	0, 325, 326, 328, 330, 327, 329, 331, 333, 334,
	332, 0, 335, 336, 338, 337, 0, 0, 0, 0,
	488, 489, 340, 341, 0, 342, 343, 344, 0, 0,
	346, 347, 348, 0, 0, 349, 490, 0, 350, 0,
	491, 351, 345, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 492, 360, 493, 361, 0, 362, 0, 363,
	364, 365, 366, 367, 368, 494, 369, 370, 0, 371,
	372, 373, 374, 375, 0, 377, 378, 379, 376, 380,
	381, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	495, 389, 0, 390, 394, 395, 396, 397, 398, 399,
	400, 0, 407, 408, 401, 403, 404, 405, 402, 406,
	409, 410, 0, 411, 391, 392, 412, 0, 413, 496,
	414, 415, 0, 425, 416, 417, 418, 393, 419, 423,
	424, 420, 421, 422, 497, 0, 427, 428, 426, 0,
	429, 430, 431, 432, 433, 271, 434, 272, 435, 0,
	498, 499, 500, 501, 0, 442, 0, 436, 437, 502,
	438, 503, 0, 439, 440, 441, 0, 443, 444, 0,
	0, 445, 446, 447, 448, 449, 451, 0, 452, 0,
	450, 453, 454, 455, 504, 505, 506, 209, 457, 456,
	507, 0, 0, 0, 0, 458, 459, 508, 460, 461,
	462, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 463, 0, 0, 0, 0,
	221, 222, 223, 224, 464, 465, 225, 466, 226, 227,
	467, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 468, 469, 470, 0, 235, 471, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 472, 473, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 474, 267, 268, 270, 273, 269, 274,
	275, 276, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 277, 278, 279, 477, 280, 281, 0, 282, 0,
	283, 0, 0, 0, 284, 285, 0, 286, 478, 0,
	479, 287, 0, 288, 289, 290, 291, 480, 481, 482,
	339, 0, 292, 293, 0, 294, 295, 297, 0, 0,
	0, 0, 296, 298, 305, 0, 0, 299, 483, 301,
	300, 302, 303, 304, 484, 0, 485, 0, 306, 0,
	486, 0, 307, 308, 309, 0, 310, 311, 0, 0,
	312, 313, 314, 315, 0, 317, 316, 0, 318, 487,
	0, 319, 320, 0, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	334, 332, 0, 335, 336, 338, 337, 0, 0, 0,
	0, 488, 489, 340, 341, 0, 342, 343, 344, 0,
	0, 346, 347, 348, 0, 0, 349, 490, 0, 350,
	0, 491, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 492, 360, 493, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 494, 966, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 495, 389, 0, 390, 394, 395, 396, 397, 398,
	399, 400, 0, 407, 408, 401, 403, 404, 405, 402,
	406, 409, 410, 0, 411, 391, 392, 412, 0, 413,
	496, 414, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 424, 420, 421, 422, 497, 0, 427, 428, 426,
	0, 429, 430, 431, 432, 433, 271, 434, 272, 435,
	0, 498, 499, 500, 501, 0, 442, 0, 436, 437,
	502, 438, 503, 0, 439, 440, 441, 0, 443, 444,
	0, 0, 445, 446, 447, 448, 449, 451, 0, 452,
	0, 450, 453, 454, 455, 504, 505, 506, 209, 457,
	456, 507, 0, 0, 0, 0, 458, 459, 508, 460,
	461, 462, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 463, 0, 0, 0,
	0, 221, 222, 223, 224, 464, 465, 225, 466, 226,
	227, 467, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 468, 469, 470, 0, 235, 471, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 472, 473, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 474, 267, 268, 270, 273, 269,
	274, 275, 276, 475, 476, 0, 0, 0, 0, 0,
	0, 0, 277, 278, 279, 477, 280, 281, 0, 282,
	0, 283, 0, 0, 0, 284, 285, 0, 286, 478,
	0, 479, 0, 0, 288, 289, 290, 291, 480, 481,
	482, 339, 0, 292, 293, 0, 294, 295, 297, 0,
	0, 0, 0, 296, 298, 305, 0, 0, 299, 483,
	301, 300, 302, 303, 304, 484, 0, 485, 0, 306,
	0, 486, 0, 307, 308, 309, 0, 310, 311, 0,
	0, 312, 313, 314, 315, 0, 317, 316, 0, 318,
	487, 0, 319, 320, 0, 0, 321, 322, 0, 0,
	323, 324, 0, 325, 326, 328, 330, 327, 329, 331,
	333, 334, 332, 0, 335, 336, 338, 337, 0, 0,
	0, 0, 488, 489, 340, 341, 0, 342, 343, 344,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 0,
	350, 0, 491, 351, 345, 352, 353, 0, 355, 356,
	357, 0, 358, 359, 492, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 0, 367, 368, 494, 369, 370,
	0, 371, 372, 373, 374, 375, 0, 377, 378, 379,
	376, 380, 381, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 495, 0, 0, 390, 394, 395, 396, 397,
	398, 399, 400, 0, 407, 408, 401, 403, 404, 405,
	402, 406, 409, 410, 0, 411, 391, 392, 412, 0,
	413, 496, 414, 415, 0, 425, 416, 417, 418, 393,
	419, 423, 424, 420, 421, 422, 497, 0, 427, 428,
	426, 0, 429, 430, 431, 432, 433, 271, 434, 272,
	435, 0, 498, 499, 500, 501, 0, 442, 0, 436,
	437, 502, 438, 503, 0, 439, 440, 441, 0, 443,
	444, 0, 0, 445, 446, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 504, 505, 506, 0,
	457, 456, 507, 0, 0, 0, 0, 458, 459, 508,
	460, 461, 462, 1417, 1418, 0, 1450, 1451, 1452, 1460,
	1461, 1462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1453, 0, 0, 0, 0, 0, 0, 1420,
	0, 0, 0, 1466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1419, 0, 0, 0,
	0, 0, 0, 0, 1439, 0, 0, 0, 0, 1417,
	1418, 1436, 1450, 1451, 1452, 1460, 1461, 1462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1453, 0,
	0, 0, 0, 0, 0, 1420, 0, 0, 0, 1466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1419, 0, 0, 0, 1442, 1443, 1444, 1445,
	1439, 0, 0, 0, 0, 0, 1425, 1436, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1457, 0, 0, 1467, 0, 0, 0, 1447, 1448, 1449,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1463, 0,
	1464, 0, 1442, 1443, 1444, 1445, 0, 1434, 1435, 0,
	0, 0, 1425, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1455, 0, 0, 0, 0, 0, 0, 0,
	1440, 0, 0, 0, 0, 0, 1457, 0, 0, 1467,
	0, 0, 0, 1447, 1448, 1449, 0, 0, 1465, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1454, 1463, 0, 1464, 0, 0, 0,
	0, 0, 0, 1434, 1435, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1455, 0,
	0, 0, 0, 0, 0, 0, 1440, 0, 0, 0,
	0, 0, 0, 0, 1446, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1465, 0, 0, 0, 0, 0,
	0, 0, 1441, 0, 0, 0, 0, 0, 0, 1454,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1458, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1417, 1418, 0, 1450, 1451, 1452, 1460, 1461, 1462,
	1446, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1453, 0, 0, 0, 0, 0, 0, 1420, 1441, 0,
	0, 1466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1458, 1419, 0, 0, 0, 0, 0,
	0, 0, 1439, 0, 0, 0, 0, 0, 0, 1436,
	0, 1456, 0, 0, 1431, 1432, 1438, 1437, 1433, 1459,
	0, 1430, 1428, 1429, 1421, 1422, 1423, 1424, 1426, 1427,
	0, 0, 0, 0, 0, 0, 0, 2773, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1417,
	1418, 0, 1450, 1451, 1452, 1460, 1461, 1462, 0, 0,
	0, 0, 0, 0, 1442, 1443, 1444, 1445, 1453, 0,
	0, 0, 0, 0, 1425, 1420, 0, 1456, 0, 1466,
	1431, 1432, 1438, 1437, 1433, 1459, 0, 1430, 1428, 1429,
	1421, 1422, 1423, 1424, 1426, 1427, 0, 0, 1457, 0,
	0, 1467, 1419, 2478, 0, 1447, 1448, 1449, 0, 0,
	1439, 0, 0, 0, 0, 0, 0, 1436, 0, 0,
	0, 0, 0, 0, 0, 0, 1463, 0, 1464, 0,
	0, 0, 0, 0, 0, 1434, 1435, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1455, 0, 0, 0, 0, 0, 0, 0, 1440, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1442, 1443, 1444, 1445, 1465, 0, 0, 0,
	0, 0, 1425, 0, 0, 0, 0, 0, 0, 0,
	0, 1454, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1457, 0, 0, 1467,
	0, 0, 0, 1447, 1448, 1449, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1446, 0, 1463, 0, 1464, 0, 0, 0,
	0, 0, 0, 1434, 1435, 0, 0, 0, 0, 0,
	1441, 0, 0, 0, 0, 0, 0, 0, 1455, 0,
	0, 0, 0, 0, 0, 0, 1440, 0, 0, 0,
	0, 0, 0, 0, 0, 1458, 0, 0, 0, 0,
	0, 0, 0, 0, 1465, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1454,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1417, 1418, 0, 1450, 1451, 1452, 1460, 1461, 1462,
	1446, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1453, 0, 0, 0, 0, 0, 0, 1420, 1441, 1456,
	0, 1466, 1431, 1432, 1438, 1437, 1433, 1459, 0, 1430,
	1428, 1429, 1421, 1422, 1423, 1424, 1426, 1427, 0, 0,
	0, 0, 0, 1458, 1419, 2477, 0, 0, 0, 0,
	0, 0, 1439, 0, 0, 0, 0, 1417, 1418, 1436,
	1450, 1451, 1452, 1460, 1461, 1462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1453, 0, 0, 0,
	0, 0, 0, 1420, 0, 0, 0, 1466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1419, 0, 0, 0, 1442, 1443, 1444, 1445, 1439, 0,
	0, 0, 0, 0, 1425, 1436, 0, 1456, 0, 0,
	1431, 1432, 1438, 1437, 1433, 1459, 0, 1430, 1428, 1429,
	1421, 1422, 1423, 1424, 1426, 1427, 0, 0, 1457, 0,
	0, 1467, 0, 2474, 0, 1447, 1448, 1449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1463, 0, 1464, 0,
	1442, 1443, 1444, 1445, 0, 1434, 1435, 0, 0, 0,
	1425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1455, 0, 0, 0, 0, 0, 0, 0, 1440, 0,
	0, 0, 0, 0, 1457, 0, 0, 1467, 0, 0,
	0, 1447, 1448, 1449, 0, 0, 1465, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1454, 1463, 0, 1464, 0, 0, 0, 0, 0,
	0, 1434, 1435, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1455, 0, 0, 0,
	0, 0, 0, 0, 1440, 0, 0, 0, 0, 0,
	0, 0, 1446, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1465, 0, 0, 0, 0, 0, 0, 0,
	1441, 0, 0, 0, 0, 0, 0, 1454, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1458, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1417,
	1418, 0, 1450, 1451, 1452, 1460, 1461, 1462, 1446, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1453, 0,
	0, 0, 0, 0, 0, 1420, 1441, 0, 0, 1466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1458, 1419, 0, 0, 0, 0, 0, 0, 0,
	1439, 0, 0, 0, 0, 0, 0, 1436, 0, 1456,
	0, 0, 1431, 1432, 1438, 1437, 1433, 1459, 0, 1430,
	1428, 1429, 1421, 1422, 1423, 1424, 1426, 1427, 0, 0,
	0, 0, 0, 0, 0, 2473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1417, 1418, 0,
	1450, 1451, 1452, 1460, 1461, 1462, 0, 0, 0, 0,
	0, 0, 1442, 1443, 1444, 1445, 1453, 0, 0, 0,
	0, 0, 1425, 1420, 0, 1456, 0, 1466, 1431, 1432,
	1438, 1437, 1433, 1459, 0, 1430, 1428, 1429, 1421, 1422,
	1423, 1424, 1426, 1427, 0, 0, 1457, 0, 0, 1467,
	1419, 2472, 0, 1447, 1448, 1449, 0, 0, 1439, 0,
	0, 0, 0, 0, 0, 1436, 0, 0, 0, 0,
	0, 0, 0, 0, 1463, 0, 1464, 0, 0, 0,
	0, 0, 0, 1434, 1435, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1455, 0,
	0, 0, 0, 0, 0, 0, 1440, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1442, 1443, 1444, 1445, 1465, 0, 0, 0, 0, 0,
	1425, 0, 0, 0, 0, 0, 0, 0, 0, 1454,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1457, 0, 0, 1467, 0, 0,
	0, 1447, 1448, 1449, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1446, 0, 1463, 0, 1464, 0, 0, 0, 0, 0,
	0, 1434, 1435, 0, 0, 0, 0, 0, 1441, 0,
	0, 0, 0, 0, 0, 0, 1455, 0, 0, 0,
	0, 0, 0, 0, 1440, 0, 0, 0, 0, 0,
	0, 0, 0, 1458, 0, 0, 0, 0, 0, 0,
	0, 0, 1465, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1454, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1417,
	1418, 0, 1450, 1451, 1452, 1460, 1461, 1462, 1446, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1453, 0,
	0, 0, 0, 0, 0, 1420, 1441, 1456, 0, 1466,
	1431, 1432, 1438, 1437, 1433, 1459, 0, 1430, 1428, 1429,
	1421, 1422, 1423, 1424, 1426, 1427, 0, 0, 0, 0,
	0, 1458, 1419, 2024, 0, 0, 0, 0, 0, 0,
	1439, 0, 0, 0, 0, 1417, 1418, 1436, 1450, 1451,
	1452, 1460, 1461, 1462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1453, 0, 0, 0, 0, 0,
	0, 1420, 0, 0, 0, 1466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1419, 0,
	0, 0, 1442, 1443, 1444, 1445, 1439, 0, 0, 0,
	0, 0, 1425, 1436, 0, 1456, 0, 0, 1431, 1432,
	1438, 1437, 1433, 1459, 0, 1430, 1428, 1429, 1421, 1422,
	1423, 1424, 1426, 1427, 0, 0, 1457, 0, 3335, 1467,
	0, 0, 0, 1447, 1448, 1449, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1463, 0, 1464, 0, 1442, 1443,
	1444, 1445, 0, 1434, 1435, 0, 0, 0, 1425, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1455, 0,
	0, 0, 0, 0, 0, 0, 1440, 0, 0, 0,
	0, 0, 1457, 0, 0, 1467, 0, 0, 0, 1447,
	1448, 1449, 0, 0, 1465, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1454,
	1463, 0, 1464, 0, 0, 0, 0, 0, 0, 1434,
	1435, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1455, 0, 0, 0, 0, 0,
	0, 0, 1440, 0, 0, 0, 0, 0, 0, 0,
	1446, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1465, 0, 0, 0, 0, 0, 0, 0, 1441, 0,
	0, 0, 0, 0, 0, 1454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1417, 1418, 0, 1450, 1451,
	1452, 1460, 1461, 1462, 0, 0, 1446, 0, 0, 0,
	0, 0, 0, 0, 1453, 0, 0, 0, 0, 0,
	0, 1420, 0, 0, 1441, 1466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1419, 1458,
	0, 0, 0, 0, 0, 0, 1439, 0, 0, 0,
	0, 0, 0, 1436, 0, 0, 0, 1456, 0, 0,
	1431, 1432, 1438, 1437, 1433, 1459, 0, 1430, 1428, 1429,
	1421, 1422, 1423, 1424, 1426, 1427, 0, 0, 0, 0,
	3331, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1442, 1443,
	1444, 1445, 0, 0, 0, 0, 0, 0, 1425, 0,
	0, 0, 0, 1456, 0, 0, 1431, 1432, 1438, 1437,
	1433, 1459, 0, 1430, 1428, 1429, 1421, 1422, 1423, 1424,
	1426, 1427, 1457, 0, 0, 1467, 3263, 0, 0, 1447,
	1448, 1449, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1463, 0, 1464, 0, 0, 0, 0, 0, 0, 1434,
	1435, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1455, 0, 0, 0, 0, 0,
	0, 0, 1440, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1465, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1417, 1418, 0, 1450, 1451,
	1452, 1460, 1461, 1462, 0, 0, 1446, 0, 0, 0,
	0, 0, 0, 0, 1453, 0, 0, 0, 0, 0,
	0, 1420, 0, 0, 1441, 1466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1419, 1458,
	0, 0, 0, 0, 0, 0, 1439, 0, 0, 0,
	0, 1417, 1418, 1436, 1450, 1451, 1452, 1460, 1461, 1462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1453, 0, 0, 0, 0, 0, 0, 1420, 0, 0,
	0, 1466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1419, 0, 0, 0, 1442, 1443,
	1444, 1445, 1439, 0, 0, 0, 0, 0, 1425, 1436,
	0, 0, 0, 1456, 0, 0, 1431, 1432, 1438, 1437,
	1433, 1459, 0, 1430, 1428, 1429, 1421, 1422, 1423, 1424,
	1426, 1427, 1457, 0, 0, 1467, 3262, 0, 0, 1447,
	1448, 1449, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1463, 0, 1464, 0, 1442, 1443, 1444, 1445, 0, 1434,
	1435, 0, 0, 0, 1425, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1455, 0, 0, 0, 0, 0,
	0, 0, 1440, 0, 0, 0, 0, 0, 1457, 0,
	0, 1467, 0, 0, 0, 1447, 1448, 1449, 0, 0,
	1465, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1454, 1463, 0, 1464, 0,
	0, 0, 0, 0, 0, 1434, 1435, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1455, 0, 0, 0, 0, 0, 0, 0, 1440, 0,
	0, 0, 0, 0, 0, 0, 1446, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1465, 0, 0, 0,
	0, 0, 0, 0, 1441, 0, 0, 0, 0, 0,
	0, 1454, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1417, 1418, 0, 1450, 1451, 1452, 1460, 1461, 1462,
	0, 0, 1446, 0, 0, 0, 0, 0, 0, 0,
	1453, 0, 0, 0, 0, 0, 0, 1420, 0, 0,
	1441, 1466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1419, 1458, 0, 0, 0, 0,
	0, 0, 1439, 0, 0, 0, 0, 0, 0, 1436,
	0, 0, 0, 1456, 0, 0, 1431, 1432, 1438, 1437,
	1433, 1459, 0, 1430, 1428, 1429, 1421, 1422, 1423, 1424,
	1426, 1427, 0, 0, 0, 0, 3165, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1442, 1443, 1444, 1445, 0, 0,
	0, 0, 0, 0, 1425, 0, 0, 0, 0, 1456,
	0, 0, 1431, 1432, 1438, 1437, 1433, 1459, 0, 1430,
	1428, 1429, 1421, 1422, 1423, 1424, 1426, 1427, 1457, 0,
	0, 1467, 3084, 0, 0, 1447, 1448, 1449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1463, 0, 1464, 0,
	0, 0, 0, 0, 0, 1434, 1435, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1455, 0, 0, 0, 0, 0, 0, 0, 1440, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1465, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1454, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1417, 1418, 0, 1450, 1451, 1452, 1460, 1461, 1462,
	0, 0, 1446, 0, 0, 0, 0, 0, 0, 0,
	1453, 0, 0, 0, 0, 0, 0, 1420, 0, 0,
	1441, 1466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1419, 1458, 0, 0, 0, 0,
	0, 0, 1439, 0, 0, 0, 0, 1417, 1418, 1436,
	1450, 1451, 1452, 1460, 1461, 1462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1453, 0, 0, 0,
	0, 0, 0, 1420, 0, 0, 0, 1466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1419, 0, 0, 0, 1442, 1443, 1444, 1445, 1439, 0,
	0, 0, 0, 0, 1425, 1436, 0, 0, 0, 1456,
	0, 0, 1431, 1432, 1438, 1437, 1433, 1459, 0, 1430,
	1428, 1429, 1421, 1422, 1423, 1424, 1426, 1427, 1457, 0,
	0, 1467, 3036, 0, 0, 1447, 1448, 1449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1463, 0, 1464, 0,
	1442, 1443, 1444, 1445, 0, 1434, 1435, 0, 0, 0,
	1425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1455, 0, 0, 0, 0, 0, 0, 0, 1440, 0,
	0, 0, 0, 0, 1457, 0, 0, 1467, 0, 0,
	0, 1447, 1448, 1449, 0, 0, 1465, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1454, 1463, 0, 1464, 0, 0, 0, 0, 0,
	0, 1434, 1435, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1455, 0, 0, 0,
	0, 0, 0, 0, 1440, 0, 0, 0, 0, 0,
	0, 0, 1446, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1465, 0, 0, 0, 0, 0, 0, 0,
	1441, 0, 0, 0, 0, 0, 0, 1454, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1458, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1417, 1418, 0,
	1450, 1451, 1452, 1460, 1461, 1462, 0, 0, 1446, 0,
	0, 0, 0, 0, 0, 0, 1453, 0, 0, 0,
	0, 0, 0, 1420, 0, 0, 1441, 1466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1419, 1458, 0, 0, 0, 0, 0, 0, 1439, 0,
	0, 0, 0, 0, 0, 1436, 0, 0, 0, 1456,
	0, 0, 1431, 1432, 1438, 1437, 1433, 1459, 0, 1430,
	1428, 1429, 1421, 1422, 1423, 1424, 1426, 1427, 0, 0,
	0, 0, 3035, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1442, 1443, 1444, 1445, 0, 0, 0, 0, 0, 0,
	1425, 0, 0, 0, 0, 1456, 0, 0, 1431, 1432,
	1438, 1437, 1433, 1459, 0, 1430, 1428, 1429, 1421, 1422,
	1423, 1424, 1426, 1427, 1457, 0, 0, 1467, 3034, 0,
	0, 1447, 1448, 1449, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1463, 0, 1464, 0, 0, 0, 0, 0,
	0, 1434, 1435, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1455, 0, 0, 0,
	0, 0, 0, 0, 1440, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1465, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1454, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1417, 1418, 0,
	1450, 1451, 1452, 1460, 1461, 1462, 0, 0, 1446, 0,
	0, 0, 0, 0, 0, 0, 1453, 0, 0, 0,
	0, 0, 0, 1420, 0, 0, 1441, 1466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1419, 1458, 0, 0, 0, 0, 0, 0, 1439, 0,
	0, 0, 0, 1417, 1418, 1436, 1450, 1451, 1452, 1460,
	1461, 1462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1453, 0, 0, 0, 0, 0, 0, 1420,
	0, 0, 0, 1466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1419, 0, 0, 0,
	1442, 1443, 1444, 1445, 1439, 0, 0, 0, 0, 0,
	1425, 1436, 0, 0, 0, 1456, 0, 0, 1431, 1432,
	1438, 1437, 1433, 1459, 0, 1430, 1428, 1429, 1421, 1422,
	1423, 1424, 1426, 1427, 1457, 0, 0, 1467, 3000, 0,
	0, 1447, 1448, 1449, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1463, 0, 1464, 0, 1442, 1443, 1444, 1445,
	0, 1434, 1435, 0, 0, 0, 1425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1455, 0, 0, 0,
	0, 0, 0, 0, 1440, 0, 0, 0, 0, 0,
	1457, 0, 0, 1467, 0, 0, 0, 1447, 1448, 1449,
	0, 0, 1465, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1454, 1463, 0,
	1464, 0, 0, 0, 0, 0, 0, 1434, 1435, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1455, 0, 0, 0, 0, 0, 0, 0,
	1440, 0, 0, 0, 0, 0, 0, 0, 1446, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1465, 0,
	0, 0, 0, 0, 0, 0, 1441, 0, 0, 0,
	0, 0, 0, 1454, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1458, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1417, 1418, 0, 1450, 1451, 1452, 1460,
	1461, 1462, 0, 0, 1446, 0, 0, 0, 0, 0,
	0, 0, 1453, 0, 0, 0, 0, 0, 0, 1420,
	0, 0, 1441, 1466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1419, 1458, 0, 0,
	0, 0, 0, 0, 1439, 0, 0, 0, 0, 0,
	0, 1436, 0, 0, 0, 1456, 0, 0, 1431, 1432,
	1438, 1437, 1433, 1459, 0, 1430, 1428, 1429, 1421, 1422,
	1423, 1424, 1426, 1427, 0, 0, 0, 0, 2808, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1442, 1443, 1444, 1445,
	0, 0, 0, 0, 0, 0, 1425, 3426, 0, 0,
	0, 1456, 0, 0, 1431, 1432, 1438, 1437, 1433, 1459,
	0, 1430, 1428, 1429, 1421, 1422, 1423, 1424, 1426, 1427,
	1457, 0, 2429, 1467, 0, 0, 0, 1447, 1448, 1449,
	0, 0, 0, 0, 0, 1417, 1418, 0, 1450, 1451,
	1452, 1460, 1461, 1462, 0, 0, 0, 0, 1463, 0,
	1464, 0, 0, 0, 1453, 0, 0, 1434, 1435, 0,
	0, 1420, 0, 0, 0, 1466, 0, 0, 0, 0,
	0, 0, 1455, 0, 0, 0, 0, 0, 0, 0,
	1440, 0, 0, 0, 0, 0, 0, 0, 1419, 0,
	0, 0, 0, 0, 0, 0, 1439, 0, 1465, 0,
	0, 0, 0, 1436, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1454, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3425, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1417, 1418, 0, 1450, 1451, 1452, 1460,
	1461, 1462, 0, 0, 1446, 0, 0, 0, 1442, 1443,
	1444, 1445, 1453, 0, 0, 0, 0, 2400, 1425, 1420,
	0, 0, 1441, 1466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1457, 0, 0, 1467, 1419, 1458, 0, 1447,
	1448, 1449, 0, 0, 1439, 0, 0, 0, 0, 0,
	0, 1436, 0, 0, 0, 0, 0, 0, 0, 0,
	1463, 0, 1464, 0, 0, 0, 0, 0, 0, 1434,
	1435, 0, 0, 0, 0, 0, 0, 0, 0, 2401,
	0, 0, 0, 0, 1455, 0, 0, 0, 0, 0,
	0, 0, 1440, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1442, 1443, 1444, 1445,
	1465, 0, 0, 0, 0, 0, 1425, 0, 0, 0,
	0, 1456, 0, 0, 1431, 1432, 1438, 1437, 1433, 1459,
	0, 1430, 1428, 1429, 1421, 1422, 1423, 1424, 1426, 1427,
	1457, 0, 0, 1467, 0, 0, 0, 1447, 1448, 1449,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1446, 0, 1463, 0,
	1464, 0, 0, 0, 0, 0, 0, 1434, 1435, 0,
	0, 0, 0, 0, 1441, 0, 0, 0, 0, 0,
	0, 0, 1455, 0, 0, 0, 0, 0, 0, 0,
	1440, 0, 0, 0, 0, 0, 0, 0, 0, 1458,
	0, 0, 0, 0, 0, 0, 0, 0, 1465, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1454, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1417, 1418, 0, 1450, 1451,
	1452, 1460, 1461, 1462, 1446, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1453, 0, 0, 0, 0, 0,
	0, 1420, 1441, 1456, 0, 1466, 1431, 1432, 1438, 1437,
	1433, 1459, 0, 1430, 1428, 1429, 1421, 1422, 1423, 1424,
	1426, 1427, 0, 0, 0, 0, 0, 1458, 1419, 0,
	0, 0, 0, 0, 2115, 0, 1439, 0, 0, 0,
	0, 1417, 1418, 1436, 1450, 1451, 1452, 1460, 1461, 1462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1453, 0, 0, 0, 2114, 0, 0, 1420, 0, 0,
	0, 1466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1419, 0, 0, 0, 1442, 1443,
	1444, 1445, 1439, 0, 0, 0, 0, 0, 1425, 1436,
	2517, 1456, 0, 2516, 1431, 1432, 1438, 1437, 1433, 1459,
	0, 1430, 1428, 1429, 1421, 1422, 1423, 1424, 1426, 1427,
	0, 0, 1457, 0, 0, 1467, 0, 0, 0, 1447,
	1448, 1449, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1463, 0, 1464, 0, 1442, 1443, 1444, 1445, 0, 1434,
	1435, 0, 0, 0, 1425, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1455, 0, 0, 0, 0, 0,
	0, 0, 1440, 0, 0, 0, 0, 0, 1457, 0,
	0, 1467, 0, 0, 0, 1447, 1448, 1449, 0, 0,
	1465, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1454, 1463, 0, 1464, 0,
	0, 0, 0, 0, 0, 1434, 1435, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1455, 0, 0, 0, 0, 0, 0, 0, 1440, 0,
	0, 0, 0, 0, 0, 0, 1446, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1465, 0, 0, 0,
	0, 0, 0, 0, 1441, 0, 0, 0, 0, 0,
	0, 1454, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1417, 1418, 0, 1450, 1451, 1452, 1460, 1461, 1462,
	0, 0, 1446, 0, 0, 0, 0, 0, 0, 0,
	1453, 0, 0, 0, 0, 0, 0, 1420, 0, 0,
	1441, 1466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1419, 1458, 0, 0, 0, 0,
	0, 0, 1439, 0, 0, 0, 0, 0, 0, 1436,
	0, 0, 0, 1456, 0, 0, 1431, 1432, 1438, 1437,
	1433, 1459, 0, 1430, 1428, 1429, 1421, 1422, 1423, 1424,
	1426, 1427, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1442, 1443, 1444, 1445, 0, 0,
	0, 0, 0, 0, 1425, 0, 0, 0, 0, 1456,
	0, 0, 1431, 1432, 1438, 1437, 1433, 1459, 0, 1430,
	1428, 1429, 1421, 1422, 1423, 1424, 1426, 1427, 1457, 0,
	0, 1467, 0, 0, 0, 1447, 1448, 1449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1463, 0, 1464, 0,
	0, 0, 0, 0, 0, 1434, 1435, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1455, 0, 0, 0, 0, 0, 0, 0, 1440, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1465, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1454, 809, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1417, 1418, 0, 1450, 1451, 1452, 1460, 1461, 1462,
	0, 0, 1446, 0, 0, 0, 0, 0, 0, 0,
	1453, 0, 0, 0, 0, 0, 0, 1420, 0, 0,
	1441, 1466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1419, 1458, 0, 0, 0, 0,
	0, 0, 1439, 0, 0, 0, 0, 1417, 1418, 1436,
	1450, 1451, 1452, 1460, 1461, 1462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1453, 0, 0, 0,
	0, 0, 0, 1420, 0, 0, 0, 1466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1419, 0, 0, 0, 1442, 1443, 1444, 1445, 1439, 0,
	0, 0, 0, 0, 1425, 1436, 0, 0, 0, 1456,
	0, 0, 1431, 1432, 1438, 1437, 1433, 1459, 0, 1430,
	1428, 1429, 1421, 1422, 1423, 1424, 1426, 1427, 1457, 0,
	0, 1467, 0, 0, 0, 1447, 1448, 1449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1463, 0, 1464, 0,
	1442, 1443, 1444, 1445, 0, 1434, 1435, 0, 0, 0,
	1425, 0, 0, 0, 0, 2523, 0, 0, 0, 0,
	1455, 0, 0, 0, 0, 0, 0, 0, 1440, 0,
	0, 0, 0, 0, 1457, 0, 0, 1467, 0, 0,
	0, 1447, 1448, 1449, 0, 0, 1465, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1454, 1463, 0, 1464, 0, 0, 0, 0, 0,
	0, 1434, 1435, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1455, 0, 0, 0,
	0, 0, 0, 0, 1440, 0, 0, 0, 0, 0,
	0, 0, 1446, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1465, 0, 0, 0, 0, 0, 0, 0,
	1441, 0, 0, 0, 0, 0, 0, 1454, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1458, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1417, 1418, 0,
	1450, 1451, 1452, 1460, 1461, 1462, 0, 0, 1446, 0,
	0, 0, 0, 0, 0, 0, 1453, 2796, 0, 0,
	2518, 0, 0, 1420, 0, 0, 1441, 1466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1419, 1458, 0, 0, 0, 0, 0, 0, 1439, 0,
	0, 0, 0, 0, 0, 1436, 0, 0, 0, 1456,
	0, 0, 1431, 1432, 1438, 1437, 1433, 1459, 0, 1430,
	1428, 1429, 1421, 1422, 1423, 1424, 1426, 1427, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1442, 1443, 1444, 1445, 0, 0, 0, 0, 0, 0,
	1425, 0, 0, 0, 0, 1456, 0, 0, 1431, 1432,
	1438, 1437, 1433, 1459, 0, 1430, 1428, 1429, 1421, 1422,
	1423, 1424, 1426, 1427, 1457, 0, 0, 1467, 0, 0,
	0, 1447, 1448, 1449, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1463, 0, 1464, 0, 0, 0, 0, 0,
	0, 1434, 1435, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1455, 0, 0, 0,
	0, 0, 0, 0, 1440, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1465, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1454, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1417, 1418, 0,
	1450, 1451, 1452, 1460, 1461, 1462, 0, 0, 1446, 0,
	0, 0, 0, 0, 0, 0, 1453, 0, 0, 0,
	0, 0, 0, 1420, 0, 0, 1441, 1466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1419, 1458, 0, 0, 0, 0, 0, 0, 1439, 0,
	0, 0, 0, 1417, 1418, 1436, 1450, 1451, 1452, 1460,
	1461, 1462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1453, 0, 0, 0, 2471, 0, 0, 1420,
	0, 0, 0, 1466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1419, 0, 0, 0,
	1442, 1443, 1444, 1445, 1439, 0, 0, 0, 0, 0,
	1425, 1436, 0, 0, 0, 1456, 0, 0, 1431, 1432,
	1438, 1437, 1433, 1459, 0, 1430, 1428, 1429, 1421, 1422,
	1423, 1424, 1426, 1427, 1457, 0, 0, 1467, 0, 0,
	0, 1447, 1448, 1449, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1463, 0, 1464, 0, 1442, 1443, 1444, 1445,
	0, 1434, 1435, 0, 0, 0, 1425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1455, 0, 0, 0,
	0, 0, 0, 0, 1440, 0, 0, 0, 0, 0,
	1457, 0, 0, 1467, 0, 0, 0, 1447, 1448, 1449,
	0, 0, 1465, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1454, 1463, 0,
	1464, 0, 0, 0, 0, 0, 0, 1434, 1435, 0,
	0, 0, 0, 2485, 0, 0, 0, 0, 0, 0,
	0, 0, 1455, 0, 0, 0, 0, 0, 0, 0,
	1440, 0, 0, 0, 0, 0, 0, 0, 1446, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1465, 0,
	0, 0, 0, 0, 0, 0, 1441, 0, 0, 0,
	0, 0, 0, 1454, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1458, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1417, 1418, 0, 1450, 1451, 1452, 1460,
	1461, 1462, 0, 0, 1446, 0, 0, 0, 0, 0,
	0, 0, 1453, 0, 0, 0, 0, 0, 0, 1420,
	0, 0, 1441, 1466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1419, 1458, 0, 0,
	0, 0, 0, 0, 1439, 0, 0, 0, 0, 0,
	0, 1436, 0, 0, 0, 1456, 0, 0, 1431, 1432,
	1438, 1437, 1433, 1459, 0, 1430, 1428, 1429, 1421, 1422,
	1423, 1424, 1426, 1427, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1442, 1443, 1444, 1445,
	0, 0, 0, 0, 0, 0, 1425, 0, 0, 0,
	0, 1456, 0, 0, 1431, 1432, 1438, 1437, 1433, 1459,
	0, 1430, 1428, 1429, 1421, 1422, 1423, 1424, 1426, 1427,
	1457, 0, 0, 1467, 0, 0, 0, 1447, 1448, 1449,
	0, 0, 0, 0, 1417, 1418, 0, 1450, 1451, 1452,
	1460, 1461, 1462, 0, 0, 0, 0, 0, 1463, 0,
	1464, 0, 0, 0, 0, 0, 0, 1434, 1435, 0,
	1420, 0, 0, 0, 1466, 0, 0, 0, 0, 0,
	0, 0, 1455, 0, 0, 0, 0, 0, 0, 0,
	1440, 0, 0, 0, 0, 0, 0, 1419, 0, 0,
	0, 0, 0, 0, 0, 1439, 0, 0, 1465, 0,
	0, 0, 1436, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1454, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1446, 0, 0, 1442, 1443, 1444,
	1445, 0, 0, 0, 0, 0, 0, 1425, 0, 0,
	0, 0, 1441, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1457, 0, 0, 1467, 0, 0, 1458, 1447, 1448,
	1449, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1463,
	0, 1464, 0, 0, 0, 0, 0, 0, 1434, 1435,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1455, 0, 0, 0, 0, 0, 0,
	0, 1440, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1465,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1456, 0, 0, 1431, 1432, 1438, 1437, 1433, 1459,
	0, 1430, 1428, 1429, 1421, 1422, 1423, 1424, 1426, 1427,
	0, 0, 0, 0, 0, 0, 1638, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1446, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1441, 1650, 1632, 1639, 1622, 1660, 1659,
	0, 0, 1624, 1623, 0, 0, 0, 0, 0, 0,
	1670, 1671, 0, 0, 0, 0, 0, 0, 1458, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1661, 0, 1657, 1656, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1655, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1654, 1652, 1653, 0, 0, 0, 0,
	0, 0, 1456, 0, 0, 1431, 1432, 1438, 1437, 1433,
	1459, 0, 1430, 1428, 1429, 1421, 1422, 1423, 1424, 1426,
	1427, 0, 0, 0, 0, 0, 1634, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1643, 1637, 1645,
	1647, 1648, 1649, 1644, 0, 1642, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1666, 1667, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1626,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1658, 0, 0, 0, 1635, 0, 1636, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1651, 0, 0, 0, 1619,
	1617, 1618, 1621, 1620, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1627, 1628, 1630, 1631, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1646,
	1629, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1669, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1625, 0,
	1662, 1663, 1664, 1665, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1633, 0, 0, 0, 0, 1640, 1668,
}
var sqlPact = [...]int{

	6142, -1000, -1000, -1000, -1000, -1000, -1000, 184, 183, 182,
	181, 180, 174, 163, 160, 159, -1000, -1000, -1000, 158,
	-1000, -1000, 156, -1000, 155, 153, 152, 151, -1000, 150,
	149, -1000, -1000, -1000, -1000, 148, 146, 144, 49053, 1615,
	59843, 51531, 1640, 2108, 43650, 59426, 43233, 59009, 58592, 138,
	-1000, 58175, 137, 136, 134, -1000, -1000, 133, 1761, 35280,
	131, 128, 127, 1740, 122, 113, -1000, 112, -1000, 6517,
	1185, -1000, 111, 107, -1000, 7681, 364, 51114, 2082, 106,
	104, 34862, 2068, -1000, -1000, 1547, -1000, -1000, 102, 101,
	100, 99, 96, 95, 94, 93, 90, -1000, 89, 88,
	86, 85, 84, 83, 82, 81, 78, 74, 73, 72,
	68, 67, 66, 65, 64, -1000, 9248, 1433, 1303, 1299,
	1296, 1295, 1294, 837, 62, 60, 59, 57, 56, 55,
	-1000, -1000, 54, 53, 52, 49, -1000, 48, 46, 145,
	43, 41, 40, 39, 38, 2522, 2051, 1428, 521, 16592,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 63953, 60254, 34, -3, 28, -1000, 2389, 822,
	29433, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 388, -1000, -1000, -1000, 260, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1562,
	642, -1000, -1000, -1000, 57758, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 60254, -1000, 1600, 7, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 641, -1000, 1597, 227, 1517, -1000,
	-1000, -1000, -1000, -1000, 60254, -1000, -1000, 2696, 2695, 1620,
	640, 57347, -1000, 1267, -1000, 784, 19245, -1000, 972, -1000,
	19245, 259, -1000, -1000, -1000, -1000, -1000, 42816, 13514, 42399,
	41982, 39075, 56930, 13087, 48642, 995, -1000, -1000, -1000, -1000,
	-1000, 11, 36513, 60254, -1000, 258, -1000, -1000, -1000, -1000,
	-1000, -1000, 25548, 515, 25095, 459, 24642, 369, -1000, -1000,
	-1000, -1000, 2694, 2692, 899, 2687, 2322, 63542, 1344, 2686,
	1325, 973, 847, 2685, 2684, 2683, 2682, 2681, 2679, 2678,
	1108, 56513, 2072, 38648, 38221, 49053, 49053, 1904, 56096, -1000,
	-1000, 1087, 1086, -1000, -1000, -1000, -1000, 2189, 2101, 2090,
	48225, -1000, -1000, 2677, 2676, 2674, 2666, 2665, 63131, 1297,
	2664, 1849, 2663, 2662, 2661, 2660, 2659, 2658, 2657, 2656,
	2655, -1000, 47808, 47391, 46974, 46557, 55679, 37794, 37367, -1000,
	-1000, -1000, 31097, 4794, 55262, 31953, 49053, 49053, -1000, -1000,
	25988, -38, -1000, -1000, -1000, 2044, -1000, 25988, -38, -1000,
	2071, 1421, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1859, 1276, 2535, 36940, 1566, 1138, 2187, 2654, 1785, 2179,
	2177, 2172, 2156, 2143, 1284, 1868, 1239, 1223, 2139, 2129,
	2556, 1463, 41565, 2652, 2651, 2353, 2121, 2043, -1000, -1000,
	-1000, -1000, 1183, -1000, -1000, -1000, -1000, -1000, 44061, -1000,
	-1000, 1018, -1000, -1000, 1018, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 994, 62309, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1377,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1749, -1000,
	1524, -1000, -1000, 2650, 2051, 1742, 2287, 2287, 2287, 2414,
	376, 371, -1000, 145, -1000, -1000, 70642, -1000, -1000, 25988,
	25988, 25988, 25988, 25988, 1487, -1000, 639, -1000, -1000, 670,
	-1000, 638, 575, -1000, -1000, -1000, -1000, -1000, -1000, 636,
	2560, -1000, 825, -1000, -1000, -1000, -1000, 2508, -1000, 15699,
	-1000, -1000, -1000, 477, 633, 25988, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 257, 804, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 548, 1406,
	547, 547, 547, -1000, -1000, 843, -1000, -1000, -1000, 272,
	541, 271, 538, -1000, -1000, -1000, -1000, 2070, 632, 629,
	-1000, 628, 627, 626, -1000, -1000, -1000, 625, 617, 615,
	614, 613, 611, 607, 606, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 842, -1000, 605, 596, 594, 593, 592, 591,
	589, 588, 587, -1000, -1000, 5, 60254, -1000, 388, 5,
	-1000, -1000, 584, -1000, 19685, 19685, 19685, -1000, -1000, 1570,
	25988, -1000, 1933, -1000, 624, -218, 737, 30263, -1000, 28584,
	737, 460, 33200, -1000, 2041, -1000, -1000, 579, 256, -1000,
	-1000, 2039, 60254, 13939, 60254, 49053, 49053, -1000, 2274, 25988,
	-1000, -1000, 39500, 36102, 60254, 49464, 2465, 71092, 36102, 60254,
	2069, -1000, -1000, -1000, 60254, -1000, 25988, -1000, 2463, 1105,
	-9, -1000, -1000, -1000, -1000, -1000, -1000, 1814, 1792, 963,
	1676, 1210, -1000, 19245, 2315, -1000, -1000, -1000, 241, 13939,
	-1000, 2073, 2260, 1085, -1000, 1626, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1338, 2257, -1000, 1914, 2253, 1335,
	-1000, -1000, 820, 2252, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1594, -1000, -1000, 2337, -1000, -1000, 1376,
	2247, -178, -1000, -1000, 39500, 36513, 1, -1000, -1000, -26,
	-1000, 12660, 70642, -1000, -1000, -1000, 70642, 711, -1000, -1000,
	2246, -1000, 70642, 696, -1000, -1000, 2242, -1000, -1000, -1000,
	2645, -1000, 2642, 1769, 2640, 2632, 2630, -1000, 1301, 1401,
	2629, -1000, 2628, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	46140, 45723, 845, -1000, 1556, -1000, -1000, 45306, 813, 1768,
	-1000, -1000, 1763, -1000, 793, -1000, 2626, 54845, 1917, 813,
	1760, -1000, -1000, -1000, -1000, -1000, 49053, -1000, 49053, -1000,
	49053, -1000, 1180, -1000, 62720, -218, -1000, -1000, -1000, -1000,
	-1000, 2241, 2625, 2624, 2618, -1000, 60254, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 176, 2237, -1000, -1000,
	176, 2224, -1000, 176, 2220, -1000, 166, 2214, -1000, -1000,
	1609, 2213, -1000, -65, 2203, -1000, -1000, -65, 2200, -1000,
	-15, -1000, -1000, -1000, 822, -1000, 30680, 54428, 39500, 807,
	576, 578, 70642, -1000, 39500, 70642, -1000, 45306, -1000, 54011,
	44895, -1000, -1000, 1083, 1863, -1000, -1000, -1000, -1000, 39500,
	39500, -1000, 53594, -1000, 1511, 1268, 2343, 49053, -1000, -1000,
	2067, -1000, 35691, 50697, -1000, 50286, -1000, 49875, -1000, 49053,
	-1000, 49053, -1000, 2615, 2614, 2609, 2193, 1320, 1312, 60254,
	-1000, -1000, 2352, 60254, -1000, 60254, -1000, -1000, -1000, 1812,
	-1000, -1000, -1000, -1000, 49053, -1000, -1000, -1000, -1000, -1000,
	-1000, 2065, -1000, 1290, -1000, 1079, -1000, -1000, 178, -1000,
	-1000, -9, -1000, 62309, -1000, -1000, 2051, 1742, -1000, 60254,
	-1000, -1000, -1000, 2051, 1598, 1897, 24189, 1874, 25988, 145,
	-1000, -1000, 145, 145, 18805, -1000, -1000, 71092, 71092, 13939,
	1013, 25988, 25988, 25988, 25988, 25988, 25988, 25988, 25988, 25988,
	25988, 25988, 25988, 25988, 25988, 25988, 25988, 25988, 25988, 25988,
	25988, 25988, 25988, 25988, 25988, 25988, 25988, 25988, 25988, 25988,
	25988, 25988, 25988, 25988, 25988, 25988, 1766, 25988, 992, 25988,
	25988, 25988, 25988, 1278, -1000, -1000, 1470, 451, 1588, -1000,
	2509, 2509, 2509, 70813, 70813, 503, 2607, 670, -1000, 25988,
	-1000, -38, 25988, 14366, -1000, 2545, 1190, -1000, -1000, 371,
	8796, 1722, -1000, 370, 14819, -1000, -1000, -1000, 15699, 575,
	23736, 25988, 833, 70642, 12235, 2017, 1965, -1000, 2538, -1000,
	-1000, 2517, -1000, -1000, -1000, -1000, 2517, 1010, 1008, 2536,
	-1000, 2517, 2517, 572, 705, 704, 697, 678, 658, 25988,
	25988, 25988, 25988, 25988, 25988, 25988, 25988, -1000, 23296, 22843,
	22390, 27308, 21937, 25988, 16139, 21484, 21031, 60254, 5, 2460,
	25988, 164, -1000, 69110, -1000, 164, 164, 567, -28, 70642,
	1867, 1867, 29848, 1819, 1494, 1494, 1494, -1000, 560, 656,
	27, 26, 25, -1000, -1000, 24, 22, 737, 9669, 51942,
	1499, 737, 737, 195, 262, 367, 28169, 1933, 51942, -1000,
	-1000, 49053, 559, 14366, 13939, 1116, -29, 193, 1879, 1878,
	1877, -1000, 1258, -30, 807, 980, -39, -1000, 3795, -40,
	-1000, 1071, -1000, -1000, -1000, -1000, 135, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 839,
	551, 549, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 548, 1406, 547, 547, 547, -1000,
	-1000, -1000, 272, 541, 271, 538, -1000, -1000, -1000, -1000,
	-1000, -1000, 2033, -26, 49464, 761, -44, 907, -9, -1000,
	1018, -1000, 1706, -1000, -1000, -1000, -1000, -1000, -1000, 1099,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2557, -1000, 2514,
	-1000, -1000, 2528, 4, -1000, -1000, 13939, -1000, -12, 1250,
	-1000, 41148, 2345, 2344, 2328, 1178, -1000, 1146, 2391, 44061,
	2434, 2433, 20, -1000, 2031, -1000, -1000, 783, 1248, 977,
	44061, 1914, -1000, 71092, -1000, 1928, 2384, 1132, 1160, 1132,
	1132, 1140, -1000, 44061, 974, 1444, 39500, -1000, 969, -1000,
	-14, 2429, 2428, 6, -1000, 2029, 967, -1000, -1000, 49053,
	13939, 714, 1, 36513, 60254, 189, -1000, 25988, -38, 25988,
	-38, -1000, -1000, 2199, -1000, -1000, -1000, 2606, 1340, 1848,
	-1000, -1000, -1000, 537, 1757, 1914, 1748, -1000, -1000, 44478,
	2026, 60254, 1882, -1, 49053, -1000, -1000, 1439, -1000, 2198,
	2196, 580, 2603, -1000, 1555, 1747, -1000, -1000, -1000, 61898,
	949, 2169, 828, 129, 2458, 129, 34030, -1000, 60254, -1000,
	60254, -1000, -1000, -1000, 2602, -1000, 49053, -1000, -1000, 49053,
	-1000, 49053, -1000, 49053, -1000, 49053, 49053, -1000, 60254, 39500,
	39500, 39500, 4457, 40326, -46, 366, -1000, 53183, 60254, 875,
	40737, 60254, -198, 807, 714, -1000, 714, -1000, 49053, 2064,
	-1000, -1000, -1000, -1000, -1000, -1000, 2601, 2600, -1000, 809,
	-1000, 60254, -1000, 60254, -1000, -1000, 60254, -1000, 60254, -1000,
	60254, -1000, -1000, -1000, -1000, -1000, 1202, -1000, 2055, -1000,
	2054, -1000, 51, -1000, -1000, -1000, -1000, -1000, 1495, 49053,
	49053, 49053, -1000, 44061, -1000, -1000, 2051, -1000, -1000, -1000,
	-1000, -1000, 70642, -1000, 493, -1000, -1000, 70642, 1231, 1889,
	-1000, 1889, 0, -1000, 68762, 1861, 49053, -1000, -1000, -1000,
	-1000, -1000, 782, 1088, 1088, 997, 997, 997, 997, 2431,
	3358, 3437, 3424, 3369, 3369, 3369, 3369, 3369, 3369, 3369,
	3369, 692, 1048, 1048, 692, 692, 692, 692, 692, 1048,
	1048, 1048, 3369, 3369, 3369, 70813, 68654, 7196, 25988, 25988,
	965, 1453, 451, 7060, 25988, 5075, 5075, 5075, 5075, -1000,
	1331, -1000, -1000, -1000, -1000, 2013, 536, 27308, 27308, -1000,
	-1000, -1000, -1000, 15259, 25988, -1000, -1000, -1000, -1000, 20578,
	-1000, -1000, 68202, -242, 365, -96, 44, -1000, 25988, 25988,
	25988, 362, -1000, 360, -1000, -1000, 960, -1000, 959, 954,
	953, -1000, 535, 187, 25988, 60254, -1000, 65868, 653, -50,
	-1000, -51, 1144, -1000, 25988, 177, -1000, 1486, 534, 533,
	359, -56, -1000, 357, 773, 741, 354, 352, 350, 25988,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	70362, 65586, 65520, 65238, 8472, 65130, 64848, -57, 348, -1000,
	2010, -96, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 346,
	-1000, 335, -1000, 70296, -96, 333, 4985, -1000, 27308, 27308,
	27308, -1000, 332, -1000, 69044, -1000, 70016, 20138, 20138, 20138,
	331, 69736, 25988, -96, -58, -1000, -70, -1000, -1000, 532,
	-80, 828, 19685, 29015, 13939, -1000, 828, 828, 25988, -1000,
	25988, 1870, -1000, -1000, -1000, 1869, 1271, 1867, 29848, -1000,
	-1000, -1000, -1000, 51942, 581, 737, -1000, -1000, -1000, -1000,
	-1000, 51942, -1000, 2508, 1997, -1000, -1000, -1000, 60254, 388,
	-1000, 51942, 51942, 13939, 737, -1000, 328, 32368, 44, 167,
	-1000, -1000, 13939, 1860, 1860, 1860, -1000, -1000, 2008, 60254,
	2479, -1000, 1417, -1000, 71092, -1000, 668, 876, -1000, 2527,
	528, -1000, 2517, 2517, 60254, 139, 19245, -1000, 1018, -1000,
	-1000, 1214, -1000, 1382, -1000, 989, -1000, -1000, -1000, 19245,
	-1000, 1774, 60254, 60254, 49053, -1000, -1000, 1738, 61487, 1736,
	71092, 60254, -1000, -1000, 527, 525, 1855, 1854, 60254, 60254,
	61076, 60665, 60254, 1414, 25988, 1533, 1644, -38, -38, -1000,
	-38, 524, 861, 49053, 49053, 49053, 1334, -1000, -1000, -1000,
	-1000, -1000, 49053, -1000, -1000, 2526, -1000, 1132, -1000, -1000,
	-1000, 1132, 1914, 1333, 49053, 39500, 815, 60254, 1449, -38,
	-38, -1000, -38, 523, 13939, 1358, -1000, 1929, -1000, -1000,
	-1000, 11810, 70642, -1000, 70642, -1000, 60254, -1000, 838, 60254,
	40737, 802, 2159, -1000, 1914, 2155, 388, -1000, -1000, 33615,
	-26, 807, 39500, 49053, -1, 39500, 39500, 39500, 2598, 520,
	2593, -1000, 49053, 2146, 1550, 1735, 2113, 690, 60254, 1505,
	-1000, 25988, 1329, -1000, 32785, 860, 60254, 1316, 124, -1000,
	-1000, -1000, 36, 60254, -1000, 2590, -1000, -1000, 176, 176,
	176, -1000, 166, 1609, -1000, -65, -65, -1000, -1000, 4457,
	807, -7, 519, -1000, 729, 720, 31528, 39500, -87, -1000,
	-1000, -1000, -1000, -1000, 49053, 60254, 604, 1916, 60254, -92,
	-1000, 165, -1000, 807, -1000, -1000, 814, -1000, 1052, -1000,
	-1000, -1000, -26, -26, -1000, -1000, -1000, -1000, 1200, 1192,
	60254, -1000, 13939, 60254, 49053, 13939, 49053, -1000, -1000, -1000,
	-1000, -1000, 1231, -1000, 25988, -1000, -1000, -1000, 18805, -1000,
	-1000, -1000, 49053, -204, 25988, 25988, 6674, 6237, 25988, 27308,
	27308, -1000, 25988, 4569, -1000, -1000, -1000, -1000, -1000, 1999,
	506, 25988, 71092, 4009, 1037, -1000, 327, 64782, 692, -1000,
	25988, -1000, 326, 18365, -1000, 69390, -2, -2, -1000, 2555,
	1780, 1485, 1364, 1213, 2525, 11385, -96, -98, -1000, -1000,
	666, -1000, 2098, -1000, 25988, 69670, 10960, -1000, 34445, 830,
	1505, -1000, -1000, 2517, 756, -1000, -1000, -1000, 756, -1000,
	68136, 71092, 71092, 25988, 25988, -1000, 25988, 25988, 25988, -1000,
	-1000, 25988, -1000, -1000, 1994, 25988, -1000, 71092, 71092, 27308,
	27308, 27308, 27308, 27308, 27308, 27308, 27308, 27308, 27308, 27308,
	27308, 27308, 27308, 27308, 27308, 27308, 27308, 27308, 1806, 27308,
	2503, 2503, 2503, -1000, 2048, 1994, 25988, 25988, 71092, 320,
	317, 315, -1000, 25988, -96, -1000, -1000, 4457, -1000, 1963,
	-1000, -99, -1000, 1933, -1000, -1000, 1963, 1963, -102, 70642,
	29848, 29848, -1000, 504, 25988, 1865, -1000, 652, -1000, -104,
	-1000, 51942, -1000, 651, -239, -1000, 716, -1000, -1000, -1000,
	-1000, 388, -1000, -1000, -1000, 140, 51942, -1000, -108, -1000,
	2455, 314, 13939, -1000, -1000, -1000, -1000, -1000, -1000, -38,
	-26, 1512, 2554, -1000, 2524, 664, 648, 313, 2517, 312,
	310, -26, 60254, -1000, -9, -1000, -1000, -1000, 25988, -1000,
	-1000, 2342, 952, 947, -1000, 2144, -1000, 1734, -1000, 866,
	-1000, 1337, -1000, 25988, 25988, 501, 499, 1398, 2589, 2142,
	1609, 2141, 1609, -1000, -1000, 745, -1000, 70642, 495, 491,
	-1000, -12, 1236, -1000, -1000, -1000, 25988, 25988, 52768, -1000,
	2337, 2337, -1000, 946, -1000, -1000, -1000, 1914, 943, -1000,
	-1000, 1430, -1000, -1000, -1000, -1000, -1000, 25988, -1000, -14,
	942, 807, 1990, -1000, 2587, 2586, 2585, 309, -17, -1000,
	2450, 1549, 60254, 49053, 49053, 2441, 742, -1000, 2508, -1000,
	-1000, -1000, -1000, 813, -1000, -1000, 2584, -1000, 874, 13939,
	49053, 2140, 1827, 690, 39915, -1000, 813, 1897, -1000, 70642,
	-1000, 1316, 17912, 2331, -109, -1000, -1000, -1000, 828, 34030,
	29848, 25988, 2580, -110, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 52357, 52357, 39500, 39500, 39500, 807, 60254, 60254,
	40737, 2578, 490, 60254, 60254, 483, -1000, 60254, 60254, 2577,
	-1000, -1000, 1513, 49053, -1000, -1000, 809, -1000, -1000, 1452,
	1572, 1452, 1523, 67856, -1000, 2357, 13939, 2417, 5075, 25988,
	25988, 244, 419, 211, 5075, 25988, 25988, 71092, 5424, -114,
	25988, 25988, -1000, 25988, 647, 70642, 2549, 25988, 308, 305,
	302, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 299,
	-1000, -1000, -1000, -1000, -1000, 70642, 25988, 125, -1000, -1000,
	-1000, 64364, -1000, 25988, 296, 290, -1000, -1000, -1000, 289,
	288, 8862, 7998, 67576, 67510, 67230, 70642, 2048, 70642, -1000,
	-1000, 759, 759, 1111, 1111, 1111, 1111, 2503, 937, 970,
	518, 433, 433, 433, 472, 985, 985, 433, 433, 433,
	1989, 1680, 479, 4117, -1000, -1000, 70642, 70642, 285, -1000,
	-1000, -1000, -96, 281, 1954, 2382, -1000, 29848, 1954, 1954,
	-1000, -1000, 1271, 60254, 70642, 29848, -218, -1000, 2508, -1000,
	-1000, 1997, -1000, 10106, -1000, 13939, -1000, -1000, 32368, -1000,
	478, -1000, 45, -1000, -1000, -1000, 646, 2575, 662, -1000,
	280, -1000, -1000, -26, 70642, 60254, 60254, 60254, 2134, -1000,
	3603, -1000, 66950, -115, -1000, 68762, 25988, 60254, -1000, 1372,
	1893, 892, -1000, 60254, -1000, 60254, -1000, -1000, 60254, 60254,
	49053, -116, 70642, -41, -1000, 707, -1000, -1000, 49053, 49053,
	39500, -121, 13939, -1000, 39500, -1000, -1000, -1000, 1907, -38,
	-1000, 2574, 473, 1914, -38, -1000, 1510, -1000, 645, -1000,
	-1000, 471, 60254, 1546, 470, 13939, 1845, 690, 39915, -1000,
	949, 1316, -1000, -1000, -45, -1000, 474, -38, 1505, -1000,
	-53, 70642, -1000, 693, -1000, -122, -1000, -1000, 275, -1000,
	2302, 2300, -1000, -1000, 25988, 458, 456, 60254, 2298, -1000,
	-1000, 1717, -1000, -1000, -1000, -1000, 13939, 1232, -1000, -1000,
	-1000, -1000, 2357, 5075, 5075, 25988, 25988, 25988, 5075, 5424,
	-127, -1000, 5075, 5075, -96, -1000, -1000, 69390, -1000, -1000,
	-1000, -1000, 70642, 10535, 1460, -1000, 66884, -1000, -1000, -1000,
	-1000, 25988, 25988, -1000, -1000, -1000, -1000, -1000, 27308, 1987,
	455, 71092, -1000, -1000, 824, 25988, 25988, 1933, 824, 824,
	-1000, -129, -1000, 737, -1000, -1000, -1000, 2508, 45, -1000,
	2572, 13939, 659, -1000, 2569, -1000, -1000, -1000, -1000, 60254,
	-1000, 60254, -1000, 13939, 60254, 1976, 1727, -1000, -1000, 1853,
	454, 27308, 49053, 733, 1986, 1425, 25988, -1000, -131, -133,
	1721, -1000, -1000, 1709, 25988, -1000, 71092, 1609, 1609, -137,
	-138, -1000, 941, 60254, 17472, -1000, -1000, -1000, 924, -1000,
	-65, 1449, 1934, 808, -1000, 40737, 802, -1000, -1000, 743,
	-1000, 25988, -1000, 49053, 25988, 1540, -1000, 690, 39915, -1000,
	2113, -1000, 2131, 60254, 2327, -1000, 1897, 451, -1000, 807,
	450, 440, -145, 25988, 25988, -150, 439, -88, -1000, 702,
	700, -1000, -1000, 49053, 49053, -1000, 5075, 5075, 5075, -1000,
	269, -1000, -1000, 1505, 2381, -1000, 66604, 66324, 453, 27308,
	71092, -151, -1000, 60254, 70642, -96, -1000, -1000, -1000, 51942,
	644, -1000, 2568, -1000, -1000, 1400, -1000, -1000, -1000, 60254,
	1732, -1000, -1000, 25988, 4117, 432, 25988, -1000, -1000, 1903,
	2007, 1907, 406, -1000, -1000, -1000, -1000, 1355, -1000, -1000,
	70642, 2360, -1000, -1000, 405, 404, 403, 489, 1981, -1000,
	398, 802, -1000, 1478, -1000, 1910, 266, 2440, 743, -1000,
	2497, -1000, -152, 874, -156, 49053, 39915, -1000, 1827, 1043,
	-158, 60254, 1316, -1000, -1000, 39500, 39500, 1425, -160, -162,
	-1000, 39500, 1717, -1000, 60254, -1000, 60254, -1000, -1000, -1000,
	1447, 25988, -1000, -1000, 453, -166, -1000, -94, -1000, 2439,
	-1000, -1000, -1000, -1000, -1000, 2132, 66258, 1787, 60254, 65976,
	2004, -1000, -1000, 1449, 60254, 49053, 872, 13939, 1452, 1452,
	25988, 17032, 1474, 25988, -1000, 49053, -1000, 2212, 1907, -38,
	-1000, -1000, 1425, 395, 1425, 390, -1000, 1845, 1167, -1000,
	828, -1000, -1000, -168, -170, 1907, 1425, -1000, -175, -1000,
	-180, -181, 264, 26868, 26868, 26868, -96, -1000, 60254, 389,
	2094, -1000, 1526, 1354, 263, 893, -1000, -1000, 1986, -186,
	388, -1000, 25988, -1000, -187, -1000, 854, -188, -1000, 852,
	-193, -1000, 1980, -1000, -194, 386, -1000, 1449, 808, 1907,
	25988, 1907, 25988, -1000, 34030, -1000, 807, 807, 1449, 1907,
	807, -1000, -1000, -1000, -1000, -1000, 27733, 1601, 1288, 68482,
	-1000, -1000, -1000, -1000, 60254, -1000, 1537, 1535, 1194, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1787, 70642, -1000,
	1452, 1930, -1000, 1452, 1973, -1000, 1467, -1000, 60254, 802,
	-1000, 1449, -202, 1449, -207, -192, -1000, -1000, -1000, 1449,
	-1000, 2472, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2157,
	-1000, 881, 1579, 1579, 1526, -1000, 384, -1000, 382, -1000,
	-208, -1000, 826, 1425, 826, 1425, -1000, -1000, 26428, -1000,
	2482, -1000, -1000, 1833, -1000, 1986, 25988, 25988, 1605, -1000,
	2564, 1907, -1000, 1907, -1000, -1000, -1000, -1000, -1000, -209,
	-213, -1000, -1000, -1000, -1000, 1449, 1449, 1449, 917, 826,
	826, -1000, 381, -1000, -1000, 25988, -215, 1449, -1000,
}
var sqlPgo = [...]int{

	0, 3160, 3159, 3158, 3152, 3150, 3149, 3148, 3146, 3145,
	3142, 3141, 3140, 3139, 3138, 3136, 3133, 3132, 3130, 3128,
	3125, 3122, 3121, 3120, 3114, 3109, 3108, 3107, 3105, 3101,
	3100, 3097, 3096, 3095, 3094, 3090, 3089, 3088, 3087, 3084,
	3082, 3081, 3080, 3079, 3077, 3076, 36, 3073, 3071, 3069,
	3068, 3066, 3064, 3060, 3059, 3058, 3057, 3056, 3055, 3054,
	3053, 3052, 3051, 3049, 44, 3048, 212, 3047, 3046, 3045,
	3044, 3042, 3041, 3039, 3038, 3036, 3034, 211, 3032, 127,
	3031, 3030, 3028, 3025, 3023, 209, 3022, 3021, 3020, 3019,
	3018, 3017, 3014, 3012, 3009, 249, 3008, 3006, 3001, 2999,
	2998, 2996, 2995, 2991, 2990, 2989, 193, 2987, 206, 2985,
	2984, 2982, 2981, 2980, 2979, 2978, 2977, 2976, 2975, 2974,
	2973, 2972, 2971, 2969, 2968, 2966, 2963, 2962, 2961, 2960,
	2957, 2955, 2954, 2949, 218, 146, 2948, 2946, 205, 202,
	2941, 2939, 98, 91, 30, 2934, 87, 130, 187, 6111,
	180, 2932, 2927, 2924, 2918, 2917, 64, 129, 133, 119,
	123, 120, 2915, 2913, 65, 62, 32, 28, 92, 2912,
	2911, 2910, 1864, 97, 2909, 2907, 200, 182, 2906, 1177,
	2905, 167, 77, 88, 26, 84, 2903, 109, 19, 2902,
	138, 51, 2901, 117, 66, 29, 5415, 4227, 2899, 70,
	215, 74, 163, 194, 169, 164, 161, 121, 171, 2895,
	191, 2893, 95, 144, 2891, 2890, 2887, 55, 139, 4,
	3, 147, 24, 83, 13, 2886, 12, 2885, 2877, 2875,
	2873, 21, 145, 2872, 35, 58, 2871, 31, 17, 160,
	2868, 172, 2866, 93, 2865, 197, 150, 143, 14, 159,
	2863, 2861, 2859, 2858, 2856, 94, 18, 100, 2855, 2853,
	111, 175, 2851, 40, 122, 69, 115, 213, 90, 157,
	79, 162, 131, 176, 2849, 2848, 2847, 151, 2846, 2845,
	113, 155, 2844, 2843, 214, 34, 61, 181, 59, 2842,
	2841, 118, 2840, 148, 2836, 2833, 2830, 208, 125, 165,
	6, 67, 96, 27, 8, 168, 114, 76, 75, 2828,
	2928, 1804, 1441, 2826, 105, 86, 50, 85, 112, 199,
	56, 2819, 2818, 1783, 2814, 2813, 2812, 2811, 136, 2808,
	2807, 2806, 110, 54, 72, 2805, 2801, 108, 57, 177,
	201, 71, 156, 149, 196, 2800, 135, 2799, 37, 104,
	2798, 141, 192, 152, 2795, 1069, 116, 2794, 170, 2793,
	2792, 2791, 2790, 124, 2789, 2787, 126, 2786, 106, 2785,
	2784, 137, 186, 210, 89, 38, 2782, 63, 189, 2781,
	140, 33, 2780, 2783, 80, 0, 6401, 4601, 5222, 2779,
	236, 2778, 158, 103, 2777, 2774, 2773, 2772, 43, 15,
	7, 9, 16, 11, 977, 128, 2771, 2770, 73, 99,
	101, 2769, 203, 166, 2766, 2761, 2756, 68, 2755, 25,
	2754, 22, 2753, 2752, 23, 5, 2751, 2750, 188, 2746,
	185, 2737, 2733, 2438, 2732, 198, 2722, 107, 2721, 132,
	154, 2720, 2716, 2711, 2709, 195, 2708, 190, 2707, 10,
	20, 1, 2706, 2705, 2704, 153, 2, 2232, 2703, 2701,
	53, 142, 81, 2700, 2699, 134,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 3, 3, 3,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 7, 7, 8, 8, 8, 34, 34,
	10, 10, 9, 9, 9, 11, 11, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 13, 13, 24, 24,
	14, 26, 15, 27, 435, 435, 18, 29, 19, 30,
	12, 437, 437, 437, 437, 22, 20, 20, 31, 31,
	145, 145, 145, 145, 17, 17, 25, 25, 158, 158,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 434, 434, 160, 160, 159, 155, 155, 438, 438,
	161, 161, 161, 163, 163, 35, 35, 93, 93, 93,
	146, 86, 86, 86, 86, 86, 86, 86, 86, 81,
	81, 383, 383, 384, 384, 141, 141, 142, 142, 142,
	142, 143, 143, 144, 144, 144, 49, 37, 37, 37,
	37, 37, 37, 37, 38, 38, 38, 38, 39, 39,
	39, 39, 39, 39, 40, 40, 40, 40, 40, 40,
	47, 47, 47, 47, 135, 135, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 442, 442, 442, 442, 442,
	442, 442, 442, 442, 442, 442, 442, 442, 442, 442,
	442, 442, 442, 442, 442, 442, 443, 443, 444, 444,
	445, 445, 446, 446, 446, 446, 446, 446, 446, 446,
	446, 446, 446, 446, 446, 446, 446, 446, 446, 446,
	446, 446, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 61, 61, 233,
	233, 211, 211, 62, 62, 62, 63, 63, 64, 64,
	51, 51, 430, 430, 246, 246, 350, 350, 66, 66,
	67, 67, 67, 67, 67, 67, 68, 68, 68, 68,
	68, 68, 68, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 75, 75, 75, 76, 76, 76, 73,
	73, 73, 71, 71, 71, 70, 70, 70, 74, 74,
	74, 72, 72, 72, 247, 247, 77, 77, 77, 77,
	77, 77, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 352, 352, 78, 78, 78,
	321, 321, 82, 82, 82, 278, 278, 83, 83, 83,
	83, 83, 84, 84, 84, 84, 94, 94, 94, 94,
	433, 433, 239, 239, 176, 176, 176, 176, 89, 89,
	89, 89, 90, 90, 90, 91, 91, 140, 140, 100,
	100, 100, 100, 100, 99, 99, 99, 99, 99, 99,
	41, 41, 41, 42, 42, 43, 43, 44, 44, 45,
	45, 46, 46, 46, 46, 46, 102, 102, 439, 439,
	104, 101, 101, 101, 103, 103, 103, 103, 105, 106,
	106, 106, 106, 106, 106, 107, 107, 377, 377, 254,
	254, 375, 375, 391, 391, 376, 376, 215, 215, 215,
	215, 215, 216, 216, 216, 382, 382, 382, 382, 382,
	382, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	125, 125, 125, 134, 134, 134, 134, 134, 134, 134,
	127, 127, 127, 117, 117, 109, 109, 109, 109, 113,
	113, 113, 113, 113, 110, 110, 114, 114, 116, 116,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 111,
	111, 111, 111, 120, 120, 120, 120, 284, 284, 284,
	119, 119, 336, 336, 130, 130, 130, 130, 130, 130,
	335, 335, 126, 126, 126, 126, 129, 129, 129, 129,
	268, 268, 123, 123, 123, 124, 124, 124, 128, 128,
	131, 131, 131, 131, 112, 112, 112, 448, 448, 448,
	132, 132, 122, 122, 133, 133, 133, 133, 133, 133,
	133, 133, 121, 121, 121, 436, 436, 115, 431, 431,
	428, 428, 428, 428, 428, 428, 428, 429, 429, 432,
	432, 87, 87, 87, 56, 56, 449, 449, 449, 57,
	57, 450, 450, 450, 447, 447, 447, 447, 447, 447,
	447, 447, 217, 217, 218, 218, 302, 302, 302, 302,
	302, 219, 219, 162, 162, 162, 222, 223, 223, 220,
	220, 221, 221, 221, 225, 225, 224, 227, 227, 226,
	301, 396, 396, 397, 397, 397, 397, 397, 397, 397,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	394, 394, 394, 395, 392, 392, 393, 393, 393, 393,
	451, 451, 451, 451, 451, 451, 452, 452, 300, 300,
	231, 231, 399, 399, 399, 399, 400, 400, 400, 400,
	400, 403, 402, 401, 401, 401, 401, 401, 331, 331,
	331, 60, 60, 60, 265, 265, 264, 264, 266, 266,
	266, 266, 266, 266, 266, 266, 266, 266, 266, 266,
	266, 266, 137, 137, 58, 58, 58, 168, 168, 55,
	55, 55, 454, 454, 59, 59, 59, 455, 455, 65,
	65, 65, 65, 65, 65, 54, 54, 54, 54, 54,
	456, 456, 285, 285, 283, 283, 237, 237, 338, 180,
	180, 156, 156, 156, 21, 23, 23, 16, 16, 32,
	32, 33, 33, 28, 28, 440, 440, 441, 441, 88,
	88, 92, 92, 92, 98, 98, 136, 136, 136, 136,
	136, 136, 136, 36, 36, 36, 36, 48, 48, 48,
	48, 96, 458, 458, 458, 97, 97, 457, 457, 175,
	175, 175, 175, 177, 177, 297, 297, 298, 298, 459,
	459, 299, 299, 299, 299, 170, 169, 171, 171, 53,
	53, 53, 164, 164, 165, 165, 166, 166, 167, 167,
	460, 460, 85, 85, 85, 139, 139, 210, 210, 293,
	293, 293, 232, 232, 185, 185, 296, 296, 294, 294,
	294, 294, 263, 263, 263, 138, 138, 242, 242, 256,
	256, 257, 257, 347, 347, 258, 95, 95, 149, 149,
	147, 147, 147, 147, 147, 147, 461, 461, 148, 148,
	148, 150, 150, 150, 150, 150, 150, 150, 153, 153,
	153, 153, 154, 154, 154, 152, 152, 410, 410, 410,
	412, 412, 413, 409, 409, 411, 411, 453, 453, 267,
	267, 267, 229, 230, 228, 228, 462, 462, 235, 235,
	234, 236, 236, 337, 337, 337, 261, 261, 261, 261,
	288, 288, 286, 286, 287, 287, 289, 289, 290, 290,
	290, 291, 291, 292, 292, 260, 260, 317, 317, 151,
	151, 151, 241, 241, 241, 243, 243, 308, 308, 308,
	308, 308, 308, 309, 309, 307, 307, 307, 307, 339,
	339, 339, 339, 339, 339, 339, 339, 339, 340, 340,
	244, 244, 341, 295, 295, 426, 426, 426, 427, 427,
	334, 334, 342, 342, 342, 342, 342, 342, 332, 332,
	333, 333, 348, 349, 349, 271, 271, 271, 271, 269,
	269, 272, 272, 272, 272, 270, 270, 343, 343, 343,
	343, 262, 262, 344, 344, 344, 345, 303, 304, 304,
	353, 353, 353, 353, 353, 368, 240, 240, 240, 240,
	240, 463, 463, 354, 354, 354, 354, 354, 354, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 358, 358, 358, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 367, 367, 367, 367, 367, 359, 359, 364,
	364, 365, 365, 365, 360, 361, 366, 366, 366, 366,
	464, 464, 370, 370, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 356, 356, 356, 363, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	279, 279, 280, 280, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 312,
	312, 312, 312, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 404, 404,
	404, 404, 404, 404, 404, 404, 407, 407, 408, 408,
	405, 405, 405, 405, 405, 405, 405, 405, 405, 405,
	405, 405, 405, 405, 405, 405, 405, 405, 405, 405,
	405, 406, 406, 406, 406, 406, 406, 406, 406, 406,
	406, 406, 406, 406, 406, 406, 406, 406, 406, 406,
	406, 406, 406, 406, 406, 406, 406, 406, 406, 414,
	414, 415, 415, 417, 417, 418, 418, 419, 420, 420,
	420, 421, 422, 422, 416, 416, 423, 423, 423, 423,
	424, 424, 425, 425, 425, 425, 425, 323, 323, 324,
	324, 330, 330, 330, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	178, 178, 178, 178, 178, 252, 252, 250, 250, 250,
	253, 253, 251, 251, 249, 249, 248, 248, 320, 320,
	318, 318, 322, 322, 273, 273, 369, 369, 369, 369,
	369, 369, 369, 274, 274, 274, 282, 275, 275, 276,
	276, 276, 276, 276, 314, 315, 277, 277, 277, 316,
	316, 325, 329, 329, 328, 327, 327, 326, 326, 305,
	305, 306, 306, 259, 259, 465, 465, 255, 255, 346,
	346, 346, 346, 213, 213, 245, 245, 212, 212, 205,
	205, 206, 206, 206, 206, 238, 238, 371, 371, 371,
	372, 373, 374, 319, 195, 194, 182, 183, 193, 192,
	191, 181, 184, 188, 189, 190, 186, 187, 201, 200,
	199, 197, 198, 351, 207, 207, 208, 208, 208, 209,
	209, 209, 209, 179, 179, 202, 202, 203, 204, 204,
	196, 196, 196, 172, 172, 172, 173, 173, 174, 174,
	381, 381, 379, 379, 379, 380, 380, 380, 380, 378,
	378, 378, 378, 378, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 388, 388, 388, 388, 388, 388, 388, 388,
	388, 388, 388, 388, 388, 388, 388, 388, 388, 388,
	388, 388, 388, 388, 388, 388, 388, 388, 388, 388,
	388, 388, 388, 388, 388, 388, 388, 388, 388, 388,
	388, 388, 388, 388, 388, 388, 388, 388, 386, 386,
	386, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 387, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 390, 390,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 0, 1, 1, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 1, 3, 1, 1, 3, 4, 6,
	1, 3, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 4, 6, 4, 6,
	6, 6, 6, 6, 1, 1, 5, 5, 6, 6,
	4, 4, 4, 4, 3, 4, 4, 7, 4, 7,
	5, 3, 5, 7, 4, 12, 4, 12, 1, 3,
	5, 5, 2, 5, 3, 6, 4, 6, 5, 6,
	6, 4, 8, 3, 4, 3, 6, 4, 3, 1,
	3, 2, 1, 1, 3, 1, 3, 2, 2, 0,
	1, 1, 0, 2, 0, 7, 2, 5, 6, 2,
	1, 6, 4, 9, 7, 12, 12, 12, 2, 7,
	2, 1, 1, 1, 3, 3, 0, 3, 1, 3,
	1, 1, 3, 2, 5, 0, 5, 1, 2, 1,
	2, 1, 2, 2, 3, 3, 3, 3, 3, 5,
	3, 3, 5, 3, 3, 5, 3, 3, 5, 3,
	6, 6, 6, 3, 1, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 3, 3, 4, 3, 4,
	7, 4, 4, 4, 3, 5, 7, 4, 3, 3,
	4, 3, 3, 3, 3, 3, 2, 0, 1, 0,
	1, 0, 3, 3, 3, 3, 3, 6, 4, 4,
	4, 3, 5, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 4, 1, 1, 2, 1, 2, 7, 3, 2,
	0, 1, 3, 3, 1, 0, 1, 2, 2, 1,
	6, 5, 1, 2, 1, 3, 2, 0, 8, 3,
	2, 2, 2, 2, 2, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 4, 6, 3, 3, 5,
	3, 3, 5, 3, 1, 3, 2, 2, 5, 3,
	6, 3, 1, 1, 2, 1, 1, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 2, 1, 2, 1, 3, 5, 7, 2,
	3, 0, 3, 5, 2, 3, 0, 2, 3, 2,
	3, 2, 6, 4, 7, 2, 6, 4, 7, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 2,
	1, 2, 2, 3, 2, 4, 3, 2, 2, 1,
	2, 1, 3, 3, 1, 2, 1, 2, 1, 2,
	1, 1, 3, 5, 4, 6, 4, 3, 0, 1,
	3, 2, 4, 2, 4, 1, 6, 3, 1, 1,
	5, 3, 2, 6, 3, 3, 4, 4, 3, 1,
	3, 2, 1, 3, 1, 2, 1, 1, 2, 2,
	3, 1, 1, 1, 1, 1, 3, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	2, 3, 3, 1, 1, 1, 1, 1, 2, 2,
	5, 7, 3, 3, 3, 3, 4, 4, 3, 4,
	4, 3, 4, 4, 5, 3, 2, 3, 4, 3,
	4, 3, 5, 4, 5, 3, 4, 5, 3, 4,
	3, 4, 3, 3, 4, 4, 5, 0, 1, 1,
	3, 4, 1, 0, 5, 4, 6, 4, 6, 4,
	1, 0, 3, 4, 4, 5, 7, 5, 3, 3,
	2, 0, 4, 2, 3, 4, 2, 3, 3, 3,
	4, 3, 3, 3, 3, 4, 3, 1, 1, 1,
	2, 3, 2, 3, 6, 6, 7, 9, 7, 9,
	3, 4, 5, 5, 3, 1, 1, 5, 2, 0,
	1, 1, 1, 1, 3, 2, 2, 2, 1, 2,
	0, 3, 3, 2, 10, 13, 0, 2, 3, 9,
	12, 0, 2, 3, 1, 1, 2, 2, 2, 2,
	1, 0, 1, 0, 1, 3, 1, 1, 1, 1,
	3, 8, 0, 1, 1, 0, 2, 1, 0, 1,
	0, 9, 9, 3, 1, 3, 7, 1, 3, 11,
	3, 2, 0, 3, 1, 2, 2, 3, 2, 6,
	2, 1, 1, 2, 4, 2, 5, 5, 5, 2,
	8, 9, 6, 5, 3, 1, 5, 8, 5, 11,
	0, 1, 3, 3, 2, 2, 1, 1, 4, 0,
	3, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 2, 2, 1, 2,
	1, 5, 8, 4, 1, 0, 1, 2, 2, 1,
	2, 3, 2, 2, 3, 2, 2, 2, 2, 2,
	3, 1, 4, 2, 4, 7, 3, 3, 0, 3,
	6, 3, 1, 1, 8, 7, 5, 0, 1, 6,
	7, 6, 5, 3, 4, 14, 17, 14, 17, 4,
	0, 2, 2, 0, 1, 0, 1, 3, 2, 2,
	0, 1, 1, 0, 6, 6, 8, 6, 8, 6,
	8, 6, 8, 6, 8, 1, 0, 2, 0, 2,
	2, 3, 3, 2, 2, 2, 1, 2, 1, 2,
	1, 2, 1, 3, 2, 3, 2, 2, 2, 2,
	2, 2, 1, 1, 0, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 0, 1, 3, 1,
	0, 1, 1, 1, 1, 2, 3, 2, 2, 8,
	11, 3, 3, 0, 3, 0, 3, 0, 3, 0,
	1, 0, 6, 7, 3, 6, 3, 1, 3, 1,
	4, 2, 1, 3, 1, 3, 8, 5, 3, 4,
	3, 0, 2, 2, 0, 10, 3, 2, 0, 1,
	3, 1, 1, 3, 3, 5, 1, 1, 3, 3,
	2, 3, 4, 3, 4, 5, 0, 2, 2, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 8, 8,
	8, 2, 4, 4, 4, 2, 2, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 5, 1, 0, 1, 0, 1, 0,
	3, 1, 3, 2, 4, 5, 2, 2, 1, 1,
	1, 0, 2, 5, 2, 3, 1, 1, 1, 3,
	0, 1, 1, 1, 1, 3, 0, 2, 0, 4,
	2, 5, 3, 2, 0, 1, 3, 3, 5, 1,
	1, 1, 1, 1, 3, 2, 4, 4, 0, 8,
	4, 3, 4, 1, 5, 3, 4, 5, 1, 5,
	1, 3, 2, 0, 3, 0, 2, 3, 1, 3,
	2, 0, 3, 5, 6, 4, 6, 4, 3, 2,
	1, 0, 5, 1, 0, 2, 2, 2, 1, 1,
	0, 1, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 2, 1, 0,
	2, 5, 7, 2, 1, 1, 2, 4, 3, 5,
	0, 1, 1, 1, 1, 1, 1, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 5,
	4, 1, 2, 1, 4, 1, 1, 2, 1, 1,
	1, 1, 1, 0, 1, 2, 5, 1, 4, 2,
	5, 1, 4, 3, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	1, 0, 1, 4, 1, 3, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 5,
	4, 6, 3, 5, 4, 6, 4, 6, 5, 7,
	3, 3, 3, 3, 3, 4, 3, 2, 4, 2,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 4, 1, 3,
	1, 3, 3, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 5, 6, 6, 7, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 6, 2,
	1, 5, 1, 1, 1, 1, 2, 1, 5, 5,
	3, 1, 1, 1, 2, 2, 2, 4, 3, 5,
	6, 8, 6, 6, 4, 3, 4, 1, 1, 1,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	6, 6, 8, 8, 6, 4, 6, 6, 6, 4,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 4, 3, 4, 3, 4, 3, 4, 4, 3,
	6, 5, 5, 5, 4, 4, 3, 4, 3, 5,
	0, 5, 0, 2, 0, 1, 3, 3, 2, 2,
	0, 6, 1, 0, 3, 0, 2, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 1, 1,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 2, 3, 1, 2, 3,
	2, 3, 2, 3, 1, 0, 1, 3, 1, 3,
	3, 3, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 1, 2, 3, 0, 3,
	3, 2, 2, 1, 2, 2, 3, 2, 1, 1,
	1, 5, 1, 2, 4, 2, 0, 1, 0, 3,
	5, 1, 0, 1, 2, 1, 0, 1, 3, 3,
	2, 1, 1, 1, 3, 1, 3, 3, 1, 1,
	1, 1, 5, 3, 1, 1, 3, 1, 2, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 7, 1,
	7, 5, 3, 1, 1, 1, 1, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 454, -79, -49, -47, -82, -83, -67,
	-81, -84, -78, -94, -98, -88, -100, -136, -3, -35,
	-37, -50, -66, -68, -77, -86, -85, -87, -89, -93,
	-92, -41, -95, -99, -108, -137, -138, -139, 81, 68,
	121, 103, 108, 127, 153, 283, 312, 322, 306, -103,
	-104, 341, -36, -48, -97, -96, -4, -10, 27, 39,
	-38, -39, -40, 53, -58, -55, -52, -61, -442, 83,
	-411, -69, -72, -74, -446, 113, 126, 170, 275, -90,
	-91, 308, 310, -43, -42, 122, -147, -149, -101, -102,
	-140, -109, -110, -111, -112, -113, -114, -115, -116, -117,
	-118, -119, -120, -121, -122, -123, -124, -125, -126, -127,
	-128, -129, -130, -131, -132, -133, 344, 391, 40, 353,
	69, 116, 316, 21, -5, -6, -7, -8, -9, -11,
	-23, -51, -53, -54, -56, -57, -65, -59, -60, -410,
	-70, -71, -73, -75, -76, 307, -150, -148, 451, 404,
	-13, -18, -19, -14, -15, -17, -20, -16, -24, -29,
	-30, -26, -27, -25, -28, -31, -32, -33, -34, -21,
	-22, -12, 422, 430, -153, -151, -152, -154, 329, 412,
	367, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	454, -197, -202, -203, -204, -196, -172, -387, -390, 4,
	-385, -388, 132, 178, 245, 21, 22, 23, 24, 25,
	27, 37, 38, 39, 40, 43, 45, 46, 49, 50,
	51, 52, 53, 54, 57, 62, 67, 68, 69, 70,
	71, 76, 73, 74, 75, 78, 80, 81, 82, 85,
	86, 94, 95, 96, 97, 98, 99, 103, 106, 105,
	108, 111, 112, 113, 115, 117, 118, 121, 122, 125,
	123, 373, 375, 124, 126, 127, 128, 138, 139, 140,
	142, 143, 145, 147, 151, 152, 154, 158, 160, 161,
	162, 163, 169, 170, 172, 173, 179, 174, 180, 184,
	187, 186, 188, 189, 190, 181, 195, 199, 200, 201,
	203, 204, 207, 208, 209, 210, 213, 212, 215, 218,
	219, 222, 223, 226, 227, 229, 230, 233, 231, 234,
	232, 235, 238, 236, 237, 240, 241, 243, 242, 167,
	250, 251, 253, 254, 255, 270, 258, 259, 260, 263,
	266, 269, 271, 272, 273, 274, 275, 276, 278, 279,
	281, 283, 285, 287, 288, 289, 290, 291, 292, 294,
	295, 297, 298, 299, 300, 301, 306, 303, 304, 305,
	307, 308, 309, 310, 312, 314, 315, 316, 317, 319,
	321, 342, 343, 355, 322, 323, 324, 325, 326, 327,
	328, 332, 336, 333, 334, 335, 337, 330, 331, 338,
	339, 341, 344, 346, 348, 349, 352, 353, 354, 356,
	359, 360, 361, 357, 358, 351, 366, 364, 365, 368,
	369, 370, 371, 372, 374, 376, 385, 386, 388, 391,
	392, 393, 383, 395, 396, 399, 400, 401, 402, 403,
	408, 404, 406, 409, 410, 411, 417, 416, 423, 424,
	426, 427, 428, 32, 41, 42, 44, 47, 58, 59,
	60, 63, 100, 101, 120, 129, 130, 141, 155, 157,
	164, 165, 166, 185, 191, 193, 197, 216, 248, 249,
	264, 268, 280, 282, 293, 318, 347, 362, 378, 379,
	380, 381, 387, 389, 412, 413, 414, 418, 425, 256,
	-190, 2, -172, -172, 283, 26, 2, 26, 279, 331,
	369, 371, 2, 194, 2, -433, -239, 2, 26, -176,
	-172, 83, 153, 329, -190, 2, -433, -239, 24, 2,
	-172, 2, -177, 2, 322, -172, 454, 78, 223, 62,
	318, 338, -106, 386, -105, 378, 324, -107, -377, 2,
	238, -172, 454, 454, 454, 454, 2, 367, 273, 416,
	330, 405, 96, 290, 178, -428, 2, 4, -388, -385,
	-206, -205, 367, 96, -204, -196, 444, -203, 454, 454,
	454, 2, 200, 201, 289, 288, 338, 339, 454, 454,
	454, 2, 25, 56, 77, 80, 102, 128, 148, 151,
	261, -443, 230, 270, 287, 324, 337, 366, 376, 388,
	-447, 354, 57, 405, -454, 393, 111, -283, 96, 371,
	369, 223, 152, 400, 314, 156, 398, 106, 184, 403,
	402, 454, 454, 25, 56, 65, 80, 111, 128, 148,
	151, -445, 270, 287, 321, 324, 337, 366, 376, 393,
	388, 2, 416, 330, 367, 178, 96, 405, 314, 286,
	-79, 2, 451, 29, 341, -146, 367, 194, 2, -172,
	200, 201, 2, 454, 454, -428, 2, 200, 201, 2,
	57, 326, 454, 454, 454, 454, 454, 454, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 2, -134,
	338, 354, 162, 39, 62, 26, 67, 97, 154, 178,
	179, 208, 77, 78, -284, -336, -335, 368, 325, 331,
	364, 386, 83, 406, 315, 428, -436, 123, 4, 96,
	238, 340, 378, 223, 38, 71, 372, 373, -453, 2,
	367, -457, 2, 386, 386, 2, -457, 2, -457, 2,
	-175, 2, 386, 382, -458, 386, 425, 454, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, -148,
	-150, -149, 454, 454, 454, 454, 454, -134, 338, 2,
	62, 26, -461, 146, -234, -235, 397, 192, 119, 262,
	-147, -149, 2, -410, -375, 2, -310, -391, -312, 442,
	443, 437, 244, 429, -323, 102, 398, 256, -390, -313,
	-325, 120, 318, -253, 8, 9, 5, 6, 7, -179,
	-355, -319, -363, 390, 131, 247, -209, 456, 10, 451,
	-407, -149, -324, 33, 157, 55, -379, -208, -357, -365,
	-361, -362, -463, 45, 51, 50, 376, 237, 332, 333,
	348, 334, 335, 43, 408, 174, 253, 255, 186, 4,
	193, -207, -196, -404, -405, -385, -386, 185, 191, 187,
	347, 188, 189, 190, 42, 293, 142, 143, 141, 112,
	101, 100, 249, 47, 46, 44, 413, -366, 98, 378,
	379, 380, 381, 203, 204, -172, -387, 65, 88, 89,
	87, 92, 91, 93, 90, 340, 405, 56, 32, 164,
	165, 197, 248, 166, 63, -406, 358, 84, 150, 183,
	168, 196, 198, 202, 217, 220, 239, 246, 265, 267,
	313, 345, -464, 414, 129, 130, 268, 280, 362, 387,
	389, 155, 216, 58, 59, -412, 294, -413, -190, -412,
	454, 454, 455, 454, -228, -229, -230, 2, 26, 109,
	451, 2, -339, 2, 449, -343, -149, 211, -342, 451,
	-340, -197, 257, -408, 319, -404, -405, -179, -196, -208,
	4, -231, 451, 453, 96, 367, 66, 2, -278, 451,
	-172, 26, -146, 256, 382, 455, -321, 451, 256, 149,
	259, -172, 2, 2, 342, 2, 451, -106, 60, 386,
	-298, 2, -299, -169, -170, -171, -348, 199, 285, 292,
	431, 428, -375, -439, 149, 434, 382, -375, -254, 453,
	2, -343, 164, -197, 2, -194, -378, 4, -385, -388,
	-386, -389, 65, -387, 26, 28, 29, 30, 31, 33,
	34, 35, 36, 48, 55, 56, 61, 64, 66, 77,
	83, 87, 88, 90, 89, 91, 92, 93, 102, 104,
	107, 109, 110, 114, 116, 119, 131, 133, 146, 148,
	149, 153, 156, 159, 171, 182, 192, 194, 211, 214,
	221, 224, 225, 244, 247, 252, 256, 257, 261, 262,
	277, 284, 296, 311, 329, 340, 350, 363, 367, 377,
	382, 384, 390, 397, 398, 405, 407, 415, 419, 420,
	421, 422, -390, 2, -343, 164, 2, -199, 164, -343,
	-202, 2, -383, 164, -381, 10, -380, 5, 4, -385,
	-388, -386, 2, -181, -172, 2, -193, -378, 2, -212,
	164, -197, -198, -202, 382, 455, -245, -205, -206, -238,
	-172, 453, -310, 2, -95, 2, -310, 164, 2, -95,
	164, 2, -310, 164, 2, -95, 164, 2, 2, 2,
	388, 2, 80, 164, -172, 367, 95, 2, 305, -444,
	321, 392, 416, 2, 2, 2, 2, 2, 2, 2,
	367, 330, -455, 294, -186, 2, -172, 146, -383, 164,
	2, -383, 164, 2, -200, -202, -200, 178, 195, -181,
	164, 2, 371, 369, 371, 369, 149, 2, 194, 2,
	194, 2, -344, 2, -345, -197, 2, 2, 2, 2,
	2, 164, -172, 367, 95, 2, 210, 2, 2, 2,
	2, 2, 2, 2, 2, 2, -247, 164, 2, -197,
	-247, 164, 2, -247, 164, 2, -213, 164, 2, -212,
	-181, 164, 2, -384, 164, 2, -383, -384, 164, 2,
	-352, 2, -351, -380, 412, -79, 451, 338, 451, -383,
	-197, -197, -310, -95, 149, -310, -95, 146, 2, 96,
	367, -134, 2, 146, 407, 2, 8, 2, -383, 291,
	138, 2, 342, 2, 62, -284, 428, 149, 2, 2,
	-431, 2, 256, 149, 2, 149, 2, 149, 2, 149,
	2, 149, 2, 288, 339, 201, 385, 209, 124, 149,
	-268, 2, 422, 149, 2, 149, 2, 5, 2, 199,
	285, 355, 2, -197, -448, 2, 367, 416, 330, 2,
	2, 73, 74, 149, 2, 149, 428, 2, -262, -343,
	-297, -298, -297, 382, -177, -461, -234, -235, -134, 342,
	2, 2, -461, -261, -286, -287, 221, 133, 252, -267,
	26, 109, -267, -267, 49, 452, 452, 11, 12, 64,
	37, 442, 443, 444, 445, 144, 446, 447, 440, 441,
	439, 432, 433, 436, 205, 206, 79, 435, 434, 72,
	228, 320, 134, 135, 136, 137, 302, 175, 176, 177,
	14, 15, 16, 30, 261, 220, 429, 168, 345, 437,
	17, 18, 19, 196, 198, 246, 41, 171, -178, -214,
	-310, -310, -310, -310, -310, 267, 451, -259, -305, 449,
	-149, 451, 451, 451, 5, 451, 5, -374, 8, -149,
	-310, -323, 452, -251, 451, -149, -323, -318, 451, 318,
	449, 451, -326, -310, 453, -414, 423, -359, 451, 282,
	-358, 451, -358, -358, 417, -356, 451, 430, 424, 451,
	-356, 451, 451, 146, 451, 451, 451, 451, 451, 451,
	451, 451, 451, 451, 451, 451, 451, 417, 451, 451,
	451, 451, 451, 451, 451, 451, 451, 455, -412, -231,
	451, -255, -346, -310, 444, -255, -255, 256, -248, -310,
	84, -271, 202, 239, 150, 217, 313, 183, -374, -80,
	-66, -77, -85, -95, -108, -138, -139, -307, 456, -334,
	430, -149, -340, -196, -149, -342, 451, -339, -334, 444,
	-197, 451, 149, 451, 453, 149, -238, -378, -181, -197,
	-207, -208, 108, -248, -383, -428, -238, -176, 34, -320,
	-353, -354, -367, -355, -364, -360, -363, 298, 299, 297,
	301, 300, 45, 51, 50, 376, 237, 332, 333, 348,
	334, 335, 43, 408, 174, 253, 255, 186, 4, 44,
	413, -366, 193, 185, 191, 187, 347, 188, 189, 190,
	42, 293, 142, 143, 141, 112, 101, 100, 249, 47,
	46, 98, 378, 379, 380, 381, 203, 204, 414, 358,
	58, 59, -428, -238, 146, -377, -248, 34, -298, 2,
	-459, 455, 219, -216, 227, 243, 161, 257, 426, 250,
	-382, 5, 4, -319, -331, 102, 223, -363, 9, 443,
	-371, 8, 442, -376, -375, 86, 453, -378, -158, 303,
	-157, 23, 27, 113, 410, 125, -221, 180, 273, 120,
	351, 401, -435, -437, 323, 374, 375, 75, 250, 303,
	120, -264, -266, 34, 94, 241, 269, 52, 172, 232,
	233, 353, 418, 120, 303, 422, 120, -437, 303, -437,
	-160, 351, 401, -435, -437, 323, 303, -159, -221, 120,
	456, -383, -245, 455, 455, -378, 444, 120, 120, 120,
	120, 2, 2, 244, 2, 2, 2, 151, -447, -445,
	2, 2, 2, -197, 164, -199, 164, 2, -202, 416,
	-233, 256, -430, -246, 367, -197, -168, -409, 422, 244,
	244, 34, 451, 2, -183, 164, 2, -173, -172, 178,
	-409, 244, -344, -210, -197, -210, 341, -190, 34, -307,
	120, 2, 2, 2, -172, -161, 455, 54, 309, 120,
	-161, 120, -161, 120, -161, 455, 120, -161, 120, 455,
	120, 120, 452, 455, -352, -383, -144, 422, 149, 83,
	451, 451, -384, -430, -181, 2, -197, 2, 367, 203,
	-383, -383, -377, 26, 343, 2, 288, 339, 74, -197,
	-432, 146, -429, 314, -428, -197, 96, -197, 96, -197,
	96, -197, -197, 2, 2, 2, 146, 2, 385, 2,
	385, 2, -172, 68, -172, -172, 219, -197, 146, 367,
	178, 367, -161, 455, -177, -461, -261, -377, -461, -287,
	-286, -289, -310, 26, -292, 140, 240, -310, -312, -148,
	-148, -148, -236, -337, -310, 284, 178, -368, -353, -353,
	-195, -378, 378, -310, -310, -310, -310, -310, -310, -310,
	-310, -310, -310, -310, -310, -310, -310, -310, -310, -310,
	-310, -310, -310, -310, -310, -310, -310, -310, -310, -310,
	-310, -310, -310, -310, -310, -310, -310, -310, 220, 168,
	345, 41, 171, -310, 382, -310, -310, -310, -310, 236,
	244, 247, 390, 131, 399, 109, 250, -465, 363, 36,
	-316, -149, -252, 451, -330, 31, 350, 26, -323, 451,
	2, -305, -310, -306, -249, -248, -248, 452, 415, 26,
	109, 444, 2, 8, -279, -281, 427, 235, 99, 163,
	234, -280, 328, 452, 455, 34, 452, -310, -249, -322,
	-318, -248, -329, -328, 419, -378, 444, -415, 139, 156,
	8, -372, 8, -372, 378, 378, 8, -372, -372, 451,
	452, 2, 452, 2, 452, 2, 452, 2, 452, 2,
	-310, -310, -310, -310, -310, -310, -310, -248, -273, 2,
	-369, -248, 4, 427, 235, 99, 163, 234, 328, -273,
	2, -274, 2, -310, -248, -275, -311, -312, 442, 443,
	437, -323, -276, 2, -310, -249, -310, 48, 214, 384,
	-277, -310, 149, -248, -248, 2, -248, 2, -413, 34,
	-248, -241, 455, 149, 34, 4, -241, -241, 451, 452,
	455, -272, 160, 231, 226, -272, -339, -271, 202, -269,
	265, -269, -269, -426, 451, 450, 454, 454, 454, 454,
	454, -334, -182, 449, 457, -378, -333, -332, 34, -190,
	263, -334, -334, 453, 452, -333, -197, 451, -248, -378,
	356, 452, 453, 196, 196, 196, 319, 452, -144, 382,
	422, -79, 258, 452, 455, -240, 33, 449, -281, 451,
	-370, 417, 451, 451, 149, -239, -439, 452, 386, -299,
	-215, 292, 349, 304, 336, 365, 9, 8, 8, 455,
	-378, 455, -440, 77, 382, 66, -301, 164, 66, -392,
	-184, 77, -393, -172, 61, 398, 284, 148, -440, 77,
	-440, 77, 77, 341, 354, 49, -343, 37, 37, -95,
	215, 149, 428, 367, 178, 382, -343, -266, -353, 94,
	232, 233, 49, -373, -371, 443, -373, 49, -373, -373,
	-373, 422, -199, -343, 382, 274, -383, 382, 455, 37,
	37, -95, 215, 149, 382, -212, -182, -349, -348, -205,
	-172, 453, -310, -95, -310, -95, 120, 2, -455, 210,
	451, -231, 244, -265, -264, 244, -201, 2, -197, 149,
	-238, -350, 194, 455, -246, 274, 120, 120, 451, 117,
	290, 2, 256, 244, -183, 164, -164, 370, 120, -304,
	-303, 420, -293, -95, 451, 102, 34, -293, -256, -257,
	-347, -258, -184, 451, -190, -172, 2, -197, -247, -247,
	-247, -212, -213, -181, -383, -384, -384, -79, -351, 452,
	452, -143, 260, -142, -172, 5, -146, 407, -218, -302,
	-301, -394, -395, -392, 220, 178, 398, 195, 132, -232,
	-185, -184, -144, -348, -144, -349, -349, -197, 146, 2,
	2, -268, -238, -238, -181, -181, -181, 338, 146, 146,
	453, -268, 290, 96, 367, 273, 178, -197, -212, -197,
	-343, -461, -290, -371, 451, -291, 318, 319, 455, -156,
	35, 107, 207, -197, 428, 118, -310, -310, 382, -465,
	363, -316, 118, -310, 236, 247, 390, 131, 399, 109,
	250, 149, 451, -311, -311, 452, -250, -310, -310, 450,
	459, 452, -462, 455, -234, -310, -248, -248, 452, 452,
	382, 382, 382, 382, 451, 453, -248, -238, 450, 450,
	455, 452, -327, -328, 114, -310, 453, -420, 266, 451,
	451, 452, 452, 455, 452, 428, 428, 452, 452, 452,
	-310, 34, 455, 455, 455, 452, 455, 455, 455, 452,
	452, 149, 452, 452, -282, 277, 452, 11, 12, 442,
	443, 444, 445, 144, 446, 447, 440, 441, 439, 432,
	433, 434, 72, 228, 320, 14, 15, 16, 196, 171,
	-311, -311, -311, 452, -314, -315, 149, 146, 34, -277,
	-277, -277, 452, 149, -248, 452, 452, 451, 452, -304,
	-346, -243, 2, -339, -192, -378, -304, -304, -248, -310,
	202, 202, -270, 407, 256, -272, -339, -332, 452, -427,
	-374, -334, -333, -374, -309, -308, 147, 35, 107, 242,
	167, -190, -231, -333, -333, -378, -334, 452, -244, -341,
	-408, -462, 453, -378, -135, 5, 247, -135, -135, 149,
	-238, 24, 278, -353, 449, 450, 8, 8, 451, -372,
	-372, -238, 149, -375, -298, 396, 70, 292, 378, -375,
	-157, 303, -184, -184, -197, 244, -301, 164, -163, 244,
	-353, -191, -172, 451, 451, 207, 207, -184, -191, 164,
	-184, 164, -191, -191, -434, 292, 251, -310, 222, 290,
	245, -158, 303, -95, -95, -95, 451, -439, 407, 108,
	-197, -212, -201, 303, -207, -373, -373, -264, 303, -199,
	-383, 422, -181, -159, -95, -95, -95, 451, -182, -160,
	303, -141, 173, 444, -172, 416, -172, -217, -218, -172,
	-449, 424, 422, 120, 120, -231, -211, -197, 449, -144,
	-383, -197, -383, -383, -383, 2, 451, 2, -197, 120,
	256, 244, -165, 115, -460, 434, -181, -235, -234, -310,
	-263, -296, 311, 256, -232, 412, -190, -263, -242, 455,
	149, 434, 453, -232, 2, -161, -161, -161, -161, -161,
	-79, -144, 455, 451, 434, 434, 451, -383, -383, 452,
	455, -197, -183, 178, 178, -189, -173, 452, 455, 453,
	-144, -44, 422, 367, 338, 338, -172, -193, -181, -197,
	-194, -212, -291, -310, -337, -197, 456, -310, -310, 118,
	118, -310, -311, -311, -310, 118, 149, 451, -310, -320,
	30, 30, 452, 455, -306, -310, 452, 415, -462, -462,
	-462, 5, 235, 163, 234, -280, 234, -280, -280, 8,
	444, -378, 452, -318, 116, -310, 377, -378, 444, -421,
	-187, 451, -172, 420, -234, -372, -356, -356, 452, -368,
	-353, -310, -310, -310, -310, -310, -310, -314, -310, -368,
	-353, -311, -311, -311, -311, -311, -311, -311, -311, -311,
	-311, -311, -311, -311, -311, -311, -311, -311, -311, -311,
	109, 244, 250, -311, -315, -314, -310, -310, -353, 452,
	452, 452, -248, -79, -260, 156, -349, 455, -260, -260,
	452, -339, -339, 451, -310, 202, 450, 452, 455, -333,
	450, 455, 458, 434, -231, 453, -332, 452, 455, -295,
	34, 452, -378, -95, 259, 5, 8, 449, 450, 452,
	-372, 452, 452, -238, -310, 382, 382, 120, 244, 409,
	-396, -393, -310, -237, -338, -310, 451, 451, -155, 113,
	341, -441, 2, 120, -161, 120, -161, 426, 451, 451,
	382, -248, -310, -145, 102, -377, -437, -437, 382, 382,
	274, -248, 382, -144, 149, 2, 2, 2, 452, 34,
	254, -172, -197, -199, 34, -62, 422, -348, -374, -168,
	2, -285, 407, -182, -197, 120, -166, 213, -460, -381,
	-409, -288, -286, -263, -255, 245, 76, 452, -304, -257,
	-243, -310, 2, 452, -142, -143, -383, -383, -383, -144,
	-146, -146, -302, 2, 451, -183, -173, 451, -146, -185,
	2, 260, -197, -268, -223, -222, 273, 250, -223, 257,
	452, -156, -182, -310, -310, 118, 30, 30, -310, -310,
	-320, 452, -310, -310, -248, 450, 5, -310, 452, 452,
	452, 452, -310, 453, -422, -172, -310, 452, 452, 452,
	452, 455, 455, 452, 452, 452, 452, -315, 149, 109,
	250, 451, 452, 452, -317, 159, 49, -339, -317, -317,
	-270, -238, -339, -307, -374, -308, -182, 449, -378, -341,
	451, 453, 450, 2, 449, 452, -184, -184, -301, 120,
	-397, 77, -398, 64, 132, 83, 244, 247, 398, 284,
	61, 102, 296, 34, 452, 452, 455, -156, -237, -238,
	244, 360, 102, 244, 102, 95, 393, -184, -191, -238,
	-238, -197, 452, 455, 434, -201, -199, -383, 452, -182,
	-384, -219, 181, -95, 2, 451, -231, -265, -95, 260,
	450, 451, -172, 256, 451, -182, -167, 212, -460, -381,
	-164, -263, -294, 451, 256, -95, -235, 434, 452, 452,
	95, 95, -237, 451, 451, -238, 95, -45, -46, 178,
	77, 276, -194, 367, 178, -156, -310, -310, -310, 452,
	-462, -378, 444, -416, 273, 452, -310, -310, -311, 149,
	451, -320, -417, 421, -310, -248, -417, -417, 452, -334,
	-374, 2, 449, 2, -301, -191, -195, -188, -172, 132,
	164, 247, 207, 451, -311, -197, 451, 2, -451, 104,
	182, -300, -452, 82, 361, -338, 452, 452, 247, 247,
	-310, -353, -161, -161, 452, 452, 382, -377, 81, -375,
	382, -220, -221, 171, -450, 422, -217, -449, -63, -64,
	383, -348, -237, -197, -237, 256, -460, -381, -165, 110,
	-238, 77, -288, -316, -144, 451, 451, 452, -237, -237,
	452, 451, 455, 26, 451, 26, 451, -197, -212, 452,
	-235, 49, 452, 452, -311, -320, 452, -418, -419, -187,
	-333, 450, 2, -398, -188, 244, -310, -174, 451, -310,
	182, 105, 169, -219, 451, 296, -180, 64, 451, 451,
	451, 434, 149, 451, -449, 271, 95, 241, 452, 34,
	-64, 9, 452, -285, 452, -197, -381, -166, 402, 245,
	452, -191, -263, -384, -384, -300, 452, 452, -384, -46,
	-238, -238, -423, 290, 319, 158, -248, 452, 455, 34,
	120, 452, -399, 229, -172, 452, 105, 169, -220, -238,
	-197, -438, 407, -195, -225, -224, -222, -227, -226, -222,
	-248, -375, 81, 271, -248, -197, 95, -219, -95, -300,
	451, -300, 451, -167, 341, -303, 452, 452, -219, -300,
	452, 452, 452, 452, -424, -425, 41, 395, 86, -310,
	-424, -424, -419, -421, 132, -400, -403, -402, 256, 346,
	150, 272, 452, 360, 418, -451, 452, -231, -310, 452,
	455, 412, 452, 455, 412, 452, 149, 452, 451, -220,
	-450, -219, -237, -219, -237, -256, -144, -144, -220, -219,
	-144, -425, 281, 145, 318, 281, 145, -188, -402, 256,
	-403, 256, 402, 106, -399, -224, 171, -226, 149, 271,
	-238, -449, -220, 452, -220, 452, -304, -220, 30, -401,
	241, 309, 54, 341, -401, -400, 451, 451, 452, -456,
	420, -300, -456, -300, -425, 22, 247, 102, -451, -248,
	-248, -162, 54, 309, 2, -219, -219, 452, 452, -220,
	-220, -220, 382, -456, -456, 451, -248, 452, -220,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 24, 25, 352, 353,
	355, 356, 357, 359, 360, 362, 364, 366, 368, 369,
	371, 373, 374, 375, 376, 377, 379, 381, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 439,
	441, 0, 876, 878, 880, 882, 27, 28, 0, 0,
	177, 179, 181, 0, 206, 208, 210, 211, 213, -2,
	0, 306, 307, 309, 311, -2, -2, 0, 0, 428,
	430, 0, 0, 450, 451, 0, 966, -2, 444, 446,
	448, 511, 513, 515, 517, 519, 521, 523, 524, 526,
	528, 530, 532, 534, 536, 538, 540, 542, 544, 546,
	548, 550, 552, 554, 556, 558, -2, -2, -2, 0,
	-2, -2, -2, 894, 31, 33, 35, 37, 39, 41,
	60, 262, 263, 265, 267, 269, 272, 273, 275, 1005,
	313, 315, 317, 319, 321, 0, -2, 1019, 0, 0,
	43, 44, 45, 46, 47, 48, 49, 50, 67, 68,
	69, 70, 71, 72, 73, 74, 53, 55, 56, 62,
	63, 65, 0, 0, 981, 983, 985, 987, -2, 0,
	0, 7, 9, 11, 13, 15, 17, 19, 21, 23,
	354, 358, 361, 363, 365, 367, 370, 372, 378, 380,
	382, 771, 1611, 1625, 1626, 1627, 1630, 1631, 1632, 1633,
	1634, 1635, 1965, 2045, 2046, 1654, 1655, 1656, 1657, 1658,
	1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668,
	1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678,
	1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688,
	1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698,
	1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708,
	1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718,
	1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728,
	1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738,
	1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748,
	1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758,
	1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768,
	1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778,
	1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788,
	1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798,
	1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808,
	1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818,
	1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828,
	1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838,
	1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848,
	1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858,
	1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868,
	1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878,
	1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888,
	1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898,
	1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908,
	1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918,
	1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928,
	1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938,
	1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 0,
	406, 404, 1605, 407, 1800, 409, 411, 300, 301, 302,
	303, 304, 305, 0, 160, 0, 421, 415, 420, 422,
	424, 425, 426, 427, 401, 399, 0, 421, 1657, 419,
	874, 875, 869, 870, 1833, 904, 440, -2, -2, -2,
	1934, -2, 472, -2, 479, 1937, 1835, 482, 0, 484,
	-2, 487, 877, 879, 881, 29, 30, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, -2, -2, -2,
	-2, 0, 0, 1692, 1581, 1627, 1584, 1579, 178, 180,
	182, 183, 0, 0, 0, 0, 0, 0, 207, 209,
	212, 214, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 239, 0, 0, 0, 0, 0, 0, 0, 0,
	827, 0, 0, 0, 0, 0, 0, 0, 0, 694,
	695, 0, 0, 700, 822, 823, 844, 0, 0, 0,
	0, 308, 310, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 240,
	346, 347, 0, 1006, 0, 0, 0, 0, 158, 150,
	0, 0, 683, 429, 431, 0, 149, 0, 0, 873,
	0, 0, 445, 447, 449, 512, 514, 516, 518, 520,
	522, 525, 527, 529, 531, 533, 535, 537, 539, 541,
	543, 545, 547, 549, 551, 553, 555, 557, 559, 560,
	0, 0, 0, 0, -2, -2, 0, -2, -2, 0,
	0, 0, 0, 0, 0, 0, 0, -2, -2, -2,
	0, 0, 0, -2, -2, 0, 0, 0, 563, 565,
	566, 567, 0, 609, 612, 620, 665, 666, 0, 813,
	1007, 906, 884, 897, 906, 886, 887, 888, 889, 890,
	895, 896, 899, 0, 891, 892, 893, 32, 34, 36,
	38, 40, 42, 264, 266, 268, 270, 274, 276, -2,
	979, 980, 314, 316, 318, 320, 322, 432, 0, 434,
	0, 564, 970, 0, -2, 0, 1011, 1011, 1011, 0,
	0, 980, 978, 0, 437, 438, 491, 492, 1244, 0,
	0, 0, 0, 0, 1479, 1328, 0, 493, -2, 1359,
	1361, 1913, 1934, 1478, 1363, 1364, 1365, 1366, 1367, 0,
	0, 1370, 0, 1372, 1373, 1374, 1375, 0, 1377, 0,
	1381, 1382, 1383, 0, 1918, 1558, 1623, -2, 1149, 1150,
	1151, 1152, 1153, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1619, 0, 1450, 1397, -2, 1644, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1701,
	-2, -2, -2, -2, -2, -2, -2, 1205, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1948, 1401, 1402,
	1403, 1404, 1405, 1406, 1407, 1408, 1409, 0, 1902, 1919,
	1920, 1925, 1927, 1921, 1910, 1420, -2, 1949, 1950, 1951,
	1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961,
	1962, 1963, 1206, -2, 1914, 1915, 1930, 1931, 1936, 1941,
	1942, 1917, 1926, -2, -2, 997, 1808, 1000, 771, 998,
	982, 984, 0, 986, 0, 0, 0, 991, 1014, 1012,
	0, 1050, 995, 996, 1006, 1068, 1091, 0, 1073, 0,
	1091, 1117, 0, 1078, 1828, 1398, 1399, 0, 1627, 1624,
	-2, 0, 0, 0, 0, 0, 0, 203, 402, 0,
	408, 410, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 903, 442, 443, 0, 467, 0, 471, 1909, -2,
	-2, 475, 907, 911, 912, 913, 914, 0, 0, 0,
	0, 0, 481, 0, 0, 468, 469, 485, 488, 0,
	51, 0, 1919, 1117, 52, 0, 1595, 1649, 1650, 1651,
	1652, 1653, 1948, 1964, 1966, 1967, 1968, 1969, 1970, 1971,
	1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981,
	1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991,
	1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,
	2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011,
	2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021,
	2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031,
	2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041,
	2042, 2043, 2044, 54, 0, 1919, 57, 0, 1919, 0,
	-2, 61, 0, 1919, 161, 162, 1640, 1641, 1645, 1646,
	1647, 1648, 64, 0, 1601, 66, 0, 1598, 75, 0,
	1919, 0, 1578, -2, 0, 0, 675, 1575, 1580, 676,
	1585, 0, 184, 185, 186, 187, 188, 1919, 190, 191,
	0, 193, 194, 1919, 196, 197, 0, 199, 215, 216,
	0, 218, 0, 1919, 0, 0, 0, 224, -2, 241,
	0, 238, 0, 228, 229, 231, 232, 233, 234, 235,
	0, 0, 0, 828, 280, 278, 1606, 0, -2, 1919,
	816, 819, 1919, 821, 833, 1609, 0, -2, 0, 1004,
	1919, 921, 696, 697, 698, 699, 0, 299, 0, 934,
	0, 936, 0, 956, 1123, 1068, 242, 243, 244, 245,
	246, 1919, 0, 0, 0, 251, 0, 253, 254, 255,
	256, 257, 258, 259, 260, 261, 142, 1919, 325, 344,
	142, 1919, 328, 142, 1919, 331, 142, 1919, 334, 1573,
	142, 1919, 337, 338, 1919, 340, 163, 341, 1919, 343,
	0, -2, 395, 1613, -2, 349, 0, -2, 0, 175,
	0, 0, 681, 682, 0, 871, 872, 0, 452, 0,
	0, 561, 562, 0, 0, 572, 573, 574, 575, 1806,
	1716, 578, 0, 581, -2, 0, 0, 0, 585, 587,
	680, 589, 0, 0, 591, 0, 595, 0, 598, 0,
	600, 0, 602, -2, -2, -2, 0, 0, 0, 0,
	628, 629, 0, 0, 634, 0, 637, 638, 639, 0,
	641, 642, 643, 644, 0, 646, 647, -2, -2, 651,
	653, 0, 660, 0, 664, 0, 568, 569, 142, 1121,
	883, -2, 885, 0, 901, 973, -2, 0, 433, 0,
	436, 977, 971, 976, 1028, 1029, 0, 0, 0, 0,
	1009, 1010, 0, 0, 0, 968, 969, 0, 0, 0,
	0, 1484, 1485, 1486, 1487, 1488, 1489, 1492, 1493, 1490,
	1491, 1494, 1495, 0, 0, 0, 0, 0, 1496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1497, 1498, 1499, 0, 0, 1501, 0, 1503, 0, 0,
	0, 0, 0, 0, 1307, 1309, 1566, 0, 0, 1500,
	1249, 1250, 1251, 1286, 1287, 0, 0, 1360, 1563, 1562,
	1362, 0, 1515, 0, 1369, 0, 1241, 1376, 1592, -2,
	0, 1479, 1510, 0, 0, 1384, 1385, 1386, 0, 0,
	1515, 0, 0, 1557, 0, 1452, 0, 1185, 0, 1186,
	1187, 0, 1188, 1189, 1202, 1215, 0, 0, 0, 0,
	1219, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1207, 0, 0,
	0, 1538, -2, 0, 0, 0, 0, 0, 999, 0,
	0, 1054, 1567, 1571, 1572, 1054, 1054, 0, 0, 1516,
	1114, 1114, 0, 0, 1110, 1110, 1110, 1108, 1085, 0,
	383, 385, 387, 389, 390, 391, 393, 1091, 0, 1101,
	0, 1091, 1091, 0, -2, 1073, 0, 0, 1101, 1118,
	1119, 0, 0, 0, 0, 0, 0, 1628, 0, 0,
	0, 1615, 0, 0, 175, 0, 413, 423, 1006, 0,
	1518, 1140, 1134, 1143, 1144, 1145, 1146, 1192, 1193, 1194,
	1195, 1196, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161,
	1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, -2,
	1203, 1205, 1226, 1174, 1175, 1176, 1177, 1178, 1179, 1180,
	1181, 1182, 1183, 1184, 1198, 0, 1173, 1173, 1173, 1190,
	1191, 1214, 1225, 1217, 1225, 1221, 1141, 1142, 1208, 1209,
	1210, 1211, 0, 417, 0, 0, 0, 0, -2, 477,
	0, 909, 0, 915, 502, 503, 504, 917, 918, 0,
	480, 505, 506, 507, 508, 509, 510, 0, 788, 0,
	790, 1587, 0, 478, 495, 483, 0, 489, 76, 866,
	108, 0, 866, 866, 0, 0, 129, 0, 0, 0,
	0, 0, 0, 96, 104, 84, 85, 0, 0, 0,
	0, 58, 796, 0, 799, 0, 0, 0, 0, 0,
	0, 0, 811, 0, 0, 0, 0, 95, 0, 90,
	78, 0, 0, 0, 98, 106, 0, 133, 135, 0,
	0, 1104, 674, 0, 0, 1628, 1583, 0, 0, 0,
	0, 217, 219, 0, 221, 222, 223, 0, 827, 0,
	230, 227, 271, 771, 1919, 795, 1919, 793, 1610, 0,
	0, 0, 297, 292, 0, 294, 814, 0, 1003, 0,
	0, 0, 0, 834, 0, 1919, 839, 1597, 1636, 1637,
	923, 0, 1129, 0, 937, 0, 0, 1124, 0, 1126,
	0, 248, 249, 250, 0, 323, 0, 140, 141, 0,
	326, 0, 329, 0, 332, 0, 0, 335, 0, 0,
	0, 0, 1006, 0, 0, 0, 152, 0, 0, 0,
	0, 0, 175, 175, 1104, 454, 1104, 456, 0, 0,
	576, 577, 579, 580, 582, 583, -2, -2, 661, 631,
	588, 0, 668, 1824, 678, 590, 1692, 593, 1692, 596,
	1692, 599, 601, 604, 623, 611, 0, 615, 0, 617,
	0, 619, 631, 630, 632, 635, 640, 645, 0, 0,
	0, 0, 812, 0, 900, 974, 976, 435, 972, 1026,
	1027, 1032, 1036, 1037, 1040, 1043, 1044, 1034, 1244, 992,
	993, 994, 1020, 1021, 853, 0, 2045, 1245, 1135, 1246,
	1247, 1594, 0, 1252, 1253, 1254, 1255, 1256, 1257, 1258,
	1259, 1260, 1261, -2, -2, -2, -2, -2, -2, -2,
	-2, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278,
	1279, 1280, -2, -2, -2, 1284, 1285, -2, 1502, 1504,
	0, 1566, 0, -2, 0, -2, -2, -2, -2, 1304,
	0, 1306, 1311, 1313, 1315, 0, 0, 0, 0, 1565,
	1325, 1549, 1550, 0, 0, 1481, 1482, 1483, 1310, 0,
	1329, 1564, 1561, 0, 0, 1514, 1017, 1388, 0, 0,
	0, 0, 1395, 0, 1593, 1240, 1227, 1228, 1229, 1230,
	1231, 1232, 1242, 1380, 1512, 0, 1511, 0, 0, 0,
	1522, 0, 1556, 1552, 0, 1616, 1622, 1460, 0, 0,
	0, 0, 1590, 0, 0, 0, 0, 0, 0, 0,
	1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1432,
	0, 1525, -2, -2, -2, -2, -2, -2, -2, 0,
	1434, 0, 1436, 1516, 1535, 0, 0, 1330, 0, 0,
	0, 1479, 0, 1439, 1516, 1543, 0, 0, 0, 0,
	0, 1516, 0, 1548, 0, 1446, 0, 1448, 1001, 0,
	0, 1129, 0, 0, 0, 1570, 1129, 1129, 0, 1049,
	0, 0, 1111, 1112, 1113, 0, 0, 1114, 0, 1105,
	1109, 1106, 1107, 0, 0, 1091, 384, 386, 388, 392,
	394, 1101, 1065, 0, 0, 1596, 1071, 1100, 0, 771,
	1090, 1101, 1101, 0, -2, 1075, 0, 0, 1017, -2,
	176, 770, 0, 0, 0, 0, 403, 405, 0, 0,
	0, 397, 0, 400, 0, 1130, 1133, 0, 1147, 0,
	0, -2, 0, 0, 0, 0, 0, 470, 0, 908,
	916, 0, 499, 0, 501, 0, 789, 1589, 1588, 0,
	490, 0, 0, 0, 0, 865, 112, 1919, 0, 144,
	0, 0, 755, 1602, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 797, 798, 800,
	806, 808, 0, 802, 1591, 0, 803, 0, 805, 807,
	809, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 1577, 166, 1103, 1576,
	1586, 0, 189, 192, 195, 198, 0, 225, 0, 0,
	703, 686, 0, 791, 794, 0, 771, 826, 1608, 0,
	279, 175, 0, 0, 293, 0, 0, 0, 0, 0,
	0, 832, 0, 0, 0, 1919, 925, 931, 0, 1019,
	1128, 0, 954, 939, 0, 0, 0, 954, 958, 959,
	961, 962, 0, 0, 1125, 0, 252, 345, 142, 142,
	142, 1574, 142, 142, 164, 339, 342, 348, 396, 1006,
	175, 173, 1787, 171, 168, 170, 0, 0, 0, 704,
	706, 707, 708, 709, 0, 1637, 0, 1745, 1637, 0,
	942, 944, 147, 175, 291, 453, 458, 570, 0, 606,
	625, 584, 679, 677, 592, 594, 597, 614, 0, 0,
	0, 627, 0, 0, 0, 0, 0, 662, 663, 667,
	1122, 975, 0, 1038, 0, 1035, 1041, 1042, 0, 1023,
	851, 852, 0, 0, 0, 0, -2, -2, 0, 0,
	0, 1326, 0, -2, 1305, 1308, 1312, 1314, 1316, 0,
	0, 0, 0, 0, 0, 1505, 0, 1507, 1327, 1559,
	1562, 1477, 0, 0, 1016, 1017, 1017, 1017, 1394, 0,
	0, 0, 0, 0, 0, 0, 1513, 0, 1520, 1521,
	0, 1387, 0, 1553, 0, 0, 0, 1396, 0, 0,
	0, 1197, 1171, 0, 1225, 1223, 1224, 1218, 1225, 1222,
	0, 0, 0, 0, 0, 1415, 0, 0, 0, 1419,
	1431, 0, 1433, 1435, 0, 0, 1437, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1333, 1334, 1335, 1438, 1541, 1542, 0, 0, 0, 0,
	0, 0, 1444, 0, 1547, 1445, 1447, 1006, 1051, 1046,
	1568, 1104, 1053, 1055, 1569, 1599, 1046, 1046, 0, 1517,
	0, 0, 1095, 0, 0, 0, 1097, 0, 1086, 0,
	1088, 1101, 1070, 0, 0, 1063, 0, 1059, 1060, 1061,
	1062, 771, 1099, 1072, 1076, 1616, 0, 1120, 0, 1080,
	1083, 0, 0, 1629, 200, 204, 205, 201, 202, 0,
	412, 0, 0, 1519, 0, 1136, 0, 0, 0, 0,
	0, 416, 0, 466, -2, 497, 498, 500, 0, 496,
	109, 866, 0, 0, 857, 0, 114, 1919, 123, 0,
	732, 0, 1600, 0, 0, 0, 0, 868, 0, 1919,
	142, 1919, 142, 125, 128, 0, 132, 130, 0, 0,
	723, 77, 866, 80, 82, 88, 0, 0, 0, 94,
	0, 0, 859, 0, 801, 804, 810, 59, 0, 861,
	855, 0, 854, 134, 81, 83, 89, 0, 863, 79,
	0, 175, 0, 1582, 0, 0, 0, 0, 702, -2,
	0, 0, 0, 0, 0, 0, 285, 281, 0, 290,
	296, 295, 817, -2, 820, 829, 0, 831, 843, 0,
	0, 0, 927, 931, 0, 930, 1004, 1031, 1018, 1127,
	932, 954, 0, 0, 0, 941, 938, 935, 1129, 0,
	0, 0, 0, 0, 247, 324, 327, 330, 333, 336,
	350, 151, 0, 0, 0, 0, 0, 175, 0, 0,
	0, 0, 0, 1637, 1637, 0, 1604, 0, 0, 0,
	148, 455, 0, 0, 616, 618, 631, 654, 655, 718,
	0, 718, 0, 0, 1022, 853, 0, 1248, 1289, 0,
	0, -2, 0, 0, 1293, 0, 0, 0, -2, 0,
	0, 0, 1506, 1508, 0, 1561, 1389, 0, 0, 0,
	0, 1371, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 0,
	1378, 1379, 1480, 1523, 1551, 1555, 0, 1617, 1621, 1458,
	1459, 1463, 1607, 0, 0, 0, 1216, 1220, 1400, 0,
	0, 0, 0, 0, 0, 0, 1524, 1534, 1536, 1331,
	1332, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344,
	1345, -2, -2, -2, 1349, 1350, 1351, -2, -2, -2,
	0, 0, 0, 1537, 1539, 1540, 1544, 1545, 0, 1441,
	1442, 1443, 1546, 0, 1048, 0, 1052, 0, 1048, 1048,
	1013, 1093, 0, 0, 1116, 0, 1068, 1087, 0, 1077,
	1066, 0, 1067, 0, 1098, 0, 1074, 1079, 0, 1082,
	0, 1389, -2, 159, 414, 398, 0, 0, 1138, 1148,
	0, 1200, 1204, 418, 1102, 0, 0, 0, 0, 143,
	730, 754, 0, 0, 846, 853, 0, 0, 116, 0,
	0, 0, 124, 0, 121, 0, 127, 131, 0, 0,
	0, 0, 91, 92, 93, 0, 97, 99, 0, 0,
	0, 0, 0, 145, 0, 220, 825, 226, 712, 0,
	687, 0, 771, 795, 0, 277, 0, 284, 0, 815,
	830, 0, 0, 0, 0, 0, 929, 931, 0, 922,
	923, 954, 1030, 933, 952, -2, 951, 0, 1019, 960,
	957, 963, 964, 0, 172, 0, 167, 169, 0, 154,
	0, 0, 705, 710, 0, 0, 0, 0, 0, 943,
	945, 0, 571, 626, 656, 717, 0, 0, 658, 1033,
	1039, 1024, 853, 1291, 1295, 0, 0, 0, 1297, -2,
	0, 1319, -2, -2, 1509, 1560, 1368, 1017, 1390, 1392,
	1393, 1243, 1554, 0, 1465, 1462, 0, 1449, 1172, 1410,
	1411, 0, 0, 1414, 1416, 1417, 1418, 1533, 0, 0,
	0, 0, 1440, 1002, 1454, 0, 0, 1056, 1454, 1454,
	1094, 0, 1096, 1091, 1089, 1064, 1057, 0, 1617, 1081,
	0, 0, 1131, 1137, 0, 1199, 110, 111, 113, 0,
	731, 0, 734, 0, 0, 0, 0, 741, 742, 0,
	0, 0, 0, 0, 760, 769, 0, 848, 0, 0,
	0, 118, 137, 0, 0, 867, 0, 142, 142, 0,
	0, 858, 0, 0, 0, 860, 862, 856, 0, 864,
	165, 720, 0, 691, 688, 703, 686, 792, 824, 0,
	282, 0, 842, 0, 0, 0, 919, 931, 0, 924,
	925, 298, 0, 0, 0, 940, 1031, 0, 174, 175,
	0, 0, 0, 0, 0, 0, 0, 457, 459, 0,
	0, 465, 716, 0, 0, 1025, 1299, -2, -2, 1320,
	0, 1618, 1620, 1019, 0, 1451, 0, 0, -2, 0,
	0, 0, 988, 0, 1047, 1045, 989, 990, 1115, 1101,
	0, 1084, 0, 1139, 115, 0, 735, 736, 1603, 738,
	0, 740, 743, 0, 745, 1639, 0, 749, 756, 761,
	0, 712, 0, 766, 767, 847, 758, 0, 117, 119,
	136, 850, 120, 126, 0, 0, 0, 0, 1686, 101,
	0, 686, 719, 0, 689, 0, 0, 0, 283, 286,
	0, 289, 0, 843, 0, 0, 0, 926, 927, 0,
	0, 0, 954, 965, 153, 0, 0, 769, 0, 0,
	753, 0, 0, 461, 0, 463, 0, 657, 659, 1391,
	1469, 0, 1412, 1413, -2, 0, 1357, 1453, 1455, 0,
	1069, 1058, 1132, 733, 737, 0, 0, 775, 0, 0,
	0, 764, 765, 720, 0, 0, 139, 0, 0, 0,
	0, 0, 0, 0, 684, 0, 692, 0, 712, 0,
	287, 288, 769, 0, 769, 0, 928, 929, 0, 947,
	948, 950, 955, 0, 0, 712, 769, 752, 0, 460,
	0, 0, 0, 0, 0, 0, 1464, 1358, 0, 0,
	0, 744, 780, 0, 0, 0, 762, 763, 760, 0,
	771, 122, 0, 849, 0, 724, 0, 0, 727, 0,
	0, 102, 1686, 100, 0, 0, 693, 720, 691, 712,
	0, 712, 0, 920, 0, 949, 175, 175, 720, 712,
	175, 462, 464, 1461, 1466, 1470, -2, 1882, 1689, 0,
	1467, 1468, 1456, 1457, 0, 746, 776, 777, 0, 772,
	773, 774, 1638, 747, 748, 757, 768, 775, 138, 721,
	0, 0, 722, 0, 0, 105, 0, 107, 0, 686,
	690, 720, 0, 720, 0, 1129, 155, 156, 750, 720,
	157, 0, 1472, 1473, 1474, 1475, 1476, 739, 778, 0,
	779, 0, 0, 0, 780, 725, 0, 728, 0, 103,
	0, 685, 840, 769, 840, 769, 946, 751, 0, 781,
	0, 784, 785, 0, 782, 760, 0, 0, 715, 835,
	0, 712, 837, 712, 1471, 783, 786, 787, 759, 0,
	0, 711, 713, 714, 841, 720, 720, 720, 0, 840,
	840, 726, 0, 836, 838, 0, 0, 720, 729,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 440, 3, 446, 441, 3,
	451, 452, 444, 442, 455, 443, 453, 445, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 459, 3,
	432, 434, 433, 436, 456, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 449, 3, 450, 447, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 457, 439, 458, 437,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 435,
	57775, 438, 57776, 448, 57777, 454, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1053
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1058
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1062
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1063
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1064
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1065
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1066
		{
			return helpWith(sqllex, "GRANT")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1067
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1068
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1069
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1070
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1074
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1083
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1084
		{
			return helpWith(sqllex, "ALTER")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1087
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1088
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1089
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1090
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1091
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1092
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1145
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1146
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1157
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1172
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1176
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1180
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1191
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1203
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 66:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1222
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1254
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1258
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1262
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1268
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1272
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1278
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1288
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1294
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1304
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1314
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1325
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1332
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1344
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1351
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1359
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1364
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1368
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1373
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1379
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1387
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 97:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1396
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1408
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 99:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1416
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 100:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1427
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1431
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1435
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 103:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1439
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1445
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1450
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1461
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1465
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1471
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1475
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1482
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1487
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1492
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1497
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1502
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1507
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1512
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1517
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1522
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1526
		{
			return unimplementedWithIssue(sqllex, 28751)
		}
	case 120:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1529
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1538
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1550
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1560
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1567
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1570
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1577
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1586
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1595
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1600
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1607
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1615
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1616
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1620
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1624
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1630
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1638
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1642
		{
			sqlVAL.union.val = nil
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1648
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1652
		{
			sqlVAL.union.val = nil
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1659
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1663
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 142:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1667
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1673
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 144:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1677
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 145:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1703
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1706
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 147:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1729
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1733
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1736
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1740
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 151:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1777
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1782
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1786
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1792
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1797
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1802
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1807
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1811
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1827
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1830
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1834
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1838
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1846
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1850
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1856
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1860
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1866
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1870
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1874
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1878
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1884
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1888
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1894
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 174:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1898
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 175:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1902
		{
			sqlVAL.union.val = nil
		}
	case 176:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1908
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1921
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1922
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1923
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1924
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1934
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1942
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1944
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1947
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1957
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1966
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1974
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1976
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1980
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1983
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1993
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2002
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2010
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2012
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2016
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2019
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2023
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2027
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2031
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2046
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2052
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2057
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2069
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2070
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2072
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2073
		{
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2074
		{
			return helpWith(sqllex, "CREATE")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2077
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2078
		{
			return unimplemented(sqllex, "create cast")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2079
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2080
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2081
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2082
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2083
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2084
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2085
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2086
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2087
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2088
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 227:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2089
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2090
		{
			return unimplemented(sqllex, "create operator")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2091
		{
			return unimplemented(sqllex, "create publication")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2092
		{
			return unimplemented(sqllex, "create rule")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2093
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2094
		{
			return unimplemented(sqllex, "create server")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2095
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2096
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2097
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2100
		{
		}
	case 237:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2101
		{
		}
	case 238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2104
		{
		}
	case 239:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2105
		{
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2108
		{
		}
	case 241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2109
		{
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2112
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2113
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2114
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2115
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2116
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2117
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 248:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2118
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 249:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2119
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2120
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2121
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2122
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2123
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2124
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2125
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2126
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2127
		{
			return unimplemented(sqllex, "drop server")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2128
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2129
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2130
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2131
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2135
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2136
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2137
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2138
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2140
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2141
		{
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2142
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2143
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 277:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2153
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2161
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2165
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 280:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2169
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2175
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2179
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2188
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2195
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2201
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2207
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2211
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2222
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().Value)
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2234
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2242
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2250
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2260
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2264
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2270
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2274
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2281
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 297:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2285
		{

			sqlVAL.union.val = nil
		}
	case 298:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2299
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2309
		{
			return helpWith(sqllex, "DELETE")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2316
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2319
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2320
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2321
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2322
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2323
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2332
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2333
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2334
		{
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2335
		{
			return helpWith(sqllex, "DROP")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2338
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2339
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2340
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2341
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2342
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2350
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2354
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2357
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2365
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2369
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2372
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2380
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2384
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2387
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2395
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2403
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2410
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2418
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2426
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2433
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2441
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2445
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2448
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2456
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2460
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2463
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2467
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2472
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2495
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2498
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2500
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2504
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2508
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2515
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2519
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2522
		{
			return helpWith(sqllex, "DELETE")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2524
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2525
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2526
		{
			return helpWith(sqllex, "INSERT")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2527
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2529
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2530
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2533
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2538
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2539
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2540
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2545
		{
			return helpWith(sqllex, "DELETE")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2546
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2547
		{
			return helpWith(sqllex, "INSERT")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2549
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2553
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2554
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2558
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2562
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 397:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2572
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2580
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2588
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2592
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2596
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2606
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2613
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2621
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2625
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 406:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2629
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2639
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2643
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2647
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2651
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2654
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2674
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2678
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2682
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2685
		{
			return helpWith(sqllex, "GRANT")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2705
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2709
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2713
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2716
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2721
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2725
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2735
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2739
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2753
		{
			return helpWith(sqllex, "RESET")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2754
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2762
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2766
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2769
		{
			return helpWith(sqllex, "RESET")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2777
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2780
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2791
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2794
		{
			return helpWith(sqllex, "USE")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2798
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2799
		{
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2800
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2801
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2805
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2806
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2807
		{
			return helpWith(sqllex, "USE")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2823
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2838
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2841
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2859
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2867
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2871
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2875
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2881
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2885
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2891
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2895
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2899
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2903
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2907
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2918
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2921
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2931
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2947
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2951
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2956
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2973
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2976
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2978
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2981
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2985
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3004
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3011
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3017
		{
			return unimplemented(sqllex, "set from current")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3018
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3026
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3031
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3038
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3042
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3048
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3052
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3059
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3080
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3084
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3090
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3094
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3098
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3102
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3106
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3112
		{
			sqlVAL.union.val = tree.Low
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3116
		{
			sqlVAL.union.val = tree.Normal
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3120
		{
			sqlVAL.union.val = tree.High
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3131
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3135
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3139
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3144
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3148
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3161
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3162
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3163
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3164
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3165
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3166
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3168
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3169
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3170
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3171
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3172
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3173
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3174
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3175
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3176
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3177
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3178
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3179
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3180
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3181
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3182
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3183
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3184
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3186
		{
			return helpWith(sqllex, "SHOW")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3193
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3194
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3195
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3206
		{
			sqlVAL.str = "client_encoding"
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3209
		{
			sqlVAL.str = "timezone"
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3210
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3224
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3228
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3232
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3243
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3251
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3259
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3266
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3274
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3281
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3291
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3295
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3298
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3300
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3303
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3311
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3314
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3322
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3325
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3338
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3346
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3354
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3357
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 592:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3359
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3363
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3367
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3370
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3372
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3376
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3379
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 599:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3387
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3390
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3392
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3395
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3403
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3406
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3408
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3411
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3415
		{
			sqlVAL.union.val = true
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3417
		{
			sqlVAL.union.val = true
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3419
		{
			sqlVAL.union.val = false
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3427
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: sqlDollar[2].union.bool()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3430
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3433
		{
			sqlVAL.union.val = true
		}
	case 613:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3434
		{
			sqlVAL.union.val = false
		}
	case 614:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3443
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3446
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 616:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3448
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3451
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3453
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3457
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3460
		{
			sqlVAL.union.val = true
		}
	case 621:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3461
		{
			sqlVAL.union.val = false
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3469
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3472
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 624:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3474
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3477
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 626:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3485
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3495
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3505
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3508
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3511
		{
			sqlVAL.union.val = true
		}
	case 631:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3512
		{
			sqlVAL.union.val = false
		}
	case 632:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3519
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3523
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3526
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3533
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3537
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3540
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3547
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3551
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3559
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3564
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3569
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3573
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3581
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3585
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3589
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3602
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3605
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3613
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3616
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3620
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3624
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3628
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3636
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3644
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3651
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3658
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3662
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3673
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3678
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3681
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3689
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3696
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3701
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3821
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3825
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3829
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3868
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3872
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3877
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3881
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3890
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3897
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 680:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3901
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3913
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3922
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3925
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 684:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3961
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
			}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:3974
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
			}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3988
		{
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3989
		{
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3990
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 689:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3994
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[8].union.slct(),
				AsColumnNames: sqlDollar[5].union.nameList(),
			}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:4006
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[11].union.slct(),
				AsColumnNames: sqlDollar[8].union.nameList(),
			}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4019
		{
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4020
		{
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4021
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4035
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4036
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4037
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4038
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4039
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4040
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4041
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 701:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4042
		{
		}
	case 703:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4047
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4053
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4057
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4063
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4069
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4072
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4076
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4085
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4092
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4097
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4102
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4108
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4115
		{
			sqlVAL.str = ""
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4122
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4128
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4135
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4142
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4148
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4152
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 726:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4158
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4168
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4172
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 729:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4178
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4192
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4203
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4207
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4213
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4217
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4221
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4225
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4229
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4233
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4237
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4255
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4259
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4263
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4267
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4271
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4275
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4279
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4289
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4293
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4297
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 750:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4304
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4314
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4326
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4336
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4348
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4353
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 756:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4359
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4365
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4376
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4386
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4398
		{
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4399
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4400
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4401
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4402
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4403
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 768:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4420
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4424
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4430
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4434
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4454
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4458
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4462
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4466
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4475
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4479
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4483
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4487
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4491
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4497
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4503
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4511
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4515
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4519
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4523
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4527
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4533
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4537
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4543
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 791:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4562
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4567
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4571
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 795:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4575
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4578
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4579
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4582
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4583
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4585
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4586
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4587
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4590
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4592
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4594
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4596
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4597
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4599
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4600
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4602
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4604
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4612
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4615
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 814:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4623
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4627
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4630
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4634
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 818:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4638
		{
			sqlVAL.union.val = nil
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4648
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4652
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4655
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4660
		{
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4661
		{
		}
	case 824:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4669
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4677
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 826:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4678
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 827:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4681
		{
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4682
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 829:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4688
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 830:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4690
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 831:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4692
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 832:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4694
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 833:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4696
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 834:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4698
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 835:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4714
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4728
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4743
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4757
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4771
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 840:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4774
		{
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4775
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4779
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4794
		{
			sqlVAL.union.val = false
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4800
		{
			sqlVAL.union.val = true
		}
	case 845:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4804
		{
			sqlVAL.union.val = false
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4810
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4814
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4823
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4834
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 850:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4835
		{
			sqlVAL.str = ""
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4839
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4843
		{
			sqlVAL.union.val = tree.Descending
		}
	case 853:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4847
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 854:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4853
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4860
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4864
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4870
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4876
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4884
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4890
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4898
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4904
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4912
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4916
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4921
		{
		}
	case 866:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4922
		{
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4925
		{
		}
	case 868:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4926
		{
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4934
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4937
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4947
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4956
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4959
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4967
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4970
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4974
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4975
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4976
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4992
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4995
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4997
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5000
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5010
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5013
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5015
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5018
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5022
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5027
		{
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5028
		{
		}
	case 894:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5029
		{
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5037
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5044
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5047
		{
		}
	case 898:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5048
		{
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5052
		{
			sqlVAL.str = ""
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5056
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5060
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 902:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5064
		{
			sqlVAL.str = ""
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5070
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5074
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5080
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5084
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5090
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5094
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5107
		{
		}
	case 910:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5109
		{
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5113
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5118
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5122
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5126
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5132
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5138
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5144
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5148
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 919:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5158
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5168
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5178
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5182
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 923:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5186
		{
			sqlVAL.str = ""
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5192
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 925:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5196
		{
			sqlVAL.str = ""
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5202
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 927:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5206
		{
			sqlVAL.str = ""
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5212
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 929:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5216
		{
			sqlVAL.str = ""
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5221
		{
		}
	case 931:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5222
		{
		}
	case 932:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5234
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 933:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5241
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5248
		{
			return helpWith(sqllex, "INSERT")
		}
	case 935:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5259
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5266
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 937:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5270
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5279
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5286
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5290
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5294
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5300
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5304
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5324
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 946:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5328
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5332
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5338
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 949:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5341
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5342
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 951:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5344
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5350
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 953:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5355
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 954:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5359
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 955:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5376
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5387
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5391
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 958:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5392
		{
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5396
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5400
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5413
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5416
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 965:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5420
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5463
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5469
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5473
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5488
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5492
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5496
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5500
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5504
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5508
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5513
		{
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5514
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5519
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 982:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5554
		{
			return helpWith(sqllex, "SELECT")
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5555
		{
			return helpWith(sqllex, "VALUES")
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5556
		{
			return helpWith(sqllex, "TABLE")
		}
	case 988:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5578
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5591
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5605
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5617
		{
			return helpWith(sqllex, "SELECT")
		}
	case 992:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5621
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5630
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5639
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5654
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5661
		{
			return helpWith(sqllex, "TABLE")
		}
	case 997:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5673
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5677
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5681
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5685
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5689
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5695
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5703
		{
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5704
		{
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5708
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5712
		{
			sqlVAL.union.val = nil
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5717
		{
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5718
		{
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5722
		{
			sqlVAL.union.val = true
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5726
		{
			sqlVAL.union.val = false
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5730
		{
			sqlVAL.union.val = false
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5736
		{
			sqlVAL.union.val = true
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5742
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5747
		{
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5748
		{
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5751
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5752
		{
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5756
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5760
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5766
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5772
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5776
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5782
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5786
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5791
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5806
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5815
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5826
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5830
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5839
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5845
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5852
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5859
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5868
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5872
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5876
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5882
		{
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5883
		{
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5886
		{
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5887
		{
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5904
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5908
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5914
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5918
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5937
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5940
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5942
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5954
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5957
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5959
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5965
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5969
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5975
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5979
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5984
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5989
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5995
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6000
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6007
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6012
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6023
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6027
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6031
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6039
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6070
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6084
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6094
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6102
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6111
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6115
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6119
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6130
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6154
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6160
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6164
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6170
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6172
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6176
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6182
		{
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6184
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6187
		{
			sqlVAL.union.val = nil
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6188
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6189
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6193
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6197
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6203
		{
			sqlVAL.union.val = true
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6207
		{
			sqlVAL.union.val = false
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6227
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6231
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6235
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6239
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6243
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6247
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6253
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6257
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6264
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6270
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6277
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6283
		{
			sqlVAL.str = tree.AstFull
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6287
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6291
		{
			sqlVAL.str = tree.AstRight
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6295
		{
			sqlVAL.str = tree.AstInner
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6301
		{
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6302
		{
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6323
		{
			sqlVAL.str = tree.AstHash
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6327
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6331
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6335
		{
			sqlVAL.str = ""
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6348
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6352
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6357
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6358
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6359
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6360
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6364
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6369
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6383
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6387
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6393
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6401
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6411
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6418
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6430
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6443
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6451
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6452
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6460
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6466
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6473
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6474
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6476
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6484
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6485
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6496
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6497
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6514
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6518
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6522
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6526
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6530
		{
			sqlVAL.union.val = types.String
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6534
		{
			sqlVAL.union.val = types.Name
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6538
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6547
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6551
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6555
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6559
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6563
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6567
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6571
		{
			sqlVAL.union.val = types.INet
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6575
		{
			sqlVAL.union.val = types.Oid
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6579
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6583
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6587
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6618
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6626
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6634
		{
			sqlVAL.union.val = nil
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6641
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6645
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6649
		{
			sqlVAL.union.val = types.Int2
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6653
		{
			sqlVAL.union.val = types.Int2
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6657
		{
			sqlVAL.union.val = types.Int4
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6661
		{
			sqlVAL.union.val = types.Int
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6665
		{
			sqlVAL.union.val = types.Int
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6669
		{
			sqlVAL.union.val = types.Int
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6673
		{
			sqlVAL.union.val = types.Float4
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6677
		{
			sqlVAL.union.val = types.Float4
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6681
		{
			sqlVAL.union.val = types.Float
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6685
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6689
		{
			sqlVAL.union.val = types.Float
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6693
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6701
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6709
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6717
		{
			sqlVAL.union.val = types.Bool
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6721
		{
			sqlVAL.union.val = types.Bool
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6728
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6732
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6736
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6740
		{
			sqlVAL.union.val = types.RegType
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6744
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6750
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6763
		{
			sqlVAL.union.val = types.Float
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6769
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6775
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6783
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6787
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6791
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6797
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6809
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6815
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6819
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6823
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6827
		{
			sqlVAL.union.val = types.String
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6836
		{
			sqlVAL.union.val = true
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6837
		{
			sqlVAL.union.val = false
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6842
		{
			sqlVAL.union.val = types.Date
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6846
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = types.Time
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6851
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = types.MakeTime(prec)
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6858
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6859
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6861
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6869
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6881
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6885
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6894
		{
			sqlVAL.union.val = true
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6895
		{
			sqlVAL.union.val = false
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6896
		{
			sqlVAL.union.val = false
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6900
		{
			sqlVAL.union.val = types.Interval
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6906
		{
			sqlVAL.union.val = tree.Year
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6910
		{
			sqlVAL.union.val = tree.Month
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6914
		{
			sqlVAL.union.val = tree.Day
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6918
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6922
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6926
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6932
		{
			sqlVAL.union.val = tree.Month
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6936
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6940
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6944
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6948
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6952
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6956
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6963
		{
			sqlVAL.union.val = nil
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6969
		{
			sqlVAL.union.val = tree.Second
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6972
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6996
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7000
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7004
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7007
		{
			return unimplementedWithIssue(sqllex, 32005)
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7016
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7021
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7025
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7029
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7033
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7037
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7041
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7045
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7049
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7053
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7057
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7061
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7065
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7069
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7073
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7077
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7081
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7085
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7089
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7093
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7097
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7101
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7105
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7109
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7113
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7117
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7121
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7125
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7129
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7133
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7137
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7141
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7145
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7149
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7153
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7157
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7161
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7165
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7169
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7173
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7177
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7181
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7185
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7189
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7193
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7197
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7201
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7205
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7209
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7213
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7217
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7221
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7225
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7229
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7233
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7237
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7241
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7245
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7249
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7253
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7257
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7260
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7262
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7266
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7270
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7274
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7278
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7282
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7286
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7290
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7294
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7298
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7302
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7306
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7310
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7314
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7318
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7322
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7326
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7343
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7348
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7360
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7364
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7368
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7372
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7376
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7380
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7384
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7388
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7392
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7396
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7400
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7404
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7408
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7412
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7416
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7420
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7424
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7428
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7432
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7436
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7440
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7444
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7448
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7452
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7456
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7460
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7464
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7468
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7482
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7490
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7526
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7530
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7534
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7538
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7542
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7547
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7549
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7553
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7556
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7558
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7562
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7566
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7570
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7574
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7583
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7590
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7594
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7598
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7603
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7607
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7611
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7615
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7619
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7622
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7626
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7630
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7633
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7634
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7636
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7640
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7644
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7647
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7658
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7665
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7674
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7675
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7679
		{
			return unimplementedWithIssue(sqllex, 32563)
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7681
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7685
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7691
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7695
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7699
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7703
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7709
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7713
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7717
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7721
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7725
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7729
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7733
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7737
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7741
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7745
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7749
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7753
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7757
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7764
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7767
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7769
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7772
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7774
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7777
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7779
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7782
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7784
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7787
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7789
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7792
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7794
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7797
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7799
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7802
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7804
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7808
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7811
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7812
		{
			return unimplemented(sqllex, "treat")
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7814
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7818
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7822
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7826
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7830
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7833
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7835
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7838
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7843
		{
			return unimplemented(sqllex, "within group")
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7844
		{
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7848
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7852
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7859
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7863
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7869
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7873
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7879
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7887
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7891
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7895
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7902
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7922
		{
			sqlVAL.str = ""
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7928
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7932
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7943
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7950
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7957
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7964
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7970
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7983
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8011
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8015
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8019
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8023
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8030
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8046
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8050
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8057
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8069
		{
			sqlVAL.union.val = tree.Any
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8073
		{
			sqlVAL.union.val = tree.Some
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8077
		{
			sqlVAL.union.val = tree.All
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8082
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8083
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8084
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8085
		{
			sqlVAL.union.val = tree.Div
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8086
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8087
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8088
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8089
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8090
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8091
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8092
		{
			sqlVAL.union.val = tree.LT
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8093
		{
			sqlVAL.union.val = tree.GT
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8094
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8095
		{
			sqlVAL.union.val = tree.LE
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8096
		{
			sqlVAL.union.val = tree.GE
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8097
		{
			sqlVAL.union.val = tree.NE
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8101
		{
			sqlVAL.union.val = tree.Like
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8102
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8103
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8104
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8127
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8131
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8137
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8141
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8145
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8156
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8160
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8166
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8170
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8177
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8183
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8187
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8193
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8197
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8203
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8207
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8213
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8217
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8223
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8227
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8249
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8253
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8257
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8263
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8270
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8274
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8291
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8295
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8299
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8303
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8307
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8313
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8319
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8325
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8329
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8333
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8339
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8351
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8358
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8362
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8368
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8374
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8378
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8385
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8391
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8395
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8402
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8408
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8412
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8417
		{
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8418
		{
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8422
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8426
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8432
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8441
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8445
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8449
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8457
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8461
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8467
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8471
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8490
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8498
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8521
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8530
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8534
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8538
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8542
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8548
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8552
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8560
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8564
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8573
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8584
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8593
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8601
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8698
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8705
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8709
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8713
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8727
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8731
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8735
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8748
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8766
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8779
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1629:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8786
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8811
		{
			sqlVAL.str = ""
		}
	case 1638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8817
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8821
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
