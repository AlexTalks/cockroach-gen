// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/geo/geopb"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/cockroachdb/errors"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}
func purposelyUnimplemented(sqllex sqlLexer, feature string, reason string) int {
	sqllex.(*lexer).PurposelyUnimplemented(feature, reason)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:72

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) shardedIndexDef() *tree.ShardedIndexDef {
	return u.val.(*tree.ShardedIndexDef)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) likeTableOption() tree.LikeTableOption {
	return u.val.(tree.LikeTableOption)
}
func (u *sqlSymUnion) likeTableOptionList() []tree.LikeTableOption {
	return u.val.([]tree.LikeTableOption)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) storageParam() tree.StorageParam {
	return u.val.(tree.StorageParam)
}
func (u *sqlSymUnion) storageParams() []tree.StorageParam {
	if params, ok := u.val.([]tree.StorageParam); ok {
		return params
	}
	return nil
}
func (u *sqlSymUnion) persistenceType() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) lockingClause() tree.LockingClause {
	return u.val.(tree.LockingClause)
}
func (u *sqlSymUnion) lockingItem() *tree.LockingItem {
	return u.val.(*tree.LockingItem)
}
func (u *sqlSymUnion) lockingStrength() tree.LockingStrength {
	return u.val.(tree.LockingStrength)
}
func (u *sqlSymUnion) lockingWaitPolicy() tree.LockingWaitPolicy {
	return u.val.(tree.LockingWaitPolicy)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) windowFrameExclusion() tree.WindowFrameExclusion {
	return u.val.(tree.WindowFrameExclusion)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) nullsOrder() tree.NullsOrder {
	return u.val.(tree.NullsOrder)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) createTableOnCommitSetting() tree.CreateTableOnCommitSetting {
	return u.val.(tree.CreateTableOnCommitSetting)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) intervalTypeMetadata() types.IntervalTypeMetadata {
	return u.val.(types.IntervalTypeMetadata)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func (u *sqlSymUnion) geoFigure() geopb.Shape {
	return u.val.(geopb.Shape)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:641
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ALWAYS = lex.ALWAYS
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const AND_AND = lex.AND_AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTHORIZATION = lex.AUTHORIZATION
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BUCKET_COUNT = lex.BUCKET_COUNT
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BUNDLE = lex.BUNDLE
const BY = lex.BY
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLOSE = lex.CLOSE
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMENTS = lex.COMMENTS
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const COMPLETE = lex.COMPLETE
const CONCAT = lex.CONCAT
const CONCURRENTLY = lex.CONCURRENTLY
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CREATEROLE = lex.CREATEROLE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEFAULTS = lex.DEFAULTS
const DEALLOCATE = lex.DEALLOCATE
const DECLARE = lex.DECLARE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXCLUDE = lex.EXCLUDE
const EXCLUDING = lex.EXCLUDING
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GENERATED = lex.GENERATED
const GEOGRAPHY = lex.GEOGRAPHY
const GEOMETRY = lex.GEOMETRY
const GEOMETRYCOLLECTION = lex.GEOMETRYCOLLECTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IDENTITY = lex.IDENTITY
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCLUDE = lex.INCLUDE
const INCLUDING = lex.INCLUDING
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LAST = lex.LAST
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LINESTRING = lex.LINESTRING
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOCKED = lex.LOCKED
const LOGIN = lex.LOGIN
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const MULTILINESTRING = lex.MULTILINESTRING
const MULTIPOINT = lex.MULTIPOINT
const MULTIPOLYGON = lex.MULTIPOLYGON
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NOCREATEROLE = lex.NOCREATEROLE
const NOLOGIN = lex.NOLOGIN
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NONE = lex.NONE
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NOWAIT = lex.NOWAIT
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OTHERS = lex.OTHERS
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POINT = lex.POINT
const POLYGON = lex.POLYGON
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRESERVE = lex.PRESERVE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLIC = lex.PUBLIC
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REINDEX = lex.REINDEX
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHARE = lex.SHARE
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SKIP = lex.SKIP
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORAGE = lex.STORAGE
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIES = lex.TIES
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const UNTIL = lex.UNTIL
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ALWAYS",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"AND_AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTHORIZATION",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BUCKET_COUNT",
	"BOOLEAN",
	"BOTH",
	"BUNDLE",
	"BY",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"COMPLETE",
	"CONCAT",
	"CONCURRENTLY",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CREATEROLE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFAULTS",
	"DEALLOCATE",
	"DECLARE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GENERATED",
	"GEOGRAPHY",
	"GEOMETRY",
	"GEOMETRYCOLLECTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IDENTITY",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LAST",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LINESTRING",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCKED",
	"LOGIN",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"MULTILINESTRING",
	"MULTIPOINT",
	"MULTIPOLYGON",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NOCREATEROLE",
	"NOLOGIN",
	"NO_INDEX_JOIN",
	"NONE",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NOWAIT",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OTHERS",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POINT",
	"POLYGON",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRESERVE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLIC",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REINDEX",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SKIP",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORAGE",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIES",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"UNTIL",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"CONTAINED_BY",
	"'?'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"'@'",
	"','",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:10402

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 27,
	-2, 1132,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 73,
	195, 959,
	207, 959,
	222, 250,
	315, 250,
	324, 757,
	352, 250,
	361, 757,
	397, 757,
	421, 250,
	446, 757,
	-2, 0,
	-1, 78,
	222, 254,
	-2, 0,
	-1, 79,
	114, 1132,
	201, 1132,
	431, 1132,
	432, 1132,
	-2, 0,
	-1, 91,
	127, 1106,
	144, 1106,
	157, 1106,
	204, 1106,
	234, 1106,
	276, 1106,
	286, 1106,
	426, 1106,
	-2, 1077,
	-1, 123,
	134, 666,
	221, 666,
	318, 646,
	366, 646,
	414, 666,
	-2, 0,
	-1, 124,
	4, 1134,
	21, 1134,
	22, 1134,
	23, 1134,
	24, 1134,
	25, 1134,
	27, 1134,
	28, 1134,
	34, 1134,
	39, 1134,
	40, 1134,
	41, 1134,
	42, 1134,
	43, 1134,
	44, 1134,
	45, 1134,
	47, 1134,
	48, 1134,
	49, 1134,
	51, 1134,
	52, 1134,
	53, 1134,
	54, 1134,
	55, 1134,
	58, 1134,
	59, 1134,
	60, 1134,
	61, 1134,
	63, 1134,
	64, 1134,
	65, 1134,
	69, 1134,
	70, 1134,
	71, 1134,
	72, 1134,
	73, 1134,
	74, 1134,
	75, 1134,
	78, 1134,
	79, 1134,
	80, 1134,
	81, 1134,
	83, 1134,
	85, 1134,
	86, 1134,
	87, 1134,
	89, 1134,
	91, 1134,
	92, 1134,
	100, 1134,
	101, 1134,
	102, 1134,
	103, 1134,
	105, 1134,
	106, 1134,
	107, 1134,
	109, 1134,
	110, 1134,
	111, 1134,
	113, 1134,
	114, 1134,
	116, 1134,
	119, 1134,
	120, 1134,
	121, 1134,
	123, 1134,
	125, 1134,
	126, 1134,
	128, 1134,
	129, 1134,
	130, 1134,
	131, 1134,
	132, 1134,
	133, 1134,
	134, 1134,
	135, 1134,
	136, 1134,
	137, 1134,
	138, 1134,
	139, 1134,
	140, 1134,
	141, 1134,
	143, 1134,
	149, 1134,
	150, 1134,
	151, 1134,
	152, 1134,
	156, 1134,
	158, 1134,
	162, 1134,
	163, 1134,
	164, 1134,
	165, 1134,
	166, 1134,
	167, 1134,
	169, 1134,
	170, 1134,
	172, 1134,
	173, 1134,
	175, 1134,
	176, 1134,
	177, 1134,
	178, 1134,
	179, 1134,
	180, 1134,
	181, 1134,
	182, 1134,
	183, 1134,
	185, 1134,
	186, 1134,
	188, 1134,
	189, 1134,
	190, 1134,
	191, 1134,
	195, 1134,
	196, 1134,
	197, 1134,
	198, 1134,
	201, 1134,
	202, 1134,
	203, 1134,
	205, 1134,
	207, 1134,
	209, 1134,
	211, 1134,
	212, 1134,
	213, 1134,
	215, 1134,
	219, 1134,
	220, 1134,
	221, 1134,
	222, 1134,
	223, 1134,
	225, 1134,
	226, 1134,
	228, 1134,
	229, 1134,
	231, 1134,
	232, 1134,
	235, 1134,
	236, 1134,
	237, 1134,
	240, 1134,
	241, 1134,
	242, 1134,
	243, 1134,
	245, 1134,
	246, 1134,
	247, 1134,
	248, 1134,
	249, 1134,
	250, 1134,
	251, 1134,
	252, 1134,
	253, 1134,
	254, 1134,
	255, 1134,
	257, 1134,
	259, 1134,
	260, 1134,
	261, 1134,
	262, 1134,
	263, 1134,
	265, 1134,
	267, 1134,
	269, 1134,
	271, 1134,
	272, 1134,
	273, 1134,
	274, 1134,
	275, 1134,
	278, 1134,
	281, 1134,
	282, 1134,
	283, 1134,
	284, 1134,
	287, 1134,
	288, 1134,
	289, 1134,
	291, 1134,
	293, 1134,
	294, 1134,
	295, 1134,
	296, 1134,
	297, 1134,
	298, 1134,
	299, 1134,
	300, 1134,
	301, 1134,
	302, 1134,
	304, 1134,
	305, 1134,
	306, 1134,
	307, 1134,
	308, 1134,
	309, 1134,
	310, 1134,
	311, 1134,
	312, 1134,
	314, 1134,
	316, 1134,
	317, 1134,
	318, 1134,
	319, 1134,
	320, 1134,
	321, 1134,
	322, 1134,
	323, 1134,
	324, 1134,
	325, 1134,
	332, 1134,
	334, 1134,
	335, 1134,
	336, 1134,
	337, 1134,
	338, 1134,
	339, 1134,
	340, 1134,
	341, 1134,
	343, 1134,
	345, 1134,
	346, 1134,
	347, 1134,
	348, 1134,
	349, 1134,
	350, 1134,
	352, 1134,
	353, 1134,
	354, 1134,
	355, 1134,
	356, 1134,
	357, 1134,
	358, 1134,
	359, 1134,
	361, 1134,
	362, 1134,
	363, 1134,
	364, 1134,
	365, 1134,
	366, 1134,
	368, 1134,
	369, 1134,
	370, 1134,
	371, 1134,
	372, 1134,
	374, 1134,
	375, 1134,
	376, 1134,
	378, 1134,
	380, 1134,
	381, 1134,
	382, 1134,
	383, 1134,
	384, 1134,
	385, 1134,
	386, 1134,
	387, 1134,
	388, 1134,
	389, 1134,
	390, 1134,
	391, 1134,
	392, 1134,
	394, 1134,
	395, 1134,
	396, 1134,
	398, 1134,
	399, 1134,
	400, 1134,
	401, 1134,
	402, 1134,
	403, 1134,
	404, 1134,
	406, 1134,
	407, 1134,
	408, 1134,
	409, 1134,
	410, 1134,
	412, 1134,
	414, 1134,
	415, 1134,
	416, 1134,
	417, 1134,
	418, 1134,
	420, 1134,
	421, 1134,
	422, 1134,
	424, 1134,
	425, 1134,
	428, 1134,
	429, 1134,
	430, 1134,
	431, 1134,
	432, 1134,
	433, 1134,
	434, 1134,
	436, 1134,
	439, 1134,
	440, 1134,
	441, 1134,
	442, 1134,
	443, 1134,
	444, 1134,
	446, 1134,
	447, 1134,
	448, 1134,
	453, 1134,
	454, 1134,
	455, 1134,
	456, 1134,
	457, 1134,
	458, 1134,
	-2, 0,
	-1, 125,
	1, 1011,
	211, 1011,
	314, 1011,
	322, 1011,
	461, 1011,
	484, 1011,
	-2, 0,
	-1, 127,
	1, 1011,
	484, 1011,
	-2, 0,
	-1, 128,
	1, 1011,
	484, 1011,
	-2, 0,
	-1, 129,
	1, 1011,
	411, 1011,
	484, 1011,
	-2, 0,
	-1, 154,
	127, 1105,
	144, 1105,
	157, 1105,
	204, 1105,
	234, 1105,
	276, 1105,
	286, 1105,
	426, 1105,
	-2, 1080,
	-1, 187,
	4, 1141,
	5, 1141,
	6, 1141,
	7, 1141,
	8, 1141,
	9, 1141,
	10, 1141,
	21, 1141,
	22, 1141,
	23, 1141,
	24, 1141,
	25, 1141,
	27, 1141,
	28, 1141,
	34, 1141,
	35, 1141,
	39, 1141,
	40, 1141,
	41, 1141,
	42, 1141,
	43, 1141,
	44, 1141,
	45, 1141,
	47, 1141,
	48, 1141,
	49, 1141,
	51, 1141,
	52, 1141,
	53, 1141,
	54, 1141,
	55, 1141,
	56, 1141,
	57, 1141,
	58, 1141,
	59, 1141,
	60, 1141,
	61, 1141,
	63, 1141,
	64, 1141,
	65, 1141,
	67, 1141,
	69, 1141,
	70, 1141,
	71, 1141,
	72, 1141,
	73, 1141,
	74, 1141,
	75, 1141,
	78, 1141,
	79, 1141,
	80, 1141,
	81, 1141,
	83, 1141,
	85, 1141,
	86, 1141,
	87, 1141,
	89, 1141,
	90, 1141,
	91, 1141,
	92, 1141,
	93, 1141,
	94, 1141,
	95, 1141,
	96, 1141,
	97, 1141,
	98, 1141,
	99, 1141,
	100, 1141,
	101, 1141,
	102, 1141,
	103, 1141,
	104, 1141,
	105, 1141,
	106, 1141,
	107, 1141,
	108, 1141,
	109, 1141,
	110, 1141,
	111, 1141,
	113, 1141,
	114, 1141,
	116, 1141,
	119, 1141,
	120, 1141,
	121, 1141,
	123, 1141,
	125, 1141,
	126, 1141,
	128, 1141,
	129, 1141,
	130, 1141,
	131, 1141,
	132, 1141,
	133, 1141,
	134, 1141,
	135, 1141,
	136, 1141,
	137, 1141,
	138, 1141,
	139, 1141,
	140, 1141,
	141, 1141,
	142, 1141,
	143, 1141,
	149, 1141,
	150, 1141,
	151, 1141,
	152, 1141,
	156, 1141,
	158, 1141,
	161, 1141,
	162, 1141,
	163, 1141,
	164, 1141,
	165, 1141,
	166, 1141,
	167, 1141,
	169, 1141,
	170, 1141,
	172, 1141,
	173, 1141,
	175, 1141,
	176, 1141,
	177, 1141,
	178, 1141,
	179, 1141,
	180, 1141,
	181, 1141,
	182, 1141,
	183, 1141,
	184, 1141,
	185, 1141,
	186, 1141,
	188, 1141,
	189, 1141,
	190, 1141,
	191, 1141,
	195, 1141,
	196, 1141,
	197, 1141,
	198, 1141,
	200, 1141,
	201, 1141,
	202, 1141,
	203, 1141,
	205, 1141,
	207, 1141,
	208, 1141,
	209, 1141,
	210, 1141,
	211, 1141,
	212, 1141,
	213, 1141,
	214, 1141,
	215, 1141,
	219, 1141,
	220, 1141,
	221, 1141,
	222, 1141,
	223, 1141,
	225, 1141,
	226, 1141,
	228, 1141,
	229, 1141,
	230, 1141,
	231, 1141,
	232, 1141,
	233, 1141,
	235, 1141,
	236, 1141,
	237, 1141,
	238, 1141,
	239, 1141,
	240, 1141,
	241, 1141,
	242, 1141,
	243, 1141,
	245, 1141,
	246, 1141,
	247, 1141,
	248, 1141,
	249, 1141,
	250, 1141,
	251, 1141,
	252, 1141,
	253, 1141,
	254, 1141,
	255, 1141,
	257, 1141,
	258, 1141,
	259, 1141,
	260, 1141,
	261, 1141,
	262, 1141,
	263, 1141,
	264, 1141,
	265, 1141,
	266, 1141,
	267, 1141,
	268, 1141,
	269, 1141,
	270, 1141,
	271, 1141,
	272, 1141,
	273, 1141,
	274, 1141,
	275, 1141,
	278, 1141,
	282, 1141,
	283, 1141,
	284, 1141,
	287, 1141,
	288, 1141,
	289, 1141,
	290, 1141,
	291, 1141,
	292, 1141,
	293, 1141,
	294, 1141,
	295, 1141,
	296, 1141,
	297, 1141,
	298, 1141,
	299, 1141,
	300, 1141,
	301, 1141,
	302, 1141,
	304, 1141,
	305, 1141,
	306, 1141,
	307, 1141,
	308, 1141,
	309, 1141,
	310, 1141,
	311, 1141,
	312, 1141,
	314, 1141,
	316, 1141,
	317, 1141,
	318, 1141,
	319, 1141,
	320, 1141,
	321, 1141,
	322, 1141,
	323, 1141,
	324, 1141,
	325, 1141,
	332, 1141,
	334, 1141,
	335, 1141,
	336, 1141,
	337, 1141,
	338, 1141,
	339, 1141,
	340, 1141,
	341, 1141,
	343, 1141,
	344, 1141,
	345, 1141,
	346, 1141,
	347, 1141,
	348, 1141,
	349, 1141,
	350, 1141,
	352, 1141,
	353, 1141,
	354, 1141,
	355, 1141,
	356, 1141,
	357, 1141,
	358, 1141,
	359, 1141,
	361, 1141,
	362, 1141,
	363, 1141,
	364, 1141,
	365, 1141,
	366, 1141,
	367, 1141,
	368, 1141,
	369, 1141,
	370, 1141,
	371, 1141,
	372, 1141,
	373, 1141,
	374, 1141,
	375, 1141,
	376, 1141,
	378, 1141,
	380, 1141,
	381, 1141,
	382, 1141,
	383, 1141,
	384, 1141,
	385, 1141,
	386, 1141,
	387, 1141,
	388, 1141,
	389, 1141,
	390, 1141,
	391, 1141,
	392, 1141,
	394, 1141,
	395, 1141,
	396, 1141,
	398, 1141,
	399, 1141,
	400, 1141,
	401, 1141,
	402, 1141,
	403, 1141,
	404, 1141,
	406, 1141,
	407, 1141,
	408, 1141,
	409, 1141,
	410, 1141,
	412, 1141,
	414, 1141,
	415, 1141,
	416, 1141,
	417, 1141,
	418, 1141,
	419, 1141,
	420, 1141,
	421, 1141,
	422, 1141,
	424, 1141,
	425, 1141,
	427, 1141,
	428, 1141,
	429, 1141,
	430, 1141,
	431, 1141,
	432, 1141,
	433, 1141,
	434, 1141,
	435, 1141,
	436, 1141,
	439, 1141,
	440, 1141,
	441, 1141,
	442, 1141,
	443, 1141,
	444, 1141,
	446, 1141,
	447, 1141,
	448, 1141,
	453, 1141,
	454, 1141,
	455, 1141,
	456, 1141,
	457, 1141,
	458, 1141,
	459, 1141,
	465, 1141,
	472, 1141,
	473, 1141,
	474, 1141,
	481, 1141,
	485, 1141,
	-2, 0,
	-1, 566,
	160, 1839,
	411, 1839,
	464, 1839,
	483, 1839,
	-2, 0,
	-1, 567,
	160, 1918,
	411, 1918,
	464, 1918,
	483, 1918,
	-2, 0,
	-1, 568,
	160, 1827,
	411, 1827,
	464, 1827,
	483, 1827,
	-2, 0,
	-1, 570,
	160, 2007,
	411, 2007,
	464, 2007,
	483, 2007,
	-2, 0,
	-1, 572,
	160, 2036,
	411, 2036,
	464, 2036,
	483, 2036,
	-2, 0,
	-1, 579,
	160, 1933,
	411, 1933,
	464, 1933,
	483, 1933,
	-2, 504,
	-1, 607,
	483, 1783,
	486, 1783,
	-2, 719,
	-1, 608,
	483, 1785,
	486, 1785,
	-2, 720,
	-1, 609,
	483, 1784,
	486, 1784,
	-2, 721,
	-1, 610,
	486, 1718,
	-2, 722,
	-1, 652,
	446, 935,
	-2, 758,
	-1, 691,
	4, 957,
	21, 957,
	22, 957,
	23, 957,
	24, 957,
	25, 957,
	27, 957,
	28, 957,
	34, 957,
	39, 957,
	40, 957,
	41, 957,
	42, 957,
	43, 957,
	44, 957,
	45, 957,
	47, 957,
	48, 957,
	49, 957,
	51, 957,
	52, 957,
	53, 957,
	54, 957,
	55, 957,
	58, 957,
	59, 957,
	60, 957,
	61, 957,
	63, 957,
	64, 957,
	65, 957,
	69, 957,
	70, 957,
	71, 957,
	72, 957,
	73, 957,
	74, 957,
	75, 957,
	78, 957,
	79, 957,
	80, 957,
	81, 957,
	83, 957,
	85, 957,
	86, 957,
	87, 957,
	89, 957,
	91, 957,
	92, 957,
	100, 957,
	101, 957,
	102, 957,
	103, 957,
	105, 957,
	106, 957,
	107, 957,
	109, 957,
	110, 957,
	111, 957,
	113, 957,
	114, 957,
	116, 957,
	119, 957,
	120, 957,
	121, 957,
	123, 957,
	125, 957,
	126, 957,
	128, 957,
	129, 957,
	130, 957,
	131, 957,
	132, 957,
	133, 957,
	134, 957,
	135, 957,
	136, 957,
	137, 957,
	138, 957,
	139, 957,
	140, 957,
	141, 957,
	143, 957,
	149, 957,
	150, 957,
	151, 957,
	152, 957,
	156, 957,
	158, 957,
	162, 957,
	163, 957,
	164, 957,
	165, 957,
	166, 957,
	167, 957,
	169, 957,
	170, 957,
	172, 957,
	173, 957,
	175, 957,
	176, 957,
	177, 957,
	178, 957,
	179, 957,
	180, 957,
	181, 957,
	182, 957,
	183, 957,
	185, 957,
	186, 957,
	188, 957,
	189, 957,
	190, 957,
	191, 957,
	195, 957,
	196, 957,
	197, 957,
	198, 957,
	201, 957,
	202, 957,
	203, 957,
	205, 957,
	207, 957,
	209, 957,
	211, 957,
	212, 957,
	213, 957,
	215, 957,
	219, 957,
	220, 957,
	221, 957,
	222, 957,
	223, 957,
	225, 957,
	226, 957,
	228, 957,
	229, 957,
	231, 957,
	232, 957,
	235, 957,
	236, 957,
	237, 957,
	240, 957,
	241, 957,
	242, 957,
	243, 957,
	245, 957,
	246, 957,
	247, 957,
	248, 957,
	249, 957,
	250, 957,
	251, 957,
	252, 957,
	253, 957,
	254, 957,
	255, 957,
	257, 957,
	259, 957,
	260, 957,
	261, 957,
	262, 957,
	263, 957,
	265, 957,
	267, 957,
	269, 957,
	271, 957,
	272, 957,
	273, 957,
	274, 957,
	275, 957,
	278, 957,
	282, 957,
	283, 957,
	284, 957,
	287, 957,
	288, 957,
	289, 957,
	291, 957,
	293, 957,
	294, 957,
	295, 957,
	296, 957,
	297, 957,
	298, 957,
	299, 957,
	300, 957,
	301, 957,
	302, 957,
	304, 957,
	305, 957,
	306, 957,
	307, 957,
	308, 957,
	309, 957,
	310, 957,
	311, 957,
	312, 957,
	314, 957,
	316, 957,
	317, 957,
	318, 957,
	319, 957,
	320, 957,
	321, 957,
	322, 957,
	323, 957,
	324, 957,
	325, 957,
	332, 957,
	334, 957,
	335, 957,
	336, 957,
	337, 957,
	338, 957,
	339, 957,
	340, 957,
	341, 957,
	343, 957,
	345, 957,
	346, 957,
	347, 957,
	348, 957,
	349, 957,
	350, 957,
	352, 957,
	353, 957,
	354, 957,
	355, 957,
	356, 957,
	357, 957,
	358, 957,
	359, 957,
	361, 957,
	362, 957,
	363, 957,
	364, 957,
	365, 957,
	366, 957,
	368, 957,
	369, 957,
	370, 957,
	371, 957,
	372, 957,
	374, 957,
	375, 957,
	376, 957,
	378, 957,
	380, 957,
	381, 957,
	382, 957,
	383, 957,
	384, 957,
	385, 957,
	386, 957,
	387, 957,
	388, 957,
	389, 957,
	390, 957,
	391, 957,
	392, 957,
	394, 957,
	395, 957,
	396, 957,
	398, 957,
	399, 957,
	400, 957,
	401, 957,
	402, 957,
	403, 957,
	404, 957,
	406, 957,
	407, 957,
	408, 957,
	409, 957,
	410, 957,
	412, 957,
	414, 957,
	415, 957,
	416, 957,
	417, 957,
	418, 957,
	420, 957,
	421, 957,
	422, 957,
	424, 957,
	425, 957,
	428, 957,
	429, 957,
	430, 957,
	431, 957,
	432, 957,
	433, 957,
	434, 957,
	436, 957,
	439, 957,
	440, 957,
	441, 957,
	442, 957,
	443, 957,
	444, 957,
	446, 957,
	447, 957,
	448, 957,
	453, 957,
	454, 957,
	455, 957,
	456, 957,
	457, 957,
	458, 957,
	-2, 0,
	-1, 755,
	318, 647,
	366, 647,
	-2, 0,
	-1, 756,
	318, 646,
	366, 646,
	-2, 594,
	-1, 760,
	1, 676,
	480, 676,
	482, 676,
	484, 676,
	-2, 0,
	-1, 761,
	1, 718,
	157, 718,
	480, 718,
	482, 718,
	484, 718,
	-2, 0,
	-1, 769,
	1, 650,
	480, 650,
	482, 650,
	484, 650,
	-2, 0,
	-1, 772,
	1, 676,
	480, 676,
	482, 676,
	484, 676,
	-2, 0,
	-1, 773,
	1, 678,
	480, 678,
	482, 678,
	484, 678,
	-2, 0,
	-1, 774,
	1, 681,
	480, 681,
	482, 681,
	484, 681,
	-2, 0,
	-1, 779,
	1, 697,
	480, 697,
	482, 697,
	484, 697,
	-2, 0,
	-1, 780,
	1, 699,
	480, 699,
	482, 699,
	484, 699,
	-2, 0,
	-1, 823,
	144, 1143,
	157, 1143,
	234, 1143,
	276, 1143,
	-2, 1084,
	-1, 836,
	144, 1142,
	157, 1142,
	234, 1142,
	276, 1142,
	-2, 1081,
	-1, 860,
	483, 1782,
	-2, 512,
	-1, 888,
	5, 1774,
	481, 1772,
	-2, 1763,
	-1, 896,
	5, 1795,
	481, 1792,
	-2, 1783,
	-1, 897,
	5, 1796,
	481, 1793,
	-2, 1784,
	-1, 905,
	483, 1780,
	-2, 1762,
	-1, 906,
	481, 2114,
	-2, 1781,
	-1, 929,
	481, 2113,
	-2, 1797,
	-1, 930,
	5, 1304,
	-2, 2084,
	-1, 931,
	5, 1305,
	-2, 2085,
	-1, 932,
	5, 1306,
	-2, 2099,
	-1, 933,
	5, 1307,
	-2, 2064,
	-1, 934,
	5, 1308,
	-2, 2097,
	-1, 935,
	5, 1316,
	-2, 2076,
	-1, 936,
	5, 1303,
	-2, 2072,
	-1, 937,
	5, 1303,
	-2, 2071,
	-1, 938,
	5, 1303,
	-2, 2090,
	-1, 939,
	5, 1314,
	-2, 2066,
	-1, 940,
	5, 1319,
	-2, 2065,
	-1, 941,
	5, 1321,
	-2, 2109,
	-1, 944,
	5, 1343,
	-2, 2102,
	-1, 945,
	5, 1335,
	-2, 2103,
	-1, 946,
	5, 1343,
	-2, 2104,
	-1, 947,
	5, 1339,
	-2, 2105,
	-1, 948,
	5, 1290,
	-2, 2077,
	-1, 949,
	5, 1291,
	-2, 2078,
	-1, 976,
	5, 1326,
	-2, 2110,
	-1, 977,
	5, 1327,
	-2, 2100,
	-1, 978,
	5, 1328,
	447, 1328,
	-2, 2067,
	-1, 979,
	5, 1329,
	447, 1329,
	-2, 2068,
	-1, 1016,
	481, 1792,
	-2, 1783,
	-1, 1017,
	481, 1793,
	-2, 1784,
	-1, 1046,
	160, 2036,
	411, 2036,
	464, 2036,
	483, 2036,
	-2, 0,
	-1, 1049,
	1, 490,
	484, 490,
	-2, 1019,
	-1, 1174,
	334, 1758,
	474, 1758,
	-2, 1756,
	-1, 1186,
	485, 1758,
	-2, 1759,
	-1, 1187,
	1, 932,
	480, 932,
	482, 932,
	484, 932,
	-2, 1130,
	-1, 1235,
	324, 757,
	446, 757,
	-2, 249,
	-1, 1258,
	1, 932,
	480, 932,
	482, 932,
	484, 932,
	-2, 1130,
	-1, 1264,
	4, 957,
	21, 957,
	22, 957,
	23, 957,
	24, 957,
	25, 957,
	27, 957,
	28, 957,
	34, 957,
	39, 957,
	40, 957,
	41, 957,
	42, 957,
	43, 957,
	44, 957,
	45, 957,
	47, 957,
	48, 957,
	49, 957,
	51, 957,
	52, 957,
	53, 957,
	54, 957,
	55, 957,
	58, 957,
	59, 957,
	60, 957,
	61, 957,
	63, 957,
	64, 957,
	65, 957,
	69, 957,
	70, 957,
	71, 957,
	72, 957,
	73, 957,
	74, 957,
	75, 957,
	78, 957,
	79, 957,
	80, 957,
	81, 957,
	83, 957,
	85, 957,
	86, 957,
	87, 957,
	89, 957,
	91, 957,
	92, 957,
	100, 957,
	101, 957,
	102, 957,
	103, 957,
	105, 957,
	106, 957,
	107, 957,
	109, 957,
	110, 957,
	111, 957,
	113, 957,
	114, 957,
	116, 957,
	119, 957,
	120, 957,
	121, 957,
	123, 957,
	125, 957,
	126, 957,
	128, 957,
	129, 957,
	130, 957,
	131, 957,
	132, 957,
	133, 957,
	134, 957,
	135, 957,
	136, 957,
	137, 957,
	138, 957,
	139, 957,
	140, 957,
	141, 957,
	149, 957,
	150, 957,
	151, 957,
	152, 957,
	156, 957,
	158, 957,
	162, 957,
	163, 957,
	164, 957,
	165, 957,
	166, 957,
	167, 957,
	169, 957,
	170, 957,
	172, 957,
	173, 957,
	175, 957,
	176, 957,
	177, 957,
	178, 957,
	179, 957,
	180, 957,
	181, 957,
	182, 957,
	183, 957,
	185, 957,
	186, 957,
	188, 957,
	189, 957,
	190, 957,
	191, 957,
	196, 957,
	197, 957,
	198, 957,
	201, 957,
	202, 957,
	203, 957,
	205, 957,
	207, 957,
	209, 957,
	211, 957,
	212, 957,
	213, 957,
	215, 957,
	219, 957,
	220, 957,
	221, 957,
	222, 957,
	223, 957,
	225, 957,
	226, 957,
	228, 957,
	229, 957,
	231, 957,
	232, 957,
	235, 957,
	236, 957,
	237, 957,
	240, 957,
	241, 957,
	242, 957,
	243, 957,
	245, 957,
	246, 957,
	247, 957,
	248, 957,
	249, 957,
	250, 957,
	251, 957,
	252, 957,
	253, 957,
	254, 957,
	255, 957,
	257, 957,
	259, 957,
	260, 957,
	261, 957,
	262, 957,
	263, 957,
	265, 957,
	269, 957,
	271, 957,
	272, 957,
	273, 957,
	274, 957,
	275, 957,
	278, 957,
	280, 957,
	282, 957,
	283, 957,
	284, 957,
	287, 957,
	288, 957,
	289, 957,
	291, 957,
	293, 957,
	294, 957,
	295, 957,
	296, 957,
	297, 957,
	298, 957,
	299, 957,
	300, 957,
	301, 957,
	302, 957,
	304, 957,
	305, 957,
	306, 957,
	307, 957,
	308, 957,
	309, 957,
	310, 957,
	311, 957,
	312, 957,
	314, 957,
	316, 957,
	317, 957,
	318, 957,
	319, 957,
	320, 957,
	321, 957,
	322, 957,
	323, 957,
	324, 957,
	325, 957,
	332, 957,
	334, 957,
	335, 957,
	336, 957,
	337, 957,
	338, 957,
	339, 957,
	340, 957,
	341, 957,
	343, 957,
	345, 957,
	346, 957,
	347, 957,
	348, 957,
	349, 957,
	350, 957,
	352, 957,
	353, 957,
	354, 957,
	355, 957,
	356, 957,
	357, 957,
	358, 957,
	359, 957,
	361, 957,
	362, 957,
	363, 957,
	364, 957,
	365, 957,
	366, 957,
	368, 957,
	369, 957,
	370, 957,
	371, 957,
	372, 957,
	374, 957,
	375, 957,
	376, 957,
	378, 957,
	380, 957,
	381, 957,
	382, 957,
	383, 957,
	384, 957,
	385, 957,
	386, 957,
	387, 957,
	388, 957,
	389, 957,
	390, 957,
	391, 957,
	392, 957,
	394, 957,
	395, 957,
	396, 957,
	398, 957,
	399, 957,
	400, 957,
	401, 957,
	402, 957,
	403, 957,
	404, 957,
	406, 957,
	407, 957,
	408, 957,
	409, 957,
	410, 957,
	412, 957,
	414, 957,
	415, 957,
	416, 957,
	417, 957,
	418, 957,
	420, 957,
	421, 957,
	422, 957,
	424, 957,
	425, 957,
	428, 957,
	429, 957,
	430, 957,
	431, 957,
	432, 957,
	433, 957,
	434, 957,
	436, 957,
	439, 957,
	440, 957,
	441, 957,
	442, 957,
	443, 957,
	444, 957,
	446, 957,
	447, 957,
	448, 957,
	453, 957,
	454, 957,
	455, 957,
	456, 957,
	457, 957,
	458, 957,
	-2, 0,
	-1, 1326,
	1, 365,
	480, 365,
	482, 365,
	484, 365,
	-2, 1104,
	-1, 1329,
	4, 2108,
	11, 2108,
	12, 2108,
	14, 2108,
	15, 2108,
	16, 2108,
	17, 2108,
	18, 2108,
	19, 2108,
	21, 2108,
	22, 2108,
	23, 2108,
	24, 2108,
	25, 2108,
	27, 2108,
	28, 2108,
	31, 2108,
	32, 2108,
	34, 2108,
	36, 2108,
	39, 2108,
	40, 2108,
	41, 2108,
	42, 2108,
	43, 2108,
	44, 2108,
	45, 2108,
	47, 2108,
	48, 2108,
	49, 2108,
	51, 2108,
	52, 2108,
	53, 2108,
	54, 2108,
	55, 2108,
	58, 2108,
	59, 2108,
	60, 2108,
	61, 2108,
	63, 2108,
	64, 2108,
	65, 2108,
	66, 2108,
	69, 2108,
	70, 2108,
	71, 2108,
	72, 2108,
	73, 2108,
	74, 2108,
	75, 2108,
	76, 2108,
	78, 2108,
	79, 2108,
	80, 2108,
	81, 2108,
	83, 2108,
	84, 2108,
	85, 2108,
	86, 2108,
	87, 2108,
	89, 2108,
	90, 2108,
	91, 2108,
	92, 2108,
	100, 2108,
	101, 2108,
	102, 2108,
	103, 2108,
	105, 2108,
	106, 2108,
	107, 2108,
	109, 2108,
	110, 2108,
	111, 2108,
	113, 2108,
	114, 2108,
	116, 2108,
	119, 2108,
	120, 2108,
	121, 2108,
	123, 2108,
	125, 2108,
	126, 2108,
	128, 2108,
	129, 2108,
	130, 2108,
	131, 2108,
	132, 2108,
	133, 2108,
	134, 2108,
	135, 2108,
	136, 2108,
	137, 2108,
	138, 2108,
	139, 2108,
	140, 2108,
	141, 2108,
	145, 2108,
	146, 2108,
	147, 2108,
	148, 2108,
	149, 2108,
	150, 2108,
	151, 2108,
	152, 2108,
	155, 2108,
	156, 2108,
	158, 2108,
	161, 2108,
	162, 2108,
	163, 2108,
	164, 2108,
	165, 2108,
	166, 2108,
	167, 2108,
	169, 2108,
	170, 2108,
	172, 2108,
	173, 2108,
	175, 2108,
	176, 2108,
	177, 2108,
	178, 2108,
	179, 2108,
	180, 2108,
	181, 2108,
	182, 2108,
	183, 2108,
	184, 2108,
	185, 2108,
	186, 2108,
	187, 2108,
	188, 2108,
	189, 2108,
	190, 2108,
	191, 2108,
	193, 2108,
	194, 2108,
	196, 2108,
	197, 2108,
	198, 2108,
	200, 2108,
	201, 2108,
	202, 2108,
	203, 2108,
	205, 2108,
	207, 2108,
	208, 2108,
	209, 2108,
	210, 2108,
	211, 2108,
	212, 2108,
	213, 2108,
	214, 2108,
	215, 2108,
	217, 2108,
	218, 2108,
	219, 2108,
	220, 2108,
	221, 2108,
	222, 2108,
	223, 2108,
	225, 2108,
	226, 2108,
	228, 2108,
	229, 2108,
	230, 2108,
	231, 2108,
	232, 2108,
	233, 2108,
	235, 2108,
	236, 2108,
	237, 2108,
	240, 2108,
	241, 2108,
	242, 2108,
	243, 2108,
	244, 2108,
	245, 2108,
	246, 2108,
	247, 2108,
	248, 2108,
	249, 2108,
	250, 2108,
	251, 2108,
	252, 2108,
	253, 2108,
	254, 2108,
	255, 2108,
	257, 2108,
	258, 2108,
	259, 2108,
	260, 2108,
	261, 2108,
	262, 2108,
	263, 2108,
	265, 2108,
	268, 2108,
	269, 2108,
	271, 2108,
	272, 2108,
	273, 2108,
	274, 2108,
	275, 2108,
	278, 2108,
	282, 2108,
	283, 2108,
	284, 2108,
	285, 2108,
	287, 2108,
	288, 2108,
	289, 2108,
	291, 2108,
	293, 2108,
	294, 2108,
	295, 2108,
	296, 2108,
	297, 2108,
	298, 2108,
	299, 2108,
	300, 2108,
	301, 2108,
	302, 2108,
	304, 2108,
	305, 2108,
	306, 2108,
	307, 2108,
	308, 2108,
	309, 2108,
	310, 2108,
	311, 2108,
	312, 2108,
	314, 2108,
	316, 2108,
	317, 2108,
	318, 2108,
	319, 2108,
	320, 2108,
	321, 2108,
	322, 2108,
	323, 2108,
	324, 2108,
	325, 2108,
	332, 2108,
	333, 2108,
	334, 2108,
	335, 2108,
	336, 2108,
	337, 2108,
	338, 2108,
	339, 2108,
	340, 2108,
	341, 2108,
	343, 2108,
	344, 2108,
	345, 2108,
	346, 2108,
	347, 2108,
	348, 2108,
	349, 2108,
	350, 2108,
	351, 2108,
	352, 2108,
	353, 2108,
	354, 2108,
	355, 2108,
	356, 2108,
	357, 2108,
	358, 2108,
	359, 2108,
	361, 2108,
	362, 2108,
	363, 2108,
	364, 2108,
	365, 2108,
	366, 2108,
	368, 2108,
	369, 2108,
	370, 2108,
	371, 2108,
	372, 2108,
	373, 2108,
	374, 2108,
	375, 2108,
	376, 2108,
	378, 2108,
	380, 2108,
	381, 2108,
	382, 2108,
	383, 2108,
	384, 2108,
	385, 2108,
	386, 2108,
	387, 2108,
	388, 2108,
	389, 2108,
	390, 2108,
	391, 2108,
	392, 2108,
	394, 2108,
	395, 2108,
	396, 2108,
	398, 2108,
	399, 2108,
	400, 2108,
	401, 2108,
	402, 2108,
	403, 2108,
	404, 2108,
	406, 2108,
	407, 2108,
	408, 2108,
	409, 2108,
	410, 2108,
	412, 2108,
	414, 2108,
	415, 2108,
	416, 2108,
	417, 2108,
	418, 2108,
	420, 2108,
	421, 2108,
	422, 2108,
	424, 2108,
	425, 2108,
	428, 2108,
	429, 2108,
	430, 2108,
	431, 2108,
	432, 2108,
	433, 2108,
	434, 2108,
	436, 2108,
	439, 2108,
	440, 2108,
	441, 2108,
	442, 2108,
	443, 2108,
	444, 2108,
	446, 2108,
	447, 2108,
	448, 2108,
	453, 2108,
	454, 2108,
	455, 2108,
	456, 2108,
	457, 2108,
	458, 2108,
	459, 2108,
	460, 2108,
	462, 2108,
	463, 2108,
	464, 2108,
	465, 2108,
	466, 2108,
	467, 2108,
	469, 2108,
	470, 2108,
	471, 2108,
	472, 2108,
	473, 2108,
	474, 2108,
	475, 2108,
	476, 2108,
	477, 2108,
	479, 2108,
	482, 2108,
	483, 2108,
	485, 2108,
	486, 2108,
	-2, 0,
	-1, 1334,
	160, 2007,
	411, 2007,
	464, 2007,
	483, 2007,
	-2, 0,
	-1, 1366,
	318, 647,
	366, 647,
	-2, 0,
	-1, 1390,
	1, 642,
	480, 642,
	482, 642,
	484, 642,
	-2, 0,
	-1, 1391,
	1, 667,
	480, 667,
	482, 667,
	484, 667,
	-2, 0,
	-1, 1392,
	1, 649,
	480, 649,
	482, 649,
	484, 649,
	-2, 0,
	-1, 1394,
	1, 653,
	480, 653,
	482, 653,
	484, 653,
	-2, 0,
	-1, 1421,
	1, 2056,
	480, 2056,
	482, 2056,
	483, 2056,
	484, 2056,
	-2, 695,
	-1, 1422,
	1, 2004,
	480, 2004,
	482, 2004,
	483, 2004,
	484, 2004,
	-2, 696,
	-1, 1437,
	1, 1014,
	484, 1014,
	-2, 1019,
	-1, 1440,
	144, 1142,
	157, 1142,
	234, 1142,
	276, 1142,
	-2, 1085,
	-1, 1533,
	127, 1106,
	144, 1106,
	157, 1106,
	204, 1106,
	234, 1106,
	276, 1106,
	286, 1106,
	426, 1106,
	-2, 1502,
	-1, 1593,
	482, 1652,
	-2, 0,
	-1, 1628,
	127, 1106,
	144, 1106,
	157, 1106,
	204, 1106,
	234, 1106,
	276, 1106,
	286, 1106,
	426, 1106,
	-2, 1221,
	-1, 1674,
	481, 1331,
	-2, 1319,
	-1, 1707,
	1, 492,
	484, 492,
	-2, 1019,
	-1, 1909,
	1, 644,
	480, 644,
	482, 644,
	484, 644,
	-2, 0,
	-1, 1910,
	1, 669,
	480, 669,
	482, 669,
	484, 669,
	-2, 0,
	-1, 1982,
	349, 1167,
	350, 1167,
	-2, 1364,
	-1, 2013,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1382,
	-1, 2014,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1383,
	-1, 2015,
	84, 0,
	217, 0,
	218, 0,
	466, 0,
	467, 0,
	-2, 1384,
	-1, 2016,
	84, 0,
	217, 0,
	218, 0,
	466, 0,
	467, 0,
	-2, 1385,
	-1, 2017,
	84, 0,
	217, 0,
	218, 0,
	466, 0,
	467, 0,
	-2, 1386,
	-1, 2018,
	84, 0,
	217, 0,
	218, 0,
	466, 0,
	467, 0,
	-2, 1387,
	-1, 2019,
	84, 0,
	217, 0,
	218, 0,
	466, 0,
	467, 0,
	-2, 1388,
	-1, 2020,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1389,
	-1, 2032,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1401,
	-1, 2033,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1402,
	-1, 2034,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1403,
	-1, 2037,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1408,
	-1, 2043,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1412,
	-1, 2045,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1420,
	-1, 2046,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1421,
	-1, 2047,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1422,
	-1, 2048,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1423,
	-1, 2160,
	5, 1795,
	160, 1663,
	481, 1792,
	-2, 1783,
	-1, 2161,
	160, 1664,
	-2, 2060,
	-1, 2162,
	160, 1665,
	-2, 1932,
	-1, 2163,
	160, 1666,
	-2, 1850,
	-1, 2164,
	160, 1667,
	-2, 1889,
	-1, 2165,
	160, 1668,
	-2, 1927,
	-1, 2166,
	160, 1669,
	-2, 2002,
	-1, 2167,
	160, 1670,
	-2, 1485,
	-1, 2236,
	1, 1222,
	2, 1222,
	90, 1222,
	127, 1222,
	144, 1222,
	157, 1222,
	161, 1222,
	171, 1222,
	174, 1222,
	200, 1222,
	204, 1222,
	214, 1222,
	230, 1222,
	234, 1222,
	258, 1222,
	276, 1222,
	280, 1222,
	286, 1222,
	342, 1222,
	344, 1222,
	426, 1222,
	437, 1222,
	450, 1222,
	451, 1222,
	452, 1222,
	461, 1222,
	480, 1222,
	482, 1222,
	484, 1222,
	486, 1222,
	-2, 1221,
	-1, 2249,
	481, 1764,
	-2, 1778,
	-1, 2272,
	481, 1330,
	-2, 1320,
	-1, 2374,
	1, 932,
	480, 932,
	482, 932,
	484, 932,
	-2, 1130,
	-1, 2528,
	281, 1170,
	-2, 2098,
	-1, 2529,
	281, 1171,
	-2, 1991,
	-1, 2533,
	349, 1729,
	350, 1729,
	-2, 1483,
	-1, 2534,
	349, 1733,
	350, 1733,
	-2, 1484,
	-1, 2535,
	349, 1730,
	350, 1730,
	-2, 1483,
	-1, 2536,
	349, 1734,
	350, 1734,
	-2, 1484,
	-1, 2549,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1410,
	-1, 2550,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1414,
	-1, 2556,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1416,
	-1, 2750,
	211, 1019,
	314, 1019,
	322, 1019,
	461, 1019,
	-2, 489,
	-1, 2849,
	1, 932,
	480, 932,
	482, 932,
	484, 932,
	-2, 1130,
	-1, 2939,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1418,
	-1, 2946,
	208, 0,
	210, 0,
	268, 0,
	-2, 1437,
	-1, 3012,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1466,
	-1, 3013,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1467,
	-1, 3014,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1468,
	-1, 3018,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1472,
	-1, 3019,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1473,
	-1, 3020,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1474,
	-1, 3064,
	481, 1765,
	-2, 1779,
	-1, 3160,
	483, 2214,
	-2, 1063,
	-1, 3211,
	208, 0,
	210, 0,
	268, 0,
	-2, 1438,
	-1, 3214,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1441,
	-1, 3215,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1443,
	-1, 3389,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1442,
	-1, 3390,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1444,
	-1, 3400,
	208, 0,
	-2, 1475,
	-1, 3529,
	208, 0,
	-2, 1476,
	-1, 3664,
	44, 0,
	184, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 2063,
}

const sqlPrivate = 57344

const sqlLast = 87747

var sqlAct = [...]int{

	219, 3460, 3797, 3550, 3429, 3663, 3566, 3674, 3763, 2680,
	3627, 3630, 3675, 2835, 3717, 3321, 3611, 3676, 1206, 3418,
	3467, 3432, 2428, 3086, 3640, 3533, 2978, 2681, 2304, 3347,
	846, 1883, 3662, 2000, 3352, 1321, 3378, 2767, 1190, 3152,
	1019, 3476, 35, 3194, 3334, 3276, 2864, 861, 1799, 1873,
	2060, 837, 1662, 3498, 3357, 1449, 2857, 2859, 2931, 3131,
	2831, 1634, 3087, 1758, 1078, 609, 2461, 2542, 2417, 2391,
	2403, 2192, 3404, 2723, 2363, 2400, 2463, 3248, 2703, 1171,
	577, 211, 2666, 1009, 2695, 609, 3193, 2414, 2471, 2452,
	701, 2429, 1374, 2454, 2684, 3035, 2412, 1603, 2460, 2686,
	1795, 1767, 2306, 2104, 2229, 888, 2577, 1794, 2665, 895,
	1997, 1541, 1798, 2228, 3534, 2073, 1871, 1179, 1993, 899,
	2365, 1579, 1251, 2375, 3461, 1783, 2102, 2340, 892, 1790,
	2470, 1743, 1745, 1062, 2231, 1437, 2526, 2729, 2401, 2093,
	2057, 2210, 1981, 1962, 1604, 2189, 1964, 1327, 2833, 1623,
	1000, 1733, 1342, 1315, 2422, 1305, 1828, 1051, 897, 2296,
	610, 1256, 213, 2464, 1003, 611, 1176, 545, 2096, 845,
	147, 2218, 1613, 1663, 4, 2200, 2156, 982, 531, 2146,
	90, 1192, 553, 1525, 2074, 1450, 1574, 1963, 1451, 1827,
	1017, 1965, 212, 605, 154, 677, 1341, 561, 571, 652,
	1325, 1203, 1757, 1986, 2341, 873, 548, 40, 39, 37,
	155, 28, 26, 24, 1005, 980, 556, 1456, 750, 1436,
	767, 1261, 3049, 2573, 3050, 1864, 1848, 614, 1864, 1864,
	1532, 3815, 3801, 2682, 1620, 2209, 2209, 1279, 3800, 1393,
	942, 841, 2209, 2874, 3779, 890, 3777, 614, 3291, 147,
	3291, 3773, 3700, 2748, 695, 1804, 3701, 617, 2202, 3698,
	1036, 2209, 836, 2209, 1464, 1465, 3696, 3693, 1862, 2873,
	2209, 3694, 3690, 999, 841, 3685, 3691, 617, 712, 1804,
	3660, 3606, 3659, 3658, 1804, 1495, 1804, 1876, 1059, 997,
	3655, 2586, 1467, 1224, 1876, 1015, 894, 2587, 2425, 1012,
	3654, 2638, 2639, 3649, 1876, 3647, 3625, 3291, 3605, 3291,
	3291, 3599, 2264, 3039, 3598, 2209, 983, 983, 2209, 1466,
	3593, 3515, 3039, 3592, 3291, 1464, 1465, 3291, 3586, 3531,
	3512, 2201, 1804, 2264, 1804, 2638, 2639, 842, 3346, 3509,
	3469, 3449, 824, 3291, 3470, 1804, 1495, 3448, 3440, 1876,
	3439, 1804, 1804, 1467, 3291, 1464, 1465, 3310, 823, 79,
	3410, 1507, 1508, 1509, 1804, 3391, 2653, 3376, 1031, 2264,
	1804, 1876, 831, 2896, 2638, 2639, 1495, 2656, 2657, 2658,
	1466, 3365, 3318, 1467, 2354, 2888, 2209, 3309, 1513, 3290,
	1486, 2209, 3213, 3291, 3209, 3168, 2264, 3162, 984, 2904,
	3129, 2904, 3059, 3057, 3130, 3042, 3060, 3058, 1472, 2209,
	1466, 2962, 2958, 2903, 2895, 1804, 2209, 2904, 2896, 2679,
	1486, 2677, 2676, 2209, 1059, 2209, 2209, 2295, 1483, 2629,
	1464, 1465, 2627, 2630, 2619, 986, 2628, 987, 2620, 2653,
	2617, 2209, 1713, 1032, 2209, 2644, 1494, 1496, 2260, 1891,
	2588, 1495, 2638, 2639, 2209, 2656, 2657, 2658, 1467, 1489,
	1490, 1491, 1492, 2450, 2449, 1762, 2377, 1879, 1879, 1472,
	1876, 1223, 1464, 1465, 2576, 1863, 2280, 2263, 2888, 2644,
	2209, 2264, 1804, 2258, 2251, 1466, 1011, 2209, 1804, 1489,
	1490, 1491, 1492, 2397, 2208, 1486, 2541, 1487, 2209, 1472,
	1467, 1878, 1218, 1483, 1803, 1879, 2293, 1494, 1496, 1599,
	1865, 1202, 3115, 1865, 1865, 2934, 2912, 2653, 2644, 1621,
	1793, 2359, 2875, 1376, 2245, 2244, 2243, 1466, 1504, 2242,
	2241, 1514, 988, 985, 2654, 830, 187, 1494, 1496, 829,
	828, 2876, 1532, 827, 826, 3207, 187, 822, 821, 820,
	187, 819, 818, 817, 2506, 3518, 816, 815, 1487, 814,
	813, 1481, 1482, 812, 1489, 1490, 1491, 1492, 2654, 2873,
	811, 2659, 810, 189, 1472, 2099, 897, 1502, 809, 1032,
	897, 748, 187, 189, 2201, 747, 1032, 189, 1487, 746,
	745, 744, 743, 742, 123, 1081, 2644, 187, 741, 1081,
	740, 1195, 739, 738, 1488, 1195, 1061, 2654, 737, 736,
	1066, 735, 1494, 1496, 734, 733, 1472, 732, 188, 189,
	731, 1055, 730, 897, 729, 897, 728, 897, 188, 727,
	726, 725, 188, 724, 189, 723, 1481, 1482, 181, 722,
	721, 2655, 181, 710, 709, 668, 182, 1493, 2100, 1182,
	182, 187, 629, 187, 1195, 628, 2442, 156, 3264, 1863,
	1957, 620, 619, 1487, 188, 1488, 1211, 156, 1216, 618,
	1222, 2424, 591, 583, 181, 2655, 582, 1493, 1174, 188,
	1217, 1186, 182, 1212, 581, 2654, 1395, 565, 189, 181,
	189, 209, 208, 207, 1195, 1488, 206, 182, 1195, 205,
	204, 203, 1195, 156, 202, 201, 3225, 897, 1049, 200,
	199, 198, 1195, 197, 2655, 897, 196, 1505, 156, 195,
	2101, 2098, 194, 2226, 1476, 1468, 1469, 1470, 1471, 1473,
	1474, 193, 2327, 188, 844, 188, 1262, 1262, 192, 191,
	190, 3070, 3053, 181, 1074, 181, 1168, 1173, 2905, 2726,
	1340, 182, 1493, 182, 2599, 1195, 2582, 1198, 1345, 2649,
	2647, 2648, 2640, 2641, 2642, 2643, 2645, 2646, 2381, 1044,
	1488, 897, 156, 1205, 156, 614, 2409, 2268, 1204, 2252,
	1624, 2235, 1741, 1477, 1475, 1476, 1468, 1469, 1470, 1471,
	1473, 1474, 2655, 2129, 871, 2648, 2640, 2641, 2642, 2643,
	2645, 2646, 1463, 1503, 2115, 617, 2638, 2639, 1346, 1506,
	1484, 1480, 1394, 1477, 1475, 1476, 1468, 1469, 1470, 1471,
	1473, 1474, 1582, 2113, 1266, 2650, 2651, 2652, 1581, 2103,
	2638, 2639, 2649, 2647, 2648, 2640, 2641, 2642, 2643, 2645,
	2646, 1647, 1552, 1543, 1055, 1309, 1312, 1055, 1886, 1585,
	2638, 2639, 897, 897, 897, 897, 897, 1582, 1208, 1318,
	187, 1068, 1021, 1581, 187, 1403, 3681, 3428, 147, 147,
	3113, 3661, 3573, 1330, 1332, 1441, 3524, 1263, 842, 1328,
	3366, 897, 3345, 3516, 1580, 1484, 1480, 897, 1477, 1475,
	1476, 1468, 1469, 1470, 1471, 1473, 1474, 189, 3269, 3361,
	3247, 189, 3246, 2650, 2651, 2652, 3240, 3239, 3238, 3231,
	2649, 2647, 2648, 2640, 2641, 2642, 2643, 2645, 2646, 3230,
	1885, 3229, 3224, 3135, 3221, 3220, 3128, 2097, 3074, 3073,
	1440, 3072, 3063, 1468, 1469, 1470, 1471, 1473, 1474, 3032,
	1531, 1282, 188, 1435, 3031, 3030, 188, 2954, 2950, 2721,
	2644, 2276, 181, 2673, 2664, 2637, 181, 2634, 2899, 2633,
	182, 696, 2638, 2639, 182, 2656, 2657, 2658, 2631, 2626,
	1351, 2410, 2625, 1544, 2644, 1542, 1550, 1367, 2624, 2621,
	2618, 156, 3208, 2598, 1013, 156, 63, 2581, 699, 698,
	897, 897, 897, 2574, 2644, 2451, 897, 2236, 2086, 1463,
	1839, 64, 1543, 1017, 1809, 1017, 1807, 1462, 3810, 3772,
	3519, 3771, 3710, 68, 3708, 3535, 2718, 3699, 1438, 1020,
	2980, 3565, 1081, 3561, 1601, 1446, 3558, 2653, 897, 1445,
	3557, 609, 3556, 3549, 3543, 1679, 609, 3513, 3497, 1649,
	824, 187, 996, 3496, 897, 2063, 3484, 73, 1195, 1638,
	1659, 1442, 3481, 3445, 3424, 1702, 823, 1459, 1460, 3402,
	3386, 842, 3385, 897, 3373, 3372, 3338, 1610, 1584, 1081,
	3263, 3245, 3183, 3180, 3104, 1655, 3103, 3090, 189, 3089,
	78, 3045, 2945, 2654, 1529, 2906, 1710, 2889, 1607, 1608,
	2851, 89, 187, 1739, 2815, 1055, 79, 86, 2794, 1657,
	3360, 2770, 2769, 2743, 1631, 2741, 2644, 1186, 1015, 2678,
	1015, 2603, 1012, 2602, 1012, 1705, 983, 2597, 2565, 2390,
	1464, 1465, 1704, 188, 1576, 1577, 3134, 1588, 1587, 189,
	1654, 1586, 2408, 181, 2069, 1583, 1575, 1573, 2274, 2273,
	2247, 182, 2240, 2207, 2111, 80, 1646, 1602, 1467, 1597,
	1596, 1595, 1594, 1653, 1673, 1632, 1593, 1592, 1591, 2659,
	1590, 1589, 156, 1570, 1569, 1568, 1567, 1566, 1565, 1629,
	1564, 1563, 1562, 1561, 188, 1466, 147, 1560, 1559, 1558,
	1557, 1556, 1707, 1545, 181, 842, 1530, 1528, 1523, 1651,
	2655, 1043, 182, 614, 1034, 2654, 1027, 1600, 614, 1751,
	3341, 1195, 1195, 3265, 3217, 3069, 3056, 3048, 2585, 1081,
	2238, 1732, 3413, 156, 1641, 1640, 1639, 1626, 1637, 1636,
	1635, 3267, 2266, 617, 1658, 2638, 2639, 3068, 617, 1701,
	1544, 2739, 1526, 1642, 2797, 1622, 1800, 3769, 1065, 1660,
	1780, 1887, 3762, 1782, 2770, 3559, 1787, 2860, 3472, 3312,
	3471, 1732, 3364, 3311, 3051, 2345, 2891, 2890, 1059, 3477,
	81, 1624, 1464, 1465, 1735, 1730, 1725, 2640, 2641, 2642,
	2643, 2645, 2646, 2128, 1732, 1676, 1582, 3138, 1056, 1433,
	1667, 2623, 1581, 1366, 2114, 1063, 1059, 2622, 2547, 2329,
	1467, 1064, 1060, 2642, 2643, 2645, 2646, 153, 84, 1011,
	85, 1011, 2655, 2112, 3102, 1554, 1404, 1791, 1059, 807,
	1766, 2640, 2641, 2642, 2643, 2645, 2646, 1466, 1079, 187,
	1884, 2837, 1180, 2836, 1375, 3468, 3405, 700, 3682, 3686,
	3673, 123, 1195, 1376, 1195, 1832, 1195, 1835, 3517, 1796,
	3118, 3106, 2910, 3798, 1195, 1719, 3427, 1195, 2682, 808,
	1762, 2982, 2094, 2591, 1801, 1565, 189, 1565, 2272, 1598,
	1195, 1195, 1195, 1205, 1578, 614, 1837, 1845, 1204, 2829,
	1836, 1239, 3695, 3692, 1708, 2869, 3081, 3551, 3348, 124,
	609, 1057, 3623, 1355, 3540, 1786, 3683, 2773, 3585, 1058,
	1901, 3097, 2458, 157, 2421, 617, 2822, 1186, 1972, 3733,
	3734, 188, 2752, 2926, 1802, 3301, 1472, 1227, 805, 2281,
	803, 181, 801, 2650, 2651, 2652, 1853, 799, 1842, 182,
	2649, 2647, 2648, 2640, 2641, 2642, 2643, 2645, 2646, 1889,
	796, 1050, 1819, 3807, 3458, 1818, 1943, 3451, 3120, 1970,
	697, 3117, 1941, 3116, 1905, 1840, 3078, 3077, 664, 2596,
	1237, 2754, 1551, 897, 1890, 897, 790, 1401, 2595, 2594,
	2593, 2551, 897, 2361, 1402, 1679, 1679, 1081, 2099, 897,
	897, 897, 897, 897, 897, 897, 897, 897, 897, 897,
	897, 897, 897, 897, 897, 897, 897, 897, 897, 897,
	897, 897, 897, 897, 897, 897, 897, 897, 897, 897,
	897, 897, 897, 897, 1851, 897, 1974, 897, 897, 897,
	897, 1847, 842, 1328, 842, 1328, 1895, 1855, 1856, 1238,
	1720, 995, 2353, 840, 1961, 2352, 2332, 897, 1059, 1065,
	897, 897, 1880, 1044, 1881, 665, 1065, 1894, 1353, 897,
	1892, 2100, 614, 897, 1400, 897, 897, 1282, 2259, 1850,
	1971, 1850, 3584, 1081, 2044, 2796, 1439, 1201, 2142, 897,
	897, 897, 897, 2141, 897, 897, 897, 897, 897, 897,
	897, 897, 617, 1923, 2002, 1817, 2418, 2740, 1867, 793,
	3384, 1869, 1064, 1056, 1673, 1673, 1474, 1874, 1348, 1064,
	897, 897, 897, 897, 897, 897, 897, 897, 897, 1293,
	839, 2075, 2076, 897, 2299, 850, 1985, 2299, 2366, 1272,
	1969, 1271, 2911, 2101, 2098, 1017, 2075, 2091, 2297, 1955,
	1954, 2297, 1081, 1270, 1759, 1269, 2331, 1233, 2320, 1960,
	1899, 1017, 1951, 1959, 1246, 1973, 1966, 1958, 1998, 1999,
	1056, 2288, 2137, 1416, 2250, 1364, 1412, 897, 1081, 2059,
	1755, 824, 2539, 2524, 824, 824, 2090, 592, 1024, 1916,
	3652, 2159, 2159, 2173, 1913, 2075, 2267, 1989, 2193, 2195,
	1990, 1991, 1760, 1761, 2199, 2342, 2343, 1368, 2319, 2139,
	2094, 1746, 841, 2059, 2140, 1747, 1057, 2143, 1349, 2144,
	2145, 2646, 1022, 1444, 1058, 2349, 2223, 1724, 1723, 1852,
	1756, 1732, 1734, 1956, 2917, 1676, 1676, 1908, 2071, 842,
	1667, 1667, 1195, 1953, 2215, 2342, 2343, 3733, 2248, 842,
	1015, 3313, 2103, 842, 1012, 1470, 1471, 1473, 1474, 2088,
	1631, 2175, 1972, 1042, 983, 1432, 1015, 1399, 2342, 2343,
	1012, 3297, 1081, 1057, 1642, 1650, 2237, 2916, 2103, 2503,
	1710, 1058, 1917, 3757, 2751, 2214, 1376, 597, 2538, 3746,
	2368, 1055, 2638, 2639, 3434, 667, 666, 2168, 2155, 1679,
	2222, 2055, 2227, 1970, 1376, 2233, 2234, 2197, 2184, 1748,
	2367, 2369, 3383, 2205, 2206, 1025, 3745, 3093, 2216, 2220,
	2221, 1909, 1742, 1750, 1081, 1629, 2053, 1013, 1195, 1013,
	2326, 1727, 2257, 2308, 589, 2531, 2532, 3679, 897, 2067,
	897, 842, 662, 2300, 661, 1584, 2065, 719, 1354, 2372,
	2097, 797, 838, 797, 2562, 797, 602, 3781, 2330, 2358,
	798, 147, 3758, 1059, 1950, 1968, 2261, 3722, 2279, 1910,
	543, 1390, 2362, 797, 3199, 2394, 2275, 2866, 1942, 2560,
	599, 2383, 1413, 2385, 1940, 1752, 3198, 3793, 2350, 2509,
	1174, 3766, 2971, 1864, 538, 3436, 1235, 2808, 2334, 3084,
	2282, 2278, 2802, 3552, 1186, 1576, 1577, 1195, 1195, 1779,
	1195, 2432, 1764, 2867, 1971, 1762, 1257, 2753, 1673, 1391,
	1059, 2423, 1195, 3288, 2423, 1292, 785, 588, 1729, 3295,
	2311, 2344, 2346, 2347, 2348, 2322, 2644, 2313, 2316, 2049,
	2303, 1011, 1257, 2446, 2378, 1952, 2333, 2472, 835, 3284,
	2050, 3760, 2474, 1232, 2051, 2477, 2478, 1011, 2056, 2351,
	1728, 694, 1805, 3721, 2483, 2484, 2485, 3603, 897, 2493,
	3330, 2494, 2335, 3680, 1969, 2866, 1352, 3105, 785, 1255,
	2298, 1768, 2512, 594, 1915, 1414, 1753, 2968, 2373, 1746,
	1571, 1753, 2557, 1747, 1205, 3285, 614, 2491, 1772, 2379,
	835, 2103, 2737, 1753, 794, 598, 2457, 2558, 897, 2501,
	2388, 2563, 3195, 1350, 897, 897, 2398, 1023, 3396, 2434,
	3742, 3635, 2790, 1762, 786, 2654, 617, 2818, 2416, 1186,
	601, 2514, 2784, 2516, 2553, 2476, 2427, 2488, 2479, 1676,
	2480, 3564, 1363, 1365, 1667, 1769, 596, 2495, 2085, 2497,
	3678, 2499, 2438, 3296, 2439, 1415, 2440, 2448, 1411, 2969,
	1522, 2786, 1912, 1186, 3094, 1186, 2459, 2507, 2058, 897,
	897, 2601, 2444, 1746, 2475, 897, 786, 1747, 147, 2783,
	2284, 2219, 593, 2447, 2310, 2511, 2041, 1748, 897, 897,
	1443, 1328, 2788, 2286, 897, 897, 3764, 3759, 3435, 3782,
	897, 1750, 3380, 2052, 1612, 1907, 2232, 2508, 1616, 897,
	897, 897, 2054, 2490, 3601, 897, 3720, 841, 3340, 3567,
	603, 2287, 2496, 2554, 2498, 897, 2500, 590, 1749, 587,
	1041, 595, 2655, 2520, 2584, 1773, 2285, 2521, 2519, 3189,
	3331, 3065, 897, 1037, 3602, 2787, 720, 1619, 2530, 3677,
	2525, 2517, 3200, 3280, 2928, 2522, 2559, 3281, 2575, 1985,
	3732, 2217, 1378, 1752, 3730, 2561, 3507, 3133, 2103, 1781,
	2441, 1748, 3794, 539, 2540, 1616, 3765, 1617, 1865, 787,
	3581, 2579, 2580, 3483, 2510, 1750, 2583, 3150, 2853, 2299,
	1826, 1609, 2066, 1774, 1775, 1736, 1737, 1035, 2309, 1030,
	3283, 530, 1453, 2314, 3767, 1770, 1454, 3196, 897, 897,
	897, 3499, 2552, 3286, 1619, 3379, 1988, 897, 897, 897,
	2001, 2932, 897, 3500, 1763, 1721, 2039, 3787, 1614, 2042,
	540, 787, 897, 1017, 1081, 2730, 3539, 3243, 897, 1771,
	897, 1753, 3442, 3441, 1617, 2689, 2690, 1752, 1017, 3501,
	2649, 2647, 2648, 2640, 2641, 2642, 2643, 2645, 2646, 856,
	3021, 3703, 2590, 3422, 1753, 3151, 1081, 541, 3704, 542,
	1718, 3080, 1615, 2854, 842, 2038, 2848, 1789, 1017, 3300,
	2967, 2765, 2761, 1081, 2402, 2392, 3299, 1846, 1838, 788,
	1831, 1618, 1452, 2675, 2697, 1679, 1813, 1788, 2211, 1081,
	2757, 3612, 2711, 3503, 1522, 1978, 2106, 2929, 2735, 2691,
	897, 3568, 2727, 1947, 3282, 1453, 2701, 1714, 3153, 3502,
	3353, 2389, 3381, 1784, 897, 1295, 2747, 1776, 3466, 789,
	2725, 1453, 2720, 2336, 1454, 1679, 3504, 1716, 1015, 3047,
	2749, 788, 1012, 3464, 1448, 1760, 1761, 2699, 1753, 3423,
	2776, 897, 2772, 1015, 2755, 2758, 2759, 1012, 1618, 1717,
	1055, 2724, 2670, 2671, 2672, 2213, 2700, 2771, 2545, 3201,
	2212, 2709, 2774, 1785, 2717, 2778, 2683, 2712, 2713, 1900,
	2523, 789, 2775, 1015, 1744, 2780, 2781, 1012, 2698, 3786,
	716, 2694, 1081, 1777, 3244, 2710, 2791, 2792, 708, 2762,
	2793, 2249, 2693, 1195, 1392, 1452, 1749, 2744, 2745, 3022,
	2746, 2799, 1081, 1979, 1673, 2040, 2715, 3023, 2716, 2256,
	2255, 1452, 2732, 2733, 2734, 2254, 2396, 1195, 2812, 2813,
	2253, 839, 2814, 2801, 2315, 1278, 1264, 2824, 1195, 1013,
	1379, 3202, 2705, 1186, 3298, 3545, 3322, 2750, 1265, 2834,
	1751, 2696, 1017, 1276, 1673, 1013, 2900, 2842, 2756, 3702,
	2862, 718, 2809, 1454, 1835, 1844, 2816, 2376, 2738, 3430,
	3569, 3370, 3739, 3462, 2847, 1654, 3615, 1751, 3620, 3546,
	3609, 2337, 2338, 2472, 2789, 3249, 3036, 3420, 1195, 1195,
	1749, 621, 2472, 2795, 2110, 2294, 3741, 3697, 2804, 3560,
	2731, 1430, 2109, 2805, 2871, 3401, 1428, 2806, 2766, 1791,
	3242, 2667, 2823, 2887, 2811, 2819, 2944, 1791, 2817, 2807,
	2706, 2908, 2882, 3505, 3421, 2825, 2668, 2632, 3506, 1011,
	2564, 3369, 2826, 2334, 2393, 1676, 1408, 1406, 2907, 1081,
	1667, 2360, 1081, 2855, 1011, 1389, 2863, 2328, 3616, 1387,
	2810, 3547, 2845, 1385, 1186, 1186, 3431, 1015, 1383, 2277,
	1381, 1012, 1373, 2704, 1648, 2925, 1645, 1431, 1371, 1274,
	1343, 2924, 897, 1448, 1011, 1676, 2505, 1939, 897, 897,
	1667, 2504, 897, 897, 897, 2868, 897, 2902, 2708, 2482,
	2883, 2870, 2923, 2898, 2877, 897, 1679, 1967, 2638, 2639,
	714, 715, 1949, 1920, 897, 1703, 2922, 897, 706, 707,
	1555, 1347, 1250, 1081, 3672, 3317, 2861, 3308, 3608, 2913,
	3351, 2914, 897, 2915, 1186, 3273, 3149, 3143, 3100, 2964,
	1081, 3098, 3079, 2846, 2858, 842, 2838, 2443, 2419, 1277,
	1679, 1679, 897, 897, 2407, 897, 897, 897, 2947, 147,
	147, 2399, 2386, 1877, 2885, 2886, 2919, 1275, 1875, 1429,
	2956, 2957, 1870, 897, 1427, 717, 795, 897, 2707, 1679,
	1679, 897, 897, 897, 897, 897, 897, 897, 897, 897,
	897, 897, 897, 897, 897, 897, 897, 897, 897, 897,
	2930, 897, 2927, 1868, 1407, 1405, 3718, 1656, 897, 897,
	1679, 622, 623, 1388, 1866, 897, 2920, 1386, 1857, 1810,
	1808, 1384, 1797, 897, 1792, 1673, 1382, 992, 1380, 2952,
	1372, 905, 2154, 2150, 1017, 1017, 1370, 1273, 897, 2963,
	1778, 2974, 1938, 1765, 1754, 3490, 3734, 2879, 2880, 2881,
	2983, 993, 2644, 2884, 1457, 3643, 2979, 3375, 1011, 3368,
	2985, 2970, 2972, 2973, 2992, 3367, 2473, 1081, 1740, 1673,
	1673, 2543, 2995, 215, 2996, 533, 534, 1229, 549, 533,
	549, 559, 564, 2993, 2998, 580, 3033, 2994, 3025, 3000,
	586, 3052, 3492, 2318, 2299, 897, 215, 3161, 1673, 1673,
	2299, 1762, 2148, 600, 800, 802, 804, 3075, 2297, 1911,
	897, 897, 705, 1317, 2317, 3026, 215, 625, 624, 2152,
	2153, 2151, 1843, 1998, 2986, 3040, 3041, 1425, 1426, 1673,
	1316, 1937, 3288, 3043, 3044, 897, 897, 3038, 1936, 1015,
	1015, 2654, 994, 1012, 1012, 1458, 1676, 3642, 1918, 2544,
	3302, 1667, 1998, 3001, 1464, 1465, 897, 3554, 3284, 1369,
	3054, 3526, 3277, 1195, 626, 627, 1195, 3250, 2339, 2321,
	3055, 1464, 1465, 2147, 2149, 1679, 1461, 653, 3275, 3735,
	544, 3728, 693, 3029, 3279, 1711, 2355, 3071, 147, 2323,
	1676, 1676, 3607, 3034, 3577, 1667, 1667, 1317, 3124, 1467,
	1195, 3123, 3112, 3114, 3285, 1317, 3107, 897, 3574, 1466,
	3083, 3459, 3142, 533, 533, 1017, 897, 3111, 3132, 1676,
	1676, 215, 3163, 2357, 1667, 1667, 1466, 3119, 3139, 555,
	3062, 1195, 1195, 1195, 2426, 2198, 2356, 1706, 3155, 3278,
	3126, 1661, 2432, 3140, 2325, 3761, 2736, 1195, 2655, 2334,
	1676, 3785, 3158, 1081, 3157, 1667, 3154, 2324, 3576, 833,
	1532, 785, 2638, 2639, 3222, 3175, 3141, 2688, 1835, 1464,
	1465, 2291, 2292, 2472, 1612, 1081, 2289, 2290, 897, 897,
	2105, 1357, 3187, 835, 897, 897, 1679, 1356, 3067, 897,
	897, 3188, 897, 2291, 1673, 2289, 897, 3144, 2138, 2714,
	1410, 3480, 3156, 1409, 3159, 3164, 3218, 897, 3147, 3165,
	3066, 2975, 1549, 1548, 3804, 3774, 2728, 3747, 3536, 3171,
	1015, 834, 3170, 897, 1012, 3176, 3177, 3455, 3182, 3414,
	1011, 1011, 2742, 3185, 3184, 3178, 3181, 1013, 3212, 3412,
	3337, 3203, 3266, 3186, 3167, 1616, 3127, 3125, 2766, 3204,
	3197, 3192, 1013, 3096, 3091, 2878, 2852, 2850, 2487, 786,
	2486, 2436, 3280, 3216, 2411, 2387, 3281, 2647, 2648, 2640,
	2641, 2642, 2643, 2645, 2646, 2270, 2269, 2070, 1935, 1934,
	1017, 1933, 1013, 1932, 1619, 1860, 1859, 3099, 1017, 3101,
	1858, 1841, 1081, 1821, 1081, 1820, 1816, 1815, 1614, 1814,
	1982, 1017, 1812, 1811, 3255, 1673, 1424, 1423, 1304, 3283,
	1303, 1081, 1302, 1301, 1617, 1676, 1300, 1299, 1298, 1297,
	1667, 3241, 3286, 1296, 1294, 1289, 1288, 1287, 1286, 1285,
	897, 1245, 1244, 1243, 1242, 1241, 1240, 1234, 1228, 1226,
	1225, 1072, 1615, 1071, 1070, 2728, 3270, 3271, 1069, 3294,
	1535, 1040, 1039, 3293, 1540, 975, 1081, 1712, 3252, 3253,
	3261, 1081, 3305, 3306, 806, 792, 3258, 3303, 3257, 3254,
	3433, 3287, 1418, 77, 3262, 1236, 640, 72, 3304, 3251,
	3095, 648, 3622, 2782, 2724, 1015, 3272, 3256, 2364, 1012,
	1081, 1919, 3169, 1015, 1377, 1195, 3292, 1012, 1921, 3323,
	2719, 2239, 3600, 3226, 2600, 3532, 1015, 3320, 3395, 2108,
	1012, 1011, 1553, 74, 787, 3332, 881, 927, 3329, 3328,
	3274, 897, 3082, 3282, 2462, 3343, 1676, 3315, 1618, 3326,
	3325, 1667, 1665, 3355, 1666, 3319, 1081, 3316, 2176, 1835,
	849, 1084, 3374, 1722, 3371, 3362, 3339, 3324, 897, 897,
	897, 3354, 887, 3358, 3344, 3363, 1013, 3342, 1738, 1731,
	2271, 2158, 904, 901, 3349, 3356, 1081, 1028, 1668, 1670,
	903, 902, 1180, 897, 897, 1079, 1669, 1572, 900, 1664,
	3146, 3145, 2395, 897, 2430, 1281, 1679, 771, 1726, 2064,
	897, 897, 2092, 2589, 1546, 1038, 862, 883, 2089, 1033,
	3382, 872, 580, 2702, 2865, 1081, 3061, 3359, 1977, 656,
	2635, 3392, 3387, 2095, 1026, 2181, 2174, 2170, 1081, 2420,
	1434, 1524, 832, 2431, 788, 215, 897, 215, 215, 1177,
	1067, 215, 897, 865, 2062, 1537, 2569, 1987, 3403, 2872,
	897, 2722, 1679, 2265, 215, 1207, 2960, 3639, 1992, 897,
	1825, 3417, 897, 3416, 1007, 991, 990, 989, 897, 3629,
	3626, 3411, 3407, 2976, 789, 3408, 3409, 3179, 1231, 2832,
	1715, 2283, 1516, 2839, 877, 1185, 1011, 2687, 2901, 1247,
	3415, 1249, 3454, 1254, 1011, 585, 215, 215, 3553, 1177,
	3465, 3438, 1081, 3474, 3437, 1195, 210, 1011, 889, 215,
	1515, 2371, 2370, 3542, 1054, 1673, 1291, 2834, 1053, 1052,
	2764, 3792, 3092, 897, 897, 186, 2537, 1455, 3456, 3491,
	215, 215, 215, 3463, 1177, 3479, 897, 897, 1447, 3478,
	183, 3452, 580, 3487, 215, 215, 3510, 3511, 3495, 3473,
	185, 184, 897, 1679, 3489, 3333, 3109, 19, 3514, 705,
	18, 3486, 17, 3488, 94, 3494, 38, 16, 3493, 3358,
	122, 1673, 121, 120, 3508, 897, 3485, 119, 897, 118,
	117, 116, 111, 115, 3521, 114, 113, 112, 110, 109,
	3538, 108, 107, 106, 105, 104, 897, 3525, 3548, 103,
	3064, 102, 101, 100, 99, 3530, 98, 3522, 3523, 97,
	96, 95, 3537, 576, 573, 52, 1186, 51, 93, 3555,
	215, 92, 897, 897, 3563, 3444, 15, 36, 13, 56,
	57, 12, 897, 31, 215, 897, 1676, 1195, 1013, 1013,
	32, 1667, 83, 82, 30, 14, 29, 1195, 1195, 27,
	10, 8, 3562, 7, 33, 3578, 1633, 11, 3580, 152,
	151, 150, 76, 3591, 1195, 3570, 149, 3575, 148, 3571,
	3572, 75, 1673, 25, 3478, 3582, 9, 897, 3583, 144,
	3587, 3475, 3589, 3590, 3137, 71, 3596, 146, 3597, 145,
	3588, 143, 1676, 142, 141, 69, 140, 1667, 139, 3594,
	3617, 70, 3595, 138, 23, 1081, 5, 55, 6, 897,
	897, 3377, 897, 2909, 87, 88, 3619, 34, 3618, 67,
	3637, 66, 3446, 3447, 65, 22, 54, 21, 176, 175,
	174, 173, 168, 2527, 167, 172, 170, 169, 3624, 3644,
	3633, 171, 166, 178, 3641, 177, 3657, 180, 3604, 164,
	3628, 3631, 897, 897, 897, 160, 159, 163, 165, 3648,
	162, 161, 158, 3656, 3653, 179, 62, 3645, 3651, 137,
	3646, 136, 3684, 135, 897, 134, 133, 132, 131, 3689,
	3632, 61, 3670, 3636, 3671, 3668, 3669, 20, 2, 1,
	0, 0, 0, 1676, 0, 0, 3705, 0, 1667, 0,
	0, 3707, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3687, 2176, 2176, 897, 3706, 0, 0, 1013,
	3719, 3709, 3714, 533, 0, 3711, 0, 0, 0, 3715,
	0, 2432, 0, 3725, 3726, 0, 3712, 3713, 0, 3731,
	3716, 0, 3727, 3729, 215, 0, 215, 0, 0, 0,
	215, 0, 3738, 0, 3736, 3737, 3740, 0, 0, 897,
	0, 897, 1207, 3749, 1177, 215, 3755, 215, 3743, 3748,
	0, 3754, 215, 1207, 549, 3752, 3744, 215, 1207, 3750,
	3641, 3756, 3751, 580, 3753, 3628, 0, 0, 3631, 0,
	0, 0, 0, 3768, 3770, 0, 0, 0, 0, 0,
	0, 0, 2068, 0, 3778, 3775, 0, 0, 3780, 1324,
	0, 0, 897, 897, 0, 0, 3776, 3783, 1535, 0,
	897, 0, 897, 897, 0, 3789, 63, 3260, 3795, 0,
	0, 3796, 0, 2176, 2176, 2176, 0, 0, 0, 2566,
	2567, 64, 0, 0, 3268, 0, 0, 0, 3802, 0,
	0, 3799, 3806, 68, 0, 0, 0, 3809, 0, 0,
	3811, 897, 3812, 0, 3814, 3805, 0, 3816, 3803, 3808,
	0, 0, 2180, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1013, 0, 0, 73, 0, 0,
	0, 0, 1013, 3790, 3791, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1013, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1611, 2638, 2639,
	78, 2656, 2657, 2658, 0, 0, 0, 0, 0, 0,
	0, 89, 3813, 0, 0, 0, 79, 86, 2949, 0,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1076, 2661,
	2662, 2663, 0, 0, 1184, 0, 0, 0, 0, 1079,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2653, 0, 80, 0, 0, 215, 0,
	0, 0, 215, 0, 0, 0, 0, 215, 0, 3393,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 0, 215, 0, 215,
	0, 0, 0, 533, 0, 0, 0, 0, 0, 0,
	0, 0, 1283, 0, 0, 0, 0, 1861, 3393, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2001, 0, 1308, 1308, 1308, 0, 215, 0, 0,
	0, 0, 2644, 0, 0, 0, 0, 1337, 1338, 0,
	0, 0, 0, 0, 0, 848, 580, 0, 0, 0,
	705, 2262, 0, 0, 0, 0, 0, 0, 0, 215,
	0, 1177, 215, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 0, 0, 580, 0, 0, 0, 0,
	0, 0, 215, 0, 0, 2659, 0, 0, 0, 0,
	0, 215, 215, 0, 215, 0, 215, 0, 215, 0,
	215, 0, 0, 0, 0, 0, 0, 153, 84, 0,
	85, 0, 0, 1417, 1944, 0, 0, 1945, 0, 1946,
	0, 2654, 0, 0, 0, 0, 0, 0, 0, 187,
	215, 0, 0, 0, 0, 0, 0, 700, 0, 0,
	0, 123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 564, 0, 0, 0, 580, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 189, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2176, 2176,
	0, 1464, 1465, 0, 0, 0, 0, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1495, 157, 0, 0, 0, 0, 0, 1467,
	0, 188, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 181, 0, 0, 0, 0, 0, 2180, 2655, 182,
	0, 0, 0, 0, 0, 0, 1466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2176, 2176, 2176, 2176,
	2176, 2176, 2176, 2176, 2176, 2176, 2176, 2176, 2176, 2176,
	2176, 2176, 2176, 2176, 2176, 0, 2176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2001, 0,
	1464, 1465, 0, 0, 2940, 2941, 0, 2180, 2180, 0,
	0, 533, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1495, 0, 0, 0, 1472, 215, 0, 1467, 0,
	0, 0, 0, 0, 0, 533, 0, 0, 0, 2650,
	2651, 2652, 215, 1643, 533, 0, 2649, 2647, 2648, 2640,
	2641, 2642, 2643, 2645, 2646, 1466, 215, 0, 1652, 0,
	1184, 0, 0, 1494, 1496, 1486, 0, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 0, 0, 0, 0,
	1187, 0, 2638, 2639, 1199, 2656, 2657, 2658, 0, 0,
	0, 0, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009,
	3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019,
	3020, 0, 3024, 0, 1487, 549, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2180, 2180, 2180,
	0, 0, 0, 1258, 1489, 1490, 1491, 1492, 0, 0,
	0, 0, 0, 0, 1472, 0, 0, 2653, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2307, 0,
	0, 0, 0, 848, 0, 0, 215, 848, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	0, 1336, 1494, 1496, 0, 0, 0, 0, 0, 0,
	215, 1199, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 0, 1481, 1482, 0, 0,
	1209, 0, 1213, 0, 1219, 215, 2380, 0, 0, 0,
	0, 1488, 0, 0, 0, 0, 2644, 0, 0, 0,
	0, 0, 0, 1487, 1358, 0, 0, 0, 1207, 0,
	0, 215, 0, 0, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 0, 2415, 0, 0, 0, 2660, 0,
	0, 0, 0, 0, 2307, 0, 533, 0, 0, 2435,
	0, 0, 0, 0, 0, 215, 0, 0, 215, 2659,
	215, 1823, 215, 0, 0, 1830, 0, 1177, 0, 0,
	0, 0, 0, 0, 1339, 0, 2455, 705, 0, 2307,
	2307, 0, 1344, 0, 0, 0, 0, 0, 1283, 0,
	1849, 215, 1849, 0, 0, 2654, 0, 0, 0, 0,
	0, 0, 1493, 0, 0, 0, 0, 215, 1177, 215,
	0, 0, 1207, 0, 1207, 0, 0, 1177, 0, 1177,
	1488, 1177, 1468, 1469, 1470, 1471, 1473, 1474, 0, 0,
	1184, 0, 0, 0, 0, 0, 0, 0, 1396, 0,
	0, 0, 215, 215, 215, 215, 1177, 215, 0, 215,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1830, 0, 0, 1897, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 1914, 0, 0, 215, 0,
	0, 0, 0, 0, 0, 1924, 0, 1926, 0, 1928,
	0, 1930, 2655, 1931, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1517,
	1518, 1519, 1520, 1521, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1948, 0, 1484, 1480, 0, 1477, 1475,
	1476, 1468, 1469, 1470, 1471, 1473, 1474, 0, 1534, 0,
	0, 0, 0, 0, 1547, 0, 0, 63, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 64, 0, 0, 0, 0, 1207, 0, 0,
	0, 0, 2180, 2180, 68, 0, 0, 0, 2638, 2639,
	0, 2656, 2657, 2658, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2948, 0,
	0, 0, 0, 2650, 2651, 2652, 0, 0, 73, 0,
	2649, 2647, 2648, 2640, 2641, 2642, 2643, 2645, 2646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2176, 0,
	0, 78, 0, 2653, 0, 0, 0, 1605, 1605, 1605,
	0, 0, 89, 0, 0, 0, 0, 79, 86, 0,
	2180, 2180, 2180, 2180, 2180, 2180, 2180, 2180, 2180, 2180,
	2180, 2180, 2180, 2180, 2180, 2180, 2180, 2180, 2180, 0,
	2180, 2176, 0, 0, 215, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 533, 0, 80, 0, 0, 533,
	0, 0, 533, 0, 0, 533, 533, 0, 0, 0,
	848, 533, 2644, 0, 0, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1207, 0, 0, 0, 0, 1464, 1465, 0, 2246,
	0, 1199, 0, 0, 0, 0, 0, 0, 0, 1207,
	0, 0, 0, 0, 3400, 0, 0, 1495, 0, 0,
	0, 0, 0, 0, 1467, 2659, 0, 0, 2307, 2307,
	215, 0, 0, 0, 2307, 0, 0, 2768, 0, 0,
	0, 0, 0, 0, 0, 2307, 2768, 2176, 2307, 2768,
	2768, 1466, 0, 0, 0, 0, 0, 3425, 0, 0,
	0, 2654, 215, 215, 215, 0, 0, 0, 0, 0,
	0, 81, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 1177, 0, 2638, 2639, 0,
	2656, 2657, 2658, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 153, 84,
	0, 85, 0, 0, 0, 0, 0, 0, 2828, 0,
	0, 2830, 2307, 0, 0, 215, 0, 0, 0, 215,
	187, 1254, 0, 0, 0, 1882, 0, 0, 700, 0,
	1472, 0, 123, 1199, 0, 0, 1893, 1184, 2415, 0,
	0, 1177, 2653, 215, 0, 0, 2307, 0, 533, 1902,
	1903, 1904, 0, 0, 0, 2307, 0, 189, 2655, 0,
	0, 0, 0, 3529, 215, 215, 0, 0, 1494, 1496,
	0, 0, 0, 0, 1830, 1464, 1465, 0, 0, 0,
	124, 2406, 0, 0, 0, 0, 0, 215, 2415, 0,
	0, 2415, 0, 0, 157, 0, 1495, 0, 0, 0,
	0, 0, 188, 1467, 0, 0, 0, 0, 2437, 0,
	0, 1308, 181, 1308, 0, 1308, 0, 0, 0, 1487,
	182, 2644, 0, 0, 0, 0, 0, 0, 2918, 0,
	1466, 1177, 215, 0, 215, 0, 0, 0, 0, 0,
	0, 156, 0, 0, 2481, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2489, 0, 2492, 0, 0, 0, 0, 215, 0, 2650,
	2651, 2652, 0, 0, 2659, 0, 2649, 2647, 2648, 2640,
	2641, 2642, 2643, 2645, 2646, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2513, 1184, 2515, 1184, 0,
	2518, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2654, 0, 0, 0, 0, 0, 0, 0, 0, 1472,
	0, 0, 0, 2981, 0, 0, 1488, 0, 0, 0,
	0, 0, 0, 1308, 0, 0, 0, 0, 0, 0,
	0, 2546, 0, 0, 0, 0, 0, 0, 0, 0,
	1976, 0, 1980, 0, 0, 0, 0, 1494, 1496, 1994,
	0, 0, 0, 0, 0, 0, 2003, 2004, 2005, 2006,
	2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016,
	2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026,
	2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036,
	2037, 0, 2043, 0, 2045, 2046, 2047, 2048, 1487, 0,
	0, 0, 0, 0, 0, 215, 215, 2655, 0, 0,
	0, 0, 0, 0, 2072, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1534, 533, 533, 0,
	2087, 0, 0, 0, 1477, 1475, 1476, 1468, 1469, 1470,
	1471, 1473, 1474, 0, 0, 0, 2117, 2120, 2123, 2126,
	0, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 0, 0,
	1207, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2172,
	0, 2183, 2185, 2190, 0, 0, 0, 0, 0, 0,
	0, 0, 2180, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1488, 0, 0, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2650, 2651,
	2652, 0, 0, 0, 0, 2649, 2647, 2648, 2640, 2641,
	2642, 2643, 2645, 2646, 0, 2180, 0, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 63, 2374, 0, 0,
	0, 0, 0, 0, 0, 2307, 215, 0, 0, 0,
	0, 64, 0, 0, 0, 0, 0, 0, 0, 0,
	2455, 2455, 0, 68, 0, 0, 705, 705, 2307, 0,
	0, 2415, 2415, 0, 0, 705, 2307, 0, 0, 0,
	0, 0, 0, 215, 1475, 1476, 1468, 1469, 1470, 1471,
	1473, 1474, 0, 2760, 0, 0, 0, 73, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2180, 0, 0, 0, 0, 2445, 0, 0, 0,
	0, 0, 0, 0, 0, 2798, 2800, 2406, 0, 0,
	78, 1199, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 0, 0, 0, 0, 79, 86, 0, 906,
	0, 0, 3227, 0, 0, 2382, 0, 2384, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2180, 2180, 0, 0, 0, 0, 0, 2840, 0,
	0, 216, 2844, 0, 0, 80, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 0, 0, 216, 0, 0, 1207, 0, 215,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 0, 216, 0, 0, 1184, 1184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2307,
	2307, 2307, 0, 0, 0, 0, 0, 0, 0, 0,
	2897, 0, 1207, 0, 0, 0, 0, 0, 63, 0,
	2307, 0, 2768, 0, 0, 1207, 1207, 215, 0, 0,
	0, 0, 0, 64, 0, 2502, 0, 0, 215, 215,
	0, 0, 0, 0, 0, 68, 0, 0, 0, 0,
	0, 0, 2307, 0, 0, 2921, 3335, 1184, 0, 0,
	81, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 73,
	0, 1517, 1518, 0, 0, 0, 0, 0, 0, 0,
	2933, 0, 0, 0, 0, 0, 0, 153, 84, 0,
	85, 0, 0, 0, 0, 1207, 0, 0, 0, 0,
	0, 0, 78, 0, 0, 0, 0, 0, 0, 187,
	0, 0, 0, 89, 0, 0, 0, 700, 79, 86,
	0, 123, 0, 0, 0, 0, 2549, 2550, 0, 0,
	0, 0, 2556, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 189, 0, 0, 0,
	0, 2570, 2571, 0, 0, 0, 0, 2087, 0, 0,
	0, 0, 0, 0, 0, 0, 2578, 80, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 893, 0,
	0, 0, 2592, 157, 0, 2307, 0, 2768, 0, 0,
	3419, 188, 0, 0, 0, 0, 0, 0, 215, 2604,
	0, 181, 0, 0, 0, 0, 0, 0, 0, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 580, 0, 0, 0, 0, 0, 0, 0,
	1333, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3419, 615, 0, 0, 0, 0, 0, 0,
	2307, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3482, 0, 0, 615, 0, 0, 0, 0, 0, 0,
	0, 0, 1207, 0, 2190, 2190, 2190, 0, 0, 0,
	0, 0, 81, 0, 0, 0, 0, 0, 0, 1605,
	0, 0, 0, 0, 0, 215, 215, 2692, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2981, 0, 153,
	84, 0, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3419, 0, 1464, 1465, 0, 0, 0, 0,
	0, 187, 0, 0, 0, 0, 0, 0, 0, 700,
	0, 0, 2820, 123, 0, 1495, 0, 0, 0, 0,
	0, 0, 1467, 0, 2406, 0, 0, 848, 1014, 0,
	0, 0, 0, 3136, 0, 0, 2843, 0, 189, 0,
	0, 848, 3335, 0, 0, 0, 0, 2849, 3148, 1466,
	0, 0, 0, 0, 0, 215, 0, 0, 0, 1486,
	0, 124, 0, 0, 2768, 0, 0, 1483, 2785, 0,
	0, 0, 0, 0, 0, 157, 0, 0, 0, 0,
	0, 0, 0, 188, 0, 0, 0, 0, 0, 1207,
	0, 1207, 0, 181, 0, 0, 0, 2893, 2894, 0,
	0, 182, 0, 0, 0, 0, 3190, 0, 0, 2943,
	0, 0, 0, 0, 0, 3613, 0, 0, 0, 0,
	0, 1207, 1331, 0, 215, 0, 0, 0, 1489, 1490,
	1491, 1492, 0, 0, 0, 0, 215, 2307, 1472, 0,
	0, 0, 0, 216, 1085, 216, 216, 0, 1085, 216,
	1085, 0, 0, 215, 1085, 0, 0, 0, 0, 0,
	0, 0, 216, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1494, 1496, 2981, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1481, 1482, 0, 1085, 216, 216, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 0, 0,
	0, 0, 0, 0, 2307, 0, 0, 1487, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 216,
	216, 0, 0, 1085, 3419, 0, 0, 1085, 0, 0,
	0, 1085, 216, 216, 0, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1207, 0, 2307, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1994,
	0, 0, 0, 0, 0, 2935, 2936, 0, 0, 2939,
	3307, 0, 0, 2942, 1085, 0, 0, 0, 0, 0,
	0, 2406, 2946, 0, 0, 0, 1493, 0, 0, 0,
	0, 2953, 0, 0, 2692, 0, 0, 0, 216, 0,
	0, 0, 0, 0, 1488, 0, 0, 0, 2406, 2965,
	0, 0, 216, 0, 0, 3350, 0, 0, 0, 0,
	0, 0, 0, 1464, 1465, 0, 0, 0, 0, 2987,
	2988, 0, 2989, 2990, 2991, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1495, 0, 0, 0, 0, 0,
	2997, 1467, 0, 0, 2999, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1466, 0,
	0, 0, 0, 0, 0, 3027, 3028, 0, 1486, 0,
	0, 0, 0, 0, 0, 0, 1483, 0, 0, 0,
	3037, 0, 214, 0, 214, 214, 0, 0, 214, 0,
	0, 0, 0, 0, 0, 3046, 0, 0, 0, 1484,
	1480, 615, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473,
	1474, 0, 3121, 0, 0, 0, 0, 0, 2938, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3426, 0, 0, 0, 0, 0, 1489, 1490, 1491,
	1492, 0, 0, 214, 214, 0, 0, 1472, 0, 0,
	0, 0, 3076, 0, 0, 0, 214, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3085, 3088, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 214, 214,
	3172, 3173, 3174, 0, 0, 1494, 1496, 0, 0, 0,
	0, 214, 214, 3108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 1481,
	1482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 0, 216, 216, 216, 0, 0, 3520, 1184,
	216, 0, 0, 0, 0, 216, 1487, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1605, 0, 0, 214, 1085, 0,
	0, 0, 0, 3166, 0, 0, 0, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1493, 0, 0, 3579, 0,
	0, 0, 0, 0, 0, 3205, 3206, 0, 0, 0,
	0, 3210, 3211, 1488, 0, 0, 3214, 3215, 0, 0,
	0, 0, 0, 3219, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3223, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3228, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3621, 0, 0,
	1085, 1085, 216, 0, 0, 0, 0, 0, 1085, 3638,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3650, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 0, 0, 0,
	216, 0, 0, 0, 0, 216, 0, 0, 1484, 1480,
	0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474,
	0, 0, 0, 216, 0, 216, 0, 216, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3088, 0, 0,
	0, 1627, 0, 1014, 0, 0, 0, 214, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 1627, 214, 216, 0, 0, 0, 615,
	0, 0, 0, 0, 615, 0, 0, 0, 0, 0,
	0, 1085, 0, 1085, 0, 1085, 0, 0, 0, 0,
	929, 0, 0, 1085, 0, 0, 1085, 216, 0, 0,
	216, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	1085, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 0, 0, 0, 3088, 216,
	216, 0, 216, 0, 216, 0, 216, 0, 216, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3388, 3389, 3390, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 687, 216, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3398, 3399, 0, 0, 0, 0, 0, 0, 0, 0,
	669, 0, 0, 0, 0, 0, 0, 3406, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 882, 91, 0, 1085, 0, 0, 0,
	0, 0, 670, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 671, 0, 0, 0, 0, 0, 0, 3088,
	0, 615, 0, 0, 0, 0, 0, 3443, 0, 0,
	672, 0, 0, 0, 0, 0, 3450, 0, 0, 848,
	0, 0, 0, 0, 0, 3457, 0, 692, 0, 0,
	1464, 1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 0,
	1018, 0, 0, 0, 673, 214, 0, 217, 0, 214,
	1500, 1495, 0, 91, 214, 0, 0, 0, 1467, 0,
	0, 0, 1085, 1513, 674, 0, 0, 0, 0, 0,
	0, 0, 214, 0, 214, 0, 214, 0, 0, 0,
	3088, 3088, 0, 0, 675, 1466, 0, 676, 0, 0,
	0, 0, 0, 0, 0, 1486, 602, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 0,
	691, 825, 0, 0, 0, 0, 0, 0, 0, 0,
	843, 1085, 3541, 0, 0, 3544, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 0, 0, 214,
	0, 0, 0, 3088, 216, 0, 0, 1085, 0, 0,
	0, 0, 0, 1001, 1489, 1490, 1491, 1492, 0, 214,
	0, 0, 0, 0, 1472, 0, 0, 0, 615, 214,
	0, 214, 0, 214, 0, 214, 0, 214, 0, 3088,
	0, 0, 3088, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1504, 0, 860, 1514, 0, 0, 0,
	0, 0, 1494, 1496, 0, 0, 0, 214, 0, 0,
	678, 1085, 0, 0, 0, 0, 0, 1510, 0, 1511,
	0, 0, 0, 0, 0, 0, 1481, 1482, 0, 0,
	694, 0, 679, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 1502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1487, 216, 0, 0, 848, 0, 0,
	601, 0, 0, 0, 0, 216, 0, 680, 0, 0,
	681, 0, 0, 0, 0, 0, 689, 1512, 216, 682,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 1085, 1501, 0, 0, 1085, 0, 3667,
	3667, 3667, 0, 216, 0, 0, 0, 0, 0, 0,
	0, 683, 690, 0, 0, 0, 0, 0, 0, 684,
	0, 3688, 0, 0, 0, 0, 0, 0, 0, 216,
	0, 0, 686, 0, 0, 0, 216, 685, 0, 0,
	0, 0, 1493, 0, 0, 0, 0, 0, 0, 0,
	603, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1488, 688, 3667, 216, 0, 0, 216, 0, 216, 0,
	216, 0, 0, 0, 0, 0, 1085, 1085, 0, 1085,
	0, 0, 1505, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 216,
	0, 0, 0, 1014, 0, 0, 3088, 0, 3088, 0,
	0, 0, 0, 0, 0, 216, 0, 216, 0, 1014,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 0, 1018, 0, 0, 0, 1018,
	0, 1018, 0, 0, 0, 1018, 0, 0, 0, 0,
	216, 216, 216, 216, 0, 216, 0, 216, 0, 3667,
	3784, 0, 0, 0, 0, 0, 0, 3788, 1503, 0,
	0, 1478, 1479, 1485, 1506, 1484, 1480, 0, 1477, 1475,
	1476, 1468, 1469, 1470, 1471, 1473, 1474, 0, 216, 0,
	0, 3234, 0, 0, 1018, 3233, 216, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1018, 0, 0, 0, 1018, 0,
	0, 0, 1018, 214, 0, 0, 0, 0, 0, 0,
	0, 0, 1018, 0, 214, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 0, 91, 0, 91,
	0, 91, 615, 0, 0, 1018, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 860, 0, 0, 0, 860, 214, 630,
	0, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	0, 0, 1165, 0, 0, 0, 1165, 0, 0, 0,
	0, 0, 631, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 0, 0, 214, 0, 214, 0, 214,
	0, 843, 91, 91, 0, 0, 0, 0, 0, 0,
	0, 91, 0, 0, 632, 650, 0, 0, 0, 91,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 633,
	0, 0, 634, 1085, 214, 0, 214, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 657,
	0, 0, 0, 0, 0, 635, 0, 0, 0, 0,
	0, 0, 0, 91, 0, 1085, 655, 0, 0, 214,
	214, 214, 214, 0, 214, 0, 214, 0, 0, 0,
	0, 0, 1085, 0, 0, 0, 636, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1085, 0,
	0, 0, 220, 0, 0, 0, 637, 214, 0, 638,
	0, 0, 0, 0, 659, 214, 0, 0, 602, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 825,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1527, 0, 0,
	216, 216, 216, 0, 0, 0, 0, 608, 0, 216,
	0, 0, 0, 1018, 1533, 1018, 0, 0, 1539, 0,
	0, 0, 216, 0, 658, 0, 0, 608, 0, 0,
	0, 1085, 1018, 641, 0, 0, 0, 0, 0, 0,
	0, 0, 1085, 0, 0, 1680, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 1018, 0,
	0, 0, 0, 216, 0, 0, 1085, 216, 0, 0,
	0, 0, 639, 0, 0, 0, 0, 1085, 0, 1018,
	0, 0, 642, 0, 0, 0, 0, 0, 0, 0,
	1464, 1465, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 643, 0, 0, 0, 0, 0,
	0, 1495, 216, 216, 0, 0, 0, 0, 1467, 0,
	0, 0, 0, 0, 0, 0, 0, 1085, 1085, 0,
	0, 0, 601, 0, 0, 216, 1625, 0, 1628, 0,
	91, 0, 651, 0, 0, 1466, 0, 0, 0, 0,
	0, 644, 0, 0, 0, 1486, 0, 0, 0, 0,
	0, 1014, 0, 1483, 0, 0, 0, 0, 0, 0,
	649, 0, 0, 0, 0, 0, 1014, 0, 1085, 0,
	216, 1085, 216, 645, 0, 0, 662, 0, 661, 0,
	0, 646, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 647, 2937, 1627, 0, 0, 654,
	0, 1018, 1018, 0, 663, 216, 660, 0, 0, 1018,
	0, 0, 603, 0, 1489, 1490, 1491, 1492, 0, 1165,
	0, 0, 0, 0, 1472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1085, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	860, 0, 1494, 1496, 0, 0, 1165, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	214, 214, 0, 0, 0, 0, 1481, 1482, 1627, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1487, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1018, 0, 1018, 0, 1018, 0, 0, 0,
	0, 0, 214, 0, 1018, 0, 214, 1018, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1018, 1018, 1018, 0, 0, 0, 0, 0, 0, 0,
	1014, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1085, 0, 0, 0,
	0, 214, 214, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1493, 0, 0, 0, 1165, 0, 0, 0,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 0,
	1488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 843, 0, 843, 0, 214,
	0, 214, 0, 0, 0, 1680, 1680, 1018, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1085, 0, 0, 1085, 0, 0, 0, 216,
	0, 0, 0, 0, 214, 0, 0, 0, 216, 0,
	0, 0, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 0, 0, 216, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 1082, 0, 0,
	0, 1082, 0, 1196, 0, 1484, 1480, 1196, 1477, 1475,
	1476, 1468, 1469, 1470, 1471, 1473, 1474, 0, 0, 0,
	1085, 1085, 1085, 1018, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1085, 0, 0, 0,
	0, 216, 1085, 0, 0, 0, 0, 0, 0, 0,
	825, 0, 0, 825, 825, 0, 1196, 0, 0, 0,
	0, 0, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1018, 0, 0, 0, 0,
	0, 0, 1018, 0, 0, 0, 1196, 0, 0, 0,
	1196, 1018, 0, 0, 1196, 0, 0, 0, 2061, 0,
	0, 0, 1014, 1014, 1196, 0, 0, 0, 1018, 0,
	0, 0, 843, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1533, 0, 1165, 0, 1533, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 898, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1196, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 1018, 1085, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1085, 0, 0, 0, 0, 0, 0, 0, 1001, 0,
	0, 0, 1018, 0, 0, 0, 0, 0, 0, 0,
	1165, 0, 0, 0, 1628, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 0, 0, 0, 1680,
	0, 0, 0, 0, 0, 1085, 216, 216, 214, 0,
	1085, 0, 0, 0, 0, 91, 0, 214, 0, 0,
	0, 0, 0, 0, 1018, 214, 0, 0, 1018, 0,
	0, 0, 214, 216, 0, 0, 0, 0, 0, 1085,
	216, 0, 0, 0, 1085, 0, 0, 0, 0, 1165,
	0, 0, 0, 1014, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1165, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1085, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1018, 1018, 0,
	1018, 91, 0, 0, 0, 1085, 0, 0, 0, 0,
	0, 0, 1018, 0, 1464, 1465, 0, 1497, 1498, 1499,
	1507, 1508, 1509, 0, 0, 0, 0, 0, 0, 0,
	91, 0, 0, 0, 1500, 1495, 0, 0, 0, 0,
	0, 0, 1467, 0, 1085, 0, 0, 1513, 0, 0,
	0, 0, 91, 0, 91, 0, 0, 1085, 0, 1165,
	0, 0, 0, 0, 0, 0, 216, 0, 0, 1466,
	0, 0, 0, 0, 1082, 0, 0, 0, 0, 1486,
	0, 0, 0, 608, 0, 0, 0, 1483, 608, 0,
	0, 0, 91, 0, 0, 91, 0, 0, 0, 0,
	1196, 0, 0, 0, 0, 0, 0, 0, 1014, 0,
	0, 1165, 0, 0, 0, 0, 1014, 0, 0, 0,
	0, 1082, 91, 0, 0, 0, 0, 0, 0, 1627,
	0, 1085, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1489, 1490,
	1491, 1492, 0, 0, 0, 0, 0, 0, 1472, 0,
	0, 0, 0, 216, 216, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 0,
	91, 0, 0, 0, 0, 214, 214, 1504, 0, 0,
	1514, 0, 0, 0, 0, 0, 1494, 1496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1510, 214, 1511, 0, 0, 0, 0, 0, 214,
	1481, 1482, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1487, 0, 0,
	0, 0, 0, 1196, 1196, 0, 0, 0, 0, 0,
	0, 1082, 0, 216, 0, 0, 1085, 0, 0, 0,
	0, 1512, 0, 0, 0, 0, 1085, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 2061, 0, 1501, 0,
	0, 0, 0, 1085, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1533, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1018, 1018, 0, 0, 0, 0, 0,
	0, 0, 216, 0, 1085, 0, 1493, 0, 1018, 0,
	0, 0, 0, 0, 216, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1488, 214, 1018, 0, 0, 0,
	0, 216, 0, 0, 0, 0, 0, 0, 1018, 0,
	0, 0, 0, 1018, 0, 0, 1505, 0, 0, 0,
	0, 0, 0, 0, 1196, 1680, 1196, 0, 1196, 1018,
	0, 1083, 0, 0, 0, 1083, 1196, 1197, 0, 1196,
	0, 1197, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1196, 1196, 1196, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1680, 0, 0, 0, 0,
	0, 0, 608, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1001, 0, 0, 0,
	1197, 0, 214, 214, 0, 0, 0, 0, 0, 0,
	0, 1001, 1503, 0, 0, 1478, 1479, 1485, 1506, 1484,
	1480, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473,
	1474, 0, 1018, 0, 0, 2613, 0, 0, 0, 2614,
	1197, 0, 0, 1018, 1197, 0, 0, 0, 1197, 0,
	0, 0, 1018, 0, 0, 0, 0, 0, 1197, 1464,
	1465, 0, 0, 0, 0, 0, 0, 1018, 0, 1082,
	0, 1165, 0, 0, 0, 0, 0, 0, 1018, 0,
	1495, 0, 0, 0, 0, 0, 0, 1467, 0, 0,
	0, 0, 1018, 0, 0, 0, 0, 0, 0, 0,
	0, 1197, 214, 1165, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1466, 0, 0, 91, 91, 0,
	1165, 91, 0, 0, 1486, 0, 0, 0, 1018, 1018,
	0, 0, 1483, 0, 0, 0, 1165, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 860, 0, 91,
	91, 0, 0, 91, 0, 1082, 0, 0, 0, 0,
	0, 860, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 0, 0, 2555, 0, 0, 0, 0, 1018,
	0, 0, 1018, 214, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1489, 1490, 1491, 1492, 0, 0, 0,
	214, 0, 0, 1472, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1001, 0, 0, 843, 0,
	0, 0, 0, 0, 1082, 0, 0, 0, 0, 1165,
	0, 0, 0, 0, 0, 0, 1680, 0, 0, 0,
	0, 1494, 1496, 91, 91, 0, 0, 0, 0, 1165,
	1082, 0, 0, 1018, 0, 0, 130, 0, 0, 0,
	0, 0, 63, 0, 0, 1481, 1482, 0, 0, 0,
	1018, 0, 0, 0, 0, 0, 0, 64, 125, 0,
	1680, 1680, 0, 0, 0, 0, 0, 0, 0, 68,
	0, 0, 1487, 0, 0, 0, 0, 0, 58, 0,
	0, 0, 0, 0, 0, 42, 0, 127, 0, 1680,
	1680, 0, 0, 0, 1196, 0, 0, 0, 0, 0,
	0, 41, 0, 73, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1680, 0, 0, 0, 1082, 44, 59, 0, 0, 0,
	0, 45, 0, 0, 0, 0, 78, 0, 0, 128,
	0, 0, 0, 0, 1018, 1018, 43, 89, 1083, 0,
	0, 0, 79, 86, 0, 0, 1165, 0, 0, 1165,
	0, 1493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1197, 0, 1082, 1018, 0, 1488,
	1196, 0, 0, 46, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 80, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1165, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1165, 0, 0,
	0, 0, 91, 0, 0, 0, 0, 0, 0, 1196,
	1196, 0, 1196, 0, 0, 0, 0, 1001, 1001, 0,
	0, 0, 0, 1018, 1196, 0, 1018, 0, 0, 0,
	0, 0, 0, 0, 0, 1680, 0, 0, 0, 0,
	0, 0, 0, 0, 1484, 1480, 0, 1477, 1475, 1476,
	1468, 1469, 1470, 1471, 1473, 1474, 0, 0, 0, 0,
	1018, 0, 0, 0, 0, 0, 81, 0, 0, 0,
	0, 0, 0, 0, 0, 1018, 47, 1197, 1197, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 1018, 1018, 1018, 0, 0, 0, 60, 0, 0,
	0, 0, 50, 153, 84, 0, 85, 1018, 48, 0,
	0, 0, 129, 1018, 0, 0, 0, 0, 49, 0,
	0, 0, 0, 0, 1165, 187, 0, 0, 0, 0,
	0, 0, 0, 53, 0, 1018, 0, 123, 0, 0,
	0, 0, 0, 0, 0, 0, 1680, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 189, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1001, 157,
	0, 0, 0, 0, 0, 0, 0, 188, 1197, 0,
	1197, 0, 1197, 0, 0, 0, 0, 181, 0, 0,
	1197, 0, 0, 1197, 0, 182, 0, 0, 0, 0,
	0, 0, 91, 0, 0, 0, 1197, 1197, 1197, 0,
	1018, 0, 0, 0, 0, 0, 156, 0, 1018, 3,
	0, 0, 1018, 0, 1018, 0, 0, 0, 0, 0,
	0, 1018, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1018, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1165, 0, 0, 0, 0, 0, 1018, 0, 0, 0,
	0, 1018, 0, 0, 0, 0, 1464, 1465, 0, 0,
	0, 0, 1165, 0, 0, 0, 1082, 0, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 1495, 0, 0,
	1018, 0, 0, 0, 1467, 1018, 0, 0, 0, 0,
	0, 0, 0, 1001, 0, 0, 0, 0, 1082, 0,
	0, 1001, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1466, 0, 0, 0, 1082, 0, 0, 0, 0,
	0, 1486, 0, 0, 0, 0, 1018, 0, 0, 1483,
	0, 1082, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508,
	1509, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1500, 1495, 0, 0, 1018, 0, 0, 1083,
	1467, 0, 0, 0, 0, 1513, 0, 0, 0, 0,
	0, 2548, 0, 0, 0, 0, 1680, 0, 0, 1165,
	0, 1165, 0, 0, 0, 0, 91, 1466, 0, 0,
	1489, 1490, 1491, 1492, 0, 1018, 91, 1486, 1165, 0,
	1472, 0, 0, 0, 0, 1483, 0, 0, 1018, 0,
	0, 0, 0, 0, 0, 0, 91, 0, 0, 0,
	0, 0, 0, 0, 1082, 0, 0, 0, 1083, 0,
	0, 0, 1680, 0, 0, 1196, 0, 0, 1494, 1496,
	0, 0, 0, 1165, 1082, 0, 0, 0, 1165, 0,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 1196,
	0, 0, 1481, 1482, 0, 0, 1489, 1490, 1491, 1492,
	1196, 0, 0, 0, 0, 0, 1472, 1165, 0, 0,
	0, 0, 1018, 0, 0, 1018, 0, 0, 0, 1487,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1504, 0, 0, 1514, 0,
	0, 0, 0, 0, 1494, 1496, 0, 0, 1197, 0,
	1196, 1196, 0, 1165, 0, 0, 0, 0, 0, 1510,
	0, 1511, 0, 1680, 0, 0, 0, 0, 1481, 1482,
	0, 0, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 1165, 1502, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1487, 0, 0, 0, 0,
	0, 1082, 0, 0, 1082, 0, 0, 0, 1493, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1512,
	0, 0, 1165, 0, 0, 0, 1488, 0, 0, 0,
	1083, 0, 0, 0, 1197, 1165, 1501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1018, 2061, 0,
	0, 0, 0, 0, 0, 0, 0, 1018, 1018, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 860,
	0, 0, 0, 0, 1018, 1082, 0, 0, 0, 0,
	0, 0, 0, 0, 1493, 0, 0, 0, 0, 0,
	0, 0, 1082, 0, 0, 0, 0, 0, 749, 0,
	785, 0, 1488, 0, 0, 0, 0, 0, 0, 1165,
	0, 0, 0, 1197, 1197, 1018, 1197, 0, 0, 0,
	0, 0, 756, 0, 1505, 0, 0, 0, 1197, 0,
	0, 0, 0, 0, 0, 0, 0, 768, 754, 0,
	0, 1484, 1480, 91, 1477, 1475, 1476, 1468, 1469, 1470,
	1471, 1473, 1474, 0, 0, 0, 0, 0, 0, 0,
	755, 0, 0, 0, 0, 758, 0, 0, 0, 0,
	791, 0, 0, 0, 0, 0, 0, 0, 765, 766,
	0, 0, 0, 0, 778, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 786, 760,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1503, 0, 0, 1478, 1479, 1485, 1506, 1484, 1480, 1082,
	1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 784,
	0, 0, 0, 2083, 0, 0, 0, 2084, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 0,
	0, 91, 0, 0, 0, 761, 0, 0, 0, 0,
	0, 0, 0, 753, 1464, 1465, 0, 1497, 1498, 1499,
	1507, 1508, 1509, 0, 0, 0, 0, 0, 0, 0,
	0, 762, 763, 0, 1500, 1495, 0, 0, 0, 0,
	0, 0, 1467, 0, 0, 0, 0, 1513, 770, 769,
	0, 0, 1165, 0, 0, 1196, 764, 860, 1196, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1466,
	0, 0, 0, 790, 0, 0, 0, 0, 0, 1486,
	0, 0, 0, 0, 0, 0, 0, 1483, 0, 0,
	0, 0, 1196, 787, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1196, 1196, 1196, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 759, 0, 0, 0, 1196,
	0, 0, 0, 0, 0, 1082, 0, 0, 1489, 1490,
	1491, 1492, 757, 0, 0, 0, 782, 783, 1472, 0,
	0, 0, 0, 0, 0, 0, 0, 1082, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1083, 0, 780, 0, 0, 0, 0, 1504, 0, 776,
	1514, 0, 773, 0, 0, 0, 1494, 1496, 774, 0,
	0, 751, 0, 788, 0, 0, 0, 0, 0, 0,
	0, 1510, 1083, 1511, 0, 0, 0, 0, 0, 752,
	1481, 1482, 0, 0, 0, 0, 0, 0, 0, 1083,
	775, 0, 0, 0, 772, 0, 1502, 0, 0, 0,
	0, 0, 0, 789, 0, 1083, 0, 1487, 0, 0,
	0, 777, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1512, 779, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1082, 0, 1082, 0, 1501, 0,
	0, 0, 0, 0, 781, 0, 0, 0, 0, 0,
	0, 0, 0, 1082, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1493, 0, 1083, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1082, 1197,
	0, 0, 0, 1082, 1488, 0, 0, 0, 1083, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1197, 0, 0, 1505, 0, 0, 0,
	0, 0, 1082, 0, 1197, 0, 0, 1196, 0, 0,
	0, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508, 1509,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1500, 1495, 0, 0, 0, 0, 0, 0, 1467,
	0, 0, 0, 0, 1513, 0, 0, 0, 1082, 0,
	0, 0, 0, 0, 1197, 1197, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1486, 0, 1082, 0,
	0, 0, 1503, 0, 1483, 1478, 1479, 1485, 1506, 1484,
	1480, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473,
	1474, 0, 0, 0, 0, 1083, 0, 0, 1083, 3232,
	0, 0, 0, 0, 0, 0, 0, 1082, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1082, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1489, 1490, 1491, 1492, 0,
	0, 0, 0, 0, 0, 1472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1464, 1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 1083,
	0, 0, 0, 0, 1504, 0, 0, 1514, 0, 0,
	1500, 1495, 0, 1494, 1496, 0, 1083, 0, 1467, 0,
	0, 0, 0, 1513, 1082, 0, 0, 1196, 1510, 0,
	1511, 0, 0, 0, 0, 0, 0, 1481, 1482, 0,
	0, 0, 0, 0, 0, 1466, 0, 0, 0, 0,
	0, 0, 0, 1502, 0, 1486, 0, 0, 0, 0,
	0, 0, 0, 1483, 1487, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1512, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1501, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1489, 1490, 1491, 1492, 0, 0,
	0, 0, 0, 0, 1472, 0, 0, 0, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1493, 0, 0, 0, 0, 0, 1196,
	0, 0, 0, 1504, 0, 0, 1514, 0, 0, 1196,
	1196, 1488, 1494, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1196, 1510, 0, 1511,
	0, 0, 0, 1505, 0, 0, 1481, 1482, 0, 0,
	1464, 1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 0,
	0, 0, 1502, 0, 0, 0, 0, 0, 0, 0,
	1500, 1495, 0, 1487, 0, 0, 0, 1082, 1467, 0,
	0, 0, 0, 1513, 0, 0, 0, 0, 0, 1197,
	0, 0, 1197, 0, 0, 0, 0, 1512, 0, 0,
	0, 0, 0, 0, 0, 1466, 0, 0, 0, 0,
	0, 0, 0, 0, 1501, 1486, 0, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 1197, 0, 0, 1503,
	0, 0, 1478, 1479, 1485, 1506, 1484, 1480, 0, 1477,
	1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 0, 0,
	0, 0, 0, 0, 0, 0, 2951, 1197, 1197, 1197,
	0, 0, 1493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1197, 0, 0, 0, 0, 0, 1083,
	1488, 0, 0, 0, 1489, 1490, 1491, 1492, 0, 0,
	0, 0, 0, 0, 1472, 0, 0, 0, 0, 0,
	0, 1083, 1505, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1464, 1465, 0, 1497, 1498, 1499, 1507,
	1508, 1509, 0, 1504, 0, 0, 1514, 0, 0, 0,
	0, 0, 1494, 1496, 1495, 0, 0, 0, 0, 0,
	0, 1467, 0, 0, 0, 0, 1513, 1510, 0, 1511,
	0, 0, 0, 0, 0, 0, 1481, 1482, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1466, 0,
	0, 0, 1502, 0, 0, 0, 0, 0, 1486, 0,
	0, 0, 0, 1487, 0, 0, 1483, 0, 1503, 0,
	0, 1478, 1479, 1485, 1506, 1484, 1480, 0, 1477, 1475,
	1476, 1468, 1469, 1470, 1471, 1473, 1474, 1512, 0, 0,
	0, 0, 0, 0, 0, 2616, 0, 0, 1083, 0,
	1083, 0, 0, 0, 1501, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1489, 1490, 1491,
	1492, 0, 0, 0, 0, 0, 0, 1472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 1504, 1083, 0, 1514,
	1488, 0, 0, 0, 0, 1494, 1496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1505, 0, 0, 0, 1083, 0, 0, 1481,
	1482, 1197, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1487, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 1503, 0,
	0, 1478, 1479, 1485, 1506, 1484, 1480, 0, 1477, 1475,
	1476, 1468, 1469, 1470, 1471, 1473, 1474, 0, 0, 0,
	0, 0, 0, 0, 0, 2615, 0, 0, 0, 0,
	0, 1083, 0, 0, 0, 1493, 0, 0, 0, 0,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 1488, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1505, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 1197, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1503, 0, 0, 1478, 1479, 1485, 1506, 1484, 1480,
	0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1197, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1197, 1197, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1080,
	1197, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 226, 227,
	228, 1086, 229, 230, 1087, 1088, 1089, 0, 1090, 479,
	1091, 1092, 1093, 1094, 231, 233, 232, 234, 235, 480,
	481, 1083, 482, 236, 483, 1095, 237, 238, 239, 240,
	241, 1096, 1097, 242, 484, 485, 486, 1098, 243, 244,
	487, 1099, 1166, 1100, 245, 246, 247, 248, 249, 250,
	251, 0, 1101, 253, 254, 255, 252, 1102, 256, 0,
	257, 258, 259, 1103, 260, 959, 261, 262, 1104, 1105,
	1107, 1106, 1108, 1109, 1110, 263, 264, 265, 266, 0,
	267, 488, 489, 1111, 271, 268, 269, 1112, 272, 270,
	1113, 273, 1114, 1115, 274, 275, 276, 1116, 277, 1117,
	278, 279, 1118, 280, 281, 490, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 491, 492, 1119, 221, 1120,
	0, 0, 0, 0, 292, 293, 294, 493, 0, 0,
	0, 295, 1121, 296, 1122, 1123, 960, 297, 298, 494,
	495, 299, 300, 1124, 301, 496, 1125, 497, 302, 1126,
	303, 304, 305, 306, 307, 498, 499, 500, 360, 962,
	308, 309, 1127, 310, 311, 312, 313, 0, 0, 0,
	222, 314, 315, 317, 1128, 961, 316, 501, 502, 1129,
	503, 1130, 318, 963, 504, 964, 319, 320, 321, 965,
	322, 0, 0, 0, 323, 324, 325, 326, 327, 1131,
	329, 328, 1132, 330, 505, 966, 331, 332, 967, 1133,
	333, 334, 335, 1134, 1135, 336, 337, 338, 339, 0,
	340, 341, 343, 345, 342, 344, 349, 346, 347, 348,
	351, 0, 350, 968, 352, 353, 356, 357, 355, 969,
	354, 1136, 223, 970, 358, 1137, 506, 359, 507, 361,
	362, 1138, 0, 363, 0, 1139, 1140, 365, 366, 367,
	1141, 1142, 368, 369, 508, 971, 370, 972, 509, 371,
	364, 372, 373, 374, 375, 376, 377, 378, 1143, 379,
	380, 510, 511, 512, 381, 513, 382, 383, 1144, 384,
	0, 385, 386, 387, 388, 389, 390, 391, 514, 392,
	393, 1145, 0, 0, 0, 0, 0, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 1146, 403, 973,
	404, 405, 406, 407, 515, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 1147, 421, 422, 420, 423,
	424, 425, 1148, 426, 410, 411, 427, 428, 974, 429,
	430, 516, 0, 431, 1149, 432, 433, 434, 435, 412,
	436, 441, 517, 437, 438, 439, 440, 518, 1150, 443,
	444, 442, 1151, 445, 446, 447, 448, 449, 286, 450,
	1152, 451, 519, 520, 521, 522, 1153, 458, 1154, 452,
	453, 523, 454, 524, 1155, 455, 456, 457, 0, 459,
	460, 1156, 1157, 461, 462, 463, 465, 466, 464, 467,
	1158, 468, 1159, 0, 469, 470, 471, 525, 526, 527,
	1160, 473, 472, 528, 1161, 1162, 1163, 1164, 474, 475,
	529, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1080, 0, 0, 0,
	0, 0, 0, 0, 2224, 0, 0, 0, 0, 0,
	0, 0, 2225, 224, 225, 226, 227, 228, 1086, 229,
	230, 1087, 1088, 1089, 0, 1090, 479, 1091, 1092, 1093,
	1094, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 1095, 237, 238, 239, 240, 241, 1096, 1097,
	242, 484, 485, 486, 1098, 243, 244, 487, 1099, 1166,
	1100, 245, 246, 247, 248, 249, 250, 251, 0, 1101,
	253, 254, 255, 252, 1102, 256, 0, 257, 258, 259,
	1103, 260, 959, 261, 262, 1104, 1105, 1107, 1106, 1108,
	1109, 1110, 263, 264, 265, 266, 0, 267, 488, 489,
	1111, 271, 268, 269, 1112, 272, 270, 1113, 273, 1114,
	1115, 274, 275, 276, 1116, 277, 1117, 278, 279, 1118,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 491, 492, 1119, 221, 1120, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 1121,
	296, 1122, 1123, 960, 297, 298, 494, 495, 299, 300,
	1124, 301, 496, 1125, 497, 302, 1126, 303, 304, 305,
	306, 307, 498, 499, 500, 360, 962, 308, 309, 1127,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 1128, 961, 316, 501, 502, 1129, 503, 1130, 318,
	963, 504, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 1131, 329, 328, 1132,
	330, 505, 966, 331, 332, 967, 1133, 333, 334, 335,
	1134, 1135, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 1136, 223,
	970, 358, 1137, 506, 359, 507, 361, 362, 1138, 0,
	363, 0, 1139, 1140, 365, 366, 367, 1141, 1142, 368,
	369, 508, 971, 370, 972, 509, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 1143, 379, 380, 510, 511,
	512, 381, 513, 382, 383, 1144, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 1145, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 1146, 403, 973, 404, 405, 406,
	407, 515, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 1147, 421, 422, 420, 423, 424, 425, 1148,
	426, 410, 411, 427, 428, 974, 429, 430, 516, 0,
	431, 1149, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 518, 1150, 443, 444, 442, 1151,
	445, 446, 447, 448, 449, 286, 450, 1152, 451, 519,
	520, 521, 522, 1153, 458, 1154, 452, 453, 523, 454,
	524, 1155, 455, 456, 457, 0, 459, 460, 1156, 1157,
	461, 462, 463, 465, 466, 464, 467, 1158, 468, 1159,
	0, 469, 470, 471, 525, 526, 527, 1160, 473, 472,
	528, 1161, 1162, 1163, 1164, 474, 475, 529, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1080, 0, 0, 0, 0, 2959, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2961, 224, 225,
	226, 227, 228, 1086, 229, 230, 1087, 1088, 1089, 0,
	1090, 479, 1091, 1092, 1093, 1094, 231, 233, 232, 234,
	235, 480, 481, 0, 482, 236, 483, 1095, 237, 238,
	239, 240, 241, 1096, 1097, 242, 484, 485, 486, 1098,
	243, 244, 487, 1099, 1166, 1100, 245, 246, 247, 248,
	249, 250, 251, 0, 1101, 253, 254, 255, 252, 1102,
	256, 0, 257, 258, 259, 1103, 260, 959, 261, 262,
	1104, 1105, 1107, 1106, 1108, 1109, 1110, 263, 264, 265,
	266, 0, 267, 488, 489, 1111, 271, 268, 269, 1112,
	272, 270, 1113, 273, 1114, 1115, 274, 275, 276, 1116,
	277, 1117, 278, 279, 1118, 280, 281, 490, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 491, 492, 1119,
	221, 1120, 0, 0, 0, 0, 292, 293, 294, 493,
	0, 0, 0, 295, 1121, 296, 1122, 1123, 960, 297,
	298, 494, 495, 299, 300, 1124, 301, 496, 1125, 497,
	302, 1126, 303, 304, 305, 306, 307, 498, 499, 500,
	360, 962, 308, 309, 1127, 310, 311, 312, 313, 0,
	0, 0, 222, 314, 315, 317, 1128, 961, 316, 501,
	502, 1129, 503, 1130, 318, 963, 504, 964, 319, 320,
	321, 965, 322, 0, 0, 0, 323, 324, 325, 326,
	327, 1131, 329, 328, 1132, 330, 505, 966, 331, 332,
	967, 1133, 333, 334, 335, 1134, 1135, 336, 337, 338,
	339, 0, 340, 341, 343, 345, 342, 344, 349, 346,
	347, 348, 351, 0, 350, 968, 352, 353, 356, 357,
	355, 969, 354, 1136, 223, 970, 358, 1137, 506, 359,
	507, 361, 362, 1138, 0, 363, 0, 1139, 1140, 365,
	366, 367, 1141, 1142, 368, 369, 508, 971, 370, 972,
	509, 371, 364, 372, 373, 374, 375, 376, 377, 378,
	1143, 379, 380, 510, 511, 512, 381, 513, 382, 383,
	1144, 384, 0, 385, 386, 387, 388, 389, 390, 391,
	514, 392, 393, 1145, 0, 0, 0, 0, 0, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 1146,
	403, 973, 404, 405, 406, 407, 515, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 1147, 421, 422,
	420, 423, 424, 425, 1148, 426, 410, 411, 427, 428,
	974, 429, 430, 516, 0, 431, 1149, 432, 433, 434,
	435, 412, 436, 441, 517, 437, 438, 439, 440, 518,
	1150, 443, 444, 442, 1151, 445, 446, 447, 448, 449,
	286, 450, 1152, 451, 519, 520, 521, 522, 1153, 458,
	1154, 452, 453, 523, 454, 524, 1155, 455, 456, 457,
	0, 459, 460, 1156, 1157, 461, 462, 463, 465, 466,
	464, 467, 1158, 468, 1159, 0, 469, 470, 471, 525,
	526, 527, 1160, 473, 472, 528, 1161, 1162, 1163, 1164,
	474, 475, 529, 476, 477, 478, 0, 0, 0, 0,
	1080, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3259, 224, 225, 226,
	227, 228, 1086, 229, 230, 1087, 1088, 1089, 0, 1090,
	479, 1091, 1092, 1093, 1094, 231, 233, 232, 234, 235,
	480, 481, 0, 482, 236, 483, 1095, 237, 238, 239,
	240, 241, 1096, 1097, 242, 484, 485, 486, 1098, 243,
	244, 487, 1099, 1166, 1100, 245, 246, 247, 248, 249,
	250, 251, 0, 1101, 253, 254, 255, 252, 1102, 256,
	0, 257, 258, 259, 1103, 260, 959, 261, 262, 1104,
	1105, 1107, 1106, 1108, 1109, 1110, 263, 264, 265, 266,
	0, 267, 488, 489, 1111, 271, 268, 269, 1112, 272,
	270, 1113, 273, 1114, 1115, 274, 275, 276, 1116, 277,
	1117, 278, 279, 1118, 280, 281, 490, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 491, 492, 1119, 221,
	1120, 0, 0, 0, 0, 292, 293, 294, 493, 0,
	0, 0, 295, 1121, 296, 1122, 1123, 960, 297, 298,
	494, 495, 299, 300, 1124, 301, 496, 1125, 497, 302,
	1126, 303, 304, 305, 306, 307, 498, 499, 500, 360,
	962, 308, 309, 1127, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 1128, 961, 316, 501, 502,
	1129, 503, 1130, 318, 963, 504, 964, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	1131, 329, 328, 1132, 330, 505, 966, 331, 332, 967,
	1133, 333, 334, 335, 1134, 1135, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 1136, 223, 970, 358, 1137, 506, 359, 507,
	361, 362, 1138, 0, 363, 0, 1139, 1140, 365, 366,
	367, 1141, 1142, 368, 369, 508, 971, 370, 972, 509,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 1143,
	379, 380, 510, 511, 512, 381, 513, 382, 383, 1144,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 514,
	392, 393, 1145, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 1146, 403,
	973, 404, 405, 406, 407, 515, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 1147, 421, 422, 420,
	423, 424, 425, 1148, 426, 410, 411, 427, 428, 974,
	429, 430, 516, 0, 431, 1149, 432, 433, 434, 435,
	412, 436, 441, 517, 437, 438, 439, 440, 518, 1150,
	443, 444, 442, 1151, 445, 446, 447, 448, 449, 286,
	450, 1152, 451, 519, 520, 521, 522, 1153, 458, 1154,
	452, 453, 523, 454, 524, 1155, 455, 456, 457, 0,
	459, 460, 1156, 1157, 461, 462, 463, 465, 466, 464,
	467, 1158, 468, 1159, 0, 469, 470, 471, 525, 526,
	527, 1160, 473, 472, 528, 1161, 1162, 1163, 1164, 474,
	475, 529, 476, 477, 478, 1080, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3394, 0, 224, 225, 226, 227, 228, 1086, 229, 230,
	1087, 1088, 1089, 0, 1090, 479, 1091, 1092, 1093, 1094,
	231, 233, 232, 234, 235, 480, 481, 0, 482, 236,
	483, 1095, 237, 238, 239, 240, 241, 1096, 1097, 242,
	484, 485, 486, 1098, 243, 244, 487, 1099, 1166, 1100,
	245, 246, 247, 248, 249, 250, 251, 0, 1101, 253,
	254, 255, 252, 1102, 256, 0, 257, 258, 259, 1103,
	260, 959, 261, 262, 1104, 1105, 1107, 1106, 1108, 1109,
	1110, 263, 264, 265, 266, 0, 267, 488, 489, 1111,
	271, 268, 269, 1112, 272, 270, 1113, 273, 1114, 1115,
	274, 275, 276, 1116, 277, 1117, 278, 279, 1118, 280,
	281, 490, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 491, 492, 1119, 221, 1120, 0, 0, 0, 0,
	292, 293, 294, 493, 0, 0, 0, 295, 1121, 296,
	1122, 1123, 960, 297, 298, 494, 495, 299, 300, 1124,
	301, 496, 1125, 497, 302, 1126, 303, 304, 305, 306,
	307, 498, 499, 500, 360, 962, 308, 309, 1127, 310,
	311, 312, 313, 0, 0, 0, 222, 314, 315, 317,
	1128, 961, 316, 501, 502, 1129, 503, 1130, 318, 963,
	504, 964, 319, 320, 321, 965, 322, 0, 0, 0,
	323, 324, 325, 326, 327, 1131, 329, 328, 1132, 330,
	505, 966, 331, 332, 967, 1133, 333, 334, 335, 1134,
	1135, 336, 337, 338, 339, 0, 340, 341, 343, 345,
	342, 344, 349, 346, 347, 348, 351, 0, 350, 968,
	352, 353, 356, 357, 355, 969, 354, 1136, 223, 970,
	358, 1137, 506, 359, 507, 361, 362, 1138, 0, 363,
	0, 1139, 1140, 365, 366, 367, 1141, 1142, 368, 369,
	508, 971, 370, 972, 509, 371, 364, 372, 373, 374,
	375, 376, 377, 378, 1143, 379, 380, 510, 511, 512,
	381, 513, 382, 383, 1144, 384, 0, 385, 386, 387,
	388, 389, 390, 391, 514, 392, 393, 1145, 0, 0,
	0, 0, 0, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 1146, 403, 973, 404, 405, 406, 407,
	515, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 1147, 421, 422, 420, 423, 424, 425, 1148, 426,
	410, 411, 427, 428, 974, 429, 430, 516, 0, 431,
	1149, 432, 433, 434, 435, 412, 436, 441, 517, 437,
	438, 439, 440, 518, 1150, 443, 444, 442, 1151, 445,
	446, 447, 448, 449, 286, 450, 1152, 451, 519, 520,
	521, 522, 1153, 458, 1154, 452, 453, 523, 454, 524,
	1155, 455, 456, 457, 0, 459, 460, 1156, 1157, 461,
	462, 463, 465, 466, 464, 467, 1158, 468, 1159, 0,
	469, 470, 471, 525, 526, 527, 1160, 473, 472, 528,
	1161, 1162, 1163, 1164, 474, 475, 529, 476, 477, 478,
	1080, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3314, 0, 224, 225, 226,
	227, 228, 1086, 229, 230, 1087, 1088, 1089, 0, 1090,
	479, 1091, 1092, 1093, 1094, 231, 233, 232, 234, 235,
	480, 481, 0, 482, 236, 483, 1095, 237, 238, 239,
	240, 241, 1096, 1097, 242, 484, 485, 486, 1098, 243,
	244, 487, 1099, 1166, 1100, 245, 246, 247, 248, 249,
	250, 251, 0, 1101, 253, 254, 255, 252, 1102, 256,
	0, 257, 258, 259, 1103, 260, 959, 261, 262, 1104,
	1105, 1107, 1106, 1108, 1109, 1110, 263, 264, 265, 266,
	0, 267, 488, 489, 1111, 271, 268, 269, 1112, 272,
	270, 1113, 273, 1114, 1115, 274, 275, 276, 1116, 277,
	1117, 278, 279, 1118, 280, 281, 490, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 491, 492, 1119, 221,
	1120, 0, 0, 0, 0, 292, 293, 294, 493, 0,
	0, 0, 295, 1121, 296, 1122, 1123, 960, 297, 298,
	494, 495, 299, 300, 1124, 301, 496, 1125, 497, 302,
	1126, 303, 304, 305, 306, 307, 498, 499, 500, 360,
	962, 308, 309, 1127, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 1128, 961, 316, 501, 502,
	1129, 503, 1130, 318, 963, 504, 964, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	1131, 329, 328, 1132, 330, 505, 966, 331, 332, 967,
	1133, 333, 334, 335, 1134, 1135, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 1136, 223, 970, 358, 1137, 506, 359, 507,
	361, 362, 1138, 0, 363, 0, 1139, 1140, 365, 366,
	367, 1141, 1142, 368, 369, 508, 971, 370, 972, 509,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 1143,
	379, 380, 510, 511, 512, 381, 513, 382, 383, 1144,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 514,
	392, 393, 1145, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 1146, 403,
	973, 404, 405, 406, 407, 515, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 1147, 421, 422, 420,
	423, 424, 425, 1148, 426, 410, 411, 427, 428, 974,
	429, 430, 516, 0, 431, 1149, 432, 433, 434, 435,
	412, 436, 441, 517, 437, 438, 439, 440, 518, 1150,
	443, 444, 442, 1151, 445, 446, 447, 448, 449, 286,
	450, 1152, 451, 519, 520, 521, 522, 1153, 458, 1154,
	452, 453, 523, 454, 524, 1155, 455, 456, 457, 0,
	459, 460, 1156, 1157, 461, 462, 463, 465, 466, 464,
	467, 1158, 468, 1159, 0, 469, 470, 471, 525, 526,
	527, 1160, 473, 472, 528, 1161, 1162, 1163, 1164, 474,
	475, 529, 476, 477, 478, 1080, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3191, 0, 224, 225, 226, 227, 228, 1086, 229, 230,
	1087, 1088, 1089, 0, 1090, 479, 1091, 1092, 1093, 1094,
	231, 233, 232, 234, 235, 480, 481, 0, 482, 236,
	483, 1095, 237, 238, 239, 240, 241, 1096, 1097, 242,
	484, 485, 486, 1098, 243, 244, 487, 1099, 1166, 1100,
	245, 246, 247, 248, 249, 250, 251, 0, 1101, 253,
	254, 255, 252, 1102, 256, 0, 257, 258, 259, 1103,
	260, 959, 261, 262, 1104, 1105, 1107, 1106, 1108, 1109,
	1110, 263, 264, 265, 266, 0, 267, 488, 489, 1111,
	271, 268, 269, 1112, 272, 270, 1113, 273, 1114, 1115,
	274, 275, 276, 1116, 277, 1117, 278, 279, 1118, 280,
	281, 490, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 491, 492, 1119, 221, 1120, 0, 0, 0, 0,
	292, 293, 294, 493, 0, 0, 0, 295, 1121, 296,
	1122, 1123, 960, 297, 298, 494, 495, 299, 300, 1124,
	301, 496, 1125, 497, 302, 1126, 303, 304, 305, 306,
	307, 498, 499, 500, 360, 962, 308, 309, 1127, 310,
	311, 312, 313, 0, 0, 0, 222, 314, 315, 317,
	1128, 961, 316, 501, 502, 1129, 503, 1130, 318, 963,
	504, 964, 319, 320, 321, 965, 322, 0, 0, 0,
	323, 324, 325, 326, 327, 1131, 329, 328, 1132, 330,
	505, 966, 331, 332, 967, 1133, 333, 334, 335, 1134,
	1135, 336, 337, 338, 339, 0, 340, 341, 343, 345,
	342, 344, 349, 346, 347, 348, 351, 0, 350, 968,
	352, 353, 356, 357, 355, 969, 354, 1136, 223, 970,
	358, 1137, 506, 359, 507, 361, 362, 1138, 0, 363,
	0, 1139, 1140, 365, 366, 367, 1141, 1142, 368, 369,
	508, 971, 370, 972, 509, 371, 364, 372, 373, 374,
	375, 376, 377, 378, 1143, 379, 380, 510, 511, 512,
	381, 513, 382, 383, 1144, 384, 0, 385, 386, 387,
	388, 389, 390, 391, 514, 392, 393, 1145, 0, 0,
	0, 0, 0, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 1146, 403, 973, 404, 405, 406, 407,
	515, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 1147, 421, 422, 420, 423, 424, 425, 1148, 426,
	410, 411, 427, 428, 974, 429, 430, 516, 0, 431,
	1149, 432, 433, 434, 435, 412, 436, 441, 517, 437,
	438, 439, 440, 518, 1150, 443, 444, 442, 1151, 445,
	446, 447, 448, 449, 286, 450, 1152, 451, 519, 520,
	521, 522, 1153, 458, 1154, 452, 453, 523, 454, 524,
	1155, 455, 456, 457, 0, 459, 460, 1156, 1157, 461,
	462, 463, 465, 466, 464, 467, 1158, 468, 1159, 0,
	469, 470, 471, 525, 526, 527, 1160, 473, 472, 528,
	1161, 1162, 1163, 1164, 474, 475, 529, 476, 477, 478,
	1080, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2977, 0, 224, 225, 226,
	227, 228, 1086, 229, 230, 1087, 1088, 1089, 0, 1090,
	479, 1091, 1092, 1093, 1094, 231, 233, 232, 234, 235,
	480, 481, 0, 482, 236, 483, 1095, 237, 238, 239,
	240, 241, 1096, 1097, 242, 484, 485, 486, 1098, 243,
	244, 487, 1099, 1166, 1100, 245, 246, 247, 248, 249,
	250, 251, 0, 1101, 253, 254, 255, 252, 1102, 256,
	0, 257, 258, 259, 1103, 260, 959, 261, 262, 1104,
	1105, 1107, 1106, 1108, 1109, 1110, 263, 264, 265, 266,
	0, 267, 488, 489, 1111, 271, 268, 269, 1112, 272,
	270, 1113, 273, 1114, 1115, 274, 275, 276, 1116, 277,
	1117, 278, 279, 1118, 280, 281, 490, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 491, 492, 1119, 221,
	1120, 0, 0, 0, 0, 292, 293, 294, 493, 0,
	0, 0, 295, 1121, 296, 1122, 1123, 960, 297, 298,
	494, 495, 299, 300, 1124, 301, 496, 1125, 497, 302,
	1126, 303, 304, 305, 306, 307, 498, 499, 500, 360,
	962, 308, 309, 1127, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 1128, 961, 316, 501, 502,
	1129, 503, 1130, 318, 963, 504, 964, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	1131, 329, 328, 1132, 330, 505, 966, 331, 332, 967,
	1133, 333, 334, 335, 1134, 1135, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 1136, 223, 970, 358, 1137, 506, 359, 507,
	361, 362, 1138, 0, 363, 0, 1139, 1140, 365, 366,
	367, 1141, 1142, 368, 369, 508, 971, 370, 972, 509,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 1143,
	379, 380, 510, 511, 512, 381, 513, 382, 383, 1144,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 514,
	392, 393, 1145, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 1146, 403,
	973, 404, 405, 406, 407, 515, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 1147, 421, 422, 420,
	423, 424, 425, 1148, 426, 410, 411, 427, 428, 974,
	429, 430, 516, 0, 431, 1149, 432, 433, 434, 435,
	412, 436, 441, 517, 437, 438, 439, 440, 518, 1150,
	443, 444, 442, 1151, 445, 446, 447, 448, 449, 286,
	450, 1152, 451, 519, 520, 521, 522, 1153, 458, 1154,
	452, 453, 523, 454, 524, 1155, 455, 456, 457, 0,
	459, 460, 1156, 1157, 461, 462, 463, 465, 466, 464,
	467, 1158, 468, 1159, 0, 469, 470, 471, 525, 526,
	527, 1160, 473, 472, 528, 1161, 1162, 1163, 1164, 474,
	475, 529, 476, 477, 478, 1080, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2827, 0, 224, 225, 226, 227, 228, 1086, 229, 230,
	1087, 1088, 1089, 0, 1090, 479, 1091, 1092, 1093, 1094,
	231, 233, 232, 234, 235, 480, 481, 0, 482, 236,
	483, 1095, 237, 238, 239, 240, 241, 1096, 1097, 242,
	484, 485, 486, 1098, 243, 244, 487, 1099, 1166, 1100,
	245, 246, 247, 248, 249, 250, 251, 0, 1101, 253,
	254, 255, 252, 1102, 256, 0, 257, 258, 259, 1103,
	260, 959, 261, 262, 1104, 1105, 1107, 1106, 1108, 1109,
	1110, 263, 264, 265, 266, 0, 267, 488, 489, 1111,
	271, 268, 269, 1112, 272, 270, 1113, 273, 1114, 1115,
	274, 275, 276, 1116, 277, 1117, 278, 279, 1118, 280,
	281, 490, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 491, 492, 1119, 221, 1120, 0, 0, 0, 0,
	292, 293, 294, 493, 0, 0, 0, 295, 1121, 296,
	1122, 1123, 960, 297, 298, 494, 495, 299, 300, 1124,
	301, 496, 1125, 497, 302, 1126, 303, 304, 305, 306,
	307, 498, 499, 500, 360, 962, 308, 309, 1127, 310,
	311, 312, 313, 0, 0, 0, 222, 314, 315, 317,
	1128, 961, 316, 501, 502, 1129, 503, 1130, 318, 963,
	504, 964, 319, 320, 321, 965, 322, 0, 0, 0,
	323, 324, 325, 326, 327, 1131, 329, 328, 1132, 330,
	505, 966, 331, 332, 967, 1133, 333, 334, 335, 1134,
	1135, 336, 337, 338, 339, 0, 340, 341, 343, 345,
	342, 344, 349, 346, 347, 348, 351, 0, 350, 968,
	352, 353, 356, 357, 355, 969, 354, 1136, 223, 970,
	358, 1137, 506, 359, 507, 361, 362, 1138, 0, 363,
	0, 1139, 1140, 365, 366, 367, 1141, 1142, 368, 369,
	508, 971, 370, 972, 509, 371, 364, 372, 373, 374,
	375, 376, 377, 378, 1143, 379, 380, 510, 511, 512,
	381, 513, 382, 383, 1144, 384, 0, 385, 386, 387,
	388, 389, 390, 391, 514, 392, 393, 1145, 0, 0,
	0, 0, 0, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 1146, 403, 973, 404, 405, 406, 407,
	515, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 1147, 421, 422, 420, 423, 424, 425, 1148, 426,
	410, 411, 427, 428, 974, 429, 430, 516, 0, 431,
	1149, 432, 433, 434, 435, 412, 436, 441, 517, 437,
	438, 439, 440, 518, 1150, 443, 444, 442, 1151, 445,
	446, 447, 448, 449, 286, 450, 1152, 451, 519, 520,
	521, 522, 1153, 458, 1154, 452, 453, 523, 454, 524,
	1155, 455, 456, 457, 0, 459, 460, 1156, 1157, 461,
	462, 463, 465, 466, 464, 467, 1158, 468, 1159, 0,
	469, 470, 471, 525, 526, 527, 1160, 473, 472, 528,
	1161, 1162, 1163, 1164, 474, 475, 529, 476, 477, 478,
	1080, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2107, 0, 224, 225, 226,
	227, 228, 1086, 229, 230, 1087, 1088, 1089, 0, 1090,
	479, 1091, 1092, 1093, 1094, 231, 233, 232, 234, 235,
	480, 481, 0, 482, 236, 483, 1095, 237, 238, 239,
	240, 241, 1096, 1097, 242, 484, 485, 486, 1098, 243,
	244, 487, 1099, 1166, 1100, 245, 246, 247, 248, 249,
	250, 251, 0, 1101, 253, 254, 255, 252, 1102, 256,
	0, 257, 258, 259, 1103, 260, 959, 261, 262, 1104,
	1105, 1107, 1106, 1108, 1109, 1110, 263, 264, 265, 266,
	0, 267, 488, 489, 1111, 271, 268, 269, 1112, 272,
	270, 1113, 273, 1114, 1115, 274, 275, 276, 1116, 277,
	1117, 278, 279, 1118, 280, 281, 490, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 491, 492, 1119, 221,
	1120, 0, 0, 0, 0, 292, 293, 294, 493, 0,
	0, 0, 295, 1121, 296, 1122, 1123, 960, 297, 298,
	494, 495, 299, 300, 1124, 301, 496, 1125, 497, 302,
	1126, 303, 304, 305, 306, 307, 498, 499, 500, 360,
	962, 308, 309, 1127, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 1128, 961, 316, 501, 502,
	1129, 503, 1130, 318, 963, 504, 964, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	1131, 329, 328, 1132, 330, 505, 966, 331, 332, 967,
	1133, 333, 334, 335, 1134, 1135, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 1136, 223, 970, 358, 1137, 506, 359, 507,
	361, 362, 1138, 0, 363, 0, 1139, 1140, 365, 366,
	367, 1141, 1142, 368, 369, 508, 971, 370, 972, 509,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 1143,
	379, 380, 510, 511, 512, 381, 513, 382, 383, 1144,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 514,
	392, 393, 1145, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 1146, 403,
	973, 404, 405, 406, 407, 515, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 1147, 421, 422, 420,
	423, 424, 425, 1148, 426, 410, 411, 427, 428, 974,
	429, 430, 516, 0, 431, 1149, 432, 433, 434, 435,
	412, 436, 441, 517, 437, 438, 439, 440, 518, 1150,
	443, 444, 442, 1151, 445, 446, 447, 448, 449, 286,
	450, 1152, 451, 519, 520, 521, 522, 1153, 458, 1154,
	452, 453, 523, 454, 524, 1155, 455, 456, 457, 0,
	459, 460, 1156, 1157, 461, 462, 463, 465, 466, 464,
	467, 1158, 468, 1159, 0, 469, 470, 471, 525, 526,
	527, 1160, 473, 472, 528, 1161, 1162, 1163, 1164, 474,
	475, 529, 476, 477, 478, 1178, 0, 1080, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1806, 0, 0, 0, 224, 225, 226, 227, 228, 1086,
	229, 230, 1087, 1088, 1089, 0, 1090, 479, 1091, 1092,
	1093, 1094, 231, 233, 232, 234, 235, 480, 481, 0,
	482, 236, 483, 1095, 237, 238, 239, 240, 241, 1096,
	1097, 242, 484, 485, 486, 1098, 243, 244, 487, 1099,
	1166, 1100, 245, 246, 247, 248, 249, 250, 251, 0,
	1101, 253, 254, 255, 252, 1102, 256, 0, 257, 258,
	259, 1103, 260, 959, 261, 262, 1104, 1105, 1107, 1106,
	1108, 1109, 1110, 263, 264, 265, 266, 0, 267, 488,
	489, 1111, 271, 268, 269, 1112, 272, 270, 1113, 273,
	1114, 1115, 274, 275, 276, 1116, 277, 1117, 278, 279,
	1118, 280, 281, 490, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 491, 492, 1119, 221, 1120, 0, 0,
	0, 0, 292, 293, 294, 493, 0, 0, 0, 295,
	1121, 296, 1122, 1123, 960, 297, 298, 494, 495, 299,
	300, 1124, 301, 496, 1125, 497, 302, 1126, 303, 304,
	305, 306, 307, 498, 499, 500, 360, 962, 308, 309,
	1127, 310, 311, 312, 313, 0, 0, 0, 222, 314,
	315, 317, 1128, 961, 316, 501, 502, 1129, 503, 1130,
	318, 963, 504, 964, 319, 320, 321, 965, 322, 0,
	0, 0, 323, 324, 325, 326, 327, 1131, 329, 328,
	1132, 330, 505, 966, 331, 332, 967, 1133, 333, 334,
	335, 1134, 1135, 336, 337, 338, 339, 0, 340, 341,
	343, 345, 342, 344, 349, 346, 347, 348, 351, 0,
	350, 968, 352, 353, 356, 357, 355, 969, 354, 1136,
	223, 970, 358, 1137, 506, 359, 507, 361, 362, 1138,
	0, 363, 0, 1139, 1140, 365, 366, 367, 1141, 1142,
	368, 369, 508, 971, 370, 972, 509, 371, 364, 372,
	373, 374, 375, 376, 377, 378, 1143, 379, 380, 510,
	511, 512, 381, 513, 382, 383, 1144, 384, 0, 385,
	386, 387, 388, 389, 390, 391, 514, 392, 393, 1145,
	0, 0, 0, 0, 0, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 1146, 403, 973, 404, 405,
	406, 407, 515, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 1147, 421, 422, 420, 423, 424, 425,
	1148, 426, 410, 411, 427, 428, 974, 429, 430, 516,
	0, 431, 1149, 432, 433, 434, 435, 412, 436, 441,
	517, 437, 438, 439, 440, 518, 1150, 443, 444, 442,
	1151, 445, 446, 447, 448, 449, 286, 450, 1152, 451,
	519, 520, 521, 522, 1153, 458, 1154, 452, 453, 523,
	454, 524, 1155, 455, 456, 457, 0, 459, 460, 1156,
	1157, 461, 462, 463, 465, 466, 464, 467, 1158, 468,
	1159, 0, 469, 470, 471, 525, 526, 527, 1160, 473,
	472, 528, 1161, 1162, 1163, 1164, 474, 475, 529, 476,
	477, 478, 1077, 0, 1080, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 1086, 229, 230, 1087,
	1088, 1089, 0, 1090, 479, 1091, 1092, 1093, 1094, 231,
	233, 232, 234, 235, 480, 481, 0, 482, 236, 483,
	1095, 237, 238, 239, 240, 241, 1096, 1097, 242, 484,
	485, 486, 1098, 243, 244, 487, 1099, 1166, 1100, 245,
	246, 247, 248, 249, 250, 251, 0, 1101, 253, 254,
	255, 252, 1102, 256, 0, 257, 258, 259, 1103, 260,
	959, 261, 262, 1104, 1105, 1107, 1106, 1108, 1109, 1110,
	263, 264, 265, 266, 0, 267, 488, 489, 1111, 271,
	268, 269, 1112, 272, 270, 1113, 273, 1114, 1115, 274,
	275, 276, 1116, 277, 1117, 278, 279, 1118, 280, 281,
	490, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	491, 492, 1119, 221, 1120, 0, 0, 0, 0, 292,
	293, 294, 493, 0, 0, 0, 295, 1121, 296, 1122,
	1123, 960, 297, 298, 494, 495, 299, 300, 1124, 301,
	496, 1125, 497, 302, 1126, 303, 304, 305, 306, 307,
	498, 499, 500, 360, 962, 308, 309, 1127, 310, 311,
	312, 313, 0, 0, 0, 222, 314, 315, 317, 1128,
	961, 316, 501, 502, 1129, 503, 1130, 318, 963, 504,
	964, 319, 320, 321, 965, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 1131, 329, 328, 1132, 330, 505,
	966, 331, 332, 967, 1133, 333, 334, 335, 1134, 1135,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 968, 352,
	353, 356, 357, 355, 969, 354, 1136, 223, 970, 358,
	1137, 506, 359, 507, 361, 362, 1138, 0, 363, 0,
	1139, 1140, 365, 366, 367, 1141, 1142, 368, 369, 508,
	971, 370, 972, 509, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 1143, 379, 380, 510, 511, 512, 381,
	513, 382, 383, 1144, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 514, 392, 393, 1145, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 1146, 403, 973, 404, 405, 406, 407, 515,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	1147, 421, 422, 420, 423, 424, 425, 1148, 426, 410,
	411, 427, 428, 974, 429, 430, 516, 0, 431, 1149,
	432, 433, 434, 435, 412, 436, 441, 517, 437, 438,
	439, 440, 518, 1150, 443, 444, 442, 1151, 445, 446,
	447, 448, 449, 286, 450, 1152, 451, 519, 520, 521,
	522, 1153, 458, 1154, 452, 453, 523, 454, 524, 1155,
	455, 456, 457, 0, 459, 460, 1156, 1157, 461, 462,
	463, 465, 466, 464, 467, 1158, 468, 1159, 0, 469,
	470, 471, 525, 526, 527, 1160, 473, 472, 528, 1161,
	1162, 1163, 1164, 474, 475, 529, 476, 477, 478, 1080,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 226, 227,
	228, 1086, 229, 230, 1087, 1088, 1089, 0, 1090, 479,
	1091, 1092, 1093, 1094, 231, 233, 232, 234, 235, 480,
	481, 0, 482, 236, 483, 1095, 237, 238, 239, 240,
	241, 1096, 1097, 242, 484, 485, 486, 1098, 243, 244,
	487, 1099, 1166, 1100, 245, 246, 247, 248, 249, 250,
	251, 0, 1101, 253, 254, 255, 252, 1102, 256, 0,
	257, 258, 259, 1103, 260, 959, 261, 262, 1104, 1105,
	1107, 1106, 1108, 1109, 1110, 263, 264, 265, 266, 0,
	267, 488, 489, 1111, 271, 268, 269, 1112, 272, 270,
	1113, 273, 1114, 1115, 274, 275, 276, 1116, 277, 1117,
	278, 279, 1118, 280, 281, 490, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 491, 492, 1119, 221, 1120,
	0, 0, 0, 0, 292, 293, 294, 493, 0, 0,
	0, 295, 1121, 296, 1122, 1123, 960, 297, 298, 494,
	495, 299, 300, 1124, 301, 496, 1125, 497, 302, 1126,
	303, 304, 305, 306, 307, 498, 499, 500, 360, 962,
	308, 309, 1127, 310, 311, 312, 313, 0, 0, 0,
	222, 314, 315, 317, 1128, 961, 316, 501, 502, 1129,
	503, 1130, 318, 963, 504, 964, 319, 320, 321, 965,
	322, 0, 0, 0, 323, 324, 325, 326, 327, 1131,
	329, 328, 1132, 330, 505, 966, 331, 332, 967, 1133,
	333, 334, 335, 1134, 1135, 336, 337, 338, 339, 0,
	340, 341, 343, 345, 342, 344, 349, 346, 347, 348,
	351, 0, 350, 968, 352, 353, 356, 357, 355, 969,
	354, 1136, 223, 970, 358, 1137, 506, 359, 507, 361,
	362, 1138, 0, 363, 0, 1139, 1140, 365, 366, 367,
	1141, 1142, 368, 369, 508, 971, 370, 972, 509, 371,
	364, 372, 373, 374, 375, 376, 377, 378, 1143, 379,
	380, 510, 511, 512, 381, 513, 382, 383, 1144, 384,
	0, 385, 386, 387, 388, 389, 390, 391, 514, 392,
	393, 1145, 0, 0, 0, 0, 0, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 1146, 403, 973,
	404, 405, 406, 407, 515, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 1147, 421, 422, 420, 423,
	424, 425, 1148, 426, 410, 411, 427, 428, 974, 429,
	430, 516, 0, 431, 1149, 432, 433, 434, 435, 412,
	436, 441, 517, 437, 438, 439, 440, 518, 1150, 443,
	444, 442, 1151, 445, 446, 447, 448, 449, 286, 450,
	1152, 451, 519, 520, 521, 522, 1153, 458, 1154, 452,
	453, 523, 454, 524, 1155, 455, 456, 457, 0, 459,
	460, 1156, 1157, 461, 462, 463, 465, 466, 464, 467,
	1158, 468, 1159, 0, 469, 470, 471, 525, 526, 527,
	1160, 473, 472, 528, 1161, 1162, 1163, 1164, 474, 475,
	529, 476, 477, 478, 2082, 0, 896, 868, 869, 870,
	866, 867, 879, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 2079, 229,
	230, 0, 0, 0, 0, 0, 920, 884, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 933, 0, 940,
	236, 939, 0, 237, 238, 239, 240, 241, 886, 919,
	242, 978, 979, 486, 0, 243, 244, 926, 0, 907,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 959, 261, 262, 910, 908, 909, 916, 912,
	911, 915, 263, 264, 265, 266, 943, 267, 937, 936,
	857, 271, 268, 269, 0, 272, 270, 0, 273, 2080,
	0, 274, 928, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 863, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 950, 951, 875, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 935, 0, 0, 0, 295, 0,
	296, 0, 0, 960, 297, 298, 948, 949, 299, 300,
	0, 301, 957, 0, 885, 302, 0, 303, 304, 305,
	306, 307, 921, 922, 925, 360, 962, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 961, 316, 930, 931, 0, 891, 0, 318,
	963, 923, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 958, 966, 331, 332, 967, 0, 333, 334, 335,
	914, 913, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 854, 223,
	970, 358, 876, 924, 359, 938, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 971, 370, 972, 952, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	953, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 934, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 973, 404, 405, 406,
	407, 864, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 917,
	426, 410, 411, 427, 428, 974, 429, 430, 932, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 977,
	437, 438, 439, 440, 954, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 944,
	945, 946, 947, 0, 458, 0, 452, 453, 955, 454,
	956, 874, 455, 456, 457, 0, 459, 460, 0, 858,
	461, 462, 463, 465, 466, 464, 467, 918, 468, 0,
	0, 469, 470, 471, 525, 941, 976, 2078, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 855, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 0, 851, 852, 2081, 0, 0, 0,
	0, 0, 0, 880, 2077, 0, 844, 878, 896, 868,
	869, 870, 866, 867, 879, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 920, 884,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 933,
	0, 940, 236, 939, 0, 237, 238, 239, 240, 241,
	886, 919, 242, 978, 979, 486, 0, 243, 244, 926,
	0, 907, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 959, 261, 262, 910, 908, 909,
	916, 912, 911, 915, 263, 264, 265, 266, 943, 267,
	937, 936, 857, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 928, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 863, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 950, 951, 875, 221, 0, 0,
	0, 0, 0, 292, 293, 294, 935, 0, 0, 0,
	295, 0, 296, 0, 0, 960, 297, 298, 948, 949,
	299, 300, 0, 301, 957, 0, 885, 302, 0, 303,
	304, 305, 306, 307, 921, 922, 925, 360, 962, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 222,
	314, 315, 317, 0, 961, 316, 930, 931, 0, 891,
	0, 318, 963, 923, 964, 319, 320, 321, 965, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 958, 966, 331, 332, 967, 0, 333,
	334, 335, 914, 913, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 968, 352, 353, 356, 357, 355, 969, 354,
	854, 223, 970, 358, 876, 924, 359, 938, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 971, 370, 972, 952, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 953, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 934, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 973, 404,
	405, 406, 407, 864, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 187, 421, 422, 420, 423, 424,
	425, 917, 426, 410, 411, 427, 428, 974, 429, 430,
	932, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 977, 437, 438, 439, 440, 954, 0, 443, 444,
	442, 189, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 944, 945, 946, 947, 0, 458, 0, 452, 453,
	955, 454, 956, 874, 455, 456, 457, 0, 459, 460,
	0, 858, 461, 462, 463, 465, 466, 464, 467, 918,
	468, 0, 0, 469, 470, 471, 1329, 941, 976, 0,
	473, 472, 528, 0, 0, 0, 181, 474, 475, 529,
	476, 477, 478, 855, 182, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 0, 851, 852, 896, 868,
	869, 870, 866, 867, 879, 1538, 1536, 0, 0, 878,
	0, 0, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 920, 884,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 933,
	0, 940, 236, 939, 0, 237, 238, 239, 240, 241,
	886, 919, 242, 978, 979, 486, 0, 243, 244, 926,
	0, 907, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 959, 261, 262, 910, 908, 909,
	916, 912, 911, 915, 263, 264, 265, 266, 943, 267,
	937, 936, 857, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 928, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 863, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 950, 951, 875, 221, 0, 0,
	0, 0, 0, 292, 293, 294, 935, 0, 0, 0,
	295, 0, 296, 0, 0, 960, 297, 298, 948, 949,
	299, 300, 0, 301, 957, 0, 885, 302, 0, 303,
	304, 305, 306, 307, 921, 922, 925, 360, 962, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 222,
	314, 315, 317, 0, 961, 316, 930, 931, 0, 891,
	0, 318, 963, 923, 964, 319, 320, 321, 965, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 958, 966, 331, 332, 967, 0, 333,
	334, 335, 914, 913, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 968, 352, 353, 356, 357, 355, 969, 354,
	854, 223, 970, 358, 876, 924, 359, 938, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 971, 370, 972, 952, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 953, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 934, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 973, 404,
	405, 406, 407, 864, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 187, 421, 422, 420, 423, 424,
	425, 917, 426, 410, 411, 427, 428, 974, 429, 430,
	932, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 977, 437, 438, 439, 440, 954, 0, 443, 444,
	442, 189, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 944, 945, 946, 947, 0, 458, 0, 452, 453,
	955, 454, 956, 874, 455, 456, 457, 0, 459, 460,
	0, 858, 461, 462, 463, 465, 466, 464, 467, 918,
	468, 0, 0, 469, 470, 471, 1329, 941, 976, 0,
	473, 472, 528, 0, 0, 0, 181, 474, 475, 529,
	476, 477, 478, 855, 182, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 0, 851, 852, 896, 868,
	869, 870, 866, 867, 879, 1538, 2568, 0, 0, 878,
	0, 0, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 920, 884,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 933,
	0, 940, 236, 939, 0, 237, 238, 239, 240, 241,
	886, 919, 242, 978, 979, 486, 0, 243, 244, 926,
	0, 907, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 959, 261, 262, 910, 908, 909,
	916, 912, 911, 915, 263, 264, 265, 266, 943, 267,
	937, 936, 857, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 928, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 863, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 950, 951, 875, 221, 0, 0,
	0, 0, 0, 292, 293, 294, 935, 0, 0, 0,
	295, 0, 296, 0, 0, 960, 297, 298, 948, 949,
	299, 300, 0, 301, 957, 0, 885, 302, 0, 303,
	304, 305, 306, 307, 921, 922, 925, 360, 962, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 222,
	314, 315, 317, 0, 961, 316, 930, 931, 0, 891,
	0, 318, 963, 923, 964, 319, 320, 321, 965, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 958, 966, 331, 332, 967, 0, 333,
	334, 335, 914, 913, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 968, 352, 353, 356, 357, 355, 969, 354,
	854, 223, 970, 358, 876, 924, 359, 938, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 971, 370, 972, 952, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 953, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 934, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 973, 404,
	405, 406, 407, 864, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 187, 421, 422, 420, 423, 424,
	425, 917, 426, 410, 411, 427, 428, 974, 429, 430,
	932, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 977, 437, 438, 439, 440, 954, 0, 443, 444,
	442, 189, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 944, 945, 946, 947, 0, 458, 0, 452, 453,
	955, 454, 956, 874, 455, 456, 457, 0, 459, 460,
	0, 858, 461, 462, 463, 465, 466, 464, 467, 918,
	468, 0, 0, 469, 470, 471, 1329, 941, 976, 0,
	473, 472, 528, 0, 0, 0, 181, 474, 475, 529,
	476, 477, 478, 855, 182, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 0, 851, 852, 896, 868,
	869, 870, 866, 867, 879, 1538, 1536, 0, 0, 878,
	0, 0, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 920, 884,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 933,
	0, 940, 236, 939, 2186, 237, 238, 239, 240, 241,
	886, 919, 242, 978, 979, 486, 0, 243, 244, 926,
	0, 907, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 959, 261, 262, 910, 908, 909,
	916, 912, 911, 915, 263, 264, 265, 266, 943, 267,
	937, 936, 857, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 928, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 863, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 950, 951, 875, 221, 0, 0,
	0, 0, 0, 292, 293, 294, 935, 0, 0, 0,
	295, 0, 296, 0, 2191, 960, 297, 298, 948, 949,
	299, 300, 0, 301, 957, 0, 885, 302, 0, 303,
	304, 305, 306, 307, 921, 922, 925, 360, 962, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 222,
	314, 315, 317, 0, 961, 316, 930, 931, 0, 891,
	0, 318, 963, 923, 964, 319, 320, 321, 965, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 2187, 330, 958, 966, 331, 332, 967, 0, 333,
	334, 335, 914, 913, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 968, 352, 353, 356, 357, 355, 969, 354,
	854, 223, 970, 358, 876, 924, 359, 938, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 971, 370, 972, 952, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 953, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 934, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 973, 404,
	405, 406, 407, 864, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 917, 426, 410, 411, 427, 428, 974, 429, 430,
	932, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 977, 437, 438, 439, 440, 954, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 944, 945, 946, 947, 0, 458, 2188, 452, 453,
	955, 454, 956, 874, 455, 456, 457, 0, 459, 460,
	0, 858, 461, 462, 463, 465, 466, 464, 467, 918,
	468, 0, 0, 469, 470, 471, 525, 941, 976, 0,
	473, 472, 528, 0, 0, 0, 0, 474, 475, 529,
	476, 477, 478, 855, 0, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 0, 851, 852, 0, 0,
	0, 0, 0, 0, 0, 880, 0, 0, 2127, 878,
	896, 868, 869, 870, 866, 867, 879, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	920, 884, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 933, 0, 940, 236, 939, 0, 237, 238, 239,
	240, 241, 886, 919, 242, 978, 979, 486, 0, 243,
	244, 926, 0, 907, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 959, 261, 262, 910,
	908, 909, 916, 912, 911, 915, 263, 264, 265, 266,
	943, 267, 937, 936, 857, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 928, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 863, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 950, 951, 875, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 935, 0,
	0, 0, 295, 0, 296, 0, 0, 960, 297, 298,
	948, 949, 299, 300, 0, 301, 957, 0, 885, 302,
	0, 303, 304, 305, 306, 307, 921, 922, 925, 360,
	962, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 0, 961, 316, 930, 931,
	0, 891, 0, 318, 963, 923, 964, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 958, 966, 331, 332, 967,
	0, 333, 334, 335, 914, 913, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 854, 223, 970, 358, 876, 924, 359, 938,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 971, 370, 972, 952,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 953, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 934,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	973, 404, 405, 406, 407, 864, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 917, 426, 410, 411, 427, 428, 974,
	429, 430, 932, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 977, 437, 438, 439, 440, 954, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 944, 945, 946, 947, 0, 458, 0,
	452, 453, 955, 454, 956, 874, 455, 456, 457, 0,
	459, 460, 0, 858, 461, 462, 463, 465, 466, 464,
	467, 918, 468, 0, 0, 469, 470, 471, 525, 941,
	976, 0, 473, 472, 528, 0, 0, 0, 0, 474,
	475, 529, 476, 477, 478, 855, 0, 0, 0, 0,
	0, 853, 0, 0, 0, 0, 0, 0, 851, 852,
	0, 0, 0, 0, 0, 0, 0, 880, 2125, 0,
	2124, 878, 896, 868, 869, 870, 866, 867, 879, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 920, 884, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 933, 0, 940, 236, 939, 0, 237,
	238, 239, 240, 241, 886, 919, 242, 978, 979, 486,
	0, 243, 244, 926, 0, 907, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 959, 261,
	262, 910, 908, 909, 916, 912, 911, 915, 263, 264,
	265, 266, 943, 267, 937, 936, 857, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 928, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 863, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 950, 951,
	875, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	935, 0, 0, 0, 295, 0, 296, 0, 0, 960,
	297, 298, 948, 949, 299, 300, 0, 301, 957, 0,
	885, 302, 0, 303, 304, 305, 306, 307, 921, 922,
	925, 360, 962, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 0, 961, 316,
	930, 931, 0, 891, 0, 318, 963, 923, 964, 319,
	320, 321, 965, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 958, 966, 331,
	332, 967, 0, 333, 334, 335, 914, 913, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 968, 352, 353, 356,
	357, 355, 969, 354, 854, 223, 970, 358, 876, 924,
	359, 938, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 971, 370,
	972, 952, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 953, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 934, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 973, 404, 405, 406, 407, 864, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 917, 426, 410, 411, 427,
	428, 974, 429, 430, 932, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 977, 437, 438, 439, 440,
	954, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 944, 945, 946, 947, 0,
	458, 0, 452, 453, 955, 454, 956, 874, 455, 456,
	457, 0, 459, 460, 0, 858, 461, 462, 463, 465,
	466, 464, 467, 918, 468, 0, 0, 469, 470, 471,
	525, 941, 976, 0, 473, 472, 528, 0, 0, 0,
	0, 474, 475, 529, 476, 477, 478, 855, 0, 0,
	0, 0, 0, 853, 0, 0, 0, 0, 0, 0,
	851, 852, 0, 0, 0, 0, 0, 0, 0, 880,
	2122, 0, 2121, 878, 896, 868, 869, 870, 866, 867,
	879, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 920, 884, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 933, 0, 940, 236, 939,
	0, 237, 238, 239, 240, 241, 886, 919, 242, 978,
	979, 486, 0, 243, 244, 926, 0, 907, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	959, 261, 262, 910, 908, 909, 916, 912, 911, 915,
	263, 264, 265, 266, 943, 267, 937, 936, 857, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	928, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	863, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	950, 951, 875, 221, 0, 0, 0, 0, 0, 292,
	293, 294, 935, 0, 0, 0, 295, 0, 296, 0,
	0, 960, 297, 298, 948, 949, 299, 300, 0, 301,
	957, 0, 885, 302, 0, 303, 304, 305, 306, 307,
	921, 922, 925, 360, 962, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 222, 314, 315, 317, 0,
	961, 316, 930, 931, 0, 891, 0, 318, 963, 923,
	964, 319, 320, 321, 965, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 958,
	966, 331, 332, 967, 0, 333, 334, 335, 914, 913,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 968, 352,
	353, 356, 357, 355, 969, 354, 854, 223, 970, 358,
	876, 924, 359, 938, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	971, 370, 972, 952, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 953, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 934, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 973, 404, 405, 406, 407, 864,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 917, 426, 410,
	411, 427, 428, 974, 429, 430, 932, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 977, 437, 438,
	439, 440, 954, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 944, 945, 946,
	947, 0, 458, 0, 452, 453, 955, 454, 956, 874,
	455, 456, 457, 0, 459, 460, 0, 858, 461, 462,
	463, 465, 466, 464, 467, 918, 468, 0, 0, 469,
	470, 471, 525, 941, 976, 0, 473, 472, 528, 0,
	0, 0, 0, 474, 475, 529, 476, 477, 478, 855,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	0, 0, 851, 852, 0, 0, 0, 0, 0, 0,
	0, 880, 2119, 0, 2118, 878, 896, 868, 869, 870,
	866, 867, 879, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 920, 884, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 933, 0, 940,
	236, 939, 0, 237, 238, 239, 240, 241, 886, 919,
	242, 978, 979, 486, 0, 243, 244, 926, 0, 907,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 959, 261, 262, 910, 908, 909, 916, 912,
	911, 915, 263, 264, 265, 266, 943, 267, 937, 936,
	857, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 928, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 863, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 950, 951, 875, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 935, 0, 0, 0, 295, 0,
	296, 0, 0, 960, 297, 298, 948, 949, 299, 300,
	0, 301, 957, 0, 885, 302, 0, 303, 304, 305,
	306, 307, 921, 922, 925, 360, 962, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 961, 316, 930, 931, 0, 891, 0, 318,
	963, 923, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 958, 966, 331, 332, 967, 0, 333, 334, 335,
	914, 913, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 854, 223,
	970, 358, 876, 924, 359, 938, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 971, 370, 972, 952, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	953, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 934, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 973, 404, 405, 406,
	407, 864, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 917,
	426, 410, 411, 427, 428, 974, 429, 430, 932, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 977,
	437, 438, 439, 440, 954, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 944,
	945, 946, 947, 0, 458, 0, 452, 453, 955, 454,
	956, 874, 455, 456, 457, 0, 459, 460, 0, 858,
	461, 462, 463, 465, 466, 464, 467, 918, 468, 0,
	0, 469, 470, 471, 525, 941, 976, 0, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 855, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 0, 851, 852, 0, 0, 0, 0,
	0, 0, 0, 880, 2116, 0, 1398, 878, 896, 868,
	869, 870, 866, 867, 879, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 920, 884,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 933,
	0, 940, 236, 939, 0, 237, 238, 239, 240, 241,
	886, 919, 242, 978, 979, 486, 0, 243, 244, 926,
	0, 907, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 959, 261, 262, 910, 908, 909,
	916, 912, 911, 915, 263, 264, 265, 266, 943, 267,
	937, 936, 857, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 928, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 863, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 950, 951, 875, 221, 0, 0,
	0, 0, 0, 292, 293, 294, 935, 0, 0, 0,
	295, 0, 296, 0, 0, 960, 297, 298, 948, 949,
	299, 300, 0, 301, 957, 0, 885, 302, 0, 303,
	304, 305, 306, 307, 921, 922, 925, 360, 962, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 222,
	314, 315, 317, 0, 961, 316, 930, 931, 0, 891,
	0, 318, 963, 923, 964, 319, 320, 321, 965, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 958, 966, 331, 332, 967, 0, 333,
	334, 335, 914, 913, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 968, 352, 353, 356, 357, 355, 969, 354,
	854, 223, 970, 358, 876, 924, 359, 938, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 971, 370, 972, 952, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 953, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 934, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 973, 404,
	405, 406, 407, 864, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 917, 426, 410, 411, 427, 428, 974, 429, 430,
	932, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 977, 437, 438, 439, 440, 954, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 944, 945, 946, 947, 0, 458, 0, 452, 453,
	955, 454, 956, 874, 455, 456, 457, 0, 459, 460,
	0, 858, 461, 462, 463, 465, 466, 464, 467, 918,
	468, 0, 0, 469, 470, 471, 525, 941, 976, 0,
	473, 472, 528, 1397, 0, 0, 0, 474, 475, 529,
	476, 477, 478, 855, 0, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 0, 851, 852, 0, 0,
	0, 0, 0, 0, 0, 880, 0, 0, 847, 878,
	896, 868, 869, 870, 866, 867, 879, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	920, 884, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 933, 0, 940, 236, 939, 0, 237, 238, 239,
	240, 241, 886, 919, 242, 978, 979, 486, 0, 243,
	244, 926, 0, 907, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 959, 261, 262, 910,
	908, 909, 916, 912, 911, 915, 263, 264, 265, 266,
	943, 267, 937, 936, 857, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 928, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 863, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 950, 951, 875, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 935, 0,
	0, 0, 295, 0, 296, 0, 0, 960, 297, 298,
	948, 949, 299, 300, 0, 301, 957, 0, 885, 302,
	0, 303, 304, 305, 306, 307, 921, 922, 925, 360,
	962, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 0, 961, 316, 930, 931,
	0, 891, 0, 318, 963, 923, 964, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 958, 966, 331, 332, 967,
	0, 333, 334, 335, 914, 913, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 854, 223, 970, 358, 876, 924, 359, 938,
	361, 362, 0, 0, 363, 0, 859, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 971, 370, 972, 952,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 953, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 934,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	973, 404, 405, 406, 407, 864, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 917, 426, 410, 411, 427, 428, 974,
	429, 430, 932, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 977, 437, 438, 439, 440, 954, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 944, 945, 946, 947, 0, 458, 0,
	452, 453, 955, 454, 956, 874, 455, 456, 457, 0,
	459, 460, 0, 858, 461, 462, 463, 465, 466, 464,
	467, 918, 468, 0, 0, 469, 470, 471, 525, 941,
	976, 0, 473, 472, 528, 0, 0, 0, 0, 474,
	475, 529, 476, 477, 478, 855, 0, 0, 0, 0,
	0, 853, 0, 0, 0, 0, 0, 0, 851, 852,
	896, 868, 869, 870, 866, 867, 879, 880, 0, 0,
	0, 878, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	920, 884, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 933, 0, 940, 236, 939, 0, 237, 238, 239,
	240, 241, 886, 919, 242, 978, 979, 486, 0, 243,
	244, 926, 0, 907, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 3634, 259, 0, 260, 959, 261, 262, 910,
	908, 909, 916, 912, 911, 915, 263, 264, 265, 266,
	943, 267, 937, 936, 857, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 928, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 863, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 950, 951, 875, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 935, 0,
	0, 0, 295, 0, 296, 0, 0, 960, 297, 298,
	948, 949, 299, 300, 0, 301, 957, 0, 885, 302,
	0, 303, 304, 305, 306, 307, 921, 922, 925, 360,
	962, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 0, 961, 316, 930, 931,
	0, 891, 0, 318, 963, 923, 964, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 958, 966, 331, 332, 967,
	0, 333, 334, 335, 914, 913, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 854, 223, 970, 358, 876, 924, 359, 938,
	361, 362, 0, 0, 363, 0, 859, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 971, 370, 972, 952,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 953, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 934,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	973, 404, 405, 406, 407, 864, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 917, 426, 410, 411, 427, 428, 974,
	429, 430, 932, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 977, 437, 438, 439, 440, 954, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 944, 945, 946, 947, 0, 458, 0,
	452, 453, 955, 454, 956, 874, 455, 456, 457, 0,
	459, 460, 0, 858, 461, 462, 463, 465, 466, 464,
	467, 918, 468, 0, 0, 469, 470, 471, 525, 941,
	976, 0, 473, 472, 528, 0, 0, 0, 0, 474,
	475, 529, 476, 477, 478, 855, 0, 0, 0, 0,
	0, 853, 0, 0, 0, 0, 0, 0, 851, 852,
	896, 868, 869, 870, 866, 867, 879, 880, 0, 0,
	0, 878, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	920, 884, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 933, 0, 940, 236, 939, 0, 237, 238, 239,
	240, 241, 886, 919, 242, 978, 979, 486, 0, 243,
	244, 926, 0, 907, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 3453, 259, 0, 260, 959, 261, 262, 910,
	908, 909, 916, 912, 911, 915, 263, 264, 265, 266,
	943, 267, 937, 936, 857, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 928, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 863, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 950, 951, 875, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 935, 0,
	0, 0, 295, 0, 296, 0, 0, 960, 297, 298,
	948, 949, 299, 300, 0, 301, 957, 0, 885, 302,
	0, 303, 304, 305, 306, 307, 921, 922, 925, 360,
	962, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 0, 961, 316, 930, 931,
	0, 891, 0, 318, 963, 923, 964, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 958, 966, 331, 332, 967,
	0, 333, 334, 335, 914, 913, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 854, 223, 970, 358, 876, 924, 359, 938,
	361, 362, 0, 0, 363, 0, 859, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 971, 370, 972, 952,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 953, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 934,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	973, 404, 405, 406, 407, 864, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 917, 426, 410, 411, 427, 428, 974,
	429, 430, 932, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 977, 437, 438, 439, 440, 954, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 944, 945, 946, 947, 0, 458, 0,
	452, 453, 955, 454, 956, 874, 455, 456, 457, 0,
	459, 460, 0, 858, 461, 462, 463, 465, 466, 464,
	467, 918, 468, 0, 0, 469, 470, 471, 525, 941,
	976, 0, 473, 472, 528, 0, 0, 0, 0, 474,
	475, 529, 476, 477, 478, 855, 0, 0, 0, 0,
	0, 853, 0, 0, 0, 0, 0, 0, 851, 852,
	896, 868, 869, 870, 866, 867, 879, 880, 0, 0,
	0, 878, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	920, 884, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 933, 0, 940, 236, 939, 0, 237, 238, 239,
	240, 241, 886, 919, 242, 978, 979, 486, 0, 243,
	244, 926, 0, 907, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 959, 261, 262, 910,
	908, 909, 916, 912, 911, 915, 263, 264, 265, 266,
	943, 267, 937, 936, 857, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 928, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 863, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 950, 951, 875, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 935, 0,
	0, 0, 295, 0, 296, 0, 0, 960, 297, 298,
	948, 949, 299, 300, 0, 301, 957, 0, 885, 302,
	0, 303, 304, 305, 306, 307, 921, 922, 925, 360,
	962, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 0, 961, 316, 930, 931,
	0, 891, 0, 318, 963, 923, 964, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 958, 966, 331, 332, 967,
	0, 333, 334, 335, 914, 913, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 854, 3160, 970, 358, 876, 924, 359, 938,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 971, 370, 972, 952,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 953, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 934,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	973, 404, 405, 406, 407, 864, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 917, 426, 410, 411, 427, 428, 974,
	429, 430, 932, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 977, 437, 438, 439, 440, 954, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 944, 945, 946, 947, 0, 458, 0,
	452, 453, 955, 454, 956, 874, 455, 456, 457, 0,
	459, 460, 0, 858, 461, 462, 463, 465, 466, 464,
	467, 918, 468, 0, 0, 469, 470, 471, 525, 941,
	976, 0, 473, 472, 528, 0, 0, 0, 0, 474,
	475, 529, 476, 477, 478, 855, 0, 0, 0, 0,
	0, 853, 0, 0, 0, 0, 0, 0, 851, 852,
	1606, 0, 0, 0, 0, 0, 0, 880, 0, 0,
	0, 878, 896, 868, 869, 870, 866, 867, 879, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 920, 884, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 933, 0, 940, 236, 939, 0, 237,
	238, 239, 240, 241, 886, 919, 242, 978, 979, 486,
	0, 243, 244, 926, 0, 907, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 959, 261,
	262, 910, 908, 909, 916, 912, 911, 915, 263, 264,
	265, 266, 943, 267, 937, 936, 857, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 928, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 863, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 950, 951,
	875, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	935, 0, 0, 0, 295, 0, 296, 0, 0, 960,
	297, 298, 948, 949, 299, 300, 0, 301, 957, 0,
	885, 302, 0, 303, 304, 305, 306, 307, 921, 922,
	925, 360, 962, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 0, 961, 316,
	930, 931, 0, 891, 0, 318, 963, 923, 964, 319,
	320, 321, 965, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 958, 966, 331,
	332, 967, 0, 333, 334, 335, 914, 913, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 968, 352, 353, 356,
	357, 355, 969, 354, 854, 223, 970, 358, 876, 924,
	359, 938, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 971, 370,
	972, 952, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 953, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 934, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 973, 404, 405, 406, 407, 864, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 917, 426, 410, 411, 427,
	428, 974, 429, 430, 932, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 977, 437, 438, 439, 440,
	954, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 944, 945, 946, 947, 0,
	458, 0, 452, 453, 955, 454, 956, 874, 455, 456,
	457, 0, 459, 460, 0, 858, 461, 462, 463, 465,
	466, 464, 467, 918, 468, 0, 0, 469, 470, 471,
	525, 941, 976, 2955, 473, 472, 528, 0, 0, 0,
	0, 474, 475, 529, 476, 477, 478, 855, 0, 0,
	0, 0, 0, 853, 0, 0, 0, 0, 0, 0,
	851, 852, 896, 868, 869, 870, 866, 867, 879, 880,
	0, 0, 0, 878, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 920, 884, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 933, 0, 940, 236, 939, 0, 237,
	238, 239, 240, 241, 886, 919, 242, 978, 979, 486,
	0, 243, 244, 926, 0, 907, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 959, 261,
	262, 910, 908, 909, 916, 912, 911, 915, 263, 264,
	265, 266, 943, 267, 937, 936, 857, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 928, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 863, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 950, 951,
	875, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	935, 0, 0, 0, 295, 0, 296, 0, 0, 960,
	297, 298, 948, 949, 299, 300, 0, 301, 957, 0,
	885, 302, 0, 303, 304, 305, 306, 307, 921, 922,
	925, 360, 962, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 1996, 314, 315, 317, 0, 961, 316,
	930, 931, 0, 891, 0, 318, 963, 923, 964, 319,
	320, 321, 965, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 958, 966, 331,
	332, 967, 0, 333, 334, 335, 914, 913, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 968, 352, 353, 356,
	357, 355, 969, 354, 854, 223, 970, 358, 876, 924,
	359, 938, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 971, 370,
	972, 952, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 953, 381, 513, 382,
	383, 1995, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 934, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 973, 404, 405, 406, 407, 864, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 917, 426, 410, 411, 427,
	428, 974, 429, 430, 932, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 977, 437, 438, 439, 440,
	954, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 944, 945, 946, 947, 0,
	458, 0, 452, 453, 955, 454, 956, 874, 455, 456,
	457, 0, 459, 460, 0, 858, 461, 462, 463, 465,
	466, 464, 467, 918, 468, 0, 0, 469, 470, 471,
	525, 941, 976, 0, 473, 472, 528, 0, 0, 0,
	0, 474, 475, 529, 476, 477, 478, 855, 0, 0,
	0, 0, 0, 853, 0, 0, 0, 0, 0, 0,
	851, 852, 896, 868, 869, 870, 866, 867, 879, 880,
	0, 0, 0, 878, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 920, 884, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 933, 0, 940, 236, 939, 0, 237,
	238, 239, 240, 241, 886, 919, 242, 978, 979, 486,
	0, 243, 244, 926, 0, 907, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 959, 261,
	262, 910, 908, 909, 916, 912, 911, 915, 263, 264,
	265, 266, 943, 267, 937, 936, 857, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 928, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 863, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 950, 951,
	875, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	935, 0, 0, 0, 295, 0, 296, 0, 0, 960,
	297, 298, 948, 949, 299, 300, 0, 301, 957, 0,
	885, 302, 0, 303, 304, 305, 306, 307, 921, 922,
	925, 360, 962, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 0, 961, 316,
	930, 931, 0, 891, 0, 318, 963, 923, 964, 319,
	320, 321, 965, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 958, 966, 331,
	332, 967, 0, 333, 334, 335, 914, 913, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 968, 352, 353, 356,
	357, 355, 969, 354, 854, 223, 970, 358, 876, 924,
	359, 938, 361, 362, 0, 0, 363, 0, 859, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 971, 370,
	972, 952, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 953, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 934, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 973, 404, 405, 406, 407, 864, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 917, 426, 410, 411, 427,
	428, 974, 429, 430, 932, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 977, 437, 438, 439, 440,
	954, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 944, 945, 946, 947, 0,
	458, 0, 452, 453, 955, 454, 956, 874, 455, 456,
	457, 0, 459, 460, 0, 858, 461, 462, 463, 465,
	466, 464, 467, 918, 468, 0, 0, 469, 470, 471,
	525, 941, 976, 0, 473, 472, 528, 0, 0, 0,
	0, 474, 475, 529, 476, 477, 478, 855, 0, 0,
	0, 0, 0, 853, 0, 0, 0, 0, 0, 0,
	851, 852, 896, 868, 869, 870, 866, 867, 879, 880,
	0, 0, 0, 878, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 920, 884, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 933, 0, 940, 236, 939, 0, 237,
	238, 239, 240, 241, 886, 919, 242, 978, 979, 486,
	0, 243, 244, 926, 0, 907, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 959, 261,
	262, 910, 908, 909, 916, 912, 911, 915, 263, 264,
	265, 266, 943, 267, 937, 936, 857, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 928, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 863, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 950, 951,
	875, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	935, 0, 0, 0, 295, 0, 296, 0, 0, 960,
	297, 298, 948, 949, 299, 300, 0, 301, 957, 0,
	885, 302, 0, 303, 304, 305, 306, 307, 921, 922,
	925, 360, 962, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 0, 961, 316,
	930, 931, 0, 891, 0, 318, 963, 923, 964, 319,
	320, 321, 965, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 958, 966, 331,
	332, 967, 0, 333, 334, 335, 914, 913, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 968, 352, 353, 356,
	357, 355, 969, 354, 854, 223, 970, 358, 876, 924,
	359, 938, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 971, 370,
	972, 952, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 953, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 934, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 973, 404, 405, 406, 407, 864, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 917, 426, 410, 411, 427,
	428, 974, 429, 430, 932, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 977, 437, 438, 439, 440,
	954, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 944, 945, 946, 947, 0,
	458, 0, 452, 453, 955, 454, 956, 874, 455, 456,
	457, 0, 459, 460, 0, 858, 461, 462, 463, 465,
	466, 464, 467, 918, 468, 0, 0, 469, 470, 471,
	525, 941, 976, 0, 473, 472, 528, 0, 0, 0,
	0, 474, 475, 529, 476, 477, 478, 855, 0, 0,
	0, 0, 0, 853, 0, 0, 0, 0, 0, 0,
	851, 852, 1606, 0, 0, 0, 0, 0, 0, 880,
	0, 0, 0, 878, 896, 868, 869, 870, 866, 867,
	879, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 920, 884, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 933, 0, 940, 236, 939,
	0, 237, 238, 239, 240, 241, 886, 919, 242, 978,
	979, 486, 0, 243, 244, 926, 0, 907, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	959, 261, 262, 910, 908, 909, 916, 912, 911, 915,
	263, 264, 265, 266, 943, 267, 937, 936, 857, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	928, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	863, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	950, 951, 875, 221, 0, 0, 0, 0, 0, 292,
	293, 294, 935, 0, 0, 0, 295, 0, 296, 0,
	2191, 960, 297, 298, 948, 949, 299, 300, 0, 301,
	957, 0, 885, 302, 0, 303, 304, 305, 306, 307,
	921, 922, 925, 360, 962, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 222, 314, 315, 317, 0,
	961, 316, 930, 931, 0, 891, 0, 318, 963, 923,
	964, 319, 320, 321, 965, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 958,
	966, 331, 332, 967, 0, 333, 334, 335, 914, 913,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 968, 352,
	353, 356, 357, 355, 969, 354, 854, 223, 970, 358,
	876, 924, 359, 938, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	971, 370, 972, 952, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 953, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 934, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 973, 404, 405, 406, 407, 864,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 917, 426, 410,
	411, 427, 428, 974, 429, 430, 932, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 977, 437, 438,
	439, 440, 954, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 944, 945, 946,
	947, 0, 458, 0, 452, 453, 955, 454, 956, 874,
	455, 456, 457, 0, 459, 460, 0, 858, 461, 462,
	463, 465, 466, 464, 467, 918, 468, 0, 0, 469,
	470, 471, 525, 941, 976, 0, 473, 472, 528, 0,
	0, 0, 0, 474, 475, 529, 476, 477, 478, 855,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	0, 0, 851, 852, 896, 868, 869, 870, 866, 867,
	879, 880, 0, 0, 0, 878, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 920, 884, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 933, 0, 940, 236, 939,
	0, 237, 238, 239, 240, 241, 886, 919, 242, 978,
	979, 486, 0, 243, 244, 926, 0, 907, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	959, 261, 262, 910, 908, 909, 916, 912, 911, 915,
	263, 264, 265, 266, 943, 267, 937, 936, 857, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	928, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	863, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	950, 951, 875, 221, 0, 0, 0, 0, 0, 292,
	293, 294, 935, 0, 0, 0, 295, 0, 296, 0,
	0, 960, 297, 298, 948, 949, 299, 300, 0, 301,
	957, 0, 885, 302, 0, 303, 304, 305, 306, 307,
	921, 922, 925, 360, 962, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 222, 314, 315, 317, 0,
	961, 316, 930, 931, 0, 891, 0, 318, 963, 923,
	964, 319, 320, 321, 965, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 958,
	966, 331, 332, 967, 0, 333, 334, 335, 914, 913,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 968, 352,
	353, 356, 357, 355, 969, 354, 854, 223, 970, 358,
	876, 924, 359, 938, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	971, 370, 972, 952, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 953, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 934, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 973, 404, 405, 406, 407, 864,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 917, 426, 410,
	411, 427, 428, 974, 429, 430, 932, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 977, 437, 438,
	439, 440, 954, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 944, 945, 946,
	947, 0, 458, 0, 452, 453, 955, 454, 956, 874,
	455, 456, 457, 0, 459, 460, 0, 858, 461, 462,
	463, 465, 466, 464, 467, 918, 468, 0, 0, 469,
	470, 471, 525, 941, 976, 0, 473, 472, 528, 0,
	0, 0, 0, 474, 475, 529, 476, 477, 478, 855,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	0, 0, 851, 852, 0, 0, 0, 0, 0, 0,
	0, 880, 1536, 0, 2196, 878, 896, 868, 869, 870,
	866, 867, 879, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 920, 884, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 933, 0, 940,
	236, 939, 0, 237, 238, 239, 240, 241, 886, 919,
	242, 978, 979, 486, 0, 243, 244, 926, 0, 907,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 959, 261, 262, 910, 908, 909, 916, 912,
	911, 915, 263, 264, 265, 266, 943, 267, 937, 936,
	857, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 928, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 863, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 950, 951, 875, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 935, 0, 0, 0, 295, 0,
	296, 0, 0, 960, 297, 298, 948, 949, 299, 300,
	0, 301, 957, 0, 885, 302, 0, 303, 304, 305,
	306, 307, 921, 922, 925, 360, 962, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 961, 316, 930, 931, 0, 891, 0, 318,
	963, 923, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 958, 966, 331, 332, 967, 0, 333, 334, 335,
	914, 913, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 854, 223,
	970, 358, 876, 924, 359, 938, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 971, 370, 972, 952, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	953, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 934, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 973, 404, 405, 406,
	407, 864, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 917,
	426, 410, 411, 427, 428, 974, 429, 430, 932, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 977,
	437, 438, 439, 440, 954, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 944,
	945, 946, 947, 0, 458, 0, 452, 453, 955, 454,
	956, 874, 455, 456, 457, 0, 459, 460, 0, 858,
	461, 462, 463, 465, 466, 464, 467, 918, 468, 0,
	0, 469, 470, 471, 525, 941, 976, 0, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 855, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 0, 851, 852, 0, 0, 0, 0,
	0, 0, 0, 880, 0, 0, 2194, 878, 896, 868,
	869, 870, 866, 867, 879, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 920, 884,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 933,
	0, 940, 236, 939, 0, 237, 238, 239, 240, 241,
	886, 919, 242, 978, 979, 486, 0, 243, 244, 926,
	0, 907, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 959, 261, 262, 910, 908, 909,
	916, 912, 911, 915, 263, 264, 265, 266, 943, 267,
	937, 936, 857, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 928, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 863, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 950, 951, 875, 221, 0, 0,
	0, 0, 0, 292, 293, 294, 935, 0, 0, 0,
	295, 0, 296, 0, 0, 960, 297, 298, 948, 949,
	299, 300, 0, 301, 957, 0, 885, 302, 0, 303,
	304, 305, 306, 307, 921, 922, 925, 360, 962, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 222,
	314, 315, 317, 0, 961, 316, 930, 931, 0, 891,
	0, 318, 963, 923, 964, 319, 320, 321, 965, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 958, 966, 331, 332, 967, 0, 333,
	334, 335, 914, 913, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 968, 352, 353, 356, 357, 355, 969, 354,
	854, 223, 970, 358, 876, 924, 359, 938, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 971, 370, 972, 952, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 953, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 934, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 973, 404,
	405, 406, 407, 864, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 917, 426, 410, 411, 427, 428, 974, 429, 430,
	932, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 977, 437, 438, 439, 440, 954, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 944, 945, 946, 947, 0, 458, 0, 452, 453,
	955, 454, 956, 874, 455, 456, 457, 0, 459, 460,
	0, 858, 461, 462, 463, 465, 466, 464, 467, 918,
	468, 0, 0, 469, 470, 471, 525, 941, 976, 0,
	473, 472, 528, 0, 0, 0, 0, 474, 475, 529,
	476, 477, 478, 855, 0, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 0, 851, 852, 0, 0,
	0, 0, 0, 0, 0, 880, 0, 0, 2182, 878,
	896, 868, 869, 870, 866, 867, 879, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	920, 884, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 933, 0, 940, 236, 939, 0, 237, 238, 239,
	240, 241, 886, 919, 242, 978, 979, 486, 0, 243,
	244, 926, 0, 907, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 959, 261, 262, 910,
	908, 909, 916, 912, 911, 915, 263, 264, 265, 266,
	943, 267, 937, 936, 857, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 928, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 863, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 950, 951, 875, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 935, 0,
	0, 0, 295, 0, 296, 0, 0, 960, 297, 298,
	948, 949, 299, 300, 0, 301, 957, 0, 885, 302,
	0, 303, 304, 305, 306, 307, 921, 922, 925, 360,
	962, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 0, 961, 316, 930, 931,
	0, 891, 0, 318, 963, 923, 964, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 958, 966, 331, 332, 967,
	0, 333, 334, 335, 914, 913, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 854, 223, 970, 358, 876, 924, 359, 938,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 971, 370, 972, 952,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 953, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 934,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	973, 404, 405, 406, 407, 864, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 917, 426, 410, 411, 427, 428, 974,
	429, 430, 932, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 977, 437, 438, 439, 440, 954, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 944, 945, 946, 947, 0, 458, 0,
	452, 453, 955, 454, 956, 874, 455, 456, 457, 0,
	459, 460, 0, 858, 461, 462, 463, 465, 466, 464,
	467, 918, 468, 0, 0, 469, 470, 471, 525, 941,
	976, 0, 473, 472, 528, 0, 0, 0, 0, 474,
	475, 529, 476, 477, 478, 855, 0, 0, 0, 0,
	0, 853, 0, 0, 0, 0, 0, 0, 851, 852,
	0, 0, 0, 0, 0, 0, 0, 880, 0, 0,
	2171, 878, 896, 868, 869, 870, 866, 867, 879, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 920, 884, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 933, 0, 940, 236, 939, 0, 237,
	238, 239, 240, 241, 886, 919, 242, 978, 979, 486,
	0, 243, 244, 926, 0, 907, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 959, 261,
	262, 910, 908, 909, 916, 912, 911, 915, 263, 264,
	265, 266, 943, 267, 937, 936, 857, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 928, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 863, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 950, 951,
	875, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	935, 0, 0, 0, 295, 0, 296, 0, 0, 960,
	297, 298, 948, 949, 299, 300, 0, 301, 957, 0,
	885, 302, 0, 303, 304, 305, 306, 307, 921, 922,
	925, 360, 962, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 0, 961, 316,
	930, 931, 0, 891, 0, 318, 963, 923, 964, 319,
	320, 321, 965, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 958, 966, 331,
	332, 967, 0, 333, 334, 335, 914, 913, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 968, 352, 353, 356,
	357, 355, 969, 354, 854, 223, 970, 358, 876, 924,
	359, 938, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 971, 370,
	972, 952, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 953, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 934, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 973, 404, 405, 406, 407, 864, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 917, 426, 410, 411, 427,
	428, 974, 429, 430, 932, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 977, 437, 438, 439, 440,
	954, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 944, 945, 946, 947, 0,
	458, 0, 452, 453, 955, 454, 956, 874, 455, 456,
	457, 0, 459, 460, 0, 858, 461, 462, 463, 465,
	466, 464, 467, 918, 468, 0, 0, 469, 470, 471,
	525, 941, 976, 0, 473, 472, 528, 0, 0, 0,
	0, 474, 475, 529, 476, 477, 478, 855, 0, 0,
	0, 0, 0, 853, 0, 0, 0, 0, 0, 0,
	851, 852, 0, 0, 0, 0, 0, 0, 0, 880,
	0, 0, 2169, 878, 2160, 2167, 869, 870, 866, 867,
	879, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 920, 884, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 933, 0, 940, 236, 939,
	0, 237, 238, 239, 240, 241, 886, 919, 242, 978,
	979, 486, 0, 243, 244, 926, 0, 907, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	959, 261, 262, 910, 908, 909, 916, 912, 911, 915,
	263, 264, 265, 266, 943, 2163, 937, 936, 857, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	928, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	863, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	950, 951, 875, 221, 0, 0, 0, 0, 0, 292,
	293, 294, 935, 0, 0, 0, 295, 0, 296, 0,
	0, 960, 297, 298, 948, 949, 299, 300, 0, 301,
	957, 0, 885, 302, 0, 303, 304, 305, 2164, 307,
	921, 922, 925, 360, 962, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 222, 314, 315, 317, 0,
	961, 316, 930, 931, 0, 891, 0, 318, 963, 923,
	964, 319, 320, 321, 965, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 958,
	966, 331, 332, 967, 0, 333, 334, 335, 914, 913,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	2165, 2162, 346, 347, 348, 351, 0, 350, 968, 352,
	353, 356, 357, 355, 969, 354, 854, 223, 970, 358,
	876, 924, 359, 938, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	971, 370, 972, 952, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 953, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 934, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 973, 404, 405, 406, 407, 864,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 2166,
	0, 421, 422, 420, 423, 424, 425, 917, 426, 410,
	411, 427, 428, 974, 429, 430, 932, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 977, 437, 438,
	439, 440, 954, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 944, 945, 946,
	947, 0, 458, 0, 452, 453, 955, 454, 956, 874,
	455, 456, 457, 0, 459, 460, 0, 858, 461, 462,
	463, 465, 466, 464, 467, 918, 468, 0, 0, 469,
	470, 471, 525, 941, 976, 0, 473, 472, 528, 0,
	0, 0, 0, 474, 475, 529, 476, 2161, 478, 855,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	0, 0, 851, 852, 0, 0, 0, 0, 0, 0,
	0, 880, 0, 0, 2157, 878, 2160, 2167, 869, 870,
	866, 867, 879, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 920, 884, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 933, 0, 940,
	236, 939, 0, 237, 238, 239, 240, 241, 886, 919,
	242, 978, 979, 486, 0, 243, 244, 926, 0, 907,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 959, 261, 262, 910, 908, 909, 916, 912,
	911, 915, 263, 264, 265, 266, 943, 2163, 937, 936,
	857, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 928, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 863, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 950, 951, 875, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 935, 0, 0, 0, 295, 0,
	296, 0, 0, 960, 297, 298, 948, 949, 299, 300,
	0, 301, 957, 0, 885, 302, 0, 303, 304, 305,
	2164, 307, 921, 922, 925, 360, 962, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 961, 316, 930, 931, 0, 891, 0, 318,
	963, 923, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 958, 966, 331, 332, 967, 0, 333, 334, 335,
	914, 913, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 2165, 2162, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 854, 223,
	970, 358, 876, 924, 359, 938, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 971, 370, 972, 952, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	953, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 934, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 973, 404, 405, 406,
	407, 864, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 2166, 0, 421, 422, 420, 423, 424, 425, 917,
	426, 410, 411, 427, 428, 974, 429, 430, 932, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 977,
	437, 438, 439, 440, 954, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 944,
	945, 946, 947, 0, 458, 0, 452, 453, 955, 454,
	956, 874, 455, 456, 457, 0, 459, 460, 0, 858,
	461, 462, 463, 465, 466, 464, 467, 918, 468, 0,
	0, 469, 470, 471, 525, 941, 976, 0, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 2161,
	478, 855, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 0, 851, 852, 896, 868, 869, 870,
	866, 867, 879, 880, 0, 0, 0, 878, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 920, 884, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 933, 0, 940,
	236, 939, 0, 237, 238, 239, 240, 241, 886, 919,
	242, 978, 979, 486, 0, 243, 244, 926, 0, 907,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 959, 261, 262, 910, 908, 909, 916, 912,
	911, 915, 263, 264, 265, 266, 943, 267, 937, 936,
	857, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 928, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 863, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 950, 951, 875, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 935, 0, 0, 0, 295, 0,
	296, 0, 0, 960, 297, 298, 948, 949, 299, 300,
	0, 301, 957, 0, 885, 302, 0, 303, 304, 305,
	306, 307, 921, 922, 925, 360, 962, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 961, 316, 930, 931, 0, 891, 0, 318,
	963, 923, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 958, 966, 331, 332, 967, 0, 333, 334, 335,
	914, 913, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 854, 223,
	970, 358, 876, 924, 359, 938, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 971, 370, 972, 952, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	953, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 934, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 973, 404, 405, 406,
	407, 864, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 917,
	426, 410, 411, 427, 428, 974, 429, 430, 932, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 977,
	437, 438, 439, 440, 954, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 944,
	945, 946, 947, 0, 458, 0, 452, 453, 955, 454,
	956, 874, 455, 456, 457, 0, 459, 460, 0, 858,
	461, 462, 463, 465, 466, 464, 467, 918, 468, 0,
	0, 469, 470, 471, 525, 941, 976, 0, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 855, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 0, 851, 852, 0, 0, 0, 0,
	0, 1544, 0, 880, 0, 0, 0, 878, 896, 868,
	869, 870, 866, 867, 879, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 226, 227, 228,
	1975, 229, 230, 0, 0, 0, 0, 0, 920, 884,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 933,
	0, 940, 236, 939, 0, 237, 238, 239, 240, 241,
	886, 919, 242, 978, 979, 486, 0, 243, 244, 926,
	0, 907, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 959, 261, 262, 910, 908, 909,
	916, 912, 911, 915, 263, 264, 265, 266, 943, 267,
	937, 936, 857, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 928, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 863, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 950, 951, 875, 221, 0, 0,
	0, 0, 0, 292, 293, 294, 935, 0, 0, 0,
	295, 0, 296, 0, 0, 960, 297, 298, 948, 949,
	299, 300, 0, 301, 957, 0, 885, 302, 0, 303,
	304, 305, 306, 307, 921, 922, 925, 360, 962, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 222,
	314, 315, 317, 0, 961, 316, 930, 931, 0, 891,
	0, 318, 963, 923, 964, 319, 320, 321, 965, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 958, 966, 331, 332, 967, 0, 333,
	334, 335, 914, 913, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 968, 352, 353, 356, 357, 355, 969, 354,
	854, 223, 970, 358, 876, 924, 359, 938, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 971, 370, 972, 952, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 953, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 934, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 973, 404,
	405, 406, 407, 864, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 917, 426, 410, 411, 427, 428, 974, 429, 430,
	932, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 977, 437, 438, 439, 440, 954, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 944, 945, 946, 947, 0, 458, 0, 452, 453,
	955, 454, 956, 874, 455, 456, 457, 0, 459, 460,
	0, 858, 461, 462, 463, 465, 466, 464, 467, 918,
	468, 0, 0, 469, 470, 471, 525, 941, 976, 0,
	473, 472, 528, 0, 0, 0, 0, 474, 475, 529,
	476, 477, 478, 855, 0, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 0, 851, 852, 0, 0,
	0, 0, 0, 0, 0, 880, 0, 0, 1221, 878,
	896, 868, 869, 870, 866, 867, 879, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	920, 884, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 933, 0, 940, 236, 939, 0, 237, 238, 239,
	240, 241, 886, 919, 242, 978, 979, 486, 0, 243,
	244, 926, 0, 907, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 959, 261, 262, 910,
	908, 909, 916, 912, 911, 915, 263, 264, 265, 266,
	943, 267, 937, 936, 857, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 928, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 863, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 950, 951, 875, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 935, 0,
	0, 0, 295, 0, 296, 0, 0, 960, 297, 298,
	948, 949, 299, 300, 0, 301, 957, 0, 885, 302,
	0, 303, 304, 305, 306, 307, 1220, 922, 925, 360,
	962, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 0, 961, 316, 930, 931,
	0, 891, 0, 318, 963, 923, 964, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 958, 966, 331, 332, 967,
	0, 333, 334, 335, 914, 913, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 854, 223, 970, 358, 876, 924, 359, 938,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 971, 370, 972, 952,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 953, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 934,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	973, 404, 405, 406, 407, 864, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 917, 426, 410, 411, 427, 428, 974,
	429, 430, 932, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 977, 437, 438, 439, 440, 954, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 944, 945, 946, 947, 0, 458, 0,
	452, 453, 955, 454, 956, 874, 455, 456, 457, 0,
	459, 460, 0, 858, 461, 462, 463, 465, 466, 464,
	467, 918, 468, 0, 0, 469, 470, 471, 525, 941,
	976, 0, 473, 472, 528, 0, 0, 0, 0, 474,
	475, 529, 476, 477, 478, 855, 0, 0, 0, 0,
	0, 853, 0, 0, 0, 0, 0, 0, 851, 852,
	0, 0, 0, 0, 0, 0, 0, 880, 0, 0,
	1215, 878, 896, 868, 869, 870, 866, 867, 879, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 920, 884, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 933, 0, 940, 236, 939, 0, 237,
	238, 239, 240, 241, 886, 919, 242, 978, 979, 486,
	0, 243, 244, 926, 0, 907, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 959, 261,
	262, 910, 908, 909, 916, 912, 911, 915, 263, 264,
	265, 266, 943, 267, 937, 936, 857, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 928, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 863, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 950, 951,
	875, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	935, 0, 0, 0, 295, 0, 296, 0, 0, 960,
	297, 298, 948, 949, 299, 300, 0, 301, 957, 0,
	885, 302, 0, 303, 304, 305, 306, 307, 1214, 922,
	925, 360, 962, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 0, 961, 316,
	930, 931, 0, 891, 0, 318, 963, 923, 964, 319,
	320, 321, 965, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 958, 966, 331,
	332, 967, 0, 333, 334, 335, 914, 913, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 968, 352, 353, 356,
	357, 355, 969, 354, 854, 223, 970, 358, 876, 924,
	359, 938, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 971, 370,
	972, 952, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 953, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 934, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 973, 404, 405, 406, 407, 864, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 917, 426, 410, 411, 427,
	428, 974, 429, 430, 932, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 977, 437, 438, 439, 440,
	954, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 944, 945, 946, 947, 0,
	458, 0, 452, 453, 955, 454, 956, 874, 455, 456,
	457, 0, 459, 460, 0, 858, 461, 462, 463, 465,
	466, 464, 467, 918, 468, 0, 0, 469, 470, 471,
	525, 941, 976, 0, 473, 472, 528, 0, 0, 0,
	0, 474, 475, 529, 476, 477, 478, 855, 0, 0,
	0, 0, 0, 853, 0, 0, 0, 0, 0, 0,
	851, 852, 0, 0, 0, 0, 0, 0, 0, 880,
	0, 0, 1210, 878, 896, 868, 869, 870, 866, 867,
	879, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 920, 884, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 933, 0, 940, 236, 939,
	0, 237, 238, 239, 240, 241, 886, 919, 242, 978,
	979, 486, 0, 243, 244, 926, 0, 907, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	959, 261, 262, 910, 908, 909, 916, 912, 911, 915,
	263, 264, 265, 266, 943, 267, 937, 936, 857, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	928, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	863, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	950, 951, 875, 221, 0, 0, 0, 0, 0, 292,
	293, 294, 935, 0, 0, 0, 295, 0, 296, 0,
	0, 960, 297, 298, 948, 949, 299, 300, 0, 301,
	957, 0, 885, 302, 0, 303, 304, 305, 306, 307,
	921, 922, 925, 360, 962, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 222, 314, 315, 317, 0,
	961, 316, 930, 931, 0, 891, 0, 318, 963, 923,
	964, 319, 320, 321, 965, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 958,
	966, 331, 332, 967, 0, 333, 334, 335, 914, 913,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 968, 352,
	353, 356, 357, 355, 969, 354, 854, 223, 970, 358,
	876, 924, 359, 938, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	971, 370, 972, 952, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 953, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 934, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 973, 404, 405, 406, 407, 864,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 917, 426, 410,
	411, 427, 428, 974, 429, 430, 932, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 977, 437, 438,
	439, 440, 954, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 944, 945, 946,
	947, 0, 458, 0, 452, 453, 955, 454, 956, 874,
	455, 456, 457, 0, 459, 460, 0, 858, 461, 462,
	463, 465, 466, 464, 467, 918, 468, 0, 0, 469,
	470, 471, 525, 941, 976, 0, 473, 472, 528, 0,
	0, 0, 0, 474, 475, 529, 476, 477, 478, 855,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	0, 0, 851, 852, 896, 868, 869, 870, 866, 867,
	879, 880, 0, 0, 0, 878, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 920, 884, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 933, 0, 940, 236, 939,
	0, 237, 238, 239, 240, 241, 886, 919, 242, 978,
	979, 486, 0, 243, 244, 926, 0, 907, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	959, 261, 262, 910, 908, 909, 916, 912, 911, 915,
	263, 264, 265, 266, 943, 267, 937, 936, 857, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	928, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	863, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	950, 951, 875, 221, 0, 0, 0, 0, 0, 292,
	293, 294, 935, 0, 0, 0, 295, 0, 296, 0,
	0, 960, 297, 298, 948, 949, 299, 300, 0, 301,
	957, 0, 885, 302, 0, 303, 304, 305, 306, 307,
	921, 922, 925, 360, 962, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 222, 314, 315, 317, 0,
	961, 316, 930, 931, 0, 891, 0, 318, 963, 923,
	964, 319, 320, 321, 965, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 958,
	966, 331, 332, 967, 0, 333, 334, 335, 914, 913,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 968, 352,
	353, 356, 357, 355, 969, 354, 854, 223, 970, 358,
	876, 924, 359, 938, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	971, 370, 972, 952, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 953, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 934, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 973, 404, 405, 406, 407, 864,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 917, 426, 410,
	411, 427, 428, 974, 429, 430, 932, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 977, 437, 438,
	439, 440, 954, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 944, 945, 946,
	947, 0, 458, 0, 452, 453, 955, 454, 956, 874,
	455, 456, 457, 0, 459, 460, 0, 858, 461, 462,
	463, 465, 466, 464, 467, 918, 468, 0, 0, 469,
	470, 471, 525, 941, 976, 0, 473, 472, 528, 0,
	0, 0, 0, 474, 475, 529, 476, 477, 478, 855,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	0, 0, 851, 852, 896, 868, 869, 870, 866, 867,
	879, 880, 0, 0, 0, 878, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 920, 884, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 933, 0, 940, 236, 939,
	0, 237, 238, 239, 240, 241, 886, 919, 242, 978,
	979, 486, 0, 243, 244, 926, 0, 907, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	959, 261, 3666, 910, 908, 909, 916, 912, 911, 915,
	263, 264, 265, 266, 943, 267, 937, 936, 857, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	928, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	863, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	950, 951, 875, 221, 0, 0, 0, 0, 0, 292,
	293, 294, 935, 0, 0, 0, 295, 0, 296, 0,
	0, 960, 297, 298, 948, 949, 299, 300, 0, 301,
	957, 0, 885, 302, 0, 303, 304, 305, 306, 307,
	921, 922, 925, 360, 962, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 222, 314, 315, 317, 0,
	961, 316, 930, 931, 0, 891, 0, 318, 963, 923,
	964, 319, 320, 321, 965, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 958,
	966, 331, 332, 967, 0, 333, 334, 335, 914, 913,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 968, 352,
	353, 356, 357, 355, 969, 354, 854, 223, 970, 358,
	876, 924, 359, 938, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	971, 370, 972, 952, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 953, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 934, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 973, 404, 405, 406, 407, 864,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 917, 426, 410,
	411, 427, 428, 974, 429, 430, 932, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 977, 437, 438,
	439, 440, 954, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 944, 945, 946,
	947, 0, 458, 0, 452, 453, 955, 454, 956, 874,
	455, 456, 457, 0, 3665, 460, 0, 858, 461, 462,
	463, 465, 466, 464, 467, 918, 468, 0, 0, 469,
	470, 471, 525, 941, 976, 0, 473, 472, 528, 0,
	0, 0, 0, 474, 475, 529, 476, 477, 478, 855,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	0, 0, 851, 852, 896, 868, 869, 870, 866, 867,
	879, 880, 0, 0, 0, 878, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 920, 884, 0, 0, 0, 231,
	233, 232, 234, 235, 3664, 933, 0, 940, 236, 939,
	0, 237, 238, 239, 240, 241, 886, 919, 242, 978,
	979, 486, 0, 243, 244, 926, 0, 907, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	959, 261, 3666, 910, 908, 909, 916, 912, 911, 915,
	263, 264, 265, 266, 943, 267, 937, 936, 857, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	928, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	863, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	950, 951, 875, 221, 0, 0, 0, 0, 0, 292,
	293, 294, 935, 0, 0, 0, 295, 0, 296, 0,
	0, 960, 297, 298, 948, 949, 299, 300, 0, 301,
	957, 0, 885, 302, 0, 303, 304, 305, 306, 307,
	921, 922, 925, 360, 962, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 222, 314, 315, 317, 0,
	961, 316, 930, 931, 0, 891, 0, 318, 963, 923,
	964, 319, 320, 321, 965, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 958,
	966, 331, 332, 967, 0, 333, 334, 335, 914, 913,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 968, 352,
	353, 356, 357, 355, 969, 354, 854, 223, 970, 358,
	876, 924, 359, 938, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	971, 370, 972, 952, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 953, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 934, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 973, 404, 405, 406, 407, 864,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 917, 426, 410,
	411, 427, 428, 974, 429, 430, 932, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 977, 437, 438,
	439, 440, 954, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 944, 945, 946,
	947, 0, 458, 0, 452, 453, 955, 454, 956, 874,
	455, 456, 457, 0, 3665, 460, 0, 858, 461, 462,
	463, 465, 466, 464, 467, 918, 468, 0, 0, 469,
	470, 471, 525, 941, 976, 0, 473, 472, 528, 0,
	0, 0, 0, 474, 475, 529, 476, 477, 478, 855,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	0, 0, 851, 852, 896, 868, 869, 870, 2535, 2536,
	879, 880, 0, 0, 0, 878, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 920, 884, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 933, 0, 940, 236, 939,
	0, 237, 238, 239, 240, 241, 886, 919, 242, 978,
	979, 486, 0, 243, 244, 926, 0, 907, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	959, 261, 262, 910, 908, 909, 916, 912, 911, 915,
	263, 264, 265, 266, 943, 267, 937, 936, 857, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	928, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	863, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	950, 951, 875, 221, 0, 0, 0, 0, 0, 292,
	293, 294, 935, 0, 0, 0, 295, 0, 296, 0,
	0, 960, 297, 298, 948, 949, 299, 300, 0, 301,
	957, 0, 885, 302, 0, 303, 304, 305, 306, 307,
	921, 922, 925, 360, 962, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 222, 314, 315, 317, 0,
	961, 316, 930, 931, 0, 891, 0, 318, 963, 923,
	964, 319, 320, 321, 965, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 958,
	966, 331, 332, 967, 0, 333, 334, 335, 914, 913,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 968, 352,
	353, 356, 357, 355, 969, 354, 854, 223, 970, 358,
	876, 924, 359, 938, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	971, 370, 972, 952, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 953, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 934, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 973, 404, 405, 406, 407, 864,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 917, 426, 410,
	411, 427, 428, 974, 429, 430, 932, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 977, 437, 438,
	439, 440, 954, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 944, 945, 946,
	947, 0, 458, 0, 452, 453, 955, 454, 956, 874,
	455, 456, 457, 0, 459, 460, 0, 858, 461, 462,
	463, 465, 466, 464, 467, 918, 468, 0, 0, 469,
	470, 471, 525, 941, 976, 0, 473, 472, 528, 0,
	0, 0, 0, 474, 475, 529, 476, 477, 478, 855,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	0, 0, 851, 852, 896, 868, 869, 870, 2533, 2534,
	879, 880, 0, 0, 0, 878, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 920, 884, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 933, 0, 940, 236, 939,
	0, 237, 238, 239, 240, 241, 886, 919, 242, 978,
	979, 486, 0, 243, 244, 926, 0, 907, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	959, 261, 262, 910, 908, 909, 916, 912, 911, 915,
	263, 264, 265, 266, 943, 267, 937, 936, 857, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	928, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	863, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	950, 951, 875, 221, 0, 0, 0, 0, 0, 292,
	293, 294, 935, 0, 0, 0, 295, 0, 296, 0,
	0, 960, 297, 298, 948, 949, 299, 300, 0, 301,
	957, 0, 885, 302, 0, 303, 304, 305, 306, 307,
	921, 922, 925, 360, 962, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 222, 314, 315, 317, 0,
	961, 316, 930, 931, 0, 891, 0, 318, 963, 923,
	964, 319, 320, 321, 965, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 958,
	966, 331, 332, 967, 0, 333, 334, 335, 914, 913,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 968, 352,
	353, 356, 357, 355, 969, 354, 854, 223, 970, 358,
	876, 924, 359, 938, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	971, 370, 972, 952, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 953, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 934, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 973, 404, 405, 406, 407, 864,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 917, 426, 410,
	411, 427, 428, 974, 429, 430, 932, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 977, 437, 438,
	439, 440, 954, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 944, 945, 946,
	947, 0, 458, 0, 452, 453, 955, 454, 956, 874,
	455, 456, 457, 0, 459, 460, 0, 858, 461, 462,
	463, 465, 466, 464, 467, 918, 468, 0, 0, 469,
	470, 471, 525, 941, 976, 0, 473, 472, 528, 0,
	0, 0, 0, 474, 475, 529, 476, 477, 478, 855,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	0, 0, 851, 852, 896, 868, 869, 870, 866, 867,
	879, 880, 0, 0, 0, 878, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 920, 884, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 933, 0, 940, 236, 939,
	0, 237, 238, 239, 240, 241, 886, 919, 242, 978,
	979, 486, 0, 243, 244, 926, 0, 907, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	959, 261, 262, 910, 908, 909, 916, 912, 911, 915,
	263, 264, 265, 266, 943, 267, 937, 936, 857, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	928, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	863, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	950, 951, 875, 221, 0, 0, 0, 0, 0, 292,
	293, 294, 935, 0, 0, 0, 295, 0, 296, 0,
	0, 960, 297, 298, 948, 949, 299, 300, 0, 301,
	957, 0, 885, 302, 0, 303, 304, 305, 306, 307,
	921, 922, 925, 360, 962, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 222, 314, 315, 317, 0,
	961, 316, 930, 931, 0, 891, 0, 318, 963, 923,
	964, 319, 320, 321, 965, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 958,
	966, 331, 332, 967, 0, 333, 334, 335, 914, 913,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 968, 352,
	353, 356, 357, 355, 969, 354, 854, 223, 970, 358,
	876, 924, 359, 938, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	971, 370, 972, 952, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 953, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 934, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 973, 404, 405, 406, 407, 864,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 917, 426, 410,
	411, 427, 428, 974, 429, 430, 932, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 977, 437, 438,
	439, 440, 954, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 944, 945, 946,
	947, 0, 458, 0, 452, 453, 955, 454, 956, 874,
	455, 456, 457, 0, 459, 460, 0, 858, 461, 462,
	463, 465, 466, 464, 467, 918, 468, 0, 0, 469,
	470, 471, 525, 941, 976, 0, 473, 472, 528, 0,
	0, 0, 0, 474, 475, 529, 476, 477, 478, 855,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	0, 0, 1983, 1984, 896, 868, 869, 870, 866, 867,
	879, 880, 0, 0, 0, 878, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 920, 884, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 933, 0, 940, 236, 939,
	0, 237, 238, 239, 240, 241, 886, 919, 242, 978,
	979, 486, 0, 243, 244, 926, 0, 907, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	959, 261, 262, 910, 908, 909, 916, 912, 911, 915,
	263, 264, 265, 266, 943, 267, 937, 936, 0, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	928, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	863, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	950, 951, 875, 221, 0, 0, 0, 0, 0, 292,
	293, 294, 935, 0, 0, 0, 295, 0, 296, 0,
	0, 960, 297, 298, 948, 949, 299, 300, 0, 301,
	957, 0, 885, 302, 0, 303, 304, 305, 306, 307,
	921, 922, 925, 360, 962, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 222, 314, 315, 317, 0,
	961, 316, 930, 931, 0, 891, 0, 318, 963, 923,
	964, 319, 320, 321, 965, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 958,
	966, 331, 332, 967, 0, 333, 334, 335, 914, 913,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 968, 352,
	353, 356, 357, 355, 969, 354, 0, 223, 970, 358,
	876, 924, 359, 938, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	971, 370, 972, 952, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 953, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 934, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 973, 404, 405, 406, 407, 864,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 917, 426, 410,
	411, 427, 428, 974, 429, 430, 932, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 977, 437, 438,
	439, 440, 954, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 944, 945, 946,
	947, 0, 458, 0, 452, 453, 955, 454, 956, 874,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 466, 464, 467, 918, 468, 0, 0, 469,
	470, 471, 525, 941, 976, 0, 473, 472, 528, 0,
	0, 0, 0, 474, 475, 529, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 2179, 0, 0, 0, 0,
	0, 0, 2177, 2178, 896, 868, 869, 870, 866, 867,
	879, 880, 0, 0, 0, 878, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 920, 884, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 933, 0, 940, 236, 939,
	0, 237, 238, 239, 240, 241, 886, 919, 242, 978,
	979, 486, 0, 243, 244, 926, 0, 907, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	959, 261, 262, 910, 908, 909, 916, 912, 911, 915,
	263, 264, 265, 266, 943, 267, 937, 936, 0, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	928, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	863, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	950, 951, 875, 221, 0, 0, 0, 0, 0, 292,
	293, 294, 935, 0, 0, 0, 295, 0, 296, 0,
	0, 960, 297, 298, 948, 949, 299, 300, 0, 301,
	957, 0, 885, 302, 0, 303, 304, 305, 306, 307,
	921, 922, 925, 360, 962, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 222, 314, 315, 317, 0,
	961, 316, 930, 931, 0, 891, 0, 318, 963, 923,
	964, 319, 320, 321, 965, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 958,
	966, 331, 332, 967, 0, 333, 334, 335, 914, 913,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 968, 352,
	353, 356, 357, 355, 969, 354, 0, 223, 970, 358,
	876, 924, 359, 938, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	971, 370, 972, 952, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 953, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 934, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 973, 404, 405, 406, 407, 2528,
	2529, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 917, 426, 410,
	411, 427, 428, 974, 429, 430, 932, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 977, 437, 438,
	439, 440, 954, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 944, 945, 946,
	947, 0, 458, 0, 452, 453, 955, 454, 956, 874,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 466, 464, 467, 918, 468, 0, 0, 469,
	470, 471, 525, 941, 976, 0, 473, 472, 528, 0,
	0, 0, 0, 474, 475, 529, 476, 477, 478, 896,
	868, 869, 870, 866, 867, 879, 0, 0, 0, 0,
	0, 0, 1736, 1737, 0, 0, 224, 225, 226, 227,
	228, 880, 229, 230, 0, 878, 0, 0, 0, 920,
	884, 0, 0, 0, 231, 233, 232, 234, 235, 480,
	933, 0, 940, 236, 939, 0, 237, 238, 239, 240,
	241, 0, 919, 242, 978, 979, 486, 0, 243, 244,
	926, 0, 907, 0, 245, 246, 247, 248, 249, 250,
	251, 0, 0, 253, 254, 255, 252, 0, 256, 0,
	257, 258, 259, 0, 260, 959, 261, 262, 910, 908,
	909, 916, 912, 911, 915, 263, 264, 265, 266, 943,
	267, 937, 936, 0, 271, 268, 269, 0, 272, 270,
	0, 273, 0, 0, 274, 928, 276, 0, 277, 0,
	278, 279, 0, 280, 281, 490, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 950, 951, 875, 221, 0,
	0, 0, 0, 0, 292, 293, 294, 935, 0, 0,
	0, 295, 0, 296, 0, 0, 960, 297, 298, 948,
	949, 299, 300, 0, 301, 957, 0, 885, 302, 0,
	303, 304, 305, 306, 307, 921, 922, 925, 360, 962,
	308, 309, 0, 310, 311, 312, 313, 0, 0, 0,
	222, 314, 315, 317, 0, 961, 316, 930, 931, 0,
	891, 0, 318, 963, 923, 964, 319, 320, 321, 965,
	322, 0, 0, 0, 323, 324, 325, 326, 327, 0,
	329, 328, 0, 330, 958, 966, 331, 332, 967, 0,
	333, 334, 335, 914, 913, 336, 337, 338, 339, 0,
	340, 341, 343, 345, 342, 344, 349, 346, 347, 348,
	351, 0, 350, 968, 352, 353, 356, 357, 355, 969,
	354, 0, 223, 970, 358, 876, 924, 359, 938, 361,
	362, 0, 0, 363, 0, 0, 0, 365, 366, 367,
	0, 0, 368, 369, 508, 971, 370, 972, 952, 371,
	364, 372, 373, 374, 375, 376, 377, 378, 0, 379,
	380, 510, 511, 953, 381, 513, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 389, 390, 391, 934, 392,
	393, 0, 0, 0, 0, 0, 0, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 973,
	404, 405, 406, 407, 864, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 421, 422, 420, 423,
	424, 425, 917, 426, 410, 411, 427, 428, 974, 429,
	430, 932, 0, 431, 0, 432, 433, 434, 435, 412,
	436, 441, 977, 437, 438, 439, 440, 954, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 286, 450,
	0, 451, 944, 945, 946, 947, 0, 458, 0, 452,
	453, 955, 454, 956, 874, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 466, 464, 467,
	918, 468, 0, 0, 469, 470, 471, 525, 941, 976,
	0, 473, 472, 528, 0, 0, 0, 0, 474, 475,
	529, 476, 477, 478, 896, 868, 869, 870, 866, 867,
	879, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 880, 229, 230, 0,
	878, 0, 0, 0, 920, 884, 0, 0, 0, 231,
	233, 232, 234, 235, 0, 933, 0, 940, 236, 939,
	0, 237, 238, 239, 240, 241, 886, 919, 242, 978,
	979, 486, 0, 243, 244, 926, 0, 907, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	959, 261, 3666, 910, 908, 909, 916, 912, 911, 915,
	263, 264, 265, 266, 943, 267, 937, 936, 857, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	928, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	863, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	950, 951, 875, 221, 0, 0, 0, 0, 0, 292,
	293, 294, 935, 0, 0, 0, 295, 0, 296, 0,
	0, 960, 297, 298, 948, 949, 299, 300, 0, 301,
	957, 0, 885, 302, 0, 303, 304, 305, 306, 307,
	921, 922, 925, 360, 0, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 222, 314, 315, 317, 0,
	961, 316, 930, 931, 0, 891, 0, 318, 0, 923,
	0, 319, 320, 321, 965, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 958,
	966, 331, 332, 0, 0, 333, 334, 335, 914, 913,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 968, 352,
	353, 356, 357, 355, 969, 354, 854, 223, 0, 358,
	876, 924, 359, 938, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	971, 370, 972, 952, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 953, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 934, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 973, 404, 405, 406, 407, 864,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 917, 426, 410,
	411, 427, 428, 0, 429, 430, 932, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 977, 437, 438,
	439, 440, 954, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 944, 945, 946,
	947, 0, 458, 0, 452, 453, 955, 454, 956, 874,
	455, 456, 457, 0, 3665, 460, 0, 858, 461, 462,
	463, 465, 466, 464, 467, 918, 468, 0, 0, 469,
	470, 471, 525, 941, 976, 0, 473, 472, 528, 0,
	0, 0, 0, 474, 475, 529, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 844, 0, 1016,
	0, 0, 851, 852, 0, 0, 0, 0, 0, 0,
	0, 880, 0, 0, 0, 878, 224, 225, 226, 227,
	228, 0, 229, 230, 0, 0, 0, 0, 0, 920,
	0, 0, 0, 0, 231, 233, 232, 234, 235, 480,
	481, 0, 482, 236, 483, 0, 237, 238, 239, 240,
	241, 0, 919, 242, 484, 485, 486, 0, 243, 244,
	926, 0, 907, 0, 245, 246, 247, 248, 249, 250,
	251, 0, 0, 253, 254, 255, 252, 0, 256, 0,
	257, 258, 259, 0, 260, 959, 261, 262, 910, 908,
	909, 916, 912, 911, 915, 263, 264, 265, 266, 0,
	267, 488, 489, 0, 271, 268, 269, 0, 272, 270,
	0, 273, 0, 0, 274, 275, 276, 0, 277, 0,
	278, 279, 0, 280, 281, 490, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 950, 951, 0, 221, 0,
	0, 0, 0, 0, 292, 293, 294, 493, 0, 0,
	0, 295, 0, 296, 0, 0, 960, 297, 298, 494,
	495, 299, 300, 0, 301, 957, 0, 497, 302, 0,
	303, 304, 305, 306, 307, 921, 922, 925, 360, 962,
	308, 309, 0, 310, 311, 312, 313, 0, 0, 0,
	222, 314, 315, 317, 0, 961, 316, 501, 502, 0,
	503, 0, 318, 963, 923, 964, 319, 320, 321, 965,
	322, 0, 0, 0, 323, 324, 325, 326, 327, 1002,
	329, 328, 0, 330, 958, 966, 331, 332, 967, 0,
	333, 334, 335, 914, 913, 336, 337, 338, 339, 0,
	340, 341, 343, 345, 342, 344, 349, 346, 347, 348,
	351, 0, 350, 968, 352, 353, 356, 357, 355, 969,
	354, 0, 223, 970, 358, 0, 924, 359, 507, 361,
	362, 0, 0, 363, 0, 0, 1008, 365, 366, 367,
	0, 0, 368, 369, 508, 971, 370, 972, 952, 371,
	364, 372, 373, 374, 375, 376, 377, 378, 0, 379,
	380, 510, 511, 953, 381, 513, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 389, 390, 391, 514, 392,
	393, 0, 0, 0, 0, 0, 0, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 973,
	404, 405, 406, 407, 515, 1010, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 187, 421, 422, 420, 423,
	424, 425, 917, 426, 410, 411, 427, 428, 974, 429,
	430, 516, 0, 431, 0, 432, 433, 434, 435, 412,
	436, 441, 517, 437, 438, 439, 440, 954, 0, 443,
	444, 442, 189, 445, 446, 447, 448, 449, 286, 450,
	0, 451, 519, 520, 521, 522, 0, 458, 0, 452,
	453, 955, 454, 956, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 466, 464, 467,
	918, 468, 0, 0, 469, 470, 471, 1329, 526, 527,
	0, 473, 472, 528, 0, 1016, 0, 181, 474, 475,
	529, 476, 477, 478, 0, 182, 0, 0, 0, 0,
	0, 0, 224, 225, 226, 227, 228, 0, 229, 230,
	0, 0, 0, 0, 1006, 920, 1630, 0, 0, 0,
	231, 233, 232, 234, 235, 480, 481, 0, 482, 236,
	483, 0, 237, 238, 239, 240, 241, 0, 919, 242,
	484, 485, 486, 0, 243, 244, 926, 0, 907, 0,
	245, 246, 247, 248, 249, 250, 251, 0, 0, 253,
	254, 255, 252, 0, 256, 0, 257, 258, 259, 0,
	260, 959, 261, 262, 910, 908, 909, 916, 912, 911,
	915, 263, 264, 265, 266, 0, 267, 488, 489, 0,
	271, 268, 269, 0, 272, 270, 0, 273, 0, 0,
	274, 275, 276, 0, 277, 0, 278, 279, 0, 280,
	281, 490, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 950, 951, 0, 221, 0, 0, 0, 0, 0,
	292, 293, 294, 493, 0, 0, 0, 295, 0, 296,
	0, 0, 960, 297, 298, 494, 495, 299, 300, 0,
	301, 957, 0, 497, 302, 0, 303, 304, 305, 306,
	307, 921, 922, 925, 360, 962, 308, 309, 0, 310,
	311, 312, 313, 0, 0, 0, 222, 314, 315, 317,
	0, 961, 316, 501, 502, 0, 503, 0, 318, 963,
	923, 964, 319, 320, 321, 965, 322, 0, 0, 0,
	323, 324, 325, 326, 327, 1002, 329, 328, 0, 330,
	958, 966, 331, 332, 967, 0, 333, 334, 335, 914,
	913, 336, 337, 338, 339, 0, 340, 341, 343, 345,
	342, 344, 349, 346, 347, 348, 351, 0, 350, 968,
	352, 353, 356, 357, 355, 969, 354, 0, 223, 970,
	358, 0, 924, 359, 507, 361, 362, 0, 0, 363,
	0, 0, 1008, 365, 366, 367, 0, 0, 368, 369,
	508, 971, 370, 972, 952, 371, 364, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 380, 510, 511, 953,
	381, 513, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 389, 390, 391, 514, 392, 393, 0, 0, 0,
	0, 0, 0, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 973, 404, 405, 406, 407,
	515, 1010, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 187, 421, 422, 420, 423, 424, 425, 917, 426,
	410, 411, 427, 428, 974, 429, 430, 516, 0, 431,
	0, 432, 433, 434, 435, 412, 436, 441, 517, 437,
	438, 439, 440, 954, 0, 443, 444, 442, 189, 445,
	446, 447, 448, 449, 286, 450, 0, 451, 519, 520,
	521, 522, 0, 458, 0, 452, 453, 955, 454, 956,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 466, 464, 467, 918, 468, 0, 0,
	469, 470, 471, 1329, 526, 527, 0, 473, 472, 528,
	0, 0, 0, 181, 474, 475, 529, 476, 477, 478,
	0, 182, 0, 0, 2685, 0, 1016, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1006, 0, 1630, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 920, 0, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 0, 237, 238, 239, 240, 241, 0, 919,
	242, 484, 485, 486, 0, 243, 244, 926, 0, 907,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 959, 261, 262, 910, 908, 909, 916, 912,
	911, 915, 263, 264, 265, 266, 0, 267, 488, 489,
	0, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 275, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 950, 951, 0, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 0,
	296, 0, 0, 960, 297, 298, 494, 495, 299, 300,
	0, 301, 957, 0, 497, 302, 0, 303, 304, 305,
	306, 307, 921, 922, 925, 360, 962, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 961, 316, 501, 502, 0, 503, 0, 318,
	963, 923, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 1002, 329, 328, 0,
	330, 958, 966, 331, 332, 967, 0, 333, 334, 335,
	914, 913, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 0, 223,
	970, 358, 0, 924, 359, 507, 361, 362, 0, 0,
	363, 0, 0, 1008, 365, 366, 367, 0, 0, 368,
	369, 508, 971, 370, 972, 952, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	953, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 973, 404, 405, 406,
	407, 515, 1010, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 917,
	426, 410, 411, 427, 428, 974, 429, 430, 516, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 954, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 519,
	520, 521, 522, 0, 458, 0, 452, 453, 955, 454,
	956, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 466, 464, 467, 918, 468, 0,
	0, 469, 470, 471, 525, 526, 527, 0, 473, 472,
	528, 0, 998, 0, 1016, 474, 475, 529, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 1006, 0, 1004, 920, 0, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 481, 0, 482, 236, 483,
	0, 237, 238, 239, 240, 241, 0, 919, 242, 484,
	485, 486, 0, 243, 244, 926, 0, 907, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	959, 261, 262, 910, 908, 909, 916, 912, 911, 915,
	263, 264, 265, 266, 0, 267, 488, 489, 0, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	275, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	490, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	950, 951, 0, 221, 0, 0, 0, 0, 0, 292,
	293, 294, 493, 0, 0, 0, 295, 0, 296, 0,
	0, 960, 297, 298, 494, 495, 299, 300, 0, 301,
	957, 0, 497, 302, 0, 303, 304, 305, 306, 307,
	921, 922, 925, 360, 962, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 222, 314, 315, 317, 0,
	961, 316, 501, 502, 0, 503, 0, 318, 963, 923,
	964, 319, 320, 321, 965, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 1002, 329, 328, 0, 330, 958,
	966, 331, 332, 967, 0, 333, 334, 335, 914, 913,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 968, 352,
	353, 356, 357, 355, 969, 354, 0, 223, 970, 358,
	0, 924, 359, 507, 361, 362, 0, 0, 363, 0,
	0, 1008, 365, 366, 367, 0, 0, 368, 369, 508,
	971, 370, 972, 952, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 953, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 514, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 973, 404, 405, 406, 407, 515,
	1010, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 917, 426, 410,
	411, 427, 428, 974, 429, 430, 516, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 517, 437, 438,
	439, 440, 954, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 519, 520, 521,
	522, 0, 458, 0, 452, 453, 955, 454, 956, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 466, 464, 467, 918, 468, 0, 0, 469,
	470, 471, 525, 526, 527, 0, 473, 472, 528, 0,
	1016, 0, 0, 474, 475, 529, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 1006,
	920, 1004, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 481, 0, 482, 236, 483, 0, 237, 238, 239,
	240, 241, 0, 919, 242, 484, 485, 486, 0, 243,
	244, 926, 0, 907, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 959, 261, 262, 910,
	908, 909, 916, 912, 911, 915, 263, 264, 265, 266,
	0, 267, 488, 489, 0, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 275, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 490, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 950, 951, 0, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 493, 0,
	0, 0, 295, 0, 296, 0, 0, 960, 297, 298,
	494, 495, 299, 300, 0, 301, 957, 0, 497, 302,
	0, 303, 304, 305, 306, 307, 921, 922, 925, 360,
	962, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 0, 961, 316, 501, 502,
	0, 503, 0, 318, 963, 923, 964, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	1002, 329, 328, 0, 330, 958, 966, 331, 332, 967,
	0, 333, 334, 335, 914, 913, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 0, 223, 970, 358, 0, 924, 359, 507,
	361, 362, 0, 0, 363, 0, 0, 1008, 365, 366,
	367, 0, 0, 368, 369, 508, 971, 370, 972, 952,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 953, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 514,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	973, 404, 405, 406, 407, 515, 1010, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 917, 426, 410, 411, 427, 428, 974,
	429, 430, 516, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 517, 437, 438, 439, 440, 954, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 519, 520, 521, 522, 0, 458, 0,
	452, 453, 955, 454, 956, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 466, 464,
	467, 918, 468, 0, 0, 469, 470, 471, 525, 526,
	527, 0, 473, 472, 528, 0, 1016, 0, 0, 474,
	475, 529, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 1006, 920, 1004, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 0, 237, 238, 239, 240, 241, 0, 919,
	242, 484, 485, 486, 0, 243, 244, 926, 0, 907,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 959, 261, 262, 910, 908, 909, 916, 912,
	911, 915, 263, 264, 265, 266, 0, 267, 488, 489,
	0, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 275, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 950, 951, 0, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 0,
	296, 0, 0, 960, 297, 298, 494, 495, 299, 300,
	0, 301, 957, 0, 497, 302, 0, 303, 304, 305,
	306, 307, 921, 922, 925, 360, 962, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 961, 316, 501, 502, 0, 503, 0, 318,
	963, 923, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 958, 966, 331, 332, 967, 0, 333, 334, 335,
	914, 913, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 0, 223,
	970, 358, 0, 924, 359, 507, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 971, 370, 972, 952, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	953, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 973, 404, 405, 406,
	407, 515, 1010, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 917,
	426, 410, 411, 427, 428, 974, 429, 430, 516, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 954, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 519,
	520, 521, 522, 0, 458, 0, 452, 453, 955, 454,
	956, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 466, 464, 467, 918, 468, 0,
	0, 469, 470, 471, 525, 526, 527, 0, 473, 472,
	528, 0, 844, 0, 1194, 474, 475, 529, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 1528, 479, 0, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 481, 0, 482, 236, 483,
	0, 237, 238, 239, 240, 241, 0, 0, 242, 484,
	485, 486, 0, 243, 244, 487, 0, 1166, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	959, 261, 262, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 266, 0, 267, 488, 489, 0, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	275, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	490, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	491, 492, 0, 221, 0, 0, 0, 0, 0, 292,
	293, 294, 493, 0, 0, 0, 295, 0, 296, 0,
	0, 960, 297, 298, 494, 495, 299, 300, 0, 301,
	496, 0, 497, 302, 0, 303, 304, 305, 306, 307,
	498, 499, 500, 360, 962, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 0, 314, 315, 317, 0,
	961, 316, 501, 502, 0, 503, 0, 318, 963, 504,
	964, 319, 320, 321, 965, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 505,
	966, 331, 332, 967, 0, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 968, 352,
	353, 356, 357, 355, 969, 354, 0, 0, 970, 358,
	0, 506, 359, 507, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	971, 370, 972, 509, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 512, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 514, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 973, 404, 405, 406, 407, 515,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	187, 421, 422, 420, 423, 424, 425, 0, 426, 410,
	411, 427, 428, 974, 429, 430, 516, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 517, 437, 438,
	439, 440, 518, 0, 443, 444, 442, 189, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 519, 520, 521,
	522, 0, 458, 0, 452, 453, 523, 454, 524, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 466, 464, 467, 0, 468, 0, 0, 469,
	470, 471, 1329, 526, 527, 0, 473, 472, 528, 0,
	0, 0, 181, 474, 475, 529, 476, 477, 478, 0,
	182, 0, 0, 1326, 0, 1194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 156, 224, 225, 226, 227, 228, 0, 229, 230,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	231, 233, 232, 234, 235, 480, 481, 0, 482, 236,
	483, 0, 237, 238, 239, 240, 241, 0, 0, 242,
	484, 485, 486, 0, 243, 244, 487, 0, 1166, 0,
	245, 246, 247, 248, 249, 250, 251, 0, 0, 253,
	254, 255, 252, 0, 256, 0, 257, 258, 259, 0,
	260, 959, 261, 262, 0, 0, 0, 0, 0, 0,
	0, 263, 264, 265, 266, 0, 267, 488, 489, 0,
	271, 268, 269, 0, 272, 270, 0, 273, 0, 0,
	274, 275, 276, 0, 277, 0, 278, 279, 0, 280,
	281, 490, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 491, 492, 0, 221, 0, 0, 0, 0, 0,
	292, 293, 294, 493, 0, 0, 0, 295, 0, 296,
	0, 0, 960, 297, 298, 494, 495, 299, 300, 0,
	301, 496, 0, 497, 302, 0, 303, 304, 305, 306,
	307, 498, 499, 500, 360, 962, 308, 309, 0, 310,
	311, 312, 313, 0, 0, 0, 0, 314, 315, 317,
	0, 961, 316, 501, 502, 0, 503, 0, 318, 963,
	504, 964, 319, 320, 321, 965, 322, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 329, 328, 0, 330,
	505, 966, 331, 332, 967, 0, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 341, 343, 345,
	342, 344, 349, 346, 347, 348, 351, 0, 350, 968,
	352, 353, 356, 357, 355, 969, 354, 0, 0, 970,
	358, 0, 506, 359, 507, 361, 362, 0, 0, 363,
	0, 0, 0, 365, 366, 367, 0, 0, 368, 369,
	508, 971, 370, 972, 509, 371, 364, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 380, 510, 511, 512,
	381, 513, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 389, 390, 391, 514, 392, 393, 0, 0, 0,
	0, 0, 0, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 973, 404, 405, 406, 407,
	515, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 187, 421, 422, 420, 423, 424, 425, 0, 426,
	410, 411, 427, 428, 974, 429, 430, 516, 0, 431,
	0, 432, 433, 434, 435, 412, 436, 441, 517, 437,
	438, 439, 440, 518, 0, 443, 444, 442, 189, 445,
	446, 447, 448, 449, 286, 450, 0, 451, 519, 520,
	521, 522, 0, 458, 0, 452, 453, 523, 454, 524,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 466, 464, 467, 0, 468, 0, 0,
	469, 470, 471, 1329, 526, 527, 0, 473, 472, 528,
	0, 0, 0, 181, 474, 475, 529, 476, 477, 478,
	0, 182, 0, 0, 0, 0, 1194, 1193, 0, 0,
	0, 0, 1191, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 156, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 0, 237, 238, 239, 240, 241, 0, 0,
	242, 484, 485, 486, 0, 243, 244, 487, 0, 1166,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 959, 261, 262, 0, 0, 0, 0, 0,
	0, 0, 263, 264, 265, 266, 0, 267, 488, 489,
	0, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 275, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 491, 492, 0, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 0,
	296, 0, 0, 960, 297, 298, 494, 495, 299, 300,
	0, 301, 496, 0, 497, 302, 0, 303, 304, 305,
	306, 307, 498, 499, 500, 360, 962, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 0, 314, 315,
	317, 0, 961, 316, 501, 502, 0, 503, 0, 318,
	963, 504, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 505, 966, 331, 332, 967, 0, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 0, 0,
	970, 358, 0, 506, 359, 507, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 971, 370, 972, 509, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	512, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 973, 404, 405, 406,
	407, 515, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 0,
	426, 410, 411, 427, 428, 974, 429, 430, 516, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 518, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 519,
	520, 521, 522, 0, 458, 0, 452, 453, 523, 454,
	524, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 466, 464, 467, 0, 468, 0,
	0, 469, 470, 471, 525, 526, 527, 0, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 1194, 1193, 0, 0, 0, 0, 1191, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	226, 227, 228, 2892, 229, 230, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 231, 233, 232, 234,
	235, 480, 481, 0, 482, 236, 483, 0, 237, 238,
	239, 240, 241, 0, 0, 242, 484, 485, 486, 0,
	243, 244, 487, 0, 1166, 0, 245, 246, 247, 248,
	249, 250, 251, 0, 0, 253, 254, 255, 252, 0,
	256, 0, 257, 258, 259, 0, 260, 959, 261, 262,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	266, 0, 267, 488, 489, 0, 271, 268, 269, 0,
	272, 270, 0, 273, 0, 0, 274, 275, 276, 0,
	277, 0, 278, 279, 0, 280, 281, 490, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 491, 492, 0,
	221, 0, 0, 0, 0, 0, 292, 293, 294, 493,
	0, 0, 0, 295, 0, 296, 0, 0, 960, 297,
	298, 494, 495, 299, 300, 0, 301, 496, 0, 497,
	302, 0, 303, 304, 305, 306, 307, 498, 499, 500,
	360, 962, 308, 309, 0, 310, 311, 312, 313, 0,
	0, 0, 0, 314, 315, 317, 0, 961, 316, 501,
	502, 0, 503, 0, 318, 963, 504, 964, 319, 320,
	321, 965, 322, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 329, 328, 0, 330, 505, 966, 331, 332,
	967, 0, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 341, 343, 345, 342, 344, 349, 346,
	347, 348, 351, 0, 350, 968, 352, 353, 356, 357,
	355, 969, 354, 0, 0, 970, 358, 0, 506, 359,
	507, 361, 362, 0, 0, 363, 0, 0, 0, 365,
	366, 367, 0, 0, 368, 369, 508, 971, 370, 972,
	509, 371, 364, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 380, 510, 511, 512, 381, 513, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 389, 390, 391,
	514, 392, 393, 0, 0, 0, 0, 0, 0, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 973, 404, 405, 406, 407, 515, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 421, 422,
	420, 423, 424, 425, 0, 426, 410, 411, 427, 428,
	974, 429, 430, 516, 0, 431, 0, 432, 433, 434,
	435, 412, 436, 441, 517, 437, 438, 439, 440, 518,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	286, 450, 0, 451, 519, 520, 521, 522, 0, 458,
	0, 452, 453, 523, 454, 524, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 466,
	464, 467, 0, 468, 0, 0, 469, 470, 471, 525,
	526, 527, 0, 473, 472, 528, 0, 0, 0, 0,
	474, 475, 529, 476, 477, 478, 1194, 1193, 0, 0,
	0, 0, 1191, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 1200, 229,
	230, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 0, 237, 238, 239, 240, 241, 0, 0,
	242, 484, 485, 486, 0, 243, 244, 487, 0, 1166,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 959, 261, 262, 0, 0, 0, 0, 0,
	0, 0, 263, 264, 265, 266, 0, 267, 488, 489,
	0, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 275, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 491, 492, 0, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 0,
	296, 0, 0, 960, 297, 298, 494, 495, 299, 300,
	0, 301, 496, 0, 497, 302, 0, 303, 304, 305,
	306, 307, 498, 499, 500, 360, 962, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 0, 314, 315,
	317, 0, 961, 316, 501, 502, 0, 503, 0, 318,
	963, 504, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 505, 966, 331, 332, 967, 0, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 0, 0,
	970, 358, 0, 506, 359, 507, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 971, 370, 972, 509, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	512, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 973, 404, 405, 406,
	407, 515, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 0,
	426, 410, 411, 427, 428, 974, 429, 430, 516, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 518, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 519,
	520, 521, 522, 0, 458, 0, 452, 453, 523, 454,
	524, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 466, 464, 467, 0, 468, 0,
	0, 469, 470, 471, 525, 526, 527, 0, 473, 472,
	528, 1016, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	226, 227, 228, 0, 229, 230, 0, 0, 0, 0,
	0, 920, 0, 1335, 0, 0, 231, 233, 232, 234,
	235, 480, 481, 0, 482, 236, 483, 0, 237, 238,
	239, 240, 241, 0, 919, 242, 484, 485, 486, 0,
	243, 244, 926, 0, 907, 0, 245, 246, 247, 248,
	249, 250, 251, 0, 0, 253, 254, 255, 252, 0,
	256, 0, 257, 258, 259, 0, 260, 959, 261, 262,
	910, 908, 909, 916, 912, 911, 915, 263, 264, 265,
	266, 0, 267, 488, 489, 0, 271, 268, 269, 0,
	272, 270, 0, 273, 0, 0, 274, 275, 276, 0,
	277, 0, 278, 279, 0, 280, 281, 490, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 950, 951, 0,
	221, 0, 0, 0, 0, 0, 292, 293, 294, 493,
	0, 0, 0, 295, 0, 296, 0, 0, 960, 297,
	298, 494, 495, 299, 300, 0, 301, 957, 0, 497,
	302, 0, 303, 304, 305, 306, 307, 921, 922, 925,
	360, 962, 308, 309, 0, 310, 311, 312, 313, 0,
	0, 0, 222, 314, 315, 317, 0, 961, 316, 501,
	502, 0, 503, 0, 318, 963, 923, 964, 319, 320,
	321, 965, 322, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 329, 328, 0, 330, 958, 966, 331, 332,
	967, 0, 333, 334, 335, 914, 913, 336, 337, 338,
	339, 0, 340, 341, 343, 345, 342, 344, 349, 346,
	347, 348, 351, 0, 350, 968, 352, 353, 356, 357,
	355, 969, 354, 0, 223, 970, 358, 0, 924, 359,
	507, 361, 362, 0, 0, 363, 0, 0, 0, 365,
	366, 367, 0, 0, 368, 369, 508, 971, 370, 972,
	952, 371, 364, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 380, 510, 511, 953, 381, 513, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 389, 390, 391,
	514, 392, 393, 0, 0, 0, 0, 0, 0, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 973, 404, 405, 406, 407, 515, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 421, 422,
	420, 423, 424, 425, 917, 426, 410, 411, 427, 428,
	974, 429, 430, 516, 0, 431, 0, 432, 433, 434,
	435, 412, 436, 441, 517, 437, 438, 439, 440, 954,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	286, 450, 0, 451, 519, 520, 521, 522, 0, 458,
	0, 452, 453, 955, 454, 956, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 466,
	464, 467, 918, 468, 0, 0, 469, 470, 471, 525,
	526, 527, 0, 473, 472, 528, 844, 0, 218, 0,
	474, 475, 529, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 481,
	0, 482, 236, 483, 0, 237, 238, 239, 240, 241,
	0, 0, 242, 484, 485, 486, 0, 243, 244, 487,
	0, 0, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 266, 0, 267,
	488, 489, 0, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 275, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 490, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 294, 493, 0, 0, 0,
	295, 0, 296, 0, 0, 0, 297, 298, 494, 495,
	299, 300, 0, 301, 496, 0, 497, 302, 0, 303,
	304, 305, 306, 307, 498, 499, 500, 360, 0, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 0,
	314, 315, 317, 0, 0, 316, 501, 502, 0, 503,
	0, 318, 0, 504, 0, 319, 320, 321, 0, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 505, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 0, 352, 353, 356, 357, 355, 0, 354,
	0, 0, 0, 358, 0, 506, 359, 507, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 0, 370, 0, 509, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 512, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 514, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 515, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 187, 421, 422, 420, 423, 424,
	425, 0, 426, 410, 411, 427, 428, 0, 429, 430,
	516, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 517, 437, 438, 439, 440, 518, 0, 443, 444,
	442, 189, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 519, 520, 521, 522, 0, 458, 0, 452, 453,
	523, 454, 524, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 466, 464, 467, 0,
	468, 0, 0, 469, 470, 471, 1329, 526, 527, 0,
	473, 472, 528, 218, 0, 0, 181, 474, 475, 529,
	476, 477, 478, 0, 182, 0, 0, 0, 0, 0,
	224, 225, 226, 227, 228, 0, 229, 230, 0, 0,
	0, 0, 0, 479, 0, 156, 0, 0, 231, 233,
	232, 234, 235, 480, 481, 0, 482, 236, 483, 0,
	237, 238, 239, 240, 241, 0, 0, 242, 484, 485,
	486, 0, 243, 244, 487, 0, 0, 0, 245, 246,
	247, 248, 249, 250, 251, 0, 0, 253, 254, 255,
	252, 0, 256, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 265, 266, 0, 267, 488, 489, 0, 271, 268,
	269, 0, 272, 270, 0, 273, 0, 0, 274, 275,
	276, 0, 277, 0, 278, 279, 0, 280, 281, 490,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 491,
	492, 0, 221, 0, 0, 0, 0, 0, 292, 293,
	294, 493, 0, 0, 0, 295, 0, 296, 0, 0,
	0, 297, 298, 494, 495, 299, 300, 0, 301, 496,
	0, 497, 302, 0, 303, 304, 305, 306, 307, 498,
	499, 500, 360, 0, 308, 309, 0, 310, 311, 312,
	313, 0, 0, 0, 222, 314, 315, 317, 0, 0,
	316, 501, 502, 0, 503, 0, 318, 0, 504, 0,
	319, 320, 321, 0, 322, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 329, 328, 0, 330, 505, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 341, 343, 345, 342, 344,
	349, 346, 347, 348, 351, 0, 350, 0, 352, 353,
	356, 357, 355, 0, 354, 0, 223, 0, 358, 0,
	506, 359, 507, 361, 362, 0, 0, 363, 0, 0,
	0, 365, 366, 367, 0, 0, 368, 369, 508, 0,
	370, 0, 509, 371, 364, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 380, 510, 511, 512, 381, 513,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 389,
	390, 391, 514, 392, 393, 0, 0, 0, 0, 0,
	0, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 515, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	421, 422, 420, 423, 424, 425, 0, 426, 410, 411,
	427, 428, 0, 429, 430, 516, 0, 431, 0, 432,
	433, 434, 435, 412, 436, 441, 517, 437, 438, 439,
	440, 518, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 286, 450, 0, 451, 519, 520, 521, 522,
	0, 458, 0, 452, 453, 523, 454, 524, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 466, 464, 467, 0, 468, 0, 0, 469, 470,
	471, 525, 526, 527, 0, 473, 472, 528, 0, 1280,
	0, 218, 474, 475, 529, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	226, 227, 228, 0, 229, 230, 0, 0, 0, 0,
	1644, 479, 0, 0, 0, 0, 231, 233, 232, 234,
	235, 480, 481, 0, 482, 236, 483, 0, 237, 238,
	239, 240, 241, 0, 0, 242, 484, 485, 486, 0,
	243, 244, 487, 0, 0, 0, 245, 246, 247, 248,
	249, 250, 251, 0, 0, 253, 254, 255, 252, 0,
	256, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	266, 0, 267, 488, 489, 0, 271, 268, 269, 0,
	272, 270, 0, 273, 0, 0, 274, 275, 276, 0,
	277, 0, 278, 279, 0, 280, 281, 490, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 491, 492, 0,
	221, 0, 0, 0, 0, 0, 292, 293, 294, 493,
	0, 0, 0, 295, 0, 296, 0, 0, 0, 297,
	298, 494, 495, 299, 300, 0, 301, 496, 0, 497,
	302, 0, 303, 304, 305, 306, 307, 498, 499, 500,
	360, 0, 308, 309, 0, 310, 311, 312, 313, 0,
	0, 0, 222, 314, 315, 317, 0, 0, 316, 501,
	502, 0, 503, 0, 318, 0, 504, 0, 319, 320,
	321, 0, 322, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 329, 328, 0, 330, 505, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 341, 343, 345, 342, 344, 349, 346,
	347, 348, 351, 0, 350, 0, 352, 353, 356, 357,
	355, 0, 354, 0, 223, 0, 358, 0, 506, 359,
	507, 361, 362, 0, 0, 363, 0, 0, 0, 365,
	366, 367, 0, 0, 368, 369, 508, 0, 370, 0,
	509, 371, 364, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 380, 510, 511, 512, 381, 513, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 389, 390, 391,
	514, 392, 393, 0, 0, 0, 0, 0, 0, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 515, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 421, 422,
	420, 423, 424, 425, 0, 426, 410, 411, 427, 428,
	0, 429, 430, 516, 0, 431, 0, 432, 433, 434,
	435, 412, 436, 441, 517, 437, 438, 439, 440, 518,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	286, 450, 0, 451, 519, 520, 521, 522, 0, 458,
	0, 452, 453, 523, 454, 524, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 466,
	464, 467, 0, 468, 0, 0, 469, 470, 471, 525,
	526, 527, 218, 473, 472, 528, 0, 0, 0, 0,
	474, 475, 529, 476, 477, 478, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 1284, 231, 233, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 0, 237,
	238, 239, 240, 241, 0, 0, 242, 484, 485, 486,
	0, 243, 244, 487, 0, 0, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	265, 266, 0, 267, 488, 489, 0, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 275, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 491, 492,
	0, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 0, 296, 0, 0, 0,
	297, 298, 494, 495, 299, 300, 0, 301, 496, 0,
	497, 302, 0, 303, 304, 305, 306, 307, 498, 499,
	500, 360, 0, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 0, 0, 316,
	501, 502, 0, 503, 0, 318, 0, 504, 0, 319,
	320, 321, 0, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 505, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 0, 352, 353, 356,
	357, 355, 0, 354, 0, 223, 0, 358, 0, 506,
	359, 507, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 0, 370,
	0, 509, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 512, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 515, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 0, 426, 410, 411, 427,
	428, 0, 429, 430, 516, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	518, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 519, 520, 521, 522, 0,
	458, 0, 452, 453, 523, 454, 524, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	466, 464, 467, 0, 468, 0, 0, 469, 470, 471,
	525, 526, 527, 218, 473, 472, 528, 0, 0, 0,
	0, 474, 475, 529, 476, 477, 478, 0, 0, 0,
	224, 225, 226, 227, 228, 0, 229, 230, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 2841, 231, 233,
	232, 234, 235, 480, 481, 0, 482, 236, 483, 0,
	237, 238, 239, 240, 241, 0, 0, 242, 484, 485,
	486, 0, 243, 244, 487, 0, 0, 0, 245, 246,
	247, 248, 249, 250, 251, 0, 0, 253, 254, 255,
	252, 0, 256, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 265, 266, 0, 267, 488, 489, 0, 271, 268,
	269, 0, 272, 270, 0, 273, 0, 0, 274, 275,
	276, 0, 277, 0, 278, 279, 0, 280, 281, 490,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 491,
	492, 0, 221, 0, 0, 0, 0, 0, 292, 293,
	294, 493, 0, 0, 0, 295, 0, 296, 0, 0,
	0, 297, 298, 494, 495, 299, 300, 0, 301, 496,
	0, 497, 302, 0, 303, 304, 305, 306, 307, 498,
	499, 500, 360, 0, 308, 309, 0, 310, 311, 312,
	313, 0, 0, 0, 222, 314, 315, 317, 0, 0,
	316, 501, 502, 0, 503, 0, 318, 0, 504, 0,
	319, 320, 321, 0, 322, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 329, 328, 0, 330, 505, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 341, 343, 345, 342, 344,
	349, 346, 347, 348, 351, 0, 350, 0, 352, 353,
	356, 357, 355, 0, 354, 0, 223, 0, 358, 0,
	506, 359, 507, 361, 362, 0, 0, 363, 0, 0,
	0, 365, 366, 367, 0, 0, 368, 369, 508, 0,
	370, 0, 509, 371, 364, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 380, 510, 511, 512, 381, 513,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 389,
	390, 391, 514, 392, 393, 0, 0, 0, 0, 0,
	0, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 515, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	421, 422, 420, 423, 424, 425, 0, 426, 410, 411,
	427, 428, 0, 429, 430, 516, 0, 431, 0, 432,
	433, 434, 435, 412, 436, 441, 517, 437, 438, 439,
	440, 518, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 286, 450, 0, 451, 519, 520, 521, 522,
	0, 458, 0, 452, 453, 523, 454, 524, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 466, 464, 467, 0, 468, 0, 0, 469, 470,
	471, 525, 526, 527, 218, 473, 472, 528, 0, 0,
	0, 0, 474, 475, 529, 476, 477, 478, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 1284, 231,
	233, 232, 234, 235, 480, 481, 0, 482, 236, 483,
	0, 237, 238, 239, 240, 241, 0, 0, 242, 484,
	485, 486, 0, 243, 244, 487, 0, 0, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 266, 0, 267, 488, 489, 0, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	275, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	490, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 294, 493, 0, 0, 0, 295, 0, 296, 0,
	0, 0, 297, 298, 494, 495, 299, 300, 0, 301,
	496, 0, 497, 302, 0, 303, 304, 305, 306, 307,
	498, 499, 500, 360, 0, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 0, 314, 315, 317, 0,
	0, 316, 501, 502, 0, 503, 0, 318, 0, 504,
	0, 319, 320, 321, 0, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 505,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 0, 352,
	353, 356, 357, 355, 0, 354, 0, 0, 0, 358,
	0, 506, 359, 507, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	0, 370, 0, 509, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 512, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 514, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 515,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 0, 426, 410,
	411, 427, 428, 0, 429, 430, 516, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 517, 437, 438,
	439, 440, 518, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 519, 520, 521,
	522, 0, 458, 0, 452, 453, 523, 454, 524, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 466, 464, 467, 0, 468, 0, 0, 469,
	470, 471, 525, 526, 527, 0, 473, 472, 528, 218,
	0, 0, 0, 474, 475, 529, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 226, 227,
	228, 0, 229, 230, 0, 0, 0, 0, 0, 479,
	0, 2433, 0, 0, 231, 233, 232, 234, 235, 480,
	481, 0, 482, 236, 483, 0, 237, 238, 239, 240,
	241, 0, 0, 242, 484, 485, 486, 0, 243, 244,
	487, 0, 0, 0, 245, 246, 247, 248, 249, 250,
	251, 0, 0, 253, 254, 255, 252, 0, 256, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 0,
	0, 0, 0, 0, 0, 263, 264, 265, 266, 0,
	267, 488, 489, 0, 271, 268, 269, 0, 272, 270,
	0, 273, 0, 0, 274, 275, 276, 0, 277, 0,
	278, 279, 0, 280, 281, 490, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 294, 493, 0, 0,
	0, 295, 0, 296, 0, 0, 0, 297, 298, 494,
	495, 299, 300, 0, 301, 496, 0, 497, 302, 0,
	303, 304, 305, 306, 307, 498, 499, 500, 360, 0,
	308, 309, 0, 310, 311, 312, 313, 0, 0, 0,
	0, 314, 315, 317, 0, 0, 316, 501, 502, 0,
	503, 0, 318, 0, 504, 0, 319, 320, 321, 0,
	322, 0, 0, 0, 323, 324, 325, 326, 327, 0,
	329, 328, 0, 330, 505, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 0,
	340, 341, 343, 345, 342, 344, 349, 346, 347, 348,
	351, 0, 350, 0, 352, 353, 356, 357, 355, 0,
	354, 0, 0, 0, 358, 0, 506, 359, 507, 361,
	362, 0, 0, 363, 0, 0, 0, 365, 366, 367,
	0, 0, 368, 369, 508, 0, 370, 0, 509, 371,
	364, 372, 373, 374, 375, 376, 377, 378, 0, 379,
	380, 510, 511, 512, 381, 513, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 389, 390, 391, 514, 392,
	393, 0, 0, 0, 0, 0, 0, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 515, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 421, 422, 420, 423,
	424, 425, 0, 426, 410, 411, 427, 428, 0, 429,
	430, 516, 0, 431, 0, 432, 433, 434, 435, 412,
	436, 441, 517, 437, 438, 439, 440, 518, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 286, 450,
	0, 451, 519, 520, 521, 522, 0, 458, 0, 452,
	453, 523, 454, 524, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 466, 464, 467,
	0, 468, 0, 0, 469, 470, 471, 525, 526, 527,
	0, 473, 472, 528, 218, 0, 0, 0, 474, 475,
	529, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 479, 0, 2980, 0, 0, 231,
	233, 232, 234, 235, 480, 481, 0, 482, 236, 483,
	0, 237, 238, 239, 240, 241, 0, 0, 242, 484,
	485, 486, 0, 243, 244, 487, 0, 0, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 266, 0, 267, 488, 489, 0, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	275, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	490, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 294, 493, 0, 0, 0, 295, 0, 296, 0,
	0, 0, 297, 298, 494, 495, 299, 300, 0, 301,
	496, 0, 497, 302, 0, 303, 304, 305, 306, 307,
	498, 499, 500, 360, 0, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 0, 314, 315, 317, 0,
	0, 316, 501, 502, 0, 503, 0, 318, 0, 504,
	0, 319, 320, 321, 0, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 505,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 0, 352,
	353, 356, 357, 355, 0, 354, 0, 0, 0, 358,
	0, 506, 359, 507, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	0, 370, 0, 509, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 512, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 514, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 515,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 0, 426, 410,
	411, 427, 428, 0, 429, 430, 516, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 517, 437, 438,
	439, 440, 518, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 519, 520, 521,
	522, 0, 458, 0, 452, 453, 523, 454, 524, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 466, 464, 467, 0, 468, 0, 0, 469,
	470, 471, 525, 526, 527, 0, 473, 472, 528, 0,
	713, 0, 607, 474, 475, 529, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 1888, 479, 0, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 0, 237,
	238, 239, 240, 241, 0, 0, 242, 484, 485, 486,
	0, 243, 244, 487, 0, 0, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	613, 266, 0, 267, 488, 489, 0, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 275, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 491, 492,
	0, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 0, 296, 0, 711, 0,
	297, 298, 494, 495, 299, 300, 0, 301, 496, 0,
	497, 302, 0, 303, 304, 305, 306, 307, 498, 499,
	500, 360, 0, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 0, 0, 316,
	501, 502, 0, 503, 0, 318, 0, 504, 0, 319,
	320, 321, 0, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 505, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 0, 352, 353, 356,
	357, 355, 0, 354, 0, 223, 0, 358, 0, 506,
	359, 507, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 0, 370,
	0, 509, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 512, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 515, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 0, 426, 410, 411, 427,
	428, 0, 429, 430, 516, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	518, 0, 443, 444, 442, 612, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 519, 520, 521, 522, 0,
	458, 0, 452, 453, 523, 454, 524, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	466, 464, 467, 0, 468, 0, 0, 469, 470, 471,
	525, 526, 527, 0, 473, 472, 528, 0, 606, 0,
	607, 474, 475, 529, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 616, 229, 230, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 481, 0, 482, 236, 483, 0, 237, 238, 239,
	240, 241, 0, 0, 242, 484, 485, 486, 0, 243,
	244, 487, 0, 0, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	0, 0, 0, 0, 0, 0, 263, 264, 613, 266,
	0, 267, 488, 489, 0, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 275, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 490, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 491, 492, 0, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 493, 0,
	0, 0, 295, 0, 296, 0, 0, 0, 297, 298,
	494, 495, 299, 300, 0, 301, 496, 0, 497, 302,
	0, 303, 304, 305, 306, 307, 498, 499, 500, 360,
	0, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 0, 0, 316, 501, 502,
	0, 503, 0, 318, 0, 504, 0, 319, 320, 321,
	0, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 505, 0, 331, 332, 0,
	0, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 0, 352, 353, 356, 357, 355,
	0, 354, 0, 223, 0, 358, 0, 506, 359, 507,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 0, 370, 0, 509,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 512, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 514,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 515, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 0, 426, 410, 411, 427, 428, 0,
	429, 430, 516, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 517, 437, 438, 439, 440, 518, 0,
	443, 444, 442, 612, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 519, 520, 521, 522, 604, 458, 0,
	452, 453, 523, 454, 524, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 466, 464,
	467, 0, 468, 0, 0, 469, 470, 471, 525, 526,
	527, 0, 473, 472, 528, 0, 0, 0, 0, 474,
	475, 529, 476, 477, 478, 1194, 1193, 0, 0, 0,
	0, 1191, 0, 0, 0, 0, 0, 0, 0, 0,
	616, 0, 224, 225, 226, 227, 228, 0, 229, 230,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	231, 233, 232, 234, 235, 480, 481, 0, 482, 236,
	483, 0, 237, 238, 239, 240, 241, 0, 0, 242,
	484, 485, 486, 0, 243, 244, 487, 0, 1166, 0,
	245, 246, 247, 248, 249, 250, 251, 0, 0, 253,
	254, 255, 252, 0, 256, 0, 257, 258, 259, 0,
	260, 959, 261, 262, 0, 0, 0, 0, 0, 0,
	0, 263, 264, 265, 266, 0, 267, 488, 489, 0,
	271, 268, 269, 0, 272, 270, 0, 273, 0, 0,
	274, 275, 276, 0, 277, 0, 278, 279, 0, 280,
	281, 490, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 491, 492, 0, 221, 0, 0, 0, 0, 0,
	292, 293, 294, 493, 0, 0, 0, 295, 0, 296,
	0, 0, 960, 297, 298, 494, 495, 299, 300, 0,
	301, 496, 0, 497, 302, 0, 303, 304, 305, 306,
	307, 498, 499, 500, 360, 962, 308, 309, 0, 310,
	311, 312, 313, 0, 0, 0, 0, 314, 315, 317,
	0, 961, 316, 501, 502, 0, 503, 0, 318, 963,
	504, 964, 319, 320, 321, 965, 322, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 329, 328, 0, 330,
	505, 966, 331, 332, 967, 0, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 341, 343, 345,
	342, 344, 349, 346, 347, 348, 351, 0, 350, 968,
	352, 353, 356, 357, 355, 969, 354, 0, 0, 970,
	358, 3122, 506, 359, 507, 361, 362, 0, 0, 363,
	0, 0, 0, 365, 366, 367, 0, 0, 368, 369,
	508, 971, 370, 972, 509, 371, 364, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 380, 510, 511, 512,
	381, 513, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 389, 390, 391, 514, 392, 393, 0, 0, 0,
	0, 0, 0, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 973, 404, 405, 406, 407,
	515, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 421, 422, 420, 423, 424, 425, 0, 426,
	410, 411, 427, 428, 974, 429, 430, 516, 0, 431,
	0, 432, 433, 434, 435, 412, 436, 441, 517, 437,
	438, 439, 440, 518, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 286, 450, 0, 451, 519, 520,
	521, 522, 0, 458, 0, 452, 453, 523, 454, 524,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 466, 464, 467, 0, 468, 0, 0,
	469, 470, 471, 525, 526, 527, 0, 473, 472, 528,
	0, 0, 0, 0, 474, 475, 529, 476, 477, 478,
	1194, 1193, 0, 0, 0, 0, 1191, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 481, 0, 482, 236, 483, 0, 237, 238, 239,
	240, 241, 0, 0, 242, 484, 485, 486, 0, 243,
	244, 487, 0, 1166, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 959, 261, 262, 0,
	0, 0, 0, 0, 0, 0, 263, 264, 265, 266,
	0, 267, 488, 489, 0, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 275, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 490, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 491, 492, 0, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 493, 0,
	0, 0, 295, 0, 296, 0, 0, 960, 297, 298,
	494, 495, 299, 300, 0, 301, 496, 0, 497, 302,
	0, 303, 304, 305, 306, 307, 498, 499, 500, 360,
	962, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 0, 314, 315, 317, 0, 961, 316, 501, 502,
	0, 503, 0, 318, 963, 504, 964, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 505, 966, 331, 332, 967,
	0, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 0, 0, 970, 358, 2821, 506, 359, 507,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 971, 370, 972, 509,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 512, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 514,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	973, 404, 405, 406, 407, 515, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 0, 426, 410, 411, 427, 428, 974,
	429, 430, 516, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 517, 437, 438, 439, 440, 518, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 519, 520, 521, 522, 0, 458, 0,
	452, 453, 523, 454, 524, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 466, 464,
	467, 0, 468, 0, 0, 469, 470, 471, 525, 526,
	527, 607, 473, 472, 528, 0, 0, 0, 0, 474,
	475, 529, 476, 477, 478, 0, 0, 0, 224, 225,
	226, 227, 228, 0, 229, 230, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 231, 233, 232, 234,
	235, 480, 481, 0, 482, 236, 483, 0, 237, 238,
	239, 240, 241, 0, 0, 242, 484, 485, 486, 0,
	243, 244, 487, 0, 0, 0, 245, 246, 247, 248,
	249, 250, 251, 0, 0, 253, 254, 255, 252, 0,
	256, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 613,
	266, 0, 267, 488, 489, 0, 271, 268, 269, 0,
	272, 270, 0, 273, 0, 0, 274, 275, 276, 0,
	277, 0, 278, 279, 0, 280, 281, 490, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 491, 492, 0,
	221, 0, 0, 0, 0, 0, 292, 293, 294, 493,
	0, 0, 0, 295, 0, 296, 0, 0, 0, 297,
	298, 494, 495, 299, 300, 0, 301, 496, 0, 497,
	302, 0, 303, 304, 305, 306, 307, 498, 499, 500,
	360, 0, 308, 309, 0, 310, 311, 312, 313, 0,
	0, 0, 222, 314, 315, 317, 0, 0, 316, 501,
	502, 0, 503, 0, 318, 0, 504, 0, 319, 320,
	321, 0, 322, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 329, 328, 0, 330, 505, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 341, 343, 345, 342, 344, 349, 346,
	347, 348, 351, 0, 350, 0, 352, 353, 356, 357,
	355, 0, 354, 0, 223, 0, 358, 0, 506, 359,
	507, 361, 362, 0, 0, 363, 0, 0, 0, 365,
	366, 367, 0, 0, 368, 369, 508, 0, 370, 0,
	509, 371, 364, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 380, 510, 511, 512, 381, 513, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 389, 390, 391,
	514, 392, 393, 0, 0, 0, 0, 0, 0, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 0, 1922, 405, 406, 407, 515, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 421, 422,
	420, 423, 424, 425, 0, 426, 410, 411, 427, 428,
	0, 429, 430, 516, 0, 431, 0, 432, 433, 434,
	435, 412, 436, 441, 517, 437, 438, 439, 440, 518,
	0, 443, 444, 442, 612, 445, 446, 447, 448, 449,
	286, 450, 0, 451, 519, 520, 521, 522, 0, 458,
	0, 452, 453, 523, 454, 524, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 466,
	464, 467, 0, 468, 0, 0, 469, 470, 471, 525,
	526, 527, 607, 473, 472, 528, 0, 0, 0, 0,
	474, 475, 529, 476, 477, 478, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 616, 479, 0, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 0, 237,
	238, 239, 240, 241, 0, 0, 242, 484, 485, 486,
	0, 243, 244, 487, 0, 0, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	613, 266, 0, 267, 488, 489, 0, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 275, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 491, 492,
	0, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 0, 296, 0, 0, 0,
	297, 298, 494, 495, 299, 300, 0, 301, 496, 0,
	497, 302, 0, 303, 304, 305, 306, 307, 498, 499,
	500, 360, 0, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 0, 0, 316,
	501, 502, 0, 503, 0, 318, 0, 504, 0, 319,
	320, 321, 0, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 505, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 0, 352, 353, 356,
	357, 355, 0, 354, 0, 223, 0, 358, 0, 506,
	359, 507, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 0, 370,
	0, 509, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 512, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 515, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 0, 426, 410, 411, 427,
	428, 0, 429, 430, 516, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	518, 0, 443, 444, 442, 612, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 519, 520, 521, 522, 0,
	458, 0, 452, 453, 523, 454, 524, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	466, 464, 467, 0, 468, 0, 0, 469, 470, 471,
	525, 526, 527, 0, 473, 472, 528, 0, 0, 0,
	0, 474, 475, 529, 476, 477, 478, 1362, 0, 1194,
	1193, 0, 0, 0, 0, 1191, 0, 0, 0, 0,
	0, 0, 616, 0, 0, 0, 224, 225, 226, 227,
	228, 0, 229, 230, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 231, 233, 232, 234, 235, 480,
	481, 0, 482, 236, 483, 0, 237, 238, 239, 240,
	241, 0, 0, 242, 484, 485, 486, 0, 243, 244,
	487, 0, 1166, 0, 245, 246, 247, 248, 249, 250,
	251, 0, 0, 253, 254, 255, 252, 0, 256, 0,
	257, 258, 259, 0, 260, 959, 261, 262, 0, 0,
	0, 0, 0, 0, 0, 263, 264, 265, 266, 0,
	267, 488, 489, 0, 271, 268, 269, 0, 272, 270,
	0, 273, 0, 0, 274, 275, 276, 0, 277, 0,
	278, 279, 0, 280, 281, 490, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 491, 492, 0, 221, 0,
	0, 0, 0, 0, 1361, 293, 294, 493, 0, 0,
	0, 295, 0, 296, 0, 0, 960, 297, 298, 494,
	495, 299, 300, 0, 301, 496, 0, 497, 302, 0,
	303, 304, 305, 306, 307, 498, 499, 500, 360, 962,
	308, 309, 0, 310, 311, 312, 313, 0, 0, 0,
	0, 314, 315, 317, 0, 961, 316, 501, 502, 0,
	503, 0, 318, 963, 504, 964, 319, 320, 321, 965,
	322, 0, 0, 0, 323, 324, 325, 326, 327, 0,
	329, 328, 0, 330, 505, 966, 331, 332, 967, 0,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 0,
	340, 341, 343, 345, 342, 344, 349, 346, 347, 348,
	351, 0, 350, 968, 352, 353, 356, 357, 355, 969,
	354, 0, 0, 970, 358, 0, 506, 359, 507, 361,
	362, 0, 0, 363, 0, 0, 0, 365, 366, 367,
	0, 0, 368, 369, 508, 971, 370, 972, 509, 371,
	364, 372, 373, 374, 375, 376, 377, 378, 0, 379,
	380, 510, 511, 512, 381, 513, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 389, 1360, 391, 514, 392,
	393, 0, 0, 0, 0, 0, 0, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 973,
	404, 405, 406, 407, 515, 408, 0, 409, 413, 414,
	415, 1359, 417, 418, 419, 0, 421, 422, 420, 423,
	424, 425, 0, 426, 410, 411, 427, 428, 974, 429,
	430, 516, 0, 431, 0, 432, 433, 434, 435, 412,
	436, 441, 517, 437, 438, 439, 440, 518, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 286, 450,
	0, 451, 519, 520, 521, 522, 0, 458, 0, 452,
	453, 523, 454, 524, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 466, 464, 467,
	0, 468, 0, 0, 469, 470, 471, 525, 526, 527,
	0, 473, 472, 528, 0, 0, 0, 0, 474, 475,
	529, 476, 477, 478, 1323, 0, 1194, 1193, 0, 0,
	0, 0, 1191, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 0, 237, 238, 239, 240, 241, 0, 0,
	242, 484, 485, 486, 0, 243, 244, 487, 0, 1166,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 959, 261, 262, 0, 0, 0, 0, 0,
	0, 0, 263, 264, 265, 266, 0, 267, 488, 489,
	0, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 275, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 491, 492, 0, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 0,
	296, 0, 0, 960, 297, 298, 494, 495, 299, 300,
	0, 301, 496, 0, 497, 302, 0, 303, 304, 305,
	306, 307, 1322, 499, 500, 360, 962, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 0, 314, 315,
	317, 0, 961, 316, 501, 502, 0, 503, 0, 318,
	963, 504, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 505, 966, 331, 332, 967, 0, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 0, 0,
	970, 358, 0, 506, 359, 507, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 971, 370, 972, 509, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	512, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 973, 404, 405, 406,
	407, 515, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 0,
	426, 410, 411, 427, 428, 974, 429, 430, 516, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 518, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 519,
	520, 521, 522, 0, 458, 0, 452, 453, 523, 454,
	524, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 466, 464, 467, 0, 468, 0,
	0, 469, 470, 471, 525, 526, 527, 0, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 1260, 0, 1194, 1193, 0, 0, 0, 0, 1191,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 226, 227, 228, 0, 229, 230, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 231, 233,
	232, 234, 235, 480, 481, 0, 482, 236, 483, 0,
	237, 238, 239, 240, 241, 0, 0, 242, 484, 485,
	486, 0, 243, 244, 487, 0, 1166, 0, 245, 246,
	247, 248, 249, 250, 251, 0, 0, 253, 254, 255,
	252, 0, 256, 0, 257, 258, 259, 0, 260, 959,
	261, 262, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 265, 266, 0, 267, 488, 489, 0, 271, 268,
	269, 0, 272, 270, 0, 273, 0, 0, 274, 275,
	276, 0, 277, 0, 278, 279, 0, 280, 281, 490,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 491,
	492, 0, 221, 0, 0, 0, 0, 0, 292, 293,
	294, 493, 0, 0, 0, 295, 0, 296, 0, 0,
	960, 297, 298, 494, 495, 299, 300, 0, 301, 496,
	0, 497, 302, 0, 303, 304, 305, 306, 307, 1259,
	499, 500, 360, 962, 308, 309, 0, 310, 311, 312,
	313, 0, 0, 0, 0, 314, 315, 317, 0, 961,
	316, 501, 502, 0, 503, 0, 318, 963, 504, 964,
	319, 320, 321, 965, 322, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 329, 328, 0, 330, 505, 966,
	331, 332, 967, 0, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 341, 343, 345, 342, 344,
	349, 346, 347, 348, 351, 0, 350, 968, 352, 353,
	356, 357, 355, 969, 354, 0, 0, 970, 358, 0,
	506, 359, 507, 361, 362, 0, 0, 363, 0, 0,
	0, 365, 366, 367, 0, 0, 368, 369, 508, 971,
	370, 972, 509, 371, 364, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 380, 510, 511, 512, 381, 513,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 389,
	390, 391, 514, 392, 393, 0, 0, 0, 0, 0,
	0, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 973, 404, 405, 406, 407, 515, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	421, 422, 420, 423, 424, 425, 0, 426, 410, 411,
	427, 428, 974, 429, 430, 516, 0, 431, 0, 432,
	433, 434, 435, 412, 436, 441, 517, 437, 438, 439,
	440, 518, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 286, 450, 0, 451, 519, 520, 521, 522,
	0, 458, 0, 452, 453, 523, 454, 524, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 466, 464, 467, 0, 468, 0, 0, 469, 470,
	471, 525, 526, 527, 0, 473, 472, 528, 0, 0,
	0, 0, 474, 475, 529, 476, 477, 478, 1189, 0,
	1194, 1193, 0, 0, 0, 0, 1191, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 481, 0, 482, 236, 483, 0, 237, 238, 239,
	240, 241, 0, 0, 242, 484, 485, 486, 0, 243,
	244, 487, 0, 1166, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 959, 261, 262, 0,
	0, 0, 0, 0, 0, 0, 263, 264, 265, 266,
	0, 267, 488, 489, 0, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 275, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 490, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 491, 492, 0, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 493, 0,
	0, 0, 295, 0, 296, 0, 0, 960, 297, 298,
	494, 495, 299, 300, 0, 301, 496, 0, 497, 302,
	0, 303, 304, 305, 306, 307, 1188, 499, 500, 360,
	962, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 0, 314, 315, 317, 0, 961, 316, 501, 502,
	0, 503, 0, 318, 963, 504, 964, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 505, 966, 331, 332, 967,
	0, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 0, 0, 970, 358, 0, 506, 359, 507,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 971, 370, 972, 509,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 512, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 514,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	973, 404, 405, 406, 407, 515, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 0, 426, 410, 411, 427, 428, 974,
	429, 430, 516, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 517, 437, 438, 439, 440, 518, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 519, 520, 521, 522, 0, 458, 0,
	452, 453, 523, 454, 524, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 466, 464,
	467, 0, 468, 0, 0, 469, 470, 471, 525, 526,
	527, 0, 473, 472, 528, 0, 0, 0, 0, 474,
	475, 529, 476, 477, 478, 1194, 1193, 0, 0, 0,
	0, 1191, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 226, 227, 228, 0, 229, 230,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	231, 233, 232, 234, 235, 480, 481, 0, 482, 236,
	483, 0, 237, 238, 239, 240, 241, 0, 0, 242,
	484, 485, 486, 0, 243, 244, 487, 0, 1166, 0,
	245, 246, 247, 248, 249, 250, 251, 0, 0, 253,
	254, 255, 252, 0, 256, 0, 257, 258, 259, 0,
	260, 959, 261, 262, 0, 0, 0, 0, 0, 0,
	0, 263, 264, 265, 266, 0, 267, 488, 489, 0,
	271, 268, 269, 0, 272, 270, 0, 273, 0, 0,
	274, 275, 276, 0, 277, 0, 278, 279, 0, 280,
	281, 490, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 491, 492, 0, 221, 0, 0, 0, 0, 0,
	292, 293, 294, 493, 0, 0, 0, 295, 0, 296,
	0, 0, 960, 297, 298, 494, 495, 299, 300, 0,
	301, 496, 0, 497, 302, 0, 303, 304, 305, 306,
	307, 498, 499, 500, 360, 962, 308, 309, 0, 310,
	311, 312, 313, 0, 0, 0, 0, 314, 315, 317,
	0, 961, 316, 501, 502, 0, 503, 0, 318, 963,
	504, 964, 319, 320, 321, 965, 322, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 329, 328, 0, 330,
	505, 966, 331, 332, 967, 0, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 341, 343, 345,
	342, 344, 349, 346, 347, 348, 351, 0, 350, 968,
	352, 353, 356, 357, 355, 969, 354, 0, 0, 970,
	358, 0, 506, 359, 507, 361, 362, 0, 0, 363,
	0, 0, 0, 365, 366, 367, 0, 0, 368, 369,
	508, 971, 370, 972, 509, 371, 364, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 380, 510, 511, 512,
	381, 513, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 389, 390, 391, 514, 392, 393, 0, 0, 0,
	0, 0, 0, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 973, 404, 405, 406, 407,
	515, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 421, 422, 420, 423, 424, 425, 0, 426,
	410, 411, 427, 428, 974, 429, 430, 516, 0, 431,
	0, 432, 433, 434, 435, 412, 436, 441, 517, 437,
	438, 439, 440, 518, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 286, 450, 0, 451, 519, 520,
	521, 522, 0, 458, 0, 452, 453, 523, 454, 524,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 466, 464, 467, 0, 468, 0, 0,
	469, 470, 471, 525, 526, 527, 218, 473, 472, 528,
	0, 0, 0, 0, 474, 475, 529, 476, 477, 478,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 0, 237, 238, 239, 240, 241, 0, 0,
	242, 484, 485, 486, 0, 243, 244, 487, 0, 0,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 0, 0, 0, 0,
	0, 0, 263, 264, 265, 266, 0, 267, 488, 489,
	0, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 275, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 491, 492, 0, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 0,
	296, 0, 0, 0, 297, 298, 494, 495, 299, 300,
	0, 301, 496, 0, 497, 302, 0, 303, 304, 305,
	306, 307, 498, 499, 500, 360, 0, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 0, 316, 501, 502, 0, 503, 0, 318,
	0, 504, 0, 319, 320, 321, 0, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 505, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	0, 352, 353, 356, 357, 355, 0, 354, 0, 223,
	0, 358, 0, 506, 359, 507, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 0, 370, 0, 509, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	512, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 515, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 0,
	426, 410, 411, 427, 428, 0, 429, 430, 516, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 518, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 519,
	520, 521, 522, 0, 458, 0, 452, 453, 523, 454,
	524, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 466, 464, 467, 0, 468, 0,
	0, 469, 470, 471, 525, 526, 527, 0, 473, 472,
	528, 1194, 1193, 0, 0, 474, 475, 529, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	226, 227, 228, 0, 229, 230, 616, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 231, 233, 232, 234,
	235, 480, 481, 0, 482, 236, 483, 0, 237, 238,
	239, 240, 241, 0, 0, 242, 484, 485, 486, 0,
	243, 244, 487, 0, 1166, 0, 245, 246, 247, 248,
	249, 250, 251, 0, 0, 253, 254, 255, 252, 0,
	256, 0, 257, 258, 259, 0, 260, 959, 261, 262,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	266, 0, 267, 488, 489, 1709, 271, 268, 269, 0,
	272, 270, 0, 273, 0, 0, 274, 275, 276, 0,
	277, 0, 278, 279, 0, 280, 281, 490, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 491, 492, 0,
	221, 0, 0, 0, 0, 0, 292, 293, 294, 493,
	0, 0, 0, 295, 0, 296, 0, 0, 960, 297,
	298, 494, 495, 299, 300, 0, 301, 496, 0, 497,
	302, 0, 303, 304, 305, 306, 307, 498, 499, 500,
	360, 962, 308, 309, 0, 310, 311, 312, 313, 0,
	0, 0, 0, 314, 315, 317, 0, 961, 316, 501,
	502, 0, 503, 0, 318, 963, 504, 964, 319, 320,
	321, 965, 322, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 329, 328, 0, 330, 505, 966, 331, 332,
	967, 0, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 341, 343, 345, 342, 344, 349, 346,
	347, 348, 351, 0, 350, 968, 352, 353, 356, 357,
	355, 969, 354, 0, 0, 970, 358, 0, 506, 359,
	507, 361, 362, 0, 0, 363, 0, 0, 0, 365,
	366, 367, 0, 0, 368, 369, 508, 971, 370, 972,
	509, 371, 364, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 380, 510, 511, 512, 381, 513, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 389, 390, 391,
	514, 392, 393, 0, 0, 0, 0, 0, 0, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 973, 404, 405, 406, 407, 515, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 421, 422,
	420, 423, 424, 425, 0, 426, 410, 411, 427, 428,
	974, 429, 430, 516, 0, 431, 0, 432, 433, 434,
	435, 412, 436, 441, 517, 437, 438, 439, 440, 518,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	286, 450, 0, 451, 519, 520, 521, 522, 0, 458,
	0, 452, 453, 523, 454, 524, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 466,
	464, 467, 0, 468, 0, 0, 469, 470, 471, 525,
	526, 527, 0, 473, 472, 528, 1194, 1193, 0, 0,
	474, 475, 529, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 0, 237, 238, 239, 240, 241, 0, 0,
	242, 484, 485, 486, 0, 243, 244, 487, 0, 1166,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 959, 261, 262, 0, 0, 0, 0, 0,
	0, 0, 263, 264, 265, 266, 0, 267, 488, 489,
	0, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 275, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 491, 492, 0, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 0,
	296, 0, 0, 960, 297, 298, 494, 495, 299, 300,
	0, 301, 496, 0, 497, 302, 0, 303, 304, 305,
	306, 307, 498, 499, 500, 360, 962, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 0, 314, 315,
	317, 0, 961, 316, 501, 502, 0, 503, 0, 318,
	963, 504, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 505, 966, 331, 332, 967, 0, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 0, 0,
	970, 358, 0, 506, 359, 507, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 971, 370, 972, 509, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	512, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 973, 404, 405, 406,
	407, 515, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 0,
	426, 410, 411, 427, 428, 974, 429, 430, 516, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 518, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 519,
	520, 521, 522, 0, 458, 0, 452, 453, 523, 454,
	524, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 466, 464, 467, 0, 468, 0,
	0, 469, 470, 471, 525, 526, 527, 1194, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 0, 0, 0, 224, 225, 226, 227, 228, 0,
	229, 230, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 231, 233, 232, 234, 235, 480, 481, 0,
	482, 236, 483, 0, 237, 238, 239, 240, 241, 0,
	0, 242, 484, 485, 486, 0, 243, 244, 487, 0,
	1166, 0, 245, 246, 247, 248, 249, 250, 251, 0,
	0, 253, 254, 255, 252, 0, 256, 0, 257, 258,
	259, 0, 260, 959, 261, 262, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 266, 0, 267, 488,
	489, 0, 271, 268, 269, 0, 272, 270, 0, 273,
	0, 0, 274, 275, 276, 0, 277, 0, 278, 279,
	0, 280, 281, 490, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 491, 492, 0, 221, 0, 0, 0,
	0, 0, 292, 293, 294, 493, 0, 0, 0, 295,
	0, 296, 0, 0, 960, 297, 298, 494, 495, 299,
	300, 0, 301, 496, 0, 497, 302, 0, 303, 304,
	305, 306, 307, 498, 499, 500, 360, 962, 308, 309,
	0, 310, 311, 312, 313, 0, 0, 0, 0, 314,
	315, 317, 0, 961, 316, 501, 502, 0, 503, 0,
	318, 963, 504, 964, 319, 320, 321, 965, 322, 0,
	0, 0, 323, 324, 325, 326, 327, 0, 329, 328,
	0, 330, 505, 966, 331, 332, 967, 0, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 341,
	343, 345, 342, 344, 349, 346, 347, 348, 351, 0,
	350, 968, 352, 353, 356, 357, 355, 969, 354, 0,
	0, 970, 358, 0, 506, 359, 507, 361, 362, 0,
	0, 363, 0, 0, 0, 365, 366, 367, 0, 0,
	368, 369, 508, 971, 370, 972, 509, 371, 364, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 380, 510,
	511, 512, 381, 513, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 389, 390, 391, 514, 392, 393, 0,
	0, 0, 0, 0, 0, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 0, 403, 973, 404, 405,
	406, 407, 515, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 0, 421, 422, 420, 423, 424, 425,
	0, 426, 410, 411, 427, 428, 974, 429, 430, 516,
	0, 431, 0, 432, 433, 434, 435, 412, 436, 441,
	517, 437, 438, 439, 440, 518, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 286, 450, 0, 451,
	519, 520, 521, 522, 0, 458, 0, 452, 453, 523,
	454, 524, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 466, 464, 467, 0, 468,
	0, 0, 469, 470, 471, 525, 526, 527, 218, 473,
	472, 528, 0, 0, 0, 0, 474, 475, 529, 476,
	477, 478, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 481,
	0, 482, 236, 483, 0, 237, 238, 239, 240, 241,
	0, 0, 242, 484, 485, 486, 2308, 243, 244, 487,
	0, 0, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 2305, 256, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 266, 0, 267,
	488, 489, 0, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 275, 276, 0, 277, 0, 278,
	279, 0, 2312, 281, 490, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 491, 492, 0, 2469, 0, 0,
	0, 0, 0, 292, 293, 294, 493, 0, 0, 0,
	295, 0, 296, 2311, 0, 0, 297, 298, 494, 495,
	299, 300, 0, 301, 496, 0, 497, 302, 0, 303,
	304, 305, 306, 307, 498, 499, 500, 360, 0, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 2466,
	314, 315, 317, 0, 0, 316, 501, 502, 0, 503,
	0, 2468, 0, 504, 0, 319, 320, 321, 0, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 505, 0, 331, 332, 2465, 0, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 0, 352, 353, 356, 357, 355, 0, 354,
	0, 0, 0, 358, 0, 506, 359, 507, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 0, 370, 0, 509, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 512, 381, 513, 382, 383, 2310, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 514, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 515, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 0, 426, 410, 411, 427, 428, 0, 429, 430,
	516, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 517, 437, 438, 439, 440, 518, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 519, 520, 521, 522, 0, 458, 0, 452, 453,
	523, 454, 524, 0, 455, 456, 457, 0, 459, 460,
	0, 2467, 461, 462, 463, 465, 466, 464, 467, 0,
	468, 0, 0, 469, 470, 471, 525, 526, 527, 218,
	473, 472, 528, 0, 0, 0, 0, 474, 475, 529,
	476, 477, 478, 0, 0, 0, 224, 225, 226, 227,
	228, 0, 229, 230, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 231, 233, 232, 234, 235, 480,
	481, 0, 482, 236, 483, 0, 237, 238, 239, 240,
	241, 0, 0, 242, 484, 485, 486, 2308, 243, 244,
	487, 0, 0, 2302, 245, 246, 247, 248, 249, 250,
	251, 0, 0, 253, 254, 255, 252, 2305, 256, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 0,
	0, 0, 0, 0, 0, 263, 264, 265, 266, 0,
	267, 488, 489, 0, 271, 268, 269, 0, 272, 270,
	0, 273, 0, 0, 274, 275, 276, 0, 277, 0,
	278, 279, 0, 2312, 281, 490, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 294, 493, 0, 0,
	0, 295, 0, 296, 2311, 0, 0, 297, 298, 494,
	495, 299, 300, 0, 301, 496, 0, 497, 302, 0,
	303, 304, 305, 306, 307, 2301, 499, 500, 360, 0,
	308, 309, 0, 310, 311, 312, 313, 0, 0, 0,
	0, 314, 315, 317, 0, 0, 316, 501, 502, 0,
	503, 0, 318, 0, 504, 0, 319, 320, 321, 0,
	322, 0, 0, 0, 323, 324, 325, 326, 327, 0,
	329, 328, 0, 330, 505, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 0,
	340, 341, 343, 345, 342, 344, 349, 346, 347, 348,
	351, 0, 350, 0, 352, 353, 356, 357, 355, 0,
	354, 0, 0, 0, 358, 0, 506, 359, 507, 361,
	362, 0, 0, 363, 0, 0, 0, 365, 366, 367,
	0, 0, 368, 369, 508, 0, 370, 0, 509, 371,
	364, 372, 373, 374, 375, 376, 377, 378, 0, 379,
	380, 510, 511, 512, 381, 513, 382, 383, 2310, 384,
	0, 385, 386, 387, 388, 389, 390, 391, 514, 392,
	393, 0, 0, 0, 0, 0, 0, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 515, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 421, 422, 420, 423,
	424, 425, 0, 426, 410, 411, 427, 428, 0, 429,
	430, 516, 0, 431, 0, 432, 433, 434, 435, 412,
	436, 441, 517, 437, 438, 439, 440, 518, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 286, 450,
	0, 451, 519, 520, 521, 522, 0, 458, 0, 452,
	453, 523, 454, 524, 0, 455, 456, 457, 0, 459,
	460, 0, 2309, 461, 462, 463, 465, 466, 464, 467,
	0, 468, 0, 0, 469, 470, 471, 525, 526, 527,
	0, 473, 472, 528, 1419, 0, 218, 0, 474, 475,
	529, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 0, 237, 238, 239, 240, 241, 0, 0,
	242, 484, 485, 486, 0, 243, 244, 487, 0, 0,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 0, 0, 0, 0,
	0, 0, 263, 264, 265, 266, 0, 267, 488, 489,
	0, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 275, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 491, 492, 0, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 0,
	296, 0, 0, 0, 297, 298, 494, 495, 299, 300,
	0, 301, 496, 0, 497, 302, 0, 303, 304, 305,
	306, 307, 498, 499, 500, 360, 0, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 0, 316, 501, 502, 0, 503, 0, 318,
	0, 504, 0, 319, 320, 321, 0, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 505, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	0, 352, 353, 356, 357, 355, 0, 354, 0, 223,
	0, 358, 0, 506, 359, 507, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 0, 370, 0, 509, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	512, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 515, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 1422, 422, 420, 423, 424, 425, 0,
	426, 410, 411, 427, 428, 0, 429, 430, 516, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 518, 0, 443, 444, 442, 1420,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 519,
	520, 521, 522, 0, 458, 0, 452, 453, 523, 454,
	524, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 466, 464, 467, 0, 468, 0,
	0, 469, 470, 471, 525, 526, 527, 0, 1421, 472,
	528, 1170, 0, 218, 0, 474, 475, 529, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 226, 227, 228, 0, 229, 230, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 231, 233,
	232, 234, 235, 480, 481, 0, 482, 236, 483, 0,
	237, 238, 239, 240, 241, 0, 0, 242, 484, 485,
	486, 0, 243, 244, 487, 0, 0, 0, 245, 246,
	247, 248, 249, 250, 251, 0, 0, 253, 254, 255,
	252, 0, 256, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 265, 266, 0, 267, 488, 489, 0, 271, 268,
	269, 0, 272, 270, 0, 273, 0, 0, 274, 275,
	276, 0, 277, 0, 278, 279, 0, 280, 281, 490,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 491,
	492, 0, 221, 0, 0, 0, 0, 0, 292, 293,
	294, 493, 0, 0, 0, 295, 0, 296, 0, 0,
	0, 297, 298, 494, 495, 299, 300, 0, 301, 496,
	0, 497, 302, 0, 303, 304, 305, 306, 307, 1172,
	499, 500, 360, 0, 308, 309, 0, 310, 311, 312,
	313, 0, 0, 0, 222, 314, 315, 317, 0, 0,
	316, 501, 502, 0, 503, 0, 318, 0, 504, 0,
	319, 320, 321, 0, 322, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 329, 328, 0, 330, 505, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 341, 343, 345, 342, 344,
	349, 346, 347, 348, 351, 0, 350, 0, 352, 353,
	356, 357, 355, 0, 354, 0, 223, 0, 358, 0,
	506, 359, 507, 361, 362, 0, 0, 363, 0, 0,
	1008, 365, 366, 367, 0, 0, 368, 369, 508, 0,
	370, 0, 509, 371, 364, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 380, 510, 511, 512, 381, 513,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 389,
	390, 391, 514, 392, 393, 0, 0, 0, 0, 0,
	0, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 515, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	421, 422, 420, 423, 424, 425, 0, 426, 410, 411,
	427, 428, 0, 429, 430, 516, 0, 431, 0, 432,
	433, 434, 435, 412, 436, 441, 517, 437, 438, 439,
	440, 518, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 286, 450, 0, 451, 519, 520, 521, 522,
	0, 458, 0, 452, 453, 523, 454, 524, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 466, 464, 467, 0, 468, 0, 0, 469, 470,
	471, 525, 526, 527, 0, 473, 472, 528, 1167, 0,
	218, 0, 474, 475, 529, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 481, 0, 482, 236, 483, 0, 237, 238, 239,
	240, 241, 0, 0, 242, 484, 485, 486, 0, 243,
	244, 487, 0, 0, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	0, 0, 0, 0, 0, 0, 263, 264, 265, 266,
	0, 267, 488, 489, 0, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 275, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 490, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 491, 492, 0, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 493, 0,
	0, 0, 295, 0, 296, 0, 0, 0, 297, 298,
	494, 495, 299, 300, 0, 301, 496, 0, 497, 302,
	0, 303, 304, 305, 306, 307, 1169, 499, 500, 360,
	0, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 0, 0, 316, 501, 502,
	0, 503, 0, 318, 0, 504, 0, 319, 320, 321,
	0, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 505, 0, 331, 332, 0,
	0, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 0, 352, 353, 356, 357, 355,
	0, 354, 0, 223, 0, 358, 0, 506, 359, 507,
	361, 362, 0, 0, 363, 0, 0, 1008, 365, 366,
	367, 0, 0, 368, 369, 508, 0, 370, 0, 509,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 512, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 514,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 515, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 0, 426, 410, 411, 427, 428, 0,
	429, 430, 516, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 517, 437, 438, 439, 440, 518, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 519, 520, 521, 522, 0, 458, 0,
	452, 453, 523, 454, 524, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 466, 464,
	467, 0, 468, 0, 0, 469, 470, 471, 525, 526,
	527, 0, 473, 472, 528, 1073, 0, 218, 0, 474,
	475, 529, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 226, 227, 228, 0,
	229, 230, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 231, 233, 232, 234, 235, 480, 481, 0,
	482, 236, 483, 0, 237, 238, 239, 240, 241, 0,
	0, 242, 484, 485, 486, 0, 243, 244, 487, 0,
	0, 0, 245, 246, 247, 248, 249, 250, 251, 0,
	0, 253, 254, 255, 252, 0, 256, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 266, 0, 267, 488,
	489, 0, 271, 268, 269, 0, 272, 270, 0, 273,
	0, 0, 274, 275, 276, 0, 277, 0, 278, 279,
	0, 280, 281, 490, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 491, 492, 0, 221, 0, 0, 0,
	0, 0, 292, 293, 294, 493, 0, 0, 0, 295,
	0, 296, 0, 0, 0, 297, 298, 494, 495, 299,
	300, 0, 301, 496, 0, 497, 302, 0, 303, 304,
	305, 306, 307, 1075, 499, 500, 360, 0, 308, 309,
	0, 310, 311, 312, 313, 0, 0, 0, 222, 314,
	315, 317, 0, 0, 316, 501, 502, 0, 503, 0,
	318, 0, 504, 0, 319, 320, 321, 0, 322, 0,
	0, 0, 323, 324, 325, 326, 327, 0, 329, 328,
	0, 330, 505, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 341,
	343, 345, 342, 344, 349, 346, 347, 348, 351, 0,
	350, 0, 352, 353, 356, 357, 355, 0, 354, 0,
	223, 0, 358, 0, 506, 359, 507, 361, 362, 0,
	0, 363, 0, 0, 1008, 365, 366, 367, 0, 0,
	368, 369, 508, 0, 370, 0, 509, 371, 364, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 380, 510,
	511, 512, 381, 513, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 389, 390, 391, 514, 392, 393, 0,
	0, 0, 0, 0, 0, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 515, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 0, 421, 422, 420, 423, 424, 425,
	0, 426, 410, 411, 427, 428, 0, 429, 430, 516,
	0, 431, 0, 432, 433, 434, 435, 412, 436, 441,
	517, 437, 438, 439, 440, 518, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 286, 450, 0, 451,
	519, 520, 521, 522, 0, 458, 0, 452, 453, 523,
	454, 524, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 466, 464, 467, 0, 468,
	0, 0, 469, 470, 471, 525, 526, 527, 0, 473,
	472, 528, 558, 0, 218, 0, 474, 475, 529, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 226, 557, 228, 547, 229, 230, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 481, 0, 482, 236, 483,
	0, 237, 238, 239, 240, 241, 0, 0, 242, 484,
	485, 486, 0, 243, 244, 487, 0, 0, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 550, 260,
	0, 261, 262, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 266, 0, 267, 488, 489, 0, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	275, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	490, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 294, 493, 0, 0, 0, 295, 0, 296, 0,
	0, 0, 297, 298, 494, 495, 299, 300, 551, 301,
	496, 0, 497, 302, 0, 303, 304, 305, 306, 307,
	498, 499, 500, 360, 0, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 0, 314, 315, 317, 0,
	0, 316, 501, 502, 0, 503, 0, 318, 0, 504,
	0, 319, 320, 321, 0, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 505,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 0, 352,
	353, 356, 357, 355, 0, 354, 0, 0, 0, 358,
	0, 506, 359, 507, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	0, 370, 0, 509, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 512, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 514, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 515,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	552, 421, 422, 420, 423, 424, 425, 0, 426, 410,
	411, 427, 428, 0, 429, 430, 516, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 517, 437, 438,
	439, 440, 518, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 519, 520, 521,
	522, 0, 458, 0, 452, 453, 523, 454, 524, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 466, 464, 467, 0, 468, 0, 0, 469,
	470, 471, 525, 526, 527, 0, 473, 472, 528, 546,
	0, 218, 0, 474, 475, 529, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	226, 227, 228, 547, 229, 230, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 231, 233, 232, 234,
	235, 480, 481, 0, 482, 236, 483, 0, 237, 238,
	239, 240, 241, 0, 0, 242, 484, 485, 486, 0,
	243, 244, 487, 0, 0, 0, 245, 246, 247, 248,
	249, 250, 251, 0, 0, 253, 254, 255, 252, 0,
	256, 0, 257, 258, 259, 550, 260, 0, 261, 262,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	266, 0, 267, 488, 489, 0, 271, 268, 269, 0,
	272, 270, 0, 273, 0, 0, 274, 275, 276, 0,
	277, 0, 278, 279, 0, 280, 281, 490, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 294, 493,
	0, 0, 0, 295, 0, 296, 0, 0, 0, 297,
	298, 494, 495, 299, 300, 551, 301, 496, 0, 497,
	302, 0, 303, 304, 305, 306, 307, 498, 499, 500,
	360, 0, 308, 309, 0, 310, 311, 312, 313, 0,
	0, 0, 0, 314, 315, 317, 0, 0, 316, 501,
	502, 0, 503, 0, 318, 0, 504, 0, 319, 320,
	321, 0, 322, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 329, 328, 0, 330, 505, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 341, 343, 345, 342, 344, 349, 346,
	347, 348, 351, 0, 350, 0, 352, 353, 356, 357,
	355, 0, 354, 0, 0, 0, 358, 0, 506, 359,
	507, 361, 362, 0, 0, 363, 0, 0, 0, 365,
	366, 367, 0, 0, 368, 369, 508, 0, 370, 0,
	509, 371, 364, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 380, 510, 511, 512, 381, 513, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 389, 390, 391,
	514, 392, 393, 0, 0, 0, 0, 0, 0, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 515, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 552, 421, 422,
	420, 423, 424, 425, 0, 426, 410, 411, 427, 428,
	0, 429, 430, 516, 0, 431, 0, 432, 433, 434,
	435, 412, 436, 441, 517, 437, 438, 439, 440, 518,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	286, 450, 0, 451, 519, 520, 521, 522, 0, 458,
	0, 452, 453, 523, 454, 524, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 466,
	464, 467, 0, 468, 0, 0, 469, 470, 471, 525,
	526, 527, 218, 473, 472, 528, 0, 0, 0, 0,
	474, 475, 529, 476, 477, 478, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 0, 237,
	238, 239, 240, 241, 0, 0, 242, 484, 485, 486,
	0, 243, 244, 487, 0, 0, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	265, 266, 0, 267, 488, 489, 0, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 275, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 491, 492,
	0, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 0, 296, 0, 0, 0,
	297, 298, 494, 495, 299, 300, 0, 301, 496, 0,
	497, 302, 0, 303, 304, 305, 306, 307, 498, 499,
	500, 360, 0, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 0, 0, 316,
	501, 502, 0, 503, 0, 318, 0, 504, 0, 319,
	320, 321, 0, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 505, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 0, 352, 353, 356,
	357, 355, 2803, 354, 0, 223, 0, 358, 0, 506,
	359, 507, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 0, 370,
	0, 509, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 512, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 515, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 0, 426, 410, 411, 427,
	428, 0, 429, 430, 516, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	518, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 519, 520, 521, 522, 0,
	458, 0, 452, 453, 523, 454, 524, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	466, 464, 467, 0, 468, 0, 0, 469, 470, 471,
	525, 526, 527, 218, 473, 472, 528, 0, 0, 0,
	0, 474, 475, 529, 476, 477, 478, 0, 0, 0,
	224, 225, 226, 227, 228, 0, 229, 230, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 231, 233,
	232, 234, 235, 480, 481, 0, 482, 236, 483, 0,
	237, 238, 239, 240, 241, 0, 0, 242, 484, 485,
	486, 0, 243, 244, 487, 0, 0, 0, 245, 246,
	247, 248, 249, 250, 251, 0, 0, 253, 254, 255,
	252, 0, 256, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 265, 266, 0, 267, 488, 489, 0, 271, 268,
	269, 0, 272, 270, 0, 273, 0, 0, 274, 275,
	276, 0, 277, 0, 278, 279, 0, 280, 281, 490,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 491,
	492, 0, 221, 0, 0, 0, 0, 0, 292, 293,
	294, 493, 0, 0, 0, 295, 0, 296, 0, 0,
	0, 297, 298, 494, 495, 299, 300, 0, 301, 496,
	0, 497, 302, 0, 303, 304, 305, 306, 307, 498,
	499, 500, 360, 0, 308, 309, 0, 310, 311, 312,
	313, 0, 0, 0, 222, 314, 315, 317, 0, 0,
	316, 501, 502, 0, 503, 0, 318, 0, 504, 0,
	319, 320, 321, 0, 322, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 329, 328, 0, 330, 505, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 341, 343, 345, 342, 344,
	349, 346, 347, 348, 351, 0, 350, 0, 352, 353,
	356, 357, 355, 0, 354, 0, 223, 0, 358, 0,
	506, 359, 507, 361, 362, 0, 0, 363, 0, 0,
	1008, 365, 366, 367, 0, 0, 368, 369, 508, 0,
	370, 0, 509, 371, 364, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 380, 510, 511, 512, 381, 513,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 389,
	390, 391, 514, 392, 393, 0, 0, 0, 0, 0,
	0, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 515, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	421, 422, 420, 423, 424, 425, 0, 426, 410, 411,
	427, 428, 0, 429, 430, 516, 0, 431, 0, 432,
	433, 434, 435, 412, 436, 441, 517, 437, 438, 439,
	440, 518, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 286, 450, 0, 451, 519, 520, 521, 522,
	0, 458, 0, 452, 453, 523, 454, 524, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 466, 464, 467, 0, 468, 0, 0, 469, 470,
	471, 525, 526, 527, 0, 473, 472, 528, 2405, 0,
	218, 0, 474, 475, 529, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 481, 0, 482, 236, 483, 0, 237, 238, 239,
	240, 241, 0, 0, 242, 484, 485, 486, 0, 243,
	244, 487, 0, 0, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	0, 0, 0, 0, 0, 0, 263, 264, 265, 266,
	0, 267, 488, 489, 0, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 275, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 490, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 491, 492, 0, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 493, 0,
	0, 0, 295, 0, 296, 0, 0, 0, 297, 298,
	494, 495, 299, 300, 0, 301, 496, 0, 497, 302,
	0, 303, 304, 305, 306, 307, 2404, 499, 500, 360,
	0, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 0, 0, 316, 501, 502,
	0, 503, 0, 318, 0, 504, 0, 319, 320, 321,
	0, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 505, 0, 331, 332, 0,
	0, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 0, 352, 353, 356, 357, 355,
	0, 354, 0, 223, 0, 358, 0, 506, 359, 507,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 0, 370, 0, 509,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 512, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 514,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 515, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 0, 426, 410, 411, 427, 428, 0,
	429, 430, 516, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 517, 437, 438, 439, 440, 518, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 519, 520, 521, 522, 0, 458, 0,
	452, 453, 523, 454, 524, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 466, 464,
	467, 0, 468, 0, 0, 469, 470, 471, 525, 526,
	527, 0, 473, 472, 528, 1898, 0, 218, 0, 474,
	475, 529, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 226, 227, 228, 0,
	229, 230, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 231, 233, 232, 234, 235, 480, 481, 0,
	482, 236, 483, 0, 237, 238, 239, 240, 241, 0,
	0, 242, 484, 485, 486, 0, 243, 244, 487, 0,
	0, 0, 245, 246, 247, 248, 249, 250, 251, 0,
	0, 253, 254, 255, 252, 0, 256, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 266, 0, 267, 488,
	489, 0, 271, 268, 269, 0, 272, 270, 0, 273,
	0, 0, 274, 275, 276, 0, 277, 0, 278, 279,
	0, 280, 281, 490, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 491, 492, 0, 221, 0, 0, 0,
	0, 0, 292, 293, 294, 493, 0, 0, 0, 295,
	0, 296, 0, 0, 0, 297, 298, 494, 495, 299,
	300, 0, 301, 496, 0, 497, 302, 0, 303, 304,
	305, 306, 307, 498, 499, 500, 360, 0, 308, 309,
	0, 310, 311, 312, 313, 0, 0, 0, 222, 314,
	315, 317, 0, 0, 316, 501, 502, 0, 503, 0,
	318, 0, 504, 0, 319, 320, 321, 0, 322, 0,
	0, 0, 323, 324, 325, 326, 327, 0, 329, 328,
	0, 330, 505, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 341,
	343, 345, 342, 344, 349, 346, 347, 348, 351, 0,
	350, 0, 352, 353, 356, 357, 355, 0, 354, 0,
	223, 0, 358, 0, 506, 359, 507, 361, 362, 0,
	0, 363, 0, 0, 0, 365, 366, 367, 0, 0,
	368, 369, 508, 0, 370, 0, 509, 371, 364, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 380, 510,
	511, 512, 381, 513, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 389, 390, 391, 514, 392, 393, 0,
	0, 0, 0, 0, 0, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 515, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 0, 421, 422, 420, 423, 424, 425,
	0, 426, 410, 411, 427, 428, 0, 429, 430, 516,
	0, 431, 0, 432, 433, 434, 435, 412, 436, 441,
	517, 437, 438, 439, 440, 518, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 286, 450, 0, 451,
	519, 520, 521, 522, 0, 458, 0, 452, 453, 523,
	454, 524, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 466, 464, 467, 0, 468,
	0, 0, 469, 470, 471, 525, 526, 527, 218, 473,
	472, 528, 0, 0, 0, 0, 474, 475, 529, 476,
	477, 478, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 481,
	0, 482, 236, 483, 0, 237, 238, 239, 240, 241,
	0, 0, 242, 484, 485, 486, 0, 243, 244, 487,
	0, 0, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 266, 0, 267,
	488, 489, 0, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 275, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 490, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 491, 492, 0, 221, 0, 0,
	0, 0, 0, 292, 293, 294, 493, 0, 0, 0,
	295, 0, 296, 0, 0, 0, 297, 298, 494, 495,
	299, 300, 0, 301, 496, 0, 497, 302, 0, 303,
	304, 305, 306, 307, 498, 499, 500, 360, 0, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 222,
	314, 315, 317, 0, 0, 316, 501, 502, 0, 503,
	0, 318, 0, 504, 0, 319, 320, 321, 0, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 505, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 0, 352, 353, 356, 357, 355, 0, 354,
	0, 223, 0, 358, 0, 506, 359, 507, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 0, 370, 0, 509, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 512, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 514, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 515, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 0, 426, 410, 411, 427, 428, 0, 429, 430,
	516, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 517, 437, 438, 439, 440, 518, 0, 443, 444,
	442, 1829, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 519, 520, 521, 522, 0, 458, 0, 452, 453,
	523, 454, 524, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 466, 464, 467, 0,
	468, 0, 0, 469, 470, 471, 525, 526, 527, 0,
	473, 472, 528, 1834, 0, 218, 0, 474, 475, 529,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 226, 227, 228, 0, 229, 230,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	231, 233, 232, 234, 235, 480, 481, 0, 482, 236,
	483, 0, 237, 238, 239, 240, 241, 0, 0, 242,
	484, 485, 486, 0, 243, 244, 487, 0, 0, 0,
	245, 246, 247, 248, 249, 250, 251, 0, 0, 253,
	254, 255, 252, 0, 256, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 0, 0, 0, 0, 0,
	0, 263, 264, 265, 266, 0, 267, 488, 489, 0,
	271, 268, 269, 0, 272, 270, 0, 273, 0, 0,
	274, 275, 276, 0, 277, 0, 278, 279, 0, 280,
	281, 490, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 491, 492, 0, 221, 0, 0, 0, 0, 0,
	292, 293, 294, 493, 0, 0, 0, 295, 0, 296,
	0, 0, 0, 297, 298, 494, 495, 299, 300, 0,
	301, 496, 0, 497, 302, 0, 303, 304, 305, 306,
	307, 1833, 499, 500, 360, 0, 308, 309, 0, 310,
	311, 312, 313, 0, 0, 0, 222, 314, 315, 317,
	0, 0, 316, 501, 502, 0, 503, 0, 318, 0,
	504, 0, 319, 320, 321, 0, 322, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 329, 328, 0, 330,
	505, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 341, 343, 345,
	342, 344, 349, 346, 347, 348, 351, 0, 350, 0,
	352, 353, 356, 357, 355, 0, 354, 0, 223, 0,
	358, 0, 506, 359, 507, 361, 362, 0, 0, 363,
	0, 0, 0, 365, 366, 367, 0, 0, 368, 369,
	508, 0, 370, 0, 509, 371, 364, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 380, 510, 511, 512,
	381, 513, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 389, 390, 391, 514, 392, 393, 0, 0, 0,
	0, 0, 0, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	515, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 421, 422, 420, 423, 424, 425, 0, 426,
	410, 411, 427, 428, 0, 429, 430, 516, 0, 431,
	0, 432, 433, 434, 435, 412, 436, 441, 517, 437,
	438, 439, 440, 518, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 286, 450, 0, 451, 519, 520,
	521, 522, 0, 458, 0, 452, 453, 523, 454, 524,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 466, 464, 467, 0, 468, 0, 0,
	469, 470, 471, 525, 526, 527, 0, 473, 472, 528,
	1822, 0, 218, 0, 474, 475, 529, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 0, 237,
	238, 239, 240, 241, 0, 0, 242, 484, 485, 486,
	0, 243, 244, 487, 0, 0, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	265, 266, 0, 267, 488, 489, 0, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 275, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 491, 492,
	0, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 0, 296, 0, 0, 0,
	297, 298, 494, 495, 299, 300, 0, 301, 496, 0,
	497, 302, 0, 303, 304, 305, 306, 307, 1824, 499,
	500, 360, 0, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 0, 0, 316,
	501, 502, 0, 503, 0, 318, 0, 504, 0, 319,
	320, 321, 0, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 505, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 0, 352, 353, 356,
	357, 355, 0, 354, 0, 223, 0, 358, 0, 506,
	359, 507, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 0, 370,
	0, 509, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 512, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 515, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 0, 426, 410, 411, 427,
	428, 0, 429, 430, 516, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	518, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 519, 520, 521, 522, 0,
	458, 0, 452, 453, 523, 454, 524, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	466, 464, 467, 0, 468, 0, 0, 469, 470, 471,
	525, 526, 527, 0, 473, 472, 528, 1314, 0, 218,
	0, 474, 475, 529, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 226, 227,
	228, 0, 229, 230, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 231, 233, 232, 234, 235, 480,
	481, 0, 482, 236, 483, 0, 237, 238, 239, 240,
	241, 0, 0, 242, 484, 485, 486, 0, 243, 244,
	487, 0, 0, 0, 245, 246, 247, 248, 249, 250,
	251, 0, 0, 253, 254, 255, 252, 0, 256, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 0,
	0, 0, 0, 0, 0, 263, 264, 265, 266, 0,
	267, 488, 489, 0, 271, 268, 269, 0, 272, 270,
	0, 273, 0, 0, 274, 275, 276, 0, 277, 0,
	278, 279, 0, 280, 281, 490, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 491, 492, 0, 221, 0,
	0, 0, 0, 0, 292, 293, 294, 493, 0, 0,
	0, 295, 0, 296, 0, 0, 0, 297, 298, 494,
	495, 299, 300, 0, 301, 496, 0, 497, 302, 0,
	303, 304, 305, 306, 307, 1313, 499, 500, 360, 0,
	308, 309, 0, 310, 311, 312, 313, 0, 0, 0,
	222, 314, 315, 317, 0, 0, 316, 501, 502, 0,
	503, 0, 318, 0, 504, 0, 319, 320, 321, 0,
	322, 0, 0, 0, 323, 324, 325, 326, 327, 0,
	329, 328, 0, 330, 505, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 0,
	340, 341, 343, 345, 342, 344, 349, 346, 347, 348,
	351, 0, 350, 0, 352, 353, 356, 357, 355, 0,
	354, 0, 223, 0, 358, 0, 506, 359, 507, 361,
	362, 0, 0, 363, 0, 0, 0, 365, 366, 367,
	0, 0, 368, 369, 508, 0, 370, 0, 509, 371,
	364, 372, 373, 374, 375, 376, 377, 378, 0, 379,
	380, 510, 511, 512, 381, 513, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 389, 390, 391, 514, 392,
	393, 0, 0, 0, 0, 0, 0, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 515, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 421, 422, 420, 423,
	424, 425, 0, 426, 410, 411, 427, 428, 0, 429,
	430, 516, 0, 431, 0, 432, 433, 434, 435, 412,
	436, 441, 517, 437, 438, 439, 440, 518, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 286, 450,
	0, 451, 519, 520, 521, 522, 0, 458, 0, 452,
	453, 523, 454, 524, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 466, 464, 467,
	0, 468, 0, 0, 469, 470, 471, 525, 526, 527,
	0, 473, 472, 528, 1311, 0, 218, 0, 474, 475,
	529, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 0, 237, 238, 239, 240, 241, 0, 0,
	242, 484, 485, 486, 0, 243, 244, 487, 0, 0,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 0, 0, 0, 0,
	0, 0, 263, 264, 265, 266, 0, 267, 488, 489,
	0, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 275, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 491, 492, 0, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 0,
	296, 0, 0, 0, 297, 298, 494, 495, 299, 300,
	0, 301, 496, 0, 497, 302, 0, 303, 304, 305,
	306, 307, 1310, 499, 500, 360, 0, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 0, 316, 501, 502, 0, 503, 0, 318,
	0, 504, 0, 319, 320, 321, 0, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 505, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	0, 352, 353, 356, 357, 355, 0, 354, 0, 223,
	0, 358, 0, 506, 359, 507, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 0, 370, 0, 509, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	512, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 515, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 0,
	426, 410, 411, 427, 428, 0, 429, 430, 516, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 518, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 519,
	520, 521, 522, 0, 458, 0, 452, 453, 523, 454,
	524, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 466, 464, 467, 0, 468, 0,
	0, 469, 470, 471, 525, 526, 527, 0, 473, 472,
	528, 1307, 0, 218, 0, 474, 475, 529, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 226, 227, 228, 0, 229, 230, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 231, 233,
	232, 234, 235, 480, 481, 0, 482, 236, 483, 0,
	237, 238, 239, 240, 241, 0, 0, 242, 484, 485,
	486, 0, 243, 244, 487, 0, 0, 0, 245, 246,
	247, 248, 249, 250, 251, 0, 0, 253, 254, 255,
	252, 0, 256, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 265, 266, 0, 267, 488, 489, 0, 271, 268,
	269, 0, 272, 270, 0, 273, 0, 0, 274, 275,
	276, 0, 277, 0, 278, 279, 0, 280, 281, 490,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 491,
	492, 0, 221, 0, 0, 0, 0, 0, 292, 293,
	294, 493, 0, 0, 0, 295, 0, 296, 0, 0,
	0, 297, 298, 494, 495, 299, 300, 0, 301, 496,
	0, 497, 302, 0, 303, 304, 305, 306, 307, 1306,
	499, 500, 360, 0, 308, 309, 0, 310, 311, 312,
	313, 0, 0, 0, 222, 314, 315, 317, 0, 0,
	316, 501, 502, 0, 503, 0, 318, 0, 504, 0,
	319, 320, 321, 0, 322, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 329, 328, 0, 330, 505, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 341, 343, 345, 342, 344,
	349, 346, 347, 348, 351, 0, 350, 0, 352, 353,
	356, 357, 355, 0, 354, 0, 223, 0, 358, 0,
	506, 359, 507, 361, 362, 0, 0, 363, 0, 0,
	0, 365, 366, 367, 0, 0, 368, 369, 508, 0,
	370, 0, 509, 371, 364, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 380, 510, 511, 512, 381, 513,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 389,
	390, 391, 514, 392, 393, 0, 0, 0, 0, 0,
	0, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 515, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	421, 422, 420, 423, 424, 425, 0, 426, 410, 411,
	427, 428, 0, 429, 430, 516, 0, 431, 0, 432,
	433, 434, 435, 412, 436, 441, 517, 437, 438, 439,
	440, 518, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 286, 450, 0, 451, 519, 520, 521, 522,
	0, 458, 0, 452, 453, 523, 454, 524, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 466, 464, 467, 0, 468, 0, 0, 469, 470,
	471, 525, 526, 527, 0, 473, 472, 528, 1181, 0,
	218, 0, 474, 475, 529, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 481, 0, 482, 236, 483, 0, 237, 238, 239,
	240, 241, 0, 0, 242, 484, 485, 486, 0, 243,
	244, 487, 0, 0, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	0, 0, 0, 0, 0, 0, 263, 264, 265, 266,
	0, 267, 488, 489, 0, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 275, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 490, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 491, 492, 0, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 493, 0,
	0, 0, 295, 0, 296, 0, 0, 0, 297, 298,
	494, 495, 299, 300, 0, 301, 496, 0, 497, 302,
	0, 303, 304, 305, 306, 307, 1183, 499, 500, 360,
	0, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 0, 0, 316, 501, 502,
	0, 503, 0, 318, 0, 504, 0, 319, 320, 321,
	0, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 505, 0, 331, 332, 0,
	0, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 0, 352, 353, 356, 357, 355,
	0, 354, 0, 223, 0, 358, 0, 506, 359, 507,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 0, 370, 0, 509,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 512, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 514,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 515, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 0, 426, 410, 411, 427, 428, 0,
	429, 430, 516, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 517, 437, 438, 439, 440, 518, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 519, 520, 521, 522, 0, 458, 0,
	452, 453, 523, 454, 524, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 466, 464,
	467, 0, 468, 0, 0, 469, 470, 471, 525, 526,
	527, 218, 473, 472, 528, 0, 0, 0, 0, 474,
	475, 529, 476, 477, 478, 0, 0, 0, 224, 225,
	226, 227, 228, 0, 229, 230, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 231, 233, 232, 234,
	235, 480, 481, 0, 482, 236, 483, 0, 237, 238,
	239, 240, 241, 0, 0, 242, 484, 485, 486, 0,
	243, 244, 487, 0, 0, 0, 245, 246, 247, 248,
	249, 250, 251, 0, 0, 253, 254, 255, 252, 0,
	256, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	266, 0, 267, 488, 489, 0, 271, 268, 269, 0,
	272, 270, 0, 273, 0, 0, 274, 275, 276, 0,
	277, 0, 278, 279, 0, 280, 281, 490, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 491, 492, 0,
	221, 0, 0, 0, 0, 0, 292, 293, 294, 493,
	0, 0, 0, 295, 0, 296, 0, 0, 0, 297,
	298, 494, 495, 299, 300, 0, 301, 496, 0, 497,
	302, 0, 303, 304, 305, 306, 307, 498, 499, 500,
	360, 0, 308, 309, 0, 310, 311, 312, 313, 0,
	0, 0, 222, 314, 315, 317, 0, 0, 316, 501,
	502, 0, 503, 0, 318, 0, 504, 0, 319, 320,
	321, 0, 322, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 329, 328, 0, 330, 505, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 341, 343, 345, 342, 344, 349, 346,
	347, 348, 351, 0, 350, 0, 352, 353, 356, 357,
	355, 0, 354, 0, 223, 0, 358, 0, 506, 359,
	507, 361, 362, 0, 0, 363, 0, 0, 0, 365,
	366, 367, 0, 0, 368, 369, 508, 0, 370, 0,
	509, 371, 364, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 380, 510, 511, 512, 381, 513, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 389, 390, 391,
	514, 392, 393, 0, 0, 0, 0, 0, 0, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 515, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 421, 422,
	420, 423, 424, 425, 0, 426, 410, 411, 427, 428,
	0, 429, 430, 516, 0, 431, 0, 432, 433, 434,
	435, 412, 436, 441, 517, 437, 438, 439, 440, 518,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	286, 450, 0, 451, 519, 520, 521, 522, 0, 458,
	0, 452, 453, 523, 454, 524, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 466,
	464, 467, 0, 468, 0, 0, 469, 470, 471, 525,
	526, 527, 218, 473, 472, 528, 0, 0, 0, 0,
	474, 475, 529, 476, 477, 478, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 0, 237,
	238, 239, 240, 241, 0, 0, 242, 484, 485, 486,
	0, 243, 244, 487, 0, 0, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 550, 260, 0, 261,
	262, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	265, 266, 0, 267, 488, 489, 0, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 275, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 491, 492,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 0, 296, 0, 0, 0,
	297, 298, 494, 495, 299, 300, 551, 301, 496, 0,
	497, 302, 0, 303, 304, 305, 306, 307, 498, 499,
	500, 360, 0, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 0, 314, 315, 317, 0, 0, 316,
	501, 502, 0, 503, 0, 318, 0, 504, 0, 319,
	320, 321, 0, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 505, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 0, 352, 353, 356,
	357, 355, 0, 354, 0, 0, 0, 358, 0, 506,
	359, 507, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 0, 370,
	0, 509, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 512, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 515, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 552, 421,
	422, 420, 423, 424, 425, 0, 426, 410, 411, 427,
	428, 0, 429, 430, 516, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	518, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 519, 520, 521, 522, 0,
	458, 0, 452, 453, 523, 454, 524, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	466, 464, 467, 0, 468, 0, 0, 469, 470, 471,
	525, 526, 527, 218, 473, 472, 528, 0, 0, 0,
	0, 474, 475, 529, 476, 477, 478, 0, 0, 0,
	224, 225, 226, 227, 228, 0, 229, 230, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 231, 233,
	232, 234, 235, 480, 481, 0, 482, 236, 483, 0,
	237, 238, 239, 240, 241, 0, 0, 242, 484, 485,
	486, 0, 243, 244, 487, 0, 0, 0, 245, 246,
	247, 248, 249, 250, 251, 0, 0, 253, 254, 255,
	252, 0, 256, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 1929, 266, 0, 267, 488, 489, 0, 271, 268,
	269, 0, 272, 270, 0, 273, 0, 0, 274, 275,
	276, 0, 277, 0, 278, 279, 0, 280, 281, 490,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 491,
	492, 0, 221, 0, 0, 0, 0, 0, 292, 293,
	294, 493, 0, 0, 0, 295, 0, 296, 0, 0,
	0, 297, 298, 494, 495, 299, 300, 0, 301, 496,
	0, 497, 302, 0, 303, 304, 305, 306, 307, 498,
	499, 500, 360, 0, 308, 309, 0, 310, 311, 312,
	313, 0, 0, 0, 222, 314, 315, 317, 0, 0,
	316, 501, 502, 0, 503, 0, 318, 0, 504, 0,
	319, 320, 321, 0, 322, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 329, 328, 0, 330, 505, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 341, 343, 345, 342, 344,
	349, 346, 347, 348, 351, 0, 350, 0, 352, 353,
	356, 357, 355, 0, 354, 0, 223, 0, 358, 0,
	506, 359, 507, 361, 362, 0, 0, 363, 0, 0,
	0, 365, 366, 367, 0, 0, 368, 369, 508, 0,
	370, 0, 509, 371, 364, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 380, 510, 511, 512, 381, 513,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 389,
	390, 391, 514, 392, 393, 0, 0, 0, 0, 0,
	0, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 515, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	421, 422, 420, 423, 424, 425, 0, 426, 410, 411,
	427, 428, 0, 429, 430, 516, 0, 431, 0, 432,
	433, 434, 435, 412, 436, 441, 517, 437, 438, 439,
	440, 518, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 286, 450, 0, 451, 519, 520, 521, 522,
	0, 458, 0, 452, 453, 523, 454, 524, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 466, 464, 467, 0, 468, 0, 0, 469, 470,
	471, 525, 526, 527, 218, 473, 472, 528, 0, 0,
	0, 0, 474, 475, 529, 476, 477, 478, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 481, 0, 482, 236, 483,
	0, 237, 238, 239, 240, 241, 0, 0, 242, 484,
	485, 486, 0, 243, 244, 487, 0, 0, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 1927, 266, 0, 267, 488, 489, 0, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	275, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	490, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	491, 492, 0, 221, 0, 0, 0, 0, 0, 292,
	293, 294, 493, 0, 0, 0, 295, 0, 296, 0,
	0, 0, 297, 298, 494, 495, 299, 300, 0, 301,
	496, 0, 497, 302, 0, 303, 304, 305, 306, 307,
	498, 499, 500, 360, 0, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 222, 314, 315, 317, 0,
	0, 316, 501, 502, 0, 503, 0, 318, 0, 504,
	0, 319, 320, 321, 0, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 505,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 0, 352,
	353, 356, 357, 355, 0, 354, 0, 223, 0, 358,
	0, 506, 359, 507, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	0, 370, 0, 509, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 512, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 514, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 515,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 0, 426, 410,
	411, 427, 428, 0, 429, 430, 516, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 517, 437, 438,
	439, 440, 518, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 519, 520, 521,
	522, 0, 458, 0, 452, 453, 523, 454, 524, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 466, 464, 467, 0, 468, 0, 0, 469,
	470, 471, 525, 526, 527, 218, 473, 472, 528, 0,
	0, 0, 0, 474, 475, 529, 476, 477, 478, 0,
	0, 0, 224, 225, 226, 227, 228, 0, 229, 230,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	231, 233, 232, 234, 235, 480, 481, 0, 482, 236,
	483, 0, 237, 238, 239, 240, 241, 0, 0, 242,
	484, 485, 486, 0, 243, 244, 487, 0, 0, 0,
	245, 246, 247, 248, 249, 250, 251, 0, 0, 253,
	254, 255, 252, 0, 256, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 0, 0, 0, 0, 0,
	0, 263, 264, 1925, 266, 0, 267, 488, 489, 0,
	271, 268, 269, 0, 272, 270, 0, 273, 0, 0,
	274, 275, 276, 0, 277, 0, 278, 279, 0, 280,
	281, 490, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 491, 492, 0, 221, 0, 0, 0, 0, 0,
	292, 293, 294, 493, 0, 0, 0, 295, 0, 296,
	0, 0, 0, 297, 298, 494, 495, 299, 300, 0,
	301, 496, 0, 497, 302, 0, 303, 304, 305, 306,
	307, 498, 499, 500, 360, 0, 308, 309, 0, 310,
	311, 312, 313, 0, 0, 0, 222, 314, 315, 317,
	0, 0, 316, 501, 502, 0, 503, 0, 318, 0,
	504, 0, 319, 320, 321, 0, 322, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 329, 328, 0, 330,
	505, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 341, 343, 345,
	342, 344, 349, 346, 347, 348, 351, 0, 350, 0,
	352, 353, 356, 357, 355, 0, 354, 0, 223, 0,
	358, 0, 506, 359, 507, 361, 362, 0, 0, 363,
	0, 0, 0, 365, 366, 367, 0, 0, 368, 369,
	508, 0, 370, 0, 509, 371, 364, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 380, 510, 511, 512,
	381, 513, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 389, 390, 391, 514, 392, 393, 0, 0, 0,
	0, 0, 0, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	515, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 421, 422, 420, 423, 424, 425, 0, 426,
	410, 411, 427, 428, 0, 429, 430, 516, 0, 431,
	0, 432, 433, 434, 435, 412, 436, 441, 517, 437,
	438, 439, 440, 518, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 286, 450, 0, 451, 519, 520,
	521, 522, 0, 458, 0, 452, 453, 523, 454, 524,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 466, 464, 467, 0, 468, 0, 0,
	469, 470, 471, 525, 526, 527, 218, 473, 472, 528,
	0, 0, 0, 0, 474, 475, 529, 476, 477, 478,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 0, 237, 238, 239, 240, 241, 0, 0,
	242, 484, 485, 486, 0, 243, 244, 487, 0, 0,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 0, 0, 0, 0,
	0, 0, 263, 264, 265, 266, 0, 267, 488, 489,
	0, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 275, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 491, 492, 0, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 0,
	296, 0, 0, 0, 297, 298, 494, 495, 299, 300,
	0, 301, 496, 0, 497, 302, 0, 303, 304, 305,
	306, 307, 1872, 499, 500, 360, 0, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 0, 316, 501, 502, 0, 503, 0, 318,
	0, 504, 0, 319, 320, 321, 0, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 505, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	0, 352, 353, 356, 357, 355, 0, 354, 0, 223,
	0, 358, 0, 506, 359, 507, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 0, 370, 0, 509, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	512, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 515, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 0,
	426, 410, 411, 427, 428, 0, 429, 430, 516, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 518, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 519,
	520, 521, 522, 0, 458, 0, 452, 453, 523, 454,
	524, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 466, 464, 467, 0, 468, 0,
	0, 469, 470, 471, 525, 526, 527, 0, 473, 472,
	528, 704, 0, 218, 0, 474, 475, 529, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 226, 227, 228, 0, 229, 230, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 231, 233,
	232, 234, 235, 480, 481, 0, 482, 236, 483, 0,
	237, 238, 239, 240, 241, 0, 0, 242, 484, 485,
	486, 0, 243, 244, 487, 0, 0, 0, 245, 246,
	247, 248, 249, 250, 251, 0, 0, 253, 254, 255,
	252, 0, 256, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 265, 266, 0, 267, 488, 489, 0, 271, 268,
	269, 0, 272, 270, 0, 273, 0, 0, 274, 275,
	276, 0, 277, 0, 278, 279, 0, 280, 281, 490,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	294, 493, 0, 0, 0, 295, 0, 296, 0, 0,
	0, 297, 298, 494, 495, 299, 300, 0, 301, 496,
	0, 497, 302, 0, 303, 304, 305, 306, 307, 498,
	499, 500, 360, 0, 308, 309, 0, 310, 311, 312,
	313, 0, 0, 0, 0, 314, 315, 317, 0, 0,
	316, 501, 502, 0, 503, 703, 318, 0, 504, 0,
	319, 320, 321, 0, 322, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 329, 328, 0, 330, 505, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 341, 343, 345, 342, 344,
	349, 346, 347, 348, 351, 0, 350, 0, 352, 353,
	356, 357, 355, 0, 354, 0, 0, 0, 358, 0,
	506, 359, 507, 361, 362, 0, 0, 363, 0, 0,
	0, 365, 366, 367, 0, 0, 368, 369, 508, 0,
	370, 0, 509, 371, 364, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 380, 510, 511, 512, 381, 513,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 389,
	390, 391, 514, 392, 393, 0, 0, 0, 0, 0,
	0, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 515, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	421, 422, 420, 423, 424, 425, 0, 426, 410, 411,
	427, 428, 0, 429, 430, 516, 0, 431, 0, 432,
	433, 434, 435, 412, 436, 441, 517, 437, 438, 439,
	440, 518, 0, 443, 444, 442, 702, 445, 446, 447,
	448, 449, 286, 450, 0, 451, 519, 520, 521, 522,
	0, 458, 0, 452, 453, 523, 454, 524, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 466, 464, 467, 0, 468, 0, 0, 469, 470,
	471, 525, 526, 527, 218, 473, 472, 528, 0, 0,
	0, 0, 474, 475, 529, 476, 477, 478, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 481, 0, 482, 236, 483,
	0, 237, 238, 239, 240, 241, 0, 0, 242, 484,
	485, 486, 0, 243, 244, 487, 0, 0, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 266, 0, 267, 488, 489, 0, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	275, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	490, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	491, 492, 0, 2469, 0, 0, 0, 0, 0, 292,
	293, 294, 493, 0, 0, 0, 295, 0, 296, 0,
	0, 0, 297, 298, 494, 495, 299, 300, 0, 301,
	496, 0, 497, 302, 0, 303, 304, 305, 306, 307,
	498, 499, 500, 360, 0, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 0, 314, 315, 317, 0,
	0, 316, 501, 502, 0, 503, 0, 318, 0, 504,
	0, 319, 320, 321, 0, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 505,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 0, 352,
	353, 356, 357, 355, 0, 354, 0, 0, 0, 358,
	0, 506, 359, 507, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	0, 370, 0, 509, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 512, 381,
	513, 382, 383, 3327, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 514, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 515,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 0, 426, 410,
	411, 427, 428, 0, 429, 430, 516, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 517, 437, 438,
	439, 440, 518, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 519, 520, 521,
	522, 0, 458, 0, 452, 453, 523, 454, 524, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 466, 464, 467, 0, 468, 0, 0, 469,
	470, 471, 525, 526, 527, 0, 473, 472, 528, 537,
	0, 218, 0, 474, 475, 529, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	226, 227, 228, 536, 229, 230, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 231, 233, 232, 234,
	235, 480, 481, 0, 482, 236, 483, 0, 237, 238,
	239, 240, 241, 0, 0, 242, 484, 485, 486, 0,
	243, 244, 487, 0, 0, 0, 245, 246, 247, 248,
	249, 250, 251, 0, 0, 253, 254, 255, 252, 0,
	256, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	266, 0, 267, 488, 489, 0, 271, 268, 269, 0,
	272, 270, 0, 273, 0, 0, 274, 275, 276, 0,
	277, 0, 278, 279, 0, 280, 281, 490, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 294, 493,
	0, 0, 0, 295, 0, 296, 0, 0, 0, 297,
	298, 494, 495, 299, 300, 0, 301, 496, 0, 497,
	302, 0, 303, 304, 305, 306, 307, 498, 499, 500,
	360, 0, 308, 309, 0, 310, 311, 312, 313, 0,
	0, 0, 0, 314, 315, 317, 0, 0, 316, 501,
	502, 0, 503, 0, 318, 0, 504, 0, 319, 320,
	321, 0, 322, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 329, 328, 0, 330, 505, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 341, 343, 345, 342, 344, 349, 346,
	347, 348, 351, 0, 350, 0, 352, 353, 356, 357,
	355, 0, 354, 0, 0, 0, 358, 0, 506, 359,
	507, 361, 362, 0, 0, 363, 0, 0, 0, 365,
	366, 367, 0, 0, 368, 369, 508, 0, 370, 0,
	509, 371, 364, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 380, 510, 511, 512, 381, 513, 535, 383,
	0, 384, 0, 385, 386, 387, 388, 389, 390, 391,
	514, 392, 393, 0, 0, 0, 0, 0, 0, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 515, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 421, 422,
	420, 423, 424, 425, 0, 426, 410, 411, 427, 428,
	0, 429, 430, 516, 0, 431, 0, 432, 433, 434,
	435, 412, 436, 441, 517, 437, 438, 439, 440, 518,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	286, 450, 0, 451, 519, 520, 521, 522, 0, 458,
	0, 452, 453, 523, 454, 524, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 466,
	464, 467, 0, 468, 0, 0, 469, 470, 471, 525,
	526, 527, 0, 473, 472, 528, 218, 3336, 0, 0,
	474, 475, 529, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 0, 237, 238, 239, 240, 241, 0, 0,
	242, 484, 485, 486, 0, 243, 244, 487, 0, 0,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 0, 0, 0, 0,
	0, 0, 263, 264, 265, 266, 0, 267, 488, 489,
	0, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 275, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 491, 492, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 0,
	296, 0, 0, 0, 297, 298, 494, 495, 299, 300,
	0, 301, 496, 0, 497, 302, 0, 303, 304, 305,
	306, 307, 498, 499, 500, 360, 0, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 0, 314, 315,
	317, 0, 0, 316, 501, 502, 0, 503, 0, 318,
	0, 504, 0, 319, 320, 321, 0, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 505, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	0, 352, 353, 356, 357, 355, 0, 354, 0, 0,
	0, 358, 0, 506, 359, 507, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 0, 370, 0, 509, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	512, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 515, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 0,
	426, 410, 411, 427, 428, 0, 429, 430, 516, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 518, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 519,
	520, 521, 522, 0, 458, 0, 452, 453, 523, 454,
	524, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 466, 464, 467, 0, 468, 0,
	0, 469, 470, 471, 525, 526, 527, 0, 473, 472,
	528, 218, 2456, 0, 0, 474, 475, 529, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	226, 227, 228, 0, 229, 230, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 231, 233, 232, 234,
	235, 480, 481, 0, 482, 236, 483, 0, 237, 238,
	239, 240, 241, 0, 0, 242, 484, 485, 486, 0,
	243, 244, 487, 0, 0, 0, 245, 246, 247, 248,
	249, 250, 251, 0, 0, 253, 254, 255, 252, 0,
	256, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	266, 0, 267, 488, 489, 0, 271, 268, 269, 0,
	272, 270, 0, 273, 0, 0, 274, 275, 276, 0,
	277, 0, 278, 279, 0, 280, 281, 490, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 294, 493,
	0, 0, 0, 295, 0, 296, 0, 0, 0, 297,
	298, 494, 495, 299, 300, 0, 301, 496, 0, 497,
	302, 0, 303, 304, 305, 306, 307, 498, 499, 500,
	360, 0, 308, 309, 0, 310, 311, 312, 313, 0,
	0, 0, 0, 314, 315, 317, 0, 0, 316, 501,
	502, 0, 503, 0, 318, 0, 504, 0, 319, 320,
	321, 0, 322, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 329, 328, 0, 330, 505, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 341, 343, 345, 342, 344, 349, 346,
	347, 348, 351, 0, 350, 0, 352, 353, 356, 357,
	355, 0, 354, 0, 0, 0, 358, 0, 506, 359,
	507, 361, 362, 0, 0, 363, 0, 0, 0, 365,
	366, 367, 0, 0, 368, 369, 508, 0, 370, 0,
	509, 371, 364, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 380, 510, 511, 512, 381, 513, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 389, 390, 391,
	514, 392, 393, 0, 0, 0, 0, 0, 0, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 515, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 421, 422,
	420, 423, 424, 425, 0, 426, 410, 411, 427, 428,
	0, 429, 430, 516, 0, 431, 0, 432, 433, 434,
	435, 412, 436, 441, 517, 437, 438, 439, 440, 518,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	286, 450, 0, 451, 519, 520, 521, 522, 0, 458,
	0, 452, 453, 523, 454, 524, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 466,
	464, 467, 0, 468, 0, 0, 469, 470, 471, 525,
	526, 527, 218, 473, 472, 528, 0, 0, 0, 0,
	474, 475, 529, 476, 477, 478, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 0, 237,
	238, 239, 240, 241, 0, 0, 242, 484, 485, 486,
	0, 243, 244, 487, 0, 0, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	265, 266, 0, 267, 488, 489, 3110, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 275, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 491, 492,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 0, 296, 0, 0, 0,
	297, 298, 494, 495, 299, 300, 0, 301, 496, 0,
	497, 302, 0, 303, 304, 305, 306, 307, 498, 499,
	500, 360, 0, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 0, 314, 315, 317, 0, 0, 316,
	501, 502, 0, 503, 0, 318, 0, 504, 0, 319,
	320, 321, 0, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 505, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 0, 352, 353, 356,
	357, 355, 0, 354, 0, 0, 0, 358, 0, 506,
	359, 507, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 0, 370,
	0, 509, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 512, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 515, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 0, 426, 410, 411, 427,
	428, 0, 429, 430, 516, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	518, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 519, 520, 521, 522, 0,
	458, 0, 452, 453, 523, 454, 524, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	466, 464, 467, 0, 468, 0, 0, 469, 470, 471,
	525, 526, 527, 218, 473, 472, 528, 0, 0, 0,
	0, 474, 475, 529, 476, 477, 478, 0, 0, 0,
	224, 225, 226, 227, 228, 0, 229, 230, 0, 0,
	0, 0, 0, 479, 0, 2230, 0, 0, 231, 233,
	232, 234, 235, 480, 481, 0, 482, 236, 483, 0,
	237, 238, 239, 240, 241, 0, 0, 242, 484, 485,
	486, 0, 243, 244, 487, 0, 0, 0, 245, 246,
	247, 248, 249, 250, 251, 0, 0, 253, 254, 255,
	252, 0, 256, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 265, 266, 0, 267, 488, 489, 0, 271, 268,
	269, 0, 272, 270, 0, 273, 0, 0, 274, 275,
	276, 0, 277, 0, 278, 279, 0, 280, 281, 490,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	294, 493, 0, 0, 0, 295, 0, 296, 0, 0,
	0, 297, 298, 494, 495, 299, 300, 0, 301, 496,
	0, 497, 302, 0, 303, 304, 305, 306, 307, 498,
	499, 500, 360, 0, 308, 309, 0, 310, 311, 312,
	313, 0, 0, 0, 0, 314, 315, 317, 0, 0,
	316, 501, 502, 0, 503, 0, 318, 0, 504, 0,
	319, 320, 321, 0, 322, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 329, 328, 0, 330, 505, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 341, 343, 345, 342, 344,
	349, 346, 347, 348, 351, 0, 350, 0, 352, 353,
	356, 357, 355, 0, 354, 0, 0, 0, 358, 0,
	506, 359, 507, 361, 362, 0, 0, 363, 0, 0,
	0, 365, 366, 367, 0, 0, 368, 369, 508, 0,
	370, 0, 509, 371, 364, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 380, 510, 511, 512, 381, 513,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 389,
	390, 391, 514, 392, 393, 0, 0, 0, 0, 0,
	0, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 515, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	421, 422, 420, 423, 424, 425, 0, 426, 410, 411,
	427, 428, 0, 429, 430, 516, 0, 431, 0, 432,
	433, 434, 435, 412, 436, 441, 517, 437, 438, 439,
	440, 518, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 286, 450, 0, 451, 519, 520, 521, 522,
	0, 458, 0, 452, 453, 523, 454, 524, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 466, 464, 467, 0, 468, 0, 0, 469, 470,
	471, 525, 526, 527, 0, 473, 472, 528, 218, 2456,
	0, 0, 474, 475, 529, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 481,
	0, 482, 236, 483, 0, 237, 238, 239, 240, 241,
	0, 0, 242, 484, 485, 486, 0, 243, 244, 487,
	0, 0, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 266, 0, 267,
	488, 489, 0, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 275, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 490, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 294, 493, 0, 0, 0,
	295, 0, 296, 0, 0, 0, 297, 298, 494, 495,
	299, 300, 0, 301, 496, 0, 497, 302, 0, 303,
	304, 305, 306, 307, 498, 499, 500, 360, 0, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 0,
	314, 315, 317, 0, 0, 316, 501, 502, 0, 503,
	0, 318, 0, 504, 0, 319, 320, 321, 0, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 505, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 0, 352, 353, 356, 357, 355, 0, 354,
	0, 0, 0, 358, 0, 506, 359, 507, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 2453, 0,
	0, 368, 369, 508, 0, 370, 0, 509, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 512, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 514, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 515, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 0, 426, 410, 411, 427, 428, 0, 429, 430,
	516, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 517, 437, 438, 439, 440, 518, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 519, 520, 521, 522, 0, 458, 0, 452, 453,
	523, 454, 524, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 466, 464, 467, 0,
	468, 0, 0, 469, 470, 471, 525, 526, 527, 218,
	473, 472, 528, 0, 0, 0, 0, 474, 475, 529,
	476, 477, 478, 0, 0, 0, 224, 225, 226, 227,
	228, 1906, 229, 230, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 231, 233, 232, 234, 235, 480,
	481, 0, 482, 236, 483, 0, 237, 238, 239, 240,
	241, 0, 0, 242, 484, 485, 486, 0, 243, 244,
	487, 0, 0, 0, 245, 246, 247, 248, 249, 250,
	251, 0, 0, 253, 254, 255, 252, 0, 256, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 0,
	0, 0, 0, 0, 0, 263, 264, 265, 266, 0,
	267, 488, 489, 0, 271, 268, 269, 0, 272, 270,
	0, 273, 0, 0, 274, 275, 276, 0, 277, 0,
	278, 279, 0, 280, 281, 490, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 294, 493, 0, 0,
	0, 295, 0, 296, 0, 0, 0, 297, 298, 494,
	495, 299, 300, 0, 301, 496, 0, 497, 302, 0,
	303, 304, 305, 306, 307, 498, 499, 500, 360, 0,
	308, 309, 0, 310, 311, 312, 313, 0, 0, 0,
	0, 314, 315, 317, 0, 0, 316, 501, 502, 0,
	503, 0, 318, 0, 504, 0, 319, 320, 321, 0,
	322, 0, 0, 0, 323, 324, 325, 326, 327, 0,
	329, 328, 0, 330, 505, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 0,
	340, 341, 343, 345, 342, 344, 349, 346, 347, 348,
	351, 0, 350, 0, 352, 353, 356, 357, 355, 0,
	354, 0, 0, 0, 358, 0, 506, 359, 507, 361,
	362, 0, 0, 363, 0, 0, 0, 365, 366, 367,
	0, 0, 368, 369, 508, 0, 370, 0, 509, 371,
	364, 372, 373, 374, 375, 376, 377, 378, 0, 379,
	380, 510, 511, 512, 381, 513, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 389, 390, 391, 514, 392,
	393, 0, 0, 0, 0, 0, 0, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 515, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 421, 422, 420, 423,
	424, 425, 0, 426, 410, 411, 427, 428, 0, 429,
	430, 516, 0, 431, 0, 432, 433, 434, 435, 412,
	436, 441, 517, 437, 438, 439, 440, 518, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 286, 450,
	0, 451, 519, 520, 521, 522, 0, 458, 0, 452,
	453, 523, 454, 524, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 466, 464, 467,
	0, 468, 0, 0, 469, 470, 471, 525, 526, 527,
	0, 473, 472, 528, 1896, 0, 218, 0, 474, 475,
	529, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 0, 237, 238, 239, 240, 241, 0, 0,
	242, 484, 485, 486, 0, 243, 244, 487, 0, 0,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 0, 0, 0, 0,
	0, 0, 263, 264, 265, 266, 0, 267, 488, 489,
	0, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 275, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 491, 492, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 0,
	296, 0, 0, 0, 297, 298, 494, 495, 299, 300,
	0, 301, 496, 0, 497, 302, 0, 303, 304, 305,
	306, 307, 498, 499, 500, 360, 0, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 0, 314, 315,
	317, 0, 0, 316, 501, 502, 0, 503, 0, 318,
	0, 504, 0, 319, 320, 321, 0, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 505, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	0, 352, 353, 356, 357, 355, 0, 354, 0, 0,
	0, 358, 0, 506, 359, 507, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 0, 370, 0, 509, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	512, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 515, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 0,
	426, 410, 411, 427, 428, 0, 429, 430, 516, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 518, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 519,
	520, 521, 522, 0, 458, 0, 452, 453, 523, 454,
	524, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 466, 464, 467, 0, 468, 0,
	0, 469, 470, 471, 525, 526, 527, 0, 473, 472,
	528, 578, 0, 218, 0, 474, 475, 529, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 226, 227, 228, 0, 229, 230, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 231, 1047,
	232, 234, 235, 480, 481, 0, 482, 236, 483, 0,
	237, 238, 239, 240, 241, 0, 0, 242, 484, 485,
	1045, 0, 243, 244, 487, 0, 0, 0, 245, 246,
	247, 248, 249, 250, 251, 0, 0, 253, 254, 255,
	252, 0, 256, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 265, 266, 0, 267, 488, 489, 0, 271, 268,
	269, 0, 272, 270, 0, 273, 0, 0, 274, 275,
	276, 0, 277, 0, 278, 279, 0, 280, 281, 490,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	294, 493, 0, 0, 0, 295, 0, 296, 0, 0,
	0, 297, 298, 494, 495, 299, 300, 0, 301, 496,
	0, 497, 302, 0, 303, 304, 305, 306, 307, 498,
	499, 500, 360, 0, 308, 309, 0, 310, 311, 312,
	313, 0, 0, 0, 0, 314, 315, 317, 0, 0,
	316, 501, 502, 0, 503, 0, 318, 0, 504, 0,
	319, 320, 321, 0, 322, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 329, 328, 0, 330, 505, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 341, 343, 345, 342, 344,
	349, 346, 347, 348, 351, 0, 579, 0, 352, 353,
	356, 357, 355, 0, 354, 0, 0, 0, 358, 0,
	506, 359, 507, 361, 362, 0, 0, 363, 0, 0,
	0, 365, 366, 367, 0, 0, 368, 369, 508, 0,
	370, 0, 509, 371, 364, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 380, 510, 511, 512, 381, 513,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 389,
	390, 391, 514, 392, 393, 0, 0, 0, 0, 0,
	0, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 515, 408,
	0, 409, 413, 414, 575, 416, 417, 418, 419, 0,
	421, 422, 420, 423, 1048, 425, 0, 426, 410, 411,
	427, 428, 0, 429, 430, 516, 0, 431, 0, 432,
	433, 434, 435, 412, 436, 441, 517, 437, 438, 439,
	440, 518, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 286, 450, 0, 451, 574, 520, 521, 522,
	0, 458, 0, 452, 453, 523, 454, 524, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 466, 464, 467, 0, 468, 0, 0, 469, 470,
	471, 525, 526, 527, 0, 473, 472, 528, 578, 0,
	218, 0, 474, 475, 529, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 481, 0, 482, 236, 483, 0, 237, 238, 239,
	240, 241, 0, 0, 242, 484, 485, 486, 0, 243,
	568, 487, 0, 0, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	0, 0, 0, 0, 0, 0, 263, 264, 265, 266,
	0, 267, 488, 489, 0, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 275, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 490, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 294, 493, 0,
	0, 0, 295, 0, 296, 0, 0, 0, 297, 298,
	494, 495, 299, 300, 0, 301, 496, 0, 497, 302,
	0, 303, 304, 305, 306, 307, 498, 499, 500, 360,
	0, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 0, 314, 315, 317, 0, 0, 316, 501, 502,
	0, 503, 0, 318, 0, 504, 0, 319, 320, 321,
	0, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 505, 0, 331, 332, 0,
	0, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 579, 0, 352, 353, 356, 357, 355,
	0, 354, 0, 0, 0, 358, 0, 506, 359, 507,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 0, 370, 0, 509,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 512, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 514,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 515, 408, 0, 409, 413,
	414, 575, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 1334, 425, 0, 426, 410, 411, 427, 428, 0,
	429, 430, 516, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 517, 437, 438, 439, 440, 518, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 574, 520, 521, 522, 0, 458, 0,
	452, 453, 523, 454, 524, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 466, 464,
	467, 0, 468, 0, 0, 469, 470, 471, 525, 526,
	527, 0, 473, 472, 528, 1320, 0, 218, 0, 474,
	475, 529, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 226, 227, 228, 0,
	229, 230, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 231, 233, 232, 234, 235, 480, 481, 0,
	482, 236, 483, 0, 237, 238, 239, 240, 241, 0,
	0, 242, 484, 485, 486, 0, 243, 244, 487, 0,
	0, 0, 245, 246, 247, 248, 249, 250, 251, 0,
	0, 253, 254, 255, 252, 0, 256, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 266, 0, 267, 488,
	489, 0, 271, 268, 269, 0, 272, 270, 0, 273,
	0, 0, 274, 275, 276, 0, 277, 0, 278, 279,
	0, 280, 281, 490, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 294, 493, 0, 0, 0, 295,
	0, 296, 0, 0, 0, 297, 298, 494, 495, 299,
	300, 0, 301, 496, 0, 497, 302, 0, 303, 304,
	305, 306, 307, 1319, 499, 500, 360, 0, 308, 309,
	0, 310, 311, 312, 313, 0, 0, 0, 0, 314,
	315, 317, 0, 0, 316, 501, 502, 0, 503, 0,
	318, 0, 504, 0, 319, 320, 321, 0, 322, 0,
	0, 0, 323, 324, 325, 326, 327, 0, 329, 328,
	0, 330, 505, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 341,
	343, 345, 342, 344, 349, 346, 347, 348, 351, 0,
	350, 0, 352, 353, 356, 357, 355, 0, 354, 0,
	0, 0, 358, 0, 506, 359, 507, 361, 362, 0,
	0, 363, 0, 0, 0, 365, 366, 367, 0, 0,
	368, 369, 508, 0, 370, 0, 509, 371, 364, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 380, 510,
	511, 512, 381, 513, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 389, 390, 391, 514, 392, 393, 0,
	0, 0, 0, 0, 0, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 515, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 0, 421, 422, 420, 423, 424, 425,
	0, 426, 410, 411, 427, 428, 0, 429, 430, 516,
	0, 431, 0, 432, 433, 434, 435, 412, 436, 441,
	517, 437, 438, 439, 440, 518, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 286, 450, 0, 451,
	519, 520, 521, 522, 0, 458, 0, 452, 453, 523,
	454, 524, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 466, 464, 467, 0, 468,
	0, 0, 469, 470, 471, 525, 526, 527, 0, 473,
	472, 528, 1268, 0, 218, 0, 474, 475, 529, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 481, 0, 482, 236, 483,
	0, 237, 238, 239, 240, 241, 0, 0, 242, 484,
	485, 486, 0, 243, 244, 487, 0, 0, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 266, 0, 267, 488, 489, 0, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	275, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	490, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 294, 493, 0, 0, 0, 295, 0, 296, 0,
	0, 0, 297, 298, 494, 495, 299, 300, 0, 301,
	496, 0, 497, 302, 0, 303, 304, 305, 306, 307,
	1267, 499, 500, 360, 0, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 0, 314, 315, 317, 0,
	0, 316, 501, 502, 0, 503, 0, 318, 0, 504,
	0, 319, 320, 321, 0, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 505,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 0, 352,
	353, 356, 357, 355, 0, 354, 0, 0, 0, 358,
	0, 506, 359, 507, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	0, 370, 0, 509, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 512, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 514, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 515,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 0, 426, 410,
	411, 427, 428, 0, 429, 430, 516, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 517, 437, 438,
	439, 440, 518, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 519, 520, 521,
	522, 0, 458, 0, 452, 453, 523, 454, 524, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 466, 464, 467, 0, 468, 0, 0, 469,
	470, 471, 525, 526, 527, 0, 473, 472, 528, 1253,
	0, 218, 0, 474, 475, 529, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	226, 227, 228, 0, 229, 230, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 231, 233, 232, 234,
	235, 480, 481, 0, 482, 236, 483, 0, 237, 238,
	239, 240, 241, 0, 0, 242, 484, 485, 486, 0,
	243, 244, 487, 0, 0, 0, 245, 246, 247, 248,
	249, 250, 251, 0, 0, 253, 254, 255, 252, 0,
	256, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	266, 0, 267, 488, 489, 0, 271, 268, 269, 0,
	272, 270, 0, 273, 0, 0, 274, 275, 276, 0,
	277, 0, 278, 279, 0, 280, 281, 490, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 294, 493,
	0, 0, 0, 295, 0, 296, 0, 0, 0, 297,
	298, 494, 495, 299, 300, 0, 301, 496, 0, 497,
	302, 0, 303, 304, 305, 306, 307, 1252, 499, 500,
	360, 0, 308, 309, 0, 310, 311, 312, 313, 0,
	0, 0, 0, 314, 315, 317, 0, 0, 316, 501,
	502, 0, 503, 0, 318, 0, 504, 0, 319, 320,
	321, 0, 322, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 329, 328, 0, 330, 505, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 341, 343, 345, 342, 344, 349, 346,
	347, 348, 351, 0, 350, 0, 352, 353, 356, 357,
	355, 0, 354, 0, 0, 0, 358, 0, 506, 359,
	507, 361, 362, 0, 0, 363, 0, 0, 0, 365,
	366, 367, 0, 0, 368, 369, 508, 0, 370, 0,
	509, 371, 364, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 380, 510, 511, 512, 381, 513, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 389, 390, 391,
	514, 392, 393, 0, 0, 0, 0, 0, 0, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 515, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 421, 422,
	420, 423, 424, 425, 0, 426, 410, 411, 427, 428,
	0, 429, 430, 516, 0, 431, 0, 432, 433, 434,
	435, 412, 436, 441, 517, 437, 438, 439, 440, 518,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	286, 450, 0, 451, 519, 520, 521, 522, 0, 458,
	0, 452, 453, 523, 454, 524, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 466,
	464, 467, 0, 468, 0, 0, 469, 470, 471, 525,
	526, 527, 0, 473, 472, 528, 1248, 0, 218, 0,
	474, 475, 529, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 481,
	0, 482, 236, 483, 0, 237, 238, 239, 240, 241,
	0, 0, 242, 484, 485, 486, 0, 243, 244, 487,
	0, 0, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 266, 0, 267,
	488, 489, 0, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 275, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 490, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 294, 493, 0, 0, 0,
	295, 0, 296, 0, 0, 0, 297, 298, 494, 495,
	299, 300, 0, 301, 496, 0, 497, 302, 0, 303,
	304, 305, 306, 307, 498, 499, 500, 360, 0, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 0,
	314, 315, 317, 0, 0, 316, 501, 502, 0, 503,
	0, 318, 0, 504, 0, 319, 320, 321, 0, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 505, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 0, 352, 353, 356, 357, 355, 0, 354,
	0, 0, 0, 358, 0, 506, 359, 507, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 0, 370, 0, 509, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 512, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 514, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 515, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 0, 426, 410, 411, 427, 428, 0, 429, 430,
	516, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 517, 437, 438, 439, 440, 518, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 519, 520, 521, 522, 0, 458, 0, 452, 453,
	523, 454, 524, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 466, 464, 467, 0,
	468, 0, 0, 469, 470, 471, 525, 526, 527, 0,
	473, 472, 528, 1175, 0, 218, 0, 474, 475, 529,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 226, 227, 228, 0, 229, 230,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	231, 233, 232, 234, 235, 480, 481, 0, 482, 236,
	483, 0, 237, 238, 239, 240, 241, 0, 0, 242,
	484, 485, 486, 0, 243, 244, 487, 0, 0, 0,
	245, 246, 247, 248, 249, 250, 251, 0, 0, 253,
	254, 255, 252, 0, 256, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 0, 0, 0, 0, 0,
	0, 263, 264, 265, 266, 0, 267, 488, 489, 0,
	271, 268, 269, 0, 272, 270, 0, 273, 0, 0,
	274, 275, 276, 0, 277, 0, 278, 279, 0, 280,
	281, 490, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 294, 493, 0, 0, 0, 295, 0, 296,
	0, 0, 0, 297, 298, 494, 495, 299, 300, 0,
	301, 496, 0, 497, 302, 0, 303, 304, 305, 306,
	307, 498, 499, 500, 360, 0, 308, 309, 0, 310,
	311, 312, 313, 0, 0, 0, 0, 314, 315, 317,
	0, 0, 316, 501, 502, 0, 503, 0, 318, 0,
	504, 0, 319, 320, 321, 0, 322, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 329, 328, 0, 330,
	505, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 341, 343, 345,
	342, 344, 349, 346, 347, 348, 351, 0, 350, 0,
	352, 353, 356, 357, 355, 0, 354, 0, 0, 0,
	358, 0, 506, 359, 507, 361, 362, 0, 0, 363,
	0, 0, 0, 365, 366, 367, 0, 0, 368, 369,
	508, 0, 370, 0, 509, 371, 364, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 380, 510, 511, 512,
	381, 513, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 389, 390, 391, 514, 392, 393, 0, 0, 0,
	0, 0, 0, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	515, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 421, 422, 420, 423, 424, 425, 0, 426,
	410, 411, 427, 428, 0, 429, 430, 516, 0, 431,
	0, 432, 433, 434, 435, 412, 436, 441, 517, 437,
	438, 439, 440, 518, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 286, 450, 0, 451, 519, 520,
	521, 522, 0, 458, 0, 452, 453, 523, 454, 524,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 466, 464, 467, 0, 468, 0, 0,
	469, 470, 471, 525, 526, 527, 0, 473, 472, 528,
	578, 0, 218, 0, 474, 475, 529, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 231, 1047, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 0, 237,
	238, 239, 240, 241, 0, 0, 242, 484, 485, 1045,
	0, 243, 244, 487, 0, 0, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	265, 266, 0, 267, 488, 489, 0, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 275, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 491, 492,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 0, 296, 0, 0, 0,
	297, 298, 494, 495, 299, 300, 0, 301, 496, 0,
	497, 302, 0, 303, 304, 305, 306, 307, 498, 499,
	500, 360, 0, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 0, 314, 315, 317, 0, 0, 316,
	501, 502, 0, 503, 0, 318, 0, 504, 0, 319,
	320, 321, 0, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 505, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 579, 0, 352, 353, 356,
	357, 355, 0, 354, 0, 0, 0, 358, 0, 506,
	359, 507, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 0, 370,
	0, 509, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 512, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 515, 408, 0,
	409, 413, 414, 575, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 1048, 425, 0, 426, 410, 411, 427,
	428, 0, 429, 430, 516, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	518, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 574, 520, 521, 522, 0,
	458, 0, 452, 1046, 523, 454, 524, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	466, 464, 467, 0, 468, 0, 0, 469, 470, 471,
	525, 526, 527, 218, 473, 472, 528, 0, 0, 0,
	0, 474, 475, 529, 476, 477, 478, 0, 0, 0,
	224, 225, 226, 227, 228, 1029, 229, 230, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 231, 233,
	232, 234, 235, 480, 481, 0, 482, 236, 483, 0,
	237, 238, 239, 240, 241, 0, 0, 242, 484, 485,
	486, 0, 243, 244, 487, 0, 0, 0, 245, 246,
	247, 248, 249, 250, 251, 0, 0, 253, 254, 255,
	252, 0, 256, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 265, 266, 0, 267, 488, 489, 0, 271, 268,
	269, 0, 272, 270, 0, 273, 0, 0, 274, 275,
	276, 0, 277, 0, 278, 279, 0, 280, 281, 490,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	294, 493, 0, 0, 0, 295, 0, 296, 0, 0,
	0, 297, 298, 494, 495, 299, 300, 0, 301, 496,
	0, 497, 302, 0, 303, 304, 305, 306, 307, 498,
	499, 500, 360, 0, 308, 309, 0, 310, 311, 312,
	313, 0, 0, 0, 0, 314, 315, 317, 0, 0,
	316, 501, 502, 0, 503, 0, 318, 0, 504, 0,
	319, 320, 321, 0, 322, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 329, 328, 0, 330, 505, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 341, 343, 345, 342, 344,
	349, 346, 347, 348, 351, 0, 350, 0, 352, 353,
	356, 357, 355, 0, 354, 0, 0, 0, 358, 0,
	506, 359, 507, 361, 362, 0, 0, 363, 0, 0,
	0, 365, 366, 367, 0, 0, 368, 369, 508, 0,
	370, 0, 509, 371, 364, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 380, 510, 511, 512, 381, 513,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 389,
	390, 391, 514, 392, 393, 0, 0, 0, 0, 0,
	0, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 515, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	421, 422, 420, 423, 424, 425, 0, 426, 410, 411,
	427, 428, 0, 429, 430, 516, 0, 431, 0, 432,
	433, 434, 435, 412, 436, 441, 517, 437, 438, 439,
	440, 518, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 286, 450, 0, 451, 519, 520, 521, 522,
	0, 458, 0, 452, 453, 523, 454, 524, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 466, 464, 467, 0, 468, 0, 0, 469, 470,
	471, 525, 526, 527, 218, 473, 472, 528, 0, 0,
	0, 0, 474, 475, 529, 476, 477, 478, 0, 0,
	0, 224, 225, 226, 227, 228, 584, 229, 230, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 481, 0, 482, 236, 483,
	0, 237, 238, 239, 240, 241, 0, 0, 242, 484,
	485, 486, 0, 243, 244, 487, 0, 0, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 266, 0, 267, 488, 489, 0, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	275, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	490, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 294, 493, 0, 0, 0, 295, 0, 296, 0,
	0, 0, 297, 298, 494, 495, 299, 300, 0, 301,
	496, 0, 497, 302, 0, 303, 304, 305, 306, 307,
	498, 499, 500, 360, 0, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 0, 314, 315, 317, 0,
	0, 316, 501, 502, 0, 503, 0, 318, 0, 504,
	0, 319, 320, 321, 0, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 505,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 0, 352,
	353, 356, 357, 355, 0, 354, 0, 0, 0, 358,
	0, 506, 359, 507, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	0, 370, 0, 509, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 512, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 514, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 515,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 0, 426, 410,
	411, 427, 428, 0, 429, 430, 516, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 517, 437, 438,
	439, 440, 518, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 519, 520, 521,
	522, 0, 458, 0, 452, 453, 523, 454, 524, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 466, 464, 467, 0, 468, 0, 0, 469,
	470, 471, 525, 526, 527, 0, 473, 472, 528, 578,
	0, 218, 0, 474, 475, 529, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	226, 227, 228, 0, 229, 230, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 231, 233, 232, 234,
	235, 480, 481, 0, 482, 236, 483, 0, 237, 238,
	239, 240, 241, 0, 0, 242, 484, 485, 486, 0,
	243, 568, 487, 0, 0, 0, 245, 246, 247, 248,
	249, 250, 251, 0, 0, 253, 254, 255, 252, 0,
	566, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	266, 0, 267, 488, 489, 0, 271, 268, 269, 0,
	272, 270, 0, 273, 0, 0, 274, 275, 276, 0,
	277, 0, 278, 279, 0, 280, 281, 490, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 294, 493,
	0, 0, 0, 295, 0, 296, 0, 0, 0, 297,
	298, 494, 495, 299, 300, 0, 301, 496, 0, 497,
	302, 0, 303, 304, 305, 306, 307, 498, 499, 500,
	360, 0, 308, 309, 0, 310, 311, 312, 313, 0,
	0, 0, 0, 314, 315, 317, 0, 0, 316, 501,
	502, 0, 503, 0, 318, 0, 504, 0, 319, 320,
	321, 0, 322, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 329, 328, 0, 330, 505, 0, 331, 332,
	0, 0, 333, 334, 567, 0, 0, 336, 337, 338,
	339, 0, 340, 341, 343, 345, 342, 344, 349, 346,
	347, 348, 351, 0, 579, 0, 352, 353, 356, 357,
	355, 0, 354, 0, 0, 0, 358, 0, 506, 359,
	507, 361, 362, 0, 0, 363, 0, 0, 0, 365,
	366, 367, 0, 0, 368, 369, 508, 0, 370, 0,
	509, 371, 364, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 380, 510, 511, 512, 381, 513, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 389, 390, 391,
	514, 392, 393, 0, 0, 0, 0, 0, 0, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 569, 408, 0, 409,
	413, 414, 575, 416, 417, 418, 419, 0, 421, 422,
	420, 423, 570, 425, 0, 426, 410, 411, 427, 428,
	0, 429, 430, 516, 0, 431, 0, 432, 433, 434,
	435, 412, 436, 441, 517, 437, 438, 439, 440, 518,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	286, 450, 0, 451, 574, 520, 521, 522, 0, 458,
	0, 452, 572, 523, 454, 524, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 466,
	464, 467, 0, 468, 0, 0, 469, 470, 471, 525,
	526, 527, 0, 473, 472, 528, 562, 0, 218, 0,
	474, 475, 529, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 481,
	0, 482, 236, 483, 0, 237, 238, 239, 240, 241,
	0, 0, 242, 484, 485, 486, 0, 243, 244, 487,
	0, 0, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 266, 0, 267,
	488, 489, 0, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 275, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 490, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 294, 493, 0, 0, 0,
	295, 0, 296, 0, 0, 0, 297, 298, 494, 495,
	299, 300, 0, 301, 496, 0, 497, 302, 0, 303,
	304, 305, 306, 307, 498, 499, 500, 360, 0, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 0,
	314, 315, 317, 0, 0, 316, 501, 502, 0, 503,
	0, 318, 0, 504, 0, 319, 320, 321, 0, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 505, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 0, 352, 353, 356, 357, 355, 0, 354,
	0, 0, 0, 358, 0, 506, 359, 507, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 0, 370, 0, 509, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 512, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 514, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 515, 408, 0, 409, 563, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 0, 426, 410, 411, 427, 428, 0, 429, 430,
	516, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 517, 437, 438, 439, 440, 518, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 519, 520, 521, 522, 0, 458, 0, 452, 453,
	523, 454, 524, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 466, 464, 467, 0,
	468, 0, 0, 469, 470, 471, 525, 526, 527, 0,
	473, 472, 528, 560, 0, 218, 0, 474, 475, 529,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 226, 227, 228, 0, 229, 230,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	231, 233, 232, 234, 235, 480, 481, 0, 482, 236,
	483, 0, 237, 238, 239, 240, 241, 0, 0, 242,
	484, 485, 486, 0, 243, 244, 487, 0, 0, 0,
	245, 246, 247, 248, 249, 250, 251, 0, 0, 253,
	254, 255, 252, 0, 256, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 0, 0, 0, 0, 0,
	0, 263, 264, 265, 266, 0, 267, 488, 489, 0,
	271, 268, 269, 0, 272, 270, 0, 273, 0, 0,
	274, 275, 276, 0, 277, 0, 278, 279, 0, 280,
	281, 490, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 294, 493, 0, 0, 0, 295, 0, 296,
	0, 0, 0, 297, 298, 494, 495, 299, 300, 0,
	301, 496, 0, 497, 302, 0, 303, 304, 305, 306,
	307, 498, 499, 500, 360, 0, 308, 309, 0, 310,
	311, 312, 313, 0, 0, 0, 0, 314, 315, 317,
	0, 0, 316, 501, 502, 0, 503, 0, 318, 0,
	504, 0, 319, 320, 321, 0, 322, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 329, 328, 0, 330,
	505, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 341, 343, 345,
	342, 344, 349, 346, 347, 348, 351, 0, 350, 0,
	352, 353, 356, 357, 355, 0, 354, 0, 0, 0,
	358, 0, 506, 359, 507, 361, 362, 0, 0, 363,
	0, 0, 0, 365, 366, 367, 0, 0, 368, 369,
	508, 0, 370, 0, 509, 371, 364, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 380, 510, 511, 512,
	381, 513, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 389, 390, 391, 514, 392, 393, 0, 0, 0,
	0, 0, 0, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	515, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 421, 422, 420, 423, 424, 425, 0, 426,
	410, 411, 427, 428, 0, 429, 430, 516, 0, 431,
	0, 432, 433, 434, 435, 412, 436, 441, 517, 437,
	438, 439, 440, 518, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 286, 450, 0, 451, 519, 520,
	521, 522, 0, 458, 0, 452, 453, 523, 454, 524,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 466, 464, 467, 0, 468, 0, 0,
	469, 470, 471, 525, 526, 527, 0, 473, 472, 528,
	554, 0, 218, 0, 474, 475, 529, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 0, 237,
	238, 239, 240, 241, 0, 0, 242, 484, 485, 486,
	0, 243, 244, 487, 0, 0, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	265, 266, 0, 267, 488, 489, 0, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 275, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 491, 492,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 0, 296, 0, 0, 0,
	297, 298, 494, 495, 299, 300, 0, 301, 496, 0,
	497, 302, 0, 303, 304, 305, 306, 307, 498, 499,
	500, 360, 0, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 0, 314, 315, 317, 0, 0, 316,
	501, 502, 0, 503, 0, 318, 0, 504, 0, 319,
	320, 321, 0, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 505, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 0, 352, 353, 356,
	357, 355, 0, 354, 0, 0, 0, 358, 0, 506,
	359, 507, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 0, 370,
	0, 509, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 512, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 515, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 0, 426, 410, 411, 427,
	428, 0, 429, 430, 516, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	518, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 519, 520, 521, 522, 0,
	458, 0, 452, 453, 523, 454, 524, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	466, 464, 467, 0, 468, 0, 0, 469, 470, 471,
	525, 526, 527, 0, 473, 472, 528, 532, 0, 218,
	0, 474, 475, 529, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 226, 227,
	228, 0, 229, 230, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 231, 233, 232, 234, 235, 480,
	481, 0, 482, 236, 483, 0, 237, 238, 239, 240,
	241, 0, 0, 242, 484, 485, 486, 0, 243, 244,
	487, 0, 0, 0, 245, 246, 247, 248, 249, 250,
	251, 0, 0, 253, 254, 255, 252, 0, 256, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 0,
	0, 0, 0, 0, 0, 263, 264, 265, 266, 0,
	267, 488, 489, 0, 271, 268, 269, 0, 272, 270,
	0, 273, 0, 0, 274, 275, 276, 0, 277, 0,
	278, 279, 0, 280, 281, 490, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 294, 493, 0, 0,
	0, 295, 0, 296, 0, 0, 0, 297, 298, 494,
	495, 299, 300, 0, 301, 496, 0, 497, 302, 0,
	303, 304, 305, 306, 307, 498, 499, 500, 360, 0,
	308, 309, 0, 310, 311, 312, 313, 0, 0, 0,
	0, 314, 315, 317, 0, 0, 316, 501, 502, 0,
	503, 0, 318, 0, 504, 0, 319, 320, 321, 0,
	322, 0, 0, 0, 323, 324, 325, 326, 327, 0,
	329, 328, 0, 330, 505, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 0,
	340, 341, 343, 345, 342, 344, 349, 346, 347, 348,
	351, 0, 350, 0, 352, 353, 356, 357, 355, 0,
	354, 0, 0, 0, 358, 0, 506, 359, 507, 361,
	362, 0, 0, 363, 0, 0, 0, 365, 366, 367,
	0, 0, 368, 369, 508, 0, 370, 0, 509, 371,
	364, 372, 373, 374, 375, 376, 377, 378, 0, 379,
	380, 510, 511, 512, 381, 513, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 389, 390, 391, 514, 392,
	393, 0, 0, 0, 0, 0, 0, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 515, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 421, 422, 420, 423,
	424, 425, 0, 426, 410, 411, 427, 428, 0, 429,
	430, 516, 0, 431, 0, 432, 433, 434, 435, 412,
	436, 441, 517, 437, 438, 439, 440, 518, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 286, 450,
	0, 451, 519, 520, 521, 522, 0, 458, 0, 452,
	453, 523, 454, 524, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 466, 464, 467,
	0, 468, 0, 0, 469, 470, 471, 525, 526, 527,
	218, 473, 472, 528, 0, 0, 0, 0, 474, 475,
	529, 476, 477, 478, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 481, 0, 482, 236, 483, 0, 237, 238, 239,
	240, 241, 0, 0, 242, 484, 485, 486, 0, 243,
	244, 487, 0, 0, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	0, 0, 0, 0, 0, 0, 263, 264, 265, 266,
	0, 267, 488, 489, 0, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 275, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 490, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 294, 493, 0,
	0, 0, 295, 0, 296, 0, 0, 0, 297, 298,
	494, 495, 299, 300, 0, 301, 496, 0, 497, 302,
	0, 303, 304, 305, 306, 307, 498, 499, 500, 360,
	0, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 0, 314, 315, 317, 0, 0, 316, 501, 502,
	0, 503, 0, 318, 0, 504, 0, 319, 320, 321,
	0, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 505, 0, 331, 332, 0,
	0, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 0, 352, 353, 356, 357, 355,
	0, 354, 0, 0, 0, 358, 0, 506, 359, 507,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 0, 370, 0, 509,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 512, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 514,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 515, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 0, 426, 410, 411, 427, 428, 0,
	429, 430, 516, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 517, 437, 438, 439, 440, 518, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 519, 520, 521, 522, 0, 458, 0,
	452, 453, 523, 454, 524, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 466, 464,
	467, 0, 468, 0, 0, 469, 470, 471, 525, 526,
	527, 218, 473, 472, 528, 0, 0, 0, 0, 474,
	475, 529, 476, 477, 478, 0, 0, 0, 224, 225,
	226, 227, 228, 0, 229, 230, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 231, 233, 232, 234,
	235, 480, 481, 0, 482, 236, 483, 0, 237, 238,
	239, 240, 241, 0, 0, 242, 484, 485, 486, 0,
	243, 244, 487, 0, 0, 0, 245, 246, 247, 248,
	249, 250, 251, 0, 0, 253, 254, 255, 252, 0,
	256, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	266, 0, 267, 488, 489, 0, 271, 268, 269, 0,
	272, 270, 0, 273, 0, 0, 274, 275, 276, 0,
	277, 0, 278, 279, 0, 280, 281, 490, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 294, 493,
	0, 0, 0, 295, 0, 296, 0, 0, 0, 297,
	298, 494, 495, 299, 300, 0, 301, 496, 0, 497,
	302, 0, 303, 304, 305, 306, 307, 2856, 499, 500,
	360, 0, 308, 309, 0, 310, 311, 312, 313, 0,
	0, 0, 0, 314, 315, 317, 0, 0, 316, 501,
	502, 0, 503, 0, 318, 0, 504, 0, 319, 320,
	321, 0, 322, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 329, 328, 0, 330, 505, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 341, 343, 345, 342, 344, 349, 346,
	347, 348, 351, 0, 350, 0, 352, 353, 356, 357,
	355, 0, 354, 0, 0, 0, 358, 0, 506, 359,
	507, 361, 362, 0, 0, 363, 0, 0, 0, 365,
	366, 367, 0, 0, 368, 369, 508, 0, 370, 0,
	509, 371, 364, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 380, 510, 511, 512, 381, 513, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 389, 390, 391,
	514, 392, 393, 0, 0, 0, 0, 0, 0, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 515, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 421, 422,
	420, 423, 424, 425, 0, 426, 410, 411, 427, 428,
	0, 429, 430, 516, 0, 431, 0, 432, 433, 434,
	435, 412, 436, 441, 517, 437, 438, 439, 440, 518,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	286, 450, 0, 451, 519, 520, 521, 522, 0, 458,
	0, 452, 453, 523, 454, 524, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 466,
	464, 467, 0, 468, 0, 0, 469, 470, 471, 525,
	526, 527, 218, 473, 472, 528, 0, 0, 0, 0,
	474, 475, 529, 476, 477, 478, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 0, 237,
	238, 239, 240, 241, 0, 0, 242, 484, 485, 486,
	0, 243, 244, 487, 0, 0, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	265, 266, 0, 267, 488, 489, 0, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 275, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 491, 492,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 0, 296, 0, 0, 0,
	297, 298, 494, 495, 299, 300, 0, 301, 496, 0,
	497, 302, 0, 303, 304, 305, 306, 307, 2779, 499,
	500, 360, 0, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 0, 314, 315, 317, 0, 0, 316,
	501, 502, 0, 503, 0, 318, 0, 504, 0, 319,
	320, 321, 0, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 505, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 0, 352, 353, 356,
	357, 355, 0, 354, 0, 0, 0, 358, 0, 506,
	359, 507, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 0, 370,
	0, 509, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 512, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 515, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 0, 426, 410, 411, 427,
	428, 0, 429, 430, 516, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	518, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 519, 520, 521, 522, 0,
	458, 0, 452, 453, 523, 454, 524, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	466, 464, 467, 0, 468, 0, 0, 469, 470, 471,
	525, 526, 527, 218, 473, 472, 528, 0, 0, 0,
	0, 474, 475, 529, 476, 477, 478, 0, 0, 0,
	224, 225, 226, 227, 228, 0, 229, 230, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 231, 233,
	232, 234, 235, 480, 481, 0, 482, 236, 483, 0,
	237, 238, 239, 240, 241, 0, 0, 242, 484, 485,
	486, 0, 243, 244, 487, 0, 0, 0, 245, 246,
	247, 248, 249, 250, 251, 0, 0, 253, 254, 255,
	252, 0, 256, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 265, 266, 0, 267, 488, 489, 0, 271, 268,
	269, 0, 272, 270, 0, 273, 0, 0, 274, 275,
	276, 0, 277, 0, 278, 279, 0, 280, 281, 490,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	294, 493, 0, 0, 0, 295, 0, 296, 0, 0,
	0, 297, 298, 494, 495, 299, 300, 0, 301, 496,
	0, 497, 302, 0, 303, 304, 305, 306, 307, 2777,
	499, 500, 360, 0, 308, 309, 0, 310, 311, 312,
	313, 0, 0, 0, 0, 314, 315, 317, 0, 0,
	316, 501, 502, 0, 503, 0, 318, 0, 504, 0,
	319, 320, 321, 0, 322, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 329, 328, 0, 330, 505, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 341, 343, 345, 342, 344,
	349, 346, 347, 348, 351, 0, 350, 0, 352, 353,
	356, 357, 355, 0, 354, 0, 0, 0, 358, 0,
	506, 359, 507, 361, 362, 0, 0, 363, 0, 0,
	0, 365, 366, 367, 0, 0, 368, 369, 508, 0,
	370, 0, 509, 371, 364, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 380, 510, 511, 512, 381, 513,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 389,
	390, 391, 514, 392, 393, 0, 0, 0, 0, 0,
	0, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 515, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	421, 422, 420, 423, 424, 425, 0, 426, 410, 411,
	427, 428, 0, 429, 430, 516, 0, 431, 0, 432,
	433, 434, 435, 412, 436, 441, 517, 437, 438, 439,
	440, 518, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 286, 450, 0, 451, 519, 520, 521, 522,
	0, 458, 0, 452, 453, 523, 454, 524, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 466, 464, 467, 0, 468, 0, 0, 469, 470,
	471, 525, 526, 527, 218, 473, 472, 528, 0, 0,
	0, 0, 474, 475, 529, 476, 477, 478, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 481, 0, 482, 236, 483,
	0, 237, 238, 239, 240, 241, 0, 0, 242, 484,
	485, 486, 0, 243, 244, 487, 0, 0, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 266, 0, 267, 488, 489, 0, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	275, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	490, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 294, 493, 0, 0, 0, 295, 0, 296, 0,
	0, 0, 297, 298, 494, 495, 299, 300, 0, 301,
	496, 0, 497, 302, 0, 303, 304, 305, 306, 307,
	2763, 499, 500, 360, 0, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 0, 314, 315, 317, 0,
	0, 316, 501, 502, 0, 503, 0, 318, 0, 504,
	0, 319, 320, 321, 0, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 505,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 0, 352,
	353, 356, 357, 355, 0, 354, 0, 0, 0, 358,
	0, 506, 359, 507, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	0, 370, 0, 509, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 512, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 514, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 515,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 0, 426, 410,
	411, 427, 428, 0, 429, 430, 516, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 517, 437, 438,
	439, 440, 518, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 519, 520, 521,
	522, 0, 458, 0, 452, 453, 523, 454, 524, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 466, 464, 467, 0, 468, 0, 0, 469,
	470, 471, 525, 526, 527, 218, 473, 472, 528, 0,
	0, 0, 0, 474, 475, 529, 476, 477, 478, 0,
	0, 0, 224, 225, 226, 227, 228, 0, 229, 230,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	231, 233, 232, 234, 235, 480, 481, 0, 482, 236,
	483, 0, 237, 238, 239, 240, 241, 0, 0, 242,
	484, 485, 486, 0, 243, 244, 487, 0, 0, 0,
	245, 246, 247, 248, 249, 250, 251, 0, 0, 253,
	254, 255, 252, 0, 256, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 0, 0, 0, 0, 0,
	0, 263, 264, 265, 266, 0, 267, 488, 489, 0,
	271, 268, 269, 0, 272, 270, 0, 273, 0, 0,
	274, 275, 276, 0, 277, 0, 278, 279, 0, 280,
	281, 490, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 294, 493, 0, 0, 0, 295, 0, 296,
	0, 0, 0, 297, 298, 494, 495, 299, 300, 0,
	301, 496, 0, 497, 302, 0, 303, 304, 305, 306,
	307, 2413, 499, 500, 360, 0, 308, 309, 0, 310,
	311, 312, 313, 0, 0, 0, 0, 314, 315, 317,
	0, 0, 316, 501, 502, 0, 503, 0, 318, 0,
	504, 0, 319, 320, 321, 0, 322, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 329, 328, 0, 330,
	505, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 341, 343, 345,
	342, 344, 349, 346, 347, 348, 351, 0, 350, 0,
	352, 353, 356, 357, 355, 0, 354, 0, 0, 0,
	358, 0, 506, 359, 507, 361, 362, 0, 0, 363,
	0, 0, 0, 365, 366, 367, 0, 0, 368, 369,
	508, 0, 370, 0, 509, 371, 364, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 380, 510, 511, 512,
	381, 513, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 389, 390, 391, 514, 392, 393, 0, 0, 0,
	0, 0, 0, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	515, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 421, 422, 420, 423, 424, 425, 0, 426,
	410, 411, 427, 428, 0, 429, 430, 516, 0, 431,
	0, 432, 433, 434, 435, 412, 436, 441, 517, 437,
	438, 439, 440, 518, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 286, 450, 0, 451, 519, 520,
	521, 522, 0, 458, 0, 452, 453, 523, 454, 524,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 466, 464, 467, 0, 468, 0, 0,
	469, 470, 471, 525, 526, 527, 218, 473, 472, 528,
	0, 0, 0, 0, 474, 475, 529, 476, 477, 478,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 0, 237, 238, 239, 240, 241, 0, 0,
	242, 484, 485, 486, 0, 243, 244, 487, 0, 0,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 0, 0, 0, 0,
	0, 0, 263, 264, 265, 266, 0, 267, 488, 489,
	0, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 275, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 491, 492, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 0,
	296, 0, 0, 0, 297, 298, 494, 495, 299, 300,
	0, 301, 496, 0, 497, 302, 0, 303, 304, 305,
	306, 307, 498, 499, 500, 360, 0, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 0, 314, 315,
	317, 0, 0, 316, 501, 502, 0, 503, 0, 318,
	0, 504, 0, 319, 320, 321, 0, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 505, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	0, 352, 353, 356, 357, 355, 0, 354, 0, 0,
	0, 358, 0, 506, 359, 507, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 0, 370, 0, 509, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	512, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 515, 408, 0, 409, 563, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 0,
	426, 410, 411, 427, 428, 0, 429, 430, 516, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 518, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 519,
	520, 521, 522, 0, 458, 0, 452, 453, 523, 454,
	524, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 466, 464, 467, 0, 468, 0,
	0, 469, 470, 471, 525, 526, 527, 218, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 0, 0, 0, 224, 225, 226, 227, 228, 0,
	229, 230, 0, 0, 0, 0, 0, 479, 0, 1854,
	0, 0, 231, 233, 232, 234, 235, 480, 481, 0,
	482, 236, 483, 0, 237, 238, 239, 240, 241, 0,
	0, 242, 484, 485, 486, 0, 243, 244, 487, 0,
	0, 0, 245, 246, 247, 248, 249, 250, 251, 0,
	0, 253, 254, 255, 252, 0, 256, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 266, 0, 267, 488,
	489, 0, 271, 268, 269, 0, 272, 270, 0, 273,
	0, 0, 274, 275, 276, 0, 277, 0, 278, 279,
	0, 280, 281, 490, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 294, 493, 0, 0, 0, 295,
	0, 296, 0, 0, 0, 297, 298, 494, 495, 299,
	300, 0, 301, 496, 0, 497, 302, 0, 303, 304,
	305, 306, 307, 498, 499, 500, 360, 0, 308, 309,
	0, 310, 311, 312, 313, 0, 0, 0, 0, 314,
	315, 317, 0, 0, 316, 501, 502, 0, 503, 0,
	318, 0, 504, 0, 319, 320, 321, 0, 322, 0,
	0, 0, 323, 324, 325, 326, 327, 0, 329, 328,
	0, 330, 505, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 341,
	343, 345, 342, 344, 349, 346, 347, 348, 351, 0,
	350, 0, 352, 353, 356, 357, 355, 0, 354, 0,
	0, 0, 358, 0, 506, 359, 507, 361, 362, 0,
	0, 363, 0, 0, 0, 365, 366, 367, 0, 0,
	368, 369, 508, 0, 370, 0, 509, 371, 364, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 380, 510,
	511, 512, 381, 513, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 389, 390, 391, 514, 392, 393, 0,
	0, 0, 0, 0, 0, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 515, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 0, 421, 422, 420, 423, 424, 425,
	0, 0, 410, 411, 427, 428, 0, 429, 430, 516,
	0, 431, 0, 432, 433, 434, 435, 412, 436, 441,
	517, 437, 438, 439, 440, 518, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 286, 450, 0, 451,
	519, 520, 521, 522, 0, 458, 0, 452, 453, 523,
	454, 524, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 466, 464, 467, 0, 468,
	0, 0, 469, 470, 471, 525, 526, 527, 218, 473,
	472, 528, 0, 0, 0, 0, 474, 475, 529, 476,
	477, 478, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 481,
	0, 482, 236, 483, 0, 237, 238, 239, 240, 241,
	0, 0, 242, 484, 485, 486, 0, 243, 244, 487,
	0, 0, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 266, 0, 267,
	488, 489, 0, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 275, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 490, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 294, 493, 0, 0, 0,
	295, 0, 296, 0, 0, 0, 297, 298, 494, 495,
	299, 300, 0, 301, 496, 0, 497, 302, 0, 303,
	304, 305, 306, 307, 1290, 499, 500, 360, 0, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 0,
	314, 315, 317, 0, 0, 316, 501, 502, 0, 503,
	0, 318, 0, 504, 0, 319, 320, 321, 0, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 505, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 0, 352, 353, 356, 357, 355, 0, 354,
	0, 0, 0, 358, 0, 506, 359, 507, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 0, 370, 0, 509, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 512, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 514, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 515, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 0, 426, 410, 411, 427, 428, 0, 429, 430,
	516, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 517, 437, 438, 439, 440, 518, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 519, 520, 521, 522, 0, 458, 0, 452, 453,
	523, 454, 524, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 466, 464, 467, 0,
	468, 0, 0, 469, 470, 471, 525, 526, 527, 218,
	473, 472, 528, 0, 0, 0, 0, 474, 475, 529,
	476, 477, 478, 0, 0, 0, 224, 225, 226, 227,
	228, 0, 229, 230, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 231, 233, 232, 234, 235, 480,
	481, 0, 482, 236, 483, 0, 237, 238, 239, 240,
	241, 0, 0, 242, 484, 485, 486, 0, 243, 244,
	487, 0, 0, 0, 245, 246, 247, 248, 249, 250,
	251, 0, 0, 253, 254, 255, 252, 0, 256, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 0,
	0, 0, 0, 0, 0, 263, 264, 265, 266, 0,
	267, 488, 489, 0, 271, 268, 269, 0, 272, 270,
	0, 273, 0, 0, 274, 275, 276, 0, 277, 0,
	278, 279, 0, 280, 281, 490, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 294, 493, 0, 0,
	0, 295, 0, 296, 0, 0, 0, 297, 298, 494,
	495, 299, 300, 0, 301, 496, 0, 497, 302, 0,
	303, 304, 305, 306, 307, 1230, 499, 500, 360, 0,
	308, 309, 0, 310, 311, 312, 313, 0, 0, 0,
	0, 314, 315, 317, 0, 0, 316, 501, 502, 0,
	503, 0, 318, 0, 504, 0, 319, 320, 321, 0,
	322, 0, 0, 0, 323, 324, 325, 326, 327, 0,
	329, 328, 0, 330, 505, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 0,
	340, 341, 343, 345, 342, 344, 349, 346, 347, 348,
	351, 0, 350, 0, 352, 353, 356, 357, 355, 0,
	354, 0, 0, 0, 358, 0, 506, 359, 507, 361,
	362, 0, 0, 363, 0, 0, 0, 365, 366, 367,
	0, 0, 368, 369, 508, 0, 370, 0, 509, 371,
	364, 372, 373, 374, 375, 376, 377, 378, 0, 379,
	380, 510, 511, 512, 381, 513, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 389, 390, 391, 514, 392,
	393, 0, 0, 0, 0, 0, 0, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 515, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 421, 422, 420, 423,
	424, 425, 0, 426, 410, 411, 427, 428, 0, 429,
	430, 516, 0, 431, 0, 432, 433, 434, 435, 412,
	436, 441, 517, 437, 438, 439, 440, 518, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 286, 450,
	0, 451, 519, 520, 521, 522, 0, 458, 0, 452,
	453, 523, 454, 524, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 466, 464, 467,
	0, 468, 0, 0, 469, 470, 471, 525, 526, 527,
	218, 473, 472, 528, 0, 0, 0, 0, 474, 475,
	529, 476, 477, 478, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 481, 0, 482, 236, 483, 0, 237, 238, 239,
	240, 241, 0, 0, 242, 484, 485, 486, 0, 243,
	244, 487, 0, 0, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	0, 0, 0, 0, 0, 0, 263, 264, 265, 266,
	0, 267, 488, 489, 0, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 275, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 490, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 294, 493, 0,
	0, 0, 295, 0, 296, 0, 0, 0, 297, 298,
	494, 495, 299, 300, 0, 301, 496, 0, 497, 302,
	0, 303, 304, 305, 306, 307, 498, 499, 500, 360,
	0, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 0, 314, 315, 317, 0, 0, 316, 501, 502,
	0, 503, 0, 318, 0, 504, 0, 319, 320, 321,
	0, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 505, 0, 331, 332, 0,
	0, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 0, 352, 353, 356, 357, 355,
	0, 354, 0, 0, 0, 358, 0, 506, 359, 507,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 0, 370, 0, 509,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 512, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 514,
	981, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 515, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 0, 426, 410, 411, 427, 428, 0,
	429, 430, 516, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 517, 437, 438, 439, 440, 518, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 519, 520, 521, 522, 0, 458, 0,
	452, 453, 523, 454, 524, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 466, 464,
	467, 0, 468, 0, 0, 469, 470, 471, 525, 526,
	527, 218, 473, 472, 528, 0, 0, 0, 0, 474,
	475, 529, 476, 477, 478, 0, 0, 0, 224, 225,
	226, 227, 228, 0, 229, 230, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 231, 233, 232, 234,
	235, 480, 481, 0, 482, 236, 483, 0, 237, 238,
	239, 240, 241, 0, 0, 242, 484, 485, 486, 0,
	243, 244, 487, 0, 0, 0, 245, 246, 247, 248,
	249, 250, 251, 0, 0, 253, 254, 255, 252, 0,
	256, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	266, 0, 267, 488, 489, 0, 271, 268, 269, 0,
	272, 270, 0, 273, 0, 0, 274, 275, 276, 0,
	277, 0, 278, 279, 0, 280, 281, 490, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 294, 493,
	0, 0, 0, 295, 0, 296, 0, 0, 0, 297,
	298, 494, 495, 299, 300, 0, 301, 496, 0, 497,
	0, 0, 303, 304, 305, 306, 307, 498, 499, 500,
	360, 0, 308, 309, 0, 310, 311, 312, 313, 0,
	0, 0, 0, 314, 315, 317, 0, 0, 316, 501,
	502, 0, 503, 0, 318, 0, 504, 0, 319, 320,
	321, 0, 322, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 329, 328, 0, 330, 505, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 341, 343, 345, 342, 344, 349, 346,
	347, 348, 351, 0, 350, 0, 352, 353, 356, 357,
	355, 0, 354, 0, 0, 0, 358, 0, 506, 359,
	507, 361, 362, 0, 0, 363, 0, 0, 0, 365,
	366, 367, 0, 0, 368, 369, 508, 0, 370, 0,
	509, 371, 364, 372, 373, 0, 375, 376, 377, 378,
	0, 379, 380, 510, 511, 512, 381, 513, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 0, 390, 391,
	514, 392, 393, 0, 0, 0, 0, 0, 0, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 515, 0, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 421, 422,
	420, 423, 424, 425, 0, 426, 410, 411, 427, 428,
	0, 429, 430, 516, 0, 431, 0, 432, 433, 434,
	435, 412, 436, 441, 517, 437, 438, 439, 440, 518,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	286, 450, 0, 451, 519, 520, 521, 522, 0, 458,
	0, 452, 453, 523, 454, 524, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 466,
	464, 467, 0, 468, 0, 0, 469, 470, 471, 525,
	526, 527, 1678, 473, 472, 528, 0, 0, 0, 0,
	474, 475, 529, 476, 477, 478, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 231, 233, 232,
	234, 235, 0, 1684, 0, 1674, 236, 1690, 0, 237,
	238, 239, 240, 241, 0, 0, 242, 1699, 1700, 0,
	0, 243, 244, 0, 0, 1166, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 959, 261,
	262, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	265, 266, 943, 267, 1688, 1687, 0, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 928, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 0, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 294,
	1686, 0, 0, 0, 295, 0, 296, 0, 0, 960,
	297, 298, 1695, 1696, 299, 300, 0, 301, 0, 0,
	0, 302, 0, 303, 304, 305, 306, 307, 0, 0,
	0, 360, 962, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 0, 314, 315, 317, 0, 961, 316,
	1681, 1682, 0, 1677, 0, 318, 963, 0, 964, 319,
	320, 321, 965, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 0, 966, 331,
	332, 967, 0, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 968, 352, 353, 356,
	357, 355, 969, 354, 0, 0, 970, 358, 0, 0,
	359, 1689, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 0, 971, 370,
	972, 0, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 1671, 1672, 0, 381, 0, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 1685, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 973, 404, 405, 406, 407, 0, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 0, 426, 410, 411, 427,
	428, 974, 429, 430, 1683, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 1698, 437, 438, 439, 440,
	0, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 1691, 1692, 1693, 1694, 0,
	458, 0, 452, 453, 0, 454, 0, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	466, 464, 467, 0, 468, 0, 0, 469, 470, 471,
	0, 1675, 1697, 0, 473, 472, 0, 0, 0, 0,
	0, 474, 475, 0, 476, 477, 478, 1464, 1465, 0,
	1497, 1498, 1499, 1507, 1508, 1509, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1500, 1495, 0,
	0, 0, 0, 0, 0, 1467, 0, 0, 0, 0,
	1513, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1464, 1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 0,
	0, 0, 1466, 0, 0, 0, 0, 0, 0, 0,
	1500, 1495, 1486, 0, 0, 0, 0, 0, 1467, 0,
	1483, 0, 0, 1513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1486, 0, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1489, 1490, 1491, 1492, 0, 0, 0, 0, 0,
	0, 1472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1504, 0, 0, 1514, 1489, 1490, 1491, 1492, 0, 1494,
	1496, 0, 0, 0, 1472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 1511, 0, 0, 0,
	0, 0, 0, 1481, 1482, 0, 0, 0, 0, 0,
	0, 0, 0, 1504, 0, 0, 1514, 0, 0, 1502,
	0, 0, 1494, 1496, 0, 0, 0, 0, 0, 0,
	1487, 0, 0, 0, 0, 0, 0, 1510, 0, 1511,
	0, 0, 0, 0, 0, 0, 1481, 1482, 0, 0,
	0, 0, 0, 0, 1512, 0, 0, 0, 0, 0,
	0, 0, 1502, 0, 0, 0, 0, 0, 0, 0,
	0, 1501, 0, 1487, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1512, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1501, 0, 0, 0, 0, 1493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1488, 0, 0,
	1464, 1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1505,
	1500, 1495, 1493, 0, 0, 0, 0, 0, 1467, 0,
	0, 0, 0, 1513, 0, 0, 0, 0, 0, 0,
	1488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1466, 0, 0, 0, 0,
	0, 0, 1505, 0, 0, 1486, 0, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1503, 0, 0, 1478, 1479,
	1485, 1506, 1484, 1480, 0, 1477, 1475, 1476, 1468, 1469,
	1470, 1471, 1473, 1474, 0, 0, 0, 0, 0, 0,
	0, 0, 2612, 0, 1489, 1490, 1491, 1492, 0, 0,
	0, 0, 0, 0, 1472, 0, 0, 0, 1503, 0,
	0, 1478, 1479, 1485, 1506, 1484, 1480, 0, 1477, 1475,
	1476, 1468, 1469, 1470, 1471, 1473, 1474, 0, 0, 0,
	0, 0, 0, 1504, 0, 2611, 1514, 0, 0, 0,
	0, 0, 1494, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1510, 0, 1511,
	0, 0, 0, 0, 0, 0, 1481, 1482, 0, 0,
	1464, 1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 0,
	0, 0, 1502, 0, 0, 0, 0, 0, 0, 0,
	1500, 1495, 0, 1487, 0, 0, 0, 0, 1467, 0,
	0, 0, 0, 1513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1512, 0, 0,
	0, 0, 0, 0, 0, 1466, 0, 0, 0, 0,
	0, 0, 0, 0, 1501, 1486, 0, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1464, 1465, 0, 1497, 1498,
	1499, 1507, 1508, 1509, 0, 0, 0, 0, 0, 0,
	0, 0, 1493, 0, 0, 1500, 1495, 0, 0, 0,
	0, 0, 0, 1467, 0, 0, 0, 0, 1513, 0,
	1488, 0, 0, 0, 1489, 1490, 1491, 1492, 0, 0,
	0, 0, 0, 0, 1472, 0, 0, 0, 0, 0,
	1466, 0, 1505, 0, 0, 0, 0, 0, 0, 0,
	1486, 0, 0, 0, 0, 0, 0, 0, 1483, 0,
	0, 0, 0, 1504, 0, 0, 1514, 0, 0, 0,
	0, 0, 1494, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1510, 0, 1511,
	0, 0, 0, 0, 0, 0, 1481, 1482, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1502, 0, 0, 0, 0, 0, 0, 1489,
	1490, 1491, 1492, 1487, 0, 0, 0, 0, 1503, 1472,
	0, 1478, 1479, 1485, 1506, 1484, 1480, 0, 1477, 1475,
	1476, 1468, 1469, 1470, 1471, 1473, 1474, 1512, 0, 0,
	0, 0, 0, 0, 0, 2610, 0, 0, 1504, 0,
	0, 1514, 0, 0, 1501, 0, 0, 1494, 1496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1510, 0, 1511, 0, 0, 0, 0, 0,
	0, 1481, 1482, 0, 0, 1464, 1465, 0, 1497, 1498,
	1499, 1507, 1508, 1509, 0, 0, 0, 1502, 0, 0,
	0, 0, 1493, 0, 0, 1500, 1495, 0, 1487, 0,
	0, 0, 0, 1467, 0, 0, 0, 0, 1513, 0,
	1488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1512, 0, 0, 0, 0, 0, 0, 0,
	1466, 0, 1505, 0, 0, 0, 0, 0, 0, 1501,
	1486, 0, 0, 0, 0, 0, 0, 0, 1483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1488, 0, 0, 0, 1489,
	1490, 1491, 1492, 0, 0, 0, 0, 0, 1503, 1472,
	0, 1478, 1479, 1485, 1506, 1484, 1480, 1505, 1477, 1475,
	1476, 1468, 1469, 1470, 1471, 1473, 1474, 0, 0, 0,
	0, 0, 0, 0, 0, 2084, 0, 0, 1504, 0,
	0, 1514, 0, 0, 0, 0, 0, 1494, 1496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1510, 0, 1511, 0, 0, 0, 0, 0,
	0, 1481, 1482, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1487, 0,
	0, 0, 0, 1503, 0, 0, 1478, 1479, 1485, 1506,
	1484, 1480, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471,
	1473, 1474, 1512, 0, 0, 0, 3614, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508, 1509,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1500, 1495, 0, 0, 0, 0, 1493, 0, 1467,
	0, 0, 0, 0, 1513, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1488, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1466, 1464, 1465, 0,
	1497, 1498, 1499, 1507, 1508, 1509, 1486, 1505, 0, 0,
	0, 0, 0, 0, 1483, 0, 0, 1500, 1495, 0,
	0, 0, 0, 0, 0, 1467, 0, 0, 0, 0,
	1513, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1486, 0, 0, 0, 0, 0, 0, 0,
	1483, 0, 0, 0, 0, 1489, 1490, 1491, 1492, 0,
	0, 0, 0, 0, 0, 1472, 0, 0, 0, 0,
	0, 0, 0, 1503, 0, 0, 1478, 1479, 1485, 1506,
	1484, 1480, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471,
	1473, 1474, 0, 0, 1504, 0, 3610, 1514, 0, 0,
	0, 0, 0, 1494, 1496, 0, 0, 0, 0, 0,
	0, 1489, 1490, 1491, 1492, 0, 0, 0, 1510, 0,
	1511, 1472, 0, 0, 0, 0, 0, 1481, 1482, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1502, 0, 0, 0, 0, 0, 0,
	1504, 0, 0, 1514, 1487, 0, 0, 0, 0, 1494,
	1496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 1511, 0, 1512, 0,
	0, 0, 0, 1481, 1482, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1501, 0, 0, 0, 1502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1487, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1512, 0, 0, 0, 0, 0,
	0, 0, 0, 1493, 0, 0, 0, 0, 0, 0,
	0, 1501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1488, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1464, 1465, 0, 1497, 1498, 1499, 1507,
	1508, 1509, 0, 1505, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1500, 1495, 0, 0, 0, 0, 1493,
	0, 1467, 0, 0, 0, 0, 1513, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1488, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1486, 1505,
	0, 0, 0, 0, 0, 0, 1483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1503,
	0, 0, 1478, 1479, 1485, 1506, 1484, 1480, 0, 1477,
	1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 0, 0,
	0, 0, 3528, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1489, 1490, 1491,
	1492, 0, 0, 0, 0, 0, 0, 1472, 0, 0,
	0, 0, 0, 0, 0, 1503, 0, 0, 1478, 1479,
	1485, 1506, 1484, 1480, 0, 1477, 1475, 1476, 1468, 1469,
	1470, 1471, 1473, 1474, 0, 0, 1504, 0, 3527, 1514,
	0, 0, 0, 0, 0, 1494, 1496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1510, 0, 1511, 0, 0, 0, 0, 0, 0, 1481,
	1482, 0, 0, 1464, 1465, 0, 1497, 1498, 1499, 1507,
	1508, 1509, 0, 0, 0, 1502, 0, 0, 0, 0,
	0, 0, 0, 1500, 1495, 0, 1487, 0, 0, 0,
	0, 1467, 0, 0, 0, 0, 1513, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1512, 0, 0, 0, 0, 0, 0, 0, 1466, 0,
	0, 0, 0, 0, 0, 0, 0, 1501, 1486, 0,
	0, 0, 0, 0, 0, 0, 1483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1464, 1465,
	0, 1497, 1498, 1499, 1507, 1508, 1509, 0, 0, 0,
	0, 0, 0, 0, 0, 1493, 0, 0, 1500, 1495,
	0, 0, 0, 0, 0, 0, 1467, 0, 0, 0,
	0, 1513, 0, 1488, 0, 0, 0, 1489, 1490, 1491,
	1492, 0, 0, 0, 0, 0, 0, 1472, 0, 0,
	0, 0, 0, 1466, 0, 1505, 0, 0, 0, 0,
	0, 0, 0, 1486, 0, 0, 0, 0, 0, 0,
	0, 1483, 0, 0, 0, 0, 1504, 0, 0, 1514,
	0, 0, 0, 0, 0, 1494, 1496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1510, 0, 1511, 0, 0, 0, 0, 0, 0, 1481,
	1482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1502, 0, 0, 0, 0,
	0, 0, 1489, 1490, 1491, 1492, 1487, 0, 0, 0,
	0, 1503, 1472, 0, 1478, 1479, 1485, 1506, 1484, 1480,
	0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474,
	1512, 0, 0, 0, 3397, 0, 0, 0, 0, 0,
	0, 1504, 0, 0, 1514, 0, 0, 1501, 0, 0,
	1494, 1496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1510, 0, 1511, 0, 0,
	0, 0, 0, 0, 1481, 1482, 0, 0, 1464, 1465,
	0, 1497, 1498, 1499, 1507, 1508, 1509, 0, 0, 0,
	1502, 0, 0, 0, 0, 1493, 0, 0, 1500, 1495,
	0, 1487, 0, 0, 0, 0, 1467, 0, 0, 0,
	0, 1513, 0, 1488, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1512, 0, 0, 0, 0,
	0, 0, 0, 1466, 0, 1505, 0, 0, 0, 0,
	0, 0, 1501, 1486, 0, 0, 0, 0, 0, 0,
	0, 1483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1488, 0,
	0, 0, 1489, 1490, 1491, 1492, 0, 0, 0, 0,
	0, 1503, 1472, 0, 1478, 1479, 1485, 1506, 1484, 1480,
	1505, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474,
	0, 0, 0, 0, 3289, 0, 0, 0, 0, 0,
	0, 1504, 0, 0, 1514, 0, 0, 0, 0, 0,
	1494, 1496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1510, 0, 1511, 0, 0,
	0, 0, 0, 0, 1481, 1482, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1502, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1487, 0, 0, 0, 0, 1503, 0, 0, 1478,
	1479, 1485, 1506, 1484, 1480, 0, 1477, 1475, 1476, 1468,
	1469, 1470, 1471, 1473, 1474, 1512, 0, 0, 0, 3237,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1464, 1465, 0, 1497, 1498, 1499,
	1507, 1508, 1509, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1500, 1495, 0, 0, 0, 0,
	1493, 0, 1467, 0, 0, 0, 0, 1513, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1488, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1466,
	1464, 1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 1486,
	1505, 0, 0, 0, 0, 0, 0, 1483, 0, 0,
	1500, 1495, 0, 0, 0, 0, 0, 0, 1467, 0,
	0, 0, 0, 1513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1486, 0, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 0, 0, 1489, 1490,
	1491, 1492, 0, 0, 0, 0, 0, 0, 1472, 0,
	0, 0, 0, 0, 0, 0, 1503, 0, 0, 1478,
	1479, 1485, 1506, 1484, 1480, 0, 1477, 1475, 1476, 1468,
	1469, 1470, 1471, 1473, 1474, 0, 0, 1504, 0, 3236,
	1514, 0, 0, 0, 0, 0, 1494, 1496, 0, 0,
	0, 0, 0, 0, 1489, 1490, 1491, 1492, 0, 0,
	0, 1510, 0, 1511, 1472, 0, 0, 0, 0, 0,
	1481, 1482, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1502, 0, 0, 0,
	0, 0, 0, 1504, 0, 0, 1514, 1487, 0, 0,
	0, 0, 1494, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1510, 0, 1511,
	0, 1512, 0, 0, 0, 0, 1481, 1482, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1501, 0,
	0, 0, 1502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1487, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1512, 0, 0,
	0, 0, 0, 0, 0, 0, 1493, 0, 0, 0,
	0, 0, 0, 0, 1501, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1464, 1465, 0, 1497,
	1498, 1499, 1507, 1508, 1509, 0, 1505, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1500, 1495, 0, 0,
	0, 0, 1493, 0, 1467, 0, 0, 0, 0, 1513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1486, 1505, 0, 0, 0, 0, 0, 0, 1483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1503, 0, 0, 1478, 1479, 1485, 1506, 1484,
	1480, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473,
	1474, 0, 0, 0, 0, 3235, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1489, 1490, 1491, 1492, 0, 0, 0, 0, 0, 0,
	1472, 0, 0, 0, 0, 0, 0, 0, 1503, 0,
	0, 1478, 1479, 1485, 1506, 1484, 1480, 0, 1477, 1475,
	1476, 1468, 1469, 1470, 1471, 1473, 1474, 0, 0, 1504,
	0, 2984, 1514, 0, 0, 0, 0, 0, 1494, 1496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1510, 0, 1511, 0, 0, 0, 0,
	0, 0, 1481, 1482, 0, 0, 1464, 1465, 0, 1497,
	1498, 1499, 1507, 1508, 1509, 0, 0, 0, 1502, 0,
	0, 0, 0, 0, 0, 0, 1500, 1495, 0, 1487,
	0, 0, 0, 0, 1467, 0, 0, 0, 0, 1513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1512, 0, 0, 0, 0, 0, 0,
	0, 1466, 0, 0, 0, 0, 0, 0, 0, 0,
	1501, 1486, 0, 0, 0, 0, 0, 0, 0, 1483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508, 1509,
	0, 0, 0, 0, 0, 0, 0, 0, 1493, 0,
	0, 1500, 1495, 0, 0, 0, 0, 0, 0, 1467,
	0, 0, 0, 0, 1513, 0, 1488, 0, 0, 0,
	1489, 1490, 1491, 1492, 0, 0, 0, 0, 0, 0,
	1472, 0, 0, 0, 0, 0, 1466, 0, 1505, 0,
	0, 0, 0, 0, 0, 0, 1486, 0, 0, 0,
	0, 0, 0, 0, 1483, 0, 0, 0, 0, 1504,
	0, 0, 1514, 0, 0, 0, 0, 0, 1494, 1496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1510, 0, 1511, 0, 0, 0, 0,
	0, 0, 1481, 1482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1502, 0,
	0, 0, 0, 0, 0, 1489, 1490, 1491, 1492, 1487,
	0, 0, 0, 0, 1503, 1472, 0, 1478, 1479, 1485,
	1506, 1484, 1480, 0, 1477, 1475, 1476, 1468, 1469, 1470,
	1471, 1473, 1474, 1512, 0, 0, 0, 2608, 0, 0,
	0, 0, 0, 0, 1504, 0, 0, 1514, 0, 0,
	1501, 0, 0, 1494, 1496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1510, 0,
	1511, 0, 0, 0, 0, 0, 0, 1481, 1482, 0,
	0, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508, 1509,
	0, 0, 0, 1502, 0, 0, 0, 0, 1493, 0,
	0, 1500, 1495, 0, 1487, 0, 0, 0, 0, 1467,
	0, 0, 0, 0, 1513, 0, 1488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1512, 0,
	0, 0, 0, 0, 0, 0, 1466, 0, 1505, 0,
	0, 0, 0, 0, 0, 1501, 1486, 0, 0, 0,
	0, 0, 0, 0, 1483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1488, 0, 0, 0, 1489, 1490, 1491, 1492, 0,
	0, 0, 0, 0, 1503, 1472, 0, 1478, 1479, 1485,
	1506, 1484, 1480, 1505, 1477, 1475, 1476, 1468, 1469, 1470,
	1471, 1473, 1474, 0, 0, 0, 0, 2607, 0, 0,
	0, 0, 0, 0, 1504, 0, 0, 1514, 0, 0,
	0, 0, 0, 1494, 1496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1510, 0,
	1511, 0, 0, 0, 0, 0, 0, 1481, 1482, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1487, 0, 0, 0, 0, 1503,
	0, 0, 1478, 1479, 1485, 1506, 1484, 1480, 0, 1477,
	1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 1512, 0,
	0, 0, 2606, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1501, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1464, 1465, 0,
	1497, 1498, 1499, 1507, 1508, 1509, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1500, 1495, 0,
	0, 0, 0, 1493, 0, 1467, 0, 0, 0, 0,
	1513, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1488, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1466, 1464, 1465, 0, 1497, 1498, 1499, 1507,
	1508, 1509, 1486, 1505, 0, 0, 0, 0, 0, 0,
	1483, 0, 0, 1500, 1495, 0, 0, 0, 0, 0,
	0, 1467, 0, 0, 0, 0, 1513, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1486, 0,
	0, 0, 0, 0, 0, 0, 1483, 0, 0, 0,
	0, 1489, 1490, 1491, 1492, 0, 0, 0, 0, 0,
	0, 1472, 0, 0, 0, 0, 0, 0, 0, 1503,
	0, 0, 1478, 1479, 1485, 1506, 1484, 1480, 0, 1477,
	1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 0, 0,
	1504, 0, 2605, 1514, 0, 0, 0, 0, 0, 1494,
	1496, 0, 0, 0, 0, 0, 0, 1489, 1490, 1491,
	1492, 0, 0, 0, 1510, 0, 1511, 1472, 3724, 0,
	0, 0, 0, 1481, 1482, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1502,
	0, 0, 0, 0, 0, 0, 1504, 0, 0, 1514,
	1487, 0, 0, 0, 0, 1494, 1496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1510, 0, 1511, 0, 1512, 0, 0, 0, 0, 1481,
	1482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1501, 0, 0, 0, 1502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1487, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1512, 0, 0, 0, 0, 0, 0, 0, 0, 1493,
	0, 0, 0, 0, 0, 0, 0, 1501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1488, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3723, 0, 0, 0, 0, 0, 0, 0, 1505,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1488, 0, 0, 0, 0, 0, 1464,
	1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 0, 0,
	0, 0, 0, 0, 0, 1505, 0, 0, 0, 1500,
	1495, 0, 0, 0, 0, 2543, 0, 1467, 0, 0,
	0, 0, 1513, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1503, 0, 0, 1478, 1479,
	1485, 1506, 1484, 1480, 1466, 1477, 1475, 1476, 1468, 1469,
	1470, 1471, 1473, 1474, 1486, 0, 2572, 0, 0, 0,
	0, 0, 1483, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1503, 0, 2544, 1478, 1479, 1485, 1506, 1484, 1480,
	0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1489, 1490, 1491, 1492, 0, 0, 0,
	0, 0, 0, 1472, 0, 0, 1464, 1465, 0, 1497,
	1498, 1499, 1507, 1508, 1509, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1500, 1495, 0, 0,
	0, 0, 1504, 0, 1467, 1514, 0, 0, 0, 1513,
	0, 1494, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 1511, 0,
	0, 1466, 0, 0, 0, 1481, 1482, 0, 0, 0,
	0, 1486, 0, 0, 0, 0, 0, 0, 0, 1483,
	0, 1502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1487, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1512, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1501, 0, 0, 0, 0, 0, 0,
	1489, 1490, 1491, 1492, 0, 0, 0, 0, 0, 0,
	1472, 0, 2668, 0, 0, 2667, 0, 0, 2204, 0,
	0, 0, 0, 0, 0, 1464, 1465, 0, 1497, 1498,
	1499, 1507, 1508, 1509, 0, 0, 0, 0, 0, 1504,
	0, 1493, 1514, 0, 0, 1500, 1495, 0, 1494, 1496,
	2203, 0, 0, 1467, 0, 0, 0, 0, 1513, 1488,
	0, 0, 0, 1510, 0, 1511, 0, 0, 0, 0,
	0, 0, 1481, 1482, 0, 0, 0, 0, 0, 0,
	1466, 1505, 0, 0, 0, 0, 0, 0, 1502, 0,
	1486, 0, 0, 0, 0, 0, 0, 0, 1483, 1487,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1512, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1501, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1489,
	1490, 1491, 1492, 0, 0, 0, 0, 1503, 0, 1472,
	1478, 1479, 1485, 1506, 1484, 1480, 0, 1477, 1475, 1476,
	1468, 1469, 1470, 1471, 1473, 1474, 0, 0, 1493, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1504, 0,
	0, 1514, 0, 0, 0, 0, 1488, 1494, 1496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1510, 0, 1511, 0, 0, 0, 1505, 0,
	0, 1481, 1482, 0, 0, 1464, 1465, 0, 1497, 1498,
	1499, 1507, 1508, 1509, 0, 0, 0, 1502, 0, 0,
	0, 0, 0, 0, 0, 1500, 1495, 0, 1487, 0,
	0, 0, 0, 1467, 0, 0, 0, 0, 1513, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1512, 0, 0, 0, 0, 0, 0, 0,
	1466, 0, 0, 0, 0, 0, 0, 0, 0, 1501,
	1486, 0, 0, 0, 0, 0, 0, 0, 1483, 0,
	0, 0, 0, 0, 1503, 0, 0, 1478, 1479, 1485,
	1506, 1484, 1480, 0, 1477, 1475, 1476, 1468, 1469, 1470,
	1471, 1473, 1474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1488, 0, 0, 0, 1489,
	1490, 1491, 1492, 0, 0, 0, 0, 0, 0, 1472,
	0, 0, 0, 0, 0, 0, 0, 1505, 0, 0,
	0, 0, 0, 0, 1464, 1465, 0, 1497, 1498, 1499,
	1507, 1508, 1509, 0, 0, 0, 0, 0, 1504, 0,
	0, 1514, 0, 0, 1500, 1495, 0, 1494, 1496, 0,
	0, 0, 1467, 0, 0, 0, 0, 1513, 0, 0,
	0, 0, 1510, 0, 1511, 0, 0, 0, 0, 0,
	0, 1481, 1482, 0, 0, 0, 0, 0, 0, 1466,
	0, 0, 0, 0, 0, 0, 0, 1502, 0, 1486,
	0, 0, 0, 0, 0, 0, 0, 1483, 1487, 0,
	0, 0, 0, 1503, 0, 0, 1478, 1479, 1485, 1506,
	1484, 1480, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471,
	1473, 1474, 1512, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1501,
	841, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1489, 1490,
	1491, 1492, 0, 0, 0, 0, 0, 0, 1472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1504, 0, 0,
	1514, 0, 0, 0, 0, 1488, 1494, 1496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1510, 0, 1511, 0, 0, 0, 1505, 0, 0,
	1481, 1482, 0, 0, 1464, 1465, 0, 1497, 1498, 1499,
	1507, 1508, 1509, 0, 0, 0, 1502, 0, 0, 0,
	0, 0, 0, 0, 1500, 1495, 0, 1487, 0, 0,
	0, 0, 1467, 0, 0, 0, 0, 1513, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1512, 0, 0, 0, 0, 0, 0, 0, 1466,
	0, 0, 0, 0, 0, 0, 0, 0, 1501, 1486,
	0, 0, 0, 0, 0, 0, 0, 1483, 0, 0,
	0, 0, 0, 1503, 0, 0, 1478, 1479, 1485, 1506,
	1484, 1480, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471,
	1473, 1474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1488, 0, 0, 0, 1489, 1490,
	1491, 1492, 0, 0, 0, 0, 0, 0, 1472, 0,
	0, 0, 0, 2674, 0, 0, 1505, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1504, 0, 0,
	1514, 0, 0, 0, 0, 0, 1494, 1496, 2966, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1510, 0, 1511, 0, 0, 0, 0, 0, 0,
	1481, 1482, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1487, 0, 0,
	0, 0, 1503, 0, 0, 1478, 1479, 1485, 1506, 1484,
	1480, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473,
	1474, 1512, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1501, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1464,
	1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1500,
	1495, 0, 0, 0, 2669, 0, 1493, 1467, 0, 0,
	0, 0, 1513, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1464, 1465, 1488, 1497, 1498, 1499, 1507, 1508,
	1509, 0, 0, 0, 1466, 0, 0, 0, 0, 0,
	0, 0, 1500, 1495, 1486, 0, 1505, 0, 0, 0,
	1467, 0, 1483, 0, 0, 1513, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1486, 0, 0,
	0, 0, 0, 0, 0, 1483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1489, 1490, 1491, 1492, 0, 0, 0,
	0, 0, 0, 1472, 0, 0, 0, 0, 0, 0,
	0, 0, 1503, 0, 0, 1478, 1479, 1485, 1506, 1484,
	1480, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473,
	1474, 0, 1504, 0, 0, 1514, 1489, 1490, 1491, 1492,
	0, 1494, 1496, 0, 0, 0, 1472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 1511, 0,
	0, 0, 0, 0, 0, 1481, 1482, 0, 0, 0,
	0, 0, 0, 0, 0, 1504, 0, 0, 1514, 0,
	0, 1502, 0, 0, 1494, 1496, 0, 0, 0, 0,
	0, 0, 1487, 0, 0, 0, 0, 0, 0, 1510,
	0, 1511, 0, 0, 0, 0, 0, 0, 1481, 1482,
	0, 0, 0, 0, 0, 0, 1512, 0, 0, 0,
	0, 0, 0, 0, 1502, 0, 0, 0, 0, 0,
	0, 0, 0, 1501, 0, 1487, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1512,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1501, 0, 0, 0,
	0, 1493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2636, 0, 0, 1464, 1465, 1488,
	1497, 1498, 1499, 1507, 1508, 1509, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1500, 1495, 0,
	0, 1505, 2609, 0, 1493, 1467, 0, 0, 0, 0,
	1513, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1486, 0, 1505, 0, 0, 0, 0, 0,
	1483, 0, 0, 1464, 1465, 0, 1497, 1498, 1499, 1507,
	1508, 1509, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1500, 1495, 0, 0, 0, 0, 0,
	0, 1467, 0, 0, 0, 0, 1513, 1503, 0, 0,
	1478, 1479, 1485, 1506, 1484, 1480, 0, 1477, 1475, 1476,
	1468, 1469, 1470, 1471, 1473, 1474, 0, 0, 1466, 0,
	0, 1489, 1490, 1491, 1492, 0, 0, 0, 1486, 0,
	0, 1472, 0, 0, 0, 0, 1483, 0, 0, 0,
	1503, 0, 0, 1478, 1479, 1485, 1506, 1484, 1480, 0,
	1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 0,
	1504, 0, 0, 1514, 0, 0, 0, 0, 0, 1494,
	1496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 1511, 0, 0, 0,
	0, 0, 0, 1481, 1482, 0, 0, 1489, 1490, 1491,
	1492, 0, 0, 0, 0, 0, 0, 1472, 0, 1502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1487, 0, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508,
	1509, 0, 0, 0, 0, 0, 1504, 0, 0, 1514,
	0, 0, 1500, 1495, 1512, 1494, 1496, 0, 0, 0,
	1467, 0, 0, 0, 0, 1513, 0, 0, 0, 0,
	1510, 1501, 1511, 0, 0, 0, 0, 0, 0, 1481,
	1482, 0, 0, 0, 0, 0, 0, 1466, 0, 0,
	0, 0, 0, 0, 0, 1502, 0, 1486, 0, 0,
	0, 0, 0, 0, 0, 1483, 1487, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1512, 0, 0, 0, 0, 0, 0, 1488, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1505,
	0, 0, 0, 0, 0, 0, 1489, 1490, 1491, 1492,
	0, 0, 0, 0, 0, 0, 1472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1504, 0, 0, 1514, 0,
	0, 0, 0, 1488, 1494, 1496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1510,
	0, 1511, 0, 0, 0, 1505, 0, 0, 1481, 1482,
	0, 0, 0, 0, 0, 1503, 0, 0, 1478, 1479,
	1485, 1506, 1484, 1480, 1502, 1477, 1475, 1476, 1468, 1469,
	1470, 1471, 1473, 1474, 0, 1487, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1512,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1503, 0, 0, 1478, 1479, 1485, 1506, 1484, 1480,
	0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1493, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1464, 1465, 1488, 1497, 1498, 1499, 1507, 1508, 1509, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1495, 0, 0, 1505, 0, 0, 0, 1467, 0,
	0, 0, 0, 1513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1486, 0, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1503, 0, 0, 1478, 1479, 1485, 1506, 1484, 1480, 0,
	1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 0,
	0, 0, 0, 0, 1489, 1490, 1491, 1492, 0, 0,
	0, 0, 0, 0, 1472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1504, 0, 0, 1514, 0, 0, 0,
	0, 0, 1494, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1510, 0, 1511,
	0, 0, 0, 0, 0, 0, 1481, 1482, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1487, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1512, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1505, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1503, 0,
	0, 1478, 1479, 1485, 1506, 1484, 1480, 0, 1477, 1475,
	1476, 1468, 1469, 1470, 1471, 1473, 1474,
}
var sqlPact = [...]int{

	9575, -1000, -1000, -1000, -1000, -1000, -1000, 256, 255, 254,
	247, 238, 235, 232, 229, -1000, -1000, -1000, -1000, -1000,
	-1000, 227, -1000, -1000, 226, -1000, 225, 221, 220, 217,
	-1000, 216, 215, 212, -1000, -1000, -1000, -1000, 209, 208,
	207, 61777, 1891, 75115, 65317, 1838, 56437, 74668, 55990, 74221,
	73774, 203, -1000, 73327, 200, 192, 189, -1000, 72880, -1000,
	1702, -1000, 188, 1655, 47026, 185, 178, 177, 2459, 171,
	-1000, 168, -1000, 7787, 1334, -1000, 161, -1000, 7085, 959,
	64429, 2366, 160, 159, 46578, 2358, 2429, -1000, -1000, 1759,
	-1000, -1000, 156, 155, 151, 149, 147, 146, 145, 142,
	140, -1000, 138, 136, 133, 131, 130, 127, 125, -1000,
	124, 119, 118, 116, 114, 109, 108, 107, 106, 105,
	101, 97, -1000, 10546, 1577, 1428, 1415, 1410, 1408, 1406,
	894, 94, 88, 86, 79, 76, 75, 73, -1000, 72,
	69, 68, 67, 65, -1000, 64, 63, 176, 60, 59,
	56, 55, 51, 2917, -1000, 1396, 732, 22926, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 79966, 75556, 49, -49, 48, -1000, 2685, 1040, 38960,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	538, -1000, -1000, -1000, 379, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1590, 715, -1000, -1000, -1000, 72439, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1889, -43, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 713, -1000, 1887, 100, 1830, -1000, -1000,
	-1000, -1000, -1000, 75556, -1000, -1000, 3110, 3109, 1731, 710,
	71998, -1000, 1429, -1000, 834, 25758, -1000, 1125, -1000, 25758,
	378, -1000, -1000, -1000, -1000, -1000, -1000, 3106, 3102, 3101,
	3099, -1000, -1000, 55543, 17230, 55096, 54649, 71551, 16773, 61336,
	50646, -1000, -1000, -1000, 41677, 1146, -1000, -1000, -1000, -1000,
	-1000, 25, 51542, 75556, -1000, 375, -1000, -1000, -1000, -1000,
	-1000, -1000, 32470, 681, 31988, 500, 31506, 291, -1000, -1000,
	-1000, 3098, 3097, 990, 3096, 2652, 79525, 1526, 3095, 1530,
	1098, 925, 3094, 3093, 3092, 3091, 3090, 3089, 1237, 71104,
	2425, 70657, 1588, 50189, 61777, 61777, 2211, 70210, 1224, 1210,
	-1000, -1000, -1000, -1000, 2537, 2421, 2403, 43917, -1000, 3087,
	3086, 3085, 3084, 3083, 79084, 1498, 3082, 2073, 3081, 3077,
	3076, 3075, 3074, 3071, 3070, 3068, 3066, -1000, 60889, 60442,
	59995, 2788, 69763, 49732, -1000, -1000, -1000, 40761, 5761, 5529,
	69316, 42132, 61777, 61777, -1000, -1000, 32940, 186, -1000, -1000,
	-1000, 41677, 2380, -1000, 32940, 186, -1000, 75556, -1000, 2424,
	1586, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1944, 1381, 2939, 49275, 1643, 1219, 2755, 2536, 2530,
	1322, 2130, 2528, 2526, 2521, 2517, 2513, 1523, 2161, 237,
	22444, 1323, 1304, 2505, 2504, 2958, 1644, 1641, 54202, 3065,
	3064, 2709, 2474, 2469, 2377, -1000, -1000, -1000, -1000, 1277,
	-1000, -1000, 57319, -1000, -1000, 1067, -1000, -1000, 1067, -1000,
	-1000, -1000, -1000, -1000, 1145, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1396, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1892, -1000, 1691, -1000, -1000, 2157, 2688, 2688,
	2688, 2784, 525, 517, -1000, 176, -1000, -1000, 86772, -1000,
	-1000, 32940, 32940, 32940, 32940, 32940, 1738, -1000, 707, -1000,
	-1000, 753, -1000, 706, 603, -1000, -1000, -1000, -1000, -1000,
	-1000, 705, -1000, -1000, -1000, -1000, -1000, -1000, 2912, -1000,
	19564, -1000, -1000, -1000, 494, 702, 32940, -1000, -1000, 2968,
	2967, 971, -1000, 359, 852, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2423, 700, 699,
	-1000, 698, 697, 696, 692, 691, -1000, -1000, -1000, 690,
	689, 687, 686, 685, 684, 683, 682, -1000, 1650, -1000,
	-1000, -1000, -1000, -1000, -1000, 656, 655, 655, 655, -1000,
	917, -1000, -1000, -1000, 403, 654, 368, 650, 647, 646,
	680, 679, 677, 676, 675, 671, 670, 669, 668, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 912, -1000, -1000, -1000, -1000,
	23, 75556, -1000, 538, 23, -1000, -1000, 666, -1000, 26228,
	26228, 26228, -1000, -1000, 1881, 32940, -1000, 2844, -1000, 34,
	34, 801, 39852, -1000, 38051, 801, 222, 759, 43469, -1000,
	2376, -1000, -1000, 665, 358, -1000, -1000, -1000, -1000, 2374,
	75556, 17685, 75556, 61777, 61777, 61777, 2551, 32940, -1000, -1000,
	48818, 75556, 62218, 2865, 80848, 48818, 75556, 2418, -1000, -1000,
	-1000, 75556, -1000, 32940, -1000, 2861, 1372, 51987, 2805, -44,
	-1000, -1000, -1000, -1000, -1000, -1000, 2055, 2064, 1064, 1921,
	1693, -1000, 25758, 2636, -1000, -1000, -1000, 299, 17685, -1000,
	-1000, -1000, -1000, -1000, 2020, 2574, 1270, -1000, 1920, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1548, 2573,
	-1000, 1915, 2570, 1545, -1000, -1000, 1805, -1000, -1000, 2681,
	-1000, -1000, 1913, 2554, 35, -1000, -1000, 887, 2552, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 797, -1000,
	51101, 41677, 51542, 18, -1000, -1000, -116, -1000, 16316, 86772,
	-1000, -1000, -1000, 86772, 876, -1000, -1000, 2550, -1000, 86772,
	874, -1000, -1000, 2549, -1000, -1000, -1000, 3061, -1000, 3060,
	2000, 3057, 3055, 3054, -1000, 1413, 1616, 3053, -1000, 3051,
	-1000, -1000, -1000, -1000, -1000, -1000, 59548, 1880, -1000, -1000,
	58654, -1000, 1994, -1000, -1000, 59101, 924, -1000, 887, 1992,
	-1000, 964, -1000, 3049, 2780, 2240, 887, 1991, -1000, -1000,
	-1000, -1000, -1000, 44799, -1000, 44799, -1000, 44799, -1000, 1331,
	-1000, 78643, 34, 34, 2912, -1000, -1000, -1000, -1000, -1000,
	2548, 3048, 3044, 3043, -1000, 75556, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 173, 2544, -1000, -1000, 173,
	2533, -1000, 173, 2502, -1000, 63982, -1000, -1000, 1808, 2498,
	-1000, -137, 2493, -1000, -1000, 19, -1000, -1000, -1000, 1040,
	-1000, 40300, -1000, 40300, 68869, 51101, 868, 760, 46130, 86772,
	-1000, -37, -1000, 41677, 86772, -1000, 51101, 58654, -1000, 68422,
	58213, -1000, -1000, 1233, 2134, -1000, -1000, -1000, 868, 51101,
	51101, 51101, -1000, 67975, -1000, -1000, 1705, 1473, 2690, 1662,
	61777, -1000, 1557, -1000, -1000, -1000, 2738, 2416, -1000, 48377,
	63541, -1000, 63100, -1000, 62659, -1000, 61777, -1000, 61777, -1000,
	3041, 3039, 3037, -1000, 3036, 2723, 86772, 2716, -1000, 2545,
	1440, 1434, 75556, -1000, -1000, 75556, -1000, 75556, -1000, -1000,
	-1000, -1000, -1000, 2051, -1000, -1000, -1000, -1000, 61777, -1000,
	-1000, -1000, -1000, -1000, -1000, 2415, -1000, 1437, -1000, 1518,
	-1000, 1222, -1000, -1000, 174, -1000, -1000, -44, -1000, 78202,
	-1000, 2157, -1000, 75556, -1000, 2028, 2386, 2410, 1513, 1900,
	2141, -1000, 31024, 2124, 35290, 1912, 176, -1000, -1000, 176,
	176, 25288, -1000, -1000, 80848, 80848, 17685, 1167, 32940, 32940,
	32940, 32940, 32940, 32940, 32940, 32940, 32940, 32940, 32940, 32940,
	32940, 32940, 32940, 32940, 32940, 32940, 32940, 32940, 32940, 32940,
	32940, 32940, 32940, 32940, 32940, 32940, 32940, 32940, 32940, 32940,
	32940, 32940, 32940, 2012, 32940, 1143, 32940, 32940, 32940, 32940,
	1654, -1000, -1000, 1645, 564, 1783, -1000, 2918, 2918, 2918,
	87269, 87269, 653, 3035, 753, -1000, 32940, -1000, 186, 32940,
	18142, -1000, -1000, 517, 10201, 1982, -1000, 516, 18624, -1000,
	-1000, -1000, 19564, 603, 30542, 32940, 903, 86772, -1000, -1000,
	1363, 2932, 15861, 2322, 2293, 663, 821, 802, 21962, 21480,
	20998, 20516, 791, 32940, 32940, 32940, 32940, 32940, 32940, 32940,
	32940, -1000, -1000, 2950, -1000, 2932, -1000, -1000, -1000, -1000,
	2932, 1156, 1151, 2932, -1000, 2932, 2932, 2527, 2527, 30072,
	29590, 29108, 35760, 28626, 32940, 20034, 28144, 27662, -1000, 75556,
	23, 2859, 32940, 98, -1000, 85484, -1000, 98, 98, 662,
	12, 86772, 2093, 2093, 39406, 1917, 1761, 1761, 1761, -1000,
	801, 12195, 801, 67089, 1789, 801, 801, 298, 320, 515,
	37605, 2844, 67089, 730, 661, 46, 45, 42, -1000, -1000,
	41, 40, -1000, -1000, 61777, 659, 18142, 17685, 1259, 2,
	296, 2192, 2187, 2182, -1000, 2181, 1452, 1, 1137, -4,
	-1000, 3749, -5, -1000, 1187, 294, -1000, -1000, -1000, -1000,
	-1000, 3034, 3033, -1000, 911, 658, 657, 470, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 656, 655, 655, 655,
	-1000, 403, 654, 368, 650, 647, 646, -1000, -1000, -1000,
	-1000, 2369, -116, 62218, 827, -6, 994, -44, -1000, -1000,
	-1000, 51987, 1067, -1000, 1728, -1000, -1000, -1000, -1000, -1000,
	-1000, 1246, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 971,
	-1000, -1000, -1000, -1000, -1000, -1000, 2928, 2923, 20, -1000,
	-1000, 17685, -1000, -59, 1539, -1000, 53755, 2091, 2692, 2671,
	1310, -1000, 1245, 2777, 57319, 2810, 2878, 504, -1000, 2357,
	-1000, -1000, 831, 1431, 1115, 57319, 1915, -1000, 80848, -1000,
	2203, 2776, 1266, 1203, 1266, 1266, 1243, -1000, 57319, 1114,
	-1000, 1111, -1000, -102, 2807, 2857, 293, -1000, 2351, 1052,
	-1000, -1000, 61777, 17685, -1000, 1519, -1000, 51101, 2246, -1000,
	-16, 797, 18, 51542, 75556, 285, -1000, 32940, 186, 32940,
	186, -1000, -1000, 2492, -1000, -1000, -1000, 3023, 1562, 2069,
	-1000, -1000, -1000, 638, 1989, 2344, 75556, 2190, 7, 61777,
	-1000, 2491, 1915, 1988, -1000, -1000, 57766, -1000, 2484, 651,
	3022, -1000, 77761, -1000, 2696, 1176, 2478, 957, 190, 2858,
	-1000, 190, 45240, -1000, 75556, -1000, -1000, 75556, -1000, -1000,
	-1000, 3019, -1000, 61777, -1000, -1000, 61777, -1000, 61777, -1000,
	61777, 170, 2477, -1000, -1000, 75556, 51101, 51101, 4730, 52873,
	-18, -19, 513, -1000, 67534, 75556, 955, 53314, 75556, 2625,
	868, 41677, -37, 868, 868, 797, -1000, 797, -1000, 61777,
	2402, -1000, 868, 868, 868, -1000, -1000, -1000, -1000, 3018,
	3016, -1000, -1000, -1000, 881, 61777, 75556, 61777, -1000, -1000,
	75556, -1000, 75556, -1000, 881, 75556, 881, 75556, 881, 75556,
	-1000, -1000, -1000, -1000, -1000, -1000, 186, 32940, 1384, -1000,
	2394, -1000, 2389, -1000, 71, -1000, -1000, -1000, -1000, 1757,
	61777, 61777, 61777, 61777, 75556, 61777, -1000, 57319, -1000, 2028,
	2386, -1000, -1000, -1000, -1000, -1000, -1000, 1179, 1844, -1000,
	2131, -1000, 1282, -1000, -1000, -1000, 86772, 36230, -1000, -1000,
	86772, 1456, -1000, 34820, 34350, -1000, -1000, 1383, 61777, 2197,
	-1000, 2197, 10, -1000, 85178, 2119, 61777, -1000, -1000, -1000,
	-1000, -1000, 830, 1251, 1251, 1109, 1109, 1109, 1109, 2820,
	253, 4150, 5134, 344, 344, 314, 314, 314, 314, 314,
	344, 4945, 461, 461, 4945, 4945, 4945, 4945, 4945, 461,
	461, 461, 344, 344, 344, 87269, 86931, 10125, 32940, 32940,
	1050, 1611, 564, 9388, 32940, 4269, 4269, 4269, 4269, -1000,
	1707, -1000, -1000, -1000, -1000, 2340, 637, 35760, 35760, -1000,
	-1000, -1000, -1000, 19094, 32940, -1000, -1000, -1000, -1000, 27180,
	-1000, -1000, 84776, -266, 511, -225, -12, -1000, 32940, 32940,
	32940, 505, -1000, 273, 32940, 75556, -1000, 81849, 728, -189,
	-1000, -32, 1231, -1000, 32940, -1000, -1000, 1049, -1000, 1048,
	1047, 1038, -1000, 636, 501, -1000, 271, -1000, 1750, 632,
	630, 32940, -1000, -1000, -1000, -1000, -1000, 84480, -1000, -1000,
	84270, -1000, -1000, 84175, -1000, -1000, 83965, -1000, -1000, -1000,
	86696, 81639, 81339, 81296, 8893, 11459, 11249, -42, 498, -48,
	497, 829, 823, 496, 490, 487, -50, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -53, 486, -1000, 2337, -225,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 477, -1000,
	475, -1000, 86401, -225, 473, 4351, -1000, 35760, 35760, 35760,
	-1000, 472, -1000, 85325, -1000, 86358, 26710, 26710, 26710, 471,
	86063, 32940, -225, -60, -1000, -61, -1000, -1000, 628, -63,
	898, 26228, 38512, 17685, -1000, 898, 898, 32940, -1000, 32940,
	2158, -1000, -1000, -1000, 2147, 1984, 2093, 39406, -1000, -1000,
	-1000, -1000, 67089, -1000, 2912, 2375, -1000, 67089, -1000, -1000,
	75556, 538, -1000, 67089, 67089, 17685, 801, -1000, 801, 67089,
	534, -1000, -1000, -1000, -1000, -1000, 467, 42577, -12, 266,
	868, -1000, 17685, 2200, 2200, 2200, 2200, -1000, -1000, 75556,
	2882, -1000, 1668, -1000, 80848, -1000, 752, 1097, 17685, -1000,
	-1000, 622, -1000, 2932, 2932, -1000, 2932, 75556, 93, 25758,
	-1000, 1067, -1000, -1000, 1329, -1000, 1565, -1000, 1044, -1000,
	-1000, -1000, -1000, 25758, -1000, 1936, 75556, 75556, 61777, -1000,
	-1000, 1986, 77320, 1985, 80848, 75556, -1000, -1000, 621, 620,
	2118, 2103, 950, 75556, 75556, 2101, 76879, 76438, 75556, 1727,
	32940, 1795, 1658, 186, 186, -1000, -1000, 186, 617, 1118,
	61777, 61777, 61777, 1538, -1000, -1000, -1000, -1000, -1000, 56878,
	-1000, -1000, 2947, 2945, -1000, 1266, -1000, -1000, -1000, 1266,
	1915, 1533, 61777, 75556, 1675, 186, 186, -1000, -1000, 186,
	613, 17685, 1663, -1000, 1519, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 47936, 963, 887, 868, 2335, -1000, 2246, -1000,
	-1000, 15406, 86772, -1000, 86772, -1000, 75556, -1000, 923, 75556,
	53314, 869, 2476, 44358, -116, 868, 51101, 61777, 7, 75556,
	-1000, 1915, 2473, 538, 1980, -1000, -1000, 51101, 3015, 609,
	3014, -1000, 1878, 1977, -1000, -1000, 75997, 2481, 783, 75556,
	898, 39406, 1603, -1000, 43024, 933, 75556, 1505, 83, -1000,
	-1000, -1000, 58, 75556, -1000, 3013, -1000, -1000, 173, 173,
	173, -1000, 61777, 61777, 1808, -1000, -137, -1000, -1000, 4730,
	4730, 868, -8, 606, -1000, 793, 792, 41222, 51101, -68,
	-1000, -1000, -1000, -1000, -1000, 61777, 75556, 763, 2231, 75556,
	-69, -1000, 265, 604, -1000, -1000, 868, 2331, -1000, -1000,
	890, -1000, 1215, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 31, -116, -116, -1000, 881, -1000, 881, -1000,
	881, -1000, 86772, -1000, 1382, 1339, 75556, -1000, 17685, 75556,
	61777, 17685, 61777, 2384, 2378, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 972, -1000, 1456, 1843, -1000, 603, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2037, -1000,
	-11, 25288, 1919, -1000, -1000, 61777, 30, 32940, 32940, 8079,
	6462, 32940, 35760, 35760, -1000, 32940, 6103, -1000, -1000, -1000,
	-1000, -1000, 2326, 601, 32940, 80848, 4777, 3857, -1000, 466,
	11090, 4945, -1000, 32940, -1000, 465, 24818, -1000, 85694, -45,
	-70, -1000, 12662, -225, -71, -1000, -1000, 751, -1000, 2475,
	-1000, 32940, 85853, 1999, 1779, 1612, 1389, 2932, 2966, 14951,
	-1000, 45685, 901, 1801, 83669, -1000, -1000, -1000, -1000, 80848,
	80848, 32940, 32940, -1000, 32940, 32940, 32940, -1000, -1000, -1000,
	2932, 822, -1000, -1000, -1000, 822, -1000, -1000, 2932, -1000,
	2932, -1000, 32940, -1000, -1000, 2321, 32940, -1000, 80848, 80848,
	35760, 35760, 35760, 35760, 35760, 35760, 35760, 35760, 35760, 35760,
	35760, 35760, 35760, 35760, 35760, 35760, 35760, 35760, 35760, 2113,
	35760, 2911, 2911, 2911, -1000, 2339, 2321, 32940, 32940, 80848,
	463, 462, 457, -1000, 32940, -225, -1000, -1000, 4730, -1000,
	2285, -1000, 32940, -1000, -173, -1000, 2844, -1000, -1000, 2285,
	2285, -77, 86772, 39406, 39406, -1000, 600, 32940, 2095, -1000,
	-1000, 727, -264, -1000, 790, -1000, -1000, -1000, -1000, -1000,
	538, -1000, -1000, -1000, 259, 67089, 67089, 726, -1000, -79,
	-1000, -1000, -80, -1000, 2854, 450, 17685, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -116, 1828, 2965, -1000, 2940,
	748, 725, 258, 2932, 449, 447, 446, -116, 75556, -1000,
	-44, -1000, -1000, -1000, 32940, -1000, -1000, 2686, 1036, 1035,
	-1000, 2472, -1000, 1975, -1000, 937, -1000, 1741, -1000, 32940,
	32940, 598, 596, 3012, 1666, 3011, 954, 2471, 1808, 2468,
	1808, -1000, -1000, 848, -1000, 86772, 595, 593, -1000, -59,
	1536, 889, -1000, -1000, 32940, 32940, 66648, -1000, 385, 2681,
	27, -1000, 1032, -1000, -1000, -1000, -1000, 1915, 1030, -1000,
	-1000, -1000, 888, -1000, -1000, 32940, -1000, -102, 1027, -1000,
	-1000, -1000, 47481, -1000, -1000, 51101, 868, -1000, 3005, 61777,
	3004, 444, -82, -113, 80848, 2842, 1859, 645, 61777, 825,
	-1000, 2912, -1000, -1000, -1000, -1000, 61777, 2836, 2467, 887,
	-1000, 2963, -1000, 61777, 2466, 1877, 1969, 2062, 783, 52432,
	-1000, 887, 1801, -164, -1000, 1505, 24336, 2676, -85, -1000,
	-1000, -1000, 898, 45240, 39406, 32940, 3002, -87, -1000, -1000,
	-1000, -1000, -1000, 170, -1000, -1000, -1000, -1000, 66207, 66207,
	51101, 51101, 51101, 868, 75556, 75556, 53314, -1000, 592, 75556,
	75556, 591, -1000, 75556, 75556, 3001, 51101, -1000, 186, -1000,
	1825, 61777, 14496, -1000, -1000, -1000, -1000, -1000, 881, -1000,
	-1000, 1684, 1903, 1684, 1507, 1495, -1000, 1841, -1000, -1000,
	-1000, -1000, 2188, 2694, 17685, 2803, 4269, 32940, 32940, 419,
	951, 363, 4269, 32940, 32940, 80848, 11622, -90, 32940, 32940,
	-1000, 32940, 724, 86772, 2961, 32940, 443, 442, -1000, -1000,
	-1000, 2916, -1000, -1000, -1000, 86772, 32940, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 440, -1000, 223, -1000, -1000, -1000,
	80407, -1000, 32940, 439, -1000, 437, 427, 10713, 7179, 83613,
	83317, 83107, 426, -1000, -1000, 425, 424, 86772, 2339, 86772,
	-1000, -1000, 819, 819, 1214, 1214, 1214, 1214, 2911, 324,
	839, 2557, 290, 290, 290, 1751, 795, 795, 290, 290,
	290, 2320, 2090, 590, 5036, -1000, -1000, 86772, 86772, 420,
	-1000, -1000, -1000, -225, 418, 2281, 2775, 86772, -1000, 39406,
	2281, 2281, -1000, -1000, 1984, 75556, 86772, 39406, -1000, 2375,
	-1000, 13127, -1000, 17685, -1000, -1000, -1000, -1000, 2912, -1000,
	42577, -1000, 589, -1000, 175, -1000, -1000, 723, 3000, 742,
	17685, 416, -1000, -1000, -1000, -116, 86772, 75556, 75556, 75556,
	2465, -1000, 2756, -1000, 950, 83012, -93, -1000, 85178, 32940,
	75556, -1000, -1000, 1633, 2148, 983, -1000, 2741, 75556, -1000,
	75556, -1000, -1000, 75556, 75556, 61777, 2451, -95, 86772, -129,
	-1000, 789, -1000, 1247, -1000, 14041, 61777, 61777, 2449, -100,
	17685, -1000, -1000, -137, -1000, -1000, 538, -1000, 2218, -1000,
	64870, 1797, 186, -1000, 65762, 2998, 585, -1000, 1804, -1000,
	720, 1915, 186, 61777, -1000, 400, -148, -1000, 941, 17685,
	61777, 2460, 2065, 783, 52432, -1000, 1176, 2141, -1000, -155,
	-1000, 619, 186, 1801, -1000, -164, 86772, -1000, 788, -1000,
	-1000, -101, -1000, -1000, 398, -1000, 2624, 2618, -1000, 2312,
	32940, 584, 583, 75556, 2616, -1000, -1000, -115, -1000, 1990,
	-1000, -1000, -1000, -1000, -1000, 17685, 1385, -1000, 581, 579,
	-1000, -1000, -1000, -1000, 2694, 4269, 4269, 32940, 32940, 32940,
	4269, 11622, -117, -1000, 4269, 4269, -225, -1000, -1000, 85694,
	-1000, -1000, -1000, 86772, -1000, 13586, 1690, -1000, 82802, -1000,
	-1000, -1000, 32940, 32940, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 35760, 2315, 578, 80848, -1000, -1000, 875, 32940,
	32940, 2844, 875, 875, -1000, -122, -1000, -1000, -1000, 2912,
	175, -1000, -1000, 2997, 17685, 733, -1000, 2987, -1000, -1000,
	-1000, -1000, -1000, 75556, -1000, 75556, -1000, 17685, 75556, 2314,
	1963, -1000, -1000, 2100, 573, 35760, 61777, 865, -1000, 2327,
	1677, 32940, 1919, -132, -134, 1943, -1000, -1000, 1942, 32940,
	-1000, 80848, 572, 1808, 1808, -135, -141, -1000, 32940, 1026,
	75556, 23866, -1000, 2985, 2681, -1000, -1000, 32940, 1023, -1000,
	2835, 1675, 2256, -1000, -1000, -1000, -1000, 2094, -1000, -1000,
	75556, 2079, 873, -142, -1000, 786, 784, -1000, 53314, 869,
	847, -1000, -1000, -1000, 538, -1000, 2956, 571, 75556, 1873,
	565, 17685, -1000, 783, 52432, -1000, 2481, 1505, -1000, 2587,
	75556, 2670, -1000, 2141, 564, -1000, 868, 562, 557, 2110,
	2110, -143, 32940, 32940, -152, 556, 868, -165, -1000, 857,
	529, -1000, -1000, 61777, 61777, 32940, 32940, -1000, 4269, 4269,
	4269, -1000, 394, -1000, -1000, 1801, 2769, -1000, 82506, 82450,
	441, 35760, 80848, -153, -1000, 75556, 86772, -225, -1000, -1000,
	-1000, 535, -1000, 2976, -1000, -1000, 1857, -1000, -1000, -1000,
	75556, 1940, -1000, 947, 32940, 5036, 553, 32940, -1000, -1000,
	2216, 2336, 2218, 552, -1000, -1000, -1000, -1000, -1000, 940,
	1547, -1000, -1000, 86772, 2751, 32940, -1000, -1000, 551, 549,
	86772, 545, 781, 2309, -1000, -1000, -1000, 86772, 542, 186,
	869, -1000, 1715, 1797, 540, -1000, -1000, 1809, 2180, -1000,
	65762, 36685, 36685, 390, 2832, 847, -1000, 2909, -1000, 2818,
	-1000, 32940, -1000, 61777, 32940, 1870, 52432, -1000, 2062, -1000,
	1121, -154, 75556, 1505, -1000, -1000, 51101, 51101, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 940,
	-159, -162, -1000, 51101, -1000, 1990, -1000, 75556, -1000, 75556,
	-1000, -1000, -168, -171, -1000, 1764, 32940, -1000, -1000, 441,
	-174, -1000, -205, -1000, 2816, -1000, -1000, -1000, -1000, 2458,
	2275, 82154, 2026, 75556, 81944, 2333, -1000, -1000, 1675, 75556,
	2218, 2273, 61777, 945, 17685, -176, 1684, 1684, 32940, 23396,
	1695, 32940, -1000, 1809, 61777, 75556, -1000, 2735, -1000, 2614,
	-1000, -1000, -1000, 2218, 186, -1000, -1000, 186, -177, 941,
	-179, 61777, -1000, 2065, 1292, -1000, 898, -1000, -1000, -182,
	-192, 1677, 940, -1000, -199, -1000, -200, -202, -1000, -1000,
	389, 33880, 33880, 33880, -225, -1000, 75556, 539, 2441, 878,
	-1000, 1839, 1646, 384, 938, -1000, -1000, 2327, -207, -1000,
	877, 538, -1000, 32940, -1000, 940, -210, -1000, 931, -215,
	-1000, 930, -216, -1000, 2307, -1000, -223, -1000, 536, -230,
	-1000, -1000, 2117, -1000, 1675, 873, -1000, 940, 533, 1677,
	531, -1000, 45240, -1000, 868, 868, 2218, 1677, 868, -1000,
	-1000, -1000, 2538, -1000, 37140, 1777, 1488, 84832, 2538, 2538,
	-1000, -1000, 75556, 2793, -1000, 1854, 1850, 1286, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2791, 2026, 86772, 2218,
	-1000, 1684, 2255, -1000, 1684, 2306, -1000, 1694, -1000, 75556,
	-1000, 75556, 1436, 1409, 2975, 869, 1809, 1677, 32940, 2218,
	32940, -217, -1000, -1000, 1675, 2218, -1000, -1000, 1661, 2874,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 778, -1000,
	2592, -1000, 968, 1806, 1806, 773, 1839, -1000, -1000, 530,
	-1000, 528, -1000, -231, -1000, -1000, 2973, -1000, 1809, -1000,
	2218, -236, 1675, -238, -1000, -1000, 1675, 1478, -1000, -1000,
	1781, 33410, 32940, -1000, 2889, -1000, -1000, 2089, -1000, 32940,
	2327, 32940, 32940, 1802, -1000, -1000, 1675, 940, 893, 1677,
	-1000, -1000, -1000, -1000, 86772, -1000, -1000, -1000, 86772, -1000,
	-244, -250, -1000, -1000, -1000, 893, 1677, -1000, 2972, 2218,
	1675, 1022, -1000, 2218, -1000, 1675, -1000, 527, 1675, 893,
	32940, 893, -1000, -251, -1000, 1675, -1000,
}
var sqlPgo = [...]int{

	0, 3639, 3638, 3637, 3631, 3628, 3627, 3626, 3625, 3623,
	3621, 3619, 3616, 3615, 3612, 3611, 3610, 3608, 3607, 3606,
	3605, 3599, 3597, 3595, 3593, 3592, 3591, 3587, 3586, 3585,
	3584, 3582, 3581, 3580, 3579, 3578, 3577, 3576, 3575, 3574,
	3571, 3569, 3567, 3565, 3564, 3563, 3561, 36, 3558, 3557,
	3556, 3554, 3553, 3551, 3548, 3546, 3545, 3544, 3543, 3541,
	3539, 3537, 3535, 3534, 3531, 41, 3529, 213, 3526, 3523,
	3521, 3518, 3516, 3512, 3511, 3510, 3509, 212, 3507, 174,
	3506, 3504, 3503, 3501, 3500, 211, 3499, 3496, 3495, 3494,
	3493, 3492, 3490, 3483, 152, 196, 3481, 42, 3480, 3479,
	3478, 3477, 3476, 3471, 3468, 3467, 3465, 3464, 198, 3463,
	209, 3461, 3460, 3459, 3456, 3454, 3453, 3452, 3451, 3449,
	3445, 3444, 3443, 3442, 3441, 3439, 3438, 3437, 3436, 3435,
	3433, 3432, 3431, 3430, 3429, 3427, 3423, 3422, 3420, 218,
	137, 3417, 3416, 208, 207, 3414, 3412, 3410, 3407, 123,
	93, 89, 31, 3406, 90, 44, 3405, 13, 180, 210,
	7133, 194, 3401, 3400, 3390, 191, 146, 3388, 188, 3377,
	3376, 3375, 3372, 67, 58, 132, 131, 129, 125, 268,
	3371, 3370, 68, 56, 39, 34, 3369, 3368, 3364, 2691,
	87, 3363, 206, 197, 120, 3362, 3361, 3360, 794, 3358,
	3348, 3345, 166, 74, 96, 28, 88, 3339, 114, 19,
	3338, 134, 37, 3337, 117, 64, 33, 5958, 3314, 3335,
	79, 221, 70, 81, 192, 162, 122, 165, 160, 128,
	105, 3334, 226, 3333, 49, 116, 3332, 3331, 3330, 60,
	148, 69, 3329, 3327, 53, 6, 15, 1, 124, 43,
	86, 10, 3320, 11, 3319, 3317, 3316, 3315, 40, 130,
	3310, 106, 51, 3308, 23, 3307, 18, 167, 3303, 175,
	94, 3301, 3299, 201, 156, 155, 3297, 71, 184, 3296,
	3295, 3294, 3293, 3290, 97, 22, 91, 3283, 3281, 95,
	187, 143, 3280, 46, 3279, 138, 75, 101, 217, 92,
	171, 84, 172, 141, 176, 3277, 3276, 3275, 145, 3274,
	3273, 168, 126, 3270, 3269, 153, 220, 29, 55, 185,
	54, 142, 136, 3268, 154, 3267, 3266, 3264, 219, 135,
	157, 3, 21, 66, 98, 27, 9, 183, 115, 234,
	78, 3263, 3867, 1731, 1605, 47, 3261, 108, 82, 50,
	77, 111, 205, 52, 3259, 3258, 2229, 3257, 3256, 3254,
	3253, 139, 3252, 3249, 3248, 104, 113, 149, 3247, 118,
	62, 24, 99, 273, 214, 73, 164, 150, 237, 3245,
	144, 3244, 48, 112, 3242, 147, 200, 3241, 3240, 173,
	3239, 245, 121, 3238, 186, 3237, 3236, 3231, 3230, 3229,
	3228, 3223, 240, 179, 110, 3222, 3221, 3220, 204, 151,
	3219, 203, 103, 127, 61, 30, 3218, 80, 723, 3212,
	119, 181, 38, 3203, 3759, 35, 0, 8686, 7010, 5669,
	7942, 3201, 7207, 3200, 3194, 3192, 163, 102, 3190, 3189,
	3184, 76, 3182, 59, 3180, 3179, 45, 3178, 16, 7,
	8, 17, 12, 296, 109, 3177, 3176, 83, 100, 169,
	3173, 215, 177, 3172, 3169, 3168, 72, 3165, 25, 3164,
	26, 3163, 3162, 32, 5, 14, 3161, 3160, 193, 3158,
	189, 3154, 3151, 2840, 107, 3148, 3143, 202, 63, 3142,
	199, 3141, 2763, 133, 159, 3140, 3137, 3136, 3135, 195,
	3133, 3132, 20, 3131, 4, 3130, 3125, 161, 2, 2636,
	3124, 3117, 57, 3115, 140,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 3, 3,
	3, 3, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 11, 11, 7, 7, 8,
	8, 8, 35, 35, 9, 9, 9, 10, 10, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 14, 14,
	25, 25, 15, 15, 27, 27, 16, 16, 28, 28,
	487, 487, 19, 30, 20, 31, 13, 488, 488, 488,
	488, 24, 21, 32, 22, 22, 22, 22, 22, 153,
	153, 153, 153, 18, 18, 26, 26, 176, 176, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 486, 486, 178, 178, 177, 172, 172, 489, 489,
	179, 179, 179, 181, 181, 36, 36, 36, 93, 93,
	93, 94, 94, 95, 95, 154, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 81, 81, 424, 424, 425,
	425, 149, 149, 150, 150, 150, 150, 151, 151, 152,
	152, 152, 50, 38, 38, 38, 38, 38, 38, 38,
	39, 39, 39, 39, 40, 40, 40, 40, 40, 40,
	41, 41, 41, 41, 41, 41, 48, 48, 48, 48,
	140, 140, 51, 51, 51, 51, 51, 51, 51, 496,
	496, 496, 496, 496, 496, 496, 496, 496, 496, 496,
	496, 496, 496, 496, 496, 496, 496, 496, 496, 497,
	497, 498, 498, 499, 499, 500, 500, 500, 500, 500,
	500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
	500, 500, 500, 500, 500, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 62, 62, 260, 260, 233, 233, 63, 63,
	63, 64, 64, 65, 65, 52, 52, 480, 480, 274,
	274, 384, 384, 67, 67, 294, 294, 68, 68, 68,
	68, 68, 68, 69, 69, 69, 69, 69, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 75, 75,
	75, 76, 76, 76, 74, 74, 74, 72, 72, 72,
	71, 71, 71, 73, 73, 73, 275, 275, 77, 77,
	77, 77, 77, 77, 77, 77, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 386, 386, 78, 78, 78, 354, 354, 82, 82,
	82, 309, 309, 83, 83, 83, 83, 83, 84, 84,
	84, 84, 96, 96, 96, 96, 483, 483, 267, 267,
	192, 192, 192, 192, 89, 89, 89, 89, 90, 90,
	90, 91, 91, 145, 145, 102, 102, 102, 102, 102,
	101, 101, 101, 101, 101, 101, 42, 42, 42, 43,
	43, 44, 44, 45, 45, 46, 46, 47, 47, 47,
	47, 47, 104, 104, 493, 493, 106, 103, 103, 103,
	105, 105, 105, 105, 107, 108, 108, 108, 108, 108,
	108, 108, 108, 109, 109, 417, 417, 283, 283, 415,
	415, 433, 433, 416, 416, 237, 237, 237, 237, 237,
	238, 238, 238, 423, 423, 423, 423, 423, 423, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 146, 146, 147, 148, 148, 148, 148,
	129, 129, 129, 139, 139, 139, 139, 139, 139, 139,
	132, 132, 132, 119, 119, 111, 111, 111, 111, 111,
	115, 115, 115, 115, 115, 115, 115, 115, 112, 112,
	121, 121, 121, 121, 121, 116, 116, 118, 118, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 113, 113,
	113, 113, 123, 123, 123, 123, 316, 316, 316, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 135,
	135, 135, 135, 135, 135, 368, 368, 130, 130, 130,
	130, 134, 134, 134, 134, 299, 299, 127, 127, 127,
	128, 128, 128, 133, 133, 131, 131, 136, 136, 136,
	136, 114, 114, 114, 501, 501, 501, 137, 137, 126,
	126, 138, 138, 138, 138, 138, 138, 138, 138, 125,
	125, 125, 124, 124, 124, 124, 117, 481, 481, 478,
	478, 478, 478, 478, 478, 478, 479, 479, 482, 482,
	87, 87, 87, 57, 57, 57, 58, 58, 157, 157,
	157, 157, 245, 245, 245, 245, 155, 155, 156, 156,
	59, 59, 502, 502, 502, 490, 490, 490, 491, 491,
	491, 491, 491, 491, 239, 239, 240, 240, 334, 334,
	334, 334, 334, 243, 243, 243, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 246, 246, 180, 180, 180,
	249, 250, 250, 247, 247, 248, 248, 248, 252, 252,
	251, 254, 254, 253, 333, 442, 442, 444, 444, 444,
	444, 444, 444, 444, 446, 446, 446, 446, 446, 446,
	446, 446, 446, 446, 446, 503, 440, 440, 440, 441,
	436, 436, 437, 437, 437, 437, 437, 241, 241, 242,
	242, 242, 242, 438, 439, 265, 265, 371, 443, 443,
	445, 445, 447, 504, 504, 504, 504, 504, 504, 505,
	505, 505, 332, 332, 331, 331, 258, 258, 448, 448,
	448, 448, 449, 449, 449, 449, 449, 452, 451, 450,
	450, 450, 450, 450, 61, 61, 61, 296, 296, 295,
	295, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 142, 142, 195, 195,
	56, 56, 56, 12, 12, 12, 492, 492, 492, 60,
	60, 60, 60, 194, 194, 194, 194, 194, 194, 485,
	485, 484, 484, 196, 196, 507, 507, 66, 66, 66,
	66, 66, 66, 387, 387, 388, 388, 55, 55, 55,
	55, 55, 508, 508, 317, 317, 315, 315, 314, 314,
	264, 264, 370, 200, 200, 173, 173, 173, 23, 17,
	17, 33, 33, 34, 34, 29, 29, 494, 494, 495,
	495, 88, 88, 92, 92, 92, 100, 100, 141, 141,
	141, 141, 141, 141, 141, 37, 37, 37, 37, 49,
	49, 49, 49, 98, 510, 510, 510, 99, 99, 99,
	509, 509, 193, 193, 328, 328, 329, 329, 511, 511,
	330, 330, 330, 330, 187, 186, 188, 188, 54, 54,
	54, 182, 182, 183, 183, 184, 184, 185, 185, 512,
	512, 85, 85, 85, 144, 144, 232, 232, 232, 324,
	324, 324, 259, 259, 206, 206, 327, 327, 325, 325,
	325, 325, 293, 293, 293, 143, 143, 272, 272, 285,
	285, 286, 286, 381, 381, 287, 97, 97, 160, 160,
	158, 158, 158, 158, 158, 158, 158, 158, 165, 165,
	166, 166, 167, 167, 168, 169, 169, 169, 169, 276,
	276, 170, 170, 170, 159, 159, 159, 161, 161, 161,
	161, 161, 161, 161, 164, 164, 164, 164, 171, 171,
	171, 163, 163, 459, 459, 459, 461, 461, 462, 458,
	458, 460, 460, 506, 506, 298, 298, 298, 256, 257,
	255, 255, 262, 262, 261, 263, 263, 369, 369, 369,
	174, 174, 174, 290, 290, 290, 290, 291, 291, 320,
	320, 318, 318, 318, 318, 319, 319, 321, 321, 321,
	322, 322, 323, 323, 289, 289, 350, 350, 162, 162,
	162, 269, 269, 269, 270, 270, 340, 340, 340, 340,
	340, 340, 341, 341, 339, 339, 339, 339, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 373, 374, 374,
	271, 271, 375, 326, 326, 476, 476, 476, 477, 477,
	367, 367, 376, 376, 376, 376, 376, 376, 365, 365,
	366, 366, 382, 383, 383, 302, 302, 302, 302, 300,
	300, 303, 303, 303, 303, 301, 301, 377, 377, 377,
	377, 292, 292, 378, 378, 378, 378, 379, 335, 336,
	336, 389, 389, 389, 389, 404, 268, 268, 268, 268,
	268, 435, 434, 434, 390, 390, 390, 390, 390, 390,
	390, 390, 403, 403, 403, 403, 403, 403, 403, 403,
	405, 405, 405, 405, 405, 405, 391, 391, 391, 391,
	391, 394, 394, 394, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 395, 395, 400, 400, 401,
	401, 401, 396, 397, 402, 402, 402, 402, 513, 513,
	407, 407, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 392, 392, 392, 399, 399, 399, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	310, 310, 312, 312, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	343, 343, 343, 343, 343, 343, 343, 343, 343, 343,
	343, 343, 343, 343, 343, 343, 343, 343, 343, 343,
	343, 343, 343, 343, 343, 343, 343, 343, 343, 344,
	344, 344, 344, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 453, 453,
	453, 453, 453, 453, 453, 453, 346, 346, 456, 456,
	457, 457, 454, 454, 454, 454, 454, 454, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	454, 454, 454, 454, 454, 455, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	455, 463, 463, 464, 464, 466, 466, 467, 467, 468,
	469, 469, 469, 470, 471, 471, 465, 465, 472, 472,
	472, 472, 473, 473, 474, 474, 474, 474, 474, 475,
	475, 475, 475, 475, 356, 356, 357, 357, 363, 363,
	363, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 197, 197, 197,
	197, 197, 281, 281, 279, 279, 279, 282, 282, 280,
	280, 278, 278, 277, 277, 353, 353, 351, 351, 355,
	355, 304, 304, 406, 406, 406, 406, 406, 406, 406,
	406, 305, 305, 305, 313, 306, 306, 307, 307, 307,
	307, 307, 347, 348, 308, 308, 308, 349, 349, 358,
	362, 362, 361, 360, 360, 359, 359, 337, 337, 338,
	338, 288, 288, 514, 514, 284, 284, 380, 380, 380,
	380, 235, 235, 273, 273, 234, 234, 227, 227, 228,
	228, 228, 228, 266, 266, 364, 364, 408, 408, 409,
	409, 410, 410, 411, 411, 412, 413, 414, 352, 352,
	216, 215, 203, 204, 214, 213, 212, 202, 205, 209,
	210, 211, 207, 208, 222, 221, 220, 226, 218, 219,
	385, 201, 229, 229, 230, 230, 230, 231, 231, 231,
	231, 198, 198, 199, 199, 223, 223, 224, 225, 225,
	217, 217, 217, 189, 189, 189, 190, 190, 191, 191,
	422, 422, 419, 419, 419, 420, 420, 420, 421, 421,
	421, 421, 418, 418, 418, 418, 418, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 430, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 430, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 430, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 430, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 430, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 430, 427, 427, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 429, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 432, 432,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	1, 3, 4, 6, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 4, 6,
	4, 6, 6, 9, 6, 9, 6, 5, 6, 5,
	1, 1, 5, 5, 6, 6, 4, 4, 4, 4,
	3, 4, 4, 4, 7, 7, 9, 8, 9, 5,
	3, 5, 7, 4, 12, 4, 12, 1, 3, 5,
	5, 2, 5, 3, 6, 4, 6, 5, 6, 6,
	4, 8, 3, 4, 10, 3, 6, 4, 3, 1,
	3, 2, 1, 1, 3, 1, 3, 2, 2, 0,
	1, 1, 0, 2, 0, 6, 7, 2, 5, 6,
	2, 1, 3, 1, 3, 1, 6, 4, 9, 7,
	12, 12, 12, 9, 2, 7, 2, 1, 1, 1,
	3, 3, 0, 3, 1, 3, 1, 1, 3, 2,
	5, 0, 6, 1, 2, 1, 2, 1, 2, 2,
	3, 3, 3, 3, 3, 5, 3, 3, 5, 3,
	3, 5, 3, 3, 5, 3, 6, 6, 6, 6,
	1, 1, 1, 2, 1, 1, 2, 1, 2, 3,
	3, 4, 3, 4, 7, 4, 4, 4, 3, 5,
	7, 4, 3, 3, 4, 3, 3, 3, 3, 2,
	0, 1, 0, 1, 0, 3, 3, 3, 3, 3,
	6, 4, 4, 4, 3, 5, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 4, 1, 1, 2,
	1, 2, 7, 3, 2, 0, 1, 3, 3, 1,
	0, 1, 2, 2, 1, 6, 5, 1, 2, 1,
	3, 2, 0, 9, 3, 2, 0, 2, 2, 2,
	2, 2, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 5, 7, 3,
	4, 6, 3, 3, 5, 3, 1, 3, 2, 2,
	5, 3, 3, 6, 6, 3, 1, 1, 2, 1,
	1, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 2, 1,
	2, 1, 3, 5, 7, 2, 3, 0, 3, 5,
	2, 3, 0, 2, 3, 2, 3, 2, 6, 4,
	7, 2, 6, 4, 7, 2, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 2, 1, 2, 2, 3,
	2, 4, 3, 2, 2, 1, 2, 1, 3, 3,
	1, 2, 1, 2, 1, 2, 1, 1, 3, 5,
	4, 6, 4, 3, 0, 1, 3, 2, 4, 2,
	4, 1, 6, 3, 1, 1, 5, 3, 2, 6,
	3, 3, 4, 4, 3, 1, 3, 2, 3, 3,
	1, 3, 1, 2, 1, 1, 2, 2, 3, 1,
	1, 1, 1, 1, 3, 2, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 2, 1, 3, 3, 3, 3,
	2, 3, 3, 1, 1, 1, 1, 1, 2, 2,
	5, 7, 3, 3, 3, 4, 5, 5, 5, 3,
	4, 4, 3, 4, 4, 3, 4, 4, 5, 3,
	5, 5, 5, 7, 3, 3, 3, 4, 3, 5,
	3, 6, 5, 6, 3, 5, 6, 3, 4, 3,
	4, 3, 3, 4, 4, 5, 0, 1, 1, 3,
	2, 4, 3, 3, 5, 4, 3, 5, 3, 5,
	4, 6, 4, 6, 4, 1, 0, 3, 4, 4,
	5, 7, 5, 3, 3, 2, 0, 4, 2, 3,
	4, 2, 3, 3, 3, 3, 3, 4, 3, 3,
	3, 3, 4, 3, 1, 1, 1, 2, 3, 2,
	3, 6, 6, 7, 9, 7, 9, 3, 4, 10,
	10, 3, 5, 5, 5, 3, 5, 2, 0, 1,
	1, 1, 1, 3, 2, 2, 2, 1, 2, 0,
	3, 3, 2, 3, 6, 3, 11, 14, 0, 2,
	4, 3, 0, 4, 5, 4, 3, 3, 1, 3,
	10, 13, 0, 2, 3, 1, 1, 0, 1, 2,
	2, 2, 2, 1, 1, 0, 1, 3, 1, 1,
	1, 1, 3, 3, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 8, 0, 1, 1, 0,
	2, 1, 0, 1, 0, 9, 9, 3, 1, 3,
	7, 1, 3, 11, 3, 2, 0, 3, 1, 2,
	2, 3, 2, 6, 2, 1, 1, 2, 8, 4,
	2, 5, 5, 5, 2, 1, 9, 10, 6, 5,
	3, 1, 5, 8, 7, 11, 3, 3, 0, 2,
	4, 3, 3, 1, 5, 1, 3, 1, 2, 0,
	1, 2, 2, 0, 1, 3, 3, 2, 2, 1,
	1, 1, 4, 0, 6, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 5, 8, 4, 1, 0, 1,
	2, 2, 1, 2, 3, 3, 2, 2, 3, 2,
	2, 2, 2, 2, 3, 1, 4, 2, 2, 2,
	4, 7, 3, 4, 6, 3, 1, 1, 1, 8,
	10, 11, 5, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 3, 0, 1, 6, 8, 6,
	5, 3, 4, 1, 0, 1, 3, 16, 19, 15,
	18, 4, 0, 2, 2, 0, 1, 0, 1, 0,
	1, 3, 3, 2, 0, 1, 1, 0, 6, 6,
	8, 6, 8, 6, 8, 6, 8, 1, 0, 2,
	0, 2, 2, 3, 3, 2, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 3, 2, 3, 2, 2,
	2, 2, 2, 2, 1, 1, 0, 2, 4, 2,
	1, 0, 2, 1, 1, 0, 1, 3, 1, 0,
	1, 1, 1, 1, 2, 3, 2, 2, 8, 11,
	3, 3, 0, 3, 0, 3, 0, 3, 0, 1,
	0, 6, 7, 3, 6, 3, 1, 3, 1, 1,
	4, 2, 1, 3, 1, 3, 8, 5, 3, 4,
	3, 0, 2, 2, 0, 10, 3, 2, 0, 1,
	3, 1, 1, 3, 3, 5, 1, 1, 3, 3,
	1, 2, 4, 4, 2, 3, 5, 5, 1, 3,
	1, 0, 1, 2, 3, 2, 4, 2, 3, 0,
	2, 0, 2, 1, 2, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 8, 8, 8, 2, 4, 4,
	4, 2, 2, 2, 2, 3, 1, 3, 6, 1,
	0, 1, 0, 1, 0, 1, 1, 0, 1, 5,
	1, 0, 1, 0, 3, 1, 3, 3, 4, 5,
	2, 2, 0, 2, 2, 1, 1, 1, 0, 1,
	0, 2, 2, 5, 4, 2, 3, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 2, 0, 4, 2,
	5, 3, 2, 0, 1, 3, 3, 5, 1, 1,
	1, 1, 1, 3, 2, 4, 4, 0, 4, 4,
	3, 4, 1, 5, 3, 4, 5, 5, 1, 5,
	1, 3, 2, 0, 3, 0, 2, 3, 1, 3,
	2, 0, 3, 5, 6, 4, 6, 4, 3, 2,
	1, 0, 5, 1, 0, 2, 2, 2, 1, 1,
	0, 1, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 2, 2, 1,
	0, 2, 5, 7, 2, 1, 2, 4, 3, 5,
	0, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 4, 6, 6, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 3, 0, 5, 4, 1,
	2, 1, 4, 1, 1, 2, 1, 1, 1, 1,
	1, 0, 1, 2, 5, 1, 4, 2, 5, 1,
	4, 3, 3, 0, 1, 2, 4, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	1, 0, 1, 4, 1, 3, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 5,
	4, 6, 3, 5, 4, 6, 4, 6, 5, 7,
	3, 3, 3, 3, 3, 4, 3, 2, 4, 2,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 4, 1, 3,
	1, 3, 3, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 5, 6, 6, 7, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 6, 1,
	1, 1, 1, 1, 1, 2, 1, 5, 5, 6,
	3, 1, 1, 1, 2, 2, 2, 4, 3, 5,
	6, 8, 6, 5, 4, 3, 2, 2, 4, 1,
	1, 1, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 6, 6, 8, 8, 6, 4,
	6, 6, 6, 4, 1, 3, 3, 3, 3, 3,
	4, 3, 3, 4, 3, 3, 4, 3, 3, 4,
	3, 3, 3, 4, 3, 4, 3, 4, 3, 4,
	4, 3, 6, 5, 5, 5, 4, 4, 3, 4,
	3, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 3, 3,
	3, 0, 1, 4, 2, 2, 2, 2, 2, 3,
	2, 2, 3, 0, 4, 1, 1, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 2, 3, 1, 2, 3, 2, 3, 2,
	3, 1, 0, 1, 3, 1, 3, 3, 3, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 1, 2, 3, 0, 3, 3, 2,
	2, 1, 2, 2, 3, 2, 1, 1, 1, 5,
	1, 2, 4, 2, 0, 1, 0, 3, 5, 1,
	0, 1, 2, 1, 0, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 3, 1, 1, 1, 1,
	5, 3, 1, 1, 3, 1, 1, 1, 1, 2,
	2, 1, 1, 2, 2, 1, 1, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 7, 1, 7, 5,
	3, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 484, -79, -50, -48, -82, -83, -68,
	-84, -78, -96, -100, -88, -102, -141, -146, -147, -148,
	-3, -36, -38, -51, -67, -69, -77, -86, -85, -87,
	-89, -93, -92, -81, -42, -97, -101, -110, -142, -143,
	-144, 86, 70, 131, 110, 116, 168, 311, 343, 353,
	337, -105, -106, 368, -37, -49, -99, -98, 63, 111,
	332, -4, -12, 27, 42, -39, -40, -41, 54, -56,
	-53, -62, -496, 88, -460, -70, -73, -500, 121, 137,
	186, 301, -90, -91, 339, 341, 138, -44, -43, 132,
	-158, -160, -103, -104, -145, -111, -112, -113, -114, -115,
	-116, -117, -118, -119, -120, -121, -122, -123, -124, -125,
	-126, -131, -127, -128, -129, -130, -132, -133, -134, -135,
	-136, -137, -138, 372, 420, 43, 382, 72, 124, 347,
	21, -5, -6, -7, -8, -9, -10, -11, -52, -54,
	-55, -57, -58, -59, -66, -60, -61, -459, -71, -72,
	-74, -75, -76, 338, -161, -159, 481, 434, -14, -19,
	-20, -15, -16, -18, -21, -17, -25, -30, -31, -27,
	-28, -26, -29, -32, -33, -34, -35, -23, -24, -13,
	-22, 452, 460, -164, -162, -163, -171, 360, 442, 397,
	484, 484, 484, 484, 484, 484, 484, 484, 484, 484,
	484, 484, 484, 484, 484, 484, 484, 484, 484, 484,
	-218, -223, -224, -225, -217, -189, -429, -432, 4, -426,
	-430, 143, 195, 267, 21, 22, 23, 24, 25, 27,
	28, 39, 41, 40, 42, 43, 48, 51, 52, 53,
	54, 55, 58, 63, 64, 69, 70, 71, 72, 73,
	74, 75, 81, 78, 79, 80, 83, 85, 86, 87,
	89, 91, 92, 100, 101, 102, 103, 105, 110, 111,
	114, 109, 113, 116, 119, 120, 121, 123, 125, 126,
	128, 129, 131, 132, 135, 133, 403, 134, 136, 137,
	138, 139, 149, 150, 151, 156, 158, 162, 163, 166,
	167, 169, 173, 175, 176, 177, 178, 179, 185, 186,
	188, 189, 190, 191, 196, 197, 201, 198, 207, 211,
	212, 213, 215, 219, 220, 221, 222, 223, 226, 225,
	228, 231, 232, 235, 236, 237, 240, 241, 242, 243,
	245, 246, 249, 247, 250, 248, 252, 253, 254, 251,
	257, 255, 259, 260, 265, 263, 261, 262, 269, 272,
	183, 274, 275, 278, 295, 282, 283, 284, 287, 288,
	291, 294, 296, 297, 298, 299, 300, 301, 302, 304,
	305, 309, 311, 312, 314, 316, 317, 318, 319, 320,
	321, 322, 324, 325, 332, 337, 334, 335, 336, 338,
	339, 340, 341, 343, 345, 346, 347, 348, 350, 352,
	369, 370, 384, 353, 354, 355, 356, 357, 358, 359,
	363, 361, 362, 364, 365, 366, 368, 371, 372, 374,
	375, 378, 380, 381, 382, 383, 385, 388, 389, 390,
	391, 386, 396, 394, 395, 398, 399, 400, 401, 402,
	404, 406, 414, 415, 417, 420, 421, 422, 412, 424,
	425, 428, 429, 430, 433, 431, 432, 434, 436, 439,
	440, 441, 447, 446, 453, 454, 456, 457, 458, 34,
	44, 45, 47, 49, 59, 60, 61, 65, 106, 107,
	130, 140, 141, 152, 164, 165, 170, 172, 180, 181,
	182, 202, 203, 205, 209, 229, 271, 273, 289, 293,
	306, 307, 308, 310, 323, 349, 376, 387, 392, 407,
	408, 409, 410, 416, 418, 442, 443, 444, 448, 455,
	280, -211, 2, -189, -189, 311, 26, 2, 26, 305,
	362, 399, 401, 2, -483, -267, 2, 26, -192, -189,
	88, 168, 360, -211, 2, -483, -267, 24, 2, -189,
	2, -193, 2, 353, -189, 484, 83, 237, 64, 349,
	365, -108, 415, -107, 407, 355, -109, -417, 2, 257,
	-189, 484, 484, 484, 26, -201, -189, 397, 195, 102,
	395, 484, 2, 397, 298, 446, 361, 102, 320, 195,
	-492, 345, 171, 435, 411, -478, 2, 4, -430, -426,
	-228, -227, 397, 102, -225, -217, 474, -224, 484, 484,
	484, 2, 212, 213, 319, 318, 365, 366, 484, 484,
	2, 25, 57, 82, 85, 108, 139, 159, 162, 285,
	-497, 246, 295, 317, 364, 396, 404, 417, -491, 383,
	58, 355, -490, -492, 422, 119, -314, 102, 237, 167,
	429, 401, 399, 427, 114, 201, 432, 431, 484, 25,
	57, 67, 85, 119, 139, 159, 162, -499, 295, 317,
	352, 355, 364, 396, 404, 422, 417, 2, 446, 361,
	397, 195, 102, -492, 315, -79, 2, 481, 30, 29,
	368, -154, 397, 206, 2, -189, 212, 213, 2, 484,
	484, 160, -478, 2, 212, 213, 2, 206, 2, 58,
	357, 484, 484, 484, 484, 484, 484, 484, 484, 484,
	484, 484, 484, 484, 484, 484, 484, 484, 484, 484,
	484, 484, 484, 484, 484, 484, 484, 484, 484, 2,
	-139, 365, 383, 177, 42, 64, 26, 316, 69, 299,
	103, 169, 195, 196, 220, 82, 83, -316, 41, 213,
	212, -368, 398, 356, 362, 394, 353, 415, 88, 436,
	346, 458, 320, 321, 133, 4, 102, 257, 367, 407,
	237, 74, -506, 2, 397, -509, 2, 415, 415, 2,
	-509, 2, -509, 2, -509, 2, -510, 415, 455, 484,
	484, 484, 484, 484, 484, 484, 484, 484, 484, 484,
	484, 484, 484, -159, -161, -160, 484, 484, 484, 484,
	484, -139, 365, 2, 64, 26, -261, -262, 426, 204,
	127, 286, -158, -160, 2, -459, -415, 2, -342, -433,
	-344, 472, 473, 465, 266, 459, -356, 108, 427, 280,
	-432, -345, -358, 130, 349, -282, 8, 9, 5, 6,
	7, -198, -346, -352, 419, 142, 270, -231, 485, 10,
	481, -456, -160, -357, 35, 172, 56, -419, -230, -199,
	-391, 205, -229, -217, -453, -454, 4, -426, -427, -420,
	-393, -401, -397, -398, -405, -189, -429, 67, 94, 95,
	93, 98, 97, 239, 238, 99, 96, 367, 435, 57,
	34, 180, 181, 209, 271, 182, 65, -455, 120, -428,
	202, 203, 376, 45, 323, 152, 107, 106, 273, 49,
	47, 443, -402, 104, 407, 408, 409, 410, 164, 165,
	140, 141, 293, 308, 392, 416, 418, 170, 229, 90,
	161, 200, 184, 208, 210, 214, 230, 233, 258, 264,
	268, 290, 292, 344, 373, -513, 444, 387, 59, 60,
	-461, 324, -462, -211, -461, 484, 484, 486, 484, -255,
	-256, -257, 2, 26, 117, 481, 2, -372, 2, -373,
	-377, -160, 224, -376, 481, -374, 479, -218, 281, -457,
	350, -453, -454, -198, -217, -230, 4, -426, -428, -258,
	481, 483, 102, 397, 68, 195, -309, 481, -189, 26,
	280, 411, 486, -354, 481, 280, 160, 283, -189, 2,
	2, 369, 2, 481, -108, 61, 415, 40, 365, -329,
	2, -330, -186, -187, -188, -382, 211, 314, 322, 461,
	458, -415, -493, 160, 464, 411, -415, -283, 483, 2,
	2, 2, 2, 2, -377, 180, -218, 2, -215, -418,
	4, -426, -430, -427, -431, -429, 26, 29, 30, 31,
	33, 35, 36, 37, 38, 50, 56, 57, 62, 66,
	68, 77, 82, 88, 93, 94, 96, 95, 97, 98,
	99, 108, 112, 115, 117, 118, 122, 124, 127, 142,
	144, 157, 159, 160, 168, 171, 174, 187, 199, 204,
	206, 224, 227, 234, 238, 239, 266, 270, 276, 280,
	281, 285, 286, 303, 313, 326, 342, 360, 367, 379,
	393, 397, 405, 411, 413, 419, 426, 427, 435, 437,
	445, 449, 450, 451, 452, -432, 67, 2, -377, 180,
	2, -220, 180, -377, -223, 2, -202, -189, 2, -214,
	-418, 2, -234, 180, -218, -219, -223, -424, 180, 2,
	-422, 10, -421, 5, 4, -426, -430, -427, -94, -424,
	481, 411, 486, -273, -227, -228, -266, -189, 483, -342,
	2, -97, 2, -342, 180, 2, -97, 180, 2, -342,
	180, 2, -97, 180, 2, 2, 2, 417, 2, 85,
	180, -189, 397, 101, 2, 336, -498, 352, 421, 446,
	2, 2, 2, 2, 2, 2, 397, -207, 2, -189,
	157, -226, 180, 2, -189, 361, -507, 324, -424, 180,
	2, -221, -223, -221, 195, 207, -202, 180, 2, 401,
	399, 401, 399, 160, 2, 206, 2, 206, 2, -378,
	2, -379, -373, -218, 479, 2, 2, 2, 2, 2,
	180, -189, 397, 101, 2, 222, 2, 2, 2, 2,
	2, 2, 2, 2, 2, -275, 180, 2, -218, -275,
	180, 2, -275, 180, 2, -315, 2, 77, -202, 180,
	2, -425, 180, 2, -424, -386, 2, -385, -421, 442,
	-79, 481, -79, 481, 365, 481, -424, -218, -218, -342,
	-97, -95, -94, 160, -342, -97, -154, 157, 2, 102,
	397, -139, 2, 157, 437, 2, 8, 2, -424, 356,
	321, 149, 2, 369, 2, 370, 64, -316, 458, 64,
	160, 2, 160, 2, -299, 2, 452, -481, 2, 280,
	160, 2, 160, 2, 160, 2, 160, 2, 160, 2,
	318, 366, 213, 2, -97, 449, -342, 449, 2, 414,
	221, 134, 160, -299, 2, 160, 2, 160, 2, 5,
	2, 384, 2, 211, 314, 384, 2, -218, -501, 2,
	397, 446, 361, 2, 2, 78, 79, 160, 2, 160,
	2, 160, 458, 2, -292, -377, -328, -329, -328, 411,
	-261, -262, -139, 369, 2, -165, -290, -167, 157, -318,
	-319, -168, 234, 144, 276, -169, -298, 26, 117, -298,
	-298, 52, 482, 482, 11, 12, 66, 39, 472, 473,
	474, 475, 155, 476, 477, 470, 471, 469, 462, 463,
	467, 217, 218, 84, 466, 464, 76, 244, 351, 145,
	146, 147, 148, 333, 193, 32, 194, 14, 15, 16,
	31, 285, 233, 459, 184, 373, 465, 17, 18, 19,
	208, 210, 268, 44, 187, -197, -236, -342, -342, -342,
	-342, -342, 292, 481, -288, -337, 479, -160, 481, 481,
	481, -414, 8, -160, -342, -356, 482, -280, 481, -160,
	-356, -351, 481, 349, 479, 481, -359, -342, 5, 5,
	5, 481, 483, -463, 453, 157, 481, 481, 481, 481,
	481, 481, 481, 481, 481, 481, 481, 481, 481, 481,
	481, 310, -395, 481, -394, 481, -394, -394, 447, -392,
	481, 460, 454, 481, -392, 481, 481, 481, 481, 481,
	481, 481, 481, 481, 481, 481, 481, 481, 447, 486,
	-461, -258, 481, -284, -380, -342, 474, -284, -284, 280,
	-277, -342, 90, -302, 214, 258, 161, 230, 344, 200,
	-339, 485, -339, -367, 460, -160, -374, -217, -160, -376,
	481, -372, -367, -80, -414, -67, -77, -85, -97, -110,
	-143, -144, 474, -218, 481, 160, 481, 483, 160, -266,
	-418, -202, -218, -229, -230, -234, 116, -277, -478, -266,
	-192, 36, -353, -389, -390, -435, -434, -391, -400, -396,
	-399, 306, 307, -420, 47, 443, -402, 205, 4, -426,
	-428, 202, 203, 376, 45, 323, 152, 107, 106, 273,
	49, 407, 408, 409, 410, 164, 165, 444, 387, 59,
	60, -478, -266, 157, -417, -277, 36, -329, 2, 108,
	-422, 40, -511, 486, 232, -238, 243, 265, 176, 281,
	456, 274, -423, 5, 4, -352, -364, 108, 237, 205,
	-408, -410, 8, -409, 9, -411, 472, 473, -416, -415,
	92, 483, -418, -176, 334, -175, 23, 27, 121, 440,
	135, -248, 197, 298, 130, 380, 430, -487, -488, 354,
	402, 403, 80, 274, 334, 130, -295, -297, 36, 100,
	260, 294, 53, 190, 248, 249, 382, 448, 130, 334,
	-488, 334, -488, -178, 380, 430, -487, -488, 354, 334,
	-177, -248, 130, 485, -484, -458, 452, 130, -383, -382,
	-425, -94, -273, 486, 486, -418, 474, 130, 130, 130,
	130, 2, 2, 266, 2, 2, 2, 162, -490, -499,
	2, 2, 2, -218, 180, -260, 280, -480, -274, 397,
	-218, 266, -220, 180, 2, -223, 446, -484, 266, 36,
	481, 2, -315, 2, 195, -458, 266, -378, -232, -218,
	-373, -232, 368, -211, 36, -339, -339, 130, 2, 2,
	2, -189, -179, 486, 55, 340, 130, -179, 130, -179,
	130, -235, 180, -234, -179, 130, 486, 130, 482, 486,
	-386, -386, -424, -152, 452, 160, 88, 481, 481, -154,
	-383, 486, -95, -424, -480, -202, 2, -218, 2, 397,
	215, -152, -424, -424, -424, -417, 26, 370, 2, 318,
	366, 79, 370, 2, -218, 397, 102, 195, 70, -482,
	157, -479, 345, -478, -218, 102, -218, 102, -218, 102,
	-218, -218, 2, 2, 2, 2, 75, 75, 157, 2,
	414, 2, 414, 2, -189, -189, -189, 232, -218, 157,
	397, 195, 397, 195, 102, 397, -179, 486, -193, -165,
	-290, -417, -291, -290, -166, -165, -168, 157, 322, 431,
	260, 371, 219, -319, -318, 26, -342, -323, 151, 259,
	-342, -321, -344, 472, 473, -409, -411, -276, 274, -159,
	-159, -159, -263, -369, -342, 313, 195, -404, -389, -389,
	-216, -418, 407, -342, -342, -342, -342, -342, -342, -342,
	-342, -342, -342, -342, -342, -342, -342, -342, -342, -342,
	-342, -342, -342, -342, -342, -342, -342, -342, -342, -342,
	-342, -342, -342, -342, -342, -342, -342, -342, 233, 184,
	373, 44, 187, -342, 411, -342, -342, -342, -342, 255,
	266, 270, 419, 142, 428, 117, 274, -514, 393, 38,
	-349, -160, -281, 481, -363, 33, 379, 26, -356, 481,
	2, -337, -342, -338, -278, -277, -277, 482, 445, 26,
	117, 474, 2, 482, 486, 36, 482, -342, -278, -355,
	-351, -277, -362, -361, 449, -310, -311, 457, 251, 105,
	178, 250, -312, 359, -412, 8, -418, 474, -464, 150,
	171, 481, 482, 2, 482, 2, 482, -342, 2, 482,
	-342, 2, 482, -342, 2, 482, -342, 2, 482, 2,
	-342, -342, -342, -342, -342, -342, -342, -277, 8, -412,
	-412, 407, 407, -412, -412, -412, -403, 306, 235, 307,
	166, 254, 252, 253, 165, -403, -304, 2, -406, -277,
	4, 457, 251, 105, 178, 250, 359, 5, -304, 2,
	-305, 2, -342, -277, -306, -343, -344, 472, 473, 465,
	-356, -307, 2, -342, -278, -342, 50, 227, 413, -308,
	-342, 160, -277, -277, 2, -277, 2, -462, 36, -277,
	-269, 486, 160, 36, 4, -269, -269, 481, 482, 486,
	-303, 175, 247, 242, -303, -372, -302, 214, -300, 290,
	-300, -300, -367, -203, 479, 487, -418, -367, -366, -365,
	36, -211, 287, -367, -367, 483, 482, -366, 480, -476,
	481, 484, 484, 484, 484, 484, -218, 481, -277, -418,
	385, 482, 483, 208, 208, 208, 208, 350, 482, 411,
	452, -79, 282, 482, 486, -268, 35, 479, 483, 2,
	2, -407, 447, 481, 481, -311, 481, 160, -267, -493,
	482, 415, -330, -237, 322, 378, 335, 363, 395, 8,
	9, 8, 9, 486, -418, 486, -494, 82, 411, 68,
	-333, 180, 68, -436, -205, 82, -437, -189, 62, 427,
	313, 159, 128, -494, 82, 313, -494, 82, 82, 368,
	383, 52, -377, 39, 39, 26, -97, 228, 160, 458,
	397, 195, 411, -377, -297, -389, 100, 248, 249, 52,
	-413, -408, 472, 473, -413, 52, -413, -413, -413, 452,
	-220, -377, 411, 411, 486, 39, 39, 26, -97, 228,
	160, 411, -234, -203, -485, -194, 89, 261, 241, 262,
	-195, -196, 300, 439, -424, -149, 191, 482, -383, -227,
	-189, 483, -342, -97, -342, -97, 130, 2, -507, 222,
	481, -241, 266, 160, -266, -384, 206, 486, -274, 130,
	-296, -295, 266, -222, 180, 2, -218, 130, 481, 125,
	320, 2, -204, 180, -190, -189, -315, -182, 400, 130,
	-294, 437, -324, -97, 481, 108, 36, -324, -285, -286,
	-381, -287, -205, 481, -211, -189, 2, -218, -275, -275,
	-275, -179, 486, 130, -202, -424, -425, -79, -385, 482,
	482, 482, -151, 284, -150, -189, 5, -154, 437, -240,
	-334, -333, -440, -441, -436, 233, 195, 427, 207, 143,
	-259, -206, -205, 101, -152, -94, -383, -152, -152, -383,
	-383, -218, 157, -152, -152, -152, 2, 2, -299, -218,
	-202, -234, -218, -266, -266, -299, -202, -299, -202, -299,
	-202, -97, -342, 365, 157, 157, 483, -299, 320, 102,
	397, 298, 195, -218, -234, -218, -234, -202, -218, -377,
	-291, -166, 281, 219, 371, -321, -322, -344, 349, 350,
	-322, 349, 350, 8, 9, 8, 9, -170, 375, 269,
	-275, 486, -173, 37, 115, 219, -218, 458, 126, -342,
	-342, 411, -514, 393, -349, 126, -342, 255, 270, 419,
	142, 428, 117, 274, 160, 481, -343, -343, 482, -279,
	-342, -342, 480, 489, 482, -262, 486, -261, -342, -277,
	-277, 482, 483, -277, -266, 480, 480, 486, 482, -360,
	-361, 122, -342, 411, 411, 411, 411, 481, 482, 483,
	-469, 291, 481, 481, -342, 482, 482, 482, 482, 36,
	486, 486, 486, 482, 486, 486, 486, 482, 482, 482,
	486, 482, 458, 458, 482, 482, 482, 482, 486, 482,
	486, 482, 160, 482, 482, -313, 303, 482, 11, 12,
	472, 473, 474, 475, 155, 476, 477, 470, 471, 469,
	462, 463, 464, 76, 244, 351, 14, 15, 16, 208,
	187, -343, -343, -343, 482, -347, -348, 160, 157, 36,
	-308, -308, -308, 482, 160, -277, 482, 482, 481, 482,
	-336, -335, 450, -380, -270, 2, -372, -213, -418, -336,
	-336, -277, -342, 214, 214, -301, 437, 280, -303, -372,
	-366, -414, -341, -340, 158, 37, 115, 263, 183, -366,
	-211, -258, -366, -366, -418, -367, -367, -365, 482, -477,
	-414, 482, -271, -375, -457, -262, 483, -152, -418, -140,
	5, 270, -140, -140, -140, -266, 24, 304, -389, 479,
	480, 8, -418, 481, -412, -412, -412, -266, 160, -415,
	-329, 425, 73, 322, 407, -415, -175, 334, -205, -205,
	-218, 266, -333, 180, -181, 266, -389, -212, -189, 481,
	481, 219, 219, 437, -205, -212, 219, 180, -205, 180,
	-212, -212, -486, 322, 275, -342, 236, 320, 267, -176,
	334, -97, -97, -97, 481, -493, 437, 116, -218, -234,
	-218, -222, 334, 264, -229, -413, -413, -295, 334, -220,
	-202, -177, -97, -97, -97, 481, -203, -178, 334, -194,
	-424, 270, 433, -484, -152, 160, -149, 474, -189, 446,
	-189, -239, -242, -240, -205, -157, 454, 452, 130, -233,
	-218, 479, -152, -424, -218, -226, 130, -258, 266, -424,
	2, 481, 2, 280, 266, -204, 180, -183, 123, -512,
	464, -202, -336, -270, -293, -327, 342, 280, -259, 442,
	-211, -293, -272, 486, 160, 464, 483, -259, 2, -179,
	-179, -179, -234, -235, -179, -79, -79, -152, 486, 481,
	464, 464, 481, -424, -424, 482, 486, -218, -204, 195,
	195, -210, -190, 482, 486, 483, 481, -152, 160, -45,
	452, 397, 485, -299, -299, -299, 365, 365, -189, -214,
	-202, -218, -215, -234, 157, 157, 431, -322, 281, 240,
	-369, -174, 272, -218, 485, -342, -342, 126, 126, -342,
	-343, -343, -342, 126, 160, 481, -342, -353, 31, 31,
	482, 486, -338, -342, 482, 445, -262, -262, 482, 474,
	-418, 485, 482, -351, 124, -342, 405, 251, 178, 250,
	-312, 250, -312, -312, -412, 5, -418, 474, -470, -208,
	481, -189, 450, -261, 482, -404, -389, -342, -342, -342,
	-342, -342, -412, -392, -392, -412, -412, -342, -347, -342,
	-404, -389, -343, -343, -343, -343, -343, -343, -343, -343,
	-343, -343, -343, -343, -343, -343, -343, -343, -343, -343,
	-343, 117, 266, 274, -343, -348, -347, -342, -342, -389,
	482, 482, 482, -277, -79, -289, 171, -342, -383, 486,
	-289, -289, 482, -372, -372, 481, -342, 214, 480, 486,
	488, 464, -258, 483, -365, -366, 480, 482, 486, 482,
	486, -326, 36, 482, -418, 283, 5, 8, 479, 480,
	483, -412, 482, 482, 482, -266, -342, 411, 411, 130,
	266, 439, -442, -437, 128, -342, -264, -370, -342, 481,
	481, 2, -172, 121, 368, -495, 2, 437, 130, -179,
	130, -179, 456, 481, 481, 411, 452, -277, -342, -153,
	108, -417, -488, 485, -488, 485, 411, 411, 452, -277,
	411, -424, 270, -425, -152, 2, -222, 2, 482, 482,
	486, -443, 36, 278, 481, 278, -218, -63, 452, -382,
	-414, -220, 36, 130, -484, -387, -388, 5, -218, 130,
	280, 266, -184, 226, -512, -422, -458, -262, -293, -284,
	267, 81, 482, -336, -286, -270, -342, 2, 482, -179,
	-150, -151, -424, -424, -424, -152, -154, -154, -334, -243,
	481, -204, -190, 481, -154, -206, 2, -425, -97, 284,
	-218, 474, -299, -250, -249, 298, 274, -250, 349, 349,
	281, 151, 223, -173, -203, -342, -342, 126, 31, 31,
	-342, -342, -353, 482, -342, -342, -277, 480, 5, -342,
	482, 482, 8, -342, 482, 483, -471, -189, -342, 482,
	482, 482, 486, 486, 482, 482, 482, 482, 482, 482,
	482, -348, 160, 117, 274, 481, 482, 482, -350, 174,
	52, -372, -350, -350, -301, -266, -372, -340, -203, 479,
	-418, -414, -375, 481, 483, 480, 2, 479, -418, 482,
	-205, -205, -333, 130, -444, 82, -446, 66, 143, 88,
	266, 270, 427, 313, 62, 108, 326, -503, 36, 482,
	482, 486, -173, -264, -266, 266, 390, 108, 266, 108,
	101, 422, 69, -205, -212, -266, -266, -218, 136, 482,
	486, 464, 2, 474, 474, -222, -220, 136, 482, -203,
	-258, -246, 198, -205, -441, -438, -439, 313, -445, -447,
	143, 313, -97, -156, -155, -189, 5, 2, 481, -241,
	284, 480, -296, -97, -222, 482, 486, -317, 437, -203,
	-218, 130, -185, 225, -512, -422, -182, -320, -318, -325,
	481, 280, -97, -262, 464, 482, 482, 101, 101, 189,
	129, -264, 481, 481, -266, 101, 482, -46, -47, 195,
	82, 302, -215, 397, 195, 481, 481, -173, -342, -342,
	-342, 482, -262, -418, 474, -465, 298, 482, -342, -342,
	-343, 160, 481, -353, -466, 451, -342, -277, -466, -466,
	482, -414, 2, 479, 2, -333, -212, -216, -209, -189,
	143, 180, 270, 219, 481, -343, -218, 481, 2, -504,
	112, 199, -332, -505, 87, 391, 188, -370, -174, 482,
	482, 270, 270, -342, -389, 481, -179, -179, 482, 482,
	-342, 411, -417, 86, -415, 2, -488, -342, 411, 36,
	-247, -248, 187, -443, 219, -209, 219, -502, 452, 482,
	486, 464, 464, -239, -157, -64, -65, 412, -382, -258,
	5, 481, -189, 280, 481, -203, -512, -422, -183, -293,
	118, -266, 82, -320, -349, -152, 481, 481, -244, 71,
	83, 109, 179, 163, 196, 383, 388, 26, -244, 482,
	-264, -264, 482, 481, -152, 486, 26, 481, 26, 481,
	-218, -234, -277, -277, 482, -262, 52, 482, 482, -343,
	-353, 482, -467, -468, -208, 480, 2, -446, -209, 266,
	437, -342, -191, 481, -342, 199, 113, 185, -246, 481,
	-331, 437, 326, -200, 66, -264, 481, 481, 481, 464,
	160, 481, -97, -157, 296, 481, -245, 280, 101, 260,
	-155, -345, -345, 482, 36, -65, 9, 36, -264, -218,
	-264, 280, -422, -184, 431, 267, 482, -212, -293, -425,
	-425, -331, 482, 482, -425, -47, -266, -266, 482, 482,
	-472, 320, 350, 173, -277, 482, 486, 36, 130, 175,
	482, -448, 245, -189, 482, 113, 185, -247, -266, -246,
	175, -218, -489, 437, -216, 482, -252, -251, -249, -254,
	-253, -249, -277, -415, 86, 296, -277, -245, -218, -265,
	-371, -205, 72, 101, -246, -97, -97, 482, -317, 482,
	-218, -185, 368, -335, 482, 482, -332, -331, 482, 482,
	482, 482, -473, -474, 44, 424, 92, -342, -473, -473,
	-468, -470, 143, 452, -449, -452, -451, 280, 374, 161,
	297, 482, 390, 448, -504, 482, 452, -258, -342, -331,
	482, 486, 442, 482, 486, 442, 482, 160, 482, 481,
	482, 486, 312, 114, 121, -247, -502, -331, 481, -332,
	481, -285, -152, -152, -246, -332, -152, -475, 128, -474,
	309, 156, 349, 309, 156, -475, -475, -209, 48, -451,
	280, -452, 280, 431, 114, 48, -448, -246, -251, 187,
	-253, 160, 296, -266, -371, 350, 350, 2, -157, -245,
	-332, -264, -246, -264, -336, -247, -246, 92, 171, 406,
	260, 31, 464, -450, 260, 340, 55, 368, -450, 464,
	-449, 481, 481, 482, 2, -245, -246, 482, -247, 482,
	-247, 349, 288, -474, -342, 22, 270, 108, -342, -504,
	-277, -277, -180, 55, 340, -247, -331, -508, 450, -332,
	482, 482, -508, -332, 2, -246, -247, 411, -246, -247,
	481, -247, -508, -277, -508, 482, -247,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 24, 25, 26,
	366, 367, 369, 370, 371, 373, 374, 376, 378, 380,
	382, 383, 385, 387, 389, 390, 391, 392, 393, 395,
	397, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 455, 457, 0, 988, 990, 992, 994, 0, 585,
	0, 28, 29, 0, 0, 193, 195, 197, 0, 222,
	224, 225, 227, -2, 0, 323, 324, 326, -2, -2,
	0, 0, 444, 446, 0, 0, 0, 466, 467, 0,
	1076, -2, 460, 462, 464, 529, 531, 533, 535, 537,
	539, 541, 542, 544, 546, 548, 550, 552, 554, 556,
	557, 559, 561, 563, 565, 567, 569, 571, 573, 575,
	577, 579, 581, -2, -2, -2, 0, -2, -2, -2,
	1006, 32, 34, 36, 38, 40, 42, 44, 275, 276,
	278, 280, 282, 284, 287, 288, 290, 1131, 328, 330,
	332, 334, 336, 0, -2, 1143, 0, 0, 46, 47,
	48, 49, 50, 51, 52, 53, 69, 70, 71, 72,
	73, 74, 75, 76, 57, 59, 60, 64, 65, 67,
	55, 0, 0, 1107, 1109, 1111, 1113, -2, 0, 0,
	7, 9, 11, 13, 15, 17, 19, 21, 368, 372,
	375, 377, 379, 381, 384, 386, 388, 394, 396, 398,
	867, 1758, 1775, 1776, 1777, 1780, 1781, 1782, 1783, 1784,
	1785, 2132, 2213, 2214, 1807, 1808, 1809, 1810, 1811, 1812,
	1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822,
	1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832,
	1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842,
	1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852,
	1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862,
	1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872,
	1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882,
	1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892,
	1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902,
	1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912,
	1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922,
	1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932,
	1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942,
	1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952,
	1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962,
	1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972,
	1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982,
	1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992,
	1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
	2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012,
	2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022,
	2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032,
	2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042,
	2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052,
	2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062,
	2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072,
	2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082,
	2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092,
	2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102,
	2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112,
	0, 422, 420, 1751, 423, 1965, 425, 427, 317, 318,
	319, 320, 321, 322, 0, 437, 431, 436, 438, 440,
	441, 442, 443, 417, 415, 0, 437, 1810, 435, 986,
	987, 981, 982, 1996, 1013, 456, -2, -2, -2, 2098,
	-2, 488, -2, 495, 2102, 1998, 500, 0, 502, -2,
	505, 989, 991, 993, 583, 584, 1761, 0, 0, 0,
	0, 30, 31, 0, 0, 0, 0, 0, 0, 0,
	0, 916, 917, 918, 0, 0, 157, -2, -2, -2,
	-2, 0, 0, 1848, 1719, 1777, 1722, 1717, 194, 196,
	198, 199, 0, 0, 0, 0, 0, 0, 223, 226,
	228, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	252, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, -2, 0, 0, 0, 0, 0, 0, 0,
	763, 755, 756, 958, 0, 0, 0, 0, 325, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	0, -2, 0, 0, 253, 358, 359, 0, 1132, 1132,
	0, 0, 0, 0, 174, 165, 0, 0, 732, 445,
	447, 0, 0, 160, 0, 0, 985, 0, 176, 0,
	0, 461, 463, 465, 530, 532, 534, 536, 538, 540,
	543, 545, 547, 549, 551, 553, 555, 558, 560, 562,
	564, 566, 568, 570, 572, 574, 576, 578, 580, 582,
	590, 0, 0, 0, 0, -2, -2, 0, 0, 0,
	-2, -2, 0, 0, 0, 0, 0, 0, 0, -2,
	0, 0, -2, -2, -2, 0, 0, 0, 0, -2,
	-2, 0, 0, 0, 0, 593, 595, 596, 597, 0,
	648, 665, 0, 907, 1133, 1015, 996, 1010, 1015, 998,
	999, 1000, 1001, 1002, 1007, 1009, 1003, 1004, 1005, 33,
	35, 37, 39, 41, 43, 45, 277, 279, 281, 283,
	285, 289, 291, -2, 1105, 1106, 329, 331, 333, 335,
	337, 448, 0, 450, 0, 594, -2, 0, 1137, 1137,
	1137, 0, 0, 1106, 1104, 0, 453, 454, 509, 510,
	1364, 0, 0, 0, 0, 0, 1616, 1448, 0, 511,
	-2, 1479, 1481, 2073, 2098, 1615, 1483, 1484, 1485, 1486,
	1487, 0, 1489, 1490, 1491, 1492, 1493, 1494, 0, 1496,
	0, 1501, 1502, 1503, 0, 2080, 1696, 1771, -2, 0,
	0, 2086, 1767, 0, 1582, 1519, -2, -2, 1794, 1773,
	1296, 1297, 1298, 1299, 1300, -2, -2, 2115, 1523, 1524,
	1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 0,
	2062, 2081, 2082, 2087, 2089, 2083, 2070, 1544, 1858, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1323, 1332, -2, -2, -2, -2, -2, -2,
	2074, 2075, 2092, 2095, 2101, 2106, 2107, 2079, 2088, 2116,
	2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126,
	2127, 2128, 2129, 2130, 2131, 1324, -2, -2, -2, -2,
	1123, 1975, 1126, 867, 1124, 1108, 1110, 0, 1112, 0,
	0, 0, 1117, 1140, 1138, 0, 1179, 1121, 1122, 1197,
	1197, 1221, 0, 1202, 0, 1221, 1132, 1247, 0, 1208,
	1991, 1520, 1521, 0, 1777, 1772, -2, -2, 2113, 0,
	0, 0, 0, 0, 0, 0, 418, 0, 424, 426,
	0, 0, 0, 0, 0, 0, 0, 0, 1012, 458,
	459, 0, 483, 0, 487, 2069, -2, 1816, 2007, -2,
	491, 1016, 1020, 1021, 1022, 1023, 0, 0, 0, 0,
	0, 497, 0, 0, 484, 485, 503, 506, 0, 586,
	587, 588, 589, 54, 0, 2081, 1247, 56, 0, 1741,
	1802, 1803, 1804, 1805, 1806, 2114, 2133, 2134, 2135, 2136,
	2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146,
	2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156,
	2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166,
	2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176,
	2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186,
	2187, 2188, 2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196,
	2197, 2198, 2199, 2200, 2201, 2202, 2203, 2204, 2205, 2206,
	2207, 2208, 2209, 2210, 2211, 2212, 2115, 58, 0, 2081,
	61, 0, 2081, 0, -2, 66, 0, 1747, 68, 0,
	1744, 77, 0, 2081, 0, 1716, -2, -2, 2081, 915,
	177, 178, 1790, 1791, 1798, 1799, 1800, 1801, 1234, 161,
	0, 0, 0, 724, 1713, 1718, 725, 1723, 0, 200,
	201, 202, 203, 204, 2081, 206, 207, 0, 209, 210,
	2081, 212, 213, 0, 215, 229, 230, 0, 232, 0,
	2081, 0, 0, 0, 238, -2, 254, 0, 251, 0,
	242, 243, 245, 246, 247, 248, 0, 295, 293, 1752,
	0, 733, 2081, 735, 1757, 0, 0, 936, -2, 2081,
	912, 941, 1755, 0, -2, 0, 1130, 2081, 1030, 759,
	760, 761, 762, 0, 314, 0, 1043, 0, 1045, 0,
	1066, 1253, 1197, 1197, 0, 255, 256, 257, 258, 259,
	2081, 0, 0, 0, 264, 0, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 152, 2081, 340, 356, 152,
	2081, 343, 152, 2081, 346, 0, 349, 956, 152, 2081,
	352, 353, 2081, 355, 179, 0, -2, 411, 1760, -2,
	361, 0, 362, 0, -2, 0, 191, 0, 0, 730,
	731, 1234, 163, 0, 983, 984, 0, 0, 468, 0,
	0, 591, 592, 0, 0, 602, 603, 604, 191, 1999,
	1973, 1875, 609, 0, 612, 615, -2, 0, 0, 0,
	0, 619, 0, 624, 625, 626, 0, 729, 628, 0,
	0, 630, 0, 634, 0, 637, 0, 639, 0, 641,
	-2, -2, -2, 652, -2, 0, 656, 0, 658, 0,
	0, 0, 0, 673, 674, 0, 679, 0, 682, 683,
	684, 685, 686, 0, 688, 689, 690, 691, 0, 693,
	694, -2, -2, 698, 700, 0, 707, 0, 711, 0,
	715, 0, 598, 599, 152, 1251, 995, -2, 997, 0,
	-2, 0, 449, 0, 452, 1158, 1091, 1088, 0, 1155,
	1156, 1092, 0, 0, 0, 1099, 0, 1135, 1136, 0,
	0, 0, 1078, 1079, 0, 0, 0, 0, 1621, 1622,
	1623, 1624, 1625, 1626, 1629, 1630, 1627, 1628, 1631, 1632,
	0, 0, 0, 0, 0, 1633, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1634, 1635, 1636,
	0, 0, 1638, 0, 1640, 0, 0, 0, 0, 0,
	0, 1427, 1429, 1704, 0, 0, 1637, 1369, 1370, 1371,
	1406, 1407, 0, 0, 1480, 1701, 1700, 1482, 0, 1652,
	0, 1495, 1737, -2, 0, 1616, 1647, 0, 0, 1504,
	1505, 1506, 0, 0, 1652, 0, 0, 1695, 1516, 1517,
	1361, 0, 0, 1584, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1310, 1309, 0, 1311, 0, 1312, 1313, 1320, 1333,
	0, 0, 0, 0, 1337, 0, 0, 0, 0, 0,
	0, 0, 1676, -2, 0, 0, 0, 0, 1325, 0,
	1125, 0, 0, 1183, 1705, 1709, 1710, 1183, 1183, 0,
	0, 1653, 1244, 1244, 0, 0, 1240, 1240, 1240, 1238,
	1221, 0, 1221, 1231, 0, 1221, 1221, 0, -2, 1202,
	0, 0, 1231, 0, 1215, 399, 401, 403, 405, 406,
	407, 409, 1248, 1249, 0, 0, 0, 0, 0, 0,
	1778, 0, 0, 0, 1763, 0, 0, 0, 0, 429,
	439, 1132, 0, 1655, 1270, 1274, 1275, 1276, 1277, 1278,
	1279, 0, 0, 1271, -2, 1321, 1323, 1344, 1795, 1796,
	1797, 1304, 1305, 1306, 1307, 1308, 1316, 1303, 1303, 1303,
	1314, 1343, 1335, 1343, 1339, 1290, 1291, 1326, 1327, 1328,
	1329, 0, 433, 0, 0, 0, 0, -2, 493, 498,
	499, 0, 0, 1018, 0, 1024, 520, 521, 522, 1026,
	1027, 0, 496, 523, 524, 525, 526, 527, 528, 0,
	1725, 1726, 1727, 1728, 1731, 1732, 0, 0, 494, 513,
	501, 0, 507, 78, 978, 117, 0, 978, 978, 0,
	0, 139, 0, 0, 0, 0, 0, 0, 102, 113,
	90, 91, 0, 0, 0, 0, 62, 889, 0, 892,
	0, 0, 0, 0, 0, 0, 0, 905, 0, 0,
	101, 0, 96, 80, 0, 0, 0, 103, 115, 0,
	143, 145, 0, 0, 913, 0, 1129, 0, 182, 1233,
	0, 1234, 723, 0, 0, 1778, 1721, 0, 0, 0,
	0, 231, 233, 0, 235, 236, 237, 0, 935, 0,
	244, 241, 286, 838, 2081, 0, 0, 312, 307, 0,
	309, 0, 888, 2081, 886, 1756, 0, 910, 0, 0,
	0, 942, 1787, 951, 957, 1032, 0, 316, 0, 1046,
	1048, 0, 0, 1254, 0, 1256, 1257, 0, 261, 262,
	263, 0, 338, 0, 150, 151, 0, 341, 0, 344,
	0, 152, 2081, 1711, 350, 0, 0, 0, 1132, 0,
	0, 0, 0, 167, 0, 0, 0, 0, 0, 0,
	191, 0, 1234, 191, 191, 1234, 470, 1234, 472, 0,
	0, 605, 191, 191, 191, 610, 611, 613, 614, -2,
	-2, 708, 616, 617, 676, 0, 0, 0, 675, 627,
	0, 717, 1987, 727, 676, 1848, 676, 1848, 676, 1848,
	638, 640, 643, 668, 651, 655, 0, 0, 0, 660,
	0, 662, 0, 664, 676, 677, 680, 687, 692, 0,
	0, 0, 0, 0, 0, 0, 906, 0, 1008, 1158,
	1091, 451, 1082, 1157, 1083, 1090, 1093, 0, 0, 1095,
	0, 1097, 0, 1153, 1154, 1161, 1162, 0, 1172, 1173,
	1165, 0, -2, 0, 0, 1168, 1169, 1101, 0, 1118,
	1119, 1120, 1144, 1145, 967, 0, 2213, 1365, 1265, 1366,
	1367, 1740, 0, 1372, 1373, 1374, 1375, 1376, 1377, 1378,
	1379, 1380, 1381, -2, -2, -2, -2, -2, -2, -2,
	-2, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398,
	1399, 1400, -2, -2, -2, 1404, 1405, -2, 1639, 1641,
	0, 1704, 0, -2, 0, -2, -2, -2, -2, 1424,
	0, 1426, 1431, 1433, 1435, 0, 0, 0, 0, 1703,
	1445, 1687, 1688, 0, 0, 1618, 1619, 1620, 1430, 0,
	1449, 1702, 1699, 0, 0, 1651, 1143, 1508, 0, 0,
	0, 0, 1515, 1500, 1649, 0, 1648, 0, 0, 0,
	1659, 0, 1694, 1690, 0, 1738, 1360, 1347, 1348, 1349,
	1350, 1351, 1352, 1362, 0, 1735, 1764, 1770, 1592, 0,
	0, 0, 1545, 1546, 1547, 1548, 1549, 0, 1551, 1552,
	0, 1554, 1555, 0, 1557, 1558, 0, 1560, 1561, 1562,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1282, 1283, 1284,
	1285, 1286, 1287, 1288, 1289, 0, 0, 1564, 0, 1662,
	-2, -2, -2, -2, -2, -2, -2, -2, 0, 1566,
	0, 1568, 1653, 1673, 0, 0, 1450, 0, 0, 0,
	1616, 0, 1571, 1653, 1681, 0, 0, 0, 0, 0,
	1653, 0, 1686, 0, 1578, 0, 1580, 1127, 0, 0,
	1260, 0, 0, 0, 1708, 1260, 1260, 0, 1178, 0,
	0, 1241, 1242, 1243, 0, 0, 1244, 0, 1235, 1239,
	1236, 1237, 1231, 1194, 0, 0, 1742, 1231, 1200, 1230,
	0, 867, 1220, 1231, 1231, 0, -2, 1204, 1221, 0,
	0, 400, 402, 404, 408, 410, 0, 0, 1143, -2,
	191, 866, 0, 0, 0, 0, 0, 419, 421, 0,
	0, 413, 0, 416, 0, 1261, 1264, 0, 0, 1280,
	1281, 0, -2, 0, 0, 1345, 0, 0, 0, 0,
	486, 0, 1017, 1025, 0, 517, 0, 519, 0, 1729,
	1733, 1730, 1734, 0, 508, 0, 0, 0, 0, 977,
	121, 2081, 0, 154, 0, 0, 831, 1748, 0, 0,
	0, 0, 1863, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 92, 0, 0, 0,
	0, 0, 0, 0, 890, 891, 893, 900, 902, 0,
	896, 1736, 0, 0, 897, 0, 899, 901, 903, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 93, 0,
	0, 0, 0, 1715, 931, 929, 923, 924, 925, 926,
	927, 928, 0, 0, -2, 191, 0, 162, 182, 1714,
	1724, 0, 205, 208, 211, 214, 0, 239, 0, 0,
	765, 738, 0, 0, 294, 191, 0, 0, 308, 0,
	884, 887, 0, 867, 2081, 922, 1754, 0, 0, 0,
	0, 940, 0, 2081, 1743, 1786, 1787, 1034, 1040, 0,
	1260, 0, 1064, 1049, 0, 0, 0, 1064, 1068, 1069,
	1071, 1072, 0, 0, 1255, 0, 265, 357, 152, 152,
	152, 347, 0, 0, 152, 180, 354, 360, 412, 1132,
	1132, 191, 189, 1950, 187, 184, 186, 0, 0, 0,
	766, 768, 769, 770, 771, 0, 1787, 0, 1901, 1787,
	0, 1052, 1054, 0, 158, 164, 191, 0, 306, 469,
	474, 600, 0, 606, 607, 608, 645, 670, 618, 620,
	621, 622, 0, 728, 726, 629, 676, 632, 676, 635,
	676, 654, 657, 659, 0, 0, 0, 672, 0, 0,
	0, 0, 0, 0, 0, 712, 713, 714, 716, 1252,
	1086, 1087, 1089, 0, 1098, 0, 0, 1167, -2, -2,
	1166, 1170, 1171, -2, -2, -2, -2, 1094, 0, 1103,
	1100, 0, 1152, 965, 966, 0, 0, 0, 0, -2,
	-2, 0, 0, 0, 1446, 0, -2, 1425, 1428, 1432,
	1434, 1436, 0, 0, 0, 0, 0, 0, 1642, 0,
	1644, 1447, 1697, 1700, 1614, 0, 0, 1142, 1143, 1143,
	0, 1514, 0, 1650, 0, 1657, 1658, 0, 1507, 0,
	1691, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1518, 0, 0, 0, 0, 1550, 1553, 1556, 1559, 0,
	0, 0, 0, 1539, 0, 0, 0, 1543, 1315, 1301,
	0, 1343, 1341, 1342, 1336, 1343, 1340, 1293, 0, 1292,
	0, 1563, 0, 1565, 1567, 0, 0, 1569, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1453, 1454, 1455, 1570, 1679, 1680, 0, 0, 0,
	0, 0, 0, 1576, 0, 1685, 1577, 1579, 1132, 1180,
	1175, 1259, 0, 1706, 1234, 1182, 1184, 1707, 1745, 1175,
	1175, 0, 1654, 0, 0, 1225, 0, 0, 0, 1227,
	1198, 0, 0, 1192, 0, 1188, 1189, 1190, 1191, 1199,
	867, 1229, 1201, 1205, 1764, 0, 1231, 0, 1216, 0,
	1218, 1250, 0, 1210, 1213, 0, 0, 192, 1779, 216,
	220, 221, 217, 218, 219, 428, 0, 0, 1656, 0,
	1266, 0, 1272, 0, 0, 0, 0, 432, 0, 482,
	-2, 515, 516, 518, 0, 514, 118, 978, 0, 0,
	969, 0, 123, 2081, 132, 0, 806, 0, 1746, 0,
	0, 0, 0, 0, 980, 0, 0, 2081, 152, 2081,
	152, 135, 138, 0, 142, 140, 0, 0, 797, 79,
	978, 82, 86, 94, 0, 0, 0, 100, 0, 0,
	0, 971, 0, 894, 895, 898, 904, 63, 0, 973,
	968, 144, 84, 88, 95, 0, 975, 81, 0, 930,
	908, 909, 0, 914, 155, 0, 191, 1720, 0, 0,
	0, 0, 0, 764, 849, 0, 0, 0, 0, 300,
	296, 0, 305, 311, 310, 734, 0, 0, 0, -2,
	937, 944, 939, 0, 0, 0, 2081, 1036, 1040, 0,
	1039, 1130, 1143, 315, 1041, 1064, 0, 0, 0, 1051,
	1047, 1044, 1260, 0, 0, 0, 0, 0, 260, 339,
	342, 345, 1712, 152, 351, 363, 364, 166, 0, 0,
	0, 0, 0, 191, 0, 0, 0, 775, 0, 1787,
	1787, 0, 1750, 0, 0, 0, 0, 159, 0, 471,
	0, 0, 0, 631, 633, 636, 661, 663, 676, 701,
	702, 792, 0, 792, 0, 0, 1096, 0, 1164, 1102,
	1146, 1147, 0, 967, 0, 1368, 1409, 0, 0, -2,
	0, 0, 1413, 0, 0, 0, -2, 0, 0, 0,
	1643, 1645, 0, 1699, 1509, 0, 0, 0, 1513, 1497,
	1498, 0, 1617, 1660, 1689, 1693, 0, 1353, 1354, 1355,
	1356, 1357, 1358, 1359, 0, 1739, 1765, 1769, 1590, 1591,
	1595, 1753, 0, 0, 1522, 0, 0, 0, 0, 0,
	0, 0, 0, 1334, 1338, 0, 0, 1661, 1672, 1674,
	1451, 1452, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463,
	1464, 1465, -2, -2, -2, 1469, 1470, 1471, -2, -2,
	-2, 0, 0, 0, 1675, 1677, 1678, 1682, 1683, 0,
	1573, 1574, 1575, 1684, 0, 1177, 0, 1258, 1181, 0,
	1177, 1177, 1139, 1223, 0, 0, 1246, 0, 1195, 0,
	1196, 0, 1228, 0, 1203, 1206, 1207, 1217, 0, 1209,
	0, 1212, 0, 1509, -2, 430, 414, 0, 0, 1268,
	0, 0, 1318, 1322, 1346, 434, 1232, 0, 0, 0,
	0, 153, 804, 830, 0, 0, 0, 960, 967, 0,
	0, 836, 125, 0, 0, 0, 133, 0, 0, 130,
	0, 137, 141, 0, 0, 0, 0, 0, 97, 98,
	99, 0, 104, 0, 105, 0, 0, 0, 0, 0,
	0, 933, 934, 181, 156, 234, 867, 240, 786, 837,
	0, 839, 0, 739, 0, 0, 838, 292, 0, 299,
	0, 888, 0, 0, 911, 0, 943, 945, 955, 0,
	0, 0, 1038, 1040, 0, 1031, 1032, 1160, 1042, 1062,
	-2, 1061, 0, 1143, 1070, 1067, 1073, 1074, 0, 348,
	188, 0, 183, 185, 0, 169, 0, 0, 767, 772,
	0, 0, 0, 0, 0, 1053, 1055, 0, 175, 0,
	601, 623, 671, 703, 791, 0, 0, 705, 0, 0,
	1163, 1150, 1151, 1148, 967, 1411, 1415, 0, 0, 0,
	1417, -2, 0, 1439, -2, -2, 1646, 1698, 1488, 1143,
	1510, 1512, 1499, 1692, 1363, 0, 1597, 1594, 0, 1581,
	1534, 1535, 0, 0, 1538, 1540, 1541, 1542, 1302, 1295,
	1294, 1671, 0, 0, 0, 0, 1572, 1128, 1586, 0,
	0, 1185, 1586, 1586, 1224, 0, 1226, 1193, 1186, 0,
	1765, 1219, 1211, 0, 0, 1262, 1267, 0, 1273, 1317,
	119, 120, 122, 0, 805, 0, 808, 0, 0, 0,
	0, 815, 816, 0, 0, 0, 0, 0, 825, 853,
	863, 0, 1152, 0, 0, 0, 127, 147, 0, 0,
	979, 0, 0, 152, 152, 0, 0, 970, 0, 0,
	0, 0, 107, 0, 0, 972, 974, 0, 0, 976,
	0, 794, 0, 849, 841, 842, 843, 0, 848, 850,
	0, 0, 752, 0, 748, 0, 0, 741, 765, 738,
	0, 297, 885, 919, 867, 938, 0, 0, 0, 0,
	0, 0, 1028, 1040, 0, 1033, 1034, 1064, 1159, 0,
	0, 0, 1050, 1160, 0, 190, 191, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 473, 475, 0,
	0, 481, 790, 0, 0, 0, 0, 1149, 1419, -2,
	-2, 1440, 0, 1766, 1768, 1143, 0, 1583, 0, 0,
	-2, 0, 0, 0, 1114, 0, 1176, 1174, 1115, 1116,
	1245, 0, 1214, 0, 1269, 124, 0, 809, 810, 1749,
	812, 0, 814, 817, 0, 820, 1789, 0, 824, 832,
	854, 0, 786, 0, 859, 860, 861, 961, 962, 865,
	0, 126, 128, 146, 964, 0, 129, 136, 0, 0,
	83, 0, 0, 1841, 110, 108, 106, 85, 0, 0,
	738, 793, 0, 840, 0, 851, 852, 742, 0, 740,
	0, 0, 0, 0, 0, 298, 301, 0, 304, 0,
	946, 0, 954, 0, 0, 0, 0, 1035, 1036, 313,
	0, 0, 0, 1064, 1075, 168, 0, 0, 773, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 774, 865,
	0, 0, 829, 0, 173, 0, 477, 0, 479, 0,
	704, 706, 0, 0, 1511, 1601, 0, 1536, 1537, -2,
	0, 1477, 1585, 1587, 0, 1187, 1263, 807, 811, 0,
	0, 0, 871, 0, 0, 0, 857, 858, 794, 0,
	786, 0, 0, 149, 0, 0, 0, 0, 0, 0,
	0, 0, 920, 742, 0, 0, 750, 0, 753, 0,
	749, 746, 747, 786, 0, 302, 303, 0, 0, 955,
	0, 0, 1037, 1038, 0, 1057, 1058, 1060, 1065, 0,
	0, 863, 865, 828, 0, 476, 0, 0, 709, 710,
	0, 0, 0, 0, 1596, 1478, 0, 0, 0, 0,
	819, 876, 0, 0, 0, 855, 856, 853, 0, 834,
	0, 867, 131, 0, 963, 865, 0, 798, 0, 0,
	801, 0, 0, 111, 1841, 109, 0, 736, 0, 0,
	845, 847, 0, 754, 794, 752, 921, 865, 0, 863,
	0, 1029, 0, 1059, 191, 191, 786, 863, 191, 478,
	480, 1593, 1613, 1602, -2, 2042, 1845, 0, 1613, 1613,
	1588, 1589, 0, 0, 821, 872, 873, 0, 868, 869,
	870, 1788, 822, 823, 833, 862, 0, 871, 148, 786,
	795, 0, 0, 796, 0, 0, 114, 0, 116, 0,
	844, 0, 0, 0, 0, 738, 742, 863, 0, 786,
	0, 1260, 170, 171, 794, 786, 172, 1598, 0, 0,
	1604, 1605, 1606, 1607, 1608, 1599, 1600, 813, 0, 874,
	0, 875, 0, 0, 0, 0, 876, 134, 799, 0,
	802, 0, 112, 0, 846, 743, 0, 745, 742, 751,
	786, 0, 794, 0, 1056, 826, 794, 0, 1610, 1611,
	0, 0, 0, 877, 0, 880, 881, 0, 878, 0,
	853, 0, 0, 789, 744, 737, 794, 865, 952, 863,
	827, 1609, 1612, 1603, 818, 879, 882, 883, 864, 835,
	0, 0, 785, 787, 788, 952, 863, 949, 0, 786,
	794, 0, 947, 786, 953, 794, 800, 0, 794, 952,
	0, 952, 950, 0, 948, 794, 803,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 470, 3, 476, 471, 3,
	481, 482, 474, 472, 486, 473, 483, 475, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 489, 3,
	462, 464, 463, 467, 485, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 479, 3, 480, 477, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 487, 469, 488, 465,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 466,
	57805, 468, 57806, 478, 57807, 484, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1146
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1151
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1155
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1156
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1157
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1158
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1159
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1160
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1161
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1162
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1169
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1178
		{
			return helpWith(sqllex, "ALTER ROLE")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1179
		{
			return helpWith(sqllex, "ALTER")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1182
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1183
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1184
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1185
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1186
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1187
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 45:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1188
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1242
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1268
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1279
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1294
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1298
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1302
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1316
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1335
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1367
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1371
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1375
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1381
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1385
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1391
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1400
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1411
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1415
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1421
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1429
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1439
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1443
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1453
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1464
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1471
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1483
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1490
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1498
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1503
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1507
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1512
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1518
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1526
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 103:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1537
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 104:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1547
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 105:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1557
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 106:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1566
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[9].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			s.AllIndexes = true
			sqlVAL.union.val = s
		}
	case 107:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1577
		{
			err := errors.New("index name should not be specified in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION ... OF INDEX")
			return setErr(sqllex, err)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1583
		{
			err := errors.New("index wildcard unsupported in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION <partition> OF INDEX <tablename>@*")
			return setErr(sqllex, err)
		}
	case 109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1591
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1595
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1599
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 112:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1603
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1609
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1614
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1625
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1629
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1635
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1639
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1646
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1651
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1656
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1661
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1666
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1671
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1676
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1681
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1686
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1691
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1696
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1705
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1717
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1727
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1734
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 134:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:1738
		{
			sqlVAL.union.val = &tree.AlterTableAlterPrimaryKey{
				Columns:    sqlDollar[7].union.idxElems(),
				Sharded:    sqlDollar[9].union.shardedIndexDef(),
				Interleave: sqlDollar[10].union.interleave(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1746
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1753
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1762
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1771
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1776
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1783
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1791
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1792
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1796
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1800
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1806
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1814
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1818
		{
			sqlVAL.union.val = nil
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1824
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1828
		{
			sqlVAL.union.val = nil
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1835
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1839
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1843
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1849
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 154:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1853
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 155:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1879
		{
			sqlVAL.union.val = &tree.Backup{DescriptorCoverage: tree.AllDescriptors, To: sqlDollar[3].union.partitionedBackup(), IncrementalFrom: sqlDollar[5].union.exprs(), AsOf: sqlDollar[4].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1883
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1886
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1909
		{
			sqlVAL.union.val = &tree.Restore{DescriptorCoverage: tree.AllDescriptors, From: sqlDollar[3].union.partitionedBackups(), AsOf: sqlDollar[4].union.asOfClause(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1913
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1916
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1920
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1924
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1930
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1934
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1940
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1977
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1982
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1986
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1992
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1997
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:2002
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:2007
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2012
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2016
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2032
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2035
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2039
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2043
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2051
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2055
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2061
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2065
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2071
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2075
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2079
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2083
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2089
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2093
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2099
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2103
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2107
		{
			sqlVAL.union.val = nil
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2113
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2127
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2128
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2129
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2130
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2140
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2148
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2150
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2153
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2163
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2172
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2180
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2182
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2186
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2189
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2199
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2208
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2216
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2218
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2222
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2225
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2229
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2233
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2237
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2250
		{
			sqlVAL.union.val = &tree.CommentOnIndex{Index: sqlDollar[4].union.tableIndexName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2256
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2261
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2273
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2275
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2276
		{
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2277
		{
			return helpWith(sqllex, "CREATE")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2280
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2281
		{
			return unimplemented(sqllex, "create cast")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2282
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2283
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2284
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2285
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2286
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2287
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2288
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2289
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2290
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2291
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2292
		{
			return unimplementedWithIssue(sqllex, 41649)
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2293
		{
			return unimplemented(sqllex, "create operator")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2294
		{
			return unimplemented(sqllex, "create publication")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2295
		{
			return unimplemented(sqllex, "create rule")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2296
		{
			return unimplemented(sqllex, "create server")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2297
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2298
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2299
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2302
		{
		}
	case 250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2303
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2306
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2307
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2310
		{
		}
	case 254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2311
		{
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2314
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2315
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2316
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2317
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2318
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2319
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2320
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2321
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2322
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2323
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2324
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2325
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2326
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2327
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2328
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2329
		{
			return unimplemented(sqllex, "drop server")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2330
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2331
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2332
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2333
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2337
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2338
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2339
		{
			return helpWith(sqllex, "CREATE SCHEMA")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2340
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2341
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2343
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2344
		{
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2345
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2346
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2356
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2364
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2368
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 295:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2372
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2378
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2382
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2391
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2398
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2404
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2410
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2414
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2425
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2437
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2445
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2453
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2463
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2467
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2473
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2477
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2484
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2488
		{

			sqlVAL.union.val = nil
		}
	case 313:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2502
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[6].union.expr()),
				OrderBy:   sqlDollar[7].union.orderBy(),
				Limit:     sqlDollar[8].union.limit(),
				Returning: sqlDollar[9].union.retClause(),
			}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2512
		{
			return helpWith(sqllex, "DELETE")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2515
		{
			return unimplementedWithIssueDetail(sqllex, 40963, "delete using")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2516
		{
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2524
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2527
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2528
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2529
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2530
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2531
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2540
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2541
		{
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2542
		{
			return helpWith(sqllex, "DROP")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2545
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2546
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2547
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2548
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2549
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2557
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2561
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2564
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2572
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2576
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2579
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2587
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2591
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2594
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 347:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2602
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[4].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[5].union.dropBehavior(),
				Concurrently: sqlDollar[3].union.bool(),
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2611
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[6].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[7].union.dropBehavior(),
				Concurrently: sqlDollar[3].union.bool(),
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2619
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2627
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2635
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2642
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2650
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false, IsRole: sqlDollar[2].union.bool()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2654
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true, IsRole: sqlDollar[2].union.bool()}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2657
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2661
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2666
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2689
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(nil, sqlDollar[2].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2696
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2698
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(sqlDollar[3].union.strs(), sqlDollar[5].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2706
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain([]string{"DISTSQL", "ANALYZE"}, sqlDollar[3].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2714
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain([]string{"DISTSQL", "ANALYZE"}, sqlDollar[3].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2722
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(append(sqlDollar[4].union.strs(), "ANALYZE"), sqlDollar[6].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2730
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(append(sqlDollar[4].union.strs(), "ANALYZE"), sqlDollar[6].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2741
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2745
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2748
		{
			return helpWith(sqllex, "DELETE")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2750
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2751
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2752
		{
			return helpWith(sqllex, "INSERT")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2753
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2755
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2756
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2757
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2760
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2765
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2766
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2767
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2772
		{
			return helpWith(sqllex, "DELETE")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2773
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2774
		{
			return helpWith(sqllex, "INSERT")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2776
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2780
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2781
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2785
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2789
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 413:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2799
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2807
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2815
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2819
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 417:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2823
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2833
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2840
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2848
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2852
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 422:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2856
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2866
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2870
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2874
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2878
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2881
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2901
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2905
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2909
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2912
		{
			return helpWith(sqllex, "GRANT")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2932
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2936
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2940
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2943
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2948
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2952
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2962
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2966
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2980
		{
			return helpWith(sqllex, "RESET")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2981
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2989
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2993
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2996
		{
			return helpWith(sqllex, "RESET")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3004
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3007
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3018
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3021
		{
			return helpWith(sqllex, "USE")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3025
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3026
		{
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3027
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3028
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3032
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3033
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3034
		{
			return helpWith(sqllex, "USE")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3050
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3065
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3068
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 471:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3086
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3094
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3098
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3102
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3108
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3112
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3118
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3122
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3126
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3130
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3134
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3145
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3148
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 486:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3158
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3174
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3178
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 489:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3183
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3200
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3203
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3205
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3208
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3212
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3231
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3238
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3243
		{

			sqlVAL.union.val = &tree.SetSessionAuthorizationDefault{}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3248
		{
			return unimplementedWithIssue(sqllex, 40283)
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3253
		{
			return unimplemented(sqllex, "set from current")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3254
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3262
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3267
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3274
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3278
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3284
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3288
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3295
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3316
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3320
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3326
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3330
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3334
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3338
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3342
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3348
		{
			sqlVAL.union.val = tree.Low
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3352
		{
			sqlVAL.union.val = tree.Normal
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3356
		{
			sqlVAL.union.val = tree.High
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3367
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3371
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3375
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3380
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3384
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3397
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3398
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3399
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3400
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3401
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3402
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3404
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3405
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3406
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3407
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3408
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3409
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3410
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3412
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3413
		{
			return helpWith(sqllex, "SHOW SAVEPOINT")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3414
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3415
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3416
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3417
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3418
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3419
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3420
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3421
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3422
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3423
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3425
		{
			return helpWith(sqllex, "SHOW")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3430
		{
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3431
		{
			return unimplementedWithIssue(sqllex, 41412)
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3434
		{
			return unimplementedWithIssue(sqllex, 41412)
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3438
		{

			return purposelyUnimplemented(sqllex, "reindex table", "CockroachDB does not require reindexing.")
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3443
		{

			return purposelyUnimplemented(sqllex, "reindex index", "CockroachDB does not require reindexing.")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3448
		{

			return purposelyUnimplemented(sqllex, "reindex database", "CockroachDB does not require reindexing.")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3453
		{

			return purposelyUnimplemented(sqllex, "reindex system", "CockroachDB does not require reindexing.")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3463
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3464
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3465
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3476
		{
			sqlVAL.str = "client_encoding"
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3479
		{
			sqlVAL.str = "timezone"
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3480
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3494
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3498
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3502
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3513
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3521
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3529
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
				Options: sqlDollar[4].union.kvOptions(),
			}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3537
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
				Options:              sqlDollar[5].union.kvOptions(),
			}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3546
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3555
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3563
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3573
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3577
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3580
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 613:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3582
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3585
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3587
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3591
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3594
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3602
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3605
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3613
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3617
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsDB: true, Database: tree.Name(sqlDollar[5].str)}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3621
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3625
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3628
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3636
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3639
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3652
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3660
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 629:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3668
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3671
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 631:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3673
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3677
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3681
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3684
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3686
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3690
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3693
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3701
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3704
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3706
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3709
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3717
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3720
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3722
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3725
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3729
		{
			sqlVAL.union.val = true
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3731
		{
			sqlVAL.union.val = true
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3733
		{
			sqlVAL.union.val = false
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3743
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: true}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3747
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: false}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3750
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3751
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3753
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3757
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[5].union.slct(), Block: true}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3760
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3762
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3770
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				Block: true,
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3778
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3787
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3790
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 661:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3792
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3795
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 663:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3797
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3801
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3804
		{
			sqlVAL.union.val = true
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3805
		{
			sqlVAL.union.val = false
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3813
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3816
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3818
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3821
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 671:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3829
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3839
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3849
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3852
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3855
		{
			sqlVAL.union.val = true
		}
	case 676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3856
		{
			sqlVAL.union.val = false
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3863
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3867
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3870
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3877
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3881
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3884
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3891
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3895
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3902
		{
			sqlVAL.union.val = &tree.ShowSavepointStatus{}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3905
		{
			return helpWith(sqllex, "SHOW SAVEPOINT")
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3913
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3918
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3923
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3927
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3935
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3939
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3943
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3956
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3959
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3967
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3970
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 701:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3974
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3978
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3982
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3990
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3998
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4005
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4012
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4016
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4027
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: tree.TableIndexName{Table: name},
			}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4035
		{
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: sqlDollar[5].union.tableIndexName(),
			}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4041
		{
			return helpWith(sqllex, "SHOW RANGE")
		}
	case 712:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4050
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4055
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4059
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: tree.Name(sqlDollar[5].str)}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4062
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 716:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4066
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4073
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4078
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4198
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4202
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4206
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4245
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4249
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4254
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4258
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4267
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4274
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4278
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4290
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4299
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4302
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4310
		{
			sqlVAL.union.val = &tree.CreateSchema{
				Schema: sqlDollar[3].str,
			}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4316
		{
			sqlVAL.union.val = &tree.CreateSchema{
				Schema:      sqlDollar[6].str,
				IfNotExists: true,
			}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4322
		{
			return helpWith(sqllex, "CREATE SCHEMA")
		}
	case 736:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4361
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
				Temporary:     sqlDollar[2].union.persistenceType(),
				StorageParams: sqlDollar[10].union.storageParams(),
				OnCommit:      sqlDollar[11].union.createTableOnCommitSetting(),
			}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4376
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
				Temporary:     sqlDollar[2].union.persistenceType(),
				StorageParams: sqlDollar[13].union.storageParams(),
				OnCommit:      sqlDollar[14].union.createTableOnCommitSetting(),
			}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4393
		{
			sqlVAL.union.val = nil
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4397
		{

			sqlVAL.union.val = nil
		}
	case 740:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4403
		{

			sqlVAL.union.val = sqlDollar[3].union.storageParams()
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4408
		{
			return unimplemented(sqllex, "create table with oids")
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4414
		{
			sqlVAL.union.val = tree.CreateTableOnCommitUnset
		}
	case 743:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4418
		{

			sqlVAL.union.val = tree.CreateTableOnCommitPreserveRows
		}
	case 744:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4423
		{

			return unimplementedWithIssueDetail(sqllex, 46556, "delete rows")
		}
	case 745:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4428
		{

			return unimplementedWithIssueDetail(sqllex, 46556, "drop")
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4435
		{
			sqlVAL.union.val = tree.StorageParam{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4439
		{
			sqlVAL.union.val = tree.StorageParam{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4445
		{
			sqlVAL.union.val = []tree.StorageParam{sqlDollar[1].union.storageParam()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4449
		{
			sqlVAL.union.val = append(sqlDollar[1].union.storageParams(), sqlDollar[3].union.storageParam())
		}
	case 750:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4455
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      sqlDollar[8].union.slct(),
				StorageParams: sqlDollar[6].union.storageParams(),
				OnCommit:      sqlDollar[10].union.createTableOnCommitSetting(),
			}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4468
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      sqlDollar[11].union.slct(),
				StorageParams: sqlDollar[9].union.storageParams(),
				OnCommit:      sqlDollar[13].union.createTableOnCommitSetting(),
			}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4482
		{
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4483
		{
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4484
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4502
		{
			sqlVAL.union.val = true
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4503
		{
			sqlVAL.union.val = true
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4504
		{
			sqlVAL.union.val = false
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4508
		{
			sqlVAL.union.val = true
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4509
		{
			sqlVAL.union.val = true
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4510
		{
			sqlVAL.union.val = true
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4511
		{
			sqlVAL.union.val = true
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4512
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 765:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4517
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4523
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4527
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4533
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4539
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4543
		{
			sqlVAL.union.val = &tree.LikeTableDef{
				Name:    sqlDollar[2].union.unresolvedObjectName().ToTableName(),
				Options: sqlDollar[3].union.likeTableOptionList(),
			}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4552
		{
			sqlVAL.union.val = append(sqlDollar[1].union.likeTableOptionList(), sqlDollar[3].union.likeTableOption())
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4556
		{
			opt := sqlDollar[3].union.likeTableOption()
			opt.Excluded = true
			sqlVAL.union.val = append(sqlDollar[1].union.likeTableOptionList(), opt)
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4562
		{
			sqlVAL.union.val = []tree.LikeTableOption(nil)
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4567
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding comments")
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4568
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptConstraints}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4569
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptDefaults}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4570
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding identity")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4571
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptGenerated}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4572
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptIndexes}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4573
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding statistics")
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4574
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding storage")
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4575
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptAll}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4580
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4589
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4596
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4601
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4606
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4612
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 792:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4619
		{
			sqlVAL.str = ""
		}
	case 794:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4626
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 795:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4632
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4639
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4646
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4652
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4656
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 800:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4662
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4672
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4676
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 803:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4682
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4696
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, types.IsSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4707
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4711
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4717
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4721
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4725
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4729
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4733
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4737
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4741
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4759
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4763
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4767
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4771
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4775
		{
			sqlVAL.union.val = tree.ShardedPrimaryKeyConstraint{
				Sharded:      true,
				ShardBuckets: sqlDollar[8].union.expr(),
			}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4782
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4786
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4790
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4800
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4804
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4808
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4815
		{
		}
	case 826:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4821
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Sharded:     sqlDollar[6].union.shardedIndexDef(),
				Storing:     sqlDollar[7].union.nameList(),
				Interleave:  sqlDollar[8].union.interleave(),
				PartitionBy: sqlDollar[9].union.partitionBy(),
			}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4832
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Sharded:     sqlDollar[7].union.shardedIndexDef(),
					Storing:     sqlDollar[8].union.nameList(),
					Interleave:  sqlDollar[9].union.interleave(),
					PartitionBy: sqlDollar[10].union.partitionBy(),
				},
			}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4845
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4855
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4867
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4872
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 832:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4878
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4884
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4895
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:    sqlDollar[4].union.idxElems(),
					Sharded:    sqlDollar[6].union.shardedIndexDef(),
					Interleave: sqlDollar[7].union.interleave(),
				},
				PrimaryKey: true,
			}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4907
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4918
		{
			return unimplementedWithIssueDetail(sqllex, 46657, "add constraint exclude using")
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4925
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 838:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4929
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4935
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4945
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4956
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4960
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4967
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 844:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4973
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4984
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4988
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4994
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5000
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 849:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5004
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5010
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5014
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5020
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5025
		{
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5026
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5027
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5028
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5029
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5030
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 862:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5048
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 863:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5052
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 864:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5058
		{
			sqlVAL.union.val = &tree.ShardedIndexDef{
				ShardBuckets: sqlDollar[6].union.expr(),
			}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5064
		{
			sqlVAL.union.val = (*tree.ShardedIndexDef)(nil)
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5070
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 867:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5074
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5094
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5098
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5102
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 871:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5106
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5115
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5119
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5123
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5127
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5131
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5137
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5143
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5151
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5155
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5159
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5163
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5167
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 884:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5186
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name:      name,
				Temporary: sqlDollar[2].union.persistenceType(),
				Options:   sqlDollar[5].union.seqOpts(),
			}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5195
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name: name, Options: sqlDollar[8].union.seqOpts(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: true,
			}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5203
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 888:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5207
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5210
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5211
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5214
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5215
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5217
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5218
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: nil}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5219
		{
			varName, err := sqlDollar[3].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[3].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: columnItem}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5229
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5232
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5234
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5236
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5238
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5239
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5241
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5242
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5244
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5246
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5254
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5257
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5261
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[2].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5265
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: tree.DNull}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5275
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr(), KVOptions: sqlDollar[4].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5279
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true, KVOptions: sqlDollar[7].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5282
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 913:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5290
		{
			sqlVAL.union.val = &tree.AlterRole{Name: sqlDollar[3].union.expr(), KVOptions: sqlDollar[4].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5294
		{
			sqlVAL.union.val = &tree.AlterRole{Name: sqlDollar[5].union.expr(), IfExists: true, KVOptions: sqlDollar[6].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5297
		{
			return helpWith(sqllex, "ALTER ROLE")
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5303
		{
			sqlVAL.union.val = true
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5307
		{

			sqlVAL.union.val = true
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5312
		{
			sqlVAL.union.val = false
		}
	case 919:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5322
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: false,
				Replace:     false,
			}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5336
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[8].union.nameList(),
				AsSource:    sqlDollar[10].union.slct(),
				Temporary:   sqlDollar[4].union.persistenceType(),
				IfNotExists: false,
				Replace:     true,
			}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5348
		{
			name := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[9].union.nameList(),
				AsSource:    sqlDollar[11].union.slct(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: true,
				Replace:     false,
			}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5359
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5363
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5367
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5371
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5375
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5383
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5387
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[2].union.kvOption())
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5393
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 932:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5397
		{
			sqlVAL.union.val = nil
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5403
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(fmt.Sprintf("%s_%s", sqlDollar[1].str, sqlDollar[2].str)), Value: sqlDollar[3].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5407
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(fmt.Sprintf("%s_%s", sqlDollar[1].str, sqlDollar[2].str)), Value: tree.DNull}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5412
		{
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5413
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 937:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5419
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 938:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5422
		{
			sqlVAL.union.val = &tree.CreateType{
				TypeName:   sqlDollar[3].union.unresolvedObjectName(),
				Variety:    tree.Enum,
				EnumLabels: sqlDollar[7].union.strs(),
			}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5430
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 940:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5432
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5434
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 942:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5436
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5440
		{
			sqlVAL.union.val = sqlDollar[1].union.strs()
		}
	case 944:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5444
		{
			sqlVAL.union.val = []string(nil)
		}
	case 945:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5450
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5454
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 947:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
//line sql-gen.y:5472
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[5].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				Columns:      sqlDollar[10].union.idxElems(),
				Sharded:      sqlDollar[12].union.shardedIndexDef(),
				Storing:      sqlDollar[13].union.nameList(),
				Interleave:   sqlDollar[14].union.interleave(),
				PartitionBy:  sqlDollar[15].union.partitionBy(),
				Inverted:     sqlDollar[8].union.bool(),
				Concurrently: sqlDollar[4].union.bool(),
			}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-19 : sqlpt+1]
//line sql-gen.y:5488
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[8].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				IfNotExists:  true,
				Columns:      sqlDollar[13].union.idxElems(),
				Sharded:      sqlDollar[15].union.shardedIndexDef(),
				Storing:      sqlDollar[16].union.nameList(),
				Interleave:   sqlDollar[17].union.interleave(),
				PartitionBy:  sqlDollar[18].union.partitionBy(),
				Inverted:     sqlDollar[11].union.bool(),
				Concurrently: sqlDollar[4].union.bool(),
			}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-15 : sqlpt+1]
//line sql-gen.y:5505
		{
			table := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[6].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				Inverted:     true,
				Columns:      sqlDollar[10].union.idxElems(),
				Storing:      sqlDollar[12].union.nameList(),
				Interleave:   sqlDollar[13].union.interleave(),
				PartitionBy:  sqlDollar[14].union.partitionBy(),
				Concurrently: sqlDollar[5].union.bool(),
			}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-18 : sqlpt+1]
//line sql-gen.y:5520
		{
			table := sqlDollar[11].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[9].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				Inverted:     true,
				IfNotExists:  true,
				Columns:      sqlDollar[13].union.idxElems(),
				Storing:      sqlDollar[15].union.nameList(),
				Interleave:   sqlDollar[16].union.interleave(),
				PartitionBy:  sqlDollar[17].union.partitionBy(),
				Concurrently: sqlDollar[5].union.bool(),
			}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5535
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 952:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5538
		{
		}
	case 953:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5539
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5543
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5558
		{
			sqlVAL.union.val = false
		}
	case 956:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5564
		{
			sqlVAL.union.val = true
		}
	case 957:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5568
		{
			sqlVAL.union.val = false
		}
	case 958:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5574
		{
			sqlVAL.union.val = true
		}
	case 959:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5578
		{
			sqlVAL.union.val = false
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5584
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5588
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5597
		{

			e := sqlDollar[1].union.expr()
			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: dir, NullsOrder: nullsOrder}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5619
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 964:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5620
		{
			sqlVAL.str = ""
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5624
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5628
		{
			sqlVAL.union.val = tree.Descending
		}
	case 967:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5632
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 968:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5638
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5644
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5650
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5658
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5664
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5672
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5678
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5686
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5690
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5695
		{
		}
	case 978:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5696
		{
		}
	case 979:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5699
		{
		}
	case 980:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5700
		{
		}
	case 981:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5708
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5711
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5721
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5730
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5733
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5741
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5744
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5748
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 991:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5749
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 993:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5750
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5766
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 996:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5769
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5771
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5774
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 999:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5784
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5787
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5789
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5792
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5796
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5801
		{
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5802
		{
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5803
		{
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5813
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5817
		{
			sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[4].str)}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5820
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5823
		{
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5824
		{
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5828
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5832
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5838
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5842
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5848
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5852
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5865
		{
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5867
		{
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5871
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5876
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5880
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5884
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5890
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5896
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5902
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5906
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5916
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5926
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5936
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5940
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5944
		{
			sqlVAL.str = ""
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5950
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5954
		{
			sqlVAL.str = ""
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5960
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5964
		{
			sqlVAL.str = ""
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5970
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5974
		{
			sqlVAL.str = ""
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5979
		{
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5980
		{
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5992
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5999
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6006
		{
			return helpWith(sqllex, "INSERT")
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6017
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6024
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6028
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6037
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6042
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6048
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6052
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6056
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6062
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6066
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6086
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6090
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6094
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6100
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6103
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6104
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6106
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6112
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6117
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6121
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:6138
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6150
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6153
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6156
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6162
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6166
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6179
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6182
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6186
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6229
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6235
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6239
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6254
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6258
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6262
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[4].union.limit(), Locking: sqlDollar[3].union.lockingClause()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6266
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), Locking: sqlDollar[4].union.lockingClause()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6270
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6274
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6278
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[5].union.limit(), Locking: sqlDollar[4].union.lockingClause()}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6282
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), Locking: sqlDollar[5].union.lockingClause()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6287
		{
			sqlVAL.union.val = sqlDollar[1].union.lockingClause()
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6288
		{
			sqlVAL.union.val = (tree.LockingClause)(nil)
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6291
		{
			sqlVAL.union.val = sqlDollar[1].union.lockingClause()
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6292
		{
			sqlVAL.union.val = (tree.LockingClause)(nil)
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6296
		{
			sqlVAL.union.val = tree.LockingClause{sqlDollar[1].union.lockingItem()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6300
		{
			sqlVAL.union.val = append(sqlDollar[1].union.lockingClause(), sqlDollar[2].union.lockingItem())
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6306
		{
			sqlVAL.union.val = &tree.LockingItem{
				Strength:   sqlDollar[1].union.lockingStrength(),
				Targets:    sqlDollar[2].union.tableNames(),
				WaitPolicy: sqlDollar[3].union.lockingWaitPolicy(),
			}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6315
		{
			sqlVAL.union.val = tree.ForUpdate
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6316
		{
			sqlVAL.union.val = tree.ForNoKeyUpdate
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6317
		{
			sqlVAL.union.val = tree.ForShare
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6318
		{
			sqlVAL.union.val = tree.ForKeyShare
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6321
		{
			sqlVAL.union.val = tree.TableNames{}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6322
		{
			sqlVAL.union.val = sqlDollar[2].union.tableNames()
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6325
		{
			sqlVAL.union.val = tree.LockWaitBlock
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6326
		{
			sqlVAL.union.val = tree.LockWaitSkip
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6327
		{
			sqlVAL.union.val = tree.LockWaitError
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6332
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6367
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6368
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6369
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6391
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6404
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6418
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6430
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6434
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6443
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6452
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6467
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6474
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6486
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6490
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6495
		{
			sqlVAL.union.val = &tree.With{Recursive: true, CTEList: sqlDollar[3].union.ctes()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6501
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6505
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6511
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6519
		{
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6520
		{
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6524
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6528
		{
			sqlVAL.union.val = nil
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6533
		{
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6534
		{
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6538
		{
			sqlVAL.union.val = true
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6542
		{
			sqlVAL.union.val = false
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6546
		{
			sqlVAL.union.val = false
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6552
		{
			sqlVAL.union.val = true
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6558
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6563
		{
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6564
		{
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6568
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6572
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6578
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6584
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6588
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6594
		{

			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			sqlVAL.union.val = &tree.Order{
				OrderType:  tree.OrderByColumn,
				Expr:       sqlDollar[1].union.expr(),
				Direction:  dir,
				NullsOrder: nullsOrder,
			}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6615
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6620
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6632
		{
			sqlVAL.union.val = tree.NullsFirst
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6636
		{
			sqlVAL.union.val = tree.NullsLast
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6640
		{
			sqlVAL.union.val = tree.DefaultNullsOrder
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6649
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6658
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
				sqlVAL.union.val.(*tree.Limit).LimitAll = sqlDollar[2].union.limit().LimitAll
			}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6669
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6670
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6674
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6678
		{
			sqlVAL.union.val = &tree.Limit{LimitAll: true}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6682
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6696
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6700
		{
			sqlVAL.union.val = &tree.Limit{
				Count: tree.NewNumVal(constant.MakeInt64(1), "", false),
			}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6708
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6715
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6737
		{
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6738
		{
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6741
		{
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6742
		{
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6759
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6763
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6769
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6773
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6792
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6795
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6797
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6809
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6812
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6814
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6820
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6824
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6830
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6834
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6839
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6844
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6850
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6855
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6862
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6867
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6878
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6882
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6886
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6894
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6925
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6935
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6945
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6953
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6962
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6966
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6970
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6981
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7005
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7011
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
				Columns: sqlDollar[3].union.tableRefCols(),
				As:      sqlDollar[4].union.aliasClause(),
			}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7022
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7026
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7032
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7034
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7038
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7044
		{
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7046
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7049
		{
			sqlVAL.union.val = nil
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7050
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7051
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7055
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7059
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7065
		{
			sqlVAL.union.val = true
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7069
		{
			sqlVAL.union.val = false
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7089
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7093
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7097
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7101
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7105
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7109
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7115
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7119
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7126
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7132
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7139
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7145
		{
			sqlVAL.str = tree.AstFull
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7149
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7153
		{
			sqlVAL.str = tree.AstRight
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7157
		{
			sqlVAL.str = tree.AstInner
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7163
		{
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7164
		{
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7185
		{
			sqlVAL.str = tree.AstHash
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7189
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7193
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7197
		{
			sqlVAL.str = ""
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7210
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7214
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7219
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7220
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7221
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7222
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7226
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7231
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7245
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7249
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7255
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7261
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7271
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7281
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7288
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7300
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7313
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7321
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7322
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7332
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7339
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7340
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7342
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7350
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7351
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7363
		{
			return unimplemented(sqllex, "qualified types")
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7367
		{
			return unimplemented(sqllex, "qualified types")
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7373
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else if sqlDollar[1].str == "serial" {
				switch sqllex.(*lexer).nakedIntType.Width() {
				case 32:
					sqlVAL.union.val = &types.Serial4Type
				default:
					sqlVAL.union.val = &types.Serial8Type
				}
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error(fmt.Sprintf("type %q does not exist", sqlDollar[1].str))
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7409
		{
			return unimplemented(sqllex, "qualified types")
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7416
		{
			return unimplementedWithIssueDetail(sqllex, 21286, "point")
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7417
		{
			return unimplementedWithIssueDetail(sqllex, 21286, "polygon")
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7420
		{
			sqlVAL.union.val = geopb.Shape_Point
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7421
		{
			sqlVAL.union.val = geopb.Shape_LineString
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7422
		{
			sqlVAL.union.val = geopb.Shape_Polygon
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7423
		{
			sqlVAL.union.val = geopb.Shape_GeometryCollection
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7424
		{
			sqlVAL.union.val = geopb.Shape_MultiPolygon
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7425
		{
			sqlVAL.union.val = geopb.Shape_MultiLineString
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7426
		{
			sqlVAL.union.val = geopb.Shape_MultiPoint
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7427
		{
			sqlVAL.union.val = geopb.Shape_Geometry
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7430
		{
			sqlVAL.union.val = types.Geography
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7431
		{
			sqlVAL.union.val = types.Geometry
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7433
		{
			sqlVAL.union.val = types.MakeGeometry(sqlDollar[3].union.geoFigure(), geopb.DefaultGeometrySRID)
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7437
		{
			sqlVAL.union.val = types.MakeGeography(sqlDollar[3].union.geoFigure(), geopb.DefaultGeographySRID)
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7441
		{
			sqlVAL.union.val = types.MakeGeometry(sqlDollar[3].union.geoFigure(), geopb.SRID(sqlDollar[5].union.int32()))
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7445
		{
			sqlVAL.union.val = types.MakeGeography(sqlDollar[3].union.geoFigure(), geopb.SRID(sqlDollar[5].union.int32()))
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7467
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7475
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7483
		{
			sqlVAL.union.val = nil
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7490
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7494
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7498
		{
			sqlVAL.union.val = types.Int2
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7502
		{
			sqlVAL.union.val = types.Int
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7506
		{
			sqlVAL.union.val = types.Float4
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7510
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7514
		{
			sqlVAL.union.val = types.Float
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7518
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7526
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7534
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7542
		{
			sqlVAL.union.val = types.Bool
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7548
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7561
		{
			sqlVAL.union.val = types.Float
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7567
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7573
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7581
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7585
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7589
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7595
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7607
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7613
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7617
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7621
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7625
		{
			sqlVAL.union.val = types.String
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7634
		{
			sqlVAL.union.val = true
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7635
		{
			sqlVAL.union.val = false
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7640
		{
			sqlVAL.union.val = types.Date
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7644
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimeTZ
			} else {
				sqlVAL.union.val = types.Time
			}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7652
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimeTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTime(prec)
			}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7664
		{
			sqlVAL.union.val = types.TimeTZ
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7666
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimeTZ(prec)
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7675
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7683
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7696
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7700
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7710
		{
			sqlVAL.union.val = true
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7711
		{
			sqlVAL.union.val = false
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7712
		{
			sqlVAL.union.val = false
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7716
		{
			sqlVAL.union.val = types.Interval
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7720
		{
			sqlVAL.union.val = types.MakeInterval(sqlDollar[2].union.intervalTypeMetadata())
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7724
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeInterval(types.IntervalTypeMetadata{Precision: prec, PrecisionIsSet: true})
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7735
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_YEAR,
				},
			}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7743
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_MONTH,
				},
			}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7751
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_DAY,
				},
			}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7759
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_HOUR,
				},
			}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7767
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7775
		{
			sqlVAL.union.val = sqlDollar[1].union.intervalTypeMetadata()
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7781
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_YEAR,
					DurationType:     types.IntervalDurationType_MONTH,
				},
			}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7790
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_DAY,
					DurationType:     types.IntervalDurationType_HOUR,
				},
			}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7799
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_DAY,
					DurationType:     types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7808
		{
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_DAY
			sqlVAL.union.val = ret
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7814
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_HOUR,
					DurationType:     types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7823
		{
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_HOUR
			sqlVAL.union.val = ret
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7829
		{
			sqlVAL.union.val = sqlDollar[3].union.intervalTypeMetadata()
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_MINUTE
			sqlVAL.union.val = ret
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7839
		{
			sqlVAL.union.val = nil
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7845
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_SECOND,
				},
			}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7853
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_SECOND,
				},
				PrecisionIsSet: true,
				Precision:      prec,
			}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7890
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7894
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7898
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7902
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[5].union.expr(), sqlDollar[1].union.expr()}}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7913
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7918
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7922
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7926
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7930
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7934
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7938
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7942
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7946
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7950
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7954
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7958
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7962
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7966
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7970
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7974
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7978
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7982
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7986
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7990
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7994
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7998
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8002
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8006
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8010
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8014
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8018
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8022
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8026
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8030
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8034
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Overlaps, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8038
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8042
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8046
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8050
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8054
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8058
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8062
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8066
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8070
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8074
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8078
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8082
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8086
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8090
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8094
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8098
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8102
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8106
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8110
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8114
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8118
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8122
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8126
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8130
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8134
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8138
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8142
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8146
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8150
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8154
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8157
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8159
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8163
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8167
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8171
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8175
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8179
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8183
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8187
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8191
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8195
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8199
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8203
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8207
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8211
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8215
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8219
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8223
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8240
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8245
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8257
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8261
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8265
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8269
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8273
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8277
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8281
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8285
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8289
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8293
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8297
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8301
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8305
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8309
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8313
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8317
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8321
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8325
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8329
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8333
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8337
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8341
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8345
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8349
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8353
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8357
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8361
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8365
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8379
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8387
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8423
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8427
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8431
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8435
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8439
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8444
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8446
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8450
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8454
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8458
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8462
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8466
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8470
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8479
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8486
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8490
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8494
		{
			idx, err := sqlDollar[6].union.numVal().AsInt32()
			if err != nil || idx <= 0 {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ByIndex: true, ColIndex: int(idx - 1)}
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8500
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8505
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8509
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8513
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8517
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8521
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8524
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8528
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8532
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8535
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8536
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8538
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8544
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8548
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8551
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8560
		{
			name := sqlDollar[1].union.unresolvedName()
			if name.NumParts == 1 {
				typName := name.Parts[0]

				if typName == "char" {
					sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: types.MakeQChar(0), SyntaxMode: tree.CastPrepend}
				} else if typName == "serial" {
					switch sqllex.(*lexer).nakedIntType.Width() {
					case 32:
						sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: &types.Serial4Type, SyntaxMode: tree.CastPrepend}
					default:
						sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: &types.Serial8Type, SyntaxMode: tree.CastPrepend}
					}
				} else {
					typ, ok, unimp := types.TypeForNonKeywordTypeName(typName)
					if !ok {
						switch unimp {
						case 0:

							sqllex.Error(fmt.Sprintf("type %q does not exist", typName))
							return 1
						case -1:
							return unimplemented(sqllex, "type name "+typName)
						default:
							return unimplementedWithIssueDetail(sqllex, unimp, typName)
						}
					}
					sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: typ, SyntaxMode: tree.CastPrepend}
				}
			} else {
				return unimplemented(sqllex, "generic-type-name prepended casts")
			}
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8601
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8614
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8621
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8630
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8631
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8636
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8640
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8644
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8650
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8654
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8658
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8662
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8666
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8670
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8676
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8680
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8684
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8688
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8692
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8696
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8700
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8704
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8708
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8712
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8716
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8720
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8724
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8731
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8734
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8736
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8739
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8741
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8745
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8748
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8750
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8754
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8757
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8759
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8763
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8766
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8768
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8772
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8775
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8777
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8780
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8782
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8785
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8787
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8790
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8792
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8795
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8797
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8801
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8804
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8805
		{
			return unimplemented(sqllex, "treat")
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8807
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8811
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8815
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8819
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8823
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8826
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8828
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8831
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8836
		{
			return unimplemented(sqllex, "within group")
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8837
		{
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8841
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8845
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8852
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8856
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8862
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8866
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8872
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8880
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8884
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8888
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8895
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8915
		{
			sqlVAL.str = ""
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8921
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8925
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8931
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.RANGE,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8939
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.ROWS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8947
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.GROUPS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8955
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8961
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8974
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9002
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9006
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9010
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9014
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9021
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9030
		{
			sqlVAL.union.val = tree.ExcludeCurrentRow
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9034
		{
			sqlVAL.union.val = tree.ExcludeGroup
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9038
		{
			sqlVAL.union.val = tree.ExcludeTies
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9042
		{

			sqlVAL.union.val = tree.NoExclusion
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9047
		{
			sqlVAL.union.val = tree.NoExclusion
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9060
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9064
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9071
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9083
		{
			sqlVAL.union.val = tree.Any
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9087
		{
			sqlVAL.union.val = tree.Some
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9091
		{
			sqlVAL.union.val = tree.All
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9096
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9097
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9098
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9099
		{
			sqlVAL.union.val = tree.Div
		}
	case 1625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9100
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9101
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9102
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9103
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9104
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9105
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9106
		{
			sqlVAL.union.val = tree.LT
		}
	case 1632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9107
		{
			sqlVAL.union.val = tree.GT
		}
	case 1633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9108
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9109
		{
			sqlVAL.union.val = tree.LE
		}
	case 1635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9110
		{
			sqlVAL.union.val = tree.GE
		}
	case 1636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9111
		{
			sqlVAL.union.val = tree.NE
		}
	case 1638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9115
		{
			sqlVAL.union.val = tree.Like
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9116
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9117
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9118
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9141
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9145
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9151
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9155
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9159
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9170
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9174
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9180
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9184
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1652:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9191
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9197
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9201
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9207
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9211
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9217
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9221
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9227
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9231
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9237
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9241
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9264
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9268
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9272
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9278
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9285
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9289
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9306
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9310
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9314
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9318
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9322
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9328
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9334
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9340
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9344
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9348
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9354
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1689:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9366
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9373
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9377
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1692:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9383
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9389
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1694:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9393
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1696:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9400
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9406
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1698:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9410
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1700:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9417
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9423
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9427
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9432
		{
		}
	case 1704:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9433
		{
		}
	case 1705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9437
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9441
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9447
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9456
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9460
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9464
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9472
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9476
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9482
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9486
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9505
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9513
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9536
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9545
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1720:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9549
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9553
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9557
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9563
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9567
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9582
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9586
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9598
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9602
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9611
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9622
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9631
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9639
		{
			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithTypeMetadata(sqlDollar[2].str, sqlDollar[3].union.intervalTypeMetadata())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1739:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9651
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			d, err := tree.ParseDIntervalWithTypeMetadata(sqlDollar[5].str, types.IntervalTypeMetadata{
				Precision:      prec,
				PrecisionIsSet: true,
			})
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9752
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9759
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1765:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9763
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1766:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9767
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1768:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9781
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1769:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9785
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9789
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9802
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9811
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9829
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9842
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1779:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9849
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1787:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9874
		{
			sqlVAL.str = ""
		}
	case 1788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9880
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9884
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
