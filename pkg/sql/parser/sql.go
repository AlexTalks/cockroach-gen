// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/cockroachdb/errors"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:65

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) persistenceType() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) forLocked() tree.ForLocked {
	return u.val.(tree.ForLocked)
}
func (u *sqlSymUnion) lockingStrength() tree.LockingStrength {
	return u.val.(tree.LockingStrength)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) windowFrameExclusion() tree.WindowFrameExclusion {
	return u.val.(tree.WindowFrameExclusion)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) nullsOrder() tree.NullsOrder {
	return u.val.(tree.NullsOrder)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:601
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const AND_AND = lex.AND_AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTHORIZATION = lex.AUTHORIZATION
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const COMPLETE = lex.COMPLETE
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXCLUDE = lex.EXCLUDE
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LAST = lex.LAST
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOCKED = lex.LOCKED
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NONE = lex.NONE
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NOWAIT = lex.NOWAIT
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OTHERS = lex.OTHERS
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLIC = lex.PUBLIC
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHARE = lex.SHARE
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SKIP = lex.SKIP
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIES = lex.TIES
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"AND_AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTHORIZATION",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"COMPLETE",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXCLUDE",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LAST",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCKED",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NONE",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NOWAIT",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OTHERS",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLIC",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SKIP",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIES",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"CONTAINED_BY",
	"'?'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"'@'",
	"','",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9826

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	-2, 1075,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 68,
	182, 905,
	199, 905,
	214, 251,
	297, 251,
	306, 738,
	333, 251,
	342, 738,
	381, 738,
	405, 251,
	429, 738,
	-2, 0,
	-1, 74,
	214, 255,
	-2, 0,
	-1, 75,
	109, 1075,
	188, 1075,
	415, 1075,
	416, 1075,
	-2, 0,
	-1, 87,
	122, 1049,
	138, 1049,
	196, 1049,
	226, 1049,
	261, 1049,
	271, 1049,
	410, 1049,
	-2, 1027,
	-1, 118,
	128, 661,
	213, 661,
	300, 641,
	351, 641,
	398, 661,
	-2, 0,
	-1, 119,
	4, 1077,
	21, 1077,
	22, 1077,
	23, 1077,
	24, 1077,
	25, 1077,
	27, 1077,
	33, 1077,
	38, 1077,
	39, 1077,
	40, 1077,
	41, 1077,
	42, 1077,
	43, 1077,
	44, 1077,
	45, 1077,
	46, 1077,
	47, 1077,
	48, 1077,
	49, 1077,
	51, 1077,
	52, 1077,
	53, 1077,
	54, 1077,
	55, 1077,
	56, 1077,
	59, 1077,
	60, 1077,
	61, 1077,
	62, 1077,
	64, 1077,
	65, 1077,
	69, 1077,
	70, 1077,
	71, 1077,
	72, 1077,
	73, 1077,
	74, 1077,
	76, 1077,
	77, 1077,
	78, 1077,
	79, 1077,
	81, 1077,
	83, 1077,
	84, 1077,
	85, 1077,
	88, 1077,
	89, 1077,
	97, 1077,
	98, 1077,
	99, 1077,
	100, 1077,
	101, 1077,
	102, 1077,
	103, 1077,
	104, 1077,
	106, 1077,
	108, 1077,
	109, 1077,
	111, 1077,
	114, 1077,
	115, 1077,
	116, 1077,
	118, 1077,
	120, 1077,
	121, 1077,
	123, 1077,
	124, 1077,
	125, 1077,
	126, 1077,
	127, 1077,
	128, 1077,
	129, 1077,
	130, 1077,
	131, 1077,
	132, 1077,
	133, 1077,
	134, 1077,
	135, 1077,
	137, 1077,
	143, 1077,
	144, 1077,
	145, 1077,
	146, 1077,
	147, 1077,
	148, 1077,
	150, 1077,
	152, 1077,
	156, 1077,
	157, 1077,
	159, 1077,
	160, 1077,
	162, 1077,
	163, 1077,
	165, 1077,
	166, 1077,
	167, 1077,
	168, 1077,
	169, 1077,
	170, 1077,
	171, 1077,
	172, 1077,
	174, 1077,
	175, 1077,
	177, 1077,
	178, 1077,
	179, 1077,
	182, 1077,
	183, 1077,
	184, 1077,
	185, 1077,
	188, 1077,
	189, 1077,
	190, 1077,
	191, 1077,
	192, 1077,
	193, 1077,
	194, 1077,
	195, 1077,
	197, 1077,
	199, 1077,
	201, 1077,
	203, 1077,
	204, 1077,
	205, 1077,
	207, 1077,
	208, 1077,
	211, 1077,
	212, 1077,
	213, 1077,
	214, 1077,
	215, 1077,
	217, 1077,
	218, 1077,
	220, 1077,
	221, 1077,
	223, 1077,
	224, 1077,
	227, 1077,
	228, 1077,
	231, 1077,
	232, 1077,
	233, 1077,
	235, 1077,
	236, 1077,
	237, 1077,
	238, 1077,
	239, 1077,
	240, 1077,
	241, 1077,
	242, 1077,
	243, 1077,
	244, 1077,
	246, 1077,
	247, 1077,
	248, 1077,
	250, 1077,
	252, 1077,
	254, 1077,
	256, 1077,
	257, 1077,
	258, 1077,
	259, 1077,
	260, 1077,
	262, 1077,
	263, 1077,
	264, 1077,
	266, 1077,
	267, 1077,
	268, 1077,
	269, 1077,
	272, 1077,
	273, 1077,
	274, 1077,
	276, 1077,
	278, 1077,
	279, 1077,
	280, 1077,
	281, 1077,
	282, 1077,
	283, 1077,
	284, 1077,
	285, 1077,
	286, 1077,
	287, 1077,
	289, 1077,
	290, 1077,
	291, 1077,
	292, 1077,
	293, 1077,
	294, 1077,
	296, 1077,
	298, 1077,
	299, 1077,
	300, 1077,
	301, 1077,
	302, 1077,
	303, 1077,
	304, 1077,
	305, 1077,
	306, 1077,
	307, 1077,
	309, 1077,
	310, 1077,
	311, 1077,
	312, 1077,
	313, 1077,
	315, 1077,
	316, 1077,
	317, 1077,
	318, 1077,
	319, 1077,
	320, 1077,
	321, 1077,
	322, 1077,
	324, 1077,
	326, 1077,
	327, 1077,
	328, 1077,
	329, 1077,
	330, 1077,
	331, 1077,
	333, 1077,
	334, 1077,
	335, 1077,
	336, 1077,
	337, 1077,
	338, 1077,
	339, 1077,
	340, 1077,
	342, 1077,
	343, 1077,
	344, 1077,
	345, 1077,
	346, 1077,
	347, 1077,
	348, 1077,
	349, 1077,
	350, 1077,
	351, 1077,
	353, 1077,
	354, 1077,
	355, 1077,
	356, 1077,
	357, 1077,
	359, 1077,
	360, 1077,
	361, 1077,
	362, 1077,
	363, 1077,
	365, 1077,
	366, 1077,
	367, 1077,
	368, 1077,
	369, 1077,
	370, 1077,
	371, 1077,
	372, 1077,
	373, 1077,
	374, 1077,
	375, 1077,
	376, 1077,
	378, 1077,
	379, 1077,
	380, 1077,
	382, 1077,
	383, 1077,
	384, 1077,
	385, 1077,
	386, 1077,
	387, 1077,
	388, 1077,
	390, 1077,
	391, 1077,
	392, 1077,
	393, 1077,
	394, 1077,
	396, 1077,
	398, 1077,
	399, 1077,
	400, 1077,
	401, 1077,
	402, 1077,
	404, 1077,
	405, 1077,
	406, 1077,
	408, 1077,
	409, 1077,
	412, 1077,
	413, 1077,
	414, 1077,
	415, 1077,
	416, 1077,
	417, 1077,
	419, 1077,
	421, 1077,
	422, 1077,
	423, 1077,
	424, 1077,
	425, 1077,
	426, 1077,
	427, 1077,
	429, 1077,
	430, 1077,
	431, 1077,
	436, 1077,
	437, 1077,
	438, 1077,
	439, 1077,
	440, 1077,
	441, 1077,
	-2, 0,
	-1, 120,
	1, 958,
	203, 958,
	296, 958,
	304, 958,
	444, 958,
	467, 958,
	-2, 0,
	-1, 122,
	1, 958,
	467, 958,
	-2, 0,
	-1, 123,
	1, 958,
	467, 958,
	-2, 0,
	-1, 124,
	1, 962,
	467, 962,
	-2, 0,
	-1, 149,
	122, 1048,
	138, 1048,
	196, 1048,
	226, 1048,
	261, 1048,
	271, 1048,
	410, 1048,
	-2, 1036,
	-1, 182,
	4, 1084,
	5, 1084,
	6, 1084,
	7, 1084,
	8, 1084,
	9, 1084,
	10, 1084,
	21, 1084,
	22, 1084,
	23, 1084,
	24, 1084,
	25, 1084,
	27, 1084,
	33, 1084,
	34, 1084,
	38, 1084,
	39, 1084,
	40, 1084,
	41, 1084,
	42, 1084,
	43, 1084,
	44, 1084,
	45, 1084,
	46, 1084,
	47, 1084,
	48, 1084,
	49, 1084,
	51, 1084,
	52, 1084,
	53, 1084,
	54, 1084,
	55, 1084,
	56, 1084,
	57, 1084,
	58, 1084,
	59, 1084,
	60, 1084,
	61, 1084,
	62, 1084,
	64, 1084,
	65, 1084,
	67, 1084,
	69, 1084,
	70, 1084,
	71, 1084,
	72, 1084,
	73, 1084,
	74, 1084,
	76, 1084,
	77, 1084,
	78, 1084,
	79, 1084,
	81, 1084,
	83, 1084,
	84, 1084,
	85, 1084,
	87, 1084,
	88, 1084,
	89, 1084,
	90, 1084,
	91, 1084,
	92, 1084,
	93, 1084,
	94, 1084,
	95, 1084,
	96, 1084,
	97, 1084,
	98, 1084,
	99, 1084,
	100, 1084,
	101, 1084,
	102, 1084,
	103, 1084,
	104, 1084,
	105, 1084,
	106, 1084,
	108, 1084,
	109, 1084,
	111, 1084,
	114, 1084,
	115, 1084,
	116, 1084,
	118, 1084,
	120, 1084,
	121, 1084,
	123, 1084,
	124, 1084,
	125, 1084,
	126, 1084,
	127, 1084,
	128, 1084,
	129, 1084,
	130, 1084,
	131, 1084,
	132, 1084,
	133, 1084,
	134, 1084,
	135, 1084,
	136, 1084,
	137, 1084,
	143, 1084,
	144, 1084,
	145, 1084,
	146, 1084,
	147, 1084,
	148, 1084,
	150, 1084,
	152, 1084,
	155, 1084,
	156, 1084,
	157, 1084,
	159, 1084,
	160, 1084,
	162, 1084,
	163, 1084,
	165, 1084,
	166, 1084,
	167, 1084,
	168, 1084,
	169, 1084,
	170, 1084,
	171, 1084,
	172, 1084,
	173, 1084,
	174, 1084,
	175, 1084,
	177, 1084,
	178, 1084,
	179, 1084,
	182, 1084,
	183, 1084,
	184, 1084,
	185, 1084,
	187, 1084,
	188, 1084,
	189, 1084,
	190, 1084,
	191, 1084,
	192, 1084,
	193, 1084,
	194, 1084,
	195, 1084,
	197, 1084,
	199, 1084,
	200, 1084,
	201, 1084,
	202, 1084,
	203, 1084,
	204, 1084,
	205, 1084,
	206, 1084,
	207, 1084,
	208, 1084,
	211, 1084,
	212, 1084,
	213, 1084,
	214, 1084,
	215, 1084,
	217, 1084,
	218, 1084,
	220, 1084,
	221, 1084,
	222, 1084,
	223, 1084,
	224, 1084,
	225, 1084,
	227, 1084,
	228, 1084,
	231, 1084,
	232, 1084,
	233, 1084,
	235, 1084,
	236, 1084,
	237, 1084,
	238, 1084,
	239, 1084,
	240, 1084,
	241, 1084,
	242, 1084,
	243, 1084,
	244, 1084,
	245, 1084,
	246, 1084,
	247, 1084,
	248, 1084,
	249, 1084,
	250, 1084,
	251, 1084,
	252, 1084,
	253, 1084,
	254, 1084,
	255, 1084,
	256, 1084,
	257, 1084,
	258, 1084,
	259, 1084,
	260, 1084,
	262, 1084,
	263, 1084,
	264, 1084,
	267, 1084,
	268, 1084,
	269, 1084,
	272, 1084,
	273, 1084,
	274, 1084,
	275, 1084,
	276, 1084,
	277, 1084,
	278, 1084,
	279, 1084,
	280, 1084,
	281, 1084,
	282, 1084,
	283, 1084,
	284, 1084,
	285, 1084,
	286, 1084,
	287, 1084,
	289, 1084,
	290, 1084,
	291, 1084,
	292, 1084,
	293, 1084,
	294, 1084,
	296, 1084,
	298, 1084,
	299, 1084,
	300, 1084,
	301, 1084,
	302, 1084,
	303, 1084,
	304, 1084,
	305, 1084,
	306, 1084,
	307, 1084,
	309, 1084,
	310, 1084,
	311, 1084,
	312, 1084,
	313, 1084,
	315, 1084,
	316, 1084,
	317, 1084,
	318, 1084,
	319, 1084,
	320, 1084,
	321, 1084,
	322, 1084,
	324, 1084,
	325, 1084,
	326, 1084,
	327, 1084,
	328, 1084,
	329, 1084,
	330, 1084,
	331, 1084,
	333, 1084,
	334, 1084,
	335, 1084,
	336, 1084,
	337, 1084,
	338, 1084,
	339, 1084,
	340, 1084,
	342, 1084,
	343, 1084,
	344, 1084,
	345, 1084,
	346, 1084,
	347, 1084,
	348, 1084,
	349, 1084,
	350, 1084,
	351, 1084,
	352, 1084,
	353, 1084,
	354, 1084,
	355, 1084,
	356, 1084,
	357, 1084,
	358, 1084,
	359, 1084,
	360, 1084,
	361, 1084,
	362, 1084,
	363, 1084,
	365, 1084,
	366, 1084,
	367, 1084,
	368, 1084,
	369, 1084,
	370, 1084,
	371, 1084,
	372, 1084,
	373, 1084,
	374, 1084,
	375, 1084,
	376, 1084,
	378, 1084,
	379, 1084,
	380, 1084,
	382, 1084,
	383, 1084,
	384, 1084,
	385, 1084,
	386, 1084,
	387, 1084,
	388, 1084,
	390, 1084,
	391, 1084,
	392, 1084,
	393, 1084,
	394, 1084,
	396, 1084,
	398, 1084,
	399, 1084,
	400, 1084,
	401, 1084,
	402, 1084,
	403, 1084,
	404, 1084,
	405, 1084,
	406, 1084,
	408, 1084,
	409, 1084,
	411, 1084,
	412, 1084,
	413, 1084,
	414, 1084,
	415, 1084,
	416, 1084,
	417, 1084,
	418, 1084,
	419, 1084,
	421, 1084,
	422, 1084,
	423, 1084,
	424, 1084,
	425, 1084,
	426, 1084,
	427, 1084,
	429, 1084,
	430, 1084,
	431, 1084,
	436, 1084,
	437, 1084,
	438, 1084,
	439, 1084,
	440, 1084,
	441, 1084,
	442, 1084,
	448, 1084,
	455, 1084,
	456, 1084,
	457, 1084,
	464, 1084,
	468, 1084,
	-2, 0,
	-1, 561,
	154, 1762,
	395, 1762,
	447, 1762,
	466, 1762,
	-2, 0,
	-1, 562,
	154, 1841,
	395, 1841,
	447, 1841,
	466, 1841,
	-2, 0,
	-1, 563,
	154, 1751,
	395, 1751,
	447, 1751,
	466, 1751,
	-2, 0,
	-1, 565,
	154, 1934,
	395, 1934,
	447, 1934,
	466, 1934,
	-2, 0,
	-1, 567,
	154, 1964,
	395, 1964,
	447, 1964,
	466, 1964,
	-2, 0,
	-1, 574,
	154, 1852,
	395, 1852,
	447, 1852,
	466, 1852,
	-2, 508,
	-1, 591,
	466, 1709,
	469, 1709,
	-2, 712,
	-1, 592,
	466, 1711,
	469, 1711,
	-2, 713,
	-1, 593,
	466, 1710,
	469, 1710,
	-2, 714,
	-1, 594,
	469, 1656,
	-2, 715,
	-1, 637,
	429, 887,
	-2, 739,
	-1, 743,
	300, 642,
	351, 642,
	-2, 0,
	-1, 744,
	300, 641,
	351, 641,
	-2, 589,
	-1, 748,
	1, 671,
	463, 671,
	465, 671,
	467, 671,
	-2, 0,
	-1, 749,
	1, 711,
	151, 711,
	463, 711,
	465, 711,
	467, 711,
	-2, 0,
	-1, 757,
	1, 645,
	463, 645,
	465, 645,
	467, 645,
	-2, 0,
	-1, 760,
	1, 671,
	463, 671,
	465, 671,
	467, 671,
	-2, 0,
	-1, 761,
	1, 673,
	463, 673,
	465, 673,
	467, 673,
	-2, 0,
	-1, 762,
	1, 676,
	463, 676,
	465, 676,
	467, 676,
	-2, 0,
	-1, 766,
	1, 690,
	463, 690,
	465, 690,
	467, 690,
	-2, 0,
	-1, 767,
	1, 692,
	463, 692,
	465, 692,
	467, 692,
	-2, 0,
	-1, 811,
	138, 1086,
	226, 1086,
	261, 1086,
	-2, 1036,
	-1, 827,
	138, 1085,
	226, 1085,
	261, 1085,
	-2, 1036,
	-1, 851,
	466, 1708,
	-2, 516,
	-1, 880,
	464, 1700,
	-2, 1691,
	-1, 886,
	5, 1223,
	-2, 1742,
	-1, 887,
	5, 1224,
	-2, 1746,
	-1, 888,
	5, 1225,
	-2, 1745,
	-1, 889,
	5, 1226,
	-2, 1961,
	-1, 890,
	5, 1227,
	-2, 1854,
	-1, 891,
	5, 1228,
	-2, 1926,
	-1, 892,
	5, 1229,
	-2, 1928,
	-1, 893,
	5, 1230,
	-2, 1941,
	-1, 894,
	5, 1231,
	-2, 1929,
	-1, 895,
	5, 1232,
	-2, 1930,
	-1, 896,
	5, 1233,
	-2, 1741,
	-1, 897,
	5, 1234,
	-2, 1977,
	-1, 898,
	5, 1235,
	-2, 1815,
	-1, 899,
	5, 1236,
	-2, 1864,
	-1, 900,
	5, 1237,
	-2, 1866,
	-1, 901,
	5, 1238,
	-2, 1819,
	-1, 902,
	5, 1239,
	464, 1718,
	-2, 1709,
	-1, 903,
	5, 1295,
	464, 1295,
	-2, 2012,
	-1, 908,
	464, 1719,
	-2, 1710,
	-1, 910,
	5, 1243,
	-2, 2010,
	-1, 911,
	5, 1244,
	-2, 2011,
	-1, 912,
	5, 1245,
	-2, 1818,
	-1, 913,
	5, 1246,
	-2, 2023,
	-1, 914,
	5, 1247,
	-2, 1820,
	-1, 915,
	5, 1248,
	-2, 1821,
	-1, 916,
	5, 1249,
	-2, 1822,
	-1, 917,
	5, 1250,
	-2, 1992,
	-1, 918,
	5, 1251,
	-2, 2021,
	-1, 919,
	5, 1252,
	-2, 1798,
	-1, 920,
	5, 1253,
	-2, 1799,
	-1, 921,
	5, 1267,
	-2, 2004,
	-1, 923,
	5, 1242,
	-2, 2000,
	-1, 924,
	5, 1242,
	-2, 1999,
	-1, 925,
	5, 1242,
	-2, 2016,
	-1, 926,
	5, 1259,
	-2, 1994,
	-1, 927,
	5, 1260,
	-2, 1743,
	-1, 928,
	5, 1270,
	-2, 1993,
	-1, 929,
	5, 1272,
	-2, 2032,
	-1, 931,
	5, 1283,
	-2, 1772,
	-1, 932,
	5, 1294,
	-2, 2025,
	-1, 933,
	5, 1286,
	-2, 2026,
	-1, 934,
	5, 1294,
	-2, 2027,
	-1, 935,
	5, 1290,
	-2, 2028,
	-1, 936,
	5, 1209,
	-2, 1828,
	-1, 937,
	5, 1210,
	-2, 1829,
	-1, 938,
	466, 1706,
	-2, 1690,
	-1, 939,
	464, 2053,
	-2, 1707,
	-1, 959,
	5, 1278,
	-2, 1952,
	-1, 977,
	5, 1277,
	-2, 2033,
	-1, 987,
	5, 1279,
	430, 1279,
	-2, 1995,
	-1, 988,
	5, 1280,
	430, 1280,
	-2, 1996,
	-1, 1024,
	464, 1718,
	-2, 1709,
	-1, 1052,
	154, 1964,
	395, 1964,
	447, 1964,
	466, 1964,
	-2, 0,
	-1, 1055,
	1, 494,
	467, 494,
	-2, 970,
	-1, 1175,
	315, 1687,
	457, 1687,
	-2, 1686,
	-1, 1198,
	468, 1687,
	-2, 1688,
	-1, 1233,
	306, 738,
	429, 738,
	-2, 250,
	-1, 1253,
	285, 1073,
	-2, 878,
	-1, 1262,
	265, 1713,
	-2, 0,
	-1, 1326,
	1, 369,
	463, 369,
	465, 369,
	467, 369,
	-2, 1047,
	-1, 1329,
	4, 2031,
	11, 2031,
	12, 2031,
	14, 2031,
	15, 2031,
	16, 2031,
	17, 2031,
	18, 2031,
	19, 2031,
	21, 2031,
	22, 2031,
	23, 2031,
	24, 2031,
	25, 2031,
	27, 2031,
	30, 2031,
	31, 2031,
	33, 2031,
	35, 2031,
	38, 2031,
	39, 2031,
	40, 2031,
	41, 2031,
	42, 2031,
	43, 2031,
	44, 2031,
	45, 2031,
	46, 2031,
	47, 2031,
	48, 2031,
	49, 2031,
	51, 2031,
	52, 2031,
	53, 2031,
	54, 2031,
	55, 2031,
	56, 2031,
	59, 2031,
	60, 2031,
	61, 2031,
	62, 2031,
	64, 2031,
	65, 2031,
	66, 2031,
	69, 2031,
	70, 2031,
	71, 2031,
	72, 2031,
	73, 2031,
	74, 2031,
	75, 2031,
	76, 2031,
	77, 2031,
	78, 2031,
	79, 2031,
	81, 2031,
	82, 2031,
	83, 2031,
	84, 2031,
	85, 2031,
	87, 2031,
	88, 2031,
	89, 2031,
	97, 2031,
	98, 2031,
	99, 2031,
	100, 2031,
	101, 2031,
	102, 2031,
	103, 2031,
	104, 2031,
	106, 2031,
	108, 2031,
	109, 2031,
	111, 2031,
	114, 2031,
	115, 2031,
	116, 2031,
	118, 2031,
	120, 2031,
	121, 2031,
	123, 2031,
	124, 2031,
	125, 2031,
	126, 2031,
	127, 2031,
	128, 2031,
	129, 2031,
	130, 2031,
	131, 2031,
	132, 2031,
	133, 2031,
	134, 2031,
	135, 2031,
	139, 2031,
	140, 2031,
	141, 2031,
	142, 2031,
	143, 2031,
	144, 2031,
	145, 2031,
	146, 2031,
	147, 2031,
	148, 2031,
	149, 2031,
	150, 2031,
	152, 2031,
	155, 2031,
	156, 2031,
	157, 2031,
	159, 2031,
	160, 2031,
	162, 2031,
	163, 2031,
	165, 2031,
	166, 2031,
	167, 2031,
	168, 2031,
	169, 2031,
	170, 2031,
	171, 2031,
	172, 2031,
	173, 2031,
	174, 2031,
	175, 2031,
	176, 2031,
	177, 2031,
	178, 2031,
	179, 2031,
	180, 2031,
	181, 2031,
	183, 2031,
	184, 2031,
	185, 2031,
	187, 2031,
	188, 2031,
	189, 2031,
	190, 2031,
	191, 2031,
	192, 2031,
	193, 2031,
	194, 2031,
	195, 2031,
	197, 2031,
	199, 2031,
	200, 2031,
	201, 2031,
	202, 2031,
	203, 2031,
	204, 2031,
	205, 2031,
	206, 2031,
	207, 2031,
	208, 2031,
	209, 2031,
	210, 2031,
	211, 2031,
	212, 2031,
	213, 2031,
	214, 2031,
	215, 2031,
	217, 2031,
	218, 2031,
	220, 2031,
	221, 2031,
	222, 2031,
	223, 2031,
	224, 2031,
	225, 2031,
	227, 2031,
	228, 2031,
	231, 2031,
	232, 2031,
	233, 2031,
	234, 2031,
	235, 2031,
	236, 2031,
	237, 2031,
	238, 2031,
	239, 2031,
	240, 2031,
	241, 2031,
	242, 2031,
	243, 2031,
	244, 2031,
	245, 2031,
	246, 2031,
	247, 2031,
	248, 2031,
	250, 2031,
	253, 2031,
	254, 2031,
	256, 2031,
	257, 2031,
	258, 2031,
	259, 2031,
	260, 2031,
	262, 2031,
	263, 2031,
	264, 2031,
	267, 2031,
	268, 2031,
	269, 2031,
	270, 2031,
	272, 2031,
	273, 2031,
	274, 2031,
	276, 2031,
	278, 2031,
	279, 2031,
	280, 2031,
	281, 2031,
	282, 2031,
	283, 2031,
	284, 2031,
	285, 2031,
	286, 2031,
	287, 2031,
	289, 2031,
	290, 2031,
	291, 2031,
	292, 2031,
	293, 2031,
	294, 2031,
	296, 2031,
	298, 2031,
	299, 2031,
	300, 2031,
	301, 2031,
	302, 2031,
	303, 2031,
	304, 2031,
	305, 2031,
	306, 2031,
	307, 2031,
	309, 2031,
	310, 2031,
	311, 2031,
	312, 2031,
	313, 2031,
	314, 2031,
	315, 2031,
	316, 2031,
	317, 2031,
	318, 2031,
	319, 2031,
	320, 2031,
	321, 2031,
	322, 2031,
	324, 2031,
	325, 2031,
	326, 2031,
	327, 2031,
	328, 2031,
	329, 2031,
	330, 2031,
	331, 2031,
	332, 2031,
	333, 2031,
	334, 2031,
	335, 2031,
	336, 2031,
	337, 2031,
	338, 2031,
	339, 2031,
	340, 2031,
	342, 2031,
	343, 2031,
	344, 2031,
	345, 2031,
	346, 2031,
	347, 2031,
	348, 2031,
	349, 2031,
	350, 2031,
	351, 2031,
	353, 2031,
	354, 2031,
	355, 2031,
	356, 2031,
	357, 2031,
	358, 2031,
	359, 2031,
	360, 2031,
	361, 2031,
	362, 2031,
	363, 2031,
	365, 2031,
	366, 2031,
	367, 2031,
	368, 2031,
	369, 2031,
	370, 2031,
	371, 2031,
	372, 2031,
	373, 2031,
	374, 2031,
	375, 2031,
	376, 2031,
	378, 2031,
	379, 2031,
	380, 2031,
	382, 2031,
	383, 2031,
	384, 2031,
	385, 2031,
	386, 2031,
	387, 2031,
	388, 2031,
	390, 2031,
	391, 2031,
	392, 2031,
	393, 2031,
	394, 2031,
	396, 2031,
	398, 2031,
	399, 2031,
	400, 2031,
	401, 2031,
	402, 2031,
	404, 2031,
	405, 2031,
	406, 2031,
	408, 2031,
	409, 2031,
	412, 2031,
	413, 2031,
	414, 2031,
	415, 2031,
	416, 2031,
	417, 2031,
	419, 2031,
	421, 2031,
	422, 2031,
	423, 2031,
	424, 2031,
	425, 2031,
	426, 2031,
	427, 2031,
	429, 2031,
	430, 2031,
	431, 2031,
	436, 2031,
	437, 2031,
	438, 2031,
	439, 2031,
	440, 2031,
	441, 2031,
	442, 2031,
	443, 2031,
	445, 2031,
	446, 2031,
	447, 2031,
	448, 2031,
	449, 2031,
	450, 2031,
	452, 2031,
	453, 2031,
	454, 2031,
	455, 2031,
	456, 2031,
	457, 2031,
	458, 2031,
	459, 2031,
	460, 2031,
	462, 2031,
	465, 2031,
	466, 2031,
	468, 2031,
	469, 2031,
	-2, 0,
	-1, 1334,
	154, 1934,
	395, 1934,
	447, 1934,
	466, 1934,
	-2, 0,
	-1, 1364,
	300, 642,
	351, 642,
	-2, 0,
	-1, 1388,
	1, 637,
	463, 637,
	465, 637,
	467, 637,
	-2, 0,
	-1, 1389,
	1, 662,
	463, 662,
	465, 662,
	467, 662,
	-2, 0,
	-1, 1390,
	1, 644,
	463, 644,
	465, 644,
	467, 644,
	-2, 0,
	-1, 1392,
	1, 648,
	463, 648,
	465, 648,
	467, 648,
	-2, 0,
	-1, 1417,
	1, 1984,
	463, 1984,
	465, 1984,
	466, 1984,
	467, 1984,
	-2, 688,
	-1, 1418,
	1, 1931,
	463, 1931,
	465, 1931,
	466, 1931,
	467, 1931,
	-2, 689,
	-1, 1433,
	1, 965,
	467, 965,
	-2, 970,
	-1, 1438,
	138, 1085,
	226, 1085,
	261, 1085,
	-2, 1036,
	-1, 1536,
	122, 1049,
	138, 1049,
	196, 1049,
	226, 1049,
	261, 1049,
	271, 1049,
	410, 1049,
	-2, 1451,
	-1, 1589,
	465, 1590,
	-2, 0,
	-1, 1631,
	122, 1049,
	138, 1049,
	196, 1049,
	226, 1049,
	261, 1049,
	271, 1049,
	410, 1049,
	-2, 1160,
	-1, 1681,
	464, 1282,
	-2, 1270,
	-1, 1725,
	1, 496,
	467, 496,
	-2, 970,
	-1, 1923,
	1, 639,
	463, 639,
	465, 639,
	467, 639,
	-2, 0,
	-1, 1924,
	1, 664,
	463, 664,
	465, 664,
	467, 664,
	-2, 0,
	-1, 2016,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1331,
	-1, 2017,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1332,
	-1, 2018,
	82, 0,
	209, 0,
	210, 0,
	449, 0,
	450, 0,
	-2, 1333,
	-1, 2019,
	82, 0,
	209, 0,
	210, 0,
	449, 0,
	450, 0,
	-2, 1334,
	-1, 2020,
	82, 0,
	209, 0,
	210, 0,
	449, 0,
	450, 0,
	-2, 1335,
	-1, 2021,
	82, 0,
	209, 0,
	210, 0,
	449, 0,
	450, 0,
	-2, 1336,
	-1, 2022,
	82, 0,
	209, 0,
	210, 0,
	449, 0,
	450, 0,
	-2, 1337,
	-1, 2023,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1338,
	-1, 2035,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1350,
	-1, 2036,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1351,
	-1, 2037,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1352,
	-1, 2040,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1357,
	-1, 2046,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1361,
	-1, 2048,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1369,
	-1, 2049,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1370,
	-1, 2050,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1371,
	-1, 2051,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1372,
	-1, 2146,
	5, 1239,
	154, 1601,
	464, 1718,
	-2, 1709,
	-1, 2147,
	154, 1602,
	-2, 1988,
	-1, 2148,
	154, 1603,
	-2, 1851,
	-1, 2149,
	154, 1604,
	-2, 1773,
	-1, 2150,
	154, 1605,
	-2, 1809,
	-1, 2151,
	154, 1606,
	-2, 1849,
	-1, 2152,
	154, 1607,
	-2, 1925,
	-1, 2153,
	154, 1608,
	-2, 1434,
	-1, 2229,
	1, 1161,
	2, 1161,
	87, 1161,
	122, 1161,
	138, 1161,
	151, 1161,
	155, 1161,
	161, 1161,
	164, 1161,
	187, 1161,
	196, 1161,
	206, 1161,
	222, 1161,
	226, 1161,
	245, 1161,
	261, 1161,
	265, 1161,
	271, 1161,
	323, 1161,
	325, 1161,
	410, 1161,
	420, 1161,
	433, 1161,
	434, 1161,
	435, 1161,
	444, 1161,
	463, 1161,
	465, 1161,
	467, 1161,
	469, 1161,
	-2, 1160,
	-1, 2234,
	464, 1692,
	-2, 1704,
	-1, 2256,
	464, 1281,
	-2, 1271,
	-1, 2502,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1359,
	-1, 2503,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1363,
	-1, 2509,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1365,
	-1, 2693,
	203, 970,
	296, 970,
	304, 970,
	444, 970,
	-2, 493,
	-1, 2787,
	285, 1073,
	-2, 878,
	-1, 2876,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1367,
	-1, 2883,
	200, 0,
	202, 0,
	253, 0,
	-2, 1386,
	-1, 2946,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1415,
	-1, 2947,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1416,
	-1, 2948,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1417,
	-1, 2952,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1421,
	-1, 2953,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1422,
	-1, 2954,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1423,
	-1, 2998,
	464, 1693,
	-2, 1705,
	-1, 3087,
	466, 2135,
	-2, 1013,
	-1, 3138,
	200, 0,
	202, 0,
	253, 0,
	-2, 1387,
	-1, 3141,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1390,
	-1, 3142,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1392,
	-1, 3304,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1391,
	-1, 3305,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1393,
	-1, 3315,
	200, 0,
	-2, 1424,
	-1, 3425,
	200, 0,
	-2, 1425,
	-1, 3543,
	43, 0,
	173, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1991,
}

const sqlPrivate = 57344

const sqlLast = 78345

var sqlAct = [...]int{

	908, 3345, 3245, 3542, 3637, 3374, 3348, 3552, 2626, 3120,
	3627, 3521, 3512, 2178, 3509, 3553, 2774, 3554, 3590, 3496,
	3018, 2396, 3334, 3381, 2914, 3541, 3429, 2627, 1025, 2220,
	837, 3269, 3293, 2003, 3079, 3074, 2803, 3386, 1179, 214,
	3200, 214, 214, 2710, 214, 214, 214, 214, 214, 2063,
	2796, 214, 1451, 3061, 3274, 2868, 2344, 2798, 2285, 593,
	2770, 572, 1656, 1626, 1773, 3019, 1314, 2360, 2368, 2495,
	1080, 2385, 1534, 2431, 3119, 1061, 1172, 214, 2371, 2221,
	2654, 593, 2668, 3319, 1899, 1318, 1017, 2641, 2429, 3172,
	1624, 828, 2420, 691, 1204, 2612, 2439, 2428, 1856, 1859,
	2397, 2630, 2422, 1849, 1848, 1598, 2287, 3430, 2222, 2094,
	2530, 880, 2969, 1782, 1372, 2076, 4, 2491, 2000, 1996,
	2611, 1188, 2632, 1191, 847, 2224, 2114, 1544, 1811, 2438,
	904, 836, 142, 1807, 2345, 1800, 1068, 2369, 1758, 1562,
	1760, 1433, 2196, 1599, 2106, 2321, 2772, 2060, 2175, 2390,
	1181, 824, 3375, 1009, 1251, 1327, 2277, 2088, 540, 1311,
	1840, 2320, 2432, 2204, 1012, 594, 526, 1057, 1608, 2673,
	548, 595, 991, 208, 2142, 1525, 32, 214, 214, 2186,
	1301, 2077, 1452, 1450, 1839, 207, 556, 566, 149, 589,
	1865, 1325, 685, 1277, 86, 666, 150, 637, 206, 1201,
	1877, 1557, 1772, 864, 551, 543, 1014, 142, 37, 1456,
	36, 34, 25, 989, 23, 21, 1432, 755, 2987, 1259,
	2988, 1879, 2526, 3667, 738, 2584, 2585, 2195, 1900, 2628,
	2813, 3658, 598, 1879, 1879, 2195, 3657, 1065, 3636, 3619,
	2195, 3617, 1816, 3214, 601, 3214, 3576, 3574, 3572, 3569,
	3577, 2195, 2195, 3570, 598, 3566, 2584, 2585, 832, 3567,
	3563, 827, 2444, 3539, 1816, 2812, 601, 1816, 3538, 1065,
	701, 3537, 1816, 1464, 1465, 1891, 3534, 3533, 3491, 3485,
	1891, 1891, 2249, 2195, 3484, 3479, 3478, 3472, 2195, 3214,
	3214, 1816, 2691, 1495, 2973, 3466, 1023, 3464, 1657, 3214,
	1467, 3214, 992, 992, 3427, 3408, 3405, 1006, 2249, 1816,
	3214, 3364, 3363, 3355, 3354, 1816, 1816, 1816, 3214, 1321,
	2599, 3325, 3306, 3291, 832, 1816, 2249, 1891, 1466, 3282,
	125, 812, 2195, 2826, 3242, 3492, 57, 1486, 2195, 811,
	1037, 3232, 2188, 3213, 1483, 2195, 833, 3214, 1222, 3140,
	58, 120, 3095, 2249, 3089, 2245, 2842, 3059, 2842, 841,
	1042, 3060, 2993, 2590, 62, 2983, 2994, 2976, 2907, 2984,
	2895, 2195, 1816, 819, 2195, 3411, 2340, 2841, 2833, 39,
	122, 2842, 2834, 3134, 2765, 1391, 2625, 1891, 1891, 1816,
	2195, 993, 2623, 38, 2590, 68, 2195, 995, 2973, 996,
	2187, 1489, 1490, 1491, 1492, 2622, 2576, 3233, 2558, 2195,
	2195, 1472, 2559, 2547, 1038, 41, 2545, 2195, 1464, 1465,
	42, 1816, 2546, 2418, 2834, 74, 2417, 1895, 123, 2262,
	1895, 2335, 2248, 2195, 40, 85, 2249, 1777, 2276, 1731,
	75, 82, 1494, 1496, 2826, 1467, 2243, 2236, 2600, 2194,
	2195, 1816, 2366, 2195, 1894, 2494, 2195, 1878, 1895, 1815,
	2274, 1594, 1200, 1625, 3046, 2871, 2851, 43, 1810, 182,
	2814, 1481, 1482, 1466, 1374, 2215, 2214, 2213, 1216, 2600,
	2212, 2211, 1751, 1535, 76, 997, 1880, 994, 818, 2815,
	182, 1210, 817, 816, 686, 815, 1487, 182, 1880, 1880,
	814, 810, 809, 808, 807, 2471, 3414, 806, 805, 184,
	804, 803, 802, 801, 800, 1221, 799, 798, 736, 57,
	689, 688, 2529, 735, 734, 2584, 2585, 733, 732, 731,
	184, 214, 730, 58, 729, 728, 727, 184, 726, 2584,
	2585, 725, 724, 907, 723, 2812, 2601, 62, 722, 721,
	720, 719, 718, 183, 717, 716, 1472, 715, 714, 214,
	713, 712, 711, 176, 710, 700, 214, 699, 657, 656,
	614, 177, 613, 865, 183, 612, 1493, 2601, 68, 604,
	603, 183, 214, 1083, 214, 214, 1184, 214, 1083, 214,
	602, 176, 151, 579, 1488, 77, 578, 214, 214, 177,
	577, 1067, 576, 44, 560, 1072, 75, 1038, 74, 204,
	203, 835, 1081, 151, 202, 201, 2393, 1192, 85, 200,
	151, 199, 214, 75, 82, 198, 197, 47, 148, 80,
	196, 81, 3189, 45, 1887, 195, 214, 124, 194, 1184,
	1184, 214, 214, 46, 214, 1215, 1878, 1971, 193, 192,
	182, 191, 190, 189, 188, 1194, 214, 2187, 187, 186,
	185, 3151, 50, 2590, 214, 2991, 118, 76, 2594, 2586,
	2587, 2588, 2589, 2591, 2592, 1038, 121, 2590, 214, 214,
	214, 214, 214, 1184, 1184, 2843, 2671, 182, 1184, 1535,
	184, 214, 1184, 214, 214, 2552, 2541, 2595, 2593, 2594,
	2586, 2587, 2588, 2589, 2591, 2592, 2378, 214, 2350, 1055,
	2237, 1484, 1480, 119, 1477, 1475, 1476, 1468, 1469, 1470,
	1471, 1473, 1474, 1565, 182, 1627, 152, 184, 1020, 1564,
	1565, 2228, 2307, 2133, 183, 1076, 1564, 1169, 1174, 2131,
	2584, 2585, 2126, 1184, 176, 1756, 2124, 1463, 2600, 1641,
	1568, 1902, 177, 1050, 1551, 1546, 2091, 1563, 1206, 3412,
	1074, 1027, 1203, 3559, 184, 1264, 214, 3540, 1202, 1322,
	598, 183, 3460, 151, 2837, 3420, 3, 3283, 77, 3193,
	214, 176, 601, 1175, 1209, 3344, 1214, 1198, 1220, 177,
	3278, 3171, 3170, 2584, 2585, 214, 3158, 3157, 3156, 3155,
	1344, 3149, 3148, 1315, 3147, 1330, 1332, 3058, 183, 3007,
	151, 148, 80, 3006, 81, 1393, 182, 182, 176, 1901,
	142, 142, 2092, 3004, 1005, 2997, 177, 3044, 2966, 2965,
	182, 2964, 118, 182, 2891, 2887, 2666, 2619, 1328, 1260,
	1260, 2610, 1464, 1465, 2583, 690, 2601, 151, 1546, 118,
	2580, 2579, 182, 182, 2584, 2585, 184, 184, 2577, 1305,
	1308, 1261, 1468, 1469, 1470, 1471, 1473, 1474, 2565, 1467,
	184, 2564, 1533, 184, 1340, 1401, 2563, 2560, 2590, 1198,
	2557, 1343, 833, 2535, 2534, 2527, 2419, 1547, 2379, 1545,
	1853, 2229, 184, 184, 2093, 2090, 119, 1466, 2099, 1463,
	183, 183, 1462, 1439, 3665, 1177, 3635, 3634, 1821, 152,
	176, 176, 1819, 3575, 183, 1026, 2916, 183, 177, 177,
	3529, 3527, 1438, 3457, 176, 3454, 3451, 176, 3450, 1752,
	2322, 2590, 177, 1431, 1392, 177, 183, 183, 2490, 151,
	151, 3449, 3445, 3439, 3415, 3409, 176, 176, 3404, 3403,
	182, 2066, 3340, 151, 177, 177, 687, 3317, 1253, 1256,
	3301, 3300, 1365, 1437, 1349, 3288, 2595, 2593, 2594, 2586,
	2587, 2588, 2589, 2591, 2592, 2392, 151, 3287, 2685, 1449,
	1472, 1436, 2072, 2586, 2587, 2588, 2589, 2591, 2592, 3277,
	184, 214, 2590, 3267, 2095, 3264, 3258, 1538, 3188, 3169,
	3109, 1543, 1434, 3106, 3035, 3034, 3022, 3021, 2979, 2882,
	2844, 1336, 2827, 2790, 2759, 2736, 2600, 214, 1605, 2713,
	2712, 1596, 2687, 2624, 2556, 812, 2555, 214, 1083, 214,
	214, 214, 214, 811, 183, 2540, 2518, 593, 214, 214,
	1459, 1460, 593, 214, 176, 1440, 2359, 1651, 214, 1569,
	2377, 1566, 177, 1558, 1184, 1555, 2713, 1644, 1464, 1465,
	2258, 2257, 1356, 1723, 2232, 2209, 2193, 833, 2122, 1529,
	1640, 1597, 1593, 151, 1567, 1083, 1592, 2600, 1635, 1591,
	1590, 1615, 1742, 1741, 1589, 1467, 1751, 1748, 1588, 1587,
	1586, 1585, 1728, 1583, 2089, 1582, 1581, 1580, 1649, 1754,
	1579, 1578, 1577, 1576, 1757, 1602, 1603, 1575, 1574, 1722,
	1573, 1572, 1571, 1466, 2601, 1548, 992, 1530, 2254, 1528,
	1523, 1643, 1049, 1023, 1040, 1023, 1559, 1560, 1033, 1903,
	3432, 3261, 1653, 3190, 3144, 3003, 1634, 1720, 2986, 2982,
	142, 2544, 1648, 2251, 1751, 2210, 2647, 3329, 3192, 3002,
	1645, 1547, 2683, 1777, 1526, 2584, 2585, 1636, 3235, 2739,
	3452, 1647, 1751, 2799, 3281, 3234, 1069, 2989, 1751, 2829,
	2828, 3067, 1062, 1071, 1065, 2601, 1565, 1627, 1632, 1726,
	1065, 1429, 1564, 1745, 2562, 1620, 2588, 2589, 2591, 2592,
	2561, 1364, 2500, 2309, 1725, 3387, 2132, 3413, 930, 1066,
	1184, 214, 2130, 1737, 1595, 2125, 3033, 1083, 833, 2123,
	598, 2324, 1750, 1402, 1900, 598, 863, 1623, 1629, 1622,
	1621, 1619, 601, 1618, 1617, 1070, 1652, 601, 796, 1766,
	1198, 1719, 2776, 3382, 2775, 1373, 1817, 2586, 2587, 2588,
	2589, 2591, 2592, 1065, 1654, 1056, 214, 3343, 1578, 1553,
	214, 214, 1578, 1797, 580, 2091, 1799, 1464, 1465, 1804,
	1374, 1850, 3050, 214, 3320, 1063, 3560, 797, 3037, 2849,
	1743, 2753, 214, 1064, 214, 1684, 214, 1495, 3638, 1795,
	214, 2628, 2918, 2550, 1467, 2107, 1004, 2256, 1470, 1471,
	1473, 1474, 214, 1584, 1561, 2768, 2593, 2594, 2586, 2587,
	2588, 2589, 2591, 2592, 1847, 1237, 1746, 3571, 3568, 2808,
	1781, 3014, 1466, 3506, 3075, 3028, 2426, 2389, 3606, 1854,
	3471, 2092, 3605, 3561, 2487, 1353, 3224, 1843, 2515, 831,
	2695, 1532, 1184, 1225, 1184, 214, 1184, 2263, 2289, 214,
	1235, 792, 1184, 1957, 790, 1184, 214, 1808, 214, 214,
	788, 586, 2513, 786, 3662, 777, 783, 3373, 1184, 1184,
	1184, 3366, 214, 3052, 1955, 1400, 1203, 3048, 1862, 214,
	3047, 1871, 1202, 3011, 598, 1448, 1738, 652, 593, 214,
	1062, 214, 3010, 214, 1761, 214, 601, 214, 1762, 1464,
	1465, 2539, 906, 2093, 2090, 1472, 2538, 1803, 2537, 2536,
	1814, 214, 1399, 830, 214, 1869, 214, 1071, 2280, 1495,
	1774, 1446, 1236, 1065, 2504, 214, 1467, 2342, 2334, 2331,
	2278, 2312, 2244, 1919, 831, 1761, 1494, 1496, 2292, 1762,
	1831, 1830, 1905, 2684, 588, 2047, 214, 1435, 1199, 2280,
	1770, 2697, 214, 1071, 1466, 214, 1062, 2118, 2117, 1846,
	2005, 2278, 862, 826, 2386, 1270, 653, 1269, 2510, 1070,
	1030, 1775, 1776, 3299, 538, 1864, 1867, 1083, 2738, 1910,
	1907, 2511, 1289, 1063, 1351, 2516, 780, 1763, 832, 2850,
	1487, 1064, 1328, 3470, 1328, 1346, 1231, 1398, 533, 1771,
	1765, 1028, 3622, 2095, 1969, 1070, 2004, 1914, 830, 1829,
	1268, 1245, 1267, 1975, 2270, 1984, 1882, 1474, 2311, 1884,
	1965, 3350, 1886, 2474, 2300, 2235, 1889, 1981, 1763, 1812,
	1447, 1783, 1050, 1896, 1978, 1897, 833, 1472, 833, 3531,
	1909, 1765, 1636, 1752, 1749, 582, 2161, 2062, 3557, 1063,
	1787, 2062, 2299, 2078, 2079, 1767, 1868, 1064, 3024, 2856,
	1927, 598, 1083, 3220, 587, 1020, 1442, 1020, 1494, 1496,
	1922, 2078, 2104, 601, 3623, 2855, 1048, 1937, 1366, 2468,
	2291, 2252, 1252, 832, 1031, 1968, 1930, 1019, 1488, 1445,
	2095, 2108, 1347, 1784, 1923, 2242, 1767, 1388, 708, 2328,
	1973, 1752, 2322, 2089, 584, 214, 2477, 2141, 2107, 2145,
	2145, 2159, 1982, 2078, 2592, 1362, 2179, 2181, 1250, 1752,
	2322, 2185, 1487, 3236, 1662, 1752, 2322, 829, 3642, 2512,
	1428, 1065, 1972, 1974, 3605, 1979, 1083, 214, 2514, 3595,
	1977, 1970, 2805, 581, 1983, 1924, 214, 1021, 1389, 214,
	1747, 3125, 1083, 3124, 1768, 812, 1374, 2071, 812, 812,
	3625, 2492, 2493, 1992, 2233, 1898, 1993, 1994, 1967, 1931,
	2750, 1812, 3298, 1788, 1908, 3558, 1538, 2694, 1374, 2806,
	585, 2234, 1397, 3489, 3630, 2103, 2732, 1916, 1917, 1918,
	3652, 583, 2217, 655, 654, 1768, 2290, 1065, 2216, 2901,
	2116, 1777, 2226, 2227, 1879, 2120, 2121, 2476, 1233, 3218,
	2074, 1468, 1469, 1470, 1471, 1473, 1474, 2310, 2744, 1964,
	1488, 1412, 829, 2166, 1768, 2230, 2473, 2700, 2898, 3446,
	992, 1023, 214, 833, 1789, 1790, 648, 2805, 647, 2101,
	1184, 2070, 2201, 1785, 794, 3036, 833, 2068, 793, 1956,
	833, 784, 3556, 1352, 1794, 1023, 2762, 784, 1779, 1252,
	785, 2200, 534, 784, 2696, 1288, 1634, 1083, 684, 2726,
	1954, 2154, 214, 2001, 2002, 1786, 2279, 2183, 1728, 1230,
	214, 2170, 2246, 1029, 2728, 1556, 2206, 2207, 1350, 2202,
	772, 214, 2191, 2192, 1764, 3025, 2275, 142, 2280, 2095,
	2899, 2681, 2044, 3624, 214, 2475, 3594, 1184, 1632, 2730,
	2294, 3351, 823, 2725, 3254, 535, 3049, 2374, 2332, 1768,
	214, 1083, 3487, 3121, 1184, 1991, 214, 214, 3311, 3612,
	2253, 3517, 3219, 1761, 3456, 1764, 2098, 1762, 833, 1522,
	1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 214,
	3211, 3488, 214, 2554, 2205, 536, 3643, 537, 214, 2729,
	2281, 1567, 2225, 1791, 832, 781, 3260, 1966, 1929, 2261,
	3115, 1376, 214, 2999, 1348, 3628, 1043, 709, 3208, 214,
	2329, 214, 1777, 214, 3126, 773, 2343, 2506, 772, 214,
	2260, 2061, 214, 1455, 214, 3555, 214, 2346, 214, 214,
	2095, 214, 1184, 1184, 1184, 2314, 1184, 2266, 2264, 2347,
	823, 214, 214, 1926, 214, 214, 1559, 1560, 1441, 2268,
	3209, 3063, 1409, 1921, 3604, 214, 1763, 1792, 1047, 2293,
	2296, 3602, 2042, 2302, 2284, 2045, 3392, 2400, 1798, 1765,
	214, 214, 214, 2363, 2313, 214, 3266, 214, 3593, 3629,
	214, 2269, 214, 2794, 214, 3653, 2381, 2330, 2162, 2306,
	2323, 2325, 2326, 2327, 2409, 1838, 2267, 1361, 1363, 1880,
	2383, 1604, 3255, 2440, 1041, 214, 214, 214, 214, 214,
	214, 3631, 214, 773, 2041, 1036, 525, 938, 2413, 2414,
	2339, 1203, 2443, 3122, 1767, 2357, 2346, 2348, 2346, 598,
	3295, 2442, 1175, 2445, 2446, 2425, 2402, 2352, 2456, 2354,
	214, 601, 2367, 1607, 2955, 1410, 1778, 1739, 1198, 1444,
	3167, 2415, 2411, 2869, 2674, 2295, 210, 2395, 528, 529,
	774, 544, 528, 544, 554, 559, 142, 3357, 575, 2458,
	3356, 2459, 2479, 3647, 2481, 1454, 210, 1607, 1662, 1662,
	3338, 3436, 2391, 2453, 2391, 2447, 1328, 2448, 2410, 3013,
	2427, 2416, 2455, 2460, 695, 2462, 3204, 2464, 210, 2795,
	3205, 2461, 2406, 2463, 2407, 2465, 2408, 3223, 1522, 2069,
	2708, 1611, 2704, 2472, 3222, 2382, 2370, 1768, 1411, 2361,
	1863, 1736, 2315, 1768, 1852, 1851, 1198, 1198, 1825, 2897,
	2482, 3458, 3294, 1988, 2316, 2507, 2532, 2533, 3497, 214,
	3207, 2197, 2486, 1614, 1961, 1611, 1732, 2043, 1454, 1806,
	3270, 2542, 2058, 3210, 3080, 1759, 2333, 3128, 774, 2358,
	1291, 1915, 1609, 1453, 1377, 2484, 2485, 2466, 775, 1805,
	1198, 1611, 3380, 2489, 3378, 3339, 2056, 1614, 1612, 2981,
	2718, 2715, 2714, 2956, 605, 2498, 1980, 2640, 1734, 2639,
	821, 2957, 772, 1020, 528, 528, 1609, 3168, 1455, 1801,
	1390, 1610, 210, 1614, 1198, 1735, 1198, 776, 2199, 1276,
	830, 2528, 1612, 2198, 823, 2241, 3441, 1020, 2240, 2239,
	1775, 1776, 2203, 3646, 705, 2166, 2166, 3129, 2238, 1262,
	1083, 2621, 2505, 2543, 1989, 1610, 1453, 3296, 1612, 2365,
	2635, 2636, 1274, 3246, 3346, 707, 1263, 2637, 1802, 214,
	3225, 2412, 822, 698, 2838, 2643, 3206, 214, 1861, 2634,
	3221, 2764, 3609, 1764, 214, 3376, 775, 214, 214, 1083,
	3336, 3173, 2970, 2112, 3611, 2317, 2318, 3500, 1083, 1683,
	3459, 1613, 2052, 3442, 1426, 214, 3573, 773, 3453, 3316,
	2549, 2053, 3166, 2661, 3054, 2054, 2613, 1659, 2664, 2059,
	214, 833, 3337, 2881, 2675, 776, 2847, 2672, 2578, 2517,
	1424, 1406, 1404, 1387, 2650, 1613, 1385, 2362, 214, 214,
	214, 1383, 2649, 3347, 214, 1381, 2341, 214, 2166, 2166,
	2166, 2652, 2692, 2665, 214, 214, 2651, 214, 214, 214,
	1023, 1613, 1379, 3501, 2308, 2698, 2662, 2663, 2259, 3443,
	1371, 214, 214, 214, 1642, 1023, 1369, 2646, 1272, 2669,
	214, 2616, 2617, 2618, 1639, 2670, 2645, 1427, 1341, 2614,
	2864, 2629, 214, 1184, 2863, 214, 2701, 2702, 2717, 2679,
	1953, 2722, 2723, 1083, 1023, 2644, 606, 607, 826, 2660,
	2470, 1083, 2716, 2469, 2690, 2720, 214, 1662, 2450, 214,
	214, 1963, 3551, 214, 1934, 1275, 1184, 214, 1721, 1570,
	2642, 1345, 2705, 1249, 2111, 1184, 1184, 1184, 2741, 2656,
	2672, 3241, 214, 3231, 2688, 2689, 703, 704, 214, 3494,
	3197, 2743, 774, 214, 2909, 214, 1425, 2801, 1273, 2760,
	2785, 706, 214, 2055, 1019, 2693, 1019, 3591, 2751, 2676,
	2677, 2678, 2057, 3078, 3031, 696, 697, 2699, 2773, 3029,
	2162, 2162, 1423, 1405, 1403, 1386, 1184, 1184, 1384, 1766,
	3012, 1648, 2810, 1382, 214, 214, 2793, 1380, 214, 2784,
	2797, 2731, 609, 608, 782, 1184, 2737, 2777, 2387, 2781,
	2746, 2440, 2376, 2657, 1378, 1766, 2754, 2375, 2355, 1893,
	2440, 1892, 1370, 1890, 1021, 1888, 1021, 2749, 1368, 2755,
	1271, 1885, 214, 1883, 1083, 214, 214, 1083, 214, 2761,
	2733, 2734, 1881, 2314, 2735, 1872, 2747, 1822, 1808, 1952,
	2748, 2802, 610, 611, 1820, 2655, 1808, 1809, 820, 214,
	775, 1023, 1796, 1192, 2825, 1793, 1081, 1780, 1034, 2800,
	1198, 1769, 3397, 2756, 2757, 2659, 1001, 2758, 1457, 2496,
	2809, 1650, 2807, 2162, 2162, 2162, 3606, 3523, 2845, 3290,
	1846, 2816, 3285, 2836, 2823, 2824, 1044, 2840, 3284, 776,
	1002, 2441, 1083, 575, 2862, 1755, 1227, 2861, 2682, 142,
	142, 3399, 2298, 1083, 3088, 214, 1777, 2280, 2280, 210,
	3448, 210, 210, 1925, 1189, 1951, 210, 787, 789, 2278,
	2297, 2906, 1950, 2846, 210, 1205, 2852, 1932, 2853, 1367,
	2854, 2884, 2912, 3422, 2709, 1421, 1422, 833, 1464, 1465,
	3174, 2658, 2319, 2497, 2301, 1461, 2859, 2858, 539, 1229,
	1729, 2336, 2303, 3493, 1458, 2338, 2865, 2818, 2819, 2820,
	2305, 2821, 2822, 1248, 2867, 1467, 3461, 2337, 210, 210,
	3071, 1189, 2304, 2893, 2894, 3062, 1003, 2996, 1464, 1465,
	2166, 2166, 2394, 210, 2967, 2184, 1724, 1655, 3626, 2680,
	3645, 1287, 2889, 1466, 550, 2584, 2585, 2900, 2902, 2903,
	3463, 214, 2752, 1464, 1465, 210, 210, 210, 210, 1189,
	2272, 2271, 2915, 1683, 1683, 1535, 214, 2919, 575, 1355,
	210, 210, 1083, 2115, 2908, 1354, 1198, 3001, 2904, 2272,
	2686, 1659, 1659, 1466, 695, 2782, 2920, 2924, 2273, 2990,
	2119, 2113, 214, 2086, 2786, 2787, 2788, 3145, 3000, 2896,
	2921, 2998, 2932, 2934, 2922, 1408, 2346, 2959, 1407, 1533,
	1531, 2166, 2166, 2166, 2166, 2166, 2166, 2166, 2166, 2166,
	2166, 2166, 2166, 2166, 2166, 2166, 2166, 2166, 2166, 2166,
	2985, 2166, 1020, 2960, 3654, 3433, 3370, 3330, 3328, 214,
	3257, 2968, 3191, 210, 3112, 2831, 2832, 1020, 2974, 2975,
	3038, 1023, 1023, 3105, 3094, 3073, 142, 210, 3057, 3056,
	3055, 3027, 2977, 2978, 1812, 2972, 2817, 2791, 2789, 2452,
	2451, 2404, 559, 3051, 2992, 2380, 1020, 214, 214, 2356,
	2073, 1949, 1948, 1947, 1946, 214, 3008, 1875, 1874, 1873,
	1855, 1833, 1832, 1828, 1083, 214, 1827, 1826, 1824, 1184,
	3042, 1823, 1420, 1419, 1300, 3043, 3045, 1299, 1298, 1297,
	1296, 1295, 1294, 214, 3005, 1293, 1292, 3016, 1290, 1285,
	3090, 1284, 1283, 1662, 1282, 1281, 1244, 214, 214, 1184,
	1184, 1184, 1243, 214, 214, 214, 1242, 3082, 214, 214,
	1241, 3085, 214, 214, 1240, 1184, 1239, 1238, 3053, 1232,
	3076, 214, 1083, 3069, 3068, 3081, 1226, 1224, 1223, 1662,
	1046, 3070, 1045, 2314, 976, 2162, 2162, 2001, 2925, 885,
	1730, 2400, 1083, 795, 639, 779, 3349, 1414, 73, 1234,
	625, 67, 3026, 2001, 2935, 634, 3505, 2724, 1933, 1375,
	1935, 2648, 3072, 3084, 2208, 3486, 3152, 2553, 3428, 3310,
	2110, 2440, 3143, 1552, 3083, 69, 873, 958, 3253, 3252,
	3198, 3086, 3015, 3091, 2963, 3092, 3101, 214, 2430, 3250,
	3097, 3030, 3249, 3032, 840, 1023, 3102, 3103, 3131, 3096,
	3113, 1086, 3104, 1020, 1740, 3110, 3107, 3123, 3108, 3111,
	3130, 879, 1753, 2255, 2144, 3139, 2162, 2162, 2162, 2162,
	2162, 2162, 2162, 2162, 2162, 2162, 2162, 2162, 2162, 2162,
	2162, 2162, 2162, 2162, 2162, 1663, 2162, 882, 528, 1660,
	884, 883, 3118, 1661, 1554, 881, 1658, 2364, 2398, 1279,
	214, 759, 1683, 1846, 1744, 2067, 2105, 2548, 1549, 210,
	1083, 210, 1083, 853, 210, 875, 2102, 1039, 852, 2653,
	1659, 2804, 1019, 2995, 1205, 3276, 1189, 210, 1987, 210,
	2488, 214, 214, 214, 210, 1205, 544, 642, 2581, 210,
	1205, 3186, 2087, 214, 3114, 575, 1019, 1032, 3165, 2167,
	214, 2160, 214, 2156, 2388, 214, 214, 214, 1430, 1524,
	2399, 1073, 3216, 856, 2065, 1540, 3184, 1083, 214, 214,
	1184, 2522, 1443, 1083, 2811, 1184, 2667, 3182, 2250, 3520,
	1995, 214, 1021, 1837, 3176, 3177, 3178, 1000, 3183, 3194,
	3195, 999, 2709, 3181, 3179, 3227, 214, 3187, 998, 1083,
	3511, 2669, 1184, 3508, 1606, 1023, 1021, 2771, 3226, 1733,
	3215, 2265, 1662, 1023, 1516, 2778, 3175, 869, 1197, 2633,
	2839, 3196, 1246, 3447, 3180, 1515, 1023, 791, 3438, 3243,
	214, 1060, 1059, 1058, 2707, 3651, 3023, 3217, 181, 3247,
	3272, 1976, 1083, 825, 178, 3239, 3238, 3286, 180, 3228,
	3229, 179, 3040, 3259, 3248, 3268, 2763, 3275, 3271, 3262,
	3244, 90, 1662, 1662, 35, 16, 117, 116, 3098, 3099,
	3100, 1081, 1083, 115, 212, 3273, 114, 113, 1662, 1662,
	112, 111, 110, 109, 108, 107, 106, 105, 104, 103,
	102, 101, 100, 99, 98, 97, 96, 95, 210, 94,
	93, 3308, 3280, 1020, 1020, 92, 91, 571, 3322, 1662,
	1083, 568, 3297, 49, 48, 89, 88, 15, 214, 33,
	214, 3302, 1083, 214, 3289, 13, 53, 54, 12, 1906,
	28, 214, 29, 79, 78, 27, 14, 26, 24, 3308,
	10, 8, 7, 210, 30, 1616, 214, 210, 210, 11,
	147, 2004, 3318, 146, 214, 3333, 72, 839, 3307, 3256,
	1860, 145, 71, 3332, 144, 3326, 143, 1846, 3263, 210,
	70, 210, 22, 210, 9, 214, 139, 528, 3327, 214,
	3323, 3324, 3385, 3066, 66, 3369, 3279, 214, 141, 1876,
	140, 3353, 1184, 63, 138, 137, 3384, 3379, 214, 64,
	3352, 136, 135, 65, 134, 3389, 3331, 20, 3391, 5,
	52, 2166, 3360, 6, 3292, 3367, 2848, 83, 84, 214,
	214, 3377, 3371, 31, 61, 60, 59, 851, 3406, 3407,
	3394, 3396, 575, 19, 3418, 3419, 695, 2773, 51, 3383,
	18, 214, 171, 210, 3395, 1189, 210, 214, 3393, 170,
	169, 3401, 168, 3275, 2166, 3400, 3388, 214, 163, 575,
	162, 167, 165, 164, 166, 161, 210, 1662, 133, 173,
	172, 3444, 175, 159, 155, 210, 210, 1020, 210, 3435,
	210, 154, 210, 158, 210, 160, 3417, 157, 3402, 3240,
	156, 153, 3398, 3434, 174, 132, 3410, 131, 1958, 56,
	3426, 1959, 130, 1960, 129, 128, 127, 126, 55, 17,
	2, 3455, 210, 214, 1184, 1, 0, 0, 0, 0,
	214, 0, 3421, 0, 1184, 1184, 3431, 0, 0, 0,
	1184, 0, 3477, 559, 214, 0, 214, 0, 0, 575,
	0, 0, 210, 3462, 1198, 0, 3465, 3361, 3362, 0,
	3469, 0, 3468, 0, 0, 0, 3490, 3474, 0, 0,
	214, 2166, 0, 3473, 3481, 0, 214, 214, 1683, 1083,
	3502, 0, 0, 0, 0, 0, 1662, 214, 214, 3510,
	3513, 3388, 0, 3524, 0, 3514, 1659, 0, 3518, 0,
	0, 3526, 0, 3528, 0, 0, 0, 0, 2004, 0,
	3535, 0, 3507, 3515, 1683, 3536, 0, 0, 0, 3475,
	3476, 0, 0, 214, 0, 3480, 0, 0, 1198, 0,
	3532, 3530, 1659, 0, 3562, 0, 0, 0, 3482, 0,
	3483, 0, 0, 0, 3547, 3548, 3522, 1020, 3550, 3549,
	0, 0, 0, 3359, 0, 1020, 2162, 0, 0, 3580,
	3578, 3582, 214, 3564, 0, 0, 1464, 1465, 1020, 3588,
	3503, 3587, 0, 0, 0, 0, 0, 3592, 3581, 3579,
	3583, 0, 214, 3584, 0, 0, 1495, 0, 0, 0,
	0, 0, 0, 1467, 0, 0, 3598, 3599, 0, 2162,
	3603, 3601, 528, 0, 3600, 0, 214, 3510, 214, 0,
	3513, 1019, 3608, 3610, 3607, 0, 3616, 210, 3618, 3614,
	2400, 1466, 0, 3620, 3621, 3615, 1019, 2519, 2520, 0,
	0, 0, 0, 0, 528, 0, 0, 0, 0, 0,
	0, 210, 0, 528, 0, 3633, 210, 3632, 3585, 3586,
	0, 0, 3589, 3640, 3639, 1019, 3641, 0, 0, 0,
	3644, 0, 0, 0, 0, 3648, 3522, 0, 3525, 0,
	0, 1021, 3655, 0, 3656, 0, 0, 0, 3649, 3650,
	0, 0, 0, 3211, 0, 839, 1021, 0, 0, 839,
	0, 3659, 3660, 3661, 3663, 3664, 0, 1464, 1465, 0,
	3613, 0, 0, 3668, 1472, 0, 2162, 0, 0, 3666,
	0, 3208, 0, 0, 3201, 1021, 0, 1495, 0, 0,
	0, 1207, 0, 1211, 1467, 1217, 0, 0, 3199, 544,
	2607, 2608, 2609, 0, 3203, 1494, 1496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1683, 0, 0,
	0, 0, 1466, 3209, 0, 851, 0, 0, 0, 851,
	0, 0, 0, 0, 0, 1659, 0, 1167, 0, 2288,
	0, 0, 1167, 1662, 0, 0, 0, 210, 0, 0,
	0, 0, 0, 0, 0, 3202, 0, 0, 210, 1487,
	0, 0, 0, 0, 0, 0, 0, 1683, 1683, 0,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1339, 1019, 1683, 1683, 1659, 1659, 210, 1342, 0,
	0, 0, 0, 210, 2349, 0, 0, 0, 1662, 0,
	0, 1659, 1659, 0, 0, 1472, 0, 0, 0, 0,
	0, 0, 0, 0, 1683, 0, 1205, 0, 0, 210,
	0, 0, 0, 0, 0, 210, 0, 0, 0, 0,
	0, 0, 1659, 0, 0, 0, 1494, 1496, 0, 1860,
	0, 0, 1021, 1394, 0, 0, 2288, 0, 528, 0,
	2403, 0, 0, 0, 0, 0, 210, 1488, 0, 210,
	0, 210, 0, 210, 0, 210, 210, 0, 1189, 3204,
	0, 0, 0, 3205, 0, 0, 0, 0, 2423, 695,
	0, 2288, 2288, 0, 0, 0, 0, 0, 0, 0,
	1487, 1662, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 210, 1189, 210,
	0, 0, 1205, 3207, 1205, 0, 0, 1189, 0, 1189,
	0, 1189, 0, 0, 0, 0, 3210, 1517, 1518, 1519,
	1520, 1521, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 210, 210, 210, 210, 1189, 210, 0, 210,
	0, 0, 0, 0, 0, 0, 0, 1537, 0, 0,
	0, 0, 0, 1550, 0, 0, 0, 0, 0, 0,
	0, 0, 1683, 0, 0, 0, 0, 210, 1475, 1476,
	1468, 1469, 1470, 1471, 1473, 1474, 0, 0, 1488, 0,
	1659, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1464, 1465,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3206,
	0, 0, 1019, 1019, 0, 0, 0, 0, 1495, 1464,
	1465, 0, 2877, 2878, 0, 1467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2584, 2585, 1495,
	2602, 2603, 2604, 0, 0, 0, 1467, 0, 0, 0,
	0, 0, 0, 1466, 0, 0, 1205, 0, 0, 0,
	0, 1683, 1486, 1600, 1600, 1600, 0, 0, 0, 1483,
	0, 0, 1021, 1021, 1466, 0, 0, 0, 0, 1659,
	0, 0, 0, 1486, 0, 0, 0, 0, 0, 0,
	1476, 1468, 1469, 1470, 1471, 1473, 1474, 0, 0, 0,
	0, 2599, 0, 2936, 2937, 2938, 2939, 2940, 2941, 2942,
	2943, 2944, 2945, 2946, 2947, 2948, 2949, 2950, 2951, 2952,
	2953, 2954, 0, 2958, 0, 0, 1489, 1490, 1491, 1492,
	0, 0, 0, 839, 0, 0, 1472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 1489, 1490, 1491,
	1492, 0, 0, 0, 0, 0, 0, 1472, 0, 0,
	0, 210, 1167, 0, 0, 0, 528, 1494, 1496, 0,
	0, 0, 0, 0, 528, 2590, 0, 0, 0, 0,
	0, 528, 0, 0, 528, 528, 1019, 0, 1494, 1496,
	210, 0, 0, 0, 0, 0, 1481, 1482, 0, 0,
	0, 0, 1205, 851, 0, 0, 0, 0, 0, 1167,
	0, 0, 0, 0, 0, 0, 0, 1205, 0, 0,
	0, 1487, 0, 0, 0, 0, 2605, 0, 0, 0,
	0, 0, 0, 0, 0, 2288, 2288, 210, 0, 0,
	0, 2288, 1487, 0, 2711, 0, 1021, 0, 0, 0,
	0, 2288, 2711, 0, 2288, 2711, 2711, 0, 0, 0,
	2600, 0, 0, 0, 0, 0, 0, 0, 210, 210,
	210, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 210,
	0, 0, 1189, 0, 0, 0, 0, 0, 0, 0,
	0, 1493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2767, 0, 0, 2769, 2288, 0, 1488,
	210, 0, 1493, 0, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 210,
	1488, 1167, 0, 0, 0, 1189, 1019, 210, 1683, 0,
	2288, 0, 528, 0, 1019, 0, 0, 0, 2601, 2288,
	0, 0, 0, 0, 0, 0, 1659, 1019, 0, 0,
	2584, 2585, 0, 2602, 2603, 2604, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 210, 1860, 0, 0, 1860, 0, 0, 0, 0,
	0, 0, 0, 1683, 0, 0, 1021, 0, 0, 0,
	0, 0, 0, 0, 1021, 0, 0, 0, 0, 0,
	0, 1659, 0, 0, 0, 0, 0, 1021, 0, 2857,
	0, 0, 1189, 210, 2599, 210, 1484, 1480, 0, 1477,
	1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 0, 0, 0,
	1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 0,
	0, 2596, 2597, 2598, 0, 0, 0, 0, 2595, 2593,
	2594, 2586, 2587, 2588, 2589, 2591, 2592, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1683, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2590, 0,
	0, 0, 2917, 0, 1659, 0, 0, 0, 1986, 0,
	1990, 0, 0, 0, 0, 0, 1997, 0, 0, 0,
	0, 0, 0, 2006, 2007, 2008, 2009, 2010, 2011, 2012,
	2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022,
	2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032,
	2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 0, 2046,
	0, 2048, 2049, 2050, 2051, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2075, 0, 2600, 0, 0, 0, 210, 210, 0,
	0, 1167, 0, 0, 0, 0, 1537, 0, 528, 0,
	2100, 0, 2584, 2585, 0, 2602, 2603, 2604, 0, 0,
	0, 0, 0, 528, 0, 0, 0, 0, 0, 0,
	0, 3136, 0, 0, 0, 0, 0, 0, 2128, 0,
	0, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 0, 1205,
	0, 0, 2158, 0, 2169, 2171, 2176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2599, 0, 0, 0,
	0, 0, 0, 3315, 0, 0, 1167, 0, 0, 57,
	0, 2601, 0, 0, 0, 0, 575, 0, 0, 0,
	0, 0, 0, 58, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 62, 0, 0,
	0, 0, 0, 0, 0, 0, 3341, 0, 0, 0,
	0, 0, 0, 0, 3064, 210, 0, 0, 0, 0,
	0, 0, 210, 0, 0, 0, 0, 0, 68, 0,
	2590, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	1167, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2288, 210, 0, 0, 0, 0, 1167, 0, 74, 0,
	0, 0, 0, 0, 2423, 2423, 0, 0, 85, 0,
	695, 695, 2288, 75, 82, 1860, 1860, 0, 0, 695,
	2288, 2605, 0, 0, 2596, 2597, 2598, 0, 210, 0,
	0, 2595, 2593, 2594, 2586, 2587, 2588, 2589, 2591, 2592,
	0, 0, 0, 0, 0, 0, 1464, 1465, 0, 0,
	0, 0, 0, 3425, 0, 2600, 0, 76, 0, 0,
	0, 0, 0, 0, 0, 0, 1495, 0, 0, 0,
	0, 0, 0, 1467, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3153, 0, 0, 0, 0, 0,
	0, 1466, 0, 0, 2351, 0, 2353, 0, 0, 0,
	1486, 1167, 0, 0, 0, 0, 0, 1483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2247,
	0, 210, 0, 2601, 0, 0, 2880, 1205, 0, 210,
	0, 0, 0, 0, 0, 1167, 0, 0, 77, 0,
	0, 0, 210, 0, 1489, 1490, 1491, 1492, 0, 0,
	0, 0, 0, 0, 1472, 0, 0, 0, 2288, 2288,
	2288, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1205, 148, 80, 0, 81, 0, 0, 2288, 0, 2711,
	0, 0, 1205, 1205, 210, 1494, 1496, 0, 0, 0,
	0, 0, 0, 182, 0, 210, 210, 0, 0, 0,
	1464, 1465, 0, 0, 0, 690, 2467, 0, 2288, 118,
	0, 0, 0, 0, 1481, 1482, 0, 0, 0, 0,
	1495, 0, 0, 3265, 0, 0, 0, 1467, 0, 0,
	0, 0, 0, 184, 0, 0, 2596, 2597, 2598, 1487,
	0, 0, 0, 2595, 2593, 2594, 2586, 2587, 2588, 2589,
	2591, 2592, 0, 0, 0, 1466, 119, 1205, 0, 0,
	0, 0, 0, 0, 1486, 939, 0, 0, 0, 152,
	0, 1483, 0, 0, 0, 0, 0, 183, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 0, 0,
	0, 0, 0, 0, 0, 177, 2502, 2503, 0, 0,
	0, 0, 2509, 0, 211, 0, 0, 0, 0, 0,
	2875, 0, 0, 0, 0, 0, 151, 0, 0, 1493,
	0, 2523, 2524, 0, 211, 0, 0, 2100, 1489, 1490,
	1491, 1492, 0, 0, 0, 0, 2531, 1488, 1472, 0,
	0, 0, 0, 0, 0, 2288, 211, 2711, 0, 0,
	3335, 0, 0, 0, 0, 0, 0, 0, 210, 0,
	0, 0, 2551, 0, 0, 0, 0, 0, 0, 1494,
	1496, 0, 0, 210, 0, 0, 0, 2566, 0, 0,
	0, 575, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1481, 1482,
	0, 0, 3335, 0, 0, 0, 2288, 0, 0, 0,
	0, 0, 0, 0, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 1487, 0, 1205, 0, 2176, 2176, 2176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1600, 0, 0, 0, 210, 210, 0, 0,
	2638, 0, 0, 0, 1484, 1480, 0, 1477, 1475, 1476,
	1468, 1469, 1470, 1471, 1473, 1474, 0, 0, 2917, 0,
	0, 0, 0, 0, 528, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3335, 0, 0, 0, 0, 0,
	0, 0, 0, 1464, 1465, 0, 1497, 1498, 1499, 1507,
	1508, 1509, 0, 1493, 0, 0, 0, 0, 0, 0,
	0, 0, 1500, 1495, 1167, 0, 839, 0, 0, 0,
	1467, 1488, 0, 0, 0, 1513, 0, 0, 0, 839,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	210, 0, 0, 0, 0, 0, 0, 2711, 1466, 0,
	0, 0, 0, 1167, 0, 2727, 0, 1486, 0, 0,
	0, 1205, 1167, 1205, 1483, 0, 0, 0, 2584, 2585,
	0, 2602, 2603, 2604, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 851, 3498, 0, 0,
	0, 0, 0, 1205, 210, 0, 0, 0, 0, 851,
	0, 0, 0, 0, 210, 2288, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1489, 1490, 1491, 1492, 0, 0, 0, 0, 215,
	0, 1472, 2599, 0, 0, 0, 0, 0, 1484, 1480,
	2917, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474,
	0, 0, 0, 0, 0, 1504, 0, 0, 1514, 0,
	0, 0, 1494, 1496, 0, 0, 0, 1167, 2584, 2585,
	0, 2602, 2603, 2604, 0, 1167, 0, 0, 0, 2288,
	0, 0, 1510, 0, 1511, 0, 0, 3135, 592, 0,
	0, 1481, 1482, 0, 0, 0, 0, 0, 0, 3335,
	0, 0, 0, 0, 0, 0, 2590, 1502, 0, 0,
	592, 0, 0, 0, 0, 0, 1487, 0, 0, 0,
	0, 0, 0, 1205, 0, 2288, 0, 0, 0, 0,
	0, 0, 2599, 2606, 0, 1512, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2866, 0, 0, 0, 1997,
	0, 0, 1501, 0, 0, 2872, 2873, 2605, 0, 2876,
	0, 0, 0, 2879, 0, 0, 0, 0, 0, 0,
	0, 0, 2883, 0, 0, 0, 0, 0, 0, 0,
	0, 2890, 0, 0, 2638, 0, 0, 0, 0, 0,
	0, 2600, 0, 0, 0, 0, 1493, 0, 1167, 0,
	0, 1167, 0, 0, 0, 2910, 2590, 0, 0, 0,
	0, 0, 0, 57, 1488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2926, 2927, 58, 2928, 2929,
	2930, 0, 0, 2931, 0, 0, 0, 2933, 0, 0,
	1505, 62, 0, 0, 0, 0, 0, 211, 1088, 211,
	211, 1088, 0, 1088, 211, 0, 0, 2605, 0, 0,
	0, 0, 211, 0, 0, 0, 1167, 0, 2961, 2962,
	0, 0, 68, 0, 0, 0, 0, 1167, 0, 0,
	0, 0, 0, 2971, 0, 0, 0, 0, 0, 2601,
	0, 2600, 0, 0, 0, 0, 0, 0, 2980, 0,
	0, 0, 74, 0, 1088, 1088, 211, 211, 0, 0,
	0, 0, 85, 0, 0, 0, 0, 75, 82, 0,
	0, 211, 0, 0, 1503, 0, 0, 1478, 1479, 1485,
	1506, 1484, 1480, 0, 1477, 1475, 1476, 1468, 1469, 1470,
	1471, 1473, 1474, 211, 211, 211, 211, 3161, 1088, 1088,
	0, 3160, 3009, 1088, 0, 0, 0, 1088, 211, 211,
	0, 76, 0, 1464, 1465, 0, 0, 3017, 3020, 1507,
	1508, 1509, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1495, 0, 0, 0, 0, 0, 2601,
	1467, 0, 3039, 0, 0, 1513, 1167, 0, 0, 0,
	0, 0, 2596, 2597, 2598, 0, 0, 0, 1088, 2595,
	2593, 2594, 2586, 2587, 2588, 2589, 2591, 2592, 1466, 0,
	0, 0, 0, 0, 0, 0, 0, 1486, 0, 0,
	0, 211, 0, 0, 1483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1600, 0, 0, 0, 0, 0, 0, 0, 0, 3093,
	0, 0, 77, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1489, 1490, 1491, 1492, 0, 0, 0, 0, 0,
	0, 1472, 2596, 2597, 2598, 148, 80, 0, 81, 2595,
	2593, 2594, 2586, 2587, 2588, 2589, 2591, 2592, 1167, 0,
	0, 0, 0, 0, 0, 1504, 0, 182, 1514, 3132,
	3133, 0, 1494, 1496, 0, 3137, 3138, 0, 0, 690,
	3141, 3142, 0, 118, 0, 0, 0, 3146, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1481, 1482, 0, 0, 0, 3150, 184, 0, 0,
	0, 0, 0, 3154, 0, 0, 1167, 1502, 0, 0,
	0, 0, 0, 0, 0, 0, 1487, 0, 0, 0,
	119, 0, 0, 0, 0, 0, 1167, 0, 0, 0,
	0, 0, 0, 152, 0, 0, 0, 0, 0, 0,
	0, 183, 1084, 0, 0, 1185, 0, 1084, 0, 0,
	0, 176, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1493, 0, 1185, 1185,
	0, 0, 0, 0, 0, 0, 3020, 0, 0, 0,
	0, 0, 211, 0, 1488, 0, 0, 0, 0, 0,
	0, 0, 0, 1088, 0, 211, 211, 211, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 211, 0, 0,
	1505, 0, 1185, 1185, 1167, 0, 1167, 1185, 0, 1088,
	0, 1185, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1088, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3020, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1167, 1185, 0, 0, 0, 0, 1167, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3303,
	3304, 3305, 0, 0, 1503, 0, 0, 0, 0, 0,
	1506, 1484, 1480, 1167, 1477, 1475, 1476, 1468, 1469, 1470,
	1471, 1473, 1474, 0, 3313, 3314, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3321, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 905, 0, 1167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 57, 1088, 211, 0, 0, 3020,
	0, 0, 1088, 0, 0, 0, 1167, 3358, 58, 0,
	0, 0, 0, 209, 0, 0, 3365, 0, 0, 839,
	1464, 1465, 62, 0, 0, 0, 3372, 0, 0, 0,
	0, 0, 0, 599, 0, 0, 0, 1464, 1465, 0,
	1495, 211, 0, 0, 1167, 211, 211, 1467, 0, 3020,
	0, 0, 3020, 68, 0, 599, 1167, 1495, 0, 0,
	0, 0, 0, 0, 1467, 0, 0, 211, 0, 211,
	0, 211, 3020, 3020, 0, 1466, 0, 0, 0, 0,
	0, 0, 0, 74, 1486, 0, 0, 0, 0, 851,
	0, 1483, 1466, 85, 0, 0, 0, 0, 75, 82,
	0, 1486, 0, 0, 0, 0, 0, 0, 1483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3437, 0, 1088, 3440, 1088,
	2874, 1088, 0, 0, 0, 0, 0, 1088, 0, 0,
	1088, 211, 76, 0, 211, 0, 0, 2508, 1489, 1490,
	1491, 1492, 0, 1088, 1088, 1088, 0, 0, 1472, 1022,
	0, 0, 0, 0, 211, 1489, 1490, 1491, 1492, 0,
	0, 0, 0, 211, 211, 1472, 211, 0, 211, 0,
	211, 0, 211, 0, 0, 0, 0, 1084, 0, 1494,
	1496, 0, 0, 0, 0, 0, 592, 0, 0, 0,
	0, 592, 0, 0, 0, 0, 1494, 1496, 0, 0,
	211, 0, 0, 1185, 0, 0, 0, 0, 1481, 1482,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1084, 1481, 1482, 839, 0, 0,
	211, 0, 0, 1487, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 77, 0, 0, 0, 0, 0, 0,
	1487, 0, 1088, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3546, 3546, 3546, 1464, 1465, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 148, 80, 0, 81,
	0, 3565, 0, 0, 0, 1495, 0, 0, 0, 0,
	0, 0, 1467, 1167, 0, 0, 0, 851, 182, 0,
	0, 0, 3020, 0, 3020, 0, 0, 0, 0, 0,
	690, 0, 0, 1493, 118, 0, 0, 0, 3546, 0,
	1466, 0, 0, 0, 0, 0, 0, 0, 0, 1486,
	1493, 1488, 0, 0, 0, 0, 1483, 1088, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 909, 1488, 1185,
	0, 0, 0, 0, 0, 0, 1084, 0, 0, 0,
	0, 119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 152, 2501, 0, 0, 0, 0,
	0, 0, 183, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 1489, 1490, 1491, 1492, 0, 0, 0,
	177, 3546, 0, 1472, 0, 0, 0, 0, 0, 0,
	0, 1088, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1333, 0, 0, 211, 0, 0, 1088, 0, 0,
	0, 0, 0, 57, 1494, 1496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 58, 1484, 1480,
	0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474,
	0, 62, 0, 1481, 1482, 1484, 1480, 0, 1477, 1475,
	1476, 1468, 1469, 1470, 1471, 1473, 1474, 0, 1015, 0,
	0, 1185, 0, 1185, 0, 1185, 0, 0, 1487, 0,
	0, 1185, 68, 0, 1185, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1185, 1185, 1185,
	0, 0, 0, 0, 0, 1088, 0, 205, 0, 0,
	0, 0, 74, 0, 0, 0, 0, 592, 0, 0,
	0, 0, 85, 0, 0, 0, 0, 75, 82, 0,
	0, 0, 1088, 0, 0, 0, 209, 0, 209, 209,
	0, 0, 0, 209, 0, 211, 0, 0, 0, 0,
	0, 599, 0, 0, 0, 0, 211, 0, 1493, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 211,
	0, 76, 1088, 0, 0, 0, 1488, 0, 0, 0,
	0, 0, 0, 0, 0, 211, 1088, 0, 0, 1088,
	0, 211, 0, 0, 0, 209, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1084, 0, 0, 0,
	209, 0, 0, 0, 0, 0, 0, 211, 0, 0,
	0, 0, 0, 211, 0, 2584, 2585, 0, 2602, 2603,
	2604, 0, 209, 209, 209, 209, 0, 0, 0, 0,
	0, 0, 0, 0, 2886, 0, 0, 209, 209, 0,
	0, 0, 0, 0, 211, 0, 0, 211, 0, 211,
	0, 211, 0, 211, 211, 0, 0, 1088, 1088, 1088,
	0, 1088, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 77, 0, 0, 0, 0, 0, 0, 2599,
	211, 1084, 0, 1484, 1480, 0, 1477, 1475, 1476, 1468,
	1469, 1470, 1471, 1473, 1474, 211, 0, 211, 0, 0,
	0, 0, 0, 0, 0, 148, 80, 0, 81, 0,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 209, 0, 0, 182, 0, 0,
	211, 211, 211, 211, 0, 211, 0, 211, 0, 690,
	0, 0, 0, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2590, 0, 1084, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 211, 0, 184, 0, 0,
	0, 1084, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 152, 2605, 0, 0, 0, 0, 0,
	0, 183, 2584, 2585, 0, 2602, 2603, 2604, 0, 0,
	0, 176, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 2885, 0, 0, 0, 0, 0, 0, 2600, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1331, 0, 0, 0, 0, 0, 0, 0, 0, 1185,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2599, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1084, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1085, 0, 0, 1186, 0, 1085, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1185, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2601, 0, 0, 0,
	1084, 0, 0, 1185, 0, 0, 0, 0, 0, 0,
	2590, 0, 0, 0, 0, 1088, 1630, 0, 1022, 0,
	0, 209, 0, 0, 0, 0, 1186, 1186, 0, 0,
	0, 0, 0, 0, 209, 1630, 209, 0, 0, 0,
	0, 599, 0, 0, 0, 0, 599, 0, 0, 0,
	0, 0, 0, 0, 1088, 0, 0, 0, 0, 0,
	0, 2605, 0, 1088, 0, 0, 0, 0, 0, 0,
	1186, 1186, 0, 0, 0, 1186, 0, 0, 0, 1186,
	0, 1185, 1185, 1185, 0, 1185, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2600, 0, 0, 0, 0,
	1078, 0, 0, 0, 0, 211, 0, 1196, 0, 2596,
	2597, 2598, 0, 0, 0, 0, 2595, 2593, 2594, 2586,
	2587, 2588, 2589, 2591, 2592, 0, 0, 0, 0, 0,
	1186, 0, 0, 0, 0, 0, 211, 211, 211, 0,
	0, 0, 0, 0, 0, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 211, 1088, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1088, 0,
	0, 0, 0, 0, 1280, 0, 1088, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 211, 0,
	0, 1088, 211, 2601, 0, 0, 1304, 1304, 1304, 1196,
	1088, 1088, 1088, 0, 0, 599, 0, 211, 0, 0,
	0, 1337, 1338, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 1088, 1088, 0, 209, 209, 0, 0, 0, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1088, 0, 0, 0, 0, 0, 209, 0, 209, 0,
	209, 0, 0, 0, 1413, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1088,
	0, 211, 1088, 211, 0, 0, 2596, 2597, 2598, 0,
	0, 0, 0, 2595, 2593, 2594, 2586, 2587, 2588, 2589,
	2591, 2592, 0, 0, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 676,
	209, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1088, 0, 0,
	0, 0, 658, 209, 0, 0, 0, 0, 1088, 1084,
	0, 0, 599, 209, 0, 209, 0, 209, 0, 209,
	0, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 659, 0, 0, 0, 0,
	0, 0, 0, 0, 660, 1085, 0, 0, 1084, 209,
	0, 0, 0, 0, 0, 0, 0, 1084, 0, 0,
	661, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1186, 0, 0, 0, 0, 681, 0, 0, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 662, 1085, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	663, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1088, 0, 0,
	664, 0, 0, 665, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1185, 0, 0, 0, 0, 0, 0, 680,
	0, 0, 1084, 0, 0, 1637, 0, 0, 0, 0,
	1084, 0, 0, 0, 0, 0, 0, 0, 1646, 0,
	1196, 0, 0, 0, 0, 1185, 0, 0, 0, 0,
	0, 0, 0, 0, 1185, 1185, 1185, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1186, 0, 0,
	0, 0, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 211, 0, 0, 0, 0, 0, 0,
	211, 0, 0, 0, 1022, 1185, 1185, 0, 0, 1088,
	211, 0, 0, 0, 1088, 0, 0, 667, 0, 0,
	0, 0, 0, 0, 1185, 0, 0, 0, 1022, 0,
	0, 0, 0, 209, 684, 0, 668, 0, 0, 0,
	874, 87, 0, 0, 1088, 1088, 1088, 0, 0, 0,
	0, 0, 0, 1084, 0, 0, 1084, 0, 0, 0,
	1088, 0, 0, 683, 0, 0, 211, 1088, 0, 0,
	669, 0, 0, 670, 0, 0, 0, 0, 0, 678,
	0, 0, 0, 0, 0, 0, 671, 1088, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1186,
	0, 1186, 0, 1186, 0, 0, 87, 672, 679, 1186,
	0, 1084, 1186, 0, 0, 673, 0, 0, 0, 0,
	0, 0, 1084, 0, 0, 1186, 1186, 1186, 675, 0,
	0, 0, 0, 674, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1835, 682, 0, 0, 1842, 0,
	0, 0, 0, 0, 209, 0, 677, 0, 0, 0,
	0, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	1280, 0, 1866, 813, 1866, 0, 0, 0, 209, 0,
	0, 0, 834, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 209, 1088, 0, 1088, 0, 0,
	599, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1010, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 0, 209, 0, 1085, 0, 0, 0, 0, 0,
	0, 1084, 211, 0, 1842, 0, 0, 1912, 0, 0,
	0, 0, 1088, 211, 211, 1088, 0, 0, 1088, 0,
	1088, 0, 0, 209, 0, 0, 209, 1928, 209, 0,
	209, 0, 209, 209, 0, 0, 0, 1938, 0, 1940,
	0, 1942, 0, 1944, 1088, 1945, 0, 1088, 0, 615,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 616, 1962, 209, 0, 209, 0, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 1088, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1304, 0, 617, 636, 0, 0, 209,
	209, 209, 209, 0, 209, 0, 209, 1088, 0, 0,
	0, 0, 0, 1084, 0, 0, 0, 618, 1185, 0,
	619, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 209, 0, 643, 0, 0, 0,
	0, 0, 620, 1085, 0, 1088, 0, 0, 1185, 1185,
	1185, 641, 0, 0, 0, 0, 0, 1088, 0, 1085,
	0, 0, 0, 0, 1185, 0, 211, 0, 0, 0,
	621, 1084, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 211, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 1084, 0, 623, 645, 0, 0, 0, 650, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 1088, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1186, 0, 0,
	0, 0, 0, 0, 211, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 644, 0, 0, 0, 0,
	0, 0, 0, 626, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 624, 0, 1084,
	0, 1084, 0, 0, 1186, 0, 0, 627, 0, 0,
	0, 0, 0, 1022, 0, 0, 0, 0, 1085, 0,
	0, 1186, 0, 0, 0, 0, 628, 0, 1022, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 211, 1088,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1088,
	1088, 0, 0, 649, 0, 1088, 1084, 1630, 0, 1185,
	0, 0, 1084, 629, 1185, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 630, 0, 87, 0,
	87, 0, 87, 0, 0, 0, 0, 0, 1084, 0,
	0, 1185, 211, 0, 1088, 635, 0, 0, 0, 1186,
	1186, 1186, 211, 1186, 209, 0, 0, 631, 0, 0,
	648, 0, 647, 0, 0, 632, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 633, 0,
	0, 1084, 0, 640, 0, 209, 209, 209, 651, 0,
	646, 0, 0, 0, 1630, 638, 0, 0, 1196, 0,
	0, 0, 0, 0, 0, 0, 209, 0, 834, 87,
	87, 1084, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	1842, 0, 0, 0, 0, 0, 2373, 209, 0, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 0, 1084,
	0, 0, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 1084, 0, 0, 1022, 0, 0, 2405, 0, 0,
	1304, 0, 1304, 0, 1304, 0, 1196, 1196, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2449, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2454, 0,
	2457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1185, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 209, 2478, 1196, 2480, 1196, 813, 2483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 1527, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2499, 0,
	0, 0, 0, 1536, 0, 1464, 1465, 1542, 1497, 1498,
	1499, 1507, 1508, 1509, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1500, 1495, 0, 0, 0, 0,
	0, 0, 1467, 0, 0, 0, 0, 1513, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1085, 0, 0,
	1466, 0, 0, 1185, 0, 0, 0, 0, 0, 1486,
	0, 0, 0, 1185, 1185, 0, 1483, 0, 0, 1185,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 1085, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1084, 0,
	0, 0, 0, 0, 1022, 1022, 0, 0, 0, 0,
	0, 0, 0, 1489, 1490, 1491, 1492, 0, 0, 87,
	0, 0, 1628, 1472, 1631, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1504, 0, 0,
	1514, 0, 0, 0, 1494, 1496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 737, 0,
	772, 0, 0, 0, 1510, 0, 1511, 0, 0, 0,
	1186, 0, 0, 1481, 1482, 0, 0, 0, 0, 0,
	1085, 0, 744, 0, 0, 0, 0, 0, 1085, 1502,
	0, 0, 0, 0, 0, 0, 756, 742, 1487, 0,
	0, 0, 0, 1186, 0, 0, 0, 0, 0, 0,
	0, 0, 1186, 1186, 1186, 0, 0, 1512, 0, 0,
	743, 0, 0, 0, 0, 746, 0, 0, 0, 778,
	0, 0, 209, 0, 1501, 0, 753, 754, 0, 209,
	0, 0, 765, 0, 0, 0, 0, 0, 2703, 209,
	0, 0, 0, 0, 0, 773, 748, 0, 0, 0,
	0, 0, 0, 1186, 1186, 0, 0, 0, 1022, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1493, 2740,
	2742, 2373, 1186, 771, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1488, 0, 0, 0,
	0, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	0, 1085, 0, 0, 1085, 749, 0, 0, 0, 0,
	0, 0, 1505, 741, 0, 0, 0, 0, 0, 0,
	0, 2779, 0, 0, 0, 2783, 0, 0, 750, 751,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2792, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	758, 757, 0, 0, 0, 0, 0, 0, 752, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 0, 777, 0, 0, 0, 0, 0,
	1085, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	774, 0, 2835, 0, 0, 0, 1503, 0, 0, 1478,
	1479, 1485, 1506, 1484, 1480, 0, 1477, 1475, 1476, 1468,
	1469, 1470, 1471, 1473, 1474, 0, 0, 0, 1022, 2572,
	0, 0, 834, 2573, 834, 0, 1022, 0, 0, 0,
	747, 0, 0, 0, 2860, 0, 1196, 0, 0, 1630,
	0, 0, 0, 0, 745, 0, 0, 0, 769, 770,
	0, 0, 0, 0, 0, 0, 0, 2870, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 767, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 761, 0, 0, 0, 0, 0, 762,
	0, 0, 209, 209, 0, 0, 739, 0, 775, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 740, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 763, 0, 0, 0, 760, 0,
	0, 0, 0, 0, 0, 0, 0, 776, 0, 0,
	0, 0, 0, 0, 0, 764, 0, 813, 0, 0,
	813, 813, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 766, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 768, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2064, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 834,
	0, 1085, 0, 0, 0, 0, 1186, 0, 0, 0,
	0, 0, 1536, 0, 1464, 1465, 1536, 1497, 1498, 1499,
	1507, 1508, 1509, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1500, 1495, 209, 1186, 1186, 1186, 0,
	0, 1467, 0, 0, 0, 0, 1513, 0, 0, 0,
	209, 0, 1186, 0, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1466,
	0, 0, 0, 0, 0, 0, 0, 0, 1486, 1085,
	1010, 0, 0, 0, 0, 1483, 0, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1631, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3065, 0, 0, 0,
	0, 0, 0, 209, 209, 0, 87, 0, 0, 0,
	0, 0, 0, 3077, 0, 0, 0, 0, 0, 0,
	0, 0, 1489, 1490, 1491, 1492, 0, 0, 0, 0,
	0, 0, 1472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1504, 0, 0, 1514,
	0, 0, 0, 1494, 1496, 0, 0, 0, 0, 3116,
	0, 0, 0, 0, 0, 0, 0, 1085, 0, 1085,
	0, 0, 0, 1510, 0, 1511, 0, 0, 0, 0,
	0, 0, 1481, 1482, 0, 0, 0, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1502, 0,
	0, 0, 0, 0, 0, 0, 0, 1487, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1085, 0, 1512, 1186, 0, 0,
	1085, 0, 1186, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 1501, 87, 0, 0, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 1085, 0, 0, 1186,
	0, 87, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 0, 0, 1488, 87, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	0, 1505, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3230, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2373, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1503, 0, 0, 1478, 1479,
	1485, 1506, 1484, 1480, 0, 1477, 1475, 1476, 1468, 1469,
	1470, 1471, 1473, 1474, 0, 0, 0, 0, 2096, 0,
	0, 0, 2097, 0, 0, 0, 0, 0, 0, 1186,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1464, 1465, 0, 1497, 1498,
	1499, 1507, 1508, 1509, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1500, 1495, 2064, 0, 0, 0,
	0, 0, 1467, 0, 0, 0, 0, 1513, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1536, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3342,
	1466, 0, 0, 0, 0, 0, 0, 0, 0, 1486,
	0, 0, 0, 0, 1196, 0, 1483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1186, 0, 0, 0, 3390, 0, 0, 0, 0,
	0, 1186, 1186, 0, 0, 0, 0, 1186, 0, 0,
	0, 0, 0, 1489, 1490, 1491, 1492, 0, 0, 0,
	0, 0, 0, 1472, 0, 0, 0, 3416, 1196, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1085, 1504, 0, 1010,
	1514, 0, 0, 0, 1494, 1496, 0, 0, 0, 0,
	0, 0, 0, 0, 1010, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 1511, 0, 0, 0,
	0, 0, 0, 1481, 1482, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1502,
	0, 0, 0, 0, 0, 0, 0, 0, 1487, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3467, 0, 0, 0, 0, 0, 1512, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1501, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 87, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 3504, 1464, 1465, 0, 1497,
	1498, 1499, 1507, 1508, 1509, 3519, 0, 0, 1493, 0,
	0, 0, 0, 0, 0, 1500, 1495, 87, 87, 0,
	0, 87, 0, 1467, 0, 0, 1488, 0, 1513, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508,
	1509, 1466, 1505, 0, 0, 0, 0, 0, 0, 0,
	1486, 1500, 1495, 0, 0, 0, 0, 1483, 0, 1467,
	1010, 0, 0, 834, 1513, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1466, 87, 87,
	0, 0, 0, 0, 0, 0, 1486, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1489, 1490, 1491, 1492, 0, 0,
	0, 0, 0, 0, 1472, 0, 1503, 0, 0, 1478,
	1479, 1485, 1506, 1484, 1480, 0, 1477, 1475, 1476, 1468,
	1469, 1470, 1471, 1473, 1474, 0, 0, 0, 1504, 0,
	0, 1514, 0, 3159, 0, 1494, 1496, 0, 0, 0,
	1489, 1490, 1491, 1492, 0, 0, 0, 0, 0, 0,
	1472, 0, 0, 0, 0, 1510, 0, 1511, 0, 0,
	0, 0, 0, 0, 1481, 1482, 0, 0, 0, 0,
	0, 0, 0, 0, 1504, 0, 0, 1514, 0, 0,
	1502, 1494, 1496, 0, 0, 0, 0, 0, 0, 1487,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1510, 0, 1511, 0, 0, 0, 0, 1512, 0,
	1481, 1482, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1501, 1502, 0, 0, 0,
	0, 0, 0, 0, 0, 1487, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1512, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1493,
	0, 1501, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1488, 0, 0,
	1010, 1010, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1505, 0, 1493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1488, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1505,
	0, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508, 1509,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1500, 1495, 0, 0, 0, 0, 0, 0, 1467, 0,
	0, 0, 0, 1513, 0, 0, 0, 1503, 0, 0,
	1478, 1479, 1485, 1506, 1484, 1480, 0, 1477, 1475, 1476,
	1468, 1469, 1470, 1471, 1473, 1474, 1466, 0, 0, 0,
	0, 0, 0, 0, 2888, 1486, 0, 0, 0, 0,
	0, 0, 1483, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1503, 0, 0, 1478, 1479, 1485, 1506,
	1484, 1480, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471,
	1473, 1474, 0, 0, 1010, 0, 0, 0, 0, 0,
	2575, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1464, 1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 1489,
	1490, 1491, 1492, 0, 0, 0, 0, 0, 87, 1472,
	1495, 0, 0, 0, 0, 0, 0, 1467, 0, 0,
	0, 0, 1513, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1504, 0, 0, 1514, 0, 0, 0,
	1494, 1496, 0, 0, 0, 1466, 0, 0, 0, 0,
	0, 0, 0, 0, 1486, 0, 0, 0, 0, 0,
	1510, 1483, 1511, 0, 0, 0, 0, 0, 0, 1481,
	1482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1502, 0, 0, 0, 0,
	0, 0, 0, 0, 1487, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1512, 0, 0, 0, 0, 1489, 1490,
	1491, 1492, 0, 0, 0, 0, 0, 0, 1472, 0,
	1501, 0, 0, 0, 1010, 0, 0, 0, 0, 0,
	0, 0, 1010, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1504, 0, 0, 1514, 0, 0, 0, 1494,
	1496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1493, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1481, 1482,
	0, 0, 1488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1502, 0, 0, 0, 0, 0,
	0, 0, 0, 1487, 0, 0, 0, 0, 1505, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1493, 0, 0, 0, 0, 0, 0,
	0, 0, 1503, 0, 0, 1478, 1479, 1485, 1506, 1484,
	1480, 1488, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473,
	1474, 0, 0, 0, 0, 0, 0, 0, 0, 2574,
	0, 0, 0, 0, 0, 0, 0, 1505, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1503, 0, 0, 1478, 1479, 1485, 1506, 1484, 1480,
	0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474,
	0, 0, 2064, 0, 0, 1082, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 1089, 224, 1090,
	1091, 1092, 0, 1093, 479, 1094, 1095, 1096, 1097, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 1098, 233, 234, 235, 236, 237, 238, 1099, 1100,
	239, 484, 485, 486, 1101, 240, 487, 1102, 1087, 1103,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 1104, 251, 0, 252, 253, 254, 1105, 960, 255,
	256, 1106, 1107, 1109, 1108, 1110, 1111, 1112, 257, 258,
	259, 260, 261, 262, 488, 489, 1113, 263, 1114, 265,
	264, 1115, 266, 1116, 1117, 267, 268, 269, 1118, 270,
	1119, 271, 272, 1120, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 1121, 216, 1122,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 1123, 290, 1124, 1125, 961, 291, 292, 1126,
	293, 494, 1127, 495, 294, 1128, 295, 296, 297, 298,
	496, 497, 498, 350, 963, 299, 300, 1129, 301, 302,
	304, 0, 87, 217, 303, 305, 312, 1130, 962, 306,
	499, 308, 307, 309, 310, 311, 500, 1131, 501, 1132,
	313, 964, 502, 965, 314, 315, 316, 966, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 1133, 325, 324,
	1134, 326, 503, 967, 327, 328, 968, 1135, 329, 330,
	1136, 1137, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 969, 344, 345, 347,
	970, 346, 1138, 218, 971, 348, 1139, 504, 349, 505,
	351, 352, 1140, 353, 354, 355, 1141, 1142, 357, 358,
	359, 1143, 1144, 360, 361, 506, 972, 362, 973, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 1145,
	371, 372, 508, 373, 509, 374, 1146, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 1147,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 1148, 398, 974, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 1149, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 1150, 425, 405, 406, 426, 427, 975,
	428, 429, 512, 430, 431, 1151, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 1152, 443,
	444, 442, 1153, 445, 446, 447, 448, 449, 278, 450,
	1154, 451, 514, 515, 516, 517, 1155, 458, 1156, 452,
	453, 518, 454, 519, 1157, 455, 456, 457, 0, 459,
	460, 1158, 1159, 461, 462, 463, 464, 465, 467, 1160,
	468, 1161, 466, 469, 470, 471, 520, 521, 522, 1162,
	473, 472, 523, 1163, 1164, 1165, 1166, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1082, 0, 0, 0, 0,
	0, 0, 0, 2218, 0, 0, 0, 0, 0, 0,
	0, 2219, 219, 220, 221, 222, 223, 1089, 224, 1090,
	1091, 1092, 0, 1093, 479, 1094, 1095, 1096, 1097, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 1098, 233, 234, 235, 236, 237, 238, 1099, 1100,
	239, 484, 485, 486, 1101, 240, 487, 1102, 1087, 1103,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 1104, 251, 0, 252, 253, 254, 1105, 960, 255,
	256, 1106, 1107, 1109, 1108, 1110, 1111, 1112, 257, 258,
	259, 260, 261, 262, 488, 489, 1113, 263, 1114, 265,
	264, 1115, 266, 1116, 1117, 267, 268, 269, 1118, 270,
	1119, 271, 272, 1120, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 1121, 216, 1122,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 1123, 290, 1124, 1125, 961, 291, 292, 1126,
	293, 494, 1127, 495, 294, 1128, 295, 296, 297, 298,
	496, 497, 498, 350, 963, 299, 300, 1129, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 1130, 962, 306,
	499, 308, 307, 309, 310, 311, 500, 1131, 501, 1132,
	313, 964, 502, 965, 314, 315, 316, 966, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 1133, 325, 324,
	1134, 326, 503, 967, 327, 328, 968, 1135, 329, 330,
	1136, 1137, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 969, 344, 345, 347,
	970, 346, 1138, 218, 971, 348, 1139, 504, 349, 505,
	351, 352, 1140, 353, 354, 355, 1141, 1142, 357, 358,
	359, 1143, 1144, 360, 361, 506, 972, 362, 973, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 1145,
	371, 372, 508, 373, 509, 374, 1146, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 1147,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 1148, 398, 974, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 1149, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 1150, 425, 405, 406, 426, 427, 975,
	428, 429, 512, 430, 431, 1151, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 1152, 443,
	444, 442, 1153, 445, 446, 447, 448, 449, 278, 450,
	1154, 451, 514, 515, 516, 517, 1155, 458, 1156, 452,
	453, 518, 454, 519, 1157, 455, 456, 457, 0, 459,
	460, 1158, 1159, 461, 462, 463, 464, 465, 467, 1160,
	468, 1161, 466, 469, 470, 471, 520, 521, 522, 1162,
	473, 472, 523, 1163, 1164, 1165, 1166, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 1082, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3185, 219, 220, 221, 222, 223, 1089,
	224, 1090, 1091, 1092, 0, 1093, 479, 1094, 1095, 1096,
	1097, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 1098, 233, 234, 235, 236, 237, 238,
	1099, 1100, 239, 484, 485, 486, 1101, 240, 487, 1102,
	1087, 1103, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 1104, 251, 0, 252, 253, 254, 1105,
	960, 255, 256, 1106, 1107, 1109, 1108, 1110, 1111, 1112,
	257, 258, 259, 260, 261, 262, 488, 489, 1113, 263,
	1114, 265, 264, 1115, 266, 1116, 1117, 267, 268, 269,
	1118, 270, 1119, 271, 272, 1120, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 1121,
	216, 1122, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 1123, 290, 1124, 1125, 961, 291,
	292, 1126, 293, 494, 1127, 495, 294, 1128, 295, 296,
	297, 298, 496, 497, 498, 350, 963, 299, 300, 1129,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 1130,
	962, 306, 499, 308, 307, 309, 310, 311, 500, 1131,
	501, 1132, 313, 964, 502, 965, 314, 315, 316, 966,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 1133,
	325, 324, 1134, 326, 503, 967, 327, 328, 968, 1135,
	329, 330, 1136, 1137, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 969, 344,
	345, 347, 970, 346, 1138, 218, 971, 348, 1139, 504,
	349, 505, 351, 352, 1140, 353, 354, 355, 1141, 1142,
	357, 358, 359, 1143, 1144, 360, 361, 506, 972, 362,
	973, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 1145, 371, 372, 508, 373, 509, 374, 1146, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 1147, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 1148, 398, 974, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 1149, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 1150, 425, 405, 406, 426,
	427, 975, 428, 429, 512, 430, 431, 1151, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	1152, 443, 444, 442, 1153, 445, 446, 447, 448, 449,
	278, 450, 1154, 451, 514, 515, 516, 517, 1155, 458,
	1156, 452, 453, 518, 454, 519, 1157, 455, 456, 457,
	0, 459, 460, 1158, 1159, 461, 462, 463, 464, 465,
	467, 1160, 468, 1161, 466, 469, 470, 471, 520, 521,
	522, 1162, 473, 472, 523, 1163, 1164, 1165, 1166, 474,
	475, 524, 476, 477, 478, 1082, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3309, 0, 219, 220, 221, 222, 223, 1089, 224, 1090,
	1091, 1092, 0, 1093, 479, 1094, 1095, 1096, 1097, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 1098, 233, 234, 235, 236, 237, 238, 1099, 1100,
	239, 484, 485, 486, 1101, 240, 487, 1102, 1087, 1103,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 1104, 251, 0, 252, 253, 254, 1105, 960, 255,
	256, 1106, 1107, 1109, 1108, 1110, 1111, 1112, 257, 258,
	259, 260, 261, 262, 488, 489, 1113, 263, 1114, 265,
	264, 1115, 266, 1116, 1117, 267, 268, 269, 1118, 270,
	1119, 271, 272, 1120, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 1121, 216, 1122,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 1123, 290, 1124, 1125, 961, 291, 292, 1126,
	293, 494, 1127, 495, 294, 1128, 295, 296, 297, 298,
	496, 497, 498, 350, 963, 299, 300, 1129, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 1130, 962, 306,
	499, 308, 307, 309, 310, 311, 500, 1131, 501, 1132,
	313, 964, 502, 965, 314, 315, 316, 966, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 1133, 325, 324,
	1134, 326, 503, 967, 327, 328, 968, 1135, 329, 330,
	1136, 1137, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 969, 344, 345, 347,
	970, 346, 1138, 218, 971, 348, 1139, 504, 349, 505,
	351, 352, 1140, 353, 354, 355, 1141, 1142, 357, 358,
	359, 1143, 1144, 360, 361, 506, 972, 362, 973, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 1145,
	371, 372, 508, 373, 509, 374, 1146, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 1147,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 1148, 398, 974, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 1149, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 1150, 425, 405, 406, 426, 427, 975,
	428, 429, 512, 430, 431, 1151, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 1152, 443,
	444, 442, 1153, 445, 446, 447, 448, 449, 278, 450,
	1154, 451, 514, 515, 516, 517, 1155, 458, 1156, 452,
	453, 518, 454, 519, 1157, 455, 456, 457, 0, 459,
	460, 1158, 1159, 461, 462, 463, 464, 465, 467, 1160,
	468, 1161, 466, 469, 470, 471, 520, 521, 522, 1162,
	473, 472, 523, 1163, 1164, 1165, 1166, 474, 475, 524,
	476, 477, 478, 1082, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3237, 0,
	219, 220, 221, 222, 223, 1089, 224, 1090, 1091, 1092,
	0, 1093, 479, 1094, 1095, 1096, 1097, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 1098,
	233, 234, 235, 236, 237, 238, 1099, 1100, 239, 484,
	485, 486, 1101, 240, 487, 1102, 1087, 1103, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 1104,
	251, 0, 252, 253, 254, 1105, 960, 255, 256, 1106,
	1107, 1109, 1108, 1110, 1111, 1112, 257, 258, 259, 260,
	261, 262, 488, 489, 1113, 263, 1114, 265, 264, 1115,
	266, 1116, 1117, 267, 268, 269, 1118, 270, 1119, 271,
	272, 1120, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 1121, 216, 1122, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	1123, 290, 1124, 1125, 961, 291, 292, 1126, 293, 494,
	1127, 495, 294, 1128, 295, 296, 297, 298, 496, 497,
	498, 350, 963, 299, 300, 1129, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 1130, 962, 306, 499, 308,
	307, 309, 310, 311, 500, 1131, 501, 1132, 313, 964,
	502, 965, 314, 315, 316, 966, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 1133, 325, 324, 1134, 326,
	503, 967, 327, 328, 968, 1135, 329, 330, 1136, 1137,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 969, 344, 345, 347, 970, 346,
	1138, 218, 971, 348, 1139, 504, 349, 505, 351, 352,
	1140, 353, 354, 355, 1141, 1142, 357, 358, 359, 1143,
	1144, 360, 361, 506, 972, 362, 973, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 1145, 371, 372,
	508, 373, 509, 374, 1146, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 1147, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 1148, 398, 974, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	1149, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 1150, 425, 405, 406, 426, 427, 975, 428, 429,
	512, 430, 431, 1151, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 1152, 443, 444, 442,
	1153, 445, 446, 447, 448, 449, 278, 450, 1154, 451,
	514, 515, 516, 517, 1155, 458, 1156, 452, 453, 518,
	454, 519, 1157, 455, 456, 457, 0, 459, 460, 1158,
	1159, 461, 462, 463, 464, 465, 467, 1160, 468, 1161,
	466, 469, 470, 471, 520, 521, 522, 1162, 473, 472,
	523, 1163, 1164, 1165, 1166, 474, 475, 524, 476, 477,
	478, 1082, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3117, 0, 219, 220,
	221, 222, 223, 1089, 224, 1090, 1091, 1092, 0, 1093,
	479, 1094, 1095, 1096, 1097, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 1098, 233, 234,
	235, 236, 237, 238, 1099, 1100, 239, 484, 485, 486,
	1101, 240, 487, 1102, 1087, 1103, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 1104, 251, 0,
	252, 253, 254, 1105, 960, 255, 256, 1106, 1107, 1109,
	1108, 1110, 1111, 1112, 257, 258, 259, 260, 261, 262,
	488, 489, 1113, 263, 1114, 265, 264, 1115, 266, 1116,
	1117, 267, 268, 269, 1118, 270, 1119, 271, 272, 1120,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 1121, 216, 1122, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 1123, 290,
	1124, 1125, 961, 291, 292, 1126, 293, 494, 1127, 495,
	294, 1128, 295, 296, 297, 298, 496, 497, 498, 350,
	963, 299, 300, 1129, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 1130, 962, 306, 499, 308, 307, 309,
	310, 311, 500, 1131, 501, 1132, 313, 964, 502, 965,
	314, 315, 316, 966, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 1133, 325, 324, 1134, 326, 503, 967,
	327, 328, 968, 1135, 329, 330, 1136, 1137, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 969, 344, 345, 347, 970, 346, 1138, 218,
	971, 348, 1139, 504, 349, 505, 351, 352, 1140, 353,
	354, 355, 1141, 1142, 357, 358, 359, 1143, 1144, 360,
	361, 506, 972, 362, 973, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 1145, 371, 372, 508, 373,
	509, 374, 1146, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 1147, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	1148, 398, 974, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 1149, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 1150,
	425, 405, 406, 426, 427, 975, 428, 429, 512, 430,
	431, 1151, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 1152, 443, 444, 442, 1153, 445,
	446, 447, 448, 449, 278, 450, 1154, 451, 514, 515,
	516, 517, 1155, 458, 1156, 452, 453, 518, 454, 519,
	1157, 455, 456, 457, 0, 459, 460, 1158, 1159, 461,
	462, 463, 464, 465, 467, 1160, 468, 1161, 466, 469,
	470, 471, 520, 521, 522, 1162, 473, 472, 523, 1163,
	1164, 1165, 1166, 474, 475, 524, 476, 477, 478, 1082,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2913, 0, 219, 220, 221, 222,
	223, 1089, 224, 1090, 1091, 1092, 0, 1093, 479, 1094,
	1095, 1096, 1097, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 1098, 233, 234, 235, 236,
	237, 238, 1099, 1100, 239, 484, 485, 486, 1101, 240,
	487, 1102, 1087, 1103, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 1104, 251, 0, 252, 253,
	254, 1105, 960, 255, 256, 1106, 1107, 1109, 1108, 1110,
	1111, 1112, 257, 258, 259, 260, 261, 262, 488, 489,
	1113, 263, 1114, 265, 264, 1115, 266, 1116, 1117, 267,
	268, 269, 1118, 270, 1119, 271, 272, 1120, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 1121, 216, 1122, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 1123, 290, 1124, 1125,
	961, 291, 292, 1126, 293, 494, 1127, 495, 294, 1128,
	295, 296, 297, 298, 496, 497, 498, 350, 963, 299,
	300, 1129, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 1130, 962, 306, 499, 308, 307, 309, 310, 311,
	500, 1131, 501, 1132, 313, 964, 502, 965, 314, 315,
	316, 966, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 1133, 325, 324, 1134, 326, 503, 967, 327, 328,
	968, 1135, 329, 330, 1136, 1137, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	969, 344, 345, 347, 970, 346, 1138, 218, 971, 348,
	1139, 504, 349, 505, 351, 352, 1140, 353, 354, 355,
	1141, 1142, 357, 358, 359, 1143, 1144, 360, 361, 506,
	972, 362, 973, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 1145, 371, 372, 508, 373, 509, 374,
	1146, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 1147, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 1148, 398,
	974, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 1149, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 1150, 425, 405,
	406, 426, 427, 975, 428, 429, 512, 430, 431, 1151,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 1152, 443, 444, 442, 1153, 445, 446, 447,
	448, 449, 278, 450, 1154, 451, 514, 515, 516, 517,
	1155, 458, 1156, 452, 453, 518, 454, 519, 1157, 455,
	456, 457, 0, 459, 460, 1158, 1159, 461, 462, 463,
	464, 465, 467, 1160, 468, 1161, 466, 469, 470, 471,
	520, 521, 522, 1162, 473, 472, 523, 1163, 1164, 1165,
	1166, 474, 475, 524, 476, 477, 478, 1082, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2905, 0, 219, 220, 221, 222, 223, 1089,
	224, 1090, 1091, 1092, 0, 1093, 479, 1094, 1095, 1096,
	1097, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 1098, 233, 234, 235, 236, 237, 238,
	1099, 1100, 239, 484, 485, 486, 1101, 240, 487, 1102,
	1087, 1103, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 1104, 251, 0, 252, 253, 254, 1105,
	960, 255, 256, 1106, 1107, 1109, 1108, 1110, 1111, 1112,
	257, 258, 259, 260, 261, 262, 488, 489, 1113, 263,
	1114, 265, 264, 1115, 266, 1116, 1117, 267, 268, 269,
	1118, 270, 1119, 271, 272, 1120, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 1121,
	216, 1122, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 1123, 290, 1124, 1125, 961, 291,
	292, 1126, 293, 494, 1127, 495, 294, 1128, 295, 296,
	297, 298, 496, 497, 498, 350, 963, 299, 300, 1129,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 1130,
	962, 306, 499, 308, 307, 309, 310, 311, 500, 1131,
	501, 1132, 313, 964, 502, 965, 314, 315, 316, 966,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 1133,
	325, 324, 1134, 326, 503, 967, 327, 328, 968, 1135,
	329, 330, 1136, 1137, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 969, 344,
	345, 347, 970, 346, 1138, 218, 971, 348, 1139, 504,
	349, 505, 351, 352, 1140, 353, 354, 355, 1141, 1142,
	357, 358, 359, 1143, 1144, 360, 361, 506, 972, 362,
	973, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 1145, 371, 372, 508, 373, 509, 374, 1146, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 1147, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 1148, 398, 974, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 1149, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 1150, 425, 405, 406, 426,
	427, 975, 428, 429, 512, 430, 431, 1151, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	1152, 443, 444, 442, 1153, 445, 446, 447, 448, 449,
	278, 450, 1154, 451, 514, 515, 516, 517, 1155, 458,
	1156, 452, 453, 518, 454, 519, 1157, 455, 456, 457,
	0, 459, 460, 1158, 1159, 461, 462, 463, 464, 465,
	467, 1160, 468, 1161, 466, 469, 470, 471, 520, 521,
	522, 1162, 473, 472, 523, 1163, 1164, 1165, 1166, 474,
	475, 524, 476, 477, 478, 1082, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2766, 0, 219, 220, 221, 222, 223, 1089, 224, 1090,
	1091, 1092, 0, 1093, 479, 1094, 1095, 1096, 1097, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 1098, 233, 234, 235, 236, 237, 238, 1099, 1100,
	239, 484, 485, 486, 1101, 240, 487, 1102, 1087, 1103,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 1104, 251, 0, 252, 253, 254, 1105, 960, 255,
	256, 1106, 1107, 1109, 1108, 1110, 1111, 1112, 257, 258,
	259, 260, 261, 262, 488, 489, 1113, 263, 1114, 265,
	264, 1115, 266, 1116, 1117, 267, 268, 269, 1118, 270,
	1119, 271, 272, 1120, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 1121, 216, 1122,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 1123, 290, 1124, 1125, 961, 291, 292, 1126,
	293, 494, 1127, 495, 294, 1128, 295, 296, 297, 298,
	496, 497, 498, 350, 963, 299, 300, 1129, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 1130, 962, 306,
	499, 308, 307, 309, 310, 311, 500, 1131, 501, 1132,
	313, 964, 502, 965, 314, 315, 316, 966, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 1133, 325, 324,
	1134, 326, 503, 967, 327, 328, 968, 1135, 329, 330,
	1136, 1137, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 969, 344, 345, 347,
	970, 346, 1138, 218, 971, 348, 1139, 504, 349, 505,
	351, 352, 1140, 353, 354, 355, 1141, 1142, 357, 358,
	359, 1143, 1144, 360, 361, 506, 972, 362, 973, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 1145,
	371, 372, 508, 373, 509, 374, 1146, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 1147,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 1148, 398, 974, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 1149, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 1150, 425, 405, 406, 426, 427, 975,
	428, 429, 512, 430, 431, 1151, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 1152, 443,
	444, 442, 1153, 445, 446, 447, 448, 449, 278, 450,
	1154, 451, 514, 515, 516, 517, 1155, 458, 1156, 452,
	453, 518, 454, 519, 1157, 455, 456, 457, 0, 459,
	460, 1158, 1159, 461, 462, 463, 464, 465, 467, 1160,
	468, 1161, 466, 469, 470, 471, 520, 521, 522, 1162,
	473, 472, 523, 1163, 1164, 1165, 1166, 474, 475, 524,
	476, 477, 478, 1082, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2109, 0,
	219, 220, 221, 222, 223, 1089, 224, 1090, 1091, 1092,
	0, 1093, 479, 1094, 1095, 1096, 1097, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 1098,
	233, 234, 235, 236, 237, 238, 1099, 1100, 239, 484,
	485, 486, 1101, 240, 487, 1102, 1087, 1103, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 1104,
	251, 0, 252, 253, 254, 1105, 960, 255, 256, 1106,
	1107, 1109, 1108, 1110, 1111, 1112, 257, 258, 259, 260,
	261, 262, 488, 489, 1113, 263, 1114, 265, 264, 1115,
	266, 1116, 1117, 267, 268, 269, 1118, 270, 1119, 271,
	272, 1120, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 1121, 216, 1122, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	1123, 290, 1124, 1125, 961, 291, 292, 1126, 293, 494,
	1127, 495, 294, 1128, 295, 296, 297, 298, 496, 497,
	498, 350, 963, 299, 300, 1129, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 1130, 962, 306, 499, 308,
	307, 309, 310, 311, 500, 1131, 501, 1132, 313, 964,
	502, 965, 314, 315, 316, 966, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 1133, 325, 324, 1134, 326,
	503, 967, 327, 328, 968, 1135, 329, 330, 1136, 1137,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 969, 344, 345, 347, 970, 346,
	1138, 218, 971, 348, 1139, 504, 349, 505, 351, 352,
	1140, 353, 354, 355, 1141, 1142, 357, 358, 359, 1143,
	1144, 360, 361, 506, 972, 362, 973, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 1145, 371, 372,
	508, 373, 509, 374, 1146, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 1147, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 1148, 398, 974, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	1149, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 1150, 425, 405, 406, 426, 427, 975, 428, 429,
	512, 430, 431, 1151, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 1152, 443, 444, 442,
	1153, 445, 446, 447, 448, 449, 278, 450, 1154, 451,
	514, 515, 516, 517, 1155, 458, 1156, 452, 453, 518,
	454, 519, 1157, 455, 456, 457, 0, 459, 460, 1158,
	1159, 461, 462, 463, 464, 465, 467, 1160, 468, 1161,
	466, 469, 470, 471, 520, 521, 522, 1162, 473, 472,
	523, 1163, 1164, 1165, 1166, 474, 475, 524, 476, 477,
	478, 1190, 0, 1082, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1818, 0, 0, 0,
	219, 220, 221, 222, 223, 1089, 224, 1090, 1091, 1092,
	0, 1093, 479, 1094, 1095, 1096, 1097, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 1098,
	233, 234, 235, 236, 237, 238, 1099, 1100, 239, 484,
	485, 486, 1101, 240, 487, 1102, 1087, 1103, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 1104,
	251, 0, 252, 253, 254, 1105, 960, 255, 256, 1106,
	1107, 1109, 1108, 1110, 1111, 1112, 257, 258, 259, 260,
	261, 262, 488, 489, 1113, 263, 1114, 265, 264, 1115,
	266, 1116, 1117, 267, 268, 269, 1118, 270, 1119, 271,
	272, 1120, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 1121, 216, 1122, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	1123, 290, 1124, 1125, 961, 291, 292, 1126, 293, 494,
	1127, 495, 294, 1128, 295, 296, 297, 298, 496, 497,
	498, 350, 963, 299, 300, 1129, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 1130, 962, 306, 499, 308,
	307, 309, 310, 311, 500, 1131, 501, 1132, 313, 964,
	502, 965, 314, 315, 316, 966, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 1133, 325, 324, 1134, 326,
	503, 967, 327, 328, 968, 1135, 329, 330, 1136, 1137,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 969, 344, 345, 347, 970, 346,
	1138, 218, 971, 348, 1139, 504, 349, 505, 351, 352,
	1140, 353, 354, 355, 1141, 1142, 357, 358, 359, 1143,
	1144, 360, 361, 506, 972, 362, 973, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 1145, 371, 372,
	508, 373, 509, 374, 1146, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 1147, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 1148, 398, 974, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	1149, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 1150, 425, 405, 406, 426, 427, 975, 428, 429,
	512, 430, 431, 1151, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 1152, 443, 444, 442,
	1153, 445, 446, 447, 448, 449, 278, 450, 1154, 451,
	514, 515, 516, 517, 1155, 458, 1156, 452, 453, 518,
	454, 519, 1157, 455, 456, 457, 0, 459, 460, 1158,
	1159, 461, 462, 463, 464, 465, 467, 1160, 468, 1161,
	466, 469, 470, 471, 520, 521, 522, 1162, 473, 472,
	523, 1163, 1164, 1165, 1166, 474, 475, 524, 476, 477,
	478, 1079, 0, 1082, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 1089, 224, 1090, 1091, 1092,
	0, 1093, 479, 1094, 1095, 1096, 1097, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 1098,
	233, 234, 235, 236, 237, 238, 1099, 1100, 239, 484,
	485, 486, 1101, 240, 487, 1102, 1087, 1103, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 1104,
	251, 0, 252, 253, 254, 1105, 960, 255, 256, 1106,
	1107, 1109, 1108, 1110, 1111, 1112, 257, 258, 259, 260,
	261, 262, 488, 489, 1113, 263, 1114, 265, 264, 1115,
	266, 1116, 1117, 267, 268, 269, 1118, 270, 1119, 271,
	272, 1120, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 1121, 216, 1122, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	1123, 290, 1124, 1125, 961, 291, 292, 1126, 293, 494,
	1127, 495, 294, 1128, 295, 296, 297, 298, 496, 497,
	498, 350, 963, 299, 300, 1129, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 1130, 962, 306, 499, 308,
	307, 309, 310, 311, 500, 1131, 501, 1132, 313, 964,
	502, 965, 314, 315, 316, 966, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 1133, 325, 324, 1134, 326,
	503, 967, 327, 328, 968, 1135, 329, 330, 1136, 1137,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 969, 344, 345, 347, 970, 346,
	1138, 218, 971, 348, 1139, 504, 349, 505, 351, 352,
	1140, 353, 354, 355, 1141, 1142, 357, 358, 359, 1143,
	1144, 360, 361, 506, 972, 362, 973, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 1145, 371, 372,
	508, 373, 509, 374, 1146, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 1147, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 1148, 398, 974, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	1149, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 1150, 425, 405, 406, 426, 427, 975, 428, 429,
	512, 430, 431, 1151, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 1152, 443, 444, 442,
	1153, 445, 446, 447, 448, 449, 278, 450, 1154, 451,
	514, 515, 516, 517, 1155, 458, 1156, 452, 453, 518,
	454, 519, 1157, 455, 456, 457, 0, 459, 460, 1158,
	1159, 461, 462, 463, 464, 465, 467, 1160, 468, 1161,
	466, 469, 470, 471, 520, 521, 522, 1162, 473, 472,
	523, 1163, 1164, 1165, 1166, 474, 475, 524, 476, 477,
	478, 1082, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 1089, 224, 1090, 1091, 1092, 0, 1093,
	479, 1094, 1095, 1096, 1097, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 1098, 233, 234,
	235, 236, 237, 238, 1099, 1100, 239, 484, 485, 486,
	1101, 240, 487, 1102, 1087, 1103, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 1104, 251, 0,
	252, 253, 254, 1105, 960, 255, 256, 1106, 1107, 1109,
	1108, 1110, 1111, 1112, 257, 258, 259, 260, 261, 262,
	488, 489, 1113, 263, 1114, 265, 264, 1115, 266, 1116,
	1117, 267, 268, 269, 1118, 270, 1119, 271, 272, 1120,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 1121, 216, 1122, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 1123, 290,
	1124, 1125, 961, 291, 292, 1126, 293, 494, 1127, 495,
	294, 1128, 295, 296, 297, 298, 496, 497, 498, 350,
	963, 299, 300, 1129, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 1130, 962, 306, 499, 308, 307, 309,
	310, 311, 500, 1131, 501, 1132, 313, 964, 502, 965,
	314, 315, 316, 966, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 1133, 325, 324, 1134, 326, 503, 967,
	327, 328, 968, 1135, 329, 330, 1136, 1137, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 969, 344, 345, 347, 970, 346, 1138, 218,
	971, 348, 1139, 504, 349, 505, 351, 352, 1140, 353,
	354, 355, 1141, 1142, 357, 358, 359, 1143, 1144, 360,
	361, 506, 972, 362, 973, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 1145, 371, 372, 508, 373,
	509, 374, 1146, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 1147, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	1148, 398, 974, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 1149, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 1150,
	425, 405, 406, 426, 427, 975, 428, 429, 512, 430,
	431, 1151, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 1152, 443, 444, 442, 1153, 445,
	446, 447, 448, 449, 278, 450, 1154, 451, 514, 515,
	516, 517, 1155, 458, 1156, 452, 453, 518, 454, 519,
	1157, 455, 456, 457, 0, 459, 460, 1158, 1159, 461,
	462, 463, 464, 465, 467, 1160, 468, 1161, 466, 469,
	470, 471, 520, 521, 522, 1162, 473, 472, 523, 1163,
	1164, 1165, 1166, 474, 475, 524, 476, 477, 478, 2085,
	0, 902, 859, 860, 861, 857, 858, 871, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 2082, 224, 0, 0, 0, 0, 0,
	951, 876, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 917, 896, 928, 886, 927, 926, 0, 233, 888,
	887, 236, 237, 238, 878, 950, 239, 987, 988, 486,
	0, 240, 957, 0, 940, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 256, 943, 941, 942,
	947, 945, 944, 946, 257, 258, 259, 260, 931, 262,
	924, 923, 848, 263, 0, 265, 264, 0, 266, 2083,
	0, 267, 922, 269, 0, 270, 0, 271, 272, 0,
	273, 854, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 978, 979, 867, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 921, 919, 920, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 985, 0, 877,
	294, 0, 295, 296, 297, 298, 952, 953, 956, 350,
	963, 299, 300, 0, 301, 302, 898, 0, 0, 217,
	303, 305, 312, 0, 962, 306, 910, 901, 912, 914,
	915, 916, 911, 0, 903, 0, 313, 964, 954, 965,
	314, 315, 316, 966, 936, 937, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 986, 967,
	327, 328, 968, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	890, 341, 969, 344, 345, 347, 970, 346, 845, 218,
	971, 348, 868, 955, 349, 925, 351, 352, 0, 899,
	354, 900, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 980, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 981, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 918, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 855, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 891, 892, 894, 895, 416, 422, 423, 424, 948,
	425, 405, 406, 426, 427, 975, 428, 429, 913, 893,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 959,
	437, 438, 439, 982, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 889, 0, 451, 932, 933,
	934, 935, 0, 458, 0, 452, 453, 983, 454, 984,
	866, 455, 456, 457, 0, 459, 460, 0, 849, 461,
	462, 463, 464, 465, 467, 949, 468, 0, 897, 469,
	470, 471, 520, 929, 977, 2081, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 846,
	0, 0, 0, 0, 0, 844, 0, 0, 0, 0,
	0, 0, 842, 843, 2084, 0, 0, 0, 0, 0,
	0, 872, 2080, 0, 835, 870, 902, 859, 860, 861,
	857, 858, 871, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 951, 876, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 917, 896, 928, 886,
	927, 926, 0, 233, 888, 887, 236, 237, 238, 878,
	950, 239, 987, 988, 486, 0, 240, 957, 0, 940,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 943, 941, 942, 947, 945, 944, 946, 257,
	258, 259, 260, 931, 262, 924, 923, 848, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 922, 269, 0,
	270, 0, 271, 272, 0, 273, 854, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 978, 979, 867, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 921, 919,
	920, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 985, 0, 877, 294, 0, 295, 296, 297,
	298, 952, 953, 956, 350, 963, 299, 300, 0, 301,
	302, 898, 0, 0, 217, 303, 305, 312, 0, 962,
	306, 910, 901, 912, 914, 915, 916, 911, 0, 903,
	0, 313, 964, 954, 965, 314, 315, 316, 966, 936,
	937, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 986, 967, 327, 328, 968, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 890, 341, 969, 344, 345,
	347, 970, 346, 845, 218, 971, 348, 868, 955, 349,
	925, 351, 352, 0, 899, 354, 900, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	980, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 981, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 918, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 855, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 182, 420, 421, 891, 892, 894, 895,
	416, 422, 423, 424, 948, 425, 405, 406, 426, 427,
	975, 428, 429, 913, 893, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 959, 437, 438, 439, 982, 0,
	443, 444, 442, 184, 445, 446, 447, 448, 449, 278,
	889, 0, 451, 932, 933, 934, 935, 0, 458, 0,
	452, 453, 983, 454, 984, 866, 455, 456, 457, 0,
	459, 460, 0, 849, 461, 462, 463, 464, 465, 467,
	949, 468, 0, 897, 469, 470, 471, 1329, 929, 977,
	0, 473, 472, 523, 0, 0, 0, 176, 474, 475,
	524, 476, 477, 478, 846, 177, 0, 0, 0, 0,
	844, 0, 0, 0, 0, 0, 0, 842, 843, 902,
	859, 860, 861, 857, 858, 871, 1541, 1539, 0, 0,
	870, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 951, 876,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 917,
	896, 928, 886, 927, 926, 0, 233, 888, 887, 236,
	237, 238, 878, 950, 239, 987, 988, 486, 0, 240,
	957, 0, 940, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 960, 255, 256, 943, 941, 942, 947, 945,
	944, 946, 257, 258, 259, 260, 931, 262, 924, 923,
	848, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	922, 269, 0, 270, 0, 271, 272, 0, 273, 854,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 978,
	979, 867, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 921, 919, 920, 0, 289, 0, 290, 0, 0,
	961, 291, 292, 0, 293, 985, 0, 877, 294, 0,
	295, 296, 297, 298, 952, 953, 956, 350, 963, 299,
	300, 0, 301, 302, 898, 0, 0, 217, 303, 305,
	312, 0, 962, 306, 910, 901, 912, 914, 915, 916,
	911, 0, 903, 0, 313, 964, 954, 965, 314, 315,
	316, 966, 936, 937, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 986, 967, 327, 328,
	968, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 890, 341,
	969, 344, 345, 347, 970, 346, 845, 218, 971, 348,
	868, 955, 349, 925, 351, 352, 0, 899, 354, 900,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	972, 362, 973, 980, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 981, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	918, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	974, 399, 400, 401, 402, 855, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 182, 420, 421, 891,
	892, 894, 895, 416, 422, 423, 424, 948, 425, 405,
	406, 426, 427, 975, 428, 429, 913, 893, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 959, 437, 438,
	439, 982, 0, 443, 444, 442, 184, 445, 446, 447,
	448, 449, 278, 889, 0, 451, 932, 933, 934, 935,
	0, 458, 0, 452, 453, 983, 454, 984, 866, 455,
	456, 457, 0, 459, 460, 0, 849, 461, 462, 463,
	464, 465, 467, 949, 468, 0, 897, 469, 470, 471,
	1329, 929, 977, 0, 473, 472, 523, 0, 0, 0,
	176, 474, 475, 524, 476, 477, 478, 846, 177, 0,
	0, 0, 0, 844, 0, 0, 0, 0, 0, 0,
	842, 843, 902, 859, 860, 861, 857, 858, 871, 1541,
	2521, 0, 0, 870, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 951, 876, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 917, 896, 928, 886, 927, 926, 0, 233,
	888, 887, 236, 237, 238, 878, 950, 239, 987, 988,
	486, 0, 240, 957, 0, 940, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 960, 255, 256, 943, 941,
	942, 947, 945, 944, 946, 257, 258, 259, 260, 931,
	262, 924, 923, 848, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 922, 269, 0, 270, 0, 271, 272,
	0, 273, 854, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 978, 979, 867, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 921, 919, 920, 0, 289, 0,
	290, 0, 0, 961, 291, 292, 0, 293, 985, 0,
	877, 294, 0, 295, 296, 297, 298, 952, 953, 956,
	350, 963, 299, 300, 0, 301, 302, 898, 0, 0,
	217, 303, 305, 312, 0, 962, 306, 910, 901, 912,
	914, 915, 916, 911, 0, 903, 0, 313, 964, 954,
	965, 314, 315, 316, 966, 936, 937, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 986,
	967, 327, 328, 968, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 890, 341, 969, 344, 345, 347, 970, 346, 845,
	218, 971, 348, 868, 955, 349, 925, 351, 352, 0,
	899, 354, 900, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 972, 362, 973, 980, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 981,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 918, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 974, 399, 400, 401, 402, 855, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 182,
	420, 421, 891, 892, 894, 895, 416, 422, 423, 424,
	948, 425, 405, 406, 426, 427, 975, 428, 429, 913,
	893, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	959, 437, 438, 439, 982, 0, 443, 444, 442, 184,
	445, 446, 447, 448, 449, 278, 889, 0, 451, 932,
	933, 934, 935, 0, 458, 0, 452, 453, 983, 454,
	984, 866, 455, 456, 457, 0, 459, 460, 0, 849,
	461, 462, 463, 464, 465, 467, 949, 468, 0, 897,
	469, 470, 471, 1329, 929, 977, 0, 473, 472, 523,
	0, 0, 0, 176, 474, 475, 524, 476, 477, 478,
	846, 177, 0, 0, 0, 0, 844, 0, 0, 0,
	0, 0, 0, 842, 843, 902, 859, 860, 861, 857,
	858, 871, 1541, 1539, 0, 0, 870, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 951, 876, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 917, 896, 928, 886, 927,
	926, 2172, 233, 888, 887, 236, 237, 238, 878, 950,
	239, 987, 988, 486, 0, 240, 957, 0, 940, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 960, 255,
	256, 943, 941, 942, 947, 945, 944, 946, 257, 258,
	259, 260, 931, 262, 924, 923, 848, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 922, 269, 0, 270,
	0, 271, 272, 0, 273, 854, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 978, 979, 867, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 921, 919, 920,
	0, 289, 0, 290, 0, 2177, 961, 291, 292, 0,
	293, 985, 0, 877, 294, 0, 295, 296, 297, 298,
	952, 953, 956, 350, 963, 299, 300, 0, 301, 302,
	898, 0, 0, 217, 303, 305, 312, 0, 962, 306,
	910, 901, 912, 914, 915, 916, 911, 0, 903, 0,
	313, 964, 954, 965, 314, 315, 316, 966, 936, 937,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	2173, 326, 986, 967, 327, 328, 968, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 890, 341, 969, 344, 345, 347,
	970, 346, 845, 218, 971, 348, 868, 955, 349, 925,
	351, 352, 0, 899, 354, 900, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 972, 362, 973, 980,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 981, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 918, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 974, 399, 400, 401,
	402, 855, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 891, 892, 894, 895, 416,
	422, 423, 424, 948, 425, 405, 406, 426, 427, 975,
	428, 429, 913, 893, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 959, 437, 438, 439, 982, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 889,
	0, 451, 932, 933, 934, 935, 0, 458, 2174, 452,
	453, 983, 454, 984, 866, 455, 456, 457, 0, 459,
	460, 0, 849, 461, 462, 463, 464, 465, 467, 949,
	468, 0, 897, 469, 470, 471, 520, 929, 977, 0,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 846, 0, 0, 0, 0, 0, 844,
	0, 0, 0, 0, 0, 0, 842, 843, 0, 0,
	0, 0, 0, 0, 0, 872, 0, 0, 2129, 870,
	902, 859, 860, 861, 857, 858, 871, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 951,
	876, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	917, 896, 928, 886, 927, 926, 0, 233, 888, 887,
	236, 237, 238, 878, 950, 239, 987, 988, 486, 0,
	240, 957, 0, 940, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 960, 255, 256, 943, 941, 942, 947,
	945, 944, 946, 257, 258, 259, 260, 931, 262, 924,
	923, 848, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 922, 269, 0, 270, 0, 271, 272, 0, 273,
	854, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	978, 979, 867, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 921, 919, 920, 0, 289, 0, 290, 0,
	0, 961, 291, 292, 0, 293, 985, 0, 877, 294,
	0, 295, 296, 297, 298, 952, 953, 956, 350, 963,
	299, 300, 0, 301, 302, 898, 0, 0, 217, 303,
	305, 312, 0, 962, 306, 910, 901, 912, 914, 915,
	916, 911, 0, 903, 0, 313, 964, 954, 965, 314,
	315, 316, 966, 936, 937, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 986, 967, 327,
	328, 968, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 890,
	341, 969, 344, 345, 347, 970, 346, 845, 218, 971,
	348, 868, 955, 349, 925, 351, 352, 0, 899, 354,
	900, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 972, 362, 973, 980, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 981, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 918, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 974, 399, 400, 401, 402, 855, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	891, 892, 894, 895, 416, 422, 423, 424, 948, 425,
	405, 406, 426, 427, 975, 428, 429, 913, 893, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 959, 437,
	438, 439, 982, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 889, 0, 451, 932, 933, 934,
	935, 0, 458, 0, 452, 453, 983, 454, 984, 866,
	455, 456, 457, 0, 459, 460, 0, 849, 461, 462,
	463, 464, 465, 467, 949, 468, 0, 897, 469, 470,
	471, 520, 929, 977, 0, 473, 472, 523, 0, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 846, 0,
	0, 0, 0, 0, 844, 0, 0, 0, 0, 0,
	0, 842, 843, 0, 0, 0, 0, 0, 0, 0,
	872, 2127, 0, 1396, 870, 902, 859, 860, 861, 857,
	858, 871, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 951, 876, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 917, 896, 928, 886, 927,
	926, 0, 233, 888, 887, 236, 237, 238, 878, 950,
	239, 987, 988, 486, 0, 240, 957, 0, 940, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 960, 255,
	256, 943, 941, 942, 947, 945, 944, 946, 257, 258,
	259, 260, 931, 262, 924, 923, 848, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 922, 269, 0, 270,
	0, 271, 272, 0, 273, 854, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 978, 979, 867, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 921, 919, 920,
	0, 289, 0, 290, 0, 0, 961, 291, 292, 0,
	293, 985, 0, 877, 294, 0, 295, 296, 297, 298,
	952, 953, 956, 350, 963, 299, 300, 0, 301, 302,
	898, 0, 0, 217, 303, 305, 312, 0, 962, 306,
	910, 901, 912, 914, 915, 916, 911, 0, 903, 0,
	313, 964, 954, 965, 314, 315, 316, 966, 936, 937,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 986, 967, 327, 328, 968, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 890, 341, 969, 344, 345, 347,
	970, 346, 845, 218, 971, 348, 868, 955, 349, 925,
	351, 352, 0, 899, 354, 900, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 972, 362, 973, 980,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 981, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 918, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 974, 399, 400, 401,
	402, 855, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 891, 892, 894, 895, 416,
	422, 423, 424, 948, 425, 405, 406, 426, 427, 975,
	428, 429, 913, 893, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 959, 437, 438, 439, 982, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 889,
	0, 451, 932, 933, 934, 935, 0, 458, 0, 452,
	453, 983, 454, 984, 866, 455, 456, 457, 0, 459,
	460, 0, 849, 461, 462, 463, 464, 465, 467, 949,
	468, 0, 897, 469, 470, 471, 520, 929, 977, 0,
	473, 472, 523, 1395, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 846, 0, 0, 0, 0, 0, 844,
	0, 0, 0, 0, 0, 0, 842, 843, 0, 0,
	0, 0, 0, 0, 0, 872, 0, 0, 838, 870,
	902, 859, 860, 861, 857, 858, 871, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 951,
	876, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	917, 896, 928, 886, 927, 926, 0, 233, 888, 887,
	236, 237, 238, 878, 950, 239, 987, 988, 486, 0,
	240, 957, 0, 940, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 960, 255, 256, 943, 941, 942, 947,
	945, 944, 946, 257, 258, 259, 260, 931, 262, 924,
	923, 848, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 922, 269, 0, 270, 0, 271, 272, 0, 273,
	854, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	978, 979, 867, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 921, 919, 920, 0, 289, 0, 290, 0,
	0, 961, 291, 292, 0, 293, 985, 0, 877, 294,
	0, 295, 296, 297, 298, 952, 953, 956, 350, 963,
	299, 300, 0, 301, 302, 898, 0, 0, 217, 303,
	305, 312, 0, 962, 306, 910, 901, 912, 914, 915,
	916, 911, 0, 903, 0, 313, 964, 954, 965, 314,
	315, 316, 966, 936, 937, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 986, 967, 327,
	328, 968, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 890,
	341, 969, 344, 345, 347, 970, 346, 845, 218, 971,
	348, 868, 955, 349, 925, 351, 352, 0, 899, 354,
	900, 850, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 972, 362, 973, 980, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 981, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 918, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 974, 399, 400, 401, 402, 855, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	891, 892, 894, 895, 416, 422, 423, 424, 948, 425,
	405, 406, 426, 427, 975, 428, 429, 913, 893, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 959, 437,
	438, 439, 982, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 889, 0, 451, 932, 933, 934,
	935, 0, 458, 0, 452, 453, 983, 454, 984, 866,
	455, 456, 457, 0, 459, 460, 0, 849, 461, 462,
	463, 464, 465, 467, 949, 468, 0, 897, 469, 470,
	471, 520, 929, 977, 0, 473, 472, 523, 0, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 846, 0,
	0, 0, 0, 0, 844, 0, 0, 0, 0, 0,
	0, 842, 843, 902, 859, 860, 861, 857, 858, 871,
	872, 0, 0, 0, 870, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 951, 876, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 917, 896, 928, 886, 927, 926, 0,
	233, 888, 887, 236, 237, 238, 878, 950, 239, 987,
	988, 486, 0, 240, 957, 0, 940, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 3516, 254, 0, 960, 255, 256, 943,
	941, 942, 947, 945, 944, 946, 257, 258, 259, 260,
	931, 262, 924, 923, 848, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 922, 269, 0, 270, 0, 271,
	272, 0, 273, 854, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 978, 979, 867, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 921, 919, 920, 0, 289,
	0, 290, 0, 0, 961, 291, 292, 0, 293, 985,
	0, 877, 294, 0, 295, 296, 297, 298, 952, 953,
	956, 350, 963, 299, 300, 0, 301, 302, 898, 0,
	0, 217, 303, 305, 312, 0, 962, 306, 910, 901,
	912, 914, 915, 916, 911, 0, 903, 0, 313, 964,
	954, 965, 314, 315, 316, 966, 936, 937, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	986, 967, 327, 328, 968, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 890, 341, 969, 344, 345, 347, 970, 346,
	845, 218, 971, 348, 868, 955, 349, 925, 351, 352,
	0, 899, 354, 900, 850, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 972, 362, 973, 980, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	981, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 918, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 974, 399, 400, 401, 402, 855,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 891, 892, 894, 895, 416, 422, 423,
	424, 948, 425, 405, 406, 426, 427, 975, 428, 429,
	913, 893, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 959, 437, 438, 439, 982, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 889, 0, 451,
	932, 933, 934, 935, 0, 458, 0, 452, 453, 983,
	454, 984, 866, 455, 456, 457, 0, 459, 460, 0,
	849, 461, 462, 463, 464, 465, 467, 949, 468, 0,
	897, 469, 470, 471, 520, 929, 977, 0, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 846, 0, 0, 0, 0, 0, 844, 0, 0,
	0, 0, 0, 0, 842, 843, 902, 859, 860, 861,
	857, 858, 871, 872, 0, 0, 0, 870, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 951, 876, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 917, 896, 928, 886,
	927, 926, 0, 233, 888, 887, 236, 237, 238, 878,
	950, 239, 987, 988, 486, 0, 240, 957, 0, 940,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 3368, 254, 0, 960,
	255, 256, 943, 941, 942, 947, 945, 944, 946, 257,
	258, 259, 260, 931, 262, 924, 923, 848, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 922, 269, 0,
	270, 0, 271, 272, 0, 273, 854, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 978, 979, 867, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 921, 919,
	920, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 985, 0, 877, 294, 0, 295, 296, 297,
	298, 952, 953, 956, 350, 963, 299, 300, 0, 301,
	302, 898, 0, 0, 217, 303, 305, 312, 0, 962,
	306, 910, 901, 912, 914, 915, 916, 911, 0, 903,
	0, 313, 964, 954, 965, 314, 315, 316, 966, 936,
	937, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 986, 967, 327, 328, 968, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 890, 341, 969, 344, 345,
	347, 970, 346, 845, 218, 971, 348, 868, 955, 349,
	925, 351, 352, 0, 899, 354, 900, 850, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	980, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 981, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 918, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 855, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 891, 892, 894, 895,
	416, 422, 423, 424, 948, 425, 405, 406, 426, 427,
	975, 428, 429, 913, 893, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 959, 437, 438, 439, 982, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	889, 0, 451, 932, 933, 934, 935, 0, 458, 0,
	452, 453, 983, 454, 984, 866, 455, 456, 457, 0,
	459, 460, 0, 849, 461, 462, 463, 464, 465, 467,
	949, 468, 0, 897, 469, 470, 471, 520, 929, 977,
	0, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 846, 0, 0, 0, 0, 0,
	844, 0, 0, 0, 0, 0, 0, 842, 843, 902,
	859, 860, 861, 857, 858, 871, 872, 0, 0, 0,
	870, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 951, 876,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 917,
	896, 928, 886, 927, 926, 0, 233, 888, 887, 236,
	237, 238, 878, 950, 239, 987, 988, 486, 0, 240,
	957, 0, 940, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 960, 255, 256, 943, 941, 942, 947, 945,
	944, 946, 257, 258, 259, 260, 931, 262, 924, 923,
	848, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	922, 269, 0, 270, 0, 271, 272, 0, 273, 854,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 978,
	979, 867, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 921, 919, 920, 0, 289, 0, 290, 0, 0,
	961, 291, 292, 0, 293, 985, 0, 877, 294, 0,
	295, 296, 297, 298, 952, 953, 956, 350, 963, 299,
	300, 0, 301, 302, 898, 0, 0, 217, 303, 305,
	312, 0, 962, 306, 910, 901, 912, 914, 915, 916,
	911, 0, 903, 0, 313, 964, 954, 965, 314, 315,
	316, 966, 936, 937, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 986, 967, 327, 328,
	968, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 890, 341,
	969, 344, 345, 347, 970, 346, 845, 3087, 971, 348,
	868, 955, 349, 925, 351, 352, 0, 899, 354, 900,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	972, 362, 973, 980, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 981, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	918, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	974, 399, 400, 401, 402, 855, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 891,
	892, 894, 895, 416, 422, 423, 424, 948, 425, 405,
	406, 426, 427, 975, 428, 429, 913, 893, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 959, 437, 438,
	439, 982, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 889, 0, 451, 932, 933, 934, 935,
	0, 458, 0, 452, 453, 983, 454, 984, 866, 455,
	456, 457, 0, 459, 460, 0, 849, 461, 462, 463,
	464, 465, 467, 949, 468, 0, 897, 469, 470, 471,
	520, 929, 977, 0, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 846, 0, 0,
	0, 0, 0, 844, 0, 0, 0, 0, 0, 0,
	842, 843, 1601, 0, 0, 0, 0, 0, 0, 872,
	0, 0, 0, 870, 902, 859, 860, 861, 857, 858,
	871, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 951, 876, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 917, 896, 928, 886, 927, 926,
	0, 233, 888, 887, 236, 237, 238, 878, 950, 239,
	987, 988, 486, 0, 240, 957, 0, 940, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 960, 255, 256,
	943, 941, 942, 947, 945, 944, 946, 257, 258, 259,
	260, 931, 262, 924, 923, 848, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 922, 269, 0, 270, 0,
	271, 272, 0, 273, 854, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 978, 979, 867, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 921, 919, 920, 0,
	289, 0, 290, 0, 0, 961, 291, 292, 0, 293,
	985, 0, 877, 294, 0, 295, 296, 297, 298, 952,
	953, 956, 350, 963, 299, 300, 0, 301, 302, 898,
	0, 0, 217, 303, 305, 312, 0, 962, 306, 910,
	901, 912, 914, 915, 916, 911, 0, 903, 0, 313,
	964, 954, 965, 314, 315, 316, 966, 936, 937, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 986, 967, 327, 328, 968, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 890, 341, 969, 344, 345, 347, 970,
	346, 845, 218, 971, 348, 868, 955, 349, 925, 351,
	352, 0, 899, 354, 900, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 972, 362, 973, 980, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 981, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 918, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 974, 399, 400, 401, 402,
	855, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 891, 892, 894, 895, 416, 422,
	423, 424, 948, 425, 405, 406, 426, 427, 975, 428,
	429, 913, 893, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 959, 437, 438, 439, 982, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 889, 0,
	451, 932, 933, 934, 935, 0, 458, 0, 452, 453,
	983, 454, 984, 866, 455, 456, 457, 0, 459, 460,
	0, 849, 461, 462, 463, 464, 465, 467, 949, 468,
	0, 897, 469, 470, 471, 520, 929, 977, 2892, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 846, 0, 0, 0, 0, 0, 844, 0,
	0, 0, 0, 0, 0, 842, 843, 902, 859, 860,
	861, 857, 858, 871, 872, 0, 0, 0, 870, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 951, 876, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 917, 896, 928,
	886, 927, 926, 0, 233, 888, 887, 236, 237, 238,
	878, 950, 239, 987, 988, 486, 0, 240, 957, 0,
	940, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	960, 255, 256, 943, 941, 942, 947, 945, 944, 946,
	257, 258, 259, 260, 931, 262, 924, 923, 848, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 922, 269,
	0, 270, 0, 271, 272, 0, 273, 854, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 978, 979, 867,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 921,
	919, 920, 0, 289, 0, 290, 0, 0, 961, 291,
	292, 0, 293, 985, 0, 877, 294, 0, 295, 296,
	297, 298, 952, 953, 956, 350, 963, 299, 300, 0,
	301, 302, 898, 0, 0, 1999, 303, 305, 312, 0,
	962, 306, 910, 901, 912, 914, 915, 916, 911, 0,
	903, 0, 313, 964, 954, 965, 314, 315, 316, 966,
	936, 937, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 986, 967, 327, 328, 968, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 890, 341, 969, 344,
	345, 347, 970, 346, 845, 218, 971, 348, 868, 955,
	349, 925, 351, 352, 0, 899, 354, 900, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 972, 362,
	973, 980, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 981, 373, 509, 374, 1998, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 918, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 974, 399,
	400, 401, 402, 855, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 891, 892, 894,
	895, 416, 422, 423, 424, 948, 425, 405, 406, 426,
	427, 975, 428, 429, 913, 893, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 959, 437, 438, 439, 982,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 889, 0, 451, 932, 933, 934, 935, 0, 458,
	0, 452, 453, 983, 454, 984, 866, 455, 456, 457,
	0, 459, 460, 0, 849, 461, 462, 463, 464, 465,
	467, 949, 468, 0, 897, 469, 470, 471, 520, 929,
	977, 0, 473, 472, 523, 0, 0, 0, 0, 474,
	475, 524, 476, 477, 478, 846, 0, 0, 0, 0,
	0, 844, 0, 0, 0, 0, 0, 0, 842, 843,
	902, 859, 860, 861, 857, 858, 871, 872, 0, 0,
	0, 870, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 951,
	876, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	917, 896, 928, 886, 927, 926, 0, 233, 888, 887,
	236, 237, 238, 878, 950, 239, 987, 988, 486, 0,
	240, 957, 0, 940, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 960, 255, 256, 943, 941, 942, 947,
	945, 944, 946, 257, 258, 259, 260, 931, 262, 924,
	923, 848, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 922, 269, 0, 270, 0, 271, 272, 0, 273,
	854, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	978, 979, 867, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 921, 919, 920, 0, 289, 0, 290, 0,
	0, 961, 291, 292, 0, 293, 985, 0, 877, 294,
	0, 295, 296, 297, 298, 952, 953, 956, 350, 963,
	299, 300, 0, 301, 302, 898, 0, 0, 217, 303,
	305, 312, 0, 962, 306, 910, 901, 912, 914, 915,
	916, 911, 0, 903, 0, 313, 964, 954, 965, 314,
	315, 316, 966, 936, 937, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 986, 967, 327,
	328, 968, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 890,
	341, 969, 344, 345, 347, 970, 346, 845, 218, 971,
	348, 868, 955, 349, 925, 351, 352, 0, 899, 354,
	900, 850, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 972, 362, 973, 980, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 981, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 918, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 974, 399, 400, 401, 402, 855, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	891, 892, 894, 895, 416, 422, 423, 424, 948, 425,
	405, 406, 426, 427, 975, 428, 429, 913, 893, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 959, 437,
	438, 439, 982, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 889, 0, 451, 932, 933, 934,
	935, 0, 458, 0, 452, 453, 983, 454, 984, 866,
	455, 456, 457, 0, 459, 460, 0, 849, 461, 462,
	463, 464, 465, 467, 949, 468, 0, 897, 469, 470,
	471, 520, 929, 977, 0, 473, 472, 523, 0, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 846, 0,
	0, 0, 0, 0, 844, 0, 0, 0, 0, 0,
	0, 842, 843, 902, 859, 860, 861, 857, 858, 871,
	872, 0, 0, 0, 870, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 951, 876, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 917, 896, 928, 886, 927, 926, 0,
	233, 888, 887, 236, 237, 238, 878, 950, 239, 987,
	988, 486, 0, 240, 957, 0, 940, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 960, 255, 256, 943,
	941, 942, 947, 945, 944, 946, 257, 258, 259, 260,
	931, 262, 924, 923, 848, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 922, 269, 0, 270, 0, 271,
	272, 0, 273, 854, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 978, 979, 867, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 921, 919, 920, 0, 289,
	0, 290, 0, 0, 961, 291, 292, 0, 293, 985,
	0, 877, 294, 0, 295, 296, 297, 298, 952, 953,
	956, 350, 963, 299, 300, 0, 301, 302, 898, 0,
	0, 217, 303, 305, 312, 0, 962, 306, 910, 901,
	912, 914, 915, 916, 911, 0, 903, 0, 313, 964,
	954, 965, 314, 315, 316, 966, 936, 937, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	986, 967, 327, 328, 968, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 890, 341, 969, 344, 345, 347, 970, 346,
	845, 218, 971, 348, 868, 955, 349, 925, 351, 352,
	0, 899, 354, 900, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 972, 362, 973, 980, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	981, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 918, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 974, 399, 400, 401, 402, 855,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 891, 892, 894, 895, 416, 422, 423,
	424, 948, 425, 405, 406, 426, 427, 975, 428, 429,
	913, 893, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 959, 437, 438, 439, 982, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 889, 0, 451,
	932, 933, 934, 935, 0, 458, 0, 452, 453, 983,
	454, 984, 866, 455, 456, 457, 0, 459, 460, 0,
	849, 461, 462, 463, 464, 465, 467, 949, 468, 0,
	897, 469, 470, 471, 520, 929, 977, 0, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 846, 0, 0, 0, 0, 0, 844, 0, 0,
	0, 0, 0, 0, 842, 843, 1601, 0, 0, 0,
	0, 0, 0, 872, 0, 0, 0, 870, 902, 859,
	860, 861, 857, 858, 871, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 951, 876, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 917, 896,
	928, 886, 927, 926, 0, 233, 888, 887, 236, 237,
	238, 878, 950, 239, 987, 988, 486, 0, 240, 957,
	0, 940, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 960, 255, 256, 943, 941, 942, 947, 945, 944,
	946, 257, 258, 259, 260, 931, 262, 924, 923, 848,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 922,
	269, 0, 270, 0, 271, 272, 0, 273, 854, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 978, 979,
	867, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	921, 919, 920, 0, 289, 0, 290, 0, 2177, 961,
	291, 292, 0, 293, 985, 0, 877, 294, 0, 295,
	296, 297, 298, 952, 953, 956, 350, 963, 299, 300,
	0, 301, 302, 898, 0, 0, 217, 303, 305, 312,
	0, 962, 306, 910, 901, 912, 914, 915, 916, 911,
	0, 903, 0, 313, 964, 954, 965, 314, 315, 316,
	966, 936, 937, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 986, 967, 327, 328, 968,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 890, 341, 969,
	344, 345, 347, 970, 346, 845, 218, 971, 348, 868,
	955, 349, 925, 351, 352, 0, 899, 354, 900, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 972,
	362, 973, 980, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 981, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 918,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 974,
	399, 400, 401, 402, 855, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 891, 892,
	894, 895, 416, 422, 423, 424, 948, 425, 405, 406,
	426, 427, 975, 428, 429, 913, 893, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 959, 437, 438, 439,
	982, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 889, 0, 451, 932, 933, 934, 935, 0,
	458, 0, 452, 453, 983, 454, 984, 866, 455, 456,
	457, 0, 459, 460, 0, 849, 461, 462, 463, 464,
	465, 467, 949, 468, 0, 897, 469, 470, 471, 520,
	929, 977, 0, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 846, 0, 0, 0,
	0, 0, 844, 0, 0, 0, 0, 0, 0, 842,
	843, 902, 859, 860, 861, 857, 858, 871, 872, 0,
	0, 0, 870, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	951, 876, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 917, 896, 928, 886, 927, 926, 0, 233, 888,
	887, 236, 237, 238, 878, 950, 239, 987, 988, 486,
	0, 240, 957, 0, 940, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 256, 943, 941, 942,
	947, 945, 944, 946, 257, 258, 259, 260, 931, 262,
	924, 923, 848, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 922, 269, 0, 270, 0, 271, 272, 0,
	273, 854, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 978, 979, 867, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 921, 919, 920, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 985, 0, 877,
	294, 0, 295, 296, 297, 298, 952, 953, 956, 350,
	963, 299, 300, 0, 301, 302, 898, 0, 0, 217,
	303, 305, 312, 0, 962, 306, 910, 901, 912, 914,
	915, 916, 911, 0, 903, 0, 313, 964, 954, 965,
	314, 315, 316, 966, 936, 937, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 986, 967,
	327, 328, 968, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	890, 341, 969, 344, 345, 347, 970, 346, 845, 218,
	971, 348, 868, 955, 349, 925, 351, 352, 0, 899,
	354, 900, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 980, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 981, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 918, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 855, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 891, 892, 894, 895, 416, 422, 423, 424, 948,
	425, 405, 406, 426, 427, 975, 428, 429, 913, 893,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 959,
	437, 438, 439, 982, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 889, 0, 451, 932, 933,
	934, 935, 0, 458, 0, 452, 453, 983, 454, 984,
	866, 455, 456, 457, 0, 459, 460, 0, 849, 461,
	462, 463, 464, 465, 467, 949, 468, 0, 897, 469,
	470, 471, 520, 929, 977, 0, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 846,
	0, 0, 0, 0, 0, 844, 0, 0, 0, 0,
	0, 0, 842, 843, 0, 0, 0, 0, 0, 0,
	0, 872, 1539, 0, 2182, 870, 902, 859, 860, 861,
	857, 858, 871, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 951, 876, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 917, 896, 928, 886,
	927, 926, 0, 233, 888, 887, 236, 237, 238, 878,
	950, 239, 987, 988, 486, 0, 240, 957, 0, 940,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 943, 941, 942, 947, 945, 944, 946, 257,
	258, 259, 260, 931, 262, 924, 923, 848, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 922, 269, 0,
	270, 0, 271, 272, 0, 273, 854, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 978, 979, 867, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 921, 919,
	920, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 985, 0, 877, 294, 0, 295, 296, 297,
	298, 952, 953, 956, 350, 963, 299, 300, 0, 301,
	302, 898, 0, 0, 217, 303, 305, 312, 0, 962,
	306, 910, 901, 912, 914, 915, 916, 911, 0, 903,
	0, 313, 964, 954, 965, 314, 315, 316, 966, 936,
	937, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 986, 967, 327, 328, 968, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 890, 341, 969, 344, 345,
	347, 970, 346, 845, 218, 971, 348, 868, 955, 349,
	925, 351, 352, 0, 899, 354, 900, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	980, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 981, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 918, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 855, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 891, 892, 894, 895,
	416, 422, 423, 424, 948, 425, 405, 406, 426, 427,
	975, 428, 429, 913, 893, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 959, 437, 438, 439, 982, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	889, 0, 451, 932, 933, 934, 935, 0, 458, 0,
	452, 453, 983, 454, 984, 866, 455, 456, 457, 0,
	459, 460, 0, 849, 461, 462, 463, 464, 465, 467,
	949, 468, 0, 897, 469, 470, 471, 520, 929, 977,
	0, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 846, 0, 0, 0, 0, 0,
	844, 0, 0, 0, 0, 0, 0, 842, 843, 0,
	0, 0, 0, 0, 0, 0, 872, 0, 0, 2180,
	870, 902, 859, 860, 861, 857, 858, 871, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	951, 876, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 917, 896, 928, 886, 927, 926, 0, 233, 888,
	887, 236, 237, 238, 878, 950, 239, 987, 988, 486,
	0, 240, 957, 0, 940, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 256, 943, 941, 942,
	947, 945, 944, 946, 257, 258, 259, 260, 931, 262,
	924, 923, 848, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 922, 269, 0, 270, 0, 271, 272, 0,
	273, 854, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 978, 979, 867, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 921, 919, 920, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 985, 0, 877,
	294, 0, 295, 296, 297, 298, 952, 953, 956, 350,
	963, 299, 300, 0, 301, 302, 898, 0, 0, 217,
	303, 305, 312, 0, 962, 306, 910, 901, 912, 914,
	915, 916, 911, 0, 903, 0, 313, 964, 954, 965,
	314, 315, 316, 966, 936, 937, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 986, 967,
	327, 328, 968, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	890, 341, 969, 344, 345, 347, 970, 346, 845, 218,
	971, 348, 868, 955, 349, 925, 351, 352, 0, 899,
	354, 900, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 980, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 981, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 918, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 855, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 891, 892, 894, 895, 416, 422, 423, 424, 948,
	425, 405, 406, 426, 427, 975, 428, 429, 913, 893,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 959,
	437, 438, 439, 982, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 889, 0, 451, 932, 933,
	934, 935, 0, 458, 0, 452, 453, 983, 454, 984,
	866, 455, 456, 457, 0, 459, 460, 0, 849, 461,
	462, 463, 464, 465, 467, 949, 468, 0, 897, 469,
	470, 471, 520, 929, 977, 0, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 846,
	0, 0, 0, 0, 0, 844, 0, 0, 0, 0,
	0, 0, 842, 843, 0, 0, 0, 0, 0, 0,
	0, 872, 0, 0, 2168, 870, 902, 859, 860, 861,
	857, 858, 871, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 951, 876, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 917, 896, 928, 886,
	927, 926, 0, 233, 888, 887, 236, 237, 238, 878,
	950, 239, 987, 988, 486, 0, 240, 957, 0, 940,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 943, 941, 942, 947, 945, 944, 946, 257,
	258, 259, 260, 931, 262, 924, 923, 848, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 922, 269, 0,
	270, 0, 271, 272, 0, 273, 854, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 978, 979, 867, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 921, 919,
	920, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 985, 0, 877, 294, 0, 295, 296, 297,
	298, 952, 953, 956, 350, 963, 299, 300, 0, 301,
	302, 898, 0, 0, 217, 303, 305, 312, 0, 962,
	306, 910, 901, 912, 914, 915, 916, 911, 0, 903,
	0, 313, 964, 954, 965, 314, 315, 316, 966, 936,
	937, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 986, 967, 327, 328, 968, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 890, 341, 969, 344, 345,
	347, 970, 346, 845, 218, 971, 348, 868, 955, 349,
	925, 351, 352, 0, 899, 354, 900, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	980, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 981, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 918, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 855, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 891, 892, 894, 895,
	416, 422, 423, 424, 948, 425, 405, 406, 426, 427,
	975, 428, 429, 913, 893, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 959, 437, 438, 439, 982, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	889, 0, 451, 932, 933, 934, 935, 0, 458, 0,
	452, 453, 983, 454, 984, 866, 455, 456, 457, 0,
	459, 460, 0, 849, 461, 462, 463, 464, 465, 467,
	949, 468, 0, 897, 469, 470, 471, 520, 929, 977,
	0, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 846, 0, 0, 0, 0, 0,
	844, 0, 0, 0, 0, 0, 0, 842, 843, 0,
	0, 0, 0, 0, 0, 0, 872, 0, 0, 2157,
	870, 902, 859, 860, 861, 857, 858, 871, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	951, 876, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 917, 896, 928, 886, 927, 926, 0, 233, 888,
	887, 236, 237, 238, 878, 950, 239, 987, 988, 486,
	0, 240, 957, 0, 940, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 256, 943, 941, 942,
	947, 945, 944, 946, 257, 258, 259, 260, 931, 262,
	924, 923, 848, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 922, 269, 0, 270, 0, 271, 272, 0,
	273, 854, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 978, 979, 867, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 921, 919, 920, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 985, 0, 877,
	294, 0, 295, 296, 297, 298, 952, 953, 956, 350,
	963, 299, 300, 0, 301, 302, 898, 0, 0, 217,
	303, 305, 312, 0, 962, 306, 910, 901, 912, 914,
	915, 916, 911, 0, 903, 0, 313, 964, 954, 965,
	314, 315, 316, 966, 936, 937, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 986, 967,
	327, 328, 968, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	890, 341, 969, 344, 345, 347, 970, 346, 845, 218,
	971, 348, 868, 955, 349, 925, 351, 352, 0, 899,
	354, 900, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 980, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 981, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 918, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 855, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 891, 892, 894, 895, 416, 422, 423, 424, 948,
	425, 405, 406, 426, 427, 975, 428, 429, 913, 893,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 959,
	437, 438, 439, 982, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 889, 0, 451, 932, 933,
	934, 935, 0, 458, 0, 452, 453, 983, 454, 984,
	866, 455, 456, 457, 0, 459, 460, 0, 849, 461,
	462, 463, 464, 465, 467, 949, 468, 0, 897, 469,
	470, 471, 520, 929, 977, 0, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 846,
	0, 0, 0, 0, 0, 844, 0, 0, 0, 0,
	0, 0, 842, 843, 0, 0, 0, 0, 0, 0,
	0, 872, 0, 0, 2155, 870, 2146, 2153, 860, 861,
	857, 858, 871, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 951, 876, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 917, 896, 928, 886,
	927, 926, 0, 233, 888, 887, 236, 237, 238, 878,
	950, 239, 987, 988, 486, 0, 240, 957, 0, 940,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 943, 941, 942, 947, 945, 944, 946, 257,
	258, 259, 260, 931, 2149, 924, 923, 848, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 922, 269, 0,
	270, 0, 271, 272, 0, 273, 854, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 978, 979, 867, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 921, 919,
	920, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 985, 0, 877, 294, 0, 295, 296, 297,
	2150, 952, 953, 956, 350, 963, 299, 300, 0, 301,
	302, 898, 0, 0, 217, 303, 305, 312, 0, 962,
	306, 910, 901, 912, 914, 915, 916, 911, 0, 903,
	0, 313, 964, 954, 965, 314, 315, 316, 966, 936,
	937, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 986, 967, 327, 328, 968, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 2151, 2148, 342, 890, 341, 969, 344, 345,
	347, 970, 346, 845, 218, 971, 348, 868, 955, 349,
	925, 351, 352, 0, 899, 354, 900, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	980, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 981, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 918, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 855, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 2152, 0, 420, 421, 891, 892, 894, 895,
	416, 422, 423, 424, 948, 425, 405, 406, 426, 427,
	975, 428, 429, 913, 893, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 959, 437, 438, 439, 982, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	889, 0, 451, 932, 933, 934, 935, 0, 458, 0,
	452, 453, 983, 454, 984, 866, 455, 456, 457, 0,
	459, 460, 0, 849, 461, 462, 463, 464, 465, 467,
	949, 468, 0, 897, 469, 470, 471, 520, 929, 977,
	0, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 2147, 478, 846, 0, 0, 0, 0, 0,
	844, 0, 0, 0, 0, 0, 0, 842, 843, 0,
	0, 0, 0, 0, 0, 0, 872, 0, 0, 2143,
	870, 2146, 2153, 860, 861, 857, 858, 871, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	951, 876, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 917, 896, 928, 886, 927, 926, 0, 233, 888,
	887, 236, 237, 238, 878, 950, 239, 987, 988, 486,
	0, 240, 957, 0, 940, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 256, 943, 941, 942,
	947, 945, 944, 946, 257, 258, 259, 260, 931, 2149,
	924, 923, 848, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 922, 269, 0, 270, 0, 271, 272, 0,
	273, 854, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 978, 979, 867, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 921, 919, 920, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 985, 0, 877,
	294, 0, 295, 296, 297, 2150, 952, 953, 956, 350,
	963, 299, 300, 0, 301, 302, 898, 0, 0, 217,
	303, 305, 312, 0, 962, 306, 910, 901, 912, 914,
	915, 916, 911, 0, 903, 0, 313, 964, 954, 965,
	314, 315, 316, 966, 936, 937, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 986, 967,
	327, 328, 968, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 2151, 2148, 342,
	890, 341, 969, 344, 345, 347, 970, 346, 845, 218,
	971, 348, 868, 955, 349, 925, 351, 352, 0, 899,
	354, 900, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 980, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 981, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 918, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 855, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 2152, 0, 420,
	421, 891, 892, 894, 895, 416, 422, 423, 424, 948,
	425, 405, 406, 426, 427, 975, 428, 429, 913, 893,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 959,
	437, 438, 439, 982, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 889, 0, 451, 932, 933,
	934, 935, 0, 458, 0, 452, 453, 983, 454, 984,
	866, 455, 456, 457, 0, 459, 460, 0, 849, 461,
	462, 463, 464, 465, 467, 949, 468, 0, 897, 469,
	470, 471, 520, 929, 977, 0, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 2147, 478, 846,
	0, 0, 0, 0, 0, 844, 0, 0, 0, 0,
	0, 0, 842, 843, 902, 859, 860, 861, 857, 858,
	871, 872, 0, 0, 0, 870, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 951, 876, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 917, 896, 928, 886, 927, 926,
	0, 233, 888, 887, 236, 237, 238, 878, 950, 239,
	987, 988, 486, 0, 240, 957, 0, 940, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 960, 255, 256,
	943, 941, 942, 947, 945, 944, 946, 257, 258, 259,
	260, 931, 262, 924, 923, 848, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 922, 269, 0, 270, 0,
	271, 272, 0, 273, 854, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 978, 979, 867, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 921, 919, 920, 0,
	289, 0, 290, 0, 0, 961, 291, 292, 0, 293,
	985, 0, 877, 294, 0, 295, 296, 297, 298, 952,
	953, 956, 350, 963, 299, 300, 0, 301, 302, 898,
	0, 0, 217, 303, 305, 312, 0, 962, 306, 910,
	901, 912, 914, 915, 916, 911, 0, 903, 0, 313,
	964, 954, 965, 314, 315, 316, 966, 936, 937, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 986, 967, 327, 328, 968, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 890, 341, 969, 344, 345, 347, 970,
	346, 845, 218, 971, 348, 868, 955, 349, 925, 351,
	352, 0, 899, 354, 900, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 972, 362, 973, 980, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 981, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 918, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 974, 399, 400, 401, 402,
	855, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 891, 892, 894, 895, 416, 422,
	423, 424, 948, 425, 405, 406, 426, 427, 975, 428,
	429, 913, 893, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 959, 437, 438, 439, 982, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 889, 0,
	451, 932, 933, 934, 935, 0, 458, 0, 452, 453,
	983, 454, 984, 866, 455, 456, 457, 0, 459, 460,
	0, 849, 461, 462, 463, 464, 465, 467, 949, 468,
	0, 897, 469, 470, 471, 520, 929, 977, 0, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 846, 0, 0, 0, 0, 0, 844, 0,
	0, 0, 0, 0, 0, 842, 843, 0, 0, 0,
	0, 0, 1547, 0, 872, 0, 0, 0, 870, 902,
	859, 860, 861, 857, 858, 871, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 1985, 224, 0, 0, 0, 0, 0, 951, 876,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 917,
	896, 928, 886, 927, 926, 0, 233, 888, 887, 236,
	237, 238, 878, 950, 239, 987, 988, 486, 0, 240,
	957, 0, 940, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 960, 255, 256, 943, 941, 942, 947, 945,
	944, 946, 257, 258, 259, 260, 931, 262, 924, 923,
	848, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	922, 269, 0, 270, 0, 271, 272, 0, 273, 854,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 978,
	979, 867, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 921, 919, 920, 0, 289, 0, 290, 0, 0,
	961, 291, 292, 0, 293, 985, 0, 877, 294, 0,
	295, 296, 297, 298, 952, 953, 956, 350, 963, 299,
	300, 0, 301, 302, 898, 0, 0, 217, 303, 305,
	312, 0, 962, 306, 910, 901, 912, 914, 915, 916,
	911, 0, 903, 0, 313, 964, 954, 965, 314, 315,
	316, 966, 936, 937, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 986, 967, 327, 328,
	968, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 890, 341,
	969, 344, 345, 347, 970, 346, 845, 218, 971, 348,
	868, 955, 349, 925, 351, 352, 0, 899, 354, 900,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	972, 362, 973, 980, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 981, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	918, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	974, 399, 400, 401, 402, 855, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 891,
	892, 894, 895, 416, 422, 423, 424, 948, 425, 405,
	406, 426, 427, 975, 428, 429, 913, 893, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 959, 437, 438,
	439, 982, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 889, 0, 451, 932, 933, 934, 935,
	0, 458, 0, 452, 453, 983, 454, 984, 866, 455,
	456, 457, 0, 459, 460, 0, 849, 461, 462, 463,
	464, 465, 467, 949, 468, 0, 897, 469, 470, 471,
	520, 929, 977, 0, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 846, 0, 0,
	0, 0, 0, 844, 0, 0, 0, 0, 0, 0,
	842, 843, 0, 0, 0, 0, 0, 0, 0, 872,
	0, 0, 1219, 870, 902, 859, 860, 861, 857, 858,
	871, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 951, 876, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 917, 896, 928, 886, 927, 926,
	0, 233, 888, 887, 236, 237, 238, 878, 950, 239,
	987, 988, 486, 0, 240, 957, 0, 940, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 960, 255, 256,
	943, 941, 942, 947, 945, 944, 946, 257, 258, 259,
	260, 931, 262, 924, 923, 848, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 922, 269, 0, 270, 0,
	271, 272, 0, 273, 854, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 978, 979, 867, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 921, 919, 920, 0,
	289, 0, 290, 0, 0, 961, 291, 292, 0, 293,
	985, 0, 877, 294, 0, 295, 296, 297, 298, 1218,
	953, 956, 350, 963, 299, 300, 0, 301, 302, 898,
	0, 0, 217, 303, 305, 312, 0, 962, 306, 910,
	901, 912, 914, 915, 916, 911, 0, 903, 0, 313,
	964, 954, 965, 314, 315, 316, 966, 936, 937, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 986, 967, 327, 328, 968, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 890, 341, 969, 344, 345, 347, 970,
	346, 845, 218, 971, 348, 868, 955, 349, 925, 351,
	352, 0, 899, 354, 900, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 972, 362, 973, 980, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 981, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 918, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 974, 399, 400, 401, 402,
	855, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 891, 892, 894, 895, 416, 422,
	423, 424, 948, 425, 405, 406, 426, 427, 975, 428,
	429, 913, 893, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 959, 437, 438, 439, 982, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 889, 0,
	451, 932, 933, 934, 935, 0, 458, 0, 452, 453,
	983, 454, 984, 866, 455, 456, 457, 0, 459, 460,
	0, 849, 461, 462, 463, 464, 465, 467, 949, 468,
	0, 897, 469, 470, 471, 520, 929, 977, 0, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 846, 0, 0, 0, 0, 0, 844, 0,
	0, 0, 0, 0, 0, 842, 843, 0, 0, 0,
	0, 0, 0, 0, 872, 0, 0, 1213, 870, 902,
	859, 860, 861, 857, 858, 871, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 951, 876,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 917,
	896, 928, 886, 927, 926, 0, 233, 888, 887, 236,
	237, 238, 878, 950, 239, 987, 988, 486, 0, 240,
	957, 0, 940, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 960, 255, 256, 943, 941, 942, 947, 945,
	944, 946, 257, 258, 259, 260, 931, 262, 924, 923,
	848, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	922, 269, 0, 270, 0, 271, 272, 0, 273, 854,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 978,
	979, 867, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 921, 919, 920, 0, 289, 0, 290, 0, 0,
	961, 291, 292, 0, 293, 985, 0, 877, 294, 0,
	295, 296, 297, 298, 1212, 953, 956, 350, 963, 299,
	300, 0, 301, 302, 898, 0, 0, 217, 303, 305,
	312, 0, 962, 306, 910, 901, 912, 914, 915, 916,
	911, 0, 903, 0, 313, 964, 954, 965, 314, 315,
	316, 966, 936, 937, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 986, 967, 327, 328,
	968, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 890, 341,
	969, 344, 345, 347, 970, 346, 845, 218, 971, 348,
	868, 955, 349, 925, 351, 352, 0, 899, 354, 900,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	972, 362, 973, 980, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 981, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	918, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	974, 399, 400, 401, 402, 855, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 891,
	892, 894, 895, 416, 422, 423, 424, 948, 425, 405,
	406, 426, 427, 975, 428, 429, 913, 893, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 959, 437, 438,
	439, 982, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 889, 0, 451, 932, 933, 934, 935,
	0, 458, 0, 452, 453, 983, 454, 984, 866, 455,
	456, 457, 0, 459, 460, 0, 849, 461, 462, 463,
	464, 465, 467, 949, 468, 0, 897, 469, 470, 471,
	520, 929, 977, 0, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 846, 0, 0,
	0, 0, 0, 844, 0, 0, 0, 0, 0, 0,
	842, 843, 0, 0, 0, 0, 0, 0, 0, 872,
	0, 0, 1208, 870, 902, 859, 860, 861, 857, 858,
	871, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 951, 876, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 917, 896, 928, 886, 927, 926,
	0, 233, 888, 887, 236, 237, 238, 878, 950, 239,
	987, 988, 486, 0, 240, 957, 0, 940, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 960, 255, 256,
	943, 941, 942, 947, 945, 944, 946, 257, 258, 259,
	260, 931, 262, 924, 923, 848, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 922, 269, 0, 270, 0,
	271, 272, 0, 273, 854, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 978, 979, 867, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 921, 919, 920, 0,
	289, 0, 290, 0, 0, 961, 291, 292, 0, 293,
	985, 0, 877, 294, 0, 295, 296, 297, 298, 952,
	953, 956, 350, 963, 299, 300, 0, 301, 302, 898,
	0, 0, 217, 303, 305, 312, 0, 962, 306, 910,
	901, 912, 914, 915, 916, 911, 0, 903, 0, 313,
	964, 954, 965, 314, 315, 316, 966, 936, 937, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 986, 967, 327, 328, 968, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 890, 341, 969, 344, 345, 347, 970,
	346, 845, 218, 971, 348, 868, 955, 349, 925, 351,
	352, 0, 899, 354, 900, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 972, 362, 973, 980, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 981, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 918, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 974, 399, 400, 401, 402,
	855, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 891, 892, 894, 895, 416, 422,
	423, 424, 948, 425, 405, 406, 426, 427, 975, 428,
	429, 913, 893, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 959, 437, 438, 439, 982, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 889, 0,
	451, 932, 933, 934, 935, 0, 458, 0, 452, 453,
	983, 454, 984, 866, 455, 456, 457, 0, 459, 460,
	0, 849, 461, 462, 463, 464, 465, 467, 949, 468,
	0, 897, 469, 470, 471, 520, 929, 977, 0, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 846, 0, 0, 0, 0, 0, 844, 0,
	0, 0, 0, 0, 0, 842, 843, 902, 859, 860,
	861, 857, 858, 871, 872, 0, 0, 0, 870, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 951, 876, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 917, 896, 928,
	886, 927, 926, 0, 233, 888, 887, 236, 237, 238,
	878, 950, 239, 987, 988, 486, 0, 240, 957, 0,
	940, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	960, 255, 256, 943, 941, 942, 947, 945, 944, 946,
	257, 258, 259, 260, 931, 262, 924, 923, 848, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 922, 269,
	0, 270, 0, 271, 272, 0, 273, 854, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 978, 979, 867,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 921,
	919, 920, 0, 289, 0, 290, 0, 0, 961, 291,
	292, 0, 293, 985, 0, 877, 294, 0, 295, 296,
	297, 298, 952, 953, 956, 350, 963, 299, 300, 0,
	301, 302, 898, 0, 0, 217, 303, 305, 312, 0,
	962, 306, 910, 901, 912, 914, 915, 916, 911, 0,
	903, 0, 313, 964, 954, 965, 314, 315, 316, 966,
	936, 937, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 986, 967, 327, 328, 968, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 890, 341, 969, 344,
	345, 347, 970, 346, 845, 218, 971, 348, 868, 955,
	349, 925, 351, 352, 0, 899, 354, 900, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 972, 362,
	973, 980, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 981, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 918, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 974, 399,
	400, 401, 402, 855, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 891, 892, 894,
	895, 416, 422, 423, 424, 948, 425, 405, 406, 426,
	427, 975, 428, 429, 913, 893, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 959, 437, 438, 439, 982,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 889, 0, 451, 932, 933, 934, 935, 0, 458,
	0, 452, 453, 983, 454, 984, 866, 455, 456, 457,
	0, 459, 460, 0, 849, 461, 462, 463, 464, 465,
	467, 949, 468, 0, 897, 469, 470, 471, 520, 929,
	977, 0, 473, 472, 523, 0, 0, 0, 0, 474,
	475, 524, 476, 477, 478, 846, 0, 0, 0, 0,
	0, 844, 0, 0, 0, 0, 0, 0, 842, 843,
	902, 859, 860, 861, 857, 858, 871, 872, 0, 0,
	0, 870, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 951,
	876, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	917, 896, 928, 886, 927, 926, 0, 233, 888, 887,
	236, 237, 238, 878, 950, 239, 987, 988, 486, 0,
	240, 957, 0, 940, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 960, 255, 3545, 943, 941, 942, 947,
	945, 944, 946, 257, 258, 259, 260, 931, 262, 924,
	923, 848, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 922, 269, 0, 270, 0, 271, 272, 0, 273,
	854, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	978, 979, 867, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 921, 919, 920, 0, 289, 0, 290, 0,
	0, 961, 291, 292, 0, 293, 985, 0, 877, 294,
	0, 295, 296, 297, 298, 952, 953, 956, 350, 963,
	299, 300, 0, 301, 302, 898, 0, 0, 217, 303,
	305, 312, 0, 962, 306, 910, 901, 912, 914, 915,
	916, 911, 0, 903, 0, 313, 964, 954, 965, 314,
	315, 316, 966, 936, 937, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 986, 967, 327,
	328, 968, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 890,
	341, 969, 344, 345, 347, 970, 346, 845, 218, 971,
	348, 868, 955, 349, 925, 351, 352, 0, 899, 354,
	900, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 972, 362, 973, 980, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 981, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 918, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 974, 399, 400, 401, 402, 855, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	891, 892, 894, 895, 416, 422, 423, 424, 948, 425,
	405, 406, 426, 427, 975, 428, 429, 913, 893, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 959, 437,
	438, 439, 982, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 889, 0, 451, 932, 933, 934,
	935, 0, 458, 0, 452, 453, 983, 454, 984, 866,
	455, 456, 457, 0, 3544, 460, 0, 849, 461, 462,
	463, 464, 465, 467, 949, 468, 0, 897, 469, 470,
	471, 520, 929, 977, 0, 473, 472, 523, 0, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 846, 0,
	0, 0, 0, 0, 844, 0, 0, 0, 0, 0,
	0, 842, 843, 902, 859, 860, 861, 857, 858, 871,
	872, 0, 0, 0, 870, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 951, 876, 0, 0, 0, 225, 227, 226,
	228, 229, 3543, 917, 896, 928, 886, 927, 926, 0,
	233, 888, 887, 236, 237, 238, 878, 950, 239, 987,
	988, 486, 0, 240, 957, 0, 940, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 960, 255, 3545, 943,
	941, 942, 947, 945, 944, 946, 257, 258, 259, 260,
	931, 262, 924, 923, 848, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 922, 269, 0, 270, 0, 271,
	272, 0, 273, 854, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 978, 979, 867, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 921, 919, 920, 0, 289,
	0, 290, 0, 0, 961, 291, 292, 0, 293, 985,
	0, 877, 294, 0, 295, 296, 297, 298, 952, 953,
	956, 350, 963, 299, 300, 0, 301, 302, 898, 0,
	0, 217, 303, 305, 312, 0, 962, 306, 910, 901,
	912, 914, 915, 916, 911, 0, 903, 0, 313, 964,
	954, 965, 314, 315, 316, 966, 936, 937, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	986, 967, 327, 328, 968, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 890, 341, 969, 344, 345, 347, 970, 346,
	845, 218, 971, 348, 868, 955, 349, 925, 351, 352,
	0, 899, 354, 900, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 972, 362, 973, 980, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	981, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 918, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 974, 399, 400, 401, 402, 855,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 891, 892, 894, 895, 416, 422, 423,
	424, 948, 425, 405, 406, 426, 427, 975, 428, 429,
	913, 893, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 959, 437, 438, 439, 982, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 889, 0, 451,
	932, 933, 934, 935, 0, 458, 0, 452, 453, 983,
	454, 984, 866, 455, 456, 457, 0, 3544, 460, 0,
	849, 461, 462, 463, 464, 465, 467, 949, 468, 0,
	897, 469, 470, 471, 520, 929, 977, 0, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 846, 0, 0, 0, 0, 0, 844, 0, 0,
	0, 0, 0, 0, 842, 843, 902, 859, 860, 861,
	857, 858, 871, 872, 0, 0, 0, 870, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 951, 876, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 917, 896, 928, 886,
	927, 926, 0, 233, 888, 887, 236, 237, 238, 878,
	950, 239, 987, 988, 486, 0, 240, 957, 0, 940,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 943, 941, 942, 947, 945, 944, 946, 257,
	258, 259, 260, 931, 262, 924, 923, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 922, 269, 0,
	270, 0, 271, 272, 0, 273, 854, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 978, 979, 867, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 921, 919,
	920, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 985, 0, 877, 294, 0, 295, 296, 297,
	298, 952, 953, 956, 350, 963, 299, 300, 0, 301,
	302, 898, 0, 0, 217, 303, 305, 312, 0, 962,
	306, 910, 901, 912, 914, 915, 916, 911, 0, 903,
	0, 313, 964, 954, 965, 314, 315, 316, 966, 936,
	937, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 986, 967, 327, 328, 968, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 890, 341, 969, 344, 345,
	347, 970, 346, 0, 218, 971, 348, 868, 955, 349,
	925, 351, 352, 0, 899, 354, 900, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	980, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 981, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 918, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 855, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 891, 892, 894, 895,
	416, 422, 423, 424, 948, 425, 405, 406, 426, 427,
	975, 428, 429, 913, 893, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 959, 437, 438, 439, 982, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	889, 0, 451, 932, 933, 934, 935, 0, 458, 0,
	452, 453, 983, 454, 984, 866, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	949, 468, 0, 897, 469, 470, 471, 520, 929, 977,
	0, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	2165, 0, 0, 0, 0, 0, 0, 2163, 2164, 902,
	859, 860, 861, 857, 858, 871, 872, 0, 0, 0,
	870, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 951, 876,
	0, 0, 0, 225, 227, 226, 228, 229, 0, 917,
	896, 928, 886, 927, 926, 0, 233, 888, 887, 236,
	237, 238, 878, 950, 239, 987, 988, 486, 0, 240,
	957, 0, 940, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 960, 255, 3545, 943, 941, 942, 947, 945,
	944, 946, 257, 258, 259, 260, 931, 262, 924, 923,
	848, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	922, 269, 0, 270, 0, 271, 272, 0, 273, 854,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 978,
	979, 867, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 921, 919, 920, 0, 289, 0, 290, 0, 0,
	961, 291, 292, 0, 293, 985, 0, 877, 294, 0,
	295, 296, 297, 298, 952, 953, 956, 350, 0, 299,
	300, 0, 301, 302, 898, 0, 0, 217, 303, 305,
	312, 0, 962, 306, 910, 901, 912, 914, 915, 916,
	911, 0, 903, 0, 313, 0, 954, 0, 314, 315,
	316, 966, 936, 937, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 986, 967, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 890, 341,
	969, 344, 345, 347, 970, 346, 845, 218, 0, 348,
	868, 955, 349, 925, 351, 352, 0, 899, 354, 900,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	972, 362, 973, 980, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 981, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	918, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	974, 399, 400, 401, 402, 855, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 891,
	892, 894, 895, 416, 422, 423, 424, 948, 425, 405,
	406, 426, 427, 0, 428, 429, 913, 893, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 959, 437, 438,
	439, 982, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 889, 0, 451, 932, 933, 934, 935,
	0, 458, 0, 452, 453, 983, 454, 984, 866, 455,
	456, 457, 0, 3544, 460, 0, 849, 461, 462, 463,
	464, 465, 467, 949, 468, 0, 897, 469, 470, 471,
	520, 929, 977, 0, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 835, 0, 1024, 0, 0,
	842, 843, 0, 0, 0, 0, 0, 0, 0, 872,
	0, 0, 0, 870, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 951, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 950, 239, 484, 485, 486, 0, 240, 957, 0,
	940, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	960, 255, 256, 943, 941, 942, 947, 945, 944, 946,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 978, 979, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 961, 291,
	292, 0, 293, 985, 0, 495, 294, 0, 295, 296,
	297, 298, 952, 953, 956, 350, 963, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	962, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 964, 954, 965, 314, 315, 316, 966,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 1011,
	325, 324, 0, 326, 986, 967, 327, 328, 968, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 969, 344,
	345, 347, 970, 346, 0, 218, 971, 348, 0, 955,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 1016,
	357, 358, 359, 0, 0, 360, 361, 506, 972, 362,
	973, 980, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 981, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 974, 399,
	400, 401, 402, 511, 1018, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 182, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 948, 425, 405, 406, 426,
	427, 975, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 982,
	0, 443, 444, 442, 184, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 983, 454, 984, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 949, 468, 0, 466, 469, 470, 471, 1329, 521,
	522, 0, 473, 472, 523, 1024, 0, 0, 176, 474,
	475, 524, 476, 477, 478, 0, 177, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 951, 1008, 0, 1633, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 950,
	239, 484, 485, 486, 0, 240, 957, 0, 940, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 960, 255,
	256, 943, 941, 942, 947, 945, 944, 946, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 978, 979, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 961, 291, 292, 0,
	293, 985, 0, 495, 294, 0, 295, 296, 297, 298,
	952, 953, 956, 350, 963, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 962, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 964, 954, 965, 314, 315, 316, 966, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 1011, 325, 324,
	0, 326, 986, 967, 327, 328, 968, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 969, 344, 345, 347,
	970, 346, 0, 218, 971, 348, 0, 955, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 1016, 357, 358,
	359, 0, 0, 360, 361, 506, 972, 362, 973, 980,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 981, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 974, 399, 400, 401,
	402, 511, 1018, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 182, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 948, 425, 405, 406, 426, 427, 975,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 982, 0, 443,
	444, 442, 184, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 983, 454, 984, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 949,
	468, 0, 466, 469, 470, 471, 1329, 521, 522, 0,
	473, 472, 523, 2631, 0, 1024, 176, 474, 475, 524,
	476, 477, 478, 0, 177, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 1008, 951, 1633, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 950,
	239, 484, 485, 486, 0, 240, 957, 0, 940, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 960, 255,
	256, 943, 941, 942, 947, 945, 944, 946, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 978, 979, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 961, 291, 292, 0,
	293, 985, 0, 495, 294, 0, 295, 296, 297, 298,
	952, 953, 956, 350, 963, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 962, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 964, 954, 965, 314, 315, 316, 966, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 1011, 325, 324,
	0, 326, 986, 967, 327, 328, 968, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 969, 344, 345, 347,
	970, 346, 0, 218, 971, 348, 0, 955, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 1016, 357, 358,
	359, 0, 0, 360, 361, 506, 972, 362, 973, 980,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 981, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 974, 399, 400, 401,
	402, 511, 1018, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 948, 425, 405, 406, 426, 427, 975,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 982, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 983, 454, 984, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 949,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 1007, 0, 1024, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 1008, 951, 1013, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 950,
	239, 484, 485, 486, 0, 240, 957, 0, 940, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 960, 255,
	256, 943, 941, 942, 947, 945, 944, 946, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 978, 979, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 961, 291, 292, 0,
	293, 985, 0, 495, 294, 0, 295, 296, 297, 298,
	952, 953, 956, 350, 963, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 962, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 964, 954, 965, 314, 315, 316, 966, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 1011, 325, 324,
	0, 326, 986, 967, 327, 328, 968, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 969, 344, 345, 347,
	970, 346, 0, 218, 971, 348, 0, 955, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 1016, 357, 358,
	359, 0, 0, 360, 361, 506, 972, 362, 973, 980,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 981, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 974, 399, 400, 401,
	402, 511, 1018, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 948, 425, 405, 406, 426, 427, 975,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 982, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 983, 454, 984, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 949,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 1024, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 951, 1008, 0, 1013, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 950, 239, 484,
	485, 486, 0, 240, 957, 0, 940, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 960, 255, 256, 943,
	941, 942, 947, 945, 944, 946, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 978, 979, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 961, 291, 292, 0, 293, 985,
	0, 495, 294, 0, 295, 296, 297, 298, 952, 953,
	956, 350, 963, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 962, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 964,
	954, 965, 314, 315, 316, 966, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 1011, 325, 324, 0, 326,
	986, 967, 327, 328, 968, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 969, 344, 345, 347, 970, 346,
	0, 218, 971, 348, 0, 955, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 1016, 357, 358, 359, 0,
	0, 360, 361, 506, 972, 362, 973, 980, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	981, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 974, 399, 400, 401, 402, 511,
	1018, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 948, 425, 405, 406, 426, 427, 975, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 982, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 983,
	454, 984, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 949, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 1024, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	951, 1008, 0, 1013, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 950, 239, 484, 485, 486,
	0, 240, 957, 0, 940, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 256, 943, 941, 942,
	947, 945, 944, 946, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 978, 979, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 985, 0, 495,
	294, 0, 295, 296, 297, 298, 952, 953, 956, 350,
	963, 299, 300, 0, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 0, 962, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 964, 954, 965,
	314, 315, 316, 966, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 986, 967,
	327, 328, 968, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 969, 344, 345, 347, 970, 346, 0, 218,
	971, 348, 0, 955, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 980, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 981, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 511, 1018, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 948,
	425, 405, 406, 426, 427, 975, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 982, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 983, 454, 984,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 949, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 0, 473, 472, 523, 835,
	0, 1183, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 1528, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 1087, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	963, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 962, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 964, 502, 965,
	314, 315, 316, 966, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 967,
	327, 328, 968, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 969, 344, 345, 347, 970, 346, 0, 0,
	971, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 182, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 975, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 184, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 1329, 521, 522, 0, 473, 472, 523, 1326,
	0, 1183, 176, 474, 475, 524, 476, 477, 478, 0,
	177, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 151, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 1087, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	963, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 962, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 964, 502, 965,
	314, 315, 316, 966, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 967,
	327, 328, 968, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 969, 344, 345, 347, 970, 346, 0, 0,
	971, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 182, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 975, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 184, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 1329, 521, 522, 0, 473, 472, 523, 0,
	0, 0, 176, 474, 475, 524, 476, 477, 478, 0,
	177, 0, 0, 0, 0, 1183, 1182, 0, 0, 0,
	0, 1180, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 151, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 1087, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 960, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 961, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 963, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 962, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 964, 502, 965, 314, 315, 316, 966, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 967, 327, 328, 968, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 969, 344, 345, 347,
	970, 346, 0, 0, 971, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 972, 362, 973, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 974, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 975,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 1183, 1182, 0, 0, 0, 0, 1180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 1813, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 1087, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 960, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 961, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 963, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 962, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 964,
	502, 965, 314, 315, 316, 966, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 967, 327, 328, 968, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 969, 344, 345, 347, 970, 346,
	0, 0, 971, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 972, 362, 973, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 974, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 975, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 1183, 1182, 0, 0, 0, 0, 1180, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 2830, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 1087, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	963, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 962, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 964, 502, 965,
	314, 315, 316, 966, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 967,
	327, 328, 968, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 969, 344, 345, 347, 970, 346, 0, 0,
	971, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 975, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 0, 473, 472, 523, 1024,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 951, 0,
	0, 1335, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 950, 239, 484, 485, 486, 0, 240,
	957, 0, 940, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 960, 255, 256, 943, 941, 942, 947, 945,
	944, 946, 257, 258, 259, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 978,
	979, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	961, 291, 292, 0, 293, 985, 0, 495, 294, 0,
	295, 296, 297, 298, 952, 953, 956, 350, 963, 299,
	300, 0, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 0, 962, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 964, 954, 965, 314, 315,
	316, 966, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 986, 967, 327, 328,
	968, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	969, 344, 345, 347, 970, 346, 0, 218, 971, 348,
	0, 955, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	972, 362, 973, 980, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 981, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	974, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 948, 425, 405,
	406, 426, 427, 975, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 982, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 983, 454, 984, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 949, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 0, 473, 472, 523, 835, 0, 213,
	0, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 240,
	487, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 496, 497, 498, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 0, 502, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 0, 346, 0, 0, 0, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	0, 362, 0, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 182, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 425, 405,
	406, 426, 427, 0, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 184, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	1329, 521, 522, 0, 473, 472, 523, 213, 0, 0,
	176, 474, 475, 524, 476, 477, 478, 0, 177, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 151,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 496, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 218, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 0, 473, 472, 523, 213, 0, 0, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 1638, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 218, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 213, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 2780, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 0, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 213, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 2401, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 0,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 0, 473, 472, 523, 213,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 479, 0,
	0, 2916, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 240,
	487, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 496, 497, 498, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 0, 502, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 0, 346, 0, 0, 0, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	0, 362, 0, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 425, 405,
	406, 426, 427, 0, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 0, 473, 472, 523, 702, 0, 591,
	0, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 479, 1904,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 240,
	487, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 597, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 496, 497, 498, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 0, 0, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 0, 502, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 0, 346, 0, 218, 0, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	0, 362, 0, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 425, 405,
	406, 426, 427, 0, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 596, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 0, 473, 472, 523, 0, 590, 0,
	591, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 600, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 597, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 218, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 596, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 591, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 600, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 597, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 496, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 218, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	1936, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 596, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 0, 473, 472, 523, 591, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 600, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 597, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 496, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 218, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 596, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 1360, 0, 1183, 1182, 0, 0,
	0, 0, 1180, 0, 0, 0, 0, 0, 0, 600,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 1087,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 216,
	0, 0, 0, 0, 0, 1359, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 496, 497, 498, 350, 963, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 962,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 964, 502, 965, 314, 315, 316, 966, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 967, 327, 328, 968, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 969, 344, 345,
	347, 970, 346, 0, 0, 971, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 1358, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 1357,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	975, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 1324, 0, 1183, 1182, 0, 0,
	0, 0, 1180, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 1087,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 1323, 497, 498, 350, 963, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 962,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 964, 502, 965, 314, 315, 316, 966, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 967, 327, 328, 968, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 969, 344, 345,
	347, 970, 346, 0, 0, 971, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	975, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 1320, 0, 1183, 1182, 0, 0,
	0, 0, 1180, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 1087,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 1319, 497, 498, 350, 963, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 962,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 964, 502, 965, 314, 315, 316, 966, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 967, 327, 328, 968, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 969, 344, 345,
	347, 970, 346, 0, 0, 971, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	975, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 1258, 0, 1183, 1182, 0, 0,
	0, 0, 1180, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 1087,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 1257, 497, 498, 350, 963, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 962,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 964, 502, 965, 314, 315, 316, 966, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 967, 327, 328, 968, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 969, 344, 345,
	347, 970, 346, 0, 0, 971, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	975, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 1255, 0, 1183, 1182, 0, 0,
	0, 0, 1180, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 1087,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 1254, 497, 498, 350, 963, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 962,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 964, 502, 965, 314, 315, 316, 966, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 967, 327, 328, 968, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 969, 344, 345,
	347, 970, 346, 0, 0, 971, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	975, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 1176, 0, 1183, 1182, 0, 0,
	0, 0, 1180, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 1087,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 1178, 497, 498, 350, 963, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 962,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 964, 502, 965, 314, 315, 316, 966, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 967, 327, 328, 968, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 969, 344, 345,
	347, 970, 346, 0, 0, 971, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	975, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 1183, 1182, 0, 0, 0, 0,
	1180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 1087, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 960, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 961, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 963, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 962, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	964, 502, 965, 314, 315, 316, 966, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 967, 327, 328, 968, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 969, 344, 345, 347, 970,
	346, 0, 0, 971, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 972, 362, 973, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 974, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 975, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 213, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 496, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 218, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 0, 473, 472, 523, 1183, 1182, 0, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 600, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 1087,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 1727, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 496, 497, 498, 350, 963, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 962,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 964, 502, 965, 314, 315, 316, 966, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 967, 327, 328, 968, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 969, 344, 345,
	347, 970, 346, 0, 0, 971, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	975, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 1183, 1182, 0, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 1087, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 960, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 961, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 963, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 962, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	964, 502, 965, 314, 315, 316, 966, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 967, 327, 328, 968, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 969, 344, 345, 347, 970,
	346, 0, 0, 971, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 972, 362, 973, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 974, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 975, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 1183, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 1087, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 960, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 961,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 496, 497, 498, 350, 963, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 962, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 964, 502, 965, 314, 315, 316,
	966, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 967, 327, 328, 968,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 969,
	344, 345, 347, 970, 346, 0, 0, 971, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 972,
	362, 973, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 974,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 975, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 213, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 2289, 240, 487, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 2286, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 2437, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 2292, 0, 0, 291, 292, 0, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 496, 497, 498,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	2434, 303, 305, 312, 0, 0, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 2436, 0, 502,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	0, 327, 328, 2433, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 0, 346, 0,
	0, 0, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 0, 362, 0, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 374, 2291, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 425, 405, 406, 426, 427, 0, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 2435,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 213, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 2289, 240, 487, 0, 0,
	2283, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 2286, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 2292, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 2282, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 0, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 2291, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 2290, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 1415, 0, 213, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 496, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 218, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 1418, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 1416, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 1417, 472, 523, 1171, 0, 213, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 1173, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 218, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 1016, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 1168, 0, 213, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 1170, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 218, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 1016, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 1075, 0, 213, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 1077, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 218, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 1016, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 553, 0, 213, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 552, 223, 542, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 545, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	546, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 496, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 0, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 547, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 541, 0, 213, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 542, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 545, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	546, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 496, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 0, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 547, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	213, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 2745, 346, 0, 218, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 213, 473, 472, 523, 0, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 218, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 1016, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 0, 473,
	472, 523, 2372, 0, 213, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 218, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 0, 473,
	472, 523, 1913, 0, 213, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 218, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 213, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 496, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 218, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 1841, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 0, 473, 472, 523, 1845, 0, 213, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 1844, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 218, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 0, 473, 472, 523, 1834, 0, 213, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 1836, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 218, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 0, 473, 472, 523, 1313, 0, 213, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 1312, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 218, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 0, 473, 472, 523, 1310, 0, 213, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 1309, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 218, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 0, 473, 472, 523, 1307, 0, 213, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 1306, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 218, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 0, 473, 472, 523, 1303, 0, 213, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 1302, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 218, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 0, 473, 472, 523, 1278, 0, 213, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 496, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 218, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 0, 473, 472, 523, 1193, 0, 213, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 1195, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 218, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 213, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 0, 240, 487, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 496, 497, 498,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 0, 0, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 0, 502,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 0, 346, 0,
	218, 0, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 0, 362, 0, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 425, 405, 406, 426, 427, 0, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 213, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 545, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	546, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 496, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 0, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 547, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	213, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 1943, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 218, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 213, 473, 472, 523, 0, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 1941,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 218, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 213, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 1939, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 496, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 218, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 0, 473, 472, 523, 694, 0, 213, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 496, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 693, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 0, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 692, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 213, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 0, 240, 487, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 2437, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 496, 497, 498,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 0, 502,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 0, 346, 0,
	0, 0, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 0, 362, 0, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 374, 3251, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 425, 405, 406, 426, 427, 0, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 0, 473, 472, 523,
	532, 0, 213, 0, 474, 475, 524, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 531, 224, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 0, 240, 487, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 0, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 496, 497, 498,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 0, 502,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 0, 346, 0,
	0, 0, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 0, 362, 0, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 530, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 425, 405, 406, 426, 427, 0, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 213, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 2223, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 496, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 0, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 213, 2424, 0, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 0, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 213, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 3041,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 496, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 0, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 0, 473, 472, 523, 213, 2424, 0, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 496, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 0, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 2421, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	213, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 219, 220, 221,
	222, 223, 1920, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 1911, 0,
	213, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 573, 0,
	213, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 1053, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 1051, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	574, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 570, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 1054, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 569, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 1858, 0,
	213, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 1857, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 573, 0,
	213, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	563, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	574, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 570, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 1334, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 569, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 1317, 0,
	213, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 1316, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 1266, 0,
	213, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 1265, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 1247, 0,
	213, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 1187, 0,
	213, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 573, 0,
	213, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 1053, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 1051, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	574, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 570, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 1054, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 569, 515, 516,
	517, 0, 458, 0, 452, 1052, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 213, 473, 472, 523, 0, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 219, 220, 221, 222, 223, 1035, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 0, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 0, 473,
	472, 523, 573, 0, 213, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 563, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 561, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 562, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 574, 0, 344, 345, 347, 0,
	346, 0, 0, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	564, 403, 0, 404, 408, 409, 570, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	565, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 569, 515, 516, 517, 0, 458, 0, 452, 567,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 0, 473,
	472, 523, 557, 0, 213, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 0, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 558, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 0, 473,
	472, 523, 555, 0, 213, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 0, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 0, 473,
	472, 523, 549, 0, 213, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 0, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 0, 473,
	472, 523, 527, 0, 213, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 0, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 213, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 496, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 0, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 213, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 0, 240, 487, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 0, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 2721, 497, 498,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 0, 502,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 0, 346, 0,
	0, 0, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 0, 362, 0, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 425, 405, 406, 426, 427, 0, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 213, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 2719, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 0, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	213, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 2706, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 213, 473, 472, 523, 0, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 2384,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 0, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 213, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 496, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 0, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 558, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 213, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 479, 0, 1870, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 0, 240, 487, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 0, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 496, 497, 498,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 0, 502,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 0, 346, 0,
	0, 0, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 0, 362, 0, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 0, 405, 406, 426, 427, 0, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 213, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 1286, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 0, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	213, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 1228, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 213, 473, 472, 523, 0, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 0, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 990, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 213, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 0, 0, 295,
	296, 297, 298, 496, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 0, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 0, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 0, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 0, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 0, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 1464, 1465, 0, 1497,
	1498, 1499, 1507, 1508, 1509, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1500, 1495, 0, 0, 0,
	0, 0, 0, 1467, 0, 0, 0, 0, 1513, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508,
	1509, 1466, 0, 0, 0, 0, 0, 0, 0, 0,
	1486, 1500, 1495, 0, 0, 0, 0, 1483, 0, 1467,
	0, 0, 0, 0, 1513, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1466, 0, 0,
	0, 0, 0, 0, 0, 0, 1486, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1489, 1490, 1491, 1492, 0, 0,
	0, 0, 0, 0, 1472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1504, 0,
	0, 1514, 0, 0, 0, 1494, 1496, 0, 0, 0,
	1489, 1490, 1491, 1492, 0, 0, 0, 0, 0, 0,
	1472, 0, 0, 0, 0, 1510, 0, 1511, 0, 0,
	0, 0, 0, 0, 1481, 1482, 0, 0, 0, 0,
	0, 0, 0, 0, 1504, 0, 0, 1514, 0, 0,
	1502, 1494, 1496, 0, 0, 0, 0, 0, 0, 1487,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1510, 0, 1511, 0, 0, 0, 0, 1512, 0,
	1481, 1482, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1501, 1502, 0, 0, 0,
	0, 0, 0, 0, 0, 1487, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1512, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1493,
	0, 1501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1488, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508,
	1509, 0, 0, 1505, 0, 1493, 0, 0, 0, 0,
	0, 1500, 1495, 0, 0, 0, 0, 0, 0, 1467,
	0, 0, 0, 1488, 1513, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1466, 0, 1505,
	0, 0, 0, 0, 0, 0, 1486, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1503, 0, 0,
	1478, 1479, 1485, 1506, 1484, 1480, 0, 1477, 1475, 1476,
	1468, 1469, 1470, 1471, 1473, 1474, 0, 0, 0, 0,
	0, 0, 0, 0, 2571, 0, 0, 0, 0, 0,
	1489, 1490, 1491, 1492, 0, 0, 0, 0, 0, 0,
	1472, 0, 0, 1503, 0, 0, 1478, 1479, 1485, 1506,
	1484, 1480, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471,
	1473, 1474, 0, 0, 1504, 0, 0, 1514, 0, 0,
	2570, 1494, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1510, 0, 1511, 0, 0, 0, 0, 0, 0,
	1481, 1482, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1502, 0, 0, 0,
	0, 0, 0, 0, 0, 1487, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1512, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1501, 0, 0, 0, 1464, 1465, 0, 1497, 1498,
	1499, 1507, 1508, 1509, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1500, 1495, 0, 0, 0, 0,
	0, 0, 1467, 0, 0, 0, 0, 1513, 0, 0,
	0, 0, 0, 0, 0, 1493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1466, 0, 0, 1488, 0, 0, 0, 0, 0, 1486,
	0, 0, 0, 0, 0, 0, 1483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1464, 1465, 1505,
	1497, 1498, 1499, 1507, 1508, 1509, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1500, 1495, 0, 0,
	0, 0, 0, 0, 1467, 0, 0, 0, 0, 1513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1489, 1490, 1491, 1492, 0, 0, 0,
	0, 0, 1466, 1472, 0, 0, 0, 0, 0, 0,
	0, 1486, 0, 0, 0, 0, 0, 0, 1483, 0,
	0, 0, 0, 0, 0, 0, 0, 1504, 0, 0,
	1514, 0, 0, 1503, 1494, 1496, 1478, 1479, 1485, 1506,
	1484, 1480, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471,
	1473, 1474, 0, 0, 1510, 0, 1511, 0, 0, 0,
	2569, 0, 0, 1481, 1482, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1489, 1490, 1491, 1492, 1502,
	0, 0, 0, 0, 0, 1472, 0, 0, 1487, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1512, 0, 1504,
	0, 0, 1514, 0, 0, 0, 1494, 1496, 0, 0,
	0, 0, 0, 0, 1501, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 1511, 0,
	0, 0, 0, 0, 0, 1481, 1482, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1502, 0, 0, 0, 0, 0, 0, 1493, 0,
	1487, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1488, 0, 0, 1512,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1501, 0, 0, 0,
	0, 0, 1505, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1488, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1505, 0, 1503, 0, 0, 1478,
	1479, 1485, 1506, 1484, 1480, 0, 1477, 1475, 1476, 1468,
	1469, 1470, 1471, 1473, 1474, 0, 0, 0, 0, 0,
	0, 0, 0, 2097, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508,
	1509, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1500, 1495, 0, 0, 0, 0, 0, 0, 1467,
	0, 0, 0, 0, 1513, 0, 0, 0, 1503, 0,
	0, 1478, 1479, 1485, 1506, 1484, 1480, 0, 1477, 1475,
	1476, 1468, 1469, 1470, 1471, 1473, 1474, 1466, 0, 0,
	0, 3499, 0, 0, 0, 0, 1486, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 0, 0, 0, 0,
	1464, 1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1500,
	1495, 0, 0, 0, 0, 0, 0, 1467, 0, 0,
	0, 0, 1513, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1489, 1490, 1491, 1492, 0, 1466, 0, 0, 0, 0,
	1472, 0, 0, 0, 1486, 0, 0, 0, 0, 0,
	0, 1483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1504, 0, 0, 1514, 0, 0,
	0, 1494, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1510, 0, 1511, 0, 0, 0, 0, 0, 0,
	1481, 1482, 0, 0, 0, 0, 0, 0, 1489, 1490,
	1491, 1492, 0, 0, 0, 0, 1502, 0, 1472, 0,
	0, 0, 0, 0, 0, 1487, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1504, 0, 1512, 1514, 0, 0, 0, 1494,
	1496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1501, 0, 0, 0, 0, 0, 0, 0, 1510,
	0, 1511, 0, 0, 0, 0, 0, 0, 1481, 1482,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1502, 0, 0, 0, 0, 0,
	0, 0, 0, 1487, 0, 1493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1512, 1488, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1505,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508, 1509,
	0, 0, 0, 1493, 0, 0, 0, 0, 0, 0,
	1500, 1495, 0, 0, 0, 0, 0, 0, 1467, 0,
	0, 1488, 0, 1513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1466, 1505, 0, 0,
	0, 0, 0, 1503, 0, 1486, 1478, 1479, 1485, 1506,
	1484, 1480, 1483, 1477, 1475, 1476, 1468, 1469, 1470, 1471,
	1473, 1474, 0, 0, 0, 0, 3495, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1489,
	1490, 1491, 1492, 0, 0, 0, 0, 0, 0, 1472,
	0, 1503, 0, 0, 1478, 1479, 1485, 1506, 1484, 1480,
	0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474,
	0, 0, 0, 1504, 3424, 0, 1514, 0, 0, 0,
	1494, 1496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1510, 0, 1511, 0, 0, 0, 0, 0, 0, 1481,
	1482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1502, 0, 0, 0, 0,
	0, 0, 0, 0, 1487, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1512, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1501, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1464,
	1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 0, 0,
	0, 0, 0, 0, 1493, 0, 0, 0, 1500, 1495,
	0, 0, 0, 0, 0, 0, 1467, 0, 0, 0,
	0, 1513, 1488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1464, 1465, 0, 1497, 1498,
	1499, 1507, 1508, 1509, 1466, 0, 0, 0, 1505, 0,
	0, 0, 0, 1486, 1500, 1495, 0, 0, 0, 0,
	1483, 0, 1467, 0, 0, 0, 0, 1513, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1466, 0, 0, 0, 0, 0, 0, 0, 0, 1486,
	0, 0, 0, 0, 0, 0, 1483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1489, 1490, 1491,
	1492, 0, 0, 0, 0, 0, 0, 1472, 0, 0,
	0, 0, 1503, 0, 0, 1478, 1479, 1485, 1506, 1484,
	1480, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473,
	1474, 1504, 0, 0, 1514, 3423, 0, 0, 1494, 1496,
	0, 0, 0, 1489, 1490, 1491, 1492, 0, 0, 0,
	0, 0, 0, 1472, 0, 0, 0, 0, 1510, 0,
	1511, 0, 0, 0, 0, 0, 0, 1481, 1482, 0,
	0, 0, 0, 0, 0, 0, 0, 1504, 0, 0,
	1514, 0, 0, 1502, 1494, 1496, 0, 0, 0, 0,
	0, 0, 1487, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 1511, 0, 0, 0,
	0, 1512, 0, 1481, 1482, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1501, 1502,
	0, 0, 0, 0, 0, 0, 0, 0, 1487, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1512, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1493, 0, 1501, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1464, 1465, 0, 1497, 1498, 1499, 1507,
	1508, 1509, 0, 0, 0, 0, 1505, 0, 1493, 0,
	0, 0, 1500, 1495, 0, 0, 0, 0, 0, 0,
	1467, 0, 0, 0, 0, 1513, 1488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1466, 0,
	0, 0, 1505, 0, 0, 0, 0, 1486, 0, 0,
	0, 0, 0, 0, 1483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1503, 0, 0, 1478, 1479, 1485, 1506, 1484, 1480, 0,
	1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 0,
	0, 0, 0, 3312, 0, 0, 0, 0, 0, 0,
	0, 1489, 1490, 1491, 1492, 0, 0, 0, 0, 0,
	0, 1472, 0, 0, 0, 0, 1503, 0, 0, 1478,
	1479, 1485, 1506, 1484, 1480, 0, 1477, 1475, 1476, 1468,
	1469, 1470, 1471, 1473, 1474, 1504, 0, 0, 1514, 3212,
	0, 0, 1494, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1510, 0, 1511, 0, 0, 0, 0, 0,
	0, 1481, 1482, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1502, 0, 0,
	0, 0, 0, 0, 0, 0, 1487, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1512, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508, 1509,
	0, 0, 0, 0, 0, 0, 1493, 0, 0, 0,
	1500, 1495, 0, 0, 0, 0, 0, 0, 1467, 0,
	0, 0, 0, 1513, 1488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1464, 1465, 0,
	1497, 1498, 1499, 1507, 1508, 1509, 1466, 0, 0, 0,
	1505, 0, 0, 0, 0, 1486, 1500, 1495, 0, 0,
	0, 0, 1483, 0, 1467, 0, 0, 0, 0, 1513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1466, 0, 0, 0, 0, 0, 0, 0,
	0, 1486, 0, 0, 0, 0, 0, 0, 1483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1489,
	1490, 1491, 1492, 0, 0, 0, 0, 0, 0, 1472,
	0, 0, 0, 0, 1503, 0, 0, 1478, 1479, 1485,
	1506, 1484, 1480, 0, 1477, 1475, 1476, 1468, 1469, 1470,
	1471, 1473, 1474, 1504, 0, 0, 1514, 3164, 0, 0,
	1494, 1496, 0, 0, 0, 1489, 1490, 1491, 1492, 0,
	0, 0, 0, 0, 0, 1472, 0, 0, 0, 0,
	1510, 0, 1511, 0, 0, 0, 0, 0, 0, 1481,
	1482, 0, 0, 0, 0, 0, 0, 0, 0, 1504,
	0, 0, 1514, 0, 0, 1502, 1494, 1496, 0, 0,
	0, 0, 0, 0, 1487, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 1511, 0,
	0, 0, 0, 1512, 0, 1481, 1482, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1501, 1502, 0, 0, 0, 0, 0, 0, 0, 0,
	1487, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1512,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1493, 0, 1501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1464, 1465, 0, 1497, 1498,
	1499, 1507, 1508, 1509, 0, 0, 0, 0, 1505, 0,
	1493, 0, 0, 0, 1500, 1495, 0, 0, 0, 0,
	0, 0, 1467, 0, 0, 0, 0, 1513, 1488, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1466, 0, 0, 0, 1505, 0, 0, 0, 0, 1486,
	0, 0, 0, 0, 0, 0, 1483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1503, 0, 0, 1478, 1479, 1485, 1506, 1484,
	1480, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473,
	1474, 0, 0, 0, 0, 3163, 0, 0, 0, 0,
	0, 0, 0, 1489, 1490, 1491, 1492, 0, 0, 0,
	0, 0, 0, 1472, 0, 0, 0, 0, 1503, 0,
	0, 1478, 1479, 1485, 1506, 1484, 1480, 0, 1477, 1475,
	1476, 1468, 1469, 1470, 1471, 1473, 1474, 1504, 0, 0,
	1514, 3162, 0, 0, 1494, 1496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 1511, 0, 0, 0,
	0, 0, 0, 1481, 1482, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1502,
	0, 0, 0, 0, 0, 0, 0, 0, 1487, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1512, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1501, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1464, 1465, 0, 1497, 1498, 1499, 1507,
	1508, 1509, 0, 0, 0, 0, 0, 0, 1493, 0,
	0, 0, 1500, 1495, 0, 0, 0, 0, 0, 0,
	1467, 0, 0, 0, 0, 1513, 1488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1464,
	1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 1466, 0,
	0, 0, 1505, 0, 0, 0, 0, 1486, 1500, 1495,
	0, 0, 0, 0, 1483, 0, 1467, 0, 0, 0,
	0, 1513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1466, 0, 0, 0, 0, 0,
	0, 0, 0, 1486, 0, 0, 0, 0, 0, 0,
	1483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1489, 1490, 1491, 1492, 0, 0, 0, 0, 0,
	0, 1472, 0, 0, 0, 0, 1503, 0, 0, 1478,
	1479, 1485, 1506, 1484, 1480, 0, 1477, 1475, 1476, 1468,
	1469, 1470, 1471, 1473, 1474, 1504, 0, 0, 1514, 3127,
	0, 0, 1494, 1496, 0, 0, 0, 1489, 1490, 1491,
	1492, 0, 0, 0, 0, 0, 0, 1472, 0, 0,
	0, 0, 1510, 0, 1511, 0, 0, 0, 0, 0,
	0, 1481, 1482, 0, 0, 0, 0, 0, 0, 0,
	0, 1504, 0, 0, 1514, 0, 0, 1502, 1494, 1496,
	0, 0, 0, 0, 0, 0, 1487, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1510, 0,
	1511, 0, 0, 0, 0, 1512, 0, 1481, 1482, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1501, 1502, 0, 0, 0, 0, 0, 0,
	0, 0, 1487, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1512, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1493, 0, 1501, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1464, 1465, 0,
	1497, 1498, 1499, 1507, 1508, 1509, 0, 0, 0, 0,
	1505, 0, 1493, 0, 0, 0, 1500, 1495, 0, 0,
	0, 0, 0, 0, 1467, 0, 0, 0, 0, 1513,
	1488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1466, 0, 0, 0, 1505, 0, 0, 0,
	0, 1486, 0, 0, 0, 0, 0, 0, 1483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1503, 0, 0, 1478, 1479, 1485,
	1506, 1484, 1480, 0, 1477, 1475, 1476, 1468, 1469, 1470,
	1471, 1473, 1474, 0, 0, 0, 0, 2923, 0, 0,
	0, 0, 0, 0, 0, 1489, 1490, 1491, 1492, 0,
	0, 0, 0, 0, 0, 1472, 0, 0, 0, 0,
	1503, 0, 0, 1478, 1479, 1485, 1506, 1484, 1480, 0,
	1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 1504,
	0, 0, 1514, 2567, 0, 0, 1494, 1496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 1511, 0,
	0, 0, 0, 0, 0, 1481, 1482, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1502, 0, 0, 0, 0, 0, 0, 0, 0,
	1487, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1512,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1464, 1465, 0, 1497, 1498,
	1499, 1507, 1508, 1509, 0, 0, 0, 0, 0, 0,
	1493, 0, 0, 0, 1500, 1495, 0, 0, 0, 0,
	0, 0, 1467, 0, 0, 0, 0, 1513, 1488, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1466, 0, 0, 0, 1505, 0, 0, 0, 0, 1486,
	0, 0, 0, 0, 0, 0, 1483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1464, 1465, 0, 1497,
	1498, 1499, 1507, 1508, 1509, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1500, 1495, 0, 0, 0,
	0, 2496, 0, 1467, 0, 0, 0, 0, 1513, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1489, 1490, 1491, 1492, 0, 0, 0,
	0, 1466, 0, 1472, 3597, 0, 0, 0, 1503, 0,
	1486, 1478, 1479, 1485, 1506, 1484, 1480, 1483, 1477, 1475,
	1476, 1468, 1469, 1470, 1471, 1473, 1474, 1504, 0, 2525,
	1514, 0, 0, 0, 1494, 1496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2497, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 1511, 0, 0, 0,
	0, 0, 0, 1481, 1482, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1489, 1490, 1491, 1492, 0, 1502,
	0, 0, 0, 0, 1472, 0, 0, 0, 1487, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1512, 1504, 0,
	0, 1514, 0, 0, 0, 1494, 1496, 0, 0, 0,
	0, 0, 0, 0, 1501, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1510, 0, 1511, 0, 0,
	0, 0, 0, 0, 1481, 1482, 3596, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1502, 0, 0, 0, 0, 0, 0, 0, 1493, 1487,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1488, 0, 1512, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1501, 0, 0, 0, 0,
	0, 0, 1505, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2190, 0, 0,
	0, 0, 0, 0, 1464, 1465, 0, 1497, 1498, 1499,
	1507, 1508, 1509, 0, 0, 0, 0, 0, 0, 1493,
	0, 0, 0, 1500, 1495, 0, 0, 0, 2189, 0,
	0, 1467, 0, 0, 0, 0, 1513, 1488, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1466,
	0, 0, 0, 1505, 0, 0, 1503, 0, 1486, 1478,
	1479, 1485, 1506, 1484, 1480, 1483, 1477, 1475, 1476, 1468,
	1469, 1470, 1471, 1473, 1474, 1464, 1465, 0, 1497, 1498,
	1499, 1507, 1508, 1509, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1500, 1495, 0, 0, 0, 0,
	0, 0, 1467, 0, 0, 0, 0, 1513, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1489, 1490, 1491, 1492, 0, 0, 0, 0,
	1466, 0, 1472, 0, 0, 0, 0, 1503, 0, 1486,
	1478, 1479, 1485, 1506, 1484, 1480, 1483, 1477, 1475, 1476,
	1468, 1469, 1470, 1471, 1473, 1474, 1504, 0, 0, 1514,
	0, 0, 0, 1494, 1496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1510, 0, 1511, 0, 0, 0, 0,
	0, 0, 1481, 1482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1489, 1490, 1491, 1492, 0, 1502, 0,
	0, 0, 0, 1472, 0, 2614, 0, 1487, 2613, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1512, 1504, 0, 0,
	1514, 0, 0, 0, 1494, 1496, 0, 0, 0, 0,
	0, 0, 0, 1501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 1511, 0, 0, 0,
	0, 0, 0, 1481, 1482, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1502,
	0, 0, 0, 0, 0, 0, 0, 1493, 1487, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1488, 0, 1512, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1501, 0, 0, 0, 0, 0,
	0, 1505, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1464, 1465, 0, 1497, 1498, 1499, 1507,
	1508, 1509, 0, 0, 0, 0, 0, 0, 1493, 0,
	0, 0, 1500, 1495, 0, 0, 0, 0, 0, 0,
	1467, 0, 0, 0, 0, 1513, 1488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1466, 0,
	0, 0, 1505, 0, 0, 1503, 0, 1486, 1478, 1479,
	1485, 1506, 1484, 1480, 1483, 1477, 1475, 1476, 1468, 1469,
	1470, 1471, 1473, 1474, 1464, 1465, 0, 1497, 1498, 1499,
	1507, 1508, 1509, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1500, 1495, 0, 0, 0, 0, 0,
	0, 1467, 0, 0, 0, 0, 1513, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1489, 1490, 1491, 1492, 0, 0, 0, 0, 1466,
	0, 1472, 0, 0, 0, 0, 1503, 0, 1486, 1478,
	1479, 1485, 1506, 1484, 1480, 1483, 1477, 1475, 1476, 1468,
	1469, 1470, 1471, 1473, 1474, 1504, 0, 0, 1514, 0,
	0, 0, 1494, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1510, 0, 1511, 0, 0, 0, 0, 0,
	0, 1481, 1482, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1489, 1490, 1491, 1492, 0, 1502, 0, 0,
	0, 0, 1472, 0, 0, 0, 1487, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1512, 1504, 0, 0, 1514,
	0, 0, 0, 1494, 1496, 0, 0, 0, 0, 0,
	0, 0, 1501, 832, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1510, 0, 1511, 0, 0, 0, 0,
	0, 0, 1481, 1482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1502, 0,
	0, 0, 0, 0, 0, 0, 1493, 1487, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1488, 0, 1512, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1501, 0, 0, 0, 0, 0, 0,
	1505, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508,
	1509, 0, 0, 0, 0, 0, 0, 1493, 0, 0,
	0, 1500, 1495, 0, 0, 0, 2615, 0, 0, 1467,
	0, 0, 0, 0, 1513, 1488, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1466, 0, 0,
	0, 1505, 0, 0, 1503, 0, 1486, 1478, 1479, 1485,
	1506, 1484, 1480, 1483, 1477, 1475, 1476, 1468, 1469, 1470,
	1471, 1473, 1474, 1464, 1465, 0, 1497, 1498, 1499, 1507,
	1508, 1509, 2911, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1500, 1495, 0, 0, 0, 0, 0, 0,
	1467, 0, 0, 0, 0, 1513, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1489, 1490, 1491, 1492, 0, 0, 0, 0, 1466, 0,
	1472, 0, 0, 0, 0, 1503, 0, 1486, 1478, 1479,
	1485, 1506, 1484, 1480, 1483, 1477, 1475, 1476, 1468, 1469,
	1470, 1471, 1473, 1474, 1504, 0, 0, 1514, 0, 0,
	0, 1494, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1510, 0, 1511, 0, 0, 0, 0, 0, 0,
	1481, 1482, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1489, 1490, 1491, 1492, 0, 1502, 0, 0, 0,
	0, 1472, 0, 0, 0, 1487, 2620, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1512, 1504, 0, 0, 1514, 0,
	0, 0, 1494, 1496, 0, 0, 0, 0, 0, 0,
	0, 1501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1510, 0, 1511, 0, 0, 0, 0, 0,
	0, 1481, 1482, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1502, 0, 0,
	0, 0, 0, 0, 0, 1493, 1487, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1488, 0, 1512, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1501, 0, 0, 0, 0, 0, 0, 1505,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508, 1509,
	0, 0, 0, 0, 0, 0, 1493, 0, 0, 0,
	1500, 1495, 0, 0, 0, 0, 0, 0, 1467, 0,
	0, 0, 0, 1513, 1488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1466, 0, 0, 0,
	1505, 0, 0, 1503, 0, 1486, 1478, 1479, 1485, 1506,
	1484, 1480, 1483, 1477, 1475, 1476, 1468, 1469, 1470, 1471,
	1473, 1474, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508,
	1509, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1500, 1495, 0, 0, 0, 2568, 0, 0, 1467,
	0, 0, 0, 0, 1513, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1489,
	1490, 1491, 1492, 0, 0, 0, 0, 1466, 0, 1472,
	0, 0, 0, 0, 1503, 0, 1486, 1478, 1479, 1485,
	1506, 1484, 1480, 1483, 1477, 1475, 1476, 1468, 1469, 1470,
	1471, 1473, 1474, 1504, 0, 0, 1514, 0, 0, 0,
	1494, 1496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1510, 0, 1511, 0, 0, 0, 0, 0, 0, 1481,
	1482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1489, 1490, 1491, 1492, 0, 1502, 0, 0, 0, 0,
	1472, 0, 0, 0, 1487, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1512, 1504, 0, 0, 1514, 0, 0,
	0, 1494, 1496, 0, 0, 0, 0, 0, 0, 0,
	1501, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1510, 0, 1511, 0, 0, 0, 0, 2582, 0,
	1481, 1482, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1502, 0, 0, 0,
	0, 0, 0, 0, 1493, 1487, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1488, 0, 1512, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1501, 0, 0, 0, 0, 0, 0, 1505, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1464, 1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 0,
	0, 0, 0, 0, 0, 1493, 0, 0, 0, 1500,
	1495, 0, 0, 0, 0, 0, 0, 1467, 0, 0,
	0, 0, 1513, 1488, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1466, 0, 0, 0, 1505,
	0, 0, 1503, 0, 1486, 1478, 1479, 1485, 1506, 1484,
	1480, 1483, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473,
	1474, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508, 1509,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1500, 1495, 0, 0, 0, 0, 0, 0, 1467, 0,
	0, 0, 0, 1513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1489, 1490,
	1491, 1492, 0, 0, 0, 0, 1466, 0, 1472, 0,
	0, 0, 0, 1503, 0, 1486, 1478, 1479, 1485, 1506,
	1484, 1480, 1483, 1477, 1475, 1476, 1468, 1469, 1470, 1471,
	1473, 1474, 1504, 0, 0, 1514, 0, 0, 0, 1494,
	1496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1510,
	0, 1511, 0, 0, 0, 0, 0, 0, 1481, 1482,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1489,
	1490, 1491, 1492, 0, 1502, 0, 0, 0, 0, 1472,
	0, 0, 0, 1487, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1512, 1504, 0, 0, 1514, 0, 0, 0,
	1494, 1496, 0, 0, 0, 0, 0, 0, 0, 1501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1510, 0, 1511, 0, 0, 0, 0, 0, 0, 1481,
	1482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1502, 0, 0, 0, 0,
	0, 0, 0, 1493, 1487, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1488, 0, 1512, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1505, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1464,
	1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 0, 0,
	0, 0, 0, 0, 1493, 0, 0, 0, 0, 1495,
	0, 0, 0, 0, 0, 0, 1467, 0, 0, 0,
	0, 1513, 1488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1466, 0, 0, 0, 1505, 0,
	0, 1503, 0, 1486, 1478, 1479, 1485, 1506, 1484, 1480,
	1483, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1489, 1490, 1491,
	1492, 0, 0, 0, 0, 0, 0, 1472, 0, 0,
	0, 0, 1503, 0, 0, 1478, 1479, 1485, 1506, 1484,
	1480, 1680, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473,
	1474, 1504, 0, 0, 1514, 0, 0, 0, 1494, 1496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1510, 0,
	1511, 1697, 1674, 1681, 1664, 1707, 1706, 1481, 1482, 1666,
	1665, 0, 0, 0, 0, 0, 0, 1717, 1718, 0,
	0, 0, 0, 1502, 0, 0, 0, 0, 0, 0,
	0, 0, 1487, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1512, 0, 0, 0, 0, 0, 0, 1708, 0,
	1704, 1703, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1702, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1701, 1699, 1700, 0, 0, 0, 0,
	0, 0, 1493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1488, 0, 0, 0, 0, 0, 1676, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1690, 1679, 1692, 1694,
	1695, 1696, 1691, 0, 1684, 0, 1505, 0, 0, 0,
	0, 0, 0, 0, 1713, 1714, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1668, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1705, 0, 0, 0, 1677,
	0, 1678, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1503, 0, 0, 1478, 1479, 1485, 1506, 1484, 1480, 0,
	1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 0,
	0, 0, 1698, 0, 0, 0, 1687, 1685, 1686, 1689,
	1688, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1669, 1670, 1672, 1673, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1693, 1671,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1716,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1667, 0, 0, 1709, 1710,
	1711, 1712, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1675, 0,
	0, 0, 0, 1682, 1715,
}
var sqlPact = [...]int{

	309, -1000, -1000, -1000, -1000, -1000, -1000, 193, 192, 191,
	187, 186, 185, 184, 182, -1000, -1000, -1000, 181, -1000,
	-1000, 171, -1000, 168, 163, 159, 158, -1000, 154, 152,
	148, -1000, -1000, -1000, -1000, 147, 143, 142, 55298, 1711,
	66850, 58278, 1462, 49302, 66420, 48872, 65990, 65560, 137, -1000,
	65130, 135, 133, 129, -1000, -1000, 126, 1252, 40236, 123,
	113, 112, 2142, 108, 105, -1000, 103, -1000, 8177, 1268,
	-1000, 102, 101, -1000, 7617, 492, 57424, 2211, 100, 98,
	39805, 2182, 2203, -1000, -1000, 1529, -1000, -1000, 97, 95,
	94, 93, 91, 90, 88, 87, 85, -1000, 84, 83,
	82, 81, 77, 75, 74, -1000, 71, 69, 68, 67,
	65, 62, 61, 60, 57, 56, 51, -1000, 8976, 1474,
	1354, 1351, 1348, 1342, 1339, 829, 50, 49, 47, 46,
	45, 44, 43, -1000, -1000, 41, 40, 37, 36, -1000,
	35, 34, 149, 33, 28, 26, 25, 21, 2148, 2197,
	1207, 609, 20136, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 71090, 67274, 20, -70,
	18, -1000, 2514, 822, 33341, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 451, -1000, -1000, -1000, 295,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1392, 664, -1000, -1000, -1000,
	64700, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1710,
	-55, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 660, -1000,
	1699, 206, 1598, -1000, -1000, -1000, -1000, -1000, 67274, -1000,
	-1000, 2860, 2858, 1564, 658, 64276, -1000, 1243, -1000, 758,
	22866, -1000, 1012, -1000, 22866, 294, -1000, -1000, -1000, -1000,
	-1000, 48442, 16039, 48012, 47582, 43732, 63846, 15599, 54874, 1043,
	-1000, -1000, -1000, -1000, -1000, -7, 44594, 67274, -1000, 292,
	-1000, -1000, -1000, -1000, -1000, -1000, 29340, 489, 28875, 476,
	28410, 346, -1000, -1000, -1000, -1000, 2856, 2855, 932, 2854,
	2463, 70666, 1388, 2847, 1381, 1007, 876, 2845, 2844, 2842,
	2838, 2834, 2830, 2824, 1120, 63416, 2222, 1266, 43292, 42852,
	55298, 55298, 2007, 62986, 1117, 1072, -1000, -1000, -1000, -1000,
	-1000, -1000, 2316, 2200, 2167, 54444, -1000, -1000, 2823, 2822,
	2820, 2819, 2817, 70242, 1374, 2816, 1906, 2814, 2813, 2810,
	2809, 2808, 2807, 2806, 2805, 2802, -1000, 54014, 53584, 53154,
	52724, 62556, 42412, 41972, -1000, -1000, -1000, 35057, 6716, 6267,
	62126, 36377, 55298, 55298, -1000, -1000, 29793, 128, -1000, -1000,
	-1000, 2174, -1000, 29793, 128, -1000, 67274, -1000, 2220, 1483,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1776,
	1323, 2667, 41532, 1603, 1127, 2515, 2314, 2308, 1233, 1859,
	2300, 2283, 2279, 2274, 2271, 1287, 1955, 383, 19671, 1274,
	1211, 2270, 2269, 2703, 1709, 47152, 2801, 2800, 2509, 2268,
	2242, 2173, -1000, -1000, -1000, -1000, 1179, -1000, -1000, 50150,
	-1000, -1000, 969, -1000, -1000, 969, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1042, 69394, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1302, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1874, -1000, 1554, -1000, -1000, 1750, 1164, 2197, 1897, 2492,
	2492, 2492, 2544, 437, 434, -1000, 149, -1000, -1000, 77389,
	-1000, -1000, 29793, 29793, 29793, 29793, 29793, 1552, -1000, 656,
	-1000, -1000, 692, -1000, 655, 605, -1000, -1000, -1000, -1000,
	-1000, -1000, 653, 2705, -1000, 867, -1000, -1000, -1000, -1000,
	2657, -1000, 18288, -1000, -1000, -1000, 425, 651, 29793, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 288, 813, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 591, 1482, 589, 589, 589, -1000, -1000, 864, -1000,
	-1000, -1000, 293, 587, 286, 585, -1000, -1000, -1000, -1000,
	2218, 648, 647, -1000, 646, 644, 643, -1000, -1000, -1000,
	639, 638, 637, 636, 633, 632, 631, 629, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 863, -1000, 627, 626,
	625, 624, 620, 616, 615, 612, 608, -1000, -1000, -8,
	67274, -1000, 451, -8, -1000, -1000, 607, -1000, 23319, 23319,
	23319, -1000, -1000, 1696, 29793, -1000, 1916, -1000, 475, -5,
	734, 34197, -1000, 32481, 734, 700, 37663, -1000, 2170, -1000,
	-1000, 606, 283, -1000, -1000, 2160, 67274, 16477, 67274, 55298,
	55298, 55298, 2410, 29793, -1000, -1000, 41092, 67274, 55722, 2602,
	77917, 41092, 67274, 2217, -1000, -1000, -1000, 67274, -1000, 29793,
	-1000, 2601, 1177, 45022, 2561, -30, -1000, -1000, -1000, -1000,
	-1000, -1000, 1882, 1915, 937, 1748, 1078, -1000, 22866, 2456,
	-1000, -1000, -1000, 279, 16477, -1000, 1800, 2387, 1075, -1000,
	1747, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1433,
	2383, -1000, 1486, 2381, 1429, -1000, -1000, 844, 2378, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1613, -1000,
	-1000, 2478, -1000, -1000, 1794, 2373, 0, -1000, -1000, 35501,
	44594, -10, -1000, -1000, -48, -1000, 15159, 77389, -1000, -1000,
	-1000, 77389, 788, -1000, -1000, 2370, -1000, 77389, 784, -1000,
	-1000, 2363, -1000, -1000, -1000, 2799, -1000, 2796, 1837, 2795,
	2794, 2791, -1000, 1343, 1461, 2790, -1000, 2789, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 52294, 1690, -1000, -1000, 51434,
	51864, 875, -1000, 826, 1834, -1000, -1000, 1833, -1000, 855,
	-1000, 2788, 61696, 2036, 826, 1829, -1000, -1000, -1000, -1000,
	-1000, 55298, -1000, 55298, -1000, 55298, -1000, 1193, -1000, 69818,
	-5, -1000, -1000, -1000, -1000, -1000, 2361, 2787, 2786, 2785,
	-1000, 67274, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 177, 2358, -1000, -1000, 177, 2349, -1000, 177, 2347,
	-1000, 165, 2341, -1000, -1000, 1638, 2339, -1000, -82, 2337,
	-1000, -1000, -82, 2335, -1000, -11, -1000, -1000, -1000, 822,
	-1000, 34627, -1000, 34627, 61266, 44170, 779, 665, 39375, 77389,
	-1000, 35501, 77389, -1000, 44170, 51434, -1000, 60836, 51010, -1000,
	-1000, 1116, 1914, -1000, -1000, -1000, -1000, 44170, 44170, 44170,
	-1000, 60406, -1000, -1000, 1558, 1284, 2486, 1548, 55298, -1000,
	1477, -1000, -1000, -1000, 2507, 2213, -1000, 40664, 56994, -1000,
	56570, -1000, 56146, -1000, 55298, -1000, 55298, -1000, 2782, 2781,
	2780, -1000, 2779, 2498, 77389, 2491, -1000, 2338, 1362, 1341,
	67274, -1000, -1000, 67274, -1000, 67274, -1000, -1000, -1000, 1880,
	-1000, -1000, -1000, -1000, 55298, -1000, -1000, -1000, -1000, -1000,
	-1000, 2210, -1000, 1328, -1000, 1476, -1000, 1113, -1000, -1000,
	178, -1000, -1000, -30, -1000, 69394, -1000, -1000, 2197, 1897,
	-1000, 67274, -1000, 1270, 55298, -1000, 1935, -1000, 1161, -1000,
	2197, 1622, 1970, 27945, 1948, 29793, 149, -1000, -1000, 149,
	149, 22413, -1000, -1000, 77917, 77917, 16477, 1059, 29793, 29793,
	29793, 29793, 29793, 29793, 29793, 29793, 29793, 29793, 29793, 29793,
	29793, 29793, 29793, 29793, 29793, 29793, 29793, 29793, 29793, 29793,
	29793, 29793, 29793, 29793, 29793, 29793, 29793, 29793, 29793, 29793,
	29793, 29793, 29793, 1749, 29793, 1040, 29793, 29793, 29793, 29793,
	2000, -1000, -1000, 1504, 487, 1705, -1000, 2642, 2642, 2642,
	77758, 77758, 518, 2778, 692, -1000, 29793, -1000, 128, 29793,
	16917, -1000, 2685, 1153, -1000, -1000, 434, 9453, 1791, -1000,
	433, 17382, -1000, -1000, -1000, 18288, 605, 27480, 29793, 853,
	77389, 14721, 2230, 2072, -1000, 2683, -1000, -1000, 2665, -1000,
	-1000, -1000, -1000, 2665, 1057, 1056, 2682, -1000, 2665, 2665,
	604, 744, 740, 19206, 737, 731, 29793, 29793, 29793, 29793,
	29793, 29793, 29793, 29793, -1000, 27027, 26562, 26097, 31152, 25632,
	29793, 18741, 25167, 24702, 67274, -8, 2600, 29793, 188, -1000,
	75913, -1000, 188, 188, 602, -16, 77389, 1936, 1936, 33769,
	1976, 1569, 1569, 1569, -1000, 601, 682, 14, 13, 10,
	-1000, -1000, 9, 8, 734, 11201, 58702, 1580, 734, 734,
	265, 282, 426, 32053, 1916, 58702, -1000, -1000, 55298, 600,
	16917, 16477, 1145, -18, 244, 1988, 1979, 1978, -1000, 1975,
	1254, -19, 1027, -80, -1000, 4682, -33, -1000, 1109, -1000,
	-1000, -1000, 654, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 857, 597, 596, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 591, 1482, 589, 589, 589, -1000, -1000, -1000, 293,
	587, 286, 585, -1000, -1000, -1000, -1000, -1000, -1000, 2154,
	-48, 55722, 778, -36, 938, -30, -1000, -1000, -1000, 45022,
	969, -1000, 1593, -1000, -1000, -1000, -1000, -1000, -1000, 1125,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2704, -1000, 2652,
	-1000, -1000, 2680, -9, -1000, -1000, 16477, -1000, -31, 1371,
	-1000, 46722, 1720, 2490, 2472, 1189, -1000, 1146, 2543, 50150,
	2564, 2584, 512, -1000, 2150, -1000, -1000, 752, 1326, 1026,
	50150, 1486, -1000, 77917, -1000, 1997, 2541, 1136, 1160, 1136,
	1136, 1154, -1000, 50150, 1024, 1523, 44170, -1000, 1023, -1000,
	-38, 2563, 2579, 156, -1000, 2132, 1022, -1000, -1000, 55298,
	16477, 730, -1000, 44170, -10, 44594, 67274, 242, -1000, 29793,
	128, 29793, 128, -1000, -1000, 2334, -1000, -1000, -1000, 2777,
	1443, 1905, -1000, -1000, -1000, 582, 1828, 2123, 67274, 2001,
	-17, 55298, -1000, 1486, 1825, -1000, -1000, 50580, -1000, 1522,
	-1000, 2333, 2328, 586, 2773, -1000, 1681, 1824, -1000, -1000,
	-1000, 68970, 1070, 2324, 897, 511, 2597, 511, 38519, -1000,
	67274, -1000, 67274, -1000, -1000, -1000, 2769, -1000, 55298, -1000,
	-1000, 55298, -1000, 55298, -1000, 55298, -1000, 55298, 55298, -1000,
	67274, 44170, 44170, 44170, 5616, 45874, -39, -42, 421, -1000,
	59982, 67274, 896, 46298, 67274, 2443, -207, -1000, 779, 779,
	730, -1000, 730, -1000, 55298, 2207, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2768, 2767, -1000, -1000, -1000, 825, 55298,
	67274, 55298, -1000, -1000, 67274, -1000, 67274, -1000, 825, 67274,
	825, 67274, 825, 67274, -1000, -1000, -1000, -1000, -1000, -1000,
	128, 29793, 1219, -1000, 2202, -1000, 2199, -1000, 39, -1000,
	-1000, -1000, -1000, 1414, 55298, 55298, 55298, 55298, 67274, 55298,
	-1000, 50150, -1000, -1000, 2197, -1000, -1000, 1871, -1000, -12,
	909, -1000, -1000, -1000, -1000, -1000, 77389, 474, -1000, -1000,
	77389, 1321, 1974, -1000, 1974, -14, -1000, 75625, 1934, 55298,
	-1000, -1000, -1000, -1000, -1000, 751, 831, 831, 1047, 1047,
	1047, 1047, 2577, 3656, 1246, 3525, 5782, 5782, 4028, 4028,
	4028, 4028, 4028, 5782, 1378, 407, 407, 1378, 1378, 1378,
	1378, 1378, 407, 407, 407, 5782, 5782, 5782, 77758, 77470,
	6564, 29793, 29793, 1019, 1500, 487, 6326, 29793, 4007, 4007,
	4007, 4007, -1000, 1216, -1000, -1000, -1000, -1000, 2115, 572,
	31152, 31152, -1000, -1000, -1000, -1000, 17835, 29793, -1000, -1000,
	-1000, -1000, 24237, -1000, -1000, 75256, -250, 420, -137, 53,
	-1000, 29793, 29793, 29793, 419, -1000, 418, -1000, -1000, 1004,
	-1000, 1003, 1001, 996, -1000, 571, 230, 29793, 67274, -1000,
	72544, 678, -47, -1000, -52, 1166, -1000, 29793, 229, -1000,
	1567, 562, 560, 415, -57, -1000, 412, 749, 743, 411,
	406, 403, 29793, -1000, -1000, -1000, -1000, -1000, 74968, -1000,
	-1000, -1000, -1000, -1000, 77101, 72281, 71991, 71945, 8784, 10620,
	10271, -59, 393, -1000, 2114, -137, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 386, -1000, 385, -1000, 77020, -137,
	379, 5387, -1000, 31152, 31152, 31152, -1000, 376, -1000, 75994,
	-1000, 76651, 23784, 23784, 23784, 372, 76732, 29793, -137, -60,
	-1000, -73, -1000, -1000, 559, -79, 848, 23319, 32911, 16477,
	-1000, 848, 848, 29793, -1000, 29793, 1943, -1000, -1000, -1000,
	1941, 1950, 1936, 33769, -1000, -1000, -1000, -1000, 58702, 681,
	734, -1000, -1000, -1000, -1000, -1000, 58702, -1000, 2657, 2343,
	-1000, -1000, -1000, 67274, 451, -1000, 58702, 58702, 16477, 734,
	-1000, 371, 36805, 53, 220, -1000, -1000, 16477, 2009, 2009,
	2009, 2009, -1000, -1000, 67274, 2615, -1000, 1502, -1000, 77917,
	-1000, 690, 970, -1000, 2672, 558, -1000, 2665, 2665, 67274,
	138, 22866, -1000, 969, -1000, -1000, 1258, -1000, 1450, -1000,
	1050, -1000, -1000, -1000, 22866, -1000, 1402, 67274, 67274, 55298,
	-1000, -1000, 1821, 68546, 1819, 77917, 67274, -1000, -1000, 556,
	555, 1931, 1930, 67274, 67274, 1929, 68122, 67698, 67274, 1499,
	29793, 1547, 1361, 128, 128, -1000, -1000, 128, 551, 1048,
	55298, 55298, 55298, 1393, -1000, -1000, -1000, -1000, -1000, 49726,
	-1000, -1000, 2671, -1000, 1136, -1000, -1000, -1000, 1136, 1486,
	1345, 55298, 44170, 836, 67274, 1526, 128, 128, -1000, -1000,
	128, 550, 16477, 1431, -1000, 2043, -1000, -81, -1000, -1000,
	14283, 77389, -1000, 77389, -1000, 67274, -1000, 866, 67274, 46298,
	797, 2323, 38091, -48, 779, 44170, 55298, -17, -1000, 1486,
	2315, 451, -1000, -1000, 44170, 44170, 44170, 2766, 549, 2765,
	-1000, 55298, 2312, 1678, 1808, 2322, 716, 67274, 848, 33769,
	1404, -1000, 37235, 884, 67274, 1309, 76, -1000, -1000, -1000,
	23, 67274, -1000, 2764, -1000, -1000, 177, 177, 177, -1000,
	165, 1638, -1000, -82, -82, -1000, -1000, 5616, 5616, 779,
	-25, 548, -1000, 723, 722, 35939, 44170, -87, -1000, -1000,
	-1000, -1000, -1000, 55298, 67274, 592, 2032, 67274, -88, -1000,
	219, 546, -1000, 779, 35501, 2112, -1000, -1000, 834, -1000,
	1098, -1000, -1000, -1000, -1000, -1000, -1000, -2, -48, -48,
	-1000, 825, -1000, 825, -1000, 825, -1000, 77389, -1000, 1215,
	1199, 67274, -1000, 16477, 67274, 55298, 16477, 55298, 2183, 2179,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1321, -1000,
	29793, -1000, -1000, -1000, 22413, 1756, -1000, -1000, 55298, -3,
	29793, 29793, 6309, 5019, 29793, 31152, 31152, -1000, 29793, 4835,
	-1000, -1000, -1000, -1000, -1000, 2109, 545, 29793, 77917, 7131,
	6934, -1000, 370, 10225, 1378, -1000, 29793, -1000, 369, 21960,
	-1000, 76282, -13, -95, -1000, 2694, 1848, 1550, 1449, 1240,
	2670, 13845, -137, -97, -1000, -1000, 689, -1000, 2275, -1000,
	29793, 76363, 13407, -1000, 38947, 849, 1583, -1000, -1000, 2665,
	739, -1000, -1000, -1000, 739, -1000, 74922, -1000, 77917, 77917,
	29793, 29793, -1000, 29793, 29793, 29793, -1000, -1000, 29793, -1000,
	-1000, 2102, 29793, -1000, 77917, 77917, 31152, 31152, 31152, 31152,
	31152, 31152, 31152, 31152, 31152, 31152, 31152, 31152, 31152, 31152,
	31152, 31152, 31152, 31152, 31152, 1892, 31152, 2634, 2634, 2634,
	-1000, 2178, 2102, 29793, 29793, 77917, 366, 364, 363, -1000,
	29793, -137, -1000, -1000, 5616, -1000, 2071, -1000, 29793, -1000,
	-175, -1000, 1916, -1000, -1000, 2071, 2071, -98, 77389, 33769,
	33769, -1000, 544, 29793, 1933, -1000, 676, -1000, -100, -1000,
	58702, -1000, 675, -251, -1000, 720, -1000, -1000, -1000, -1000,
	451, -1000, -1000, -1000, 199, 58702, -1000, -103, -1000, 2592,
	360, 16477, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -48,
	1595, 2693, -1000, 2669, 687, 672, 358, 2665, 348, 344,
	-48, 67274, -1000, -30, -1000, -1000, -1000, 29793, -1000, -1000,
	2489, 987, 978, -1000, 2306, -1000, 1798, -1000, 889, -1000,
	1275, -1000, 29793, 29793, 543, 542, 1432, 2759, 895, 2295,
	1638, 2290, 1638, -1000, -1000, 767, -1000, 77389, 541, 540,
	-1000, -31, 1340, 833, -1000, -1000, 29793, 29793, 59554, -1000,
	359, 2478, -4, -1000, 975, -1000, -1000, -1000, -1000, 1486,
	972, -1000, -1000, 1521, -1000, -1000, 827, -1000, -1000, 29793,
	-1000, -38, 968, 779, 2100, -1000, -1000, 2758, 2757, 2756,
	342, -108, -45, 77917, 2590, 1648, 67274, 55298, 736, -1000,
	2657, -1000, -1000, -1000, 55298, 2585, -1000, 826, -1000, -1000,
	2753, -1000, 894, 16477, 55298, 2289, 1896, 716, 45450, -1000,
	826, 1583, -71, -1000, 1309, 21495, 2475, -111, -1000, -1000,
	-1000, 848, 38519, 33769, 29793, 2752, -113, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 59130, 59130, 44170, 44170,
	44170, 779, 67274, 67274, 46298, 2751, 539, 67274, 67274, 536,
	-1000, 67274, 67274, 2742, 44170, -1000, -1000, 128, -1000, 1591,
	55298, 12969, -1000, -1000, -1000, -1000, -1000, 825, -1000, -1000,
	1530, 1724, 1530, 1313, 1311, 1608, 74634, -1000, -1000, 1972,
	2483, 16477, 2617, 4007, 29793, 29793, 262, 5487, 4621, 4007,
	29793, 29793, 77917, 10739, -116, 29793, 29793, -1000, 29793, 671,
	77389, 2692, 29793, 339, 337, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 336, -1000, -1000, -1000, -1000, -1000,
	77389, 29793, 195, -1000, -1000, -1000, 71514, -1000, 29793, 334,
	333, -1000, -1000, -1000, 332, 331, 9934, 5312, 74346, 74300,
	74012, 77389, 2178, 77389, -1000, -1000, 729, 729, 1144, 1144,
	1144, 1144, 2634, 214, 782, 843, 245, 245, 245, 514,
	528, 528, 245, 245, 245, 2098, 1898, 535, 4046, -1000,
	-1000, 77389, 77389, 327, -1000, -1000, -1000, -137, 326, 2067,
	2539, 77389, -1000, 33769, 2067, 2067, -1000, -1000, 1950, 67274,
	77389, 33769, -5, -1000, 2657, -1000, -1000, 2343, -1000, 11651,
	-1000, 16477, -1000, -1000, 36805, -1000, 534, -1000, 166, -1000,
	-1000, 670, 2740, 686, -1000, 314, -1000, -1000, -48, 77389,
	67274, 67274, 67274, 2266, -1000, 3618, -1000, 73724, -122, -1000,
	75625, 29793, 67274, -1000, 1448, 1969, 920, -1000, 2028, 67274,
	-1000, 67274, -1000, -1000, 67274, 67274, 55298, 2253, -124, 77389,
	-62, -1000, 718, -1000, 1156, -1000, 12531, 55298, 55298, 44170,
	2251, -131, 16477, -1000, 44170, -1000, -1000, -1000, 2018, -1000,
	57848, 1667, 128, -1000, 2738, 532, -1000, 1587, -1000, 668,
	1486, 128, -1000, -1000, 531, 67274, 1671, 529, 16477, 1893,
	716, 45450, -1000, 1070, 1970, -1000, -69, -1000, 525, 128,
	1583, -1000, -71, 77389, -1000, 717, -1000, -136, -1000, -1000,
	312, -1000, 2440, 2434, -1000, -1000, 29793, 513, 501, 67274,
	2431, -1000, -1000, -142, -1000, 1910, -1000, -1000, -1000, -1000,
	-1000, 16477, 1281, -1000, 497, 496, -1000, -1000, -1000, -1000,
	-1000, 2483, 4007, 4007, 29793, 29793, 29793, 4007, 10739, -143,
	-1000, 4007, 4007, -137, -1000, -1000, 76282, -1000, -1000, -1000,
	77389, 12093, 1535, -1000, 73678, -1000, -1000, -1000, -1000, 29793,
	29793, -1000, -1000, -1000, -1000, -1000, 31152, 2095, 493, 77917,
	-1000, -1000, 830, 29793, 29793, 1916, 830, 830, -1000, -144,
	-1000, 734, -1000, -1000, -1000, 2657, 166, -1000, 2736, 16477,
	685, -1000, 2735, -1000, -1000, -1000, -1000, 67274, -1000, 67274,
	-1000, 16477, 67274, 2093, 1785, -1000, -1000, 1924, 488, 31152,
	55298, 783, 2097, 1426, 29793, 1756, -151, -152, 1775, -1000,
	-1000, 1772, 29793, -1000, 77917, 55298, 1638, 1638, -153, -154,
	-1000, 29793, 966, 67274, 21042, -1000, 2734, 2478, -1000, -1000,
	-1000, 29793, 962, -1000, -82, 1526, 2049, -1000, -1000, -1000,
	-1000, 1923, -1000, -1000, 67274, 1921, 798, -1000, 46298, 797,
	799, -1000, -1000, -1000, 29793, -1000, 55298, 29793, 1661, -1000,
	716, 45450, -1000, 2322, 1309, -1000, 2399, 67274, 2471, -1000,
	1970, 487, -1000, 779, 485, 484, -159, 29793, 29793, -160,
	481, 779, -94, -1000, 733, 480, -1000, -1000, 55298, 55298,
	29793, 29793, -1000, 4007, 4007, 4007, -1000, 310, -1000, -1000,
	1583, 2532, -1000, 73390, 73099, 4379, 31152, 77917, -161, -1000,
	67274, 77389, -137, -1000, -1000, -1000, 58702, 667, -1000, 2733,
	-1000, -1000, 1805, -1000, -1000, -1000, 67274, 1790, -1000, -1000,
	29793, 4046, 479, 29793, -1000, -1000, 1990, 2135, 2018, 478,
	-1000, -1000, -1000, -1000, -1000, 1411, -1000, -1000, 77389, 2494,
	-1000, -1000, -1000, 477, 464, 77389, 462, 713, 2094, -1000,
	-1000, -1000, 77389, 461, 797, -1000, 1543, 1667, 459, -1000,
	-1000, -1000, 1993, 307, 2581, 799, -1000, 2641, -1000, -168,
	894, -170, 55298, 45450, -1000, 1896, -1000, 1068, -178, 67274,
	1309, -1000, -1000, 44170, 44170, 1426, -179, -180, -1000, 44170,
	-1000, 1910, -1000, 67274, -1000, 67274, -1000, -1000, -181, -186,
	-1000, 1510, 29793, -1000, -1000, 4379, -187, -1000, -134, -1000,
	2568, -1000, -1000, -1000, -1000, -1000, 2265, 73021, 1863, 67274,
	72626, 2129, -1000, -1000, 1526, 67274, 55298, 893, 16477, 1530,
	1530, 29793, 20589, 1540, 29793, -1000, 55298, 67274, -1000, 2429,
	2018, 128, -1000, -1000, 1426, 457, 1426, 456, -1000, 1893,
	1176, -1000, 848, -1000, -1000, -188, -189, 2018, 1426, -1000,
	-194, -1000, -197, -202, -1000, -1000, 302, 30699, 30699, 30699,
	-137, -1000, 67274, 452, 2225, -1000, 1620, 1383, 298, 892,
	-1000, -1000, 2097, -205, 451, -1000, 29793, -1000, -210, -1000,
	883, -216, -1000, 882, -217, -1000, 2092, -1000, -218, 449,
	-219, -1000, -1000, -1000, 1526, 798, 2018, 29793, 2018, 29793,
	-1000, 38519, -1000, 779, 779, 1526, 2018, 779, -1000, -1000,
	-1000, 2284, -1000, 31605, 1646, 1299, 75544, 2284, 2284, -1000,
	-1000, 67274, -1000, 1656, 1649, 1209, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1863, 77389, -1000, 1530, 2046, -1000,
	1530, 2080, -1000, 1538, -1000, 67274, -1000, 67274, 797, -1000,
	1526, -224, 1526, -226, -204, -1000, -1000, -1000, 1526, -1000,
	-1000, 1403, 2608, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2417, -1000, 907, 1618, 1618, 1620, -1000, 443,
	-1000, 442, -1000, -227, -1000, -1000, 845, 1426, 845, 1426,
	-1000, -1000, 1288, -1000, -1000, 1573, 30246, -1000, 2618, -1000,
	-1000, 1928, -1000, 2097, 29793, 29793, 1624, -1000, 2732, 2018,
	-1000, 2018, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -229,
	-234, -1000, -1000, -1000, -1000, 1526, 1526, 1526, 959, 845,
	845, -1000, 440, -1000, -1000, 29793, -242, 1526, -1000,
}
var sqlPgo = [...]int{

	0, 3395, 3390, 3389, 3388, 3387, 3386, 3385, 3384, 3382,
	3379, 3377, 3375, 3374, 3371, 3370, 3367, 3365, 3363, 3361,
	3354, 3353, 3352, 3350, 3349, 3348, 3345, 3344, 3343, 3342,
	3341, 3340, 3338, 3332, 3330, 3329, 3322, 3320, 3318, 3313,
	3306, 3305, 3304, 3303, 3298, 3297, 3296, 3294, 32, 3293,
	3290, 3289, 3287, 3284, 3283, 3282, 3281, 3279, 3275, 3274,
	3273, 3270, 3268, 3264, 3263, 3262, 37, 3256, 215, 3254,
	3252, 3250, 3246, 3244, 3242, 3241, 3236, 3233, 3230, 214,
	3229, 116, 3225, 3224, 3222, 3221, 3220, 212, 3218, 3217,
	3216, 3215, 3214, 3213, 3212, 3210, 128, 3209, 3208, 176,
	3207, 3206, 3205, 3199, 3197, 3196, 3195, 3194, 3193, 3191,
	187, 3187, 211, 3186, 3185, 3180, 3179, 3177, 3176, 3175,
	3174, 3173, 3172, 3171, 3170, 3169, 3168, 3167, 3166, 3165,
	3164, 3163, 3162, 3161, 3160, 3157, 3156, 3153, 3147, 3146,
	224, 169, 3145, 3144, 210, 208, 3141, 3136, 102, 92,
	84, 3132, 93, 194, 196, 7920, 188, 3131, 3128, 3124,
	151, 3123, 3121, 3118, 3116, 69, 55, 140, 138, 133,
	135, 200, 3115, 3114, 71, 50, 34, 31, 104, 3113,
	3112, 3111, 1977, 99, 3108, 3107, 205, 186, 3105, 1452,
	3103, 121, 56, 98, 58, 96, 3102, 107, 22, 3100,
	125, 43, 3099, 123, 70, 33, 6274, 6788, 3098, 76,
	219, 78, 198, 185, 173, 171, 165, 130, 111, 3097,
	190, 3095, 66, 159, 3094, 3091, 3089, 60, 146, 67,
	3087, 2, 5, 152, 9, 74, 14, 3083, 12, 3080,
	3078, 3071, 3067, 28, 129, 3063, 110, 91, 3060, 20,
	3059, 94, 158, 3058, 179, 101, 3056, 3054, 199, 160,
	180, 3052, 13, 181, 3051, 3045, 3044, 3043, 3041, 105,
	21, 100, 3040, 3039, 112, 183, 3038, 36, 3034, 137,
	68, 113, 209, 114, 163, 87, 168, 142, 174, 3033,
	3031, 3029, 148, 3027, 3022, 109, 157, 3018, 3017, 217,
	35, 52, 182, 54, 3010, 117, 3008, 149, 3005, 3003,
	3001, 216, 141, 167, 6, 88, 97, 27, 8, 175,
	115, 90, 80, 2999, 3084, 1536, 359, 2998, 120, 95,
	49, 89, 127, 203, 62, 2997, 2996, 124, 2995, 2993,
	2988, 2987, 144, 2986, 2985, 2984, 108, 79, 63, 2981,
	119, 65, 11, 122, 206, 82, 164, 153, 193, 2979,
	143, 2978, 75, 134, 2977, 155, 191, 298, 2976, 1216,
	139, 2975, 201, 2974, 2973, 2971, 2970, 573, 2969, 2967,
	1198, 2965, 118, 2944, 2943, 145, 126, 161, 72, 30,
	2942, 61, 29, 2941, 150, 38, 2934, 319, 85, 0,
	6657, 5095, 5459, 2931, 3154, 2924, 162, 106, 2922, 2919,
	2918, 73, 2912, 53, 2910, 2909, 40, 2908, 19, 7,
	10, 17, 15, 1392, 543, 2907, 2906, 86, 103, 131,
	2905, 213, 172, 2903, 2900, 2899, 83, 2898, 26, 2897,
	24, 2896, 2895, 25, 3, 18, 2894, 2891, 189, 2890,
	184, 2889, 2888, 2598, 2887, 202, 64, 2886, 197, 2885,
	136, 156, 2882, 2881, 2880, 2879, 195, 2878, 2877, 16,
	23, 1, 2876, 2875, 2874, 154, 4, 2444, 2873, 2870,
	57, 2869, 2864, 147,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 3, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 12, 12, 7, 7, 8, 8, 8, 36,
	36, 10, 10, 9, 9, 9, 11, 11, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 14, 14, 26,
	26, 15, 15, 28, 28, 16, 16, 29, 29, 455,
	455, 19, 31, 20, 32, 13, 456, 456, 456, 456,
	24, 21, 33, 22, 22, 22, 22, 22, 151, 151,
	151, 151, 18, 18, 27, 27, 168, 168, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	454, 454, 170, 170, 169, 164, 164, 457, 457, 171,
	171, 171, 173, 173, 37, 37, 95, 95, 95, 96,
	96, 97, 97, 152, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 83, 83, 397, 397, 398, 398, 147,
	147, 148, 148, 148, 148, 149, 149, 150, 150, 150,
	51, 39, 39, 39, 39, 39, 39, 39, 40, 40,
	40, 40, 41, 41, 41, 41, 41, 41, 42, 42,
	42, 42, 42, 42, 49, 49, 49, 49, 141, 141,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 463,
	463, 463, 463, 463, 463, 463, 463, 463, 463, 463,
	463, 463, 463, 463, 463, 463, 463, 463, 463, 463,
	464, 464, 465, 465, 466, 466, 467, 467, 467, 467,
	467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
	467, 467, 467, 467, 467, 467, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 63, 63, 245, 245, 221, 221, 64, 64, 64,
	65, 65, 66, 66, 53, 53, 450, 450, 259, 259,
	364, 364, 68, 68, 278, 278, 69, 69, 69, 69,
	69, 69, 70, 70, 70, 70, 70, 70, 70, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 77,
	77, 77, 78, 78, 78, 75, 75, 75, 73, 73,
	73, 72, 72, 72, 76, 76, 76, 74, 74, 74,
	260, 260, 79, 79, 79, 79, 79, 79, 79, 79,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 366, 366, 80, 80, 80,
	335, 335, 84, 84, 84, 293, 293, 85, 85, 85,
	85, 85, 86, 86, 86, 86, 98, 98, 98, 98,
	453, 453, 252, 252, 186, 186, 186, 186, 91, 91,
	91, 91, 92, 92, 92, 93, 93, 146, 146, 104,
	104, 104, 104, 104, 103, 103, 103, 103, 103, 103,
	43, 43, 43, 44, 44, 45, 45, 46, 46, 47,
	47, 48, 48, 48, 48, 48, 106, 106, 460, 460,
	108, 105, 105, 105, 107, 107, 107, 107, 109, 110,
	110, 110, 110, 110, 110, 110, 110, 111, 111, 391,
	391, 268, 268, 389, 389, 405, 405, 390, 390, 225,
	225, 225, 225, 225, 226, 226, 226, 396, 396, 396,
	396, 396, 396, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 131, 131, 131, 140, 140,
	140, 140, 140, 140, 140, 133, 133, 133, 121, 121,
	113, 113, 113, 113, 113, 117, 117, 117, 117, 117,
	117, 117, 117, 114, 114, 123, 123, 123, 123, 123,
	118, 118, 120, 120, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 115, 115, 115, 115, 125, 125, 125,
	125, 299, 299, 299, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 136, 136, 136, 136, 136, 136,
	349, 349, 132, 132, 132, 132, 135, 135, 135, 135,
	283, 283, 129, 129, 129, 130, 130, 130, 134, 134,
	137, 137, 137, 137, 116, 116, 116, 468, 468, 468,
	138, 138, 128, 128, 139, 139, 139, 139, 139, 139,
	139, 139, 127, 127, 127, 126, 126, 126, 126, 119,
	451, 451, 448, 448, 448, 448, 448, 448, 448, 449,
	449, 452, 452, 89, 89, 89, 58, 58, 469, 469,
	469, 59, 59, 470, 470, 470, 458, 458, 458, 459,
	459, 459, 459, 459, 459, 227, 227, 228, 228, 316,
	316, 316, 316, 316, 231, 231, 172, 172, 172, 234,
	235, 235, 232, 232, 233, 233, 233, 237, 237, 236,
	239, 239, 238, 315, 412, 412, 414, 414, 414, 414,
	414, 414, 414, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 410, 410, 410, 411, 406, 406, 407,
	407, 407, 407, 229, 229, 230, 230, 230, 230, 408,
	409, 250, 250, 352, 413, 413, 415, 415, 417, 471,
	471, 471, 471, 471, 471, 472, 472, 314, 314, 243,
	243, 418, 418, 418, 418, 419, 419, 419, 419, 419,
	422, 421, 420, 420, 420, 420, 420, 345, 345, 345,
	62, 62, 62, 280, 280, 279, 279, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 143, 143, 60, 60, 60, 178, 178, 57,
	57, 57, 474, 474, 61, 61, 61, 475, 475, 67,
	67, 67, 67, 67, 67, 56, 56, 56, 56, 56,
	476, 476, 300, 300, 298, 298, 249, 249, 351, 190,
	190, 165, 165, 165, 23, 25, 25, 17, 17, 34,
	34, 35, 35, 30, 30, 461, 461, 462, 462, 90,
	90, 94, 94, 94, 102, 102, 142, 142, 142, 142,
	142, 142, 142, 38, 38, 38, 38, 50, 50, 50,
	50, 100, 478, 478, 478, 101, 101, 477, 477, 185,
	185, 185, 185, 187, 187, 311, 311, 312, 312, 479,
	479, 313, 313, 313, 313, 180, 179, 181, 181, 55,
	55, 55, 174, 174, 175, 175, 176, 176, 177, 177,
	480, 480, 87, 87, 87, 145, 145, 220, 220, 307,
	307, 307, 244, 244, 195, 195, 310, 310, 308, 308,
	308, 308, 277, 277, 277, 144, 144, 257, 257, 270,
	270, 271, 271, 361, 361, 272, 99, 99, 155, 155,
	153, 153, 153, 153, 153, 153, 160, 160, 261, 261,
	161, 161, 161, 161, 162, 162, 162, 154, 154, 154,
	156, 156, 156, 156, 156, 156, 156, 159, 159, 159,
	159, 163, 163, 163, 158, 158, 429, 429, 429, 431,
	431, 432, 428, 428, 430, 430, 473, 473, 282, 282,
	282, 241, 242, 240, 240, 247, 247, 246, 248, 248,
	350, 350, 350, 166, 166, 166, 275, 275, 275, 275,
	303, 303, 301, 301, 301, 302, 302, 304, 304, 304,
	305, 305, 306, 306, 274, 274, 331, 331, 157, 157,
	157, 254, 254, 254, 255, 255, 322, 322, 322, 322,
	322, 322, 323, 323, 321, 321, 321, 321, 353, 353,
	353, 353, 353, 353, 353, 353, 353, 354, 354, 256,
	256, 355, 309, 309, 446, 446, 446, 447, 447, 348,
	348, 356, 356, 356, 356, 356, 356, 346, 346, 347,
	347, 362, 363, 363, 286, 286, 286, 286, 284, 284,
	287, 287, 287, 287, 285, 285, 357, 357, 357, 357,
	276, 276, 358, 358, 358, 359, 317, 318, 318, 367,
	367, 367, 367, 382, 253, 253, 253, 253, 253, 481,
	481, 368, 368, 368, 368, 368, 368, 368, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	372, 372, 372, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 381, 381, 381, 381, 381, 373, 373, 378, 378,
	379, 379, 379, 374, 375, 380, 380, 380, 380, 482,
	482, 384, 384, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 370, 370, 370, 377, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 294,
	294, 295, 295, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 326, 326,
	326, 326, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 423, 423, 423,
	423, 423, 423, 423, 423, 426, 426, 427, 427, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 433,
	433, 434, 434, 436, 436, 437, 437, 438, 439, 439,
	439, 440, 441, 441, 435, 435, 442, 442, 442, 442,
	443, 443, 444, 444, 444, 444, 444, 445, 445, 445,
	445, 445, 337, 337, 338, 338, 344, 344, 344, 224,
	224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
	224, 224, 224, 224, 224, 188, 188, 188, 188, 188,
	266, 266, 264, 264, 264, 267, 267, 265, 265, 263,
	263, 262, 262, 334, 334, 332, 332, 336, 336, 288,
	288, 383, 383, 383, 383, 383, 383, 383, 383, 289,
	289, 289, 297, 290, 290, 291, 291, 291, 291, 291,
	328, 329, 292, 292, 292, 330, 330, 339, 343, 343,
	342, 341, 341, 340, 340, 319, 319, 320, 320, 273,
	273, 483, 483, 269, 269, 360, 360, 360, 360, 223,
	223, 258, 258, 222, 222, 215, 215, 216, 216, 216,
	216, 251, 251, 385, 385, 385, 386, 387, 388, 333,
	205, 204, 192, 193, 203, 202, 201, 191, 194, 198,
	199, 200, 196, 197, 211, 210, 209, 207, 208, 365,
	217, 217, 218, 218, 218, 219, 219, 219, 219, 189,
	189, 212, 212, 213, 214, 214, 206, 206, 206, 182,
	182, 182, 183, 183, 184, 184, 395, 395, 393, 393,
	393, 394, 394, 394, 394, 392, 392, 392, 392, 392,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 401, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 404, 404,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 1, 3, 4,
	6, 1, 3, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 4, 6, 4,
	6, 6, 9, 6, 9, 6, 5, 6, 5, 1,
	1, 5, 5, 6, 6, 4, 4, 4, 4, 3,
	4, 4, 4, 7, 7, 9, 8, 9, 5, 3,
	5, 7, 4, 12, 4, 12, 1, 3, 5, 5,
	2, 5, 3, 6, 4, 6, 5, 6, 6, 4,
	8, 3, 4, 6, 3, 6, 4, 3, 1, 3,
	2, 1, 1, 3, 1, 3, 2, 2, 0, 1,
	1, 0, 2, 0, 7, 2, 5, 6, 2, 1,
	3, 1, 3, 1, 6, 4, 9, 7, 12, 12,
	12, 9, 2, 7, 2, 1, 1, 1, 3, 3,
	0, 3, 1, 3, 1, 1, 3, 2, 5, 0,
	5, 1, 2, 1, 2, 1, 2, 2, 3, 3,
	3, 3, 3, 5, 3, 3, 5, 3, 3, 5,
	3, 3, 5, 3, 6, 6, 6, 6, 1, 1,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 3,
	3, 4, 3, 4, 7, 4, 4, 4, 3, 5,
	7, 4, 3, 3, 4, 3, 3, 3, 3, 3,
	2, 0, 1, 0, 1, 0, 3, 3, 3, 3,
	3, 6, 4, 4, 4, 3, 5, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 4, 1, 1, 2, 1,
	2, 7, 3, 2, 0, 1, 3, 3, 1, 0,
	1, 2, 2, 1, 6, 5, 1, 2, 1, 3,
	2, 0, 9, 3, 2, 0, 2, 2, 2, 2,
	2, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 4,
	6, 3, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 3, 5, 3, 3, 5, 3,
	1, 3, 2, 2, 5, 3, 3, 6, 6, 3,
	1, 1, 2, 1, 1, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 2, 1, 2, 1, 3, 5, 7, 2,
	3, 0, 3, 5, 2, 3, 0, 2, 3, 2,
	3, 2, 6, 4, 7, 2, 6, 4, 7, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 2,
	1, 2, 2, 3, 2, 4, 3, 2, 2, 1,
	2, 1, 3, 3, 1, 2, 1, 2, 1, 2,
	1, 1, 3, 5, 4, 6, 4, 3, 0, 1,
	3, 2, 4, 2, 4, 1, 6, 3, 1, 1,
	5, 3, 2, 6, 3, 3, 4, 4, 3, 1,
	3, 2, 3, 3, 1, 3, 1, 2, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 1, 3, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 1, 1,
	1, 1, 1, 2, 2, 5, 7, 3, 3, 3,
	3, 4, 4, 4, 3, 4, 4, 3, 4, 4,
	3, 4, 4, 5, 3, 5, 5, 5, 7, 3,
	3, 3, 4, 3, 5, 3, 6, 5, 6, 3,
	5, 6, 3, 4, 3, 4, 3, 3, 4, 4,
	5, 0, 1, 1, 3, 2, 4, 3, 3, 5,
	4, 3, 5, 3, 5, 4, 6, 4, 6, 4,
	1, 0, 3, 4, 4, 5, 7, 5, 3, 3,
	2, 0, 4, 2, 3, 4, 2, 3, 3, 3,
	4, 3, 3, 3, 3, 4, 3, 1, 1, 1,
	2, 3, 2, 3, 6, 6, 7, 9, 7, 9,
	3, 4, 10, 10, 3, 5, 5, 5, 3, 5,
	2, 0, 1, 1, 1, 1, 3, 2, 2, 2,
	1, 2, 0, 3, 3, 2, 10, 13, 0, 2,
	3, 9, 12, 0, 2, 3, 1, 1, 0, 1,
	2, 2, 2, 2, 1, 1, 0, 1, 3, 1,
	1, 1, 1, 3, 8, 0, 1, 1, 0, 2,
	1, 0, 1, 0, 9, 9, 3, 1, 3, 7,
	1, 3, 11, 3, 2, 0, 3, 1, 2, 2,
	3, 2, 6, 2, 1, 1, 2, 4, 2, 5,
	5, 5, 2, 8, 9, 6, 5, 3, 1, 5,
	8, 5, 11, 3, 0, 2, 4, 3, 3, 1,
	5, 1, 3, 1, 2, 0, 1, 2, 2, 0,
	1, 3, 3, 2, 2, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	5, 8, 4, 1, 0, 1, 2, 2, 1, 2,
	3, 3, 2, 2, 3, 2, 2, 2, 2, 2,
	3, 1, 4, 2, 4, 7, 3, 3, 0, 3,
	6, 3, 1, 1, 8, 7, 5, 0, 1, 6,
	7, 6, 5, 3, 4, 14, 17, 14, 17, 4,
	0, 2, 2, 0, 1, 0, 1, 3, 3, 2,
	0, 1, 1, 0, 6, 6, 8, 6, 8, 6,
	8, 6, 8, 6, 8, 1, 0, 2, 0, 2,
	2, 3, 3, 2, 2, 2, 1, 2, 1, 2,
	1, 2, 1, 3, 2, 3, 2, 2, 2, 2,
	2, 2, 1, 1, 0, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 0, 1, 3, 1,
	0, 1, 1, 1, 1, 2, 3, 2, 2, 8,
	11, 3, 3, 0, 3, 0, 3, 0, 3, 0,
	1, 0, 6, 7, 3, 6, 3, 1, 3, 1,
	4, 2, 1, 3, 1, 3, 8, 5, 3, 4,
	3, 0, 2, 2, 0, 10, 3, 2, 0, 1,
	3, 1, 1, 3, 3, 5, 1, 1, 3, 3,
	2, 3, 4, 3, 4, 5, 0, 3, 0, 2,
	2, 4, 2, 3, 0, 2, 1, 2, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 8, 8, 8,
	2, 4, 4, 4, 2, 2, 2, 2, 3, 1,
	3, 6, 1, 0, 1, 0, 1, 0, 1, 1,
	0, 1, 5, 1, 0, 1, 0, 3, 1, 3,
	3, 4, 5, 2, 2, 0, 2, 2, 1, 1,
	1, 0, 2, 2, 5, 2, 3, 1, 3, 0,
	1, 1, 1, 1, 3, 0, 2, 0, 4, 2,
	5, 3, 2, 0, 1, 3, 3, 5, 1, 1,
	1, 1, 1, 3, 2, 4, 4, 0, 8, 4,
	3, 4, 1, 5, 3, 4, 5, 1, 5, 1,
	3, 2, 0, 3, 0, 2, 3, 1, 3, 2,
	0, 3, 5, 6, 4, 6, 4, 3, 2, 1,
	0, 5, 1, 0, 2, 2, 2, 1, 1, 0,
	1, 1, 1, 0, 4, 2, 1, 2, 2, 4,
	1, 3, 1, 2, 3, 2, 2, 1, 0, 2,
	5, 7, 2, 1, 2, 4, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 2, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 5, 4,
	1, 2, 1, 4, 1, 1, 2, 1, 1, 1,
	1, 1, 0, 1, 2, 5, 1, 4, 2, 5,
	1, 4, 3, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 1,
	0, 1, 4, 1, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 5, 4,
	6, 3, 5, 4, 6, 4, 6, 5, 7, 3,
	3, 3, 3, 3, 4, 3, 2, 4, 2, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 4, 1, 3, 1,
	3, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 6, 2, 1,
	5, 1, 1, 1, 1, 2, 1, 5, 5, 3,
	1, 1, 1, 2, 2, 2, 4, 3, 5, 6,
	8, 6, 5, 4, 3, 4, 1, 1, 1, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 6,
	6, 8, 8, 6, 4, 6, 6, 6, 4, 1,
	3, 3, 3, 3, 3, 4, 3, 3, 3, 3,
	3, 4, 3, 4, 3, 4, 3, 4, 4, 3,
	6, 5, 5, 5, 4, 4, 3, 4, 3, 5,
	0, 5, 0, 2, 0, 1, 3, 3, 2, 2,
	0, 6, 1, 0, 3, 0, 3, 3, 3, 0,
	1, 4, 2, 2, 2, 2, 2, 3, 2, 2,
	3, 0, 4, 1, 1, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	2, 3, 1, 2, 3, 2, 3, 2, 3, 1,
	0, 1, 3, 1, 3, 3, 3, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 1, 2, 3, 0, 3, 3, 2, 2, 1,
	2, 2, 3, 2, 1, 1, 1, 5, 1, 2,
	4, 2, 0, 1, 0, 3, 5, 1, 0, 1,
	2, 1, 0, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 3, 1, 1, 1, 1, 5, 3,
	1, 1, 3, 1, 2, 2, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 7, 1, 7, 5, 3, 1,
	1, 1, 1, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 467, -81, -51, -49, -84, -85, -69,
	-86, -80, -98, -102, -90, -104, -142, -3, -37, -39,
	-52, -68, -70, -79, -88, -87, -89, -91, -95, -94,
	-83, -43, -99, -103, -112, -143, -144, -145, 84, 70,
	125, 106, 111, 158, 294, 324, 334, 318, -107, -108,
	353, -38, -50, -101, -100, -4, -10, 27, 41, -40,
	-41, -42, 55, -60, -57, -54, -63, -463, 86, -430,
	-71, -74, -76, -467, 116, 131, 175, 286, -92, -93,
	320, 322, 132, -45, -44, 126, -153, -155, -105, -106,
	-146, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, -127, -128, -129, -130, -131,
	-132, -133, -134, -135, -136, -137, -138, -139, 357, 404,
	42, 367, 71, 119, 328, 21, -5, -6, -7, -8,
	-9, -11, -12, -25, -53, -55, -56, -58, -59, -67,
	-61, -62, -429, -72, -73, -75, -77, -78, 319, -156,
	-154, 464, 417, -14, -19, -20, -15, -16, -18, -21,
	-17, -26, -31, -32, -28, -29, -27, -30, -33, -34,
	-35, -36, -23, -24, -13, -22, 435, 443, -159, -157,
	-158, -163, 341, 425, 381, 467, 467, 467, 467, 467,
	467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
	467, 467, 467, 467, 467, -207, -212, -213, -214, -206,
	-182, -401, -404, 4, -399, -402, 137, 182, 252, 21,
	22, 23, 24, 25, 27, 38, 40, 39, 41, 42,
	45, 47, 48, 51, 52, 53, 54, 55, 56, 59,
	64, 69, 70, 71, 72, 73, 74, 79, 76, 77,
	78, 81, 83, 84, 85, 88, 89, 97, 98, 99,
	100, 101, 102, 106, 109, 108, 111, 114, 115, 116,
	118, 120, 121, 123, 125, 126, 129, 127, 387, 128,
	130, 131, 132, 133, 143, 144, 145, 147, 148, 150,
	152, 156, 157, 159, 163, 165, 166, 167, 168, 174,
	175, 177, 178, 183, 179, 184, 188, 191, 190, 192,
	193, 194, 185, 199, 203, 204, 205, 207, 208, 211,
	212, 213, 214, 215, 218, 217, 220, 223, 224, 227,
	228, 231, 232, 233, 235, 236, 239, 237, 240, 238,
	241, 244, 242, 243, 246, 247, 250, 248, 254, 257,
	172, 259, 260, 262, 263, 264, 280, 267, 268, 269,
	272, 273, 276, 279, 281, 282, 283, 284, 285, 286,
	287, 289, 290, 292, 294, 296, 298, 299, 300, 301,
	302, 303, 304, 306, 307, 309, 310, 311, 312, 313,
	318, 315, 316, 317, 319, 320, 321, 322, 324, 326,
	327, 328, 329, 331, 333, 354, 355, 369, 334, 335,
	336, 337, 338, 339, 340, 344, 348, 345, 346, 347,
	342, 343, 349, 350, 351, 353, 356, 357, 359, 360,
	362, 363, 365, 366, 367, 368, 370, 373, 374, 375,
	371, 372, 380, 378, 379, 382, 383, 384, 385, 386,
	388, 390, 398, 399, 401, 404, 405, 406, 396, 408,
	409, 412, 413, 414, 415, 416, 421, 417, 419, 422,
	423, 424, 430, 429, 436, 437, 439, 440, 441, 33,
	43, 44, 46, 49, 60, 61, 62, 65, 103, 104,
	124, 134, 135, 146, 160, 162, 169, 170, 171, 189,
	195, 197, 201, 221, 256, 258, 274, 278, 291, 293,
	305, 330, 361, 376, 391, 392, 393, 394, 400, 402,
	425, 426, 427, 431, 438, 265, -200, 2, -182, -182,
	294, 26, 2, 26, 290, 343, 383, 385, 2, -453,
	-252, 2, 26, -186, -182, 86, 158, 341, -200, 2,
	-453, -252, 24, 2, -182, 2, -187, 2, 334, -182,
	467, 81, 228, 64, 330, 350, -110, 399, -109, 391,
	336, -111, -391, 2, 244, -182, 467, 467, 467, 467,
	2, 381, 283, 429, 342, 418, 99, 302, 182, -448,
	2, 4, -402, -399, -216, -215, 381, 99, -214, -206,
	457, -213, 467, 467, 467, 2, 204, 205, 301, 300,
	350, 351, 467, 467, 467, 2, 25, 58, 80, 83,
	105, 133, 153, 156, 270, -464, 236, 280, 299, 336,
	349, 380, 388, 401, -459, 368, 59, -458, 418, -474,
	406, 114, -298, 99, 228, 157, 413, 385, 383, 326,
	161, 411, 109, 188, 416, 415, 467, 467, 25, 58,
	67, 83, 114, 133, 153, 156, -466, 280, 299, 333,
	336, 349, 380, 388, 406, 401, 2, 429, 342, 381,
	182, 99, 418, 326, 297, -81, 2, 464, 29, 28,
	353, -152, 381, 198, 2, -182, 204, 205, 2, 467,
	467, -448, 2, 204, 205, 2, 198, 2, 59, 338,
	467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
	467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
	467, 467, 467, 467, 467, 467, 467, 2, -140, 350,
	368, 167, 41, 64, 26, 298, 69, 284, 100, 159,
	182, 183, 212, 80, 81, -299, 40, 205, 204, -349,
	382, 337, 343, 378, 399, 86, 419, 327, 441, 302,
	303, 127, 4, 99, 244, 352, 391, 228, 73, -473,
	2, 381, -477, 2, 399, 399, 2, -477, 2, -477,
	2, -185, 2, 399, 395, -478, 399, 438, 467, 467,
	467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
	467, -154, -156, -155, 467, 467, 467, 467, 467, -140,
	350, 2, 64, 26, -160, -161, 151, -246, -247, 410,
	196, 122, 271, -153, -155, 2, -429, -389, 2, -324,
	-405, -326, 455, 456, 448, 251, 442, -337, 105, 411,
	265, -404, -327, -339, 124, 330, -267, 8, 9, 5,
	6, 7, -189, -369, -333, -377, 403, 136, 255, -219,
	468, 10, 464, -426, -155, -338, 34, 162, 57, -393,
	-218, -371, -379, -375, -376, -481, 47, 53, 52, 388,
	243, 344, 345, 362, 346, 347, 45, 421, 179, 262,
	264, 190, 4, 197, -217, -206, -423, -424, -399, -400,
	189, 195, 191, 361, 192, 193, 194, 44, 305, 147,
	148, 146, 115, 104, 103, 258, 49, 48, 46, 426,
	-380, 101, 391, 392, 393, 394, 207, 208, -182, -401,
	67, 91, 92, 90, 95, 94, 96, 93, 352, 418,
	58, 33, 169, 170, 201, 256, 171, 65, -425, 372,
	87, 155, 187, 173, 200, 202, 206, 222, 225, 245,
	249, 253, 275, 277, 325, 358, -482, 427, 134, 135,
	278, 291, 376, 400, 402, 160, 221, 60, 61, -431,
	306, -432, -200, -431, 467, 467, 469, 467, -240, -241,
	-242, 2, 26, 112, 464, 2, -353, 2, 462, -357,
	-155, 216, -356, 464, -354, -207, 266, -427, 331, -423,
	-424, -189, -206, -218, 4, -243, 464, 466, 99, 381,
	68, 182, -293, 464, -182, 26, 265, 395, 469, -335,
	464, 265, 154, 268, -182, 2, 2, 354, 2, 464,
	-110, 62, 399, 39, 350, -312, 2, -313, -179, -180,
	-181, -362, 203, 296, 304, 444, 441, -389, -460, 154,
	447, 395, -389, -268, 466, 2, -357, 169, -207, 2,
	-204, -392, 4, -399, -402, -400, -403, 67, -401, 26,
	28, 29, 30, 32, 34, 35, 36, 37, 50, 57,
	58, 63, 66, 68, 80, 86, 90, 91, 93, 92,
	94, 95, 96, 105, 107, 110, 112, 113, 117, 119,
	122, 136, 138, 151, 153, 154, 158, 161, 164, 176,
	186, 196, 198, 216, 219, 226, 229, 230, 251, 255,
	261, 265, 266, 270, 271, 288, 295, 308, 323, 341,
	352, 364, 377, 381, 389, 395, 397, 403, 410, 411,
	418, 420, 428, 432, 433, 434, 435, -404, 2, -357,
	169, 2, -209, 169, -357, -212, 2, -397, 169, -395,
	10, -394, 5, 4, -399, -402, -400, 2, -191, -182,
	2, -203, -392, 2, -222, 169, -207, -208, -212, 395,
	469, -258, -215, -216, -251, -182, 466, -324, 2, -99,
	2, -324, 169, 2, -99, 169, 2, -324, 169, 2,
	-99, 169, 2, 2, 2, 401, 2, 83, 169, -182,
	381, 98, 2, 317, -465, 333, 405, 429, 2, 2,
	2, 2, 2, 2, 2, 381, -196, 2, -182, 151,
	342, -475, 306, -397, 169, 2, -397, 169, 2, -210,
	-212, -210, 182, 199, -191, 169, 2, 385, 383, 385,
	383, 154, 2, 198, 2, 198, 2, -358, 2, -359,
	-207, 2, 2, 2, 2, 2, 169, -182, 381, 98,
	2, 214, 2, 2, 2, 2, 2, 2, 2, 2,
	2, -260, 169, 2, -207, -260, 169, 2, -260, 169,
	2, -223, 169, 2, -222, -191, 169, 2, -398, 169,
	2, -397, -398, 169, 2, -366, 2, -365, -394, 425,
	-81, 464, -81, 464, 350, 464, -397, -207, -207, -324,
	-99, 154, -324, -99, -152, 151, 2, 99, 381, -140,
	2, 151, 420, 2, 8, 2, -397, 337, 303, 143,
	2, 354, 2, 355, 64, -299, 441, 64, 154, 2,
	154, 2, -283, 2, 435, -451, 2, 265, 154, 2,
	154, 2, 154, 2, 154, 2, 154, 2, 300, 351,
	205, 2, -99, 432, -324, 432, 2, 398, 213, 128,
	154, -283, 2, 154, 2, 154, 2, 5, 2, 203,
	296, 369, 2, -207, -468, 2, 381, 429, 342, 2,
	2, 76, 77, 154, 2, 154, 2, 154, 441, 2,
	-276, -357, -311, -312, -311, 395, -187, -160, -246, -247,
	-140, 354, 2, -261, 259, 415, 247, 356, 211, -160,
	-275, -301, -302, 226, 138, 261, -282, 26, 112, -282,
	-282, 51, 465, 465, 11, 12, 66, 38, 455, 456,
	457, 458, 149, 459, 460, 453, 454, 452, 445, 446,
	450, 209, 210, 82, 449, 447, 75, 234, 332, 139,
	140, 141, 142, 314, 180, 31, 181, 14, 15, 16,
	30, 270, 225, 442, 173, 358, 448, 17, 18, 19,
	200, 202, 253, 43, 176, -188, -224, -324, -324, -324,
	-324, -324, 277, 464, -273, -319, 462, -155, 464, 464,
	464, 5, 464, 5, -388, 8, -155, -324, -337, 465,
	-265, 464, -155, -337, -332, 464, 330, 462, 464, -340,
	-324, 466, -433, 436, -373, 464, 293, -372, 464, -372,
	-372, 430, -370, 464, 443, 437, 464, -370, 464, 464,
	151, 464, 464, 464, 464, 464, 464, 464, 464, 464,
	464, 464, 464, 464, 430, 464, 464, 464, 464, 464,
	464, 464, 464, 464, 469, -431, -243, 464, -269, -360,
	-324, 457, -269, -269, 265, -262, -324, 87, -286, 206,
	245, 155, 222, 325, 187, -388, -82, -68, -79, -87,
	-99, -112, -144, -145, -321, 468, -348, 443, -155, -354,
	-206, -155, -356, 464, -353, -348, 457, -207, 464, 154,
	464, 466, 154, -251, -392, -191, -207, -217, -218, -222,
	111, -262, -448, -251, -186, 35, -334, -367, -368, -369,
	-378, -374, -377, -381, 47, 53, 52, 388, 243, 344,
	345, 362, 346, 347, 45, 421, 179, 262, 264, 190,
	4, 46, 426, -380, 197, 310, 311, 309, 313, 312,
	189, 195, 191, 361, 192, 193, 194, 44, 305, 147,
	148, 146, 115, 104, 103, 258, 49, 48, 101, 391,
	392, 393, 394, 207, 208, 427, 372, 60, 61, -448,
	-251, 151, -391, -262, 35, -312, 2, 105, -395, 39,
	-479, 469, 224, -226, 233, 250, 166, 266, 439, 259,
	-396, 5, 4, -333, -345, 105, 228, -377, 9, 456,
	-385, 8, 455, -390, -389, 89, 466, -392, -168, 315,
	-167, 23, 27, 116, 423, 129, -233, 184, 283, 124,
	365, 414, -455, -456, 335, 386, 387, 78, 259, 315,
	124, -279, -281, 35, 97, 247, 279, 54, 177, 238,
	239, 367, 431, 124, 315, 435, 124, -456, 315, -456,
	-170, 365, 414, -455, -456, 335, 315, -169, -233, 124,
	468, -96, -397, 464, -258, 469, 469, -392, 457, 124,
	124, 124, 124, 2, 2, 251, 2, 2, 2, 156,
	-458, -466, 2, 2, 2, -207, 169, -245, 265, -450,
	-259, 381, -207, -209, 169, 2, -212, 429, -178, -428,
	435, 251, 251, 35, 464, 2, -193, 169, 2, -183,
	-182, 182, -428, 251, -358, -220, -207, -220, 353, -200,
	35, -321, 124, 2, 2, 2, -182, -171, 469, 56,
	321, 124, -171, 124, -171, 124, -171, 469, 124, -171,
	124, 469, 124, 124, 465, 469, -366, -366, -397, -150,
	435, 154, 86, 464, 464, -152, -97, -96, -397, -450,
	-191, 2, -207, 2, 381, 207, -397, -397, -397, -391,
	26, 355, 2, 300, 351, 77, 355, 2, -207, 381,
	99, 182, 70, -452, 151, -449, 326, -448, -207, 99,
	-207, 99, -207, 99, -207, -207, 2, 2, 2, 2,
	74, 74, 151, 2, 398, 2, 398, 2, -182, -182,
	-182, 224, -207, 151, 381, 182, 381, 182, 99, 381,
	-171, 469, -187, -160, -275, -391, -162, 360, 254, -260,
	211, 356, -160, -302, -301, 26, -324, -306, 145, 246,
	-324, -326, -154, -154, -154, -248, -350, -324, 295, 182,
	-382, -367, -367, -205, -392, 391, -324, -324, -324, -324,
	-324, -324, -324, -324, -324, -324, -324, -324, -324, -324,
	-324, -324, -324, -324, -324, -324, -324, -324, -324, -324,
	-324, -324, -324, -324, -324, -324, -324, -324, -324, -324,
	-324, 225, 173, 358, 43, 176, -324, 395, -324, -324,
	-324, -324, 242, 251, 255, 403, 136, 412, 112, 259,
	-483, 377, 37, -330, -155, -266, 464, -344, 32, 364,
	26, -337, 464, 2, -319, -324, -320, -263, -262, -262,
	465, 428, 26, 112, 457, 2, 8, -294, -296, 440,
	241, 102, 168, 240, -295, 340, 465, 469, 35, 465,
	-324, -263, -336, -332, -262, -343, -342, 432, -392, 457,
	-434, 144, 161, 8, -386, 8, -386, 391, 391, 8,
	-386, -386, 464, 465, 2, 465, 2, 465, -324, 2,
	465, 2, 465, 2, -324, -324, -324, -324, -324, -324,
	-324, -262, -288, 2, -383, -262, 4, 440, 241, 102,
	168, 240, 340, 5, -288, 2, -289, 2, -324, -262,
	-290, -325, -326, 455, 456, 448, -337, -291, 2, -324,
	-263, -324, 50, 219, 397, -292, -324, 154, -262, -262,
	2, -262, 2, -432, 35, -262, -254, 469, 154, 35,
	4, -254, -254, 464, 465, 469, -287, 165, 237, 232,
	-287, -353, -286, 206, -284, 275, -284, -284, -446, 464,
	463, 467, 467, 467, 467, 467, -348, -192, 462, 470,
	-392, -347, -346, 35, -200, 272, -348, -348, 466, 465,
	-347, -207, 464, -262, -392, 370, 465, 466, 200, 200,
	200, 200, 331, 465, 395, 435, -81, 267, 465, 469,
	-253, 34, 462, -296, 464, -384, 430, 464, 464, 154,
	-252, -460, 465, 399, -313, -225, 304, 363, 316, 348,
	379, 9, 8, 8, 469, -392, 469, -461, 80, 395,
	68, -315, 169, 68, -406, -194, 80, -407, -182, 63,
	411, 295, 153, -461, 80, 295, -461, 80, 80, 353,
	368, 51, -357, 38, 38, 26, -99, 220, 154, 441,
	381, 182, 395, -357, -281, -367, 97, 238, 239, 51,
	-387, -385, 456, -387, 51, -387, -387, -387, 435, -209,
	-357, 395, 285, -397, 395, 469, 38, 38, 26, -99,
	220, 154, 395, -222, -192, -363, -362, -398, -215, -182,
	466, -324, -99, -324, -99, 124, 2, -475, 214, 464,
	-229, 251, 154, -251, -364, 198, 469, -259, -280, -279,
	251, -211, 2, -207, 285, 124, 124, 464, 120, 302,
	2, 265, 251, -193, 169, -174, 384, 124, -278, 420,
	-307, -99, 464, 105, 35, -307, -270, -271, -361, -272,
	-194, 464, -200, -182, 2, -207, -260, -260, -260, -222,
	-223, -191, -397, -398, -398, -81, -365, 465, 465, 465,
	-149, 269, -148, -182, 5, -152, 420, -228, -316, -315,
	-410, -411, -406, 225, 182, 411, 199, 137, -244, -195,
	-194, 98, -150, -362, 469, -150, -150, -363, -363, -207,
	151, 2, 2, -283, -207, -191, -222, -207, -251, -251,
	-283, -191, -283, -191, -283, -191, -99, -324, 350, 151,
	151, 466, -283, 302, 99, 381, 283, 182, -207, -222,
	-207, -222, -191, -207, -357, -160, 231, 415, -304, -385,
	464, -305, 330, 331, 469, -165, 36, 110, 211, -207,
	441, 121, -324, -324, 395, -483, 377, -330, 121, -324,
	242, 255, 403, 136, 412, 112, 259, 154, 464, -325,
	-325, 465, -264, -324, -324, 463, 472, 465, -247, 469,
	-246, -324, -262, -262, 465, 465, 395, 395, 395, 395,
	464, 466, -262, -251, 463, 463, 469, 465, -341, -342,
	117, -324, 466, -439, 276, 464, 464, 465, 465, 469,
	465, 441, 441, 465, 465, 465, -324, 465, 35, 469,
	469, 469, 465, 469, 469, 469, 465, 465, 154, 465,
	465, -297, 288, 465, 11, 12, 455, 456, 457, 458,
	149, 459, 460, 453, 454, 452, 445, 446, 447, 75,
	234, 332, 14, 15, 16, 200, 176, -325, -325, -325,
	465, -328, -329, 154, 151, 35, -292, -292, -292, 465,
	154, -262, 465, 465, 464, 465, -318, -317, 433, -360,
	-255, 2, -353, -202, -392, -318, -318, -262, -324, 206,
	206, -285, 420, 265, -287, -353, -346, 465, -447, -388,
	-348, -347, -388, -323, -322, 152, 36, 110, 248, 172,
	-200, -243, -347, -347, -392, -348, 465, -256, -355, -427,
	-247, 466, -392, -141, 5, 255, -141, -141, -141, -251,
	24, 289, -367, 462, 463, 8, 8, 464, -386, -386,
	-251, 154, -389, -312, 409, 72, 304, 391, -389, -167,
	315, -194, -194, -207, 251, -315, 169, -173, 251, -367,
	-201, -182, 464, 464, 211, 211, -194, -201, 211, 169,
	-194, 169, -201, -201, -454, 304, 260, -324, 227, 302,
	252, -168, 315, -99, -99, -99, 464, -460, 420, 111,
	-207, -222, -207, -211, 315, 249, -217, -387, -387, -279,
	315, -209, -397, 435, -191, -169, -99, -99, -99, 464,
	-192, -170, 315, -147, 178, 465, 457, -182, 429, -182,
	-227, -230, -228, -194, -469, 437, 435, 124, -221, -207,
	462, -150, -397, -207, 124, -243, -397, -397, -397, 2,
	464, 2, -207, 124, 265, 251, -175, 118, -480, 447,
	-191, -318, -255, -277, -310, 323, 265, -244, 425, -200,
	-277, -257, 469, 154, 447, 466, -244, 2, -171, -171,
	-171, -171, -171, -81, -81, -150, 469, 464, 447, 447,
	464, -397, -397, 465, 469, -207, -193, 182, 182, -199,
	-183, 465, 469, 466, 464, -150, -96, 154, -46, 435,
	381, 468, -283, -283, -283, 350, 350, -182, -203, -191,
	-207, -204, -222, 151, 151, -305, -324, -350, -166, 257,
	-207, 468, -324, -324, 121, 121, -324, -325, -325, -324,
	121, 154, 464, -324, -334, 30, 30, 465, 469, -320,
	-324, 465, 428, -247, -247, 465, 5, 241, 168, 240,
	-295, 240, -295, -295, 8, 457, -392, 465, -332, 119,
	-324, 389, -392, 457, -440, -197, 464, -182, 433, -246,
	-386, -370, -370, 465, -382, -367, -324, -324, -324, -324,
	-324, -324, -328, -324, -382, -367, -325, -325, -325, -325,
	-325, -325, -325, -325, -325, -325, -325, -325, -325, -325,
	-325, -325, -325, -325, -325, 112, 251, 259, -325, -329,
	-328, -324, -324, -367, 465, 465, 465, -262, -81, -274,
	161, -324, -363, 469, -274, -274, 465, -353, -353, 464,
	-324, 206, 463, 465, 469, -347, 463, 469, 471, 447,
	-243, 466, -346, 465, 469, -309, 35, 465, -392, 268,
	5, 8, 462, 463, 465, -386, 465, 465, -251, -324,
	395, 395, 124, 251, 422, -412, -407, -324, -249, -351,
	-324, 464, 464, -164, 116, 353, -462, 2, 420, 124,
	-171, 124, -171, 439, 464, 464, 395, 435, -262, -324,
	-151, 105, -391, -456, 468, -456, 468, 395, 395, 285,
	435, -262, 395, -150, 154, 2, 2, 2, 465, 465,
	469, -413, 35, 263, -182, -207, -64, 435, -362, -388,
	-209, 35, -178, 2, -300, 420, -192, -207, 124, -176,
	218, -480, -395, -428, -247, -277, -269, 252, 79, 465,
	-318, -271, -255, -324, 2, 465, -148, -149, -397, -397,
	-397, -150, -152, -152, -316, 2, 464, -193, -183, 464,
	-152, -195, 2, -398, -99, 269, -207, 457, -283, -235,
	-234, 283, 259, -235, 330, 330, 266, 465, 145, 215,
	-165, -192, -324, -324, 121, 30, 30, -324, -324, -334,
	465, -324, -324, -262, 463, 5, -324, 465, 465, 465,
	-324, 466, -441, -182, -324, 465, 465, 465, 465, 469,
	469, 465, 465, 465, 465, -329, 154, 112, 259, 464,
	465, 465, -331, 164, 51, -353, -331, -331, -285, -251,
	-353, -321, -388, -322, -192, 462, -392, -355, 464, 466,
	463, 2, 462, 465, -194, -194, -315, 124, -414, 80,
	-416, 66, 137, 86, 251, 255, 411, 295, 63, 105,
	308, 35, 465, 465, 469, -165, -249, -251, 251, 374,
	105, 251, 105, 98, 406, 182, -194, -201, -251, -251,
	-207, 130, 465, 469, 447, 2, 457, 457, -211, -209,
	-397, 130, 465, -192, -398, -231, 185, -194, -411, -408,
	-409, 295, -415, -417, 137, 295, -99, 2, 464, -229,
	269, 463, -280, -99, 464, -182, 265, 464, -192, -177,
	217, -480, -395, -174, -303, -301, -308, 464, 265, -99,
	-247, 447, 465, 465, 98, 98, -249, 464, 464, -251,
	98, 465, -47, -48, 182, 80, 287, -204, 381, 182,
	464, 464, -165, -324, -324, -324, 465, -247, -392, 457,
	-435, 283, 465, -324, -324, -325, 154, 464, -334, -436,
	434, -324, -262, -436, -436, 465, -348, -388, 2, 462,
	2, -315, -201, -205, -198, -182, 137, 169, 255, 211,
	464, -325, -207, 464, 2, -471, 107, 186, -314, -472,
	85, 375, -351, -166, 465, 465, 255, 255, -324, -367,
	-222, -171, -171, 465, 465, -324, 395, -391, 84, -389,
	2, -456, -324, 395, -232, -233, 176, -413, 211, -198,
	211, -470, 435, -227, -469, -65, -66, 396, -362, -249,
	-207, -249, 265, -480, -395, -175, -277, 113, -251, 80,
	-303, -330, -150, 464, 464, 465, -249, -249, 465, 464,
	-150, 469, 26, 464, 26, 464, -207, -222, -262, -262,
	465, -247, 51, 465, 465, -325, -334, 465, -437, -438,
	-197, -347, 463, 2, -416, -198, 251, -324, -184, 464,
	-324, 186, 108, 174, -231, 464, 308, -190, 66, 464,
	464, 464, 447, 154, 464, -469, 281, 464, 98, 247,
	465, 35, -66, 9, 465, -300, 465, -207, -395, -176,
	415, 252, 465, -201, -277, -398, -398, -314, 465, 465,
	-398, -48, -251, -251, 465, 465, -442, 302, 331, 163,
	-262, 465, 469, 35, 124, 465, -418, 235, -182, 465,
	108, 174, -232, -251, -207, -457, 420, -205, -237, -236,
	-234, -239, -238, -234, -262, -389, 84, 281, -262, -207,
	-250, -352, -194, 98, -231, -99, -314, 464, -314, 464,
	-177, 353, -317, 465, 465, -231, -314, 465, 465, 465,
	465, -443, -444, 43, 408, 89, -324, -443, -443, -438,
	-440, 137, -419, -422, -421, 265, 359, 155, 282, 465,
	374, 431, -471, 465, -243, -324, 465, 469, 425, 465,
	469, 425, 465, 154, 465, 464, 465, 469, -232, -470,
	-231, -249, -231, -249, -270, -150, -150, -232, -231, -150,
	-445, 123, -444, 292, 150, 330, 292, 150, -445, -445,
	-198, -421, 265, -422, 265, 415, 109, -418, -236, 176,
	-238, 154, 281, -251, -352, -469, -232, 465, -232, 465,
	-318, -232, 89, 161, 390, 247, 30, -420, 247, 321,
	56, 353, -420, -419, 464, 464, 465, -476, 433, -314,
	-476, -314, 330, 273, -444, 22, 255, 105, -471, -262,
	-262, -172, 56, 321, 2, -231, -231, 465, 465, -232,
	-232, -232, 395, -476, -476, 464, -262, 465, -232,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 370, 371, 373,
	374, 375, 377, 378, 380, 382, 384, 386, 387, 389,
	391, 393, 394, 395, 396, 397, 399, 401, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 459, 461,
	0, 936, 938, 940, 942, 25, 26, 0, 0, 191,
	193, 195, 0, 220, 222, 224, 225, 227, -2, 0,
	322, 323, 325, 327, -2, -2, 0, 0, 448, 450,
	0, 0, 0, 470, 471, 0, 1026, -2, 464, 466,
	468, 533, 535, 537, 539, 541, 543, 545, 546, 548,
	550, 552, 554, 556, 558, 560, 561, 563, 565, 567,
	569, 571, 573, 575, 577, 579, 581, 583, -2, -2,
	-2, 0, -2, -2, -2, 954, 29, 31, 33, 35,
	37, 39, 41, 61, 276, 277, 279, 281, 283, 286,
	287, 289, 1074, 329, 331, 333, 335, 337, 0, -2,
	1086, 0, 0, 43, 44, 45, 46, 47, 48, 49,
	50, 68, 69, 70, 71, 72, 73, 74, 75, 54,
	56, 57, 63, 64, 66, 52, 0, 0, 1050, 1052,
	1054, 1056, -2, 0, 0, 7, 9, 11, 13, 15,
	17, 19, 21, 372, 376, 379, 381, 383, 385, 388,
	390, 392, 398, 400, 402, 830, 1687, 1701, 1702, 1703,
	1706, 1707, 1708, 1709, 1710, 1711, 2054, 2134, 2135, 1730,
	1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740,
	1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750,
	1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760,
	1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770,
	1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780,
	1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790,
	1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800,
	1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810,
	1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820,
	1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830,
	1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840,
	1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850,
	1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860,
	1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870,
	1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880,
	1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890,
	1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900,
	1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910,
	1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920,
	1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930,
	1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940,
	1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950,
	1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960,
	1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970,
	1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980,
	1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990,
	1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
	2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
	2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020,
	2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030,
	2031, 2032, 2033, 2034, 2035, 0, 426, 424, 1681, 427,
	1885, 429, 431, 316, 317, 318, 319, 320, 321, 0,
	441, 435, 440, 442, 444, 445, 446, 447, 421, 419,
	0, 441, 1733, 439, 934, 935, 929, 930, 1919, 964,
	460, -2, -2, -2, 2022, -2, 492, -2, 499, 2025,
	1921, 504, 0, 506, -2, 509, 937, 939, 941, 27,
	28, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	155, -2, -2, -2, -2, 0, 0, 1770, 1657, 1703,
	1660, 1655, 192, 194, 196, 197, 0, 0, 0, 0,
	0, 0, 221, 223, 226, 228, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 253, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -2, 0, 0,
	0, 0, 0, 0, 0, 0, 744, 736, 737, 882,
	883, 904, 0, 0, 0, 0, 324, 326, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 328, 0, 0, 0,
	0, 0, 0, 0, 254, 362, 363, 0, 1075, 1075,
	0, 0, 0, 0, 172, 163, 0, 0, 725, 449,
	451, 0, 158, 0, 0, 933, 0, 174, 0, 0,
	465, 467, 469, 534, 536, 538, 540, 542, 544, 547,
	549, 551, 553, 555, 557, 559, 562, 564, 566, 568,
	570, 572, 574, 576, 578, 580, 582, 584, 585, 0,
	0, 0, 0, -2, -2, 0, 0, 0, -2, -2,
	0, 0, 0, 0, 0, 0, 0, -2, 0, 0,
	-2, -2, -2, 0, 0, 0, -2, -2, 0, 0,
	0, 0, 588, 590, 591, 592, 0, 643, 660, 0,
	873, 1076, 966, 944, 957, 966, 946, 947, 948, 949,
	950, 955, 956, 959, 0, 951, 952, 953, 30, 32,
	34, 36, 38, 40, 42, 278, 280, 282, 284, 288,
	290, -2, 1048, 1049, 330, 332, 334, 336, 338, 452,
	0, 454, 0, 589, 1030, 1038, 0, -2, 0, 1080,
	1080, 1080, 0, 0, 1049, 1047, 0, 457, 458, 513,
	514, 1313, 0, 0, 0, 0, 0, 1554, 1397, 0,
	515, -2, 1428, 1430, 2001, 2022, 1553, 1432, 1433, 1434,
	1435, 1436, 0, 0, 1439, 0, 1441, 1442, 1443, 1444,
	0, 1446, 0, 1450, 1451, 1452, 0, 2006, 1634, 1699,
	-2, 1218, 1219, 1220, 1221, 1222, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1695, 0, 1520, 1466, -2, 1720,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1779, -2, -2, -2, -2, -2, -2, -2,
	1274, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	2036, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478,
	0, 1990, 2007, 2008, 2013, 2015, 2009, 1998, 1489, -2,
	2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046,
	2047, 2048, 2049, 2050, 2051, 2052, 1275, -2, 2002, 2003,
	2018, 2019, 2024, 2029, 2030, 2005, 2014, -2, -2, 1066,
	1894, 1069, 830, 1067, 1051, 1053, 0, 1055, 0, 0,
	0, 1060, 1083, 1081, 0, 1119, 1064, 1065, 1075, 1137,
	1160, 0, 1142, 0, 1160, 1186, 0, 1147, 1914, 1467,
	1468, 0, 1703, 1700, -2, 0, 0, 0, 0, 0,
	0, 0, 422, 0, 428, 430, 0, 0, 0, 0,
	0, 0, 0, 0, 963, 462, 463, 0, 487, 0,
	491, 1997, -2, 1738, 1934, -2, 495, 967, 971, 972,
	973, 974, 0, 0, 0, 0, 0, 501, 0, 0,
	488, 489, 507, 510, 0, 51, 0, 2007, 1186, 53,
	0, 1671, 1725, 1726, 1727, 1728, 1729, 2036, 2053, 2055,
	2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065,
	2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075,
	2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085,
	2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095,
	2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105,
	2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115,
	2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125,
	2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 55, 0,
	2007, 58, 0, 2007, 0, -2, 62, 0, 2007, 175,
	176, 1716, 1717, 1721, 1722, 1723, 1724, 65, 0, 1677,
	67, 0, 1674, 76, 0, 2007, 0, 1654, -2, 0,
	0, 717, 1651, 1656, 718, 1661, 0, 198, 199, 200,
	201, 202, 2007, 204, 205, 0, 207, 208, 2007, 210,
	211, 0, 213, 229, 230, 0, 232, 0, 2007, 0,
	0, 0, 238, -2, 255, 0, 252, 0, 242, 243,
	245, 246, 247, 248, 249, 0, 294, 292, 1682, 0,
	0, 0, 888, -2, 2007, 876, 879, 2007, 881, 893,
	1685, 0, -2, 0, 1073, 2007, 981, 740, 741, 742,
	743, 0, 313, 0, 994, 0, 996, 0, 1016, 1192,
	1137, 256, 257, 258, 259, 260, 2007, 0, 0, 0,
	265, 0, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 151, 2007, 341, 360, 151, 2007, 344, 151, 2007,
	347, 151, 2007, 350, 1649, 151, 2007, 353, 354, 2007,
	356, 177, 357, 2007, 359, 0, -2, 415, 1689, -2,
	365, 0, 366, 0, -2, 0, 189, 0, 0, 723,
	724, 0, 931, 932, 0, 0, 472, 0, 0, 586,
	587, 0, 0, 597, 598, 599, 600, 1922, 1892, 1795,
	604, 0, 607, 610, -2, 0, 0, 0, 0, 614,
	0, 619, 620, 621, 0, 722, 623, 0, 0, 625,
	0, 629, 0, 632, 0, 634, 0, 636, -2, -2,
	-2, 647, -2, 0, 651, 0, 653, 0, 0, 0,
	0, 668, 669, 0, 674, 0, 677, 678, 679, 0,
	681, 682, 683, 684, 0, 686, 687, -2, -2, 691,
	693, 0, 700, 0, 704, 0, 708, 0, 593, 594,
	151, 1190, 943, -2, 945, 0, 961, 1033, -2, 0,
	453, 0, 456, 1044, 0, 1040, 0, 1042, 0, 1031,
	1036, 1098, 1099, 0, 0, 0, 0, 1078, 1079, 0,
	0, 0, 1028, 1029, 0, 0, 0, 0, 1559, 1560,
	1561, 1562, 1563, 1564, 1567, 1568, 1565, 1566, 1569, 1570,
	0, 0, 0, 0, 0, 1571, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1572, 1573, 1574,
	0, 0, 1576, 0, 1578, 0, 0, 0, 0, 0,
	0, 1376, 1378, 1642, 0, 0, 1575, 1318, 1319, 1320,
	1355, 1356, 0, 0, 1429, 1639, 1638, 1431, 0, 1590,
	0, 1438, 0, 1310, 1445, 1668, -2, 0, 1554, 1585,
	0, 0, 1453, 1454, 1455, 0, 0, 1590, 0, 0,
	1633, 0, 1522, 0, 1254, 0, 1255, 1256, 0, 1257,
	1258, 1271, 1284, 0, 0, 0, 0, 1288, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1276, 0, 0, 0, 1614, -2,
	0, 0, 0, 0, 0, 1068, 0, 0, 1123, 1643,
	1647, 1648, 1123, 1123, 0, 0, 1591, 1183, 1183, 0,
	0, 1179, 1179, 1179, 1177, 1154, 0, 403, 405, 407,
	409, 410, 411, 413, 1160, 0, 1170, 0, 1160, 1160,
	0, -2, 1142, 0, 0, 1170, 1187, 1188, 0, 0,
	0, 0, 0, 0, 1704, 0, 0, 0, 1691, 0,
	0, 0, 0, 433, 443, 1075, 0, 1593, 1208, 1211,
	1212, 1213, 1214, 1217, 1223, 1224, 1225, 1226, 1227, 1228,
	1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238,
	1239, -2, 1272, 1274, 1295, 1261, 1262, 1263, 1264, 1265,
	1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252,
	1253, 1267, 0, 1242, 1242, 1242, 1259, 1260, 1283, 1294,
	1286, 1294, 1290, 1209, 1210, 1277, 1278, 1279, 1280, 0,
	437, 0, 0, 0, 0, -2, 497, 502, 503, 0,
	0, 969, 0, 975, 524, 525, 526, 977, 978, 0,
	500, 527, 528, 529, 530, 531, 532, 0, 847, 0,
	849, 1663, 0, 498, 517, 505, 0, 511, 77, 926,
	116, 0, 926, 926, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 101, 112, 89, 90, 0, 0, 0,
	0, 59, 855, 0, 858, 0, 0, 0, 0, 0,
	0, 0, 871, 0, 0, 0, 0, 100, 0, 95,
	79, 0, 0, 0, 102, 114, 0, 142, 144, 0,
	0, 1173, 159, 0, 716, 0, 0, 1704, 1659, 0,
	0, 0, 0, 231, 233, 0, 235, 236, 237, 0,
	887, 0, 244, 241, 285, 804, 2007, 0, 0, 311,
	306, 0, 308, 854, 2007, 852, 1686, 0, 874, 0,
	1072, 0, 0, 0, 0, 894, 0, 2007, 899, 1673,
	1712, 1713, 983, 0, 315, 0, 997, 0, 0, 1193,
	0, 1195, 0, 262, 263, 264, 0, 339, 0, 149,
	150, 0, 342, 0, 345, 0, 348, 0, 0, 351,
	0, 0, 0, 0, 1075, 0, 0, 0, 0, 165,
	0, 0, 0, 0, 0, 0, 189, 161, 189, 189,
	1173, 474, 1173, 476, 0, 0, 601, 602, 603, 605,
	606, 608, 609, -2, -2, 701, 611, 612, 671, 0,
	0, 0, 670, 622, 0, 710, 1910, 720, 671, 1770,
	671, 1770, 671, 1770, 633, 635, 638, 663, 646, 650,
	0, 0, 0, 655, 0, 657, 0, 659, 671, 672,
	675, 680, 685, 0, 0, 0, 0, 0, 0, 0,
	872, 0, 960, 1034, 1036, 455, 1037, 0, 1046, 1039,
	0, 1043, 1032, 1096, 1097, 1102, 1103, 1109, 1112, 1113,
	1105, 1313, 1061, 1062, 1063, 1087, 1088, 913, 0, 2134,
	1314, 1203, 1315, 1316, 1670, 0, 1321, 1322, 1323, 1324,
	1325, 1326, 1327, 1328, 1329, 1330, -2, -2, -2, -2,
	-2, -2, -2, -2, 1339, 1340, 1341, 1342, 1343, 1344,
	1345, 1346, 1347, 1348, 1349, -2, -2, -2, 1353, 1354,
	-2, 1577, 1579, 0, 1642, 0, -2, 0, -2, -2,
	-2, -2, 1373, 0, 1375, 1380, 1382, 1384, 0, 0,
	0, 0, 1641, 1394, 1625, 1626, 0, 0, 1556, 1557,
	1558, 1379, 0, 1398, 1640, 1637, 0, 0, 1589, 1086,
	1457, 0, 0, 0, 0, 1464, 0, 1669, 1309, 1296,
	1297, 1298, 1299, 1300, 1301, 1311, 1449, 1587, 0, 1586,
	0, 0, 0, 1597, 0, 1632, 1628, 0, 1692, 1698,
	1530, 0, 0, 0, 0, 1666, 0, 0, 0, 0,
	0, 0, 0, 1490, 1491, 1492, 1493, 1494, 0, 1496,
	1497, 1498, 1499, 1500, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1502, 0, 1600, -2, -2, -2, -2,
	-2, -2, -2, -2, 0, 1504, 0, 1506, 1591, 1611,
	0, 0, 1399, 0, 0, 0, 1554, 0, 1509, 1591,
	1619, 0, 0, 0, 0, 0, 1591, 0, 1624, 0,
	1516, 0, 1518, 1070, 0, 0, 1198, 0, 0, 0,
	1646, 1198, 1198, 0, 1118, 0, 0, 1180, 1181, 1182,
	0, 0, 1183, 0, 1174, 1178, 1175, 1176, 0, 0,
	1160, 404, 406, 408, 412, 414, 1170, 1134, 0, 0,
	1672, 1140, 1169, 0, 830, 1159, 1170, 1170, 0, -2,
	1144, 0, 0, 1086, -2, 190, 829, 0, 0, 0,
	0, 0, 423, 425, 0, 0, 417, 0, 420, 0,
	1199, 1202, 0, 1215, 0, 0, -2, 0, 0, 0,
	0, 0, 490, 0, 968, 976, 0, 521, 0, 523,
	0, 848, 1665, 1664, 0, 512, 0, 0, 0, 0,
	925, 120, 2007, 0, 153, 0, 0, 798, 1678, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 91, 0, 0, 0,
	0, 0, 0, 0, 856, 857, 859, 866, 868, 0,
	862, 1667, 0, 863, 0, 865, 867, 869, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 92,
	0, 0, 0, 0, 1653, 180, 1172, 0, 1652, 1662,
	0, 203, 206, 209, 212, 0, 239, 0, 0, 746,
	728, 0, 0, 293, 189, 0, 0, 307, 850, 853,
	0, 830, 886, 1684, 0, 0, 0, 0, 0, 0,
	892, 0, 0, 0, 2007, 985, 991, 0, 1198, 0,
	1014, 999, 0, 0, 0, 1014, 1018, 1019, 1021, 1022,
	0, 0, 1194, 0, 266, 361, 151, 151, 151, 1650,
	151, 151, 178, 355, 358, 364, 416, 1075, 1075, 189,
	187, 1870, 185, 182, 184, 0, 0, 0, 747, 749,
	750, 751, 752, 0, 1713, 0, 1824, 1713, 0, 1002,
	1004, 0, 156, 189, 0, 0, 305, 473, 478, 595,
	0, 640, 665, 613, 615, 616, 617, 0, 721, 719,
	624, 671, 627, 671, 630, 671, 649, 652, 654, 0,
	0, 0, 667, 0, 0, 0, 0, 0, 0, 0,
	705, 706, 707, 709, 1191, 1035, 1045, 1041, 0, 1107,
	0, 1106, 1110, 1111, 0, 1095, 911, 912, 0, 0,
	0, 0, -2, -2, 0, 0, 0, 1395, 0, -2,
	1374, 1377, 1381, 1383, 1385, 0, 0, 0, 0, 0,
	0, 1580, 0, 1582, 1396, 1635, 1638, 1552, 0, 0,
	1085, 1086, 1086, 0, 1463, 0, 0, 0, 0, 0,
	0, 0, 1588, 0, 1595, 1596, 0, 1456, 0, 1629,
	0, 0, 0, 1465, 0, 0, 0, 1266, 1240, 0,
	1294, 1292, 1293, 1287, 1294, 1291, 0, 1495, 0, 0,
	0, 0, 1484, 0, 0, 0, 1488, 1501, 0, 1503,
	1505, 0, 0, 1507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1402, 1403, 1404,
	1508, 1617, 1618, 0, 0, 0, 0, 0, 0, 1514,
	0, 1623, 1515, 1517, 1075, 1120, 1115, 1197, 0, 1644,
	1173, 1122, 1124, 1645, 1675, 1115, 1115, 0, 1592, 0,
	0, 1164, 0, 0, 0, 1166, 0, 1155, 0, 1157,
	1170, 1139, 0, 0, 1132, 0, 1128, 1129, 1130, 1131,
	830, 1168, 1141, 1145, 1692, 0, 1189, 0, 1149, 1152,
	0, 0, 1705, 214, 218, 219, 215, 216, 217, 432,
	0, 0, 1594, 0, 1204, 0, 0, 0, 0, 0,
	436, 0, 486, -2, 519, 520, 522, 0, 518, 117,
	926, 0, 0, 917, 0, 122, 2007, 131, 0, 775,
	0, 1676, 0, 0, 0, 0, 928, 0, 0, 2007,
	151, 2007, 151, 134, 137, 0, 141, 139, 0, 0,
	766, 78, 926, 81, 85, 93, 0, 0, 0, 99,
	0, 0, 0, 919, 0, 860, 861, 864, 870, 60,
	0, 921, 915, 0, 914, 143, 83, 87, 94, 0,
	923, 80, 0, 189, 0, 160, 1658, 0, 0, 0,
	0, 0, 745, 815, 0, 0, 0, 0, 299, 295,
	0, 304, 310, 309, 0, 0, 877, -2, 880, 889,
	0, 891, 903, 0, 0, 0, 987, 991, 0, 990,
	1073, 1086, 314, 992, 1014, 0, 0, 0, 1001, 998,
	995, 1198, 0, 0, 0, 0, 0, 261, 340, 343,
	346, 349, 352, 367, 368, 164, 0, 0, 0, 0,
	0, 189, 0, 0, 0, 0, 0, 1713, 1713, 0,
	1680, 0, 0, 0, 0, 157, 162, 0, 475, 0,
	0, 0, 626, 628, 631, 656, 658, 671, 694, 695,
	761, 0, 761, 0, 0, 0, 0, 1089, 1090, 0,
	913, 0, 1317, 1358, 0, 0, -2, 0, 0, 1362,
	0, 0, 0, -2, 0, 0, 0, 1581, 1583, 0,
	1637, 1458, 0, 0, 0, 1462, 1440, 1302, 1303, 1304,
	1305, 1306, 1307, 1308, 0, 1447, 1448, 1555, 1598, 1627,
	1631, 0, 1693, 1697, 1528, 1529, 1533, 1683, 0, 0,
	0, 1285, 1289, 1469, 0, 0, 0, 0, 0, 0,
	0, 1599, 1610, 1612, 1400, 1401, 1405, 1406, 1407, 1408,
	1409, 1410, 1411, 1412, 1413, 1414, -2, -2, -2, 1418,
	1419, 1420, -2, -2, -2, 0, 0, 0, 1613, 1615,
	1616, 1620, 1621, 0, 1511, 1512, 1513, 1622, 0, 1117,
	0, 1196, 1121, 0, 1117, 1117, 1082, 1162, 0, 0,
	1185, 0, 1137, 1156, 0, 1146, 1135, 0, 1136, 0,
	1167, 0, 1143, 1148, 0, 1151, 0, 1458, -2, 434,
	418, 0, 0, 1206, 1216, 0, 1269, 1273, 438, 1171,
	0, 0, 0, 0, 152, 773, 797, 0, 0, 906,
	913, 0, 0, 124, 0, 0, 0, 132, 0, 0,
	129, 0, 136, 140, 0, 0, 0, 0, 0, 96,
	97, 98, 0, 103, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 234, 885, 240, 755, 803,
	0, 805, 0, 729, 0, 804, 291, 0, 298, 0,
	854, 0, 875, 890, 0, 0, 0, 0, 0, 989,
	991, 0, 982, 983, 1101, 993, 1012, -2, 1011, 0,
	1086, 1020, 1017, 1023, 1024, 0, 186, 0, 181, 183,
	0, 167, 0, 0, 748, 753, 0, 0, 0, 0,
	0, 1003, 1005, 0, 173, 0, 596, 618, 666, 696,
	760, 0, 0, 698, 0, 0, 1104, 1108, 1093, 1094,
	1091, 913, 1360, 1364, 0, 0, 0, 1366, -2, 0,
	1388, -2, -2, 1584, 1636, 1437, 1086, 1459, 1461, 1312,
	1630, 0, 1535, 1532, 0, 1519, 1241, 1479, 1480, 0,
	0, 1483, 1485, 1486, 1487, 1609, 0, 0, 0, 0,
	1510, 1071, 1524, 0, 0, 1125, 1524, 1524, 1163, 0,
	1165, 1160, 1158, 1133, 1126, 0, 1693, 1150, 0, 0,
	1200, 1205, 0, 1268, 118, 119, 121, 0, 774, 0,
	777, 0, 0, 0, 0, 784, 785, 0, 0, 0,
	0, 0, 819, 828, 0, 1095, 0, 0, 0, 126,
	146, 0, 0, 927, 0, 0, 151, 151, 0, 0,
	918, 0, 0, 0, 0, 106, 0, 0, 920, 922,
	916, 0, 0, 924, 179, 763, 0, 815, 807, 808,
	809, 0, 814, 816, 0, 0, 733, 730, 746, 728,
	0, 296, 851, 884, 0, 902, 0, 0, 0, 979,
	991, 0, 984, 985, 1014, 1100, 0, 0, 0, 1000,
	1101, 0, 188, 189, 0, 0, 0, 0, 0, 0,
	0, 189, 477, 479, 0, 0, 485, 759, 0, 0,
	0, 0, 1092, 1368, -2, -2, 1389, 0, 1694, 1696,
	1086, 0, 1521, 0, 0, -2, 0, 0, 0, 1057,
	0, 1116, 1114, 1058, 1059, 1184, 1170, 0, 1153, 0,
	1207, 123, 0, 778, 779, 1679, 781, 0, 783, 786,
	0, 788, 1715, 0, 792, 799, 820, 0, 755, 0,
	825, 826, 907, 908, 801, 0, 125, 127, 145, 910,
	133, 128, 135, 0, 0, 82, 0, 0, 1764, 109,
	107, 105, 84, 0, 728, 762, 0, 806, 0, 817,
	818, 731, 0, 0, 0, 297, 300, 0, 303, 0,
	903, 0, 0, 0, 986, 987, 312, 0, 0, 0,
	1014, 1025, 166, 0, 0, 828, 0, 0, 796, 0,
	171, 0, 481, 0, 483, 0, 697, 699, 0, 0,
	1460, 1539, 0, 1481, 1482, -2, 0, 1426, 1523, 1525,
	0, 1138, 1127, 1201, 776, 780, 0, 0, 834, 0,
	0, 0, 823, 824, 763, 0, 0, 148, 0, 0,
	0, 0, 0, 0, 0, 726, 0, 0, 734, 0,
	755, 0, 301, 302, 828, 0, 828, 0, 988, 989,
	0, 1007, 1008, 1010, 1015, 0, 0, 755, 828, 795,
	0, 480, 0, 0, 702, 703, 0, 0, 0, 0,
	1534, 1427, 0, 0, 0, 787, 839, 0, 0, 0,
	821, 822, 819, 0, 830, 130, 0, 909, 0, 767,
	0, 0, 770, 0, 0, 110, 1764, 108, 0, 0,
	0, 811, 813, 735, 763, 733, 755, 0, 755, 0,
	980, 0, 1009, 189, 189, 763, 755, 189, 482, 484,
	1531, 1551, 1540, -2, 1970, 1767, 0, 1551, 1551, 1526,
	1527, 0, 789, 835, 836, 0, 831, 832, 833, 1714,
	790, 791, 800, 827, 834, 147, 764, 0, 0, 765,
	0, 0, 113, 0, 115, 0, 810, 0, 728, 732,
	763, 0, 763, 0, 1198, 168, 169, 793, 763, 170,
	1536, 0, 0, 1542, 1543, 1544, 1545, 1546, 1537, 1538,
	782, 837, 0, 838, 0, 0, 0, 839, 768, 0,
	771, 0, 111, 0, 812, 727, 900, 828, 900, 828,
	1006, 794, 0, 1548, 1549, 0, 0, 840, 0, 843,
	844, 0, 841, 819, 0, 0, 758, 895, 0, 755,
	897, 755, 1547, 1550, 1541, 842, 845, 846, 802, 0,
	0, 754, 756, 757, 901, 763, 763, 763, 0, 900,
	900, 769, 0, 896, 898, 0, 0, 763, 772,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 453, 3, 459, 454, 3,
	464, 465, 457, 455, 469, 456, 466, 458, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 472, 3,
	445, 447, 446, 450, 468, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 462, 3, 463, 460, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 470, 452, 471, 448,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 449, 57788, 451, 57789, 461,
	57790, 467, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1092
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1097
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1101
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1102
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1103
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1104
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1105
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1106
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1107
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1108
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1112
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1121
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1122
		{
			return helpWith(sqllex, "ALTER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1125
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1126
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1127
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1128
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1129
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1130
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1131
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1185
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1211
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1222
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1237
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1241
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1245
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1256
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1268
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1287
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1319
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1323
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1327
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1333
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1337
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1343
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1352
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1363
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1367
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1373
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1381
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1391
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1395
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1405
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1416
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1423
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1435
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1442
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1450
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1455
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1459
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1464
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1470
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1478
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1489
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 103:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1499
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 104:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1509
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 105:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1518
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[9].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			s.AllIndexes = true
			sqlVAL.union.val = s
		}
	case 106:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1529
		{
			err := errors.New("index name should not be specified in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION ... OF INDEX")
			return setErr(sqllex, err)
		}
	case 107:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1535
		{
			err := errors.New("index wildcard unsupported in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION <partition> OF INDEX <tablename>@*")
			return setErr(sqllex, err)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1543
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1547
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1551
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1555
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1561
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1566
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1577
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1581
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1587
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1591
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1598
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1603
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1608
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1613
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1618
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1623
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1628
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1633
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1638
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1643
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1648
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1657
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1669
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1679
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1686
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1690
		{
			sqlVAL.union.val = &tree.AlterTableAlterPrimaryKey{
				TableIndex: sqlDollar[6].union.tableIndexName(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1696
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1703
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1712
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1721
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1726
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1733
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1741
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1742
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1746
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1750
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1756
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1764
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1768
		{
			sqlVAL.union.val = nil
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1774
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1778
		{
			sqlVAL.union.val = nil
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1785
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1789
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1793
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1799
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1803
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 154:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1829
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1832
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1855
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1859
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1862
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1866
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1870
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1876
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1880
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1886
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 164:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1923
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1928
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1932
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1938
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1943
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1948
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1953
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1958
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1962
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1978
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1981
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1985
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1989
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1997
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2001
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2007
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 180:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2011
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2017
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2021
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2025
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2029
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2035
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2039
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2045
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 188:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2049
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2053
		{
			sqlVAL.union.val = nil
		}
	case 190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2059
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2072
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2073
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2074
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2075
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2085
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2093
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2095
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2098
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2108
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2117
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2125
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2127
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2131
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2134
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2144
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2153
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2161
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2163
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2167
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2170
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2174
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2178
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2182
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2195
		{
			sqlVAL.union.val = &tree.CommentOnIndex{Index: sqlDollar[4].union.tableIndexName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2201
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2206
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2218
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2219
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2221
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2222
		{
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2223
		{
			return helpWith(sqllex, "CREATE")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2226
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2227
		{
			return unimplemented(sqllex, "create cast")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2228
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2229
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2230
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2231
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2232
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2233
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2234
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2235
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2236
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2237
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2238
		{
			return unimplementedWithIssue(sqllex, 41649)
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2239
		{
			return unimplemented(sqllex, "create operator")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2240
		{
			return unimplemented(sqllex, "create publication")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2241
		{
			return unimplemented(sqllex, "create rule")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2242
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2243
		{
			return unimplemented(sqllex, "create server")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2244
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2245
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2246
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2249
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2250
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2253
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2254
		{
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2257
		{
		}
	case 255:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2258
		{
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2261
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2262
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2263
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2264
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2265
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2266
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2267
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2268
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2269
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2270
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2271
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2272
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2273
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2274
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2275
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2276
		{
			return unimplemented(sqllex, "drop server")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2277
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2278
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2279
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2280
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2284
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2285
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2286
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2287
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2289
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2290
		{
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2291
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2292
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2302
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2310
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2314
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2318
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2324
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2328
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2337
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2344
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2350
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2356
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2360
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2371
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2383
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2391
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2399
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2409
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2413
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2419
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2423
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2430
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2434
		{

			sqlVAL.union.val = nil
		}
	case 312:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2448
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[6].union.expr()),
				OrderBy:   sqlDollar[7].union.orderBy(),
				Limit:     sqlDollar[8].union.limit(),
				Returning: sqlDollar[9].union.retClause(),
			}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2458
		{
			return helpWith(sqllex, "DELETE")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2461
		{
			return unimplementedWithIssueDetail(sqllex, 40963, "delete using")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2462
		{
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2470
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2473
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2474
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2475
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2476
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2477
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2486
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2487
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2488
		{
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2489
		{
			return helpWith(sqllex, "DROP")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2492
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2493
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2494
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2495
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2496
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2504
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2508
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2511
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2519
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2523
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2526
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2534
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2538
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2541
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2549
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2557
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2564
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2572
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2580
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2587
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2595
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2599
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2602
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2610
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2614
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2617
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2621
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2626
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2649
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2652
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2654
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2658
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", "ANALYZE"}, Statement: sqlDollar[3].union.stmt()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2662
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", "ANALYZE"}, Statement: sqlDollar[3].union.stmt()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2666
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), "ANALYZE"), Statement: sqlDollar[6].union.stmt()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2670
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), "ANALYZE"), Statement: sqlDollar[6].union.stmt()}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2677
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2681
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2684
		{
			return helpWith(sqllex, "DELETE")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2686
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2687
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2688
		{
			return helpWith(sqllex, "INSERT")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2689
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2691
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2692
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2693
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2696
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2701
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2702
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2703
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2708
		{
			return helpWith(sqllex, "DELETE")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2709
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2710
		{
			return helpWith(sqllex, "INSERT")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2712
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2716
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2717
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2721
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2725
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2735
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2743
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2751
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2755
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 421:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2759
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2769
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2776
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2784
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2788
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 426:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2792
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2802
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2806
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2810
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2814
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2817
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2837
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2841
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2845
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2848
		{
			return helpWith(sqllex, "GRANT")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2868
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2872
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2876
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2879
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2884
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2888
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2898
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2902
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2916
		{
			return helpWith(sqllex, "RESET")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2917
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2925
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2929
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2932
		{
			return helpWith(sqllex, "RESET")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2940
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2943
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2954
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2957
		{
			return helpWith(sqllex, "USE")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2961
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2962
		{
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2963
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2964
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2968
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2969
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2970
		{
			return helpWith(sqllex, "USE")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2986
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 473:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3001
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3004
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3022
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3030
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3034
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3038
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3044
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3048
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3054
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3058
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3062
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3066
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3070
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3081
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3084
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3094
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3110
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3114
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3119
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3136
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3139
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3141
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3144
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3148
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3167
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3174
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3179
		{

			sqlVAL.union.val = &tree.SetSessionAuthorizationDefault{}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3184
		{
			return unimplementedWithIssue(sqllex, 40283)
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3189
		{
			return unimplemented(sqllex, "set from current")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3190
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3198
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3203
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3210
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3214
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3220
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3224
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3231
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3252
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3256
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3262
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3266
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3270
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3274
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3278
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3284
		{
			sqlVAL.union.val = tree.Low
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3288
		{
			sqlVAL.union.val = tree.Normal
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3292
		{
			sqlVAL.union.val = tree.High
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3303
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3307
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3311
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3316
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3320
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3333
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3334
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3335
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3336
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3337
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3338
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3340
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3341
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3342
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3343
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3344
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3345
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3346
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3348
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3349
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3350
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3351
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3352
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3353
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3354
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3355
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3356
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3357
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3358
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3360
		{
			return helpWith(sqllex, "SHOW")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3367
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3368
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3369
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3380
		{
			sqlVAL.str = "client_encoding"
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3383
		{
			sqlVAL.str = "timezone"
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3384
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3398
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3402
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3406
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3417
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3425
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3433
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3440
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
			}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3448
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3456
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3463
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3473
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3477
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3480
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3482
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3485
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3487
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3491
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3494
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 613:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3502
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3505
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3513
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3517
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsDB: true, Database: tree.Name(sqlDollar[5].str)}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3521
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3525
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3528
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3536
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3539
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3552
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3560
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 624:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3568
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3571
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 626:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3573
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3577
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3581
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3584
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 630:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3586
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3590
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3593
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3601
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3604
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3606
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3609
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3617
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3620
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3622
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3625
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3629
		{
			sqlVAL.union.val = true
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3631
		{
			sqlVAL.union.val = true
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3633
		{
			sqlVAL.union.val = false
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3643
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: true}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3647
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: false}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3650
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3651
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3653
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3657
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[5].union.slct(), Block: true}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3660
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3662
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3670
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				Block: true,
			}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3678
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3687
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3690
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3692
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3695
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3697
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3701
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3704
		{
			sqlVAL.union.val = true
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3705
		{
			sqlVAL.union.val = false
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3713
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3716
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3718
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3721
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3729
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3739
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3749
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3752
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3755
		{
			sqlVAL.union.val = true
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3756
		{
			sqlVAL.union.val = false
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3763
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3767
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3770
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3777
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3781
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3784
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3791
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3795
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3803
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3808
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3813
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3817
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3825
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3829
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3833
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3846
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3849
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3857
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3860
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3864
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3868
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3872
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3880
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3888
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3895
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3902
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3906
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3917
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: tree.TableIndexName{Table: name},
			}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3925
		{
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: sqlDollar[5].union.tableIndexName(),
			}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3931
		{
			return helpWith(sqllex, "SHOW RANGE")
		}
	case 705:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3940
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3945
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3949
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: tree.Name(sqlDollar[5].str)}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3952
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3956
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3963
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3968
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4088
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4092
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4096
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4135
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4139
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4144
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4148
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4157
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4164
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4168
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4180
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4189
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4192
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 726:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4228
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  sqlDollar[8].union.interleave(),
				Defs:        sqlDollar[6].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[9].union.partitionBy(),
				Temporary:   sqlDollar[2].union.persistenceType(),
			}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4241
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  sqlDollar[11].union.interleave(),
				Defs:        sqlDollar[9].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[12].union.partitionBy(),
				Temporary:   sqlDollar[2].union.persistenceType(),
			}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4255
		{
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4256
		{
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4257
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4261
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  nil,
				Defs:        sqlDollar[5].union.tblDefs(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:4272
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  nil,
				Defs:        sqlDollar[8].union.tblDefs(),
				AsSource:    sqlDollar[11].union.slct(),
			}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4284
		{
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4285
		{
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4286
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4304
		{
			sqlVAL.union.val = true
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4305
		{
			sqlVAL.union.val = true
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4306
		{
			sqlVAL.union.val = false
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4310
		{
			sqlVAL.union.val = true
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4311
		{
			sqlVAL.union.val = true
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4312
		{
			sqlVAL.union.val = true
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4313
		{
			sqlVAL.union.val = true
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4314
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4319
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4325
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4329
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4335
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4341
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4344
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 754:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4348
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4357
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4364
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4369
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4374
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4380
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4387
		{
			sqlVAL.str = ""
		}
	case 763:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4394
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 764:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4400
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4407
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4414
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4420
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4424
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 769:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4430
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4440
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4444
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 772:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4450
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4464
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4475
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4479
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4485
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4489
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4493
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4497
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4501
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4505
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4509
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4527
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4531
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4535
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4539
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4543
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4547
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4551
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4561
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4565
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4569
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 793:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4576
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4586
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4598
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4608
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4620
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4625
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 799:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4631
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4637
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4648
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4658
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4672
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 804:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4676
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4682
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4692
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4703
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4707
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4714
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4720
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4731
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4735
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4741
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4747
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 815:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4751
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4757
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4761
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4767
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4772
		{
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4773
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4774
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4775
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4776
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4777
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 827:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4794
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 828:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4798
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4804
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 830:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4808
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4828
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4832
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4836
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 834:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4840
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4849
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4853
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4857
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4861
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4865
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4871
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4877
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4885
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4889
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4893
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4897
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4901
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4907
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4911
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4917
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 850:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4936
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name:      name,
				Temporary: sqlDollar[2].union.persistenceType(),
				Options:   sqlDollar[5].union.seqOpts(),
			}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4945
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name: name, Options: sqlDollar[8].union.seqOpts(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: true,
			}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4953
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 854:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4957
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4960
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4961
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4964
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4965
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4967
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4968
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: nil}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4969
		{
			varName, err := sqlDollar[3].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[3].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: columnItem}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4979
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4982
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4984
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4986
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4988
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4989
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4991
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4992
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4994
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4996
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5004
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5007
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 874:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5015
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5019
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5022
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5026
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 878:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5030
		{
			sqlVAL.union.val = nil
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5040
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5044
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5047
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5052
		{
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5053
		{
		}
	case 884:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5061
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
				Temporary:   sqlDollar[2].union.persistenceType(),
			}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5070
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 886:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5071
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 887:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5074
		{
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5075
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 889:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5081
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 890:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5083
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 891:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5085
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 892:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5087
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5089
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 894:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5091
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 895:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5107
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5121
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5136
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5150
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5164
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 900:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5167
		{
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5168
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 902:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5172
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5187
		{
			sqlVAL.union.val = false
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5193
		{
			sqlVAL.union.val = true
		}
	case 905:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5197
		{
			sqlVAL.union.val = false
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5203
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5207
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5216
		{

			e := sqlDollar[1].union.expr()
			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: dir, NullsOrder: nullsOrder}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5238
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 910:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5239
		{
			sqlVAL.str = ""
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5243
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5247
		{
			sqlVAL.union.val = tree.Descending
		}
	case 913:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5251
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 914:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5257
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5264
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5268
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5274
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5280
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5288
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5294
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5302
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5308
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5316
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5320
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5325
		{
		}
	case 926:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5326
		{
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5329
		{
		}
	case 928:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5330
		{
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5338
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5341
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5351
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5360
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5363
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5371
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5374
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5378
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5379
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5380
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5396
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5399
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5401
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5404
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5414
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5417
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5419
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5422
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5426
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5431
		{
		}
	case 953:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5432
		{
		}
	case 954:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5433
		{
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5441
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5448
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5451
		{
		}
	case 958:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5452
		{
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5456
		{
			sqlVAL.str = ""
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5460
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5464
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 962:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5468
		{
			sqlVAL.str = ""
		}
	case 963:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5474
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5478
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5484
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5488
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5494
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5498
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 969:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5511
		{
		}
	case 970:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5513
		{
		}
	case 971:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5517
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5522
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5526
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5530
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5536
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5542
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5548
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5552
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 979:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5562
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5572
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5582
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5586
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 983:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5590
		{
			sqlVAL.str = ""
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5596
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 985:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5600
		{
			sqlVAL.str = ""
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5606
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 987:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5610
		{
			sqlVAL.str = ""
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5616
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 989:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5620
		{
			sqlVAL.str = ""
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5625
		{
		}
	case 991:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5626
		{
		}
	case 992:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5638
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 993:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5645
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5652
		{
			return helpWith(sqllex, "INSERT")
		}
	case 995:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5663
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5670
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5674
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5683
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5690
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5694
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5698
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5704
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5708
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5728
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5732
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5736
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5742
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5745
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5746
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5748
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5754
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5759
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5763
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5780
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5792
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5795
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5798
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5804
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5808
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5821
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5824
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5828
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5871
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5877
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5881
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5896
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), ForLocked: sqlDollar[2].union.forLocked()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5900
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), ForLocked: sqlDollar[3].union.forLocked()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5904
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), ForLocked: sqlDollar[4].union.forLocked()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5908
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), ForLocked: sqlDollar[3].union.forLocked()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5912
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), ForLocked: sqlDollar[4].union.forLocked()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5916
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), ForLocked: sqlDollar[5].union.forLocked()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5921
		{
			sqlVAL.union.val = tree.ForLocked{}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5923
		{
			sqlVAL.union.val = tree.ForLocked{Strength: sqlDollar[1].union.lockingStrength(), Targets: sqlDollar[2].union.tableNames()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5928
		{
			sqlVAL.union.val = tree.TableNames{}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5929
		{
			sqlVAL.union.val = sqlDollar[2].union.tableNames()
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5932
		{
			sqlVAL.union.val = tree.ForUpdate
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5933
		{
			sqlVAL.union.val = tree.ForNoKeyUpdate
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5934
		{
			sqlVAL.union.val = tree.ForShare
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5935
		{
			sqlVAL.union.val = tree.ForKeyShare
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5938
		{
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5940
		{
			return unimplementedWithIssue(sqllex, 40476)
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5941
		{
			return unimplementedWithIssue(sqllex, 40476)
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5946
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5981
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5982
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5983
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6005
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6018
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6032
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6044
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6048
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6057
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6066
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6081
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6088
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6100
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6104
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6109
		{
			sqlVAL.union.val = &tree.With{Recursive: true, CTEList: sqlDollar[3].union.ctes()}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6115
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6119
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6125
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6133
		{
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6134
		{
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6138
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6142
		{
			sqlVAL.union.val = nil
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6147
		{
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6148
		{
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6152
		{
			sqlVAL.union.val = true
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6156
		{
			sqlVAL.union.val = false
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6160
		{
			sqlVAL.union.val = false
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6166
		{
			sqlVAL.union.val = true
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6172
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6177
		{
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6178
		{
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6182
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6186
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6192
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6198
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6202
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6208
		{

			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			sqlVAL.union.val = &tree.Order{
				OrderType:  tree.OrderByColumn,
				Expr:       sqlDollar[1].union.expr(),
				Direction:  dir,
				NullsOrder: nullsOrder,
			}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6229
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6234
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6246
		{
			sqlVAL.union.val = tree.NullsFirst
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6250
		{
			sqlVAL.union.val = tree.NullsLast
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6254
		{
			sqlVAL.union.val = tree.DefaultNullsOrder
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6263
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6272
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
				sqlVAL.union.val.(*tree.Limit).LimitAll = sqlDollar[2].union.limit().LimitAll
			}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6284
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6288
		{
			sqlVAL.union.val = &tree.Limit{LimitAll: true}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6292
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6301
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6307
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6314
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6323
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6327
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6331
		{
			sqlVAL.union.val = tree.NewNumVal(constant.MakeInt64(1), "", false)
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6337
		{
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6338
		{
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6341
		{
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6342
		{
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6359
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6363
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6369
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6373
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6392
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6395
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6397
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6409
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6412
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6414
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6420
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6424
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6430
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6434
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6439
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6444
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6450
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6455
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6462
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6467
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6478
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6482
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6486
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6494
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6525
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6539
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6549
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6557
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6566
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6570
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6574
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6585
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6609
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6615
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6619
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6625
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6627
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6631
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6637
		{
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6639
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6642
		{
			sqlVAL.union.val = nil
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6643
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6644
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6648
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6652
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6658
		{
			sqlVAL.union.val = true
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6662
		{
			sqlVAL.union.val = false
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6682
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6686
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6690
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6694
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6698
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6702
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6708
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6712
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6719
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6725
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6732
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6738
		{
			sqlVAL.str = tree.AstFull
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6742
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6746
		{
			sqlVAL.str = tree.AstRight
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6750
		{
			sqlVAL.str = tree.AstInner
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6756
		{
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6757
		{
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6778
		{
			sqlVAL.str = tree.AstHash
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6782
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6786
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6790
		{
			sqlVAL.str = ""
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6803
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6807
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6812
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6813
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6814
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6815
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6819
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6824
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6838
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6842
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6848
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6856
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6866
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6873
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6885
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6898
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6906
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6907
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6917
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6924
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6925
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6927
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6935
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6936
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6947
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6949
		{
			prec, err := sqlDollar[3].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			if prec == 6 {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			} else {
				return unimplementedWithIssue(sqllex, 32564)
			}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6977
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6981
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6985
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6989
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6993
		{
			sqlVAL.union.val = types.String
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6997
		{
			sqlVAL.union.val = types.Name
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7001
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7010
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7014
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7018
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7022
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7026
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7030
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7034
		{
			sqlVAL.union.val = types.INet
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7038
		{
			sqlVAL.union.val = types.Oid
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7042
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7046
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7050
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7081
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7089
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7097
		{
			sqlVAL.union.val = nil
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7104
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7108
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7112
		{
			sqlVAL.union.val = types.Int2
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7116
		{
			sqlVAL.union.val = types.Int2
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7120
		{
			sqlVAL.union.val = types.Int4
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7124
		{
			sqlVAL.union.val = types.Int
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7128
		{
			sqlVAL.union.val = types.Int
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7132
		{
			sqlVAL.union.val = types.Int
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7136
		{
			sqlVAL.union.val = types.Float4
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7140
		{
			sqlVAL.union.val = types.Float4
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7144
		{
			sqlVAL.union.val = types.Float
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7148
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7152
		{
			sqlVAL.union.val = types.Float
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7156
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7164
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7172
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7180
		{
			sqlVAL.union.val = types.Bool
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7184
		{
			sqlVAL.union.val = types.Bool
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7191
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7195
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7199
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7203
		{
			sqlVAL.union.val = types.RegType
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7207
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7213
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7226
		{
			sqlVAL.union.val = types.Float
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7232
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7238
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7246
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7250
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7254
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7260
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7272
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7278
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7282
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7286
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7290
		{
			sqlVAL.union.val = types.String
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7299
		{
			sqlVAL.union.val = true
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7300
		{
			sqlVAL.union.val = false
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7305
		{
			sqlVAL.union.val = types.Date
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7309
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = types.Time
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7314
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = types.MakeTime(prec)
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7321
		{
			sqlVAL.union.val = types.TimeTZ
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7322
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7324
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7332
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7345
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7349
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7359
		{
			sqlVAL.union.val = true
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7360
		{
			sqlVAL.union.val = false
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7361
		{
			sqlVAL.union.val = false
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7365
		{
			sqlVAL.union.val = types.Interval
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7371
		{
			sqlVAL.union.val = tree.Year
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7375
		{
			sqlVAL.union.val = tree.Month
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7379
		{
			sqlVAL.union.val = tree.Day
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7383
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7387
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7391
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7397
		{
			sqlVAL.union.val = tree.Month
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7401
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7405
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7409
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7413
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7417
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7421
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7428
		{
			sqlVAL.union.val = nil
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7434
		{
			sqlVAL.union.val = tree.Second
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7437
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7461
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7465
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7469
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7473
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7484
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7489
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7493
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7497
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7501
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7505
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7509
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7513
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7517
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7521
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7525
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7529
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7533
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7537
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7541
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7545
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7549
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7553
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7557
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7561
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7565
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7569
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7573
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7577
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7581
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7585
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7589
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7593
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7597
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7601
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7605
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Overlaps, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7609
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7613
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7617
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7621
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7625
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7629
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7633
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7637
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7641
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7645
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7649
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7653
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7657
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7661
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7665
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7669
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7673
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7677
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7681
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7685
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7689
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7693
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7697
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7701
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7705
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7709
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7713
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7717
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7721
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7725
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7728
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7730
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7734
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7738
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7742
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7746
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7750
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7754
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7758
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7762
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7766
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7770
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7774
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7778
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7782
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7786
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7790
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7794
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7811
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7816
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7828
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7832
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7836
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7840
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7844
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7848
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7852
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7856
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7860
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7864
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7868
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7872
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7876
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7880
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7884
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7888
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7892
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7896
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7900
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7904
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7908
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7912
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7916
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7920
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7924
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7928
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7932
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7936
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7950
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7958
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7994
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7998
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8002
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8006
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8010
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8015
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8017
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8021
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8024
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8026
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8030
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8034
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8038
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8042
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8051
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8058
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8062
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8066
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8071
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8075
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8079
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8083
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8087
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8090
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8094
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8098
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8101
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8102
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8104
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8110
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8114
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8117
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8128
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8135
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8144
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8145
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8150
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8154
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8158
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8164
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8168
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8172
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8176
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8182
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8186
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8190
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8194
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8198
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8202
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8206
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8210
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8214
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8218
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8222
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8226
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8230
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8237
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8240
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8242
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8245
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8247
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8251
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8254
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8256
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8259
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8261
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8264
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8266
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8269
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8271
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8274
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8276
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8279
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8281
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8285
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8288
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8289
		{
			return unimplemented(sqllex, "treat")
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8291
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8295
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8299
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8303
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8307
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8310
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8312
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8315
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8320
		{
			return unimplemented(sqllex, "within group")
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8321
		{
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8325
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8329
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8336
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8340
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8346
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8350
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8356
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8364
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8368
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8372
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8379
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8399
		{
			sqlVAL.str = ""
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8405
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8409
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8415
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.RANGE,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8423
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.ROWS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8431
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.GROUPS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8439
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8445
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8458
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8486
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8490
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8494
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8498
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8505
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8514
		{
			sqlVAL.union.val = tree.ExcludeCurrentRow
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8518
		{
			sqlVAL.union.val = tree.ExcludeGroup
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8522
		{
			sqlVAL.union.val = tree.ExcludeTies
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8526
		{

			sqlVAL.union.val = tree.NoExclusion
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8531
		{
			sqlVAL.union.val = tree.NoExclusion
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8544
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8548
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8555
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8567
		{
			sqlVAL.union.val = tree.Any
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8571
		{
			sqlVAL.union.val = tree.Some
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8575
		{
			sqlVAL.union.val = tree.All
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8580
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8581
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8582
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8583
		{
			sqlVAL.union.val = tree.Div
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8584
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8585
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8586
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8587
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8588
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8589
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8590
		{
			sqlVAL.union.val = tree.LT
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8591
		{
			sqlVAL.union.val = tree.GT
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8592
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8593
		{
			sqlVAL.union.val = tree.LE
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8594
		{
			sqlVAL.union.val = tree.GE
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8595
		{
			sqlVAL.union.val = tree.NE
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8599
		{
			sqlVAL.union.val = tree.Like
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8600
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8601
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8602
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8625
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8629
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8635
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8639
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8643
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8654
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8658
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8664
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8668
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8675
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8681
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8685
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8691
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8695
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8701
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8705
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8711
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8715
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8721
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8725
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8748
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8752
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8756
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8762
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8769
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8773
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8790
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8794
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8798
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8802
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8806
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8812
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8818
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8824
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8828
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8832
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8838
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1627:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8850
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8857
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8861
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1630:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8867
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8873
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1632:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8877
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1634:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8884
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8890
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1636:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8894
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1638:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8901
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8907
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8911
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8916
		{
		}
	case 1642:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8917
		{
		}
	case 1643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8921
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8925
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8931
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8940
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8944
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8948
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8956
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8960
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8966
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8970
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8989
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8997
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9020
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9029
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1658:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9033
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9037
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9041
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9047
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9051
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9059
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9063
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9072
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9083
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9092
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9100
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9197
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9204
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1693:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9208
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1694:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9212
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1696:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9226
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1697:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9230
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9234
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9247
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9265
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9278
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1705:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9285
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9310
		{
			sqlVAL.str = ""
		}
	case 1714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9316
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9320
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
