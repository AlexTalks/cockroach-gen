// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql-gen.y:55
type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:567
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BTREE = lex.BTREE
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BTREE",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:8595

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 28,
	428, 28,
	-2, 878,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 69,
	171, 713,
	188, 713,
	-2, 0,
	-1, 75,
	103, 878,
	177, 878,
	375, 878,
	376, 878,
	-2, 0,
	-1, 86,
	116, 852,
	129, 852,
	185, 852,
	212, 852,
	240, 852,
	248, 852,
	372, 852,
	-2, 841,
	-1, 114,
	121, 522,
	201, 522,
	362, 522,
	-2, 0,
	-1, 115,
	4, 880,
	21, 880,
	22, 880,
	23, 880,
	24, 880,
	26, 880,
	31, 880,
	36, 880,
	37, 880,
	38, 880,
	39, 880,
	40, 880,
	41, 880,
	42, 880,
	43, 880,
	44, 880,
	45, 880,
	47, 880,
	48, 880,
	49, 880,
	50, 880,
	51, 880,
	52, 880,
	53, 880,
	56, 880,
	57, 880,
	58, 880,
	59, 880,
	61, 880,
	62, 880,
	66, 880,
	67, 880,
	68, 880,
	69, 880,
	70, 880,
	72, 880,
	73, 880,
	74, 880,
	75, 880,
	77, 880,
	79, 880,
	80, 880,
	83, 880,
	84, 880,
	92, 880,
	93, 880,
	94, 880,
	95, 880,
	96, 880,
	97, 880,
	98, 880,
	99, 880,
	101, 880,
	103, 880,
	105, 880,
	108, 880,
	109, 880,
	110, 880,
	112, 880,
	114, 880,
	115, 880,
	117, 880,
	118, 880,
	119, 880,
	120, 880,
	121, 880,
	122, 880,
	123, 880,
	124, 880,
	125, 880,
	126, 880,
	134, 880,
	135, 880,
	136, 880,
	137, 880,
	138, 880,
	139, 880,
	141, 880,
	143, 880,
	147, 880,
	149, 880,
	150, 880,
	152, 880,
	153, 880,
	155, 880,
	156, 880,
	157, 880,
	158, 880,
	159, 880,
	160, 880,
	161, 880,
	162, 880,
	163, 880,
	166, 880,
	167, 880,
	172, 880,
	173, 880,
	174, 880,
	177, 880,
	178, 880,
	179, 880,
	180, 880,
	181, 880,
	182, 880,
	183, 880,
	184, 880,
	186, 880,
	188, 880,
	191, 880,
	192, 880,
	193, 880,
	195, 880,
	196, 880,
	199, 880,
	200, 880,
	201, 880,
	203, 880,
	204, 880,
	206, 880,
	207, 880,
	209, 880,
	210, 880,
	213, 880,
	214, 880,
	217, 880,
	219, 880,
	222, 880,
	223, 880,
	224, 880,
	225, 880,
	226, 880,
	228, 880,
	229, 880,
	230, 880,
	231, 880,
	236, 880,
	237, 880,
	238, 880,
	239, 880,
	241, 880,
	242, 880,
	244, 880,
	245, 880,
	246, 880,
	249, 880,
	250, 880,
	252, 880,
	254, 880,
	255, 880,
	256, 880,
	257, 880,
	258, 880,
	259, 880,
	260, 880,
	261, 880,
	263, 880,
	264, 880,
	265, 880,
	266, 880,
	267, 880,
	269, 880,
	270, 880,
	271, 880,
	272, 880,
	273, 880,
	274, 880,
	275, 880,
	276, 880,
	277, 880,
	279, 880,
	280, 880,
	281, 880,
	282, 880,
	283, 880,
	285, 880,
	286, 880,
	287, 880,
	288, 880,
	289, 880,
	290, 880,
	291, 880,
	293, 880,
	295, 880,
	296, 880,
	297, 880,
	298, 880,
	299, 880,
	300, 880,
	302, 880,
	303, 880,
	304, 880,
	305, 880,
	306, 880,
	307, 880,
	308, 880,
	310, 880,
	311, 880,
	312, 880,
	313, 880,
	314, 880,
	315, 880,
	316, 880,
	317, 880,
	318, 880,
	320, 880,
	321, 880,
	322, 880,
	323, 880,
	325, 880,
	326, 880,
	327, 880,
	328, 880,
	330, 880,
	331, 880,
	332, 880,
	333, 880,
	334, 880,
	335, 880,
	336, 880,
	337, 880,
	338, 880,
	339, 880,
	340, 880,
	341, 880,
	343, 880,
	344, 880,
	346, 880,
	347, 880,
	348, 880,
	349, 880,
	350, 880,
	351, 880,
	352, 880,
	353, 880,
	354, 880,
	356, 880,
	357, 880,
	358, 880,
	359, 880,
	362, 880,
	363, 880,
	364, 880,
	365, 880,
	367, 880,
	368, 880,
	370, 880,
	371, 880,
	374, 880,
	375, 880,
	376, 880,
	377, 880,
	379, 880,
	381, 880,
	382, 880,
	383, 880,
	384, 880,
	385, 880,
	386, 880,
	387, 880,
	389, 880,
	390, 880,
	391, 880,
	396, 880,
	397, 880,
	398, 880,
	399, 880,
	400, 880,
	401, 880,
	-2, 0,
	-1, 116,
	1, 774,
	191, 774,
	269, 774,
	274, 774,
	427, 774,
	428, 774,
	-2, 0,
	-1, 118,
	1, 774,
	427, 774,
	428, 774,
	-2, 0,
	-1, 119,
	1, 774,
	427, 774,
	428, 774,
	-2, 0,
	-1, 120,
	1, 778,
	427, 778,
	428, 778,
	-2, 0,
	-1, 144,
	116, 851,
	129, 851,
	185, 851,
	212, 851,
	240, 851,
	248, 851,
	372, 851,
	-2, 844,
	-1, 174,
	4, 887,
	5, 887,
	6, 887,
	7, 887,
	8, 887,
	9, 887,
	10, 887,
	21, 887,
	22, 887,
	23, 887,
	24, 887,
	26, 887,
	31, 887,
	32, 887,
	36, 887,
	37, 887,
	38, 887,
	39, 887,
	40, 887,
	41, 887,
	42, 887,
	43, 887,
	44, 887,
	45, 887,
	47, 887,
	48, 887,
	49, 887,
	50, 887,
	51, 887,
	52, 887,
	53, 887,
	54, 887,
	55, 887,
	56, 887,
	57, 887,
	58, 887,
	59, 887,
	61, 887,
	62, 887,
	64, 887,
	66, 887,
	67, 887,
	68, 887,
	69, 887,
	70, 887,
	72, 887,
	73, 887,
	74, 887,
	75, 887,
	77, 887,
	79, 887,
	80, 887,
	82, 887,
	83, 887,
	84, 887,
	85, 887,
	86, 887,
	87, 887,
	88, 887,
	89, 887,
	90, 887,
	91, 887,
	92, 887,
	93, 887,
	94, 887,
	95, 887,
	96, 887,
	97, 887,
	98, 887,
	99, 887,
	100, 887,
	101, 887,
	103, 887,
	105, 887,
	108, 887,
	109, 887,
	110, 887,
	112, 887,
	114, 887,
	115, 887,
	117, 887,
	118, 887,
	119, 887,
	120, 887,
	121, 887,
	122, 887,
	123, 887,
	124, 887,
	125, 887,
	126, 887,
	127, 887,
	128, 887,
	134, 887,
	135, 887,
	136, 887,
	137, 887,
	138, 887,
	139, 887,
	141, 887,
	143, 887,
	146, 887,
	147, 887,
	149, 887,
	150, 887,
	152, 887,
	153, 887,
	155, 887,
	156, 887,
	157, 887,
	158, 887,
	159, 887,
	160, 887,
	161, 887,
	162, 887,
	163, 887,
	164, 887,
	166, 887,
	167, 887,
	172, 887,
	173, 887,
	174, 887,
	176, 887,
	177, 887,
	178, 887,
	179, 887,
	180, 887,
	181, 887,
	182, 887,
	183, 887,
	184, 887,
	186, 887,
	188, 887,
	189, 887,
	190, 887,
	191, 887,
	192, 887,
	193, 887,
	194, 887,
	195, 887,
	196, 887,
	199, 887,
	200, 887,
	201, 887,
	203, 887,
	204, 887,
	206, 887,
	207, 887,
	208, 887,
	209, 887,
	210, 887,
	211, 887,
	213, 887,
	214, 887,
	217, 887,
	219, 887,
	220, 887,
	221, 887,
	222, 887,
	223, 887,
	224, 887,
	225, 887,
	226, 887,
	227, 887,
	228, 887,
	229, 887,
	230, 887,
	231, 887,
	232, 887,
	234, 887,
	235, 887,
	236, 887,
	237, 887,
	238, 887,
	239, 887,
	241, 887,
	242, 887,
	245, 887,
	246, 887,
	249, 887,
	250, 887,
	251, 887,
	252, 887,
	253, 887,
	254, 887,
	255, 887,
	256, 887,
	257, 887,
	258, 887,
	259, 887,
	260, 887,
	261, 887,
	263, 887,
	264, 887,
	265, 887,
	266, 887,
	267, 887,
	269, 887,
	270, 887,
	271, 887,
	272, 887,
	273, 887,
	274, 887,
	275, 887,
	276, 887,
	277, 887,
	279, 887,
	280, 887,
	281, 887,
	282, 887,
	283, 887,
	285, 887,
	286, 887,
	287, 887,
	288, 887,
	289, 887,
	290, 887,
	291, 887,
	293, 887,
	294, 887,
	295, 887,
	296, 887,
	297, 887,
	298, 887,
	299, 887,
	300, 887,
	302, 887,
	303, 887,
	304, 887,
	305, 887,
	306, 887,
	307, 887,
	308, 887,
	310, 887,
	311, 887,
	312, 887,
	313, 887,
	314, 887,
	315, 887,
	316, 887,
	317, 887,
	318, 887,
	319, 887,
	320, 887,
	321, 887,
	322, 887,
	323, 887,
	324, 887,
	325, 887,
	326, 887,
	327, 887,
	328, 887,
	330, 887,
	331, 887,
	332, 887,
	333, 887,
	334, 887,
	335, 887,
	336, 887,
	337, 887,
	338, 887,
	339, 887,
	340, 887,
	341, 887,
	343, 887,
	344, 887,
	346, 887,
	347, 887,
	348, 887,
	349, 887,
	350, 887,
	351, 887,
	352, 887,
	353, 887,
	354, 887,
	356, 887,
	357, 887,
	358, 887,
	359, 887,
	362, 887,
	363, 887,
	364, 887,
	365, 887,
	366, 887,
	367, 887,
	368, 887,
	370, 887,
	371, 887,
	374, 887,
	375, 887,
	376, 887,
	377, 887,
	378, 887,
	379, 887,
	381, 887,
	382, 887,
	383, 887,
	384, 887,
	385, 887,
	386, 887,
	387, 887,
	389, 887,
	390, 887,
	391, 887,
	396, 887,
	397, 887,
	398, 887,
	399, 887,
	400, 887,
	401, 887,
	402, 887,
	410, 887,
	415, 887,
	416, 887,
	417, 887,
	424, 887,
	430, 887,
	-2, 0,
	-1, 177,
	1, 28,
	428, 28,
	-2, 878,
	-1, 509,
	145, 1603,
	360, 1603,
	407, 1603,
	426, 1603,
	-2, 0,
	-1, 510,
	145, 1523,
	360, 1523,
	407, 1523,
	426, 1523,
	-2, 0,
	-1, 512,
	145, 1676,
	360, 1676,
	407, 1676,
	426, 1676,
	-2, 0,
	-1, 514,
	145, 1704,
	360, 1704,
	407, 1704,
	426, 1704,
	-2, 0,
	-1, 521,
	145, 1608,
	360, 1608,
	407, 1608,
	426, 1608,
	-2, 399,
	-1, 538,
	426, 1483,
	429, 1483,
	-2, 565,
	-1, 539,
	426, 1485,
	429, 1485,
	-2, 566,
	-1, 540,
	426, 1484,
	429, 1484,
	-2, 567,
	-1, 541,
	429, 1435,
	-2, 568,
	-1, 643,
	1, 495,
	423, 495,
	425, 495,
	427, 495,
	428, 495,
	-2, 0,
	-1, 644,
	1, 564,
	142, 564,
	423, 564,
	425, 564,
	427, 564,
	428, 564,
	-2, 0,
	-1, 650,
	1, 509,
	423, 509,
	425, 509,
	427, 509,
	428, 509,
	-2, 0,
	-1, 652,
	1, 513,
	423, 513,
	425, 513,
	427, 513,
	428, 513,
	-2, 0,
	-1, 654,
	1, 523,
	423, 523,
	425, 523,
	427, 523,
	428, 523,
	-2, 0,
	-1, 655,
	1, 529,
	423, 529,
	425, 529,
	427, 529,
	428, 529,
	-2, 0,
	-1, 656,
	1, 532,
	423, 532,
	425, 532,
	427, 532,
	428, 532,
	-2, 0,
	-1, 660,
	1, 546,
	423, 546,
	425, 546,
	427, 546,
	428, 546,
	-2, 0,
	-1, 661,
	1, 548,
	423, 548,
	425, 548,
	427, 548,
	428, 548,
	-2, 0,
	-1, 704,
	129, 891,
	212, 891,
	240, 891,
	-2, 847,
	-1, 717,
	129, 890,
	212, 890,
	240, 890,
	-2, 845,
	-1, 739,
	424, 1781,
	-2, 1184,
	-1, 740,
	424, 1782,
	-2, 1185,
	-1, 768,
	424, 1477,
	-2, 1468,
	-1, 774,
	5, 1013,
	-2, 1513,
	-1, 775,
	5, 1014,
	-2, 1518,
	-1, 776,
	5, 1015,
	-2, 1517,
	-1, 777,
	5, 1016,
	-2, 1701,
	-1, 778,
	5, 1017,
	-2, 1610,
	-1, 779,
	5, 1018,
	-2, 1669,
	-1, 780,
	5, 1019,
	-2, 1671,
	-1, 781,
	5, 1020,
	-2, 1681,
	-1, 782,
	5, 1021,
	-2, 1672,
	-1, 783,
	5, 1022,
	-2, 1673,
	-1, 784,
	5, 1023,
	-2, 1512,
	-1, 785,
	5, 1024,
	-2, 1712,
	-1, 786,
	5, 1025,
	-2, 1579,
	-1, 787,
	5, 1026,
	-2, 1617,
	-1, 788,
	5, 1027,
	-2, 1618,
	-1, 789,
	5, 1028,
	-2, 1583,
	-1, 790,
	5, 1029,
	424, 1492,
	-2, 1483,
	-1, 791,
	5, 1082,
	424, 1082,
	-2, 1747,
	-1, 796,
	424, 1493,
	-2, 1484,
	-1, 798,
	5, 1033,
	-2, 1745,
	-1, 799,
	5, 1034,
	-2, 1746,
	-1, 800,
	5, 1035,
	-2, 1582,
	-1, 801,
	5, 1036,
	-2, 1758,
	-1, 802,
	5, 1037,
	-2, 1584,
	-1, 803,
	5, 1038,
	-2, 1585,
	-1, 804,
	5, 1039,
	-2, 1586,
	-1, 805,
	5, 1040,
	-2, 1727,
	-1, 806,
	5, 1041,
	-2, 1756,
	-1, 807,
	5, 1042,
	-2, 1565,
	-1, 808,
	5, 1043,
	-2, 1566,
	-1, 809,
	5, 1057,
	-2, 1739,
	-1, 811,
	5, 1032,
	-2, 1735,
	-1, 812,
	5, 1032,
	-2, 1734,
	-1, 813,
	5, 1032,
	-2, 1751,
	-1, 814,
	5, 1049,
	-2, 1729,
	-1, 815,
	5, 1050,
	-2, 1514,
	-1, 816,
	5, 1060,
	-2, 1728,
	-1, 817,
	5, 1062,
	-2, 1766,
	-1, 819,
	5, 1073,
	-2, 1542,
	-1, 820,
	5, 1074,
	-2, 1760,
	-1, 821,
	5, 1076,
	-2, 1761,
	-1, 822,
	5, 1078,
	-2, 1762,
	-1, 823,
	5, 1080,
	-2, 1702,
	-1, 824,
	5, 1001,
	-2, 1592,
	-1, 825,
	5, 1002,
	-2, 1593,
	-1, 845,
	5, 1068,
	-2, 1691,
	-1, 863,
	5, 1067,
	-2, 1767,
	-1, 864,
	5, 1069,
	390, 1069,
	-2, 1730,
	-1, 865,
	5, 1070,
	390, 1070,
	-2, 1731,
	-1, 910,
	424, 1492,
	-2, 1483,
	-1, 939,
	145, 1704,
	360, 1704,
	407, 1704,
	426, 1704,
	-2, 0,
	-1, 940,
	191, 786,
	269, 786,
	274, 786,
	-2, 387,
	-1, 1058,
	285, 1465,
	417, 1465,
	-2, 1464,
	-1, 1115,
	259, 876,
	-2, 692,
	-1, 1127,
	243, 1487,
	-2, 0,
	-1, 1166,
	1, 280,
	423, 280,
	425, 280,
	427, 280,
	428, 280,
	-2, 850,
	-1, 1169,
	4, 1765,
	11, 1765,
	12, 1765,
	14, 1765,
	15, 1765,
	16, 1765,
	17, 1765,
	18, 1765,
	19, 1765,
	21, 1765,
	22, 1765,
	23, 1765,
	24, 1765,
	26, 1765,
	29, 1765,
	31, 1765,
	33, 1765,
	36, 1765,
	37, 1765,
	38, 1765,
	39, 1765,
	40, 1765,
	41, 1765,
	42, 1765,
	43, 1765,
	44, 1765,
	45, 1765,
	47, 1765,
	48, 1765,
	49, 1765,
	50, 1765,
	51, 1765,
	52, 1765,
	53, 1765,
	56, 1765,
	57, 1765,
	58, 1765,
	59, 1765,
	61, 1765,
	62, 1765,
	63, 1765,
	66, 1765,
	67, 1765,
	68, 1765,
	69, 1765,
	70, 1765,
	71, 1765,
	72, 1765,
	73, 1765,
	74, 1765,
	75, 1765,
	77, 1765,
	78, 1765,
	79, 1765,
	80, 1765,
	82, 1765,
	83, 1765,
	84, 1765,
	92, 1765,
	93, 1765,
	94, 1765,
	95, 1765,
	96, 1765,
	97, 1765,
	98, 1765,
	99, 1765,
	101, 1765,
	103, 1765,
	105, 1765,
	108, 1765,
	109, 1765,
	110, 1765,
	112, 1765,
	114, 1765,
	115, 1765,
	117, 1765,
	118, 1765,
	119, 1765,
	120, 1765,
	121, 1765,
	122, 1765,
	123, 1765,
	124, 1765,
	125, 1765,
	126, 1765,
	130, 1765,
	131, 1765,
	132, 1765,
	133, 1765,
	134, 1765,
	135, 1765,
	136, 1765,
	137, 1765,
	138, 1765,
	139, 1765,
	140, 1765,
	141, 1765,
	143, 1765,
	146, 1765,
	147, 1765,
	149, 1765,
	150, 1765,
	152, 1765,
	153, 1765,
	155, 1765,
	156, 1765,
	157, 1765,
	158, 1765,
	159, 1765,
	160, 1765,
	161, 1765,
	162, 1765,
	163, 1765,
	164, 1765,
	165, 1765,
	166, 1765,
	167, 1765,
	168, 1765,
	169, 1765,
	170, 1765,
	172, 1765,
	173, 1765,
	174, 1765,
	176, 1765,
	177, 1765,
	178, 1765,
	179, 1765,
	180, 1765,
	181, 1765,
	182, 1765,
	183, 1765,
	184, 1765,
	186, 1765,
	188, 1765,
	189, 1765,
	190, 1765,
	191, 1765,
	192, 1765,
	193, 1765,
	194, 1765,
	195, 1765,
	196, 1765,
	197, 1765,
	198, 1765,
	199, 1765,
	200, 1765,
	201, 1765,
	203, 1765,
	204, 1765,
	206, 1765,
	207, 1765,
	208, 1765,
	209, 1765,
	210, 1765,
	211, 1765,
	213, 1765,
	214, 1765,
	217, 1765,
	218, 1765,
	219, 1765,
	222, 1765,
	223, 1765,
	224, 1765,
	225, 1765,
	226, 1765,
	227, 1765,
	228, 1765,
	229, 1765,
	230, 1765,
	231, 1765,
	234, 1765,
	236, 1765,
	237, 1765,
	238, 1765,
	239, 1765,
	241, 1765,
	242, 1765,
	245, 1765,
	246, 1765,
	247, 1765,
	249, 1765,
	250, 1765,
	252, 1765,
	254, 1765,
	255, 1765,
	256, 1765,
	257, 1765,
	258, 1765,
	259, 1765,
	260, 1765,
	261, 1765,
	263, 1765,
	264, 1765,
	265, 1765,
	266, 1765,
	267, 1765,
	269, 1765,
	270, 1765,
	271, 1765,
	272, 1765,
	273, 1765,
	274, 1765,
	275, 1765,
	276, 1765,
	277, 1765,
	279, 1765,
	280, 1765,
	281, 1765,
	282, 1765,
	283, 1765,
	284, 1765,
	285, 1765,
	286, 1765,
	287, 1765,
	288, 1765,
	289, 1765,
	290, 1765,
	291, 1765,
	293, 1765,
	294, 1765,
	295, 1765,
	296, 1765,
	297, 1765,
	298, 1765,
	299, 1765,
	300, 1765,
	301, 1765,
	302, 1765,
	303, 1765,
	304, 1765,
	305, 1765,
	306, 1765,
	307, 1765,
	308, 1765,
	310, 1765,
	311, 1765,
	312, 1765,
	313, 1765,
	314, 1765,
	315, 1765,
	316, 1765,
	317, 1765,
	318, 1765,
	320, 1765,
	321, 1765,
	322, 1765,
	323, 1765,
	324, 1765,
	325, 1765,
	326, 1765,
	327, 1765,
	328, 1765,
	330, 1765,
	331, 1765,
	332, 1765,
	333, 1765,
	334, 1765,
	335, 1765,
	336, 1765,
	337, 1765,
	338, 1765,
	339, 1765,
	340, 1765,
	341, 1765,
	343, 1765,
	344, 1765,
	346, 1765,
	347, 1765,
	348, 1765,
	349, 1765,
	350, 1765,
	351, 1765,
	352, 1765,
	353, 1765,
	354, 1765,
	356, 1765,
	357, 1765,
	358, 1765,
	359, 1765,
	362, 1765,
	363, 1765,
	364, 1765,
	365, 1765,
	367, 1765,
	368, 1765,
	370, 1765,
	371, 1765,
	374, 1765,
	375, 1765,
	376, 1765,
	377, 1765,
	379, 1765,
	381, 1765,
	382, 1765,
	383, 1765,
	384, 1765,
	385, 1765,
	386, 1765,
	387, 1765,
	389, 1765,
	390, 1765,
	391, 1765,
	396, 1765,
	397, 1765,
	398, 1765,
	399, 1765,
	400, 1765,
	401, 1765,
	402, 1765,
	403, 1765,
	405, 1765,
	406, 1765,
	407, 1765,
	408, 1765,
	409, 1765,
	410, 1765,
	412, 1765,
	413, 1765,
	414, 1765,
	415, 1765,
	416, 1765,
	417, 1765,
	418, 1765,
	419, 1765,
	420, 1765,
	422, 1765,
	425, 1765,
	426, 1765,
	429, 1765,
	430, 1765,
	-2, 0,
	-1, 1172,
	145, 1676,
	360, 1676,
	407, 1676,
	426, 1676,
	-2, 0,
	-1, 1239,
	1, 1719,
	423, 1719,
	425, 1719,
	426, 1719,
	427, 1719,
	428, 1719,
	-2, 544,
	-1, 1240,
	1, 1674,
	423, 1674,
	425, 1674,
	426, 1674,
	427, 1674,
	428, 1674,
	-2, 545,
	-1, 1253,
	191, 786,
	269, 786,
	274, 786,
	-2, 781,
	-1, 1257,
	129, 890,
	212, 890,
	240, 890,
	-2, 848,
	-1, 1347,
	116, 852,
	129, 852,
	185, 852,
	212, 852,
	240, 852,
	248, 852,
	372, 852,
	-2, 1238,
	-1, 1397,
	425, 1370,
	-2, 0,
	-1, 1430,
	116, 852,
	129, 852,
	185, 852,
	212, 852,
	240, 852,
	248, 852,
	372, 852,
	-2, 960,
	-1, 1484,
	424, 1072,
	-2, 1060,
	-1, 1523,
	191, 786,
	269, 786,
	274, 786,
	-2, 389,
	-1, 1752,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1117,
	-1, 1753,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1118,
	-1, 1754,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1119,
	-1, 1755,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1120,
	-1, 1756,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1121,
	-1, 1757,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1122,
	-1, 1758,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1123,
	-1, 1759,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1124,
	-1, 1771,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1136,
	-1, 1772,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1137,
	-1, 1773,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1138,
	-1, 1776,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1143,
	-1, 1782,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1147,
	-1, 1784,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1155,
	-1, 1785,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1156,
	-1, 1786,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1157,
	-1, 1787,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1158,
	-1, 1875,
	5, 1029,
	145, 1381,
	424, 1492,
	-2, 1483,
	-1, 1876,
	145, 1382,
	-2, 1723,
	-1, 1877,
	145, 1383,
	-2, 1607,
	-1, 1878,
	145, 1384,
	-2, 1543,
	-1, 1879,
	145, 1385,
	-2, 1574,
	-1, 1880,
	145, 1386,
	-2, 1606,
	-1, 1881,
	145, 1387,
	-2, 1668,
	-1, 1949,
	1, 961,
	82, 961,
	116, 961,
	129, 961,
	146, 961,
	151, 961,
	154, 961,
	176, 961,
	185, 961,
	194, 961,
	208, 961,
	212, 961,
	227, 961,
	240, 961,
	243, 961,
	248, 961,
	292, 961,
	294, 961,
	372, 961,
	380, 961,
	393, 961,
	394, 961,
	404, 961,
	423, 961,
	425, 961,
	427, 961,
	428, 961,
	429, 961,
	-2, 960,
	-1, 1954,
	424, 1469,
	-2, 1481,
	-1, 1973,
	424, 1071,
	-2, 1061,
	-1, 2067,
	425, 1440,
	429, 1440,
	-2, 1456,
	-1, 2172,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1145,
	-1, 2173,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1149,
	-1, 2179,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1151,
	-1, 2352,
	191, 786,
	269, 786,
	274, 786,
	-2, 386,
	-1, 2433,
	259, 876,
	-2, 692,
	-1, 2503,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1153,
	-1, 2510,
	189, 0,
	190, 0,
	234, 0,
	-2, 1172,
	-1, 2571,
	14, 0,
	15, 0,
	16, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1202,
	-1, 2572,
	14, 0,
	15, 0,
	16, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1203,
	-1, 2573,
	14, 0,
	15, 0,
	16, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1204,
	-1, 2577,
	14, 0,
	15, 0,
	16, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1208,
	-1, 2578,
	14, 0,
	15, 0,
	16, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1209,
	-1, 2579,
	14, 0,
	15, 0,
	16, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1210,
	-1, 2621,
	424, 1470,
	-2, 1482,
	-1, 2737,
	189, 0,
	190, 0,
	234, 0,
	-2, 1173,
	-1, 2740,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1176,
	-1, 2741,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1178,
	-1, 2883,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1177,
	-1, 2884,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1179,
	-1, 2894,
	189, 0,
	-2, 1211,
	-1, 2981,
	189, 0,
	-2, 1212,
	-1, 3078,
	39, 0,
	164, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1726,
}

const sqlPrivate = 57344

const sqlLast = 63183

var sqlAct = [...]int{

	796, 2922, 3087, 3077, 3144, 3055, 3053, 2100, 3040, 3088,
	2841, 3052, 3089, 2108, 2675, 2911, 2541, 1739, 2985, 3076,
	903, 1158, 2856, 2165, 1062, 2639, 2693, 2200, 2875, 2796,
	914, 2443, 2688, 2811, 1799, 2451, 1454, 718, 2698, 727,
	203, 1941, 203, 203, 1669, 2640, 203, 203, 203, 203,
	203, 1263, 2069, 203, 963, 1055, 2456, 1910, 2065, 2097,
	2329, 540, 2898, 2445, 2772, 1121, 2198, 1345, 2318, 1625,
	519, 1423, 2129, 2280, 2294, 1621, 1624, 203, 2131, 2109,
	594, 540, 198, 1648, 1937, 2068, 2003, 1566, 1942, 1404,
	1633, 1636, 1828, 1575, 2986, 2055, 2305, 1355, 1811, 1425,
	2279, 1736, 2594, 1154, 726, 137, 2161, 1944, 1732, 2455,
	1074, 1599, 1593, 5, 792, 1554, 951, 1253, 2334, 2032,
	1839, 2641, 85, 1552, 1405, 1796, 2033, 2066, 1141, 1433,
	1622, 2056, 1907, 1064, 1071, 2102, 895, 1994, 1151, 2842,
	200, 1167, 199, 1618, 942, 1414, 898, 1822, 541, 472,
	2072, 1929, 542, 877, 496, 1812, 488, 1871, 144, 1914,
	1336, 1262, 504, 513, 1264, 536, 1165, 1642, 1138, 203,
	203, 145, 1082, 717, 1565, 2360, 753, 491, 875, 1367,
	137, 900, 635, 1268, 1252, 1124, 2196, 2610, 3174, 589,
	2611, 1670, 1923, 2101, 33, 1424, 722, 1650, 2498, 1650,
	2057, 545, 1650, 548, 499, 3167, 3166, 3141, 3139, 1923,
	1923, 2810, 2810, 3136, 3107, 3106, 1103, 1606, 1923, 1923,
	3103, 545, 3100, 548, 3104, 1662, 3101, 3097, 3074, 2462,
	3073, 1606, 1606, 590, 1606, 722, 3072, 3071, 1276, 1277,
	1662, 1662, 2463, 3035, 3022, 768, 603, 1966, 1606, 3016,
	3014, 3012, 3010, 2810, 2810, 2810, 2810, 59, 2983, 592,
	2952, 754, 1966, 1279, 1606, 2427, 2950, 2940, 60, 723,
	2810, 1606, 2350, 1276, 1277, 2939, 878, 878, 2050, 1606,
	2932, 2931, 137, 64, 1606, 2810, 1923, 2904, 2885, 2870,
	1278, 1606, 1966, 2474, 2215, 2837, 705, 2831, 1279, 1923,
	2216, 1923, 2057, 2809, 1455, 1602, 892, 2810, 3036, 704,
	1963, 2739, 69, 2712, 818, 1966, 2704, 2705, 2616, 2606,
	2705, 925, 2617, 2607, 2600, 1278, 712, 2597, 1923, 2970,
	2534, 2252, 2253, 795, 1606, 2481, 2291, 1662, 2247, 2419,
	1923, 74, 1923, 2246, 1606, 2242, 1916, 1923, 879, 1923,
	84, 2227, 2127, 1979, 75, 2228, 1666, 1923, 2597, 1915,
	1965, 1960, 1097, 2020, 1966, 1923, 1956, 1284, 1922, 1665,
	1606, 2832, 1923, 1666, 930, 1102, 881, 1923, 882, 1606,
	2047, 174, 174, 1992, 1526, 2474, 1091, 2082, 2419, 76,
	926, 1825, 2164, 1605, 1990, 1306, 1307, 1308, 2252, 2253,
	1400, 1081, 1284, 177, 2464, 1545, 883, 880, 711, 710,
	709, 708, 707, 703, 794, 702, 2199, 176, 176, 701,
	700, 699, 909, 2465, 1862, 698, 697, 696, 174, 695,
	1306, 1307, 1308, 694, 1651, 693, 1651, 692, 633, 1651,
	725, 632, 631, 630, 629, 1299, 628, 627, 1276, 1277,
	626, 1826, 625, 624, 623, 622, 621, 175, 175, 620,
	2258, 619, 618, 617, 176, 616, 174, 168, 168, 615,
	614, 613, 612, 1279, 611, 169, 169, 203, 610, 609,
	1299, 602, 601, 580, 2252, 2253, 203, 579, 561, 560,
	1940, 77, 559, 551, 550, 549, 146, 146, 526, 2090,
	1278, 525, 176, 524, 175, 523, 508, 203, 196, 195,
	906, 194, 193, 203, 192, 191, 1827, 1824, 190, 143,
	80, 1096, 81, 174, 2787, 752, 2462, 2258, 1300, 203,
	966, 203, 203, 1067, 203, 966, 203, 189, 2268, 188,
	174, 187, 175, 146, 203, 203, 1442, 2105, 186, 1606,
	185, 593, 168, 184, 114, 183, 926, 950, 182, 176,
	169, 955, 181, 1300, 203, 203, 923, 203, 1067, 1067,
	203, 203, 203, 1658, 203, 1649, 176, 1284, 1714, 203,
	180, 146, 179, 203, 203, 203, 203, 203, 1067, 1067,
	178, 905, 1067, 1948, 203, 1067, 203, 2751, 115, 175,
	2706, 2614, 1829, 751, 2332, 2268, 1346, 2221, 147, 168,
	1162, 2211, 2148, 2258, 1058, 2060, 175, 169, 1957, 1550,
	1440, 2269, 1111, 1672, 1860, 1858, 168, 1856, 1426, 1361,
	1915, 1854, 940, 1087, 169, 2252, 2253, 1357, 146, 1077,
	1067, 1288, 1280, 1281, 1282, 1283, 1285, 1286, 957, 1114,
	1275, 2921, 916, 1125, 1125, 591, 1357, 2091, 926, 3094,
	203, 3075, 2976, 2973, 2971, 959, 2953, 1052, 1057, 174,
	2871, 2789, 2771, 2770, 203, 2758, 937, 1280, 1281, 1282,
	1283, 1285, 1286, 2757, 545, 2864, 548, 1671, 2269, 203,
	2756, 2268, 1084, 174, 1823, 2755, 1083, 137, 2749, 2252,
	2253, 2748, 2747, 2746, 2629, 176, 1170, 2628, 1129, 2626,
	2620, 2591, 1145, 1148, 723, 1140, 1276, 1277, 1971, 1611,
	2590, 1155, 2589, 2518, 2514, 1168, 2422, 2418, 2327, 176,
	2287, 2278, 1257, 59, 2262, 2254, 2255, 2256, 2257, 2259,
	2260, 1279, 1258, 2251, 60, 175, 2248, 174, 2245, 1090,
	2243, 1095, 2226, 1101, 2205, 168, 174, 1126, 2204, 64,
	1358, 2197, 1356, 169, 2258, 2128, 1949, 1833, 1278, 175,
	1275, 1609, 1630, 891, 2269, 1274, 1298, 3172, 1344, 168,
	907, 1808, 3152, 176, 146, 3151, 915, 169, 69, 2543,
	3067, 3065, 176, 3060, 1177, 3008, 3006, 3003, 3002, 2997,
	2994, 1180, 2254, 2255, 2256, 2257, 2259, 2260, 146, 2089,
	1251, 2988, 1546, 2034, 2969, 2968, 1802, 74, 2917, 1184,
	2733, 2160, 2896, 175, 2854, 2850, 84, 2846, 2258, 2844,
	75, 2786, 175, 168, 2769, 1301, 1302, 1303, 1304, 2682,
	2681, 169, 168, 2679, 2657, 1284, 2788, 1861, 2656, 2646,
	169, 1256, 1280, 1281, 1282, 1283, 1285, 1286, 2645, 2602,
	2509, 2344, 146, 2475, 1254, 76, 2863, 2437, 2410, 2391,
	2370, 2104, 2369, 1306, 1307, 1308, 2346, 203, 2290, 2225,
	2252, 2253, 2224, 2210, 723, 705, 2261, 2262, 2254, 2255,
	2256, 2257, 2259, 2260, 2188, 1368, 1259, 2743, 704, 1365,
	1975, 1974, 1952, 203, 1271, 1272, 1934, 1921, 1852, 1402,
	1340, 1276, 1277, 1613, 1439, 1403, 203, 966, 203, 203,
	1276, 1277, 1399, 1299, 1067, 540, 203, 203, 1398, 1397,
	540, 203, 1396, 1395, 1394, 203, 1279, 1393, 1392, 1391,
	2267, 1389, 1388, 1387, 1386, 1279, 1385, 1384, 1411, 1383,
	1382, 2252, 2253, 1381, 1380, 1379, 1378, 1377, 966, 1341,
	1339, 936, 1421, 1278, 928, 920, 1673, 77, 2625, 2609,
	2605, 2214, 1278, 1968, 1935, 1408, 1409, 954, 1448, 2370,
	2252, 2253, 1358, 2342, 878, 1337, 1545, 1435, 1545, 1305,
	2394, 1548, 1369, 1370, 1521, 143, 80, 1545, 81, 137,
	1434, 3007, 2446, 2869, 2833, 1520, 1300, 2612, 1422, 2258,
	952, 2477, 2476, 2057, 1426, 1374, 174, 2232, 1570, 2655,
	964, 1375, 723, 2311, 953, 1075, 1384, 593, 2036, 1825,
	114, 1372, 2231, 1445, 1249, 1199, 2230, 1373, 2229, 2254,
	2255, 2256, 2257, 2259, 2260, 2170, 1431, 1859, 1857, 1284,
	1855, 2022, 176, 949, 1853, 1401, 1363, 1523, 1532, 1670,
	1626, 690, 2974, 2972, 2484, 545, 2405, 548, 1588, 2899,
	545, 2101, 548, 2920, 115, 2545, 1544, 3095, 1384, 1428,
	2258, 1067, 203, 2219, 147, 1840, 1973, 2268, 966, 1826,
	1450, 1085, 175, 1536, 1535, 1517, 691, 1545, 1542, 1560,
	1390, 1371, 168, 3105, 1452, 2256, 2257, 2259, 2260, 3102,
	169, 203, 2458, 2635, 3049, 1188, 2689, 1289, 1287, 1288,
	1280, 1281, 1282, 1283, 1285, 1286, 1537, 2135, 203, 3096,
	575, 146, 3129, 203, 3130, 203, 1614, 203, 3021, 1223,
	2823, 203, 1980, 909, 3171, 909, 2946, 1704, 2943, 2942,
	684, 2941, 1629, 1702, 1827, 1824, 2354, 2671, 2268, 1590,
	682, 680, 1592, 1631, 1447, 1596, 2668, 721, 2667, 1996,
	2269, 686, 1067, 203, 1067, 677, 527, 2185, 2005, 1067,
	2660, 2632, 2631, 203, 203, 2209, 1574, 2208, 2207, 1539,
	1461, 2206, 1996, 1067, 1067, 890, 203, 1343, 2183, 1639,
	1674, 2174, 203, 1995, 576, 2052, 2046, 540, 203, 2043,
	203, 1541, 203, 1533, 203, 2024, 203, 1600, 1962, 1222,
	1783, 1255, 545, 581, 548, 954, 203, 1080, 203, 1653,
	1084, 906, 1655, 906, 1083, 1657, 720, 203, 2840, 1660,
	1829, 2269, 1851, 1486, 1850, 954, 1849, 1567, 1646, 1848,
	1794, 1741, 1595, 918, 1604, 1186, 203, 674, 2098, 2880,
	2485, 203, 2008, 2023, 1712, 2393, 1683, 1679, 533, 1140,
	2674, 1792, 953, 1181, 1564, 1487, 2343, 1955, 1798, 966,
	3020, 2263, 2261, 2262, 2254, 2255, 2256, 2257, 2259, 2260,
	2015, 1711, 953, 1686, 723, 2180, 1568, 1569, 1798, 722,
	2924, 1641, 2819, 1540, 1644, 1168, 2181, 1196, 1806, 2186,
	3091, 3069, 905, 1804, 905, 586, 1719, 1675, 2014, 714,
	1286, 665, 3147, 1645, 1261, 935, 1282, 1283, 1285, 1286,
	2487, 1717, 1823, 1218, 1713, 608, 937, 2486, 1667, 2145,
	3121, 1829, 716, 484, 2525, 535, 2453, 545, 2454, 548,
	1562, 2648, 2263, 2261, 2262, 2254, 2255, 2256, 2257, 2259,
	2260, 1435, 966, 1969, 1840, 1182, 479, 2402, 1788, 2999,
	1893, 2397, 1693, 2040, 2528, 1200, 1789, 2413, 715, 1790,
	1221, 1219, 1795, 2162, 2163, 1570, 2007, 1555, 3154, 2260,
	1556, 1650, 585, 1546, 2034, 1546, 2034, 2453, 1813, 1814,
	1587, 203, 578, 577, 1546, 2034, 3129, 1443, 1234, 2526,
	1572, 666, 2355, 1366, 2669, 2085, 1813, 2948, 1715, 2044,
	1716, 3092, 2384, 719, 2382, 966, 203, 705, 1718, 737,
	705, 705, 529, 1248, 2817, 203, 1847, 2182, 203, 1562,
	1728, 966, 2386, 1729, 1730, 2184, 534, 1870, 1551, 1874,
	1874, 1884, 1886, 1891, 1458, 1813, 1837, 665, 2353, 2381,
	1829, 1913, 723, 2725, 2658, 1710, 2890, 2150, 1780, 1832,
	1334, 3120, 1451, 1930, 1557, 723, 1950, 1518, 716, 723,
	2223, 2385, 2807, 1945, 531, 1555, 1559, 1993, 1556, 3093,
	722, 2006, 2721, 1187, 1961, 1829, 1809, 1953, 3145, 2623,
	3033, 907, 931, 907, 1546, 1543, 2727, 1703, 878, 2804,
	1791, 678, 2797, 1701, 1835, 1205, 588, 3090, 1793, 528,
	203, 678, 679, 1936, 3128, 2795, 562, 1946, 1947, 688,
	2799, 583, 687, 917, 1983, 3126, 678, 1561, 1461, 1461,
	2958, 2818, 2853, 667, 2153, 1926, 1985, 666, 1570, 2805,
	1882, 966, 532, 1902, 1911, 723, 203, 2441, 137, 3146,
	2925, 2649, 1927, 530, 203, 1267, 584, 1964, 1919, 1920,
	1931, 1932, 1557, 946, 203, 1197, 1986, 2798, 1607, 1431,
	565, 1737, 1738, 2093, 1559, 2176, 1616, 203, 1984, 3148,
	1067, 1486, 1486, 1778, 1781, 3119, 1591, 1231, 1410, 587,
	675, 929, 203, 966, 480, 1797, 203, 203, 1997, 1970,
	582, 924, 1805, 1685, 203, 471, 1183, 203, 573, 3031,
	203, 2726, 1562, 1198, 2416, 3155, 1195, 2877, 1651, 1524,
	552, 2152, 571, 2767, 713, 1561, 668, 1978, 1555, 203,
	1777, 1556, 2041, 1260, 934, 2149, 203, 3032, 203, 2388,
	203, 947, 481, 203, 941, 203, 948, 203, 1571, 203,
	203, 909, 203, 1067, 1067, 1067, 1417, 1067, 2026, 1058,
	1981, 203, 203, 669, 203, 1232, 1977, 2001, 909, 667,
	203, 2800, 1369, 1370, 2801, 2123, 2124, 2054, 482, 1334,
	483, 203, 2934, 203, 2009, 2011, 1420, 2580, 2933, 1266,
	2017, 2035, 2037, 2038, 2039, 2053, 2000, 3161, 2335, 2991,
	2025, 203, 203, 203, 1928, 203, 2026, 2803, 2151, 2137,
	1562, 2915, 2876, 2042, 2634, 1557, 2442, 2806, 1418, 2095,
	2366, 2822, 1562, 2362, 2094, 2001, 203, 1559, 2821, 1640,
	1233, 1628, 1627, 1623, 1615, 2319, 545, 1558, 548, 906,
	2028, 2524, 2134, 1779, 1084, 2114, 1206, 1724, 2058, 1598,
	2019, 3041, 2119, 2083, 1707, 2768, 906, 2112, 1527, 1740,
	137, 2139, 668, 2140, 2857, 1266, 2694, 1597, 1531, 2125,
	2107, 2116, 1265, 2117, 2916, 2118, 2372, 2371, 1561, 2168,
	2049, 1680, 2308, 1925, 607, 2001, 2121, 1924, 2120, 1959,
	1168, 2136, 1458, 1458, 1594, 2062, 2138, 2064, 2126, 669,
	1267, 1958, 2878, 793, 1419, 2155, 2177, 600, 946, 568,
	553, 554, 2802, 2581, 1127, 720, 1568, 1569, 2081, 2582,
	905, 1137, 2320, 203, 566, 2676, 1135, 2103, 1461, 2103,
	1529, 1128, 3160, 946, 486, 1558, 2420, 905, 1413, 1725,
	2159, 2157, 1841, 201, 1530, 474, 475, 564, 1265, 492,
	474, 492, 502, 507, 1638, 1185, 522, 665, 2807, 563,
	2820, 3133, 2843, 1562, 546, 2202, 2203, 2913, 2029, 2030,
	2415, 2027, 2773, 2595, 3, 1845, 2852, 3135, 716, 2212,
	597, 1486, 570, 2895, 546, 2804, 947, 574, 556, 555,
	1553, 948, 567, 2766, 2673, 1413, 2175, 2281, 2508, 2338,
	2914, 2282, 1417, 569, 1246, 2244, 1228, 2187, 966, 2051,
	1226, 947, 2292, 2021, 1976, 723, 948, 2299, 2300, 1216,
	1214, 1954, 1441, 1212, 203, 2805, 1438, 203, 2336, 1247,
	1178, 1210, 1420, 2147, 203, 557, 558, 203, 203, 966,
	1208, 1700, 1202, 1133, 2146, 2142, 1709, 666, 966, 2218,
	1415, 1690, 1519, 203, 1376, 1844, 1110, 2289, 3086, 1417,
	3038, 2793, 2692, 2330, 1418, 2322, 2653, 203, 2315, 2301,
	2536, 2651, 474, 474, 605, 606, 2851, 2633, 2323, 2324,
	908, 676, 2440, 1416, 203, 203, 203, 2099, 1558, 1420,
	203, 2087, 2313, 203, 2086, 2084, 2316, 598, 599, 2078,
	203, 203, 203, 203, 203, 1664, 1136, 1415, 2351, 907,
	2331, 1134, 2310, 1663, 203, 203, 1661, 1659, 1656, 485,
	2356, 1418, 203, 1654, 1652, 2314, 907, 2284, 2285, 2286,
	2293, 1991, 2347, 2348, 203, 1067, 2296, 203, 2444, 2326,
	1416, 2321, 2363, 966, 2303, 2304, 3130, 1245, 2309, 1227,
	1419, 966, 913, 1225, 1612, 2962, 2307, 2800, 1549, 1610,
	2801, 1601, 1215, 1213, 1589, 203, 1211, 203, 2337, 203,
	1586, 1573, 1067, 203, 1209, 203, 1067, 1067, 1067, 667,
	2396, 1699, 1563, 1207, 203, 1201, 1132, 2873, 2352, 2403,
	203, 2872, 1458, 2803, 1269, 203, 887, 203, 2357, 2166,
	681, 683, 1996, 2806, 203, 2964, 2359, 1419, 2013, 1996,
	2703, 2001, 1570, 2012, 1687, 2428, 1114, 3001, 2449, 888,
	2010, 2373, 1560, 2376, 2812, 1067, 1067, 2411, 2448, 2392,
	2431, 2387, 2978, 2460, 1243, 1244, 2398, 1276, 1277, 203,
	966, 203, 203, 966, 203, 2774, 2399, 1560, 2031, 2407,
	2400, 2016, 909, 2079, 1273, 2421, 2412, 1114, 2424, 203,
	909, 909, 2401, 2473, 909, 2048, 2018, 3037, 2368, 2167,
	2849, 2406, 668, 2482, 2619, 1270, 2374, 1600, 2378, 2379,
	487, 1349, 2106, 1600, 2088, 1354, 1276, 1277, 909, 1278,
	2467, 2468, 2469, 2306, 2470, 2471, 2077, 2492, 2802, 1912,
	889, 1522, 966, 2389, 2459, 2390, 1453, 3143, 2340, 669,
	3159, 1279, 966, 2466, 203, 2511, 2457, 723, 1461, 2252,
	2253, 1346, 137, 2624, 2447, 2457, 1190, 2143, 498, 2144,
	2531, 2472, 1189, 2408, 1988, 2409, 1276, 1277, 1278, 2345,
	906, 1988, 1987, 2546, 1989, 1846, 1821, 2493, 906, 906,
	2489, 1230, 906, 1461, 1229, 2494, 2744, 2523, 2520, 2521,
	2522, 2341, 2425, 2496, 1344, 1342, 2907, 1447, 2867, 2711,
	2687, 1486, 2438, 2435, 2436, 2490, 906, 2092, 1632, 1242,
	921, 1241, 1224, 1220, 1217, 2516, 2547, 1203, 933, 597,
	2527, 2529, 2530, 862, 773, 1525, 2367, 689, 673, 2923,
	1236, 2650, 3048, 663, 2535, 203, 1486, 2380, 2542, 1689,
	932, 1204, 1617, 1691, 2312, 1933, 522, 203, 3030, 2752,
	2222, 905, 2984, 966, 2889, 1843, 2549, 1362, 70, 905,
	905, 762, 201, 905, 201, 201, 2592, 1072, 844, 201,
	2557, 203, 2613, 2584, 2559, 2794, 2608, 546, 1086, 2636,
	2071, 2070, 969, 1534, 767, 1547, 1972, 905, 1873, 1457,
	770, 1459, 772, 771, 1460, 1364, 769, 201, 1109, 2213,
	201, 2585, 1456, 201, 201, 201, 2080, 1072, 2110, 653,
	2596, 2642, 201, 1538, 203, 137, 201, 201, 201, 201,
	1072, 2601, 2598, 2599, 2593, 1803, 1838, 522, 2298, 201,
	2217, 1359, 742, 764, 2627, 2615, 1836, 927, 741, 2317,
	203, 203, 2452, 203, 2618, 2862, 1723, 2158, 203, 1720,
	572, 2249, 919, 1899, 1892, 1888, 1250, 1335, 2604, 2325,
	2111, 966, 203, 956, 745, 1801, 1067, 1351, 2333, 2661,
	1461, 2192, 2328, 2461, 1967, 2637, 1731, 2683, 886, 2672,
	2652, 885, 2654, 203, 2665, 884, 3054, 3051, 2670, 2707,
	2696, 2723, 1528, 201, 1982, 203, 203, 1067, 1067, 1067,
	1328, 203, 203, 2666, 758, 2297, 203, 201, 2700, 2423,
	1107, 3000, 1458, 1327, 685, 2026, 1461, 1461, 2724, 966,
	2699, 2993, 507, 1486, 945, 2677, 944, 2685, 2695, 2339,
	2686, 943, 2678, 2680, 1461, 1461, 2365, 2697, 3153, 2647,
	907, 2729, 173, 2349, 2718, 2690, 2659, 1458, 907, 907,
	170, 172, 907, 2622, 171, 2663, 2414, 89, 2709, 1737,
	2550, 2001, 2708, 2701, 203, 1461, 2738, 38, 2714, 1486,
	1486, 2333, 37, 2713, 909, 36, 907, 1737, 2560, 18,
	113, 2719, 2720, 112, 111, 110, 731, 1486, 1486, 109,
	108, 107, 106, 2742, 105, 104, 103, 102, 101, 100,
	99, 98, 97, 2730, 2112, 96, 95, 94, 2588, 93,
	92, 91, 90, 2296, 35, 518, 515, 51, 1486, 50,
	88, 87, 17, 203, 34, 15, 55, 56, 14, 30,
	31, 79, 78, 966, 29, 966, 909, 16, 28, 26,
	27, 12, 9, 8, 11, 13, 25, 142, 141, 73,
	140, 2765, 203, 203, 203, 72, 139, 138, 2330, 71,
	1075, 24, 906, 964, 10, 23, 134, 203, 68, 136,
	135, 65, 203, 133, 203, 132, 66, 203, 203, 203,
	203, 203, 131, 2776, 2777, 130, 2642, 67, 203, 203,
	1067, 2815, 966, 129, 1067, 2780, 2813, 2779, 2785, 2781,
	22, 6, 203, 203, 54, 7, 2792, 2874, 2483, 82,
	474, 83, 32, 966, 63, 2839, 1067, 2782, 62, 61,
	2642, 21, 2533, 53, 906, 2845, 203, 20, 164, 909,
	163, 1429, 2539, 908, 1458, 162, 201, 161, 157, 156,
	2859, 160, 158, 905, 2835, 159, 966, 2775, 155, 1086,
	128, 201, 1446, 2834, 2861, 2449, 166, 165, 546, 1086,
	492, 2848, 153, 546, 1086, 2868, 150, 149, 522, 152,
	154, 1114, 966, 2790, 2881, 2001, 2838, 2860, 2858, 151,
	1458, 1458, 2866, 148, 1807, 167, 127, 58, 126, 125,
	124, 1461, 123, 2824, 1412, 122, 57, 2855, 1458, 1458,
	2879, 2829, 1349, 19, 2, 905, 1, 0, 966, 0,
	0, 0, 0, 0, 203, 0, 203, 906, 966, 203,
	0, 0, 0, 0, 2001, 0, 2897, 203, 2791, 1458,
	0, 0, 2886, 966, 0, 2910, 0, 0, 0, 0,
	0, 0, 1161, 2621, 1486, 0, 1898, 2457, 0, 2825,
	2928, 2642, 2901, 203, 0, 2927, 2830, 2929, 0, 2902,
	2903, 0, 0, 909, 0, 0, 2908, 0, 0, 0,
	0, 2906, 0, 0, 203, 0, 2926, 0, 0, 1067,
	0, 0, 0, 909, 203, 2642, 0, 2642, 0, 0,
	2949, 2642, 2951, 2945, 0, 2642, 2955, 0, 905, 2905,
	2957, 203, 0, 2960, 0, 0, 0, 0, 0, 0,
	0, 909, 2961, 0, 0, 546, 0, 2630, 0, 2865,
	203, 0, 0, 2944, 2966, 0, 203, 2965, 2937, 2938,
	0, 0, 907, 0, 203, 2001, 2967, 2449, 0, 0,
	2699, 2959, 729, 0, 201, 909, 0, 2977, 0, 2990,
	0, 906, 0, 2982, 0, 0, 0, 2996, 0, 2989,
	0, 1637, 203, 203, 0, 0, 201, 2987, 201, 203,
	201, 906, 3011, 0, 474, 0, 0, 0, 0, 203,
	1067, 0, 0, 0, 2998, 203, 0, 0, 3013, 1067,
	1067, 2909, 0, 203, 907, 203, 0, 0, 0, 906,
	0, 0, 0, 0, 3018, 0, 522, 0, 3019, 3015,
	3025, 3026, 0, 0, 0, 203, 1072, 201, 203, 3027,
	203, 3024, 966, 0, 0, 0, 0, 3044, 0, 522,
	3056, 0, 905, 906, 3062, 201, 3064, 0, 3066, 3050,
	546, 201, 3046, 201, 3063, 201, 3061, 201, 0, 201,
	3070, 1461, 905, 0, 0, 1458, 3034, 203, 0, 1705,
	0, 1706, 3068, 0, 2954, 0, 0, 3058, 0, 0,
	201, 0, 3082, 3083, 3085, 3084, 909, 0, 0, 0,
	905, 203, 0, 3004, 3057, 0, 3059, 907, 0, 507,
	203, 0, 3109, 0, 522, 0, 0, 3110, 3098, 3111,
	0, 3113, 3118, 3115, 1486, 1461, 2642, 203, 2642, 0,
	909, 3112, 909, 3114, 905, 0, 909, 0, 0, 3127,
	909, 3125, 3124, 0, 0, 2784, 0, 3131, 0, 0,
	3134, 3056, 0, 3132, 0, 0, 3116, 3117, 3005, 0,
	0, 3137, 3138, 3142, 3140, 0, 0, 0, 2936, 0,
	0, 0, 0, 0, 3150, 3149, 0, 0, 1486, 0,
	3023, 3156, 0, 3157, 906, 0, 0, 3158, 0, 2778,
	0, 0, 0, 0, 0, 0, 0, 0, 1461, 0,
	0, 1276, 1277, 0, 0, 0, 0, 2189, 2190, 0,
	0, 3164, 3165, 0, 0, 3168, 3169, 3170, 906, 0,
	906, 1276, 1277, 0, 906, 3175, 1279, 0, 906, 0,
	0, 2112, 0, 2816, 0, 0, 0, 0, 0, 0,
	0, 907, 0, 2826, 2827, 0, 1279, 0, 0, 3162,
	3163, 1486, 0, 1278, 474, 0, 964, 1576, 0, 0,
	0, 907, 0, 0, 0, 905, 1898, 1898, 2847, 908,
	3173, 0, 0, 1278, 0, 1580, 0, 0, 0, 474,
	0, 0, 2887, 0, 0, 0, 908, 0, 474, 907,
	0, 201, 0, 0, 0, 0, 0, 0, 0, 905,
	0, 905, 0, 0, 0, 905, 2275, 2276, 2277, 905,
	0, 0, 0, 0, 0, 0, 1577, 0, 2887, 0,
	0, 0, 0, 907, 0, 0, 0, 0, 1740, 0,
	1284, 0, 729, 0, 0, 1458, 729, 0, 0, 0,
	0, 0, 0, 1740, 0, 0, 0, 0, 0, 0,
	1284, 909, 0, 909, 0, 0, 0, 0, 1306, 1307,
	1308, 0, 0, 0, 0, 1898, 1898, 1898, 1088, 0,
	1092, 0, 1098, 492, 0, 0, 0, 0, 1306, 1307,
	1308, 0, 0, 1581, 0, 0, 0, 0, 0, 1458,
	0, 0, 0, 0, 0, 1060, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1299, 2004,
	0, 0, 0, 1176, 0, 0, 0, 201, 0, 0,
	1179, 0, 0, 0, 0, 0, 0, 201, 1299, 0,
	1115, 1118, 0, 1276, 1277, 0, 0, 0, 0, 906,
	201, 906, 0, 0, 1582, 1583, 0, 0, 0, 0,
	2963, 0, 0, 1578, 907, 201, 0, 1174, 1279, 546,
	2059, 0, 1458, 0, 0, 0, 0, 2067, 0, 0,
	1086, 0, 0, 201, 0, 0, 0, 0, 0, 1579,
	0, 0, 0, 0, 0, 1278, 0, 0, 907, 0,
	907, 1300, 1637, 1298, 907, 0, 0, 0, 907, 2004,
	0, 474, 1191, 201, 0, 0, 201, 0, 201, 0,
	201, 1300, 201, 201, 0, 1072, 0, 0, 0, 0,
	905, 0, 905, 0, 2132, 597, 0, 2004, 0, 0,
	0, 0, 1740, 201, 0, 0, 0, 2507, 0, 0,
	0, 0, 0, 0, 1086, 0, 1086, 1329, 1330, 1331,
	1332, 1333, 1301, 1302, 1303, 1304, 1584, 0, 0, 3028,
	0, 3029, 1284, 0, 201, 201, 201, 0, 201, 0,
	0, 0, 0, 0, 0, 0, 1348, 0, 0, 0,
	0, 1360, 0, 0, 3045, 0, 2504, 2505, 0, 201,
	1306, 1307, 1308, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1289, 1287, 1288, 1280, 1281, 1282, 1283, 1285,
	1286, 0, 0, 0, 0, 1585, 0, 0, 0, 0,
	0, 0, 0, 1287, 1288, 1280, 1281, 1282, 1283, 1285,
	1286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1299, 0, 0, 0, 0, 1898, 1898, 3108, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2561, 2562, 2563, 2564, 2565,
	2566, 2567, 2568, 2569, 2570, 2571, 2572, 2573, 2574, 2575,
	2576, 2577, 2578, 2579, 0, 2583, 1086, 0, 0, 0,
	0, 0, 59, 0, 0, 0, 0, 0, 0, 1406,
	1406, 1406, 0, 60, 0, 0, 1305, 0, 0, 907,
	0, 907, 0, 0, 0, 0, 0, 0, 64, 0,
	0, 0, 0, 1300, 1898, 1898, 1898, 1898, 1898, 1898,
	1898, 1898, 1898, 1898, 1898, 1898, 1898, 1898, 1898, 1898,
	1898, 1898, 1898, 0, 1898, 0, 0, 69, 0, 0,
	0, 0, 204, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 729, 0, 0, 0,
	908, 0, 0, 0, 0, 0, 74, 0, 908, 908,
	0, 0, 908, 0, 0, 84, 1449, 474, 0, 75,
	474, 0, 0, 0, 0, 0, 0, 474, 0, 0,
	474, 474, 0, 0, 0, 0, 1429, 0, 0, 0,
	0, 0, 0, 539, 0, 0, 1086, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 0, 0, 0, 0,
	1086, 0, 0, 539, 1289, 1287, 1288, 1280, 1281, 1282,
	1283, 1285, 1286, 0, 0, 0, 0, 201, 2004, 2361,
	0, 797, 0, 2004, 0, 0, 2361, 0, 0, 0,
	0, 0, 0, 2004, 2361, 2004, 2361, 2361, 0, 0,
	0, 0, 0, 0, 1727, 0, 0, 201, 201, 0,
	0, 0, 0, 0, 0, 1446, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 201, 0, 0,
	1072, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 0, 1637, 0,
	1637, 0, 201, 0, 0, 0, 201, 0, 201, 0,
	0, 0, 0, 1603, 0, 0, 0, 201, 0, 0,
	0, 0, 0, 1072, 143, 80, 0, 81, 2004, 0,
	474, 0, 0, 0, 0, 0, 0, 2004, 0, 0,
	0, 0, 0, 0, 0, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 593, 0, 0, 114,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2488, 1894, 1072, 201, 0, 201, 0, 0,
	0, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 201, 0, 0, 901, 0, 0, 0, 0,
	0, 0, 0, 115, 0, 0, 1668, 0, 0, 0,
	0, 0, 0, 147, 0, 0, 0, 0, 0, 0,
	0, 175, 0, 0, 0, 1681, 1682, 0, 0, 0,
	0, 168, 0, 0, 0, 197, 0, 0, 0, 169,
	0, 0, 0, 0, 0, 0, 0, 2544, 0, 0,
	1721, 0, 1726, 0, 0, 0, 0, 0, 1733, 0,
	1171, 0, 0, 0, 0, 1742, 1743, 1744, 1745, 1746,
	1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756,
	1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766,
	1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776,
	0, 1782, 0, 1784, 1785, 1786, 1787, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1346, 0, 0,
	0, 0, 1810, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 908, 0, 0, 59, 0, 1348, 474, 0,
	0, 1834, 0, 0, 0, 0, 60, 2894, 2252, 2253,
	474, 2270, 2271, 2272, 0, 0, 0, 0, 0, 0,
	0, 64, 0, 0, 0, 0, 2735, 1863, 1864, 1865,
	1866, 1867, 1868, 1869, 1086, 0, 0, 0, 0, 0,
	1890, 0, 1901, 1903, 1908, 0, 2918, 0, 0, 0,
	69, 0, 0, 0, 2644, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1898, 0, 2267, 0,
	0, 0, 0, 0, 0, 0, 0, 522, 0, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	0, 0, 75, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2004, 1637, 1898, 1637, 0, 0, 0,
	0, 201, 967, 0, 0, 1068, 0, 967, 0, 0,
	0, 0, 0, 0, 0, 201, 0, 76, 0, 0,
	0, 0, 0, 0, 0, 0, 2981, 2258, 0, 0,
	0, 0, 0, 0, 0, 0, 2004, 908, 0, 0,
	1068, 1068, 0, 0, 0, 0, 0, 0, 2132, 2132,
	0, 0, 0, 0, 597, 597, 0, 0, 0, 201,
	1068, 1068, 0, 0, 1068, 0, 0, 1068, 0, 0,
	0, 0, 0, 0, 0, 0, 2273, 0, 0, 0,
	0, 0, 0, 0, 0, 1898, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 968, 0, 0, 1069, 2268, 968, 0, 0, 0,
	0, 0, 1068, 0, 0, 0, 0, 2753, 0, 77,
	0, 0, 0, 1894, 1894, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1069,
	1069, 0, 0, 0, 2061, 0, 2063, 143, 80, 0,
	81, 0, 0, 0, 0, 0, 0, 0, 0, 1069,
	1069, 0, 0, 1069, 0, 0, 1069, 0, 174, 0,
	0, 908, 2045, 0, 0, 0, 1086, 0, 0, 593,
	0, 0, 114, 0, 0, 0, 0, 0, 2269, 0,
	0, 1429, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 2004, 2361, 2004, 0, 0,
	0, 1069, 0, 0, 0, 0, 0, 0, 0, 2644,
	1086, 0, 1894, 1894, 1894, 2004, 115, 2361, 0, 0,
	1086, 1086, 201, 2004, 2361, 0, 147, 0, 0, 0,
	0, 201, 201, 0, 175, 2122, 0, 0, 0, 0,
	0, 0, 0, 2644, 168, 1086, 2067, 0, 0, 0,
	0, 0, 169, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 961, 0, 0, 0, 0, 2004,
	0, 1079, 0, 146, 0, 0, 0, 0, 0, 0,
	0, 0, 2264, 2265, 2266, 0, 0, 0, 0, 2263,
	2261, 2262, 2254, 2255, 2256, 2257, 2259, 2260, 0, 1105,
	0, 0, 2172, 2173, 0, 1123, 0, 0, 2179, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1144, 1144,
	1144, 1079, 0, 0, 0, 0, 0, 2193, 2194, 0,
	0, 1175, 0, 1834, 0, 0, 0, 0, 0, 0,
	0, 2201, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2004, 0, 2361,
	0, 0, 2912, 0, 0, 2220, 0, 0, 0, 0,
	201, 0, 0, 0, 2644, 0, 0, 2233, 0, 967,
	0, 0, 0, 0, 0, 0, 1068, 539, 0, 0,
	0, 0, 539, 0, 0, 1235, 522, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2644, 0,
	2644, 0, 0, 0, 2644, 0, 0, 201, 2644, 0,
	967, 0, 0, 0, 0, 0, 0, 1086, 0, 1908,
	1908, 1908, 0, 0, 0, 0, 0, 0, 0, 0,
	1406, 0, 0, 0, 201, 0, 0, 0, 2302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2544, 0, 0, 0, 0, 0, 474,
	0, 0, 0, 0, 0, 0, 0, 2912, 968, 0,
	0, 0, 0, 0, 0, 1069, 0, 0, 0, 0,
	0, 0, 1894, 1894, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 729, 0, 2004, 2361, 0, 0, 0,
	0, 0, 201, 0, 0, 729, 0, 0, 0, 968,
	0, 0, 201, 0, 0, 0, 0, 0, 2361, 0,
	0, 0, 0, 0, 0, 0, 1086, 0, 1086, 0,
	2383, 0, 0, 1068, 0, 0, 0, 0, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 0, 3042, 0,
	0, 1086, 0, 201, 0, 0, 0, 0, 0, 0,
	0, 1894, 1894, 1894, 1894, 1894, 1894, 1894, 1894, 1894,
	1894, 1894, 1894, 1894, 1894, 1894, 1894, 1894, 1894, 1894,
	0, 1894, 0, 0, 0, 0, 0, 0, 0, 0,
	2544, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2404, 0, 0,
	0, 0, 0, 0, 1086, 0, 2450, 0, 0, 2644,
	0, 2644, 0, 2004, 1068, 0, 1068, 0, 1436, 0,
	0, 1068, 1069, 0, 0, 0, 0, 0, 0, 968,
	2912, 0, 0, 1444, 2429, 1068, 1068, 0, 2432, 2433,
	2434, 0, 0, 0, 0, 0, 0, 0, 0, 539,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2495, 0, 0, 0, 1733,
	1276, 1277, 0, 0, 0, 2499, 2500, 0, 0, 2503,
	0, 0, 0, 2506, 0, 0, 0, 2479, 2480, 0,
	0, 0, 2510, 0, 0, 1279, 0, 0, 0, 0,
	0, 2517, 0, 0, 2302, 0, 0, 0, 0, 0,
	0, 1276, 1277, 1069, 0, 1069, 0, 0, 0, 0,
	1069, 967, 1278, 0, 2537, 0, 0, 0, 0, 0,
	1298, 0, 0, 0, 1069, 1069, 1279, 0, 0, 0,
	0, 2551, 2552, 0, 2553, 2554, 2555, 0, 0, 2556,
	0, 0, 0, 0, 0, 2558, 0, 0, 0, 0,
	0, 0, 0, 1278, 0, 0, 0, 0, 0, 0,
	0, 1298, 0, 0, 2502, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2586, 2587, 0, 1301,
	1302, 1303, 1304, 0, 0, 0, 0, 0, 0, 1284,
	0, 0, 0, 0, 967, 0, 0, 0, 0, 0,
	0, 0, 2603, 0, 0, 2501, 0, 0, 0, 0,
	968, 0, 0, 0, 0, 0, 1620, 1306, 1307, 1308,
	1301, 1302, 1303, 1304, 0, 0, 0, 0, 0, 0,
	1284, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1643, 0, 1643, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 763, 86, 0, 967, 1306, 1307,
	1308, 0, 0, 0, 2638, 0, 0, 1299, 0, 0,
	0, 0, 0, 967, 0, 0, 0, 0, 121, 0,
	0, 0, 0, 59, 0, 0, 0, 2662, 0, 1677,
	0, 0, 0, 968, 60, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1688, 1299, 64,
	0, 0, 0, 1694, 0, 1695, 0, 1696, 0, 1697,
	0, 1698, 0, 0, 40, 118, 0, 0, 0, 0,
	86, 0, 0, 1305, 0, 0, 39, 0, 69, 0,
	0, 0, 1708, 0, 0, 0, 0, 0, 1406, 0,
	1300, 0, 0, 0, 0, 0, 968, 0, 42, 2710,
	0, 0, 43, 0, 0, 0, 0, 74, 0, 0,
	119, 0, 968, 0, 1305, 41, 84, 0, 0, 0,
	75, 44, 0, 967, 0, 0, 0, 0, 0, 0,
	0, 1300, 706, 0, 0, 0, 2731, 2732, 0, 0,
	0, 724, 2736, 2737, 0, 45, 0, 2740, 2741, 0,
	0, 0, 0, 0, 2745, 76, 0, 0, 0, 2715,
	2716, 2717, 1068, 0, 0, 0, 0, 0, 0, 0,
	0, 896, 86, 2750, 0, 967, 0, 0, 0, 0,
	2754, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1894, 0, 0, 0, 0, 0, 0,
	0, 1289, 1287, 1288, 1280, 1281, 1282, 1283, 1285, 1286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 968, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1894, 0, 0, 1068, 1068, 1068, 0, 1068,
	0, 0, 1289, 1287, 1288, 1280, 1281, 1282, 1283, 1285,
	1286, 0, 0, 0, 0, 0, 0, 77, 0, 0,
	0, 1069, 0, 0, 46, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 968, 0, 0, 0, 2814, 0,
	0, 0, 0, 1951, 49, 143, 80, 0, 81, 0,
	47, 0, 0, 0, 120, 0, 0, 0, 0, 48,
	0, 0, 0, 0, 0, 0, 174, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 52, 0, 0,
	114, 0, 1894, 0, 0, 0, 0, 0, 0, 117,
	0, 0, 0, 0, 1069, 1069, 1069, 0, 1069, 0,
	0, 0, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2836, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 115, 1276, 1277, 0, 2882, 2883,
	2884, 0, 0, 0, 147, 0, 0, 0, 0, 0,
	0, 0, 175, 0, 0, 0, 0, 0, 0, 0,
	1279, 0, 168, 0, 2892, 2893, 0, 0, 0, 0,
	169, 0, 0, 0, 0, 0, 0, 0, 2900, 0,
	0, 0, 0, 0, 0, 0, 0, 1278, 0, 0,
	0, 146, 0, 0, 4, 1298, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1276, 1277, 0, 0, 0, 0, 1079, 0, 0,
	0, 0, 0, 0, 1276, 1277, 2935, 0, 0, 0,
	0, 0, 0, 0, 0, 1620, 1279, 0, 729, 2178,
	0, 0, 0, 0, 0, 2947, 0, 0, 0, 1279,
	0, 0, 0, 0, 1301, 1302, 1303, 1304, 0, 0,
	967, 0, 0, 1278, 1284, 2115, 0, 0, 1144, 0,
	1144, 1298, 1144, 0, 1079, 1079, 1278, 0, 0, 0,
	0, 0, 0, 0, 1298, 0, 0, 0, 0, 0,
	0, 967, 1306, 1307, 1308, 2141, 0, 0, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2171, 0, 0, 0, 86,
	0, 86, 2992, 86, 0, 2995, 2154, 1079, 2156, 0,
	1301, 1302, 1303, 1304, 0, 0, 0, 0, 0, 0,
	1284, 0, 1299, 1301, 1302, 1303, 1304, 0, 0, 0,
	0, 2169, 0, 1284, 0, 0, 724, 86, 0, 968,
	0, 0, 0, 0, 86, 0, 0, 0, 1306, 1307,
	1308, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1306, 1307, 1308, 0, 0, 0, 1068, 0, 0,
	968, 0, 0, 0, 0, 967, 0, 0, 0, 968,
	0, 0, 0, 967, 0, 0, 0, 0, 1305, 0,
	0, 0, 729, 0, 0, 0, 0, 0, 1299, 0,
	0, 0, 0, 0, 1068, 1300, 0, 0, 1068, 1068,
	1068, 1299, 0, 0, 0, 0, 3081, 3081, 3081, 0,
	0, 0, 0, 0, 2252, 2253, 0, 2270, 2271, 2272,
	0, 0, 0, 0, 3099, 0, 0, 0, 0, 0,
	0, 0, 2734, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1068, 1068, 0,
	0, 0, 0, 3081, 1305, 0, 1069, 0, 0, 0,
	0, 706, 967, 0, 968, 967, 0, 1305, 0, 0,
	0, 1300, 968, 0, 2267, 0, 0, 0, 1338, 0,
	0, 0, 0, 0, 1300, 0, 0, 0, 0, 0,
	0, 0, 0, 1069, 0, 0, 1347, 1069, 1069, 1069,
	1353, 0, 0, 0, 0, 0, 1289, 1287, 1288, 1280,
	1281, 1282, 1283, 1285, 1286, 0, 0, 0, 3081, 0,
	0, 0, 0, 0, 967, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 967, 0, 0, 0, 0, 0,
	0, 0, 0, 2258, 0, 0, 1069, 1069, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 968, 0, 0, 968, 0, 1276, 1277, 0, 0,
	0, 0, 1319, 1320, 1321, 0, 0, 0, 0, 2358,
	0, 0, 1289, 1287, 1288, 1280, 1281, 1282, 1283, 1285,
	1286, 1279, 2273, 0, 1325, 1289, 1287, 1288, 1280, 1281,
	1282, 1283, 1285, 1286, 0, 0, 0, 0, 0, 2395,
	1123, 0, 0, 0, 0, 0, 0, 0, 1278, 0,
	0, 2268, 0, 968, 0, 0, 1298, 0, 0, 86,
	0, 0, 1427, 968, 1430, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 967, 0, 0, 1276, 1277,
	0, 1309, 1310, 1311, 1319, 1320, 1321, 0, 0, 0,
	0, 0, 0, 0, 2426, 0, 1312, 0, 2430, 0,
	0, 0, 0, 1279, 0, 0, 1325, 0, 0, 2439,
	0, 0, 0, 0, 0, 1301, 1302, 1303, 1304, 0,
	0, 0, 0, 0, 0, 1284, 0, 0, 0, 0,
	1278, 0, 0, 0, 2269, 0, 0, 0, 1298, 0,
	0, 0, 0, 0, 0, 1295, 0, 0, 0, 1316,
	1326, 0, 0, 1306, 1307, 1308, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2491, 0, 1079,
	0, 0, 0, 0, 968, 0, 0, 0, 0, 0,
	0, 0, 0, 967, 2497, 0, 0, 0, 1068, 0,
	0, 0, 0, 0, 0, 0, 1314, 1301, 1302, 1303,
	1304, 0, 0, 1299, 0, 0, 0, 1284, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1068,
	1068, 1068, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1316, 1326, 0, 0, 1306, 1307, 1308, 2264, 2265,
	2266, 967, 0, 0, 0, 2263, 2261, 2262, 2254, 2255,
	2256, 2257, 2259, 2260, 0, 0, 1322, 1323, 0, 0,
	0, 0, 0, 0, 1293, 1294, 0, 0, 0, 1305,
	0, 0, 0, 0, 0, 0, 0, 0, 1314, 0,
	0, 0, 968, 0, 0, 1299, 1300, 1069, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1324, 0, 0, 0, 0, 0, 0, 0, 1317,
	0, 0, 2252, 2253, 1313, 2270, 2271, 2272, 1069, 1069,
	1069, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2513, 0, 0, 0, 0, 0, 724, 0, 0, 0,
	968, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1305, 0, 0, 0, 967, 0, 967, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1300, 0,
	0, 0, 2267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1315, 0, 0,
	0, 1317, 0, 0, 0, 1318, 0, 1289, 1287, 1288,
	1280, 1281, 1282, 1283, 1285, 1286, 0, 0, 0, 0,
	0, 0, 1068, 0, 967, 0, 1068, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 706, 0, 967, 706, 706, 1068, 0,
	0, 2258, 0, 2684, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 968, 0, 968, 2691, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 967, 1315,
	0, 0, 1290, 1291, 1297, 1296, 1292, 1318, 0, 1289,
	1287, 1288, 1280, 1281, 1282, 1283, 1285, 1286, 0, 0,
	2273, 1800, 2761, 0, 967, 0, 2760, 0, 0, 0,
	0, 2722, 0, 0, 724, 0, 0, 0, 0, 0,
	0, 1069, 0, 968, 0, 1069, 0, 1347, 0, 2268,
	0, 1347, 0, 0, 0, 0, 0, 0, 0, 0,
	967, 0, 0, 0, 968, 0, 0, 1069, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 967, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 968, 0, 0,
	0, 0, 0, 0, 2252, 2253, 0, 2270, 2271, 2272,
	896, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2512, 968, 0, 0, 0, 1430, 0, 0,
	0, 1068, 2269, 0, 0, 1276, 1277, 0, 1309, 1310,
	1311, 1319, 1320, 1321, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 1312, 0, 0, 0, 0, 0, 968,
	1279, 0, 0, 1325, 2267, 0, 0, 0, 0, 968,
	0, 2252, 2253, 0, 2270, 2271, 2272, 0, 0, 0,
	0, 0, 0, 0, 968, 0, 0, 1278, 0, 0,
	0, 0, 0, 0, 0, 1298, 0, 0, 0, 0,
	0, 0, 1295, 0, 2828, 0, 0, 0, 0, 0,
	0, 0, 0, 1123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1069, 2267, 1068, 2258, 0, 0, 2264, 2265, 2266, 0,
	0, 1068, 1068, 2263, 2261, 2262, 2254, 2255, 2256, 2257,
	2259, 2260, 0, 0, 1301, 1302, 1303, 1304, 0, 0,
	86, 0, 0, 0, 1284, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 967, 0, 0, 0, 0, 0,
	0, 0, 2273, 0, 0, 0, 0, 0, 1316, 1326,
	86, 0, 1306, 1307, 1308, 0, 0, 0, 0, 0,
	2258, 0, 0, 0, 0, 86, 0, 86, 0, 0,
	0, 2268, 0, 1322, 1323, 2252, 2253, 0, 2270, 2271,
	2272, 1293, 1294, 0, 0, 2274, 0, 0, 0, 0,
	0, 1069, 0, 0, 0, 1314, 0, 86, 0, 86,
	1069, 1069, 1299, 0, 0, 0, 0, 0, 0, 2273,
	0, 0, 2919, 0, 0, 0, 0, 0, 1324, 0,
	86, 1276, 1277, 0, 1309, 1310, 1311, 1319, 1320, 1321,
	0, 1313, 0, 968, 0, 2267, 0, 0, 2268, 0,
	0, 0, 0, 0, 0, 0, 1279, 0, 0, 1325,
	0, 0, 0, 0, 2269, 0, 0, 0, 0, 2956,
	0, 0, 0, 0, 0, 0, 0, 0, 1305, 0,
	0, 0, 0, 1278, 0, 0, 0, 0, 0, 0,
	0, 1298, 0, 0, 0, 1300, 2975, 0, 1295, 0,
	0, 0, 0, 0, 0, 1276, 1277, 0, 1309, 1310,
	1311, 1319, 1320, 1321, 2258, 0, 0, 0, 1317, 0,
	0, 0, 0, 1312, 0, 0, 0, 0, 0, 0,
	1279, 2269, 0, 1325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1800, 0, 0, 0,
	1301, 1302, 1303, 1304, 0, 0, 0, 1278, 0, 0,
	1284, 0, 0, 2273, 3009, 1298, 0, 1347, 2264, 2265,
	2266, 0, 1295, 0, 3017, 2263, 2261, 2262, 2254, 2255,
	2256, 2257, 2259, 2260, 1316, 1326, 0, 0, 1306, 1307,
	1308, 0, 2268, 0, 0, 0, 1315, 0, 0, 1290,
	1291, 1297, 1296, 1292, 1318, 0, 1289, 1287, 1288, 1280,
	1281, 1282, 1283, 1285, 1286, 3047, 0, 1293, 1294, 2238,
	0, 0, 0, 2239, 1301, 1302, 1303, 1304, 0, 0,
	0, 1314, 0, 0, 1284, 2264, 2265, 2266, 1299, 0,
	0, 0, 2263, 2261, 2262, 2254, 2255, 2256, 2257, 2259,
	2260, 0, 0, 0, 0, 0, 0, 0, 1316, 1326,
	0, 0, 1306, 1307, 1308, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2269, 0, 0, 0, 0,
	0, 896, 0, 1322, 1323, 0, 0, 0, 0, 896,
	896, 1293, 1294, 896, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1305, 1314, 0, 0, 0, 0,
	0, 0, 1299, 0, 0, 0, 0, 0, 0, 0,
	0, 1300, 0, 0, 0, 0, 0, 0, 1324, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1313, 0, 0, 1317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1305, 2264,
	2265, 2266, 0, 86, 0, 86, 2263, 2261, 2262, 2254,
	2255, 2256, 2257, 2259, 2260, 1300, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 86, 0, 0, 1317, 0,
	0, 0, 1315, 0, 0, 1290, 1291, 1297, 1296, 1292,
	1318, 0, 1289, 1287, 1288, 1280, 1281, 1282, 1283, 1285,
	1286, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 724,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 1315, 0, 0, 1290,
	1291, 1297, 1296, 1292, 1318, 0, 1289, 1287, 1288, 1280,
	1281, 1282, 1283, 1285, 1286, 0, 0, 0, 0, 1830,
	0, 0, 0, 1831, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 790, 748, 749, 750, 746, 747, 760, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 205,
	206, 207, 208, 0, 209, 0, 0, 0, 0, 837,
	765, 0, 0, 896, 210, 211, 212, 0, 805, 784,
	816, 774, 815, 814, 0, 216, 217, 776, 775, 220,
	221, 222, 766, 836, 223, 864, 865, 433, 0, 224,
	843, 0, 826, 86, 225, 226, 227, 228, 229, 0,
	231, 232, 233, 230, 0, 234, 0, 235, 236, 0,
	846, 237, 3080, 829, 827, 828, 833, 831, 830, 832,
	239, 240, 241, 242, 819, 244, 812, 811, 738, 245,
	0, 246, 0, 247, 0, 0, 248, 810, 250, 0,
	251, 0, 252, 253, 0, 743, 254, 255, 257, 260,
	256, 261, 262, 866, 867, 756, 847, 0, 0, 0,
	0, 0, 263, 264, 265, 809, 807, 808, 0, 268,
	0, 269, 0, 0, 848, 270, 0, 271, 868, 0,
	442, 272, 0, 273, 274, 275, 276, 277, 278, 838,
	839, 842, 0, 0, 840, 786, 0, 0, 0, 0,
	279, 281, 288, 0, 849, 282, 798, 789, 800, 802,
	803, 804, 799, 0, 791, 0, 289, 0, 896, 290,
	291, 292, 853, 824, 825, 0, 0, 295, 296, 297,
	0, 299, 298, 0, 300, 869, 854, 301, 302, 0,
	0, 303, 304, 0, 0, 305, 0, 306, 740, 739,
	307, 308, 310, 778, 309, 856, 312, 313, 315, 314,
	735, 0, 0, 757, 841, 813, 316, 317, 0, 787,
	788, 0, 0, 320, 321, 0, 0, 322, 453, 858,
	323, 859, 870, 324, 325, 326, 327, 328, 329, 330,
	0, 331, 871, 332, 456, 333, 0, 334, 335, 336,
	337, 338, 339, 806, 340, 341, 0, 342, 343, 344,
	345, 346, 0, 348, 349, 347, 350, 351, 352, 353,
	0, 354, 860, 355, 356, 357, 358, 744, 359, 0,
	363, 364, 365, 366, 367, 368, 369, 0, 375, 376,
	779, 780, 782, 783, 371, 377, 378, 834, 379, 360,
	361, 380, 896, 381, 801, 781, 383, 0, 393, 384,
	385, 386, 362, 387, 391, 845, 388, 389, 390, 872,
	0, 394, 395, 0, 396, 397, 398, 399, 400, 258,
	401, 259, 777, 0, 820, 821, 822, 823, 0, 0,
	404, 405, 873, 874, 755, 406, 407, 0, 3079, 409,
	0, 0, 410, 411, 412, 414, 835, 415, 0, 785,
	416, 417, 418, 466, 817, 863, 0, 420, 419, 469,
	0, 0, 0, 0, 421, 422, 470, 423, 424, 425,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 732, 733, 0, 0, 0, 0, 0,
	0, 0, 761, 0, 0, 0, 0, 0, 759, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 965, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1800, 205, 206, 207, 208, 971,
	209, 972, 973, 974, 975, 426, 976, 977, 978, 979,
	210, 211, 212, 427, 428, 213, 429, 214, 215, 430,
	980, 216, 217, 218, 219, 220, 221, 222, 981, 982,
	223, 431, 432, 433, 983, 224, 434, 984, 970, 985,
	225, 226, 227, 228, 229, 0, 231, 232, 233, 230,
	986, 234, 0, 235, 236, 987, 846, 237, 238, 988,
	989, 991, 990, 992, 993, 994, 239, 240, 241, 242,
	243, 244, 435, 436, 995, 245, 996, 246, 997, 247,
	998, 999, 248, 249, 250, 1000, 251, 1001, 252, 253,
	1002, 437, 254, 255, 257, 260, 256, 261, 262, 438,
	439, 1003, 847, 1004, 0, 0, 0, 0, 263, 264,
	265, 440, 266, 267, 0, 268, 1005, 269, 1006, 1007,
	848, 270, 1008, 271, 441, 1009, 442, 272, 1010, 273,
	274, 275, 276, 277, 278, 443, 444, 445, 850, 1011,
	449, 280, 0, 0, 0, 1012, 279, 281, 288, 1013,
	849, 282, 446, 284, 283, 285, 286, 287, 447, 1014,
	448, 1015, 289, 851, 852, 290, 291, 292, 853, 293,
	294, 0, 0, 295, 296, 297, 1016, 299, 298, 1017,
	300, 450, 854, 301, 302, 855, 1018, 303, 304, 1019,
	1020, 305, 0, 306, 912, 911, 307, 308, 310, 311,
	309, 856, 312, 313, 315, 314, 1021, 1022, 857, 1023,
	451, 452, 316, 317, 1024, 318, 319, 1025, 1026, 320,
	321, 1027, 1028, 322, 453, 858, 323, 859, 454, 324,
	325, 326, 327, 328, 329, 330, 1029, 331, 455, 332,
	456, 333, 1030, 334, 335, 336, 337, 338, 339, 457,
	340, 341, 1031, 342, 343, 344, 345, 346, 0, 348,
	349, 347, 350, 351, 352, 353, 1032, 354, 860, 355,
	356, 357, 358, 458, 359, 0, 363, 364, 365, 366,
	367, 368, 369, 1033, 375, 376, 370, 372, 373, 374,
	371, 377, 378, 1034, 379, 360, 361, 380, 861, 381,
	459, 382, 383, 1035, 393, 384, 385, 386, 362, 387,
	391, 392, 388, 389, 390, 460, 1036, 394, 395, 1037,
	396, 397, 398, 399, 400, 258, 401, 259, 402, 1038,
	461, 462, 463, 403, 1039, 1040, 404, 405, 464, 465,
	1041, 406, 407, 0, 408, 409, 1042, 1043, 410, 411,
	412, 414, 1044, 415, 1045, 413, 416, 417, 418, 466,
	467, 468, 1046, 420, 419, 469, 1047, 1048, 1049, 1050,
	421, 422, 470, 423, 424, 425, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 965,
	0, 0, 0, 0, 0, 0, 1938, 0, 0, 0,
	0, 0, 0, 0, 0, 1939, 205, 206, 207, 208,
	971, 209, 972, 973, 974, 975, 426, 976, 977, 978,
	979, 210, 211, 212, 427, 428, 213, 429, 214, 215,
	430, 980, 216, 217, 218, 219, 220, 221, 222, 981,
	982, 223, 431, 432, 433, 983, 224, 434, 984, 970,
	985, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 986, 234, 0, 235, 236, 987, 846, 237, 238,
	988, 989, 991, 990, 992, 993, 994, 239, 240, 241,
	242, 243, 244, 435, 436, 995, 245, 996, 246, 997,
	247, 998, 999, 248, 249, 250, 1000, 251, 1001, 252,
	253, 1002, 437, 254, 255, 257, 260, 256, 261, 262,
	438, 439, 1003, 847, 1004, 0, 0, 0, 0, 263,
	264, 265, 440, 266, 267, 0, 268, 1005, 269, 1006,
	1007, 848, 270, 1008, 271, 441, 1009, 442, 272, 1010,
	273, 274, 275, 276, 277, 278, 443, 444, 445, 850,
	1011, 449, 280, 0, 0, 0, 1012, 279, 281, 288,
	1013, 849, 282, 446, 284, 283, 285, 286, 287, 447,
	1014, 448, 1015, 289, 851, 852, 290, 291, 292, 853,
	293, 294, 0, 0, 295, 296, 297, 1016, 299, 298,
	1017, 300, 450, 854, 301, 302, 855, 1018, 303, 304,
	1019, 1020, 305, 0, 306, 912, 911, 307, 308, 310,
	311, 309, 856, 312, 313, 315, 314, 1021, 1022, 857,
	1023, 451, 452, 316, 317, 1024, 318, 319, 1025, 1026,
	320, 321, 1027, 1028, 322, 453, 858, 323, 859, 454,
	324, 325, 326, 327, 328, 329, 330, 1029, 331, 455,
	332, 456, 333, 1030, 334, 335, 336, 337, 338, 339,
	457, 340, 341, 1031, 342, 343, 344, 345, 346, 0,
	348, 349, 347, 350, 351, 352, 353, 1032, 354, 860,
	355, 356, 357, 358, 458, 359, 0, 363, 364, 365,
	366, 367, 368, 369, 1033, 375, 376, 370, 372, 373,
	374, 371, 377, 378, 1034, 379, 360, 361, 380, 861,
	381, 459, 382, 383, 1035, 393, 384, 385, 386, 362,
	387, 391, 392, 388, 389, 390, 460, 1036, 394, 395,
	1037, 396, 397, 398, 399, 400, 258, 401, 259, 402,
	1038, 461, 462, 463, 403, 1039, 1040, 404, 405, 464,
	465, 1041, 406, 407, 0, 408, 409, 1042, 1043, 410,
	411, 412, 414, 1044, 415, 1045, 413, 416, 417, 418,
	466, 467, 468, 1046, 420, 419, 469, 1047, 1048, 1049,
	1050, 421, 422, 470, 423, 424, 425, 0, 0, 0,
	0, 965, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2783, 205, 206,
	207, 208, 971, 209, 972, 973, 974, 975, 426, 976,
	977, 978, 979, 210, 211, 212, 427, 428, 213, 429,
	214, 215, 430, 980, 216, 217, 218, 219, 220, 221,
	222, 981, 982, 223, 431, 432, 433, 983, 224, 434,
	984, 970, 985, 225, 226, 227, 228, 229, 0, 231,
	232, 233, 230, 986, 234, 0, 235, 236, 987, 846,
	237, 238, 988, 989, 991, 990, 992, 993, 994, 239,
	240, 241, 242, 243, 244, 435, 436, 995, 245, 996,
	246, 997, 247, 998, 999, 248, 249, 250, 1000, 251,
	1001, 252, 253, 1002, 437, 254, 255, 257, 260, 256,
	261, 262, 438, 439, 1003, 847, 1004, 0, 0, 0,
	0, 263, 264, 265, 440, 266, 267, 0, 268, 1005,
	269, 1006, 1007, 848, 270, 1008, 271, 441, 1009, 442,
	272, 1010, 273, 274, 275, 276, 277, 278, 443, 444,
	445, 850, 1011, 449, 280, 0, 0, 0, 1012, 279,
	281, 288, 1013, 849, 282, 446, 284, 283, 285, 286,
	287, 447, 1014, 448, 1015, 289, 851, 852, 290, 291,
	292, 853, 293, 294, 0, 0, 295, 296, 297, 1016,
	299, 298, 1017, 300, 450, 854, 301, 302, 855, 1018,
	303, 304, 1019, 1020, 305, 0, 306, 912, 911, 307,
	308, 310, 311, 309, 856, 312, 313, 315, 314, 1021,
	1022, 857, 1023, 451, 452, 316, 317, 1024, 318, 319,
	1025, 1026, 320, 321, 1027, 1028, 322, 453, 858, 323,
	859, 454, 324, 325, 326, 327, 328, 329, 330, 1029,
	331, 455, 332, 456, 333, 1030, 334, 335, 336, 337,
	338, 339, 457, 340, 341, 1031, 342, 343, 344, 345,
	346, 0, 348, 349, 347, 350, 351, 352, 353, 1032,
	354, 860, 355, 356, 357, 358, 458, 359, 0, 363,
	364, 365, 366, 367, 368, 369, 1033, 375, 376, 370,
	372, 373, 374, 371, 377, 378, 1034, 379, 360, 361,
	380, 861, 381, 459, 382, 383, 1035, 393, 384, 385,
	386, 362, 387, 391, 392, 388, 389, 390, 460, 1036,
	394, 395, 1037, 396, 397, 398, 399, 400, 258, 401,
	259, 402, 1038, 461, 462, 463, 403, 1039, 1040, 404,
	405, 464, 465, 1041, 406, 407, 0, 408, 409, 1042,
	1043, 410, 411, 412, 414, 1044, 415, 1045, 413, 416,
	417, 418, 466, 467, 468, 1046, 420, 419, 469, 1047,
	1048, 1049, 1050, 421, 422, 470, 423, 424, 425, 965,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2888, 0, 205, 206, 207, 208,
	971, 209, 972, 973, 974, 975, 426, 976, 977, 978,
	979, 210, 211, 212, 427, 428, 213, 429, 214, 215,
	430, 980, 216, 217, 218, 219, 220, 221, 222, 981,
	982, 223, 431, 432, 433, 983, 224, 434, 984, 970,
	985, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 986, 234, 0, 235, 236, 987, 846, 237, 238,
	988, 989, 991, 990, 992, 993, 994, 239, 240, 241,
	242, 243, 244, 435, 436, 995, 245, 996, 246, 997,
	247, 998, 999, 248, 249, 250, 1000, 251, 1001, 252,
	253, 1002, 437, 254, 255, 257, 260, 256, 261, 262,
	438, 439, 1003, 847, 1004, 0, 0, 0, 0, 263,
	264, 265, 440, 266, 267, 0, 268, 1005, 269, 1006,
	1007, 848, 270, 1008, 271, 441, 1009, 442, 272, 1010,
	273, 274, 275, 276, 277, 278, 443, 444, 445, 850,
	1011, 449, 280, 0, 0, 0, 1012, 279, 281, 288,
	1013, 849, 282, 446, 284, 283, 285, 286, 287, 447,
	1014, 448, 1015, 289, 851, 852, 290, 291, 292, 853,
	293, 294, 0, 0, 295, 296, 297, 1016, 299, 298,
	1017, 300, 450, 854, 301, 302, 855, 1018, 303, 304,
	1019, 1020, 305, 0, 306, 912, 911, 307, 308, 310,
	311, 309, 856, 312, 313, 315, 314, 1021, 1022, 857,
	1023, 451, 452, 316, 317, 1024, 318, 319, 1025, 1026,
	320, 321, 1027, 1028, 322, 453, 858, 323, 859, 454,
	324, 325, 326, 327, 328, 329, 330, 1029, 331, 455,
	332, 456, 333, 1030, 334, 335, 336, 337, 338, 339,
	457, 340, 341, 1031, 342, 343, 344, 345, 346, 0,
	348, 349, 347, 350, 351, 352, 353, 1032, 354, 860,
	355, 356, 357, 358, 458, 359, 0, 363, 364, 365,
	366, 367, 368, 369, 1033, 375, 376, 370, 372, 373,
	374, 371, 377, 378, 1034, 379, 360, 361, 380, 861,
	381, 459, 382, 383, 1035, 393, 384, 385, 386, 362,
	387, 391, 392, 388, 389, 390, 460, 1036, 394, 395,
	1037, 396, 397, 398, 399, 400, 258, 401, 259, 402,
	1038, 461, 462, 463, 403, 1039, 1040, 404, 405, 464,
	465, 1041, 406, 407, 0, 408, 409, 1042, 1043, 410,
	411, 412, 414, 1044, 415, 1045, 413, 416, 417, 418,
	466, 467, 468, 1046, 420, 419, 469, 1047, 1048, 1049,
	1050, 421, 422, 470, 423, 424, 425, 965, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2540, 0, 205, 206, 207, 208, 971, 209,
	972, 973, 974, 975, 426, 976, 977, 978, 979, 210,
	211, 212, 427, 428, 213, 429, 214, 215, 430, 980,
	216, 217, 218, 219, 220, 221, 222, 981, 982, 223,
	431, 432, 433, 983, 224, 434, 984, 970, 985, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 986,
	234, 0, 235, 236, 987, 846, 237, 238, 988, 989,
	991, 990, 992, 993, 994, 239, 240, 241, 242, 243,
	244, 435, 436, 995, 245, 996, 246, 997, 247, 998,
	999, 248, 249, 250, 1000, 251, 1001, 252, 253, 1002,
	437, 254, 255, 257, 260, 256, 261, 262, 438, 439,
	1003, 847, 1004, 0, 0, 0, 0, 263, 264, 265,
	440, 266, 267, 0, 268, 1005, 269, 1006, 1007, 848,
	270, 1008, 271, 441, 1009, 442, 272, 1010, 273, 274,
	275, 276, 277, 278, 443, 444, 445, 850, 1011, 449,
	280, 0, 0, 0, 1012, 279, 281, 288, 1013, 849,
	282, 446, 284, 283, 285, 286, 287, 447, 1014, 448,
	1015, 289, 851, 852, 290, 291, 292, 853, 293, 294,
	0, 0, 295, 296, 297, 1016, 299, 298, 1017, 300,
	450, 854, 301, 302, 855, 1018, 303, 304, 1019, 1020,
	305, 0, 306, 912, 911, 307, 308, 310, 311, 309,
	856, 312, 313, 315, 314, 1021, 1022, 857, 1023, 451,
	452, 316, 317, 1024, 318, 319, 1025, 1026, 320, 321,
	1027, 1028, 322, 453, 858, 323, 859, 454, 324, 325,
	326, 327, 328, 329, 330, 1029, 331, 455, 332, 456,
	333, 1030, 334, 335, 336, 337, 338, 339, 457, 340,
	341, 1031, 342, 343, 344, 345, 346, 0, 348, 349,
	347, 350, 351, 352, 353, 1032, 354, 860, 355, 356,
	357, 358, 458, 359, 0, 363, 364, 365, 366, 367,
	368, 369, 1033, 375, 376, 370, 372, 373, 374, 371,
	377, 378, 1034, 379, 360, 361, 380, 861, 381, 459,
	382, 383, 1035, 393, 384, 385, 386, 362, 387, 391,
	392, 388, 389, 390, 460, 1036, 394, 395, 1037, 396,
	397, 398, 399, 400, 258, 401, 259, 402, 1038, 461,
	462, 463, 403, 1039, 1040, 404, 405, 464, 465, 1041,
	406, 407, 0, 408, 409, 1042, 1043, 410, 411, 412,
	414, 1044, 415, 1045, 413, 416, 417, 418, 466, 467,
	468, 1046, 420, 419, 469, 1047, 1048, 1049, 1050, 421,
	422, 470, 423, 424, 425, 965, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2532, 0, 205, 206, 207, 208, 971, 209, 972, 973,
	974, 975, 426, 976, 977, 978, 979, 210, 211, 212,
	427, 428, 213, 429, 214, 215, 430, 980, 216, 217,
	218, 219, 220, 221, 222, 981, 982, 223, 431, 432,
	433, 983, 224, 434, 984, 970, 985, 225, 226, 227,
	228, 229, 0, 231, 232, 233, 230, 986, 234, 0,
	235, 236, 987, 846, 237, 238, 988, 989, 991, 990,
	992, 993, 994, 239, 240, 241, 242, 243, 244, 435,
	436, 995, 245, 996, 246, 997, 247, 998, 999, 248,
	249, 250, 1000, 251, 1001, 252, 253, 1002, 437, 254,
	255, 257, 260, 256, 261, 262, 438, 439, 1003, 847,
	1004, 0, 0, 0, 0, 263, 264, 265, 440, 266,
	267, 0, 268, 1005, 269, 1006, 1007, 848, 270, 1008,
	271, 441, 1009, 442, 272, 1010, 273, 274, 275, 276,
	277, 278, 443, 444, 445, 850, 1011, 449, 280, 0,
	0, 0, 1012, 279, 281, 288, 1013, 849, 282, 446,
	284, 283, 285, 286, 287, 447, 1014, 448, 1015, 289,
	851, 852, 290, 291, 292, 853, 293, 294, 0, 0,
	295, 296, 297, 1016, 299, 298, 1017, 300, 450, 854,
	301, 302, 855, 1018, 303, 304, 1019, 1020, 305, 0,
	306, 912, 911, 307, 308, 310, 311, 309, 856, 312,
	313, 315, 314, 1021, 1022, 857, 1023, 451, 452, 316,
	317, 1024, 318, 319, 1025, 1026, 320, 321, 1027, 1028,
	322, 453, 858, 323, 859, 454, 324, 325, 326, 327,
	328, 329, 330, 1029, 331, 455, 332, 456, 333, 1030,
	334, 335, 336, 337, 338, 339, 457, 340, 341, 1031,
	342, 343, 344, 345, 346, 0, 348, 349, 347, 350,
	351, 352, 353, 1032, 354, 860, 355, 356, 357, 358,
	458, 359, 0, 363, 364, 365, 366, 367, 368, 369,
	1033, 375, 376, 370, 372, 373, 374, 371, 377, 378,
	1034, 379, 360, 361, 380, 861, 381, 459, 382, 383,
	1035, 393, 384, 385, 386, 362, 387, 391, 392, 388,
	389, 390, 460, 1036, 394, 395, 1037, 396, 397, 398,
	399, 400, 258, 401, 259, 402, 1038, 461, 462, 463,
	403, 1039, 1040, 404, 405, 464, 465, 1041, 406, 407,
	0, 408, 409, 1042, 1043, 410, 411, 412, 414, 1044,
	415, 1045, 413, 416, 417, 418, 466, 467, 468, 1046,
	420, 419, 469, 1047, 1048, 1049, 1050, 421, 422, 470,
	423, 424, 425, 965, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2417, 0,
	205, 206, 207, 208, 971, 209, 972, 973, 974, 975,
	426, 976, 977, 978, 979, 210, 211, 212, 427, 428,
	213, 429, 214, 215, 430, 980, 216, 217, 218, 219,
	220, 221, 222, 981, 982, 223, 431, 432, 433, 983,
	224, 434, 984, 970, 985, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 986, 234, 0, 235, 236,
	987, 846, 237, 238, 988, 989, 991, 990, 992, 993,
	994, 239, 240, 241, 242, 243, 244, 435, 436, 995,
	245, 996, 246, 997, 247, 998, 999, 248, 249, 250,
	1000, 251, 1001, 252, 253, 1002, 437, 254, 255, 257,
	260, 256, 261, 262, 438, 439, 1003, 847, 1004, 0,
	0, 0, 0, 263, 264, 265, 440, 266, 267, 0,
	268, 1005, 269, 1006, 1007, 848, 270, 1008, 271, 441,
	1009, 442, 272, 1010, 273, 274, 275, 276, 277, 278,
	443, 444, 445, 850, 1011, 449, 280, 0, 0, 0,
	1012, 279, 281, 288, 1013, 849, 282, 446, 284, 283,
	285, 286, 287, 447, 1014, 448, 1015, 289, 851, 852,
	290, 291, 292, 853, 293, 294, 0, 0, 295, 296,
	297, 1016, 299, 298, 1017, 300, 450, 854, 301, 302,
	855, 1018, 303, 304, 1019, 1020, 305, 0, 306, 912,
	911, 307, 308, 310, 311, 309, 856, 312, 313, 315,
	314, 1021, 1022, 857, 1023, 451, 452, 316, 317, 1024,
	318, 319, 1025, 1026, 320, 321, 1027, 1028, 322, 453,
	858, 323, 859, 454, 324, 325, 326, 327, 328, 329,
	330, 1029, 331, 455, 332, 456, 333, 1030, 334, 335,
	336, 337, 338, 339, 457, 340, 341, 1031, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 1032, 354, 860, 355, 356, 357, 358, 458, 359,
	0, 363, 364, 365, 366, 367, 368, 369, 1033, 375,
	376, 370, 372, 373, 374, 371, 377, 378, 1034, 379,
	360, 361, 380, 861, 381, 459, 382, 383, 1035, 393,
	384, 385, 386, 362, 387, 391, 392, 388, 389, 390,
	460, 1036, 394, 395, 1037, 396, 397, 398, 399, 400,
	258, 401, 259, 402, 1038, 461, 462, 463, 403, 1039,
	1040, 404, 405, 464, 465, 1041, 406, 407, 0, 408,
	409, 1042, 1043, 410, 411, 412, 414, 1044, 415, 1045,
	413, 416, 417, 418, 466, 467, 468, 1046, 420, 419,
	469, 1047, 1048, 1049, 1050, 421, 422, 470, 423, 424,
	425, 965, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1842, 0, 205, 206,
	207, 208, 971, 209, 972, 973, 974, 975, 426, 976,
	977, 978, 979, 210, 211, 212, 427, 428, 213, 429,
	214, 215, 430, 980, 216, 217, 218, 219, 220, 221,
	222, 981, 982, 223, 431, 432, 433, 983, 224, 434,
	984, 970, 985, 225, 226, 227, 228, 229, 0, 231,
	232, 233, 230, 986, 234, 0, 235, 236, 987, 846,
	237, 238, 988, 989, 991, 990, 992, 993, 994, 239,
	240, 241, 242, 243, 244, 435, 436, 995, 245, 996,
	246, 997, 247, 998, 999, 248, 249, 250, 1000, 251,
	1001, 252, 253, 1002, 437, 254, 255, 257, 260, 256,
	261, 262, 438, 439, 1003, 847, 1004, 0, 0, 0,
	0, 263, 264, 265, 440, 266, 267, 0, 268, 1005,
	269, 1006, 1007, 848, 270, 1008, 271, 441, 1009, 442,
	272, 1010, 273, 274, 275, 276, 277, 278, 443, 444,
	445, 850, 1011, 449, 280, 0, 0, 0, 1012, 279,
	281, 288, 1013, 849, 282, 446, 284, 283, 285, 286,
	287, 447, 1014, 448, 1015, 289, 851, 852, 290, 291,
	292, 853, 293, 294, 0, 0, 295, 296, 297, 1016,
	299, 298, 1017, 300, 450, 854, 301, 302, 855, 1018,
	303, 304, 1019, 1020, 305, 0, 306, 912, 911, 307,
	308, 310, 311, 309, 856, 312, 313, 315, 314, 1021,
	1022, 857, 1023, 451, 452, 316, 317, 1024, 318, 319,
	1025, 1026, 320, 321, 1027, 1028, 322, 453, 858, 323,
	859, 454, 324, 325, 326, 327, 328, 329, 330, 1029,
	331, 455, 332, 456, 333, 1030, 334, 335, 336, 337,
	338, 339, 457, 340, 341, 1031, 342, 343, 344, 345,
	346, 0, 348, 349, 347, 350, 351, 352, 353, 1032,
	354, 860, 355, 356, 357, 358, 458, 359, 0, 363,
	364, 365, 366, 367, 368, 369, 1033, 375, 376, 370,
	372, 373, 374, 371, 377, 378, 1034, 379, 360, 361,
	380, 861, 381, 459, 382, 383, 1035, 393, 384, 385,
	386, 362, 387, 391, 392, 388, 389, 390, 460, 1036,
	394, 395, 1037, 396, 397, 398, 399, 400, 258, 401,
	259, 402, 1038, 461, 462, 463, 403, 1039, 1040, 404,
	405, 464, 465, 1041, 406, 407, 0, 408, 409, 1042,
	1043, 410, 411, 412, 414, 1044, 415, 1045, 413, 416,
	417, 418, 466, 467, 468, 1046, 420, 419, 469, 1047,
	1048, 1049, 1050, 421, 422, 470, 423, 424, 425, 1073,
	0, 965, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1608, 0, 0, 0, 205, 206,
	207, 208, 971, 209, 972, 973, 974, 975, 426, 976,
	977, 978, 979, 210, 211, 212, 427, 428, 213, 429,
	214, 215, 430, 980, 216, 217, 218, 219, 220, 221,
	222, 981, 982, 223, 431, 432, 433, 983, 224, 434,
	984, 970, 985, 225, 226, 227, 228, 229, 0, 231,
	232, 233, 230, 986, 234, 0, 235, 236, 987, 846,
	237, 238, 988, 989, 991, 990, 992, 993, 994, 239,
	240, 241, 242, 243, 244, 435, 436, 995, 245, 996,
	246, 997, 247, 998, 999, 248, 249, 250, 1000, 251,
	1001, 252, 253, 1002, 437, 254, 255, 257, 260, 256,
	261, 262, 438, 439, 1003, 847, 1004, 0, 0, 0,
	0, 263, 264, 265, 440, 266, 267, 0, 268, 1005,
	269, 1006, 1007, 848, 270, 1008, 271, 441, 1009, 442,
	272, 1010, 273, 274, 275, 276, 277, 278, 443, 444,
	445, 850, 1011, 449, 280, 0, 0, 0, 1012, 279,
	281, 288, 1013, 849, 282, 446, 284, 283, 285, 286,
	287, 447, 1014, 448, 1015, 289, 851, 852, 290, 291,
	292, 853, 293, 294, 0, 0, 295, 296, 297, 1016,
	299, 298, 1017, 300, 450, 854, 301, 302, 855, 1018,
	303, 304, 1019, 1020, 305, 0, 306, 912, 911, 307,
	308, 310, 311, 309, 856, 312, 313, 315, 314, 1021,
	1022, 857, 1023, 451, 452, 316, 317, 1024, 318, 319,
	1025, 1026, 320, 321, 1027, 1028, 322, 453, 858, 323,
	859, 454, 324, 325, 326, 327, 328, 329, 330, 1029,
	331, 455, 332, 456, 333, 1030, 334, 335, 336, 337,
	338, 339, 457, 340, 341, 1031, 342, 343, 344, 345,
	346, 0, 348, 349, 347, 350, 351, 352, 353, 1032,
	354, 860, 355, 356, 357, 358, 458, 359, 0, 363,
	364, 365, 366, 367, 368, 369, 1033, 375, 376, 370,
	372, 373, 374, 371, 377, 378, 1034, 379, 360, 361,
	380, 861, 381, 459, 382, 383, 1035, 393, 384, 385,
	386, 362, 387, 391, 392, 388, 389, 390, 460, 1036,
	394, 395, 1037, 396, 397, 398, 399, 400, 258, 401,
	259, 402, 1038, 461, 462, 463, 403, 1039, 1040, 404,
	405, 464, 465, 1041, 406, 407, 0, 408, 409, 1042,
	1043, 410, 411, 412, 414, 1044, 415, 1045, 413, 416,
	417, 418, 466, 467, 468, 1046, 420, 419, 469, 1047,
	1048, 1049, 1050, 421, 422, 470, 423, 424, 425, 962,
	0, 965, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 205, 206,
	207, 208, 971, 209, 972, 973, 974, 975, 426, 976,
	977, 978, 979, 210, 211, 212, 427, 428, 213, 429,
	214, 215, 430, 980, 216, 217, 218, 219, 220, 221,
	222, 981, 982, 223, 431, 432, 433, 983, 224, 434,
	984, 970, 985, 225, 226, 227, 228, 229, 0, 231,
	232, 233, 230, 986, 234, 0, 235, 236, 987, 846,
	237, 238, 988, 989, 991, 990, 992, 993, 994, 239,
	240, 241, 242, 243, 244, 435, 436, 995, 245, 996,
	246, 997, 247, 998, 999, 248, 249, 250, 1000, 251,
	1001, 252, 253, 1002, 437, 254, 255, 257, 260, 256,
	261, 262, 438, 439, 1003, 847, 1004, 0, 0, 0,
	0, 263, 264, 265, 440, 266, 267, 0, 268, 1005,
	269, 1006, 1007, 848, 270, 1008, 271, 441, 1009, 442,
	272, 1010, 273, 274, 275, 276, 277, 278, 443, 444,
	445, 850, 1011, 449, 280, 0, 0, 0, 1012, 279,
	281, 288, 1013, 849, 282, 446, 284, 283, 285, 286,
	287, 447, 1014, 448, 1015, 289, 851, 852, 290, 291,
	292, 853, 293, 294, 0, 0, 295, 296, 297, 1016,
	299, 298, 1017, 300, 450, 854, 301, 302, 855, 1018,
	303, 304, 1019, 1020, 305, 0, 306, 912, 911, 307,
	308, 310, 311, 309, 856, 312, 313, 315, 314, 1021,
	1022, 857, 1023, 451, 452, 316, 317, 1024, 318, 319,
	1025, 1026, 320, 321, 1027, 1028, 322, 453, 858, 323,
	859, 454, 324, 325, 326, 327, 328, 329, 330, 1029,
	331, 455, 332, 456, 333, 1030, 334, 335, 336, 337,
	338, 339, 457, 340, 341, 1031, 342, 343, 344, 345,
	346, 0, 348, 349, 347, 350, 351, 352, 353, 1032,
	354, 860, 355, 356, 357, 358, 458, 359, 0, 363,
	364, 365, 366, 367, 368, 369, 1033, 375, 376, 370,
	372, 373, 374, 371, 377, 378, 1034, 379, 360, 361,
	380, 861, 381, 459, 382, 383, 1035, 393, 384, 385,
	386, 362, 387, 391, 392, 388, 389, 390, 460, 1036,
	394, 395, 1037, 396, 397, 398, 399, 400, 258, 401,
	259, 402, 1038, 461, 462, 463, 403, 1039, 1040, 404,
	405, 464, 465, 1041, 406, 407, 0, 408, 409, 1042,
	1043, 410, 411, 412, 414, 1044, 415, 1045, 413, 416,
	417, 418, 466, 467, 468, 1046, 420, 419, 469, 1047,
	1048, 1049, 1050, 421, 422, 470, 423, 424, 425, 965,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 206, 207, 208,
	971, 209, 972, 973, 974, 975, 426, 976, 977, 978,
	979, 210, 211, 212, 427, 428, 213, 429, 214, 215,
	430, 980, 216, 217, 218, 219, 220, 221, 222, 981,
	982, 223, 431, 432, 433, 983, 224, 434, 984, 970,
	985, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 986, 234, 0, 235, 236, 987, 846, 237, 238,
	988, 989, 991, 990, 992, 993, 994, 239, 240, 241,
	242, 243, 244, 435, 436, 995, 245, 996, 246, 997,
	247, 998, 999, 248, 249, 250, 1000, 251, 1001, 252,
	253, 1002, 437, 254, 255, 257, 260, 256, 261, 262,
	438, 439, 1003, 847, 1004, 0, 0, 0, 0, 263,
	264, 265, 440, 266, 267, 0, 268, 1005, 269, 1006,
	1007, 848, 270, 1008, 271, 441, 1009, 442, 272, 1010,
	273, 274, 275, 276, 277, 278, 443, 444, 445, 850,
	1011, 449, 280, 0, 0, 0, 1012, 279, 281, 288,
	1013, 849, 282, 446, 284, 283, 285, 286, 287, 447,
	1014, 448, 1015, 289, 851, 852, 290, 291, 292, 853,
	293, 294, 0, 0, 295, 296, 297, 1016, 299, 298,
	1017, 300, 450, 854, 301, 302, 855, 1018, 303, 304,
	1019, 1020, 305, 0, 306, 912, 911, 307, 308, 310,
	311, 309, 856, 312, 313, 315, 314, 1021, 1022, 857,
	1023, 451, 452, 316, 317, 1024, 318, 319, 1025, 1026,
	320, 321, 1027, 1028, 322, 453, 858, 323, 859, 454,
	324, 325, 326, 327, 328, 329, 330, 1029, 331, 455,
	332, 456, 333, 1030, 334, 335, 336, 337, 338, 339,
	457, 340, 341, 1031, 342, 343, 344, 345, 346, 0,
	348, 349, 347, 350, 351, 352, 353, 1032, 354, 860,
	355, 356, 357, 358, 458, 359, 0, 363, 364, 365,
	366, 367, 368, 369, 1033, 375, 376, 370, 372, 373,
	374, 371, 377, 378, 1034, 379, 360, 361, 380, 861,
	381, 459, 382, 383, 1035, 393, 384, 385, 386, 362,
	387, 391, 392, 388, 389, 390, 460, 1036, 394, 395,
	1037, 396, 397, 398, 399, 400, 258, 401, 259, 402,
	1038, 461, 462, 463, 403, 1039, 1040, 404, 405, 464,
	465, 1041, 406, 407, 0, 408, 409, 1042, 1043, 410,
	411, 412, 414, 1044, 415, 1045, 413, 416, 417, 418,
	466, 467, 468, 1046, 420, 419, 469, 1047, 1048, 1049,
	1050, 421, 422, 470, 423, 424, 425, 1820, 0, 790,
	748, 749, 750, 746, 747, 760, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 206, 207, 208,
	1817, 209, 0, 0, 0, 0, 837, 765, 0, 0,
	0, 210, 211, 212, 427, 805, 784, 816, 774, 815,
	814, 0, 216, 217, 776, 775, 220, 221, 222, 766,
	836, 223, 864, 865, 433, 0, 224, 843, 0, 826,
	0, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 0, 234, 0, 235, 236, 0, 846, 237, 238,
	829, 827, 828, 833, 831, 830, 832, 239, 240, 241,
	242, 819, 244, 812, 811, 738, 245, 0, 246, 0,
	247, 1818, 0, 248, 810, 250, 0, 251, 0, 252,
	253, 0, 743, 254, 255, 257, 260, 256, 261, 262,
	866, 867, 756, 847, 0, 0, 0, 0, 0, 263,
	264, 265, 809, 807, 808, 0, 268, 0, 269, 0,
	0, 848, 270, 0, 271, 868, 0, 442, 272, 0,
	273, 274, 275, 276, 277, 278, 838, 839, 842, 850,
	0, 840, 786, 0, 0, 0, 0, 279, 281, 288,
	0, 849, 282, 798, 789, 800, 802, 803, 804, 799,
	0, 791, 0, 289, 851, 852, 290, 291, 292, 853,
	824, 825, 0, 0, 295, 296, 297, 0, 299, 298,
	0, 300, 869, 854, 301, 302, 855, 0, 303, 304,
	0, 0, 305, 0, 306, 740, 739, 307, 308, 310,
	778, 309, 856, 312, 313, 315, 314, 735, 0, 857,
	757, 841, 813, 316, 317, 0, 787, 788, 0, 0,
	320, 321, 0, 0, 322, 453, 858, 323, 859, 870,
	324, 325, 326, 327, 328, 329, 330, 0, 331, 871,
	332, 456, 333, 0, 334, 335, 336, 337, 338, 339,
	806, 340, 341, 0, 342, 343, 344, 345, 346, 0,
	348, 349, 347, 350, 351, 352, 353, 0, 354, 860,
	355, 356, 357, 358, 744, 359, 0, 363, 364, 365,
	366, 367, 368, 369, 0, 375, 376, 779, 780, 782,
	783, 371, 377, 378, 834, 379, 360, 361, 380, 861,
	381, 801, 781, 383, 0, 393, 384, 385, 386, 362,
	387, 391, 845, 388, 389, 390, 872, 0, 394, 395,
	0, 396, 397, 398, 399, 400, 258, 401, 259, 777,
	0, 820, 821, 822, 823, 0, 0, 404, 405, 873,
	874, 755, 406, 407, 0, 408, 409, 0, 0, 410,
	411, 412, 414, 835, 415, 0, 785, 416, 417, 418,
	466, 817, 863, 1816, 420, 419, 469, 0, 0, 0,
	0, 421, 422, 470, 423, 424, 425, 736, 0, 0,
	0, 0, 0, 0, 0, 734, 0, 0, 0, 0,
	732, 733, 1819, 0, 0, 0, 0, 0, 0, 761,
	1815, 0, 0, 0, 725, 759, 790, 748, 749, 750,
	746, 747, 760, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 205, 206, 207, 208, 0, 209, 0,
	0, 0, 0, 837, 765, 0, 0, 0, 210, 211,
	212, 427, 805, 784, 816, 774, 815, 814, 0, 216,
	217, 776, 775, 220, 221, 222, 766, 836, 223, 864,
	865, 433, 0, 224, 843, 0, 826, 0, 225, 226,
	227, 228, 229, 0, 231, 232, 233, 230, 0, 234,
	0, 235, 236, 0, 846, 237, 238, 829, 827, 828,
	833, 831, 830, 832, 239, 240, 241, 242, 819, 244,
	812, 811, 738, 245, 0, 246, 0, 247, 0, 0,
	248, 810, 250, 0, 251, 0, 252, 253, 0, 743,
	254, 255, 257, 260, 256, 261, 262, 866, 867, 756,
	847, 0, 0, 0, 0, 0, 263, 264, 265, 809,
	807, 808, 0, 268, 0, 269, 0, 0, 848, 270,
	0, 271, 868, 0, 442, 272, 0, 273, 274, 275,
	276, 277, 278, 838, 839, 842, 850, 0, 840, 786,
	0, 0, 0, 0, 279, 281, 288, 0, 849, 282,
	798, 789, 800, 802, 803, 804, 799, 0, 791, 0,
	289, 851, 852, 290, 291, 292, 853, 824, 825, 0,
	0, 295, 296, 297, 0, 299, 298, 0, 300, 869,
	854, 301, 302, 855, 0, 303, 304, 0, 0, 305,
	0, 306, 740, 739, 307, 308, 310, 778, 309, 856,
	312, 313, 315, 314, 735, 0, 857, 757, 841, 813,
	316, 317, 0, 787, 788, 0, 0, 320, 321, 0,
	0, 322, 453, 858, 323, 859, 870, 324, 325, 326,
	327, 328, 329, 330, 0, 331, 871, 332, 456, 333,
	0, 334, 335, 336, 337, 338, 339, 806, 340, 341,
	0, 342, 343, 344, 345, 346, 0, 348, 349, 347,
	350, 351, 352, 353, 0, 354, 860, 355, 356, 357,
	358, 744, 359, 0, 363, 364, 365, 366, 367, 368,
	369, 174, 375, 376, 779, 780, 782, 783, 371, 377,
	378, 834, 379, 360, 361, 380, 861, 381, 801, 781,
	383, 0, 393, 384, 385, 386, 362, 387, 391, 845,
	388, 389, 390, 872, 0, 394, 395, 176, 396, 397,
	398, 399, 400, 258, 401, 259, 777, 0, 820, 821,
	822, 823, 0, 0, 404, 405, 873, 874, 755, 406,
	407, 0, 408, 409, 0, 0, 410, 411, 412, 414,
	835, 415, 0, 785, 416, 417, 418, 1169, 817, 863,
	0, 420, 419, 469, 0, 0, 0, 168, 421, 422,
	470, 423, 424, 425, 736, 169, 0, 0, 0, 0,
	0, 0, 734, 0, 0, 0, 0, 732, 733, 790,
	748, 749, 750, 746, 747, 760, 1352, 1350, 0, 0,
	0, 0, 759, 0, 0, 0, 205, 206, 207, 208,
	0, 209, 0, 0, 0, 0, 837, 765, 0, 0,
	0, 210, 211, 212, 427, 805, 784, 816, 774, 815,
	814, 0, 216, 217, 776, 775, 220, 221, 222, 766,
	836, 223, 864, 865, 433, 0, 224, 843, 0, 826,
	0, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 0, 234, 0, 235, 236, 0, 846, 237, 238,
	829, 827, 828, 833, 831, 830, 832, 239, 240, 241,
	242, 819, 244, 812, 811, 738, 245, 0, 246, 0,
	247, 0, 0, 248, 810, 250, 0, 251, 0, 252,
	253, 0, 743, 254, 255, 257, 260, 256, 261, 262,
	866, 867, 756, 847, 0, 0, 0, 0, 0, 263,
	264, 265, 809, 807, 808, 0, 268, 0, 269, 0,
	0, 848, 270, 0, 271, 868, 0, 442, 272, 0,
	273, 274, 275, 276, 277, 278, 838, 839, 842, 850,
	0, 840, 786, 0, 0, 0, 0, 279, 281, 288,
	0, 849, 282, 798, 789, 800, 802, 803, 804, 799,
	0, 791, 0, 289, 851, 852, 290, 291, 292, 853,
	824, 825, 0, 0, 295, 296, 297, 0, 299, 298,
	0, 300, 869, 854, 301, 302, 855, 0, 303, 304,
	0, 0, 305, 0, 306, 740, 739, 307, 308, 310,
	778, 309, 856, 312, 313, 315, 314, 735, 0, 857,
	757, 841, 813, 316, 317, 0, 787, 788, 0, 0,
	320, 321, 0, 0, 322, 453, 858, 323, 859, 870,
	324, 325, 326, 327, 328, 329, 330, 0, 331, 871,
	332, 456, 333, 0, 334, 335, 336, 337, 338, 339,
	806, 340, 341, 0, 342, 343, 344, 345, 346, 0,
	348, 349, 347, 350, 351, 352, 353, 0, 354, 860,
	355, 356, 357, 358, 744, 359, 0, 363, 364, 365,
	366, 367, 368, 369, 174, 375, 376, 779, 780, 782,
	783, 371, 377, 378, 834, 379, 360, 361, 380, 861,
	381, 801, 781, 383, 0, 393, 384, 385, 386, 362,
	387, 391, 845, 388, 389, 390, 872, 0, 394, 395,
	176, 396, 397, 398, 399, 400, 258, 401, 259, 777,
	0, 820, 821, 822, 823, 0, 0, 404, 405, 873,
	874, 755, 406, 407, 0, 408, 409, 0, 0, 410,
	411, 412, 414, 835, 415, 0, 785, 416, 417, 418,
	1169, 817, 863, 0, 420, 419, 469, 0, 0, 0,
	168, 421, 422, 470, 423, 424, 425, 736, 169, 0,
	0, 0, 0, 0, 0, 734, 0, 0, 0, 0,
	732, 733, 790, 748, 749, 750, 746, 747, 760, 1352,
	2191, 0, 0, 0, 0, 759, 0, 0, 0, 205,
	206, 207, 208, 0, 209, 0, 0, 0, 0, 837,
	765, 0, 0, 0, 210, 211, 212, 427, 805, 784,
	816, 774, 815, 814, 0, 216, 217, 776, 775, 220,
	221, 222, 766, 836, 223, 864, 865, 433, 0, 224,
	843, 0, 826, 0, 225, 226, 227, 228, 229, 0,
	231, 232, 233, 230, 0, 234, 0, 235, 236, 0,
	846, 237, 238, 829, 827, 828, 833, 831, 830, 832,
	239, 240, 241, 242, 819, 244, 812, 811, 738, 245,
	0, 246, 0, 247, 0, 0, 248, 810, 250, 0,
	251, 0, 252, 253, 0, 743, 254, 255, 257, 260,
	256, 261, 262, 866, 867, 756, 847, 0, 0, 0,
	0, 0, 263, 264, 265, 809, 807, 808, 0, 268,
	0, 269, 0, 0, 848, 270, 0, 271, 868, 0,
	442, 272, 0, 273, 274, 275, 276, 277, 278, 838,
	839, 842, 850, 0, 840, 786, 0, 0, 0, 0,
	279, 281, 288, 0, 849, 282, 798, 789, 800, 802,
	803, 804, 799, 0, 791, 0, 289, 851, 852, 290,
	291, 292, 853, 824, 825, 0, 0, 295, 296, 297,
	0, 299, 298, 0, 300, 869, 854, 301, 302, 855,
	0, 303, 304, 0, 0, 305, 0, 306, 740, 739,
	307, 308, 310, 778, 309, 856, 312, 313, 315, 314,
	735, 0, 857, 757, 841, 813, 316, 317, 0, 787,
	788, 0, 0, 320, 321, 0, 0, 322, 453, 858,
	323, 859, 870, 324, 325, 326, 327, 328, 329, 330,
	0, 331, 871, 332, 456, 333, 0, 334, 335, 336,
	337, 338, 339, 806, 340, 341, 0, 342, 343, 344,
	345, 346, 0, 348, 349, 347, 350, 351, 352, 353,
	0, 354, 860, 355, 356, 357, 358, 744, 359, 0,
	363, 364, 365, 366, 367, 368, 369, 174, 375, 376,
	779, 780, 782, 783, 371, 377, 378, 834, 379, 360,
	361, 380, 861, 381, 801, 781, 383, 0, 393, 384,
	385, 386, 362, 387, 391, 845, 388, 389, 390, 872,
	0, 394, 395, 176, 396, 397, 398, 399, 400, 258,
	401, 259, 777, 0, 820, 821, 822, 823, 0, 0,
	404, 405, 873, 874, 755, 406, 407, 0, 408, 409,
	0, 0, 410, 411, 412, 414, 835, 415, 0, 785,
	416, 417, 418, 1169, 817, 863, 0, 420, 419, 469,
	0, 0, 0, 168, 421, 422, 470, 423, 424, 425,
	736, 169, 0, 0, 0, 0, 0, 0, 734, 0,
	0, 0, 0, 732, 733, 790, 748, 749, 750, 746,
	747, 760, 1352, 1350, 0, 0, 0, 0, 759, 0,
	0, 0, 205, 206, 207, 208, 0, 209, 0, 0,
	0, 0, 837, 765, 0, 0, 0, 210, 211, 212,
	427, 805, 784, 816, 774, 815, 814, 1904, 216, 217,
	776, 775, 220, 221, 222, 766, 836, 223, 864, 865,
	433, 0, 224, 843, 0, 826, 0, 225, 226, 227,
	228, 229, 0, 231, 232, 233, 230, 0, 234, 0,
	235, 236, 0, 846, 237, 238, 829, 827, 828, 833,
	831, 830, 832, 239, 240, 241, 242, 819, 244, 812,
	811, 738, 245, 0, 246, 0, 247, 0, 0, 248,
	810, 250, 0, 251, 0, 252, 253, 0, 743, 254,
	255, 257, 260, 256, 261, 262, 866, 867, 756, 847,
	0, 0, 0, 0, 0, 263, 264, 265, 809, 807,
	808, 0, 268, 0, 269, 0, 1909, 848, 270, 0,
	271, 868, 0, 442, 272, 0, 273, 274, 275, 276,
	277, 278, 838, 839, 842, 850, 0, 840, 786, 0,
	0, 0, 0, 279, 281, 288, 0, 849, 282, 798,
	789, 800, 802, 803, 804, 799, 0, 791, 0, 289,
	851, 852, 290, 291, 292, 853, 824, 825, 0, 0,
	295, 296, 297, 0, 299, 298, 1905, 300, 869, 854,
	301, 302, 855, 0, 303, 304, 0, 0, 305, 0,
	306, 740, 739, 307, 308, 310, 778, 309, 856, 312,
	313, 315, 314, 735, 0, 857, 757, 841, 813, 316,
	317, 0, 787, 788, 0, 0, 320, 321, 0, 0,
	322, 453, 858, 323, 859, 870, 324, 325, 326, 327,
	328, 329, 330, 0, 331, 871, 332, 456, 333, 0,
	334, 335, 336, 337, 338, 339, 806, 340, 341, 0,
	342, 343, 344, 345, 346, 0, 348, 349, 347, 350,
	351, 352, 353, 0, 354, 860, 355, 356, 357, 358,
	744, 359, 0, 363, 364, 365, 366, 367, 368, 369,
	0, 375, 376, 779, 780, 782, 783, 371, 377, 378,
	834, 379, 360, 361, 380, 861, 381, 801, 781, 383,
	0, 393, 384, 385, 386, 362, 387, 391, 845, 388,
	389, 390, 872, 0, 394, 395, 0, 396, 397, 398,
	399, 400, 258, 401, 259, 777, 0, 820, 821, 822,
	823, 0, 1906, 404, 405, 873, 874, 755, 406, 407,
	0, 408, 409, 0, 0, 410, 411, 412, 414, 835,
	415, 0, 785, 416, 417, 418, 466, 817, 863, 0,
	420, 419, 469, 0, 0, 0, 0, 421, 422, 470,
	423, 424, 425, 736, 0, 0, 0, 0, 0, 0,
	0, 734, 0, 0, 0, 0, 732, 733, 790, 748,
	749, 750, 746, 747, 760, 761, 0, 0, 0, 0,
	0, 759, 0, 0, 0, 205, 206, 207, 208, 0,
	209, 0, 0, 0, 0, 837, 765, 0, 0, 0,
	210, 211, 212, 427, 805, 784, 816, 774, 815, 814,
	0, 216, 217, 776, 775, 220, 221, 222, 766, 836,
	223, 864, 865, 433, 0, 224, 843, 0, 826, 0,
	225, 226, 227, 228, 229, 0, 231, 232, 233, 230,
	0, 234, 0, 235, 236, 0, 846, 237, 238, 829,
	827, 828, 833, 831, 830, 832, 239, 240, 241, 242,
	819, 244, 812, 811, 738, 245, 0, 246, 0, 247,
	0, 0, 248, 810, 250, 0, 251, 0, 252, 253,
	0, 743, 254, 255, 257, 260, 256, 261, 262, 866,
	867, 756, 847, 0, 0, 0, 0, 0, 263, 264,
	265, 809, 807, 808, 0, 268, 0, 269, 0, 0,
	848, 270, 0, 271, 868, 0, 442, 272, 0, 273,
	274, 275, 276, 277, 278, 838, 839, 842, 850, 0,
	840, 786, 0, 0, 0, 0, 279, 281, 288, 0,
	849, 282, 798, 789, 800, 802, 803, 804, 799, 0,
	791, 0, 289, 851, 852, 290, 291, 292, 853, 824,
	825, 0, 0, 295, 296, 297, 0, 299, 298, 0,
	300, 869, 854, 301, 302, 855, 0, 303, 304, 0,
	0, 305, 0, 306, 740, 739, 307, 308, 310, 778,
	309, 856, 312, 313, 315, 314, 735, 2702, 857, 757,
	841, 813, 316, 317, 0, 787, 788, 0, 0, 320,
	321, 0, 0, 322, 453, 858, 323, 859, 870, 324,
	325, 326, 327, 328, 329, 330, 0, 331, 871, 332,
	456, 333, 0, 334, 335, 336, 337, 338, 339, 806,
	340, 341, 0, 342, 343, 344, 345, 346, 0, 348,
	349, 347, 350, 351, 352, 353, 0, 354, 860, 355,
	356, 357, 358, 744, 359, 0, 363, 364, 365, 366,
	367, 368, 369, 0, 375, 376, 779, 780, 782, 783,
	371, 377, 378, 834, 379, 360, 361, 380, 861, 381,
	801, 781, 383, 0, 393, 384, 385, 386, 362, 387,
	391, 845, 388, 389, 390, 872, 0, 394, 395, 0,
	396, 397, 398, 399, 400, 258, 401, 259, 777, 0,
	820, 821, 822, 823, 0, 0, 404, 405, 873, 874,
	755, 406, 407, 0, 408, 409, 0, 0, 410, 411,
	412, 414, 835, 415, 0, 785, 416, 417, 418, 466,
	817, 863, 0, 420, 419, 469, 0, 0, 0, 0,
	421, 422, 470, 423, 424, 425, 736, 0, 0, 0,
	0, 0, 0, 0, 734, 0, 0, 0, 0, 732,
	733, 1407, 0, 0, 0, 0, 0, 0, 761, 0,
	0, 0, 0, 0, 759, 790, 748, 749, 750, 746,
	747, 760, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 206, 207, 208, 0, 209, 0, 0,
	0, 0, 837, 765, 0, 0, 0, 210, 211, 212,
	427, 805, 784, 816, 774, 815, 814, 0, 216, 217,
	776, 775, 220, 221, 222, 766, 836, 223, 864, 865,
	433, 0, 224, 843, 0, 826, 0, 225, 226, 227,
	228, 229, 0, 231, 232, 233, 230, 0, 234, 0,
	235, 236, 0, 846, 237, 238, 829, 827, 828, 833,
	831, 830, 832, 239, 240, 241, 242, 819, 244, 812,
	811, 738, 245, 0, 246, 0, 247, 0, 0, 248,
	810, 250, 0, 251, 0, 252, 253, 0, 743, 254,
	255, 257, 260, 256, 261, 262, 866, 867, 756, 847,
	0, 0, 0, 0, 0, 263, 264, 265, 809, 807,
	808, 0, 268, 0, 269, 0, 0, 848, 270, 0,
	271, 868, 0, 442, 272, 0, 273, 274, 275, 276,
	277, 278, 838, 839, 842, 850, 0, 840, 786, 0,
	0, 0, 1735, 279, 281, 288, 0, 849, 282, 798,
	789, 800, 802, 803, 804, 799, 0, 791, 0, 289,
	851, 852, 290, 291, 292, 853, 824, 825, 0, 0,
	295, 296, 297, 0, 299, 298, 0, 300, 869, 854,
	301, 302, 855, 0, 303, 304, 0, 0, 305, 0,
	306, 740, 739, 307, 308, 310, 778, 309, 856, 312,
	313, 315, 314, 735, 0, 857, 757, 841, 813, 316,
	317, 0, 787, 788, 0, 0, 320, 321, 0, 0,
	322, 453, 858, 323, 859, 870, 324, 325, 326, 327,
	328, 329, 330, 0, 331, 871, 332, 456, 333, 1734,
	334, 335, 336, 337, 338, 339, 806, 340, 341, 0,
	342, 343, 344, 345, 346, 0, 348, 349, 347, 350,
	351, 352, 353, 0, 354, 860, 355, 356, 357, 358,
	744, 359, 0, 363, 364, 365, 366, 367, 368, 369,
	0, 375, 376, 779, 780, 782, 783, 371, 377, 378,
	834, 379, 360, 361, 380, 861, 381, 801, 781, 383,
	0, 393, 384, 385, 386, 362, 387, 391, 845, 388,
	389, 390, 872, 0, 394, 395, 0, 396, 397, 398,
	399, 400, 258, 401, 259, 777, 0, 820, 821, 822,
	823, 0, 0, 404, 405, 873, 874, 755, 406, 407,
	0, 408, 409, 0, 0, 410, 411, 412, 414, 835,
	415, 0, 785, 416, 417, 418, 466, 817, 863, 0,
	420, 419, 469, 0, 0, 0, 0, 421, 422, 470,
	423, 424, 425, 736, 0, 0, 0, 0, 0, 0,
	0, 734, 0, 0, 0, 0, 732, 733, 0, 0,
	0, 0, 0, 0, 0, 761, 0, 0, 0, 0,
	728, 759, 790, 748, 749, 750, 746, 747, 760, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	206, 207, 208, 0, 209, 0, 0, 0, 0, 837,
	765, 0, 0, 0, 210, 211, 212, 427, 805, 784,
	816, 774, 815, 814, 0, 216, 217, 776, 775, 220,
	221, 222, 766, 836, 223, 864, 865, 433, 0, 224,
	843, 0, 826, 0, 225, 226, 227, 228, 229, 0,
	231, 232, 233, 230, 0, 234, 0, 235, 236, 0,
	846, 237, 238, 829, 827, 828, 833, 831, 830, 832,
	239, 240, 241, 242, 819, 244, 812, 811, 738, 245,
	0, 246, 0, 247, 0, 0, 248, 810, 250, 0,
	251, 0, 252, 253, 0, 743, 254, 255, 257, 260,
	256, 261, 262, 866, 867, 756, 847, 0, 0, 0,
	0, 0, 263, 264, 265, 809, 807, 808, 0, 268,
	0, 269, 0, 0, 848, 270, 0, 271, 868, 0,
	442, 272, 0, 273, 274, 275, 276, 277, 278, 838,
	839, 842, 850, 0, 840, 786, 0, 0, 0, 0,
	279, 281, 288, 0, 849, 282, 798, 789, 800, 802,
	803, 804, 799, 0, 791, 0, 289, 851, 852, 290,
	291, 292, 853, 824, 825, 0, 0, 295, 296, 297,
	0, 299, 298, 0, 300, 869, 854, 301, 302, 855,
	0, 303, 304, 0, 0, 305, 0, 306, 740, 739,
	307, 308, 310, 778, 309, 856, 312, 313, 315, 314,
	735, 0, 857, 757, 841, 813, 316, 317, 0, 787,
	788, 730, 0, 320, 321, 0, 0, 322, 453, 858,
	323, 859, 870, 324, 325, 326, 327, 328, 329, 330,
	0, 331, 871, 332, 456, 333, 0, 334, 335, 336,
	337, 338, 339, 806, 340, 341, 0, 342, 343, 344,
	345, 346, 0, 348, 349, 347, 350, 351, 352, 353,
	0, 354, 860, 355, 356, 357, 358, 744, 359, 0,
	363, 364, 365, 366, 367, 368, 369, 0, 375, 376,
	779, 780, 782, 783, 371, 377, 378, 834, 379, 360,
	361, 380, 861, 381, 801, 781, 383, 0, 393, 384,
	385, 386, 362, 387, 391, 845, 388, 389, 390, 872,
	0, 394, 395, 0, 396, 397, 398, 399, 400, 258,
	401, 259, 777, 0, 820, 821, 822, 823, 0, 0,
	404, 405, 873, 874, 755, 406, 407, 0, 408, 409,
	0, 0, 410, 411, 412, 414, 835, 415, 0, 785,
	416, 417, 418, 466, 817, 863, 0, 420, 419, 469,
	0, 0, 0, 0, 421, 422, 470, 423, 424, 425,
	736, 0, 0, 0, 0, 0, 0, 0, 734, 0,
	0, 0, 0, 732, 733, 790, 748, 749, 750, 746,
	747, 760, 761, 0, 0, 0, 0, 0, 759, 0,
	0, 0, 205, 206, 207, 208, 0, 209, 0, 0,
	0, 0, 837, 765, 0, 0, 0, 210, 211, 212,
	427, 805, 784, 816, 774, 815, 814, 0, 216, 217,
	776, 775, 220, 221, 222, 766, 836, 223, 864, 865,
	433, 0, 224, 843, 0, 826, 0, 225, 226, 227,
	228, 229, 0, 231, 232, 233, 230, 0, 234, 0,
	235, 236, 0, 846, 237, 238, 829, 827, 828, 833,
	831, 830, 832, 239, 240, 241, 242, 819, 244, 812,
	811, 738, 245, 0, 246, 0, 247, 0, 0, 248,
	810, 250, 0, 251, 0, 252, 253, 0, 743, 254,
	255, 257, 260, 256, 261, 262, 866, 867, 756, 847,
	0, 0, 0, 0, 0, 263, 264, 265, 809, 807,
	808, 0, 268, 0, 269, 0, 0, 848, 270, 0,
	271, 868, 0, 442, 272, 0, 273, 274, 275, 276,
	277, 278, 838, 839, 842, 850, 0, 840, 786, 0,
	0, 0, 0, 279, 281, 288, 0, 849, 282, 798,
	789, 800, 802, 803, 804, 799, 0, 791, 0, 289,
	851, 852, 290, 291, 292, 853, 824, 825, 0, 0,
	295, 296, 297, 0, 299, 298, 0, 300, 869, 854,
	301, 302, 855, 0, 303, 304, 0, 0, 305, 0,
	306, 740, 739, 307, 308, 310, 778, 309, 856, 312,
	313, 315, 314, 735, 0, 857, 757, 841, 813, 316,
	317, 0, 787, 788, 730, 0, 320, 321, 0, 0,
	322, 453, 858, 323, 859, 870, 324, 325, 326, 327,
	328, 329, 330, 0, 331, 871, 332, 456, 333, 0,
	334, 335, 336, 337, 338, 339, 806, 340, 341, 0,
	342, 343, 344, 345, 346, 0, 348, 349, 347, 350,
	351, 352, 353, 0, 354, 860, 355, 356, 357, 358,
	744, 359, 0, 363, 364, 365, 366, 367, 368, 369,
	0, 375, 376, 779, 780, 782, 783, 371, 377, 378,
	834, 379, 360, 361, 380, 861, 381, 801, 781, 383,
	0, 393, 384, 385, 386, 362, 387, 391, 845, 388,
	389, 390, 872, 0, 394, 395, 0, 396, 397, 398,
	399, 400, 258, 401, 259, 777, 0, 820, 821, 822,
	823, 0, 0, 404, 405, 873, 874, 755, 406, 407,
	0, 408, 409, 0, 0, 410, 411, 412, 414, 835,
	415, 0, 785, 416, 417, 418, 466, 817, 863, 0,
	420, 419, 469, 0, 0, 0, 0, 421, 422, 470,
	423, 424, 425, 736, 0, 0, 0, 0, 0, 0,
	0, 734, 0, 0, 0, 0, 732, 733, 790, 748,
	749, 750, 746, 747, 760, 761, 0, 0, 0, 0,
	0, 759, 0, 0, 0, 205, 206, 207, 208, 0,
	209, 0, 0, 0, 0, 837, 765, 0, 0, 0,
	210, 211, 212, 427, 805, 784, 816, 774, 815, 814,
	0, 216, 217, 776, 775, 220, 221, 222, 766, 836,
	223, 864, 865, 433, 0, 224, 843, 0, 826, 0,
	225, 226, 227, 228, 229, 0, 231, 232, 233, 230,
	0, 234, 0, 235, 236, 0, 846, 237, 238, 829,
	827, 828, 833, 831, 830, 832, 239, 240, 241, 242,
	819, 244, 812, 811, 738, 245, 0, 246, 0, 247,
	0, 0, 248, 810, 250, 0, 251, 0, 252, 253,
	0, 743, 254, 255, 257, 260, 256, 261, 262, 866,
	867, 756, 847, 0, 0, 0, 0, 0, 263, 264,
	265, 809, 807, 808, 0, 268, 0, 269, 0, 0,
	848, 270, 0, 271, 868, 0, 442, 272, 0, 273,
	274, 275, 276, 277, 278, 838, 839, 842, 850, 0,
	840, 786, 0, 0, 0, 0, 279, 281, 288, 0,
	849, 282, 798, 789, 800, 802, 803, 804, 799, 0,
	791, 0, 289, 851, 852, 290, 291, 292, 853, 824,
	825, 0, 0, 295, 296, 297, 0, 299, 298, 0,
	300, 869, 854, 301, 302, 855, 0, 303, 304, 0,
	0, 305, 0, 306, 740, 739, 307, 308, 310, 778,
	309, 856, 312, 313, 315, 314, 735, 0, 857, 757,
	841, 813, 316, 317, 0, 787, 788, 0, 0, 320,
	321, 0, 0, 322, 453, 858, 323, 859, 870, 324,
	325, 326, 327, 328, 329, 330, 0, 331, 871, 332,
	456, 333, 0, 334, 335, 336, 337, 338, 339, 806,
	340, 341, 0, 342, 343, 344, 345, 346, 0, 348,
	349, 347, 350, 351, 352, 353, 0, 354, 860, 355,
	356, 357, 358, 744, 359, 0, 363, 364, 365, 366,
	367, 368, 369, 0, 375, 376, 779, 780, 782, 783,
	371, 377, 378, 834, 379, 360, 361, 380, 861, 381,
	801, 781, 383, 0, 393, 384, 385, 386, 362, 387,
	391, 845, 388, 389, 390, 872, 0, 394, 395, 0,
	396, 397, 398, 399, 400, 258, 401, 259, 777, 0,
	820, 821, 822, 823, 0, 0, 404, 405, 873, 874,
	755, 406, 407, 0, 408, 409, 0, 0, 410, 411,
	412, 414, 835, 415, 0, 785, 416, 417, 418, 466,
	817, 863, 2519, 420, 419, 469, 0, 0, 0, 0,
	421, 422, 470, 423, 424, 425, 736, 0, 0, 0,
	0, 0, 0, 0, 734, 0, 0, 0, 0, 732,
	733, 790, 748, 749, 750, 746, 747, 760, 761, 0,
	0, 0, 0, 0, 759, 0, 0, 0, 205, 206,
	207, 208, 0, 209, 0, 0, 0, 0, 837, 765,
	0, 0, 0, 210, 211, 212, 427, 805, 784, 816,
	774, 815, 814, 0, 216, 217, 776, 775, 220, 221,
	222, 766, 836, 223, 864, 865, 433, 0, 224, 843,
	0, 826, 0, 225, 226, 227, 228, 229, 0, 231,
	232, 233, 230, 0, 234, 0, 235, 236, 0, 846,
	237, 238, 829, 827, 828, 833, 831, 830, 832, 239,
	240, 241, 242, 819, 244, 812, 811, 738, 245, 0,
	246, 0, 247, 0, 0, 248, 810, 250, 0, 251,
	0, 252, 253, 0, 743, 254, 255, 257, 260, 256,
	261, 262, 866, 867, 756, 847, 0, 0, 0, 0,
	0, 263, 264, 265, 809, 807, 808, 0, 268, 0,
	269, 0, 0, 848, 270, 0, 271, 868, 0, 442,
	272, 0, 273, 274, 275, 276, 277, 278, 838, 839,
	842, 850, 0, 840, 786, 0, 0, 0, 0, 279,
	281, 288, 0, 849, 282, 798, 789, 800, 802, 803,
	804, 799, 0, 791, 0, 289, 851, 852, 290, 291,
	292, 853, 824, 825, 0, 0, 295, 296, 297, 0,
	299, 298, 0, 300, 869, 854, 301, 302, 855, 0,
	303, 304, 0, 0, 305, 0, 306, 740, 739, 307,
	308, 310, 778, 309, 856, 312, 313, 315, 314, 735,
	0, 857, 757, 841, 813, 316, 317, 0, 787, 788,
	0, 0, 320, 321, 0, 0, 322, 453, 858, 323,
	859, 870, 324, 325, 326, 327, 328, 329, 330, 0,
	331, 871, 332, 456, 333, 0, 334, 335, 336, 337,
	338, 339, 806, 340, 341, 0, 342, 343, 344, 345,
	346, 0, 348, 349, 347, 350, 351, 352, 353, 0,
	354, 860, 355, 356, 357, 358, 744, 359, 0, 363,
	364, 365, 366, 367, 368, 369, 0, 375, 376, 779,
	780, 782, 783, 371, 377, 378, 834, 379, 360, 361,
	380, 861, 381, 801, 781, 383, 0, 393, 384, 385,
	386, 362, 387, 391, 845, 388, 389, 390, 872, 0,
	394, 395, 0, 396, 397, 398, 399, 400, 258, 401,
	259, 777, 0, 820, 821, 822, 823, 0, 0, 404,
	405, 873, 874, 755, 406, 407, 0, 408, 409, 0,
	0, 410, 411, 412, 414, 835, 415, 0, 785, 416,
	417, 418, 466, 817, 863, 0, 420, 419, 469, 0,
	0, 0, 0, 421, 422, 470, 423, 424, 425, 736,
	0, 0, 0, 0, 0, 0, 0, 734, 0, 0,
	0, 0, 732, 733, 1407, 0, 0, 0, 0, 0,
	0, 761, 0, 0, 0, 0, 0, 759, 790, 748,
	749, 750, 746, 747, 760, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 205, 206, 207, 208, 0,
	209, 0, 0, 0, 0, 837, 765, 0, 0, 0,
	210, 211, 212, 427, 805, 784, 816, 774, 815, 814,
	0, 216, 217, 776, 775, 220, 221, 222, 766, 836,
	223, 864, 865, 433, 0, 224, 843, 0, 826, 0,
	225, 226, 227, 228, 229, 0, 231, 232, 233, 230,
	0, 234, 0, 235, 236, 0, 846, 237, 238, 829,
	827, 828, 833, 831, 830, 832, 239, 240, 241, 242,
	819, 244, 812, 811, 738, 245, 0, 246, 0, 247,
	0, 0, 248, 810, 250, 0, 251, 0, 252, 253,
	0, 743, 254, 255, 257, 260, 256, 261, 262, 866,
	867, 756, 847, 0, 0, 0, 0, 0, 263, 264,
	265, 809, 807, 808, 0, 268, 0, 269, 0, 1909,
	848, 270, 0, 271, 868, 0, 442, 272, 0, 273,
	274, 275, 276, 277, 278, 838, 839, 842, 850, 0,
	840, 786, 0, 0, 0, 0, 279, 281, 288, 0,
	849, 282, 798, 789, 800, 802, 803, 804, 799, 0,
	791, 0, 289, 851, 852, 290, 291, 292, 853, 824,
	825, 0, 0, 295, 296, 297, 0, 299, 298, 0,
	300, 869, 854, 301, 302, 855, 0, 303, 304, 0,
	0, 305, 0, 306, 740, 739, 307, 308, 310, 778,
	309, 856, 312, 313, 315, 314, 735, 0, 857, 757,
	841, 813, 316, 317, 0, 787, 788, 0, 0, 320,
	321, 0, 0, 322, 453, 858, 323, 859, 870, 324,
	325, 326, 327, 328, 329, 330, 0, 331, 871, 332,
	456, 333, 0, 334, 335, 336, 337, 338, 339, 806,
	340, 341, 0, 342, 343, 344, 345, 346, 0, 348,
	349, 347, 350, 351, 352, 353, 0, 354, 860, 355,
	356, 357, 358, 744, 359, 0, 363, 364, 365, 366,
	367, 368, 369, 0, 375, 376, 779, 780, 782, 783,
	371, 377, 378, 834, 379, 360, 361, 380, 861, 381,
	801, 781, 383, 0, 393, 384, 385, 386, 362, 387,
	391, 845, 388, 389, 390, 872, 0, 394, 395, 0,
	396, 397, 398, 399, 400, 258, 401, 259, 777, 0,
	820, 821, 822, 823, 0, 0, 404, 405, 873, 874,
	755, 406, 407, 0, 408, 409, 0, 0, 410, 411,
	412, 414, 835, 415, 0, 785, 416, 417, 418, 466,
	817, 863, 0, 420, 419, 469, 0, 0, 0, 0,
	421, 422, 470, 423, 424, 425, 736, 0, 0, 0,
	0, 0, 0, 0, 734, 0, 0, 0, 0, 732,
	733, 790, 748, 749, 750, 746, 747, 760, 761, 0,
	0, 0, 0, 0, 759, 0, 0, 0, 205, 206,
	207, 208, 0, 209, 0, 0, 0, 0, 837, 765,
	0, 0, 0, 210, 211, 212, 427, 805, 784, 816,
	774, 815, 814, 0, 216, 217, 776, 775, 220, 221,
	222, 766, 836, 223, 864, 865, 433, 0, 224, 843,
	0, 826, 0, 225, 226, 227, 228, 229, 0, 231,
	232, 233, 230, 0, 234, 0, 235, 236, 0, 846,
	237, 238, 829, 827, 828, 833, 831, 830, 832, 239,
	240, 241, 242, 819, 244, 812, 811, 738, 245, 0,
	246, 0, 247, 0, 0, 248, 810, 250, 0, 251,
	0, 252, 253, 0, 743, 254, 255, 257, 260, 256,
	261, 262, 866, 867, 756, 847, 0, 0, 0, 0,
	0, 263, 264, 265, 809, 807, 808, 0, 268, 0,
	269, 0, 0, 848, 270, 0, 271, 868, 0, 442,
	272, 0, 273, 274, 275, 276, 277, 278, 838, 839,
	842, 850, 0, 840, 786, 0, 0, 0, 0, 279,
	281, 288, 0, 849, 282, 798, 789, 800, 802, 803,
	804, 799, 0, 791, 0, 289, 851, 852, 290, 291,
	292, 853, 824, 825, 0, 0, 295, 296, 297, 0,
	299, 298, 0, 300, 869, 854, 301, 302, 855, 0,
	303, 304, 0, 0, 305, 0, 306, 740, 739, 307,
	308, 310, 778, 309, 856, 312, 313, 315, 314, 735,
	0, 857, 757, 841, 813, 316, 317, 0, 787, 788,
	0, 0, 320, 321, 0, 0, 322, 453, 858, 323,
	859, 870, 324, 325, 326, 327, 328, 329, 330, 0,
	331, 871, 332, 456, 333, 0, 334, 335, 336, 337,
	338, 339, 806, 340, 341, 0, 342, 343, 344, 345,
	346, 0, 348, 349, 347, 350, 351, 352, 353, 0,
	354, 860, 355, 356, 357, 358, 744, 359, 0, 363,
	364, 365, 366, 367, 368, 369, 0, 375, 376, 779,
	780, 782, 783, 371, 377, 378, 834, 379, 360, 361,
	380, 861, 381, 801, 781, 383, 0, 393, 384, 385,
	386, 362, 387, 391, 845, 388, 389, 390, 872, 0,
	394, 395, 0, 396, 397, 398, 399, 400, 258, 401,
	259, 777, 0, 820, 821, 822, 823, 0, 0, 404,
	405, 873, 874, 755, 406, 407, 0, 408, 409, 0,
	0, 410, 411, 412, 414, 835, 415, 0, 785, 416,
	417, 418, 466, 817, 863, 0, 420, 419, 469, 0,
	0, 0, 0, 421, 422, 470, 423, 424, 425, 736,
	0, 0, 0, 0, 0, 0, 0, 734, 0, 0,
	0, 0, 732, 733, 0, 0, 0, 0, 0, 0,
	0, 761, 1350, 0, 0, 0, 1900, 759, 790, 748,
	749, 750, 746, 747, 760, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 205, 206, 207, 208, 0,
	209, 0, 0, 0, 0, 837, 765, 0, 0, 0,
	210, 211, 212, 427, 805, 784, 816, 774, 815, 814,
	0, 216, 217, 776, 775, 220, 221, 222, 766, 836,
	223, 864, 865, 433, 0, 224, 843, 0, 826, 0,
	225, 226, 227, 228, 229, 0, 231, 232, 233, 230,
	0, 234, 0, 235, 236, 0, 846, 237, 238, 829,
	827, 828, 833, 831, 830, 832, 239, 240, 241, 242,
	819, 244, 812, 811, 738, 245, 0, 246, 0, 247,
	0, 0, 248, 810, 250, 0, 251, 0, 252, 253,
	0, 743, 254, 255, 257, 260, 256, 261, 262, 866,
	867, 756, 847, 0, 0, 0, 0, 0, 263, 264,
	265, 809, 807, 808, 0, 268, 0, 269, 0, 0,
	848, 270, 0, 271, 868, 0, 442, 272, 0, 273,
	274, 275, 276, 277, 278, 838, 839, 842, 850, 0,
	840, 786, 0, 0, 0, 0, 279, 281, 288, 0,
	849, 282, 798, 789, 800, 802, 803, 804, 799, 0,
	791, 0, 289, 851, 852, 290, 291, 292, 853, 824,
	825, 0, 0, 295, 296, 297, 0, 299, 298, 0,
	300, 869, 854, 301, 302, 855, 0, 303, 304, 0,
	0, 305, 0, 306, 740, 739, 307, 308, 310, 778,
	309, 856, 312, 313, 315, 314, 735, 0, 857, 757,
	841, 813, 316, 317, 0, 787, 788, 0, 0, 320,
	321, 0, 0, 322, 453, 858, 323, 859, 870, 324,
	325, 326, 327, 328, 329, 330, 0, 331, 871, 332,
	456, 333, 0, 334, 335, 336, 337, 338, 339, 806,
	340, 341, 0, 342, 343, 344, 345, 346, 0, 348,
	349, 347, 350, 351, 352, 353, 0, 354, 860, 355,
	356, 357, 358, 744, 359, 0, 363, 364, 365, 366,
	367, 368, 369, 0, 375, 376, 779, 780, 782, 783,
	371, 377, 378, 834, 379, 360, 361, 380, 861, 381,
	801, 781, 383, 0, 393, 384, 385, 386, 362, 387,
	391, 845, 388, 389, 390, 872, 0, 394, 395, 0,
	396, 397, 398, 399, 400, 258, 401, 259, 777, 0,
	820, 821, 822, 823, 0, 0, 404, 405, 873, 874,
	755, 406, 407, 0, 408, 409, 0, 0, 410, 411,
	412, 414, 835, 415, 0, 785, 416, 417, 418, 466,
	817, 863, 0, 420, 419, 469, 0, 0, 0, 0,
	421, 422, 470, 423, 424, 425, 736, 0, 0, 0,
	0, 0, 0, 0, 734, 0, 0, 0, 0, 732,
	733, 0, 0, 0, 0, 0, 0, 0, 761, 0,
	0, 0, 0, 1889, 759, 790, 748, 749, 750, 746,
	747, 760, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 206, 207, 208, 0, 209, 0, 0,
	0, 0, 837, 765, 0, 0, 0, 210, 211, 212,
	427, 805, 784, 816, 774, 815, 814, 0, 216, 217,
	776, 775, 220, 221, 222, 766, 836, 223, 864, 865,
	433, 0, 224, 843, 0, 826, 0, 225, 226, 227,
	228, 229, 0, 231, 232, 233, 230, 0, 234, 0,
	235, 236, 0, 846, 237, 238, 829, 827, 828, 833,
	831, 830, 832, 239, 240, 241, 242, 819, 244, 812,
	811, 738, 245, 0, 246, 0, 247, 0, 0, 248,
	810, 250, 0, 251, 0, 252, 253, 0, 743, 254,
	255, 257, 260, 256, 261, 262, 866, 867, 756, 847,
	0, 0, 0, 0, 0, 263, 264, 265, 809, 807,
	808, 0, 268, 0, 269, 0, 0, 848, 270, 0,
	271, 868, 0, 442, 272, 0, 273, 274, 275, 276,
	277, 278, 838, 839, 842, 850, 0, 840, 786, 0,
	0, 0, 0, 279, 281, 288, 0, 849, 282, 798,
	789, 800, 802, 803, 804, 799, 0, 791, 0, 289,
	851, 852, 290, 291, 292, 853, 824, 825, 0, 0,
	295, 296, 297, 0, 299, 298, 0, 300, 869, 854,
	301, 302, 855, 0, 303, 304, 0, 0, 305, 0,
	306, 740, 739, 307, 308, 310, 778, 309, 856, 312,
	313, 315, 314, 735, 0, 857, 757, 841, 813, 316,
	317, 0, 787, 788, 0, 0, 320, 321, 0, 0,
	322, 453, 858, 323, 859, 870, 324, 325, 326, 327,
	328, 329, 330, 0, 331, 871, 332, 456, 333, 0,
	334, 335, 336, 337, 338, 339, 806, 340, 341, 0,
	342, 343, 344, 345, 346, 0, 348, 349, 347, 350,
	351, 352, 353, 0, 354, 860, 355, 356, 357, 358,
	744, 359, 0, 363, 364, 365, 366, 367, 368, 369,
	0, 375, 376, 779, 780, 782, 783, 371, 377, 378,
	834, 379, 360, 361, 380, 861, 381, 801, 781, 383,
	0, 393, 384, 385, 386, 362, 387, 391, 845, 388,
	389, 390, 872, 0, 394, 395, 0, 396, 397, 398,
	399, 400, 258, 401, 259, 777, 0, 820, 821, 822,
	823, 0, 0, 404, 405, 873, 874, 755, 406, 407,
	0, 408, 409, 0, 0, 410, 411, 412, 414, 835,
	415, 0, 785, 416, 417, 418, 466, 817, 863, 0,
	420, 419, 469, 0, 0, 0, 0, 421, 422, 470,
	423, 424, 425, 736, 0, 0, 0, 0, 0, 0,
	0, 734, 0, 0, 0, 0, 732, 733, 0, 0,
	0, 0, 0, 0, 0, 761, 0, 0, 0, 0,
	1887, 759, 790, 748, 749, 750, 746, 747, 760, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	206, 207, 208, 0, 209, 0, 0, 0, 0, 837,
	765, 0, 0, 0, 210, 211, 212, 427, 805, 784,
	816, 774, 815, 814, 0, 216, 217, 776, 775, 220,
	221, 222, 766, 836, 223, 864, 865, 433, 0, 224,
	843, 0, 826, 0, 225, 226, 227, 228, 229, 0,
	231, 232, 233, 230, 0, 234, 0, 235, 236, 0,
	846, 237, 238, 829, 827, 828, 833, 831, 830, 832,
	239, 240, 241, 242, 819, 244, 812, 811, 738, 245,
	0, 246, 0, 247, 0, 0, 248, 810, 250, 0,
	251, 0, 252, 253, 0, 743, 254, 255, 257, 260,
	256, 261, 262, 866, 867, 756, 847, 0, 0, 0,
	0, 0, 263, 264, 265, 809, 807, 808, 0, 268,
	0, 269, 0, 0, 848, 270, 0, 271, 868, 0,
	442, 272, 0, 273, 274, 275, 276, 277, 278, 838,
	839, 842, 850, 0, 840, 786, 0, 0, 0, 0,
	279, 281, 288, 0, 849, 282, 798, 789, 800, 802,
	803, 804, 799, 0, 791, 0, 289, 851, 852, 290,
	291, 292, 853, 824, 825, 0, 0, 295, 296, 297,
	0, 299, 298, 0, 300, 869, 854, 301, 302, 855,
	0, 303, 304, 0, 0, 305, 0, 306, 740, 739,
	307, 308, 310, 778, 309, 856, 312, 313, 315, 314,
	735, 0, 857, 757, 841, 813, 316, 317, 0, 787,
	788, 0, 0, 320, 321, 0, 0, 322, 453, 858,
	323, 859, 870, 324, 325, 326, 327, 328, 329, 330,
	0, 331, 871, 332, 456, 333, 0, 334, 335, 336,
	337, 338, 339, 806, 340, 341, 0, 342, 343, 344,
	345, 346, 0, 348, 349, 347, 350, 351, 352, 353,
	0, 354, 860, 355, 356, 357, 358, 744, 359, 0,
	363, 364, 365, 366, 367, 368, 369, 0, 375, 376,
	779, 780, 782, 783, 371, 377, 378, 834, 379, 360,
	361, 380, 861, 381, 801, 781, 383, 0, 393, 384,
	385, 386, 362, 387, 391, 845, 388, 389, 390, 872,
	0, 394, 395, 0, 396, 397, 398, 399, 400, 258,
	401, 259, 777, 0, 820, 821, 822, 823, 0, 0,
	404, 405, 873, 874, 755, 406, 407, 0, 408, 409,
	0, 0, 410, 411, 412, 414, 835, 415, 0, 785,
	416, 417, 418, 466, 817, 863, 0, 420, 419, 469,
	0, 0, 0, 0, 421, 422, 470, 423, 424, 425,
	736, 0, 0, 0, 0, 0, 0, 0, 734, 0,
	0, 0, 0, 732, 733, 0, 0, 0, 0, 0,
	0, 0, 761, 0, 0, 0, 0, 1885, 759, 790,
	748, 749, 750, 746, 747, 760, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 206, 207, 208,
	0, 209, 0, 0, 0, 0, 837, 765, 0, 0,
	0, 210, 211, 212, 427, 805, 784, 816, 774, 815,
	814, 0, 216, 217, 776, 775, 220, 221, 222, 766,
	836, 223, 864, 865, 433, 0, 224, 843, 0, 826,
	0, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 0, 234, 0, 235, 236, 0, 846, 237, 238,
	829, 827, 828, 833, 831, 830, 832, 239, 240, 241,
	242, 819, 244, 812, 811, 738, 245, 0, 246, 0,
	247, 0, 0, 248, 810, 250, 0, 251, 0, 252,
	253, 0, 743, 254, 255, 257, 260, 256, 261, 262,
	866, 867, 756, 847, 0, 0, 0, 0, 0, 263,
	264, 265, 809, 807, 808, 0, 268, 0, 269, 0,
	0, 848, 270, 0, 271, 868, 0, 442, 272, 0,
	273, 274, 275, 276, 277, 278, 838, 839, 842, 850,
	0, 840, 786, 0, 0, 0, 0, 279, 281, 288,
	0, 849, 282, 798, 789, 800, 802, 803, 804, 799,
	0, 791, 0, 289, 851, 852, 290, 291, 292, 853,
	824, 825, 0, 0, 295, 296, 297, 0, 299, 298,
	0, 300, 869, 854, 301, 302, 855, 0, 303, 304,
	0, 0, 305, 0, 306, 740, 739, 307, 308, 310,
	778, 309, 856, 312, 313, 315, 314, 735, 0, 857,
	757, 841, 813, 316, 317, 0, 787, 788, 0, 0,
	320, 321, 0, 0, 322, 453, 858, 323, 859, 870,
	324, 325, 326, 327, 328, 329, 330, 0, 331, 871,
	332, 456, 333, 0, 334, 335, 336, 337, 338, 339,
	806, 340, 341, 0, 342, 343, 344, 345, 346, 0,
	348, 349, 347, 350, 351, 352, 353, 0, 354, 860,
	355, 356, 357, 358, 744, 359, 0, 363, 364, 365,
	366, 367, 368, 369, 0, 375, 376, 779, 780, 782,
	783, 371, 377, 378, 834, 379, 360, 361, 380, 861,
	381, 801, 781, 383, 0, 393, 384, 385, 386, 362,
	387, 391, 845, 388, 389, 390, 872, 0, 394, 395,
	0, 396, 397, 398, 399, 400, 258, 401, 259, 777,
	0, 820, 821, 822, 823, 0, 0, 404, 405, 873,
	874, 755, 406, 407, 0, 408, 409, 0, 0, 410,
	411, 412, 414, 835, 415, 0, 785, 416, 417, 418,
	466, 817, 863, 0, 420, 419, 469, 0, 0, 0,
	0, 421, 422, 470, 423, 424, 425, 736, 0, 0,
	0, 0, 0, 0, 0, 734, 0, 0, 0, 0,
	732, 733, 0, 0, 0, 0, 0, 0, 0, 761,
	0, 0, 0, 0, 1883, 759, 1875, 748, 749, 750,
	746, 747, 760, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 205, 206, 207, 208, 0, 209, 0,
	0, 0, 0, 837, 765, 0, 0, 0, 210, 211,
	212, 427, 805, 784, 816, 774, 815, 814, 0, 216,
	217, 776, 775, 220, 221, 222, 766, 836, 223, 864,
	865, 433, 0, 224, 843, 0, 826, 0, 225, 226,
	227, 228, 229, 0, 231, 232, 233, 230, 0, 234,
	0, 235, 236, 0, 846, 237, 238, 829, 827, 828,
	833, 831, 830, 832, 239, 240, 241, 242, 819, 1878,
	812, 811, 738, 245, 0, 246, 0, 247, 0, 0,
	248, 810, 250, 0, 251, 0, 252, 253, 0, 743,
	254, 255, 257, 260, 256, 261, 262, 866, 867, 756,
	847, 0, 0, 0, 0, 0, 263, 264, 265, 809,
	807, 808, 0, 268, 0, 269, 0, 0, 848, 270,
	0, 271, 868, 0, 442, 272, 0, 273, 274, 1879,
	276, 277, 278, 838, 839, 842, 850, 0, 840, 786,
	0, 0, 0, 0, 279, 281, 288, 0, 849, 282,
	798, 789, 800, 802, 803, 804, 799, 0, 791, 0,
	289, 851, 852, 290, 291, 292, 853, 824, 825, 0,
	0, 295, 296, 297, 0, 299, 298, 0, 300, 869,
	854, 301, 302, 855, 0, 303, 304, 0, 0, 305,
	0, 306, 740, 739, 1880, 1877, 310, 778, 309, 856,
	312, 313, 315, 314, 735, 0, 857, 757, 841, 813,
	316, 317, 0, 787, 788, 0, 0, 320, 321, 0,
	0, 322, 453, 858, 323, 859, 870, 324, 325, 326,
	327, 328, 329, 330, 0, 331, 871, 332, 456, 333,
	0, 334, 335, 336, 337, 338, 339, 806, 340, 341,
	0, 342, 343, 344, 345, 346, 0, 348, 349, 347,
	350, 351, 352, 353, 0, 354, 860, 355, 356, 357,
	358, 744, 359, 0, 363, 364, 365, 366, 367, 368,
	1881, 0, 375, 376, 779, 780, 782, 783, 371, 377,
	378, 834, 379, 360, 361, 380, 861, 381, 801, 781,
	383, 0, 393, 384, 385, 386, 362, 387, 391, 845,
	388, 389, 390, 872, 0, 394, 395, 0, 396, 397,
	398, 399, 400, 258, 401, 259, 777, 0, 820, 821,
	822, 823, 0, 0, 404, 405, 873, 874, 755, 406,
	407, 0, 408, 409, 0, 0, 410, 411, 412, 414,
	835, 415, 0, 785, 416, 417, 418, 466, 817, 863,
	0, 420, 419, 469, 0, 0, 0, 0, 421, 422,
	470, 423, 1876, 425, 736, 0, 0, 0, 0, 0,
	0, 0, 734, 0, 0, 0, 0, 732, 733, 0,
	0, 0, 0, 0, 0, 0, 761, 0, 0, 0,
	0, 1872, 759, 1875, 748, 749, 750, 746, 747, 760,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 206, 207, 208, 0, 209, 0, 0, 0, 0,
	837, 765, 0, 0, 0, 210, 211, 212, 427, 805,
	784, 816, 774, 815, 814, 0, 216, 217, 776, 775,
	220, 221, 222, 766, 836, 223, 864, 865, 433, 0,
	224, 843, 0, 826, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 846, 237, 238, 829, 827, 828, 833, 831, 830,
	832, 239, 240, 241, 242, 819, 1878, 812, 811, 738,
	245, 0, 246, 0, 247, 0, 0, 248, 810, 250,
	0, 251, 0, 252, 253, 0, 743, 254, 255, 257,
	260, 256, 261, 262, 866, 867, 756, 847, 0, 0,
	0, 0, 0, 263, 264, 265, 809, 807, 808, 0,
	268, 0, 269, 0, 0, 848, 270, 0, 271, 868,
	0, 442, 272, 0, 273, 274, 1879, 276, 277, 278,
	838, 839, 842, 850, 0, 840, 786, 0, 0, 0,
	0, 279, 281, 288, 0, 849, 282, 798, 789, 800,
	802, 803, 804, 799, 0, 791, 0, 289, 851, 852,
	290, 291, 292, 853, 824, 825, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 300, 869, 854, 301, 302,
	855, 0, 303, 304, 0, 0, 305, 0, 306, 740,
	739, 1880, 1877, 310, 778, 309, 856, 312, 313, 315,
	314, 735, 0, 857, 757, 841, 813, 316, 317, 0,
	787, 788, 0, 0, 320, 321, 0, 0, 322, 453,
	858, 323, 859, 870, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 871, 332, 456, 333, 0, 334, 335,
	336, 337, 338, 339, 806, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 860, 355, 356, 357, 358, 744, 359,
	0, 363, 364, 365, 366, 367, 368, 1881, 0, 375,
	376, 779, 780, 782, 783, 371, 377, 378, 834, 379,
	360, 361, 380, 861, 381, 801, 781, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 845, 388, 389, 390,
	872, 0, 394, 395, 0, 396, 397, 398, 399, 400,
	258, 401, 259, 777, 0, 820, 821, 822, 823, 0,
	0, 404, 405, 873, 874, 755, 406, 407, 0, 408,
	409, 0, 0, 410, 411, 412, 414, 835, 415, 0,
	785, 416, 417, 418, 466, 817, 863, 0, 420, 419,
	469, 0, 0, 0, 0, 421, 422, 470, 423, 1876,
	425, 736, 0, 0, 0, 0, 0, 0, 0, 734,
	0, 0, 0, 0, 732, 733, 790, 748, 749, 750,
	746, 747, 760, 761, 0, 0, 0, 0, 0, 759,
	0, 0, 0, 205, 206, 207, 208, 0, 209, 0,
	0, 0, 0, 837, 765, 0, 0, 0, 210, 211,
	212, 427, 805, 784, 816, 774, 815, 814, 0, 216,
	217, 776, 775, 220, 221, 222, 766, 836, 223, 864,
	865, 433, 0, 224, 843, 0, 826, 0, 225, 226,
	227, 228, 229, 0, 231, 232, 233, 230, 0, 234,
	0, 235, 236, 0, 846, 237, 238, 829, 827, 828,
	833, 831, 830, 832, 239, 240, 241, 242, 819, 244,
	812, 811, 738, 245, 0, 246, 0, 247, 0, 0,
	248, 810, 250, 0, 251, 0, 252, 253, 0, 743,
	254, 255, 257, 260, 256, 261, 262, 866, 867, 756,
	847, 0, 0, 0, 0, 0, 263, 264, 265, 809,
	807, 808, 0, 268, 0, 269, 0, 0, 848, 270,
	0, 271, 868, 0, 442, 272, 0, 273, 274, 275,
	276, 277, 278, 838, 839, 842, 850, 0, 840, 786,
	0, 0, 0, 0, 279, 281, 288, 0, 849, 282,
	798, 789, 800, 802, 803, 804, 799, 0, 791, 0,
	289, 851, 852, 290, 291, 292, 853, 824, 825, 0,
	0, 295, 296, 297, 0, 299, 298, 0, 300, 869,
	854, 301, 302, 855, 0, 303, 304, 0, 0, 305,
	0, 306, 740, 739, 307, 308, 310, 778, 309, 856,
	312, 313, 315, 314, 735, 0, 857, 757, 841, 813,
	316, 317, 0, 787, 788, 0, 0, 320, 321, 0,
	0, 322, 453, 858, 323, 859, 870, 324, 325, 326,
	327, 328, 329, 330, 0, 331, 871, 332, 456, 333,
	0, 334, 335, 336, 337, 338, 339, 806, 340, 341,
	0, 342, 343, 344, 345, 346, 0, 348, 349, 347,
	350, 351, 352, 353, 0, 354, 860, 355, 356, 357,
	358, 744, 359, 0, 363, 364, 365, 366, 367, 368,
	369, 0, 375, 376, 779, 780, 782, 783, 371, 377,
	378, 834, 379, 360, 361, 380, 861, 381, 801, 781,
	383, 0, 393, 384, 385, 386, 362, 387, 391, 845,
	388, 389, 390, 872, 0, 394, 395, 0, 396, 397,
	398, 399, 400, 258, 401, 259, 777, 0, 820, 821,
	822, 823, 0, 0, 404, 405, 873, 874, 755, 406,
	407, 0, 408, 409, 0, 0, 410, 411, 412, 414,
	835, 415, 0, 785, 416, 417, 418, 466, 817, 863,
	0, 420, 419, 469, 0, 0, 0, 0, 421, 422,
	470, 423, 424, 425, 736, 0, 0, 0, 0, 0,
	0, 0, 734, 0, 0, 0, 0, 732, 733, 0,
	0, 0, 0, 0, 1358, 0, 761, 0, 0, 0,
	0, 0, 759, 790, 748, 749, 750, 746, 747, 760,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 206, 207, 208, 1722, 209, 0, 0, 0, 0,
	837, 765, 0, 0, 0, 210, 211, 212, 427, 805,
	784, 816, 774, 815, 814, 0, 216, 217, 776, 775,
	220, 221, 222, 766, 836, 223, 864, 865, 433, 0,
	224, 843, 0, 826, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 846, 237, 238, 829, 827, 828, 833, 831, 830,
	832, 239, 240, 241, 242, 819, 244, 812, 811, 738,
	245, 0, 246, 0, 247, 0, 0, 248, 810, 250,
	0, 251, 0, 252, 253, 0, 743, 254, 255, 257,
	260, 256, 261, 262, 866, 867, 756, 847, 0, 0,
	0, 0, 0, 263, 264, 265, 809, 807, 808, 0,
	268, 0, 269, 0, 0, 848, 270, 0, 271, 868,
	0, 442, 272, 0, 273, 274, 275, 276, 277, 278,
	838, 839, 842, 850, 0, 840, 786, 0, 0, 0,
	0, 279, 281, 288, 0, 849, 282, 798, 789, 800,
	802, 803, 804, 799, 0, 791, 0, 289, 851, 852,
	290, 291, 292, 853, 824, 825, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 300, 869, 854, 301, 302,
	855, 0, 303, 304, 0, 0, 305, 0, 306, 740,
	739, 307, 308, 310, 778, 309, 856, 312, 313, 315,
	314, 735, 0, 857, 757, 841, 813, 316, 317, 0,
	787, 788, 0, 0, 320, 321, 0, 0, 322, 453,
	858, 323, 859, 870, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 871, 332, 456, 333, 0, 334, 335,
	336, 337, 338, 339, 806, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 860, 355, 356, 357, 358, 744, 359,
	0, 363, 364, 365, 366, 367, 368, 369, 0, 375,
	376, 779, 780, 782, 783, 371, 377, 378, 834, 379,
	360, 361, 380, 861, 381, 801, 781, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 845, 388, 389, 390,
	872, 0, 394, 395, 0, 396, 397, 398, 399, 400,
	258, 401, 259, 777, 0, 820, 821, 822, 823, 0,
	0, 404, 405, 873, 874, 755, 406, 407, 0, 408,
	409, 0, 0, 410, 411, 412, 414, 835, 415, 0,
	785, 416, 417, 418, 466, 817, 863, 0, 420, 419,
	469, 0, 0, 0, 0, 421, 422, 470, 423, 424,
	425, 736, 0, 0, 0, 0, 0, 0, 0, 734,
	0, 0, 0, 0, 732, 733, 0, 0, 0, 0,
	0, 0, 0, 761, 0, 0, 0, 0, 1100, 759,
	790, 748, 749, 750, 746, 747, 760, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 206, 207,
	208, 0, 209, 0, 0, 0, 0, 837, 765, 0,
	0, 0, 210, 211, 212, 427, 805, 784, 816, 774,
	815, 814, 0, 216, 217, 776, 775, 220, 221, 222,
	766, 836, 223, 864, 865, 433, 0, 224, 843, 0,
	826, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 846, 237,
	238, 829, 827, 828, 833, 831, 830, 832, 239, 240,
	241, 242, 819, 244, 812, 811, 738, 245, 0, 246,
	0, 247, 0, 0, 248, 810, 250, 0, 251, 0,
	252, 253, 0, 743, 254, 255, 257, 260, 256, 261,
	262, 866, 867, 756, 847, 0, 0, 0, 0, 0,
	263, 264, 265, 809, 807, 808, 0, 268, 0, 269,
	0, 0, 848, 270, 0, 271, 868, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 1099, 839, 842,
	850, 0, 840, 786, 0, 0, 0, 0, 279, 281,
	288, 0, 849, 282, 798, 789, 800, 802, 803, 804,
	799, 0, 791, 0, 289, 851, 852, 290, 291, 292,
	853, 824, 825, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 869, 854, 301, 302, 855, 0, 303,
	304, 0, 0, 305, 0, 306, 740, 739, 307, 308,
	310, 778, 309, 856, 312, 313, 315, 314, 735, 0,
	857, 757, 841, 813, 316, 317, 0, 787, 788, 0,
	0, 320, 321, 0, 0, 322, 453, 858, 323, 859,
	870, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	871, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 806, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	860, 355, 356, 357, 358, 744, 359, 0, 363, 364,
	365, 366, 367, 368, 369, 0, 375, 376, 779, 780,
	782, 783, 371, 377, 378, 834, 379, 360, 361, 380,
	861, 381, 801, 781, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 845, 388, 389, 390, 872, 0, 394,
	395, 0, 396, 397, 398, 399, 400, 258, 401, 259,
	777, 0, 820, 821, 822, 823, 0, 0, 404, 405,
	873, 874, 755, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 835, 415, 0, 785, 416, 417,
	418, 466, 817, 863, 0, 420, 419, 469, 0, 0,
	0, 0, 421, 422, 470, 423, 424, 425, 736, 0,
	0, 0, 0, 0, 0, 0, 734, 0, 0, 0,
	0, 732, 733, 0, 0, 0, 0, 0, 0, 0,
	761, 0, 0, 0, 0, 1094, 759, 790, 748, 749,
	750, 746, 747, 760, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 206, 207, 208, 0, 209,
	0, 0, 0, 0, 837, 765, 0, 0, 0, 210,
	211, 212, 427, 805, 784, 816, 774, 815, 814, 0,
	216, 217, 776, 775, 220, 221, 222, 766, 836, 223,
	864, 865, 433, 0, 224, 843, 0, 826, 0, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 0,
	234, 0, 235, 236, 0, 846, 237, 238, 829, 827,
	828, 833, 831, 830, 832, 239, 240, 241, 242, 819,
	244, 812, 811, 738, 245, 0, 246, 0, 247, 0,
	0, 248, 810, 250, 0, 251, 0, 252, 253, 0,
	743, 254, 255, 257, 260, 256, 261, 262, 866, 867,
	756, 847, 0, 0, 0, 0, 0, 263, 264, 265,
	809, 807, 808, 0, 268, 0, 269, 0, 0, 848,
	270, 0, 271, 868, 0, 442, 272, 0, 273, 274,
	275, 276, 277, 278, 1093, 839, 842, 850, 0, 840,
	786, 0, 0, 0, 0, 279, 281, 288, 0, 849,
	282, 798, 789, 800, 802, 803, 804, 799, 0, 791,
	0, 289, 851, 852, 290, 291, 292, 853, 824, 825,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 300,
	869, 854, 301, 302, 855, 0, 303, 304, 0, 0,
	305, 0, 306, 740, 739, 307, 308, 310, 778, 309,
	856, 312, 313, 315, 314, 735, 0, 857, 757, 841,
	813, 316, 317, 0, 787, 788, 0, 0, 320, 321,
	0, 0, 322, 453, 858, 323, 859, 870, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 871, 332, 456,
	333, 0, 334, 335, 336, 337, 338, 339, 806, 340,
	341, 0, 342, 343, 344, 345, 346, 0, 348, 349,
	347, 350, 351, 352, 353, 0, 354, 860, 355, 356,
	357, 358, 744, 359, 0, 363, 364, 365, 366, 367,
	368, 369, 0, 375, 376, 779, 780, 782, 783, 371,
	377, 378, 834, 379, 360, 361, 380, 861, 381, 801,
	781, 383, 0, 393, 384, 385, 386, 362, 387, 391,
	845, 388, 389, 390, 872, 0, 394, 395, 0, 396,
	397, 398, 399, 400, 258, 401, 259, 777, 0, 820,
	821, 822, 823, 0, 0, 404, 405, 873, 874, 755,
	406, 407, 0, 408, 409, 0, 0, 410, 411, 412,
	414, 835, 415, 0, 785, 416, 417, 418, 466, 817,
	863, 0, 420, 419, 469, 0, 0, 0, 0, 421,
	422, 470, 423, 424, 425, 736, 0, 0, 0, 0,
	0, 0, 0, 734, 0, 0, 0, 0, 732, 733,
	0, 0, 0, 0, 0, 0, 0, 761, 0, 0,
	0, 0, 1089, 759, 790, 748, 749, 750, 746, 747,
	760, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 206, 207, 208, 0, 209, 0, 0, 0,
	0, 837, 765, 0, 0, 0, 210, 211, 212, 427,
	805, 784, 816, 774, 815, 814, 0, 216, 217, 776,
	775, 220, 221, 222, 766, 836, 223, 864, 865, 433,
	0, 224, 843, 0, 826, 0, 225, 226, 227, 228,
	229, 0, 231, 232, 233, 230, 0, 234, 0, 235,
	236, 0, 846, 237, 238, 829, 827, 828, 833, 831,
	830, 832, 239, 240, 241, 242, 819, 244, 812, 811,
	738, 245, 0, 246, 0, 247, 0, 0, 248, 810,
	250, 0, 251, 0, 252, 253, 0, 743, 254, 255,
	257, 260, 256, 261, 262, 866, 867, 756, 847, 0,
	0, 0, 0, 0, 263, 264, 265, 809, 807, 808,
	0, 268, 0, 269, 0, 0, 848, 270, 0, 271,
	868, 0, 442, 272, 0, 273, 274, 275, 276, 277,
	278, 838, 839, 842, 850, 0, 840, 786, 0, 0,
	0, 0, 279, 281, 288, 0, 849, 282, 798, 789,
	800, 802, 803, 804, 799, 0, 791, 0, 289, 851,
	852, 290, 291, 292, 853, 824, 825, 0, 0, 295,
	296, 297, 0, 299, 298, 0, 300, 869, 854, 301,
	302, 855, 0, 303, 304, 0, 0, 305, 0, 306,
	740, 739, 307, 308, 310, 778, 309, 856, 312, 313,
	315, 314, 735, 0, 857, 757, 841, 813, 316, 317,
	0, 787, 788, 0, 0, 320, 321, 0, 0, 322,
	453, 858, 323, 859, 870, 324, 325, 326, 327, 328,
	329, 330, 0, 331, 871, 332, 456, 333, 0, 334,
	335, 336, 337, 338, 339, 806, 340, 341, 0, 342,
	343, 344, 345, 346, 0, 348, 349, 347, 350, 351,
	352, 353, 0, 354, 860, 355, 356, 357, 358, 744,
	359, 0, 363, 364, 365, 366, 367, 368, 369, 0,
	375, 376, 779, 780, 782, 783, 371, 377, 378, 834,
	379, 360, 361, 380, 861, 381, 801, 781, 383, 0,
	393, 384, 385, 386, 362, 387, 391, 845, 388, 389,
	390, 872, 0, 394, 395, 0, 396, 397, 398, 399,
	400, 258, 401, 259, 777, 0, 820, 821, 822, 823,
	0, 0, 404, 405, 873, 874, 755, 406, 407, 0,
	408, 409, 0, 0, 410, 411, 412, 414, 835, 415,
	0, 785, 416, 417, 418, 466, 817, 863, 0, 420,
	419, 469, 0, 0, 0, 0, 421, 422, 470, 423,
	424, 425, 736, 0, 0, 0, 0, 0, 0, 0,
	734, 0, 0, 0, 0, 732, 733, 790, 748, 749,
	750, 746, 747, 760, 761, 0, 0, 0, 0, 0,
	759, 0, 0, 0, 205, 206, 207, 208, 0, 209,
	0, 0, 0, 0, 837, 765, 0, 0, 0, 210,
	211, 212, 427, 805, 784, 816, 774, 815, 814, 0,
	216, 217, 776, 775, 220, 221, 222, 766, 836, 223,
	864, 865, 433, 0, 224, 843, 0, 826, 0, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 0,
	234, 0, 235, 236, 0, 846, 237, 238, 829, 827,
	828, 833, 831, 830, 832, 239, 240, 241, 242, 819,
	244, 812, 811, 738, 245, 0, 246, 0, 247, 0,
	0, 248, 810, 250, 0, 251, 0, 252, 253, 0,
	743, 254, 255, 257, 260, 256, 261, 262, 866, 867,
	756, 847, 0, 0, 0, 0, 0, 263, 264, 265,
	809, 807, 808, 0, 268, 0, 269, 0, 0, 848,
	270, 0, 271, 868, 0, 442, 272, 0, 273, 274,
	275, 276, 277, 278, 838, 839, 842, 850, 0, 840,
	786, 0, 0, 0, 0, 279, 281, 288, 0, 849,
	282, 798, 789, 800, 802, 803, 804, 799, 0, 791,
	0, 289, 851, 852, 290, 291, 292, 853, 824, 825,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 300,
	869, 854, 301, 302, 855, 0, 303, 304, 0, 0,
	305, 0, 306, 740, 739, 307, 308, 310, 778, 309,
	856, 312, 313, 315, 314, 735, 0, 857, 757, 841,
	813, 316, 317, 0, 787, 788, 0, 0, 320, 321,
	0, 0, 322, 453, 858, 323, 859, 870, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 871, 332, 456,
	333, 0, 334, 335, 336, 337, 338, 339, 806, 340,
	341, 0, 342, 343, 344, 345, 346, 0, 348, 349,
	347, 350, 351, 352, 353, 0, 354, 860, 355, 356,
	357, 358, 744, 359, 0, 363, 364, 365, 366, 367,
	368, 369, 0, 375, 376, 779, 780, 782, 783, 371,
	377, 378, 834, 379, 360, 361, 380, 861, 381, 801,
	781, 383, 0, 393, 384, 385, 386, 362, 387, 391,
	845, 388, 389, 390, 872, 0, 394, 395, 0, 396,
	397, 398, 399, 400, 258, 401, 259, 777, 0, 820,
	821, 822, 823, 0, 0, 404, 405, 873, 874, 755,
	406, 407, 0, 408, 409, 0, 0, 410, 411, 412,
	414, 835, 415, 0, 785, 416, 417, 418, 466, 817,
	863, 0, 420, 419, 469, 0, 0, 0, 0, 421,
	422, 470, 423, 424, 425, 736, 0, 0, 0, 0,
	0, 0, 0, 734, 0, 0, 0, 0, 732, 733,
	790, 748, 749, 750, 746, 747, 760, 761, 0, 0,
	0, 0, 0, 759, 0, 0, 0, 205, 206, 207,
	208, 0, 209, 0, 0, 0, 0, 837, 765, 0,
	0, 0, 210, 211, 212, 427, 805, 784, 816, 774,
	815, 814, 0, 216, 217, 776, 775, 220, 221, 222,
	766, 836, 223, 864, 865, 433, 0, 224, 843, 0,
	826, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 846, 237,
	3080, 829, 827, 828, 833, 831, 830, 832, 239, 240,
	241, 242, 819, 244, 812, 811, 738, 245, 0, 246,
	0, 247, 0, 0, 248, 810, 250, 0, 251, 0,
	252, 253, 0, 743, 254, 255, 257, 260, 256, 261,
	262, 866, 867, 756, 847, 0, 0, 0, 0, 0,
	263, 264, 265, 809, 807, 808, 0, 268, 0, 269,
	0, 0, 848, 270, 0, 271, 868, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 838, 839, 842,
	850, 0, 840, 786, 0, 0, 0, 0, 279, 281,
	288, 0, 849, 282, 798, 789, 800, 802, 803, 804,
	799, 0, 791, 0, 289, 851, 852, 290, 291, 292,
	853, 824, 825, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 869, 854, 301, 302, 855, 0, 303,
	304, 0, 0, 305, 0, 306, 740, 739, 307, 308,
	310, 778, 309, 856, 312, 313, 315, 314, 735, 0,
	857, 757, 841, 813, 316, 317, 0, 787, 788, 0,
	0, 320, 321, 0, 0, 322, 453, 858, 323, 859,
	870, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	871, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 806, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	860, 355, 356, 357, 358, 744, 359, 0, 363, 364,
	365, 366, 367, 368, 369, 0, 375, 376, 779, 780,
	782, 783, 371, 377, 378, 834, 379, 360, 361, 380,
	861, 381, 801, 781, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 845, 388, 389, 390, 872, 0, 394,
	395, 0, 396, 397, 398, 399, 400, 258, 401, 259,
	777, 0, 820, 821, 822, 823, 0, 0, 404, 405,
	873, 874, 755, 406, 407, 0, 3079, 409, 0, 0,
	410, 411, 412, 414, 835, 415, 0, 785, 416, 417,
	418, 466, 817, 863, 0, 420, 419, 469, 0, 0,
	0, 0, 421, 422, 470, 423, 424, 425, 736, 0,
	0, 0, 0, 0, 0, 0, 734, 0, 0, 0,
	0, 732, 733, 790, 748, 749, 750, 746, 747, 760,
	761, 0, 0, 0, 0, 0, 759, 0, 0, 0,
	205, 206, 207, 208, 0, 209, 0, 0, 0, 0,
	837, 765, 0, 0, 0, 210, 211, 212, 3078, 805,
	784, 816, 774, 815, 814, 0, 216, 217, 776, 775,
	220, 221, 222, 766, 836, 223, 864, 865, 433, 0,
	224, 843, 0, 826, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 846, 237, 3080, 829, 827, 828, 833, 831, 830,
	832, 239, 240, 241, 242, 819, 244, 812, 811, 738,
	245, 0, 246, 0, 247, 0, 0, 248, 810, 250,
	0, 251, 0, 252, 253, 0, 743, 254, 255, 257,
	260, 256, 261, 262, 866, 867, 756, 847, 0, 0,
	0, 0, 0, 263, 264, 265, 809, 807, 808, 0,
	268, 0, 269, 0, 0, 848, 270, 0, 271, 868,
	0, 442, 272, 0, 273, 274, 275, 276, 277, 278,
	838, 839, 842, 850, 0, 840, 786, 0, 0, 0,
	0, 279, 281, 288, 0, 849, 282, 798, 789, 800,
	802, 803, 804, 799, 0, 791, 0, 289, 851, 852,
	290, 291, 292, 853, 824, 825, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 300, 869, 854, 301, 302,
	855, 0, 303, 304, 0, 0, 305, 0, 306, 740,
	739, 307, 308, 310, 778, 309, 856, 312, 313, 315,
	314, 735, 0, 857, 757, 841, 813, 316, 317, 0,
	787, 788, 0, 0, 320, 321, 0, 0, 322, 453,
	858, 323, 859, 870, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 871, 332, 456, 333, 0, 334, 335,
	336, 337, 338, 339, 806, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 860, 355, 356, 357, 358, 744, 359,
	0, 363, 364, 365, 366, 367, 368, 369, 0, 375,
	376, 779, 780, 782, 783, 371, 377, 378, 834, 379,
	360, 361, 380, 861, 381, 801, 781, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 845, 388, 389, 390,
	872, 0, 394, 395, 0, 396, 397, 398, 399, 400,
	258, 401, 259, 777, 0, 820, 821, 822, 823, 0,
	0, 404, 405, 873, 874, 755, 406, 407, 0, 3079,
	409, 0, 0, 410, 411, 412, 414, 835, 415, 0,
	785, 416, 417, 418, 466, 817, 863, 0, 420, 419,
	469, 0, 0, 0, 0, 421, 422, 470, 423, 424,
	425, 736, 0, 0, 0, 0, 0, 0, 0, 734,
	0, 0, 0, 0, 732, 733, 790, 748, 749, 750,
	746, 747, 760, 761, 0, 0, 0, 0, 0, 759,
	0, 0, 0, 205, 206, 207, 208, 0, 209, 0,
	0, 0, 0, 837, 765, 0, 0, 0, 210, 211,
	212, 427, 805, 784, 816, 774, 815, 814, 0, 216,
	217, 776, 775, 220, 221, 222, 766, 836, 223, 864,
	865, 433, 0, 224, 843, 0, 826, 0, 225, 226,
	227, 228, 229, 0, 231, 232, 233, 230, 0, 234,
	0, 235, 236, 0, 846, 237, 238, 829, 827, 828,
	833, 831, 830, 832, 239, 240, 241, 242, 819, 244,
	812, 811, 0, 245, 0, 246, 0, 247, 0, 0,
	248, 810, 250, 0, 251, 0, 252, 253, 0, 743,
	254, 255, 257, 260, 256, 261, 262, 866, 867, 756,
	847, 0, 0, 0, 0, 0, 263, 264, 265, 809,
	807, 808, 0, 268, 0, 269, 0, 0, 848, 270,
	0, 271, 868, 0, 442, 272, 0, 273, 274, 275,
	276, 277, 278, 838, 839, 842, 850, 0, 840, 786,
	0, 0, 0, 0, 279, 281, 288, 0, 849, 282,
	798, 789, 800, 802, 803, 804, 799, 0, 791, 0,
	289, 851, 852, 290, 291, 292, 853, 824, 825, 0,
	0, 295, 296, 297, 0, 299, 298, 0, 300, 869,
	854, 301, 302, 855, 0, 303, 304, 0, 0, 305,
	0, 306, 912, 911, 307, 308, 310, 778, 309, 856,
	312, 313, 315, 314, 0, 0, 857, 757, 841, 813,
	316, 317, 0, 787, 788, 0, 0, 320, 321, 0,
	0, 322, 453, 858, 323, 859, 870, 324, 325, 326,
	327, 328, 329, 330, 0, 331, 871, 332, 456, 333,
	0, 334, 335, 336, 337, 338, 339, 806, 340, 341,
	0, 342, 343, 344, 345, 346, 0, 348, 349, 347,
	350, 351, 352, 353, 0, 354, 860, 355, 356, 357,
	358, 744, 359, 0, 363, 364, 365, 366, 367, 368,
	369, 0, 375, 376, 779, 780, 782, 783, 371, 377,
	378, 834, 379, 360, 361, 380, 861, 381, 801, 781,
	383, 0, 393, 384, 385, 386, 362, 387, 391, 845,
	388, 389, 390, 872, 0, 394, 395, 0, 396, 397,
	398, 399, 400, 258, 401, 259, 777, 0, 820, 821,
	822, 823, 0, 0, 404, 405, 873, 874, 755, 406,
	407, 0, 408, 409, 0, 0, 410, 411, 412, 414,
	835, 415, 0, 785, 416, 417, 418, 466, 817, 863,
	0, 420, 419, 469, 0, 0, 0, 0, 421, 422,
	470, 423, 424, 425, 0, 0, 0, 0, 0, 725,
	0, 910, 1897, 0, 0, 0, 0, 1895, 1896, 0,
	0, 0, 0, 0, 0, 0, 761, 0, 205, 206,
	207, 208, 759, 209, 0, 0, 0, 0, 837, 0,
	0, 0, 0, 210, 211, 212, 427, 428, 213, 429,
	214, 215, 430, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 836, 223, 431, 432, 433, 0, 224, 843,
	0, 826, 0, 225, 226, 227, 228, 229, 0, 231,
	232, 233, 230, 0, 234, 0, 235, 236, 0, 846,
	237, 238, 829, 827, 828, 833, 831, 830, 832, 239,
	240, 241, 242, 243, 244, 435, 436, 0, 245, 0,
	246, 0, 247, 0, 0, 248, 249, 250, 0, 251,
	0, 252, 253, 0, 437, 254, 255, 257, 260, 256,
	261, 262, 866, 867, 0, 847, 0, 0, 0, 0,
	0, 263, 264, 265, 440, 266, 267, 0, 268, 0,
	269, 0, 0, 848, 270, 0, 271, 868, 0, 442,
	272, 0, 273, 274, 275, 276, 277, 278, 838, 839,
	842, 850, 0, 840, 280, 0, 0, 0, 0, 279,
	281, 288, 0, 849, 282, 446, 284, 283, 285, 286,
	287, 447, 0, 448, 0, 289, 851, 852, 290, 291,
	292, 853, 293, 294, 0, 0, 295, 296, 297, 897,
	299, 298, 0, 300, 869, 854, 301, 302, 855, 0,
	303, 304, 0, 0, 305, 0, 306, 912, 911, 307,
	308, 310, 311, 309, 856, 312, 313, 315, 314, 0,
	0, 857, 0, 841, 452, 316, 317, 0, 318, 319,
	0, 902, 320, 321, 0, 0, 322, 453, 858, 323,
	859, 870, 324, 325, 326, 327, 328, 329, 330, 0,
	331, 871, 332, 456, 333, 0, 334, 335, 336, 337,
	338, 339, 457, 340, 341, 0, 342, 343, 344, 345,
	346, 0, 348, 349, 347, 350, 351, 352, 353, 0,
	354, 860, 355, 356, 357, 358, 458, 904, 0, 363,
	364, 365, 366, 367, 368, 369, 174, 375, 376, 370,
	372, 373, 374, 371, 377, 378, 834, 379, 360, 361,
	380, 861, 381, 459, 382, 383, 0, 393, 384, 385,
	386, 362, 387, 391, 392, 388, 389, 390, 872, 0,
	394, 395, 176, 396, 397, 398, 399, 400, 258, 401,
	259, 402, 0, 461, 462, 463, 403, 0, 0, 404,
	405, 873, 874, 0, 406, 407, 0, 408, 409, 0,
	0, 410, 411, 412, 414, 835, 415, 0, 413, 416,
	417, 418, 1169, 467, 468, 0, 420, 419, 469, 0,
	910, 0, 168, 421, 422, 470, 423, 424, 425, 0,
	169, 0, 0, 0, 0, 0, 0, 205, 206, 207,
	208, 0, 209, 0, 0, 0, 0, 837, 0, 894,
	0, 1432, 210, 211, 212, 427, 428, 213, 429, 214,
	215, 430, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 836, 223, 431, 432, 433, 0, 224, 843, 0,
	826, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 846, 237,
	238, 829, 827, 828, 833, 831, 830, 832, 239, 240,
	241, 242, 243, 244, 435, 436, 0, 245, 0, 246,
	0, 247, 0, 0, 248, 249, 250, 0, 251, 0,
	252, 253, 0, 437, 254, 255, 257, 260, 256, 261,
	262, 866, 867, 0, 847, 0, 0, 0, 0, 0,
	263, 264, 265, 440, 266, 267, 0, 268, 0, 269,
	0, 0, 848, 270, 0, 271, 868, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 838, 839, 842,
	850, 0, 840, 280, 0, 0, 0, 0, 279, 281,
	288, 0, 849, 282, 446, 284, 283, 285, 286, 287,
	447, 0, 448, 0, 289, 851, 852, 290, 291, 292,
	853, 293, 294, 0, 0, 295, 296, 297, 897, 299,
	298, 0, 300, 869, 854, 301, 302, 855, 0, 303,
	304, 0, 0, 305, 0, 306, 912, 911, 307, 308,
	310, 311, 309, 856, 312, 313, 315, 314, 0, 0,
	857, 0, 841, 452, 316, 317, 0, 318, 319, 0,
	902, 320, 321, 0, 0, 322, 453, 858, 323, 859,
	870, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	871, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 457, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	860, 355, 356, 357, 358, 458, 904, 0, 363, 364,
	365, 366, 367, 368, 369, 174, 375, 376, 370, 372,
	373, 374, 371, 377, 378, 834, 379, 360, 361, 380,
	861, 381, 459, 382, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 392, 388, 389, 390, 872, 0, 394,
	395, 176, 396, 397, 398, 399, 400, 258, 401, 259,
	402, 0, 461, 462, 463, 403, 0, 0, 404, 405,
	873, 874, 0, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 835, 415, 0, 413, 416, 417,
	418, 1169, 467, 468, 0, 420, 419, 469, 2295, 0,
	910, 168, 421, 422, 470, 423, 424, 425, 0, 169,
	0, 0, 0, 0, 0, 0, 0, 205, 206, 207,
	208, 0, 209, 0, 0, 0, 0, 837, 894, 0,
	1432, 0, 210, 211, 212, 427, 428, 213, 429, 214,
	215, 430, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 836, 223, 431, 432, 433, 0, 224, 843, 0,
	826, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 846, 237,
	238, 829, 827, 828, 833, 831, 830, 832, 239, 240,
	241, 242, 243, 244, 435, 436, 0, 245, 0, 246,
	0, 247, 0, 0, 248, 249, 250, 0, 251, 0,
	252, 253, 0, 437, 254, 255, 257, 260, 256, 261,
	262, 866, 867, 0, 847, 0, 0, 0, 0, 0,
	263, 264, 265, 440, 266, 267, 0, 268, 0, 269,
	0, 0, 848, 270, 0, 271, 868, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 838, 839, 842,
	850, 0, 840, 280, 0, 0, 0, 0, 279, 281,
	288, 0, 849, 282, 446, 284, 283, 285, 286, 287,
	447, 0, 448, 0, 289, 851, 852, 290, 291, 292,
	853, 293, 294, 0, 0, 295, 296, 297, 897, 299,
	298, 0, 300, 869, 854, 301, 302, 855, 0, 303,
	304, 0, 0, 305, 0, 306, 912, 911, 307, 308,
	310, 311, 309, 856, 312, 313, 315, 314, 0, 0,
	857, 0, 841, 452, 316, 317, 0, 318, 319, 0,
	902, 320, 321, 0, 0, 322, 453, 858, 323, 859,
	870, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	871, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 457, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	860, 355, 356, 357, 358, 458, 904, 0, 363, 364,
	365, 366, 367, 368, 369, 0, 375, 376, 370, 372,
	373, 374, 371, 377, 378, 834, 379, 360, 361, 380,
	861, 381, 459, 382, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 392, 388, 389, 390, 872, 0, 394,
	395, 0, 396, 397, 398, 399, 400, 258, 401, 259,
	402, 0, 461, 462, 463, 403, 0, 0, 404, 405,
	873, 874, 0, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 835, 415, 0, 413, 416, 417,
	418, 466, 467, 468, 0, 420, 419, 469, 893, 0,
	910, 0, 421, 422, 470, 423, 424, 425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 206, 207,
	208, 0, 209, 0, 0, 0, 0, 837, 894, 0,
	899, 0, 210, 211, 212, 427, 428, 213, 429, 214,
	215, 430, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 836, 223, 431, 432, 433, 0, 224, 843, 0,
	826, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 846, 237,
	238, 829, 827, 828, 833, 831, 830, 832, 239, 240,
	241, 242, 243, 244, 435, 436, 0, 245, 0, 246,
	0, 247, 0, 0, 248, 249, 250, 0, 251, 0,
	252, 253, 0, 437, 254, 255, 257, 260, 256, 261,
	262, 866, 867, 0, 847, 0, 0, 0, 0, 0,
	263, 264, 265, 440, 266, 267, 0, 268, 0, 269,
	0, 0, 848, 270, 0, 271, 868, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 838, 839, 842,
	850, 0, 840, 280, 0, 0, 0, 0, 279, 281,
	288, 0, 849, 282, 446, 284, 283, 285, 286, 287,
	447, 0, 448, 0, 289, 851, 852, 290, 291, 292,
	853, 293, 294, 0, 0, 295, 296, 297, 897, 299,
	298, 0, 300, 869, 854, 301, 302, 855, 0, 303,
	304, 0, 0, 305, 0, 306, 912, 911, 307, 308,
	310, 311, 309, 856, 312, 313, 315, 314, 0, 0,
	857, 0, 841, 452, 316, 317, 0, 318, 319, 0,
	902, 320, 321, 0, 0, 322, 453, 858, 323, 859,
	870, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	871, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 457, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	860, 355, 356, 357, 358, 458, 904, 0, 363, 364,
	365, 366, 367, 368, 369, 0, 375, 376, 370, 372,
	373, 374, 371, 377, 378, 834, 379, 360, 361, 380,
	861, 381, 459, 382, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 392, 388, 389, 390, 872, 0, 394,
	395, 0, 396, 397, 398, 399, 400, 258, 401, 259,
	402, 0, 461, 462, 463, 403, 0, 0, 404, 405,
	873, 874, 0, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 835, 415, 0, 413, 416, 417,
	418, 466, 467, 468, 0, 420, 419, 469, 0, 910,
	0, 0, 421, 422, 470, 423, 424, 425, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 206, 207, 208,
	0, 209, 0, 0, 0, 0, 837, 0, 894, 0,
	899, 210, 211, 212, 427, 428, 213, 429, 214, 215,
	430, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	836, 223, 431, 432, 433, 0, 224, 843, 0, 826,
	0, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 0, 234, 0, 235, 236, 0, 846, 237, 238,
	829, 827, 828, 833, 831, 830, 832, 239, 240, 241,
	242, 243, 244, 435, 436, 0, 245, 0, 246, 0,
	247, 0, 0, 248, 249, 250, 0, 251, 0, 252,
	253, 0, 437, 254, 255, 257, 260, 256, 261, 262,
	866, 867, 0, 847, 0, 0, 0, 0, 0, 263,
	264, 265, 440, 266, 267, 0, 268, 0, 269, 0,
	0, 848, 270, 0, 271, 868, 0, 442, 272, 0,
	273, 274, 275, 276, 277, 278, 838, 839, 842, 850,
	0, 840, 280, 0, 0, 0, 0, 279, 281, 288,
	0, 849, 282, 446, 284, 283, 285, 286, 287, 447,
	0, 448, 0, 289, 851, 852, 290, 291, 292, 853,
	293, 294, 0, 0, 295, 296, 297, 897, 299, 298,
	0, 300, 869, 854, 301, 302, 855, 0, 303, 304,
	0, 0, 305, 0, 306, 912, 911, 307, 308, 310,
	311, 309, 856, 312, 313, 315, 314, 0, 0, 857,
	0, 841, 452, 316, 317, 0, 318, 319, 0, 902,
	320, 321, 0, 0, 322, 453, 858, 323, 859, 870,
	324, 325, 326, 327, 328, 329, 330, 0, 331, 871,
	332, 456, 333, 0, 334, 335, 336, 337, 338, 339,
	457, 340, 341, 0, 342, 343, 344, 345, 346, 0,
	348, 349, 347, 350, 351, 352, 353, 0, 354, 860,
	355, 356, 357, 358, 458, 904, 0, 363, 364, 365,
	366, 367, 368, 369, 0, 375, 376, 370, 372, 373,
	374, 371, 377, 378, 834, 379, 360, 361, 380, 861,
	381, 459, 382, 383, 0, 393, 384, 385, 386, 362,
	387, 391, 392, 388, 389, 390, 872, 0, 394, 395,
	0, 396, 397, 398, 399, 400, 258, 401, 259, 402,
	0, 461, 462, 463, 403, 0, 0, 404, 405, 873,
	874, 0, 406, 407, 0, 408, 409, 0, 0, 410,
	411, 412, 414, 835, 415, 0, 413, 416, 417, 418,
	466, 467, 468, 0, 420, 419, 469, 0, 910, 0,
	0, 421, 422, 470, 423, 424, 425, 0, 0, 0,
	0, 0, 0, 0, 0, 205, 206, 207, 208, 0,
	209, 0, 0, 0, 0, 837, 0, 894, 0, 899,
	210, 211, 212, 427, 428, 213, 429, 214, 215, 430,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 836,
	223, 431, 432, 433, 0, 224, 843, 0, 826, 0,
	225, 226, 227, 228, 229, 0, 231, 232, 233, 230,
	0, 234, 0, 235, 236, 0, 846, 237, 238, 829,
	827, 828, 833, 831, 830, 832, 239, 240, 241, 242,
	243, 244, 435, 436, 0, 245, 0, 246, 0, 247,
	0, 0, 248, 249, 250, 0, 251, 0, 252, 253,
	0, 437, 254, 255, 257, 260, 256, 261, 262, 866,
	867, 0, 847, 0, 0, 0, 0, 0, 263, 264,
	265, 440, 266, 267, 0, 268, 0, 269, 0, 0,
	848, 270, 0, 271, 868, 0, 442, 272, 0, 273,
	274, 275, 276, 277, 278, 838, 839, 842, 850, 0,
	840, 280, 0, 0, 0, 0, 279, 281, 288, 0,
	849, 282, 446, 284, 283, 285, 286, 287, 447, 0,
	448, 0, 289, 851, 852, 290, 291, 292, 853, 293,
	294, 0, 0, 295, 296, 297, 0, 299, 298, 0,
	300, 869, 854, 301, 302, 855, 0, 303, 304, 0,
	0, 305, 0, 306, 912, 911, 307, 308, 310, 311,
	309, 856, 312, 313, 315, 314, 0, 0, 857, 0,
	841, 452, 316, 317, 0, 318, 319, 0, 0, 320,
	321, 0, 0, 322, 453, 858, 323, 859, 870, 324,
	325, 326, 327, 328, 329, 330, 0, 331, 871, 332,
	456, 333, 0, 334, 335, 336, 337, 338, 339, 457,
	340, 341, 0, 342, 343, 344, 345, 346, 0, 348,
	349, 347, 350, 351, 352, 353, 0, 354, 860, 355,
	356, 357, 358, 458, 359, 0, 363, 364, 365, 366,
	367, 368, 369, 0, 375, 376, 370, 372, 373, 374,
	371, 377, 378, 834, 379, 360, 361, 380, 861, 381,
	459, 382, 383, 0, 393, 384, 385, 386, 362, 387,
	391, 392, 388, 389, 390, 872, 0, 394, 395, 0,
	396, 397, 398, 399, 400, 258, 401, 259, 402, 0,
	461, 462, 463, 403, 0, 0, 404, 405, 873, 874,
	0, 406, 407, 0, 408, 409, 0, 0, 410, 411,
	412, 414, 835, 415, 0, 413, 416, 417, 418, 466,
	467, 468, 0, 420, 419, 469, 0, 910, 0, 0,
	421, 422, 470, 423, 424, 425, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 206, 207, 208, 0, 209,
	0, 0, 0, 0, 837, 0, 0, 0, 2643, 210,
	211, 212, 427, 428, 213, 429, 214, 215, 430, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 836, 223,
	431, 432, 433, 0, 224, 843, 0, 826, 0, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 0,
	234, 0, 235, 236, 0, 846, 237, 238, 829, 827,
	828, 833, 831, 830, 832, 239, 240, 241, 242, 243,
	244, 435, 436, 0, 245, 0, 246, 0, 247, 0,
	0, 248, 249, 250, 0, 251, 0, 252, 253, 0,
	437, 254, 255, 257, 260, 256, 261, 262, 866, 867,
	0, 847, 0, 0, 0, 0, 0, 263, 264, 265,
	440, 266, 267, 0, 268, 0, 269, 0, 0, 848,
	270, 0, 271, 868, 0, 442, 272, 0, 273, 274,
	275, 276, 277, 278, 838, 839, 842, 850, 0, 840,
	280, 0, 0, 0, 0, 279, 281, 288, 0, 849,
	282, 446, 284, 283, 285, 286, 287, 447, 0, 448,
	0, 289, 851, 852, 290, 291, 292, 853, 293, 294,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 300,
	869, 854, 301, 302, 855, 0, 303, 304, 0, 0,
	305, 0, 306, 912, 911, 307, 308, 310, 311, 309,
	856, 312, 313, 315, 314, 0, 0, 857, 0, 841,
	452, 316, 317, 0, 318, 319, 0, 0, 320, 321,
	0, 0, 322, 453, 858, 323, 859, 870, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 871, 332, 456,
	333, 0, 334, 335, 336, 337, 338, 339, 457, 340,
	341, 0, 342, 343, 344, 345, 346, 0, 348, 349,
	347, 350, 351, 352, 353, 0, 354, 860, 355, 356,
	357, 358, 458, 904, 0, 363, 364, 365, 366, 367,
	368, 369, 0, 375, 376, 370, 372, 373, 374, 371,
	377, 378, 834, 379, 360, 361, 380, 861, 381, 459,
	382, 383, 0, 393, 384, 385, 386, 362, 387, 391,
	392, 388, 389, 390, 872, 0, 394, 395, 0, 396,
	397, 398, 399, 400, 258, 401, 259, 402, 0, 461,
	462, 463, 403, 0, 0, 404, 405, 873, 874, 0,
	406, 407, 0, 408, 409, 0, 0, 410, 411, 412,
	414, 835, 415, 0, 413, 416, 417, 418, 466, 467,
	468, 0, 420, 419, 469, 725, 0, 1066, 0, 421,
	422, 470, 423, 424, 425, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 206, 207, 208, 0, 209,
	0, 0, 0, 0, 426, 0, 0, 1339, 0, 210,
	211, 212, 427, 428, 213, 429, 214, 215, 430, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 223,
	431, 432, 433, 0, 224, 434, 0, 970, 0, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 0,
	234, 0, 235, 236, 0, 846, 237, 238, 0, 0,
	0, 0, 0, 0, 0, 239, 240, 241, 242, 243,
	244, 435, 436, 0, 245, 0, 246, 0, 247, 0,
	0, 248, 249, 250, 0, 251, 0, 252, 253, 0,
	437, 254, 255, 257, 260, 256, 261, 262, 438, 439,
	0, 847, 0, 0, 0, 0, 0, 263, 264, 265,
	440, 266, 267, 0, 268, 0, 269, 0, 0, 848,
	270, 0, 271, 441, 0, 442, 272, 0, 273, 274,
	275, 276, 277, 278, 443, 444, 445, 850, 0, 449,
	280, 0, 0, 0, 0, 279, 281, 288, 0, 849,
	282, 446, 284, 283, 285, 286, 287, 447, 0, 448,
	0, 289, 851, 852, 290, 291, 292, 853, 293, 294,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 300,
	450, 854, 301, 302, 855, 0, 303, 304, 0, 0,
	305, 0, 306, 912, 911, 307, 308, 310, 311, 309,
	856, 312, 313, 315, 314, 0, 0, 857, 0, 451,
	452, 316, 317, 0, 318, 319, 0, 0, 320, 321,
	0, 0, 322, 453, 858, 323, 859, 454, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 455, 332, 456,
	333, 0, 334, 335, 336, 337, 338, 339, 457, 340,
	341, 0, 342, 343, 344, 345, 346, 0, 348, 349,
	347, 350, 351, 352, 353, 0, 354, 860, 355, 356,
	357, 358, 458, 359, 0, 363, 364, 365, 366, 367,
	368, 369, 174, 375, 376, 370, 372, 373, 374, 371,
	377, 378, 0, 379, 360, 361, 380, 861, 381, 459,
	382, 383, 0, 393, 384, 385, 386, 362, 387, 391,
	392, 388, 389, 390, 460, 0, 394, 395, 176, 396,
	397, 398, 399, 400, 258, 401, 259, 402, 0, 461,
	462, 463, 403, 0, 0, 404, 405, 464, 465, 0,
	406, 407, 0, 408, 409, 0, 0, 410, 411, 412,
	414, 0, 415, 0, 413, 416, 417, 418, 1169, 467,
	468, 0, 420, 419, 469, 1166, 0, 1066, 168, 421,
	422, 470, 423, 424, 425, 0, 169, 0, 0, 0,
	0, 0, 0, 0, 205, 206, 207, 208, 0, 209,
	0, 0, 0, 0, 426, 0, 0, 146, 0, 210,
	211, 212, 427, 428, 213, 429, 214, 215, 430, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 223,
	431, 432, 433, 0, 224, 434, 0, 970, 0, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 0,
	234, 0, 235, 236, 0, 846, 237, 238, 0, 0,
	0, 0, 0, 0, 0, 239, 240, 241, 242, 243,
	244, 435, 436, 0, 245, 0, 246, 0, 247, 0,
	0, 248, 249, 250, 0, 251, 0, 252, 253, 0,
	437, 254, 255, 257, 260, 256, 261, 262, 438, 439,
	0, 847, 0, 0, 0, 0, 0, 263, 264, 265,
	440, 266, 267, 0, 268, 0, 269, 0, 0, 848,
	270, 0, 271, 441, 0, 442, 272, 0, 273, 274,
	275, 276, 277, 278, 443, 444, 445, 850, 0, 449,
	280, 0, 0, 0, 0, 279, 281, 288, 0, 849,
	282, 446, 284, 283, 285, 286, 287, 447, 0, 448,
	0, 289, 851, 852, 290, 291, 292, 853, 293, 294,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 300,
	450, 854, 301, 302, 855, 0, 303, 304, 0, 0,
	305, 0, 306, 912, 911, 307, 308, 310, 311, 309,
	856, 312, 313, 315, 314, 0, 0, 857, 0, 451,
	452, 316, 317, 0, 318, 319, 0, 0, 320, 321,
	0, 0, 322, 453, 858, 323, 859, 454, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 455, 332, 456,
	333, 0, 334, 335, 336, 337, 338, 339, 457, 340,
	341, 0, 342, 343, 344, 345, 346, 0, 348, 349,
	347, 350, 351, 352, 353, 0, 354, 860, 355, 356,
	357, 358, 458, 359, 0, 363, 364, 365, 366, 367,
	368, 369, 174, 375, 376, 370, 372, 373, 374, 371,
	377, 378, 0, 379, 360, 361, 380, 861, 381, 459,
	382, 383, 0, 393, 384, 385, 386, 362, 387, 391,
	392, 388, 389, 390, 460, 0, 394, 395, 176, 396,
	397, 398, 399, 400, 258, 401, 259, 402, 0, 461,
	462, 463, 403, 0, 0, 404, 405, 464, 465, 0,
	406, 407, 0, 408, 409, 0, 0, 410, 411, 412,
	414, 0, 415, 0, 413, 416, 417, 418, 1169, 467,
	468, 0, 420, 419, 469, 0, 0, 0, 168, 421,
	422, 470, 423, 424, 425, 0, 169, 0, 0, 0,
	0, 1066, 1065, 0, 0, 0, 0, 1063, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 205, 206,
	207, 208, 0, 209, 0, 0, 0, 0, 426, 0,
	0, 0, 0, 210, 211, 212, 427, 428, 213, 429,
	214, 215, 430, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 223, 431, 432, 433, 0, 224, 434,
	0, 970, 0, 225, 226, 227, 228, 229, 0, 231,
	232, 233, 230, 0, 234, 0, 235, 236, 0, 846,
	237, 238, 0, 0, 0, 0, 0, 0, 0, 239,
	240, 241, 242, 243, 244, 435, 436, 0, 245, 0,
	246, 0, 247, 0, 0, 248, 249, 250, 0, 251,
	0, 252, 253, 0, 437, 254, 255, 257, 260, 256,
	261, 262, 438, 439, 0, 847, 0, 0, 0, 0,
	0, 263, 264, 265, 440, 266, 267, 0, 268, 0,
	269, 0, 0, 848, 270, 0, 271, 441, 0, 442,
	272, 0, 273, 274, 275, 276, 277, 278, 443, 444,
	445, 850, 0, 449, 280, 0, 0, 0, 0, 279,
	281, 288, 0, 849, 282, 446, 284, 283, 285, 286,
	287, 447, 0, 448, 0, 289, 851, 852, 290, 291,
	292, 853, 293, 294, 0, 0, 295, 296, 297, 0,
	299, 298, 0, 300, 450, 854, 301, 302, 855, 0,
	303, 304, 0, 0, 305, 0, 306, 912, 911, 307,
	308, 310, 311, 309, 856, 312, 313, 315, 314, 0,
	0, 857, 0, 451, 452, 316, 317, 0, 318, 319,
	0, 0, 320, 321, 0, 0, 322, 453, 858, 323,
	859, 454, 324, 325, 326, 327, 328, 329, 330, 0,
	331, 455, 332, 456, 333, 0, 334, 335, 336, 337,
	338, 339, 457, 340, 341, 0, 342, 343, 344, 345,
	346, 0, 348, 349, 347, 350, 351, 352, 353, 0,
	354, 860, 355, 356, 357, 358, 458, 359, 0, 363,
	364, 365, 366, 367, 368, 369, 0, 375, 376, 370,
	372, 373, 374, 371, 377, 378, 0, 379, 360, 361,
	380, 861, 381, 459, 382, 383, 0, 393, 384, 385,
	386, 362, 387, 391, 392, 388, 389, 390, 460, 0,
	394, 395, 0, 396, 397, 398, 399, 400, 258, 401,
	259, 402, 0, 461, 462, 463, 403, 0, 0, 404,
	405, 464, 465, 0, 406, 407, 0, 408, 409, 0,
	0, 410, 411, 412, 414, 0, 415, 0, 413, 416,
	417, 418, 466, 467, 468, 0, 420, 419, 469, 0,
	0, 0, 0, 421, 422, 470, 423, 424, 425, 0,
	1066, 1065, 0, 0, 0, 0, 1063, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 206, 207,
	208, 2478, 209, 0, 0, 0, 0, 426, 0, 0,
	0, 0, 210, 211, 212, 427, 428, 213, 429, 214,
	215, 430, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 223, 431, 432, 433, 0, 224, 434, 0,
	970, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 846, 237,
	238, 0, 0, 0, 0, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 435, 436, 0, 245, 0, 246,
	0, 247, 0, 0, 248, 249, 250, 0, 251, 0,
	252, 253, 0, 437, 254, 255, 257, 260, 256, 261,
	262, 438, 439, 0, 847, 0, 0, 0, 0, 0,
	263, 264, 265, 440, 266, 267, 0, 268, 0, 269,
	0, 0, 848, 270, 0, 271, 441, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 443, 444, 445,
	850, 0, 449, 280, 0, 0, 0, 0, 279, 281,
	288, 0, 849, 282, 446, 284, 283, 285, 286, 287,
	447, 0, 448, 0, 289, 851, 852, 290, 291, 292,
	853, 293, 294, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 450, 854, 301, 302, 855, 0, 303,
	304, 0, 0, 305, 0, 306, 912, 911, 307, 308,
	310, 311, 309, 856, 312, 313, 315, 314, 0, 0,
	857, 0, 451, 452, 316, 317, 0, 318, 319, 0,
	0, 320, 321, 0, 0, 322, 453, 858, 323, 859,
	454, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	455, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 457, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	860, 355, 356, 357, 358, 458, 359, 0, 363, 364,
	365, 366, 367, 368, 369, 0, 375, 376, 370, 372,
	373, 374, 371, 377, 378, 0, 379, 360, 361, 380,
	861, 381, 459, 382, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 392, 388, 389, 390, 460, 0, 394,
	395, 0, 396, 397, 398, 399, 400, 258, 401, 259,
	402, 0, 461, 462, 463, 403, 0, 0, 404, 405,
	464, 465, 0, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 0, 415, 0, 413, 416, 417,
	418, 466, 467, 468, 0, 420, 419, 469, 0, 910,
	0, 0, 421, 422, 470, 423, 424, 425, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 206, 207, 208,
	0, 209, 0, 0, 0, 0, 837, 0, 0, 0,
	1173, 210, 211, 212, 427, 428, 213, 429, 214, 215,
	430, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	836, 223, 431, 432, 433, 0, 224, 843, 0, 826,
	0, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 0, 234, 0, 235, 236, 0, 846, 237, 238,
	829, 827, 828, 833, 831, 830, 832, 239, 240, 241,
	242, 243, 244, 435, 436, 0, 245, 0, 246, 0,
	247, 0, 0, 248, 249, 250, 0, 251, 0, 252,
	253, 0, 437, 254, 255, 257, 260, 256, 261, 262,
	866, 867, 0, 847, 0, 0, 0, 0, 0, 263,
	264, 265, 440, 266, 267, 0, 268, 0, 269, 0,
	0, 848, 270, 0, 271, 868, 0, 442, 272, 0,
	273, 274, 275, 276, 277, 278, 838, 839, 842, 850,
	0, 840, 280, 0, 0, 0, 0, 279, 281, 288,
	0, 849, 282, 446, 284, 283, 285, 286, 287, 447,
	0, 448, 0, 289, 851, 852, 290, 291, 292, 853,
	293, 294, 0, 0, 295, 296, 297, 0, 299, 298,
	0, 300, 869, 854, 301, 302, 855, 0, 303, 304,
	0, 0, 305, 0, 306, 912, 911, 307, 308, 310,
	311, 309, 856, 312, 313, 315, 314, 0, 0, 857,
	0, 841, 452, 316, 317, 0, 318, 319, 0, 0,
	320, 321, 0, 0, 322, 453, 858, 323, 859, 870,
	324, 325, 326, 327, 328, 329, 330, 0, 331, 871,
	332, 456, 333, 0, 334, 335, 336, 337, 338, 339,
	457, 340, 341, 0, 342, 343, 344, 345, 346, 0,
	348, 349, 347, 350, 351, 352, 353, 0, 354, 860,
	355, 356, 357, 358, 458, 359, 0, 363, 364, 365,
	366, 367, 368, 369, 0, 375, 376, 370, 372, 373,
	374, 371, 377, 378, 834, 379, 360, 361, 380, 861,
	381, 459, 382, 383, 0, 393, 384, 385, 386, 362,
	387, 391, 392, 388, 389, 390, 872, 0, 394, 395,
	0, 396, 397, 398, 399, 400, 258, 401, 259, 402,
	0, 461, 462, 463, 403, 0, 0, 404, 405, 873,
	874, 0, 406, 407, 0, 408, 409, 0, 0, 410,
	411, 412, 414, 835, 415, 0, 413, 416, 417, 418,
	466, 467, 468, 0, 420, 419, 469, 725, 0, 202,
	0, 421, 422, 470, 423, 424, 425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 206, 207, 208,
	0, 209, 0, 0, 0, 0, 426, 0, 0, 0,
	0, 210, 211, 212, 427, 428, 213, 429, 214, 215,
	430, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 223, 431, 432, 433, 0, 224, 434, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 0, 234, 0, 235, 236, 0, 0, 237, 238,
	0, 0, 0, 0, 0, 0, 0, 239, 240, 241,
	242, 243, 244, 435, 436, 0, 245, 0, 246, 0,
	247, 0, 0, 248, 249, 250, 0, 251, 0, 252,
	253, 0, 437, 254, 255, 257, 260, 256, 261, 262,
	438, 439, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 265, 440, 266, 267, 0, 268, 0, 269, 0,
	0, 0, 270, 0, 271, 441, 0, 442, 272, 0,
	273, 274, 275, 276, 277, 278, 443, 444, 445, 0,
	0, 449, 280, 0, 0, 0, 0, 279, 281, 288,
	0, 0, 282, 446, 284, 283, 285, 286, 287, 447,
	0, 448, 0, 289, 0, 0, 290, 291, 292, 0,
	293, 294, 0, 0, 295, 296, 297, 0, 299, 298,
	0, 300, 450, 0, 301, 302, 0, 0, 303, 304,
	0, 0, 305, 0, 306, 0, 0, 307, 308, 310,
	311, 309, 0, 312, 313, 315, 314, 0, 0, 0,
	0, 451, 452, 316, 317, 0, 318, 319, 0, 0,
	320, 321, 0, 0, 322, 453, 0, 323, 0, 454,
	324, 325, 326, 327, 328, 329, 330, 0, 331, 455,
	332, 456, 333, 0, 334, 335, 336, 337, 338, 339,
	457, 340, 341, 0, 342, 343, 344, 345, 346, 0,
	348, 349, 347, 350, 351, 352, 353, 0, 354, 0,
	355, 356, 357, 358, 458, 359, 0, 363, 364, 365,
	366, 367, 368, 369, 174, 375, 376, 370, 372, 373,
	374, 371, 377, 378, 0, 379, 360, 361, 380, 0,
	381, 459, 382, 383, 0, 393, 384, 385, 386, 362,
	387, 391, 392, 388, 389, 390, 460, 0, 394, 395,
	176, 396, 397, 398, 399, 400, 258, 401, 259, 402,
	0, 461, 462, 463, 403, 0, 0, 404, 405, 464,
	465, 0, 406, 407, 0, 408, 409, 0, 0, 410,
	411, 412, 414, 0, 415, 0, 413, 416, 417, 418,
	1169, 467, 468, 0, 420, 419, 469, 0, 202, 0,
	168, 421, 422, 470, 423, 424, 425, 0, 169, 0,
	0, 0, 0, 0, 0, 205, 206, 207, 208, 0,
	209, 0, 0, 0, 0, 426, 0, 0, 0, 146,
	210, 211, 212, 427, 428, 213, 429, 214, 215, 430,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	223, 431, 432, 433, 0, 224, 434, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 231, 232, 233, 230,
	0, 234, 0, 235, 236, 0, 0, 237, 238, 0,
	0, 0, 0, 0, 0, 0, 239, 240, 241, 242,
	243, 244, 435, 436, 0, 245, 0, 246, 0, 247,
	0, 0, 248, 249, 250, 0, 251, 0, 252, 253,
	0, 437, 254, 255, 257, 260, 256, 261, 262, 438,
	439, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	265, 440, 266, 267, 0, 268, 0, 269, 0, 0,
	0, 270, 0, 271, 441, 0, 442, 272, 0, 273,
	274, 275, 276, 277, 278, 443, 444, 445, 0, 0,
	449, 280, 0, 0, 0, 0, 279, 281, 288, 0,
	0, 282, 446, 284, 283, 285, 286, 287, 447, 0,
	448, 0, 289, 0, 0, 290, 291, 292, 0, 293,
	294, 0, 0, 295, 296, 297, 0, 299, 298, 0,
	300, 450, 0, 301, 302, 0, 0, 303, 304, 0,
	0, 305, 0, 306, 0, 0, 307, 308, 310, 311,
	309, 0, 312, 313, 315, 314, 0, 0, 0, 0,
	451, 452, 316, 317, 0, 318, 319, 0, 0, 320,
	321, 0, 0, 322, 453, 0, 323, 0, 454, 324,
	325, 326, 327, 328, 329, 330, 0, 331, 455, 332,
	456, 333, 0, 334, 335, 336, 337, 338, 339, 457,
	340, 341, 0, 342, 343, 344, 345, 346, 0, 348,
	349, 347, 350, 351, 352, 353, 0, 354, 0, 355,
	356, 357, 358, 458, 359, 0, 363, 364, 365, 366,
	367, 368, 369, 0, 375, 376, 370, 372, 373, 374,
	371, 377, 378, 0, 379, 360, 361, 380, 0, 381,
	459, 382, 383, 0, 393, 384, 385, 386, 362, 387,
	391, 392, 388, 389, 390, 460, 0, 394, 395, 0,
	396, 397, 398, 399, 400, 258, 401, 259, 402, 0,
	461, 462, 463, 403, 0, 0, 404, 405, 464, 465,
	0, 406, 407, 0, 408, 409, 0, 0, 410, 411,
	412, 414, 0, 415, 0, 413, 416, 417, 418, 466,
	467, 468, 0, 420, 419, 469, 0, 202, 0, 0,
	421, 422, 470, 423, 424, 425, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 206, 207, 208, 0, 209,
	0, 0, 0, 0, 426, 0, 0, 0, 2113, 210,
	211, 212, 427, 428, 213, 429, 214, 215, 430, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 223,
	431, 432, 433, 0, 224, 434, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 0,
	234, 0, 235, 236, 0, 0, 237, 238, 0, 0,
	0, 0, 0, 0, 0, 239, 240, 241, 242, 243,
	244, 435, 436, 0, 245, 0, 246, 0, 247, 0,
	0, 248, 249, 250, 0, 251, 0, 252, 253, 0,
	437, 254, 255, 257, 260, 256, 261, 262, 438, 439,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	440, 266, 267, 0, 268, 0, 269, 0, 0, 0,
	270, 0, 271, 441, 0, 442, 272, 0, 273, 274,
	275, 276, 277, 278, 443, 444, 445, 0, 0, 449,
	280, 0, 0, 0, 0, 279, 281, 288, 0, 0,
	282, 446, 284, 283, 285, 286, 287, 447, 0, 448,
	0, 289, 0, 0, 290, 291, 292, 0, 293, 294,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 300,
	450, 0, 301, 302, 0, 0, 303, 304, 0, 0,
	305, 0, 306, 0, 0, 307, 308, 310, 311, 309,
	0, 312, 313, 315, 314, 0, 0, 0, 0, 451,
	452, 316, 317, 0, 318, 319, 0, 0, 320, 321,
	0, 0, 322, 453, 0, 323, 0, 454, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 455, 332, 456,
	333, 0, 334, 335, 336, 337, 338, 339, 457, 340,
	341, 0, 342, 343, 344, 345, 346, 0, 348, 349,
	347, 350, 351, 352, 353, 0, 354, 0, 355, 356,
	357, 358, 458, 359, 0, 363, 364, 365, 366, 367,
	368, 369, 0, 375, 376, 370, 372, 373, 374, 371,
	377, 378, 0, 379, 360, 361, 380, 0, 381, 459,
	382, 383, 0, 393, 384, 385, 386, 362, 387, 391,
	392, 388, 389, 390, 460, 0, 394, 395, 0, 396,
	397, 398, 399, 400, 258, 401, 259, 402, 0, 461,
	462, 463, 403, 0, 0, 404, 405, 464, 465, 0,
	406, 407, 0, 408, 409, 0, 0, 410, 411, 412,
	414, 0, 415, 0, 413, 416, 417, 418, 466, 467,
	468, 0, 420, 419, 469, 0, 202, 0, 0, 421,
	422, 470, 423, 424, 425, 0, 0, 0, 0, 0,
	0, 0, 0, 205, 206, 207, 208, 0, 209, 0,
	0, 0, 0, 426, 0, 0, 0, 2543, 210, 211,
	212, 427, 428, 213, 429, 214, 215, 430, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 223, 431,
	432, 433, 0, 224, 434, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 231, 232, 233, 230, 0, 234,
	0, 235, 236, 0, 0, 237, 238, 0, 0, 0,
	0, 0, 0, 0, 239, 240, 241, 242, 243, 244,
	435, 436, 0, 245, 0, 246, 0, 247, 0, 0,
	248, 249, 250, 0, 251, 0, 252, 253, 0, 437,
	254, 255, 257, 260, 256, 261, 262, 438, 439, 0,
	0, 0, 0, 0, 0, 0, 263, 264, 265, 440,
	266, 267, 0, 268, 0, 269, 0, 0, 0, 270,
	0, 271, 441, 0, 442, 272, 0, 273, 274, 275,
	276, 277, 278, 443, 444, 445, 0, 0, 449, 280,
	0, 0, 0, 0, 279, 281, 288, 0, 0, 282,
	446, 284, 283, 285, 286, 287, 447, 0, 448, 0,
	289, 0, 0, 290, 291, 292, 0, 293, 294, 0,
	0, 295, 296, 297, 0, 299, 298, 0, 300, 450,
	0, 301, 302, 0, 0, 303, 304, 0, 0, 305,
	0, 306, 0, 0, 307, 308, 310, 311, 309, 0,
	312, 313, 315, 314, 0, 0, 0, 0, 451, 452,
	316, 317, 0, 318, 319, 0, 0, 320, 321, 0,
	0, 322, 453, 0, 323, 0, 454, 324, 325, 326,
	327, 328, 329, 330, 0, 331, 455, 332, 456, 333,
	0, 334, 335, 336, 337, 338, 339, 457, 340, 341,
	0, 342, 343, 344, 345, 346, 0, 348, 349, 347,
	350, 351, 352, 353, 0, 354, 0, 355, 356, 357,
	358, 458, 359, 0, 363, 364, 365, 366, 367, 368,
	369, 0, 375, 376, 370, 372, 373, 374, 371, 377,
	378, 0, 379, 360, 361, 380, 0, 381, 459, 382,
	383, 0, 393, 384, 385, 386, 362, 387, 391, 392,
	388, 389, 390, 460, 0, 394, 395, 0, 396, 397,
	398, 399, 400, 258, 401, 259, 402, 0, 461, 462,
	463, 403, 0, 0, 404, 405, 464, 465, 0, 406,
	407, 0, 408, 409, 0, 0, 410, 411, 412, 414,
	0, 415, 0, 413, 416, 417, 418, 466, 467, 468,
	0, 420, 419, 469, 0, 0, 0, 0, 421, 422,
	470, 423, 424, 425, 0, 0, 0, 0, 1194, 0,
	1066, 1065, 0, 0, 0, 0, 1063, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1437, 205, 206, 207,
	208, 0, 209, 0, 0, 0, 0, 426, 0, 0,
	0, 0, 210, 211, 212, 427, 428, 213, 429, 214,
	215, 430, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 223, 431, 432, 433, 0, 224, 434, 0,
	970, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 846, 237,
	238, 0, 0, 0, 0, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 435, 436, 0, 245, 0, 246,
	0, 247, 0, 0, 248, 249, 250, 0, 251, 0,
	252, 253, 0, 437, 254, 255, 257, 260, 256, 261,
	262, 438, 439, 0, 847, 0, 0, 0, 0, 0,
	1193, 264, 265, 440, 266, 267, 0, 268, 0, 269,
	0, 0, 848, 270, 0, 271, 441, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 443, 444, 445,
	850, 0, 449, 280, 0, 0, 0, 0, 279, 281,
	288, 0, 849, 282, 446, 284, 283, 285, 286, 287,
	447, 0, 448, 0, 289, 851, 852, 290, 291, 292,
	853, 293, 294, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 450, 854, 301, 302, 855, 0, 303,
	304, 0, 0, 305, 0, 306, 912, 911, 307, 308,
	310, 311, 309, 856, 312, 313, 315, 314, 0, 0,
	857, 0, 451, 452, 316, 317, 0, 318, 319, 0,
	0, 320, 321, 0, 0, 322, 453, 858, 323, 859,
	454, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	455, 332, 456, 333, 0, 334, 335, 336, 337, 1192,
	339, 457, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	860, 355, 356, 357, 358, 458, 359, 0, 363, 364,
	365, 366, 367, 368, 369, 0, 375, 376, 370, 372,
	373, 374, 371, 377, 378, 0, 379, 360, 361, 380,
	861, 381, 459, 382, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 392, 388, 389, 390, 460, 0, 394,
	395, 0, 396, 397, 398, 399, 400, 258, 401, 259,
	402, 0, 461, 462, 463, 403, 0, 0, 404, 405,
	464, 465, 0, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 0, 415, 0, 413, 416, 417,
	418, 466, 467, 468, 0, 420, 419, 469, 0, 0,
	0, 0, 421, 422, 470, 423, 424, 425, 1164, 0,
	1066, 1065, 0, 0, 0, 0, 1063, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 206, 207,
	208, 0, 209, 0, 0, 0, 0, 426, 0, 0,
	0, 0, 210, 211, 212, 427, 428, 213, 429, 214,
	215, 430, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 223, 431, 432, 433, 0, 224, 434, 0,
	970, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 846, 237,
	238, 0, 0, 0, 0, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 435, 436, 0, 245, 0, 246,
	0, 247, 0, 0, 248, 249, 250, 0, 251, 0,
	252, 253, 0, 437, 254, 255, 257, 260, 256, 261,
	262, 438, 439, 0, 847, 0, 0, 0, 0, 0,
	263, 264, 265, 440, 266, 267, 0, 268, 0, 269,
	0, 0, 848, 270, 0, 271, 441, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 1163, 444, 445,
	850, 0, 449, 280, 0, 0, 0, 0, 279, 281,
	288, 0, 849, 282, 446, 284, 283, 285, 286, 287,
	447, 0, 448, 0, 289, 851, 852, 290, 291, 292,
	853, 293, 294, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 450, 854, 301, 302, 855, 0, 303,
	304, 0, 0, 305, 0, 306, 912, 911, 307, 308,
	310, 311, 309, 856, 312, 313, 315, 314, 0, 0,
	857, 0, 451, 452, 316, 317, 0, 318, 319, 0,
	0, 320, 321, 0, 0, 322, 453, 858, 323, 859,
	454, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	455, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 457, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	860, 355, 356, 357, 358, 458, 359, 0, 363, 364,
	365, 366, 367, 368, 369, 0, 375, 376, 370, 372,
	373, 374, 371, 377, 378, 0, 379, 360, 361, 380,
	861, 381, 459, 382, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 392, 388, 389, 390, 460, 0, 394,
	395, 0, 396, 397, 398, 399, 400, 258, 401, 259,
	402, 0, 461, 462, 463, 403, 0, 0, 404, 405,
	464, 465, 0, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 0, 415, 0, 413, 416, 417,
	418, 466, 467, 468, 0, 420, 419, 469, 0, 0,
	0, 0, 421, 422, 470, 423, 424, 425, 1160, 0,
	1066, 1065, 0, 0, 0, 0, 1063, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 206, 207,
	208, 0, 209, 0, 0, 0, 0, 426, 0, 0,
	0, 0, 210, 211, 212, 427, 428, 213, 429, 214,
	215, 430, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 223, 431, 432, 433, 0, 224, 434, 0,
	970, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 846, 237,
	238, 0, 0, 0, 0, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 435, 436, 0, 245, 0, 246,
	0, 247, 0, 0, 248, 249, 250, 0, 251, 0,
	252, 253, 0, 437, 254, 255, 257, 260, 256, 261,
	262, 438, 439, 0, 847, 0, 0, 0, 0, 0,
	263, 264, 265, 440, 266, 267, 0, 268, 0, 269,
	0, 0, 848, 270, 0, 271, 441, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 1159, 444, 445,
	850, 0, 449, 280, 0, 0, 0, 0, 279, 281,
	288, 0, 849, 282, 446, 284, 283, 285, 286, 287,
	447, 0, 448, 0, 289, 851, 852, 290, 291, 292,
	853, 293, 294, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 450, 854, 301, 302, 855, 0, 303,
	304, 0, 0, 305, 0, 306, 912, 911, 307, 308,
	310, 311, 309, 856, 312, 313, 315, 314, 0, 0,
	857, 0, 451, 452, 316, 317, 0, 318, 319, 0,
	0, 320, 321, 0, 0, 322, 453, 858, 323, 859,
	454, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	455, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 457, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	860, 355, 356, 357, 358, 458, 359, 0, 363, 364,
	365, 366, 367, 368, 369, 0, 375, 376, 370, 372,
	373, 374, 371, 377, 378, 0, 379, 360, 361, 380,
	861, 381, 459, 382, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 392, 388, 389, 390, 460, 0, 394,
	395, 0, 396, 397, 398, 399, 400, 258, 401, 259,
	402, 0, 461, 462, 463, 403, 0, 0, 404, 405,
	464, 465, 0, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 0, 415, 0, 413, 416, 417,
	418, 466, 467, 468, 0, 420, 419, 469, 0, 0,
	0, 0, 421, 422, 470, 423, 424, 425, 1120, 0,
	1066, 1065, 0, 0, 0, 0, 1063, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 206, 207,
	208, 0, 209, 0, 0, 0, 0, 426, 0, 0,
	0, 0, 210, 211, 212, 427, 428, 213, 429, 214,
	215, 430, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 223, 431, 432, 433, 0, 224, 434, 0,
	970, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 846, 237,
	238, 0, 0, 0, 0, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 435, 436, 0, 245, 0, 246,
	0, 247, 0, 0, 248, 249, 250, 0, 251, 0,
	252, 253, 0, 437, 254, 255, 257, 260, 256, 261,
	262, 438, 439, 0, 847, 0, 0, 0, 0, 0,
	263, 264, 265, 440, 266, 267, 0, 268, 0, 269,
	0, 0, 848, 270, 0, 271, 441, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 1119, 444, 445,
	850, 0, 449, 280, 0, 0, 0, 0, 279, 281,
	288, 0, 849, 282, 446, 284, 283, 285, 286, 287,
	447, 0, 448, 0, 289, 851, 852, 290, 291, 292,
	853, 293, 294, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 450, 854, 301, 302, 855, 0, 303,
	304, 0, 0, 305, 0, 306, 912, 911, 307, 308,
	310, 311, 309, 856, 312, 313, 315, 314, 0, 0,
	857, 0, 451, 452, 316, 317, 0, 318, 319, 0,
	0, 320, 321, 0, 0, 322, 453, 858, 323, 859,
	454, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	455, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 457, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	860, 355, 356, 357, 358, 458, 359, 0, 363, 364,
	365, 366, 367, 368, 369, 0, 375, 376, 370, 372,
	373, 374, 371, 377, 378, 0, 379, 360, 361, 380,
	861, 381, 459, 382, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 392, 388, 389, 390, 460, 0, 394,
	395, 0, 396, 397, 398, 399, 400, 258, 401, 259,
	402, 0, 461, 462, 463, 403, 0, 0, 404, 405,
	464, 465, 0, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 0, 415, 0, 413, 416, 417,
	418, 466, 467, 468, 0, 420, 419, 469, 0, 0,
	0, 0, 421, 422, 470, 423, 424, 425, 1117, 0,
	1066, 1065, 0, 0, 0, 0, 1063, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 206, 207,
	208, 0, 209, 0, 0, 0, 0, 426, 0, 0,
	0, 0, 210, 211, 212, 427, 428, 213, 429, 214,
	215, 430, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 223, 431, 432, 433, 0, 224, 434, 0,
	970, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 846, 237,
	238, 0, 0, 0, 0, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 435, 436, 0, 245, 0, 246,
	0, 247, 0, 0, 248, 249, 250, 0, 251, 0,
	252, 253, 0, 437, 254, 255, 257, 260, 256, 261,
	262, 438, 439, 0, 847, 0, 0, 0, 0, 0,
	263, 264, 265, 440, 266, 267, 0, 268, 0, 269,
	0, 0, 848, 270, 0, 271, 441, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 1116, 444, 445,
	850, 0, 449, 280, 0, 0, 0, 0, 279, 281,
	288, 0, 849, 282, 446, 284, 283, 285, 286, 287,
	447, 0, 448, 0, 289, 851, 852, 290, 291, 292,
	853, 293, 294, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 450, 854, 301, 302, 855, 0, 303,
	304, 0, 0, 305, 0, 306, 912, 911, 307, 308,
	310, 311, 309, 856, 312, 313, 315, 314, 0, 0,
	857, 0, 451, 452, 316, 317, 0, 318, 319, 0,
	0, 320, 321, 0, 0, 322, 453, 858, 323, 859,
	454, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	455, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 457, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	860, 355, 356, 357, 358, 458, 359, 0, 363, 364,
	365, 366, 367, 368, 369, 0, 375, 376, 370, 372,
	373, 374, 371, 377, 378, 0, 379, 360, 361, 380,
	861, 381, 459, 382, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 392, 388, 389, 390, 460, 0, 394,
	395, 0, 396, 397, 398, 399, 400, 258, 401, 259,
	402, 0, 461, 462, 463, 403, 0, 0, 404, 405,
	464, 465, 0, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 0, 415, 0, 413, 416, 417,
	418, 466, 467, 468, 0, 420, 419, 469, 0, 0,
	0, 0, 421, 422, 470, 423, 424, 425, 1059, 0,
	1066, 1065, 0, 0, 0, 0, 1063, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 206, 207,
	208, 0, 209, 0, 0, 0, 0, 426, 0, 0,
	0, 0, 210, 211, 212, 427, 428, 213, 429, 214,
	215, 430, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 223, 431, 432, 433, 0, 224, 434, 0,
	970, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 846, 237,
	238, 0, 0, 0, 0, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 435, 436, 0, 245, 0, 246,
	0, 247, 0, 0, 248, 249, 250, 0, 251, 0,
	252, 253, 0, 437, 254, 255, 257, 260, 256, 261,
	262, 438, 439, 0, 847, 0, 0, 0, 0, 0,
	263, 264, 265, 440, 266, 267, 0, 268, 0, 269,
	0, 0, 848, 270, 0, 271, 441, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 1061, 444, 445,
	850, 0, 449, 280, 0, 0, 0, 0, 279, 281,
	288, 0, 849, 282, 446, 284, 283, 285, 286, 287,
	447, 0, 448, 0, 289, 851, 852, 290, 291, 292,
	853, 293, 294, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 450, 854, 301, 302, 855, 0, 303,
	304, 0, 0, 305, 0, 306, 912, 911, 307, 308,
	310, 311, 309, 856, 312, 313, 315, 314, 0, 0,
	857, 0, 451, 452, 316, 317, 0, 318, 319, 0,
	0, 320, 321, 0, 0, 322, 453, 858, 323, 859,
	454, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	455, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 457, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	860, 355, 356, 357, 358, 458, 359, 0, 363, 364,
	365, 366, 367, 368, 369, 0, 375, 376, 370, 372,
	373, 374, 371, 377, 378, 0, 379, 360, 361, 380,
	861, 381, 459, 382, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 392, 388, 389, 390, 460, 0, 394,
	395, 0, 396, 397, 398, 399, 400, 258, 401, 259,
	402, 0, 461, 462, 463, 403, 0, 0, 404, 405,
	464, 465, 0, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 0, 415, 0, 413, 416, 417,
	418, 466, 467, 468, 0, 420, 419, 469, 0, 0,
	0, 0, 421, 422, 470, 423, 424, 425, 1066, 1065,
	0, 0, 0, 0, 1063, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 205, 206, 207, 208, 0,
	209, 0, 0, 0, 0, 426, 0, 0, 0, 0,
	210, 211, 212, 427, 428, 213, 429, 214, 215, 430,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	223, 431, 432, 433, 0, 224, 434, 0, 970, 0,
	225, 226, 227, 228, 229, 0, 231, 232, 233, 230,
	0, 234, 0, 235, 236, 0, 846, 237, 238, 0,
	0, 0, 0, 0, 0, 0, 239, 240, 241, 242,
	243, 244, 435, 436, 0, 245, 0, 246, 0, 247,
	0, 0, 248, 249, 250, 0, 251, 0, 252, 253,
	0, 437, 254, 255, 257, 260, 256, 261, 262, 438,
	439, 0, 847, 0, 0, 0, 0, 0, 263, 264,
	265, 440, 266, 267, 0, 268, 0, 269, 0, 0,
	848, 270, 0, 271, 441, 0, 442, 272, 0, 273,
	274, 275, 276, 277, 278, 443, 444, 445, 850, 0,
	449, 280, 0, 0, 0, 0, 279, 281, 288, 0,
	849, 282, 446, 284, 283, 285, 286, 287, 447, 0,
	448, 0, 289, 851, 852, 290, 291, 292, 853, 293,
	294, 0, 0, 295, 296, 297, 0, 299, 298, 0,
	300, 450, 854, 301, 302, 855, 0, 303, 304, 0,
	0, 305, 0, 306, 912, 911, 307, 308, 310, 311,
	309, 856, 312, 313, 315, 314, 0, 0, 857, 0,
	451, 452, 316, 317, 0, 318, 319, 0, 0, 320,
	321, 0, 0, 322, 453, 858, 323, 859, 454, 324,
	325, 326, 327, 328, 329, 330, 0, 331, 455, 332,
	456, 333, 0, 334, 335, 336, 337, 338, 339, 457,
	340, 341, 0, 342, 343, 344, 345, 346, 0, 348,
	349, 347, 350, 351, 352, 353, 0, 354, 860, 355,
	356, 357, 358, 458, 359, 0, 363, 364, 365, 366,
	367, 368, 369, 0, 375, 376, 370, 372, 373, 374,
	371, 377, 378, 0, 379, 360, 361, 380, 861, 381,
	459, 382, 383, 0, 393, 384, 385, 386, 362, 387,
	391, 392, 388, 389, 390, 460, 0, 394, 395, 0,
	396, 397, 398, 399, 400, 258, 401, 259, 402, 0,
	461, 462, 463, 403, 0, 0, 404, 405, 464, 465,
	0, 406, 407, 0, 408, 409, 0, 0, 410, 411,
	412, 414, 0, 415, 0, 413, 416, 417, 418, 466,
	467, 468, 0, 420, 419, 469, 1066, 1065, 0, 0,
	421, 422, 470, 423, 424, 425, 0, 0, 0, 0,
	0, 0, 0, 205, 206, 207, 208, 0, 209, 0,
	0, 0, 0, 426, 0, 0, 0, 0, 210, 211,
	212, 427, 428, 213, 429, 214, 215, 430, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 223, 431,
	432, 433, 0, 224, 434, 0, 970, 0, 225, 226,
	227, 228, 229, 0, 231, 232, 233, 230, 0, 234,
	0, 235, 236, 0, 846, 237, 238, 0, 0, 0,
	0, 0, 0, 0, 239, 240, 241, 242, 243, 244,
	435, 436, 0, 245, 0, 246, 0, 247, 0, 0,
	248, 249, 250, 0, 251, 0, 252, 253, 0, 437,
	254, 255, 257, 260, 256, 261, 262, 438, 439, 0,
	847, 0, 0, 0, 0, 0, 263, 264, 265, 440,
	266, 267, 0, 268, 0, 269, 0, 0, 848, 270,
	0, 271, 441, 0, 442, 272, 0, 273, 274, 275,
	276, 277, 278, 443, 444, 445, 850, 0, 449, 280,
	0, 0, 0, 0, 279, 281, 288, 0, 849, 282,
	446, 284, 283, 285, 286, 287, 447, 0, 448, 0,
	289, 851, 852, 290, 291, 292, 853, 293, 294, 0,
	0, 295, 296, 297, 0, 299, 298, 0, 300, 450,
	854, 301, 302, 855, 0, 303, 304, 0, 0, 305,
	0, 306, 912, 911, 307, 308, 310, 311, 309, 856,
	312, 313, 315, 314, 0, 0, 857, 0, 451, 452,
	316, 317, 0, 318, 319, 0, 0, 320, 321, 0,
	0, 322, 453, 858, 323, 859, 454, 324, 325, 326,
	327, 328, 329, 330, 0, 331, 455, 332, 456, 333,
	0, 334, 335, 336, 337, 338, 339, 457, 340, 341,
	0, 342, 343, 344, 345, 346, 0, 348, 349, 347,
	350, 351, 352, 353, 0, 354, 860, 355, 356, 357,
	358, 458, 359, 0, 363, 364, 365, 366, 367, 368,
	369, 0, 375, 376, 370, 372, 373, 374, 371, 377,
	378, 0, 379, 360, 361, 380, 861, 381, 459, 382,
	383, 0, 393, 384, 385, 386, 362, 387, 391, 392,
	388, 389, 390, 460, 0, 394, 395, 0, 396, 397,
	398, 399, 400, 258, 401, 259, 402, 0, 461, 462,
	463, 403, 0, 0, 404, 405, 464, 465, 0, 406,
	407, 0, 408, 409, 0, 0, 410, 411, 412, 414,
	0, 415, 0, 413, 416, 417, 418, 466, 467, 468,
	1066, 420, 419, 469, 0, 0, 0, 0, 421, 422,
	470, 423, 424, 425, 0, 0, 0, 205, 206, 207,
	208, 0, 209, 0, 0, 0, 0, 426, 0, 0,
	0, 0, 210, 211, 212, 427, 428, 213, 429, 214,
	215, 430, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 223, 431, 432, 433, 0, 224, 434, 0,
	970, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 846, 237,
	238, 0, 0, 0, 0, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 435, 436, 0, 245, 0, 246,
	0, 247, 0, 0, 248, 249, 250, 0, 251, 0,
	252, 253, 0, 437, 254, 255, 257, 260, 256, 261,
	262, 438, 439, 0, 847, 0, 0, 0, 0, 0,
	263, 264, 265, 440, 266, 267, 0, 268, 0, 269,
	0, 0, 848, 270, 0, 271, 441, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 443, 444, 445,
	850, 0, 449, 280, 0, 0, 0, 0, 279, 281,
	288, 0, 849, 282, 446, 284, 283, 285, 286, 287,
	447, 0, 448, 0, 289, 851, 852, 290, 291, 292,
	853, 293, 294, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 450, 854, 301, 302, 855, 0, 303,
	304, 0, 0, 305, 0, 306, 912, 911, 307, 308,
	310, 311, 309, 856, 312, 313, 315, 314, 0, 0,
	857, 0, 451, 452, 316, 317, 0, 318, 319, 0,
	0, 320, 321, 0, 0, 322, 453, 858, 323, 859,
	454, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	455, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 457, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	860, 355, 356, 357, 358, 458, 359, 0, 363, 364,
	365, 366, 367, 368, 369, 0, 375, 376, 370, 372,
	373, 374, 371, 377, 378, 0, 379, 360, 361, 380,
	861, 381, 459, 382, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 392, 388, 389, 390, 460, 0, 394,
	395, 0, 396, 397, 398, 399, 400, 258, 401, 259,
	402, 0, 461, 462, 463, 403, 0, 0, 404, 405,
	464, 465, 0, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 0, 415, 0, 413, 416, 417,
	418, 466, 467, 468, 0, 420, 419, 469, 604, 0,
	538, 0, 421, 422, 470, 423, 424, 425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 206, 207,
	208, 0, 209, 0, 0, 0, 0, 426, 0, 0,
	0, 0, 210, 211, 212, 427, 428, 213, 429, 214,
	215, 430, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 223, 431, 432, 433, 0, 224, 434, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 0, 237,
	238, 0, 0, 0, 0, 0, 0, 0, 239, 240,
	544, 242, 243, 244, 435, 436, 0, 245, 0, 246,
	0, 247, 0, 0, 248, 249, 250, 0, 251, 0,
	252, 253, 0, 437, 254, 255, 257, 260, 256, 261,
	262, 438, 439, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 440, 266, 267, 0, 268, 0, 269,
	0, 0, 0, 270, 0, 271, 441, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 443, 444, 445,
	0, 0, 449, 280, 0, 0, 0, 0, 279, 281,
	288, 0, 0, 282, 446, 284, 283, 285, 286, 287,
	447, 0, 448, 0, 289, 0, 0, 290, 291, 292,
	0, 293, 294, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 450, 0, 301, 302, 0, 0, 303,
	304, 0, 0, 305, 0, 306, 0, 0, 307, 308,
	310, 311, 309, 0, 312, 313, 315, 314, 0, 0,
	0, 0, 451, 452, 316, 317, 0, 318, 319, 0,
	0, 320, 321, 0, 0, 322, 453, 0, 323, 0,
	454, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	455, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 457, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	0, 355, 356, 357, 358, 458, 359, 0, 363, 364,
	365, 366, 367, 368, 369, 0, 375, 376, 370, 372,
	373, 374, 371, 377, 378, 0, 379, 360, 361, 380,
	0, 381, 459, 382, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 392, 388, 389, 390, 460, 0, 394,
	395, 543, 396, 397, 398, 399, 400, 258, 401, 259,
	402, 0, 461, 462, 463, 403, 0, 0, 404, 405,
	464, 465, 0, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 0, 415, 0, 413, 416, 417,
	418, 466, 467, 468, 0, 420, 419, 469, 537, 0,
	538, 0, 421, 422, 470, 423, 424, 425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 206, 207,
	208, 0, 209, 547, 0, 0, 0, 426, 0, 0,
	0, 0, 210, 211, 212, 427, 428, 213, 429, 214,
	215, 430, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 223, 431, 432, 433, 0, 224, 434, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 0, 237,
	238, 0, 0, 0, 0, 0, 0, 0, 239, 240,
	544, 242, 243, 244, 435, 436, 0, 245, 0, 246,
	0, 247, 0, 0, 248, 249, 250, 0, 251, 0,
	252, 253, 0, 437, 254, 255, 257, 260, 256, 261,
	262, 438, 439, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 440, 266, 267, 0, 268, 0, 269,
	0, 0, 0, 270, 0, 271, 441, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 443, 444, 445,
	0, 0, 449, 280, 0, 0, 0, 0, 279, 281,
	288, 0, 0, 282, 446, 284, 283, 285, 286, 287,
	447, 0, 448, 0, 289, 0, 0, 290, 291, 292,
	0, 293, 294, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 450, 0, 301, 302, 0, 0, 303,
	304, 0, 0, 305, 0, 306, 0, 0, 307, 308,
	310, 311, 309, 0, 312, 313, 315, 314, 0, 0,
	0, 0, 451, 452, 316, 317, 0, 318, 319, 0,
	0, 320, 321, 0, 0, 322, 453, 0, 323, 0,
	454, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	455, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 457, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	0, 355, 356, 357, 358, 458, 359, 0, 363, 364,
	365, 366, 367, 368, 369, 0, 375, 376, 370, 372,
	373, 374, 371, 377, 378, 0, 379, 360, 361, 380,
	0, 381, 459, 382, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 392, 388, 389, 390, 460, 0, 394,
	395, 543, 396, 397, 398, 399, 400, 258, 401, 259,
	402, 0, 461, 462, 463, 403, 0, 0, 404, 405,
	464, 465, 0, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 0, 415, 0, 413, 416, 417,
	418, 466, 467, 468, 538, 420, 419, 469, 0, 0,
	0, 0, 421, 422, 470, 423, 424, 425, 0, 0,
	0, 205, 206, 207, 208, 0, 209, 0, 0, 0,
	0, 426, 0, 547, 0, 0, 210, 211, 212, 427,
	428, 213, 429, 214, 215, 430, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 223, 431, 432, 433,
	0, 224, 434, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 231, 232, 233, 230, 0, 234, 0, 235,
	236, 0, 0, 237, 238, 0, 0, 0, 0, 0,
	0, 0, 239, 240, 544, 242, 243, 244, 435, 436,
	0, 245, 0, 246, 0, 247, 0, 0, 248, 249,
	250, 0, 251, 0, 252, 253, 0, 437, 254, 255,
	257, 260, 256, 261, 262, 438, 439, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 440, 266, 267,
	0, 268, 0, 269, 0, 0, 0, 270, 0, 271,
	441, 0, 442, 272, 0, 273, 274, 275, 276, 277,
	278, 443, 444, 445, 0, 0, 449, 280, 0, 0,
	0, 0, 279, 281, 288, 0, 0, 282, 446, 284,
	283, 285, 286, 287, 447, 0, 448, 0, 289, 0,
	0, 290, 291, 292, 0, 293, 294, 0, 0, 295,
	296, 297, 0, 299, 298, 0, 300, 450, 0, 301,
	302, 0, 0, 303, 304, 0, 0, 305, 0, 306,
	0, 0, 307, 308, 310, 311, 309, 0, 312, 313,
	315, 314, 0, 0, 0, 0, 451, 452, 316, 317,
	0, 318, 319, 0, 0, 320, 321, 0, 0, 322,
	453, 0, 323, 0, 454, 324, 325, 326, 327, 328,
	329, 330, 0, 331, 455, 332, 456, 333, 0, 334,
	335, 336, 337, 338, 339, 457, 340, 341, 0, 342,
	343, 344, 345, 346, 0, 348, 349, 347, 350, 351,
	352, 353, 0, 354, 0, 1692, 356, 357, 358, 458,
	359, 0, 363, 364, 365, 366, 367, 368, 369, 0,
	375, 376, 370, 372, 373, 374, 371, 377, 378, 0,
	379, 360, 361, 380, 0, 381, 459, 382, 383, 0,
	393, 384, 385, 386, 362, 387, 391, 392, 388, 389,
	390, 460, 0, 394, 395, 543, 396, 397, 398, 399,
	400, 258, 401, 259, 402, 0, 461, 462, 463, 403,
	0, 0, 404, 405, 464, 465, 0, 406, 407, 0,
	408, 409, 0, 0, 410, 411, 412, 414, 0, 415,
	0, 413, 416, 417, 418, 466, 467, 468, 538, 420,
	419, 469, 0, 0, 0, 0, 421, 422, 470, 423,
	424, 425, 0, 0, 0, 205, 206, 207, 208, 0,
	209, 0, 0, 0, 0, 426, 0, 547, 0, 0,
	210, 211, 212, 427, 428, 213, 429, 214, 215, 430,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	223, 431, 432, 433, 0, 224, 434, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 231, 232, 233, 230,
	0, 234, 0, 235, 236, 0, 0, 237, 238, 0,
	0, 0, 0, 0, 0, 0, 239, 240, 544, 242,
	243, 244, 435, 436, 0, 245, 0, 246, 0, 247,
	0, 0, 248, 249, 250, 0, 251, 0, 252, 253,
	0, 437, 254, 255, 257, 260, 256, 261, 262, 438,
	439, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	265, 440, 266, 267, 0, 268, 0, 269, 0, 0,
	0, 270, 0, 271, 441, 0, 442, 272, 0, 273,
	274, 275, 276, 277, 278, 443, 444, 445, 0, 0,
	449, 280, 0, 0, 0, 0, 279, 281, 288, 0,
	0, 282, 446, 284, 283, 285, 286, 287, 447, 0,
	448, 0, 289, 0, 0, 290, 291, 292, 0, 293,
	294, 0, 0, 295, 296, 297, 0, 299, 298, 0,
	300, 450, 0, 301, 302, 0, 0, 303, 304, 0,
	0, 305, 0, 306, 0, 0, 307, 308, 310, 311,
	309, 0, 312, 313, 315, 314, 0, 0, 0, 0,
	451, 452, 316, 317, 0, 318, 319, 0, 0, 320,
	321, 0, 0, 322, 453, 0, 323, 0, 454, 324,
	325, 326, 327, 328, 329, 330, 0, 331, 455, 332,
	456, 333, 0, 334, 335, 336, 337, 338, 339, 457,
	340, 341, 0, 342, 343, 344, 345, 346, 0, 348,
	349, 347, 350, 351, 352, 353, 0, 354, 0, 355,
	356, 357, 358, 458, 359, 0, 363, 364, 365, 366,
	367, 368, 369, 0, 375, 376, 370, 372, 373, 374,
	371, 377, 378, 0, 379, 360, 361, 380, 0, 381,
	459, 382, 383, 0, 393, 384, 385, 386, 362, 387,
	391, 392, 388, 389, 390, 460, 0, 394, 395, 543,
	396, 397, 398, 399, 400, 258, 401, 259, 402, 0,
	461, 462, 463, 403, 0, 0, 404, 405, 464, 465,
	0, 406, 407, 0, 408, 409, 0, 0, 410, 411,
	412, 414, 0, 415, 0, 413, 416, 417, 418, 466,
	467, 468, 202, 420, 419, 469, 0, 0, 0, 0,
	421, 422, 470, 423, 424, 425, 0, 0, 0, 205,
	206, 207, 208, 0, 209, 0, 0, 0, 0, 426,
	0, 547, 0, 0, 210, 211, 212, 427, 428, 213,
	429, 214, 215, 430, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 223, 431, 432, 433, 0, 224,
	434, 0, 0, 0, 225, 226, 227, 228, 229, 0,
	231, 232, 233, 230, 0, 234, 0, 235, 236, 0,
	0, 237, 238, 0, 0, 0, 0, 0, 0, 0,
	239, 240, 241, 242, 243, 244, 435, 436, 0, 245,
	0, 246, 0, 247, 0, 0, 248, 249, 250, 0,
	251, 0, 252, 253, 0, 437, 254, 255, 257, 260,
	256, 261, 262, 438, 439, 0, 0, 0, 0, 0,
	0, 0, 263, 264, 265, 440, 266, 267, 0, 268,
	0, 269, 0, 0, 0, 270, 0, 271, 441, 0,
	442, 272, 0, 273, 274, 275, 276, 277, 278, 443,
	444, 445, 0, 0, 449, 280, 0, 0, 0, 0,
	279, 281, 288, 0, 0, 282, 446, 284, 283, 285,
	286, 287, 447, 0, 448, 0, 289, 0, 0, 290,
	291, 292, 0, 293, 294, 0, 0, 295, 296, 297,
	0, 299, 298, 0, 300, 450, 0, 301, 302, 0,
	0, 303, 304, 0, 0, 305, 0, 306, 0, 0,
	307, 308, 310, 311, 309, 0, 312, 313, 315, 314,
	0, 0, 0, 0, 451, 452, 316, 317, 0, 318,
	319, 0, 0, 320, 321, 0, 0, 322, 453, 0,
	323, 0, 454, 324, 325, 326, 327, 328, 329, 330,
	0, 331, 455, 332, 456, 333, 0, 334, 335, 336,
	337, 338, 339, 457, 340, 341, 0, 342, 343, 344,
	345, 346, 0, 348, 349, 347, 350, 351, 352, 353,
	0, 354, 0, 355, 356, 357, 358, 458, 359, 0,
	363, 364, 365, 366, 367, 368, 369, 0, 375, 376,
	370, 372, 373, 374, 371, 377, 378, 0, 379, 360,
	361, 380, 0, 381, 459, 382, 383, 0, 393, 384,
	385, 386, 362, 387, 391, 392, 388, 389, 390, 460,
	0, 394, 395, 0, 396, 397, 398, 399, 400, 258,
	401, 259, 402, 0, 461, 462, 463, 403, 0, 0,
	404, 405, 464, 465, 0, 406, 407, 0, 408, 409,
	0, 0, 410, 411, 412, 414, 0, 415, 0, 413,
	416, 417, 418, 466, 467, 468, 202, 420, 419, 469,
	0, 0, 0, 0, 421, 422, 470, 423, 424, 425,
	0, 0, 0, 205, 206, 207, 208, 0, 209, 0,
	0, 0, 0, 426, 0, 547, 0, 0, 210, 211,
	212, 427, 428, 213, 429, 214, 215, 430, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 223, 431,
	432, 433, 2005, 224, 434, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 231, 232, 233, 230, 2002, 234,
	0, 235, 236, 0, 0, 237, 238, 0, 0, 0,
	0, 0, 0, 0, 239, 240, 241, 242, 243, 244,
	435, 436, 0, 245, 0, 246, 0, 247, 0, 0,
	248, 249, 250, 0, 251, 0, 252, 253, 0, 437,
	254, 255, 257, 260, 256, 261, 262, 438, 439, 0,
	2076, 0, 0, 0, 0, 0, 263, 264, 265, 440,
	266, 267, 0, 268, 0, 269, 2008, 0, 0, 270,
	0, 271, 441, 0, 442, 272, 0, 273, 274, 275,
	276, 277, 278, 443, 444, 445, 0, 0, 449, 280,
	0, 0, 0, 2074, 279, 281, 288, 0, 0, 282,
	446, 284, 283, 285, 286, 287, 447, 0, 448, 0,
	2073, 0, 0, 290, 291, 292, 0, 293, 294, 0,
	0, 295, 296, 297, 0, 299, 298, 0, 300, 450,
	0, 301, 302, 0, 0, 303, 304, 0, 0, 305,
	0, 306, 0, 0, 307, 308, 310, 311, 309, 0,
	312, 313, 315, 314, 0, 0, 0, 0, 451, 452,
	316, 317, 0, 318, 319, 0, 0, 320, 321, 0,
	0, 322, 453, 0, 323, 0, 454, 324, 325, 326,
	327, 328, 329, 330, 0, 331, 455, 332, 456, 333,
	2007, 334, 335, 336, 337, 338, 339, 457, 340, 341,
	0, 342, 343, 344, 345, 346, 0, 348, 349, 347,
	350, 351, 352, 353, 0, 354, 0, 355, 356, 357,
	358, 458, 359, 0, 363, 364, 365, 366, 367, 368,
	369, 0, 375, 376, 370, 372, 373, 374, 371, 377,
	378, 0, 379, 360, 361, 380, 0, 381, 459, 382,
	383, 0, 393, 384, 385, 386, 362, 387, 391, 392,
	388, 389, 390, 460, 0, 394, 395, 0, 396, 397,
	398, 399, 400, 258, 401, 259, 402, 0, 461, 462,
	463, 403, 0, 0, 404, 405, 464, 465, 0, 406,
	407, 0, 408, 409, 0, 2075, 410, 411, 412, 414,
	0, 415, 0, 413, 416, 417, 418, 466, 467, 468,
	202, 420, 419, 469, 0, 0, 0, 0, 421, 422,
	470, 423, 424, 425, 0, 0, 0, 205, 206, 207,
	208, 0, 209, 0, 0, 0, 0, 426, 0, 0,
	0, 0, 210, 211, 212, 427, 428, 213, 429, 214,
	215, 430, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 223, 431, 432, 433, 2005, 224, 434, 0,
	0, 1999, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 2002, 234, 0, 235, 236, 0, 0, 237,
	238, 0, 0, 0, 0, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 435, 436, 0, 245, 0, 246,
	0, 247, 0, 0, 248, 249, 250, 0, 251, 0,
	252, 253, 0, 437, 254, 255, 257, 260, 256, 261,
	262, 438, 439, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 440, 266, 267, 0, 268, 0, 269,
	2008, 0, 0, 270, 0, 271, 441, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 1998, 444, 445,
	0, 0, 449, 280, 0, 0, 0, 0, 279, 281,
	288, 0, 0, 282, 446, 284, 283, 285, 286, 287,
	447, 0, 448, 0, 289, 0, 0, 290, 291, 292,
	0, 293, 294, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 450, 0, 301, 302, 0, 0, 303,
	304, 0, 0, 305, 0, 306, 0, 0, 307, 308,
	310, 311, 309, 0, 312, 313, 315, 314, 0, 0,
	0, 0, 451, 452, 316, 317, 0, 318, 319, 0,
	0, 320, 321, 0, 0, 322, 453, 0, 323, 0,
	454, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	455, 332, 456, 333, 2007, 334, 335, 336, 337, 338,
	339, 457, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	0, 355, 356, 357, 358, 458, 359, 0, 363, 364,
	365, 366, 367, 368, 369, 0, 375, 376, 370, 372,
	373, 374, 371, 377, 378, 0, 379, 360, 361, 380,
	0, 381, 459, 382, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 392, 388, 389, 390, 460, 0, 394,
	395, 0, 396, 397, 398, 399, 400, 258, 401, 259,
	402, 0, 461, 462, 463, 403, 0, 0, 404, 405,
	464, 465, 0, 406, 407, 0, 408, 409, 0, 2006,
	410, 411, 412, 414, 0, 415, 0, 413, 416, 417,
	418, 466, 467, 468, 0, 420, 419, 469, 501, 0,
	202, 0, 421, 422, 470, 423, 424, 425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 206, 207,
	500, 490, 209, 0, 0, 0, 0, 426, 0, 0,
	0, 0, 210, 211, 212, 427, 428, 213, 429, 214,
	215, 430, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 223, 431, 432, 433, 0, 224, 434, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 493, 0, 237,
	238, 0, 0, 0, 0, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 435, 436, 0, 245, 0, 246,
	0, 247, 0, 0, 248, 249, 250, 0, 251, 0,
	252, 253, 0, 437, 254, 255, 257, 260, 256, 261,
	262, 438, 439, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 440, 266, 267, 0, 268, 0, 269,
	0, 0, 0, 270, 494, 271, 441, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 443, 444, 445,
	0, 0, 449, 280, 0, 0, 0, 0, 279, 281,
	288, 0, 0, 282, 446, 284, 283, 285, 286, 287,
	447, 0, 448, 0, 289, 0, 0, 290, 291, 292,
	0, 293, 294, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 450, 0, 301, 302, 0, 0, 303,
	304, 0, 0, 305, 0, 306, 0, 0, 307, 308,
	310, 311, 309, 0, 312, 313, 315, 314, 0, 0,
	0, 0, 451, 452, 316, 317, 0, 318, 319, 0,
	0, 320, 321, 0, 0, 322, 453, 0, 323, 0,
	454, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	455, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 457, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	0, 355, 356, 357, 358, 458, 359, 0, 363, 364,
	365, 366, 367, 368, 369, 495, 375, 376, 370, 372,
	373, 374, 371, 377, 378, 0, 379, 360, 361, 380,
	0, 381, 459, 382, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 392, 388, 389, 390, 460, 0, 394,
	395, 0, 396, 397, 398, 399, 400, 258, 401, 259,
	402, 0, 461, 462, 463, 403, 0, 0, 404, 405,
	464, 465, 0, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 0, 415, 0, 413, 416, 417,
	418, 466, 467, 468, 0, 420, 419, 469, 489, 0,
	202, 0, 421, 422, 470, 423, 424, 425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 206, 207,
	208, 490, 209, 0, 0, 0, 0, 426, 0, 0,
	0, 0, 210, 211, 212, 427, 428, 213, 429, 214,
	215, 430, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 223, 431, 432, 433, 0, 224, 434, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 493, 0, 237,
	238, 0, 0, 0, 0, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 435, 436, 0, 245, 0, 246,
	0, 247, 0, 0, 248, 249, 250, 0, 251, 0,
	252, 253, 0, 437, 254, 255, 257, 260, 256, 261,
	262, 438, 439, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 440, 266, 267, 0, 268, 0, 269,
	0, 0, 0, 270, 494, 271, 441, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 443, 444, 445,
	0, 0, 449, 280, 0, 0, 0, 0, 279, 281,
	288, 0, 0, 282, 446, 284, 283, 285, 286, 287,
	447, 0, 448, 0, 289, 0, 0, 290, 291, 292,
	0, 293, 294, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 450, 0, 301, 302, 0, 0, 303,
	304, 0, 0, 305, 0, 306, 0, 0, 307, 308,
	310, 311, 309, 0, 312, 313, 315, 314, 0, 0,
	0, 0, 451, 452, 316, 317, 0, 318, 319, 0,
	0, 320, 321, 0, 0, 322, 453, 0, 323, 0,
	454, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	455, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 457, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	0, 355, 356, 357, 358, 458, 359, 0, 363, 364,
	365, 366, 367, 368, 369, 495, 375, 376, 370, 372,
	373, 374, 371, 377, 378, 0, 379, 360, 361, 380,
	0, 381, 459, 382, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 392, 388, 389, 390, 460, 0, 394,
	395, 0, 396, 397, 398, 399, 400, 258, 401, 259,
	402, 0, 461, 462, 463, 403, 0, 0, 404, 405,
	464, 465, 0, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 0, 415, 0, 413, 416, 417,
	418, 466, 467, 468, 202, 420, 419, 469, 0, 0,
	0, 0, 421, 422, 470, 423, 424, 425, 0, 0,
	0, 205, 206, 207, 208, 0, 209, 0, 0, 0,
	0, 426, 0, 0, 0, 0, 210, 211, 212, 427,
	428, 213, 429, 214, 215, 430, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 223, 431, 432, 433,
	0, 224, 434, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 231, 232, 233, 230, 0, 234, 0, 235,
	236, 493, 0, 237, 238, 0, 0, 0, 0, 0,
	0, 0, 239, 240, 241, 242, 243, 244, 435, 436,
	0, 245, 0, 246, 0, 247, 0, 0, 248, 249,
	250, 0, 251, 0, 252, 253, 0, 437, 254, 255,
	257, 260, 256, 261, 262, 438, 439, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 440, 266, 267,
	0, 268, 0, 269, 0, 0, 0, 270, 494, 271,
	441, 0, 442, 272, 0, 273, 274, 275, 276, 277,
	278, 443, 444, 445, 0, 0, 449, 280, 0, 0,
	0, 0, 279, 281, 288, 0, 0, 282, 446, 284,
	283, 285, 286, 287, 447, 0, 448, 0, 289, 0,
	0, 290, 291, 292, 0, 293, 294, 0, 0, 295,
	296, 297, 0, 299, 298, 0, 300, 450, 0, 301,
	302, 0, 0, 303, 304, 0, 0, 305, 0, 306,
	0, 0, 307, 308, 310, 311, 309, 0, 312, 313,
	315, 314, 0, 0, 0, 0, 451, 452, 316, 317,
	0, 318, 319, 0, 0, 320, 321, 0, 0, 322,
	453, 0, 323, 0, 454, 324, 325, 326, 327, 328,
	329, 330, 0, 331, 455, 332, 456, 333, 0, 334,
	335, 336, 337, 338, 339, 457, 340, 341, 0, 342,
	343, 344, 345, 346, 0, 348, 349, 347, 350, 351,
	352, 353, 0, 354, 0, 355, 356, 357, 358, 458,
	359, 0, 363, 364, 365, 366, 367, 368, 369, 495,
	375, 376, 370, 372, 373, 374, 371, 377, 378, 0,
	379, 360, 361, 380, 0, 381, 459, 382, 383, 0,
	393, 384, 385, 386, 362, 387, 391, 392, 388, 389,
	390, 460, 0, 394, 395, 0, 396, 397, 398, 399,
	400, 258, 401, 259, 402, 0, 461, 462, 463, 403,
	0, 0, 404, 405, 464, 465, 0, 406, 407, 0,
	408, 409, 0, 0, 410, 411, 412, 414, 0, 415,
	0, 413, 416, 417, 418, 466, 467, 468, 0, 420,
	419, 469, 1237, 0, 202, 0, 421, 422, 470, 423,
	424, 425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 206, 207, 208, 0, 209, 0, 0, 0,
	0, 426, 0, 0, 0, 0, 210, 211, 212, 427,
	428, 213, 429, 214, 215, 430, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 223, 431, 432, 433,
	0, 224, 434, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 231, 232, 233, 230, 0, 234, 0, 235,
	236, 0, 0, 237, 238, 0, 0, 0, 0, 0,
	0, 0, 239, 240, 241, 242, 243, 244, 435, 436,
	0, 245, 0, 246, 0, 247, 0, 0, 248, 249,
	250, 0, 251, 0, 252, 253, 0, 437, 254, 255,
	257, 260, 256, 261, 262, 438, 439, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 440, 266, 267,
	0, 268, 0, 269, 0, 0, 0, 270, 0, 271,
	441, 0, 442, 272, 0, 273, 274, 275, 276, 277,
	278, 443, 444, 445, 0, 0, 449, 280, 0, 0,
	0, 0, 279, 281, 288, 0, 0, 282, 446, 284,
	283, 285, 286, 287, 447, 0, 448, 0, 289, 0,
	0, 290, 291, 292, 0, 293, 294, 0, 0, 295,
	296, 297, 0, 299, 298, 0, 300, 450, 0, 301,
	302, 0, 0, 303, 304, 0, 0, 305, 0, 306,
	0, 0, 307, 308, 310, 311, 309, 0, 312, 313,
	315, 314, 0, 0, 0, 0, 451, 452, 316, 317,
	0, 318, 319, 0, 0, 320, 321, 0, 0, 322,
	453, 0, 323, 0, 454, 324, 325, 326, 327, 328,
	329, 330, 0, 331, 455, 332, 456, 333, 0, 334,
	335, 336, 337, 338, 339, 457, 340, 341, 0, 342,
	343, 344, 345, 346, 0, 348, 349, 347, 350, 351,
	352, 353, 0, 354, 0, 355, 356, 357, 358, 458,
	359, 0, 363, 364, 365, 366, 367, 368, 369, 0,
	1240, 376, 370, 372, 373, 374, 371, 377, 378, 0,
	379, 360, 361, 380, 0, 381, 459, 382, 383, 0,
	393, 384, 385, 386, 362, 387, 391, 392, 388, 389,
	390, 460, 0, 394, 395, 1238, 396, 397, 398, 399,
	400, 258, 401, 259, 402, 0, 461, 462, 463, 403,
	0, 0, 404, 405, 464, 465, 0, 406, 407, 0,
	408, 409, 0, 0, 410, 411, 412, 414, 0, 415,
	0, 413, 416, 417, 418, 466, 467, 468, 0, 1239,
	419, 469, 1139, 0, 202, 0, 421, 422, 470, 423,
	424, 425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 206, 207, 208, 0, 209, 0, 0, 0,
	0, 426, 0, 0, 0, 0, 210, 211, 212, 427,
	428, 213, 429, 214, 215, 430, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 223, 431, 432, 433,
	0, 224, 434, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 231, 232, 233, 230, 0, 234, 0, 235,
	236, 0, 0, 237, 238, 0, 0, 0, 0, 0,
	0, 0, 239, 240, 241, 242, 243, 244, 435, 436,
	0, 245, 0, 246, 0, 247, 0, 0, 248, 249,
	250, 0, 251, 0, 252, 253, 0, 437, 254, 255,
	257, 260, 256, 261, 262, 438, 439, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 440, 266, 267,
	0, 268, 0, 269, 0, 0, 0, 270, 0, 271,
	441, 0, 442, 272, 0, 273, 274, 275, 276, 277,
	278, 443, 444, 445, 0, 0, 449, 280, 0, 0,
	0, 0, 279, 281, 288, 0, 0, 282, 446, 284,
	283, 285, 286, 287, 447, 0, 448, 0, 289, 0,
	0, 290, 291, 292, 0, 293, 294, 0, 0, 295,
	296, 297, 0, 299, 298, 0, 300, 450, 0, 301,
	302, 0, 0, 303, 304, 0, 0, 305, 0, 306,
	0, 0, 307, 308, 310, 311, 309, 0, 312, 313,
	315, 314, 0, 0, 0, 0, 451, 452, 316, 317,
	0, 318, 319, 0, 902, 320, 321, 0, 0, 322,
	453, 0, 323, 0, 454, 324, 325, 326, 327, 328,
	329, 330, 0, 331, 455, 332, 456, 333, 0, 334,
	335, 336, 337, 338, 339, 457, 340, 341, 0, 342,
	343, 344, 345, 346, 0, 348, 349, 347, 350, 351,
	352, 353, 0, 354, 0, 355, 356, 357, 358, 458,
	359, 0, 363, 364, 365, 366, 367, 368, 369, 0,
	375, 376, 370, 372, 373, 374, 371, 377, 378, 0,
	379, 360, 361, 380, 0, 381, 459, 382, 383, 0,
	393, 384, 385, 386, 362, 387, 391, 392, 388, 389,
	390, 460, 0, 394, 395, 0, 396, 397, 398, 399,
	400, 258, 401, 259, 402, 0, 461, 462, 463, 403,
	0, 0, 404, 405, 464, 465, 0, 406, 407, 0,
	408, 409, 0, 0, 410, 411, 412, 414, 0, 415,
	0, 413, 416, 417, 418, 466, 467, 468, 0, 420,
	419, 469, 1054, 0, 202, 0, 421, 422, 470, 423,
	424, 425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 206, 207, 208, 0, 209, 0, 0, 0,
	0, 426, 0, 0, 0, 0, 210, 211, 212, 427,
	428, 213, 429, 214, 215, 430, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 223, 431, 432, 433,
	0, 224, 434, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 231, 232, 233, 230, 0, 234, 0, 235,
	236, 0, 0, 237, 238, 0, 0, 0, 0, 0,
	0, 0, 239, 240, 241, 242, 243, 244, 435, 436,
	0, 245, 0, 246, 0, 247, 0, 0, 248, 249,
	250, 0, 251, 0, 252, 253, 0, 437, 254, 255,
	257, 260, 256, 261, 262, 438, 439, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 440, 266, 267,
	0, 268, 0, 269, 0, 0, 0, 270, 0, 271,
	441, 0, 442, 272, 0, 273, 274, 275, 276, 277,
	278, 1056, 444, 445, 0, 0, 449, 280, 0, 0,
	0, 0, 279, 281, 288, 0, 0, 282, 446, 284,
	283, 285, 286, 287, 447, 0, 448, 0, 289, 0,
	0, 290, 291, 292, 0, 293, 294, 0, 0, 295,
	296, 297, 0, 299, 298, 0, 300, 450, 0, 301,
	302, 0, 0, 303, 304, 0, 0, 305, 0, 306,
	0, 0, 307, 308, 310, 311, 309, 0, 312, 313,
	315, 314, 0, 0, 0, 0, 451, 452, 316, 317,
	0, 318, 319, 0, 902, 320, 321, 0, 0, 322,
	453, 0, 323, 0, 454, 324, 325, 326, 327, 328,
	329, 330, 0, 331, 455, 332, 456, 333, 0, 334,
	335, 336, 337, 338, 339, 457, 340, 341, 0, 342,
	343, 344, 345, 346, 0, 348, 349, 347, 350, 351,
	352, 353, 0, 354, 0, 355, 356, 357, 358, 458,
	359, 0, 363, 364, 365, 366, 367, 368, 369, 0,
	375, 376, 370, 372, 373, 374, 371, 377, 378, 0,
	379, 360, 361, 380, 0, 381, 459, 382, 383, 0,
	393, 384, 385, 386, 362, 387, 391, 392, 388, 389,
	390, 460, 0, 394, 395, 0, 396, 397, 398, 399,
	400, 258, 401, 259, 402, 0, 461, 462, 463, 403,
	0, 0, 404, 405, 464, 465, 0, 406, 407, 0,
	408, 409, 0, 0, 410, 411, 412, 414, 0, 415,
	0, 413, 416, 417, 418, 466, 467, 468, 0, 420,
	419, 469, 1051, 0, 202, 0, 421, 422, 470, 423,
	424, 425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 206, 207, 208, 0, 209, 0, 0, 0,
	0, 426, 0, 0, 0, 0, 210, 211, 212, 427,
	428, 213, 429, 214, 215, 430, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 223, 431, 432, 433,
	0, 224, 434, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 231, 232, 233, 230, 0, 234, 0, 235,
	236, 0, 0, 237, 238, 0, 0, 0, 0, 0,
	0, 0, 239, 240, 241, 242, 243, 244, 435, 436,
	0, 245, 0, 246, 0, 247, 0, 0, 248, 249,
	250, 0, 251, 0, 252, 253, 0, 437, 254, 255,
	257, 260, 256, 261, 262, 438, 439, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 440, 266, 267,
	0, 268, 0, 269, 0, 0, 0, 270, 0, 271,
	441, 0, 442, 272, 0, 273, 274, 275, 276, 277,
	278, 1053, 444, 445, 0, 0, 449, 280, 0, 0,
	0, 0, 279, 281, 288, 0, 0, 282, 446, 284,
	283, 285, 286, 287, 447, 0, 448, 0, 289, 0,
	0, 290, 291, 292, 0, 293, 294, 0, 0, 295,
	296, 297, 0, 299, 298, 0, 300, 450, 0, 301,
	302, 0, 0, 303, 304, 0, 0, 305, 0, 306,
	0, 0, 307, 308, 310, 311, 309, 0, 312, 313,
	315, 314, 0, 0, 0, 0, 451, 452, 316, 317,
	0, 318, 319, 0, 902, 320, 321, 0, 0, 322,
	453, 0, 323, 0, 454, 324, 325, 326, 327, 328,
	329, 330, 0, 331, 455, 332, 456, 333, 0, 334,
	335, 336, 337, 338, 339, 457, 340, 341, 0, 342,
	343, 344, 345, 346, 0, 348, 349, 347, 350, 351,
	352, 353, 0, 354, 0, 355, 356, 357, 358, 458,
	359, 0, 363, 364, 365, 366, 367, 368, 369, 0,
	375, 376, 370, 372, 373, 374, 371, 377, 378, 0,
	379, 360, 361, 380, 0, 381, 459, 382, 383, 0,
	393, 384, 385, 386, 362, 387, 391, 392, 388, 389,
	390, 460, 0, 394, 395, 0, 396, 397, 398, 399,
	400, 258, 401, 259, 402, 0, 461, 462, 463, 403,
	0, 0, 404, 405, 464, 465, 0, 406, 407, 0,
	408, 409, 0, 0, 410, 411, 412, 414, 0, 415,
	0, 413, 416, 417, 418, 466, 467, 468, 0, 420,
	419, 469, 958, 0, 202, 0, 421, 422, 470, 423,
	424, 425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 206, 207, 208, 0, 209, 0, 0, 0,
	0, 426, 0, 0, 0, 0, 210, 211, 212, 427,
	428, 213, 429, 214, 215, 430, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 223, 431, 432, 433,
	0, 224, 434, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 231, 232, 233, 230, 0, 234, 0, 235,
	236, 0, 0, 237, 238, 0, 0, 0, 0, 0,
	0, 0, 239, 240, 241, 242, 243, 244, 435, 436,
	0, 245, 0, 246, 0, 247, 0, 0, 248, 249,
	250, 0, 251, 0, 252, 253, 0, 437, 254, 255,
	257, 260, 256, 261, 262, 438, 439, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 440, 266, 267,
	0, 268, 0, 269, 0, 0, 0, 270, 0, 271,
	441, 0, 442, 272, 0, 273, 274, 275, 276, 277,
	278, 960, 444, 445, 0, 0, 449, 280, 0, 0,
	0, 0, 279, 281, 288, 0, 0, 282, 446, 284,
	283, 285, 286, 287, 447, 0, 448, 0, 289, 0,
	0, 290, 291, 292, 0, 293, 294, 0, 0, 295,
	296, 297, 0, 299, 298, 0, 300, 450, 0, 301,
	302, 0, 0, 303, 304, 0, 0, 305, 0, 306,
	0, 0, 307, 308, 310, 311, 309, 0, 312, 313,
	315, 314, 0, 0, 0, 0, 451, 452, 316, 317,
	0, 318, 319, 0, 902, 320, 321, 0, 0, 322,
	453, 0, 323, 0, 454, 324, 325, 326, 327, 328,
	329, 330, 0, 331, 455, 332, 456, 333, 0, 334,
	335, 336, 337, 338, 339, 457, 340, 341, 0, 342,
	343, 344, 345, 346, 0, 348, 349, 347, 350, 351,
	352, 353, 0, 354, 0, 355, 356, 357, 358, 458,
	359, 0, 363, 364, 365, 366, 367, 368, 369, 0,
	375, 376, 370, 372, 373, 374, 371, 377, 378, 0,
	379, 360, 361, 380, 0, 381, 459, 382, 383, 0,
	393, 384, 385, 386, 362, 387, 391, 392, 388, 389,
	390, 460, 0, 394, 395, 0, 396, 397, 398, 399,
	400, 258, 401, 259, 402, 0, 461, 462, 463, 403,
	0, 0, 404, 405, 464, 465, 0, 406, 407, 0,
	408, 409, 0, 0, 410, 411, 412, 414, 0, 415,
	0, 413, 416, 417, 418, 466, 467, 468, 0, 420,
	419, 469, 596, 0, 202, 0, 421, 422, 470, 423,
	424, 425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 206, 207, 208, 0, 209, 0, 0, 0,
	0, 426, 0, 0, 0, 0, 210, 211, 212, 427,
	428, 213, 429, 214, 215, 430, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 223, 431, 432, 433,
	0, 224, 434, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 231, 232, 233, 230, 0, 234, 0, 235,
	236, 0, 0, 237, 238, 0, 0, 0, 0, 0,
	0, 0, 239, 240, 241, 242, 243, 244, 435, 436,
	0, 245, 0, 246, 0, 247, 0, 0, 248, 249,
	250, 0, 251, 0, 252, 253, 0, 437, 254, 255,
	257, 260, 256, 261, 262, 438, 439, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 440, 266, 267,
	0, 268, 0, 269, 0, 0, 0, 270, 0, 271,
	441, 0, 442, 272, 0, 273, 274, 275, 276, 277,
	278, 443, 444, 445, 0, 0, 449, 280, 0, 0,
	0, 0, 279, 281, 288, 0, 0, 282, 446, 284,
	283, 285, 286, 287, 447, 0, 448, 0, 289, 0,
	0, 290, 291, 292, 0, 293, 294, 0, 0, 295,
	296, 297, 0, 299, 298, 0, 300, 450, 0, 301,
	302, 0, 0, 303, 304, 0, 0, 305, 0, 306,
	0, 0, 307, 308, 310, 311, 309, 0, 312, 313,
	315, 314, 0, 0, 0, 0, 451, 452, 316, 317,
	0, 318, 319, 0, 0, 320, 321, 0, 0, 322,
	453, 0, 323, 0, 454, 324, 325, 326, 327, 328,
	329, 330, 0, 331, 455, 332, 456, 333, 0, 334,
	335, 336, 337, 338, 339, 457, 340, 341, 0, 342,
	343, 344, 345, 346, 0, 348, 349, 347, 350, 351,
	352, 353, 0, 354, 0, 355, 356, 357, 358, 458,
	359, 0, 363, 364, 365, 366, 367, 368, 369, 0,
	375, 376, 370, 372, 373, 374, 371, 377, 378, 0,
	379, 360, 361, 380, 0, 381, 459, 382, 383, 0,
	393, 384, 385, 386, 362, 387, 391, 392, 388, 389,
	390, 460, 0, 394, 395, 595, 396, 397, 398, 399,
	400, 258, 401, 259, 402, 0, 461, 462, 463, 403,
	0, 0, 404, 405, 464, 465, 0, 406, 407, 0,
	408, 409, 0, 0, 410, 411, 412, 414, 0, 415,
	0, 413, 416, 417, 418, 466, 467, 468, 0, 420,
	419, 469, 478, 0, 202, 0, 421, 422, 470, 423,
	424, 425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 206, 207, 208, 477, 209, 0, 0, 0,
	0, 426, 0, 0, 0, 0, 210, 211, 212, 427,
	428, 213, 429, 214, 215, 430, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 223, 431, 432, 433,
	0, 224, 434, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 231, 232, 233, 230, 0, 234, 0, 235,
	236, 0, 0, 237, 238, 0, 0, 0, 0, 0,
	0, 0, 239, 240, 241, 242, 243, 244, 435, 436,
	0, 245, 0, 246, 0, 247, 0, 0, 248, 249,
	250, 0, 251, 0, 252, 253, 0, 437, 254, 255,
	257, 260, 256, 261, 262, 438, 439, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 440, 266, 267,
	0, 268, 0, 269, 0, 0, 0, 270, 0, 271,
	441, 0, 442, 272, 0, 273, 274, 275, 276, 277,
	278, 443, 444, 445, 0, 0, 449, 280, 0, 0,
	0, 0, 279, 281, 288, 0, 0, 282, 446, 284,
	283, 285, 286, 287, 447, 0, 448, 0, 289, 0,
	0, 290, 291, 292, 0, 293, 294, 0, 0, 295,
	296, 297, 0, 299, 298, 0, 300, 450, 0, 301,
	302, 0, 0, 303, 304, 0, 0, 305, 0, 306,
	0, 0, 307, 308, 310, 311, 309, 0, 312, 313,
	315, 314, 0, 0, 0, 0, 451, 452, 316, 317,
	0, 318, 319, 0, 0, 320, 321, 0, 0, 322,
	453, 0, 323, 0, 454, 324, 325, 326, 327, 328,
	329, 330, 0, 331, 455, 332, 456, 476, 0, 334,
	335, 336, 337, 338, 339, 457, 340, 341, 0, 342,
	343, 344, 345, 346, 0, 348, 349, 347, 350, 351,
	352, 353, 0, 354, 0, 355, 356, 357, 358, 458,
	359, 0, 363, 364, 365, 366, 367, 368, 369, 0,
	375, 376, 370, 372, 373, 374, 371, 377, 378, 0,
	379, 360, 361, 380, 0, 381, 459, 382, 383, 0,
	393, 384, 385, 386, 362, 387, 391, 392, 388, 389,
	390, 460, 0, 394, 395, 0, 396, 397, 398, 399,
	400, 258, 401, 259, 402, 0, 461, 462, 463, 403,
	0, 0, 404, 405, 464, 465, 0, 406, 407, 0,
	408, 409, 0, 0, 410, 411, 412, 414, 0, 415,
	0, 413, 416, 417, 418, 466, 467, 468, 202, 420,
	419, 469, 0, 0, 0, 0, 421, 422, 470, 423,
	424, 425, 0, 0, 0, 205, 206, 207, 208, 0,
	209, 0, 0, 0, 0, 426, 0, 1943, 0, 0,
	210, 211, 212, 427, 428, 213, 429, 214, 215, 430,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	223, 431, 432, 433, 0, 224, 434, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 231, 232, 233, 230,
	0, 234, 0, 235, 236, 0, 0, 237, 238, 0,
	0, 0, 0, 0, 0, 0, 239, 240, 241, 242,
	243, 244, 435, 436, 0, 245, 0, 246, 0, 247,
	0, 0, 248, 249, 250, 0, 251, 0, 252, 253,
	0, 437, 254, 255, 257, 260, 256, 261, 262, 438,
	439, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	265, 440, 266, 267, 0, 268, 0, 269, 0, 0,
	0, 270, 0, 271, 441, 0, 442, 272, 0, 273,
	274, 275, 276, 277, 278, 443, 444, 445, 0, 0,
	449, 280, 0, 0, 0, 0, 279, 281, 288, 0,
	0, 282, 446, 284, 283, 285, 286, 287, 447, 0,
	448, 0, 289, 0, 0, 290, 291, 292, 0, 293,
	294, 0, 0, 295, 296, 297, 0, 299, 298, 0,
	300, 450, 0, 301, 302, 0, 0, 303, 304, 0,
	0, 305, 0, 306, 0, 0, 307, 308, 310, 311,
	309, 0, 312, 313, 315, 314, 0, 0, 0, 0,
	451, 452, 316, 317, 0, 318, 319, 0, 0, 320,
	321, 0, 0, 322, 453, 0, 323, 0, 454, 324,
	325, 326, 327, 328, 329, 330, 0, 331, 455, 332,
	456, 333, 0, 334, 335, 336, 337, 338, 339, 457,
	340, 341, 0, 342, 343, 344, 345, 346, 0, 348,
	349, 347, 350, 351, 352, 353, 0, 354, 0, 355,
	356, 357, 358, 458, 359, 0, 363, 364, 365, 366,
	367, 368, 369, 0, 375, 376, 370, 372, 373, 374,
	371, 377, 378, 0, 379, 360, 361, 380, 0, 381,
	459, 382, 383, 0, 393, 384, 385, 386, 362, 387,
	391, 392, 388, 389, 390, 460, 0, 394, 395, 0,
	396, 397, 398, 399, 400, 258, 401, 259, 402, 0,
	461, 462, 463, 403, 0, 0, 404, 405, 464, 465,
	0, 406, 407, 0, 408, 409, 0, 0, 410, 411,
	412, 414, 0, 415, 0, 413, 416, 417, 418, 466,
	467, 468, 0, 420, 419, 469, 202, 2133, 0, 0,
	421, 422, 470, 423, 424, 425, 0, 0, 0, 0,
	0, 0, 0, 205, 206, 207, 208, 0, 209, 0,
	0, 0, 0, 426, 0, 0, 0, 0, 210, 211,
	212, 427, 428, 213, 429, 214, 215, 430, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 223, 431,
	432, 433, 0, 224, 434, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 231, 232, 233, 230, 0, 234,
	0, 235, 236, 0, 0, 237, 238, 0, 0, 0,
	0, 0, 0, 0, 239, 240, 241, 242, 243, 244,
	435, 436, 0, 245, 0, 246, 0, 247, 0, 0,
	248, 249, 250, 0, 251, 0, 252, 253, 0, 437,
	254, 255, 257, 260, 256, 261, 262, 438, 439, 0,
	0, 0, 0, 0, 0, 0, 263, 264, 265, 440,
	266, 267, 0, 268, 0, 269, 0, 0, 0, 270,
	0, 271, 441, 0, 442, 272, 0, 273, 274, 275,
	276, 277, 278, 443, 444, 445, 0, 0, 449, 280,
	0, 0, 0, 0, 279, 281, 288, 0, 0, 282,
	446, 284, 283, 285, 286, 287, 447, 0, 448, 0,
	289, 0, 0, 290, 291, 292, 0, 293, 294, 0,
	0, 295, 296, 297, 0, 299, 298, 0, 300, 450,
	0, 301, 302, 0, 0, 303, 304, 0, 0, 305,
	0, 306, 0, 0, 307, 308, 310, 311, 309, 0,
	312, 313, 315, 314, 0, 0, 0, 0, 451, 452,
	316, 317, 0, 318, 319, 0, 0, 320, 321, 0,
	0, 322, 453, 0, 323, 0, 454, 324, 325, 326,
	327, 328, 329, 330, 0, 331, 455, 332, 456, 333,
	0, 334, 335, 336, 337, 338, 339, 457, 340, 341,
	0, 342, 343, 344, 345, 346, 0, 348, 349, 347,
	350, 351, 352, 353, 0, 354, 0, 355, 356, 357,
	358, 458, 359, 0, 363, 364, 365, 366, 367, 368,
	369, 0, 375, 376, 370, 372, 373, 374, 371, 377,
	378, 0, 379, 360, 361, 380, 0, 381, 459, 382,
	383, 0, 393, 384, 385, 386, 362, 387, 391, 392,
	388, 389, 390, 460, 0, 394, 395, 0, 396, 397,
	398, 399, 400, 258, 401, 259, 402, 0, 461, 462,
	463, 403, 0, 0, 404, 405, 464, 465, 0, 406,
	407, 0, 408, 409, 0, 0, 410, 411, 412, 414,
	0, 415, 0, 413, 416, 417, 418, 466, 467, 468,
	202, 420, 419, 469, 0, 0, 0, 0, 421, 422,
	470, 423, 424, 425, 0, 0, 0, 205, 206, 207,
	208, 0, 209, 0, 0, 0, 0, 426, 0, 0,
	0, 0, 210, 211, 212, 427, 428, 213, 429, 214,
	215, 430, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 223, 431, 432, 433, 0, 224, 434, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 0, 237,
	238, 0, 0, 0, 0, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 435, 436, 2664, 245, 0, 246,
	0, 247, 0, 0, 248, 249, 250, 0, 251, 0,
	252, 253, 0, 437, 254, 255, 257, 260, 256, 261,
	262, 438, 439, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 440, 266, 267, 0, 268, 0, 269,
	0, 0, 0, 270, 0, 271, 441, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 443, 444, 445,
	0, 0, 449, 280, 0, 0, 0, 0, 279, 281,
	288, 0, 0, 282, 446, 284, 283, 285, 286, 287,
	447, 0, 448, 0, 289, 0, 0, 290, 291, 292,
	0, 293, 294, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 450, 0, 301, 302, 0, 0, 303,
	304, 0, 0, 305, 0, 306, 0, 0, 307, 308,
	310, 311, 309, 0, 312, 313, 315, 314, 0, 0,
	0, 0, 451, 452, 316, 317, 0, 318, 319, 0,
	0, 320, 321, 0, 0, 322, 453, 0, 323, 0,
	454, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	455, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 457, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	0, 355, 356, 357, 358, 458, 359, 0, 363, 364,
	365, 366, 367, 368, 369, 0, 375, 376, 370, 372,
	373, 374, 371, 377, 378, 0, 379, 360, 361, 380,
	0, 381, 459, 382, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 392, 388, 389, 390, 460, 0, 394,
	395, 0, 396, 397, 398, 399, 400, 258, 401, 259,
	402, 0, 461, 462, 463, 403, 0, 0, 404, 405,
	464, 465, 0, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 0, 415, 0, 413, 416, 417,
	418, 466, 467, 468, 202, 420, 419, 469, 0, 0,
	0, 0, 421, 422, 470, 423, 424, 425, 0, 0,
	0, 205, 206, 207, 208, 0, 209, 0, 0, 0,
	0, 426, 0, 0, 0, 0, 210, 211, 212, 427,
	428, 213, 429, 214, 215, 430, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 223, 431, 432, 433,
	0, 224, 434, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 231, 232, 233, 230, 0, 234, 0, 235,
	236, 0, 0, 237, 238, 0, 0, 0, 0, 0,
	0, 0, 239, 240, 241, 242, 243, 244, 435, 436,
	0, 245, 0, 246, 0, 247, 0, 0, 248, 249,
	250, 0, 251, 0, 252, 253, 0, 437, 254, 255,
	257, 260, 256, 261, 262, 438, 439, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 440, 266, 267,
	0, 268, 0, 269, 0, 0, 0, 270, 0, 271,
	441, 0, 442, 272, 0, 273, 274, 275, 276, 277,
	278, 443, 444, 445, 0, 0, 449, 280, 0, 0,
	0, 0, 279, 281, 288, 0, 0, 282, 446, 284,
	283, 285, 286, 287, 447, 0, 448, 0, 289, 0,
	0, 290, 291, 292, 0, 293, 294, 0, 0, 295,
	296, 297, 0, 299, 298, 0, 300, 450, 0, 301,
	302, 0, 0, 303, 304, 0, 0, 305, 0, 306,
	0, 0, 307, 308, 310, 311, 309, 0, 312, 313,
	315, 314, 0, 0, 0, 0, 451, 452, 316, 317,
	0, 318, 319, 0, 902, 320, 321, 0, 0, 322,
	453, 0, 323, 0, 454, 324, 325, 326, 327, 328,
	329, 330, 0, 331, 455, 332, 456, 333, 0, 334,
	335, 336, 337, 338, 339, 457, 340, 341, 0, 342,
	343, 344, 345, 346, 0, 348, 349, 347, 350, 351,
	352, 353, 0, 354, 0, 355, 356, 357, 358, 458,
	359, 0, 363, 364, 365, 366, 367, 368, 369, 0,
	375, 376, 370, 372, 373, 374, 371, 377, 378, 0,
	379, 360, 361, 380, 0, 381, 459, 382, 383, 0,
	393, 384, 385, 386, 362, 387, 391, 392, 388, 389,
	390, 460, 0, 394, 395, 0, 396, 397, 398, 399,
	400, 258, 401, 259, 402, 0, 461, 462, 463, 403,
	0, 0, 404, 405, 464, 465, 0, 406, 407, 0,
	408, 409, 0, 0, 410, 411, 412, 414, 0, 415,
	0, 413, 416, 417, 418, 466, 467, 468, 0, 420,
	419, 469, 202, 2133, 0, 0, 421, 422, 470, 423,
	424, 425, 0, 0, 0, 0, 0, 0, 0, 205,
	206, 207, 208, 0, 209, 0, 0, 0, 0, 426,
	0, 0, 0, 0, 210, 211, 212, 427, 428, 213,
	429, 214, 215, 430, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 223, 431, 432, 433, 0, 224,
	434, 0, 0, 0, 225, 226, 227, 228, 229, 0,
	231, 232, 233, 230, 0, 234, 0, 235, 236, 0,
	0, 237, 238, 0, 0, 0, 0, 0, 0, 0,
	239, 240, 241, 242, 243, 244, 435, 436, 0, 245,
	0, 246, 0, 247, 0, 0, 248, 249, 250, 0,
	251, 0, 252, 253, 0, 437, 254, 255, 257, 260,
	256, 261, 262, 438, 439, 0, 0, 0, 0, 0,
	0, 0, 263, 264, 265, 440, 266, 267, 0, 268,
	0, 269, 0, 0, 0, 270, 0, 271, 441, 0,
	442, 272, 0, 273, 274, 275, 276, 277, 278, 443,
	444, 445, 0, 0, 449, 280, 0, 0, 0, 0,
	279, 281, 288, 0, 0, 282, 446, 284, 283, 285,
	286, 287, 447, 0, 448, 0, 289, 0, 0, 290,
	291, 292, 0, 293, 294, 0, 0, 295, 296, 297,
	0, 299, 298, 0, 300, 450, 0, 301, 302, 0,
	0, 303, 304, 0, 0, 305, 0, 306, 0, 0,
	307, 308, 310, 311, 309, 0, 312, 313, 315, 314,
	0, 0, 0, 0, 451, 452, 316, 317, 0, 318,
	319, 0, 0, 320, 2130, 0, 0, 322, 453, 0,
	323, 0, 454, 324, 325, 326, 327, 328, 329, 330,
	0, 331, 455, 332, 456, 333, 0, 334, 335, 336,
	337, 338, 339, 457, 340, 341, 0, 342, 343, 344,
	345, 346, 0, 348, 349, 347, 350, 351, 352, 353,
	0, 354, 0, 355, 356, 357, 358, 458, 359, 0,
	363, 364, 365, 366, 367, 368, 369, 0, 375, 376,
	370, 372, 373, 374, 371, 377, 378, 0, 379, 360,
	361, 380, 0, 381, 459, 382, 383, 0, 393, 384,
	385, 386, 362, 387, 391, 392, 388, 389, 390, 460,
	0, 394, 395, 0, 396, 397, 398, 399, 400, 258,
	401, 259, 402, 0, 461, 462, 463, 403, 0, 0,
	404, 405, 464, 465, 0, 406, 407, 0, 408, 409,
	0, 0, 410, 411, 412, 414, 0, 415, 0, 413,
	416, 417, 418, 466, 467, 468, 202, 420, 419, 469,
	0, 0, 0, 0, 421, 422, 470, 423, 424, 425,
	0, 0, 0, 205, 206, 207, 208, 1684, 209, 0,
	0, 0, 0, 426, 0, 0, 0, 0, 210, 211,
	212, 427, 428, 213, 429, 214, 215, 430, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 223, 431,
	432, 433, 0, 224, 434, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 231, 232, 233, 230, 0, 234,
	0, 235, 236, 0, 0, 237, 238, 0, 0, 0,
	0, 0, 0, 0, 239, 240, 241, 242, 243, 244,
	435, 436, 0, 245, 0, 246, 0, 247, 0, 0,
	248, 249, 250, 0, 251, 0, 252, 253, 0, 437,
	254, 255, 257, 260, 256, 261, 262, 438, 439, 0,
	0, 0, 0, 0, 0, 0, 263, 264, 265, 440,
	266, 267, 0, 268, 0, 269, 0, 0, 0, 270,
	0, 271, 441, 0, 442, 272, 0, 273, 274, 275,
	276, 277, 278, 443, 444, 445, 0, 0, 449, 280,
	0, 0, 0, 0, 279, 281, 288, 0, 0, 282,
	446, 284, 283, 285, 286, 287, 447, 0, 448, 0,
	289, 0, 0, 290, 291, 292, 0, 293, 294, 0,
	0, 295, 296, 297, 0, 299, 298, 0, 300, 450,
	0, 301, 302, 0, 0, 303, 304, 0, 0, 305,
	0, 306, 0, 0, 307, 308, 310, 311, 309, 0,
	312, 313, 315, 314, 0, 0, 0, 0, 451, 452,
	316, 317, 0, 318, 319, 0, 0, 320, 321, 0,
	0, 322, 453, 0, 323, 0, 454, 324, 325, 326,
	327, 328, 329, 330, 0, 331, 455, 332, 456, 333,
	0, 334, 335, 336, 337, 338, 339, 457, 340, 341,
	0, 342, 343, 344, 345, 346, 0, 348, 349, 347,
	350, 351, 352, 353, 0, 354, 0, 355, 356, 357,
	358, 458, 359, 0, 363, 364, 365, 366, 367, 368,
	369, 0, 375, 376, 370, 372, 373, 374, 371, 377,
	378, 0, 379, 360, 361, 380, 0, 381, 459, 382,
	383, 0, 393, 384, 385, 386, 362, 387, 391, 392,
	388, 389, 390, 460, 0, 394, 395, 0, 396, 397,
	398, 399, 400, 258, 401, 259, 402, 0, 461, 462,
	463, 403, 0, 0, 404, 405, 464, 465, 0, 406,
	407, 0, 408, 409, 0, 0, 410, 411, 412, 414,
	0, 415, 0, 413, 416, 417, 418, 466, 467, 468,
	0, 420, 419, 469, 1678, 0, 202, 0, 421, 422,
	470, 423, 424, 425, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 205, 206, 207, 208, 0, 209, 0,
	0, 0, 0, 426, 0, 0, 0, 0, 210, 211,
	212, 427, 428, 213, 429, 214, 215, 430, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 223, 431,
	432, 433, 0, 224, 434, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 231, 232, 233, 230, 0, 234,
	0, 235, 236, 0, 0, 237, 238, 0, 0, 0,
	0, 0, 0, 0, 239, 240, 241, 242, 243, 244,
	435, 436, 0, 245, 0, 246, 0, 247, 0, 0,
	248, 249, 250, 0, 251, 0, 252, 253, 0, 437,
	254, 255, 257, 260, 256, 261, 262, 438, 439, 0,
	0, 0, 0, 0, 0, 0, 263, 264, 265, 440,
	266, 267, 0, 268, 0, 269, 0, 0, 0, 270,
	0, 271, 441, 0, 442, 272, 0, 273, 274, 275,
	276, 277, 278, 443, 444, 445, 0, 0, 449, 280,
	0, 0, 0, 0, 279, 281, 288, 0, 0, 282,
	446, 284, 283, 285, 286, 287, 447, 0, 448, 0,
	289, 0, 0, 290, 291, 292, 0, 293, 294, 0,
	0, 295, 296, 297, 0, 299, 298, 0, 300, 450,
	0, 301, 302, 0, 0, 303, 304, 0, 0, 305,
	0, 306, 0, 0, 307, 308, 310, 311, 309, 0,
	312, 313, 315, 314, 0, 0, 0, 0, 451, 452,
	316, 317, 0, 318, 319, 0, 0, 320, 321, 0,
	0, 322, 453, 0, 323, 0, 454, 324, 325, 326,
	327, 328, 329, 330, 0, 331, 455, 332, 456, 333,
	0, 334, 335, 336, 337, 338, 339, 457, 340, 341,
	0, 342, 343, 344, 345, 346, 0, 348, 349, 347,
	350, 351, 352, 353, 0, 354, 0, 355, 356, 357,
	358, 458, 359, 0, 363, 364, 365, 366, 367, 368,
	369, 0, 375, 376, 370, 372, 373, 374, 371, 377,
	378, 0, 379, 360, 361, 380, 0, 381, 459, 382,
	383, 0, 393, 384, 385, 386, 362, 387, 391, 392,
	388, 389, 390, 460, 0, 394, 395, 0, 396, 397,
	398, 399, 400, 258, 401, 259, 402, 0, 461, 462,
	463, 403, 0, 0, 404, 405, 464, 465, 0, 406,
	407, 0, 408, 409, 0, 0, 410, 411, 412, 414,
	0, 415, 0, 413, 416, 417, 418, 466, 467, 468,
	0, 420, 419, 469, 1676, 0, 202, 0, 421, 422,
	470, 423, 424, 425, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 205, 206, 207, 208, 0, 209, 0,
	0, 0, 0, 426, 0, 0, 0, 0, 210, 211,
	212, 427, 428, 213, 429, 214, 215, 430, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 223, 431,
	432, 433, 0, 224, 434, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 231, 232, 233, 230, 0, 234,
	0, 235, 236, 0, 0, 237, 238, 0, 0, 0,
	0, 0, 0, 0, 239, 240, 241, 242, 243, 244,
	435, 436, 0, 245, 0, 246, 0, 247, 0, 0,
	248, 249, 250, 0, 251, 0, 252, 253, 0, 437,
	254, 255, 257, 260, 256, 261, 262, 438, 439, 0,
	0, 0, 0, 0, 0, 0, 263, 264, 265, 440,
	266, 267, 0, 268, 0, 269, 0, 0, 0, 270,
	0, 271, 441, 0, 442, 272, 0, 273, 274, 275,
	276, 277, 278, 443, 444, 445, 0, 0, 449, 280,
	0, 0, 0, 0, 279, 281, 288, 0, 0, 282,
	446, 284, 283, 285, 286, 287, 447, 0, 448, 0,
	289, 0, 0, 290, 291, 292, 0, 293, 294, 0,
	0, 295, 296, 297, 0, 299, 298, 0, 300, 450,
	0, 301, 302, 0, 0, 303, 304, 0, 0, 305,
	0, 306, 0, 0, 307, 308, 310, 311, 309, 0,
	312, 313, 315, 314, 0, 0, 0, 0, 451, 452,
	316, 317, 0, 318, 319, 0, 0, 320, 321, 0,
	0, 322, 453, 0, 323, 0, 454, 324, 325, 326,
	327, 328, 329, 330, 0, 331, 455, 332, 456, 333,
	0, 334, 335, 336, 337, 338, 339, 457, 340, 341,
	0, 342, 343, 344, 345, 346, 0, 348, 349, 347,
	350, 351, 352, 353, 0, 354, 0, 355, 356, 357,
	358, 458, 359, 0, 363, 364, 365, 366, 367, 368,
	369, 0, 375, 376, 370, 372, 373, 374, 371, 377,
	378, 0, 379, 360, 361, 380, 0, 381, 459, 382,
	383, 0, 393, 384, 385, 386, 362, 387, 391, 392,
	388, 389, 390, 460, 0, 394, 395, 0, 396, 397,
	398, 399, 400, 258, 401, 259, 402, 0, 461, 462,
	463, 403, 0, 0, 404, 405, 464, 465, 0, 406,
	407, 0, 408, 409, 0, 0, 410, 411, 412, 414,
	0, 415, 0, 413, 416, 417, 418, 466, 467, 468,
	0, 420, 419, 469, 520, 0, 202, 0, 421, 422,
	470, 423, 424, 425, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 205, 206, 207, 208, 0, 209, 0,
	0, 0, 0, 426, 0, 0, 0, 0, 210, 211,
	212, 427, 428, 213, 429, 214, 215, 430, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 223, 431,
	432, 938, 0, 224, 434, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 231, 232, 233, 230, 0, 234,
	0, 235, 236, 0, 0, 237, 238, 0, 0, 0,
	0, 0, 0, 0, 239, 240, 241, 242, 243, 244,
	435, 436, 0, 245, 0, 246, 0, 247, 0, 0,
	248, 249, 250, 0, 251, 0, 252, 253, 0, 437,
	254, 255, 257, 260, 256, 261, 262, 438, 439, 0,
	0, 0, 0, 0, 0, 0, 263, 264, 265, 440,
	266, 267, 0, 268, 0, 269, 0, 0, 0, 270,
	0, 271, 441, 0, 442, 272, 0, 273, 274, 275,
	276, 277, 278, 443, 444, 445, 0, 0, 449, 280,
	0, 0, 0, 0, 279, 281, 288, 0, 0, 282,
	446, 284, 283, 285, 286, 287, 447, 0, 448, 0,
	289, 0, 0, 290, 291, 292, 0, 293, 294, 0,
	0, 295, 296, 297, 0, 299, 298, 0, 300, 450,
	0, 301, 302, 0, 0, 303, 304, 0, 0, 305,
	0, 306, 0, 0, 307, 308, 310, 311, 521, 0,
	312, 313, 315, 314, 0, 0, 0, 0, 451, 452,
	316, 317, 0, 318, 319, 0, 0, 320, 321, 0,
	0, 322, 453, 0, 323, 0, 454, 324, 325, 326,
	327, 328, 329, 330, 0, 331, 455, 332, 456, 333,
	0, 334, 335, 336, 337, 338, 339, 457, 340, 341,
	0, 342, 343, 344, 345, 346, 0, 348, 349, 347,
	350, 351, 352, 353, 0, 354, 0, 355, 356, 357,
	358, 458, 359, 0, 363, 364, 517, 366, 367, 368,
	369, 0, 375, 376, 370, 372, 373, 374, 371, 377,
	378, 0, 379, 360, 361, 380, 0, 381, 459, 382,
	383, 0, 393, 384, 385, 386, 362, 387, 391, 392,
	388, 389, 390, 460, 0, 394, 395, 0, 396, 397,
	398, 399, 400, 258, 401, 259, 402, 0, 516, 462,
	463, 403, 0, 0, 404, 405, 464, 465, 0, 406,
	407, 0, 408, 409, 0, 0, 410, 411, 412, 414,
	0, 415, 0, 413, 416, 417, 418, 466, 467, 468,
	0, 420, 419, 469, 1635, 0, 202, 0, 421, 422,
	470, 423, 424, 425, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 205, 206, 207, 208, 0, 209, 0,
	0, 0, 0, 426, 0, 0, 0, 0, 210, 211,
	212, 427, 428, 213, 429, 214, 215, 430, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 223, 431,
	432, 433, 0, 224, 434, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 231, 232, 233, 230, 0, 234,
	0, 235, 236, 0, 0, 237, 238, 0, 0, 0,
	0, 0, 0, 0, 239, 240, 241, 242, 243, 244,
	435, 436, 0, 245, 0, 246, 0, 247, 0, 0,
	248, 249, 250, 0, 251, 0, 252, 253, 0, 437,
	254, 255, 257, 260, 256, 261, 262, 438, 439, 0,
	0, 0, 0, 0, 0, 0, 263, 264, 265, 440,
	266, 267, 0, 268, 0, 269, 0, 0, 0, 270,
	0, 271, 441, 0, 442, 272, 0, 273, 274, 275,
	276, 277, 278, 1634, 444, 445, 0, 0, 449, 280,
	0, 0, 0, 0, 279, 281, 288, 0, 0, 282,
	446, 284, 283, 285, 286, 287, 447, 0, 448, 0,
	289, 0, 0, 290, 291, 292, 0, 293, 294, 0,
	0, 295, 296, 297, 0, 299, 298, 0, 300, 450,
	0, 301, 302, 0, 0, 303, 304, 0, 0, 305,
	0, 306, 0, 0, 307, 308, 310, 311, 309, 0,
	312, 313, 315, 314, 0, 0, 0, 0, 451, 452,
	316, 317, 0, 318, 319, 0, 0, 320, 321, 0,
	0, 322, 453, 0, 323, 0, 454, 324, 325, 326,
	327, 328, 329, 330, 0, 331, 455, 332, 456, 333,
	0, 334, 335, 336, 337, 338, 339, 457, 340, 341,
	0, 342, 343, 344, 345, 346, 0, 348, 349, 347,
	350, 351, 352, 353, 0, 354, 0, 355, 356, 357,
	358, 458, 359, 0, 363, 364, 365, 366, 367, 368,
	369, 0, 375, 376, 370, 372, 373, 374, 371, 377,
	378, 0, 379, 360, 361, 380, 0, 381, 459, 382,
	383, 0, 393, 384, 385, 386, 362, 387, 391, 392,
	388, 389, 390, 460, 0, 394, 395, 0, 396, 397,
	398, 399, 400, 258, 401, 259, 402, 0, 461, 462,
	463, 403, 0, 0, 404, 405, 464, 465, 0, 406,
	407, 0, 408, 409, 0, 0, 410, 411, 412, 414,
	0, 415, 0, 413, 416, 417, 418, 466, 467, 468,
	202, 420, 419, 469, 0, 0, 0, 0, 421, 422,
	470, 423, 424, 425, 0, 0, 0, 205, 206, 207,
	208, 0, 209, 0, 0, 0, 0, 426, 0, 0,
	0, 0, 210, 211, 212, 427, 428, 213, 429, 214,
	215, 430, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 223, 431, 432, 433, 0, 224, 434, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 0, 237,
	238, 0, 0, 0, 0, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 435, 436, 0, 245, 0, 246,
	0, 247, 0, 0, 248, 249, 250, 0, 251, 0,
	252, 253, 0, 437, 254, 255, 257, 260, 256, 261,
	262, 438, 439, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 440, 266, 267, 0, 268, 0, 269,
	0, 0, 0, 270, 0, 271, 441, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 443, 444, 445,
	0, 0, 449, 280, 0, 0, 0, 0, 279, 281,
	288, 0, 0, 282, 446, 284, 283, 285, 286, 287,
	447, 0, 448, 0, 289, 0, 0, 290, 291, 292,
	0, 293, 294, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 450, 0, 301, 302, 0, 0, 303,
	304, 0, 0, 305, 0, 306, 0, 0, 307, 308,
	310, 311, 309, 0, 312, 313, 315, 314, 0, 0,
	0, 0, 451, 452, 316, 317, 0, 318, 319, 0,
	0, 320, 321, 0, 0, 322, 453, 0, 323, 0,
	454, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	455, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 457, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	0, 355, 356, 357, 358, 458, 359, 0, 363, 364,
	365, 366, 367, 368, 369, 0, 375, 376, 370, 372,
	373, 374, 371, 377, 378, 0, 379, 360, 361, 380,
	0, 381, 459, 382, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 392, 388, 389, 390, 460, 0, 394,
	395, 1619, 396, 397, 398, 399, 400, 258, 401, 259,
	402, 0, 461, 462, 463, 403, 0, 0, 404, 405,
	464, 465, 0, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 0, 415, 0, 413, 416, 417,
	418, 466, 467, 468, 0, 420, 419, 469, 520, 0,
	202, 0, 421, 422, 470, 423, 424, 425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 206, 207,
	208, 0, 209, 0, 0, 0, 0, 426, 0, 0,
	0, 0, 210, 211, 212, 427, 428, 213, 429, 214,
	215, 430, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 223, 431, 432, 433, 0, 510, 434, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 0, 237,
	238, 0, 0, 0, 0, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 435, 436, 0, 245, 0, 246,
	0, 247, 0, 0, 248, 249, 250, 0, 251, 0,
	252, 253, 0, 437, 254, 255, 257, 260, 256, 261,
	262, 438, 439, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 440, 266, 267, 0, 268, 0, 269,
	0, 0, 0, 270, 0, 271, 441, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 443, 444, 445,
	0, 0, 449, 280, 0, 0, 0, 0, 279, 281,
	288, 0, 0, 282, 446, 284, 283, 285, 286, 287,
	447, 0, 448, 0, 289, 0, 0, 290, 291, 292,
	0, 293, 294, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 450, 0, 301, 302, 0, 0, 303,
	304, 0, 0, 305, 0, 306, 0, 0, 307, 308,
	310, 311, 521, 0, 312, 313, 315, 314, 0, 0,
	0, 0, 451, 452, 316, 317, 0, 318, 319, 0,
	0, 320, 321, 0, 0, 322, 453, 0, 323, 0,
	454, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	455, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 457, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	0, 355, 356, 357, 358, 458, 359, 0, 363, 364,
	517, 366, 367, 368, 369, 0, 375, 376, 370, 372,
	373, 374, 371, 1172, 378, 0, 379, 360, 361, 380,
	0, 381, 459, 382, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 392, 388, 389, 390, 460, 0, 394,
	395, 0, 396, 397, 398, 399, 400, 258, 401, 259,
	402, 0, 516, 462, 463, 403, 0, 0, 404, 405,
	464, 465, 0, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 0, 415, 0, 413, 416, 417,
	418, 466, 467, 468, 0, 420, 419, 469, 1157, 0,
	202, 0, 421, 422, 470, 423, 424, 425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 206, 207,
	208, 0, 209, 0, 0, 0, 0, 426, 0, 0,
	0, 0, 210, 211, 212, 427, 428, 213, 429, 214,
	215, 430, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 223, 431, 432, 433, 0, 224, 434, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 0, 237,
	238, 0, 0, 0, 0, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 435, 436, 0, 245, 0, 246,
	0, 247, 0, 0, 248, 249, 250, 0, 251, 0,
	252, 253, 0, 437, 254, 255, 257, 260, 256, 261,
	262, 438, 439, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 440, 266, 267, 0, 268, 0, 269,
	0, 0, 0, 270, 0, 271, 441, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 1156, 444, 445,
	0, 0, 449, 280, 0, 0, 0, 0, 279, 281,
	288, 0, 0, 282, 446, 284, 283, 285, 286, 287,
	447, 0, 448, 0, 289, 0, 0, 290, 291, 292,
	0, 293, 294, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 450, 0, 301, 302, 0, 0, 303,
	304, 0, 0, 305, 0, 306, 0, 0, 307, 308,
	310, 311, 309, 0, 312, 313, 315, 314, 0, 0,
	0, 0, 451, 452, 316, 317, 0, 318, 319, 0,
	0, 320, 321, 0, 0, 322, 453, 0, 323, 0,
	454, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	455, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 457, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	0, 355, 356, 357, 358, 458, 359, 0, 363, 364,
	365, 366, 367, 368, 369, 0, 375, 376, 370, 372,
	373, 374, 371, 377, 378, 0, 379, 360, 361, 380,
	0, 381, 459, 382, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 392, 388, 389, 390, 460, 0, 394,
	395, 0, 396, 397, 398, 399, 400, 258, 401, 259,
	402, 0, 461, 462, 463, 403, 0, 0, 404, 405,
	464, 465, 0, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 0, 415, 0, 413, 416, 417,
	418, 466, 467, 468, 0, 420, 419, 469, 1153, 0,
	202, 0, 421, 422, 470, 423, 424, 425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 206, 207,
	208, 0, 209, 0, 0, 0, 0, 426, 0, 0,
	0, 0, 210, 211, 212, 427, 428, 213, 429, 214,
	215, 430, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 223, 431, 432, 433, 0, 224, 434, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 0, 237,
	238, 0, 0, 0, 0, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 435, 436, 0, 245, 0, 246,
	0, 247, 0, 0, 248, 249, 250, 0, 251, 0,
	252, 253, 0, 437, 254, 255, 257, 260, 256, 261,
	262, 438, 439, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 440, 266, 267, 0, 268, 0, 269,
	0, 0, 0, 270, 0, 271, 441, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 1152, 444, 445,
	0, 0, 449, 280, 0, 0, 0, 0, 279, 281,
	288, 0, 0, 282, 446, 284, 283, 285, 286, 287,
	447, 0, 448, 0, 289, 0, 0, 290, 291, 292,
	0, 293, 294, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 450, 0, 301, 302, 0, 0, 303,
	304, 0, 0, 305, 0, 306, 0, 0, 307, 308,
	310, 311, 309, 0, 312, 313, 315, 314, 0, 0,
	0, 0, 451, 452, 316, 317, 0, 318, 319, 0,
	0, 320, 321, 0, 0, 322, 453, 0, 323, 0,
	454, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	455, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 457, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	0, 355, 356, 357, 358, 458, 359, 0, 363, 364,
	365, 366, 367, 368, 369, 0, 375, 376, 370, 372,
	373, 374, 371, 377, 378, 0, 379, 360, 361, 380,
	0, 381, 459, 382, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 392, 388, 389, 390, 460, 0, 394,
	395, 0, 396, 397, 398, 399, 400, 258, 401, 259,
	402, 0, 461, 462, 463, 403, 0, 0, 404, 405,
	464, 465, 0, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 0, 415, 0, 413, 416, 417,
	418, 466, 467, 468, 0, 420, 419, 469, 1150, 0,
	202, 0, 421, 422, 470, 423, 424, 425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 206, 207,
	208, 0, 209, 0, 0, 0, 0, 426, 0, 0,
	0, 0, 210, 211, 212, 427, 428, 213, 429, 214,
	215, 430, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 223, 431, 432, 433, 0, 224, 434, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 0, 237,
	238, 0, 0, 0, 0, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 435, 436, 0, 245, 0, 246,
	0, 247, 0, 0, 248, 249, 250, 0, 251, 0,
	252, 253, 0, 437, 254, 255, 257, 260, 256, 261,
	262, 438, 439, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 440, 266, 267, 0, 268, 0, 269,
	0, 0, 0, 270, 0, 271, 441, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 1149, 444, 445,
	0, 0, 449, 280, 0, 0, 0, 0, 279, 281,
	288, 0, 0, 282, 446, 284, 283, 285, 286, 287,
	447, 0, 448, 0, 289, 0, 0, 290, 291, 292,
	0, 293, 294, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 450, 0, 301, 302, 0, 0, 303,
	304, 0, 0, 305, 0, 306, 0, 0, 307, 308,
	310, 311, 309, 0, 312, 313, 315, 314, 0, 0,
	0, 0, 451, 452, 316, 317, 0, 318, 319, 0,
	0, 320, 321, 0, 0, 322, 453, 0, 323, 0,
	454, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	455, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 457, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	0, 355, 356, 357, 358, 458, 359, 0, 363, 364,
	365, 366, 367, 368, 369, 0, 375, 376, 370, 372,
	373, 374, 371, 377, 378, 0, 379, 360, 361, 380,
	0, 381, 459, 382, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 392, 388, 389, 390, 460, 0, 394,
	395, 0, 396, 397, 398, 399, 400, 258, 401, 259,
	402, 0, 461, 462, 463, 403, 0, 0, 404, 405,
	464, 465, 0, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 0, 415, 0, 413, 416, 417,
	418, 466, 467, 468, 0, 420, 419, 469, 1147, 0,
	202, 0, 421, 422, 470, 423, 424, 425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 206, 207,
	208, 0, 209, 0, 0, 0, 0, 426, 0, 0,
	0, 0, 210, 211, 212, 427, 428, 213, 429, 214,
	215, 430, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 223, 431, 432, 433, 0, 224, 434, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 0, 237,
	238, 0, 0, 0, 0, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 435, 436, 0, 245, 0, 246,
	0, 247, 0, 0, 248, 249, 250, 0, 251, 0,
	252, 253, 0, 437, 254, 255, 257, 260, 256, 261,
	262, 438, 439, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 440, 266, 267, 0, 268, 0, 269,
	0, 0, 0, 270, 0, 271, 441, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 1146, 444, 445,
	0, 0, 449, 280, 0, 0, 0, 0, 279, 281,
	288, 0, 0, 282, 446, 284, 283, 285, 286, 287,
	447, 0, 448, 0, 289, 0, 0, 290, 291, 292,
	0, 293, 294, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 450, 0, 301, 302, 0, 0, 303,
	304, 0, 0, 305, 0, 306, 0, 0, 307, 308,
	310, 311, 309, 0, 312, 313, 315, 314, 0, 0,
	0, 0, 451, 452, 316, 317, 0, 318, 319, 0,
	0, 320, 321, 0, 0, 322, 453, 0, 323, 0,
	454, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	455, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 457, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	0, 355, 356, 357, 358, 458, 359, 0, 363, 364,
	365, 366, 367, 368, 369, 0, 375, 376, 370, 372,
	373, 374, 371, 377, 378, 0, 379, 360, 361, 380,
	0, 381, 459, 382, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 392, 388, 389, 390, 460, 0, 394,
	395, 0, 396, 397, 398, 399, 400, 258, 401, 259,
	402, 0, 461, 462, 463, 403, 0, 0, 404, 405,
	464, 465, 0, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 0, 415, 0, 413, 416, 417,
	418, 466, 467, 468, 0, 420, 419, 469, 1143, 0,
	202, 0, 421, 422, 470, 423, 424, 425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 206, 207,
	208, 0, 209, 0, 0, 0, 0, 426, 0, 0,
	0, 0, 210, 211, 212, 427, 428, 213, 429, 214,
	215, 430, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 223, 431, 432, 433, 0, 224, 434, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 0, 237,
	238, 0, 0, 0, 0, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 435, 436, 0, 245, 0, 246,
	0, 247, 0, 0, 248, 249, 250, 0, 251, 0,
	252, 253, 0, 437, 254, 255, 257, 260, 256, 261,
	262, 438, 439, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 440, 266, 267, 0, 268, 0, 269,
	0, 0, 0, 270, 0, 271, 441, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 1142, 444, 445,
	0, 0, 449, 280, 0, 0, 0, 0, 279, 281,
	288, 0, 0, 282, 446, 284, 283, 285, 286, 287,
	447, 0, 448, 0, 289, 0, 0, 290, 291, 292,
	0, 293, 294, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 450, 0, 301, 302, 0, 0, 303,
	304, 0, 0, 305, 0, 306, 0, 0, 307, 308,
	310, 311, 309, 0, 312, 313, 315, 314, 0, 0,
	0, 0, 451, 452, 316, 317, 0, 318, 319, 0,
	0, 320, 321, 0, 0, 322, 453, 0, 323, 0,
	454, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	455, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 457, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	0, 355, 356, 357, 358, 458, 359, 0, 363, 364,
	365, 366, 367, 368, 369, 0, 375, 376, 370, 372,
	373, 374, 371, 377, 378, 0, 379, 360, 361, 380,
	0, 381, 459, 382, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 392, 388, 389, 390, 460, 0, 394,
	395, 0, 396, 397, 398, 399, 400, 258, 401, 259,
	402, 0, 461, 462, 463, 403, 0, 0, 404, 405,
	464, 465, 0, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 0, 415, 0, 413, 416, 417,
	418, 466, 467, 468, 0, 420, 419, 469, 1131, 0,
	202, 0, 421, 422, 470, 423, 424, 425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 206, 207,
	208, 0, 209, 0, 0, 0, 0, 426, 0, 0,
	0, 0, 210, 211, 212, 427, 428, 213, 429, 214,
	215, 430, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 223, 431, 432, 433, 0, 224, 434, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 0, 237,
	238, 0, 0, 0, 0, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 435, 436, 0, 245, 0, 246,
	0, 247, 0, 0, 248, 249, 250, 0, 251, 0,
	252, 253, 0, 437, 254, 255, 257, 260, 256, 261,
	262, 438, 439, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 440, 266, 267, 0, 268, 0, 269,
	0, 0, 0, 270, 0, 271, 441, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 1130, 444, 445,
	0, 0, 449, 280, 0, 0, 0, 0, 279, 281,
	288, 0, 0, 282, 446, 284, 283, 285, 286, 287,
	447, 0, 448, 0, 289, 0, 0, 290, 291, 292,
	0, 293, 294, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 450, 0, 301, 302, 0, 0, 303,
	304, 0, 0, 305, 0, 306, 0, 0, 307, 308,
	310, 311, 309, 0, 312, 313, 315, 314, 0, 0,
	0, 0, 451, 452, 316, 317, 0, 318, 319, 0,
	0, 320, 321, 0, 0, 322, 453, 0, 323, 0,
	454, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	455, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 457, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	0, 355, 356, 357, 358, 458, 359, 0, 363, 364,
	365, 366, 367, 368, 369, 0, 375, 376, 370, 372,
	373, 374, 371, 377, 378, 0, 379, 360, 361, 380,
	0, 381, 459, 382, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 392, 388, 389, 390, 460, 0, 394,
	395, 0, 396, 397, 398, 399, 400, 258, 401, 259,
	402, 0, 461, 462, 463, 403, 0, 0, 404, 405,
	464, 465, 0, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 0, 415, 0, 413, 416, 417,
	418, 466, 467, 468, 0, 420, 419, 469, 1122, 0,
	202, 0, 421, 422, 470, 423, 424, 425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 206, 207,
	208, 0, 209, 0, 0, 0, 0, 426, 0, 0,
	0, 0, 210, 211, 212, 427, 428, 213, 429, 214,
	215, 430, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 223, 431, 432, 433, 0, 224, 434, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 0, 237,
	238, 0, 0, 0, 0, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 435, 436, 0, 245, 0, 246,
	0, 247, 0, 0, 248, 249, 250, 0, 251, 0,
	252, 253, 0, 437, 254, 255, 257, 260, 256, 261,
	262, 438, 439, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 440, 266, 267, 0, 268, 0, 269,
	0, 0, 0, 270, 0, 271, 441, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 443, 444, 445,
	0, 0, 449, 280, 0, 0, 0, 0, 279, 281,
	288, 0, 0, 282, 446, 284, 283, 285, 286, 287,
	447, 0, 448, 0, 289, 0, 0, 290, 291, 292,
	0, 293, 294, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 450, 0, 301, 302, 0, 0, 303,
	304, 0, 0, 305, 0, 306, 0, 0, 307, 308,
	310, 311, 309, 0, 312, 313, 315, 314, 0, 0,
	0, 0, 451, 452, 316, 317, 0, 318, 319, 0,
	0, 320, 321, 0, 0, 322, 453, 0, 323, 0,
	454, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	455, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 457, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	0, 355, 356, 357, 358, 458, 359, 0, 363, 364,
	365, 366, 367, 368, 369, 0, 375, 376, 370, 372,
	373, 374, 371, 377, 378, 0, 379, 360, 361, 380,
	0, 381, 459, 382, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 392, 388, 389, 390, 460, 0, 394,
	395, 0, 396, 397, 398, 399, 400, 258, 401, 259,
	402, 0, 461, 462, 463, 403, 0, 0, 404, 405,
	464, 465, 0, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 0, 415, 0, 413, 416, 417,
	418, 466, 467, 468, 0, 420, 419, 469, 1113, 0,
	202, 0, 421, 422, 470, 423, 424, 425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 206, 207,
	208, 0, 209, 0, 0, 0, 0, 426, 0, 0,
	0, 0, 210, 211, 212, 427, 428, 213, 429, 214,
	215, 430, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 223, 431, 432, 433, 0, 224, 434, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 0, 237,
	238, 0, 0, 0, 0, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 435, 436, 0, 245, 0, 246,
	0, 247, 0, 0, 248, 249, 250, 0, 251, 0,
	252, 253, 0, 437, 254, 255, 257, 260, 256, 261,
	262, 438, 439, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 440, 266, 267, 0, 268, 0, 269,
	0, 0, 0, 270, 0, 271, 441, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 1112, 444, 445,
	0, 0, 449, 280, 0, 0, 0, 0, 279, 281,
	288, 0, 0, 282, 446, 284, 283, 285, 286, 287,
	447, 0, 448, 0, 289, 0, 0, 290, 291, 292,
	0, 293, 294, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 450, 0, 301, 302, 0, 0, 303,
	304, 0, 0, 305, 0, 306, 0, 0, 307, 308,
	310, 311, 309, 0, 312, 313, 315, 314, 0, 0,
	0, 0, 451, 452, 316, 317, 0, 318, 319, 0,
	0, 320, 321, 0, 0, 322, 453, 0, 323, 0,
	454, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	455, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 457, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	0, 355, 356, 357, 358, 458, 359, 0, 363, 364,
	365, 366, 367, 368, 369, 0, 375, 376, 370, 372,
	373, 374, 371, 377, 378, 0, 379, 360, 361, 380,
	0, 381, 459, 382, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 392, 388, 389, 390, 460, 0, 394,
	395, 0, 396, 397, 398, 399, 400, 258, 401, 259,
	402, 0, 461, 462, 463, 403, 0, 0, 404, 405,
	464, 465, 0, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 0, 415, 0, 413, 416, 417,
	418, 466, 467, 468, 0, 420, 419, 469, 1108, 0,
	202, 0, 421, 422, 470, 423, 424, 425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 206, 207,
	208, 0, 209, 0, 0, 0, 0, 426, 0, 0,
	0, 0, 210, 211, 212, 427, 428, 213, 429, 214,
	215, 430, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 223, 431, 432, 433, 0, 224, 434, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 0, 237,
	238, 0, 0, 0, 0, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 435, 436, 0, 245, 0, 246,
	0, 247, 0, 0, 248, 249, 250, 0, 251, 0,
	252, 253, 0, 437, 254, 255, 257, 260, 256, 261,
	262, 438, 439, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 440, 266, 267, 0, 268, 0, 269,
	0, 0, 0, 270, 0, 271, 441, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 443, 444, 445,
	0, 0, 449, 280, 0, 0, 0, 0, 279, 281,
	288, 0, 0, 282, 446, 284, 283, 285, 286, 287,
	447, 0, 448, 0, 289, 0, 0, 290, 291, 292,
	0, 293, 294, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 450, 0, 301, 302, 0, 0, 303,
	304, 0, 0, 305, 0, 306, 0, 0, 307, 308,
	310, 311, 309, 0, 312, 313, 315, 314, 0, 0,
	0, 0, 451, 452, 316, 317, 0, 318, 319, 0,
	0, 320, 321, 0, 0, 322, 453, 0, 323, 0,
	454, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	455, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 457, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	0, 355, 356, 357, 358, 458, 359, 0, 363, 364,
	365, 366, 367, 368, 369, 0, 375, 376, 370, 372,
	373, 374, 371, 377, 378, 0, 379, 360, 361, 380,
	0, 381, 459, 382, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 392, 388, 389, 390, 460, 0, 394,
	395, 0, 396, 397, 398, 399, 400, 258, 401, 259,
	402, 0, 461, 462, 463, 403, 0, 0, 404, 405,
	464, 465, 0, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 0, 415, 0, 413, 416, 417,
	418, 466, 467, 468, 0, 420, 419, 469, 1104, 0,
	202, 0, 421, 422, 470, 423, 424, 425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 206, 207,
	208, 0, 209, 0, 0, 0, 0, 426, 0, 0,
	0, 0, 210, 211, 212, 427, 428, 213, 429, 214,
	215, 430, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 223, 431, 432, 433, 0, 224, 434, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 0, 237,
	238, 0, 0, 0, 0, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 435, 436, 0, 245, 0, 246,
	0, 247, 0, 0, 248, 249, 250, 0, 251, 0,
	252, 253, 0, 437, 254, 255, 257, 260, 256, 261,
	262, 438, 439, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 440, 266, 267, 0, 268, 0, 269,
	0, 0, 0, 270, 0, 271, 441, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 1106, 444, 445,
	0, 0, 449, 280, 0, 0, 0, 0, 279, 281,
	288, 0, 0, 282, 446, 284, 283, 285, 286, 287,
	447, 0, 448, 0, 289, 0, 0, 290, 291, 292,
	0, 293, 294, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 450, 0, 301, 302, 0, 0, 303,
	304, 0, 0, 305, 0, 306, 0, 0, 307, 308,
	310, 311, 309, 0, 312, 313, 315, 314, 0, 0,
	0, 0, 451, 452, 316, 317, 0, 318, 319, 0,
	0, 320, 321, 0, 0, 322, 453, 0, 323, 0,
	454, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	455, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 457, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	0, 355, 356, 357, 358, 458, 359, 0, 363, 364,
	365, 366, 367, 368, 369, 0, 375, 376, 370, 372,
	373, 374, 371, 377, 378, 0, 379, 360, 361, 380,
	0, 381, 459, 382, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 392, 388, 389, 390, 460, 0, 394,
	395, 0, 396, 397, 398, 399, 400, 258, 401, 259,
	402, 0, 461, 462, 463, 403, 0, 0, 404, 405,
	464, 465, 0, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 0, 415, 0, 413, 416, 417,
	418, 466, 467, 468, 0, 420, 419, 469, 1076, 0,
	202, 0, 421, 422, 470, 423, 424, 425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 206, 207,
	208, 0, 209, 0, 0, 0, 0, 426, 0, 0,
	0, 0, 210, 211, 212, 427, 428, 213, 429, 214,
	215, 430, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 223, 431, 432, 433, 0, 224, 434, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 0, 237,
	238, 0, 0, 0, 0, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 435, 436, 0, 245, 0, 246,
	0, 247, 0, 0, 248, 249, 250, 0, 251, 0,
	252, 253, 0, 437, 254, 255, 257, 260, 256, 261,
	262, 438, 439, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 440, 266, 267, 0, 268, 0, 269,
	0, 0, 0, 270, 0, 271, 441, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 1078, 444, 445,
	0, 0, 449, 280, 0, 0, 0, 0, 279, 281,
	288, 0, 0, 282, 446, 284, 283, 285, 286, 287,
	447, 0, 448, 0, 289, 0, 0, 290, 291, 292,
	0, 293, 294, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 450, 0, 301, 302, 0, 0, 303,
	304, 0, 0, 305, 0, 306, 0, 0, 307, 308,
	310, 311, 309, 0, 312, 313, 315, 314, 0, 0,
	0, 0, 451, 452, 316, 317, 0, 318, 319, 0,
	0, 320, 321, 0, 0, 322, 453, 0, 323, 0,
	454, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	455, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 457, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	0, 355, 356, 357, 358, 458, 359, 0, 363, 364,
	365, 366, 367, 368, 369, 0, 375, 376, 370, 372,
	373, 374, 371, 377, 378, 0, 379, 360, 361, 380,
	0, 381, 459, 382, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 392, 388, 389, 390, 460, 0, 394,
	395, 0, 396, 397, 398, 399, 400, 258, 401, 259,
	402, 0, 461, 462, 463, 403, 0, 0, 404, 405,
	464, 465, 0, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 0, 415, 0, 413, 416, 417,
	418, 466, 467, 468, 0, 420, 419, 469, 1070, 0,
	202, 0, 421, 422, 470, 423, 424, 425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 206, 207,
	208, 0, 209, 0, 0, 0, 0, 426, 0, 0,
	0, 0, 210, 211, 212, 427, 428, 213, 429, 214,
	215, 430, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 223, 431, 432, 433, 0, 224, 434, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 0, 237,
	238, 0, 0, 0, 0, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 435, 436, 0, 245, 0, 246,
	0, 247, 0, 0, 248, 249, 250, 0, 251, 0,
	252, 253, 0, 437, 254, 255, 257, 260, 256, 261,
	262, 438, 439, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 440, 266, 267, 0, 268, 0, 269,
	0, 0, 0, 270, 0, 271, 441, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 443, 444, 445,
	0, 0, 449, 280, 0, 0, 0, 0, 279, 281,
	288, 0, 0, 282, 446, 284, 283, 285, 286, 287,
	447, 0, 448, 0, 289, 0, 0, 290, 291, 292,
	0, 293, 294, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 450, 0, 301, 302, 0, 0, 303,
	304, 0, 0, 305, 0, 306, 0, 0, 307, 308,
	310, 311, 309, 0, 312, 313, 315, 314, 0, 0,
	0, 0, 451, 452, 316, 317, 0, 318, 319, 0,
	0, 320, 321, 0, 0, 322, 453, 0, 323, 0,
	454, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	455, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 457, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	0, 355, 356, 357, 358, 458, 359, 0, 363, 364,
	365, 366, 367, 368, 369, 0, 375, 376, 370, 372,
	373, 374, 371, 377, 378, 0, 379, 360, 361, 380,
	0, 381, 459, 382, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 392, 388, 389, 390, 460, 0, 394,
	395, 0, 396, 397, 398, 399, 400, 258, 401, 259,
	402, 0, 461, 462, 463, 403, 0, 0, 404, 405,
	464, 465, 0, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 0, 415, 0, 413, 416, 417,
	418, 466, 467, 468, 0, 420, 419, 469, 520, 0,
	202, 0, 421, 422, 470, 423, 424, 425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 206, 207,
	208, 0, 209, 0, 0, 0, 0, 426, 0, 0,
	0, 0, 210, 211, 212, 427, 428, 213, 429, 214,
	215, 430, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 223, 431, 432, 938, 0, 224, 434, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 0, 237,
	238, 0, 0, 0, 0, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 435, 436, 0, 245, 0, 246,
	0, 247, 0, 0, 248, 249, 250, 0, 251, 0,
	252, 253, 0, 437, 254, 255, 257, 260, 256, 261,
	262, 438, 439, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 440, 266, 267, 0, 268, 0, 269,
	0, 0, 0, 270, 0, 271, 441, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 443, 444, 445,
	0, 0, 449, 280, 0, 0, 0, 0, 279, 281,
	288, 0, 0, 282, 446, 284, 283, 285, 286, 287,
	447, 0, 448, 0, 289, 0, 0, 290, 291, 292,
	0, 293, 294, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 450, 0, 301, 302, 0, 0, 303,
	304, 0, 0, 305, 0, 306, 0, 0, 307, 308,
	310, 311, 521, 0, 312, 313, 315, 314, 0, 0,
	0, 0, 451, 452, 316, 317, 0, 318, 319, 0,
	0, 320, 321, 0, 0, 322, 453, 0, 323, 0,
	454, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	455, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 457, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	0, 355, 356, 357, 358, 458, 359, 0, 363, 364,
	517, 366, 367, 368, 369, 0, 375, 376, 370, 372,
	373, 374, 371, 377, 378, 0, 379, 360, 361, 380,
	0, 381, 459, 382, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 392, 388, 389, 390, 460, 0, 394,
	395, 0, 396, 397, 398, 399, 400, 258, 401, 259,
	402, 0, 516, 462, 463, 403, 0, 0, 404, 939,
	464, 465, 0, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 0, 415, 0, 413, 416, 417,
	418, 466, 467, 468, 202, 420, 419, 469, 0, 0,
	0, 0, 421, 422, 470, 423, 424, 425, 0, 0,
	0, 205, 206, 207, 208, 922, 209, 0, 0, 0,
	0, 426, 0, 0, 0, 0, 210, 211, 212, 427,
	428, 213, 429, 214, 215, 430, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 223, 431, 432, 433,
	0, 224, 434, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 231, 232, 233, 230, 0, 234, 0, 235,
	236, 0, 0, 237, 238, 0, 0, 0, 0, 0,
	0, 0, 239, 240, 241, 242, 243, 244, 435, 436,
	0, 245, 0, 246, 0, 247, 0, 0, 248, 249,
	250, 0, 251, 0, 252, 253, 0, 437, 254, 255,
	257, 260, 256, 261, 262, 438, 439, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 440, 266, 267,
	0, 268, 0, 269, 0, 0, 0, 270, 0, 271,
	441, 0, 442, 272, 0, 273, 274, 275, 276, 277,
	278, 443, 444, 445, 0, 0, 449, 280, 0, 0,
	0, 0, 279, 281, 288, 0, 0, 282, 446, 284,
	283, 285, 286, 287, 447, 0, 448, 0, 289, 0,
	0, 290, 291, 292, 0, 293, 294, 0, 0, 295,
	296, 297, 0, 299, 298, 0, 300, 450, 0, 301,
	302, 0, 0, 303, 304, 0, 0, 305, 0, 306,
	0, 0, 307, 308, 310, 311, 309, 0, 312, 313,
	315, 314, 0, 0, 0, 0, 451, 452, 316, 317,
	0, 318, 319, 0, 0, 320, 321, 0, 0, 322,
	453, 0, 323, 0, 454, 324, 325, 326, 327, 328,
	329, 330, 0, 331, 455, 332, 456, 333, 0, 334,
	335, 336, 337, 338, 339, 457, 340, 341, 0, 342,
	343, 344, 345, 346, 0, 348, 349, 347, 350, 351,
	352, 353, 0, 354, 0, 355, 356, 357, 358, 458,
	359, 0, 363, 364, 365, 366, 367, 368, 369, 0,
	375, 376, 370, 372, 373, 374, 371, 377, 378, 0,
	379, 360, 361, 380, 0, 381, 459, 382, 383, 0,
	393, 384, 385, 386, 362, 387, 391, 392, 388, 389,
	390, 460, 0, 394, 395, 0, 396, 397, 398, 399,
	400, 258, 401, 259, 402, 0, 461, 462, 463, 403,
	0, 0, 404, 405, 464, 465, 0, 406, 407, 0,
	408, 409, 0, 0, 410, 411, 412, 414, 0, 415,
	0, 413, 416, 417, 418, 466, 467, 468, 0, 420,
	419, 469, 520, 0, 202, 0, 421, 422, 470, 423,
	424, 425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 206, 207, 208, 0, 209, 0, 0, 0,
	0, 426, 0, 0, 0, 0, 210, 211, 212, 427,
	428, 213, 429, 214, 215, 430, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 223, 431, 432, 433,
	0, 510, 434, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 231, 232, 233, 230, 0, 234, 0, 235,
	236, 0, 0, 237, 238, 0, 0, 0, 0, 0,
	0, 0, 239, 240, 241, 242, 243, 244, 435, 436,
	0, 245, 0, 246, 0, 247, 0, 0, 248, 249,
	250, 0, 251, 0, 252, 253, 0, 437, 254, 255,
	257, 260, 256, 261, 262, 438, 439, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 440, 266, 267,
	0, 268, 0, 269, 0, 0, 0, 270, 0, 271,
	441, 0, 442, 272, 0, 273, 274, 275, 276, 277,
	278, 443, 444, 445, 0, 0, 449, 280, 0, 0,
	0, 0, 279, 281, 288, 0, 0, 282, 446, 284,
	283, 285, 286, 287, 447, 0, 448, 0, 289, 0,
	0, 290, 291, 292, 0, 293, 294, 0, 0, 295,
	296, 297, 0, 299, 298, 0, 300, 450, 0, 301,
	302, 0, 0, 303, 509, 0, 0, 305, 0, 306,
	0, 0, 307, 308, 310, 311, 521, 0, 312, 313,
	315, 314, 0, 0, 0, 0, 451, 452, 316, 317,
	0, 318, 319, 0, 0, 320, 321, 0, 0, 322,
	453, 0, 323, 0, 454, 324, 325, 326, 327, 328,
	329, 330, 0, 331, 455, 332, 456, 333, 0, 334,
	335, 336, 337, 338, 339, 457, 340, 341, 0, 342,
	343, 344, 345, 346, 0, 348, 349, 347, 350, 351,
	352, 353, 0, 354, 0, 355, 356, 357, 358, 511,
	359, 0, 363, 364, 517, 366, 367, 368, 369, 0,
	375, 376, 370, 372, 373, 374, 371, 512, 378, 0,
	379, 360, 361, 380, 0, 381, 459, 382, 383, 0,
	393, 384, 385, 386, 362, 387, 391, 392, 388, 389,
	390, 460, 0, 394, 395, 0, 396, 397, 398, 399,
	400, 258, 401, 259, 402, 0, 516, 462, 463, 403,
	0, 0, 404, 514, 464, 465, 0, 406, 407, 0,
	408, 409, 0, 0, 410, 411, 412, 414, 0, 415,
	0, 413, 416, 417, 418, 466, 467, 468, 0, 420,
	419, 469, 505, 0, 202, 0, 421, 422, 470, 423,
	424, 425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 206, 207, 208, 0, 209, 0, 0, 0,
	0, 426, 0, 0, 0, 0, 210, 211, 212, 427,
	428, 213, 429, 214, 215, 430, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 223, 431, 432, 433,
	0, 224, 434, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 231, 232, 233, 230, 0, 234, 0, 235,
	236, 0, 0, 237, 238, 0, 0, 0, 0, 0,
	0, 0, 239, 240, 241, 242, 243, 244, 435, 436,
	0, 245, 0, 246, 0, 247, 0, 0, 248, 249,
	250, 0, 251, 0, 252, 253, 0, 437, 254, 255,
	257, 260, 256, 261, 262, 438, 439, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 440, 266, 267,
	0, 268, 0, 269, 0, 0, 0, 270, 0, 271,
	441, 0, 442, 272, 0, 273, 274, 275, 276, 277,
	278, 443, 444, 445, 0, 0, 449, 280, 0, 0,
	0, 0, 279, 281, 288, 0, 0, 282, 446, 284,
	283, 285, 286, 287, 447, 0, 448, 0, 289, 0,
	0, 290, 291, 292, 0, 293, 294, 0, 0, 295,
	296, 297, 0, 299, 298, 0, 300, 450, 0, 301,
	302, 0, 0, 303, 304, 0, 0, 305, 0, 306,
	0, 0, 307, 308, 310, 311, 309, 0, 312, 313,
	315, 314, 0, 0, 0, 0, 451, 452, 316, 317,
	0, 318, 319, 0, 0, 320, 321, 0, 0, 322,
	453, 0, 323, 0, 454, 324, 325, 326, 327, 328,
	329, 330, 0, 331, 455, 332, 456, 333, 0, 334,
	335, 336, 337, 338, 339, 457, 340, 341, 0, 342,
	343, 344, 345, 346, 0, 348, 349, 347, 350, 351,
	352, 353, 0, 354, 0, 355, 356, 357, 358, 458,
	359, 0, 506, 364, 365, 366, 367, 368, 369, 0,
	375, 376, 370, 372, 373, 374, 371, 377, 378, 0,
	379, 360, 361, 380, 0, 381, 459, 382, 383, 0,
	393, 384, 385, 386, 362, 387, 391, 392, 388, 389,
	390, 460, 0, 394, 395, 0, 396, 397, 398, 399,
	400, 258, 401, 259, 402, 0, 461, 462, 463, 403,
	0, 0, 404, 405, 464, 465, 0, 406, 407, 0,
	408, 409, 0, 0, 410, 411, 412, 414, 0, 415,
	0, 413, 416, 417, 418, 466, 467, 468, 0, 420,
	419, 469, 503, 0, 202, 0, 421, 422, 470, 423,
	424, 425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 206, 207, 208, 0, 209, 0, 0, 0,
	0, 426, 0, 0, 0, 0, 210, 211, 212, 427,
	428, 213, 429, 214, 215, 430, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 223, 431, 432, 433,
	0, 224, 434, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 231, 232, 233, 230, 0, 234, 0, 235,
	236, 0, 0, 237, 238, 0, 0, 0, 0, 0,
	0, 0, 239, 240, 241, 242, 243, 244, 435, 436,
	0, 245, 0, 246, 0, 247, 0, 0, 248, 249,
	250, 0, 251, 0, 252, 253, 0, 437, 254, 255,
	257, 260, 256, 261, 262, 438, 439, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 440, 266, 267,
	0, 268, 0, 269, 0, 0, 0, 270, 0, 271,
	441, 0, 442, 272, 0, 273, 274, 275, 276, 277,
	278, 443, 444, 445, 0, 0, 449, 280, 0, 0,
	0, 0, 279, 281, 288, 0, 0, 282, 446, 284,
	283, 285, 286, 287, 447, 0, 448, 0, 289, 0,
	0, 290, 291, 292, 0, 293, 294, 0, 0, 295,
	296, 297, 0, 299, 298, 0, 300, 450, 0, 301,
	302, 0, 0, 303, 304, 0, 0, 305, 0, 306,
	0, 0, 307, 308, 310, 311, 309, 0, 312, 313,
	315, 314, 0, 0, 0, 0, 451, 452, 316, 317,
	0, 318, 319, 0, 0, 320, 321, 0, 0, 322,
	453, 0, 323, 0, 454, 324, 325, 326, 327, 328,
	329, 330, 0, 331, 455, 332, 456, 333, 0, 334,
	335, 336, 337, 338, 339, 457, 340, 341, 0, 342,
	343, 344, 345, 346, 0, 348, 349, 347, 350, 351,
	352, 353, 0, 354, 0, 355, 356, 357, 358, 458,
	359, 0, 363, 364, 365, 366, 367, 368, 369, 0,
	375, 376, 370, 372, 373, 374, 371, 377, 378, 0,
	379, 360, 361, 380, 0, 381, 459, 382, 383, 0,
	393, 384, 385, 386, 362, 387, 391, 392, 388, 389,
	390, 460, 0, 394, 395, 0, 396, 397, 398, 399,
	400, 258, 401, 259, 402, 0, 461, 462, 463, 403,
	0, 0, 404, 405, 464, 465, 0, 406, 407, 0,
	408, 409, 0, 0, 410, 411, 412, 414, 0, 415,
	0, 413, 416, 417, 418, 466, 467, 468, 0, 420,
	419, 469, 497, 0, 202, 0, 421, 422, 470, 423,
	424, 425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 206, 207, 208, 0, 209, 0, 0, 0,
	0, 426, 0, 0, 0, 0, 210, 211, 212, 427,
	428, 213, 429, 214, 215, 430, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 223, 431, 432, 433,
	0, 224, 434, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 231, 232, 233, 230, 0, 234, 0, 235,
	236, 0, 0, 237, 238, 0, 0, 0, 0, 0,
	0, 0, 239, 240, 241, 242, 243, 244, 435, 436,
	0, 245, 0, 246, 0, 247, 0, 0, 248, 249,
	250, 0, 251, 0, 252, 253, 0, 437, 254, 255,
	257, 260, 256, 261, 262, 438, 439, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 440, 266, 267,
	0, 268, 0, 269, 0, 0, 0, 270, 0, 271,
	441, 0, 442, 272, 0, 273, 274, 275, 276, 277,
	278, 443, 444, 445, 0, 0, 449, 280, 0, 0,
	0, 0, 279, 281, 288, 0, 0, 282, 446, 284,
	283, 285, 286, 287, 447, 0, 448, 0, 289, 0,
	0, 290, 291, 292, 0, 293, 294, 0, 0, 295,
	296, 297, 0, 299, 298, 0, 300, 450, 0, 301,
	302, 0, 0, 303, 304, 0, 0, 305, 0, 306,
	0, 0, 307, 308, 310, 311, 309, 0, 312, 313,
	315, 314, 0, 0, 0, 0, 451, 452, 316, 317,
	0, 318, 319, 0, 0, 320, 321, 0, 0, 322,
	453, 0, 323, 0, 454, 324, 325, 326, 327, 328,
	329, 330, 0, 331, 455, 332, 456, 333, 0, 334,
	335, 336, 337, 338, 339, 457, 340, 341, 0, 342,
	343, 344, 345, 346, 0, 348, 349, 347, 350, 351,
	352, 353, 0, 354, 0, 355, 356, 357, 358, 458,
	359, 0, 363, 364, 365, 366, 367, 368, 369, 0,
	375, 376, 370, 372, 373, 374, 371, 377, 378, 0,
	379, 360, 361, 380, 0, 381, 459, 382, 383, 0,
	393, 384, 385, 386, 362, 387, 391, 392, 388, 389,
	390, 460, 0, 394, 395, 0, 396, 397, 398, 399,
	400, 258, 401, 259, 402, 0, 461, 462, 463, 403,
	0, 0, 404, 405, 464, 465, 0, 406, 407, 0,
	408, 409, 0, 0, 410, 411, 412, 414, 0, 415,
	0, 413, 416, 417, 418, 466, 467, 468, 0, 420,
	419, 469, 473, 0, 202, 0, 421, 422, 470, 423,
	424, 425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 206, 207, 208, 0, 209, 0, 0, 0,
	0, 426, 0, 0, 0, 0, 210, 211, 212, 427,
	428, 213, 429, 214, 215, 430, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 223, 431, 432, 433,
	0, 224, 434, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 231, 232, 233, 230, 0, 234, 0, 235,
	236, 0, 0, 237, 238, 0, 0, 0, 0, 0,
	0, 0, 239, 240, 241, 242, 243, 244, 435, 436,
	0, 245, 0, 246, 0, 247, 0, 0, 248, 249,
	250, 0, 251, 0, 252, 253, 0, 437, 254, 255,
	257, 260, 256, 261, 262, 438, 439, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 440, 266, 267,
	0, 268, 0, 269, 0, 0, 0, 270, 0, 271,
	441, 0, 442, 272, 0, 273, 274, 275, 276, 277,
	278, 443, 444, 445, 0, 0, 449, 280, 0, 0,
	0, 0, 279, 281, 288, 0, 0, 282, 446, 284,
	283, 285, 286, 287, 447, 0, 448, 0, 289, 0,
	0, 290, 291, 292, 0, 293, 294, 0, 0, 295,
	296, 297, 0, 299, 298, 0, 300, 450, 0, 301,
	302, 0, 0, 303, 304, 0, 0, 305, 0, 306,
	0, 0, 307, 308, 310, 311, 309, 0, 312, 313,
	315, 314, 0, 0, 0, 0, 451, 452, 316, 317,
	0, 318, 319, 0, 0, 320, 321, 0, 0, 322,
	453, 0, 323, 0, 454, 324, 325, 326, 327, 328,
	329, 330, 0, 331, 455, 332, 456, 333, 0, 334,
	335, 336, 337, 338, 339, 457, 340, 341, 0, 342,
	343, 344, 345, 346, 0, 348, 349, 347, 350, 351,
	352, 353, 0, 354, 0, 355, 356, 357, 358, 458,
	359, 0, 363, 364, 365, 366, 367, 368, 369, 0,
	375, 376, 370, 372, 373, 374, 371, 377, 378, 0,
	379, 360, 361, 380, 0, 381, 459, 382, 383, 0,
	393, 384, 385, 386, 362, 387, 391, 392, 388, 389,
	390, 460, 0, 394, 395, 0, 396, 397, 398, 399,
	400, 258, 401, 259, 402, 0, 461, 462, 463, 403,
	0, 0, 404, 405, 464, 465, 0, 406, 407, 0,
	408, 409, 0, 0, 410, 411, 412, 414, 0, 415,
	0, 413, 416, 417, 418, 466, 467, 468, 202, 420,
	419, 469, 0, 0, 0, 0, 421, 422, 470, 423,
	424, 425, 0, 0, 0, 205, 206, 207, 208, 0,
	209, 0, 0, 0, 0, 426, 0, 0, 0, 0,
	210, 211, 212, 427, 428, 213, 429, 214, 215, 430,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	223, 431, 432, 433, 0, 224, 434, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 231, 232, 233, 230,
	0, 234, 0, 235, 236, 0, 0, 237, 238, 0,
	0, 0, 0, 0, 0, 0, 239, 240, 241, 242,
	243, 244, 435, 436, 0, 245, 0, 246, 0, 247,
	0, 0, 248, 249, 250, 0, 251, 0, 252, 253,
	0, 437, 254, 255, 257, 260, 256, 261, 262, 438,
	439, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	265, 440, 266, 267, 0, 268, 0, 269, 0, 0,
	0, 270, 0, 271, 441, 0, 442, 272, 0, 273,
	274, 275, 276, 277, 278, 443, 444, 445, 0, 0,
	449, 280, 0, 0, 0, 0, 279, 281, 288, 0,
	0, 282, 446, 284, 283, 285, 286, 287, 447, 0,
	448, 0, 289, 0, 0, 290, 291, 292, 0, 293,
	294, 0, 0, 295, 296, 297, 0, 299, 298, 0,
	300, 450, 0, 301, 302, 0, 0, 303, 304, 0,
	0, 305, 0, 306, 0, 0, 307, 308, 310, 311,
	309, 0, 312, 313, 315, 314, 0, 0, 0, 0,
	451, 452, 316, 317, 0, 318, 319, 0, 0, 320,
	321, 0, 0, 322, 453, 0, 323, 0, 454, 324,
	325, 326, 327, 328, 329, 330, 0, 331, 455, 332,
	456, 333, 0, 334, 335, 336, 337, 338, 339, 457,
	340, 341, 0, 342, 343, 344, 345, 346, 0, 348,
	349, 347, 350, 351, 352, 353, 0, 354, 0, 355,
	356, 357, 358, 458, 359, 0, 363, 364, 365, 366,
	367, 368, 369, 0, 375, 376, 370, 372, 373, 374,
	371, 377, 378, 0, 379, 360, 361, 380, 0, 381,
	459, 382, 383, 0, 393, 384, 385, 386, 362, 387,
	391, 392, 388, 389, 390, 460, 0, 394, 395, 0,
	396, 397, 398, 399, 400, 258, 401, 259, 402, 0,
	461, 462, 463, 403, 0, 0, 404, 405, 464, 465,
	0, 406, 407, 0, 408, 409, 0, 0, 410, 411,
	412, 414, 0, 415, 0, 413, 416, 417, 418, 466,
	467, 468, 202, 420, 419, 469, 0, 0, 0, 0,
	421, 422, 470, 423, 424, 425, 0, 0, 0, 205,
	206, 207, 208, 0, 209, 0, 0, 0, 0, 426,
	0, 0, 0, 0, 210, 211, 212, 427, 428, 213,
	429, 214, 215, 430, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 223, 431, 432, 433, 0, 224,
	434, 0, 0, 0, 225, 226, 227, 228, 229, 0,
	231, 232, 233, 230, 0, 234, 0, 235, 236, 0,
	0, 237, 238, 0, 0, 0, 0, 0, 0, 0,
	239, 240, 241, 242, 243, 244, 435, 436, 0, 245,
	0, 246, 0, 247, 0, 0, 248, 249, 250, 0,
	251, 0, 252, 253, 0, 437, 254, 255, 257, 260,
	256, 261, 262, 438, 439, 0, 0, 0, 0, 0,
	0, 0, 263, 264, 265, 440, 266, 267, 0, 268,
	0, 269, 0, 0, 0, 270, 0, 271, 441, 0,
	442, 272, 0, 273, 274, 275, 276, 277, 278, 2377,
	444, 445, 0, 0, 449, 280, 0, 0, 0, 0,
	279, 281, 288, 0, 0, 282, 446, 284, 283, 285,
	286, 287, 447, 0, 448, 0, 289, 0, 0, 290,
	291, 292, 0, 293, 294, 0, 0, 295, 296, 297,
	0, 299, 298, 0, 300, 450, 0, 301, 302, 0,
	0, 303, 304, 0, 0, 305, 0, 306, 0, 0,
	307, 308, 310, 311, 309, 0, 312, 313, 315, 314,
	0, 0, 0, 0, 451, 452, 316, 317, 0, 318,
	319, 0, 0, 320, 321, 0, 0, 322, 453, 0,
	323, 0, 454, 324, 325, 326, 327, 328, 329, 330,
	0, 331, 455, 332, 456, 333, 0, 334, 335, 336,
	337, 338, 339, 457, 340, 341, 0, 342, 343, 344,
	345, 346, 0, 348, 349, 347, 350, 351, 352, 353,
	0, 354, 0, 355, 356, 357, 358, 458, 359, 0,
	363, 364, 365, 366, 367, 368, 369, 0, 375, 376,
	370, 372, 373, 374, 371, 377, 378, 0, 379, 360,
	361, 380, 0, 381, 459, 382, 383, 0, 393, 384,
	385, 386, 362, 387, 391, 392, 388, 389, 390, 460,
	0, 394, 395, 0, 396, 397, 398, 399, 400, 258,
	401, 259, 402, 0, 461, 462, 463, 403, 0, 0,
	404, 405, 464, 465, 0, 406, 407, 0, 408, 409,
	0, 0, 410, 411, 412, 414, 0, 415, 0, 413,
	416, 417, 418, 466, 467, 468, 202, 420, 419, 469,
	0, 0, 0, 0, 421, 422, 470, 423, 424, 425,
	0, 0, 0, 205, 206, 207, 208, 0, 209, 0,
	0, 0, 0, 426, 0, 0, 0, 0, 210, 211,
	212, 427, 428, 213, 429, 214, 215, 430, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 223, 431,
	432, 433, 0, 224, 434, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 231, 232, 233, 230, 0, 234,
	0, 235, 236, 0, 0, 237, 238, 0, 0, 0,
	0, 0, 0, 0, 239, 240, 241, 242, 243, 244,
	435, 436, 0, 245, 0, 246, 0, 247, 0, 0,
	248, 249, 250, 0, 251, 0, 252, 253, 0, 437,
	254, 255, 257, 260, 256, 261, 262, 438, 439, 0,
	0, 0, 0, 0, 0, 0, 263, 264, 265, 440,
	266, 267, 0, 268, 0, 269, 0, 0, 0, 270,
	0, 271, 441, 0, 442, 272, 0, 273, 274, 275,
	276, 277, 278, 2375, 444, 445, 0, 0, 449, 280,
	0, 0, 0, 0, 279, 281, 288, 0, 0, 282,
	446, 284, 283, 285, 286, 287, 447, 0, 448, 0,
	289, 0, 0, 290, 291, 292, 0, 293, 294, 0,
	0, 295, 296, 297, 0, 299, 298, 0, 300, 450,
	0, 301, 302, 0, 0, 303, 304, 0, 0, 305,
	0, 306, 0, 0, 307, 308, 310, 311, 309, 0,
	312, 313, 315, 314, 0, 0, 0, 0, 451, 452,
	316, 317, 0, 318, 319, 0, 0, 320, 321, 0,
	0, 322, 453, 0, 323, 0, 454, 324, 325, 326,
	327, 328, 329, 330, 0, 331, 455, 332, 456, 333,
	0, 334, 335, 336, 337, 338, 339, 457, 340, 341,
	0, 342, 343, 344, 345, 346, 0, 348, 349, 347,
	350, 351, 352, 353, 0, 354, 0, 355, 356, 357,
	358, 458, 359, 0, 363, 364, 365, 366, 367, 368,
	369, 0, 375, 376, 370, 372, 373, 374, 371, 377,
	378, 0, 379, 360, 361, 380, 0, 381, 459, 382,
	383, 0, 393, 384, 385, 386, 362, 387, 391, 392,
	388, 389, 390, 460, 0, 394, 395, 0, 396, 397,
	398, 399, 400, 258, 401, 259, 402, 0, 461, 462,
	463, 403, 0, 0, 404, 405, 464, 465, 0, 406,
	407, 0, 408, 409, 0, 0, 410, 411, 412, 414,
	0, 415, 0, 413, 416, 417, 418, 466, 467, 468,
	202, 420, 419, 469, 0, 0, 0, 0, 421, 422,
	470, 423, 424, 425, 0, 0, 0, 205, 206, 207,
	208, 0, 209, 0, 0, 0, 0, 426, 0, 0,
	0, 0, 210, 211, 212, 427, 428, 213, 429, 214,
	215, 430, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 223, 431, 432, 433, 0, 224, 434, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 0, 237,
	238, 0, 0, 0, 0, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 435, 436, 0, 245, 0, 246,
	0, 247, 0, 0, 248, 249, 250, 0, 251, 0,
	252, 253, 0, 437, 254, 255, 257, 260, 256, 261,
	262, 438, 439, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 440, 266, 267, 0, 268, 0, 269,
	0, 0, 0, 270, 0, 271, 441, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 2364, 444, 445,
	0, 0, 449, 280, 0, 0, 0, 0, 279, 281,
	288, 0, 0, 282, 446, 284, 283, 285, 286, 287,
	447, 0, 448, 0, 289, 0, 0, 290, 291, 292,
	0, 293, 294, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 450, 0, 301, 302, 0, 0, 303,
	304, 0, 0, 305, 0, 306, 0, 0, 307, 308,
	310, 311, 309, 0, 312, 313, 315, 314, 0, 0,
	0, 0, 451, 452, 316, 317, 0, 318, 319, 0,
	0, 320, 321, 0, 0, 322, 453, 0, 323, 0,
	454, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	455, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 457, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	0, 355, 356, 357, 358, 458, 359, 0, 363, 364,
	365, 366, 367, 368, 369, 0, 375, 376, 370, 372,
	373, 374, 371, 377, 378, 0, 379, 360, 361, 380,
	0, 381, 459, 382, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 392, 388, 389, 390, 460, 0, 394,
	395, 0, 396, 397, 398, 399, 400, 258, 401, 259,
	402, 0, 461, 462, 463, 403, 0, 0, 404, 405,
	464, 465, 0, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 0, 415, 0, 413, 416, 417,
	418, 466, 467, 468, 202, 420, 419, 469, 0, 0,
	0, 0, 421, 422, 470, 423, 424, 425, 0, 0,
	0, 205, 206, 207, 208, 0, 209, 0, 0, 0,
	0, 426, 0, 0, 0, 0, 210, 211, 212, 427,
	428, 213, 429, 214, 215, 430, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 223, 431, 432, 433,
	0, 224, 434, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 231, 232, 233, 230, 0, 234, 0, 235,
	236, 0, 0, 237, 238, 0, 0, 0, 0, 0,
	0, 0, 239, 240, 241, 242, 243, 244, 435, 436,
	0, 245, 0, 246, 0, 247, 0, 0, 248, 249,
	250, 0, 251, 0, 252, 253, 0, 437, 254, 255,
	257, 260, 256, 261, 262, 438, 439, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 440, 266, 267,
	0, 268, 0, 269, 0, 0, 0, 270, 0, 271,
	441, 0, 442, 272, 0, 273, 274, 275, 276, 277,
	278, 2096, 444, 445, 0, 0, 449, 280, 0, 0,
	0, 0, 279, 281, 288, 0, 0, 282, 446, 284,
	283, 285, 286, 287, 447, 0, 448, 0, 289, 0,
	0, 290, 291, 292, 0, 293, 294, 0, 0, 295,
	296, 297, 0, 299, 298, 0, 300, 450, 0, 301,
	302, 0, 0, 303, 304, 0, 0, 305, 0, 306,
	0, 0, 307, 308, 310, 311, 309, 0, 312, 313,
	315, 314, 0, 0, 0, 0, 451, 452, 316, 317,
	0, 318, 319, 0, 0, 320, 321, 0, 0, 322,
	453, 0, 323, 0, 454, 324, 325, 326, 327, 328,
	329, 330, 0, 331, 455, 332, 456, 333, 0, 334,
	335, 336, 337, 338, 339, 457, 340, 341, 0, 342,
	343, 344, 345, 346, 0, 348, 349, 347, 350, 351,
	352, 353, 0, 354, 0, 355, 356, 357, 358, 458,
	359, 0, 363, 364, 365, 366, 367, 368, 369, 0,
	375, 376, 370, 372, 373, 374, 371, 377, 378, 0,
	379, 360, 361, 380, 0, 381, 459, 382, 383, 0,
	393, 384, 385, 386, 362, 387, 391, 392, 388, 389,
	390, 460, 0, 394, 395, 0, 396, 397, 398, 399,
	400, 258, 401, 259, 402, 0, 461, 462, 463, 403,
	0, 0, 404, 405, 464, 465, 0, 406, 407, 0,
	408, 409, 0, 0, 410, 411, 412, 414, 0, 415,
	0, 413, 416, 417, 418, 466, 467, 468, 202, 420,
	419, 469, 0, 0, 0, 0, 421, 422, 470, 423,
	424, 425, 0, 0, 0, 205, 206, 207, 208, 0,
	209, 0, 0, 0, 0, 426, 0, 0, 0, 0,
	210, 211, 212, 427, 428, 213, 429, 214, 215, 430,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	223, 431, 432, 433, 0, 224, 434, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 231, 232, 233, 230,
	0, 234, 0, 235, 236, 0, 0, 237, 238, 0,
	0, 0, 0, 0, 0, 0, 239, 240, 241, 242,
	243, 244, 435, 436, 0, 245, 0, 246, 0, 247,
	0, 0, 248, 249, 250, 0, 251, 0, 252, 253,
	0, 437, 254, 255, 257, 260, 256, 261, 262, 438,
	439, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	265, 440, 266, 267, 0, 268, 0, 269, 0, 0,
	0, 270, 0, 271, 441, 0, 442, 272, 0, 273,
	274, 275, 276, 277, 278, 443, 444, 445, 0, 0,
	449, 280, 0, 0, 0, 0, 279, 281, 288, 0,
	0, 282, 446, 284, 283, 285, 286, 287, 447, 0,
	448, 0, 289, 0, 0, 290, 291, 292, 0, 293,
	294, 0, 0, 295, 296, 297, 0, 299, 298, 0,
	300, 450, 0, 301, 302, 0, 0, 303, 304, 0,
	0, 305, 0, 306, 0, 0, 307, 308, 310, 311,
	309, 0, 312, 313, 315, 314, 0, 0, 0, 0,
	451, 452, 316, 317, 0, 318, 319, 0, 0, 320,
	321, 0, 0, 322, 453, 0, 323, 0, 454, 324,
	325, 326, 327, 328, 329, 330, 0, 331, 455, 332,
	456, 333, 0, 334, 335, 336, 337, 338, 339, 457,
	340, 341, 0, 342, 343, 344, 345, 346, 0, 348,
	349, 347, 350, 351, 352, 353, 0, 354, 0, 355,
	356, 357, 358, 458, 359, 0, 506, 364, 365, 366,
	367, 368, 369, 0, 375, 376, 370, 372, 373, 374,
	371, 377, 378, 0, 379, 360, 361, 380, 0, 381,
	459, 382, 383, 0, 393, 384, 385, 386, 362, 387,
	391, 392, 388, 389, 390, 460, 0, 394, 395, 0,
	396, 397, 398, 399, 400, 258, 401, 259, 402, 0,
	461, 462, 463, 403, 0, 0, 404, 405, 464, 465,
	0, 406, 407, 0, 408, 409, 0, 0, 410, 411,
	412, 414, 0, 415, 0, 413, 416, 417, 418, 466,
	467, 468, 202, 420, 419, 469, 0, 0, 0, 0,
	421, 422, 470, 423, 424, 425, 0, 0, 0, 205,
	206, 207, 208, 0, 209, 0, 0, 0, 0, 426,
	0, 1647, 0, 0, 210, 211, 212, 427, 428, 213,
	429, 214, 215, 430, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 223, 431, 432, 433, 0, 224,
	434, 0, 0, 0, 225, 226, 227, 228, 229, 0,
	231, 232, 233, 230, 0, 234, 0, 235, 236, 0,
	0, 237, 238, 0, 0, 0, 0, 0, 0, 0,
	239, 240, 241, 242, 243, 244, 435, 436, 0, 245,
	0, 246, 0, 247, 0, 0, 248, 249, 250, 0,
	251, 0, 252, 253, 0, 437, 254, 255, 257, 260,
	256, 261, 262, 438, 439, 0, 0, 0, 0, 0,
	0, 0, 263, 264, 265, 440, 266, 267, 0, 268,
	0, 269, 0, 0, 0, 270, 0, 271, 441, 0,
	442, 272, 0, 273, 274, 275, 276, 277, 278, 443,
	444, 445, 0, 0, 449, 280, 0, 0, 0, 0,
	279, 281, 288, 0, 0, 282, 446, 284, 283, 285,
	286, 287, 447, 0, 448, 0, 289, 0, 0, 290,
	291, 292, 0, 293, 294, 0, 0, 295, 296, 297,
	0, 299, 298, 0, 300, 450, 0, 301, 302, 0,
	0, 303, 304, 0, 0, 305, 0, 306, 0, 0,
	307, 308, 310, 311, 309, 0, 312, 313, 315, 314,
	0, 0, 0, 0, 451, 452, 316, 317, 0, 318,
	319, 0, 0, 320, 321, 0, 0, 322, 453, 0,
	323, 0, 454, 324, 325, 326, 327, 328, 329, 330,
	0, 331, 455, 332, 456, 333, 0, 334, 335, 336,
	337, 338, 339, 457, 340, 341, 0, 342, 343, 344,
	345, 346, 0, 348, 349, 347, 350, 351, 352, 353,
	0, 354, 0, 355, 356, 357, 358, 458, 359, 0,
	363, 364, 365, 366, 367, 368, 369, 0, 375, 376,
	370, 372, 373, 374, 371, 377, 378, 0, 0, 360,
	361, 380, 0, 381, 459, 382, 383, 0, 393, 384,
	385, 386, 362, 387, 391, 392, 388, 389, 390, 460,
	0, 394, 395, 0, 396, 397, 398, 399, 400, 258,
	401, 259, 402, 0, 461, 462, 463, 403, 0, 0,
	404, 405, 464, 465, 0, 406, 407, 0, 408, 409,
	0, 0, 410, 411, 412, 414, 0, 415, 0, 413,
	416, 417, 418, 466, 467, 468, 202, 420, 419, 469,
	0, 0, 0, 0, 421, 422, 470, 423, 424, 425,
	0, 0, 0, 205, 206, 207, 208, 0, 209, 0,
	0, 0, 0, 426, 0, 0, 0, 0, 210, 211,
	212, 427, 428, 213, 429, 214, 215, 430, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 223, 431,
	432, 433, 0, 224, 434, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 231, 232, 233, 230, 0, 234,
	0, 235, 236, 0, 0, 237, 238, 0, 0, 0,
	0, 0, 0, 0, 239, 240, 241, 242, 243, 244,
	435, 436, 0, 245, 0, 246, 0, 247, 0, 0,
	248, 249, 250, 0, 251, 0, 252, 253, 0, 437,
	254, 255, 257, 260, 256, 261, 262, 438, 439, 0,
	0, 0, 0, 0, 0, 0, 263, 264, 265, 440,
	266, 267, 0, 268, 0, 269, 0, 0, 0, 270,
	0, 271, 441, 0, 442, 272, 0, 273, 274, 275,
	276, 277, 278, 443, 444, 445, 0, 0, 449, 280,
	0, 0, 0, 0, 279, 281, 288, 0, 0, 282,
	446, 284, 283, 285, 286, 287, 447, 0, 448, 0,
	289, 0, 0, 290, 291, 292, 0, 293, 294, 0,
	0, 295, 296, 297, 0, 299, 298, 0, 300, 450,
	0, 301, 302, 0, 0, 303, 304, 0, 0, 305,
	0, 306, 0, 0, 307, 308, 310, 311, 309, 0,
	312, 313, 315, 314, 0, 0, 0, 0, 451, 452,
	316, 317, 0, 318, 319, 0, 0, 320, 321, 0,
	0, 322, 453, 0, 323, 0, 454, 324, 325, 326,
	327, 328, 329, 330, 0, 331, 455, 332, 456, 333,
	0, 334, 335, 336, 337, 338, 339, 457, 876, 341,
	0, 342, 343, 344, 345, 346, 0, 348, 349, 347,
	350, 351, 352, 353, 0, 354, 0, 355, 356, 357,
	358, 458, 359, 0, 363, 364, 365, 366, 367, 368,
	369, 0, 375, 376, 370, 372, 373, 374, 371, 377,
	378, 0, 379, 360, 361, 380, 0, 381, 459, 382,
	383, 0, 393, 384, 385, 386, 362, 387, 391, 392,
	388, 389, 390, 460, 0, 394, 395, 0, 396, 397,
	398, 399, 400, 258, 401, 259, 402, 0, 461, 462,
	463, 403, 0, 0, 404, 405, 464, 465, 0, 406,
	407, 0, 408, 409, 0, 0, 410, 411, 412, 414,
	0, 415, 0, 413, 416, 417, 418, 466, 467, 468,
	202, 420, 419, 469, 0, 0, 0, 0, 421, 422,
	470, 423, 424, 425, 0, 0, 0, 205, 206, 207,
	208, 0, 209, 0, 0, 0, 0, 426, 0, 0,
	0, 0, 210, 211, 212, 427, 428, 213, 429, 214,
	215, 430, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 223, 431, 432, 433, 0, 224, 434, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 0, 237,
	238, 0, 0, 0, 0, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 435, 436, 0, 245, 0, 246,
	0, 247, 0, 0, 248, 249, 250, 0, 251, 0,
	252, 253, 0, 437, 254, 255, 257, 260, 256, 261,
	262, 438, 439, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 440, 266, 267, 0, 268, 0, 269,
	0, 0, 0, 270, 0, 271, 441, 0, 442, 0,
	0, 273, 274, 275, 276, 277, 278, 443, 444, 445,
	0, 0, 449, 280, 0, 0, 0, 0, 279, 281,
	288, 0, 0, 282, 446, 284, 283, 285, 286, 287,
	447, 0, 448, 0, 289, 0, 0, 290, 291, 292,
	0, 293, 294, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 450, 0, 301, 302, 0, 0, 303,
	304, 0, 0, 305, 0, 306, 0, 0, 307, 308,
	310, 311, 309, 0, 312, 313, 315, 314, 0, 0,
	0, 0, 451, 452, 316, 317, 0, 318, 319, 0,
	0, 320, 321, 0, 0, 322, 453, 0, 323, 0,
	454, 324, 325, 326, 0, 328, 329, 330, 0, 331,
	455, 332, 456, 333, 0, 334, 335, 336, 0, 338,
	339, 457, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	0, 355, 356, 357, 358, 458, 0, 0, 363, 364,
	365, 366, 367, 368, 369, 0, 375, 376, 370, 372,
	373, 374, 371, 377, 378, 0, 379, 360, 361, 380,
	0, 381, 459, 382, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 392, 388, 389, 390, 460, 0, 394,
	395, 0, 396, 397, 398, 399, 400, 258, 401, 259,
	402, 0, 461, 462, 463, 403, 0, 0, 404, 405,
	464, 465, 0, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 0, 415, 0, 413, 416, 417,
	418, 466, 467, 468, 0, 420, 419, 469, 0, 0,
	0, 0, 421, 422, 470, 423, 424, 425, 1276, 1277,
	0, 1309, 1310, 1311, 1319, 1320, 1321, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1312, 0, 0, 0,
	0, 0, 0, 1279, 0, 0, 1325, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1278, 0, 0, 0, 0, 0, 0, 0, 1298, 0,
	0, 0, 0, 0, 0, 1295, 0, 0, 0, 0,
	1276, 1277, 0, 1309, 1310, 1311, 1319, 1320, 1321, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1312, 0,
	0, 0, 0, 0, 0, 1279, 0, 0, 1325, 0,
	0, 2252, 2253, 0, 2270, 2271, 2272, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1301, 1302, 1303,
	1304, 0, 1278, 0, 0, 0, 0, 1284, 0, 0,
	1298, 0, 0, 0, 0, 0, 0, 1295, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1316, 1326, 0, 0, 1306, 1307, 1308, 0, 0,
	0, 2267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1322, 1323, 0, 0,
	0, 0, 0, 0, 1293, 1294, 0, 0, 0, 1301,
	1302, 1303, 1304, 0, 0, 0, 0, 0, 1314, 1284,
	0, 0, 0, 0, 0, 1299, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1324, 0, 1316, 1326, 0, 0, 1306, 1307, 1308,
	2258, 0, 0, 0, 1313, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1322, 1323,
	0, 0, 0, 0, 0, 0, 1293, 1294, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1314, 1305, 0, 0, 0, 0, 0, 1299, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1300, 0,
	0, 0, 0, 1324, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1313, 0, 2268, 0,
	0, 1317, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1305, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1300, 0, 1276, 1277, 0, 1309, 1310, 1311, 1319, 1320,
	1321, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1312, 0, 0, 1317, 0, 0, 0, 1279, 0, 1315,
	1325, 2269, 1290, 1291, 1297, 1296, 1292, 1318, 0, 1289,
	1287, 1288, 1280, 1281, 1282, 1283, 1285, 1286, 0, 0,
	0, 0, 0, 0, 1278, 0, 2759, 0, 0, 0,
	0, 0, 1298, 0, 0, 0, 0, 0, 0, 1295,
	0, 0, 0, 0, 1276, 1277, 0, 1309, 1310, 1311,
	1319, 1320, 1321, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1312, 0, 0, 0, 0, 0, 0, 1279,
	0, 1315, 1325, 0, 1290, 1291, 1297, 1296, 1292, 1318,
	0, 1289, 1287, 1288, 1280, 1281, 1282, 1283, 1285, 1286,
	0, 1301, 1302, 1303, 1304, 0, 1278, 0, 2515, 0,
	0, 1284, 0, 0, 1298, 2264, 2265, 2266, 0, 0,
	0, 1295, 2263, 2261, 2262, 2254, 2255, 2256, 2257, 2259,
	2260, 0, 0, 0, 0, 1316, 1326, 0, 0, 1306,
	1307, 1308, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1322, 1323, 0, 0, 0, 0, 0, 0, 1293, 1294,
	0, 0, 0, 1301, 1302, 1303, 1304, 0, 0, 0,
	0, 0, 1314, 1284, 0, 0, 0, 0, 0, 1299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1324, 0, 1316, 1326, 0,
	0, 1306, 1307, 1308, 0, 0, 0, 0, 1313, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1322, 1323, 0, 0, 0, 0, 0, 0,
	1293, 1294, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1314, 1305, 0, 0, 0, 0,
	0, 1299, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1300, 0, 0, 0, 0, 1324, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1313, 0, 0, 0, 0, 1317, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1305, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1300, 0, 1276, 1277, 0, 1309,
	1310, 1311, 1319, 1320, 1321, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1312, 0, 0, 1317, 0, 0,
	0, 1279, 0, 1315, 1325, 0, 1290, 1291, 1297, 1296,
	1292, 1318, 0, 1289, 1287, 1288, 1280, 1281, 1282, 1283,
	1285, 1286, 0, 0, 0, 0, 0, 0, 1278, 0,
	2241, 0, 0, 0, 0, 0, 1298, 0, 0, 0,
	0, 0, 0, 1295, 0, 0, 0, 0, 1276, 1277,
	0, 1309, 1310, 1311, 1319, 1320, 1321, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1312, 0, 0, 0,
	0, 0, 0, 1279, 0, 1315, 1325, 0, 1290, 1291,
	1297, 1296, 1292, 1318, 0, 1289, 1287, 1288, 1280, 1281,
	1282, 1283, 1285, 1286, 0, 1301, 1302, 1303, 1304, 0,
	1278, 0, 2240, 0, 0, 1284, 0, 0, 1298, 0,
	0, 0, 0, 0, 0, 1295, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1316,
	1326, 0, 0, 1306, 1307, 1308, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1322, 1323, 0, 0, 0, 0,
	0, 0, 1293, 1294, 0, 0, 0, 1301, 1302, 1303,
	1304, 0, 0, 0, 0, 0, 1314, 1284, 0, 0,
	0, 0, 0, 1299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1324,
	0, 1316, 1326, 0, 0, 1306, 1307, 1308, 0, 0,
	0, 0, 1313, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1322, 1323, 0, 0,
	0, 0, 0, 0, 1293, 1294, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1314, 1305,
	0, 0, 0, 0, 0, 1299, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1300, 0, 0, 0,
	0, 1324, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1313, 0, 0, 0, 0, 1317,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1305, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1300, 0,
	1276, 1277, 0, 1309, 1310, 1311, 1319, 1320, 1321, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1312, 0,
	0, 1317, 0, 0, 0, 1279, 0, 1315, 1325, 0,
	1290, 1291, 1297, 1296, 1292, 1318, 0, 1289, 1287, 1288,
	1280, 1281, 1282, 1283, 1285, 1286, 0, 0, 0, 0,
	0, 0, 1278, 0, 2237, 0, 0, 0, 0, 0,
	1298, 0, 0, 0, 0, 0, 0, 1295, 0, 0,
	0, 0, 1276, 1277, 0, 1309, 1310, 1311, 1319, 1320,
	1321, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1312, 0, 0, 0, 0, 0, 0, 1279, 0, 1315,
	1325, 0, 1290, 1291, 1297, 1296, 1292, 1318, 0, 1289,
	1287, 1288, 1280, 1281, 1282, 1283, 1285, 1286, 0, 1301,
	1302, 1303, 1304, 0, 1278, 0, 2236, 0, 0, 1284,
	0, 0, 1298, 0, 0, 0, 0, 0, 0, 1295,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1316, 1326, 0, 0, 1306, 1307, 1308,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1322, 1323,
	0, 0, 0, 0, 0, 0, 1293, 1294, 0, 0,
	0, 1301, 1302, 1303, 1304, 0, 0, 0, 0, 0,
	1314, 1284, 0, 0, 0, 0, 0, 1299, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1324, 0, 1316, 1326, 0, 0, 1306,
	1307, 1308, 0, 0, 0, 0, 1313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1322, 1323, 0, 0, 0, 0, 0, 0, 1293, 1294,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1314, 1305, 0, 0, 0, 0, 0, 1299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1300, 0, 0, 0, 0, 1324, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1313, 0,
	0, 0, 0, 1317, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1305, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1300, 0, 1276, 1277, 0, 1309, 1310, 1311,
	1319, 1320, 1321, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1312, 0, 0, 1317, 0, 0, 0, 1279,
	0, 1315, 1325, 0, 1290, 1291, 1297, 1296, 1292, 1318,
	0, 1289, 1287, 1288, 1280, 1281, 1282, 1283, 1285, 1286,
	0, 0, 0, 0, 0, 0, 1278, 0, 2235, 0,
	0, 0, 0, 0, 1298, 0, 0, 0, 0, 0,
	0, 1295, 0, 0, 0, 0, 1276, 1277, 0, 1309,
	1310, 1311, 1319, 1320, 1321, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1312, 0, 0, 0, 0, 0,
	0, 1279, 0, 1315, 1325, 0, 1290, 1291, 1297, 1296,
	1292, 1318, 0, 1289, 1287, 1288, 1280, 1281, 1282, 1283,
	1285, 1286, 0, 1301, 1302, 1303, 1304, 0, 1278, 0,
	1831, 0, 0, 1284, 0, 0, 1298, 0, 0, 0,
	0, 0, 0, 1295, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1316, 1326, 0,
	0, 1306, 1307, 1308, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1322, 1323, 0, 0, 0, 0, 0, 0,
	1293, 1294, 0, 0, 0, 1301, 1302, 1303, 1304, 0,
	0, 0, 0, 0, 1314, 1284, 0, 0, 0, 0,
	0, 1299, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1324, 0, 1316,
	1326, 0, 0, 1306, 1307, 1308, 0, 0, 0, 0,
	1313, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1322, 1323, 0, 0, 0, 0,
	0, 0, 1293, 1294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1314, 1305, 0, 0,
	0, 0, 0, 1299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1300, 0, 0, 0, 0, 1324,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1313, 0, 0, 0, 0, 1317, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1305,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1300, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1317,
	0, 0, 0, 0, 0, 1315, 0, 0, 1290, 1291,
	1297, 1296, 1292, 1318, 0, 1289, 1287, 1288, 1280, 1281,
	1282, 1283, 1285, 1286, 0, 0, 0, 0, 3043, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1276, 1277, 0, 1309, 1310, 1311,
	1319, 1320, 1321, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1312, 0, 0, 0, 0, 0, 0, 1279,
	0, 0, 1325, 0, 0, 0, 0, 1315, 0, 0,
	1290, 1291, 1297, 1296, 1292, 1318, 0, 1289, 1287, 1288,
	1280, 1281, 1282, 1283, 1285, 1286, 1278, 0, 0, 0,
	3039, 0, 0, 0, 1298, 0, 0, 0, 0, 0,
	0, 1295, 0, 0, 0, 0, 1276, 1277, 0, 1309,
	1310, 1311, 1319, 1320, 1321, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1312, 0, 0, 0, 0, 0,
	0, 1279, 0, 0, 1325, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1301, 1302, 1303, 1304, 0, 1278, 0,
	0, 0, 0, 1284, 0, 0, 1298, 0, 0, 0,
	0, 0, 0, 1295, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1316, 1326, 0,
	0, 1306, 1307, 1308, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1322, 1323, 0, 0, 0, 0, 0, 0,
	1293, 1294, 0, 0, 0, 1301, 1302, 1303, 1304, 0,
	0, 0, 0, 0, 1314, 1284, 0, 0, 0, 0,
	0, 1299, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1324, 0, 1316,
	1326, 0, 0, 1306, 1307, 1308, 0, 0, 0, 0,
	1313, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1322, 1323, 0, 0, 0, 0,
	0, 0, 1293, 1294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1314, 1305, 0, 0,
	0, 0, 0, 1299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1300, 0, 0, 0, 0, 1324,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1313, 0, 0, 0, 0, 1317, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1305,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1300, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1317,
	0, 0, 0, 0, 0, 1315, 0, 0, 1290, 1291,
	1297, 1296, 1292, 1318, 0, 1289, 1287, 1288, 1280, 1281,
	1282, 1283, 1285, 1286, 0, 0, 0, 0, 2980, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1276, 1277, 0, 1309, 1310, 1311,
	1319, 1320, 1321, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1312, 0, 0, 0, 0, 0, 0, 1279,
	0, 0, 1325, 0, 0, 0, 0, 1315, 0, 0,
	1290, 1291, 1297, 1296, 1292, 1318, 0, 1289, 1287, 1288,
	1280, 1281, 1282, 1283, 1285, 1286, 1278, 0, 0, 0,
	2979, 0, 0, 0, 1298, 0, 0, 0, 0, 0,
	0, 1295, 0, 0, 0, 0, 1276, 1277, 0, 1309,
	1310, 1311, 1319, 1320, 1321, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1312, 0, 0, 0, 0, 0,
	0, 1279, 0, 0, 1325, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1301, 1302, 1303, 1304, 0, 1278, 0,
	0, 0, 0, 1284, 0, 0, 1298, 0, 0, 0,
	0, 0, 0, 1295, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1316, 1326, 0,
	0, 1306, 1307, 1308, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1322, 1323, 0, 0, 0, 0, 0, 0,
	1293, 1294, 0, 0, 0, 1301, 1302, 1303, 1304, 0,
	0, 0, 0, 0, 1314, 1284, 0, 0, 0, 0,
	0, 1299, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1324, 0, 1316,
	1326, 0, 0, 1306, 1307, 1308, 0, 0, 0, 0,
	1313, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1322, 1323, 0, 0, 0, 0,
	0, 0, 1293, 1294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1314, 1305, 0, 0,
	0, 0, 0, 1299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1300, 0, 0, 0, 0, 1324,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1313, 0, 0, 0, 0, 1317, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1305,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1300, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1317,
	0, 0, 0, 0, 0, 1315, 0, 0, 1290, 1291,
	1297, 1296, 1292, 1318, 0, 1289, 1287, 1288, 1280, 1281,
	1282, 1283, 1285, 1286, 0, 0, 0, 0, 2930, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1276, 1277, 0, 1309, 1310, 1311,
	1319, 1320, 1321, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1312, 0, 0, 0, 0, 0, 0, 1279,
	0, 0, 1325, 0, 0, 0, 0, 1315, 0, 0,
	1290, 1291, 1297, 1296, 1292, 1318, 0, 1289, 1287, 1288,
	1280, 1281, 1282, 1283, 1285, 1286, 1278, 0, 0, 0,
	2891, 0, 0, 0, 1298, 0, 0, 0, 0, 0,
	0, 1295, 0, 0, 0, 0, 1276, 1277, 0, 1309,
	1310, 1311, 1319, 1320, 1321, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1312, 0, 0, 0, 0, 0,
	0, 1279, 0, 0, 1325, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1301, 1302, 1303, 1304, 0, 1278, 0,
	0, 0, 0, 1284, 0, 0, 1298, 0, 0, 0,
	0, 0, 0, 1295, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1316, 1326, 0,
	0, 1306, 1307, 1308, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1322, 1323, 0, 0, 0, 0, 0, 0,
	1293, 1294, 0, 0, 0, 1301, 1302, 1303, 1304, 0,
	0, 0, 0, 0, 1314, 1284, 0, 0, 0, 0,
	0, 1299, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1324, 0, 1316,
	1326, 0, 0, 1306, 1307, 1308, 0, 0, 0, 0,
	1313, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1322, 1323, 0, 0, 0, 0,
	0, 0, 1293, 1294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1314, 1305, 0, 0,
	0, 0, 0, 1299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1300, 0, 0, 0, 0, 1324,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1313, 0, 0, 0, 0, 1317, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1305,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1300, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1317,
	0, 0, 0, 0, 0, 1315, 0, 0, 1290, 1291,
	1297, 1296, 1292, 1318, 0, 1289, 1287, 1288, 1280, 1281,
	1282, 1283, 1285, 1286, 0, 0, 0, 0, 2808, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1276, 1277, 0, 1309, 1310, 1311,
	1319, 1320, 1321, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1312, 0, 0, 0, 0, 0, 0, 1279,
	0, 0, 1325, 0, 0, 0, 0, 1315, 0, 0,
	1290, 1291, 1297, 1296, 1292, 1318, 0, 1289, 1287, 1288,
	1280, 1281, 1282, 1283, 1285, 1286, 1278, 0, 0, 0,
	2764, 0, 0, 0, 1298, 0, 0, 0, 0, 0,
	0, 1295, 0, 0, 0, 0, 1276, 1277, 0, 1309,
	1310, 1311, 1319, 1320, 1321, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1312, 0, 0, 0, 0, 0,
	0, 1279, 0, 0, 1325, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1301, 1302, 1303, 1304, 0, 1278, 0,
	0, 0, 0, 1284, 0, 0, 1298, 0, 0, 0,
	0, 0, 0, 1295, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1316, 1326, 0,
	0, 1306, 1307, 1308, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1322, 1323, 0, 0, 0, 0, 0, 0,
	1293, 1294, 0, 0, 0, 1301, 1302, 1303, 1304, 0,
	0, 0, 0, 0, 1314, 1284, 0, 0, 0, 0,
	0, 1299, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1324, 0, 1316,
	1326, 0, 0, 1306, 1307, 1308, 0, 0, 0, 0,
	1313, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1322, 1323, 0, 0, 0, 0,
	0, 0, 1293, 1294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1314, 1305, 0, 0,
	0, 0, 0, 1299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1300, 0, 0, 0, 0, 1324,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1313, 0, 0, 0, 0, 1317, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1305,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1300, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1317,
	0, 0, 0, 0, 0, 1315, 0, 0, 1290, 1291,
	1297, 1296, 1292, 1318, 0, 1289, 1287, 1288, 1280, 1281,
	1282, 1283, 1285, 1286, 0, 0, 0, 0, 2763, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1276, 1277, 0, 1309, 1310, 1311,
	1319, 1320, 1321, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1312, 0, 0, 0, 0, 0, 0, 1279,
	0, 0, 1325, 0, 0, 0, 0, 1315, 0, 0,
	1290, 1291, 1297, 1296, 1292, 1318, 0, 1289, 1287, 1288,
	1280, 1281, 1282, 1283, 1285, 1286, 1278, 0, 0, 0,
	2762, 0, 0, 0, 1298, 0, 0, 0, 0, 0,
	0, 1295, 0, 0, 0, 0, 1276, 1277, 0, 1309,
	1310, 1311, 1319, 1320, 1321, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1312, 0, 0, 0, 0, 0,
	0, 1279, 0, 0, 1325, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1301, 1302, 1303, 1304, 0, 1278, 0,
	0, 0, 0, 1284, 0, 0, 1298, 0, 0, 0,
	0, 0, 0, 1295, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1316, 1326, 0,
	0, 1306, 1307, 1308, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1322, 1323, 0, 0, 0, 0, 0, 0,
	1293, 1294, 0, 0, 0, 1301, 1302, 1303, 1304, 0,
	0, 0, 0, 0, 1314, 1284, 0, 0, 0, 0,
	0, 1299, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1324, 0, 1316,
	1326, 0, 0, 1306, 1307, 1308, 0, 0, 0, 0,
	1313, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1322, 1323, 0, 0, 0, 0,
	0, 0, 1293, 1294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1314, 1305, 0, 0,
	0, 0, 0, 1299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1300, 0, 0, 0, 0, 1324,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1313, 0, 0, 0, 0, 1317, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1305,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1300, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1317,
	0, 0, 0, 0, 0, 1315, 0, 0, 1290, 1291,
	1297, 1296, 1292, 1318, 0, 1289, 1287, 1288, 1280, 1281,
	1282, 1283, 1285, 1286, 0, 0, 0, 0, 2728, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1276, 1277, 0, 1309, 1310, 1311,
	1319, 1320, 1321, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1312, 0, 0, 0, 0, 0, 0, 1279,
	0, 0, 1325, 0, 0, 0, 0, 1315, 0, 0,
	1290, 1291, 1297, 1296, 1292, 1318, 0, 1289, 1287, 1288,
	1280, 1281, 1282, 1283, 1285, 1286, 1278, 0, 0, 0,
	2548, 0, 0, 0, 1298, 0, 0, 0, 0, 0,
	0, 1295, 0, 0, 0, 0, 1276, 1277, 0, 1309,
	1310, 1311, 1319, 1320, 1321, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1312, 0, 0, 0, 0, 0,
	0, 1279, 0, 0, 1325, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1301, 1302, 1303, 1304, 0, 1278, 0,
	0, 0, 0, 1284, 0, 0, 1298, 0, 0, 0,
	0, 0, 0, 1295, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1316, 1326, 0,
	0, 1306, 1307, 1308, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1322, 1323, 0, 0, 0, 0, 0, 0,
	1293, 1294, 0, 0, 0, 1301, 1302, 1303, 1304, 0,
	0, 0, 0, 0, 1314, 1284, 3123, 0, 0, 0,
	0, 1299, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1324, 0, 1316,
	1326, 0, 0, 1306, 1307, 1308, 0, 0, 0, 0,
	1313, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1322, 1323, 0, 0, 0, 0,
	0, 0, 1293, 1294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1314, 1305, 0, 0,
	0, 0, 0, 1299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1300, 0, 0, 0, 0, 1324,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1313, 0, 0, 0, 0, 1317, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1305,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1300, 0, 1276, 1277,
	0, 1309, 1310, 1311, 1319, 1320, 1321, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1312, 0, 0, 1317,
	0, 0, 0, 1279, 0, 1315, 1325, 0, 1290, 1291,
	1297, 1296, 1292, 1318, 0, 1289, 1287, 1288, 1280, 1281,
	1282, 1283, 1285, 1286, 0, 0, 2195, 0, 0, 0,
	1278, 0, 0, 0, 0, 0, 0, 0, 1298, 0,
	0, 0, 0, 0, 0, 1295, 0, 0, 0, 0,
	1276, 1277, 0, 1309, 1310, 1311, 1319, 1320, 1321, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1312, 0,
	0, 0, 0, 2166, 0, 1279, 0, 1315, 1325, 0,
	1290, 1291, 1297, 1296, 1292, 1318, 0, 1289, 1287, 1288,
	1280, 1281, 1282, 1283, 1285, 1286, 0, 1301, 1302, 1303,
	1304, 0, 1278, 0, 0, 0, 0, 1284, 0, 2282,
	1298, 0, 2281, 0, 0, 0, 0, 1295, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1316, 1326, 0, 0, 1306, 1307, 1308, 0, 0,
	0, 0, 0, 2167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1322, 1323, 0, 0,
	0, 0, 0, 0, 1293, 1294, 0, 0, 0, 1301,
	1302, 1303, 1304, 0, 0, 0, 0, 0, 1314, 1284,
	0, 0, 0, 0, 0, 1299, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1324, 0, 1316, 1326, 0, 0, 1306, 1307, 1308,
	0, 0, 0, 0, 1313, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1322, 1323,
	0, 0, 0, 0, 0, 0, 1293, 1294, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1314, 1305, 0, 0, 0, 0, 0, 1299, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1300, 0,
	0, 0, 0, 1324, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1313, 0, 0, 0,
	0, 1317, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1305, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1918, 0, 0, 0, 0,
	1300, 0, 1276, 1277, 0, 1309, 1310, 1311, 1319, 1320,
	1321, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1312, 0, 0, 1317, 1917, 0, 0, 1279, 0, 1315,
	1325, 0, 1290, 1291, 1297, 1296, 1292, 1318, 0, 1289,
	1287, 1288, 1280, 1281, 1282, 1283, 1285, 1286, 0, 0,
	0, 0, 0, 0, 1278, 0, 0, 0, 0, 0,
	0, 0, 1298, 0, 0, 0, 0, 0, 0, 1295,
	0, 0, 0, 0, 1276, 1277, 0, 1309, 1310, 1311,
	1319, 1320, 1321, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1312, 0, 0, 0, 0, 0, 0, 1279,
	0, 1315, 1325, 0, 1290, 1291, 1297, 1296, 1292, 1318,
	0, 1289, 1287, 1288, 1280, 1281, 1282, 1283, 1285, 1286,
	0, 1301, 1302, 1303, 1304, 0, 1278, 0, 0, 0,
	0, 1284, 0, 0, 1298, 0, 0, 0, 0, 0,
	0, 1295, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1316, 1326, 0, 0, 1306,
	1307, 1308, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1322, 1323, 0, 0, 0, 0, 0, 0, 1293, 1294,
	0, 0, 0, 1301, 1302, 1303, 1304, 0, 0, 0,
	0, 0, 1314, 1284, 0, 0, 0, 0, 0, 1299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1324, 0, 1316, 1326, 0,
	0, 1306, 1307, 1308, 0, 0, 0, 0, 1313, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1322, 1323, 0, 0, 0, 0, 0, 0,
	1293, 1294, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1314, 1305, 0, 0, 0, 0,
	0, 1299, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1300, 0, 0, 0, 0, 1324, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1313, 722, 0, 0, 0, 1317, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1305, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1300, 0, 1276, 1277, 0, 1309,
	1310, 1311, 1319, 1320, 1321, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1312, 0, 0, 1317, 0, 0,
	0, 1279, 0, 1315, 1325, 0, 1290, 1291, 1297, 1296,
	1292, 1318, 0, 1289, 1287, 1288, 1280, 1281, 1282, 1283,
	1285, 1286, 0, 0, 0, 0, 0, 0, 1278, 0,
	0, 0, 0, 0, 0, 0, 1298, 0, 0, 0,
	0, 0, 0, 1295, 0, 0, 0, 0, 1276, 1277,
	0, 1309, 1310, 1311, 1319, 1320, 1321, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1312, 0, 0, 0,
	0, 0, 0, 1279, 0, 1315, 1325, 0, 1290, 1291,
	1297, 1296, 1292, 1318, 0, 1289, 1287, 1288, 1280, 1281,
	1282, 1283, 1285, 1286, 0, 1301, 1302, 1303, 1304, 0,
	1278, 0, 0, 0, 0, 1284, 0, 0, 1298, 0,
	0, 0, 0, 0, 0, 1295, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1316,
	1326, 0, 0, 1306, 1307, 1308, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1322, 1323, 0, 0, 0, 0,
	0, 0, 1293, 1294, 0, 0, 0, 1301, 1302, 1303,
	1304, 0, 0, 0, 0, 0, 1314, 1284, 0, 0,
	0, 0, 2288, 1299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1324,
	0, 1316, 1326, 0, 0, 1306, 1307, 1308, 0, 0,
	0, 0, 1313, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1322, 1323, 0, 0,
	0, 0, 0, 0, 1293, 1294, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1314, 1305,
	0, 0, 0, 0, 0, 1299, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1300, 0, 0, 0,
	0, 1324, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1313, 0, 0, 0, 0, 1317,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2538, 1305, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1300, 0,
	1276, 1277, 0, 1309, 1310, 1311, 1319, 1320, 1321, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1312, 0,
	0, 1317, 2283, 0, 0, 1279, 0, 1315, 1325, 0,
	1290, 1291, 1297, 1296, 1292, 1318, 0, 1289, 1287, 1288,
	1280, 1281, 1282, 1283, 1285, 1286, 0, 0, 0, 0,
	0, 0, 1278, 0, 0, 0, 0, 0, 0, 0,
	1298, 0, 0, 0, 0, 0, 0, 1295, 0, 0,
	0, 0, 1276, 1277, 0, 1309, 1310, 1311, 1319, 1320,
	1321, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1312, 0, 0, 0, 0, 0, 0, 1279, 0, 1315,
	1325, 0, 1290, 1291, 1297, 1296, 1292, 1318, 0, 1289,
	1287, 1288, 1280, 1281, 1282, 1283, 1285, 1286, 0, 1301,
	1302, 1303, 1304, 0, 1278, 0, 0, 0, 0, 1284,
	0, 0, 1298, 0, 0, 0, 0, 0, 0, 1295,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1316, 1326, 0, 0, 1306, 1307, 1308,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1322, 1323,
	0, 0, 0, 0, 0, 0, 1293, 1294, 0, 0,
	0, 1301, 1302, 1303, 1304, 0, 0, 0, 0, 0,
	1314, 1284, 0, 0, 0, 0, 0, 1299, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1324, 0, 1316, 1326, 0, 0, 1306,
	1307, 1308, 0, 0, 0, 0, 1313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1322, 1323, 0, 0, 0, 0, 0, 0, 1293, 1294,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1314, 1305, 0, 0, 0, 0, 0, 1299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1300, 0, 0, 0, 0, 1324, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1313, 0,
	0, 0, 0, 1317, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2250, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1305, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1300, 0, 1276, 1277, 0, 1309, 1310, 1311,
	1319, 1320, 1321, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1312, 0, 0, 1317, 2234, 0, 0, 1279,
	0, 1315, 1325, 0, 1290, 1291, 1297, 1296, 1292, 1318,
	0, 1289, 1287, 1288, 1280, 1281, 1282, 1283, 1285, 1286,
	0, 0, 0, 0, 0, 0, 1278, 0, 0, 0,
	0, 0, 0, 0, 1298, 0, 0, 0, 0, 0,
	0, 1295, 0, 0, 0, 0, 1276, 1277, 0, 1309,
	1310, 1311, 1319, 1320, 1321, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1312, 0, 0, 0, 0, 0,
	0, 1279, 0, 1315, 1325, 0, 1290, 1291, 1297, 1296,
	1292, 1318, 0, 1289, 1287, 1288, 1280, 1281, 1282, 1283,
	1285, 1286, 0, 1301, 1302, 1303, 1304, 0, 1278, 0,
	0, 0, 0, 1284, 0, 0, 1298, 0, 0, 0,
	0, 0, 0, 1295, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1316, 1326, 0,
	0, 1306, 1307, 1308, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1322, 1323, 0, 0, 0, 0, 0, 0,
	1293, 1294, 0, 0, 0, 1301, 1302, 1303, 1304, 0,
	0, 0, 0, 0, 1314, 1284, 0, 0, 0, 0,
	0, 1299, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1324, 0, 1316,
	1326, 0, 0, 1306, 1307, 1308, 0, 0, 0, 0,
	1313, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1322, 1323, 0, 0, 0, 0,
	0, 0, 1293, 1294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1314, 1305, 0, 0,
	0, 0, 0, 1299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1300, 0, 0, 0, 0, 1324,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1313, 0, 0, 0, 0, 1317, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1305,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1300, 0, 1276, 1277,
	0, 1309, 1310, 1311, 1319, 1320, 1321, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1312, 0, 0, 1317,
	0, 0, 0, 1279, 0, 1315, 1325, 0, 1290, 1291,
	1297, 1296, 1292, 1318, 0, 1289, 1287, 1288, 1280, 1281,
	1282, 1283, 1285, 1286, 0, 0, 0, 0, 0, 0,
	1278, 0, 0, 0, 0, 0, 0, 0, 1298, 0,
	0, 0, 0, 0, 0, 1295, 0, 0, 0, 0,
	1276, 1277, 0, 1309, 1310, 1311, 1319, 1320, 1321, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1279, 0, 1315, 1325, 0,
	1290, 1291, 1297, 1296, 1292, 1318, 0, 1289, 1287, 1288,
	1280, 1281, 1282, 1283, 1285, 1286, 0, 1301, 1302, 1303,
	1304, 0, 1278, 0, 0, 0, 0, 1284, 0, 0,
	1298, 0, 0, 0, 0, 0, 0, 1295, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1316, 1326, 0, 0, 1306, 1307, 1308, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1322, 1323, 0, 0,
	0, 0, 0, 0, 1293, 1294, 0, 0, 0, 1301,
	1302, 1303, 1304, 0, 0, 0, 0, 0, 1314, 1284,
	0, 0, 0, 0, 0, 1299, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1324, 0, 1316, 1326, 0, 0, 1306, 1307, 1308,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1322, 1323,
	0, 0, 0, 0, 0, 0, 1293, 1294, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1314, 1305, 0, 0, 0, 0, 0, 1299, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1300, 0,
	0, 0, 0, 1324, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1317, 0, 0, 0, 0, 0, 1483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1305, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1495, 1477, 1484, 1467, 1505, 1504, 0,
	1300, 0, 1469, 1468, 0, 0, 0, 0, 0, 0,
	1515, 1516, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1317, 0, 0, 0, 0, 0, 1315,
	0, 0, 1290, 1291, 1297, 1296, 1292, 1318, 0, 1289,
	1287, 1288, 1280, 1281, 1282, 1283, 1285, 1286, 0, 1506,
	0, 1502, 1501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1500, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1499, 1497, 1498, 0, 0, 0, 0, 0, 0, 0,
	0, 1315, 0, 0, 1290, 1291, 1297, 1296, 1292, 1318,
	0, 1289, 1287, 1288, 1280, 1281, 1282, 1283, 1285, 1286,
	1479, 0, 0, 634, 0, 665, 0, 0, 0, 0,
	0, 1488, 1482, 1490, 1492, 1493, 1494, 1489, 0, 1487,
	0, 0, 0, 0, 0, 0, 641, 0, 1511, 1512,
	0, 0, 0, 0, 0, 0, 0, 0, 639, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1471, 0,
	0, 0, 640, 0, 0, 0, 0, 642, 0, 0,
	1503, 670, 0, 0, 1480, 1481, 0, 648, 649, 0,
	0, 0, 659, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 666, 643, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1496, 0,
	0, 0, 1464, 1462, 1463, 1466, 1465, 0, 0, 0,
	0, 664, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1472, 1473, 1475, 1476, 0,
	644, 0, 0, 0, 0, 0, 0, 638, 0, 1491,
	1474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1514, 0, 645, 646, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1470, 0, 1507,
	1508, 1509, 1510, 0, 652, 0, 0, 0, 0, 0,
	0, 647, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1478, 651, 0, 0, 0, 1485,
	1513, 0, 0, 0, 0, 0, 0, 667, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 650, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 661, 0, 0,
	0, 0, 0, 0, 0, 0, 656, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 636, 654,
	668, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 637, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 657, 0, 0, 655, 0, 0,
	0, 671, 672, 0, 0, 0, 0, 669, 0, 0,
	0, 0, 0, 0, 658, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	660, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 662,
}
var sqlPact = [...]int{

	5137, -1000, -25, -1000, -1000, -1000, -1000, -1000, 163, 155,
	153, 135, 131, 128, 126, 123, 121, -1000, -1000, -1000,
	114, -1000, -1000, 112, -1000, -1000, 110, 91, 88, -1000,
	87, 85, -1000, -1000, -1000, -1000, 84, 82, 81, 52604,
	1372, 52220, 40170, 1341, 1842, 37056, 51830, 36666, 51440, 51050,
	79, -1000, 50660, 78, 76, 74, -1000, -1000, 71, 1174,
	34356, 68, 67, 66, 1628, 65, 62, -1000, 61, 1524,
	1027, -1000, 60, 56, 1221, 231, 39780, 1815, 55, 54,
	33966, 1792, -1000, -1000, 1029, -1000, -1000, 52, 51, 47,
	45, 44, 43, 42, 38, 36, -1000, 35, 34, 32,
	29, 28, 27, 26, 25, 23, 20, 19, 17, 16,
	15, 14, 11, -1000, 62781, 1255, 1173, 1159, 1158, 1148,
	1169, 698, 10, 8, 6, 2, 0, -1, -1000, -1000,
	-2, -6, -7, -8, -1000, -12, -14, 119, -15, -16,
	-17, -18, -19, 1317, -1000, 1051, 438, 15318, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 55292, 52604,
	-20, -51, -21, -1000, 2104, 771, 25306, 5137, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 362, -1000, -1000,
	-1000, 226, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1188, 541, -1000, -1000, -1000, 50270, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 52604, -1000, 1368, -39, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 540, -1000, 1358, 229,
	1257, -1000, -1000, -1000, -1000, -1000, 52604, -1000, -1000, 2296,
	1323, 537, 49886, -1000, 1652, -1000, 652, 15731, -1000, 865,
	-1000, 15731, 222, -1000, -1000, -1000, -1000, -1000, 39390, 11587,
	39000, 38610, 32406, 49496, 11187, 49106, 867, -1000, -1000, -1000,
	-1000, -1000, -28, 35508, 52604, -1000, 207, -1000, -1000, -1000,
	-1000, -1000, -1000, 22080, 384, 21653, 360, 21226, 214, -1000,
	-1000, -1000, -1000, 48716, 48326, 1824, 47936, 32006, 31606, 47546,
	52604, 52604, 1653, 47156, -1000, 1951, 1834, 1829, 38220, -1000,
	-1000, -1000, 46766, 46376, 45986, 45596, 45206, 31206, 30806, -1000,
	-1000, 27253, 3626, 44816, 28056, 52604, -1000, -1000, 22493, 73,
	-1000, -1000, -1000, 1795, -1000, 22493, 73, -1000, 1271, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1863, 1113, 2234, 30406,
	1305, 974, 1950, 2295, 1513, 1948, 1939, 1931, 1928, 1927,
	2292, 1063, 2291, 1018, 2290, 1918, 1914, 2259, 1406, 37830,
	2289, 2287, 2072, 1912, 1794, -1000, -1000, -1000, -1000, 1032,
	-1000, -1000, -1000, 41710, -1000, -1000, 1382, -1000, -1000, 1382,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 861, 54524, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1051, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1453, -1000, 1322, -1000, -1000, 1570, 2079,
	2079, 2079, 2116, 350, 345, -1000, 119, -1000, -1000, 61995,
	-1000, -1000, 22493, 22493, 22493, 22493, 22493, 1217, -1000, -1000,
	-1000, 563, -1000, 536, 486, -1000, -1000, -1000, -1000, -1000,
	-1000, 535, 2270, -1000, 773, -1000, -1000, -1000, -1000, 2223,
	-1000, 13638, -1000, -1000, -1000, 338, 22493, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 203, 660, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 475,
	1147, 471, 471, 471, -1000, -1000, 711, -1000, -1000, -1000,
	634, -1000, 618, -1000, -1000, -1000, 1822, 533, 532, -1000,
	531, 530, 529, -1000, -1000, -1000, 526, 525, 523, 522,
	520, 519, 518, 517, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 710, -1000, -1000, -1000, 515, 514, 513, 510,
	509, 508, 505, 504, 498, -29, 52604, -1000, 362, -29,
	-1000, -1000, 491, -1000, 16557, 16557, 16557, -1000, -1000, 1355,
	22493, -1000, 1766, -1000, 4099, -235, 611, 26473, -1000, 24526,
	611, 570, 30002, -1000, 1791, -1000, -1000, 490, 194, -1000,
	-1000, -1000, -1000, -1000, 1787, 52604, 11985, 52604, 52604, -1000,
	22493, -1000, -1000, 32804, 35124, 52604, 37440, 2183, 62613, 35124,
	52604, 1820, -1000, -1000, 52604, -1000, 22493, -1000, 2178, 1627,
	-45, -1000, -1000, -1000, -1000, -1000, 1558, 1623, 814, 1089,
	-1000, 15731, 1984, -1000, -1000, -1000, 193, 11985, -1000, 1615,
	1975, 944, -1000, 1420, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1125, 1964, -1000, 3184, 1963, 1115, -1000, -1000,
	673, 1957, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1311, -1000, -1000, 2048, -1000, -1000, 1474, 1954, -125,
	32804, 35508, -36, -1000, -1000, -50, -1000, 10787, 61995, -1000,
	-1000, -1000, 61995, 654, -1000, -1000, 1952, -1000, 61995, 602,
	-1000, -1000, 1947, -1000, -1000, 489, 1512, 1343, -1000, -1000,
	44426, 3184, 1511, -1000, -1000, 665, 1510, -1000, -1000, 1509,
	-1000, 362, -1000, -1000, 739, -1000, 2286, 44042, 1693, 665,
	1507, -1000, 41710, -1000, 52604, -1000, 52604, -1000, 1003, -1000,
	54908, 146, 1917, -1000, -1000, 146, 1916, -1000, 146, 1911,
	-1000, 144, 1910, -1000, -1000, 1338, 1909, -1000, -92, 1906,
	-1000, -1000, -92, 1898, -1000, -56, -1000, -1000, -1000, 771,
	-1000, 26863, 43652, 32804, 664, 542, 61995, -1000, 32804, 61995,
	-1000, -1000, 43262, 42872, -1000, -1000, 922, 1596, -1000, -1000,
	-1000, -1000, 32804, 32804, -1000, 42482, -1000, -1000, -1000, 1291,
	2051, 52604, -1000, -1000, 1819, -1000, 34740, 52604, -1000, 52604,
	-1000, 52604, -1000, 52604, -1000, 52604, -1000, -1000, -1000, -1000,
	-1000, 1949, 1151, 1145, -1000, 52604, -1000, 52604, -1000, -1000,
	-1000, 1554, -1000, -1000, -1000, -1000, 52604, -1000, -1000, -1000,
	-1000, -1000, -1000, 1814, -1000, 1120, -1000, 919, -1000, -1000,
	149, -1000, -1000, -45, -1000, 54524, -1000, -1000, 1570, -1000,
	52604, -1000, -1000, 1325, 1646, 20799, 1621, 22493, 119, -1000,
	-1000, 119, 119, 14891, -1000, -1000, 62613, 62613, 11985, 895,
	22493, 22493, 22493, 22493, 22493, 22493, 22493, 22493, 22493, 22493,
	22493, 22493, 22493, 22493, 22493, 22493, 22493, 22493, 22493, 22493,
	22493, 22493, 22493, 22493, 22493, 22493, 22493, 22493, 22493, 22493,
	22493, 22493, 22493, 22493, 22493, 1429, 22493, 860, 22493, 22493,
	22493, 22493, 1144, -1000, -1000, 1263, 392, 1283, -1000, 2235,
	2235, 2235, 62359, 62359, 357, 563, -1000, 22493, -1000, 73,
	22493, 12385, -1000, 2248, 932, -1000, -1000, 345, 6864, 1436,
	-1000, 342, 12812, -1000, -1000, -1000, 13638, 486, 20372, 693,
	61995, 10389, 1830, 1734, -1000, 2247, -1000, -1000, 2223, -1000,
	-1000, -1000, 893, 890, 888, 886, 484, 629, 625, 623,
	622, 422, 22493, 22493, 22493, 22493, 22493, 22493, 22493, 22493,
	-1000, 19959, 19532, 19105, 18678, 18251, 23732, 17824, 22493, 14051,
	52604, -29, 2176, 22493, 201, -1000, 60831, -1000, 201, 201,
	483, -57, 61995, 1603, 1599, 25695, 1520, 1222, 1222, 1222,
	-1000, 482, 551, 611, 7984, 40554, 1234, 611, 611, 167,
	225, 341, 24137, 1766, 40554, -1000, -1000, 52604, 478, 12385,
	11985, 942, -59, 192, 1622, 1610, 167, -1000, -64, 664,
	858, -85, -1000, 707, -65, -1000, 941, -1000, -1000, -1000,
	-1000, 294, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 696, 477, 476, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 475,
	1147, 471, 471, 471, -1000, -1000, -1000, 634, -1000, 618,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1779, -50, 37440,
	617, -72, 779, -45, -1000, 1382, -1000, 1260, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2269, -1000, 2243, -1000, -1000, 2246, -35, -1000, -1000,
	11985, -1000, -46, 1127, -1000, 36276, 2054, 2047, 2042, 998,
	-1000, 957, 2113, 41710, 2140, 157, -1000, 1778, -1000, -1000,
	650, 918, 855, 41710, 3184, -1000, 62613, -1000, 1658, 2110,
	989, 980, 989, 989, 978, -1000, 41710, 849, 1160, 32804,
	-1000, 846, -1000, -49, 2139, 72, -1000, 1774, 845, -1000,
	-1000, 52604, 11985, 609, -36, 35508, 52604, 189, -1000, 22493,
	73, 22493, 73, 35892, 2173, 1892, 52604, 1641, -42, 52604,
	-1000, -1000, 3184, 1888, -1000, 1156, -1000, 1887, 1884, 2161,
	385, 2285, -1000, 1340, 1502, -1000, -1000, -1000, 54140, 910,
	1880, 678, 447, 2159, 447, 29224, -1000, 52604, -1000, 52604,
	-1000, -1000, 52604, -1000, 52604, -1000, 52604, -1000, 52604, 52604,
	-1000, 52604, 32804, 32804, 32804, 707, 33576, -73, 340, -1000,
	42098, 52604, 747, 35892, -204, 609, -1000, 609, -1000, 52604,
	1813, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	52604, -1000, 52604, -1000, -1000, -1000, -1000, -1000, -1000, 1022,
	-1000, 1812, -1000, 1801, -1000, 186, -1000, -1000, -1000, 1373,
	52604, 52604, 52604, -1000, 41710, -1000, -1000, -1000, -1000, -1000,
	-1000, 61995, -1000, 397, -1000, -1000, 61995, 1084, 1640, -1000,
	1640, -37, -1000, 60539, 1590, 52604, -1000, -1000, -1000, -1000,
	-1000, 644, 909, 909, 900, 900, 900, 900, 2185, 227,
	262, 3170, 5955, 5955, 5955, 5955, 5955, 5955, 5955, 5955,
	3150, 437, 437, 3150, 3150, 3150, 3150, 3150, 437, 437,
	437, 5955, 5955, 5955, 62359, 62287, 5570, 22493, 22493, 841,
	1243, 392, 5494, 22493, 5583, 5583, 5583, 5583, -1000, 1071,
	-1000, -1000, -1000, -1000, 1772, 470, 23732, 23732, -1000, -1000,
	-1000, -1000, 13225, 22493, -1000, -1000, -1000, -1000, 17397, -1000,
	60103, -247, 336, -143, -13, -1000, 22493, 22493, 22493, 333,
	-1000, 329, -1000, 831, -1000, 828, 827, 825, -1000, 459,
	185, 22493, 52604, -1000, 57231, 548, -129, -1000, 972, -1000,
	22493, 181, -1000, 1228, 458, 455, 327, -74, 637, 635,
	631, 616, 22493, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 61923, 57159, 56867, 56795, 6564, 56503, 56431,
	-80, 325, -1000, 1770, -143, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 323, -1000, -82, -1000, -87, -1000, 321, -1000,
	61631, -143, 318, 6600, -1000, 23732, 23732, 23732, -1000, 306,
	-1000, 60467, -1000, 61559, 16984, 16984, 16984, 305, 61267, 22493,
	-143, -1000, 454, -89, 678, 16557, 24916, 11985, -1000, 678,
	678, 22493, -1000, 22493, 25695, 25695, 1823, 1598, 25695, -1000,
	-1000, -1000, -1000, 40554, 598, 611, 40554, -1000, 2223, 1602,
	-1000, -1000, -1000, 52604, 362, -1000, 40554, 40554, 11985, 611,
	-1000, 303, 28445, -13, 178, -1000, -1000, 11985, 1703, 1703,
	-1000, 1764, 52604, 2194, -1000, -1000, 62613, -1000, 561, 853,
	-1000, 2241, 452, -1000, 2223, 2223, 52604, 127, 15731, -1000,
	1382, -1000, -1000, 1087, -1000, 1138, -1000, -1000, -1000, -1000,
	15731, -1000, 1462, 52604, 52604, 52604, -1000, -1000, 1501, 53756,
	1498, 62613, 52604, -1000, -1000, 448, 446, 1588, 1587, 52604,
	52604, 53372, 52988, 52604, 1185, 22493, 1209, 1364, 73, -1000,
	73, 445, 885, 52604, 52604, 1086, -1000, -1000, -1000, -1000,
	-1000, 52604, -1000, -1000, 2236, -1000, 989, -1000, -1000, -1000,
	989, 3184, 1082, 52604, 32804, 671, 52604, 1181, 73, -1000,
	73, 444, 11985, 1092, -1000, 1720, -1000, 1386, -1000, -1000,
	9991, 61995, -1000, 61995, -1000, 302, -41, -1000, -1000, -1000,
	-1000, -1000, -1000, 1675, 52604, 555, 52604, 73, 52604, 120,
	664, 32804, 52604, -42, 52604, 32804, 32804, 32804, 73, 2282,
	443, 2280, -1000, 52604, 1875, 1314, 1494, 1936, 595, 52604,
	1242, 22493, 1105, -1000, 28835, 727, 52604, 1054, 97, -1000,
	-1000, -1000, -3, 52604, -1000, -1000, 146, 146, 146, -1000,
	144, 1338, -1000, -92, -92, -1000, -1000, 707, 664, -44,
	439, -1000, 605, 604, 27657, 32804, -90, -1000, 664, -1000,
	669, -1000, 915, -50, -50, -1000, 1020, 1013, 52604, 11985,
	52604, 52604, 11985, 52604, -1000, -1000, -1000, -1000, 1084, -1000,
	22493, -1000, -1000, -1000, 14891, -1000, -1000, -1000, 52604, -232,
	22493, 22493, 4970, 4929, 22493, 23732, 23732, -1000, 22493, 3382,
	-1000, -1000, -1000, -1000, -1000, 1763, 436, 22493, 62613, 6533,
	6271, -1000, 299, 56139, 3150, -1000, 22493, -1000, 298, 16144,
	-1000, 60903, -52, -52, -1000, 2262, 1528, 1187, 1152, 1033,
	2232, 9593, -143, -95, -1000, -1000, 560, 1867, -1000, 22493,
	61195, 9195, -1000, 29613, 682, 1242, -1000, -1000, 2223, -1000,
	-1000, -1000, -1000, 59745, 62613, 62613, 22493, 22493, -1000, 22493,
	22493, 22493, -1000, -1000, 22493, -1000, -1000, -1000, -1000, 1762,
	22493, -1000, 62613, 62613, 23732, 23732, 23732, 23732, 23732, 23732,
	23732, 23732, 23732, 23732, 23732, 23732, 23732, 23732, 23732, 23732,
	23732, 23732, 23732, 1591, 23732, 2218, 2218, 2218, -1000, 1769,
	1762, 22493, 22493, 62613, 297, 295, 286, -1000, 22493, -143,
	707, -1000, 1732, -1000, -102, -1000, 1766, -1000, -1000, 1732,
	1732, -101, 61995, -1000, 1823, -1000, 435, 22493, 25695, -1000,
	547, -1000, -106, -1000, 40554, -1000, 546, -242, -1000, 600,
	-1000, 362, -1000, -1000, -1000, 175, 40554, -1000, -107, -1000,
	2151, 285, 11985, -1000, -1000, -1000, -1000, -1000, 73, -50,
	1254, -1000, 2225, -1000, 545, 284, 2223, 282, 279, -50,
	52604, -1000, -45, -1000, -1000, -1000, -1000, -1000, -1000, 822,
	821, -1000, 1870, -1000, 1492, -1000, 731, -1000, 1118, 22493,
	26084, 434, 425, 1241, -1000, 1864, 1338, 1859, 1338, -1000,
	-1000, 620, -1000, 61995, 424, 420, -1000, -46, 1104, -1000,
	-1000, 22493, 22493, 41326, -1000, 2048, -1000, 808, -1000, -1000,
	-1000, 3184, 806, -1000, -1000, 1155, -1000, -1000, -1000, -1000,
	22493, -1000, -49, 797, 664, 1759, 926, -1000, 1661, 35892,
	52604, 419, 52604, 416, -1000, -1000, 415, 52604, -1000, -1000,
	-1000, 3184, -1000, 665, -1000, -1000, -1000, 2278, -1000, 736,
	11985, 52604, 1855, 1572, 595, 33192, -1000, 665, 1646, -1000,
	61995, -1000, 1054, 14464, 2045, -109, -1000, 174, -1000, -1000,
	-1000, 678, 29224, 25695, 22493, 2277, -112, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 40942, 40942, 32804, 32804, 32804, 664,
	52604, 52604, -1000, -1000, 1246, 52604, -1000, -1000, -1000, -1000,
	-1000, 1205, 1383, -1000, 1262, 59673, -1000, 2075, 11985, 2136,
	5583, 22493, 22493, 705, 5803, 4127, 5583, 22493, 22493, 62613,
	6790, -114, 22493, 22493, -1000, 22493, 474, 61995, 2261, 22493,
	278, 277, 276, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 273, -1000, -1000, -1000, -1000, -1000, 61995, 22493, 171,
	-1000, -1000, -1000, 55676, -1000, 22493, 270, 265, -1000, 258,
	250, 56067, 6037, 59315, 59243, 58885, 61995, 1769, 61995, -1000,
	-1000, 688, 688, 969, 969, 969, 969, 2218, 320, 387,
	473, 869, 869, 869, 940, 624, 624, 869, 869, 869,
	1758, 1527, 410, 6744, -1000, -1000, 61995, 61995, 248, -1000,
	-1000, -1000, -143, 247, 1728, 2107, -1000, 25695, 1728, 1728,
	-1000, -1000, 52604, 61995, -1000, -235, -1000, 2223, -1000, -1000,
	1602, -1000, 8395, -1000, 11985, -1000, -1000, 28445, -1000, 407,
	-1000, 98, -1000, -1000, 423, -1000, -1000, 246, -1000, -1000,
	-50, 52604, 52604, 52604, 1854, -1000, 1449, -1000, 58813, -122,
	-1000, 2071, 2071, 22493, 167, 26084, 52604, -1000, 1202, 1638,
	772, 52604, -1000, 52604, -1000, -1000, 52604, 52604, 52604, 52604,
	52604, -128, 61995, -58, -1000, 597, -1000, 52604, 52604, 32804,
	-130, 11985, -1000, 32804, 882, 1181, 1707, -1000, 405, 26084,
	403, 52604, 35892, 2147, -1000, -1000, -1000, -1000, 401, 1839,
	1299, 400, 11985, 1571, 595, 33192, -1000, 910, 1054, -1000,
	-1000, -70, -1000, 442, 73, 52604, 2276, 1242, -1000, -71,
	61995, -1000, 596, -1000, -136, -1000, -1000, 245, -1000, 2008,
	2004, 1551, -1000, -1000, -1000, 11985, 914, -1000, -1000, -1000,
	2075, 5583, 5583, 22493, 22493, 22493, 5583, 6790, -137, -1000,
	5583, 5583, -143, -1000, -1000, 60903, -1000, -1000, -1000, -1000,
	61995, 8797, 1208, -1000, 58455, -1000, -1000, -1000, -1000, 22493,
	22493, -1000, -1000, -1000, -1000, -1000, 23732, 1748, 398, 62613,
	-1000, -1000, 675, 22493, 22493, 1766, 675, 675, -138, 611,
	-1000, -1000, -1000, 2223, 98, -1000, 2274, 11985, -1000, -1000,
	-1000, -1000, -1000, 52604, -1000, 52604, -1000, 11985, 52604, 1749,
	1486, -1000, -1000, 1585, 394, 23732, 52604, 649, -1000, 1220,
	26084, 2075, 11985, 2075, 58383, -144, -145, 1463, -1000, -1000,
	1457, 22493, -1000, 62613, 1338, 1338, -150, -158, -1000, 791,
	789, 788, 52604, 15731, -1000, -1000, -1000, 786, -1000, -92,
	22493, -1000, -1000, 1161, 26084, -159, 26084, -165, 241, 73,
	26084, -1000, -1000, 52604, 26084, 1297, -1000, 595, 33192, -1000,
	1936, -1000, 1958, 52604, 2039, -1000, -1000, -1000, 1646, 392,
	-1000, 664, 391, 390, -100, -1000, 639, 638, -1000, -1000,
	52604, -1000, 5583, 5583, 5583, -1000, 237, -1000, -1000, 1242,
	2094, -1000, 58025, 57953, 56170, 23732, 62613, -167, -1000, 52604,
	61995, -143, -1000, -1000, -1000, 40554, 388, -1000, -1000, 1835,
	-1000, -1000, -1000, 52604, 1477, -1000, -1000, 22493, 6744, 376,
	22493, -1000, 1661, 375, -1000, -1000, -1000, -1000, -1000, -1000,
	2071, -1000, 1091, -1000, -1000, 61995, 2064, -1000, -1000, 374,
	373, 52604, 52604, 372, 594, -1000, 371, 61995, 52604, -173,
	1220, -174, -1000, 1661, -1000, -175, 736, -176, 52604, 33192,
	-1000, 1572, 905, -181, 52604, 1054, -1000, -1000, 32804, 32804,
	1551, -1000, 52604, -1000, 52604, -1000, -1000, 1347, 22493, -1000,
	-1000, 56170, -182, -1000, -121, -1000, 2144, -1000, -1000, -1000,
	-1000, 1853, 57595, 1542, 52604, 57523, 1181, 52604, 2075, 52604,
	734, 11985, 1205, 1205, -1000, -1000, 22493, 15731, 22493, 369,
	-1000, 1661, 1220, 1181, 1220, 367, 1220, 366, -1000, 1571,
	991, -1000, 678, -1000, -1000, -188, -189, -1000, -195, -197,
	236, 23319, 23319, 23319, -143, -1000, 52604, 365, 1840, -1000,
	1274, 1164, 234, 738, -1000, -198, -1000, 362, -1000, 22493,
	-1000, -203, -1000, 724, -205, -1000, 718, -210, -1000, -211,
	52604, 1181, 1661, -1000, 1661, 26084, 1661, 26084, -1000, 29224,
	-1000, 664, 664, -1000, -1000, -1000, -1000, -1000, 7408, 1330,
	1041, 60175, -1000, -1000, -1000, -1000, 52604, -1000, 1292, 1281,
	1031, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1542, 61995,
	-1000, 1205, 1706, -1000, 1205, 1742, -1000, -1000, -212, -1000,
	1181, 1181, -217, 1181, -218, -200, -1000, -1000, 2188, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1953, -1000, 757, 1269,
	1269, 1274, -1000, 361, -1000, 358, 1335, -1000, -1000, 1220,
	-1000, 1220, -1000, 22906, -1000, 2198, -1000, -1000, 1607, -1000,
	-1000, 22493, 22493, -1000, -1000, -1000, 1661, 1661, -1000, -1000,
	-1000, -1000, -219, -220, 1181, 1181, 1181, 784, -1000, -1000,
	-1000, 353, 22493, -237, 1181, -1000,
}
var sqlPgo = [...]int{

	0, 2786, 2784, 1884, 2783, 2776, 2775, 2772, 2770, 2769,
	2768, 2767, 2766, 2765, 2763, 2759, 2750, 2749, 2747, 2746,
	2742, 2737, 2736, 2730, 2728, 2725, 2722, 2721, 2719, 2718,
	2717, 2715, 2710, 2708, 2707, 2703, 2701, 2699, 2698, 2694,
	2692, 2691, 2689, 2688, 2687, 28, 2685, 2684, 2681, 2680,
	2673, 2667, 2665, 2662, 2656, 2655, 2653, 2651, 2650, 2649,
	2648, 2646, 2645, 2644, 2641, 2639, 2637, 2636, 2635, 2630,
	2629, 2628, 2627, 2626, 2625, 113, 2624, 2623, 2622, 2621,
	2620, 2619, 2618, 2617, 2614, 2612, 2611, 2610, 2609, 2608,
	194, 2607, 2606, 2605, 2604, 2602, 2601, 2600, 2599, 2597,
	2596, 163, 2595, 2594, 2592, 2591, 2590, 2589, 2587, 2586,
	2585, 2582, 2581, 2580, 2579, 2578, 2577, 2576, 2575, 2574,
	2572, 2571, 2570, 2569, 2565, 2564, 2563, 2560, 182, 118,
	2559, 2555, 2552, 2547, 2537, 2536, 78, 72, 44, 2535,
	80, 122, 171, 5134, 158, 2534, 2531, 2530, 2522, 2519,
	23, 115, 123, 111, 112, 83, 2518, 2516, 59, 31,
	26, 22, 76, 2511, 2506, 2504, 1813, 91, 2501, 2494,
	177, 162, 2493, 603, 2491, 33, 134, 84, 90, 121,
	56, 2490, 94, 15, 2489, 107, 175, 2485, 110, 54,
	17, 3985, 55, 185, 65, 82, 142, 140, 152, 148,
	114, 245, 2484, 167, 103, 138, 2480, 2474, 2472, 58,
	127, 14, 10, 139, 6, 2471, 11, 2467, 5, 2466,
	2465, 2461, 2458, 30, 109, 27, 37, 2456, 25, 546,
	156, 2454, 159, 2453, 74, 2452, 172, 143, 128, 57,
	155, 2451, 2447, 2445, 2444, 2443, 89, 13, 79, 2440,
	2437, 102, 161, 2436, 35, 130, 75, 93, 183, 151,
	96, 145, 157, 2435, 2434, 2433, 132, 2432, 147, 92,
	2431, 2430, 32, 51, 164, 38, 2429, 2427, 106, 2426,
	135, 2425, 2424, 2422, 184, 117, 144, 1, 52, 85,
	7, 160, 98, 71, 68, 2419, 2774, 1370, 2566, 2418,
	100, 73, 34, 64, 97, 176, 36, 2417, 2416, 1429,
	2413, 2412, 2411, 2410, 120, 2406, 2405, 2393, 88, 41,
	99, 2389, 108, 45, 129, 181, 60, 146, 136, 168,
	124, 2388, 131, 95, 2386, 141, 166, 304, 2382, 525,
	2376, 179, 2375, 2374, 2373, 2372, 261, 2371, 2370, 314,
	2369, 101, 2368, 2366, 126, 119, 67, 39, 2365, 70,
	490, 2364, 133, 24, 2363, 2822, 21, 0, 3811, 3712,
	2362, 150, 86, 2361, 2360, 2359, 2355, 29, 8, 2,
	4, 12, 9, 414, 333, 2348, 2341, 20, 69, 104,
	2338, 178, 153, 2337, 2335, 2334, 62, 2332, 18, 2330,
	16, 2329, 2328, 19, 3, 2325, 2324, 165, 2323, 2322,
	2321, 2319, 2190, 2317, 174, 2313, 87, 2312, 116, 137,
	2311, 2310, 2309, 2308, 1991, 2307, 2305, 63, 66, 2304,
	2303, 125,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 8, 8, 9, 9, 9, 33,
	33, 11, 11, 10, 10, 10, 12, 12, 7, 7,
	7, 7, 7, 7, 7, 7, 14, 14, 24, 24,
	15, 26, 414, 414, 18, 28, 19, 29, 13, 416,
	416, 416, 416, 22, 20, 20, 30, 139, 139, 17,
	17, 25, 25, 152, 152, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 413, 413, 154, 154, 153, 149,
	149, 417, 417, 155, 155, 155, 157, 157, 34, 34,
	88, 88, 88, 140, 81, 81, 81, 81, 81, 81,
	81, 76, 76, 365, 365, 366, 366, 135, 135, 136,
	136, 136, 136, 137, 137, 138, 138, 138, 48, 36,
	36, 36, 36, 36, 36, 36, 37, 37, 37, 37,
	38, 38, 38, 38, 38, 38, 39, 39, 39, 39,
	39, 39, 46, 46, 129, 129, 49, 49, 49, 49,
	49, 49, 49, 49, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 60,
	60, 50, 409, 409, 237, 237, 334, 334, 62, 62,
	63, 63, 63, 63, 63, 63, 64, 64, 64, 64,
	64, 64, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 71, 71, 71, 72, 72, 72, 69, 69,
	69, 67, 67, 67, 66, 66, 66, 70, 70, 70,
	68, 68, 68, 238, 238, 73, 73, 73, 73, 73,
	73, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 336, 336, 74, 74, 307, 307, 77, 77, 267,
	267, 78, 78, 78, 78, 78, 79, 79, 79, 79,
	89, 89, 89, 89, 412, 412, 230, 230, 170, 170,
	170, 170, 84, 84, 84, 84, 85, 85, 85, 86,
	86, 134, 134, 95, 95, 95, 95, 94, 94, 94,
	94, 94, 94, 40, 40, 40, 41, 41, 42, 42,
	43, 43, 44, 44, 45, 45, 45, 45, 45, 97,
	97, 418, 418, 99, 96, 96, 96, 98, 98, 98,
	98, 100, 101, 101, 101, 101, 101, 101, 102, 102,
	359, 359, 245, 245, 357, 357, 358, 358, 207, 207,
	207, 207, 207, 208, 208, 208, 364, 364, 364, 364,
	364, 364, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 119,
	119, 119, 128, 128, 128, 128, 128, 128, 128, 121,
	121, 121, 112, 112, 104, 104, 104, 104, 108, 108,
	108, 108, 108, 105, 105, 109, 109, 111, 111, 113,
	113, 113, 113, 113, 113, 106, 106, 106, 106, 115,
	115, 115, 115, 114, 114, 124, 124, 124, 124, 124,
	124, 321, 321, 120, 120, 120, 120, 123, 123, 123,
	123, 118, 118, 118, 122, 122, 125, 125, 125, 125,
	107, 107, 107, 421, 421, 421, 126, 126, 117, 117,
	127, 127, 127, 127, 127, 127, 127, 116, 116, 116,
	415, 415, 110, 410, 410, 407, 407, 407, 407, 407,
	407, 407, 408, 408, 411, 411, 82, 82, 82, 55,
	55, 56, 56, 209, 209, 210, 210, 289, 289, 289,
	289, 211, 211, 156, 156, 156, 214, 215, 215, 212,
	212, 213, 213, 213, 217, 217, 216, 219, 219, 218,
	288, 375, 375, 376, 376, 376, 376, 376, 376, 376,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	373, 373, 373, 374, 371, 371, 372, 372, 372, 372,
	422, 422, 287, 287, 223, 223, 378, 378, 378, 378,
	379, 379, 379, 379, 379, 382, 381, 380, 380, 380,
	380, 380, 317, 317, 317, 59, 59, 59, 256, 256,
	255, 255, 257, 257, 257, 257, 257, 257, 257, 257,
	257, 257, 257, 257, 257, 257, 131, 131, 57, 57,
	57, 162, 162, 54, 54, 54, 58, 58, 61, 61,
	61, 61, 61, 61, 53, 53, 53, 53, 53, 272,
	272, 272, 271, 271, 228, 228, 323, 323, 323, 174,
	174, 175, 175, 150, 150, 150, 21, 23, 23, 16,
	16, 16, 16, 16, 16, 31, 31, 32, 32, 27,
	27, 419, 419, 420, 420, 83, 83, 87, 87, 87,
	93, 93, 130, 130, 130, 130, 130, 130, 130, 35,
	35, 35, 35, 47, 47, 47, 47, 91, 425, 425,
	425, 92, 92, 424, 424, 169, 169, 169, 169, 171,
	171, 284, 284, 285, 285, 426, 426, 286, 286, 286,
	164, 163, 165, 165, 52, 52, 52, 158, 158, 159,
	159, 160, 160, 161, 161, 427, 427, 80, 80, 80,
	133, 133, 203, 203, 280, 280, 280, 224, 224, 180,
	180, 283, 283, 281, 281, 281, 254, 254, 254, 132,
	132, 233, 233, 247, 247, 248, 248, 331, 331, 249,
	90, 90, 143, 143, 141, 141, 141, 141, 141, 141,
	142, 142, 142, 144, 144, 144, 144, 144, 144, 144,
	147, 147, 147, 147, 148, 148, 148, 146, 146, 389,
	389, 389, 391, 391, 392, 388, 388, 390, 390, 423,
	423, 258, 258, 258, 221, 222, 220, 220, 428, 428,
	226, 226, 225, 227, 227, 322, 322, 322, 252, 252,
	252, 252, 275, 275, 273, 273, 274, 274, 276, 276,
	277, 277, 277, 278, 278, 279, 279, 251, 251, 303,
	303, 145, 145, 145, 232, 232, 232, 234, 234, 294,
	294, 294, 295, 295, 293, 293, 293, 293, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 325, 325, 235,
	235, 326, 282, 282, 405, 405, 405, 406, 406, 320,
	320, 327, 327, 327, 327, 327, 327, 318, 318, 319,
	319, 332, 333, 333, 261, 261, 261, 261, 259, 259,
	260, 260, 328, 328, 328, 328, 253, 253, 329, 329,
	329, 290, 290, 337, 337, 337, 337, 351, 231, 231,
	231, 429, 429, 338, 338, 338, 338, 338, 339, 339,
	339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
	339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
	341, 341, 341, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 350, 350, 350, 350, 350, 342, 342, 347, 347,
	348, 348, 348, 343, 344, 349, 349, 349, 349, 430,
	430, 353, 353, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 346, 268, 268, 268, 268, 268, 268, 268,
	268, 268, 268, 268, 268, 268, 268, 269, 269, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 298, 298, 298, 298, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 299, 383, 383, 383, 383, 383, 383, 383,
	383, 386, 386, 387, 387, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 393, 393, 394, 394, 396, 396,
	397, 397, 398, 399, 399, 399, 400, 401, 401, 395,
	395, 402, 402, 402, 402, 403, 403, 404, 404, 404,
	404, 404, 309, 309, 310, 310, 316, 316, 316, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 172, 172, 172, 172, 172,
	243, 243, 241, 241, 241, 244, 244, 242, 242, 240,
	240, 239, 239, 306, 306, 304, 304, 308, 308, 262,
	262, 352, 352, 352, 352, 352, 352, 352, 263, 263,
	263, 270, 264, 264, 265, 265, 265, 265, 265, 300,
	301, 266, 266, 266, 302, 302, 311, 315, 315, 314,
	313, 313, 312, 312, 291, 291, 292, 292, 250, 250,
	431, 431, 246, 246, 330, 330, 330, 330, 205, 205,
	236, 236, 204, 204, 198, 198, 199, 199, 199, 199,
	229, 229, 354, 354, 354, 355, 356, 305, 190, 189,
	177, 178, 188, 187, 186, 176, 179, 183, 184, 185,
	181, 182, 194, 193, 192, 191, 335, 200, 200, 201,
	201, 201, 202, 202, 202, 202, 173, 173, 195, 195,
	196, 197, 197, 166, 166, 166, 167, 167, 168, 168,
	363, 363, 361, 361, 361, 362, 362, 362, 362, 360,
	360, 360, 360, 360, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 0, 1,
	1, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 1, 3, 1, 1, 3, 4,
	6, 1, 3, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 3, 4, 6, 4, 6,
	6, 6, 1, 1, 5, 5, 6, 6, 4, 4,
	4, 4, 3, 4, 4, 7, 4, 3, 5, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 5, 6, 6, 4, 8, 3, 3, 3, 6,
	4, 3, 1, 3, 2, 1, 1, 3, 1, 3,
	2, 2, 0, 1, 1, 0, 2, 0, 7, 2,
	5, 6, 2, 1, 6, 4, 9, 7, 12, 12,
	2, 7, 2, 1, 1, 1, 3, 3, 0, 3,
	1, 3, 1, 1, 3, 2, 5, 0, 5, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 3, 3,
	3, 5, 3, 3, 5, 3, 3, 5, 3, 3,
	5, 3, 6, 6, 1, 1, 1, 2, 1, 2,
	1, 1, 2, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 3, 1, 1, 2, 1, 2, 7,
	3, 6, 1, 2, 1, 3, 2, 0, 8, 3,
	2, 2, 2, 2, 2, 2, 1, 1, 2, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 3, 5, 3,
	3, 5, 3, 1, 3, 2, 2, 5, 3, 6,
	3, 1, 1, 2, 1, 1, 1, 2, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 3, 5, 2, 3, 0, 3, 2, 3,
	0, 2, 3, 2, 3, 2, 6, 4, 7, 2,
	6, 4, 7, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 2, 1, 2, 2, 3, 2, 4,
	3, 2, 2, 1, 2, 1, 3, 1, 2, 1,
	2, 1, 2, 1, 1, 3, 5, 4, 6, 4,
	3, 0, 1, 3, 2, 4, 2, 4, 1, 6,
	3, 1, 1, 5, 3, 2, 6, 3, 3, 4,
	4, 3, 1, 3, 2, 1, 3, 1, 2, 1,
	1, 2, 2, 3, 1, 1, 1, 3, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 2,
	3, 3, 1, 1, 1, 1, 1, 2, 2, 5,
	7, 3, 3, 3, 3, 4, 4, 3, 4, 4,
	3, 4, 4, 4, 3, 2, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 2,
	3, 3, 3, 2, 3, 5, 4, 6, 4, 6,
	4, 1, 0, 2, 3, 3, 3, 6, 4, 2,
	3, 4, 2, 3, 3, 3, 4, 3, 3, 3,
	3, 4, 3, 1, 1, 1, 2, 3, 2, 3,
	6, 6, 7, 9, 6, 3, 4, 5, 5, 3,
	1, 1, 5, 2, 0, 1, 1, 1, 1, 3,
	2, 2, 2, 1, 2, 0, 3, 3, 2, 8,
	11, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	1, 8, 0, 1, 1, 0, 2, 1, 0, 1,
	0, 9, 9, 3, 1, 3, 7, 1, 3, 11,
	3, 2, 0, 3, 1, 2, 2, 3, 2, 6,
	2, 1, 1, 2, 4, 2, 5, 5, 5, 2,
	8, 9, 6, 5, 3, 1, 4, 7, 5, 10,
	1, 1, 4, 0, 3, 0, 2, 2, 2, 0,
	1, 1, 2, 2, 0, 3, 3, 2, 1, 1,
	2, 2, 1, 2, 1, 4, 7, 3, 1, 0,
	1, 2, 2, 1, 2, 3, 2, 2, 3, 2,
	2, 2, 2, 2, 3, 1, 4, 2, 4, 7,
	3, 3, 0, 3, 6, 3, 6, 3, 6, 7,
	6, 5, 3, 4, 13, 16, 13, 16, 4, 2,
	2, 0, 1, 0, 1, 3, 3, 3, 5, 2,
	0, 2, 0, 1, 1, 0, 6, 6, 8, 6,
	8, 8, 10, 8, 10, 6, 8, 6, 8, 6,
	8, 1, 0, 2, 0, 2, 2, 3, 3, 2,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 3,
	2, 3, 2, 2, 2, 2, 2, 2, 1, 1,
	0, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 0, 1, 3, 1, 0, 1, 1, 1,
	2, 3, 2, 2, 8, 11, 3, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 7, 3,
	6, 3, 1, 3, 1, 4, 2, 1, 3, 1,
	3, 8, 5, 4, 3, 0, 2, 2, 0, 10,
	3, 2, 0, 1, 3, 1, 1, 3, 3, 5,
	1, 1, 3, 3, 1, 2, 3, 2, 3, 4,
	2, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	8, 8, 8, 2, 4, 4, 4, 2, 2, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 1, 5, 1, 0, 1, 0,
	1, 0, 3, 1, 3, 2, 4, 5, 2, 2,
	1, 1, 1, 0, 2, 5, 2, 3, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 3, 0, 2,
	0, 4, 2, 5, 3, 2, 0, 1, 3, 3,
	5, 1, 1, 3, 2, 4, 4, 0, 8, 4,
	3, 4, 1, 5, 3, 4, 5, 1, 5, 1,
	3, 2, 0, 3, 0, 2, 3, 1, 3, 2,
	0, 3, 4, 5, 4, 5, 4, 3, 2, 1,
	0, 5, 1, 0, 2, 2, 2, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 0, 2, 5, 2, 1, 1, 2, 3,
	0, 1, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 5, 4,
	1, 2, 1, 4, 1, 1, 2, 1, 1, 1,
	1, 1, 0, 1, 1, 4, 1, 4, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 0, 1, 4, 1,
	3, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 5, 4, 6, 3, 5, 4,
	6, 4, 6, 5, 7, 3, 3, 3, 3, 3,
	4, 3, 2, 4, 2, 3, 3, 4, 3, 4,
	3, 4, 5, 6, 6, 7, 6, 7, 6, 7,
	3, 4, 4, 1, 1, 1, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 6, 2, 1, 5, 1, 1,
	1, 1, 2, 1, 5, 5, 3, 1, 1, 1,
	2, 2, 2, 3, 5, 6, 8, 6, 6, 4,
	3, 4, 1, 1, 1, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 6, 6, 8, 8, 6,
	4, 6, 6, 6, 4, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 3, 4, 3,
	4, 3, 4, 4, 3, 6, 5, 5, 5, 4,
	4, 3, 4, 3, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 2, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 1, 1, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	2, 3, 1, 2, 3, 2, 3, 2, 3, 1,
	0, 1, 3, 1, 3, 3, 3, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	1, 2, 3, 0, 3, 3, 2, 2, 1, 2,
	2, 3, 2, 1, 1, 1, 5, 1, 2, 4,
	2, 0, 1, 0, 3, 5, 1, 0, 1, 2,
	1, 0, 1, 3, 3, 2, 1, 1, 1, 3,
	1, 3, 3, 1, 1, 1, 1, 5, 3, 1,
	1, 3, 1, 2, 2, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 7, 1, 7, 5, 3, 1, 1, 1, 1,
	1, 3, 5, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 427, -75, -48, -46, -77, -78,
	-63, -76, -79, -74, -89, -93, -83, -95, -130, -4,
	-34, -36, -49, -62, -64, -73, -81, -80, -82, -84,
	-88, -87, -40, -90, -94, -103, -131, -132, -133, 79,
	67, 118, 101, 105, 124, 148, 267, 293, 302, 287,
	-98, -99, 320, -35, -47, -92, -91, -5, -11, 26,
	37, -37, -38, -39, 52, -57, -54, -51, -60, 81,
	-390, -65, -68, -70, 110, 123, 158, 260, -85, -86,
	289, 291, -42, -41, 119, -141, -143, -96, -97, -134,
	-104, -105, -106, -107, -108, -109, -110, -111, -112, -113,
	-114, -115, -116, -117, -118, -119, -120, -121, -122, -123,
	-124, -125, -126, -127, 323, 367, 38, 332, 68, 113,
	297, 21, -6, -7, -8, -9, -10, -12, -23, -50,
	-52, -53, -55, -56, -61, -58, -59, -389, -66, -67,
	-69, -71, -72, 288, -144, -142, 424, 377, -14, -18,
	-19, -15, -17, -20, -16, -24, -28, -29, -26, -25,
	-27, -30, -31, -32, -33, -21, -22, -13, 395, 403,
	-147, -145, -146, -148, 309, 385, 345, 428, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, -191, -195, -196,
	-197, -166, 4, -367, -369, 21, 22, 23, 24, 26,
	36, 37, 38, 41, 43, 44, 47, 48, 49, 50,
	51, 52, 53, 56, 61, 66, 67, 68, 69, 70,
	75, 72, 73, 74, 77, 79, 80, 83, 84, 92,
	93, 94, 95, 96, 97, 101, 103, 105, 108, 109,
	110, 112, 114, 115, 118, 119, 122, 120, 351, 353,
	121, 123, 124, 134, 135, 136, 138, 139, 141, 143,
	147, 149, 153, 155, 156, 157, 158, 159, 160, 172,
	167, 173, 177, 180, 179, 181, 182, 183, 174, 188,
	191, 192, 193, 195, 196, 199, 200, 201, 204, 203,
	206, 209, 210, 213, 214, 217, 219, 222, 223, 226,
	224, 225, 228, 229, 231, 230, 238, 239, 241, 242,
	245, 246, 249, 252, 255, 256, 257, 258, 259, 260,
	261, 263, 265, 267, 269, 270, 271, 272, 273, 274,
	276, 277, 279, 280, 281, 282, 283, 287, 285, 286,
	288, 289, 290, 291, 293, 295, 296, 297, 298, 300,
	321, 322, 334, 302, 303, 304, 305, 306, 307, 308,
	312, 316, 313, 314, 315, 310, 311, 317, 318, 320,
	323, 325, 327, 328, 331, 332, 333, 335, 338, 339,
	340, 336, 337, 330, 343, 344, 346, 347, 348, 349,
	350, 352, 354, 359, 362, 363, 367, 368, 370, 371,
	374, 375, 376, 381, 377, 379, 382, 383, 384, 390,
	389, 396, 397, 399, 400, 401, 31, 39, 40, 42,
	45, 57, 58, 59, 62, 98, 99, 117, 125, 126,
	137, 150, 152, 161, 162, 163, 178, 184, 186, 166,
	207, 236, 237, 250, 254, 264, 266, 275, 299, 326,
	341, 356, 357, 358, 364, 365, 385, 386, 387, 391,
	398, 243, -185, 2, -166, -166, 267, 25, 2, 25,
	263, 311, 347, 349, 2, 187, 2, -412, -230, 2,
	25, -170, -166, 81, 148, 309, -185, 2, -412, -230,
	24, 2, -166, 2, -171, 2, 302, -166, 427, 214,
	61, 299, 317, -101, 363, -100, 356, 304, -102, -359,
	2, 226, -166, 427, 427, 427, 427, 2, 345, 258,
	389, 310, 378, 94, 272, 171, -407, 2, 4, -369,
	-367, -199, -198, 345, 94, -197, -166, 417, -196, 427,
	427, 427, 2, 192, 193, 271, 270, 317, 318, 427,
	427, 427, 2, 345, 333, 56, 310, 378, 295, 389,
	368, 108, -271, 94, 373, 103, 177, 376, 375, 427,
	427, 2, 389, 310, 345, 171, 94, 378, 295, -75,
	2, 424, 28, 320, -140, 345, 2, -166, 192, 193,
	2, 427, 427, -407, 2, 192, 193, 2, 306, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 2, -128, 317, 333, 156, 37,
	61, 25, 66, 95, 149, 171, 172, 200, 76, 77,
	270, 214, 193, -321, 318, 346, 305, 343, 363, 81,
	379, 296, 401, -415, 120, 4, 94, 226, 319, 356,
	70, 350, 351, -423, 2, 345, -424, 2, 363, 363,
	2, -424, 2, -424, 2, -169, 2, 363, 360, -425,
	363, 398, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, -142, -144, -143, 427, 427, 427,
	427, 427, -128, 317, 2, 61, 25, -225, -226, 372,
	185, 116, 248, -141, -143, 2, -389, -357, 2, -296,
	243, -298, 415, 416, 410, 232, 402, -309, 100, 221,
	220, -299, -311, 117, 299, -244, 8, 9, 5, 6,
	7, -173, -339, -305, -346, 366, 127, 235, -202, 430,
	10, 424, -386, -143, -310, 32, 54, -361, -201, -340,
	-348, -344, -345, -429, 43, 50, 49, 354, 225, 312,
	313, 327, 314, 315, 41, 381, 167, 241, 242, 179,
	4, 186, -200, -166, -383, -384, -367, -368, 178, 184,
	180, 326, 181, 182, 183, 40, 275, 138, 139, 137,
	109, 99, 98, 237, 45, 44, 42, 386, -349, 96,
	356, 357, 358, 359, 195, 196, 64, 86, 87, 85,
	90, 89, 91, 88, 319, 378, 55, 31, 161, 162,
	166, 236, 163, 62, -385, 337, 82, 128, 146, 176,
	164, 189, 190, 194, 208, 211, 227, 234, 251, 253,
	294, 324, -430, 387, 57, 58, 125, 126, 150, 207,
	254, 264, 341, 364, 365, -391, 276, -392, -185, -391,
	427, 427, 429, 427, -220, -221, -222, 2, 25, 106,
	424, 2, -324, 2, 422, -328, -143, 202, -327, 424,
	-325, -191, 244, -387, 300, -383, -384, -173, -166, -201,
	4, 221, 220, -3, -223, 424, 426, 345, 65, -267,
	424, -166, 25, -140, 243, 360, 429, -307, 424, 243,
	145, 245, -166, 2, 321, 2, 424, -101, 59, 363,
	-285, 2, -286, -163, -164, -165, 191, 269, 274, 401,
	-357, -418, 145, 407, 360, -357, -245, 426, 2, -328,
	161, -191, 2, -189, -360, 4, -367, -369, -368, -370,
	64, 25, 27, 28, 29, 30, 32, 33, 34, 35,
	46, 54, 55, 60, 63, 65, 76, 81, 85, 86,
	88, 87, 89, 90, 91, 100, 102, 104, 106, 107,
	111, 113, 116, 127, 129, 142, 144, 145, 148, 151,
	154, 165, 171, 175, 185, 187, 202, 205, 212, 215,
	216, 232, 233, 235, 240, 243, 244, 247, 248, 262,
	268, 278, 292, 309, 319, 329, 342, 345, 355, 360,
	361, 366, 372, 373, 378, 380, 388, 392, 393, 394,
	395, 2, -328, 161, 2, -192, 161, -328, -195, 2,
	-365, 161, -363, 10, -362, 5, 4, -367, -369, -368,
	2, -176, -166, 2, -188, -360, 2, -204, 161, -191,
	360, 429, -236, -198, -199, -229, -166, 426, -296, 2,
	-90, 2, -296, 161, 2, -90, 161, 2, -296, 161,
	2, -90, 161, 2, 2, -191, 161, -181, 2, -166,
	142, -192, 161, 2, -195, -365, 161, 2, -365, 161,
	2, -194, 2, -191, -193, -195, -193, 171, 188, -176,
	161, 2, 145, 2, 187, 2, 187, 2, -329, 2,
	-328, -238, 161, 2, -191, -238, 161, 2, -238, 161,
	2, -205, 161, 2, -204, -176, 161, 2, -366, 161,
	2, -365, -366, 161, 2, -336, 2, -335, -362, 385,
	-75, 424, 317, 424, -365, -191, -296, -90, 145, -296,
	-90, 2, 94, 345, -128, 2, 142, 380, 2, 8,
	2, -365, 273, 134, 2, 321, 2, 270, 318, 61,
	401, 145, 2, 2, -410, 2, 243, 145, 2, 145,
	2, 145, 2, 145, 2, 145, 2, 2, 270, 318,
	2, 362, 201, 121, 2, 145, 2, 145, 2, 5,
	2, 191, 269, 334, 2, -191, -421, 2, 345, 389,
	310, 2, 2, 72, 73, 145, 2, 145, 401, 2,
	-253, -328, -284, -285, -284, 360, -171, -225, -226, -128,
	321, 2, -252, -273, -274, 212, 129, 240, -258, 25,
	106, -258, -258, 48, 425, 425, 11, 12, 63, 36,
	415, 416, 417, 418, 140, 419, 420, 413, 414, 412,
	405, 406, 409, 197, 198, 78, 408, 407, 71, 218,
	301, 130, 131, 132, 133, 284, 168, 169, 170, 14,
	15, 16, 29, 247, 211, 402, 164, 324, 410, 17,
	18, 19, 189, 190, 234, 39, 165, -172, -206, -296,
	-296, -296, -296, -296, 253, -250, -291, 422, -143, 424,
	424, 424, 5, 424, 5, -356, 8, -143, -296, -309,
	425, -242, 424, -143, -309, -304, 424, 299, 422, -312,
	-296, 426, -393, 396, -342, 424, 266, -341, 424, -341,
	-341, 390, 397, 403, 397, 403, 142, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	390, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	429, -391, -223, 424, -246, -330, -296, 417, -246, -246,
	243, -239, -296, 82, -261, 194, 227, 146, 208, 294,
	176, -356, -75, -293, 430, -320, 403, -143, -325, -166,
	-143, -327, 424, -324, -320, 417, -191, 424, 145, 424,
	426, 145, -229, -360, -191, -200, -166, -201, -239, -365,
	-407, -229, -170, 33, -306, -337, -338, -350, -339, -347,
	-343, -346, 280, 281, 279, 283, 282, 43, 50, 49,
	354, 225, 312, 313, 327, 314, 315, 41, 381, 167,
	241, 242, 179, 4, 42, 386, -349, 186, 178, 184,
	180, 326, 181, 182, 183, 40, 275, 138, 139, 137,
	109, 99, 98, 237, 45, 44, 96, 356, 357, 358,
	359, 195, 196, 387, 337, 57, 58, -407, -229, 142,
	-359, -239, 33, -285, 2, -426, 429, 210, -208, 217,
	231, 155, 244, 399, -364, 5, 4, -305, -317, 100,
	214, -346, 9, 416, -354, 8, 415, -358, -357, 84,
	426, -360, -152, 285, -151, 23, 26, 110, 383, 122,
	-213, 173, 258, 117, 330, -414, -416, 303, 352, 353,
	74, 238, 285, 117, -255, -257, 33, 92, 229, 255,
	51, 159, 220, 221, 332, 391, 117, 285, 395, 117,
	-416, 285, -416, -154, 330, -414, -416, 303, 285, -153,
	-213, 117, 430, -365, -236, 429, 429, -360, 417, 117,
	117, 117, 117, 424, -223, 232, 243, -409, -237, 345,
	-191, -256, -255, 232, -162, -388, 395, 232, 232, -223,
	33, 424, 2, -178, 161, 2, -167, -166, 171, -388,
	232, -329, -203, -191, -203, 320, -185, 33, -155, 429,
	53, 290, 117, -155, 117, -155, 117, -155, 429, 117,
	-155, 117, 429, 117, 117, 425, 429, -336, -365, -138,
	395, 145, 81, 424, -366, -176, 2, -191, 2, 345,
	195, -365, -365, -359, 25, 322, 2, 73, -191, -411,
	142, -408, 295, -407, -191, -191, -191, -191, -191, 142,
	2, 362, 2, 362, 2, -166, -166, 210, -191, 142,
	345, 171, 345, -155, 429, -171, -252, -359, -274, -273,
	-276, -296, 25, -279, 136, 228, -296, -298, -142, -142,
	-142, -227, -322, -296, 268, 171, -351, -337, -337, -190,
	-360, 356, -296, -296, -296, -296, -296, -296, -296, -296,
	-296, -296, -296, -296, -296, -296, -296, -296, -296, -296,
	-296, -296, -296, -296, -296, -296, -296, -296, -296, -296,
	-296, -296, -296, -296, -296, -296, -296, 211, 164, 324,
	39, 165, -296, 360, -296, -296, -296, -296, 224, 232,
	235, 366, 127, 374, 106, 238, -431, 342, 35, -302,
	-143, -243, 424, -316, 30, 329, 25, -309, 424, -291,
	-296, -292, -240, -239, -239, 425, 388, 25, 106, 417,
	2, 8, -268, 400, 223, 97, 157, 222, -269, 308,
	425, 429, 33, 425, -296, -240, -308, -304, -315, -314,
	392, -360, 417, -394, 135, 151, 8, -356, 356, 356,
	356, 356, 424, 425, 2, 425, 2, 425, 2, 425,
	2, 425, 2, -296, -296, -296, -296, -296, -296, -296,
	-239, -262, 2, -352, -239, 4, 400, 223, 97, 157,
	222, 308, -262, 2, -239, 2, -239, 2, -263, 2,
	-296, -239, -264, -297, -298, 415, 416, 410, -309, -265,
	2, -296, -240, -296, 46, 205, 361, -266, -296, 145,
	-239, -392, 33, -239, -232, 429, 145, 33, 4, -232,
	-232, 424, 425, 429, 194, 194, -324, -261, 194, -259,
	251, -259, -259, -405, 424, 423, -320, -177, 422, 431,
	-360, -319, -318, 33, -185, 249, -320, -320, 426, 425,
	-319, -191, 424, -239, -360, 335, 425, 426, 189, 189,
	425, -138, 360, 395, -75, 425, 429, -231, 32, 422,
	-268, 424, -353, 390, 424, 424, 145, -230, -418, 425,
	363, -286, -207, 274, 328, 286, 316, 9, 8, 8,
	429, -360, 429, 360, -419, 76, 65, -288, 161, 65,
	-371, -179, 76, -372, -166, 60, 373, 268, 144, -419,
	76, -419, 76, 76, 320, 333, 48, -328, 36, -90,
	206, 145, 401, 345, 360, -328, -257, -337, 92, 220,
	221, 48, -355, -354, 416, -355, 48, -355, -355, -355,
	395, -192, -328, 360, 259, -365, 360, 429, 36, -90,
	206, 145, 360, -204, -177, -333, -332, 404, -198, -166,
	426, -296, -90, -296, -90, -209, -210, -166, -289, -288,
	-373, -374, -371, 188, 171, 373, 128, 33, 117, -229,
	-334, 187, 429, -237, 117, 259, 117, 117, 33, 424,
	114, 272, 2, 243, 232, -178, 161, -158, 348, 117,
	-290, 393, -280, -90, 424, 100, 33, -280, -247, -248,
	-331, -249, -179, 424, -185, -191, -238, -238, -238, -204,
	-205, -176, -365, -366, -366, -75, -335, 425, 425, -137,
	246, -136, -166, 5, -140, 380, -210, -138, -332, -333,
	-333, -191, 142, -229, -229, 317, 142, 142, 426, 272,
	94, 345, 258, 171, -191, -204, -191, -328, -277, -354,
	424, -278, 299, 300, 429, -150, 34, 104, 199, -191,
	401, 115, -296, -296, 360, -431, 342, -302, 115, -296,
	224, 235, 366, 127, 374, 106, 238, 145, 424, -297,
	-297, 425, -241, -296, -296, 423, 433, 425, -428, 429,
	-225, -296, -239, -239, 425, 425, 360, 360, 360, 360,
	424, 426, -239, -229, 423, 423, 429, -313, -314, 111,
	-296, 426, -399, 252, 424, 424, 425, 425, 429, 401,
	401, 401, 401, -296, 33, 429, 429, 429, 425, 429,
	429, 429, 425, 425, 145, 425, 425, 425, 425, -270,
	262, 425, 11, 12, 415, 416, 417, 418, 140, 419,
	420, 413, 414, 412, 405, 406, 407, 71, 218, 301,
	14, 15, 16, 189, 165, -297, -297, -297, 425, -300,
	-301, 145, 142, 33, -266, -266, -266, 425, 145, -239,
	424, 425, -290, -330, -234, 2, -324, -187, -360, -290,
	-290, -239, -296, -324, -324, -260, 380, 243, 194, -324,
	-318, 425, -406, -356, -320, -319, -356, -295, -294, 143,
	230, -185, -223, -319, -319, -360, -320, 425, -235, -326,
	-387, -428, 426, -360, -129, 5, 235, -129, 145, -229,
	24, -337, 422, 423, 8, 8, 424, -356, -356, -229,
	145, -357, -285, 371, 69, 274, -357, -151, -191, -179,
	-186, -166, 232, -288, 161, -157, 232, -337, -186, 424,
	424, 199, 199, -179, -186, 161, -179, 161, -186, -186,
	-413, 274, 239, -296, 213, 272, 233, -152, 285, -90,
	-90, 424, -418, 380, 105, -191, -194, 285, -200, -355,
	-355, -255, 285, -192, -365, 395, -176, -153, -90, -90,
	424, -177, -154, 285, -135, 160, 238, 417, 425, 429,
	171, -178, 171, -184, -167, -90, -191, 145, -138, -365,
	-191, -192, -365, -365, -365, -90, 2, 424, 2, -191,
	117, 243, 232, -159, 112, -427, 407, -176, -226, -225,
	-296, -254, -283, 292, 243, -224, -180, -179, 385, -185,
	-254, -233, 429, 145, 407, 426, -224, -155, -155, -155,
	-155, -155, -75, -138, 429, 424, 407, 407, 424, -365,
	-365, 425, -138, -43, 395, 345, 317, 317, -166, -188,
	-176, -191, -189, -204, -278, -296, -322, -191, 430, -296,
	-296, 115, 115, -296, -297, -297, -296, 115, 145, 424,
	-296, -306, 29, 29, 425, 429, -292, -296, 425, 388,
	-428, -428, -428, 5, 223, 157, 222, -269, 222, -269,
	-269, 8, 417, -360, 425, -304, 113, -296, 355, -360,
	417, -400, -182, 424, -166, 393, -225, -356, 425, -351,
	-337, -296, -296, -296, -296, -296, -296, -300, -296, -351,
	-337, -297, -297, -297, -297, -297, -297, -297, -297, -297,
	-297, -297, -297, -297, -297, -297, -297, -297, -297, -297,
	106, 232, 238, -297, -301, -300, -296, -296, -337, 425,
	425, 425, -239, -75, -251, 151, -333, 429, -251, -251,
	425, -260, 424, -296, -324, 423, 425, 429, -319, 423,
	429, 432, 407, -223, 426, -318, 425, 429, -282, 33,
	425, -360, -90, 245, 8, 423, 425, -356, 425, 425,
	-229, 360, 360, 117, 232, 382, -375, -372, -296, -228,
	-323, -179, -387, 424, -166, 424, 424, -149, 110, 320,
	-420, 117, -155, 117, -155, 399, 424, 424, 360, -419,
	76, -239, -296, -139, 100, -359, -416, 360, 360, 259,
	-239, 360, -138, 145, 344, -211, 174, -289, -167, 424,
	-178, 424, 424, -223, -191, -256, -162, 2, -272, 380,
	-177, -191, 117, -160, 204, -427, -363, -388, -275, -273,
	-254, -246, 233, 75, 425, 429, 426, -290, -248, -234,
	-296, 2, 425, -136, -137, -365, -365, -365, -138, -140,
	-140, 246, -191, -215, -214, 258, 238, 244, 425, -150,
	-177, -296, -296, 115, 29, 29, -296, -296, -306, 425,
	-296, -296, -239, 423, 5, -296, 425, 425, 425, 425,
	-296, 426, -401, -166, -296, 425, 425, 425, 425, 429,
	429, 425, 425, 425, 425, -301, 145, 106, 238, 424,
	425, 425, -303, 154, 48, -324, -303, -303, -229, -293,
	-356, -294, -177, 422, -360, -326, 424, 426, 423, 425,
	-179, -186, -288, 117, -376, 76, -377, 63, 128, 81,
	232, 235, 373, 268, 60, 100, 278, 33, 425, 425,
	429, -175, 63, -175, -296, -228, -229, 232, 339, 100,
	232, 100, 93, 368, -179, -186, -229, -229, -191, -179,
	-186, 425, 429, 407, -194, -192, -365, 425, -177, -366,
	356, -212, -213, 165, 424, -228, 424, -229, -209, 33,
	424, 147, 47, 243, 424, -177, -161, 203, -427, -363,
	-158, -254, -281, 424, 243, -90, -180, 2, -226, 407,
	425, 425, 93, 93, -44, -45, 171, 76, 261, -189,
	345, -150, -296, -296, -296, 425, -428, -360, 417, -395,
	258, 425, -296, -296, -297, 145, 424, -306, -396, 394,
	-296, -239, -396, -396, 425, -320, -356, 2, -288, -186,
	-190, -183, -166, 128, 161, 235, 199, 424, -297, -191,
	424, 2, -287, -422, 80, 340, -323, -150, -190, -150,
	425, 425, 425, 235, 235, -296, -337, -155, -155, 425,
	425, 360, 360, 360, -359, -357, 360, -296, 256, -228,
	425, -228, 425, 425, -90, -228, -191, -228, 243, -427,
	-363, -159, 107, -229, 76, -275, -302, -138, 424, 424,
	429, 25, 424, 25, 424, -191, 425, -226, 48, 425,
	425, -297, -306, 425, -397, -398, -182, -319, 423, -377,
	-183, 232, -296, -168, 424, -296, -211, 424, -175, 278,
	-174, 63, 424, 424, -179, -186, 424, 407, 424, -191,
	425, -287, 425, -211, 425, -272, 425, -191, -363, -160,
	375, 233, 425, -186, -254, -366, -366, -45, -229, -229,
	-402, 272, 300, 153, -239, 425, 429, 33, 117, 425,
	-378, 219, -166, 425, -212, -229, -150, -191, -417, 380,
	-190, -217, -216, -214, -219, -218, -214, -239, -357, -239,
	424, -211, -287, -212, -287, 424, -287, 424, -161, 320,
	-290, 425, 425, 425, 425, 425, -403, -404, 39, 370,
	84, -296, -403, -403, -398, -400, 128, -379, -382, -381,
	243, 146, 257, 325, 425, 339, 391, 425, -223, -296,
	425, 429, 385, 425, 429, 385, 425, 425, -229, -212,
	-211, -211, -228, -211, -228, -247, -138, -138, -404, 265,
	141, 299, 265, 141, -183, -381, 243, -382, 243, 375,
	103, -378, -216, 165, -218, 145, 425, -212, -212, 425,
	-212, 425, -290, 29, -380, 229, 290, 53, 320, -380,
	-379, 424, 424, -156, 53, 290, -287, -287, -404, 22,
	235, 100, -239, -239, -211, -211, 425, 425, -212, -212,
	-212, 360, 424, -239, 425, -212,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 10,
	12, 14, 16, 18, 20, 22, 24, 26, 27, 281,
	282, 284, 285, 286, 288, 289, 290, 292, 294, 296,
	297, 299, 301, 302, 303, 304, 305, 307, 309, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	353, 355, 0, 752, 754, 756, 758, 29, 30, 0,
	0, 169, 171, 173, 0, 196, 198, 200, 201, -2,
	0, 236, 237, 239, 0, -2, 0, 0, 342, 344,
	0, 0, 363, 364, 0, 840, -2, 357, 359, 361,
	422, 424, 426, 428, 430, 432, 434, 435, 437, 439,
	441, 443, 445, 447, 449, 451, 453, 455, 457, 459,
	461, 463, 465, 467, -2, -2, -2, 0, -2, -2,
	-2, 770, 33, 35, 37, 39, 41, 43, 61, 204,
	205, 207, 209, 211, 214, 215, 217, 877, 242, 244,
	246, 248, 250, 0, -2, 891, 0, 0, 45, 46,
	47, 48, 49, 50, 51, 68, 69, 70, 71, 72,
	73, 74, 54, 56, 57, 63, 64, 66, 0, 0,
	853, 855, 857, 859, -2, 0, 0, -2, 9, 11,
	13, 15, 17, 19, 21, 23, 25, 283, 287, 291,
	293, 295, 298, 300, 306, 308, 310, 645, 1465, 1478,
	1479, 1480, 1483, 1484, 1485, 1504, 1505, 1506, 1507, 1508,
	1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518,
	1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528,
	1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538,
	1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548,
	1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558,
	1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568,
	1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578,
	1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588,
	1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598,
	1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608,
	1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618,
	1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628,
	1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638,
	1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648,
	1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658,
	1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668,
	1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678,
	1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688,
	1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698,
	1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708,
	1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718,
	1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728,
	1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738,
	1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748,
	1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758,
	1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768,
	1769, 0, 320, 318, 1459, 321, 1632, 323, 325, 230,
	231, 232, 233, 234, 235, 0, 152, 0, 335, 329,
	334, 336, 338, 339, 340, 341, 316, 314, 0, 335,
	1507, 333, 750, 751, 745, 746, 1662, 780, 354, -2,
	-2, 1757, -2, 385, -2, 392, 1760, 1664, 395, 0,
	397, -2, 400, 753, 755, 757, 31, 32, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, -2, -2,
	-2, -2, 0, 0, 1540, 1436, 1480, 1439, 1434, 170,
	172, 174, 175, 0, 0, 0, 0, 0, 0, 197,
	199, 202, 203, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 712, 0, 0, 0, 0, 238,
	240, 241, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 0, 878, 0, 0, 0, 150, 143, 0, 0,
	578, 343, 345, 0, 142, 0, 0, 749, 0, 358,
	360, 362, 423, 425, 427, 429, 431, 433, 436, 438,
	440, 442, 444, 446, 448, 450, 452, 454, 456, 458,
	460, 462, 464, 466, 468, 469, 0, 0, 0, 0,
	0, 473, 0, -2, -2, 0, 0, 0, 0, 0,
	-2, 0, -2, 0, -2, -2, -2, 0, 0, 0,
	-2, -2, 0, 0, 0, 472, 474, 475, 476, 0,
	521, 560, 561, 0, 687, 879, 782, 760, 773, 782,
	762, 763, 764, 765, 766, 771, 772, 775, 0, 767,
	768, 769, 34, 36, 38, 40, 42, 44, 206, 208,
	210, 212, 216, 218, -2, 851, 852, 243, 245, 247,
	249, 251, 346, 0, 348, 0, 473, -2, 0, 883,
	883, 883, 0, 0, 852, 850, 0, 351, 352, 404,
	405, 1099, 0, 0, 0, 0, 0, 1334, 1183, -2,
	-2, 1215, 1217, 1736, 1757, 1333, 1219, 1220, 1221, 1222,
	1223, 0, 0, 1226, 0, 1228, 1229, 1230, 1231, 0,
	1233, 0, 1237, 1238, 1239, 0, 1413, 1476, -2, 1008,
	1009, 1010, 1011, 1012, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1472, 1467, 1305, 1252, -2, 1494, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1548, -2, -2, -2, -2, -2, -2, -2, 1064, -2,
	-2, -2, -2, -2, -2, -2, 1770, 1256, 1257, 1258,
	1259, 1260, 1261, 1262, 1263, 1264, 0, 1725, 1742, 1743,
	1748, 1750, 1744, 1733, 1275, -2, 1771, 1772, 1773, 1774,
	1775, 1776, 1777, 1778, 1779, 1780, 1783, 1784, 1785, 1786,
	1787, 1788, 1065, -2, -2, -2, 1737, 1738, 1740, 1749,
	1753, 1754, 1759, 1763, 1764, 869, 1639, 872, 645, 870,
	854, 856, 0, 858, 0, 0, 0, 863, 886, 884,
	0, 922, 867, 868, 878, 937, 960, 0, 942, 0,
	960, 982, 0, 947, 1658, 1253, 1254, 0, 1480, 1477,
	-2, 1781, 1782, 2, 0, 0, 0, 0, 0, 317,
	0, 322, 324, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 779, 356, 0, 380, 0, 384, 1732, -2,
	-2, 388, 783, 787, 788, 789, 0, 0, 0, 0,
	394, 0, 0, 381, 382, 398, 401, 0, 52, 0,
	1742, 982, 53, 0, 1449, 1499, 1500, 1501, 1502, 1503,
	1770, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797,
	1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807,
	1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817,
	1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827,
	1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837,
	1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847,
	1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857,
	1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867,
	1868, 55, 0, 1742, 58, 0, 1742, 0, -2, 62,
	0, 1742, 153, 154, 1490, 1491, 1495, 1496, 1497, 1498,
	65, 0, 1455, 67, 0, 1452, 75, 0, 1742, 1433,
	0, 0, 570, 1430, 1435, 571, 1440, 0, 176, 177,
	178, 179, 180, 1742, 182, 183, 0, 185, 186, 1742,
	188, 189, 0, 191, 213, 645, 1742, 0, 220, 1460,
	0, 669, 1742, 667, 1464, -2, 1742, 690, 693, 1742,
	695, 645, 697, 1462, 702, 1463, 0, -2, 0, 876,
	1742, 796, 0, 229, 0, 809, 0, 811, 0, 830,
	988, 135, 1742, 254, 273, 135, 1742, 257, 135, 1742,
	260, 135, 1742, 263, 1428, 135, 1742, 266, 267, 1742,
	269, 155, 270, 1742, 272, 0, -2, 311, 1466, -2,
	278, 0, -2, 0, 167, 0, 576, 577, 0, 747,
	748, 365, 0, 0, 470, 471, 0, 0, 481, 482,
	483, 484, 1637, 1562, 487, 0, 490, 511, 525, 0,
	0, 0, 494, 496, 575, 498, 0, 0, 500, 0,
	502, 0, 504, 0, 506, 0, 508, 510, 512, 526,
	514, 0, 0, 0, 524, 0, 530, 0, 533, 534,
	535, 0, 537, 538, 539, 540, 0, 542, 543, -2,
	-2, 547, 549, 0, 555, 0, 559, 0, 477, 478,
	135, 986, 759, -2, 761, 0, 777, -2, 0, 347,
	0, 350, 846, 900, 901, 0, 0, 0, 0, 881,
	882, 0, 0, 0, 842, 843, 0, 0, 0, 0,
	1339, 1340, 1341, 1342, 1343, 1344, 1347, 1348, 1345, 1346,
	1349, 1350, 0, 0, 0, 0, 0, 1351, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1352,
	1353, 1354, 0, 0, 1356, 0, 1358, 0, 0, 0,
	0, 0, 0, 1162, 1164, 1421, 0, 0, 1355, 1104,
	1105, 1106, 1141, 1142, 0, 1216, 1418, 1417, 1218, 0,
	1370, 0, 1225, 0, 1096, 1232, 1446, -2, 0, 1334,
	1365, 0, 0, 1240, 1241, 1242, 0, 0, 1370, 0,
	1412, 0, 1307, 0, 1044, 0, 1045, 1046, 0, 1047,
	1048, 1061, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1066, 0, 0, 0, 0, 0, 1393, -2, 0, 0,
	0, 871, 0, 0, 926, 1422, 1426, 1427, 926, 926,
	0, 0, 1371, 0, 0, 0, 0, 979, 979, 979,
	977, 954, 0, 960, 0, 970, 0, 960, 960, 0,
	-2, 942, 0, 0, 970, 983, 984, 0, 0, 0,
	0, 0, 0, 1481, 0, 0, 1467, 1468, 0, 167,
	0, 327, 337, 878, 0, 1373, 1000, 996, 1003, 1004,
	1005, 1096, 1051, 1052, 1053, 1054, 1055, 1013, 1014, 1015,
	1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025,
	1026, 1027, 1028, 1029, -2, 1062, 1064, 1082, 1033, 1034,
	1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1057,
	0, 1032, 1032, 1032, 1049, 1050, 1073, 1074, 1076, 1078,
	1080, 1001, 1002, 1067, 1068, 1069, 1070, 0, 331, 0,
	0, 0, 0, -2, 390, 0, 785, 0, 790, 413,
	414, 415, 792, 793, 393, 416, 417, 418, 419, 420,
	421, 0, 662, 0, 664, 1442, 0, 391, 406, 396,
	0, 402, 76, 742, 103, 0, 742, 742, 0, 0,
	122, 0, 0, 0, 0, 0, 94, 99, 82, 83,
	0, 0, 0, 0, 59, 670, 0, 673, 0, 0,
	0, 0, 0, 0, 0, 685, 0, 0, 0, 0,
	93, 0, 88, 78, 0, 0, 96, 101, 0, 126,
	128, 0, 0, 973, 569, 0, 0, 1481, 1438, 0,
	0, 0, 0, 584, 0, 0, 0, 227, 222, 0,
	224, 665, 668, 0, 688, 0, 875, 0, 0, 0,
	0, 0, 703, 0, 1742, 708, 1451, 1486, 1487, 798,
	0, 992, 0, 812, 0, 0, 989, 0, 252, 0,
	133, 134, 0, 255, 0, 258, 0, 261, 0, 0,
	264, 0, 0, 0, 0, 878, 0, 0, 0, 145,
	0, 0, 0, 0, 167, 973, 367, 973, 369, 0,
	0, 485, 486, 488, 489, 491, 492, 556, 493, 497,
	0, 563, 1654, 573, 499, 501, 503, 505, 507, 0,
	516, 0, 518, 0, 520, 528, 531, 536, 541, 0,
	0, 0, 0, 686, 0, 776, 849, 349, 898, 899,
	904, 908, 909, 912, 915, 916, 906, 1099, 864, 865,
	866, 892, 893, 725, 0, 0, 1100, 997, 1101, 1102,
	1448, 0, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114,
	1115, 1116, -2, -2, -2, -2, -2, -2, -2, -2,
	1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134,
	1135, -2, -2, -2, 1139, 1140, -2, 1357, 1359, 0,
	1421, 0, -2, 0, -2, -2, -2, -2, 1159, 0,
	1161, 1166, 1168, 1170, 0, 0, 0, 0, 1420, 1180,
	1404, 1405, 0, 0, 1336, 1337, 1338, 1165, 0, 1419,
	1416, 0, 0, 1369, 889, 1243, 0, 0, 0, 0,
	1250, 0, 1447, 1083, 1084, 1085, 1086, 1087, 1088, 1097,
	1236, 1367, 0, 1366, 0, 0, 0, 1377, 1411, 1407,
	0, 1469, 1475, 1315, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1276, 1277, 1278, 1279, 1280, 1281, 1282,
	1283, 1284, 1285, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1287, 0, 1380, -2, -2, -2, -2, -2,
	-2, -2, 0, 1289, 0, 1301, 0, 1303, 0, 1291,
	1371, 1390, 0, 0, 1186, 0, 0, 0, 1334, 0,
	1294, 1371, 1398, 0, 0, 0, 0, 0, 1371, 0,
	1403, 873, 0, 0, 992, 0, 0, 0, 1425, 992,
	992, 0, 921, 0, 0, 0, 0, 0, 0, 974,
	978, 975, 976, 0, 0, 960, 970, 934, 0, 0,
	1450, 940, 969, 0, 645, 959, 970, 970, 0, -2,
	944, 0, 0, 889, -2, 168, 644, 0, 0, 0,
	319, 0, 0, 0, 313, 315, 0, 993, 995, 0,
	1006, 0, 0, -2, 0, 0, 0, 0, 0, 383,
	0, 784, 791, 0, 410, 0, 412, 663, 1444, 1443,
	0, 403, 0, 0, 0, 0, 741, 105, 1742, 0,
	137, 0, 0, 635, 1456, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	0, 0, 0, 0, 0, 0, 671, 672, 674, 680,
	682, 0, 676, 1445, 0, 677, 0, 679, 681, 683,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 1432, 158, 972, 0, 1431, 1441,
	0, 181, 184, 187, 190, 0, 583, -2, 585, 587,
	588, 589, 590, 1588, 1487, 0, 1487, 0, 0, 0,
	167, 0, 0, 223, 0, 0, 0, 0, 0, 0,
	0, 0, 701, 0, 0, 0, 1742, 800, 806, 0,
	891, 0, 828, 814, 0, 0, 0, 828, 832, 833,
	835, 836, 0, 0, 990, 274, 135, 135, 135, 1429,
	135, 135, 156, 268, 271, 277, 312, 878, 167, 165,
	1620, 163, 160, 162, 0, 0, 0, 140, 167, 366,
	371, 479, 0, 574, 572, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 557, 558, 562, 987, 0, 910,
	0, 907, 913, 914, 0, 895, 723, 724, 0, 0,
	0, 0, -2, -2, 0, 0, 0, 1181, 0, -2,
	1160, 1163, 1167, 1169, 1171, 0, 0, 0, 0, 0,
	0, 1360, 0, 1362, 1182, 1414, 1417, 1332, 0, 0,
	888, 889, 889, 889, 1249, 0, 0, 0, 0, 0,
	0, 0, 1368, 0, 1375, 1376, 0, 0, 1408, 0,
	0, 0, 1251, 0, 0, 0, 1056, 1030, 0, 1075,
	1077, 1079, 1081, 0, 0, 0, 0, 0, 1270, 0,
	0, 0, 1274, 1286, 0, 1288, 1300, 1302, 1290, 0,
	0, 1292, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1189, 1190, 1191, 1293, 1396,
	1397, 0, 0, 0, 0, 0, 0, 1299, 0, 1402,
	878, 923, 918, 1423, 973, 925, 927, 1424, 1453, 918,
	918, 0, 1372, 962, 0, 964, 0, 0, 0, 966,
	0, 955, 0, 957, 970, 939, 0, 0, 932, 0,
	931, 645, 968, 941, 945, 1469, 0, 985, 0, 949,
	952, 0, 0, 1482, 192, 194, 195, 193, 0, 326,
	0, 1374, 0, 998, 0, 0, 0, 0, 0, 330,
	0, 379, -2, 408, 409, 411, 407, 104, 729, 0,
	0, 1454, 0, 107, 1742, 116, 0, 612, 0, 0,
	0, 0, 0, 744, 117, 1742, 135, 1742, 135, 118,
	121, 0, 125, 123, 0, 0, 603, 77, 742, 80,
	86, 0, 0, 0, 92, 0, 735, 0, 675, 678,
	684, 60, 0, 737, 727, 0, 726, 127, 81, 87,
	0, 739, 79, 0, 167, 0, 0, 1437, 592, 0,
	1487, 0, 1487, 0, 1458, 581, 645, 0, 221, 226,
	225, 669, 691, -2, 694, 696, 698, 0, 700, 711,
	0, 0, 0, 802, 806, 0, 805, 876, 903, 890,
	991, 807, 828, 0, 0, 0, 817, 819, 816, 813,
	810, 992, 0, 0, 0, 0, 0, 253, 256, 259,
	262, 265, 279, 144, 0, 0, 0, 0, 0, 167,
	0, 0, 141, 368, 0, 0, 517, 519, 527, 550,
	551, 598, 0, 554, 0, 0, 894, 725, 0, 1103,
	1144, 0, 0, -2, 0, 0, 1148, 0, 0, 0,
	-2, 0, 0, 0, 1361, 1363, 0, 1416, 1244, 0,
	0, 0, 0, 1227, 1089, 1090, 1091, 1092, 1093, 1094,
	1095, 0, 1234, 1235, 1335, 1378, 1406, 1410, 0, 1470,
	1474, 1313, 1314, 1318, 1461, 0, 0, 0, 1255, 0,
	0, 0, 0, 0, 0, 0, 1379, 1389, 1391, 1187,
	1188, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200,
	1201, -2, -2, -2, 1205, 1206, 1207, -2, -2, -2,
	0, 0, 0, 1392, 1394, 1395, 1399, 1400, 0, 1296,
	1297, 1298, 1401, 0, 920, 0, 924, 0, 920, 920,
	885, 963, 0, 981, 965, 937, 956, 0, 946, 935,
	0, 936, 0, 967, 0, 943, 948, 0, 951, 0,
	1244, -2, 151, 328, 0, 999, 1007, 0, 1059, 1063,
	332, 0, 0, 0, 0, 136, 610, 634, 0, 0,
	714, 722, 722, 0, 1456, 0, 0, 109, 0, 0,
	0, 0, 114, 0, 120, 124, 0, 0, 0, 0,
	0, 0, 89, 90, 91, 0, 95, 0, 0, 0,
	0, 0, 138, 0, 0, 600, 0, 586, 0, 0,
	0, 0, 584, 0, 219, 666, 689, 699, 0, 0,
	0, 0, 0, 804, 806, 0, 797, 798, 828, 902,
	808, 826, 827, 825, 0, 0, 0, 891, 834, 831,
	837, 838, 0, 164, 0, 159, 161, 0, 147, 0,
	0, 0, 480, 552, 597, 0, 0, 905, 911, 896,
	725, 1146, 1150, 0, 0, 0, 1152, -2, 0, 1174,
	-2, -2, 1364, 1415, 1224, 889, 1245, 1247, 1248, 1098,
	1409, 0, 1320, 1317, 0, 1304, 1031, 1265, 1266, 0,
	0, 1269, 1271, 1272, 1273, 1388, 0, 0, 0, 0,
	1295, 874, 1309, 0, 0, 928, 1309, 1309, 0, 960,
	958, 933, 929, 0, 1470, 950, 0, 0, 994, 1058,
	731, 733, 106, 0, 611, 0, 614, 0, 0, 0,
	0, 621, 622, 0, 0, 0, 0, 0, 636, 643,
	0, 725, 0, 725, 0, 0, 0, 0, 111, 130,
	0, 0, 743, 0, 135, 135, 0, 0, 730, 0,
	0, 0, 0, 0, 736, 738, 728, 0, 740, 157,
	0, 579, 599, 0, 0, 0, 0, 0, 0, 0,
	0, 709, 710, 0, 0, 0, 794, 806, 0, 799,
	800, 228, 0, 0, 0, 815, 818, 820, 903, 0,
	166, 167, 0, 0, 370, 372, 0, 0, 378, 596,
	0, 897, 1154, -2, -2, 1175, 0, 1471, 1473, 891,
	0, 1306, 0, 0, -2, 0, 0, 0, 860, 0,
	919, 917, 861, 862, 980, 970, 0, 953, 108, 0,
	615, 616, 1457, 618, 0, 620, 623, 0, 625, 1489,
	0, 629, 592, 0, 640, 641, 715, 716, 721, 717,
	722, 638, 0, 110, 112, 129, 720, 113, 119, 0,
	0, 0, 0, 0, 0, 97, 0, 971, 0, 0,
	643, 0, 633, 592, 582, 0, 711, 0, 0, 0,
	801, 802, 0, 0, 0, 828, 839, 146, 0, 0,
	0, 374, 0, 376, 0, 553, 1246, 1324, 0, 1267,
	1268, -2, 0, 1213, 1308, 1310, 0, 938, 930, 613,
	617, 0, 0, 649, 0, 0, 600, 0, 725, 0,
	132, 0, 0, 0, 732, 734, 0, 0, 0, 0,
	632, 592, 643, 600, 643, 0, 643, 0, 803, 804,
	0, 822, 992, 824, 829, 0, 0, 373, 0, 0,
	0, 0, 0, 0, 1319, 1214, 0, 0, 0, 624,
	654, 0, 0, 0, 637, 0, 718, 645, 115, 0,
	719, 0, 604, 0, 0, 607, 0, 0, 98, 0,
	0, 600, 592, 580, 592, 0, 592, 0, 795, 0,
	823, 167, 167, 375, 377, 1316, 1321, 1325, -2, 1707,
	1537, 0, 1322, 1323, 1311, 1312, 0, 626, 650, 651,
	0, 646, 647, 648, 1488, 627, 628, 642, 649, 131,
	601, 0, 0, 602, 0, 0, 100, 102, 0, 630,
	600, 600, 0, 600, 0, 992, 148, 149, 0, 1327,
	1328, 1329, 1330, 1331, 619, 652, 0, 653, 0, 0,
	0, 654, 605, 0, 608, 0, 595, 631, 704, 643,
	706, 643, 821, 0, 655, 0, 658, 659, 0, 656,
	639, 0, 0, 591, 593, 594, 592, 592, 1326, 657,
	660, 661, 0, 0, 600, 600, 600, 0, 705, 707,
	606, 0, 0, 0, 600, 609,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 413, 3, 419, 414, 3,
	424, 425, 417, 415, 429, 416, 426, 418, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 433, 428,
	405, 407, 406, 409, 430, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 422, 3, 423, 420, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 431, 412, 432, 410,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 408, 57748, 411, 57749, 421,
	57750, 427, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1029
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1035
		{
			l := sqlDollar[1].union.stmts()
			s := sqlDollar[3].union.stmt()
			if s != nil {
				l = append(l, s)
			}
			sqlVAL.union.val = l
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1044
		{
			sqlVAL.union.val = []tree.Statement(nil)
			s := sqlDollar[1].union.stmt()
			if s != nil {
				sqlVAL.union.val = []tree.Statement{s}
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1053
		{
			return helpWith(sqllex, "")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1057
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1058
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1059
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1060
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1061
		{
			return helpWith(sqllex, "GRANT")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1062
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1063
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1064
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1065
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1069
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1078
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1079
		{
			return helpWith(sqllex, "ALTER")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1082
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1083
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1084
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1085
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1086
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1087
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1137
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1138
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1149
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1164
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1168
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1172
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1183
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1195
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1213
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1236
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1240
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1244
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1250
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1254
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1260
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1266
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1276
		{

			sqlVAL.union.val = &tree.Relocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1283
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1290
		{

			sqlVAL.union.val = &tree.Relocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1297
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1304
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1312
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1317
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1321
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1326
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1332
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1340
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
			}
			sqlVAL.union.val = s
		}
	case 95:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1348
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1359
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableWithIdx(),
			}
			sqlVAL.union.val = s
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1369
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1373
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1379
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1383
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1389
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1393
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1399
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1403
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1410
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1415
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1420
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1425
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1430
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1435
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1440
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1444
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1447
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1456
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1468
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1478
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1485
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1488
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1495
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1504
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1513
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1518
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1525
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1533
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1534
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1538
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1542
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1548
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1556
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1560
		{
			sqlVAL.union.val = nil
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1566
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1570
		{
			sqlVAL.union.val = nil
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1577
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1581
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1585
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1591
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1595
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 138:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1621
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1624
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 140:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1647
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1651
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1654
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1658
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 144:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1693
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1697
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:1701
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1705
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1709
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1713
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1716
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 151:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1733
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1736
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1740
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1744
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1750
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1754
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1760
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1764
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1770
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1774
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1778
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1782
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1788
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1792
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1798
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1802
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 167:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1806
		{
			sqlVAL.union.val = nil
		}
	case 168:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1812
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1824
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1825
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1826
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1827
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1837
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1845
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1847
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1850
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1860
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1869
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1877
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1879
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1883
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1886
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1896
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1905
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1913
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1915
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1919
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1922
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1926
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1931
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1937
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1938
		{
			sqlVAL.str = ""
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1947
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1948
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1950
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1951
		{
			return helpWith(sqllex, "CREATE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1955
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1956
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1957
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1958
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1960
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1961
		{
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1962
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1963
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1973
		{

			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1981
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1985
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1995
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1999
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2005
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2009
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2016
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 227:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2020
		{

			sqlVAL.union.val = nil
		}
	case 228:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:2034
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2044
		{
			return helpWith(sqllex, "DELETE")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2051
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2054
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2055
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2056
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2057
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2058
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2067
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2068
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2069
		{
			return helpWith(sqllex, "DROP")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2072
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2073
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2074
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2075
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2076
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2084
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2088
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2091
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2099
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2103
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2106
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2114
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2118
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2121
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2129
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2137
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2144
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2152
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2160
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2167
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2175
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2179
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2182
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2190
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2194
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2197
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2201
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2205
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2227
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2230
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 277:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2232
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2236
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2240
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2247
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2251
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2254
		{
			return helpWith(sqllex, "DELETE")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2256
		{
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2257
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2258
		{
			return helpWith(sqllex, "INSERT")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2259
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2261
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2262
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2265
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2270
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2271
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2272
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2276
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2280
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 313:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2290
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2297
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2301
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2305
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2315
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2321
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2327
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2331
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2341
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2345
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2349
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2353
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2356
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2376
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2380
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2384
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2387
		{
			return helpWith(sqllex, "GRANT")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2407
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2411
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2415
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2418
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2423
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2427
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2438
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2442
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2456
		{
			return helpWith(sqllex, "RESET")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2457
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2465
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2469
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2472
		{
			return helpWith(sqllex, "RESET")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2480
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2483
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2494
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2497
		{
			return helpWith(sqllex, "USE")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2501
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2502
		{
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2503
		{
			return unimplemented(sqllex, "set local")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2507
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2508
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2509
		{
			return helpWith(sqllex, "USE")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2525
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2540
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2543
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2561
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2569
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2573
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 371:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2577
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2583
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2587
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2593
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2597
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2601
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2605
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2609
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2620
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2623
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2633
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2649
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2653
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 386:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2658
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2675
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2678
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2680
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2683
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2687
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2706
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2713
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2719
		{
			return unimplemented(sqllex, "set from current")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2720
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2728
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2733
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2740
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2744
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2750
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2754
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2761
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2767
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2771
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2777
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2781
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2785
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2789
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2793
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2799
		{
			sqlVAL.union.val = tree.Low
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2803
		{
			sqlVAL.union.val = tree.Normal
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2807
		{
			sqlVAL.union.val = tree.High
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2818
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2822
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2826
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2831
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2835
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2847
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2848
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2849
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2850
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2851
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2852
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2854
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2855
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2856
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2857
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2858
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2859
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2860
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2861
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2862
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2863
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2864
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2865
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2866
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2867
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2868
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2869
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2871
		{
			return helpWith(sqllex, "SHOW")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2878
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2879
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2880
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2891
		{
			sqlVAL.str = "client_encoding"
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2894
		{
			sqlVAL.str = "timezone"
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2895
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 479:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2909
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2914
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2918
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2929
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2938
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2946
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2953
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2961
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2968
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 488:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2978
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2982
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2985
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2987
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2990
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2998
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3001
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3009
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3012
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3025
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3033
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3041
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3044
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3046
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3049
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3051
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3054
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3062
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3065
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3067
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3070
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3078
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3081
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3083
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3087
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3097
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3100
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3109
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3112
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3114
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3117
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3119
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3123
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3126
		{
			sqlVAL.union.val = true
		}
	case 522:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3127
		{
			sqlVAL.union.val = false
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3135
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3138
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3140
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3144
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3154
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3163
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3172
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3175
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3182
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3186
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3189
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3196
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3200
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3208
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3213
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3218
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3222
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3230
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3234
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3238
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3251
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3254
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3262
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3265
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3269
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3273
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3277
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3283
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[9].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3290
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableWithIdx(),
			}}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3296
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3300
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3311
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3315
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3318
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3326
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3333
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 564:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3338
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3458
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3462
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3466
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3505
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3509
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3514
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3518
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3527
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3534
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 575:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3538
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3550
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3559
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3562
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3598
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3610
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3624
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3635
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3649
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3655
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3659
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3665
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3671
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3677
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3685
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3692
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3697
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 595:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3702
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3708
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 598:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3715
		{
			sqlVAL.str = ""
		}
	case 600:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3722
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 601:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3728
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3735
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3742
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3748
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3752
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 606:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3758
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3768
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3772
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 609:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3778
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3789
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3800
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 612:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3804
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3810
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3814
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3818
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3822
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3826
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3830
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3834
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3852
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3856
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3860
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3864
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3868
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3872
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3876
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3884
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3888
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3892
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 630:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3899
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3909
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3921
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3931
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3943
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3948
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3954
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3960
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3971
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3981
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4005
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4009
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4015
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4019
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4024
		{
			return unimplemented(sqllex, "match full")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4025
		{
			return unimplemented(sqllex, "match partial")
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4026
		{
			return unimplemented(sqllex, "match simple")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4027
		{
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4034
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4038
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4042
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4046
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4050
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4056
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4062
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4070
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4074
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4078
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4082
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4086
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4092
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4096
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4102
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4121
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 666:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4129
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4137
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4141
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4144
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4145
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4148
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4149
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4151
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4152
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4153
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4156
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4158
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4160
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4162
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4163
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4165
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4166
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4168
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4170
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4178
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4181
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 688:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4189
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4193
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4196
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4200
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4204
		{
			sqlVAL.union.val = nil
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4214
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4218
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4221
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 696:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4229
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4236
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 698:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4244
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 699:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4246
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4248
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4250
		{
			return unimplementedWithIssue(sqllex, 27793)
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4252
		{
			return unimplementedWithIssue(sqllex, 27793)
		}
	case 703:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4254
		{
			return unimplementedWithIssue(sqllex, 27796)
		}
	case 704:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:4270
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql-gen.y:4283
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:4297
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql-gen.y:4310
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       sqlDollar[10].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4323
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4328
		{
			sqlVAL.union.val = true
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4332
		{
			sqlVAL.union.val = false
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4336
		{
			sqlVAL.union.val = false
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4342
		{
			sqlVAL.union.val = true
		}
	case 713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4346
		{
			sqlVAL.union.val = false
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4352
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4356
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4365
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4368
		{
			return unimplemented(sqllex, "index_elem func expr (computed indexes)")
		}
	case 718:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4369
		{
			return unimplemented(sqllex, "index_elem a_expr (computed indexes)")
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4372
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4373
		{
			sqlVAL.str = ""
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4376
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4377
		{
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4381
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4385
		{
			sqlVAL.union.val = tree.Descending
		}
	case 725:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4389
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 726:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4395
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4402
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4406
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4412
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4416
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4420
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4424
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4428
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 734:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4430
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 735:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4434
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4438
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4444
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4448
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4454
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4458
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4463
		{
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4464
		{
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4467
		{
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4468
		{
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4476
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4479
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4489
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4498
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4501
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4509
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4512
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4516
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4517
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4518
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4534
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4537
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4539
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4542
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4552
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4555
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4557
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4560
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4564
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4569
		{
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4570
		{
		}
	case 770:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4571
		{
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4579
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4586
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4589
		{
		}
	case 774:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4590
		{
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4594
		{
			sqlVAL.str = ""
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4598
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4602
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 778:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4606
		{
			sqlVAL.str = ""
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4612
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4616
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4622
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4626
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4632
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4636
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4649
		{
		}
	case 786:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4651
		{
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4655
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4659
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4663
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4669
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4675
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4681
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4685
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 794:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4695
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4705
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4715
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4719
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 798:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4723
		{
			sqlVAL.str = ""
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4729
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4733
		{
			sqlVAL.str = ""
		}
	case 801:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4739
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 802:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4743
		{
			sqlVAL.str = ""
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4749
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 804:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4753
		{
			sqlVAL.str = ""
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4758
		{
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4759
		{
		}
	case 807:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4771
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 808:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4778
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4785
		{
			return helpWith(sqllex, "INSERT")
		}
	case 810:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4796
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4803
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4807
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4815
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4821
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4825
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4829
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4835
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4839
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 820:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4859
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 821:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4863
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4867
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4873
		{

			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4877
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 825:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4879
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4885
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4890
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 828:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4894
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 829:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4911
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4922
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4926
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 832:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4927
		{
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4931
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4935
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4948
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4951
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 839:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4955
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4998
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5004
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5008
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5023
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5027
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5031
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5035
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5039
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5043
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5050
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5085
		{
			return helpWith(sqllex, "SELECT")
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5086
		{
			return helpWith(sqllex, "VALUES")
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5087
		{
			return helpWith(sqllex, "TABLE")
		}
	case 860:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5109
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5122
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5136
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5148
		{
			return helpWith(sqllex, "SELECT")
		}
	case 864:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5152
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5161
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5170
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5185
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5192
		{
			return helpWith(sqllex, "TABLE")
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5204
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5207
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5208
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5212
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5216
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 874:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5222
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5230
		{
		}
	case 876:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5231
		{
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5235
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 878:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5239
		{
			sqlVAL.union.val = nil
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5244
		{
		}
	case 880:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5245
		{
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5249
		{
			sqlVAL.union.val = true
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5253
		{
			sqlVAL.union.val = false
		}
	case 883:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5257
		{
			sqlVAL.union.val = false
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5263
		{
			sqlVAL.union.val = true
		}
	case 885:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5269
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5274
		{
		}
	case 887:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5275
		{
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5278
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 889:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5279
		{
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5283
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 891:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5287
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5293
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5299
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5303
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5309
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5313
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5317
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5326
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5335
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5346
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5350
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5359
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5365
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5372
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5379
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5388
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5392
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 912:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5396
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5402
		{
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5403
		{
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5406
		{
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5407
		{
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5424
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 918:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5428
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5434
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 920:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5438
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 921:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5457
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5460
		{
			return helpWith(sqllex, "VALUES")
		}
	case 923:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5462
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5474
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5477
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 926:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5479
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5485
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5489
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5495
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5499
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5505
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5511
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5516
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5528
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5532
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5536
		{
			sqlVAL.union.val = sqlDollar[3].union.indexFlags()
		}
	case 937:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5540
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 938:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5567
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5581
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5590
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5597
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5599
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 943:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5603
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5607
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5612
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 946:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5628
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5634
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5638
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5644
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5646
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5650
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 952:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5656
		{
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5658
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 954:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5661
		{
			sqlVAL.union.val = nil
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5662
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5663
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5667
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5671
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 959:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5677
		{
			sqlVAL.union.val = true
		}
	case 960:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5681
		{
			sqlVAL.union.val = false
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5701
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5705
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5709
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5713
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5717
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5721
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5727
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5731
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5738
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5744
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5751
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5757
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 975:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5761
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 976:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5765
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5769
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5775
		{
		}
	case 979:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5776
		{
		}
	case 980:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5787
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5791
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5796
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 983:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5797
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5798
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 985:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5799
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5803
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5807
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5820
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5824
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5828
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5834
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 992:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5838
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 993:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5850
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5864
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5873
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5882
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5888
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5895
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5897
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5906
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5917
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5934
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5938
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5942
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5946
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5950
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5954
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5958
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5962
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5966
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5970
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5974
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5978
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5982
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5986
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5990
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5994
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5998
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6002
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.QChar
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6022
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6026
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6030
		{
			sqlVAL.union.val = nil
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6037
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6041
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6045
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6049
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6053
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6057
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6061
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6065
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6069
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6073
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6077
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6081
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6085
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6089
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6096
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6103
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6110
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6114
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6121
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6125
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6129
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6133
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6137
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6143
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			typ, err := coltypes.NewFloat(prec)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = typ
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6158
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6164
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[4].union.int64()), sqlDollar[2].union.bool())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6170
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[3].union.int64()), true)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6178
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6182
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6186
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6192
		{
			colTyp := *(sqlDollar[1].union.colType().(*coltypes.TString))
			n := sqlDollar[3].union.int64()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", &colTyp))
				return 1
			}
			colTyp.N = uint(n)
			sqlVAL.union.val = &colTyp
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6205
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6211
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6215
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6219
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6223
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6232
		{
			sqlVAL.union.val = true
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6233
		{
			sqlVAL.union.val = false
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6238
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6242
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6246
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6250
		{
			return unimplementedWithIssue(sqllex, 26097)
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6254
		{
			return unimplementedWithIssue(sqllex, 26097)
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6258
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6262
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6266
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6270
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6275
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6281
		{
			sqlVAL.union.val = tree.Year
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6285
		{
			sqlVAL.union.val = tree.Month
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6289
		{
			sqlVAL.union.val = tree.Day
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6293
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6297
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6301
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6307
		{
			sqlVAL.union.val = tree.Month
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6311
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6315
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6319
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6323
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6327
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6331
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6335
		{
			sqlVAL.union.val = nil
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6341
		{
			sqlVAL.union.val = tree.Second
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6344
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6368
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6372
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6376
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6379
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6388
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6393
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6397
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6401
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6405
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6409
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6413
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6417
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6421
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6425
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6429
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6433
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6437
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6441
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6445
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6449
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6453
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6457
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6461
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6465
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6469
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6473
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6477
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6481
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6485
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6489
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6493
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6497
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6501
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6505
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6509
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6513
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6517
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6521
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6525
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6529
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6533
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6537
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6541
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6545
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6549
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6553
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6557
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6561
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6565
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6569
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6573
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6577
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6581
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6585
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6589
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6593
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6597
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6601
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6605
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6609
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6613
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6617
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6621
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6625
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6629
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6632
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6634
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6638
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6642
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6646
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6650
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6654
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6658
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6662
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6666
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6670
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6674
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6678
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6682
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6686
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6690
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6694
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6698
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6715
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6719
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6723
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6738
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6742
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6746
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6750
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6754
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6758
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6762
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6766
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6770
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6774
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6778
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6782
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6786
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6790
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6794
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6798
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6802
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6806
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6810
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6814
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6818
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6822
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6826
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6830
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6834
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6838
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6842
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6846
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6860
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6868
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6904
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6908
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6912
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6916
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6920
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6925
		{
			return unimplemented(sqllex, "func const")
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6927
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6931
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6934
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6936
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6940
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6944
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6948
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6952
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6961
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6966
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6970
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6974
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6979
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6983
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6987
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6991
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6995
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7004
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7008
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7011
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7012
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7014
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7018
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7022
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7025
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7036
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7043
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7052
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7053
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7057
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7059
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7063
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7069
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7073
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7077
		{
			return unimplementedWithIssue(sqllex, 26097)
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7081
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7087
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7091
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7095
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7099
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7103
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7107
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7111
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7115
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7119
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7123
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7127
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7131
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7135
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7142
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7145
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7147
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7150
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7152
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7155
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7157
		{
			return unimplementedWithIssue(sqllex, 26097)
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7160
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7162
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7165
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7167
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7170
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7172
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7175
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7177
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7180
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7182
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7186
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7189
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7190
		{
			return unimplemented(sqllex, "treat")
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7192
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7196
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7200
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7204
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7208
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7211
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7213
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7216
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7221
		{
			return unimplemented(sqllex, "within group")
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7222
		{
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7226
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7230
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7237
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7241
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7247
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7251
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7257
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7265
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7269
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7273
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7280
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7300
		{
			sqlVAL.str = ""
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7306
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7310
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7321
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7328
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7335
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7342
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7348
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7361
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7389
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7393
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7397
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7401
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7408
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7424
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7428
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7435
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7447
		{
			sqlVAL.union.val = tree.Any
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7451
		{
			sqlVAL.union.val = tree.Some
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7455
		{
			sqlVAL.union.val = tree.All
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7460
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7461
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7462
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7463
		{
			sqlVAL.union.val = tree.Div
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7464
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7465
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7466
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7467
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7468
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7469
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7470
		{
			sqlVAL.union.val = tree.LT
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7471
		{
			sqlVAL.union.val = tree.GT
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7472
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7473
		{
			sqlVAL.union.val = tree.LE
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7474
		{
			sqlVAL.union.val = tree.GE
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7475
		{
			sqlVAL.union.val = tree.NE
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7479
		{
			sqlVAL.union.val = tree.Like
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7480
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7481
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7482
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7505
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7509
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7515
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7519
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7523
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7534
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7538
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7544
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7548
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7555
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7561
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7565
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7571
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7575
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7581
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7585
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7591
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7595
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7601
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7605
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7627
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7631
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7635
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7641
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7648
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7652
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7669
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7673
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7677
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7681
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7685
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7691
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7697
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7703
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7707
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7711
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7717
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7729
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7736
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7740
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7746
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7752
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7756
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7763
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7769
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7773
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7780
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7786
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7790
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7795
		{
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7796
		{
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7800
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7804
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7810
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7819
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7823
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7827
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7835
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7839
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7845
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7849
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7855
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7862
		{

			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7890
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7894
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7898
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7904
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7908
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7916
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7920
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7931
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7942
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7952
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8050
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8057
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8061
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:8065
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:8079
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8083
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8087
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8100
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8118
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8128
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8132
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8146
		{
			sqlVAL.str = ""
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8152
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8156
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
