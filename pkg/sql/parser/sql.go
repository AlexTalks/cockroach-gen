// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24

import (
	"fmt"
	"strings"

	"go/constant"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:60

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:573
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMMEDIATE",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9036

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 26,
	-2, 967,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 69,
	176, 802,
	193, 802,
	207, 229,
	279, 229,
	287, 658,
	314, 229,
	323, 658,
	360, 658,
	384, 229,
	407, 658,
	-2, 0,
	-1, 75,
	207, 233,
	-2, 0,
	-1, 76,
	105, 967,
	182, 967,
	393, 967,
	394, 967,
	-2, 0,
	-1, 87,
	118, 941,
	132, 941,
	190, 941,
	218, 941,
	247, 941,
	256, 941,
	389, 941,
	-2, 928,
	-1, 115,
	123, 582,
	206, 582,
	377, 582,
	-2, 0,
	-1, 116,
	4, 969,
	21, 969,
	22, 969,
	23, 969,
	24, 969,
	25, 969,
	27, 969,
	32, 969,
	37, 969,
	38, 969,
	39, 969,
	40, 969,
	41, 969,
	42, 969,
	43, 969,
	44, 969,
	45, 969,
	46, 969,
	48, 969,
	49, 969,
	50, 969,
	51, 969,
	52, 969,
	53, 969,
	56, 969,
	57, 969,
	58, 969,
	59, 969,
	61, 969,
	62, 969,
	66, 969,
	67, 969,
	68, 969,
	69, 969,
	70, 969,
	72, 969,
	73, 969,
	74, 969,
	75, 969,
	77, 969,
	79, 969,
	80, 969,
	81, 969,
	84, 969,
	85, 969,
	93, 969,
	94, 969,
	95, 969,
	96, 969,
	97, 969,
	98, 969,
	99, 969,
	100, 969,
	102, 969,
	104, 969,
	105, 969,
	107, 969,
	110, 969,
	111, 969,
	112, 969,
	114, 969,
	116, 969,
	117, 969,
	119, 969,
	120, 969,
	121, 969,
	122, 969,
	123, 969,
	124, 969,
	125, 969,
	126, 969,
	127, 969,
	128, 969,
	129, 969,
	131, 969,
	137, 969,
	138, 969,
	139, 969,
	140, 969,
	141, 969,
	142, 969,
	144, 969,
	146, 969,
	150, 969,
	151, 969,
	153, 969,
	154, 969,
	156, 969,
	157, 969,
	159, 969,
	160, 969,
	161, 969,
	162, 969,
	163, 969,
	164, 969,
	165, 969,
	166, 969,
	167, 969,
	168, 969,
	171, 969,
	172, 969,
	176, 969,
	177, 969,
	178, 969,
	179, 969,
	182, 969,
	183, 969,
	184, 969,
	185, 969,
	186, 969,
	187, 969,
	188, 969,
	189, 969,
	191, 969,
	193, 969,
	196, 969,
	197, 969,
	198, 969,
	200, 969,
	201, 969,
	204, 969,
	205, 969,
	206, 969,
	207, 969,
	209, 969,
	210, 969,
	212, 969,
	213, 969,
	215, 969,
	216, 969,
	219, 969,
	220, 969,
	223, 969,
	225, 969,
	226, 969,
	227, 969,
	228, 969,
	229, 969,
	230, 969,
	231, 969,
	232, 969,
	233, 969,
	235, 969,
	236, 969,
	237, 969,
	238, 969,
	240, 969,
	243, 969,
	244, 969,
	245, 969,
	246, 969,
	248, 969,
	249, 969,
	250, 969,
	252, 969,
	253, 969,
	254, 969,
	257, 969,
	258, 969,
	260, 969,
	262, 969,
	263, 969,
	264, 969,
	265, 969,
	266, 969,
	267, 969,
	268, 969,
	269, 969,
	270, 969,
	272, 969,
	273, 969,
	274, 969,
	275, 969,
	276, 969,
	278, 969,
	280, 969,
	281, 969,
	282, 969,
	283, 969,
	284, 969,
	285, 969,
	286, 969,
	287, 969,
	288, 969,
	290, 969,
	291, 969,
	292, 969,
	293, 969,
	294, 969,
	296, 969,
	297, 969,
	298, 969,
	299, 969,
	300, 969,
	301, 969,
	302, 969,
	303, 969,
	305, 969,
	307, 969,
	308, 969,
	309, 969,
	310, 969,
	311, 969,
	312, 969,
	314, 969,
	315, 969,
	316, 969,
	317, 969,
	318, 969,
	319, 969,
	320, 969,
	321, 969,
	323, 969,
	324, 969,
	325, 969,
	326, 969,
	327, 969,
	328, 969,
	329, 969,
	330, 969,
	331, 969,
	332, 969,
	334, 969,
	335, 969,
	336, 969,
	337, 969,
	339, 969,
	340, 969,
	341, 969,
	342, 969,
	344, 969,
	345, 969,
	346, 969,
	347, 969,
	348, 969,
	349, 969,
	350, 969,
	351, 969,
	352, 969,
	353, 969,
	354, 969,
	355, 969,
	357, 969,
	358, 969,
	359, 969,
	361, 969,
	362, 969,
	363, 969,
	364, 969,
	365, 969,
	366, 969,
	367, 969,
	368, 969,
	369, 969,
	371, 969,
	372, 969,
	373, 969,
	374, 969,
	377, 969,
	378, 969,
	379, 969,
	380, 969,
	381, 969,
	383, 969,
	384, 969,
	385, 969,
	387, 969,
	388, 969,
	391, 969,
	392, 969,
	393, 969,
	394, 969,
	395, 969,
	397, 969,
	399, 969,
	400, 969,
	401, 969,
	402, 969,
	403, 969,
	404, 969,
	405, 969,
	407, 969,
	408, 969,
	409, 969,
	414, 969,
	415, 969,
	416, 969,
	417, 969,
	418, 969,
	419, 969,
	-2, 0,
	-1, 117,
	1, 859,
	196, 859,
	278, 859,
	285, 859,
	422, 859,
	445, 859,
	-2, 0,
	-1, 119,
	1, 859,
	445, 859,
	-2, 0,
	-1, 120,
	1, 859,
	445, 859,
	-2, 0,
	-1, 121,
	1, 863,
	445, 863,
	-2, 0,
	-1, 145,
	118, 940,
	132, 940,
	190, 940,
	218, 940,
	247, 940,
	256, 940,
	389, 940,
	-2, 937,
	-1, 175,
	4, 976,
	5, 976,
	6, 976,
	7, 976,
	8, 976,
	9, 976,
	10, 976,
	21, 976,
	22, 976,
	23, 976,
	24, 976,
	25, 976,
	27, 976,
	32, 976,
	33, 976,
	37, 976,
	38, 976,
	39, 976,
	40, 976,
	41, 976,
	42, 976,
	43, 976,
	44, 976,
	45, 976,
	46, 976,
	48, 976,
	49, 976,
	50, 976,
	51, 976,
	52, 976,
	53, 976,
	54, 976,
	55, 976,
	56, 976,
	57, 976,
	58, 976,
	59, 976,
	61, 976,
	62, 976,
	64, 976,
	66, 976,
	67, 976,
	68, 976,
	69, 976,
	70, 976,
	72, 976,
	73, 976,
	74, 976,
	75, 976,
	77, 976,
	79, 976,
	80, 976,
	81, 976,
	83, 976,
	84, 976,
	85, 976,
	86, 976,
	87, 976,
	88, 976,
	89, 976,
	90, 976,
	91, 976,
	92, 976,
	93, 976,
	94, 976,
	95, 976,
	96, 976,
	97, 976,
	98, 976,
	99, 976,
	100, 976,
	101, 976,
	102, 976,
	104, 976,
	105, 976,
	107, 976,
	110, 976,
	111, 976,
	112, 976,
	114, 976,
	116, 976,
	117, 976,
	119, 976,
	120, 976,
	121, 976,
	122, 976,
	123, 976,
	124, 976,
	125, 976,
	126, 976,
	127, 976,
	128, 976,
	129, 976,
	130, 976,
	131, 976,
	137, 976,
	138, 976,
	139, 976,
	140, 976,
	141, 976,
	142, 976,
	144, 976,
	146, 976,
	149, 976,
	150, 976,
	151, 976,
	153, 976,
	154, 976,
	156, 976,
	157, 976,
	159, 976,
	160, 976,
	161, 976,
	162, 976,
	163, 976,
	164, 976,
	165, 976,
	166, 976,
	167, 976,
	168, 976,
	169, 976,
	171, 976,
	172, 976,
	176, 976,
	177, 976,
	178, 976,
	179, 976,
	181, 976,
	182, 976,
	183, 976,
	184, 976,
	185, 976,
	186, 976,
	187, 976,
	188, 976,
	189, 976,
	191, 976,
	193, 976,
	194, 976,
	195, 976,
	196, 976,
	197, 976,
	198, 976,
	199, 976,
	200, 976,
	201, 976,
	204, 976,
	205, 976,
	206, 976,
	207, 976,
	209, 976,
	210, 976,
	212, 976,
	213, 976,
	214, 976,
	215, 976,
	216, 976,
	217, 976,
	219, 976,
	220, 976,
	223, 976,
	225, 976,
	226, 976,
	227, 976,
	228, 976,
	229, 976,
	230, 976,
	231, 976,
	232, 976,
	233, 976,
	234, 976,
	235, 976,
	236, 976,
	237, 976,
	238, 976,
	239, 976,
	240, 976,
	241, 976,
	242, 976,
	243, 976,
	244, 976,
	245, 976,
	246, 976,
	248, 976,
	249, 976,
	250, 976,
	253, 976,
	254, 976,
	257, 976,
	258, 976,
	259, 976,
	260, 976,
	261, 976,
	262, 976,
	263, 976,
	264, 976,
	265, 976,
	266, 976,
	267, 976,
	268, 976,
	269, 976,
	270, 976,
	272, 976,
	273, 976,
	274, 976,
	275, 976,
	276, 976,
	278, 976,
	280, 976,
	281, 976,
	282, 976,
	283, 976,
	284, 976,
	285, 976,
	286, 976,
	287, 976,
	288, 976,
	290, 976,
	291, 976,
	292, 976,
	293, 976,
	294, 976,
	296, 976,
	297, 976,
	298, 976,
	299, 976,
	300, 976,
	301, 976,
	302, 976,
	303, 976,
	305, 976,
	306, 976,
	307, 976,
	308, 976,
	309, 976,
	310, 976,
	311, 976,
	312, 976,
	314, 976,
	315, 976,
	316, 976,
	317, 976,
	318, 976,
	319, 976,
	320, 976,
	321, 976,
	323, 976,
	324, 976,
	325, 976,
	326, 976,
	327, 976,
	328, 976,
	329, 976,
	330, 976,
	331, 976,
	332, 976,
	333, 976,
	334, 976,
	335, 976,
	336, 976,
	337, 976,
	338, 976,
	339, 976,
	340, 976,
	341, 976,
	342, 976,
	344, 976,
	345, 976,
	346, 976,
	347, 976,
	348, 976,
	349, 976,
	350, 976,
	351, 976,
	352, 976,
	353, 976,
	354, 976,
	355, 976,
	357, 976,
	358, 976,
	359, 976,
	361, 976,
	362, 976,
	363, 976,
	364, 976,
	365, 976,
	366, 976,
	367, 976,
	368, 976,
	369, 976,
	371, 976,
	372, 976,
	373, 976,
	374, 976,
	377, 976,
	378, 976,
	379, 976,
	380, 976,
	381, 976,
	382, 976,
	383, 976,
	384, 976,
	385, 976,
	387, 976,
	388, 976,
	390, 976,
	391, 976,
	392, 976,
	393, 976,
	394, 976,
	395, 976,
	396, 976,
	397, 976,
	399, 976,
	400, 976,
	401, 976,
	402, 976,
	403, 976,
	404, 976,
	405, 976,
	407, 976,
	408, 976,
	409, 976,
	414, 976,
	415, 976,
	416, 976,
	417, 976,
	418, 976,
	419, 976,
	420, 976,
	428, 976,
	433, 976,
	434, 976,
	435, 976,
	442, 976,
	447, 976,
	-2, 0,
	-1, 535,
	148, 1635,
	375, 1635,
	425, 1635,
	444, 1635,
	-2, 0,
	-1, 536,
	148, 1711,
	375, 1711,
	425, 1711,
	444, 1711,
	-2, 0,
	-1, 537,
	148, 1625,
	375, 1625,
	425, 1625,
	444, 1625,
	-2, 0,
	-1, 539,
	148, 1793,
	375, 1793,
	425, 1793,
	444, 1793,
	-2, 0,
	-1, 541,
	148, 1821,
	375, 1821,
	425, 1821,
	444, 1821,
	-2, 0,
	-1, 548,
	148, 1719,
	375, 1719,
	425, 1719,
	444, 1719,
	-2, 457,
	-1, 565,
	444, 1585,
	446, 1585,
	-2, 627,
	-1, 566,
	444, 1587,
	446, 1587,
	-2, 628,
	-1, 567,
	444, 1586,
	446, 1586,
	-2, 629,
	-1, 568,
	446, 1533,
	-2, 630,
	-1, 713,
	1, 555,
	441, 555,
	443, 555,
	445, 555,
	-2, 0,
	-1, 714,
	1, 626,
	145, 626,
	441, 626,
	443, 626,
	445, 626,
	-2, 0,
	-1, 720,
	1, 569,
	441, 569,
	443, 569,
	445, 569,
	-2, 0,
	-1, 722,
	1, 573,
	441, 573,
	443, 573,
	445, 573,
	-2, 0,
	-1, 724,
	1, 583,
	441, 583,
	443, 583,
	445, 583,
	-2, 0,
	-1, 725,
	1, 592,
	441, 592,
	443, 592,
	445, 592,
	-2, 0,
	-1, 726,
	1, 594,
	441, 594,
	443, 594,
	445, 594,
	-2, 0,
	-1, 730,
	1, 608,
	441, 608,
	443, 608,
	445, 608,
	-2, 0,
	-1, 731,
	1, 610,
	441, 610,
	443, 610,
	445, 610,
	-2, 0,
	-1, 774,
	132, 980,
	218, 980,
	247, 980,
	-2, 937,
	-1, 789,
	132, 979,
	218, 979,
	247, 979,
	-2, 937,
	-1, 813,
	444, 1584,
	-2, 465,
	-1, 842,
	442, 1576,
	-2, 1567,
	-1, 848,
	5, 1107,
	-2, 1616,
	-1, 849,
	5, 1108,
	-2, 1620,
	-1, 850,
	5, 1109,
	-2, 1619,
	-1, 851,
	5, 1110,
	-2, 1819,
	-1, 852,
	5, 1111,
	-2, 1721,
	-1, 853,
	5, 1112,
	-2, 1785,
	-1, 854,
	5, 1113,
	-2, 1787,
	-1, 855,
	5, 1114,
	-2, 1798,
	-1, 856,
	5, 1115,
	-2, 1788,
	-1, 857,
	5, 1116,
	-2, 1789,
	-1, 858,
	5, 1117,
	-2, 1615,
	-1, 859,
	5, 1118,
	-2, 1832,
	-1, 860,
	5, 1119,
	-2, 1686,
	-1, 861,
	5, 1120,
	-2, 1728,
	-1, 862,
	5, 1121,
	-2, 1730,
	-1, 863,
	5, 1122,
	-2, 1690,
	-1, 864,
	5, 1123,
	442, 1594,
	-2, 1585,
	-1, 865,
	5, 1179,
	442, 1179,
	-2, 1867,
	-1, 870,
	442, 1595,
	-2, 1586,
	-1, 872,
	5, 1127,
	-2, 1865,
	-1, 873,
	5, 1128,
	-2, 1866,
	-1, 874,
	5, 1129,
	-2, 1689,
	-1, 875,
	5, 1130,
	-2, 1878,
	-1, 876,
	5, 1131,
	-2, 1691,
	-1, 877,
	5, 1132,
	-2, 1692,
	-1, 878,
	5, 1133,
	-2, 1693,
	-1, 879,
	5, 1134,
	-2, 1847,
	-1, 880,
	5, 1135,
	-2, 1876,
	-1, 881,
	5, 1136,
	-2, 1670,
	-1, 882,
	5, 1137,
	-2, 1671,
	-1, 883,
	5, 1151,
	-2, 1859,
	-1, 885,
	5, 1126,
	-2, 1855,
	-1, 886,
	5, 1126,
	-2, 1854,
	-1, 887,
	5, 1126,
	-2, 1871,
	-1, 888,
	5, 1143,
	-2, 1849,
	-1, 889,
	5, 1144,
	-2, 1617,
	-1, 890,
	5, 1154,
	-2, 1848,
	-1, 891,
	5, 1156,
	-2, 1887,
	-1, 893,
	5, 1167,
	-2, 1645,
	-1, 894,
	5, 1178,
	-2, 1880,
	-1, 895,
	5, 1170,
	-2, 1881,
	-1, 896,
	5, 1178,
	-2, 1882,
	-1, 897,
	5, 1174,
	-2, 1883,
	-1, 898,
	5, 1094,
	-2, 1699,
	-1, 899,
	5, 1095,
	-2, 1700,
	-1, 900,
	444, 1582,
	-2, 1566,
	-1, 901,
	442, 1907,
	-2, 1583,
	-1, 921,
	5, 1162,
	-2, 1808,
	-1, 938,
	5, 1161,
	-2, 1888,
	-1, 948,
	5, 1163,
	408, 1163,
	-2, 1850,
	-1, 949,
	5, 1164,
	408, 1164,
	-2, 1851,
	-1, 985,
	442, 1594,
	-2, 1585,
	-1, 1014,
	148, 1821,
	375, 1821,
	425, 1821,
	444, 1821,
	-2, 0,
	-1, 1015,
	1, 445,
	445, 445,
	-2, 871,
	-1, 1135,
	296, 1563,
	435, 1563,
	-2, 1562,
	-1, 1158,
	447, 1563,
	-2, 1564,
	-1, 1193,
	287, 658,
	407, 658,
	-2, 228,
	-1, 1213,
	268, 965,
	-2, 775,
	-1, 1222,
	251, 1589,
	-2, 0,
	-1, 1286,
	1, 336,
	441, 336,
	443, 336,
	445, 336,
	-2, 939,
	-1, 1289,
	4, 1886,
	11, 1886,
	12, 1886,
	14, 1886,
	15, 1886,
	16, 1886,
	17, 1886,
	18, 1886,
	19, 1886,
	21, 1886,
	22, 1886,
	23, 1886,
	24, 1886,
	25, 1886,
	27, 1886,
	30, 1886,
	32, 1886,
	34, 1886,
	37, 1886,
	38, 1886,
	39, 1886,
	40, 1886,
	41, 1886,
	42, 1886,
	43, 1886,
	44, 1886,
	45, 1886,
	46, 1886,
	48, 1886,
	49, 1886,
	50, 1886,
	51, 1886,
	52, 1886,
	53, 1886,
	56, 1886,
	57, 1886,
	58, 1886,
	59, 1886,
	61, 1886,
	62, 1886,
	63, 1886,
	66, 1886,
	67, 1886,
	68, 1886,
	69, 1886,
	70, 1886,
	71, 1886,
	72, 1886,
	73, 1886,
	74, 1886,
	75, 1886,
	77, 1886,
	78, 1886,
	79, 1886,
	80, 1886,
	81, 1886,
	83, 1886,
	84, 1886,
	85, 1886,
	93, 1886,
	94, 1886,
	95, 1886,
	96, 1886,
	97, 1886,
	98, 1886,
	99, 1886,
	100, 1886,
	102, 1886,
	104, 1886,
	105, 1886,
	107, 1886,
	110, 1886,
	111, 1886,
	112, 1886,
	114, 1886,
	116, 1886,
	117, 1886,
	119, 1886,
	120, 1886,
	121, 1886,
	122, 1886,
	123, 1886,
	124, 1886,
	125, 1886,
	126, 1886,
	127, 1886,
	128, 1886,
	129, 1886,
	133, 1886,
	134, 1886,
	135, 1886,
	136, 1886,
	137, 1886,
	138, 1886,
	139, 1886,
	140, 1886,
	141, 1886,
	142, 1886,
	143, 1886,
	144, 1886,
	146, 1886,
	149, 1886,
	150, 1886,
	151, 1886,
	153, 1886,
	154, 1886,
	156, 1886,
	157, 1886,
	159, 1886,
	160, 1886,
	161, 1886,
	162, 1886,
	163, 1886,
	164, 1886,
	165, 1886,
	166, 1886,
	167, 1886,
	168, 1886,
	169, 1886,
	170, 1886,
	171, 1886,
	172, 1886,
	173, 1886,
	174, 1886,
	175, 1886,
	177, 1886,
	178, 1886,
	179, 1886,
	181, 1886,
	182, 1886,
	183, 1886,
	184, 1886,
	185, 1886,
	186, 1886,
	187, 1886,
	188, 1886,
	189, 1886,
	191, 1886,
	193, 1886,
	194, 1886,
	195, 1886,
	196, 1886,
	197, 1886,
	198, 1886,
	199, 1886,
	200, 1886,
	201, 1886,
	202, 1886,
	203, 1886,
	204, 1886,
	205, 1886,
	206, 1886,
	207, 1886,
	209, 1886,
	210, 1886,
	212, 1886,
	213, 1886,
	214, 1886,
	215, 1886,
	216, 1886,
	217, 1886,
	219, 1886,
	220, 1886,
	223, 1886,
	224, 1886,
	225, 1886,
	226, 1886,
	227, 1886,
	228, 1886,
	229, 1886,
	230, 1886,
	231, 1886,
	232, 1886,
	233, 1886,
	234, 1886,
	235, 1886,
	236, 1886,
	237, 1886,
	238, 1886,
	241, 1886,
	243, 1886,
	244, 1886,
	245, 1886,
	246, 1886,
	248, 1886,
	249, 1886,
	250, 1886,
	253, 1886,
	254, 1886,
	255, 1886,
	257, 1886,
	258, 1886,
	260, 1886,
	262, 1886,
	263, 1886,
	264, 1886,
	265, 1886,
	266, 1886,
	267, 1886,
	268, 1886,
	269, 1886,
	270, 1886,
	272, 1886,
	273, 1886,
	274, 1886,
	275, 1886,
	276, 1886,
	278, 1886,
	280, 1886,
	281, 1886,
	282, 1886,
	283, 1886,
	284, 1886,
	285, 1886,
	286, 1886,
	287, 1886,
	288, 1886,
	290, 1886,
	291, 1886,
	292, 1886,
	293, 1886,
	294, 1886,
	295, 1886,
	296, 1886,
	297, 1886,
	298, 1886,
	299, 1886,
	300, 1886,
	301, 1886,
	302, 1886,
	303, 1886,
	305, 1886,
	306, 1886,
	307, 1886,
	308, 1886,
	309, 1886,
	310, 1886,
	311, 1886,
	312, 1886,
	313, 1886,
	314, 1886,
	315, 1886,
	316, 1886,
	317, 1886,
	318, 1886,
	319, 1886,
	320, 1886,
	321, 1886,
	323, 1886,
	324, 1886,
	325, 1886,
	326, 1886,
	327, 1886,
	328, 1886,
	329, 1886,
	330, 1886,
	331, 1886,
	332, 1886,
	334, 1886,
	335, 1886,
	336, 1886,
	337, 1886,
	338, 1886,
	339, 1886,
	340, 1886,
	341, 1886,
	342, 1886,
	344, 1886,
	345, 1886,
	346, 1886,
	347, 1886,
	348, 1886,
	349, 1886,
	350, 1886,
	351, 1886,
	352, 1886,
	353, 1886,
	354, 1886,
	355, 1886,
	357, 1886,
	358, 1886,
	359, 1886,
	361, 1886,
	362, 1886,
	363, 1886,
	364, 1886,
	365, 1886,
	366, 1886,
	367, 1886,
	368, 1886,
	369, 1886,
	371, 1886,
	372, 1886,
	373, 1886,
	374, 1886,
	377, 1886,
	378, 1886,
	379, 1886,
	380, 1886,
	381, 1886,
	383, 1886,
	384, 1886,
	385, 1886,
	387, 1886,
	388, 1886,
	391, 1886,
	392, 1886,
	393, 1886,
	394, 1886,
	395, 1886,
	397, 1886,
	399, 1886,
	400, 1886,
	401, 1886,
	402, 1886,
	403, 1886,
	404, 1886,
	405, 1886,
	407, 1886,
	408, 1886,
	409, 1886,
	414, 1886,
	415, 1886,
	416, 1886,
	417, 1886,
	418, 1886,
	419, 1886,
	420, 1886,
	421, 1886,
	423, 1886,
	424, 1886,
	425, 1886,
	426, 1886,
	427, 1886,
	428, 1886,
	430, 1886,
	431, 1886,
	432, 1886,
	433, 1886,
	434, 1886,
	435, 1886,
	436, 1886,
	437, 1886,
	438, 1886,
	440, 1886,
	443, 1886,
	444, 1886,
	446, 1886,
	447, 1886,
	-2, 0,
	-1, 1292,
	148, 1793,
	375, 1793,
	425, 1793,
	444, 1793,
	-2, 0,
	-1, 1362,
	1, 1839,
	441, 1839,
	443, 1839,
	444, 1839,
	445, 1839,
	-2, 606,
	-1, 1363,
	1, 1791,
	441, 1791,
	443, 1791,
	444, 1791,
	445, 1791,
	-2, 607,
	-1, 1376,
	1, 866,
	445, 866,
	-2, 871,
	-1, 1381,
	132, 979,
	218, 979,
	247, 979,
	-2, 937,
	-1, 1474,
	118, 941,
	132, 941,
	190, 941,
	218, 941,
	247, 941,
	256, 941,
	389, 941,
	-2, 1335,
	-1, 1527,
	443, 1468,
	-2, 0,
	-1, 1562,
	118, 941,
	132, 941,
	190, 941,
	218, 941,
	247, 941,
	256, 941,
	389, 941,
	-2, 1051,
	-1, 1616,
	442, 1166,
	-2, 1154,
	-1, 1655,
	1, 447,
	445, 447,
	-2, 871,
	-1, 1908,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1215,
	-1, 1909,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1216,
	-1, 1910,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1217,
	-1, 1911,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1218,
	-1, 1912,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1219,
	-1, 1913,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1220,
	-1, 1914,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1221,
	-1, 1915,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1222,
	-1, 1927,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1234,
	-1, 1928,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1235,
	-1, 1929,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1236,
	-1, 1932,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1241,
	-1, 1938,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1245,
	-1, 1940,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1253,
	-1, 1941,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1254,
	-1, 1942,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1255,
	-1, 1943,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1256,
	-1, 2036,
	5, 1123,
	148, 1479,
	442, 1594,
	-2, 1585,
	-1, 2037,
	148, 1480,
	-2, 1843,
	-1, 2038,
	148, 1481,
	-2, 1718,
	-1, 2039,
	148, 1482,
	-2, 1646,
	-1, 2040,
	148, 1483,
	-2, 1680,
	-1, 2041,
	148, 1484,
	-2, 1716,
	-1, 2042,
	148, 1485,
	-2, 1784,
	-1, 2110,
	1, 1052,
	83, 1052,
	118, 1052,
	132, 1052,
	145, 1052,
	149, 1052,
	155, 1052,
	158, 1052,
	181, 1052,
	190, 1052,
	199, 1052,
	214, 1052,
	218, 1052,
	234, 1052,
	247, 1052,
	251, 1052,
	256, 1052,
	304, 1052,
	306, 1052,
	389, 1052,
	398, 1052,
	411, 1052,
	412, 1052,
	413, 1052,
	422, 1052,
	441, 1052,
	443, 1052,
	445, 1052,
	446, 1052,
	-2, 1051,
	-1, 2115,
	442, 1568,
	-2, 1580,
	-1, 2135,
	442, 1165,
	-2, 1155,
	-1, 2348,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1243,
	-1, 2349,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1247,
	-1, 2355,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1249,
	-1, 2534,
	196, 871,
	278, 871,
	285, 871,
	422, 871,
	-2, 444,
	-1, 2605,
	443, 1538,
	446, 1538,
	-2, 1554,
	-1, 2619,
	268, 965,
	-2, 775,
	-1, 2696,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1251,
	-1, 2703,
	194, 0,
	195, 0,
	241, 0,
	-2, 1270,
	-1, 2766,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1299,
	-1, 2767,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1300,
	-1, 2768,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1301,
	-1, 2772,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1305,
	-1, 2773,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1306,
	-1, 2774,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1307,
	-1, 2816,
	442, 1569,
	-2, 1581,
	-1, 2896,
	444, 1989,
	-2, 914,
	-1, 2938,
	194, 0,
	195, 0,
	241, 0,
	-2, 1271,
	-1, 2941,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1274,
	-1, 2942,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1276,
	-1, 3083,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1275,
	-1, 3084,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1277,
	-1, 3094,
	194, 0,
	-2, 1308,
	-1, 3184,
	194, 0,
	-2, 1309,
	-1, 3293,
	40, 0,
	169, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1846,
}

const sqlPrivate = 57344

const sqlLast = 68060

var sqlAct = [...]int{

	870, 3292, 3038, 3122, 3375, 3147, 3302, 3125, 3365, 3264,
	2260, 3266, 3250, 3263, 3303, 3111, 3304, 2606, 2067, 2835,
	1821, 2269, 3150, 2734, 3291, 3188, 2261, 986, 3052, 3075,
	2887, 799, 2636, 1895, 2882, 2997, 790, 2102, 2543, 207,
	1139, 207, 207, 1278, 2376, 207, 207, 207, 207, 207,
	1955, 2628, 207, 2603, 2892, 546, 1389, 2836, 1574, 1586,
	567, 2630, 1587, 2641, 2341, 2374, 3098, 2301, 1557, 2257,
	2234, 2497, 1555, 2237, 1040, 978, 2510, 1779, 207, 2300,
	2973, 2457, 567, 1347, 1782, 2292, 2098, 2473, 1132, 2294,
	2270, 1536, 2166, 1772, 1771, 1708, 663, 2103, 1021, 2484,
	2456, 2789, 1892, 3189, 798, 138, 1699, 32, 2218, 2157,
	1968, 2164, 1888, 1482, 2337, 1986, 1151, 2640, 4, 1726,
	866, 1274, 1732, 199, 1687, 1028, 1537, 1685, 1376, 2235,
	1148, 86, 3148, 1998, 2515, 1500, 2064, 1952, 2196, 2604,
	787, 1141, 1287, 1261, 1271, 1768, 1207, 1565, 970, 2263,
	2304, 201, 1017, 1980, 973, 200, 2195, 2090, 568, 2075,
	569, 514, 2032, 1546, 1969, 952, 145, 1463, 1388, 1390,
	207, 207, 563, 530, 1767, 540, 1788, 1285, 2105, 1237,
	146, 138, 639, 1161, 608, 1495, 517, 826, 950, 975,
	1698, 789, 1394, 1375, 1219, 658, 705, 2805, 2372, 2213,
	2806, 1802, 1802, 1822, 1802, 1556, 2183, 2266, 525, 2262,
	3403, 572, 1025, 2084, 3394, 575, 794, 2084, 2648, 498,
	1402, 1403, 3393, 3374, 522, 2084, 1739, 3361, 3359, 3324,
	3011, 3011, 2084, 572, 2691, 1983, 1814, 575, 3322, 3319,
	1800, 2084, 3320, 2084, 2647, 1025, 1405, 1170, 1182, 3316,
	3313, 2532, 3317, 1739, 672, 3289, 3288, 3285, 1739, 1739,
	1814, 3284, 794, 3245, 1814, 175, 2128, 3236, 3235, 2792,
	3011, 3011, 1404, 3229, 827, 3223, 1739, 2391, 3011, 795,
	1424, 1735, 2392, 3221, 836, 87, 3011, 3186, 3172, 3169,
	2128, 1739, 3011, 3139, 3138, 3246, 1739, 1739, 1984, 3131,
	2077, 3130, 1739, 177, 3011, 775, 1004, 3104, 3085, 175,
	1739, 2128, 3066, 3173, 3035, 2660, 175, 2084, 3029, 774,
	3010, 2084, 1814, 3011, 2792, 967, 2934, 1402, 1403, 2940,
	2906, 2898, 2128, 2899, 2899, 2076, 2811, 2801, 892, 2812,
	2802, 782, 1427, 1428, 1429, 1430, 176, 177, 953, 953,
	3030, 999, 1410, 1405, 177, 2795, 169, 2727, 2084, 954,
	1739, 87, 2667, 1739, 170, 2668, 1985, 1982, 2470, 2468,
	2467, 2084, 2084, 2084, 2421, 2668, 2125, 2084, 797, 1404,
	956, 957, 1432, 1433, 1434, 147, 2210, 2155, 2404, 2393,
	176, 2405, 2084, 2290, 1658, 2141, 1818, 176, 2084, 2127,
	169, 2122, 2128, 2660, 2084, 2244, 2084, 169, 170, 1739,
	2340, 1281, 1181, 659, 2117, 170, 1738, 1739, 2083, 1402,
	1403, 2084, 1000, 776, 2153, 1445, 1446, 1447, 175, 147,
	1532, 1817, 796, 1425, 1818, 1160, 147, 1678, 58, 1349,
	661, 2649, 958, 955, 175, 1405, 781, 780, 1451, 59,
	1803, 1803, 2375, 1803, 779, 2429, 2430, 778, 1987, 1410,
	2650, 2988, 971, 63, 777, 773, 177, 772, 771, 770,
	2322, 1404, 769, 768, 767, 766, 765, 764, 763, 1424,
	762, 703, 177, 702, 2101, 701, 2429, 2430, 700, 2447,
	2448, 2449, 699, 69, 698, 697, 696, 695, 694, 2429,
	2430, 693, 692, 207, 1431, 2936, 691, 690, 689, 176,
	688, 687, 207, 686, 685, 2444, 2647, 684, 683, 169,
	682, 681, 1426, 75, 680, 176, 679, 170, 671, 670,
	1176, 630, 85, 207, 629, 588, 76, 587, 586, 578,
	207, 1427, 1428, 1429, 1430, 577, 2444, 576, 2265, 1000,
	553, 1410, 552, 551, 550, 1981, 207, 1043, 207, 207,
	1144, 207, 1043, 207, 147, 534, 197, 175, 175, 196,
	195, 207, 207, 194, 77, 193, 1027, 1442, 1452, 2133,
	1032, 1432, 1433, 1434, 192, 191, 190, 2435, 189, 188,
	187, 186, 2429, 2430, 1810, 1801, 207, 1868, 2076, 185,
	184, 183, 182, 2952, 1000, 177, 177, 181, 997, 180,
	207, 179, 1144, 1144, 207, 207, 178, 207, 2435, 2900,
	2809, 2513, 2398, 1472, 1473, 1440, 2387, 2222, 2118, 207,
	1164, 2435, 1425, 2250, 2109, 2023, 2021, 207, 1558, 1415,
	1413, 1414, 1406, 1407, 1408, 1409, 1411, 1412, 176, 176,
	1683, 207, 207, 207, 207, 207, 1144, 1144, 169, 169,
	1401, 1144, 2019, 207, 1144, 207, 170, 170, 2445, 2450,
	1015, 1572, 2429, 2430, 2017, 2447, 2448, 2449, 1489, 1484,
	78, 2015, 1135, 1166, 1154, 1034, 1158, 147, 147, 1169,
	1503, 1174, 988, 1180, 1175, 1824, 1502, 3309, 175, 2445,
	1282, 2429, 2430, 1431, 1036, 3290, 1129, 1134, 3219, 3179,
	1144, 144, 81, 1503, 82, 1012, 3121, 1506, 3176, 1502,
	3174, 1426, 572, 3067, 2435, 3060, 575, 2990, 2972, 1163,
	207, 1162, 2444, 175, 2971, 2959, 177, 1220, 1220, 2958,
	1501, 2671, 2957, 2956, 207, 662, 1443, 1224, 115, 1406,
	1407, 1408, 1409, 1411, 1412, 1402, 1403, 2446, 2950, 207,
	2949, 1823, 2948, 2947, 1402, 1403, 138, 2871, 2824, 2823,
	2821, 177, 2815, 2786, 2785, 2784, 1297, 1158, 2711, 176,
	1290, 1405, 2707, 1300, 2508, 1275, 2464, 2455, 2446, 169,
	1405, 2428, 795, 2425, 116, 1265, 1268, 170, 2424, 2422,
	2251, 2411, 1288, 2410, 2435, 2445, 148, 1404, 1485, 1221,
	1483, 1382, 2409, 2406, 176, 2403, 1404, 2381, 147, 1381,
	2380, 2373, 2291, 2110, 169, 1991, 1401, 1484, 1441, 966,
	1776, 2451, 170, 2435, 1744, 1742, 1444, 1400, 1415, 1413,
	1414, 1406, 1407, 1408, 1409, 1411, 1412, 1471, 3401, 3373,
	175, 3372, 3325, 660, 987, 2450, 2736, 3280, 3278, 3214,
	3211, 3208, 1679, 2197, 3207, 3203, 87, 3197, 87, 3168,
	87, 2336, 3167, 1958, 2440, 2438, 2439, 2431, 2432, 2433,
	2434, 2436, 2437, 3117, 3096, 2445, 3191, 1410, 177, 3072,
	3071, 3050, 1374, 3047, 2446, 3042, 1410, 2987, 2441, 2442,
	2443, 2970, 2920, 1305, 2917, 2440, 2438, 2439, 2431, 2432,
	2433, 2434, 2436, 2437, 2851, 1380, 3059, 1432, 1433, 1434,
	2850, 2431, 2432, 2433, 2434, 2436, 2437, 2839, 2838, 2797,
	1387, 176, 1379, 2702, 2661, 2622, 2593, 2574, 2553, 2552,
	2528, 169, 2469, 1377, 2402, 796, 87, 2526, 2401, 170,
	2386, 2364, 207, 87, 2231, 1507, 1402, 1403, 1964, 2249,
	87, 1504, 1496, 1493, 2137, 775, 795, 2136, 1425, 2113,
	147, 1137, 2429, 2430, 2446, 2095, 2082, 2013, 207, 774,
	1383, 1534, 1405, 1467, 1543, 1397, 1398, 1571, 207, 1043,
	207, 207, 207, 1535, 1531, 1530, 1529, 1528, 1144, 567,
	207, 207, 1527, 1526, 567, 207, 1525, 2553, 1404, 1524,
	207, 1523, 1521, 1580, 2431, 2432, 2433, 2434, 2436, 2437,
	1520, 1519, 1518, 1213, 1216, 1517, 1516, 1515, 1514, 1513,
	1653, 825, 1505, 1512, 1511, 1043, 1510, 1509, 1486, 1468,
	1466, 1041, 1461, 1011, 1566, 1002, 1152, 994, 3046, 869,
	2989, 2944, 1540, 1541, 2130, 1825, 2820, 1426, 1583, 2490,
	1681, 2804, 2800, 1650, 2390, 1652, 1669, 1668, 2096, 1485,
	1678, 1675, 1497, 1498, 138, 1294, 2022, 2020, 2524, 1464,
	2429, 2430, 1567, 776, 2441, 2442, 2443, 1031, 1554, 1678,
	3212, 2440, 2438, 2439, 2431, 2432, 2433, 2434, 2436, 2437,
	1678, 1465, 1678, 2018, 2435, 1029, 795, 2631, 3065, 3031,
	2807, 2663, 1578, 2577, 1703, 2016, 2662, 1025, 809, 1474,
	1576, 1312, 2014, 1480, 1558, 2433, 2434, 2436, 2437, 1563,
	953, 1372, 1503, 1022, 3177, 1983, 3175, 1030, 1502, 1320,
	1533, 2408, 2199, 1655, 2407, 2346, 1656, 2185, 1026, 2849,
	572, 2608, 1348, 2607, 575, 572, 3120, 1516, 1516, 575,
	1144, 207, 1560, 1672, 760, 1677, 1491, 1043, 1016, 1693,
	1822, 1582, 3151, 1664, 1349, 1773, 1649, 1406, 1407, 1408,
	1409, 1411, 1412, 2677, 2588, 2445, 1721, 1584, 1408, 1409,
	1411, 1412, 3099, 3376, 2262, 803, 2738, 1999, 1984, 1688,
	3310, 2396, 761, 1689, 3260, 2135, 207, 207, 1688, 1522,
	1499, 2601, 1689, 207, 1670, 1023, 1764, 1197, 3321, 3318,
	2643, 2831, 1024, 207, 1309, 3349, 2883, 981, 2298, 3348,
	3021, 1185, 207, 2142, 207, 3228, 207, 2536, 1777, 3398,
	207, 1195, 3146, 2429, 2430, 3142, 2447, 2448, 2449, 754,
	1752, 620, 207, 1619, 87, 1723, 3311, 1559, 1725, 1562,
	756, 1729, 1707, 1344, 2159, 2168, 1985, 1982, 3141, 965,
	1545, 752, 750, 747, 2446, 2854, 793, 1593, 1857, 1855,
	625, 3140, 1673, 2865, 1470, 2862, 2861, 1733, 1690, 2828,
	2827, 2385, 1144, 207, 1144, 1760, 2538, 1690, 1346, 1144,
	1692, 1674, 207, 2444, 207, 207, 2384, 2429, 2430, 1692,
	2383, 1196, 572, 1794, 1144, 1144, 575, 207, 1785, 1163,
	619, 1162, 2382, 207, 2350, 2215, 2209, 2206, 567, 207,
	1763, 207, 1031, 207, 2187, 207, 1549, 207, 1665, 2124,
	1022, 1618, 1826, 842, 1737, 1728, 1343, 207, 792, 1939,
	2159, 207, 2171, 1378, 1694, 1159, 1700, 626, 1987, 1025,
	207, 2158, 1022, 1694, 2009, 2008, 2258, 1307, 1552, 205,
	1897, 1230, 1836, 1229, 1228, 2435, 1227, 1754, 1753, 207,
	2525, 1031, 1030, 1412, 1697, 207, 1547, 992, 3227, 3080,
	744, 2440, 2438, 2439, 2431, 2432, 2433, 2434, 2436, 2437,
	1865, 1550, 2678, 2186, 2576, 1043, 1866, 1701, 1702, 1581,
	1249, 1787, 1790, 1832, 794, 1191, 2149, 1302, 1792, 2116,
	3127, 1548, 1023, 795, 2178, 1839, 2450, 1385, 2680, 1024,
	1010, 1030, 2050, 1288, 1828, 1954, 3307, 1954, 2486, 2435,
	1872, 1357, 3282, 1695, 1023, 2145, 2177, 1875, 1791, 2841,
	991, 1024, 1695, 2679, 3017, 1981, 2445, 2147, 2319, 1402,
	1403, 2131, 618, 2721, 617, 1893, 1894, 1987, 1012, 1819,
	2338, 2339, 2571, 1575, 3340, 1567, 1827, 3243, 2639, 572,
	989, 1686, 2170, 575, 2638, 1405, 1970, 1971, 1339, 2148,
	1043, 677, 621, 1551, 2203, 1679, 1676, 1321, 1999, 1193,
	1846, 3204, 2146, 3368, 1970, 1996, 1805, 2437, 793, 1807,
	1303, 1404, 1809, 3348, 1679, 2197, 1812, 1342, 813, 1684,
	2445, 984, 1870, 1208, 1208, 1679, 2197, 1679, 2197, 1873,
	1688, 2638, 868, 207, 1689, 788, 1703, 2585, 2580, 1340,
	2031, 3388, 2035, 2035, 2048, 2446, 1970, 791, 1371, 2068,
	2070, 1871, 1869, 3308, 2074, 1987, 2535, 1043, 207, 1874,
	1206, 775, 1720, 1349, 775, 775, 1025, 207, 628, 627,
	207, 1736, 824, 1043, 2852, 1884, 796, 1691, 1885, 1886,
	792, 657, 1802, 2537, 1864, 2485, 1691, 1705, 1025, 1962,
	2114, 1410, 3015, 1553, 1960, 2169, 2863, 1205, 795, 1995,
	1494, 2246, 2123, 3241, 2111, 1695, 2718, 1695, 3339, 2446,
	2325, 795, 2207, 2926, 1867, 795, 3090, 2429, 2430, 1690,
	1308, 1432, 1433, 1434, 2097, 748, 3306, 3355, 2107, 2108,
	1966, 1692, 3242, 758, 2596, 1354, 757, 510, 3271, 2429,
	2430, 2565, 2447, 2448, 2449, 3216, 794, 748, 749, 748,
	1993, 1740, 207, 1856, 1854, 2441, 2442, 2443, 1460, 2091,
	2156, 505, 2440, 2438, 2439, 2431, 2432, 2433, 2434, 2436,
	2437, 2842, 1425, 2400, 2719, 2106, 1248, 1593, 1593, 776,
	2564, 1190, 776, 776, 1043, 1694, 3366, 2043, 794, 207,
	138, 2328, 2059, 3128, 2921, 2087, 795, 207, 2072, 2444,
	2080, 2081, 1317, 1990, 2126, 1820, 3016, 207, 2092, 2093,
	980, 953, 2088, 2818, 1005, 2928, 3305, 1355, 3077, 1563,
	207, 1326, 3347, 1144, 3345, 1834, 1835, 2438, 2439, 2431,
	2432, 2433, 2434, 2436, 2437, 207, 1043, 1956, 3338, 207,
	207, 1618, 1618, 3157, 3049, 990, 2626, 2132, 745, 2435,
	982, 796, 3367, 2253, 678, 2352, 2160, 1953, 1724, 1838,
	1384, 1426, 1766, 1009, 1474, 207, 1987, 207, 1474, 1542,
	207, 2435, 2190, 1003, 1695, 1304, 2567, 1505, 2140, 791,
	2873, 998, 2327, 497, 3369, 207, 2232, 1356, 1393, 2927,
	3389, 2968, 207, 1704, 207, 1666, 207, 2569, 2324, 2172,
	2174, 3133, 207, 2189, 3132, 207, 2182, 207, 2204, 207,
	2143, 207, 207, 2139, 207, 1144, 1144, 1144, 3076, 1144,
	1497, 1498, 2217, 207, 207, 2241, 207, 3115, 3383, 3194,
	2445, 1803, 971, 207, 1703, 2219, 2212, 1663, 2830, 2163,
	2568, 2361, 2775, 1135, 207, 2180, 207, 2310, 2312, 1562,
	2516, 2224, 2445, 2226, 2627, 2188, 2216, 2549, 1158, 2286,
	2287, 1392, 2255, 2359, 2545, 207, 207, 207, 2205, 207,
	87, 2198, 2200, 2201, 2202, 2326, 579, 2254, 1415, 1413,
	1414, 1406, 1407, 1408, 1409, 1411, 1412, 2499, 2236, 1896,
	572, 2233, 207, 1786, 575, 3008, 2264, 1163, 2264, 2220,
	2229, 1661, 2317, 2273, 2318, 1775, 1961, 506, 1691, 1306,
	3020, 735, 3078, 1774, 813, 2245, 1662, 3019, 813, 2446,
	2297, 3005, 138, 735, 1748, 2311, 1127, 2219, 2969, 2219,
	1460, 1127, 2282, 786, 1158, 1158, 2288, 2313, 2717, 2314,
	2268, 2446, 2323, 3251, 2284, 786, 1950, 1391, 2279, 1880,
	2280, 3217, 2281, 1476, 1861, 1659, 2283, 1481, 2500, 507,
	1288, 2289, 3006, 2888, 2356, 2299, 3053, 3116, 1948, 3382,
	1327, 2230, 2275, 2776, 2000, 2357, 1393, 2191, 2362, 2777,
	1251, 1318, 1392, 87, 1593, 2555, 2554, 2330, 2353, 1158,
	2344, 207, 1833, 2378, 2379, 2487, 2086, 508, 2498, 509,
	2085, 2121, 736, 2120, 1222, 2119, 676, 2243, 2388, 792,
	3199, 3123, 2333, 87, 736, 3039, 1545, 2332, 2335, 1936,
	2672, 1223, 981, 1236, 981, 1784, 3352, 1695, 87, 3149,
	87, 1234, 1319, 2598, 1590, 1316, 3254, 2974, 2439, 2431,
	2432, 2433, 2434, 2436, 2437, 1881, 512, 2790, 1618, 2389,
	2004, 2441, 2442, 2443, 3354, 3018, 1731, 2115, 2440, 2438,
	2439, 2431, 2432, 2433, 2434, 2436, 2437, 2003, 1391, 1944,
	3323, 580, 581, 87, 2351, 87, 1730, 1945, 669, 1043,
	1946, 3113, 1549, 1951, 3200, 2466, 2471, 2517, 3124, 2501,
	795, 2478, 2479, 3218, 3255, 207, 1369, 3213, 207, 3095,
	3001, 2480, 87, 3002, 1727, 207, 2967, 2867, 207, 207,
	1043, 2192, 2193, 1351, 1552, 2358, 3114, 2458, 1337, 1043,
	2006, 1335, 2701, 2520, 2360, 207, 2423, 1701, 1702, 2363,
	1333, 2395, 1547, 2503, 2208, 2494, 1331, 2240, 3004, 207,
	737, 1329, 3201, 2214, 2184, 2504, 2505, 1550, 1934, 1937,
	3007, 2138, 737, 1573, 1323, 583, 582, 207, 207, 207,
	784, 1570, 735, 207, 1370, 2493, 207, 1548, 2154, 2459,
	1298, 1853, 2533, 207, 207, 207, 207, 207, 1232, 2507,
	2512, 788, 2321, 2521, 786, 2539, 2320, 207, 207, 2511,
	2316, 2523, 2489, 1863, 1843, 207, 1933, 2531, 2461, 2462,
	2463, 674, 675, 2472, 2551, 584, 585, 207, 1144, 1651,
	207, 1508, 2557, 1235, 2561, 2562, 1043, 1301, 1212, 785,
	1947, 1233, 1956, 1043, 3301, 2475, 2285, 2550, 207, 1949,
	2546, 207, 207, 2482, 2483, 2729, 511, 2488, 2629, 1551,
	738, 207, 1368, 1474, 1144, 207, 746, 1144, 1144, 1144,
	3248, 3003, 738, 736, 207, 2518, 2519, 2994, 3161, 1350,
	207, 2579, 2886, 2615, 1336, 2611, 207, 1334, 207, 2542,
	2847, 2534, 1549, 667, 668, 207, 1332, 1395, 739, 2845,
	2540, 2829, 1330, 2502, 2556, 2625, 2559, 1328, 1693, 2572,
	739, 2573, 2610, 2609, 2259, 2586, 2248, 2633, 1144, 1144,
	1322, 2645, 2594, 2247, 1552, 2634, 207, 207, 2570, 2227,
	207, 2575, 2659, 1693, 1852, 2581, 984, 1935, 984, 2591,
	1816, 2592, 2089, 207, 1231, 1043, 207, 207, 1043, 207,
	1763, 2189, 2675, 2590, 2584, 1579, 2595, 1550, 1815, 1813,
	2589, 1811, 1808, 1733, 1806, 207, 1804, 1795, 1745, 1733,
	1743, 1734, 1722, 1719, 1706, 1696, 2582, 962, 1127, 1396,
	2583, 2342, 971, 3349, 3274, 3069, 751, 753, 3068, 1682,
	971, 971, 1187, 900, 971, 3163, 2159, 2642, 2159, 1544,
	2176, 963, 2897, 1703, 2670, 554, 2642, 2175, 1043, 2173,
	2632, 737, 2651, 1840, 2674, 138, 1859, 795, 813, 1043,
	3206, 207, 2685, 1593, 1127, 1366, 1367, 1402, 1403, 2658,
	1402, 1403, 203, 3181, 500, 501, 2975, 2194, 518, 500,
	518, 528, 533, 2179, 2704, 549, 1399, 513, 2211, 1551,
	2181, 3247, 2343, 203, 1590, 1590, 1405, 3220, 2877, 1593,
	2872, 2682, 2814, 2713, 2714, 2715, 2644, 2739, 2267, 2687,
	2686, 666, 1158, 2689, 2073, 203, 2683, 1654, 1585, 1404,
	3364, 2522, 1404, 964, 3381, 1473, 87, 1618, 87, 2429,
	2430, 1402, 1403, 2819, 524, 1311, 1893, 2745, 560, 2151,
	2150, 1310, 2724, 2709, 2787, 2151, 2527, 2152, 2012, 783,
	2011, 738, 1893, 2755, 207, 2010, 87, 2007, 87, 2720,
	2722, 2723, 2005, 1618, 2735, 980, 2728, 980, 207, 1978,
	1353, 2945, 2716, 1352, 1043, 1471, 2744, 1469, 3390, 3107,
	2653, 2654, 2655, 2783, 2656, 2657, 3063, 2752, 801, 739,
	2808, 2803, 2754, 207, 3041, 2916, 1127, 2905, 2779, 2881,
	2870, 2869, 2741, 500, 500, 982, 2742, 982, 2868, 2844,
	796, 203, 2652, 2623, 2621, 2277, 2252, 2228, 2780, 562,
	1965, 1798, 1797, 2477, 1796, 1778, 1756, 1755, 1751, 1750,
	1749, 1747, 2219, 1746, 138, 87, 1386, 207, 1365, 1963,
	2793, 2794, 2791, 2796, 1364, 1345, 1341, 1338, 2788, 1883,
	1324, 2825, 1260, 2855, 2506, 1259, 1258, 981, 1476, 1257,
	1256, 1255, 1254, 2514, 1253, 2810, 1252, 1250, 1245, 207,
	207, 207, 2864, 1244, 981, 1243, 1242, 1241, 2866, 2587,
	1204, 1203, 1202, 1201, 1200, 1199, 1043, 207, 2817, 1198,
	1192, 1144, 2859, 1186, 1184, 2799, 1183, 1008, 1007, 1593,
	937, 847, 1657, 759, 2833, 2055, 612, 743, 207, 3126,
	556, 1359, 74, 1194, 599, 2616, 68, 2901, 2618, 2619,
	2620, 207, 207, 1144, 1144, 1144, 561, 207, 207, 207,
	2894, 2890, 207, 207, 2843, 3259, 733, 2563, 1842, 207,
	2189, 2853, 1325, 1844, 2491, 2860, 2912, 2094, 1593, 1593,
	2893, 2889, 1043, 3240, 2925, 2953, 2399, 3187, 3089, 2876,
	2002, 1490, 70, 1618, 1593, 1593, 558, 2514, 835, 2665,
	2666, 2219, 2884, 920, 2880, 2995, 2832, 2303, 2302, 2492,
	802, 2878, 2051, 2495, 1046, 1667, 2891, 2943, 841, 1680,
	2895, 2134, 2034, 1589, 1763, 1593, 2903, 207, 2902, 844,
	1591, 1590, 846, 555, 845, 1592, 1492, 2908, 2915, 2918,
	2907, 843, 1618, 1618, 87, 2930, 1588, 2919, 2242, 2273,
	2529, 2530, 2939, 2913, 2914, 2923, 2271, 1239, 1618, 1618,
	723, 1671, 971, 1959, 1127, 1997, 2394, 1487, 2931, 559,
	815, 837, 1994, 1001, 814, 2496, 2637, 2813, 3058, 1879,
	557, 2334, 1876, 615, 2426, 1979, 2475, 993, 207, 1618,
	2846, 2056, 2848, 2049, 2045, 87, 1373, 1462, 1043, 1152,
	1043, 2272, 1041, 1033, 818, 1957, 1478, 2368, 2509, 2646,
	2129, 1887, 1765, 961, 960, 959, 3265, 3262, 207, 207,
	207, 2924, 1660, 2144, 2966, 1454, 2612, 831, 1157, 2476,
	207, 2673, 1209, 3205, 1453, 755, 207, 3196, 207, 1020,
	1019, 207, 207, 207, 207, 207, 2979, 1018, 3013, 1127,
	2548, 3387, 207, 207, 1144, 2840, 1043, 2992, 1144, 174,
	171, 173, 2726, 2980, 2977, 2978, 995, 2982, 172, 2857,
	2597, 90, 37, 2732, 207, 666, 3023, 1043, 2511, 2986,
	1144, 984, 36, 3028, 2983, 35, 17, 2993, 3014, 114,
	207, 113, 3012, 3043, 112, 111, 1006, 110, 984, 3024,
	3025, 3037, 109, 549, 108, 107, 106, 105, 104, 103,
	102, 207, 101, 100, 801, 3057, 1127, 1043, 801, 203,
	3055, 203, 203, 971, 1149, 3032, 203, 3070, 3064, 2991,
	2976, 99, 1127, 98, 203, 1165, 2634, 3044, 97, 96,
	3054, 3033, 3036, 1043, 95, 94, 93, 3022, 92, 91,
	1167, 3056, 1171, 3062, 1177, 3027, 34, 545, 542, 1189,
	50, 49, 89, 3051, 88, 16, 33, 1593, 14, 3073,
	3040, 54, 55, 1211, 13, 3045, 1763, 203, 203, 1043,
	1149, 29, 30, 80, 3101, 207, 3081, 207, 2816, 1043,
	207, 3079, 203, 79, 28, 15, 3061, 27, 207, 25,
	1247, 2642, 3086, 26, 11, 8, 7, 10, 12, 24,
	143, 142, 73, 141, 203, 203, 203, 203, 1149, 2740,
	3097, 207, 3110, 72, 140, 3109, 549, 139, 203, 71,
	23, 1618, 9, 207, 3102, 3103, 22, 1296, 135, 3105,
	207, 67, 137, 1127, 1299, 1144, 136, 64, 134, 133,
	207, 3153, 3108, 3145, 65, 132, 131, 3154, 66, 3129,
	3156, 2055, 2055, 130, 2909, 2910, 2911, 971, 21, 5,
	980, 207, 53, 6, 3135, 3074, 3143, 2676, 3166, 83,
	84, 3170, 3171, 31, 62, 3159, 3152, 980, 61, 60,
	207, 20, 52, 203, 19, 1127, 207, 165, 3160, 164,
	163, 162, 158, 157, 207, 3158, 3165, 203, 3162, 3164,
	982, 2893, 161, 159, 160, 156, 3180, 981, 3202, 3193,
	129, 167, 533, 166, 2634, 981, 981, 982, 154, 981,
	151, 207, 207, 3190, 150, 3192, 153, 155, 2051, 2051,
	152, 149, 2822, 168, 128, 57, 3185, 87, 207, 1144,
	1590, 127, 87, 981, 207, 3215, 126, 125, 1144, 1144,
	124, 2055, 2055, 2055, 123, 56, 207, 3234, 207, 18,
	3210, 2, 1, 87, 1455, 1456, 1457, 1458, 1459, 0,
	3222, 3226, 0, 0, 0, 0, 1590, 3231, 207, 3225,
	3244, 0, 3230, 3237, 207, 207, 0, 1043, 3256, 0,
	0, 3232, 3233, 0, 1475, 0, 0, 207, 3267, 0,
	1488, 0, 3275, 0, 0, 0, 0, 0, 0, 3277,
	3268, 3279, 0, 3272, 3238, 0, 3239, 3286, 2879, 0,
	3261, 0, 0, 3287, 3269, 1593, 0, 207, 2051, 2051,
	2051, 0, 3209, 0, 0, 3281, 3283, 0, 0, 0,
	3312, 0, 3257, 3136, 3137, 0, 0, 3297, 3298, 0,
	0, 3300, 3299, 0, 0, 3034, 0, 0, 0, 0,
	3328, 3326, 3330, 207, 0, 0, 3314, 0, 0, 0,
	3336, 0, 3335, 0, 2985, 3337, 1593, 0, 3329, 3327,
	3331, 0, 207, 0, 3332, 3333, 3334, 0, 0, 1618,
	0, 0, 0, 0, 0, 0, 0, 3343, 0, 3346,
	3344, 0, 0, 0, 0, 500, 207, 3350, 3276, 0,
	3267, 3351, 3353, 0, 3358, 0, 3360, 0, 0, 1538,
	1538, 1538, 3363, 3362, 3357, 0, 203, 0, 203, 0,
	1956, 203, 0, 0, 0, 0, 0, 3371, 3370, 0,
	1618, 1165, 0, 1149, 203, 3378, 3380, 3377, 0, 3379,
	0, 1593, 203, 1165, 518, 3384, 0, 203, 1165, 0,
	3391, 0, 3392, 549, 3356, 2365, 2366, 0, 1709, 0,
	0, 3385, 3386, 0, 2273, 0, 1590, 3395, 3396, 3397,
	3399, 3400, 0, 0, 0, 1713, 0, 0, 801, 3404,
	0, 1041, 0, 1402, 1403, 0, 0, 0, 0, 0,
	3402, 984, 0, 0, 0, 0, 2981, 0, 0, 984,
	984, 0, 0, 984, 0, 1618, 0, 3087, 0, 1405,
	0, 0, 0, 0, 0, 1590, 1590, 1710, 1127, 0,
	0, 0, 0, 0, 0, 0, 0, 984, 0, 0,
	0, 1590, 1590, 0, 0, 1404, 0, 0, 0, 0,
	2055, 2055, 0, 3087, 0, 0, 0, 0, 0, 1127,
	0, 0, 0, 1896, 0, 2452, 2453, 2454, 1127, 0,
	0, 0, 1590, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	813, 0, 0, 0, 0, 0, 0, 0, 1714, 0,
	0, 0, 0, 813, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 981, 1579, 0,
	0, 0, 0, 0, 0, 1410, 0, 2051, 2051, 0,
	2055, 2055, 2055, 2055, 2055, 2055, 2055, 2055, 2055, 2055,
	2055, 2055, 2055, 2055, 2055, 2055, 2055, 2055, 2055, 0,
	2055, 0, 0, 0, 0, 1432, 1433, 1434, 0, 203,
	203, 1715, 1716, 0, 0, 1127, 203, 0, 0, 0,
	1711, 0, 1127, 0, 0, 0, 1783, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 203, 3106, 203,
	980, 0, 0, 500, 0, 0, 0, 1712, 980, 980,
	0, 0, 980, 0, 0, 1799, 1425, 2051, 2051, 2051,
	2051, 2051, 2051, 2051, 2051, 2051, 2051, 2051, 2051, 2051,
	2051, 2051, 2051, 2051, 2051, 2051, 980, 2051, 0, 0,
	982, 0, 0, 0, 0, 0, 0, 0, 982, 982,
	0, 0, 982, 0, 0, 0, 549, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 1149, 203, 0,
	0, 0, 0, 0, 0, 0, 982, 0, 0, 0,
	549, 1896, 0, 0, 1127, 0, 203, 1127, 981, 0,
	1717, 203, 203, 0, 203, 0, 203, 0, 203, 0,
	203, 0, 0, 0, 0, 1426, 0, 0, 0, 0,
	1858, 0, 0, 0, 1860, 0, 0, 0, 1402, 1403,
	0, 0, 0, 203, 1590, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 533, 0, 1405, 0, 0, 1127, 549, 0,
	0, 0, 0, 1718, 0, 0, 0, 0, 1127, 0,
	0, 1877, 0, 1882, 0, 0, 0, 0, 0, 1889,
	1404, 0, 0, 0, 2697, 2698, 1898, 1899, 1900, 1901,
	1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911,
	1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921,
	1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931,
	1932, 0, 1938, 0, 1940, 1941, 1942, 1943, 0, 0,
	0, 984, 0, 1413, 1414, 1406, 1407, 1408, 1409, 1411,
	1412, 0, 981, 0, 1967, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1475,
	1410, 0, 981, 1992, 2756, 2757, 2758, 2759, 2760, 2761,
	2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 2771,
	2772, 2773, 2774, 1127, 2778, 0, 0, 0, 0, 0,
	1432, 1433, 1434, 0, 2024, 2025, 2026, 2027, 2028, 2029,
	2030, 0, 0, 0, 0, 2047, 500, 2058, 2060, 2065,
	0, 0, 0, 0, 0, 0, 0, 0, 3008, 0,
	0, 203, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 500, 0, 0, 0, 0, 0, 1473, 203, 0,
	500, 1425, 0, 203, 3005, 0, 0, 2998, 0, 0,
	0, 0, 0, 0, 0, 0, 58, 0, 0, 0,
	2996, 0, 0, 0, 0, 0, 3000, 59, 0, 0,
	0, 0, 0, 58, 0, 0, 0, 0, 0, 0,
	0, 63, 0, 0, 59, 3006, 0, 0, 0, 0,
	0, 0, 984, 0, 0, 1127, 0, 0, 63, 0,
	0, 0, 1590, 0, 0, 2429, 2430, 0, 2447, 2448,
	2449, 69, 0, 0, 0, 2999, 0, 0, 0, 0,
	980, 0, 0, 0, 2935, 518, 0, 0, 69, 0,
	1426, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 0, 0, 1590, 76, 0, 0, 0, 75, 0,
	982, 1127, 2167, 0, 0, 2444, 0, 85, 0, 0,
	203, 76, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 0, 0, 0, 0, 2055, 0, 0, 0,
	0, 0, 77, 203, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 77,
	0, 0, 203, 2221, 0, 0, 0, 0, 0, 0,
	0, 0, 2223, 3001, 2225, 2055, 3002, 0, 1590, 0,
	0, 0, 0, 0, 0, 0, 984, 2435, 203, 0,
	1165, 0, 0, 203, 0, 0, 0, 0, 0, 1414,
	1406, 1407, 1408, 1409, 1411, 1412, 984, 0, 1783, 0,
	0, 3004, 0, 2051, 0, 2167, 0, 500, 0, 2276,
	0, 0, 0, 3007, 0, 203, 0, 1127, 203, 1127,
	203, 980, 203, 0, 203, 203, 0, 1149, 2450, 0,
	0, 0, 0, 0, 0, 0, 2295, 666, 78, 2167,
	0, 0, 2051, 0, 0, 0, 203, 0, 0, 0,
	0, 0, 0, 0, 2055, 78, 0, 1165, 2445, 1165,
	0, 982, 0, 0, 0, 0, 0, 0, 0, 144,
	81, 0, 82, 0, 0, 1127, 0, 0, 203, 203,
	203, 0, 203, 0, 0, 0, 144, 81, 0, 82,
	0, 175, 0, 0, 0, 0, 1127, 0, 0, 0,
	0, 0, 0, 662, 0, 203, 115, 0, 175, 0,
	0, 0, 0, 0, 3003, 0, 0, 0, 0, 0,
	662, 0, 0, 115, 0, 0, 0, 0, 0, 177,
	0, 2051, 0, 0, 0, 0, 1127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 177, 2446, 0, 0,
	0, 0, 116, 2348, 2349, 0, 0, 0, 0, 2355,
	0, 0, 1127, 0, 148, 980, 0, 0, 0, 116,
	0, 0, 176, 0, 901, 0, 0, 0, 2369, 2370,
	0, 148, 169, 0, 1992, 980, 0, 0, 0, 176,
	170, 0, 0, 2377, 0, 58, 0, 0, 1127, 169,
	0, 1402, 1403, 0, 1165, 982, 59, 170, 1127, 0,
	0, 147, 0, 204, 0, 0, 0, 0, 0, 2397,
	63, 0, 0, 0, 0, 982, 0, 1405, 147, 0,
	0, 0, 0, 2412, 204, 0, 0, 0, 0, 0,
	3094, 813, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 0, 0, 1404, 0, 0, 204, 2441, 2442, 2443,
	0, 1424, 0, 0, 2440, 2438, 2439, 2431, 2432, 2433,
	2434, 2436, 2437, 0, 0, 0, 0, 0, 0, 3118,
	75, 2065, 2065, 2065, 0, 0, 0, 0, 0, 85,
	0, 203, 0, 76, 0, 0, 1538, 0, 0, 203,
	203, 0, 0, 203, 2481, 0, 0, 2700, 500, 0,
	0, 500, 0, 0, 0, 0, 0, 0, 500, 0,
	0, 500, 500, 1427, 1428, 1429, 1430, 203, 0, 0,
	0, 77, 0, 1410, 0, 0, 0, 0, 1165, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1165, 0, 0, 0, 0, 0, 0, 0,
	801, 0, 0, 1432, 1433, 1434, 0, 0, 3184, 0,
	203, 2167, 2544, 801, 0, 0, 2167, 0, 0, 2544,
	0, 0, 0, 0, 0, 0, 2167, 2544, 2167, 2544,
	2544, 0, 0, 0, 0, 0, 0, 0, 2566, 0,
	203, 203, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1425, 0, 1127, 0, 0, 0,
	203, 0, 813, 1149, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 78, 0, 0,
	0, 2600, 0, 0, 2602, 2605, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 0, 203, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 144, 81,
	0, 82, 0, 1149, 0, 0, 0, 0, 0, 2167,
	0, 500, 2635, 0, 0, 1431, 0, 0, 2167, 0,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 662, 1426, 0, 115, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	1783, 0, 0, 1783, 0, 0, 0, 0, 177, 0,
	0, 0, 0, 0, 0, 0, 2681, 0, 0, 1149,
	203, 0, 203, 0, 0, 0, 0, 0, 0, 1402,
	1403, 116, 0, 0, 0, 0, 2688, 0, 203, 0,
	1889, 0, 0, 148, 0, 0, 2692, 2693, 0, 0,
	2696, 176, 0, 0, 2699, 1405, 0, 0, 0, 0,
	0, 169, 0, 2703, 0, 0, 0, 0, 0, 170,
	0, 0, 2710, 1402, 1403, 2481, 0, 0, 0, 0,
	0, 1404, 0, 0, 0, 0, 0, 0, 0, 1424,
	1291, 0, 0, 0, 2737, 0, 2730, 0, 0, 1405,
	1415, 1413, 1414, 1406, 1407, 1408, 1409, 1411, 1412, 0,
	0, 0, 0, 0, 0, 2746, 2747, 0, 2748, 2749,
	2750, 0, 0, 2751, 0, 1404, 0, 2753, 0, 0,
	0, 0, 0, 1424, 0, 2695, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1427, 1428, 1429, 1430, 0, 0, 0, 2781, 2782,
	0, 1410, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2694,
	0, 203, 0, 0, 0, 0, 2798, 500, 0, 0,
	0, 1432, 1433, 1434, 0, 1427, 1428, 1429, 1430, 0,
	0, 500, 0, 0, 0, 1410, 0, 0, 0, 0,
	204, 1048, 204, 204, 1048, 0, 1048, 204, 0, 0,
	0, 0, 0, 0, 0, 204, 1165, 0, 0, 0,
	0, 0, 0, 0, 0, 1432, 1433, 1434, 2826, 0,
	0, 0, 1425, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2834, 2837, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1048, 1048, 204, 204,
	549, 0, 0, 0, 0, 2856, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 1425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2874, 203, 203, 204, 204, 204, 204, 0,
	1048, 1048, 0, 1431, 0, 1048, 0, 0, 1048, 204,
	203, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1426, 0, 0, 0, 0, 0, 0, 1538, 0,
	0, 2167, 203, 0, 0, 0, 0, 0, 0, 2904,
	0, 0, 0, 0, 2295, 2295, 0, 1431, 0, 0,
	666, 666, 2167, 0, 1048, 1783, 1783, 0, 0, 0,
	0, 0, 203, 0, 0, 1426, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2932, 2933, 0, 0, 204, 0,
	2937, 2938, 0, 0, 0, 2941, 2942, 0, 0, 0,
	0, 0, 2946, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2954, 2951, 0, 0, 0, 0, 0, 0, 2955, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1415, 1413,
	1414, 1406, 1407, 1408, 1409, 1411, 1412, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	0, 1165, 1415, 1413, 1414, 1406, 1407, 1408, 1409, 1411,
	1412, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2167, 2544, 2167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1165, 0, 0, 0, 0, 2837, 2167,
	0, 2544, 0, 0, 1165, 1165, 203, 2167, 2544, 0,
	0, 0, 0, 0, 0, 203, 203, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3048, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 867, 0, 0,
	0, 0, 0, 2167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1165, 0, 0, 2837, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 0, 0, 0,
	0, 208, 204, 0, 3082, 3083, 3084, 0, 0, 0,
	0, 0, 0, 1048, 0, 204, 204, 573, 0, 0,
	0, 0, 1048, 204, 0, 0, 0, 0, 204, 0,
	3092, 3093, 0, 0, 0, 0, 0, 0, 0, 573,
	0, 0, 0, 0, 3100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1402, 1403, 2167, 1048,
	2544, 566, 0, 3112, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2837, 1405, 566, 0, 0, 0, 0, 0, 3134,
	0, 0, 0, 0, 549, 0, 0, 0, 0, 0,
	0, 801, 0, 0, 0, 0, 2605, 0, 1404, 0,
	0, 0, 122, 203, 0, 0, 1424, 2837, 58, 0,
	2837, 0, 0, 1165, 0, 0, 0, 0, 0, 59,
	117, 0, 0, 0, 0, 983, 0, 0, 0, 0,
	0, 2837, 2837, 63, 203, 0, 0, 0, 0, 0,
	976, 0, 0, 0, 0, 0, 0, 0, 39, 119,
	0, 0, 2354, 2737, 0, 0, 0, 0, 0, 500,
	0, 38, 0, 69, 0, 0, 0, 3112, 1427, 1428,
	1429, 1430, 0, 0, 1048, 204, 0, 3195, 1410, 198,
	3198, 1048, 0, 41, 0, 0, 0, 0, 42, 0,
	0, 0, 0, 75, 2167, 2544, 120, 0, 0, 0,
	0, 40, 85, 0, 0, 0, 76, 43, 1432, 1433,
	1434, 203, 0, 0, 0, 0, 0, 2544, 0, 0,
	204, 204, 0, 0, 0, 0, 0, 204, 0, 1165,
	0, 1165, 0, 44, 0, 0, 0, 0, 1402, 1403,
	0, 0, 0, 0, 77, 0, 204, 0, 204, 0,
	204, 3252, 0, 0, 0, 0, 0, 1165, 203, 1425,
	0, 0, 2429, 2430, 1405, 2447, 2448, 2449, 0, 0,
	203, 0, 801, 0, 0, 0, 0, 0, 0, 0,
	0, 2706, 0, 0, 0, 0, 0, 0, 0, 0,
	1404, 0, 0, 0, 0, 0, 0, 0, 1424, 0,
	2737, 3296, 3296, 3296, 0, 0, 1048, 0, 1048, 0,
	0, 0, 0, 1048, 0, 0, 204, 0, 0, 204,
	3315, 0, 2444, 0, 0, 0, 0, 0, 1048, 1048,
	1431, 0, 0, 0, 0, 0, 2167, 204, 2837, 0,
	2837, 0, 204, 204, 2347, 204, 0, 204, 1426, 204,
	78, 204, 0, 3296, 0, 3112, 0, 45, 0, 0,
	1427, 1428, 1429, 1430, 0, 0, 0, 0, 0, 0,
	1410, 0, 0, 0, 204, 0, 0, 0, 0, 1165,
	48, 144, 81, 0, 82, 0, 46, 0, 0, 0,
	121, 0, 0, 871, 2435, 0, 47, 0, 0, 0,
	1432, 1433, 1434, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 51, 0, 0, 115, 1048,
	0, 0, 0, 0, 3296, 0, 0, 118, 0, 0,
	0, 0, 0, 1402, 1403, 0, 0, 0, 0, 0,
	0, 177, 0, 0, 0, 2450, 0, 0, 0, 0,
	0, 1425, 0, 0, 0, 0, 0, 0, 0, 1405,
	0, 0, 0, 0, 116, 1415, 1413, 1414, 1406, 1407,
	1408, 1409, 1411, 1412, 0, 2445, 148, 0, 0, 0,
	0, 0, 0, 0, 176, 1404, 0, 0, 0, 0,
	0, 0, 0, 1424, 169, 0, 0, 0, 0, 0,
	0, 0, 170, 202, 1048, 202, 202, 0, 0, 0,
	202, 0, 0, 0, 0, 0, 0, 0, 573, 0,
	0, 0, 1431, 147, 0, 0, 3, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1426, 0, 0, 0, 0, 0, 0, 0, 1044, 0,
	0, 1145, 0, 1044, 0, 1427, 1428, 1429, 1430, 0,
	0, 202, 202, 0, 2446, 1410, 0, 0, 0, 0,
	0, 1048, 0, 0, 0, 0, 202, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 1048, 0, 0,
	0, 0, 0, 0, 0, 1432, 1433, 1434, 202, 202,
	202, 202, 0, 1145, 1145, 0, 0, 0, 0, 0,
	0, 0, 202, 0, 0, 0, 0, 0, 0, 2429,
	2430, 0, 2447, 2448, 2449, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2705, 0,
	0, 0, 0, 0, 0, 0, 1425, 1145, 1145, 0,
	0, 0, 1145, 0, 0, 1145, 0, 1415, 1413, 1414,
	1406, 1407, 1408, 1409, 1411, 1412, 0, 0, 0, 0,
	649, 0, 0, 0, 2441, 2442, 2443, 202, 0, 2444,
	0, 2440, 2438, 2439, 2431, 2432, 2433, 2434, 2436, 2437,
	0, 202, 0, 631, 0, 0, 1038, 0, 1048, 0,
	0, 1145, 0, 1156, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 0, 0, 1431, 0, 0,
	0, 204, 0, 632, 0, 0, 0, 0, 0, 0,
	0, 0, 633, 0, 204, 1426, 0, 1048, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 634, 0, 204,
	1048, 2435, 0, 204, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 654, 0, 0, 0, 0, 0, 1240,
	0, 0, 0, 0, 0, 0, 0, 0, 635, 204,
	0, 0, 0, 0, 204, 0, 0, 0, 0, 0,
	0, 1264, 1264, 1264, 1156, 636, 0, 0, 0, 0,
	0, 0, 2450, 0, 0, 1295, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 637, 204, 0, 638, 204,
	0, 204, 0, 204, 0, 204, 204, 0, 0, 1048,
	1048, 1048, 2445, 1048, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 653, 0, 0, 204, 0, 0,
	0, 0, 1415, 1413, 1414, 1406, 1407, 1408, 1409, 1411,
	1412, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1358, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	204, 204, 0, 204, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1561, 2446, 983, 0, 0, 202, 0, 0, 0, 0,
	0, 0, 640, 0, 0, 0, 0, 0, 202, 1561,
	0, 0, 0, 0, 0, 0, 573, 657, 641, 0,
	1045, 573, 0, 1146, 0, 1045, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 656, 0, 0, 0, 0,
	1044, 0, 642, 0, 0, 643, 0, 0, 0, 1145,
	566, 651, 0, 0, 0, 566, 0, 0, 644, 0,
	0, 0, 0, 0, 0, 1146, 1146, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1044, 645, 652, 0,
	0, 2441, 2442, 2443, 0, 0, 0, 646, 2440, 2438,
	2439, 2431, 2432, 2433, 2434, 2436, 2437, 0, 648, 1146,
	1146, 0, 0, 647, 1146, 0, 0, 1146, 0, 0,
	0, 0, 0, 0, 655, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 650, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1048, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1146, 0, 0, 0, 0, 573, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1568, 0,
	0, 0, 0, 0, 1048, 0, 0, 0, 0, 0,
	0, 1577, 0, 1048, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1145, 0, 202, 202, 0, 0, 0, 1044, 0,
	202, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 0, 0, 0, 0, 202,
	0, 202, 0, 202, 0, 0, 1402, 1403, 0, 1435,
	1436, 1437, 1445, 1446, 1447, 0, 0, 0, 0, 0,
	0, 204, 204, 0, 0, 1438, 0, 0, 0, 204,
	0, 0, 1405, 0, 0, 1451, 0, 0, 0, 0,
	0, 204, 1048, 0, 0, 0, 0, 0, 0, 0,
	1048, 0, 0, 0, 0, 0, 0, 1048, 1404, 0,
	0, 0, 0, 0, 0, 0, 1424, 0, 0, 202,
	0, 0, 202, 1421, 0, 204, 0, 0, 1048, 204,
	0, 1048, 1048, 1048, 0, 0, 0, 0, 204, 0,
	202, 0, 0, 0, 0, 573, 202, 0, 202, 0,
	202, 0, 202, 1145, 202, 1145, 0, 0, 0, 0,
	1145, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1145, 1145, 202, 1427, 1428,
	1429, 1430, 1048, 1048, 0, 0, 0, 0, 1410, 566,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1048,
	0, 204, 1048, 204, 1442, 1452, 1758, 0, 1432, 1433,
	1434, 0, 0, 1770, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1448,
	1449, 0, 1240, 0, 1789, 0, 1789, 1419, 1420, 0,
	0, 0, 1045, 0, 0, 0, 0, 0, 0, 0,
	0, 1146, 1440, 0, 0, 0, 1044, 0, 0, 1425,
	0, 0, 1048, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1048, 0, 0, 1450, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1045, 0,
	1439, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1770, 0, 0, 1830, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1841, 0, 0, 0, 0, 0, 1847,
	1431, 1848, 0, 1849, 0, 1850, 0, 1851, 0, 0,
	0, 1044, 0, 0, 0, 0, 0, 0, 1426, 0,
	0, 0, 0, 0, 0, 983, 0, 0, 0, 0,
	1862, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 983, 1443, 0, 0, 0, 202, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1048, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1044, 0,
	0, 0, 0, 1146, 0, 0, 0, 0, 0, 0,
	1045, 0, 0, 0, 1044, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1441, 0, 0, 1416, 1417,
	1423, 1422, 1418, 1444, 0, 1415, 1413, 1414, 1406, 1407,
	1408, 1409, 1411, 1412, 0, 0, 0, 0, 2962, 0,
	0, 2961, 0, 0, 204, 204, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1048, 204, 0, 0, 202, 1048, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 0, 0,
	0, 0, 0, 0, 0, 1044, 0, 1048, 1048, 1048,
	0, 0, 202, 0, 0, 1146, 573, 1146, 0, 0,
	0, 0, 1146, 204, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1048, 1146, 1146, 0,
	2112, 0, 202, 0, 1145, 0, 0, 202, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1044, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 202,
	0, 0, 202, 0, 202, 0, 202, 0, 202, 202,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1045, 0,
	0, 0, 0, 0, 0, 0, 1145, 1145, 1145, 0,
	1145, 0, 202, 202, 202, 0, 202, 0, 0, 0,
	0, 0, 1048, 0, 1048, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 202,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 0, 0, 0, 0, 1156, 204, 204, 1048, 0,
	1048, 0, 1048, 1045, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1048, 0, 0, 1048, 2239, 0, 0, 0, 0,
	1770, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1402, 1403, 0,
	1435, 1436, 1437, 1445, 1446, 1447, 0, 0, 0, 0,
	0, 1048, 2278, 0, 0, 1264, 0, 1264, 0, 1264,
	1045, 1156, 1156, 1405, 0, 0, 1451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1045, 1048, 0, 0,
	0, 0, 0, 2315, 0, 0, 0, 0, 0, 1404,
	0, 0, 0, 0, 0, 0, 0, 1424, 0, 0,
	0, 0, 0, 0, 1421, 0, 0, 0, 0, 0,
	0, 0, 0, 1048, 0, 2329, 1156, 2331, 0, 0,
	0, 0, 0, 1048, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 983, 0, 0, 0, 0,
	0, 0, 2345, 983, 983, 0, 0, 983, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1427,
	1428, 1429, 1430, 0, 0, 0, 0, 0, 0, 1410,
	0, 1561, 0, 0, 204, 0, 0, 0, 0, 1048,
	1044, 0, 0, 0, 0, 0, 0, 1045, 0, 0,
	0, 0, 0, 0, 0, 1442, 1452, 0, 0, 1432,
	1433, 1434, 0, 0, 0, 204, 0, 0, 0, 0,
	0, 1044, 0, 0, 202, 0, 0, 0, 0, 0,
	1044, 0, 0, 0, 0, 0, 1146, 0, 1419, 1420,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1045,
	0, 0, 0, 1440, 202, 202, 0, 0, 0, 0,
	1425, 0, 1561, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 1048, 0, 0, 0, 0, 0, 0,
	0, 0, 1048, 1048, 0, 0, 0, 0, 202, 0,
	0, 0, 202, 0, 0, 0, 0, 0, 0, 1145,
	0, 202, 0, 0, 0, 0, 0, 1044, 1146, 1146,
	1146, 1431, 1146, 0, 1044, 0, 0, 0, 0, 204,
	0, 1048, 0, 0, 0, 0, 0, 0, 0, 1426,
	0, 204, 0, 0, 0, 1145, 0, 0, 1145, 1145,
	1145, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 1443, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 0, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1145,
	1145, 0, 202, 0, 0, 0, 0, 2541, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1044, 0, 0, 1044,
	0, 0, 0, 0, 0, 0, 0, 2578, 2239, 0,
	0, 0, 0, 0, 0, 0, 1441, 0, 0, 1416,
	1417, 1423, 1422, 1418, 1444, 0, 1415, 1413, 1414, 1406,
	1407, 1408, 1409, 1411, 1412, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1044,
	0, 2613, 0, 0, 0, 2617, 0, 0, 0, 0,
	1044, 0, 0, 0, 2624, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1402, 1403, 0, 1435, 1436, 1437,
	1445, 1446, 1447, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1438, 0, 983, 0, 0, 0, 0,
	1405, 0, 0, 1451, 0, 0, 2669, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1404, 2684, 0, 1156,
	0, 0, 1045, 0, 1424, 0, 0, 0, 0, 0,
	0, 1421, 0, 0, 0, 2690, 0, 0, 0, 1402,
	1403, 0, 1435, 1436, 1437, 1445, 1446, 1447, 0, 0,
	0, 0, 0, 1045, 0, 1044, 0, 0, 1438, 0,
	0, 0, 1045, 0, 0, 1405, 0, 0, 1451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1427, 1428, 1429, 1430,
	0, 1404, 0, 0, 0, 0, 1410, 0, 0, 1424,
	0, 0, 0, 0, 0, 0, 1421, 202, 202, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1442, 1452, 202, 0, 1432, 1433, 1434, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 983, 1448, 1449, 0,
	0, 1146, 0, 0, 0, 1419, 1420, 0, 0, 1045,
	0, 1427, 1428, 1429, 1430, 0, 1045, 1044, 0, 0,
	1440, 1410, 1145, 0, 0, 0, 202, 1425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1146, 0, 0,
	1146, 1146, 1146, 0, 1450, 0, 0, 1442, 1452, 0,
	0, 1432, 1433, 1434, 1145, 1145, 1145, 0, 1439, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1448, 1449, 0, 0, 0, 0, 0, 0,
	1419, 1420, 0, 1044, 0, 0, 0, 0, 0, 0,
	0, 1146, 1146, 0, 0, 1440, 0, 0, 1431, 0,
	0, 0, 1425, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1426, 0, 1045, 1450,
	0, 1045, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1439, 0, 0, 0, 0, 0, 0,
	983, 1443, 0, 0, 0, 0, 0, 0, 0, 0,
	2875, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1561, 0, 0, 0, 0, 0, 0, 2885, 0, 0,
	0, 0, 0, 1431, 0, 0, 0, 0, 0, 0,
	0, 1045, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1426, 1045, 0, 0, 0, 0, 0, 0, 1044,
	202, 1044, 0, 0, 0, 0, 0, 0, 0, 202,
	202, 0, 0, 0, 0, 0, 1443, 0, 0, 2922,
	0, 0, 0, 1441, 0, 0, 1416, 1417, 1423, 1422,
	1418, 1444, 0, 1415, 1413, 1414, 1406, 1407, 1408, 1409,
	1411, 1412, 0, 0, 0, 0, 2417, 0, 0, 2418,
	0, 0, 0, 0, 0, 1145, 0, 1044, 0, 1145,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1044, 0,
	0, 1145, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1441, 0,
	0, 1416, 1417, 1423, 1422, 1418, 1444, 1045, 1415, 1413,
	1414, 1406, 1407, 1408, 1409, 1411, 1412, 0, 1044, 0,
	0, 1988, 0, 0, 1989, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1044, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1044, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1044, 0, 0, 3026, 0, 0, 0, 202, 0, 0,
	0, 0, 2239, 1402, 1403, 0, 1435, 1436, 1437, 1445,
	1446, 1447, 0, 0, 0, 0, 0, 0, 0, 1045,
	0, 0, 1438, 0, 1146, 0, 0, 0, 202, 1405,
	0, 0, 1451, 0, 0, 0, 0, 0, 704, 0,
	735, 0, 0, 0, 0, 0, 1145, 0, 0, 0,
	0, 0, 0, 0, 0, 1404, 1146, 1146, 1146, 0,
	0, 0, 711, 1424, 0, 0, 0, 0, 0, 0,
	1421, 0, 0, 0, 709, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1045, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 710, 0, 0,
	0, 0, 712, 0, 0, 202, 740, 0, 0, 0,
	0, 0, 718, 719, 0, 0, 0, 0, 729, 0,
	0, 0, 0, 0, 0, 1427, 1428, 1429, 1430, 0,
	0, 736, 713, 0, 0, 1410, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3119, 0,
	1145, 0, 202, 0, 0, 0, 0, 0, 734, 1145,
	1145, 1442, 1452, 0, 202, 1432, 1433, 1434, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1448, 1449, 0, 714,
	3155, 0, 0, 0, 1419, 1420, 708, 0, 1044, 0,
	0, 1045, 0, 1045, 0, 0, 0, 0, 0, 1440,
	0, 0, 715, 716, 0, 0, 1425, 0, 0, 0,
	0, 3178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1450, 722, 0, 0, 0, 0, 0,
	0, 717, 0, 0, 0, 0, 0, 1439, 0, 0,
	0, 0, 0, 0, 0, 0, 721, 1146, 0, 1045,
	0, 1146, 0, 0, 0, 0, 0, 0, 0, 737,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1045, 0, 0, 1146, 0, 0, 0, 1431, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3224, 0,
	0, 0, 0, 0, 0, 1426, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 720, 0, 0,
	1045, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1443, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 731, 3258, 1045, 0, 0, 0,
	0, 0, 0, 0, 726, 0, 0, 3273, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 706, 724, 738,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1045, 707, 0, 0, 0, 0, 0, 0,
	0, 0, 1045, 727, 0, 0, 0, 725, 0, 0,
	0, 741, 742, 0, 0, 0, 0, 739, 0, 0,
	0, 0, 1441, 0, 728, 1416, 1417, 1423, 1422, 1418,
	1444, 0, 1415, 1413, 1414, 1406, 1407, 1408, 1409, 1411,
	1412, 0, 0, 730, 0, 0, 0, 0, 2960, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1146, 0,
	0, 0, 0, 0, 0, 732, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1146, 0, 0, 0, 0, 0, 0, 0,
	0, 1146, 1146, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1042, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1045, 212, 213, 214, 215, 216, 1049, 217, 1050, 1051,
	1052, 1053, 451, 1054, 1055, 1056, 1057, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 1058, 224, 225,
	226, 227, 228, 229, 1059, 1060, 230, 456, 457, 458,
	1061, 231, 459, 1062, 1047, 1063, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 1064, 241, 0, 242,
	243, 244, 1065, 922, 245, 246, 1066, 1067, 1069, 1068,
	1070, 1071, 1072, 247, 248, 249, 250, 251, 252, 460,
	461, 1073, 253, 1074, 255, 254, 1075, 256, 1076, 1077,
	257, 258, 259, 1078, 260, 1079, 261, 262, 1080, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 463, 464,
	1081, 209, 1082, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 1083, 279, 1084, 1085, 923,
	280, 281, 1086, 282, 466, 1087, 467, 283, 1088, 284,
	285, 286, 287, 288, 289, 290, 468, 469, 470, 925,
	1089, 474, 292, 0, 0, 0, 210, 291, 293, 300,
	1090, 924, 294, 471, 296, 295, 297, 298, 299, 472,
	1091, 473, 1092, 301, 926, 927, 302, 303, 304, 928,
	305, 306, 0, 0, 307, 308, 309, 310, 1093, 312,
	311, 1094, 313, 475, 929, 314, 315, 930, 1095, 316,
	317, 1096, 1097, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 931, 328, 329, 331, 330, 1098,
	211, 932, 1099, 476, 477, 332, 333, 1100, 334, 335,
	336, 1101, 1102, 338, 339, 1103, 1104, 340, 478, 933,
	341, 934, 479, 342, 337, 343, 344, 345, 346, 347,
	348, 1105, 349, 480, 350, 481, 351, 1106, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 1107,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 1108, 374, 935, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 1109, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 1110, 401, 381, 382, 402, 936, 403,
	484, 404, 405, 1111, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 485, 1112, 417, 418, 416,
	1113, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	1114, 486, 487, 488, 489, 1115, 1116, 426, 427, 490,
	428, 491, 1117, 429, 430, 431, 0, 432, 433, 1118,
	1119, 434, 435, 436, 437, 439, 1120, 440, 1121, 438,
	441, 442, 443, 492, 493, 494, 1122, 445, 444, 495,
	1123, 1124, 1125, 1126, 446, 447, 496, 448, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1042, 0, 0, 0, 0, 0, 0, 0,
	2099, 0, 0, 0, 0, 0, 0, 0, 2100, 212,
	213, 214, 215, 216, 1049, 217, 1050, 1051, 1052, 1053,
	451, 1054, 1055, 1056, 1057, 218, 219, 220, 452, 453,
	221, 454, 222, 223, 455, 1058, 224, 225, 226, 227,
	228, 229, 1059, 1060, 230, 456, 457, 458, 1061, 231,
	459, 1062, 1047, 1063, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 1064, 241, 0, 242, 243, 244,
	1065, 922, 245, 246, 1066, 1067, 1069, 1068, 1070, 1071,
	1072, 247, 248, 249, 250, 251, 252, 460, 461, 1073,
	253, 1074, 255, 254, 1075, 256, 1076, 1077, 257, 258,
	259, 1078, 260, 1079, 261, 262, 1080, 462, 263, 264,
	266, 269, 265, 270, 271, 272, 463, 464, 1081, 209,
	1082, 0, 0, 0, 0, 273, 274, 275, 465, 276,
	277, 0, 278, 1083, 279, 1084, 1085, 923, 280, 281,
	1086, 282, 466, 1087, 467, 283, 1088, 284, 285, 286,
	287, 288, 289, 290, 468, 469, 470, 925, 1089, 474,
	292, 0, 0, 0, 210, 291, 293, 300, 1090, 924,
	294, 471, 296, 295, 297, 298, 299, 472, 1091, 473,
	1092, 301, 926, 927, 302, 303, 304, 928, 305, 306,
	0, 0, 307, 308, 309, 310, 1093, 312, 311, 1094,
	313, 475, 929, 314, 315, 930, 1095, 316, 317, 1096,
	1097, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 931, 328, 329, 331, 330, 1098, 211, 932,
	1099, 476, 477, 332, 333, 1100, 334, 335, 336, 1101,
	1102, 338, 339, 1103, 1104, 340, 478, 933, 341, 934,
	479, 342, 337, 343, 344, 345, 346, 347, 348, 1105,
	349, 480, 350, 481, 351, 1106, 352, 0, 353, 354,
	355, 356, 357, 358, 482, 359, 360, 1107, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 1108, 374, 935, 375, 376, 377, 378, 483,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	1109, 397, 398, 391, 393, 394, 395, 392, 396, 399,
	400, 1110, 401, 381, 382, 402, 936, 403, 484, 404,
	405, 1111, 415, 406, 407, 408, 383, 409, 413, 414,
	410, 411, 412, 485, 1112, 417, 418, 416, 1113, 419,
	420, 421, 422, 423, 267, 424, 268, 425, 1114, 486,
	487, 488, 489, 1115, 1116, 426, 427, 490, 428, 491,
	1117, 429, 430, 431, 0, 432, 433, 1118, 1119, 434,
	435, 436, 437, 439, 1120, 440, 1121, 438, 441, 442,
	443, 492, 493, 494, 1122, 445, 444, 495, 1123, 1124,
	1125, 1126, 446, 447, 496, 448, 449, 450, 0, 0,
	0, 0, 1042, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2984, 212,
	213, 214, 215, 216, 1049, 217, 1050, 1051, 1052, 1053,
	451, 1054, 1055, 1056, 1057, 218, 219, 220, 452, 453,
	221, 454, 222, 223, 455, 1058, 224, 225, 226, 227,
	228, 229, 1059, 1060, 230, 456, 457, 458, 1061, 231,
	459, 1062, 1047, 1063, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 1064, 241, 0, 242, 243, 244,
	1065, 922, 245, 246, 1066, 1067, 1069, 1068, 1070, 1071,
	1072, 247, 248, 249, 250, 251, 252, 460, 461, 1073,
	253, 1074, 255, 254, 1075, 256, 1076, 1077, 257, 258,
	259, 1078, 260, 1079, 261, 262, 1080, 462, 263, 264,
	266, 269, 265, 270, 271, 272, 463, 464, 1081, 209,
	1082, 0, 0, 0, 0, 273, 274, 275, 465, 276,
	277, 0, 278, 1083, 279, 1084, 1085, 923, 280, 281,
	1086, 282, 466, 1087, 467, 283, 1088, 284, 285, 286,
	287, 288, 289, 290, 468, 469, 470, 925, 1089, 474,
	292, 0, 0, 0, 210, 291, 293, 300, 1090, 924,
	294, 471, 296, 295, 297, 298, 299, 472, 1091, 473,
	1092, 301, 926, 927, 302, 303, 304, 928, 305, 306,
	0, 0, 307, 308, 309, 310, 1093, 312, 311, 1094,
	313, 475, 929, 314, 315, 930, 1095, 316, 317, 1096,
	1097, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 931, 328, 329, 331, 330, 1098, 211, 932,
	1099, 476, 477, 332, 333, 1100, 334, 335, 336, 1101,
	1102, 338, 339, 1103, 1104, 340, 478, 933, 341, 934,
	479, 342, 337, 343, 344, 345, 346, 347, 348, 1105,
	349, 480, 350, 481, 351, 1106, 352, 0, 353, 354,
	355, 356, 357, 358, 482, 359, 360, 1107, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 1108, 374, 935, 375, 376, 377, 378, 483,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	1109, 397, 398, 391, 393, 394, 395, 392, 396, 399,
	400, 1110, 401, 381, 382, 402, 936, 403, 484, 404,
	405, 1111, 415, 406, 407, 408, 383, 409, 413, 414,
	410, 411, 412, 485, 1112, 417, 418, 416, 1113, 419,
	420, 421, 422, 423, 267, 424, 268, 425, 1114, 486,
	487, 488, 489, 1115, 1116, 426, 427, 490, 428, 491,
	1117, 429, 430, 431, 0, 432, 433, 1118, 1119, 434,
	435, 436, 437, 439, 1120, 440, 1121, 438, 441, 442,
	443, 492, 493, 494, 1122, 445, 444, 495, 1123, 1124,
	1125, 1126, 446, 447, 496, 448, 449, 450, 1042, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3088, 0, 212, 213, 214, 215, 216,
	1049, 217, 1050, 1051, 1052, 1053, 451, 1054, 1055, 1056,
	1057, 218, 219, 220, 452, 453, 221, 454, 222, 223,
	455, 1058, 224, 225, 226, 227, 228, 229, 1059, 1060,
	230, 456, 457, 458, 1061, 231, 459, 1062, 1047, 1063,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	1064, 241, 0, 242, 243, 244, 1065, 922, 245, 246,
	1066, 1067, 1069, 1068, 1070, 1071, 1072, 247, 248, 249,
	250, 251, 252, 460, 461, 1073, 253, 1074, 255, 254,
	1075, 256, 1076, 1077, 257, 258, 259, 1078, 260, 1079,
	261, 262, 1080, 462, 263, 264, 266, 269, 265, 270,
	271, 272, 463, 464, 1081, 209, 1082, 0, 0, 0,
	0, 273, 274, 275, 465, 276, 277, 0, 278, 1083,
	279, 1084, 1085, 923, 280, 281, 1086, 282, 466, 1087,
	467, 283, 1088, 284, 285, 286, 287, 288, 289, 290,
	468, 469, 470, 925, 1089, 474, 292, 0, 0, 0,
	210, 291, 293, 300, 1090, 924, 294, 471, 296, 295,
	297, 298, 299, 472, 1091, 473, 1092, 301, 926, 927,
	302, 303, 304, 928, 305, 306, 0, 0, 307, 308,
	309, 310, 1093, 312, 311, 1094, 313, 475, 929, 314,
	315, 930, 1095, 316, 317, 1096, 1097, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 931, 328,
	329, 331, 330, 1098, 211, 932, 1099, 476, 477, 332,
	333, 1100, 334, 335, 336, 1101, 1102, 338, 339, 1103,
	1104, 340, 478, 933, 341, 934, 479, 342, 337, 343,
	344, 345, 346, 347, 348, 1105, 349, 480, 350, 481,
	351, 1106, 352, 0, 353, 354, 355, 356, 357, 358,
	482, 359, 360, 1107, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 1108, 374,
	935, 375, 376, 377, 378, 483, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 1109, 397, 398, 391,
	393, 394, 395, 392, 396, 399, 400, 1110, 401, 381,
	382, 402, 936, 403, 484, 404, 405, 1111, 415, 406,
	407, 408, 383, 409, 413, 414, 410, 411, 412, 485,
	1112, 417, 418, 416, 1113, 419, 420, 421, 422, 423,
	267, 424, 268, 425, 1114, 486, 487, 488, 489, 1115,
	1116, 426, 427, 490, 428, 491, 1117, 429, 430, 431,
	0, 432, 433, 1118, 1119, 434, 435, 436, 437, 439,
	1120, 440, 1121, 438, 441, 442, 443, 492, 493, 494,
	1122, 445, 444, 495, 1123, 1124, 1125, 1126, 446, 447,
	496, 448, 449, 450, 1042, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2733,
	0, 212, 213, 214, 215, 216, 1049, 217, 1050, 1051,
	1052, 1053, 451, 1054, 1055, 1056, 1057, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 1058, 224, 225,
	226, 227, 228, 229, 1059, 1060, 230, 456, 457, 458,
	1061, 231, 459, 1062, 1047, 1063, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 1064, 241, 0, 242,
	243, 244, 1065, 922, 245, 246, 1066, 1067, 1069, 1068,
	1070, 1071, 1072, 247, 248, 249, 250, 251, 252, 460,
	461, 1073, 253, 1074, 255, 254, 1075, 256, 1076, 1077,
	257, 258, 259, 1078, 260, 1079, 261, 262, 1080, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 463, 464,
	1081, 209, 1082, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 1083, 279, 1084, 1085, 923,
	280, 281, 1086, 282, 466, 1087, 467, 283, 1088, 284,
	285, 286, 287, 288, 289, 290, 468, 469, 470, 925,
	1089, 474, 292, 0, 0, 0, 210, 291, 293, 300,
	1090, 924, 294, 471, 296, 295, 297, 298, 299, 472,
	1091, 473, 1092, 301, 926, 927, 302, 303, 304, 928,
	305, 306, 0, 0, 307, 308, 309, 310, 1093, 312,
	311, 1094, 313, 475, 929, 314, 315, 930, 1095, 316,
	317, 1096, 1097, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 931, 328, 329, 331, 330, 1098,
	211, 932, 1099, 476, 477, 332, 333, 1100, 334, 335,
	336, 1101, 1102, 338, 339, 1103, 1104, 340, 478, 933,
	341, 934, 479, 342, 337, 343, 344, 345, 346, 347,
	348, 1105, 349, 480, 350, 481, 351, 1106, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 1107,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 1108, 374, 935, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 1109, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 1110, 401, 381, 382, 402, 936, 403,
	484, 404, 405, 1111, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 485, 1112, 417, 418, 416,
	1113, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	1114, 486, 487, 488, 489, 1115, 1116, 426, 427, 490,
	428, 491, 1117, 429, 430, 431, 0, 432, 433, 1118,
	1119, 434, 435, 436, 437, 439, 1120, 440, 1121, 438,
	441, 442, 443, 492, 493, 494, 1122, 445, 444, 495,
	1123, 1124, 1125, 1126, 446, 447, 496, 448, 449, 450,
	1042, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2725, 0, 212, 213, 214,
	215, 216, 1049, 217, 1050, 1051, 1052, 1053, 451, 1054,
	1055, 1056, 1057, 218, 219, 220, 452, 453, 221, 454,
	222, 223, 455, 1058, 224, 225, 226, 227, 228, 229,
	1059, 1060, 230, 456, 457, 458, 1061, 231, 459, 1062,
	1047, 1063, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 1064, 241, 0, 242, 243, 244, 1065, 922,
	245, 246, 1066, 1067, 1069, 1068, 1070, 1071, 1072, 247,
	248, 249, 250, 251, 252, 460, 461, 1073, 253, 1074,
	255, 254, 1075, 256, 1076, 1077, 257, 258, 259, 1078,
	260, 1079, 261, 262, 1080, 462, 263, 264, 266, 269,
	265, 270, 271, 272, 463, 464, 1081, 209, 1082, 0,
	0, 0, 0, 273, 274, 275, 465, 276, 277, 0,
	278, 1083, 279, 1084, 1085, 923, 280, 281, 1086, 282,
	466, 1087, 467, 283, 1088, 284, 285, 286, 287, 288,
	289, 290, 468, 469, 470, 925, 1089, 474, 292, 0,
	0, 0, 210, 291, 293, 300, 1090, 924, 294, 471,
	296, 295, 297, 298, 299, 472, 1091, 473, 1092, 301,
	926, 927, 302, 303, 304, 928, 305, 306, 0, 0,
	307, 308, 309, 310, 1093, 312, 311, 1094, 313, 475,
	929, 314, 315, 930, 1095, 316, 317, 1096, 1097, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	931, 328, 329, 331, 330, 1098, 211, 932, 1099, 476,
	477, 332, 333, 1100, 334, 335, 336, 1101, 1102, 338,
	339, 1103, 1104, 340, 478, 933, 341, 934, 479, 342,
	337, 343, 344, 345, 346, 347, 348, 1105, 349, 480,
	350, 481, 351, 1106, 352, 0, 353, 354, 355, 356,
	357, 358, 482, 359, 360, 1107, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	1108, 374, 935, 375, 376, 377, 378, 483, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 1109, 397,
	398, 391, 393, 394, 395, 392, 396, 399, 400, 1110,
	401, 381, 382, 402, 936, 403, 484, 404, 405, 1111,
	415, 406, 407, 408, 383, 409, 413, 414, 410, 411,
	412, 485, 1112, 417, 418, 416, 1113, 419, 420, 421,
	422, 423, 267, 424, 268, 425, 1114, 486, 487, 488,
	489, 1115, 1116, 426, 427, 490, 428, 491, 1117, 429,
	430, 431, 0, 432, 433, 1118, 1119, 434, 435, 436,
	437, 439, 1120, 440, 1121, 438, 441, 442, 443, 492,
	493, 494, 1122, 445, 444, 495, 1123, 1124, 1125, 1126,
	446, 447, 496, 448, 449, 450, 1042, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2599, 0, 212, 213, 214, 215, 216, 1049, 217,
	1050, 1051, 1052, 1053, 451, 1054, 1055, 1056, 1057, 218,
	219, 220, 452, 453, 221, 454, 222, 223, 455, 1058,
	224, 225, 226, 227, 228, 229, 1059, 1060, 230, 456,
	457, 458, 1061, 231, 459, 1062, 1047, 1063, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 1064, 241,
	0, 242, 243, 244, 1065, 922, 245, 246, 1066, 1067,
	1069, 1068, 1070, 1071, 1072, 247, 248, 249, 250, 251,
	252, 460, 461, 1073, 253, 1074, 255, 254, 1075, 256,
	1076, 1077, 257, 258, 259, 1078, 260, 1079, 261, 262,
	1080, 462, 263, 264, 266, 269, 265, 270, 271, 272,
	463, 464, 1081, 209, 1082, 0, 0, 0, 0, 273,
	274, 275, 465, 276, 277, 0, 278, 1083, 279, 1084,
	1085, 923, 280, 281, 1086, 282, 466, 1087, 467, 283,
	1088, 284, 285, 286, 287, 288, 289, 290, 468, 469,
	470, 925, 1089, 474, 292, 0, 0, 0, 210, 291,
	293, 300, 1090, 924, 294, 471, 296, 295, 297, 298,
	299, 472, 1091, 473, 1092, 301, 926, 927, 302, 303,
	304, 928, 305, 306, 0, 0, 307, 308, 309, 310,
	1093, 312, 311, 1094, 313, 475, 929, 314, 315, 930,
	1095, 316, 317, 1096, 1097, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 931, 328, 329, 331,
	330, 1098, 211, 932, 1099, 476, 477, 332, 333, 1100,
	334, 335, 336, 1101, 1102, 338, 339, 1103, 1104, 340,
	478, 933, 341, 934, 479, 342, 337, 343, 344, 345,
	346, 347, 348, 1105, 349, 480, 350, 481, 351, 1106,
	352, 0, 353, 354, 355, 356, 357, 358, 482, 359,
	360, 1107, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 1108, 374, 935, 375,
	376, 377, 378, 483, 379, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 1109, 397, 398, 391, 393, 394,
	395, 392, 396, 399, 400, 1110, 401, 381, 382, 402,
	936, 403, 484, 404, 405, 1111, 415, 406, 407, 408,
	383, 409, 413, 414, 410, 411, 412, 485, 1112, 417,
	418, 416, 1113, 419, 420, 421, 422, 423, 267, 424,
	268, 425, 1114, 486, 487, 488, 489, 1115, 1116, 426,
	427, 490, 428, 491, 1117, 429, 430, 431, 0, 432,
	433, 1118, 1119, 434, 435, 436, 437, 439, 1120, 440,
	1121, 438, 441, 442, 443, 492, 493, 494, 1122, 445,
	444, 495, 1123, 1124, 1125, 1126, 446, 447, 496, 448,
	449, 450, 1042, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2001, 0, 212,
	213, 214, 215, 216, 1049, 217, 1050, 1051, 1052, 1053,
	451, 1054, 1055, 1056, 1057, 218, 219, 220, 452, 453,
	221, 454, 222, 223, 455, 1058, 224, 225, 226, 227,
	228, 229, 1059, 1060, 230, 456, 457, 458, 1061, 231,
	459, 1062, 1047, 1063, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 1064, 241, 0, 242, 243, 244,
	1065, 922, 245, 246, 1066, 1067, 1069, 1068, 1070, 1071,
	1072, 247, 248, 249, 250, 251, 252, 460, 461, 1073,
	253, 1074, 255, 254, 1075, 256, 1076, 1077, 257, 258,
	259, 1078, 260, 1079, 261, 262, 1080, 462, 263, 264,
	266, 269, 265, 270, 271, 272, 463, 464, 1081, 209,
	1082, 0, 0, 0, 0, 273, 274, 275, 465, 276,
	277, 0, 278, 1083, 279, 1084, 1085, 923, 280, 281,
	1086, 282, 466, 1087, 467, 283, 1088, 284, 285, 286,
	287, 288, 289, 290, 468, 469, 470, 925, 1089, 474,
	292, 0, 0, 0, 210, 291, 293, 300, 1090, 924,
	294, 471, 296, 295, 297, 298, 299, 472, 1091, 473,
	1092, 301, 926, 927, 302, 303, 304, 928, 305, 306,
	0, 0, 307, 308, 309, 310, 1093, 312, 311, 1094,
	313, 475, 929, 314, 315, 930, 1095, 316, 317, 1096,
	1097, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 931, 328, 329, 331, 330, 1098, 211, 932,
	1099, 476, 477, 332, 333, 1100, 334, 335, 336, 1101,
	1102, 338, 339, 1103, 1104, 340, 478, 933, 341, 934,
	479, 342, 337, 343, 344, 345, 346, 347, 348, 1105,
	349, 480, 350, 481, 351, 1106, 352, 0, 353, 354,
	355, 356, 357, 358, 482, 359, 360, 1107, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 1108, 374, 935, 375, 376, 377, 378, 483,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	1109, 397, 398, 391, 393, 394, 395, 392, 396, 399,
	400, 1110, 401, 381, 382, 402, 936, 403, 484, 404,
	405, 1111, 415, 406, 407, 408, 383, 409, 413, 414,
	410, 411, 412, 485, 1112, 417, 418, 416, 1113, 419,
	420, 421, 422, 423, 267, 424, 268, 425, 1114, 486,
	487, 488, 489, 1115, 1116, 426, 427, 490, 428, 491,
	1117, 429, 430, 431, 0, 432, 433, 1118, 1119, 434,
	435, 436, 437, 439, 1120, 440, 1121, 438, 441, 442,
	443, 492, 493, 494, 1122, 445, 444, 495, 1123, 1124,
	1125, 1126, 446, 447, 496, 448, 449, 450, 1150, 0,
	1042, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1741, 0, 0, 0, 212, 213, 214,
	215, 216, 1049, 217, 1050, 1051, 1052, 1053, 451, 1054,
	1055, 1056, 1057, 218, 219, 220, 452, 453, 221, 454,
	222, 223, 455, 1058, 224, 225, 226, 227, 228, 229,
	1059, 1060, 230, 456, 457, 458, 1061, 231, 459, 1062,
	1047, 1063, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 1064, 241, 0, 242, 243, 244, 1065, 922,
	245, 246, 1066, 1067, 1069, 1068, 1070, 1071, 1072, 247,
	248, 249, 250, 251, 252, 460, 461, 1073, 253, 1074,
	255, 254, 1075, 256, 1076, 1077, 257, 258, 259, 1078,
	260, 1079, 261, 262, 1080, 462, 263, 264, 266, 269,
	265, 270, 271, 272, 463, 464, 1081, 209, 1082, 0,
	0, 0, 0, 273, 274, 275, 465, 276, 277, 0,
	278, 1083, 279, 1084, 1085, 923, 280, 281, 1086, 282,
	466, 1087, 467, 283, 1088, 284, 285, 286, 287, 288,
	289, 290, 468, 469, 470, 925, 1089, 474, 292, 0,
	0, 0, 210, 291, 293, 300, 1090, 924, 294, 471,
	296, 295, 297, 298, 299, 472, 1091, 473, 1092, 301,
	926, 927, 302, 303, 304, 928, 305, 306, 0, 0,
	307, 308, 309, 310, 1093, 312, 311, 1094, 313, 475,
	929, 314, 315, 930, 1095, 316, 317, 1096, 1097, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	931, 328, 329, 331, 330, 1098, 211, 932, 1099, 476,
	477, 332, 333, 1100, 334, 335, 336, 1101, 1102, 338,
	339, 1103, 1104, 340, 478, 933, 341, 934, 479, 342,
	337, 343, 344, 345, 346, 347, 348, 1105, 349, 480,
	350, 481, 351, 1106, 352, 0, 353, 354, 355, 356,
	357, 358, 482, 359, 360, 1107, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	1108, 374, 935, 375, 376, 377, 378, 483, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 1109, 397,
	398, 391, 393, 394, 395, 392, 396, 399, 400, 1110,
	401, 381, 382, 402, 936, 403, 484, 404, 405, 1111,
	415, 406, 407, 408, 383, 409, 413, 414, 410, 411,
	412, 485, 1112, 417, 418, 416, 1113, 419, 420, 421,
	422, 423, 267, 424, 268, 425, 1114, 486, 487, 488,
	489, 1115, 1116, 426, 427, 490, 428, 491, 1117, 429,
	430, 431, 0, 432, 433, 1118, 1119, 434, 435, 436,
	437, 439, 1120, 440, 1121, 438, 441, 442, 443, 492,
	493, 494, 1122, 445, 444, 495, 1123, 1124, 1125, 1126,
	446, 447, 496, 448, 449, 450, 1039, 0, 1042, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	1049, 217, 1050, 1051, 1052, 1053, 451, 1054, 1055, 1056,
	1057, 218, 219, 220, 452, 453, 221, 454, 222, 223,
	455, 1058, 224, 225, 226, 227, 228, 229, 1059, 1060,
	230, 456, 457, 458, 1061, 231, 459, 1062, 1047, 1063,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	1064, 241, 0, 242, 243, 244, 1065, 922, 245, 246,
	1066, 1067, 1069, 1068, 1070, 1071, 1072, 247, 248, 249,
	250, 251, 252, 460, 461, 1073, 253, 1074, 255, 254,
	1075, 256, 1076, 1077, 257, 258, 259, 1078, 260, 1079,
	261, 262, 1080, 462, 263, 264, 266, 269, 265, 270,
	271, 272, 463, 464, 1081, 209, 1082, 0, 0, 0,
	0, 273, 274, 275, 465, 276, 277, 0, 278, 1083,
	279, 1084, 1085, 923, 280, 281, 1086, 282, 466, 1087,
	467, 283, 1088, 284, 285, 286, 287, 288, 289, 290,
	468, 469, 470, 925, 1089, 474, 292, 0, 0, 0,
	210, 291, 293, 300, 1090, 924, 294, 471, 296, 295,
	297, 298, 299, 472, 1091, 473, 1092, 301, 926, 927,
	302, 303, 304, 928, 305, 306, 0, 0, 307, 308,
	309, 310, 1093, 312, 311, 1094, 313, 475, 929, 314,
	315, 930, 1095, 316, 317, 1096, 1097, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 931, 328,
	329, 331, 330, 1098, 211, 932, 1099, 476, 477, 332,
	333, 1100, 334, 335, 336, 1101, 1102, 338, 339, 1103,
	1104, 340, 478, 933, 341, 934, 479, 342, 337, 343,
	344, 345, 346, 347, 348, 1105, 349, 480, 350, 481,
	351, 1106, 352, 0, 353, 354, 355, 356, 357, 358,
	482, 359, 360, 1107, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 1108, 374,
	935, 375, 376, 377, 378, 483, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 1109, 397, 398, 391,
	393, 394, 395, 392, 396, 399, 400, 1110, 401, 381,
	382, 402, 936, 403, 484, 404, 405, 1111, 415, 406,
	407, 408, 383, 409, 413, 414, 410, 411, 412, 485,
	1112, 417, 418, 416, 1113, 419, 420, 421, 422, 423,
	267, 424, 268, 425, 1114, 486, 487, 488, 489, 1115,
	1116, 426, 427, 490, 428, 491, 1117, 429, 430, 431,
	0, 432, 433, 1118, 1119, 434, 435, 436, 437, 439,
	1120, 440, 1121, 438, 441, 442, 443, 492, 493, 494,
	1122, 445, 444, 495, 1123, 1124, 1125, 1126, 446, 447,
	496, 448, 449, 450, 1042, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 1049, 217, 1050, 1051,
	1052, 1053, 451, 1054, 1055, 1056, 1057, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 1058, 224, 225,
	226, 227, 228, 229, 1059, 1060, 230, 456, 457, 458,
	1061, 231, 459, 1062, 1047, 1063, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 1064, 241, 0, 242,
	243, 244, 1065, 922, 245, 246, 1066, 1067, 1069, 1068,
	1070, 1071, 1072, 247, 248, 249, 250, 251, 252, 460,
	461, 1073, 253, 1074, 255, 254, 1075, 256, 1076, 1077,
	257, 258, 259, 1078, 260, 1079, 261, 262, 1080, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 463, 464,
	1081, 209, 1082, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 1083, 279, 1084, 1085, 923,
	280, 281, 1086, 282, 466, 1087, 467, 283, 1088, 284,
	285, 286, 287, 288, 289, 290, 468, 469, 470, 925,
	1089, 474, 292, 0, 0, 0, 210, 291, 293, 300,
	1090, 924, 294, 471, 296, 295, 297, 298, 299, 472,
	1091, 473, 1092, 301, 926, 927, 302, 303, 304, 928,
	305, 306, 0, 0, 307, 308, 309, 310, 1093, 312,
	311, 1094, 313, 475, 929, 314, 315, 930, 1095, 316,
	317, 1096, 1097, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 931, 328, 329, 331, 330, 1098,
	211, 932, 1099, 476, 477, 332, 333, 1100, 334, 335,
	336, 1101, 1102, 338, 339, 1103, 1104, 340, 478, 933,
	341, 934, 479, 342, 337, 343, 344, 345, 346, 347,
	348, 1105, 349, 480, 350, 481, 351, 1106, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 1107,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 1108, 374, 935, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 1109, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 1110, 401, 381, 382, 402, 936, 403,
	484, 404, 405, 1111, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 485, 1112, 417, 418, 416,
	1113, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	1114, 486, 487, 488, 489, 1115, 1116, 426, 427, 490,
	428, 491, 1117, 429, 430, 431, 0, 432, 433, 1118,
	1119, 434, 435, 436, 437, 439, 1120, 440, 1121, 438,
	441, 442, 443, 492, 493, 494, 1122, 445, 444, 495,
	1123, 1124, 1125, 1126, 446, 447, 496, 448, 449, 450,
	1977, 0, 864, 821, 822, 823, 819, 820, 833, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 1974, 217, 0, 0, 0, 0,
	913, 838, 0, 0, 0, 218, 219, 220, 452, 879,
	858, 890, 848, 889, 888, 0, 224, 850, 849, 227,
	228, 229, 840, 912, 230, 948, 949, 458, 0, 231,
	919, 0, 902, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 922, 245, 246, 905, 903, 904, 909, 907, 906,
	908, 247, 248, 249, 250, 893, 252, 886, 885, 810,
	253, 0, 255, 254, 0, 256, 1975, 0, 257, 884,
	259, 0, 260, 0, 261, 262, 0, 816, 263, 264,
	266, 269, 265, 270, 271, 272, 939, 940, 829, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 883, 881,
	882, 0, 278, 0, 279, 0, 0, 923, 280, 281,
	0, 282, 946, 0, 839, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 914, 915, 918, 925, 0, 916,
	860, 0, 0, 0, 210, 291, 293, 300, 0, 924,
	294, 872, 863, 874, 876, 877, 878, 873, 0, 865,
	0, 301, 926, 927, 302, 303, 304, 928, 898, 899,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 947, 929, 314, 315, 930, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	852, 325, 931, 328, 329, 331, 330, 807, 211, 932,
	830, 917, 887, 332, 333, 0, 861, 335, 862, 0,
	0, 338, 339, 0, 0, 340, 478, 933, 341, 934,
	941, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 942, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 880, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 935, 375, 376, 377, 378, 817,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	0, 397, 398, 853, 854, 856, 857, 392, 396, 399,
	400, 910, 401, 381, 382, 402, 936, 403, 875, 855,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 921,
	410, 411, 412, 943, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 851, 0, 894,
	895, 896, 897, 0, 0, 426, 427, 944, 428, 945,
	828, 429, 430, 431, 0, 432, 433, 0, 811, 434,
	435, 436, 437, 439, 911, 440, 0, 859, 441, 442,
	443, 492, 891, 938, 1973, 445, 444, 495, 0, 0,
	0, 0, 446, 447, 496, 448, 449, 450, 808, 0,
	0, 0, 0, 0, 0, 0, 806, 0, 0, 0,
	0, 804, 805, 1976, 0, 0, 0, 0, 0, 0,
	834, 1972, 0, 0, 797, 832, 864, 821, 822, 823,
	819, 820, 833, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 913, 838, 0, 0, 0, 218,
	219, 220, 452, 879, 858, 890, 848, 889, 888, 0,
	224, 850, 849, 227, 228, 229, 840, 912, 230, 948,
	949, 458, 0, 231, 919, 0, 902, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 922, 245, 246, 905, 903,
	904, 909, 907, 906, 908, 247, 248, 249, 250, 893,
	252, 886, 885, 810, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 884, 259, 0, 260, 0, 261, 262,
	0, 816, 263, 264, 266, 269, 265, 270, 271, 272,
	939, 940, 829, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 883, 881, 882, 0, 278, 0, 279, 0,
	0, 923, 280, 281, 0, 282, 946, 0, 839, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 914, 915,
	918, 925, 0, 916, 860, 0, 0, 0, 210, 291,
	293, 300, 0, 924, 294, 872, 863, 874, 876, 877,
	878, 873, 0, 865, 0, 301, 926, 927, 302, 303,
	304, 928, 898, 899, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 947, 929, 314, 315, 930,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 852, 325, 931, 328, 329, 331,
	330, 807, 211, 932, 830, 917, 887, 332, 333, 0,
	861, 335, 862, 0, 0, 338, 339, 0, 0, 340,
	478, 933, 341, 934, 941, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 942, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 356, 357, 358, 880, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 935, 375,
	376, 377, 378, 817, 379, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 175, 397, 398, 853, 854, 856,
	857, 392, 396, 399, 400, 910, 401, 381, 382, 402,
	936, 403, 875, 855, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 921, 410, 411, 412, 943, 0, 417,
	418, 416, 177, 419, 420, 421, 422, 423, 267, 424,
	268, 851, 0, 894, 895, 896, 897, 0, 0, 426,
	427, 944, 428, 945, 828, 429, 430, 431, 0, 432,
	433, 0, 811, 434, 435, 436, 437, 439, 911, 440,
	0, 859, 441, 442, 443, 1289, 891, 938, 0, 445,
	444, 495, 0, 0, 0, 169, 446, 447, 496, 448,
	449, 450, 808, 170, 0, 0, 0, 0, 0, 0,
	806, 0, 0, 0, 0, 804, 805, 864, 821, 822,
	823, 819, 820, 833, 1479, 1477, 0, 0, 0, 832,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 913, 838, 0, 0, 0,
	218, 219, 220, 452, 879, 858, 890, 848, 889, 888,
	0, 224, 850, 849, 227, 228, 229, 840, 912, 230,
	948, 949, 458, 0, 231, 919, 0, 902, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 922, 245, 246, 905,
	903, 904, 909, 907, 906, 908, 247, 248, 249, 250,
	893, 252, 886, 885, 810, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 884, 259, 0, 260, 0, 261,
	262, 0, 816, 263, 264, 266, 269, 265, 270, 271,
	272, 939, 940, 829, 209, 0, 0, 0, 0, 0,
	273, 274, 275, 883, 881, 882, 0, 278, 0, 279,
	0, 0, 923, 280, 281, 0, 282, 946, 0, 839,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 914,
	915, 918, 925, 0, 916, 860, 0, 0, 0, 210,
	291, 293, 300, 0, 924, 294, 872, 863, 874, 876,
	877, 878, 873, 0, 865, 0, 301, 926, 927, 302,
	303, 304, 928, 898, 899, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 947, 929, 314, 315,
	930, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 852, 325, 931, 328, 329,
	331, 330, 807, 211, 932, 830, 917, 887, 332, 333,
	0, 861, 335, 862, 0, 0, 338, 339, 0, 0,
	340, 478, 933, 341, 934, 941, 342, 337, 343, 344,
	345, 346, 347, 348, 0, 349, 942, 350, 481, 351,
	0, 352, 0, 353, 354, 355, 356, 357, 358, 880,
	359, 360, 0, 361, 362, 363, 364, 365, 0, 367,
	368, 369, 366, 370, 371, 372, 373, 0, 374, 935,
	375, 376, 377, 378, 817, 379, 0, 380, 384, 385,
	386, 387, 388, 389, 390, 175, 397, 398, 853, 854,
	856, 857, 392, 396, 399, 400, 910, 401, 381, 382,
	402, 936, 403, 875, 855, 405, 0, 415, 406, 407,
	408, 383, 409, 413, 921, 410, 411, 412, 943, 0,
	417, 418, 416, 177, 419, 420, 421, 422, 423, 267,
	424, 268, 851, 0, 894, 895, 896, 897, 0, 0,
	426, 427, 944, 428, 945, 828, 429, 430, 431, 0,
	432, 433, 0, 811, 434, 435, 436, 437, 439, 911,
	440, 0, 859, 441, 442, 443, 1289, 891, 938, 0,
	445, 444, 495, 0, 0, 0, 169, 446, 447, 496,
	448, 449, 450, 808, 170, 0, 0, 0, 0, 0,
	0, 806, 0, 0, 0, 0, 804, 805, 864, 821,
	822, 823, 819, 820, 833, 1479, 2367, 0, 0, 0,
	832, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 913, 838, 0, 0,
	0, 218, 219, 220, 452, 879, 858, 890, 848, 889,
	888, 0, 224, 850, 849, 227, 228, 229, 840, 912,
	230, 948, 949, 458, 0, 231, 919, 0, 902, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 922, 245, 246,
	905, 903, 904, 909, 907, 906, 908, 247, 248, 249,
	250, 893, 252, 886, 885, 810, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 884, 259, 0, 260, 0,
	261, 262, 0, 816, 263, 264, 266, 269, 265, 270,
	271, 272, 939, 940, 829, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 883, 881, 882, 0, 278, 0,
	279, 0, 0, 923, 280, 281, 0, 282, 946, 0,
	839, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	914, 915, 918, 925, 0, 916, 860, 0, 0, 0,
	210, 291, 293, 300, 0, 924, 294, 872, 863, 874,
	876, 877, 878, 873, 0, 865, 0, 301, 926, 927,
	302, 303, 304, 928, 898, 899, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 947, 929, 314,
	315, 930, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 852, 325, 931, 328,
	329, 331, 330, 807, 211, 932, 830, 917, 887, 332,
	333, 0, 861, 335, 862, 0, 0, 338, 339, 0,
	0, 340, 478, 933, 341, 934, 941, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 942, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	880, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	935, 375, 376, 377, 378, 817, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 175, 397, 398, 853,
	854, 856, 857, 392, 396, 399, 400, 910, 401, 381,
	382, 402, 936, 403, 875, 855, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 921, 410, 411, 412, 943,
	0, 417, 418, 416, 177, 419, 420, 421, 422, 423,
	267, 424, 268, 851, 0, 894, 895, 896, 897, 0,
	0, 426, 427, 944, 428, 945, 828, 429, 430, 431,
	0, 432, 433, 0, 811, 434, 435, 436, 437, 439,
	911, 440, 0, 859, 441, 442, 443, 1289, 891, 938,
	0, 445, 444, 495, 0, 0, 0, 169, 446, 447,
	496, 448, 449, 450, 808, 170, 0, 0, 0, 0,
	0, 0, 806, 0, 0, 0, 0, 804, 805, 864,
	821, 822, 823, 819, 820, 833, 1479, 1477, 0, 0,
	0, 832, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 913, 838, 0,
	0, 0, 218, 219, 220, 452, 879, 858, 890, 848,
	889, 888, 2061, 224, 850, 849, 227, 228, 229, 840,
	912, 230, 948, 949, 458, 0, 231, 919, 0, 902,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 922, 245,
	246, 905, 903, 904, 909, 907, 906, 908, 247, 248,
	249, 250, 893, 252, 886, 885, 810, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 884, 259, 0, 260,
	0, 261, 262, 0, 816, 263, 264, 266, 269, 265,
	270, 271, 272, 939, 940, 829, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 883, 881, 882, 0, 278,
	0, 279, 0, 2066, 923, 280, 281, 0, 282, 946,
	0, 839, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 914, 915, 918, 925, 0, 916, 860, 0, 0,
	0, 210, 291, 293, 300, 0, 924, 294, 872, 863,
	874, 876, 877, 878, 873, 0, 865, 0, 301, 926,
	927, 302, 303, 304, 928, 898, 899, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 2062, 313, 947, 929,
	314, 315, 930, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 852, 325, 931,
	328, 329, 331, 330, 807, 211, 932, 830, 917, 887,
	332, 333, 0, 861, 335, 862, 0, 0, 338, 339,
	0, 0, 340, 478, 933, 341, 934, 941, 342, 337,
	343, 344, 345, 346, 347, 348, 0, 349, 942, 350,
	481, 351, 0, 352, 0, 353, 354, 355, 356, 357,
	358, 880, 359, 360, 0, 361, 362, 363, 364, 365,
	0, 367, 368, 369, 366, 370, 371, 372, 373, 0,
	374, 935, 375, 376, 377, 378, 817, 379, 0, 380,
	384, 385, 386, 387, 388, 389, 390, 0, 397, 398,
	853, 854, 856, 857, 392, 396, 399, 400, 910, 401,
	381, 382, 402, 936, 403, 875, 855, 405, 0, 415,
	406, 407, 408, 383, 409, 413, 921, 410, 411, 412,
	943, 0, 417, 418, 416, 0, 419, 420, 421, 422,
	423, 267, 424, 268, 851, 0, 894, 895, 896, 897,
	0, 2063, 426, 427, 944, 428, 945, 828, 429, 430,
	431, 0, 432, 433, 0, 811, 434, 435, 436, 437,
	439, 911, 440, 0, 859, 441, 442, 443, 492, 891,
	938, 0, 445, 444, 495, 0, 0, 0, 0, 446,
	447, 496, 448, 449, 450, 808, 0, 0, 0, 0,
	0, 0, 0, 806, 0, 0, 0, 0, 804, 805,
	0, 0, 0, 0, 0, 0, 0, 834, 0, 0,
	0, 800, 832, 864, 821, 822, 823, 819, 820, 833,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 913, 838, 0, 0, 0, 218, 219, 220, 452,
	879, 858, 890, 848, 889, 888, 0, 224, 850, 849,
	227, 228, 229, 840, 912, 230, 948, 949, 458, 0,
	231, 919, 0, 902, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 922, 245, 246, 905, 903, 904, 909, 907,
	906, 908, 247, 248, 249, 250, 893, 252, 886, 885,
	810, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	884, 259, 0, 260, 0, 261, 262, 0, 816, 263,
	264, 266, 269, 265, 270, 271, 272, 939, 940, 829,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 883,
	881, 882, 0, 278, 0, 279, 0, 0, 923, 280,
	281, 0, 282, 946, 0, 839, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 914, 915, 918, 925, 0,
	916, 860, 0, 0, 0, 210, 291, 293, 300, 0,
	924, 294, 872, 863, 874, 876, 877, 878, 873, 0,
	865, 0, 301, 926, 927, 302, 303, 304, 928, 898,
	899, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 947, 929, 314, 315, 930, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 852, 325, 931, 328, 329, 331, 330, 807, 211,
	932, 830, 917, 887, 332, 333, 0, 861, 335, 862,
	812, 0, 338, 339, 0, 0, 340, 478, 933, 341,
	934, 941, 342, 337, 343, 344, 345, 346, 347, 348,
	0, 349, 942, 350, 481, 351, 0, 352, 0, 353,
	354, 355, 356, 357, 358, 880, 359, 360, 0, 361,
	362, 363, 364, 365, 0, 367, 368, 369, 366, 370,
	371, 372, 373, 0, 374, 935, 375, 376, 377, 378,
	817, 379, 0, 380, 384, 385, 386, 387, 388, 389,
	390, 0, 397, 398, 853, 854, 856, 857, 392, 396,
	399, 400, 910, 401, 381, 382, 402, 936, 403, 875,
	855, 405, 0, 415, 406, 407, 408, 383, 409, 413,
	921, 410, 411, 412, 943, 0, 417, 418, 416, 0,
	419, 420, 421, 422, 423, 267, 424, 268, 851, 0,
	894, 895, 896, 897, 0, 0, 426, 427, 944, 428,
	945, 828, 429, 430, 431, 0, 432, 433, 0, 811,
	434, 435, 436, 437, 439, 911, 440, 0, 859, 441,
	442, 443, 492, 891, 938, 0, 445, 444, 495, 0,
	0, 0, 0, 446, 447, 496, 448, 449, 450, 808,
	0, 0, 0, 0, 0, 0, 0, 806, 0, 0,
	0, 0, 804, 805, 864, 821, 822, 823, 819, 820,
	833, 834, 0, 0, 0, 0, 832, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 913, 838, 0, 0, 0, 218, 219, 220,
	452, 879, 858, 890, 848, 889, 888, 0, 224, 850,
	849, 227, 228, 229, 840, 912, 230, 948, 949, 458,
	0, 231, 919, 0, 902, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	3270, 244, 0, 922, 245, 246, 905, 903, 904, 909,
	907, 906, 908, 247, 248, 249, 250, 893, 252, 886,
	885, 810, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 884, 259, 0, 260, 0, 261, 262, 0, 816,
	263, 264, 266, 269, 265, 270, 271, 272, 939, 940,
	829, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	883, 881, 882, 0, 278, 0, 279, 0, 0, 923,
	280, 281, 0, 282, 946, 0, 839, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 914, 915, 918, 925,
	0, 916, 860, 0, 0, 0, 210, 291, 293, 300,
	0, 924, 294, 872, 863, 874, 876, 877, 878, 873,
	0, 865, 0, 301, 926, 927, 302, 303, 304, 928,
	898, 899, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 947, 929, 314, 315, 930, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 852, 325, 931, 328, 329, 331, 330, 807,
	211, 932, 830, 917, 887, 332, 333, 0, 861, 335,
	862, 812, 0, 338, 339, 0, 0, 340, 478, 933,
	341, 934, 941, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 942, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 880, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 935, 375, 376, 377,
	378, 817, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 853, 854, 856, 857, 392,
	396, 399, 400, 910, 401, 381, 382, 402, 936, 403,
	875, 855, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 921, 410, 411, 412, 943, 0, 417, 418, 416,
	0, 419, 420, 421, 422, 423, 267, 424, 268, 851,
	0, 894, 895, 896, 897, 0, 0, 426, 427, 944,
	428, 945, 828, 429, 430, 431, 0, 432, 433, 0,
	811, 434, 435, 436, 437, 439, 911, 440, 0, 859,
	441, 442, 443, 492, 891, 938, 0, 445, 444, 495,
	0, 0, 0, 0, 446, 447, 496, 448, 449, 450,
	808, 0, 0, 0, 0, 0, 0, 0, 806, 0,
	0, 0, 0, 804, 805, 864, 821, 822, 823, 819,
	820, 833, 834, 0, 0, 0, 0, 832, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 913, 838, 0, 0, 0, 218, 219,
	220, 452, 879, 858, 890, 848, 889, 888, 0, 224,
	850, 849, 227, 228, 229, 840, 912, 230, 948, 949,
	458, 0, 231, 919, 0, 902, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 3144, 244, 0, 922, 245, 246, 905, 903, 904,
	909, 907, 906, 908, 247, 248, 249, 250, 893, 252,
	886, 885, 810, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 884, 259, 0, 260, 0, 261, 262, 0,
	816, 263, 264, 266, 269, 265, 270, 271, 272, 939,
	940, 829, 209, 0, 0, 0, 0, 0, 273, 274,
	275, 883, 881, 882, 0, 278, 0, 279, 0, 0,
	923, 280, 281, 0, 282, 946, 0, 839, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 914, 915, 918,
	925, 0, 916, 860, 0, 0, 0, 210, 291, 293,
	300, 0, 924, 294, 872, 863, 874, 876, 877, 878,
	873, 0, 865, 0, 301, 926, 927, 302, 303, 304,
	928, 898, 899, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 947, 929, 314, 315, 930, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 852, 325, 931, 328, 329, 331, 330,
	807, 211, 932, 830, 917, 887, 332, 333, 0, 861,
	335, 862, 812, 0, 338, 339, 0, 0, 340, 478,
	933, 341, 934, 941, 342, 337, 343, 344, 345, 346,
	347, 348, 0, 349, 942, 350, 481, 351, 0, 352,
	0, 353, 354, 355, 356, 357, 358, 880, 359, 360,
	0, 361, 362, 363, 364, 365, 0, 367, 368, 369,
	366, 370, 371, 372, 373, 0, 374, 935, 375, 376,
	377, 378, 817, 379, 0, 380, 384, 385, 386, 387,
	388, 389, 390, 0, 397, 398, 853, 854, 856, 857,
	392, 396, 399, 400, 910, 401, 381, 382, 402, 936,
	403, 875, 855, 405, 0, 415, 406, 407, 408, 383,
	409, 413, 921, 410, 411, 412, 943, 0, 417, 418,
	416, 0, 419, 420, 421, 422, 423, 267, 424, 268,
	851, 0, 894, 895, 896, 897, 0, 0, 426, 427,
	944, 428, 945, 828, 429, 430, 431, 0, 432, 433,
	0, 811, 434, 435, 436, 437, 439, 911, 440, 0,
	859, 441, 442, 443, 492, 891, 938, 0, 445, 444,
	495, 0, 0, 0, 0, 446, 447, 496, 448, 449,
	450, 808, 0, 0, 0, 0, 0, 0, 0, 806,
	0, 0, 0, 0, 804, 805, 864, 821, 822, 823,
	819, 820, 833, 834, 0, 0, 0, 0, 832, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 913, 838, 0, 0, 0, 218,
	219, 220, 452, 879, 858, 890, 848, 889, 888, 0,
	224, 850, 849, 227, 228, 229, 840, 912, 230, 948,
	949, 458, 0, 231, 919, 0, 902, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 922, 245, 246, 905, 903,
	904, 909, 907, 906, 908, 247, 248, 249, 250, 893,
	252, 886, 885, 810, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 884, 259, 0, 260, 0, 261, 262,
	0, 816, 263, 264, 266, 269, 265, 270, 271, 272,
	939, 940, 829, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 883, 881, 882, 0, 278, 0, 279, 0,
	0, 923, 280, 281, 0, 282, 946, 0, 839, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 914, 915,
	918, 925, 0, 916, 860, 0, 0, 0, 210, 291,
	293, 300, 0, 924, 294, 872, 863, 874, 876, 877,
	878, 873, 0, 865, 0, 301, 926, 927, 302, 303,
	304, 928, 898, 899, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 947, 929, 314, 315, 930,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 852, 325, 931, 328, 329, 331,
	330, 807, 2896, 932, 830, 917, 887, 332, 333, 0,
	861, 335, 862, 0, 0, 338, 339, 0, 0, 340,
	478, 933, 341, 934, 941, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 942, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 356, 357, 358, 880, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 935, 375,
	376, 377, 378, 817, 379, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 0, 397, 398, 853, 854, 856,
	857, 392, 396, 399, 400, 910, 401, 381, 382, 402,
	936, 403, 875, 855, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 921, 410, 411, 412, 943, 0, 417,
	418, 416, 0, 419, 420, 421, 422, 423, 267, 424,
	268, 851, 0, 894, 895, 896, 897, 0, 0, 426,
	427, 944, 428, 945, 828, 429, 430, 431, 0, 432,
	433, 0, 811, 434, 435, 436, 437, 439, 911, 440,
	0, 859, 441, 442, 443, 492, 891, 938, 0, 445,
	444, 495, 0, 0, 0, 0, 446, 447, 496, 448,
	449, 450, 808, 0, 0, 0, 0, 0, 0, 0,
	806, 0, 0, 0, 0, 804, 805, 1539, 0, 0,
	0, 0, 0, 0, 834, 0, 0, 0, 0, 832,
	864, 821, 822, 823, 819, 820, 833, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 913, 838,
	0, 0, 0, 218, 219, 220, 452, 879, 858, 890,
	848, 889, 888, 0, 224, 850, 849, 227, 228, 229,
	840, 912, 230, 948, 949, 458, 0, 231, 919, 0,
	902, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 922,
	245, 246, 905, 903, 904, 909, 907, 906, 908, 247,
	248, 249, 250, 893, 252, 886, 885, 810, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 884, 259, 0,
	260, 0, 261, 262, 0, 816, 263, 264, 266, 269,
	265, 270, 271, 272, 939, 940, 829, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 883, 881, 882, 0,
	278, 0, 279, 0, 0, 923, 280, 281, 0, 282,
	946, 0, 839, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 914, 915, 918, 925, 0, 916, 860, 0,
	0, 0, 210, 291, 293, 300, 0, 924, 294, 872,
	863, 874, 876, 877, 878, 873, 0, 865, 0, 301,
	926, 927, 302, 303, 304, 928, 898, 899, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 947,
	929, 314, 315, 930, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 852, 325,
	931, 328, 329, 331, 330, 807, 211, 932, 830, 917,
	887, 332, 333, 0, 861, 335, 862, 0, 0, 338,
	339, 0, 0, 340, 478, 933, 341, 934, 941, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 942,
	350, 481, 351, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 880, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 935, 375, 376, 377, 378, 817, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 0, 397,
	398, 853, 854, 856, 857, 392, 396, 399, 400, 910,
	401, 381, 382, 402, 936, 403, 875, 855, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 921, 410, 411,
	412, 943, 0, 417, 418, 416, 0, 419, 420, 421,
	422, 423, 267, 424, 268, 851, 0, 894, 895, 896,
	897, 0, 0, 426, 427, 944, 428, 945, 828, 429,
	430, 431, 0, 432, 433, 0, 811, 434, 435, 436,
	437, 439, 911, 440, 0, 859, 441, 442, 443, 492,
	891, 938, 2712, 445, 444, 495, 0, 0, 0, 0,
	446, 447, 496, 448, 449, 450, 808, 0, 0, 0,
	0, 0, 0, 0, 806, 0, 0, 0, 0, 804,
	805, 864, 821, 822, 823, 819, 820, 833, 834, 0,
	0, 0, 0, 832, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 913,
	838, 0, 0, 0, 218, 219, 220, 452, 879, 858,
	890, 848, 889, 888, 0, 224, 850, 849, 227, 228,
	229, 840, 912, 230, 948, 949, 458, 0, 231, 919,
	0, 902, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	922, 245, 246, 905, 903, 904, 909, 907, 906, 908,
	247, 248, 249, 250, 893, 252, 886, 885, 810, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 884, 259,
	0, 260, 0, 261, 262, 0, 816, 263, 264, 266,
	269, 265, 270, 271, 272, 939, 940, 829, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 883, 881, 882,
	0, 278, 0, 279, 0, 0, 923, 280, 281, 0,
	282, 946, 0, 839, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 914, 915, 918, 925, 0, 916, 860,
	0, 0, 0, 1891, 291, 293, 300, 0, 924, 294,
	872, 863, 874, 876, 877, 878, 873, 0, 865, 0,
	301, 926, 927, 302, 303, 304, 928, 898, 899, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	947, 929, 314, 315, 930, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 852,
	325, 931, 328, 329, 331, 330, 807, 211, 932, 830,
	917, 887, 332, 333, 0, 861, 335, 862, 0, 0,
	338, 339, 0, 0, 340, 478, 933, 341, 934, 941,
	342, 337, 343, 344, 345, 346, 347, 348, 0, 349,
	942, 350, 481, 351, 1890, 352, 0, 353, 354, 355,
	356, 357, 358, 880, 359, 360, 0, 361, 362, 363,
	364, 365, 0, 367, 368, 369, 366, 370, 371, 372,
	373, 0, 374, 935, 375, 376, 377, 378, 817, 379,
	0, 380, 384, 385, 386, 387, 388, 389, 390, 0,
	397, 398, 853, 854, 856, 857, 392, 396, 399, 400,
	910, 401, 381, 382, 402, 936, 403, 875, 855, 405,
	0, 415, 406, 407, 408, 383, 409, 413, 921, 410,
	411, 412, 943, 0, 417, 418, 416, 0, 419, 420,
	421, 422, 423, 267, 424, 268, 851, 0, 894, 895,
	896, 897, 0, 0, 426, 427, 944, 428, 945, 828,
	429, 430, 431, 0, 432, 433, 0, 811, 434, 435,
	436, 437, 439, 911, 440, 0, 859, 441, 442, 443,
	492, 891, 938, 0, 445, 444, 495, 0, 0, 0,
	0, 446, 447, 496, 448, 449, 450, 808, 0, 0,
	0, 0, 0, 0, 0, 806, 0, 0, 0, 0,
	804, 805, 864, 821, 822, 823, 819, 820, 833, 834,
	0, 0, 0, 0, 832, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	913, 838, 0, 0, 0, 218, 219, 220, 452, 879,
	858, 890, 848, 889, 888, 0, 224, 850, 849, 227,
	228, 229, 840, 912, 230, 948, 949, 458, 0, 231,
	919, 0, 902, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 922, 245, 246, 905, 903, 904, 909, 907, 906,
	908, 247, 248, 249, 250, 893, 252, 886, 885, 810,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 884,
	259, 0, 260, 0, 261, 262, 0, 816, 263, 264,
	266, 269, 265, 270, 271, 272, 939, 940, 829, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 883, 881,
	882, 0, 278, 0, 279, 0, 0, 923, 280, 281,
	0, 282, 946, 0, 839, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 914, 915, 918, 925, 0, 916,
	860, 0, 0, 0, 210, 291, 293, 300, 0, 924,
	294, 872, 863, 874, 876, 877, 878, 873, 0, 865,
	0, 301, 926, 927, 302, 303, 304, 928, 898, 899,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 947, 929, 314, 315, 930, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	852, 325, 931, 328, 329, 331, 330, 807, 211, 932,
	830, 917, 887, 332, 333, 0, 861, 335, 862, 812,
	0, 338, 339, 0, 0, 340, 478, 933, 341, 934,
	941, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 942, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 880, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 935, 375, 376, 377, 378, 817,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	0, 397, 398, 853, 854, 856, 857, 392, 396, 399,
	400, 910, 401, 381, 382, 402, 936, 403, 875, 855,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 921,
	410, 411, 412, 943, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 851, 0, 894,
	895, 896, 897, 0, 0, 426, 427, 944, 428, 945,
	828, 429, 430, 431, 0, 432, 433, 0, 811, 434,
	435, 436, 437, 439, 911, 440, 0, 859, 441, 442,
	443, 492, 891, 938, 0, 445, 444, 495, 0, 0,
	0, 0, 446, 447, 496, 448, 449, 450, 808, 0,
	0, 0, 0, 0, 0, 0, 806, 0, 0, 0,
	0, 804, 805, 864, 821, 822, 823, 819, 820, 833,
	834, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 913, 838, 0, 0, 0, 218, 219, 220, 452,
	879, 858, 890, 848, 889, 888, 0, 224, 850, 849,
	227, 228, 229, 840, 912, 230, 948, 949, 458, 0,
	231, 919, 0, 902, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 922, 245, 246, 905, 903, 904, 909, 907,
	906, 908, 247, 248, 249, 250, 893, 252, 886, 885,
	810, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	884, 259, 0, 260, 0, 261, 262, 0, 816, 263,
	264, 266, 269, 265, 270, 271, 272, 939, 940, 829,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 883,
	881, 882, 0, 278, 0, 279, 0, 0, 923, 280,
	281, 0, 282, 946, 0, 839, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 914, 915, 918, 925, 0,
	916, 860, 0, 0, 0, 210, 291, 293, 300, 0,
	924, 294, 872, 863, 874, 876, 877, 878, 873, 0,
	865, 0, 301, 926, 927, 302, 303, 304, 928, 898,
	899, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 947, 929, 314, 315, 930, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 852, 325, 931, 328, 329, 331, 330, 807, 211,
	932, 830, 917, 887, 332, 333, 0, 861, 335, 862,
	0, 0, 338, 339, 0, 0, 340, 478, 933, 341,
	934, 941, 342, 337, 343, 344, 345, 346, 347, 348,
	0, 349, 942, 350, 481, 351, 0, 352, 0, 353,
	354, 355, 356, 357, 358, 880, 359, 360, 0, 361,
	362, 363, 364, 365, 0, 367, 368, 369, 366, 370,
	371, 372, 373, 0, 374, 935, 375, 376, 377, 378,
	817, 379, 0, 380, 384, 385, 386, 387, 388, 389,
	390, 0, 397, 398, 853, 854, 856, 857, 392, 396,
	399, 400, 910, 401, 381, 382, 402, 936, 403, 875,
	855, 405, 0, 415, 406, 407, 408, 383, 409, 413,
	921, 410, 411, 412, 943, 0, 417, 418, 416, 0,
	419, 420, 421, 422, 423, 267, 424, 268, 851, 0,
	894, 895, 896, 897, 0, 0, 426, 427, 944, 428,
	945, 828, 429, 430, 431, 0, 432, 433, 0, 811,
	434, 435, 436, 437, 439, 911, 440, 0, 859, 441,
	442, 443, 492, 891, 938, 0, 445, 444, 495, 0,
	0, 0, 0, 446, 447, 496, 448, 449, 450, 808,
	0, 0, 0, 0, 0, 0, 0, 806, 0, 0,
	0, 0, 804, 805, 1539, 0, 0, 0, 0, 0,
	0, 834, 0, 0, 0, 0, 832, 864, 821, 822,
	823, 819, 820, 833, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 913, 838, 0, 0, 0,
	218, 219, 220, 452, 879, 858, 890, 848, 889, 888,
	0, 224, 850, 849, 227, 228, 229, 840, 912, 230,
	948, 949, 458, 0, 231, 919, 0, 902, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 922, 245, 246, 905,
	903, 904, 909, 907, 906, 908, 247, 248, 249, 250,
	893, 252, 886, 885, 810, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 884, 259, 0, 260, 0, 261,
	262, 0, 816, 263, 264, 266, 269, 265, 270, 271,
	272, 939, 940, 829, 209, 0, 0, 0, 0, 0,
	273, 274, 275, 883, 881, 882, 0, 278, 0, 279,
	0, 2066, 923, 280, 281, 0, 282, 946, 0, 839,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 914,
	915, 918, 925, 0, 916, 860, 0, 0, 0, 210,
	291, 293, 300, 0, 924, 294, 872, 863, 874, 876,
	877, 878, 873, 0, 865, 0, 301, 926, 927, 302,
	303, 304, 928, 898, 899, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 947, 929, 314, 315,
	930, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 852, 325, 931, 328, 329,
	331, 330, 807, 211, 932, 830, 917, 887, 332, 333,
	0, 861, 335, 862, 0, 0, 338, 339, 0, 0,
	340, 478, 933, 341, 934, 941, 342, 337, 343, 344,
	345, 346, 347, 348, 0, 349, 942, 350, 481, 351,
	0, 352, 0, 353, 354, 355, 356, 357, 358, 880,
	359, 360, 0, 361, 362, 363, 364, 365, 0, 367,
	368, 369, 366, 370, 371, 372, 373, 0, 374, 935,
	375, 376, 377, 378, 817, 379, 0, 380, 384, 385,
	386, 387, 388, 389, 390, 0, 397, 398, 853, 854,
	856, 857, 392, 396, 399, 400, 910, 401, 381, 382,
	402, 936, 403, 875, 855, 405, 0, 415, 406, 407,
	408, 383, 409, 413, 921, 410, 411, 412, 943, 0,
	417, 418, 416, 0, 419, 420, 421, 422, 423, 267,
	424, 268, 851, 0, 894, 895, 896, 897, 0, 0,
	426, 427, 944, 428, 945, 828, 429, 430, 431, 0,
	432, 433, 0, 811, 434, 435, 436, 437, 439, 911,
	440, 0, 859, 441, 442, 443, 492, 891, 938, 0,
	445, 444, 495, 0, 0, 0, 0, 446, 447, 496,
	448, 449, 450, 808, 0, 0, 0, 0, 0, 0,
	0, 806, 0, 0, 0, 0, 804, 805, 864, 821,
	822, 823, 819, 820, 833, 834, 0, 0, 0, 0,
	832, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 913, 838, 0, 0,
	0, 218, 219, 220, 452, 879, 858, 890, 848, 889,
	888, 0, 224, 850, 849, 227, 228, 229, 840, 912,
	230, 948, 949, 458, 0, 231, 919, 0, 902, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 922, 245, 246,
	905, 903, 904, 909, 907, 906, 908, 247, 248, 249,
	250, 893, 252, 886, 885, 810, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 884, 259, 0, 260, 0,
	261, 262, 0, 816, 263, 264, 266, 269, 265, 270,
	271, 272, 939, 940, 829, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 883, 881, 882, 0, 278, 0,
	279, 0, 0, 923, 280, 281, 0, 282, 946, 0,
	839, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	914, 915, 918, 925, 0, 916, 860, 0, 0, 0,
	210, 291, 293, 300, 0, 924, 294, 872, 863, 874,
	876, 877, 878, 873, 0, 865, 0, 301, 926, 927,
	302, 303, 304, 928, 898, 899, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 947, 929, 314,
	315, 930, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 852, 325, 931, 328,
	329, 331, 330, 807, 211, 932, 830, 917, 887, 332,
	333, 0, 861, 335, 862, 0, 0, 338, 339, 0,
	0, 340, 478, 933, 341, 934, 941, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 942, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	880, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	935, 375, 376, 377, 378, 817, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 0, 397, 398, 853,
	854, 856, 857, 392, 396, 399, 400, 910, 401, 381,
	382, 402, 936, 403, 875, 855, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 921, 410, 411, 412, 943,
	0, 417, 418, 416, 0, 419, 420, 421, 422, 423,
	267, 424, 268, 851, 0, 894, 895, 896, 897, 0,
	0, 426, 427, 944, 428, 945, 828, 429, 430, 431,
	0, 432, 433, 0, 811, 434, 435, 436, 437, 439,
	911, 440, 0, 859, 441, 442, 443, 492, 891, 938,
	0, 445, 444, 495, 0, 0, 0, 0, 446, 447,
	496, 448, 449, 450, 808, 0, 0, 0, 0, 0,
	0, 0, 806, 0, 0, 0, 0, 804, 805, 0,
	0, 0, 0, 0, 0, 0, 834, 1477, 0, 0,
	2071, 832, 864, 821, 822, 823, 819, 820, 833, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	913, 838, 0, 0, 0, 218, 219, 220, 452, 879,
	858, 890, 848, 889, 888, 0, 224, 850, 849, 227,
	228, 229, 840, 912, 230, 948, 949, 458, 0, 231,
	919, 0, 902, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 922, 245, 246, 905, 903, 904, 909, 907, 906,
	908, 247, 248, 249, 250, 893, 252, 886, 885, 810,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 884,
	259, 0, 260, 0, 261, 262, 0, 816, 263, 264,
	266, 269, 265, 270, 271, 272, 939, 940, 829, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 883, 881,
	882, 0, 278, 0, 279, 0, 0, 923, 280, 281,
	0, 282, 946, 0, 839, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 914, 915, 918, 925, 0, 916,
	860, 0, 0, 0, 210, 291, 293, 300, 0, 924,
	294, 872, 863, 874, 876, 877, 878, 873, 0, 865,
	0, 301, 926, 927, 302, 303, 304, 928, 898, 899,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 947, 929, 314, 315, 930, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	852, 325, 931, 328, 329, 331, 330, 807, 211, 932,
	830, 917, 887, 332, 333, 0, 861, 335, 862, 0,
	0, 338, 339, 0, 0, 340, 478, 933, 341, 934,
	941, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 942, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 880, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 935, 375, 376, 377, 378, 817,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	0, 397, 398, 853, 854, 856, 857, 392, 396, 399,
	400, 910, 401, 381, 382, 402, 936, 403, 875, 855,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 921,
	410, 411, 412, 943, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 851, 0, 894,
	895, 896, 897, 0, 0, 426, 427, 944, 428, 945,
	828, 429, 430, 431, 0, 432, 433, 0, 811, 434,
	435, 436, 437, 439, 911, 440, 0, 859, 441, 442,
	443, 492, 891, 938, 0, 445, 444, 495, 0, 0,
	0, 0, 446, 447, 496, 448, 449, 450, 808, 0,
	0, 0, 0, 0, 0, 0, 806, 0, 0, 0,
	0, 804, 805, 0, 0, 0, 0, 0, 0, 0,
	834, 0, 0, 0, 2069, 832, 864, 821, 822, 823,
	819, 820, 833, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 913, 838, 0, 0, 0, 218,
	219, 220, 452, 879, 858, 890, 848, 889, 888, 0,
	224, 850, 849, 227, 228, 229, 840, 912, 230, 948,
	949, 458, 0, 231, 919, 0, 902, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 922, 245, 246, 905, 903,
	904, 909, 907, 906, 908, 247, 248, 249, 250, 893,
	252, 886, 885, 810, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 884, 259, 0, 260, 0, 261, 262,
	0, 816, 263, 264, 266, 269, 265, 270, 271, 272,
	939, 940, 829, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 883, 881, 882, 0, 278, 0, 279, 0,
	0, 923, 280, 281, 0, 282, 946, 0, 839, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 914, 915,
	918, 925, 0, 916, 860, 0, 0, 0, 210, 291,
	293, 300, 0, 924, 294, 872, 863, 874, 876, 877,
	878, 873, 0, 865, 0, 301, 926, 927, 302, 303,
	304, 928, 898, 899, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 947, 929, 314, 315, 930,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 852, 325, 931, 328, 329, 331,
	330, 807, 211, 932, 830, 917, 887, 332, 333, 0,
	861, 335, 862, 0, 0, 338, 339, 0, 0, 340,
	478, 933, 341, 934, 941, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 942, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 356, 357, 358, 880, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 935, 375,
	376, 377, 378, 817, 379, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 0, 397, 398, 853, 854, 856,
	857, 392, 396, 399, 400, 910, 401, 381, 382, 402,
	936, 403, 875, 855, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 921, 410, 411, 412, 943, 0, 417,
	418, 416, 0, 419, 420, 421, 422, 423, 267, 424,
	268, 851, 0, 894, 895, 896, 897, 0, 0, 426,
	427, 944, 428, 945, 828, 429, 430, 431, 0, 432,
	433, 0, 811, 434, 435, 436, 437, 439, 911, 440,
	0, 859, 441, 442, 443, 492, 891, 938, 0, 445,
	444, 495, 0, 0, 0, 0, 446, 447, 496, 448,
	449, 450, 808, 0, 0, 0, 0, 0, 0, 0,
	806, 0, 0, 0, 0, 804, 805, 0, 0, 0,
	0, 0, 0, 0, 834, 0, 0, 0, 2057, 832,
	864, 821, 822, 823, 819, 820, 833, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 913, 838,
	0, 0, 0, 218, 219, 220, 452, 879, 858, 890,
	848, 889, 888, 0, 224, 850, 849, 227, 228, 229,
	840, 912, 230, 948, 949, 458, 0, 231, 919, 0,
	902, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 922,
	245, 246, 905, 903, 904, 909, 907, 906, 908, 247,
	248, 249, 250, 893, 252, 886, 885, 810, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 884, 259, 0,
	260, 0, 261, 262, 0, 816, 263, 264, 266, 269,
	265, 270, 271, 272, 939, 940, 829, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 883, 881, 882, 0,
	278, 0, 279, 0, 0, 923, 280, 281, 0, 282,
	946, 0, 839, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 914, 915, 918, 925, 0, 916, 860, 0,
	0, 0, 210, 291, 293, 300, 0, 924, 294, 872,
	863, 874, 876, 877, 878, 873, 0, 865, 0, 301,
	926, 927, 302, 303, 304, 928, 898, 899, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 947,
	929, 314, 315, 930, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 852, 325,
	931, 328, 329, 331, 330, 807, 211, 932, 830, 917,
	887, 332, 333, 0, 861, 335, 862, 0, 0, 338,
	339, 0, 0, 340, 478, 933, 341, 934, 941, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 942,
	350, 481, 351, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 880, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 935, 375, 376, 377, 378, 817, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 0, 397,
	398, 853, 854, 856, 857, 392, 396, 399, 400, 910,
	401, 381, 382, 402, 936, 403, 875, 855, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 921, 410, 411,
	412, 943, 0, 417, 418, 416, 0, 419, 420, 421,
	422, 423, 267, 424, 268, 851, 0, 894, 895, 896,
	897, 0, 0, 426, 427, 944, 428, 945, 828, 429,
	430, 431, 0, 432, 433, 0, 811, 434, 435, 436,
	437, 439, 911, 440, 0, 859, 441, 442, 443, 492,
	891, 938, 0, 445, 444, 495, 0, 0, 0, 0,
	446, 447, 496, 448, 449, 450, 808, 0, 0, 0,
	0, 0, 0, 0, 806, 0, 0, 0, 0, 804,
	805, 0, 0, 0, 0, 0, 0, 0, 834, 0,
	0, 0, 2046, 832, 864, 821, 822, 823, 819, 820,
	833, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 913, 838, 0, 0, 0, 218, 219, 220,
	452, 879, 858, 890, 848, 889, 888, 0, 224, 850,
	849, 227, 228, 229, 840, 912, 230, 948, 949, 458,
	0, 231, 919, 0, 902, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 922, 245, 246, 905, 903, 904, 909,
	907, 906, 908, 247, 248, 249, 250, 893, 252, 886,
	885, 810, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 884, 259, 0, 260, 0, 261, 262, 0, 816,
	263, 264, 266, 269, 265, 270, 271, 272, 939, 940,
	829, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	883, 881, 882, 0, 278, 0, 279, 0, 0, 923,
	280, 281, 0, 282, 946, 0, 839, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 914, 915, 918, 925,
	0, 916, 860, 0, 0, 0, 210, 291, 293, 300,
	0, 924, 294, 872, 863, 874, 876, 877, 878, 873,
	0, 865, 0, 301, 926, 927, 302, 303, 304, 928,
	898, 899, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 947, 929, 314, 315, 930, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 852, 325, 931, 328, 329, 331, 330, 807,
	211, 932, 830, 917, 887, 332, 333, 0, 861, 335,
	862, 0, 0, 338, 339, 0, 0, 340, 478, 933,
	341, 934, 941, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 942, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 880, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 935, 375, 376, 377,
	378, 817, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 853, 854, 856, 857, 392,
	396, 399, 400, 910, 401, 381, 382, 402, 936, 403,
	875, 855, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 921, 410, 411, 412, 943, 0, 417, 418, 416,
	0, 419, 420, 421, 422, 423, 267, 424, 268, 851,
	0, 894, 895, 896, 897, 0, 0, 426, 427, 944,
	428, 945, 828, 429, 430, 431, 0, 432, 433, 0,
	811, 434, 435, 436, 437, 439, 911, 440, 0, 859,
	441, 442, 443, 492, 891, 938, 0, 445, 444, 495,
	0, 0, 0, 0, 446, 447, 496, 448, 449, 450,
	808, 0, 0, 0, 0, 0, 0, 0, 806, 0,
	0, 0, 0, 804, 805, 0, 0, 0, 0, 0,
	0, 0, 834, 0, 0, 0, 2044, 832, 2036, 821,
	822, 823, 819, 820, 833, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 913, 838, 0, 0,
	0, 218, 219, 220, 452, 879, 858, 890, 848, 889,
	888, 0, 224, 850, 849, 227, 228, 229, 840, 912,
	230, 948, 949, 458, 0, 231, 919, 0, 902, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 922, 245, 246,
	905, 903, 904, 909, 907, 906, 908, 247, 248, 249,
	250, 893, 2039, 886, 885, 810, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 884, 259, 0, 260, 0,
	261, 262, 0, 816, 263, 264, 266, 269, 265, 270,
	271, 272, 939, 940, 829, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 883, 881, 882, 0, 278, 0,
	279, 0, 0, 923, 280, 281, 0, 282, 946, 0,
	839, 283, 0, 284, 285, 2040, 287, 288, 289, 290,
	914, 915, 918, 925, 0, 916, 860, 0, 0, 0,
	210, 291, 293, 300, 0, 924, 294, 872, 863, 874,
	876, 877, 878, 873, 0, 865, 0, 301, 926, 927,
	302, 303, 304, 928, 898, 899, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 947, 929, 314,
	315, 930, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 2041, 2038, 326, 852, 325, 931, 328,
	329, 331, 330, 807, 211, 932, 830, 917, 887, 332,
	333, 0, 861, 335, 862, 0, 0, 338, 339, 0,
	0, 340, 478, 933, 341, 934, 941, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 942, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	880, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	935, 375, 376, 377, 378, 817, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 2042, 0, 397, 398, 853,
	854, 856, 857, 392, 396, 399, 400, 910, 401, 381,
	382, 402, 936, 403, 875, 855, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 921, 410, 411, 412, 943,
	0, 417, 418, 416, 0, 419, 420, 421, 422, 423,
	267, 424, 268, 851, 0, 894, 895, 896, 897, 0,
	0, 426, 427, 944, 428, 945, 828, 429, 430, 431,
	0, 432, 433, 0, 811, 434, 435, 436, 437, 439,
	911, 440, 0, 859, 441, 442, 443, 492, 891, 938,
	0, 445, 444, 495, 0, 0, 0, 0, 446, 447,
	496, 448, 2037, 450, 808, 0, 0, 0, 0, 0,
	0, 0, 806, 0, 0, 0, 0, 804, 805, 0,
	0, 0, 0, 0, 0, 0, 834, 0, 0, 0,
	2033, 832, 2036, 821, 822, 823, 819, 820, 833, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	913, 838, 0, 0, 0, 218, 219, 220, 452, 879,
	858, 890, 848, 889, 888, 0, 224, 850, 849, 227,
	228, 229, 840, 912, 230, 948, 949, 458, 0, 231,
	919, 0, 902, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 922, 245, 246, 905, 903, 904, 909, 907, 906,
	908, 247, 248, 249, 250, 893, 2039, 886, 885, 810,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 884,
	259, 0, 260, 0, 261, 262, 0, 816, 263, 264,
	266, 269, 265, 270, 271, 272, 939, 940, 829, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 883, 881,
	882, 0, 278, 0, 279, 0, 0, 923, 280, 281,
	0, 282, 946, 0, 839, 283, 0, 284, 285, 2040,
	287, 288, 289, 290, 914, 915, 918, 925, 0, 916,
	860, 0, 0, 0, 210, 291, 293, 300, 0, 924,
	294, 872, 863, 874, 876, 877, 878, 873, 0, 865,
	0, 301, 926, 927, 302, 303, 304, 928, 898, 899,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 947, 929, 314, 315, 930, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 2041, 2038, 326,
	852, 325, 931, 328, 329, 331, 330, 807, 211, 932,
	830, 917, 887, 332, 333, 0, 861, 335, 862, 0,
	0, 338, 339, 0, 0, 340, 478, 933, 341, 934,
	941, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 942, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 880, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 935, 375, 376, 377, 378, 817,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 2042,
	0, 397, 398, 853, 854, 856, 857, 392, 396, 399,
	400, 910, 401, 381, 382, 402, 936, 403, 875, 855,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 921,
	410, 411, 412, 943, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 851, 0, 894,
	895, 896, 897, 0, 0, 426, 427, 944, 428, 945,
	828, 429, 430, 431, 0, 432, 433, 0, 811, 434,
	435, 436, 437, 439, 911, 440, 0, 859, 441, 442,
	443, 492, 891, 938, 0, 445, 444, 495, 0, 0,
	0, 0, 446, 447, 496, 448, 2037, 450, 808, 0,
	0, 0, 0, 0, 0, 0, 806, 0, 0, 0,
	0, 804, 805, 864, 821, 822, 823, 819, 820, 833,
	834, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 913, 838, 0, 0, 0, 218, 219, 220, 452,
	879, 858, 890, 848, 889, 888, 0, 224, 850, 849,
	227, 228, 229, 840, 912, 230, 948, 949, 458, 0,
	231, 919, 0, 902, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 922, 245, 246, 905, 903, 904, 909, 907,
	906, 908, 247, 248, 249, 250, 893, 252, 886, 885,
	810, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	884, 259, 0, 260, 0, 261, 262, 0, 816, 263,
	264, 266, 269, 265, 270, 271, 272, 939, 940, 829,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 883,
	881, 882, 0, 278, 0, 279, 0, 0, 923, 280,
	281, 0, 282, 946, 0, 839, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 914, 915, 918, 925, 0,
	916, 860, 0, 0, 0, 210, 291, 293, 300, 0,
	924, 294, 872, 863, 874, 876, 877, 878, 873, 0,
	865, 0, 301, 926, 927, 302, 303, 304, 928, 898,
	899, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 947, 929, 314, 315, 930, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 852, 325, 931, 328, 329, 331, 330, 807, 211,
	932, 830, 917, 887, 332, 333, 0, 861, 335, 862,
	0, 0, 338, 339, 0, 0, 340, 478, 933, 341,
	934, 941, 342, 337, 343, 344, 345, 346, 347, 348,
	0, 349, 942, 350, 481, 351, 0, 352, 0, 353,
	354, 355, 356, 357, 358, 880, 359, 360, 0, 361,
	362, 363, 364, 365, 0, 367, 368, 369, 366, 370,
	371, 372, 373, 0, 374, 935, 375, 376, 377, 378,
	817, 379, 0, 380, 384, 385, 386, 387, 388, 389,
	390, 0, 397, 398, 853, 854, 856, 857, 392, 396,
	399, 400, 910, 401, 381, 382, 402, 936, 403, 875,
	855, 405, 0, 415, 406, 407, 408, 383, 409, 413,
	921, 410, 411, 412, 943, 0, 417, 418, 416, 0,
	419, 420, 421, 422, 423, 267, 424, 268, 851, 0,
	894, 895, 896, 897, 0, 0, 426, 427, 944, 428,
	945, 828, 429, 430, 431, 0, 432, 433, 0, 811,
	434, 435, 436, 437, 439, 911, 440, 0, 859, 441,
	442, 443, 492, 891, 938, 0, 445, 444, 495, 0,
	0, 0, 0, 446, 447, 496, 448, 449, 450, 808,
	0, 0, 0, 0, 0, 0, 0, 806, 0, 0,
	0, 0, 804, 805, 0, 0, 0, 0, 0, 1485,
	0, 834, 0, 0, 0, 0, 832, 864, 821, 822,
	823, 819, 820, 833, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 1878,
	217, 0, 0, 0, 0, 913, 838, 0, 0, 0,
	218, 219, 220, 452, 879, 858, 890, 848, 889, 888,
	0, 224, 850, 849, 227, 228, 229, 840, 912, 230,
	948, 949, 458, 0, 231, 919, 0, 902, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 922, 245, 246, 905,
	903, 904, 909, 907, 906, 908, 247, 248, 249, 250,
	893, 252, 886, 885, 810, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 884, 259, 0, 260, 0, 261,
	262, 0, 816, 263, 264, 266, 269, 265, 270, 271,
	272, 939, 940, 829, 209, 0, 0, 0, 0, 0,
	273, 274, 275, 883, 881, 882, 0, 278, 0, 279,
	0, 0, 923, 280, 281, 0, 282, 946, 0, 839,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 914,
	915, 918, 925, 0, 916, 860, 0, 0, 0, 210,
	291, 293, 300, 0, 924, 294, 872, 863, 874, 876,
	877, 878, 873, 0, 865, 0, 301, 926, 927, 302,
	303, 304, 928, 898, 899, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 947, 929, 314, 315,
	930, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 852, 325, 931, 328, 329,
	331, 330, 807, 211, 932, 830, 917, 887, 332, 333,
	0, 861, 335, 862, 0, 0, 338, 339, 0, 0,
	340, 478, 933, 341, 934, 941, 342, 337, 343, 344,
	345, 346, 347, 348, 0, 349, 942, 350, 481, 351,
	0, 352, 0, 353, 354, 355, 356, 357, 358, 880,
	359, 360, 0, 361, 362, 363, 364, 365, 0, 367,
	368, 369, 366, 370, 371, 372, 373, 0, 374, 935,
	375, 376, 377, 378, 817, 379, 0, 380, 384, 385,
	386, 387, 388, 389, 390, 0, 397, 398, 853, 854,
	856, 857, 392, 396, 399, 400, 910, 401, 381, 382,
	402, 936, 403, 875, 855, 405, 0, 415, 406, 407,
	408, 383, 409, 413, 921, 410, 411, 412, 943, 0,
	417, 418, 416, 0, 419, 420, 421, 422, 423, 267,
	424, 268, 851, 0, 894, 895, 896, 897, 0, 0,
	426, 427, 944, 428, 945, 828, 429, 430, 431, 0,
	432, 433, 0, 811, 434, 435, 436, 437, 439, 911,
	440, 0, 859, 441, 442, 443, 492, 891, 938, 0,
	445, 444, 495, 0, 0, 0, 0, 446, 447, 496,
	448, 449, 450, 808, 0, 0, 0, 0, 0, 0,
	0, 806, 0, 0, 0, 0, 804, 805, 0, 0,
	0, 0, 0, 0, 0, 834, 0, 0, 0, 1179,
	832, 864, 821, 822, 823, 819, 820, 833, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 913,
	838, 0, 0, 0, 218, 219, 220, 452, 879, 858,
	890, 848, 889, 888, 0, 224, 850, 849, 227, 228,
	229, 840, 912, 230, 948, 949, 458, 0, 231, 919,
	0, 902, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	922, 245, 246, 905, 903, 904, 909, 907, 906, 908,
	247, 248, 249, 250, 893, 252, 886, 885, 810, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 884, 259,
	0, 260, 0, 261, 262, 0, 816, 263, 264, 266,
	269, 265, 270, 271, 272, 939, 940, 829, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 883, 881, 882,
	0, 278, 0, 279, 0, 0, 923, 280, 281, 0,
	282, 946, 0, 839, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 1178, 915, 918, 925, 0, 916, 860,
	0, 0, 0, 210, 291, 293, 300, 0, 924, 294,
	872, 863, 874, 876, 877, 878, 873, 0, 865, 0,
	301, 926, 927, 302, 303, 304, 928, 898, 899, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	947, 929, 314, 315, 930, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 852,
	325, 931, 328, 329, 331, 330, 807, 211, 932, 830,
	917, 887, 332, 333, 0, 861, 335, 862, 0, 0,
	338, 339, 0, 0, 340, 478, 933, 341, 934, 941,
	342, 337, 343, 344, 345, 346, 347, 348, 0, 349,
	942, 350, 481, 351, 0, 352, 0, 353, 354, 355,
	356, 357, 358, 880, 359, 360, 0, 361, 362, 363,
	364, 365, 0, 367, 368, 369, 366, 370, 371, 372,
	373, 0, 374, 935, 375, 376, 377, 378, 817, 379,
	0, 380, 384, 385, 386, 387, 388, 389, 390, 0,
	397, 398, 853, 854, 856, 857, 392, 396, 399, 400,
	910, 401, 381, 382, 402, 936, 403, 875, 855, 405,
	0, 415, 406, 407, 408, 383, 409, 413, 921, 410,
	411, 412, 943, 0, 417, 418, 416, 0, 419, 420,
	421, 422, 423, 267, 424, 268, 851, 0, 894, 895,
	896, 897, 0, 0, 426, 427, 944, 428, 945, 828,
	429, 430, 431, 0, 432, 433, 0, 811, 434, 435,
	436, 437, 439, 911, 440, 0, 859, 441, 442, 443,
	492, 891, 938, 0, 445, 444, 495, 0, 0, 0,
	0, 446, 447, 496, 448, 449, 450, 808, 0, 0,
	0, 0, 0, 0, 0, 806, 0, 0, 0, 0,
	804, 805, 0, 0, 0, 0, 0, 0, 0, 834,
	0, 0, 0, 1173, 832, 864, 821, 822, 823, 819,
	820, 833, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 913, 838, 0, 0, 0, 218, 219,
	220, 452, 879, 858, 890, 848, 889, 888, 0, 224,
	850, 849, 227, 228, 229, 840, 912, 230, 948, 949,
	458, 0, 231, 919, 0, 902, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 922, 245, 246, 905, 903, 904,
	909, 907, 906, 908, 247, 248, 249, 250, 893, 252,
	886, 885, 810, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 884, 259, 0, 260, 0, 261, 262, 0,
	816, 263, 264, 266, 269, 265, 270, 271, 272, 939,
	940, 829, 209, 0, 0, 0, 0, 0, 273, 274,
	275, 883, 881, 882, 0, 278, 0, 279, 0, 0,
	923, 280, 281, 0, 282, 946, 0, 839, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 1172, 915, 918,
	925, 0, 916, 860, 0, 0, 0, 210, 291, 293,
	300, 0, 924, 294, 872, 863, 874, 876, 877, 878,
	873, 0, 865, 0, 301, 926, 927, 302, 303, 304,
	928, 898, 899, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 947, 929, 314, 315, 930, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 852, 325, 931, 328, 329, 331, 330,
	807, 211, 932, 830, 917, 887, 332, 333, 0, 861,
	335, 862, 0, 0, 338, 339, 0, 0, 340, 478,
	933, 341, 934, 941, 342, 337, 343, 344, 345, 346,
	347, 348, 0, 349, 942, 350, 481, 351, 0, 352,
	0, 353, 354, 355, 356, 357, 358, 880, 359, 360,
	0, 361, 362, 363, 364, 365, 0, 367, 368, 369,
	366, 370, 371, 372, 373, 0, 374, 935, 375, 376,
	377, 378, 817, 379, 0, 380, 384, 385, 386, 387,
	388, 389, 390, 0, 397, 398, 853, 854, 856, 857,
	392, 396, 399, 400, 910, 401, 381, 382, 402, 936,
	403, 875, 855, 405, 0, 415, 406, 407, 408, 383,
	409, 413, 921, 410, 411, 412, 943, 0, 417, 418,
	416, 0, 419, 420, 421, 422, 423, 267, 424, 268,
	851, 0, 894, 895, 896, 897, 0, 0, 426, 427,
	944, 428, 945, 828, 429, 430, 431, 0, 432, 433,
	0, 811, 434, 435, 436, 437, 439, 911, 440, 0,
	859, 441, 442, 443, 492, 891, 938, 0, 445, 444,
	495, 0, 0, 0, 0, 446, 447, 496, 448, 449,
	450, 808, 0, 0, 0, 0, 0, 0, 0, 806,
	0, 0, 0, 0, 804, 805, 0, 0, 0, 0,
	0, 0, 0, 834, 0, 0, 0, 1168, 832, 864,
	821, 822, 823, 819, 820, 833, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 913, 838, 0,
	0, 0, 218, 219, 220, 452, 879, 858, 890, 848,
	889, 888, 0, 224, 850, 849, 227, 228, 229, 840,
	912, 230, 948, 949, 458, 0, 231, 919, 0, 902,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 922, 245,
	246, 905, 903, 904, 909, 907, 906, 908, 247, 248,
	249, 250, 893, 252, 886, 885, 810, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 884, 259, 0, 260,
	0, 261, 262, 0, 816, 263, 264, 266, 269, 265,
	270, 271, 272, 939, 940, 829, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 883, 881, 882, 0, 278,
	0, 279, 0, 0, 923, 280, 281, 0, 282, 946,
	0, 839, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 914, 915, 918, 925, 0, 916, 860, 0, 0,
	0, 210, 291, 293, 300, 0, 924, 294, 872, 863,
	874, 876, 877, 878, 873, 0, 865, 0, 301, 926,
	927, 302, 303, 304, 928, 898, 899, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 947, 929,
	314, 315, 930, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 852, 325, 931,
	328, 329, 331, 330, 807, 211, 932, 830, 917, 887,
	332, 333, 0, 861, 335, 862, 0, 0, 338, 339,
	0, 0, 340, 478, 933, 341, 934, 941, 342, 337,
	343, 344, 345, 346, 347, 348, 0, 349, 942, 350,
	481, 351, 0, 352, 0, 353, 354, 355, 356, 357,
	358, 880, 359, 360, 0, 361, 362, 363, 364, 365,
	0, 367, 368, 369, 366, 370, 371, 372, 373, 0,
	374, 935, 375, 376, 377, 378, 817, 379, 0, 380,
	384, 385, 386, 387, 388, 389, 390, 0, 397, 398,
	853, 854, 856, 857, 392, 396, 399, 400, 910, 401,
	381, 382, 402, 936, 403, 875, 855, 405, 0, 415,
	406, 407, 408, 383, 409, 413, 921, 410, 411, 412,
	943, 0, 417, 418, 416, 0, 419, 420, 421, 422,
	423, 267, 424, 268, 851, 0, 894, 895, 896, 897,
	0, 0, 426, 427, 944, 428, 945, 828, 429, 430,
	431, 0, 432, 433, 0, 811, 434, 435, 436, 437,
	439, 911, 440, 0, 859, 441, 442, 443, 492, 891,
	938, 0, 445, 444, 495, 0, 0, 0, 0, 446,
	447, 496, 448, 449, 450, 808, 0, 0, 0, 0,
	0, 0, 0, 806, 0, 0, 0, 0, 804, 805,
	864, 821, 822, 823, 819, 820, 833, 834, 0, 0,
	0, 0, 832, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 913, 838,
	0, 0, 0, 218, 219, 220, 452, 879, 858, 890,
	848, 889, 888, 0, 224, 850, 849, 227, 228, 229,
	840, 912, 230, 948, 949, 458, 0, 231, 919, 0,
	902, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 922,
	245, 246, 905, 903, 904, 909, 907, 906, 908, 247,
	248, 249, 250, 893, 252, 886, 885, 810, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 884, 259, 0,
	260, 0, 261, 262, 0, 816, 263, 264, 266, 269,
	265, 270, 271, 272, 939, 940, 829, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 883, 881, 882, 0,
	278, 0, 279, 0, 0, 923, 280, 281, 0, 282,
	946, 0, 839, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 914, 915, 918, 925, 0, 916, 860, 0,
	0, 0, 210, 291, 293, 300, 0, 924, 294, 872,
	863, 874, 876, 877, 878, 873, 0, 865, 0, 301,
	926, 927, 302, 303, 304, 928, 898, 899, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 947,
	929, 314, 315, 930, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 852, 325,
	931, 328, 329, 331, 330, 807, 211, 932, 830, 917,
	887, 332, 333, 0, 861, 335, 862, 0, 0, 338,
	339, 0, 0, 340, 478, 933, 341, 934, 941, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 942,
	350, 481, 351, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 880, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 935, 375, 376, 377, 378, 817, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 0, 397,
	398, 853, 854, 856, 857, 392, 396, 399, 400, 910,
	401, 381, 382, 402, 936, 403, 875, 855, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 921, 410, 411,
	412, 943, 0, 417, 418, 416, 0, 419, 420, 421,
	422, 423, 267, 424, 268, 851, 0, 894, 895, 896,
	897, 0, 0, 426, 427, 944, 428, 945, 828, 429,
	430, 431, 0, 432, 433, 0, 811, 434, 435, 436,
	437, 439, 911, 440, 0, 859, 441, 442, 443, 492,
	891, 938, 0, 445, 444, 495, 0, 0, 0, 0,
	446, 447, 496, 448, 449, 450, 808, 0, 0, 0,
	0, 0, 0, 0, 806, 0, 0, 0, 0, 804,
	805, 864, 821, 822, 823, 819, 820, 833, 834, 0,
	0, 0, 0, 832, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 913,
	838, 0, 0, 0, 218, 219, 220, 452, 879, 858,
	890, 848, 889, 888, 0, 224, 850, 849, 227, 228,
	229, 840, 912, 230, 948, 949, 458, 0, 231, 919,
	0, 902, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	922, 245, 3295, 905, 903, 904, 909, 907, 906, 908,
	247, 248, 249, 250, 893, 252, 886, 885, 810, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 884, 259,
	0, 260, 0, 261, 262, 0, 816, 263, 264, 266,
	269, 265, 270, 271, 272, 939, 940, 829, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 883, 881, 882,
	0, 278, 0, 279, 0, 0, 923, 280, 281, 0,
	282, 946, 0, 839, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 914, 915, 918, 925, 0, 916, 860,
	0, 0, 0, 210, 291, 293, 300, 0, 924, 294,
	872, 863, 874, 876, 877, 878, 873, 0, 865, 0,
	301, 926, 927, 302, 303, 304, 928, 898, 899, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	947, 929, 314, 315, 930, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 852,
	325, 931, 328, 329, 331, 330, 807, 211, 932, 830,
	917, 887, 332, 333, 0, 861, 335, 862, 0, 0,
	338, 339, 0, 0, 340, 478, 933, 341, 934, 941,
	342, 337, 343, 344, 345, 346, 347, 348, 0, 349,
	942, 350, 481, 351, 0, 352, 0, 353, 354, 355,
	356, 357, 358, 880, 359, 360, 0, 361, 362, 363,
	364, 365, 0, 367, 368, 369, 366, 370, 371, 372,
	373, 0, 374, 935, 375, 376, 377, 378, 817, 379,
	0, 380, 384, 385, 386, 387, 388, 389, 390, 0,
	397, 398, 853, 854, 856, 857, 392, 396, 399, 400,
	910, 401, 381, 382, 402, 936, 403, 875, 855, 405,
	0, 415, 406, 407, 408, 383, 409, 413, 921, 410,
	411, 412, 943, 0, 417, 418, 416, 0, 419, 420,
	421, 422, 423, 267, 424, 268, 851, 0, 894, 895,
	896, 897, 0, 0, 426, 427, 944, 428, 945, 828,
	429, 430, 431, 0, 3294, 433, 0, 811, 434, 435,
	436, 437, 439, 911, 440, 0, 859, 441, 442, 443,
	492, 891, 938, 0, 445, 444, 495, 0, 0, 0,
	0, 446, 447, 496, 448, 449, 450, 808, 0, 0,
	0, 0, 0, 0, 0, 806, 0, 0, 0, 0,
	804, 805, 864, 821, 822, 823, 819, 820, 833, 834,
	0, 0, 0, 0, 832, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	913, 838, 0, 0, 0, 218, 219, 220, 3293, 879,
	858, 890, 848, 889, 888, 0, 224, 850, 849, 227,
	228, 229, 840, 912, 230, 948, 949, 458, 0, 231,
	919, 0, 902, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 922, 245, 3295, 905, 903, 904, 909, 907, 906,
	908, 247, 248, 249, 250, 893, 252, 886, 885, 810,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 884,
	259, 0, 260, 0, 261, 262, 0, 816, 263, 264,
	266, 269, 265, 270, 271, 272, 939, 940, 829, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 883, 881,
	882, 0, 278, 0, 279, 0, 0, 923, 280, 281,
	0, 282, 946, 0, 839, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 914, 915, 918, 925, 0, 916,
	860, 0, 0, 0, 210, 291, 293, 300, 0, 924,
	294, 872, 863, 874, 876, 877, 878, 873, 0, 865,
	0, 301, 926, 927, 302, 303, 304, 928, 898, 899,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 947, 929, 314, 315, 930, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	852, 325, 931, 328, 329, 331, 330, 807, 211, 932,
	830, 917, 887, 332, 333, 0, 861, 335, 862, 0,
	0, 338, 339, 0, 0, 340, 478, 933, 341, 934,
	941, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 942, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 880, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 935, 375, 376, 377, 378, 817,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	0, 397, 398, 853, 854, 856, 857, 392, 396, 399,
	400, 910, 401, 381, 382, 402, 936, 403, 875, 855,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 921,
	410, 411, 412, 943, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 851, 0, 894,
	895, 896, 897, 0, 0, 426, 427, 944, 428, 945,
	828, 429, 430, 431, 0, 3294, 433, 0, 811, 434,
	435, 436, 437, 439, 911, 440, 0, 859, 441, 442,
	443, 492, 891, 938, 0, 445, 444, 495, 0, 0,
	0, 0, 446, 447, 496, 448, 449, 450, 808, 0,
	0, 0, 0, 0, 0, 0, 806, 0, 0, 0,
	0, 804, 805, 864, 821, 822, 823, 819, 820, 833,
	834, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 913, 838, 0, 0, 0, 218, 219, 220, 452,
	879, 858, 890, 848, 889, 888, 0, 224, 850, 849,
	227, 228, 229, 840, 912, 230, 948, 949, 458, 0,
	231, 919, 0, 902, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 922, 245, 246, 905, 903, 904, 909, 907,
	906, 908, 247, 248, 249, 250, 893, 252, 886, 885,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	884, 259, 0, 260, 0, 261, 262, 0, 816, 263,
	264, 266, 269, 265, 270, 271, 272, 939, 940, 829,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 883,
	881, 882, 0, 278, 0, 279, 0, 0, 923, 280,
	281, 0, 282, 946, 0, 839, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 914, 915, 918, 925, 0,
	916, 860, 0, 0, 0, 210, 291, 293, 300, 0,
	924, 294, 872, 863, 874, 876, 877, 878, 873, 0,
	865, 0, 301, 926, 927, 302, 303, 304, 928, 898,
	899, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 947, 929, 314, 315, 930, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 852, 325, 931, 328, 329, 331, 330, 0, 211,
	932, 830, 917, 887, 332, 333, 0, 861, 335, 862,
	0, 0, 338, 339, 0, 0, 340, 478, 933, 341,
	934, 941, 342, 337, 343, 344, 345, 346, 347, 348,
	0, 349, 942, 350, 481, 351, 0, 352, 0, 353,
	354, 355, 356, 357, 358, 880, 359, 360, 0, 361,
	362, 363, 364, 365, 0, 367, 368, 369, 366, 370,
	371, 372, 373, 0, 374, 935, 375, 376, 377, 378,
	817, 379, 0, 380, 384, 385, 386, 387, 388, 389,
	390, 0, 397, 398, 853, 854, 856, 857, 392, 396,
	399, 400, 910, 401, 381, 382, 402, 936, 403, 875,
	855, 405, 0, 415, 406, 407, 408, 383, 409, 413,
	921, 410, 411, 412, 943, 0, 417, 418, 416, 0,
	419, 420, 421, 422, 423, 267, 424, 268, 851, 0,
	894, 895, 896, 897, 0, 0, 426, 427, 944, 428,
	945, 828, 429, 430, 431, 0, 432, 433, 0, 0,
	434, 435, 436, 437, 439, 911, 440, 0, 859, 441,
	442, 443, 492, 891, 938, 0, 445, 444, 495, 0,
	0, 0, 0, 446, 447, 496, 448, 449, 450, 864,
	821, 822, 823, 819, 820, 833, 0, 2054, 0, 0,
	0, 0, 2052, 2053, 0, 0, 212, 213, 214, 215,
	216, 834, 217, 0, 0, 0, 832, 913, 838, 0,
	0, 0, 218, 219, 220, 0, 879, 858, 890, 848,
	889, 888, 0, 224, 850, 849, 227, 228, 229, 840,
	912, 230, 948, 949, 458, 0, 231, 919, 0, 902,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 922, 245,
	3295, 905, 903, 904, 909, 907, 906, 908, 247, 248,
	249, 250, 893, 252, 886, 885, 810, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 884, 259, 0, 260,
	0, 261, 262, 0, 816, 263, 264, 266, 269, 265,
	270, 271, 272, 939, 940, 829, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 883, 881, 882, 0, 278,
	0, 279, 0, 0, 923, 280, 281, 0, 282, 946,
	0, 839, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 914, 915, 918, 0, 0, 916, 860, 0, 0,
	0, 210, 291, 293, 300, 0, 924, 294, 872, 863,
	874, 876, 877, 878, 873, 0, 865, 0, 301, 0,
	0, 302, 303, 304, 928, 898, 899, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 947, 929,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 852, 325, 931,
	328, 329, 331, 330, 807, 211, 0, 830, 917, 887,
	332, 333, 0, 861, 335, 862, 0, 0, 338, 339,
	0, 0, 340, 478, 933, 341, 934, 941, 342, 337,
	343, 344, 345, 346, 347, 348, 0, 349, 942, 350,
	481, 351, 0, 352, 0, 353, 354, 355, 356, 357,
	358, 880, 359, 360, 0, 361, 362, 363, 364, 365,
	0, 367, 368, 369, 366, 370, 371, 372, 373, 0,
	374, 935, 375, 376, 377, 378, 817, 379, 0, 380,
	384, 385, 386, 387, 388, 389, 390, 0, 397, 398,
	853, 854, 856, 857, 392, 396, 399, 400, 910, 401,
	381, 382, 402, 0, 403, 875, 855, 405, 0, 415,
	406, 407, 408, 383, 409, 413, 921, 410, 411, 412,
	943, 0, 417, 418, 416, 0, 419, 420, 421, 422,
	423, 267, 424, 268, 851, 0, 894, 895, 896, 897,
	0, 0, 426, 427, 944, 428, 945, 828, 429, 430,
	431, 0, 3294, 433, 0, 811, 434, 435, 436, 437,
	439, 911, 440, 0, 859, 441, 442, 443, 492, 891,
	938, 0, 445, 444, 495, 0, 0, 0, 0, 446,
	447, 496, 448, 449, 450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 797, 0, 985, 0, 804, 805,
	0, 0, 0, 0, 0, 0, 0, 834, 0, 0,
	0, 0, 832, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 913, 0, 0, 0, 0, 218,
	219, 220, 452, 453, 221, 454, 222, 223, 455, 0,
	224, 225, 226, 227, 228, 229, 0, 912, 230, 456,
	457, 458, 0, 231, 919, 0, 902, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 922, 245, 246, 905, 903,
	904, 909, 907, 906, 908, 247, 248, 249, 250, 251,
	252, 460, 461, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 462, 263, 264, 266, 269, 265, 270, 271, 272,
	939, 940, 0, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 465, 276, 277, 0, 278, 0, 279, 0,
	0, 923, 280, 281, 0, 282, 946, 0, 467, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 914, 915,
	918, 925, 0, 916, 292, 0, 0, 0, 210, 291,
	293, 300, 0, 924, 294, 471, 296, 295, 297, 298,
	299, 472, 0, 473, 0, 301, 926, 927, 302, 303,
	304, 928, 305, 306, 0, 0, 307, 308, 309, 310,
	972, 312, 311, 0, 313, 947, 929, 314, 315, 930,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 931, 328, 329, 331,
	330, 0, 211, 932, 0, 917, 477, 332, 333, 0,
	334, 335, 336, 0, 977, 338, 339, 0, 0, 340,
	478, 933, 341, 934, 941, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 942, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 356, 357, 358, 482, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 935, 375,
	376, 377, 378, 483, 979, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 175, 397, 398, 391, 393, 394,
	395, 392, 396, 399, 400, 910, 401, 381, 382, 402,
	936, 403, 484, 404, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 414, 410, 411, 412, 943, 0, 417,
	418, 416, 177, 419, 420, 421, 422, 423, 267, 424,
	268, 425, 0, 486, 487, 488, 489, 0, 0, 426,
	427, 944, 428, 945, 0, 429, 430, 431, 0, 432,
	433, 0, 0, 434, 435, 436, 437, 439, 911, 440,
	0, 438, 441, 442, 443, 1289, 493, 494, 0, 445,
	444, 495, 985, 0, 0, 169, 446, 447, 496, 448,
	449, 450, 0, 170, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	913, 0, 969, 0, 1564, 218, 219, 220, 452, 453,
	221, 454, 222, 223, 455, 0, 224, 225, 226, 227,
	228, 229, 0, 912, 230, 456, 457, 458, 0, 231,
	919, 0, 902, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 922, 245, 246, 905, 903, 904, 909, 907, 906,
	908, 247, 248, 249, 250, 251, 252, 460, 461, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 462, 263, 264,
	266, 269, 265, 270, 271, 272, 939, 940, 0, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 465, 276,
	277, 0, 278, 0, 279, 0, 0, 923, 280, 281,
	0, 282, 946, 0, 467, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 914, 915, 918, 925, 0, 916,
	292, 0, 0, 0, 210, 291, 293, 300, 0, 924,
	294, 471, 296, 295, 297, 298, 299, 472, 0, 473,
	0, 301, 926, 927, 302, 303, 304, 928, 305, 306,
	0, 0, 307, 308, 309, 310, 972, 312, 311, 0,
	313, 947, 929, 314, 315, 930, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 931, 328, 329, 331, 330, 0, 211, 932,
	0, 917, 477, 332, 333, 0, 334, 335, 336, 0,
	977, 338, 339, 0, 0, 340, 478, 933, 341, 934,
	941, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 942, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 482, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 935, 375, 376, 377, 378, 483,
	979, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	175, 397, 398, 391, 393, 394, 395, 392, 396, 399,
	400, 910, 401, 381, 382, 402, 936, 403, 484, 404,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 414,
	410, 411, 412, 943, 0, 417, 418, 416, 177, 419,
	420, 421, 422, 423, 267, 424, 268, 425, 0, 486,
	487, 488, 489, 0, 0, 426, 427, 944, 428, 945,
	0, 429, 430, 431, 0, 432, 433, 0, 0, 434,
	435, 436, 437, 439, 911, 440, 0, 438, 441, 442,
	443, 1289, 493, 494, 0, 445, 444, 495, 0, 0,
	0, 169, 446, 447, 496, 448, 449, 450, 0, 170,
	0, 0, 2474, 0, 985, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 969, 0,
	1564, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 913, 0, 0, 0, 0, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 0, 224, 225,
	226, 227, 228, 229, 0, 912, 230, 456, 457, 458,
	0, 231, 919, 0, 902, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 922, 245, 246, 905, 903, 904, 909,
	907, 906, 908, 247, 248, 249, 250, 251, 252, 460,
	461, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 939, 940,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 0, 279, 0, 0, 923,
	280, 281, 0, 282, 946, 0, 467, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 914, 915, 918, 925,
	0, 916, 292, 0, 0, 0, 210, 291, 293, 300,
	0, 924, 294, 471, 296, 295, 297, 298, 299, 472,
	0, 473, 0, 301, 926, 927, 302, 303, 304, 928,
	305, 306, 0, 0, 307, 308, 309, 310, 972, 312,
	311, 0, 313, 947, 929, 314, 315, 930, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 931, 328, 329, 331, 330, 0,
	211, 932, 0, 917, 477, 332, 333, 0, 334, 335,
	336, 0, 977, 338, 339, 0, 0, 340, 478, 933,
	341, 934, 941, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 942, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 935, 375, 376, 377,
	378, 483, 979, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 910, 401, 381, 382, 402, 936, 403,
	484, 404, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 943, 0, 417, 418, 416,
	0, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	0, 486, 487, 488, 489, 0, 0, 426, 427, 944,
	428, 945, 0, 429, 430, 431, 0, 432, 433, 0,
	0, 434, 435, 436, 437, 439, 911, 440, 0, 438,
	441, 442, 443, 492, 493, 494, 0, 445, 444, 495,
	0, 968, 0, 985, 446, 447, 496, 448, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	969, 913, 974, 0, 0, 0, 218, 219, 220, 452,
	453, 221, 454, 222, 223, 455, 0, 224, 225, 226,
	227, 228, 229, 0, 912, 230, 456, 457, 458, 0,
	231, 919, 0, 902, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 922, 245, 246, 905, 903, 904, 909, 907,
	906, 908, 247, 248, 249, 250, 251, 252, 460, 461,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 462, 263,
	264, 266, 269, 265, 270, 271, 272, 939, 940, 0,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 465,
	276, 277, 0, 278, 0, 279, 0, 0, 923, 280,
	281, 0, 282, 946, 0, 467, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 914, 915, 918, 925, 0,
	916, 292, 0, 0, 0, 210, 291, 293, 300, 0,
	924, 294, 471, 296, 295, 297, 298, 299, 472, 0,
	473, 0, 301, 926, 927, 302, 303, 304, 928, 305,
	306, 0, 0, 307, 308, 309, 310, 972, 312, 311,
	0, 313, 947, 929, 314, 315, 930, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 931, 328, 329, 331, 330, 0, 211,
	932, 0, 917, 477, 332, 333, 0, 334, 335, 336,
	0, 977, 338, 339, 0, 0, 340, 478, 933, 341,
	934, 941, 342, 337, 343, 344, 345, 346, 347, 348,
	0, 349, 942, 350, 481, 351, 0, 352, 0, 353,
	354, 355, 356, 357, 358, 482, 359, 360, 0, 361,
	362, 363, 364, 365, 0, 367, 368, 369, 366, 370,
	371, 372, 373, 0, 374, 935, 375, 376, 377, 378,
	483, 979, 0, 380, 384, 385, 386, 387, 388, 389,
	390, 0, 397, 398, 391, 393, 394, 395, 392, 396,
	399, 400, 910, 401, 381, 382, 402, 936, 403, 484,
	404, 405, 0, 415, 406, 407, 408, 383, 409, 413,
	414, 410, 411, 412, 943, 0, 417, 418, 416, 0,
	419, 420, 421, 422, 423, 267, 424, 268, 425, 0,
	486, 487, 488, 489, 0, 0, 426, 427, 944, 428,
	945, 0, 429, 430, 431, 0, 432, 433, 0, 0,
	434, 435, 436, 437, 439, 911, 440, 0, 438, 441,
	442, 443, 492, 493, 494, 0, 445, 444, 495, 985,
	0, 0, 0, 446, 447, 496, 448, 449, 450, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 913, 0, 969,
	0, 974, 218, 219, 220, 452, 453, 221, 454, 222,
	223, 455, 0, 224, 225, 226, 227, 228, 229, 0,
	912, 230, 456, 457, 458, 0, 231, 919, 0, 902,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 922, 245,
	246, 905, 903, 904, 909, 907, 906, 908, 247, 248,
	249, 250, 251, 252, 460, 461, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 462, 263, 264, 266, 269, 265,
	270, 271, 272, 939, 940, 0, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 465, 276, 277, 0, 278,
	0, 279, 0, 0, 923, 280, 281, 0, 282, 946,
	0, 467, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 914, 915, 918, 925, 0, 916, 292, 0, 0,
	0, 210, 291, 293, 300, 0, 924, 294, 471, 296,
	295, 297, 298, 299, 472, 0, 473, 0, 301, 926,
	927, 302, 303, 304, 928, 305, 306, 0, 0, 307,
	308, 309, 310, 972, 312, 311, 0, 313, 947, 929,
	314, 315, 930, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 931,
	328, 329, 331, 330, 0, 211, 932, 0, 917, 477,
	332, 333, 0, 334, 335, 336, 0, 977, 338, 339,
	0, 0, 340, 478, 933, 341, 934, 941, 342, 337,
	343, 344, 345, 346, 347, 348, 0, 349, 942, 350,
	481, 351, 0, 352, 0, 353, 354, 355, 356, 357,
	358, 482, 359, 360, 0, 361, 362, 363, 364, 365,
	0, 367, 368, 369, 366, 370, 371, 372, 373, 0,
	374, 935, 375, 376, 377, 378, 483, 979, 0, 380,
	384, 385, 386, 387, 388, 389, 390, 0, 397, 398,
	391, 393, 394, 395, 392, 396, 399, 400, 910, 401,
	381, 382, 402, 936, 403, 484, 404, 405, 0, 415,
	406, 407, 408, 383, 409, 413, 414, 410, 411, 412,
	943, 0, 417, 418, 416, 0, 419, 420, 421, 422,
	423, 267, 424, 268, 425, 0, 486, 487, 488, 489,
	0, 0, 426, 427, 944, 428, 945, 0, 429, 430,
	431, 0, 432, 433, 0, 0, 434, 435, 436, 437,
	439, 911, 440, 0, 438, 441, 442, 443, 492, 493,
	494, 0, 445, 444, 495, 985, 0, 0, 0, 446,
	447, 496, 448, 449, 450, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 913, 0, 969, 0, 974, 218, 219,
	220, 452, 453, 221, 454, 222, 223, 455, 0, 224,
	225, 226, 227, 228, 229, 0, 912, 230, 456, 457,
	458, 0, 231, 919, 0, 902, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 922, 245, 246, 905, 903, 904,
	909, 907, 906, 908, 247, 248, 249, 250, 251, 252,
	460, 461, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	462, 263, 264, 266, 269, 265, 270, 271, 272, 939,
	940, 0, 209, 0, 0, 0, 0, 0, 273, 274,
	275, 465, 276, 277, 0, 278, 0, 279, 0, 0,
	923, 280, 281, 0, 282, 946, 0, 467, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 914, 915, 918,
	925, 0, 916, 292, 0, 0, 0, 210, 291, 293,
	300, 0, 924, 294, 471, 296, 295, 297, 298, 299,
	472, 0, 473, 0, 301, 926, 927, 302, 303, 304,
	928, 305, 306, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 947, 929, 314, 315, 930, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 931, 328, 329, 331, 330,
	0, 211, 932, 0, 917, 477, 332, 333, 0, 334,
	335, 336, 0, 0, 338, 339, 0, 0, 340, 478,
	933, 341, 934, 941, 342, 337, 343, 344, 345, 346,
	347, 348, 0, 349, 942, 350, 481, 351, 0, 352,
	0, 353, 354, 355, 356, 357, 358, 482, 359, 360,
	0, 361, 362, 363, 364, 365, 0, 367, 368, 369,
	366, 370, 371, 372, 373, 0, 374, 935, 375, 376,
	377, 378, 483, 979, 0, 380, 384, 385, 386, 387,
	388, 389, 390, 0, 397, 398, 391, 393, 394, 395,
	392, 396, 399, 400, 910, 401, 381, 382, 402, 936,
	403, 484, 404, 405, 0, 415, 406, 407, 408, 383,
	409, 413, 414, 410, 411, 412, 943, 0, 417, 418,
	416, 0, 419, 420, 421, 422, 423, 267, 424, 268,
	425, 0, 486, 487, 488, 489, 0, 0, 426, 427,
	944, 428, 945, 0, 429, 430, 431, 0, 432, 433,
	0, 0, 434, 435, 436, 437, 439, 911, 440, 0,
	438, 441, 442, 443, 492, 493, 494, 0, 445, 444,
	495, 797, 0, 1143, 0, 446, 447, 496, 448, 449,
	450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 451, 0, 1466, 0, 0, 218, 219, 220, 452,
	453, 221, 454, 222, 223, 455, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 456, 457, 458, 0,
	231, 459, 0, 1047, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 922, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 460, 461,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 462, 263,
	264, 266, 269, 265, 270, 271, 272, 463, 464, 0,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 465,
	276, 277, 0, 278, 0, 279, 0, 0, 923, 280,
	281, 0, 282, 466, 0, 467, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 468, 469, 470, 925, 0,
	474, 292, 0, 0, 0, 0, 291, 293, 300, 0,
	924, 294, 471, 296, 295, 297, 298, 299, 472, 0,
	473, 0, 301, 926, 927, 302, 303, 304, 928, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 475, 929, 314, 315, 930, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 931, 328, 329, 331, 330, 0, 0,
	932, 0, 476, 477, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 339, 0, 0, 340, 478, 933, 341,
	934, 479, 342, 337, 343, 344, 345, 346, 347, 348,
	0, 349, 480, 350, 481, 351, 0, 352, 0, 353,
	354, 355, 356, 357, 358, 482, 359, 360, 0, 361,
	362, 363, 364, 365, 0, 367, 368, 369, 366, 370,
	371, 372, 373, 0, 374, 935, 375, 376, 377, 378,
	483, 379, 0, 380, 384, 385, 386, 387, 388, 389,
	390, 175, 397, 398, 391, 393, 394, 395, 392, 396,
	399, 400, 0, 401, 381, 382, 402, 936, 403, 484,
	404, 405, 0, 415, 406, 407, 408, 383, 409, 413,
	414, 410, 411, 412, 485, 0, 417, 418, 416, 177,
	419, 420, 421, 422, 423, 267, 424, 268, 425, 0,
	486, 487, 488, 489, 0, 0, 426, 427, 490, 428,
	491, 0, 429, 430, 431, 0, 432, 433, 0, 0,
	434, 435, 436, 437, 439, 0, 440, 0, 438, 441,
	442, 443, 1289, 493, 494, 0, 445, 444, 495, 1286,
	0, 1143, 169, 446, 447, 496, 448, 449, 450, 0,
	170, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 451,
	0, 147, 0, 0, 218, 219, 220, 452, 453, 221,
	454, 222, 223, 455, 0, 224, 225, 226, 227, 228,
	229, 0, 0, 230, 456, 457, 458, 0, 231, 459,
	0, 1047, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	922, 245, 246, 0, 0, 0, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 460, 461, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 462, 263, 264, 266,
	269, 265, 270, 271, 272, 463, 464, 0, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 465, 276, 277,
	0, 278, 0, 279, 0, 0, 923, 280, 281, 0,
	282, 466, 0, 467, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 468, 469, 470, 925, 0, 474, 292,
	0, 0, 0, 0, 291, 293, 300, 0, 924, 294,
	471, 296, 295, 297, 298, 299, 472, 0, 473, 0,
	301, 926, 927, 302, 303, 304, 928, 305, 306, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	475, 929, 314, 315, 930, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 327,
	325, 931, 328, 329, 331, 330, 0, 0, 932, 0,
	476, 477, 332, 333, 0, 334, 335, 336, 0, 0,
	338, 339, 0, 0, 340, 478, 933, 341, 934, 479,
	342, 337, 343, 344, 345, 346, 347, 348, 0, 349,
	480, 350, 481, 351, 0, 352, 0, 353, 354, 355,
	356, 357, 358, 482, 359, 360, 0, 361, 362, 363,
	364, 365, 0, 367, 368, 369, 366, 370, 371, 372,
	373, 0, 374, 935, 375, 376, 377, 378, 483, 379,
	0, 380, 384, 385, 386, 387, 388, 389, 390, 175,
	397, 398, 391, 393, 394, 395, 392, 396, 399, 400,
	0, 401, 381, 382, 402, 936, 403, 484, 404, 405,
	0, 415, 406, 407, 408, 383, 409, 413, 414, 410,
	411, 412, 485, 0, 417, 418, 416, 177, 419, 420,
	421, 422, 423, 267, 424, 268, 425, 0, 486, 487,
	488, 489, 0, 0, 426, 427, 490, 428, 491, 0,
	429, 430, 431, 0, 432, 433, 0, 0, 434, 435,
	436, 437, 439, 0, 440, 0, 438, 441, 442, 443,
	1289, 493, 494, 0, 445, 444, 495, 0, 0, 0,
	169, 446, 447, 496, 448, 449, 450, 0, 170, 0,
	0, 0, 0, 1143, 1142, 0, 0, 0, 0, 1140,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 147,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 451, 0, 0, 0, 0, 218, 219, 220, 452,
	453, 221, 454, 222, 223, 455, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 456, 457, 458, 0,
	231, 459, 0, 1047, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 922, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 460, 461,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 462, 263,
	264, 266, 269, 265, 270, 271, 272, 463, 464, 0,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 465,
	276, 277, 0, 278, 0, 279, 0, 0, 923, 280,
	281, 0, 282, 466, 0, 467, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 468, 469, 470, 925, 0,
	474, 292, 0, 0, 0, 0, 291, 293, 300, 0,
	924, 294, 471, 296, 295, 297, 298, 299, 472, 0,
	473, 0, 301, 926, 927, 302, 303, 304, 928, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 475, 929, 314, 315, 930, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 931, 328, 329, 331, 330, 0, 0,
	932, 0, 476, 477, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 339, 0, 0, 340, 478, 933, 341,
	934, 479, 342, 337, 343, 344, 345, 346, 347, 348,
	0, 349, 480, 350, 481, 351, 0, 352, 0, 353,
	354, 355, 356, 357, 358, 482, 359, 360, 0, 361,
	362, 363, 364, 365, 0, 367, 368, 369, 366, 370,
	371, 372, 373, 0, 374, 935, 375, 376, 377, 378,
	483, 379, 0, 380, 384, 385, 386, 387, 388, 389,
	390, 0, 397, 398, 391, 393, 394, 395, 392, 396,
	399, 400, 0, 401, 381, 382, 402, 936, 403, 484,
	404, 405, 0, 415, 406, 407, 408, 383, 409, 413,
	414, 410, 411, 412, 485, 0, 417, 418, 416, 0,
	419, 420, 421, 422, 423, 267, 424, 268, 425, 0,
	486, 487, 488, 489, 0, 0, 426, 427, 490, 428,
	491, 0, 429, 430, 431, 0, 432, 433, 0, 0,
	434, 435, 436, 437, 439, 0, 440, 0, 438, 441,
	442, 443, 492, 493, 494, 0, 445, 444, 495, 0,
	0, 0, 0, 446, 447, 496, 448, 449, 450, 1143,
	1142, 0, 0, 0, 0, 1140, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 2664, 217, 0, 0, 0, 0, 451, 0, 0,
	0, 0, 218, 219, 220, 452, 453, 221, 454, 222,
	223, 455, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 456, 457, 458, 0, 231, 459, 0, 1047,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 922, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 460, 461, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 462, 263, 264, 266, 269, 265,
	270, 271, 272, 463, 464, 0, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 465, 276, 277, 0, 278,
	0, 279, 0, 0, 923, 280, 281, 0, 282, 466,
	0, 467, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 468, 469, 470, 925, 0, 474, 292, 0, 0,
	0, 0, 291, 293, 300, 0, 924, 294, 471, 296,
	295, 297, 298, 299, 472, 0, 473, 0, 301, 926,
	927, 302, 303, 304, 928, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 475, 929,
	314, 315, 930, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 931,
	328, 329, 331, 330, 0, 0, 932, 0, 476, 477,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	0, 0, 340, 478, 933, 341, 934, 479, 342, 337,
	343, 344, 345, 346, 347, 348, 0, 349, 480, 350,
	481, 351, 0, 352, 0, 353, 354, 355, 356, 357,
	358, 482, 359, 360, 0, 361, 362, 363, 364, 365,
	0, 367, 368, 369, 366, 370, 371, 372, 373, 0,
	374, 935, 375, 376, 377, 378, 483, 379, 0, 380,
	384, 385, 386, 387, 388, 389, 390, 0, 397, 398,
	391, 393, 394, 395, 392, 396, 399, 400, 0, 401,
	381, 382, 402, 936, 403, 484, 404, 405, 0, 415,
	406, 407, 408, 383, 409, 413, 414, 410, 411, 412,
	485, 0, 417, 418, 416, 0, 419, 420, 421, 422,
	423, 267, 424, 268, 425, 0, 486, 487, 488, 489,
	0, 0, 426, 427, 490, 428, 491, 0, 429, 430,
	431, 0, 432, 433, 0, 0, 434, 435, 436, 437,
	439, 0, 440, 0, 438, 441, 442, 443, 492, 493,
	494, 0, 445, 444, 495, 985, 0, 0, 0, 446,
	447, 496, 448, 449, 450, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 913, 0, 0, 0, 1293, 218, 219,
	220, 452, 453, 221, 454, 222, 223, 455, 0, 224,
	225, 226, 227, 228, 229, 0, 912, 230, 456, 457,
	458, 0, 231, 919, 0, 902, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 922, 245, 246, 905, 903, 904,
	909, 907, 906, 908, 247, 248, 249, 250, 251, 252,
	460, 461, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	462, 263, 264, 266, 269, 265, 270, 271, 272, 939,
	940, 0, 209, 0, 0, 0, 0, 0, 273, 274,
	275, 465, 276, 277, 0, 278, 0, 279, 0, 0,
	923, 280, 281, 0, 282, 946, 0, 467, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 914, 915, 918,
	925, 0, 916, 292, 0, 0, 0, 210, 291, 293,
	300, 0, 924, 294, 471, 296, 295, 297, 298, 299,
	472, 0, 473, 0, 301, 926, 927, 302, 303, 304,
	928, 305, 306, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 947, 929, 314, 315, 930, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 931, 328, 329, 331, 330,
	0, 211, 932, 0, 917, 477, 332, 333, 0, 334,
	335, 336, 0, 0, 338, 339, 0, 0, 340, 478,
	933, 341, 934, 941, 342, 337, 343, 344, 345, 346,
	347, 348, 0, 349, 942, 350, 481, 351, 0, 352,
	0, 353, 354, 355, 356, 357, 358, 482, 359, 360,
	0, 361, 362, 363, 364, 365, 0, 367, 368, 369,
	366, 370, 371, 372, 373, 0, 374, 935, 375, 376,
	377, 378, 483, 379, 0, 380, 384, 385, 386, 387,
	388, 389, 390, 0, 397, 398, 391, 393, 394, 395,
	392, 396, 399, 400, 910, 401, 381, 382, 402, 936,
	403, 484, 404, 405, 0, 415, 406, 407, 408, 383,
	409, 413, 414, 410, 411, 412, 943, 0, 417, 418,
	416, 0, 419, 420, 421, 422, 423, 267, 424, 268,
	425, 0, 486, 487, 488, 489, 0, 0, 426, 427,
	944, 428, 945, 0, 429, 430, 431, 0, 432, 433,
	0, 0, 434, 435, 436, 437, 439, 911, 440, 0,
	438, 441, 442, 443, 492, 493, 494, 0, 445, 444,
	495, 797, 0, 206, 0, 446, 447, 496, 448, 449,
	450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 451, 0, 0, 0, 0, 218, 219, 220, 452,
	453, 221, 454, 222, 223, 455, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 456, 457, 458, 0,
	231, 459, 0, 0, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 0, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 460, 461,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 462, 263,
	264, 266, 269, 265, 270, 271, 272, 463, 464, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 275, 465,
	276, 277, 0, 278, 0, 279, 0, 0, 0, 280,
	281, 0, 282, 466, 0, 467, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 468, 469, 470, 0, 0,
	474, 292, 0, 0, 0, 0, 291, 293, 300, 0,
	0, 294, 471, 296, 295, 297, 298, 299, 472, 0,
	473, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 475, 0, 314, 315, 0, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 0, 328, 329, 331, 330, 0, 0,
	0, 0, 476, 477, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 339, 0, 0, 340, 478, 0, 341,
	0, 479, 342, 337, 343, 344, 345, 346, 347, 348,
	0, 349, 480, 350, 481, 351, 0, 352, 0, 353,
	354, 355, 356, 357, 358, 482, 359, 360, 0, 361,
	362, 363, 364, 365, 0, 367, 368, 369, 366, 370,
	371, 372, 373, 0, 374, 0, 375, 376, 377, 378,
	483, 379, 0, 380, 384, 385, 386, 387, 388, 389,
	390, 175, 397, 398, 391, 393, 394, 395, 392, 396,
	399, 400, 0, 401, 381, 382, 402, 0, 403, 484,
	404, 405, 0, 415, 406, 407, 408, 383, 409, 413,
	414, 410, 411, 412, 485, 0, 417, 418, 416, 177,
	419, 420, 421, 422, 423, 267, 424, 268, 425, 0,
	486, 487, 488, 489, 0, 0, 426, 427, 490, 428,
	491, 0, 429, 430, 431, 0, 432, 433, 0, 0,
	434, 435, 436, 437, 439, 0, 440, 0, 438, 441,
	442, 443, 1289, 493, 494, 0, 445, 444, 495, 206,
	0, 0, 169, 446, 447, 496, 448, 449, 450, 0,
	170, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 451, 0, 0,
	0, 147, 218, 219, 220, 452, 453, 221, 454, 222,
	223, 455, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 456, 457, 458, 0, 231, 459, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 460, 461, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 462, 263, 264, 266, 269, 265,
	270, 271, 272, 463, 464, 0, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 465, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 466,
	0, 467, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 468, 469, 470, 0, 0, 474, 292, 0, 0,
	0, 210, 291, 293, 300, 0, 0, 294, 471, 296,
	295, 297, 298, 299, 472, 0, 473, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 475, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 0,
	328, 329, 331, 330, 0, 211, 0, 0, 476, 477,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	0, 0, 340, 478, 0, 341, 0, 479, 342, 337,
	343, 344, 345, 346, 347, 348, 0, 349, 480, 350,
	481, 351, 0, 352, 0, 353, 354, 355, 356, 357,
	358, 482, 359, 360, 0, 361, 362, 363, 364, 365,
	0, 367, 368, 369, 366, 370, 371, 372, 373, 0,
	374, 0, 375, 376, 377, 378, 483, 379, 0, 380,
	384, 385, 386, 387, 388, 389, 390, 0, 397, 398,
	391, 393, 394, 395, 392, 396, 399, 400, 0, 401,
	381, 382, 402, 0, 403, 484, 404, 405, 0, 415,
	406, 407, 408, 383, 409, 413, 414, 410, 411, 412,
	485, 0, 417, 418, 416, 0, 419, 420, 421, 422,
	423, 267, 424, 268, 425, 0, 486, 487, 488, 489,
	0, 0, 426, 427, 490, 428, 491, 0, 429, 430,
	431, 0, 432, 433, 0, 0, 434, 435, 436, 437,
	439, 0, 440, 0, 438, 441, 442, 443, 492, 493,
	494, 0, 445, 444, 495, 206, 0, 0, 0, 446,
	447, 496, 448, 449, 450, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 451, 0, 0, 0, 1569, 218, 219,
	220, 452, 453, 221, 454, 222, 223, 455, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 456, 457,
	458, 0, 231, 459, 0, 0, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	460, 461, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	462, 263, 264, 266, 269, 265, 270, 271, 272, 463,
	464, 0, 209, 0, 0, 0, 0, 0, 273, 274,
	275, 465, 276, 277, 0, 278, 0, 279, 0, 0,
	0, 280, 281, 0, 282, 466, 0, 467, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 468, 469, 470,
	0, 0, 474, 292, 0, 0, 0, 210, 291, 293,
	300, 0, 0, 294, 471, 296, 295, 297, 298, 299,
	472, 0, 473, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 306, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 475, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 0, 328, 329, 331, 330,
	0, 211, 0, 0, 476, 477, 332, 333, 0, 334,
	335, 336, 0, 0, 338, 339, 0, 0, 340, 478,
	0, 341, 0, 479, 342, 337, 343, 344, 345, 346,
	347, 348, 0, 349, 480, 350, 481, 351, 0, 352,
	0, 353, 354, 355, 356, 357, 358, 482, 359, 360,
	0, 361, 362, 363, 364, 365, 0, 367, 368, 369,
	366, 370, 371, 372, 373, 0, 374, 0, 375, 376,
	377, 378, 483, 379, 0, 380, 384, 385, 386, 387,
	388, 389, 390, 0, 397, 398, 391, 393, 394, 395,
	392, 396, 399, 400, 0, 401, 381, 382, 402, 0,
	403, 484, 404, 405, 0, 415, 406, 407, 408, 383,
	409, 413, 414, 410, 411, 412, 485, 0, 417, 418,
	416, 0, 419, 420, 421, 422, 423, 267, 424, 268,
	425, 0, 486, 487, 488, 489, 0, 0, 426, 427,
	490, 428, 491, 0, 429, 430, 431, 0, 432, 433,
	0, 0, 434, 435, 436, 437, 439, 0, 440, 0,
	438, 441, 442, 443, 492, 493, 494, 0, 445, 444,
	495, 206, 0, 0, 0, 446, 447, 496, 448, 449,
	450, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 451,
	0, 2614, 0, 0, 218, 219, 220, 452, 453, 221,
	454, 222, 223, 455, 0, 224, 225, 226, 227, 228,
	229, 0, 0, 230, 456, 457, 458, 0, 231, 459,
	0, 0, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	0, 245, 246, 0, 0, 0, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 460, 461, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 462, 263, 264, 266,
	269, 265, 270, 271, 272, 463, 464, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 465, 276, 277,
	0, 278, 0, 279, 0, 0, 0, 280, 281, 0,
	282, 466, 0, 467, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 468, 469, 470, 0, 0, 474, 292,
	0, 0, 0, 0, 291, 293, 300, 0, 0, 294,
	471, 296, 295, 297, 298, 299, 472, 0, 473, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 306, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	475, 0, 314, 315, 0, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 327,
	325, 0, 328, 329, 331, 330, 0, 0, 0, 0,
	476, 477, 332, 333, 0, 334, 335, 336, 0, 0,
	338, 339, 0, 0, 340, 478, 0, 341, 0, 479,
	342, 337, 343, 344, 345, 346, 347, 348, 0, 349,
	480, 350, 481, 351, 0, 352, 0, 353, 354, 355,
	356, 357, 358, 482, 359, 360, 0, 361, 362, 363,
	364, 365, 0, 367, 368, 369, 366, 370, 371, 372,
	373, 0, 374, 0, 375, 376, 377, 378, 483, 379,
	0, 380, 384, 385, 386, 387, 388, 389, 390, 0,
	397, 398, 391, 393, 394, 395, 392, 396, 399, 400,
	0, 401, 381, 382, 402, 0, 403, 484, 404, 405,
	0, 415, 406, 407, 408, 383, 409, 413, 414, 410,
	411, 412, 485, 0, 417, 418, 416, 0, 419, 420,
	421, 422, 423, 267, 424, 268, 425, 0, 486, 487,
	488, 489, 0, 0, 426, 427, 490, 428, 491, 0,
	429, 430, 431, 0, 432, 433, 0, 0, 434, 435,
	436, 437, 439, 0, 440, 0, 438, 441, 442, 443,
	492, 493, 494, 0, 445, 444, 495, 206, 0, 0,
	0, 446, 447, 496, 448, 449, 450, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 451, 0, 0, 0, 2274,
	218, 219, 220, 452, 453, 221, 454, 222, 223, 455,
	0, 224, 225, 226, 227, 228, 229, 0, 0, 230,
	456, 457, 458, 0, 231, 459, 0, 0, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 0, 245, 246, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 460, 461, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 462, 263, 264, 266, 269, 265, 270, 271,
	272, 463, 464, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 465, 276, 277, 0, 278, 0, 279,
	0, 0, 0, 280, 281, 0, 282, 466, 0, 467,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 468,
	469, 470, 0, 0, 474, 292, 0, 0, 0, 0,
	291, 293, 300, 0, 0, 294, 471, 296, 295, 297,
	298, 299, 472, 0, 473, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 306, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 475, 0, 314, 315,
	0, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 327, 325, 0, 328, 329,
	331, 330, 0, 0, 0, 0, 476, 477, 332, 333,
	0, 334, 335, 336, 0, 0, 338, 339, 0, 0,
	340, 478, 0, 341, 0, 479, 342, 337, 343, 344,
	345, 346, 347, 348, 0, 349, 480, 350, 481, 351,
	0, 352, 0, 353, 354, 355, 356, 357, 358, 482,
	359, 360, 0, 361, 362, 363, 364, 365, 0, 367,
	368, 369, 366, 370, 371, 372, 373, 0, 374, 0,
	375, 376, 377, 378, 483, 379, 0, 380, 384, 385,
	386, 387, 388, 389, 390, 0, 397, 398, 391, 393,
	394, 395, 392, 396, 399, 400, 0, 401, 381, 382,
	402, 0, 403, 484, 404, 405, 0, 415, 406, 407,
	408, 383, 409, 413, 414, 410, 411, 412, 485, 0,
	417, 418, 416, 0, 419, 420, 421, 422, 423, 267,
	424, 268, 425, 0, 486, 487, 488, 489, 0, 0,
	426, 427, 490, 428, 491, 0, 429, 430, 431, 0,
	432, 433, 0, 0, 434, 435, 436, 437, 439, 0,
	440, 0, 438, 441, 442, 443, 492, 493, 494, 0,
	445, 444, 495, 673, 0, 565, 0, 446, 447, 496,
	448, 449, 450, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 451, 0, 2736, 0, 0, 218, 219,
	220, 452, 453, 221, 454, 222, 223, 455, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 456, 457,
	458, 0, 231, 459, 0, 0, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 571, 250, 251, 252,
	460, 461, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	462, 263, 264, 266, 269, 265, 270, 271, 272, 463,
	464, 0, 209, 0, 0, 0, 0, 0, 273, 274,
	275, 465, 276, 277, 0, 278, 0, 279, 0, 0,
	0, 280, 281, 0, 282, 466, 0, 467, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 468, 469, 470,
	0, 0, 474, 292, 0, 0, 0, 210, 291, 293,
	300, 0, 0, 294, 471, 296, 295, 297, 298, 299,
	472, 0, 473, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 306, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 475, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 0, 328, 329, 331, 330,
	0, 211, 0, 0, 476, 477, 332, 333, 0, 334,
	335, 336, 0, 0, 338, 339, 0, 0, 340, 478,
	0, 341, 0, 479, 342, 337, 343, 344, 345, 346,
	347, 348, 0, 349, 480, 350, 481, 351, 0, 352,
	0, 353, 354, 355, 356, 357, 358, 482, 359, 360,
	0, 361, 362, 363, 364, 365, 0, 367, 368, 369,
	366, 370, 371, 372, 373, 0, 374, 0, 375, 376,
	377, 378, 483, 379, 0, 380, 384, 385, 386, 387,
	388, 389, 390, 0, 397, 398, 391, 393, 394, 395,
	392, 396, 399, 400, 0, 401, 381, 382, 402, 0,
	403, 484, 404, 405, 0, 415, 406, 407, 408, 383,
	409, 413, 414, 410, 411, 412, 485, 0, 417, 418,
	416, 570, 419, 420, 421, 422, 423, 267, 424, 268,
	425, 0, 486, 487, 488, 489, 0, 0, 426, 427,
	490, 428, 491, 0, 429, 430, 431, 0, 432, 433,
	0, 0, 434, 435, 436, 437, 439, 0, 440, 0,
	438, 441, 442, 443, 492, 493, 494, 0, 445, 444,
	495, 0, 564, 0, 565, 446, 447, 496, 448, 449,
	450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 574, 217, 0, 0,
	0, 0, 451, 0, 0, 0, 0, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 456, 457, 458,
	0, 231, 459, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 571, 250, 251, 252, 460,
	461, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 463, 464,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 466, 0, 467, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 468, 469, 470, 0,
	0, 474, 292, 0, 0, 0, 210, 291, 293, 300,
	0, 0, 294, 471, 296, 295, 297, 298, 299, 472,
	0, 473, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 475, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	211, 0, 0, 476, 477, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 0, 0, 340, 478, 0,
	341, 0, 479, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 480, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 0, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 0, 401, 381, 382, 402, 0, 403,
	484, 404, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 485, 0, 417, 418, 416,
	570, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	0, 486, 487, 488, 489, 0, 0, 426, 427, 490,
	428, 491, 0, 429, 430, 431, 0, 432, 433, 0,
	0, 434, 435, 436, 437, 439, 0, 440, 0, 438,
	441, 442, 443, 492, 493, 494, 565, 445, 444, 495,
	0, 0, 0, 0, 446, 447, 496, 448, 449, 450,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 451, 574, 0, 0, 0, 218,
	219, 220, 452, 453, 221, 454, 222, 223, 455, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 456,
	457, 458, 0, 231, 459, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 571, 250, 251,
	252, 460, 461, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 462, 263, 264, 266, 269, 265, 270, 271, 272,
	463, 464, 0, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 465, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 0, 282, 466, 0, 467, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 468, 469,
	470, 0, 0, 474, 292, 0, 0, 0, 210, 291,
	293, 300, 0, 0, 294, 471, 296, 295, 297, 298,
	299, 472, 0, 473, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 475, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 0, 328, 329, 331,
	330, 0, 211, 0, 0, 476, 477, 332, 333, 0,
	334, 335, 336, 0, 0, 338, 339, 0, 0, 340,
	478, 0, 341, 0, 479, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 480, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 356, 357, 358, 482, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 0, 1845,
	376, 377, 378, 483, 379, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 0, 397, 398, 391, 393, 394,
	395, 392, 396, 399, 400, 0, 401, 381, 382, 402,
	0, 403, 484, 404, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 414, 410, 411, 412, 485, 0, 417,
	418, 416, 570, 419, 420, 421, 422, 423, 267, 424,
	268, 425, 0, 486, 487, 488, 489, 0, 0, 426,
	427, 490, 428, 491, 0, 429, 430, 431, 0, 432,
	433, 0, 0, 434, 435, 436, 437, 439, 0, 440,
	0, 438, 441, 442, 443, 492, 493, 494, 565, 445,
	444, 495, 0, 0, 0, 0, 446, 447, 496, 448,
	449, 450, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 451, 574, 0, 0,
	0, 218, 219, 220, 452, 453, 221, 454, 222, 223,
	455, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 456, 457, 458, 0, 231, 459, 0, 0, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 0, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 571,
	250, 251, 252, 460, 461, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 462, 263, 264, 266, 269, 265, 270,
	271, 272, 463, 464, 0, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 465, 276, 277, 0, 278, 0,
	279, 0, 0, 0, 280, 281, 0, 282, 466, 0,
	467, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	468, 469, 470, 0, 0, 474, 292, 0, 0, 0,
	210, 291, 293, 300, 0, 0, 294, 471, 296, 295,
	297, 298, 299, 472, 0, 473, 0, 301, 0, 0,
	302, 303, 304, 0, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 475, 0, 314,
	315, 0, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 0, 328,
	329, 331, 330, 0, 211, 0, 0, 476, 477, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 0,
	0, 340, 478, 0, 341, 0, 479, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 480, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	482, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	0, 375, 376, 377, 378, 483, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 0, 397, 398, 391,
	393, 394, 395, 392, 396, 399, 400, 0, 401, 381,
	382, 402, 0, 403, 484, 404, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 414, 410, 411, 412, 485,
	0, 417, 418, 416, 570, 419, 420, 421, 422, 423,
	267, 424, 268, 425, 0, 486, 487, 488, 489, 0,
	0, 426, 427, 490, 428, 491, 0, 429, 430, 431,
	0, 432, 433, 0, 0, 434, 435, 436, 437, 439,
	0, 440, 0, 438, 441, 442, 443, 492, 493, 494,
	206, 445, 444, 495, 0, 0, 0, 0, 446, 447,
	496, 448, 449, 450, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 451, 574,
	0, 0, 0, 218, 219, 220, 452, 453, 221, 454,
	222, 223, 455, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 456, 457, 458, 0, 231, 459, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 460, 461, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 462, 263, 264, 266, 269,
	265, 270, 271, 272, 463, 464, 0, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 465, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	466, 0, 467, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 468, 469, 470, 0, 0, 474, 292, 0,
	0, 0, 210, 291, 293, 300, 0, 0, 294, 471,
	296, 295, 297, 298, 299, 472, 0, 473, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 475,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 211, 0, 0, 476,
	477, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 0, 0, 340, 478, 0, 341, 0, 479, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 480,
	350, 481, 351, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 482, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 0, 375, 376, 377, 378, 483, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 0, 397,
	398, 391, 393, 394, 395, 392, 396, 399, 400, 0,
	401, 381, 382, 402, 0, 403, 484, 404, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 414, 410, 411,
	412, 485, 0, 417, 418, 416, 0, 419, 420, 421,
	422, 423, 267, 424, 268, 425, 0, 486, 487, 488,
	489, 0, 0, 426, 427, 490, 428, 491, 0, 429,
	430, 431, 0, 432, 433, 0, 0, 434, 435, 436,
	437, 439, 0, 440, 0, 438, 441, 442, 443, 492,
	493, 494, 0, 445, 444, 495, 0, 0, 0, 0,
	446, 447, 496, 448, 449, 450, 1315, 0, 1143, 1142,
	0, 0, 0, 0, 1140, 0, 0, 0, 0, 0,
	0, 574, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 451, 0, 0, 0,
	0, 218, 219, 220, 452, 453, 221, 454, 222, 223,
	455, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 456, 457, 458, 0, 231, 459, 0, 1047, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 922, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 460, 461, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 462, 263, 264, 266, 269, 265, 270,
	271, 272, 463, 464, 0, 209, 0, 0, 0, 0,
	0, 1314, 274, 275, 465, 276, 277, 0, 278, 0,
	279, 0, 0, 923, 280, 281, 0, 282, 466, 0,
	467, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	468, 469, 470, 925, 0, 474, 292, 0, 0, 0,
	0, 291, 293, 300, 0, 924, 294, 471, 296, 295,
	297, 298, 299, 472, 0, 473, 0, 301, 926, 927,
	302, 303, 304, 928, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 475, 929, 314,
	315, 930, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 931, 328,
	329, 331, 330, 0, 0, 932, 0, 476, 477, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 0,
	0, 340, 478, 933, 341, 934, 479, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 480, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 1313, 358,
	482, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	935, 375, 376, 377, 378, 483, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 0, 397, 398, 391,
	393, 394, 395, 392, 396, 399, 400, 0, 401, 381,
	382, 402, 936, 403, 484, 404, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 414, 410, 411, 412, 485,
	0, 417, 418, 416, 0, 419, 420, 421, 422, 423,
	267, 424, 268, 425, 0, 486, 487, 488, 489, 0,
	0, 426, 427, 490, 428, 491, 0, 429, 430, 431,
	0, 432, 433, 0, 0, 434, 435, 436, 437, 439,
	0, 440, 0, 438, 441, 442, 443, 492, 493, 494,
	0, 445, 444, 495, 0, 0, 0, 0, 446, 447,
	496, 448, 449, 450, 1284, 0, 1143, 1142, 0, 0,
	0, 0, 1140, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 451, 0, 0, 0, 0, 218,
	219, 220, 452, 453, 221, 454, 222, 223, 455, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 456,
	457, 458, 0, 231, 459, 0, 1047, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 922, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 460, 461, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 462, 263, 264, 266, 269, 265, 270, 271, 272,
	463, 464, 0, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 465, 276, 277, 0, 278, 0, 279, 0,
	0, 923, 280, 281, 0, 282, 466, 0, 467, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 1283, 469,
	470, 925, 0, 474, 292, 0, 0, 0, 0, 291,
	293, 300, 0, 924, 294, 471, 296, 295, 297, 298,
	299, 472, 0, 473, 0, 301, 926, 927, 302, 303,
	304, 928, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 475, 929, 314, 315, 930,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 931, 328, 329, 331,
	330, 0, 0, 932, 0, 476, 477, 332, 333, 0,
	334, 335, 336, 0, 0, 338, 339, 0, 0, 340,
	478, 933, 341, 934, 479, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 480, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 356, 357, 358, 482, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 935, 375,
	376, 377, 378, 483, 379, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 0, 397, 398, 391, 393, 394,
	395, 392, 396, 399, 400, 0, 401, 381, 382, 402,
	936, 403, 484, 404, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 414, 410, 411, 412, 485, 0, 417,
	418, 416, 0, 419, 420, 421, 422, 423, 267, 424,
	268, 425, 0, 486, 487, 488, 489, 0, 0, 426,
	427, 490, 428, 491, 0, 429, 430, 431, 0, 432,
	433, 0, 0, 434, 435, 436, 437, 439, 0, 440,
	0, 438, 441, 442, 443, 492, 493, 494, 0, 445,
	444, 495, 0, 0, 0, 0, 446, 447, 496, 448,
	449, 450, 1280, 0, 1143, 1142, 0, 0, 0, 0,
	1140, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 451, 0, 0, 0, 0, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 456, 457, 458,
	0, 231, 459, 0, 1047, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 922, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 460,
	461, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 463, 464,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 0, 279, 0, 0, 923,
	280, 281, 0, 282, 466, 0, 467, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 1279, 469, 470, 925,
	0, 474, 292, 0, 0, 0, 0, 291, 293, 300,
	0, 924, 294, 471, 296, 295, 297, 298, 299, 472,
	0, 473, 0, 301, 926, 927, 302, 303, 304, 928,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 475, 929, 314, 315, 930, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 931, 328, 329, 331, 330, 0,
	0, 932, 0, 476, 477, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 0, 0, 340, 478, 933,
	341, 934, 479, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 480, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 935, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 0, 401, 381, 382, 402, 936, 403,
	484, 404, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 485, 0, 417, 418, 416,
	0, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	0, 486, 487, 488, 489, 0, 0, 426, 427, 490,
	428, 491, 0, 429, 430, 431, 0, 432, 433, 0,
	0, 434, 435, 436, 437, 439, 0, 440, 0, 438,
	441, 442, 443, 492, 493, 494, 0, 445, 444, 495,
	0, 0, 0, 0, 446, 447, 496, 448, 449, 450,
	1218, 0, 1143, 1142, 0, 0, 0, 0, 1140, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	451, 0, 0, 0, 0, 218, 219, 220, 452, 453,
	221, 454, 222, 223, 455, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 456, 457, 458, 0, 231,
	459, 0, 1047, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 922, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 460, 461, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 462, 263, 264,
	266, 269, 265, 270, 271, 272, 463, 464, 0, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 465, 276,
	277, 0, 278, 0, 279, 0, 0, 923, 280, 281,
	0, 282, 466, 0, 467, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 1217, 469, 470, 925, 0, 474,
	292, 0, 0, 0, 0, 291, 293, 300, 0, 924,
	294, 471, 296, 295, 297, 298, 299, 472, 0, 473,
	0, 301, 926, 927, 302, 303, 304, 928, 305, 306,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 475, 929, 314, 315, 930, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 931, 328, 329, 331, 330, 0, 0, 932,
	0, 476, 477, 332, 333, 0, 334, 335, 336, 0,
	0, 338, 339, 0, 0, 340, 478, 933, 341, 934,
	479, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 480, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 482, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 935, 375, 376, 377, 378, 483,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	0, 397, 398, 391, 393, 394, 395, 392, 396, 399,
	400, 0, 401, 381, 382, 402, 936, 403, 484, 404,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 414,
	410, 411, 412, 485, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 425, 0, 486,
	487, 488, 489, 0, 0, 426, 427, 490, 428, 491,
	0, 429, 430, 431, 0, 432, 433, 0, 0, 434,
	435, 436, 437, 439, 0, 440, 0, 438, 441, 442,
	443, 492, 493, 494, 0, 445, 444, 495, 0, 0,
	0, 0, 446, 447, 496, 448, 449, 450, 1215, 0,
	1143, 1142, 0, 0, 0, 0, 1140, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 451, 0,
	0, 0, 0, 218, 219, 220, 452, 453, 221, 454,
	222, 223, 455, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 456, 457, 458, 0, 231, 459, 0,
	1047, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 922,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 460, 461, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 462, 263, 264, 266, 269,
	265, 270, 271, 272, 463, 464, 0, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 465, 276, 277, 0,
	278, 0, 279, 0, 0, 923, 280, 281, 0, 282,
	466, 0, 467, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 1214, 469, 470, 925, 0, 474, 292, 0,
	0, 0, 0, 291, 293, 300, 0, 924, 294, 471,
	296, 295, 297, 298, 299, 472, 0, 473, 0, 301,
	926, 927, 302, 303, 304, 928, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 475,
	929, 314, 315, 930, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	931, 328, 329, 331, 330, 0, 0, 932, 0, 476,
	477, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 0, 0, 340, 478, 933, 341, 934, 479, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 480,
	350, 481, 351, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 482, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 935, 375, 376, 377, 378, 483, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 0, 397,
	398, 391, 393, 394, 395, 392, 396, 399, 400, 0,
	401, 381, 382, 402, 936, 403, 484, 404, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 414, 410, 411,
	412, 485, 0, 417, 418, 416, 0, 419, 420, 421,
	422, 423, 267, 424, 268, 425, 0, 486, 487, 488,
	489, 0, 0, 426, 427, 490, 428, 491, 0, 429,
	430, 431, 0, 432, 433, 0, 0, 434, 435, 436,
	437, 439, 0, 440, 0, 438, 441, 442, 443, 492,
	493, 494, 0, 445, 444, 495, 0, 0, 0, 0,
	446, 447, 496, 448, 449, 450, 1136, 0, 1143, 1142,
	0, 0, 0, 0, 1140, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 451, 0, 0, 0,
	0, 218, 219, 220, 452, 453, 221, 454, 222, 223,
	455, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 456, 457, 458, 0, 231, 459, 0, 1047, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 922, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 460, 461, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 462, 263, 264, 266, 269, 265, 270,
	271, 272, 463, 464, 0, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 465, 276, 277, 0, 278, 0,
	279, 0, 0, 923, 280, 281, 0, 282, 466, 0,
	467, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	1138, 469, 470, 925, 0, 474, 292, 0, 0, 0,
	0, 291, 293, 300, 0, 924, 294, 471, 296, 295,
	297, 298, 299, 472, 0, 473, 0, 301, 926, 927,
	302, 303, 304, 928, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 475, 929, 314,
	315, 930, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 931, 328,
	329, 331, 330, 0, 0, 932, 0, 476, 477, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 0,
	0, 340, 478, 933, 341, 934, 479, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 480, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	482, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	935, 375, 376, 377, 378, 483, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 0, 397, 398, 391,
	393, 394, 395, 392, 396, 399, 400, 0, 401, 381,
	382, 402, 936, 403, 484, 404, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 414, 410, 411, 412, 485,
	0, 417, 418, 416, 0, 419, 420, 421, 422, 423,
	267, 424, 268, 425, 0, 486, 487, 488, 489, 0,
	0, 426, 427, 490, 428, 491, 0, 429, 430, 431,
	0, 432, 433, 0, 0, 434, 435, 436, 437, 439,
	0, 440, 0, 438, 441, 442, 443, 492, 493, 494,
	0, 445, 444, 495, 0, 0, 0, 0, 446, 447,
	496, 448, 449, 450, 1143, 1142, 0, 0, 0, 0,
	1140, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 451, 0, 0, 0, 0, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 456, 457, 458,
	0, 231, 459, 0, 1047, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 922, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 460,
	461, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 463, 464,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 0, 279, 0, 0, 923,
	280, 281, 0, 282, 466, 0, 467, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 468, 469, 470, 925,
	0, 474, 292, 0, 0, 0, 0, 291, 293, 300,
	0, 924, 294, 471, 296, 295, 297, 298, 299, 472,
	0, 473, 0, 301, 926, 927, 302, 303, 304, 928,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 475, 929, 314, 315, 930, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 931, 328, 329, 331, 330, 0,
	0, 932, 0, 476, 477, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 0, 0, 340, 478, 933,
	341, 934, 479, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 480, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 935, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 0, 401, 381, 382, 402, 936, 403,
	484, 404, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 485, 0, 417, 418, 416,
	0, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	0, 486, 487, 488, 489, 0, 0, 426, 427, 490,
	428, 491, 0, 429, 430, 431, 0, 432, 433, 0,
	0, 434, 435, 436, 437, 439, 0, 440, 0, 438,
	441, 442, 443, 492, 493, 494, 0, 445, 444, 495,
	1143, 1142, 0, 0, 446, 447, 496, 448, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 451, 0,
	0, 0, 0, 218, 219, 220, 452, 453, 221, 454,
	222, 223, 455, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 456, 457, 458, 0, 231, 459, 0,
	1047, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 922,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 460, 461, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 462, 263, 264, 266, 269,
	265, 270, 271, 272, 463, 464, 0, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 465, 276, 277, 0,
	278, 0, 279, 0, 0, 923, 280, 281, 0, 282,
	466, 0, 467, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 468, 469, 470, 925, 0, 474, 292, 0,
	0, 0, 0, 291, 293, 300, 0, 924, 294, 471,
	296, 295, 297, 298, 299, 472, 0, 473, 0, 301,
	926, 927, 302, 303, 304, 928, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 475,
	929, 314, 315, 930, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	931, 328, 329, 331, 330, 0, 0, 932, 0, 476,
	477, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 0, 0, 340, 478, 933, 341, 934, 479, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 480,
	350, 481, 351, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 482, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 935, 375, 376, 377, 378, 483, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 0, 397,
	398, 391, 393, 394, 395, 392, 396, 399, 400, 0,
	401, 381, 382, 402, 936, 403, 484, 404, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 414, 410, 411,
	412, 485, 0, 417, 418, 416, 0, 419, 420, 421,
	422, 423, 267, 424, 268, 425, 0, 486, 487, 488,
	489, 0, 0, 426, 427, 490, 428, 491, 0, 429,
	430, 431, 0, 432, 433, 0, 0, 434, 435, 436,
	437, 439, 0, 440, 0, 438, 441, 442, 443, 492,
	493, 494, 1143, 445, 444, 495, 0, 0, 0, 0,
	446, 447, 496, 448, 449, 450, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	451, 0, 0, 0, 0, 218, 219, 220, 452, 453,
	221, 454, 222, 223, 455, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 456, 457, 458, 0, 231,
	459, 0, 1047, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 922, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 460, 461, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 462, 263, 264,
	266, 269, 265, 270, 271, 272, 463, 464, 0, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 465, 276,
	277, 0, 278, 0, 279, 0, 0, 923, 280, 281,
	0, 282, 466, 0, 467, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 468, 469, 470, 925, 0, 474,
	292, 0, 0, 0, 0, 291, 293, 300, 0, 924,
	294, 471, 296, 295, 297, 298, 299, 472, 0, 473,
	0, 301, 926, 927, 302, 303, 304, 928, 305, 306,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 475, 929, 314, 315, 930, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 931, 328, 329, 331, 330, 0, 0, 932,
	0, 476, 477, 332, 333, 0, 334, 335, 336, 0,
	0, 338, 339, 0, 0, 340, 478, 933, 341, 934,
	479, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 480, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 482, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 935, 375, 376, 377, 378, 483,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	0, 397, 398, 391, 393, 394, 395, 392, 396, 399,
	400, 0, 401, 381, 382, 402, 936, 403, 484, 404,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 414,
	410, 411, 412, 485, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 425, 0, 486,
	487, 488, 489, 0, 0, 426, 427, 490, 428, 491,
	0, 429, 430, 431, 0, 432, 433, 0, 0, 434,
	435, 436, 437, 439, 0, 440, 0, 438, 441, 442,
	443, 492, 493, 494, 206, 445, 444, 495, 0, 0,
	0, 0, 446, 447, 496, 448, 449, 450, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 451, 0, 0, 0, 0, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 456, 457, 458,
	2168, 231, 459, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 2165, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 460,
	461, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 463, 464,
	0, 2309, 0, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 0, 279, 2171, 0, 0,
	280, 281, 0, 282, 466, 0, 467, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 468, 469, 470, 0,
	0, 474, 292, 0, 0, 0, 2306, 291, 293, 300,
	0, 0, 294, 471, 296, 295, 297, 298, 299, 472,
	0, 473, 0, 2308, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 475, 0, 314, 315, 2305, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	0, 0, 0, 476, 477, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 0, 0, 340, 478, 0,
	341, 0, 479, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 480, 350, 481, 351, 2170, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 0, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 0, 401, 381, 382, 402, 0, 403,
	484, 404, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 485, 0, 417, 418, 416,
	0, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	0, 486, 487, 488, 489, 0, 0, 426, 427, 490,
	428, 491, 0, 429, 430, 431, 0, 432, 433, 0,
	2307, 434, 435, 436, 437, 439, 0, 440, 0, 438,
	441, 442, 443, 492, 493, 494, 206, 445, 444, 495,
	0, 0, 0, 0, 446, 447, 496, 448, 449, 450,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 451, 0, 0, 0, 0, 218,
	219, 220, 452, 453, 221, 454, 222, 223, 455, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 456,
	457, 458, 2168, 231, 459, 0, 0, 2162, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 2165, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 460, 461, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 462, 263, 264, 266, 269, 265, 270, 271, 272,
	463, 464, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 465, 276, 277, 0, 278, 0, 279, 2171,
	0, 0, 280, 281, 0, 282, 466, 0, 467, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 2161, 469,
	470, 0, 0, 474, 292, 0, 0, 0, 0, 291,
	293, 300, 0, 0, 294, 471, 296, 295, 297, 298,
	299, 472, 0, 473, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 475, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 0, 328, 329, 331,
	330, 0, 0, 0, 0, 476, 477, 332, 333, 0,
	334, 335, 336, 0, 0, 338, 339, 0, 0, 340,
	478, 0, 341, 0, 479, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 480, 350, 481, 351, 2170,
	352, 0, 353, 354, 355, 356, 357, 358, 482, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 0, 375,
	376, 377, 378, 483, 379, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 0, 397, 398, 391, 393, 394,
	395, 392, 396, 399, 400, 0, 401, 381, 382, 402,
	0, 403, 484, 404, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 414, 410, 411, 412, 485, 0, 417,
	418, 416, 0, 419, 420, 421, 422, 423, 267, 424,
	268, 425, 0, 486, 487, 488, 489, 0, 0, 426,
	427, 490, 428, 491, 0, 429, 430, 431, 0, 432,
	433, 0, 2169, 434, 435, 436, 437, 439, 0, 440,
	0, 438, 441, 442, 443, 492, 493, 494, 0, 445,
	444, 495, 1360, 0, 206, 0, 446, 447, 496, 448,
	449, 450, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 451, 0, 0, 0, 0, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 456, 457, 458,
	0, 231, 459, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 460,
	461, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 463, 464,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 466, 0, 467, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 468, 469, 470, 0,
	0, 474, 292, 0, 0, 0, 210, 291, 293, 300,
	0, 0, 294, 471, 296, 295, 297, 298, 299, 472,
	0, 473, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 475, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	211, 0, 0, 476, 477, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 0, 0, 340, 478, 0,
	341, 0, 479, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 480, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 0, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 1363, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 0, 401, 381, 382, 402, 0, 403,
	484, 404, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 485, 0, 417, 418, 416,
	1361, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	0, 486, 487, 488, 489, 0, 0, 426, 427, 490,
	428, 491, 0, 429, 430, 431, 0, 432, 433, 0,
	0, 434, 435, 436, 437, 439, 0, 440, 0, 438,
	441, 442, 443, 492, 493, 494, 0, 1362, 444, 495,
	1131, 0, 206, 0, 446, 447, 496, 448, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	451, 0, 0, 0, 0, 218, 219, 220, 452, 453,
	221, 454, 222, 223, 455, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 456, 457, 458, 0, 231,
	459, 0, 0, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 0, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 460, 461, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 462, 263, 264,
	266, 269, 265, 270, 271, 272, 463, 464, 0, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 465, 276,
	277, 0, 278, 0, 279, 0, 0, 0, 280, 281,
	0, 282, 466, 0, 467, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 1133, 469, 470, 0, 0, 474,
	292, 0, 0, 0, 210, 291, 293, 300, 0, 0,
	294, 471, 296, 295, 297, 298, 299, 472, 0, 473,
	0, 301, 0, 0, 302, 303, 304, 0, 305, 306,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 475, 0, 314, 315, 0, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 0, 328, 329, 331, 330, 0, 211, 0,
	0, 476, 477, 332, 333, 0, 334, 335, 336, 0,
	977, 338, 339, 0, 0, 340, 478, 0, 341, 0,
	479, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 480, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 482, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 0, 375, 376, 377, 378, 483,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	0, 397, 398, 391, 393, 394, 395, 392, 396, 399,
	400, 0, 401, 381, 382, 402, 0, 403, 484, 404,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 414,
	410, 411, 412, 485, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 425, 0, 486,
	487, 488, 489, 0, 0, 426, 427, 490, 428, 491,
	0, 429, 430, 431, 0, 432, 433, 0, 0, 434,
	435, 436, 437, 439, 0, 440, 0, 438, 441, 442,
	443, 492, 493, 494, 0, 445, 444, 495, 1128, 0,
	206, 0, 446, 447, 496, 448, 449, 450, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 451, 0,
	0, 0, 0, 218, 219, 220, 452, 453, 221, 454,
	222, 223, 455, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 456, 457, 458, 0, 231, 459, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 460, 461, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 462, 263, 264, 266, 269,
	265, 270, 271, 272, 463, 464, 0, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 465, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	466, 0, 467, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 1130, 469, 470, 0, 0, 474, 292, 0,
	0, 0, 210, 291, 293, 300, 0, 0, 294, 471,
	296, 295, 297, 298, 299, 472, 0, 473, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 475,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 211, 0, 0, 476,
	477, 332, 333, 0, 334, 335, 336, 0, 977, 338,
	339, 0, 0, 340, 478, 0, 341, 0, 479, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 480,
	350, 481, 351, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 482, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 0, 375, 376, 377, 378, 483, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 0, 397,
	398, 391, 393, 394, 395, 392, 396, 399, 400, 0,
	401, 381, 382, 402, 0, 403, 484, 404, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 414, 410, 411,
	412, 485, 0, 417, 418, 416, 0, 419, 420, 421,
	422, 423, 267, 424, 268, 425, 0, 486, 487, 488,
	489, 0, 0, 426, 427, 490, 428, 491, 0, 429,
	430, 431, 0, 432, 433, 0, 0, 434, 435, 436,
	437, 439, 0, 440, 0, 438, 441, 442, 443, 492,
	493, 494, 0, 445, 444, 495, 1035, 0, 206, 0,
	446, 447, 496, 448, 449, 450, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 451, 0, 0, 0,
	0, 218, 219, 220, 452, 453, 221, 454, 222, 223,
	455, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 456, 457, 458, 0, 231, 459, 0, 0, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 0, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 460, 461, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 462, 263, 264, 266, 269, 265, 270,
	271, 272, 463, 464, 0, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 465, 276, 277, 0, 278, 0,
	279, 0, 0, 0, 280, 281, 0, 282, 466, 0,
	467, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	1037, 469, 470, 0, 0, 474, 292, 0, 0, 0,
	210, 291, 293, 300, 0, 0, 294, 471, 296, 295,
	297, 298, 299, 472, 0, 473, 0, 301, 0, 0,
	302, 303, 304, 0, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 475, 0, 314,
	315, 0, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 0, 328,
	329, 331, 330, 0, 211, 0, 0, 476, 477, 332,
	333, 0, 334, 335, 336, 0, 977, 338, 339, 0,
	0, 340, 478, 0, 341, 0, 479, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 480, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	482, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	0, 375, 376, 377, 378, 483, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 0, 397, 398, 391,
	393, 394, 395, 392, 396, 399, 400, 0, 401, 381,
	382, 402, 0, 403, 484, 404, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 414, 410, 411, 412, 485,
	0, 417, 418, 416, 0, 419, 420, 421, 422, 423,
	267, 424, 268, 425, 0, 486, 487, 488, 489, 0,
	0, 426, 427, 490, 428, 491, 0, 429, 430, 431,
	0, 432, 433, 0, 0, 434, 435, 436, 437, 439,
	0, 440, 0, 438, 441, 442, 443, 492, 493, 494,
	0, 445, 444, 495, 527, 0, 206, 0, 446, 447,
	496, 448, 449, 450, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 526, 216, 516, 217,
	0, 0, 0, 0, 451, 0, 0, 0, 0, 218,
	219, 220, 452, 453, 221, 454, 222, 223, 455, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 456,
	457, 458, 0, 231, 459, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 519, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 460, 461, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 462, 263, 264, 266, 269, 265, 270, 271, 272,
	463, 464, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 465, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 520, 282, 466, 0, 467, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 468, 469,
	470, 0, 0, 474, 292, 0, 0, 0, 0, 291,
	293, 300, 0, 0, 294, 471, 296, 295, 297, 298,
	299, 472, 0, 473, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 475, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 0, 328, 329, 331,
	330, 0, 0, 0, 0, 476, 477, 332, 333, 0,
	334, 335, 336, 0, 0, 338, 339, 0, 0, 340,
	478, 0, 341, 0, 479, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 480, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 356, 357, 358, 482, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 0, 375,
	376, 377, 378, 483, 379, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 521, 397, 398, 391, 393, 394,
	395, 392, 396, 399, 400, 0, 401, 381, 382, 402,
	0, 403, 484, 404, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 414, 410, 411, 412, 485, 0, 417,
	418, 416, 0, 419, 420, 421, 422, 423, 267, 424,
	268, 425, 0, 486, 487, 488, 489, 0, 0, 426,
	427, 490, 428, 491, 0, 429, 430, 431, 0, 432,
	433, 0, 0, 434, 435, 436, 437, 439, 0, 440,
	0, 438, 441, 442, 443, 492, 493, 494, 0, 445,
	444, 495, 515, 0, 206, 0, 446, 447, 496, 448,
	449, 450, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 516, 217, 0, 0,
	0, 0, 451, 0, 0, 0, 0, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 456, 457, 458,
	0, 231, 459, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 519, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 460,
	461, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 520, 282, 466, 0, 467, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 468, 469, 470, 0,
	0, 474, 292, 0, 0, 0, 0, 291, 293, 300,
	0, 0, 294, 471, 296, 295, 297, 298, 299, 472,
	0, 473, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 475, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	0, 0, 0, 476, 477, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 0, 0, 340, 478, 0,
	341, 0, 479, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 480, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 0, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 521, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 0, 401, 381, 382, 402, 0, 403,
	484, 404, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 485, 0, 417, 418, 416,
	0, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	0, 486, 487, 488, 489, 0, 0, 426, 427, 490,
	428, 491, 0, 429, 430, 431, 0, 432, 433, 0,
	0, 434, 435, 436, 437, 439, 0, 440, 0, 438,
	441, 442, 443, 492, 493, 494, 206, 445, 444, 495,
	0, 0, 0, 0, 446, 447, 496, 448, 449, 450,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 451, 0, 0, 0, 0, 218,
	219, 220, 452, 453, 221, 454, 222, 223, 455, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 456,
	457, 458, 0, 231, 459, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 460, 461, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 462, 263, 264, 266, 269, 265, 270, 271, 272,
	463, 464, 0, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 465, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 0, 282, 466, 0, 467, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 468, 469,
	470, 0, 0, 474, 292, 0, 0, 0, 210, 291,
	293, 300, 0, 0, 294, 471, 296, 295, 297, 298,
	299, 472, 0, 473, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 475, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 0, 328, 329, 331,
	330, 0, 211, 0, 0, 476, 477, 332, 333, 0,
	334, 335, 336, 0, 977, 338, 339, 0, 0, 340,
	478, 0, 341, 0, 479, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 480, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 356, 357, 358, 482, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 0, 375,
	376, 377, 378, 483, 379, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 0, 397, 398, 391, 393, 394,
	395, 392, 396, 399, 400, 0, 401, 381, 382, 402,
	0, 403, 484, 404, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 414, 410, 411, 412, 485, 0, 417,
	418, 416, 0, 419, 420, 421, 422, 423, 267, 424,
	268, 425, 0, 486, 487, 488, 489, 0, 0, 426,
	427, 490, 428, 491, 0, 429, 430, 431, 0, 432,
	433, 0, 0, 434, 435, 436, 437, 439, 0, 440,
	0, 438, 441, 442, 443, 492, 493, 494, 0, 445,
	444, 495, 2238, 0, 206, 0, 446, 447, 496, 448,
	449, 450, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 451, 0, 0, 0, 0, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 456, 457, 458,
	0, 231, 459, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 460,
	461, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 463, 464,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 466, 0, 467, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 468, 469, 470, 0,
	0, 474, 292, 0, 0, 0, 210, 291, 293, 300,
	0, 0, 294, 471, 296, 295, 297, 298, 299, 472,
	0, 473, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 475, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	211, 0, 0, 476, 477, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 0, 0, 340, 478, 0,
	341, 0, 479, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 480, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 0, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 0, 401, 381, 382, 402, 0, 403,
	484, 404, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 485, 0, 417, 418, 416,
	0, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	0, 486, 487, 488, 489, 0, 0, 426, 427, 490,
	428, 491, 0, 429, 430, 431, 0, 432, 433, 0,
	0, 434, 435, 436, 437, 439, 0, 440, 0, 438,
	441, 442, 443, 492, 493, 494, 0, 445, 444, 495,
	1831, 0, 206, 0, 446, 447, 496, 448, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	451, 0, 0, 0, 0, 218, 219, 220, 452, 453,
	221, 454, 222, 223, 455, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 456, 457, 458, 0, 231,
	459, 0, 0, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 0, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 460, 461, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 462, 263, 264,
	266, 269, 265, 270, 271, 272, 463, 464, 0, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 465, 276,
	277, 0, 278, 0, 279, 0, 0, 0, 280, 281,
	0, 282, 466, 0, 467, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 468, 469, 470, 0, 0, 474,
	292, 0, 0, 0, 210, 291, 293, 300, 0, 0,
	294, 471, 296, 295, 297, 298, 299, 472, 0, 473,
	0, 301, 0, 0, 302, 303, 304, 0, 305, 306,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 475, 0, 314, 315, 0, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 0, 328, 329, 331, 330, 0, 211, 0,
	0, 476, 477, 332, 333, 0, 334, 335, 336, 0,
	0, 338, 339, 0, 0, 340, 478, 0, 341, 0,
	479, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 480, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 482, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 0, 375, 376, 377, 378, 483,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	0, 397, 398, 391, 393, 394, 395, 392, 396, 399,
	400, 0, 401, 381, 382, 402, 0, 403, 484, 404,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 414,
	410, 411, 412, 485, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 425, 0, 486,
	487, 488, 489, 0, 0, 426, 427, 490, 428, 491,
	0, 429, 430, 431, 0, 432, 433, 0, 0, 434,
	435, 436, 437, 439, 0, 440, 0, 438, 441, 442,
	443, 492, 493, 494, 206, 445, 444, 495, 0, 0,
	0, 0, 446, 447, 496, 448, 449, 450, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 451, 0, 0, 0, 0, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 456, 457, 458,
	0, 231, 459, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 460,
	461, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 463, 464,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 466, 0, 467, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 468, 469, 470, 0,
	0, 474, 292, 0, 0, 0, 210, 291, 293, 300,
	0, 0, 294, 471, 296, 295, 297, 298, 299, 472,
	0, 473, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 475, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	211, 0, 0, 476, 477, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 0, 0, 340, 478, 0,
	341, 0, 479, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 480, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 0, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 0, 401, 381, 382, 402, 0, 403,
	484, 404, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 485, 0, 417, 418, 416,
	1769, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	0, 486, 487, 488, 489, 0, 0, 426, 427, 490,
	428, 491, 0, 429, 430, 431, 0, 432, 433, 0,
	0, 434, 435, 436, 437, 439, 0, 440, 0, 438,
	441, 442, 443, 492, 493, 494, 0, 445, 444, 495,
	1762, 0, 206, 0, 446, 447, 496, 448, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	451, 0, 0, 0, 0, 218, 219, 220, 452, 453,
	221, 454, 222, 223, 455, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 456, 457, 458, 0, 231,
	459, 0, 0, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 0, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 460, 461, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 462, 263, 264,
	266, 269, 265, 270, 271, 272, 463, 464, 0, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 465, 276,
	277, 0, 278, 0, 279, 0, 0, 0, 280, 281,
	0, 282, 466, 0, 467, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 1761, 469, 470, 0, 0, 474,
	292, 0, 0, 0, 210, 291, 293, 300, 0, 0,
	294, 471, 296, 295, 297, 298, 299, 472, 0, 473,
	0, 301, 0, 0, 302, 303, 304, 0, 305, 306,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 475, 0, 314, 315, 0, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 0, 328, 329, 331, 330, 0, 211, 0,
	0, 476, 477, 332, 333, 0, 334, 335, 336, 0,
	0, 338, 339, 0, 0, 340, 478, 0, 341, 0,
	479, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 480, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 482, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 0, 375, 376, 377, 378, 483,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	0, 397, 398, 391, 393, 394, 395, 392, 396, 399,
	400, 0, 401, 381, 382, 402, 0, 403, 484, 404,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 414,
	410, 411, 412, 485, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 425, 0, 486,
	487, 488, 489, 0, 0, 426, 427, 490, 428, 491,
	0, 429, 430, 431, 0, 432, 433, 0, 0, 434,
	435, 436, 437, 439, 0, 440, 0, 438, 441, 442,
	443, 492, 493, 494, 0, 445, 444, 495, 1757, 0,
	206, 0, 446, 447, 496, 448, 449, 450, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 451, 0,
	0, 0, 0, 218, 219, 220, 452, 453, 221, 454,
	222, 223, 455, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 456, 457, 458, 0, 231, 459, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 460, 461, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 462, 263, 264, 266, 269,
	265, 270, 271, 272, 463, 464, 0, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 465, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	466, 0, 467, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 1759, 469, 470, 0, 0, 474, 292, 0,
	0, 0, 210, 291, 293, 300, 0, 0, 294, 471,
	296, 295, 297, 298, 299, 472, 0, 473, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 475,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 211, 0, 0, 476,
	477, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 0, 0, 340, 478, 0, 341, 0, 479, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 480,
	350, 481, 351, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 482, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 0, 375, 376, 377, 378, 483, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 0, 397,
	398, 391, 393, 394, 395, 392, 396, 399, 400, 0,
	401, 381, 382, 402, 0, 403, 484, 404, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 414, 410, 411,
	412, 485, 0, 417, 418, 416, 0, 419, 420, 421,
	422, 423, 267, 424, 268, 425, 0, 486, 487, 488,
	489, 0, 0, 426, 427, 490, 428, 491, 0, 429,
	430, 431, 0, 432, 433, 0, 0, 434, 435, 436,
	437, 439, 0, 440, 0, 438, 441, 442, 443, 492,
	493, 494, 0, 445, 444, 495, 1273, 0, 206, 0,
	446, 447, 496, 448, 449, 450, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 451, 0, 0, 0,
	0, 218, 219, 220, 452, 453, 221, 454, 222, 223,
	455, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 456, 457, 458, 0, 231, 459, 0, 0, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 0, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 460, 461, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 462, 263, 264, 266, 269, 265, 270,
	271, 272, 463, 464, 0, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 465, 276, 277, 0, 278, 0,
	279, 0, 0, 0, 280, 281, 0, 282, 466, 0,
	467, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	1272, 469, 470, 0, 0, 474, 292, 0, 0, 0,
	210, 291, 293, 300, 0, 0, 294, 471, 296, 295,
	297, 298, 299, 472, 0, 473, 0, 301, 0, 0,
	302, 303, 304, 0, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 475, 0, 314,
	315, 0, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 0, 328,
	329, 331, 330, 0, 211, 0, 0, 476, 477, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 0,
	0, 340, 478, 0, 341, 0, 479, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 480, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	482, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	0, 375, 376, 377, 378, 483, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 0, 397, 398, 391,
	393, 394, 395, 392, 396, 399, 400, 0, 401, 381,
	382, 402, 0, 403, 484, 404, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 414, 410, 411, 412, 485,
	0, 417, 418, 416, 0, 419, 420, 421, 422, 423,
	267, 424, 268, 425, 0, 486, 487, 488, 489, 0,
	0, 426, 427, 490, 428, 491, 0, 429, 430, 431,
	0, 432, 433, 0, 0, 434, 435, 436, 437, 439,
	0, 440, 0, 438, 441, 442, 443, 492, 493, 494,
	0, 445, 444, 495, 1270, 0, 206, 0, 446, 447,
	496, 448, 449, 450, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 451, 0, 0, 0, 0, 218,
	219, 220, 452, 453, 221, 454, 222, 223, 455, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 456,
	457, 458, 0, 231, 459, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 460, 461, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 462, 263, 264, 266, 269, 265, 270, 271, 272,
	463, 464, 0, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 465, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 0, 282, 466, 0, 467, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 1269, 469,
	470, 0, 0, 474, 292, 0, 0, 0, 210, 291,
	293, 300, 0, 0, 294, 471, 296, 295, 297, 298,
	299, 472, 0, 473, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 475, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 0, 328, 329, 331,
	330, 0, 211, 0, 0, 476, 477, 332, 333, 0,
	334, 335, 336, 0, 0, 338, 339, 0, 0, 340,
	478, 0, 341, 0, 479, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 480, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 356, 357, 358, 482, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 0, 375,
	376, 377, 378, 483, 379, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 0, 397, 398, 391, 393, 394,
	395, 392, 396, 399, 400, 0, 401, 381, 382, 402,
	0, 403, 484, 404, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 414, 410, 411, 412, 485, 0, 417,
	418, 416, 0, 419, 420, 421, 422, 423, 267, 424,
	268, 425, 0, 486, 487, 488, 489, 0, 0, 426,
	427, 490, 428, 491, 0, 429, 430, 431, 0, 432,
	433, 0, 0, 434, 435, 436, 437, 439, 0, 440,
	0, 438, 441, 442, 443, 492, 493, 494, 0, 445,
	444, 495, 1267, 0, 206, 0, 446, 447, 496, 448,
	449, 450, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 451, 0, 0, 0, 0, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 456, 457, 458,
	0, 231, 459, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 460,
	461, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 463, 464,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 466, 0, 467, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 1266, 469, 470, 0,
	0, 474, 292, 0, 0, 0, 210, 291, 293, 300,
	0, 0, 294, 471, 296, 295, 297, 298, 299, 472,
	0, 473, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 475, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	211, 0, 0, 476, 477, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 0, 0, 340, 478, 0,
	341, 0, 479, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 480, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 0, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 0, 401, 381, 382, 402, 0, 403,
	484, 404, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 485, 0, 417, 418, 416,
	0, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	0, 486, 487, 488, 489, 0, 0, 426, 427, 490,
	428, 491, 0, 429, 430, 431, 0, 432, 433, 0,
	0, 434, 435, 436, 437, 439, 0, 440, 0, 438,
	441, 442, 443, 492, 493, 494, 0, 445, 444, 495,
	1263, 0, 206, 0, 446, 447, 496, 448, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	451, 0, 0, 0, 0, 218, 219, 220, 452, 453,
	221, 454, 222, 223, 455, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 456, 457, 458, 0, 231,
	459, 0, 0, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 0, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 460, 461, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 462, 263, 264,
	266, 269, 265, 270, 271, 272, 463, 464, 0, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 465, 276,
	277, 0, 278, 0, 279, 0, 0, 0, 280, 281,
	0, 282, 466, 0, 467, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 1262, 469, 470, 0, 0, 474,
	292, 0, 0, 0, 210, 291, 293, 300, 0, 0,
	294, 471, 296, 295, 297, 298, 299, 472, 0, 473,
	0, 301, 0, 0, 302, 303, 304, 0, 305, 306,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 475, 0, 314, 315, 0, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 0, 328, 329, 331, 330, 0, 211, 0,
	0, 476, 477, 332, 333, 0, 334, 335, 336, 0,
	0, 338, 339, 0, 0, 340, 478, 0, 341, 0,
	479, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 480, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 482, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 0, 375, 376, 377, 378, 483,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	0, 397, 398, 391, 393, 394, 395, 392, 396, 399,
	400, 0, 401, 381, 382, 402, 0, 403, 484, 404,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 414,
	410, 411, 412, 485, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 425, 0, 486,
	487, 488, 489, 0, 0, 426, 427, 490, 428, 491,
	0, 429, 430, 431, 0, 432, 433, 0, 0, 434,
	435, 436, 437, 439, 0, 440, 0, 438, 441, 442,
	443, 492, 493, 494, 0, 445, 444, 495, 1238, 0,
	206, 0, 446, 447, 496, 448, 449, 450, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 451, 0,
	0, 0, 0, 218, 219, 220, 452, 453, 221, 454,
	222, 223, 455, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 456, 457, 458, 0, 231, 459, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 460, 461, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 462, 263, 264, 266, 269,
	265, 270, 271, 272, 463, 464, 0, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 465, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	466, 0, 467, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 468, 469, 470, 0, 0, 474, 292, 0,
	0, 0, 210, 291, 293, 300, 0, 0, 294, 471,
	296, 295, 297, 298, 299, 472, 0, 473, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 475,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 211, 0, 0, 476,
	477, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 0, 0, 340, 478, 0, 341, 0, 479, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 480,
	350, 481, 351, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 482, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 0, 375, 376, 377, 378, 483, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 0, 397,
	398, 391, 393, 394, 395, 392, 396, 399, 400, 0,
	401, 381, 382, 402, 0, 403, 484, 404, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 414, 410, 411,
	412, 485, 0, 417, 418, 416, 0, 419, 420, 421,
	422, 423, 267, 424, 268, 425, 0, 486, 487, 488,
	489, 0, 0, 426, 427, 490, 428, 491, 0, 429,
	430, 431, 0, 432, 433, 0, 0, 434, 435, 436,
	437, 439, 0, 440, 0, 438, 441, 442, 443, 492,
	493, 494, 0, 445, 444, 495, 1153, 0, 206, 0,
	446, 447, 496, 448, 449, 450, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 451, 0, 0, 0,
	0, 218, 219, 220, 452, 453, 221, 454, 222, 223,
	455, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 456, 457, 458, 0, 231, 459, 0, 0, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 0, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 460, 461, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 462, 263, 264, 266, 269, 265, 270,
	271, 272, 463, 464, 0, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 465, 276, 277, 0, 278, 0,
	279, 0, 0, 0, 280, 281, 0, 282, 466, 0,
	467, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	1155, 469, 470, 0, 0, 474, 292, 0, 0, 0,
	210, 291, 293, 300, 0, 0, 294, 471, 296, 295,
	297, 298, 299, 472, 0, 473, 0, 301, 0, 0,
	302, 303, 304, 0, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 475, 0, 314,
	315, 0, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 0, 328,
	329, 331, 330, 0, 211, 0, 0, 476, 477, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 0,
	0, 340, 478, 0, 341, 0, 479, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 480, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	482, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	0, 375, 376, 377, 378, 483, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 0, 397, 398, 391,
	393, 394, 395, 392, 396, 399, 400, 0, 401, 381,
	382, 402, 0, 403, 484, 404, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 414, 410, 411, 412, 485,
	0, 417, 418, 416, 0, 419, 420, 421, 422, 423,
	267, 424, 268, 425, 0, 486, 487, 488, 489, 0,
	0, 426, 427, 490, 428, 491, 0, 429, 430, 431,
	0, 432, 433, 0, 0, 434, 435, 436, 437, 439,
	0, 440, 0, 438, 441, 442, 443, 492, 493, 494,
	206, 445, 444, 495, 0, 0, 0, 0, 446, 447,
	496, 448, 449, 450, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 451, 0,
	0, 0, 0, 218, 219, 220, 452, 453, 221, 454,
	222, 223, 455, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 456, 457, 458, 0, 231, 459, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 460, 461, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 462, 263, 264, 266, 269,
	265, 270, 271, 272, 463, 464, 0, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 465, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	466, 0, 467, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 468, 469, 470, 0, 0, 474, 292, 0,
	0, 0, 210, 291, 293, 300, 0, 0, 294, 471,
	296, 295, 297, 298, 299, 472, 0, 473, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 475,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 211, 0, 0, 476,
	477, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 0, 0, 340, 478, 0, 341, 0, 479, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 480,
	350, 481, 351, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 482, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 0, 375, 376, 377, 378, 483, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 0, 397,
	398, 391, 393, 394, 395, 392, 396, 399, 400, 0,
	401, 381, 382, 402, 0, 403, 484, 404, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 414, 410, 411,
	412, 485, 0, 417, 418, 416, 0, 419, 420, 421,
	422, 423, 267, 424, 268, 425, 0, 486, 487, 488,
	489, 0, 0, 426, 427, 490, 428, 491, 0, 429,
	430, 431, 0, 432, 433, 0, 0, 434, 435, 436,
	437, 439, 0, 440, 0, 438, 441, 442, 443, 492,
	493, 494, 206, 445, 444, 495, 0, 0, 0, 0,
	446, 447, 496, 448, 449, 450, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	451, 0, 0, 0, 0, 218, 219, 220, 452, 453,
	221, 454, 222, 223, 455, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 456, 457, 458, 0, 231,
	459, 0, 0, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	519, 0, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 460, 461, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 462, 263, 264,
	266, 269, 265, 270, 271, 272, 463, 464, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 465, 276,
	277, 0, 278, 0, 279, 0, 0, 0, 280, 281,
	520, 282, 466, 0, 467, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 468, 469, 470, 0, 0, 474,
	292, 0, 0, 0, 0, 291, 293, 300, 0, 0,
	294, 471, 296, 295, 297, 298, 299, 472, 0, 473,
	0, 301, 0, 0, 302, 303, 304, 0, 305, 306,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 475, 0, 314, 315, 0, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 0, 328, 329, 331, 330, 0, 0, 0,
	0, 476, 477, 332, 333, 0, 334, 335, 336, 0,
	0, 338, 339, 0, 0, 340, 478, 0, 341, 0,
	479, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 480, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 482, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 0, 375, 376, 377, 378, 483,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	521, 397, 398, 391, 393, 394, 395, 392, 396, 399,
	400, 0, 401, 381, 382, 402, 0, 403, 484, 404,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 414,
	410, 411, 412, 485, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 425, 0, 486,
	487, 488, 489, 0, 0, 426, 427, 490, 428, 491,
	0, 429, 430, 431, 0, 432, 433, 0, 0, 434,
	435, 436, 437, 439, 0, 440, 0, 438, 441, 442,
	443, 492, 493, 494, 0, 445, 444, 495, 665, 0,
	206, 0, 446, 447, 496, 448, 449, 450, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 451, 0,
	0, 0, 0, 218, 219, 220, 452, 453, 221, 454,
	222, 223, 455, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 456, 457, 458, 0, 231, 459, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 460, 461, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 462, 263, 264, 266, 269,
	265, 270, 271, 272, 463, 464, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 465, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	466, 0, 467, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 468, 469, 470, 0, 0, 474, 292, 0,
	0, 0, 0, 291, 293, 300, 0, 0, 294, 471,
	296, 295, 297, 298, 299, 472, 0, 473, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 475,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 0, 0, 0, 476,
	477, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 0, 0, 340, 478, 0, 341, 0, 479, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 480,
	350, 481, 351, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 482, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 0, 375, 376, 377, 378, 483, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 0, 397,
	398, 391, 393, 394, 395, 392, 396, 399, 400, 0,
	401, 381, 382, 402, 0, 403, 484, 404, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 414, 410, 411,
	412, 485, 0, 417, 418, 416, 664, 419, 420, 421,
	422, 423, 267, 424, 268, 425, 0, 486, 487, 488,
	489, 0, 0, 426, 427, 490, 428, 491, 0, 429,
	430, 431, 0, 432, 433, 0, 0, 434, 435, 436,
	437, 439, 0, 440, 0, 438, 441, 442, 443, 492,
	493, 494, 0, 445, 444, 495, 504, 0, 206, 0,
	446, 447, 496, 448, 449, 450, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	503, 217, 0, 0, 0, 0, 451, 0, 0, 0,
	0, 218, 219, 220, 452, 453, 221, 454, 222, 223,
	455, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 456, 457, 458, 0, 231, 459, 0, 0, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 0, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 460, 461, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 462, 263, 264, 266, 269, 265, 270,
	271, 272, 463, 464, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 465, 276, 277, 0, 278, 0,
	279, 0, 0, 0, 280, 281, 0, 282, 466, 0,
	467, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	468, 469, 470, 0, 0, 474, 292, 0, 0, 0,
	0, 291, 293, 300, 0, 0, 294, 471, 296, 295,
	297, 298, 299, 472, 0, 473, 0, 301, 0, 0,
	302, 303, 304, 0, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 475, 0, 314,
	315, 0, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 0, 328,
	329, 331, 330, 0, 0, 0, 0, 476, 477, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 0,
	0, 340, 478, 0, 341, 0, 479, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 480, 350, 481,
	502, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	482, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	0, 375, 376, 377, 378, 483, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 0, 397, 398, 391,
	393, 394, 395, 392, 396, 399, 400, 0, 401, 381,
	382, 402, 0, 403, 484, 404, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 414, 410, 411, 412, 485,
	0, 417, 418, 416, 0, 419, 420, 421, 422, 423,
	267, 424, 268, 425, 0, 486, 487, 488, 489, 0,
	0, 426, 427, 490, 428, 491, 0, 429, 430, 431,
	0, 432, 433, 0, 0, 434, 435, 436, 437, 439,
	0, 440, 0, 438, 441, 442, 443, 492, 493, 494,
	206, 445, 444, 495, 0, 0, 0, 0, 446, 447,
	496, 448, 449, 450, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 451, 0,
	2104, 0, 0, 218, 219, 220, 452, 453, 221, 454,
	222, 223, 455, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 456, 457, 458, 0, 231, 459, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 460, 461, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 462, 263, 264, 266, 269,
	265, 270, 271, 272, 463, 464, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 465, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	466, 0, 467, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 468, 469, 470, 0, 0, 474, 292, 0,
	0, 0, 0, 291, 293, 300, 0, 0, 294, 471,
	296, 295, 297, 298, 299, 472, 0, 473, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 475,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 0, 0, 0, 476,
	477, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 0, 0, 340, 478, 0, 341, 0, 479, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 480,
	350, 481, 351, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 482, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 0, 375, 376, 377, 378, 483, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 0, 397,
	398, 391, 393, 394, 395, 392, 396, 399, 400, 0,
	401, 381, 382, 402, 0, 403, 484, 404, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 414, 410, 411,
	412, 485, 0, 417, 418, 416, 0, 419, 420, 421,
	422, 423, 267, 424, 268, 425, 0, 486, 487, 488,
	489, 0, 0, 426, 427, 490, 428, 491, 0, 429,
	430, 431, 0, 432, 433, 0, 0, 434, 435, 436,
	437, 439, 0, 440, 0, 438, 441, 442, 443, 492,
	493, 494, 0, 445, 444, 495, 206, 2296, 0, 0,
	446, 447, 496, 448, 449, 450, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 451, 0, 0, 0, 0, 218,
	219, 220, 452, 453, 221, 454, 222, 223, 455, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 456,
	457, 458, 0, 231, 459, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 460, 461, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 462, 263, 264, 266, 269, 265, 270, 271, 272,
	463, 464, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 465, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 0, 282, 466, 0, 467, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 468, 469,
	470, 0, 0, 474, 292, 0, 0, 0, 0, 291,
	293, 300, 0, 0, 294, 471, 296, 295, 297, 298,
	299, 472, 0, 473, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 475, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 0, 328, 329, 331,
	330, 0, 0, 0, 0, 476, 477, 332, 333, 0,
	334, 335, 336, 0, 0, 338, 339, 0, 0, 340,
	478, 0, 341, 0, 479, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 480, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 356, 357, 358, 482, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 0, 375,
	376, 377, 378, 483, 379, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 0, 397, 398, 391, 393, 394,
	395, 392, 396, 399, 400, 0, 401, 381, 382, 402,
	0, 403, 484, 404, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 414, 410, 411, 412, 485, 0, 417,
	418, 416, 0, 419, 420, 421, 422, 423, 267, 424,
	268, 425, 0, 486, 487, 488, 489, 0, 0, 426,
	427, 490, 428, 491, 0, 429, 430, 431, 0, 432,
	433, 0, 0, 434, 435, 436, 437, 439, 0, 440,
	0, 438, 441, 442, 443, 492, 493, 494, 206, 445,
	444, 495, 0, 0, 0, 0, 446, 447, 496, 448,
	449, 450, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 451, 0, 0, 0,
	0, 218, 219, 220, 452, 453, 221, 454, 222, 223,
	455, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 456, 457, 458, 0, 231, 459, 0, 0, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 0, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 460, 461, 2858, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 462, 263, 264, 266, 269, 265, 270,
	271, 272, 463, 464, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 465, 276, 277, 0, 278, 0,
	279, 0, 0, 0, 280, 281, 0, 282, 466, 0,
	467, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	468, 469, 470, 0, 0, 474, 292, 0, 0, 0,
	0, 291, 293, 300, 0, 0, 294, 471, 296, 295,
	297, 298, 299, 472, 0, 473, 0, 301, 0, 0,
	302, 303, 304, 0, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 475, 0, 314,
	315, 0, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 0, 328,
	329, 331, 330, 0, 0, 0, 0, 476, 477, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 0,
	0, 340, 478, 0, 341, 0, 479, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 480, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	482, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	0, 375, 376, 377, 378, 483, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 0, 397, 398, 391,
	393, 394, 395, 392, 396, 399, 400, 0, 401, 381,
	382, 402, 0, 403, 484, 404, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 414, 410, 411, 412, 485,
	0, 417, 418, 416, 0, 419, 420, 421, 422, 423,
	267, 424, 268, 425, 0, 486, 487, 488, 489, 0,
	0, 426, 427, 490, 428, 491, 0, 429, 430, 431,
	0, 432, 433, 0, 0, 434, 435, 436, 437, 439,
	0, 440, 0, 438, 441, 442, 443, 492, 493, 494,
	0, 445, 444, 495, 206, 2296, 0, 0, 446, 447,
	496, 448, 449, 450, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 451, 0, 0, 0, 0, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 456, 457, 458,
	0, 231, 459, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 460,
	461, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 466, 0, 467, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 468, 469, 470, 0,
	0, 474, 292, 0, 0, 0, 0, 291, 293, 300,
	0, 0, 294, 471, 296, 295, 297, 298, 299, 472,
	0, 473, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 475, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	0, 0, 0, 476, 477, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 2293, 0, 0, 340, 478, 0,
	341, 0, 479, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 480, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 0, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 0, 401, 381, 382, 402, 0, 403,
	484, 404, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 485, 0, 417, 418, 416,
	0, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	0, 486, 487, 488, 489, 0, 0, 426, 427, 490,
	428, 491, 0, 429, 430, 431, 0, 432, 433, 0,
	0, 434, 435, 436, 437, 439, 0, 440, 0, 438,
	441, 442, 443, 492, 493, 494, 206, 445, 444, 495,
	0, 0, 0, 0, 446, 447, 496, 448, 449, 450,
	0, 0, 0, 212, 213, 214, 215, 216, 1837, 217,
	0, 0, 0, 0, 451, 0, 0, 0, 0, 218,
	219, 220, 452, 453, 221, 454, 222, 223, 455, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 456,
	457, 458, 0, 231, 459, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 460, 461, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 462, 263, 264, 266, 269, 265, 270, 271, 272,
	463, 464, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 465, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 0, 282, 466, 0, 467, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 468, 469,
	470, 0, 0, 474, 292, 0, 0, 0, 0, 291,
	293, 300, 0, 0, 294, 471, 296, 295, 297, 298,
	299, 472, 0, 473, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 475, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 0, 328, 329, 331,
	330, 0, 0, 0, 0, 476, 477, 332, 333, 0,
	334, 335, 336, 0, 0, 338, 339, 0, 0, 340,
	478, 0, 341, 0, 479, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 480, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 356, 357, 358, 482, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 0, 375,
	376, 377, 378, 483, 379, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 0, 397, 398, 391, 393, 394,
	395, 392, 396, 399, 400, 0, 401, 381, 382, 402,
	0, 403, 484, 404, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 414, 410, 411, 412, 485, 0, 417,
	418, 416, 0, 419, 420, 421, 422, 423, 267, 424,
	268, 425, 0, 486, 487, 488, 489, 0, 0, 426,
	427, 490, 428, 491, 0, 429, 430, 431, 0, 432,
	433, 0, 0, 434, 435, 436, 437, 439, 0, 440,
	0, 438, 441, 442, 443, 492, 493, 494, 0, 445,
	444, 495, 1829, 0, 206, 0, 446, 447, 496, 448,
	449, 450, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 451, 0, 0, 0, 0, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 456, 457, 458,
	0, 231, 459, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 460,
	461, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 466, 0, 467, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 468, 469, 470, 0,
	0, 474, 292, 0, 0, 0, 0, 291, 293, 300,
	0, 0, 294, 471, 296, 295, 297, 298, 299, 472,
	0, 473, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 475, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	0, 0, 0, 476, 477, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 0, 0, 340, 478, 0,
	341, 0, 479, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 480, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 0, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 0, 401, 381, 382, 402, 0, 403,
	484, 404, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 485, 0, 417, 418, 416,
	0, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	0, 486, 487, 488, 489, 0, 0, 426, 427, 490,
	428, 491, 0, 429, 430, 431, 0, 432, 433, 0,
	0, 434, 435, 436, 437, 439, 0, 440, 0, 438,
	441, 442, 443, 492, 493, 494, 0, 445, 444, 495,
	547, 0, 206, 0, 446, 447, 496, 448, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	451, 0, 0, 0, 0, 218, 219, 220, 452, 453,
	221, 454, 222, 223, 455, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 456, 457, 1013, 0, 231,
	459, 0, 0, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 0, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 460, 461, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 462, 263, 264,
	266, 269, 265, 270, 271, 272, 463, 464, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 465, 276,
	277, 0, 278, 0, 279, 0, 0, 0, 280, 281,
	0, 282, 466, 0, 467, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 468, 469, 470, 0, 0, 474,
	292, 0, 0, 0, 0, 291, 293, 300, 0, 0,
	294, 471, 296, 295, 297, 298, 299, 472, 0, 473,
	0, 301, 0, 0, 302, 303, 304, 0, 305, 306,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 475, 0, 314, 315, 0, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 548, 0, 328, 329, 331, 330, 0, 0, 0,
	0, 476, 477, 332, 333, 0, 334, 335, 336, 0,
	0, 338, 339, 0, 0, 340, 478, 0, 341, 0,
	479, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 480, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 482, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 0, 375, 376, 377, 378, 483,
	379, 0, 380, 384, 385, 544, 387, 388, 389, 390,
	0, 397, 398, 391, 393, 394, 395, 392, 396, 399,
	400, 0, 401, 381, 382, 402, 0, 403, 484, 404,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 414,
	410, 411, 412, 485, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 425, 0, 543,
	487, 488, 489, 0, 0, 426, 427, 490, 428, 491,
	0, 429, 430, 431, 0, 432, 433, 0, 0, 434,
	435, 436, 437, 439, 0, 440, 0, 438, 441, 442,
	443, 492, 493, 494, 0, 445, 444, 495, 1781, 0,
	206, 0, 446, 447, 496, 448, 449, 450, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 451, 0,
	0, 0, 0, 218, 219, 220, 452, 453, 221, 454,
	222, 223, 455, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 456, 457, 458, 0, 231, 459, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 460, 461, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 462, 263, 264, 266, 269,
	265, 270, 271, 272, 463, 464, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 465, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	466, 0, 467, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 1780, 469, 470, 0, 0, 474, 292, 0,
	0, 0, 0, 291, 293, 300, 0, 0, 294, 471,
	296, 295, 297, 298, 299, 472, 0, 473, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 475,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 0, 0, 0, 476,
	477, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 0, 0, 340, 478, 0, 341, 0, 479, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 480,
	350, 481, 351, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 482, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 0, 375, 376, 377, 378, 483, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 0, 397,
	398, 391, 393, 394, 395, 392, 396, 399, 400, 0,
	401, 381, 382, 402, 0, 403, 484, 404, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 414, 410, 411,
	412, 485, 0, 417, 418, 416, 0, 419, 420, 421,
	422, 423, 267, 424, 268, 425, 0, 486, 487, 488,
	489, 0, 0, 426, 427, 490, 428, 491, 0, 429,
	430, 431, 0, 432, 433, 0, 0, 434, 435, 436,
	437, 439, 0, 440, 0, 438, 441, 442, 443, 492,
	493, 494, 0, 445, 444, 495, 547, 0, 206, 0,
	446, 447, 496, 448, 449, 450, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 451, 0, 0, 0,
	0, 218, 219, 220, 452, 453, 221, 454, 222, 223,
	455, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 456, 457, 458, 0, 537, 459, 0, 0, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 0, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 460, 461, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 462, 263, 264, 266, 269, 265, 270,
	271, 272, 463, 464, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 465, 276, 277, 0, 278, 0,
	279, 0, 0, 0, 280, 281, 0, 282, 466, 0,
	467, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	468, 469, 470, 0, 0, 474, 292, 0, 0, 0,
	0, 291, 293, 300, 0, 0, 294, 471, 296, 295,
	297, 298, 299, 472, 0, 473, 0, 301, 0, 0,
	302, 303, 304, 0, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 475, 0, 314,
	315, 0, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 548, 0, 328,
	329, 331, 330, 0, 0, 0, 0, 476, 477, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 0,
	0, 340, 478, 0, 341, 0, 479, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 480, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	482, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	0, 375, 376, 377, 378, 483, 379, 0, 380, 384,
	385, 544, 387, 388, 389, 390, 0, 397, 398, 391,
	393, 394, 395, 392, 396, 1292, 400, 0, 401, 381,
	382, 402, 0, 403, 484, 404, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 414, 410, 411, 412, 485,
	0, 417, 418, 416, 0, 419, 420, 421, 422, 423,
	267, 424, 268, 425, 0, 543, 487, 488, 489, 0,
	0, 426, 427, 490, 428, 491, 0, 429, 430, 431,
	0, 432, 433, 0, 0, 434, 435, 436, 437, 439,
	0, 440, 0, 438, 441, 442, 443, 492, 493, 494,
	0, 445, 444, 495, 1277, 0, 206, 0, 446, 447,
	496, 448, 449, 450, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 451, 0, 0, 0, 0, 218,
	219, 220, 452, 453, 221, 454, 222, 223, 455, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 456,
	457, 458, 0, 231, 459, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 460, 461, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 462, 263, 264, 266, 269, 265, 270, 271, 272,
	463, 464, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 465, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 0, 282, 466, 0, 467, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 1276, 469,
	470, 0, 0, 474, 292, 0, 0, 0, 0, 291,
	293, 300, 0, 0, 294, 471, 296, 295, 297, 298,
	299, 472, 0, 473, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 475, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 0, 328, 329, 331,
	330, 0, 0, 0, 0, 476, 477, 332, 333, 0,
	334, 335, 336, 0, 0, 338, 339, 0, 0, 340,
	478, 0, 341, 0, 479, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 480, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 356, 357, 358, 482, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 0, 375,
	376, 377, 378, 483, 379, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 0, 397, 398, 391, 393, 394,
	395, 392, 396, 399, 400, 0, 401, 381, 382, 402,
	0, 403, 484, 404, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 414, 410, 411, 412, 485, 0, 417,
	418, 416, 0, 419, 420, 421, 422, 423, 267, 424,
	268, 425, 0, 486, 487, 488, 489, 0, 0, 426,
	427, 490, 428, 491, 0, 429, 430, 431, 0, 432,
	433, 0, 0, 434, 435, 436, 437, 439, 0, 440,
	0, 438, 441, 442, 443, 492, 493, 494, 0, 445,
	444, 495, 1226, 0, 206, 0, 446, 447, 496, 448,
	449, 450, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 451, 0, 0, 0, 0, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 456, 457, 458,
	0, 231, 459, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 460,
	461, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 466, 0, 467, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 1225, 469, 470, 0,
	0, 474, 292, 0, 0, 0, 0, 291, 293, 300,
	0, 0, 294, 471, 296, 295, 297, 298, 299, 472,
	0, 473, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 475, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	0, 0, 0, 476, 477, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 0, 0, 340, 478, 0,
	341, 0, 479, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 480, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 0, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 0, 401, 381, 382, 402, 0, 403,
	484, 404, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 485, 0, 417, 418, 416,
	0, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	0, 486, 487, 488, 489, 0, 0, 426, 427, 490,
	428, 491, 0, 429, 430, 431, 0, 432, 433, 0,
	0, 434, 435, 436, 437, 439, 0, 440, 0, 438,
	441, 442, 443, 492, 493, 494, 0, 445, 444, 495,
	1210, 0, 206, 0, 446, 447, 496, 448, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	451, 0, 0, 0, 0, 218, 219, 220, 452, 453,
	221, 454, 222, 223, 455, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 456, 457, 458, 0, 231,
	459, 0, 0, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 0, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 460, 461, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 462, 263, 264,
	266, 269, 265, 270, 271, 272, 463, 464, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 465, 276,
	277, 0, 278, 0, 279, 0, 0, 0, 280, 281,
	0, 282, 466, 0, 467, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 468, 469, 470, 0, 0, 474,
	292, 0, 0, 0, 0, 291, 293, 300, 0, 0,
	294, 471, 296, 295, 297, 298, 299, 472, 0, 473,
	0, 301, 0, 0, 302, 303, 304, 0, 305, 306,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 475, 0, 314, 315, 0, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 0, 328, 329, 331, 330, 0, 0, 0,
	0, 476, 477, 332, 333, 0, 334, 335, 336, 0,
	0, 338, 339, 0, 0, 340, 478, 0, 341, 0,
	479, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 480, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 482, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 0, 375, 376, 377, 378, 483,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	0, 397, 398, 391, 393, 394, 395, 392, 396, 399,
	400, 0, 401, 381, 382, 402, 0, 403, 484, 404,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 414,
	410, 411, 412, 485, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 425, 0, 486,
	487, 488, 489, 0, 0, 426, 427, 490, 428, 491,
	0, 429, 430, 431, 0, 432, 433, 0, 0, 434,
	435, 436, 437, 439, 0, 440, 0, 438, 441, 442,
	443, 492, 493, 494, 0, 445, 444, 495, 1147, 0,
	206, 0, 446, 447, 496, 448, 449, 450, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 451, 0,
	0, 0, 0, 218, 219, 220, 452, 453, 221, 454,
	222, 223, 455, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 456, 457, 458, 0, 231, 459, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 460, 461, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 462, 263, 264, 266, 269,
	265, 270, 271, 272, 463, 464, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 465, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	466, 0, 467, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 468, 469, 470, 0, 0, 474, 292, 0,
	0, 0, 0, 291, 293, 300, 0, 0, 294, 471,
	296, 295, 297, 298, 299, 472, 0, 473, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 475,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 0, 0, 0, 476,
	477, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 0, 0, 340, 478, 0, 341, 0, 479, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 480,
	350, 481, 351, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 482, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 0, 375, 376, 377, 378, 483, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 0, 397,
	398, 391, 393, 394, 395, 392, 396, 399, 400, 0,
	401, 381, 382, 402, 0, 403, 484, 404, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 414, 410, 411,
	412, 485, 0, 417, 418, 416, 0, 419, 420, 421,
	422, 423, 267, 424, 268, 425, 0, 486, 487, 488,
	489, 0, 0, 426, 427, 490, 428, 491, 0, 429,
	430, 431, 0, 432, 433, 0, 0, 434, 435, 436,
	437, 439, 0, 440, 0, 438, 441, 442, 443, 492,
	493, 494, 0, 445, 444, 495, 547, 0, 206, 0,
	446, 447, 496, 448, 449, 450, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 451, 0, 0, 0,
	0, 218, 219, 220, 452, 453, 221, 454, 222, 223,
	455, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 456, 457, 1013, 0, 231, 459, 0, 0, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 0, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 460, 461, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 462, 263, 264, 266, 269, 265, 270,
	271, 272, 463, 464, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 465, 276, 277, 0, 278, 0,
	279, 0, 0, 0, 280, 281, 0, 282, 466, 0,
	467, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	468, 469, 470, 0, 0, 474, 292, 0, 0, 0,
	0, 291, 293, 300, 0, 0, 294, 471, 296, 295,
	297, 298, 299, 472, 0, 473, 0, 301, 0, 0,
	302, 303, 304, 0, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 475, 0, 314,
	315, 0, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 548, 0, 328,
	329, 331, 330, 0, 0, 0, 0, 476, 477, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 0,
	0, 340, 478, 0, 341, 0, 479, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 480, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	482, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	0, 375, 376, 377, 378, 483, 379, 0, 380, 384,
	385, 544, 387, 388, 389, 390, 0, 397, 398, 391,
	393, 394, 395, 392, 396, 399, 400, 0, 401, 381,
	382, 402, 0, 403, 484, 404, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 414, 410, 411, 412, 485,
	0, 417, 418, 416, 0, 419, 420, 421, 422, 423,
	267, 424, 268, 425, 0, 543, 487, 488, 489, 0,
	0, 426, 1014, 490, 428, 491, 0, 429, 430, 431,
	0, 432, 433, 0, 0, 434, 435, 436, 437, 439,
	0, 440, 0, 438, 441, 442, 443, 492, 493, 494,
	206, 445, 444, 495, 0, 0, 0, 0, 446, 447,
	496, 448, 449, 450, 0, 0, 0, 212, 213, 214,
	215, 216, 996, 217, 0, 0, 0, 0, 451, 0,
	0, 0, 0, 218, 219, 220, 452, 453, 221, 454,
	222, 223, 455, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 456, 457, 458, 0, 231, 459, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 460, 461, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 462, 263, 264, 266, 269,
	265, 270, 271, 272, 463, 464, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 465, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	466, 0, 467, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 468, 469, 470, 0, 0, 474, 292, 0,
	0, 0, 0, 291, 293, 300, 0, 0, 294, 471,
	296, 295, 297, 298, 299, 472, 0, 473, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 475,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 0, 0, 0, 476,
	477, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 0, 0, 340, 478, 0, 341, 0, 479, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 480,
	350, 481, 351, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 482, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 0, 375, 376, 377, 378, 483, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 0, 397,
	398, 391, 393, 394, 395, 392, 396, 399, 400, 0,
	401, 381, 382, 402, 0, 403, 484, 404, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 414, 410, 411,
	412, 485, 0, 417, 418, 416, 0, 419, 420, 421,
	422, 423, 267, 424, 268, 425, 0, 486, 487, 488,
	489, 0, 0, 426, 427, 490, 428, 491, 0, 429,
	430, 431, 0, 432, 433, 0, 0, 434, 435, 436,
	437, 439, 0, 440, 0, 438, 441, 442, 443, 492,
	493, 494, 0, 445, 444, 495, 547, 0, 206, 0,
	446, 447, 496, 448, 449, 450, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 451, 0, 0, 0,
	0, 218, 219, 220, 452, 453, 221, 454, 222, 223,
	455, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 456, 457, 458, 0, 537, 459, 0, 0, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 535, 0, 242, 243, 244, 0, 0, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 460, 461, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 462, 263, 264, 266, 269, 265, 270,
	271, 272, 463, 464, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 465, 276, 277, 0, 278, 0,
	279, 0, 0, 0, 280, 281, 0, 282, 466, 0,
	467, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	468, 469, 470, 0, 0, 474, 292, 0, 0, 0,
	0, 291, 293, 300, 0, 0, 294, 471, 296, 295,
	297, 298, 299, 472, 0, 473, 0, 301, 0, 0,
	302, 303, 304, 0, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 475, 0, 314,
	315, 0, 0, 316, 536, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 548, 0, 328,
	329, 331, 330, 0, 0, 0, 0, 476, 477, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 0,
	0, 340, 478, 0, 341, 0, 479, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 480, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	482, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	0, 375, 376, 377, 378, 538, 379, 0, 380, 384,
	385, 544, 387, 388, 389, 390, 0, 397, 398, 391,
	393, 394, 395, 392, 396, 539, 400, 0, 401, 381,
	382, 402, 0, 403, 484, 404, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 414, 410, 411, 412, 485,
	0, 417, 418, 416, 0, 419, 420, 421, 422, 423,
	267, 424, 268, 425, 0, 543, 487, 488, 489, 0,
	0, 426, 541, 490, 428, 491, 0, 429, 430, 431,
	0, 432, 433, 0, 0, 434, 435, 436, 437, 439,
	0, 440, 0, 438, 441, 442, 443, 492, 493, 494,
	0, 445, 444, 495, 531, 0, 206, 0, 446, 447,
	496, 448, 449, 450, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 451, 0, 0, 0, 0, 218,
	219, 220, 452, 453, 221, 454, 222, 223, 455, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 456,
	457, 458, 0, 231, 459, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 460, 461, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 462, 263, 264, 266, 269, 265, 270, 271, 272,
	463, 464, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 465, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 0, 282, 466, 0, 467, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 468, 469,
	470, 0, 0, 474, 292, 0, 0, 0, 0, 291,
	293, 300, 0, 0, 294, 471, 296, 295, 297, 298,
	299, 472, 0, 473, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 475, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 0, 328, 329, 331,
	330, 0, 0, 0, 0, 476, 477, 332, 333, 0,
	334, 335, 336, 0, 0, 338, 339, 0, 0, 340,
	478, 0, 341, 0, 479, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 480, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 356, 357, 358, 482, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 0, 375,
	376, 377, 378, 483, 379, 0, 380, 532, 385, 386,
	387, 388, 389, 390, 0, 397, 398, 391, 393, 394,
	395, 392, 396, 399, 400, 0, 401, 381, 382, 402,
	0, 403, 484, 404, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 414, 410, 411, 412, 485, 0, 417,
	418, 416, 0, 419, 420, 421, 422, 423, 267, 424,
	268, 425, 0, 486, 487, 488, 489, 0, 0, 426,
	427, 490, 428, 491, 0, 429, 430, 431, 0, 432,
	433, 0, 0, 434, 435, 436, 437, 439, 0, 440,
	0, 438, 441, 442, 443, 492, 493, 494, 0, 445,
	444, 495, 529, 0, 206, 0, 446, 447, 496, 448,
	449, 450, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 451, 0, 0, 0, 0, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 456, 457, 458,
	0, 231, 459, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 460,
	461, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 466, 0, 467, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 468, 469, 470, 0,
	0, 474, 292, 0, 0, 0, 0, 291, 293, 300,
	0, 0, 294, 471, 296, 295, 297, 298, 299, 472,
	0, 473, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 475, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	0, 0, 0, 476, 477, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 0, 0, 340, 478, 0,
	341, 0, 479, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 480, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 0, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 0, 401, 381, 382, 402, 0, 403,
	484, 404, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 485, 0, 417, 418, 416,
	0, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	0, 486, 487, 488, 489, 0, 0, 426, 427, 490,
	428, 491, 0, 429, 430, 431, 0, 432, 433, 0,
	0, 434, 435, 436, 437, 439, 0, 440, 0, 438,
	441, 442, 443, 492, 493, 494, 0, 445, 444, 495,
	523, 0, 206, 0, 446, 447, 496, 448, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	451, 0, 0, 0, 0, 218, 219, 220, 452, 453,
	221, 454, 222, 223, 455, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 456, 457, 458, 0, 231,
	459, 0, 0, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 0, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 460, 461, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 462, 263, 264,
	266, 269, 265, 270, 271, 272, 463, 464, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 465, 276,
	277, 0, 278, 0, 279, 0, 0, 0, 280, 281,
	0, 282, 466, 0, 467, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 468, 469, 470, 0, 0, 474,
	292, 0, 0, 0, 0, 291, 293, 300, 0, 0,
	294, 471, 296, 295, 297, 298, 299, 472, 0, 473,
	0, 301, 0, 0, 302, 303, 304, 0, 305, 306,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 475, 0, 314, 315, 0, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 0, 328, 329, 331, 330, 0, 0, 0,
	0, 476, 477, 332, 333, 0, 334, 335, 336, 0,
	0, 338, 339, 0, 0, 340, 478, 0, 341, 0,
	479, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 480, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 482, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 0, 375, 376, 377, 378, 483,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	0, 397, 398, 391, 393, 394, 395, 392, 396, 399,
	400, 0, 401, 381, 382, 402, 0, 403, 484, 404,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 414,
	410, 411, 412, 485, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 425, 0, 486,
	487, 488, 489, 0, 0, 426, 427, 490, 428, 491,
	0, 429, 430, 431, 0, 432, 433, 0, 0, 434,
	435, 436, 437, 439, 0, 440, 0, 438, 441, 442,
	443, 492, 493, 494, 0, 445, 444, 495, 499, 0,
	206, 0, 446, 447, 496, 448, 449, 450, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 451, 0,
	0, 0, 0, 218, 219, 220, 452, 453, 221, 454,
	222, 223, 455, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 456, 457, 458, 0, 231, 459, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 460, 461, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 462, 263, 264, 266, 269,
	265, 270, 271, 272, 463, 464, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 465, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	466, 0, 467, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 468, 469, 470, 0, 0, 474, 292, 0,
	0, 0, 0, 291, 293, 300, 0, 0, 294, 471,
	296, 295, 297, 298, 299, 472, 0, 473, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 475,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 0, 0, 0, 476,
	477, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 0, 0, 340, 478, 0, 341, 0, 479, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 480,
	350, 481, 351, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 482, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 0, 375, 376, 377, 378, 483, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 0, 397,
	398, 391, 393, 394, 395, 392, 396, 399, 400, 0,
	401, 381, 382, 402, 0, 403, 484, 404, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 414, 410, 411,
	412, 485, 0, 417, 418, 416, 0, 419, 420, 421,
	422, 423, 267, 424, 268, 425, 0, 486, 487, 488,
	489, 0, 0, 426, 427, 490, 428, 491, 0, 429,
	430, 431, 0, 432, 433, 0, 0, 434, 435, 436,
	437, 439, 0, 440, 0, 438, 441, 442, 443, 492,
	493, 494, 206, 445, 444, 495, 0, 0, 0, 0,
	446, 447, 496, 448, 449, 450, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	451, 0, 0, 0, 0, 218, 219, 220, 452, 453,
	221, 454, 222, 223, 455, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 456, 457, 458, 0, 231,
	459, 0, 0, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 0, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 460, 461, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 462, 263, 264,
	266, 269, 265, 270, 271, 272, 463, 464, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 465, 276,
	277, 0, 278, 0, 279, 0, 0, 0, 280, 281,
	0, 282, 466, 0, 467, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 468, 469, 470, 0, 0, 474,
	292, 0, 0, 0, 0, 291, 293, 300, 0, 0,
	294, 471, 296, 295, 297, 298, 299, 472, 0, 473,
	0, 301, 0, 0, 302, 303, 304, 0, 305, 306,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 475, 0, 314, 315, 0, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 0, 328, 329, 331, 330, 0, 0, 0,
	0, 476, 477, 332, 333, 0, 334, 335, 336, 0,
	0, 338, 339, 0, 0, 340, 478, 0, 341, 0,
	479, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 480, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 482, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 0, 375, 376, 377, 378, 483,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	0, 397, 398, 391, 393, 394, 395, 392, 396, 399,
	400, 0, 401, 381, 382, 402, 0, 403, 484, 404,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 414,
	410, 411, 412, 485, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 425, 0, 486,
	487, 488, 489, 0, 0, 426, 427, 490, 428, 491,
	0, 429, 430, 431, 0, 432, 433, 0, 0, 434,
	435, 436, 437, 439, 0, 440, 0, 438, 441, 442,
	443, 492, 493, 494, 206, 445, 444, 495, 0, 0,
	0, 0, 446, 447, 496, 448, 449, 450, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 451, 0, 0, 0, 0, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 456, 457, 458,
	0, 231, 459, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 460,
	461, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 466, 0, 467, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 2560, 469, 470, 0,
	0, 474, 292, 0, 0, 0, 0, 291, 293, 300,
	0, 0, 294, 471, 296, 295, 297, 298, 299, 472,
	0, 473, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 475, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	0, 0, 0, 476, 477, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 0, 0, 340, 478, 0,
	341, 0, 479, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 480, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 0, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 0, 401, 381, 382, 402, 0, 403,
	484, 404, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 485, 0, 417, 418, 416,
	0, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	0, 486, 487, 488, 489, 0, 0, 426, 427, 490,
	428, 491, 0, 429, 430, 431, 0, 432, 433, 0,
	0, 434, 435, 436, 437, 439, 0, 440, 0, 438,
	441, 442, 443, 492, 493, 494, 206, 445, 444, 495,
	0, 0, 0, 0, 446, 447, 496, 448, 449, 450,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 451, 0, 0, 0, 0, 218,
	219, 220, 452, 453, 221, 454, 222, 223, 455, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 456,
	457, 458, 0, 231, 459, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 460, 461, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 462, 263, 264, 266, 269, 265, 270, 271, 272,
	463, 464, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 465, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 0, 282, 466, 0, 467, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 2558, 469,
	470, 0, 0, 474, 292, 0, 0, 0, 0, 291,
	293, 300, 0, 0, 294, 471, 296, 295, 297, 298,
	299, 472, 0, 473, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 475, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 0, 328, 329, 331,
	330, 0, 0, 0, 0, 476, 477, 332, 333, 0,
	334, 335, 336, 0, 0, 338, 339, 0, 0, 340,
	478, 0, 341, 0, 479, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 480, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 356, 357, 358, 482, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 0, 375,
	376, 377, 378, 483, 379, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 0, 397, 398, 391, 393, 394,
	395, 392, 396, 399, 400, 0, 401, 381, 382, 402,
	0, 403, 484, 404, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 414, 410, 411, 412, 485, 0, 417,
	418, 416, 0, 419, 420, 421, 422, 423, 267, 424,
	268, 425, 0, 486, 487, 488, 489, 0, 0, 426,
	427, 490, 428, 491, 0, 429, 430, 431, 0, 432,
	433, 0, 0, 434, 435, 436, 437, 439, 0, 440,
	0, 438, 441, 442, 443, 492, 493, 494, 206, 445,
	444, 495, 0, 0, 0, 0, 446, 447, 496, 448,
	449, 450, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 451, 0, 0, 0,
	0, 218, 219, 220, 452, 453, 221, 454, 222, 223,
	455, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 456, 457, 458, 0, 231, 459, 0, 0, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 0, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 460, 461, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 462, 263, 264, 266, 269, 265, 270,
	271, 272, 463, 464, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 465, 276, 277, 0, 278, 0,
	279, 0, 0, 0, 280, 281, 0, 282, 466, 0,
	467, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	2547, 469, 470, 0, 0, 474, 292, 0, 0, 0,
	0, 291, 293, 300, 0, 0, 294, 471, 296, 295,
	297, 298, 299, 472, 0, 473, 0, 301, 0, 0,
	302, 303, 304, 0, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 475, 0, 314,
	315, 0, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 0, 328,
	329, 331, 330, 0, 0, 0, 0, 476, 477, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 0,
	0, 340, 478, 0, 341, 0, 479, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 480, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	482, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	0, 375, 376, 377, 378, 483, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 0, 397, 398, 391,
	393, 394, 395, 392, 396, 399, 400, 0, 401, 381,
	382, 402, 0, 403, 484, 404, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 414, 410, 411, 412, 485,
	0, 417, 418, 416, 0, 419, 420, 421, 422, 423,
	267, 424, 268, 425, 0, 486, 487, 488, 489, 0,
	0, 426, 427, 490, 428, 491, 0, 429, 430, 431,
	0, 432, 433, 0, 0, 434, 435, 436, 437, 439,
	0, 440, 0, 438, 441, 442, 443, 492, 493, 494,
	206, 445, 444, 495, 0, 0, 0, 0, 446, 447,
	496, 448, 449, 450, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 451, 0,
	0, 0, 0, 218, 219, 220, 452, 453, 221, 454,
	222, 223, 455, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 456, 457, 458, 0, 231, 459, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 460, 461, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 462, 263, 264, 266, 269,
	265, 270, 271, 272, 463, 464, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 465, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	466, 0, 467, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 2256, 469, 470, 0, 0, 474, 292, 0,
	0, 0, 0, 291, 293, 300, 0, 0, 294, 471,
	296, 295, 297, 298, 299, 472, 0, 473, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 475,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 0, 0, 0, 476,
	477, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 0, 0, 340, 478, 0, 341, 0, 479, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 480,
	350, 481, 351, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 482, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 0, 375, 376, 377, 378, 483, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 0, 397,
	398, 391, 393, 394, 395, 392, 396, 399, 400, 0,
	401, 381, 382, 402, 0, 403, 484, 404, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 414, 410, 411,
	412, 485, 0, 417, 418, 416, 0, 419, 420, 421,
	422, 423, 267, 424, 268, 425, 0, 486, 487, 488,
	489, 0, 0, 426, 427, 490, 428, 491, 0, 429,
	430, 431, 0, 432, 433, 0, 0, 434, 435, 436,
	437, 439, 0, 440, 0, 438, 441, 442, 443, 492,
	493, 494, 206, 445, 444, 495, 0, 0, 0, 0,
	446, 447, 496, 448, 449, 450, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	451, 0, 0, 0, 0, 218, 219, 220, 452, 453,
	221, 454, 222, 223, 455, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 456, 457, 458, 0, 231,
	459, 0, 0, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 0, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 460, 461, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 462, 263, 264,
	266, 269, 265, 270, 271, 272, 463, 464, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 465, 276,
	277, 0, 278, 0, 279, 0, 0, 0, 280, 281,
	0, 282, 466, 0, 467, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 468, 469, 470, 0, 0, 474,
	292, 0, 0, 0, 0, 291, 293, 300, 0, 0,
	294, 471, 296, 295, 297, 298, 299, 472, 0, 473,
	0, 301, 0, 0, 302, 303, 304, 0, 305, 306,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 475, 0, 314, 315, 0, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 0, 328, 329, 331, 330, 0, 0, 0,
	0, 476, 477, 332, 333, 0, 334, 335, 336, 0,
	0, 338, 339, 0, 0, 340, 478, 0, 341, 0,
	479, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 480, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 482, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 0, 375, 376, 377, 378, 483,
	379, 0, 380, 532, 385, 386, 387, 388, 389, 390,
	0, 397, 398, 391, 393, 394, 395, 392, 396, 399,
	400, 0, 401, 381, 382, 402, 0, 403, 484, 404,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 414,
	410, 411, 412, 485, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 425, 0, 486,
	487, 488, 489, 0, 0, 426, 427, 490, 428, 491,
	0, 429, 430, 431, 0, 432, 433, 0, 0, 434,
	435, 436, 437, 439, 0, 440, 0, 438, 441, 442,
	443, 492, 493, 494, 206, 445, 444, 495, 0, 0,
	0, 0, 446, 447, 496, 448, 449, 450, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 451, 0, 1793, 0, 0, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 456, 457, 458,
	0, 231, 459, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 460,
	461, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 466, 0, 467, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 468, 469, 470, 0,
	0, 474, 292, 0, 0, 0, 0, 291, 293, 300,
	0, 0, 294, 471, 296, 295, 297, 298, 299, 472,
	0, 473, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 475, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	0, 0, 0, 476, 477, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 0, 0, 340, 478, 0,
	341, 0, 479, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 480, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 0, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 0, 0, 381, 382, 402, 0, 403,
	484, 404, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 485, 0, 417, 418, 416,
	0, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	0, 486, 487, 488, 489, 0, 0, 426, 427, 490,
	428, 491, 0, 429, 430, 431, 0, 432, 433, 0,
	0, 434, 435, 436, 437, 439, 0, 440, 0, 438,
	441, 442, 443, 492, 493, 494, 206, 445, 444, 495,
	0, 0, 0, 0, 446, 447, 496, 448, 449, 450,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 451, 0, 0, 0, 0, 218,
	219, 220, 452, 453, 221, 454, 222, 223, 455, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 456,
	457, 458, 0, 231, 459, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 460, 461, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 462, 263, 264, 266, 269, 265, 270, 271, 272,
	463, 464, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 465, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 0, 282, 466, 0, 467, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 1246, 469,
	470, 0, 0, 474, 292, 0, 0, 0, 0, 291,
	293, 300, 0, 0, 294, 471, 296, 295, 297, 298,
	299, 472, 0, 473, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 475, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 0, 328, 329, 331,
	330, 0, 0, 0, 0, 476, 477, 332, 333, 0,
	334, 335, 336, 0, 0, 338, 339, 0, 0, 340,
	478, 0, 341, 0, 479, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 480, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 356, 357, 358, 482, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 0, 375,
	376, 377, 378, 483, 379, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 0, 397, 398, 391, 393, 394,
	395, 392, 396, 399, 400, 0, 401, 381, 382, 402,
	0, 403, 484, 404, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 414, 410, 411, 412, 485, 0, 417,
	418, 416, 0, 419, 420, 421, 422, 423, 267, 424,
	268, 425, 0, 486, 487, 488, 489, 0, 0, 426,
	427, 490, 428, 491, 0, 429, 430, 431, 0, 432,
	433, 0, 0, 434, 435, 436, 437, 439, 0, 440,
	0, 438, 441, 442, 443, 492, 493, 494, 206, 445,
	444, 495, 0, 0, 0, 0, 446, 447, 496, 448,
	449, 450, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 451, 0, 0, 0,
	0, 218, 219, 220, 452, 453, 221, 454, 222, 223,
	455, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 456, 457, 458, 0, 231, 459, 0, 0, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 0, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 460, 461, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 462, 263, 264, 266, 269, 265, 270,
	271, 272, 463, 464, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 465, 276, 277, 0, 278, 0,
	279, 0, 0, 0, 280, 281, 0, 282, 466, 0,
	467, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	1188, 469, 470, 0, 0, 474, 292, 0, 0, 0,
	0, 291, 293, 300, 0, 0, 294, 471, 296, 295,
	297, 298, 299, 472, 0, 473, 0, 301, 0, 0,
	302, 303, 304, 0, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 475, 0, 314,
	315, 0, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 0, 328,
	329, 331, 330, 0, 0, 0, 0, 476, 477, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 0,
	0, 340, 478, 0, 341, 0, 479, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 480, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	482, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	0, 375, 376, 377, 378, 483, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 0, 397, 398, 391,
	393, 394, 395, 392, 396, 399, 400, 0, 401, 381,
	382, 402, 0, 403, 484, 404, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 414, 410, 411, 412, 485,
	0, 417, 418, 416, 0, 419, 420, 421, 422, 423,
	267, 424, 268, 425, 0, 486, 487, 488, 489, 0,
	0, 426, 427, 490, 428, 491, 0, 429, 430, 431,
	0, 432, 433, 0, 0, 434, 435, 436, 437, 439,
	0, 440, 0, 438, 441, 442, 443, 492, 493, 494,
	206, 445, 444, 495, 0, 0, 0, 0, 446, 447,
	496, 448, 449, 450, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 451, 0,
	0, 0, 0, 218, 219, 220, 452, 453, 221, 454,
	222, 223, 455, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 456, 457, 458, 0, 231, 459, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 460, 461, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 462, 263, 264, 266, 269,
	265, 270, 271, 272, 463, 464, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 465, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	466, 0, 467, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 468, 469, 470, 0, 0, 474, 292, 0,
	0, 0, 0, 291, 293, 300, 0, 0, 294, 471,
	296, 295, 297, 298, 299, 472, 0, 473, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 475,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 0, 0, 0, 476,
	477, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 0, 0, 340, 478, 0, 341, 0, 479, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 480,
	350, 481, 351, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 482, 951, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 0, 375, 376, 377, 378, 483, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 0, 397,
	398, 391, 393, 394, 395, 392, 396, 399, 400, 0,
	401, 381, 382, 402, 0, 403, 484, 404, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 414, 410, 411,
	412, 485, 0, 417, 418, 416, 0, 419, 420, 421,
	422, 423, 267, 424, 268, 425, 0, 486, 487, 488,
	489, 0, 0, 426, 427, 490, 428, 491, 0, 429,
	430, 431, 0, 432, 433, 0, 0, 434, 435, 436,
	437, 439, 0, 440, 0, 438, 441, 442, 443, 492,
	493, 494, 206, 445, 444, 495, 0, 0, 0, 0,
	446, 447, 496, 448, 449, 450, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	451, 0, 0, 0, 0, 218, 219, 220, 452, 453,
	221, 454, 222, 223, 455, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 456, 457, 458, 0, 231,
	459, 0, 0, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 0, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 460, 461, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 462, 263, 264,
	266, 269, 265, 270, 271, 272, 463, 464, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 465, 276,
	277, 0, 278, 0, 279, 0, 0, 0, 280, 281,
	0, 282, 466, 0, 467, 0, 0, 284, 285, 286,
	287, 288, 289, 290, 468, 469, 470, 0, 0, 474,
	292, 0, 0, 0, 0, 291, 293, 300, 0, 0,
	294, 471, 296, 295, 297, 298, 299, 472, 0, 473,
	0, 301, 0, 0, 302, 303, 304, 0, 305, 306,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 475, 0, 314, 315, 0, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 0, 328, 329, 331, 330, 0, 0, 0,
	0, 476, 477, 332, 333, 0, 334, 335, 336, 0,
	0, 338, 339, 0, 0, 340, 478, 0, 341, 0,
	479, 342, 337, 343, 344, 0, 346, 347, 348, 0,
	349, 480, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 0, 357, 358, 482, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 0, 375, 376, 377, 378, 483,
	0, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	0, 397, 398, 391, 393, 394, 395, 392, 396, 399,
	400, 0, 401, 381, 382, 402, 0, 403, 484, 404,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 414,
	410, 411, 412, 485, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 425, 0, 486,
	487, 488, 489, 0, 0, 426, 427, 490, 428, 491,
	0, 429, 430, 431, 0, 432, 433, 0, 0, 434,
	435, 436, 437, 439, 0, 440, 0, 438, 441, 442,
	443, 492, 493, 494, 0, 445, 444, 495, 0, 0,
	0, 0, 446, 447, 496, 448, 449, 450, 1402, 1403,
	0, 1435, 1436, 1437, 1445, 1446, 1447, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1438, 0, 0,
	0, 0, 0, 0, 1405, 0, 0, 1451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1404, 0, 0, 0, 0, 0, 0, 0, 1424, 0,
	0, 0, 0, 0, 0, 1421, 0, 0, 0, 0,
	0, 0, 0, 1402, 1403, 0, 1435, 1436, 1437, 1445,
	1446, 1447, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1438, 0, 0, 0, 0, 0, 0, 1405,
	0, 0, 1451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1427, 1428, 1429, 1430, 0, 1404, 0, 0, 0, 0,
	1410, 0, 0, 1424, 0, 0, 0, 0, 0, 0,
	1421, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1442, 1452, 0, 0,
	1432, 1433, 1434, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1448, 1449, 0, 0, 0, 0, 0, 0, 1419,
	1420, 0, 0, 0, 0, 1427, 1428, 1429, 1430, 0,
	0, 0, 0, 0, 1440, 1410, 0, 0, 0, 0,
	0, 1425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1450, 0,
	0, 1442, 1452, 0, 0, 1432, 1433, 1434, 0, 0,
	0, 0, 1439, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1448, 1449, 0, 0,
	0, 0, 0, 0, 1419, 1420, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1440,
	0, 0, 1431, 0, 0, 0, 1425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1426, 0, 0, 1450, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1439, 0, 0,
	0, 0, 0, 0, 0, 1443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1431, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1426, 0, 0, 0, 1402,
	1403, 0, 1435, 1436, 1437, 1445, 1446, 1447, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1438, 0,
	1443, 0, 0, 0, 0, 1405, 0, 1441, 1451, 0,
	1416, 1417, 1423, 1422, 1418, 1444, 0, 1415, 1413, 1414,
	1406, 1407, 1408, 1409, 1411, 1412, 0, 0, 0, 0,
	0, 1404, 0, 2708, 0, 0, 0, 0, 0, 1424,
	0, 0, 0, 0, 0, 0, 1421, 0, 0, 0,
	0, 0, 0, 0, 1402, 1403, 0, 1435, 1436, 1437,
	1445, 1446, 1447, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1438, 0, 0, 0, 0, 0, 0,
	1405, 0, 1441, 1451, 0, 1416, 1417, 1423, 1422, 1418,
	1444, 0, 1415, 1413, 1414, 1406, 1407, 1408, 1409, 1411,
	1412, 1427, 1428, 1429, 1430, 0, 1404, 0, 2420, 0,
	0, 1410, 0, 0, 1424, 0, 0, 0, 0, 0,
	0, 1421, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1442, 1452, 0,
	0, 1432, 1433, 1434, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1448, 1449, 0, 0, 0, 0, 0, 0,
	1419, 1420, 0, 0, 0, 0, 1427, 1428, 1429, 1430,
	0, 0, 0, 0, 0, 1440, 1410, 0, 0, 0,
	0, 0, 1425, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1450,
	0, 0, 1442, 1452, 0, 0, 1432, 1433, 1434, 0,
	0, 0, 0, 1439, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1448, 1449, 0,
	0, 0, 0, 0, 0, 1419, 1420, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1440, 0, 0, 1431, 0, 0, 0, 1425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1426, 0, 0, 1450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1439, 0,
	0, 0, 0, 0, 0, 0, 1443, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1431, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1426, 0, 0, 0,
	1402, 1403, 0, 1435, 1436, 1437, 1445, 1446, 1447, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1438,
	0, 1443, 0, 0, 0, 0, 1405, 0, 1441, 1451,
	0, 1416, 1417, 1423, 1422, 1418, 1444, 0, 1415, 1413,
	1414, 1406, 1407, 1408, 1409, 1411, 1412, 0, 0, 0,
	0, 0, 1404, 0, 2419, 0, 0, 0, 0, 0,
	1424, 0, 0, 0, 0, 0, 0, 1421, 0, 0,
	0, 0, 0, 0, 0, 1402, 1403, 0, 1435, 1436,
	1437, 1445, 1446, 1447, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1438, 0, 0, 0, 0, 0,
	0, 1405, 0, 1441, 1451, 0, 1416, 1417, 1423, 1422,
	1418, 1444, 0, 1415, 1413, 1414, 1406, 1407, 1408, 1409,
	1411, 1412, 1427, 1428, 1429, 1430, 0, 1404, 0, 2416,
	0, 0, 1410, 0, 0, 1424, 0, 0, 0, 0,
	0, 0, 1421, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1442, 1452,
	0, 0, 1432, 1433, 1434, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1448, 1449, 0, 0, 0, 0, 0,
	0, 1419, 1420, 0, 0, 0, 0, 1427, 1428, 1429,
	1430, 0, 0, 0, 0, 0, 1440, 1410, 0, 0,
	0, 0, 0, 1425, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1450, 0, 0, 1442, 1452, 0, 0, 1432, 1433, 1434,
	0, 0, 0, 0, 1439, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1448, 1449,
	0, 0, 0, 0, 0, 0, 1419, 1420, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1440, 0, 0, 1431, 0, 0, 0, 1425, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1426, 0, 0, 1450, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1439,
	0, 0, 0, 0, 0, 0, 0, 1443, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1431,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1426, 0, 0,
	0, 1402, 1403, 0, 1435, 1436, 1437, 1445, 1446, 1447,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1438, 0, 1443, 0, 0, 0, 0, 1405, 0, 1441,
	1451, 0, 1416, 1417, 1423, 1422, 1418, 1444, 0, 1415,
	1413, 1414, 1406, 1407, 1408, 1409, 1411, 1412, 0, 0,
	0, 0, 0, 1404, 0, 2415, 0, 0, 0, 0,
	0, 1424, 0, 0, 0, 0, 0, 0, 1421, 0,
	0, 0, 0, 0, 0, 0, 1402, 1403, 0, 1435,
	1436, 1437, 1445, 1446, 1447, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1438, 0, 0, 0, 0,
	0, 0, 1405, 0, 1441, 1451, 0, 1416, 1417, 1423,
	1422, 1418, 1444, 0, 1415, 1413, 1414, 1406, 1407, 1408,
	1409, 1411, 1412, 1427, 1428, 1429, 1430, 0, 1404, 0,
	2414, 0, 0, 1410, 0, 0, 1424, 0, 0, 0,
	0, 0, 0, 1421, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1442,
	1452, 0, 0, 1432, 1433, 1434, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1448, 1449, 0, 0, 0, 0,
	0, 0, 1419, 1420, 0, 0, 0, 0, 1427, 1428,
	1429, 1430, 0, 0, 0, 0, 0, 1440, 1410, 0,
	0, 0, 0, 0, 1425, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1450, 0, 0, 1442, 1452, 0, 0, 1432, 1433,
	1434, 0, 0, 0, 0, 1439, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1448,
	1449, 0, 0, 0, 0, 0, 0, 1419, 1420, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1440, 0, 0, 1431, 0, 0, 0, 1425,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1426, 0, 0, 1450, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1439, 0, 0, 0, 0, 0, 0, 0, 1443, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1431, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1426, 0,
	0, 0, 1402, 1403, 0, 1435, 1436, 1437, 1445, 1446,
	1447, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1438, 0, 1443, 0, 0, 0, 0, 1405, 0,
	1441, 1451, 0, 1416, 1417, 1423, 1422, 1418, 1444, 0,
	1415, 1413, 1414, 1406, 1407, 1408, 1409, 1411, 1412, 0,
	0, 0, 0, 0, 1404, 0, 1989, 0, 0, 0,
	0, 0, 1424, 0, 0, 0, 0, 0, 0, 1421,
	0, 0, 0, 0, 0, 0, 0, 1402, 1403, 0,
	1435, 1436, 1437, 1445, 1446, 1447, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1438, 0, 0, 0,
	0, 0, 0, 1405, 0, 1441, 1451, 0, 1416, 1417,
	1423, 1422, 1418, 1444, 0, 1415, 1413, 1414, 1406, 1407,
	1408, 1409, 1411, 1412, 1427, 1428, 1429, 1430, 3253, 1404,
	0, 0, 0, 0, 1410, 0, 0, 1424, 0, 0,
	0, 0, 0, 0, 1421, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1442, 1452, 0, 0, 1432, 1433, 1434, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1448, 1449, 0, 0, 0,
	0, 0, 0, 1419, 1420, 0, 0, 0, 0, 1427,
	1428, 1429, 1430, 0, 0, 0, 0, 0, 1440, 1410,
	0, 0, 0, 0, 0, 1425, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1450, 0, 0, 1442, 1452, 0, 0, 1432,
	1433, 1434, 0, 0, 0, 0, 1439, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1448, 1449, 0, 0, 0, 0, 0, 0, 1419, 1420,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1440, 0, 0, 1431, 0, 0, 0,
	1425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1426, 0, 0, 1450, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1439, 0, 0, 0, 0, 0, 0, 0, 1443,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1431, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1426,
	0, 0, 0, 1402, 1403, 0, 1435, 1436, 1437, 1445,
	1446, 1447, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1438, 0, 1443, 0, 0, 0, 0, 1405,
	0, 1441, 1451, 0, 1416, 1417, 1423, 1422, 1418, 1444,
	0, 1415, 1413, 1414, 1406, 1407, 1408, 1409, 1411, 1412,
	0, 0, 0, 0, 3249, 1404, 0, 0, 0, 0,
	0, 0, 0, 1424, 0, 0, 0, 0, 0, 0,
	1421, 0, 0, 0, 0, 0, 0, 0, 1402, 1403,
	0, 1435, 1436, 1437, 1445, 1446, 1447, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1438, 0, 0,
	0, 0, 0, 0, 1405, 0, 1441, 1451, 0, 1416,
	1417, 1423, 1422, 1418, 1444, 0, 1415, 1413, 1414, 1406,
	1407, 1408, 1409, 1411, 1412, 1427, 1428, 1429, 1430, 3183,
	1404, 0, 0, 0, 0, 1410, 0, 0, 1424, 0,
	0, 0, 0, 0, 0, 1421, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1442, 1452, 0, 0, 1432, 1433, 1434, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1448, 1449, 0, 0,
	0, 0, 0, 0, 1419, 1420, 0, 0, 0, 0,
	1427, 1428, 1429, 1430, 0, 0, 0, 0, 0, 1440,
	1410, 0, 0, 0, 0, 0, 1425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1450, 0, 0, 1442, 1452, 0, 0,
	1432, 1433, 1434, 0, 0, 0, 0, 1439, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1448, 1449, 0, 0, 0, 0, 0, 0, 1419,
	1420, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1440, 0, 0, 1431, 0, 0,
	0, 1425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1426, 0, 0, 1450, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1439, 0, 0, 0, 0, 0, 0, 0,
	1443, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1431, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1426, 0, 0, 0, 1402, 1403, 0, 1435, 1436, 1437,
	1445, 1446, 1447, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1438, 0, 1443, 0, 0, 0, 0,
	1405, 0, 1441, 1451, 0, 1416, 1417, 1423, 1422, 1418,
	1444, 0, 1415, 1413, 1414, 1406, 1407, 1408, 1409, 1411,
	1412, 0, 0, 0, 0, 3182, 1404, 0, 0, 0,
	0, 0, 0, 0, 1424, 0, 0, 0, 0, 0,
	0, 1421, 0, 0, 0, 0, 0, 0, 0, 1402,
	1403, 0, 1435, 1436, 1437, 1445, 1446, 1447, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1438, 0,
	0, 0, 0, 0, 0, 1405, 0, 1441, 1451, 0,
	1416, 1417, 1423, 1422, 1418, 1444, 0, 1415, 1413, 1414,
	1406, 1407, 1408, 1409, 1411, 1412, 1427, 1428, 1429, 1430,
	3091, 1404, 0, 0, 0, 0, 1410, 0, 0, 1424,
	0, 0, 0, 0, 0, 0, 1421, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1442, 1452, 0, 0, 1432, 1433, 1434, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1448, 1449, 0,
	0, 0, 0, 0, 0, 1419, 1420, 0, 0, 0,
	0, 1427, 1428, 1429, 1430, 0, 0, 0, 0, 0,
	1440, 1410, 0, 0, 0, 0, 0, 1425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1450, 0, 0, 1442, 1452, 0,
	0, 1432, 1433, 1434, 0, 0, 0, 0, 1439, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1448, 1449, 0, 0, 0, 0, 0, 0,
	1419, 1420, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1440, 0, 0, 1431, 0,
	0, 0, 1425, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1426, 0, 0, 1450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1439, 0, 0, 0, 0, 0, 0,
	0, 1443, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1431, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1426, 0, 0, 0, 1402, 1403, 0, 1435, 1436,
	1437, 1445, 1446, 1447, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1438, 0, 1443, 0, 0, 0,
	0, 1405, 0, 1441, 1451, 0, 1416, 1417, 1423, 1422,
	1418, 1444, 0, 1415, 1413, 1414, 1406, 1407, 1408, 1409,
	1411, 1412, 0, 0, 0, 0, 3009, 1404, 0, 0,
	0, 0, 0, 0, 0, 1424, 0, 0, 0, 0,
	0, 0, 1421, 0, 0, 0, 0, 0, 0, 0,
	1402, 1403, 0, 1435, 1436, 1437, 1445, 1446, 1447, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1438,
	0, 0, 0, 0, 0, 0, 1405, 0, 1441, 1451,
	0, 1416, 1417, 1423, 1422, 1418, 1444, 0, 1415, 1413,
	1414, 1406, 1407, 1408, 1409, 1411, 1412, 1427, 1428, 1429,
	1430, 2965, 1404, 0, 0, 0, 0, 1410, 0, 0,
	1424, 0, 0, 0, 0, 0, 0, 1421, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1442, 1452, 0, 0, 1432, 1433, 1434,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1448, 1449,
	0, 0, 0, 0, 0, 0, 1419, 1420, 0, 0,
	0, 0, 1427, 1428, 1429, 1430, 0, 0, 0, 0,
	0, 1440, 1410, 0, 0, 0, 0, 0, 1425, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1450, 0, 0, 1442, 1452,
	0, 0, 1432, 1433, 1434, 0, 0, 0, 0, 1439,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1448, 1449, 0, 0, 0, 0, 0,
	0, 1419, 1420, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1440, 0, 0, 1431,
	0, 0, 0, 1425, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1426, 0, 0,
	1450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1439, 0, 0, 0, 0, 0,
	0, 0, 1443, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1431, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1426, 0, 0, 0, 1402, 1403, 0, 1435,
	1436, 1437, 1445, 1446, 1447, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1438, 0, 1443, 0, 0,
	0, 0, 1405, 0, 1441, 1451, 0, 1416, 1417, 1423,
	1422, 1418, 1444, 0, 1415, 1413, 1414, 1406, 1407, 1408,
	1409, 1411, 1412, 0, 0, 0, 0, 2964, 1404, 0,
	0, 0, 0, 0, 0, 0, 1424, 0, 0, 0,
	0, 0, 0, 1421, 0, 0, 0, 0, 0, 0,
	0, 1402, 1403, 0, 1435, 1436, 1437, 1445, 1446, 1447,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1438, 0, 0, 0, 0, 0, 0, 1405, 0, 1441,
	1451, 0, 1416, 1417, 1423, 1422, 1418, 1444, 0, 1415,
	1413, 1414, 1406, 1407, 1408, 1409, 1411, 1412, 1427, 1428,
	1429, 1430, 2963, 1404, 0, 0, 0, 0, 1410, 0,
	0, 1424, 0, 0, 0, 0, 0, 0, 1421, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1442, 1452, 0, 0, 1432, 1433,
	1434, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1448,
	1449, 0, 0, 0, 0, 0, 0, 1419, 1420, 0,
	0, 0, 0, 1427, 1428, 1429, 1430, 0, 0, 0,
	0, 0, 1440, 1410, 0, 0, 0, 0, 0, 1425,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1450, 0, 0, 1442,
	1452, 0, 0, 1432, 1433, 1434, 0, 0, 0, 0,
	1439, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1448, 1449, 0, 0, 0, 0,
	0, 0, 1419, 1420, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1440, 0, 0,
	1431, 0, 0, 0, 1425, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1426, 0,
	0, 1450, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1439, 0, 0, 0, 0,
	0, 0, 0, 1443, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1431, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1426, 0, 0, 0, 1402, 1403, 0,
	1435, 1436, 1437, 1445, 1446, 1447, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1438, 0, 1443, 0,
	0, 0, 0, 1405, 0, 1441, 1451, 0, 1416, 1417,
	1423, 1422, 1418, 1444, 0, 1415, 1413, 1414, 1406, 1407,
	1408, 1409, 1411, 1412, 0, 0, 0, 0, 2929, 1404,
	0, 0, 0, 0, 0, 0, 0, 1424, 0, 0,
	0, 0, 0, 0, 1421, 0, 0, 0, 0, 0,
	0, 0, 1402, 1403, 0, 1435, 1436, 1437, 1445, 1446,
	1447, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1438, 0, 0, 0, 0, 0, 0, 1405, 0,
	1441, 1451, 0, 1416, 1417, 1423, 1422, 1418, 1444, 0,
	1415, 1413, 1414, 1406, 1407, 1408, 1409, 1411, 1412, 1427,
	1428, 1429, 1430, 2743, 1404, 0, 0, 0, 0, 1410,
	0, 0, 1424, 0, 0, 0, 0, 0, 0, 1421,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1442, 1452, 0, 0, 1432,
	1433, 1434, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1448, 1449, 0, 0, 0, 0, 0, 0, 1419, 1420,
	0, 0, 0, 0, 1427, 1428, 1429, 1430, 0, 0,
	0, 0, 0, 1440, 1410, 3342, 0, 0, 0, 0,
	1425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1450, 0, 0,
	1442, 1452, 0, 0, 1432, 1433, 1434, 0, 0, 0,
	0, 1439, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1448, 1449, 0, 0, 0,
	0, 0, 0, 1419, 1420, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1440, 0,
	0, 1431, 0, 0, 0, 1425, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1426,
	0, 0, 1450, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1439, 0, 0, 0,
	0, 0, 0, 0, 1443, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3341, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1431, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1426, 0, 0, 0, 1402, 1403,
	0, 1435, 1436, 1437, 1445, 1446, 1447, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1438, 0, 1443,
	0, 0, 2342, 0, 1405, 0, 1441, 1451, 0, 1416,
	1417, 1423, 1422, 1418, 1444, 0, 1415, 1413, 1414, 1406,
	1407, 1408, 1409, 1411, 1412, 0, 0, 2371, 0, 0,
	1404, 0, 0, 0, 0, 0, 0, 0, 1424, 0,
	0, 0, 0, 0, 0, 1421, 0, 0, 0, 0,
	0, 0, 0, 1402, 1403, 0, 1435, 1436, 1437, 1445,
	1446, 1447, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1438, 2343, 0, 0, 0, 0, 0, 1405,
	0, 1441, 1451, 0, 1416, 1417, 1423, 1422, 1418, 1444,
	0, 1415, 1413, 1414, 1406, 1407, 1408, 1409, 1411, 1412,
	1427, 1428, 1429, 1430, 0, 1404, 0, 0, 0, 0,
	1410, 0, 0, 1424, 0, 0, 0, 0, 0, 0,
	1421, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1442, 1452, 0, 0,
	1432, 1433, 1434, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1448, 1449, 0, 0, 0, 0, 0, 0, 1419,
	1420, 0, 0, 0, 0, 1427, 1428, 1429, 1430, 0,
	0, 0, 0, 0, 1440, 1410, 0, 2459, 0, 0,
	2458, 1425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1450, 0,
	0, 1442, 1452, 0, 0, 1432, 1433, 1434, 0, 0,
	0, 0, 1439, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1448, 1449, 0, 0,
	0, 0, 0, 0, 1419, 1420, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1440,
	0, 0, 1431, 0, 0, 0, 1425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1426, 0, 0, 1450, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1439, 0, 0,
	0, 0, 0, 0, 0, 1443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1431, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2079, 0, 0, 1426, 0, 0, 0, 1402,
	1403, 0, 1435, 1436, 1437, 1445, 1446, 1447, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1438, 0,
	1443, 0, 2078, 0, 0, 1405, 0, 1441, 1451, 0,
	1416, 1417, 1423, 1422, 1418, 1444, 0, 1415, 1413, 1414,
	1406, 1407, 1408, 1409, 1411, 1412, 0, 0, 0, 0,
	0, 1404, 0, 0, 0, 0, 0, 0, 0, 1424,
	0, 0, 0, 0, 0, 0, 1421, 0, 0, 0,
	0, 0, 0, 0, 1402, 1403, 0, 1435, 1436, 1437,
	1445, 1446, 1447, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1438, 0, 0, 0, 0, 0, 0,
	1405, 0, 1441, 1451, 0, 1416, 1417, 1423, 1422, 1418,
	1444, 0, 1415, 1413, 1414, 1406, 1407, 1408, 1409, 1411,
	1412, 1427, 1428, 1429, 1430, 0, 1404, 0, 0, 0,
	0, 1410, 0, 0, 1424, 0, 0, 0, 0, 0,
	0, 1421, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1442, 1452, 0,
	0, 1432, 1433, 1434, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1448, 1449, 0, 0, 0, 0, 0, 0,
	1419, 1420, 0, 0, 0, 0, 1427, 1428, 1429, 1430,
	0, 0, 0, 0, 0, 1440, 1410, 0, 0, 0,
	0, 0, 1425, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1450,
	0, 0, 1442, 1452, 0, 0, 1432, 1433, 1434, 0,
	0, 0, 0, 1439, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1448, 1449, 0,
	0, 0, 0, 0, 0, 1419, 1420, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1440, 0, 0, 1431, 0, 0, 0, 1425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1426, 0, 0, 1450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1439, 794,
	0, 0, 0, 0, 0, 0, 1443, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1431, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1426, 0, 0, 0,
	1402, 1403, 0, 1435, 1436, 1437, 1445, 1446, 1447, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1438,
	0, 1443, 0, 0, 0, 0, 1405, 0, 1441, 1451,
	0, 1416, 1417, 1423, 1422, 1418, 1444, 0, 1415, 1413,
	1414, 1406, 1407, 1408, 1409, 1411, 1412, 0, 0, 0,
	0, 0, 1404, 0, 0, 0, 0, 0, 0, 0,
	1424, 0, 0, 0, 0, 0, 0, 1421, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1441, 0, 0, 1416, 1417, 1423, 1422,
	1418, 1444, 0, 1415, 1413, 1414, 1406, 1407, 1408, 1409,
	1411, 1412, 1427, 1428, 1429, 1430, 0, 0, 0, 0,
	0, 0, 1410, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1402, 1403,
	0, 1435, 1436, 1437, 1445, 1446, 1447, 0, 1442, 1452,
	0, 0, 1432, 1433, 1434, 0, 0, 1438, 0, 0,
	0, 0, 0, 0, 1405, 0, 0, 1451, 0, 0,
	0, 0, 0, 1448, 1449, 0, 0, 0, 0, 0,
	0, 1419, 1420, 0, 0, 0, 0, 0, 0, 0,
	1404, 0, 0, 0, 0, 0, 1440, 0, 1424, 0,
	0, 0, 0, 1425, 0, 1421, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1439, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1427, 1428, 1429, 1430, 0, 0, 0, 0, 0, 0,
	1410, 0, 0, 0, 1431, 2465, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1426, 0, 0, 0, 1442, 1452, 0, 0,
	1432, 1433, 1434, 0, 0, 1402, 1403, 0, 1435, 1436,
	1437, 1445, 1446, 1447, 0, 0, 0, 1443, 0, 0,
	0, 1448, 1449, 0, 1438, 0, 0, 0, 2460, 1419,
	1420, 1405, 0, 0, 1451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1440, 0, 0, 0, 0, 2731,
	0, 1425, 0, 0, 0, 0, 0, 1404, 0, 0,
	0, 0, 0, 0, 0, 1424, 0, 0, 1450, 0,
	0, 0, 1421, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1439, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1441,
	0, 0, 1416, 1417, 1423, 1422, 1418, 1444, 0, 1415,
	1413, 1414, 1406, 1407, 1408, 1409, 1411, 1412, 0, 0,
	0, 0, 1431, 0, 0, 0, 0, 1427, 1428, 1429,
	1430, 0, 0, 0, 0, 0, 0, 1410, 0, 0,
	1426, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1402, 1403, 0, 1435, 1436, 1437, 1445, 1446,
	1447, 0, 0, 1442, 1452, 1443, 0, 1432, 1433, 1434,
	0, 1438, 0, 0, 0, 0, 0, 0, 1405, 0,
	0, 1451, 0, 0, 0, 0, 0, 0, 1448, 1449,
	0, 0, 0, 0, 0, 0, 1419, 1420, 0, 0,
	0, 0, 0, 0, 1404, 0, 0, 0, 0, 0,
	0, 1440, 1424, 0, 0, 0, 0, 0, 1425, 1421,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1450, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1441, 0, 1439,
	1416, 1417, 1423, 1422, 1418, 1444, 0, 1415, 1413, 1414,
	1406, 1407, 1408, 1409, 1411, 1412, 0, 0, 0, 0,
	0, 0, 0, 0, 1427, 1428, 1429, 1430, 0, 0,
	0, 0, 0, 0, 1410, 0, 0, 0, 0, 1431,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1426, 0, 0,
	1442, 1452, 0, 0, 1432, 1433, 1434, 0, 0, 1402,
	1403, 0, 1435, 1436, 1437, 1445, 1446, 1447, 0, 0,
	0, 0, 1443, 0, 0, 1448, 1449, 0, 1438, 0,
	0, 0, 2413, 1419, 1420, 1405, 0, 0, 1451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1440, 0,
	0, 0, 0, 0, 0, 1425, 0, 0, 0, 0,
	0, 1404, 0, 0, 0, 0, 0, 0, 0, 1424,
	0, 0, 1450, 0, 0, 0, 1421, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1439, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2427, 0, 1441, 0, 0, 1416, 1417, 1423,
	1422, 1418, 1444, 0, 1415, 1413, 1414, 1406, 1407, 1408,
	1409, 1411, 1412, 0, 0, 0, 1431, 0, 0, 0,
	0, 1427, 1428, 1429, 1430, 0, 0, 0, 0, 0,
	0, 1410, 0, 0, 1426, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1402, 1403, 0, 1435,
	1436, 1437, 1445, 1446, 1447, 0, 0, 1442, 1452, 1443,
	0, 1432, 1433, 1434, 0, 1438, 0, 0, 0, 0,
	0, 0, 1405, 0, 0, 1451, 0, 0, 0, 0,
	0, 0, 1448, 1449, 0, 0, 0, 0, 0, 0,
	1419, 1420, 0, 0, 0, 0, 0, 0, 1404, 0,
	0, 0, 0, 0, 0, 1440, 1424, 0, 0, 0,
	0, 0, 1425, 1421, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1441, 0, 1439, 1416, 1417, 1423, 1422, 1418, 1444,
	0, 1415, 1413, 1414, 1406, 1407, 1408, 1409, 1411, 1412,
	0, 0, 0, 0, 0, 0, 0, 0, 1427, 1428,
	1429, 1430, 0, 0, 0, 0, 0, 0, 1410, 0,
	0, 0, 0, 1431, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1426, 0, 0, 1442, 1452, 0, 0, 1432, 1433,
	1434, 0, 0, 1402, 1403, 0, 1435, 1436, 1437, 1445,
	1446, 1447, 0, 0, 0, 0, 1443, 0, 0, 1448,
	1449, 0, 1438, 0, 0, 0, 0, 1419, 1420, 1405,
	0, 0, 1451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1440, 0, 0, 0, 0, 0, 0, 1425,
	0, 0, 0, 0, 0, 1404, 0, 0, 0, 0,
	0, 0, 0, 1424, 0, 0, 1450, 0, 0, 0,
	1421, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1439, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1441, 0,
	0, 1416, 1417, 1423, 1422, 1418, 1444, 0, 1415, 1413,
	1414, 1406, 1407, 1408, 1409, 1411, 1412, 0, 0, 0,
	1431, 0, 0, 0, 0, 1427, 1428, 1429, 1430, 0,
	0, 0, 0, 0, 0, 1410, 0, 0, 1426, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1402, 1403,
	0, 1435, 1436, 1437, 1445, 1446, 1447, 0, 0, 0,
	0, 1442, 1452, 1443, 0, 1432, 1433, 1434, 0, 0,
	0, 0, 0, 0, 1405, 0, 0, 1451, 0, 0,
	0, 0, 0, 0, 0, 0, 1448, 1449, 0, 0,
	0, 0, 0, 0, 1419, 1420, 0, 0, 0, 0,
	1404, 0, 0, 0, 0, 0, 0, 0, 1424, 1440,
	0, 0, 0, 0, 0, 1421, 1425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1450, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1441, 0, 0, 1416, 1417,
	1423, 1422, 1418, 1444, 0, 1415, 1413, 1414, 1406, 1407,
	1408, 1409, 1411, 1412, 0, 0, 0, 0, 0, 0,
	1427, 1428, 1429, 1430, 0, 0, 0, 0, 0, 0,
	1410, 0, 0, 0, 0, 0, 0, 1431, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1615, 1426, 1442, 1452, 0, 0,
	1432, 1433, 1434, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1443, 1448, 1449, 0, 0, 0, 0, 0, 0, 1419,
	1420, 1627, 1609, 1616, 1599, 1637, 1636, 0, 0, 1601,
	1600, 0, 0, 0, 1440, 0, 0, 1647, 1648, 0,
	0, 1425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1450, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1638, 0, 1634,
	1633, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1632, 1441, 0, 0, 1416, 1417, 1423, 1422, 1418,
	1444, 0, 1415, 1413, 1414, 1406, 1407, 1408, 1409, 1411,
	1412, 0, 1431, 0, 0, 0, 0, 0, 0, 0,
	1631, 1629, 1630, 0, 0, 0, 0, 0, 0, 0,
	1426, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1611, 0, 0, 1443, 0, 0, 0, 0,
	0, 0, 0, 1620, 1614, 1622, 1624, 1625, 1626, 1621,
	0, 1619, 0, 0, 0, 0, 0, 0, 0, 0,
	1643, 1644, 0, 0, 0, 589, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 590, 0,
	0, 0, 1603, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1635, 0, 0, 0, 1612, 0,
	1613, 0, 0, 0, 0, 0, 0, 1441, 591, 610,
	1416, 1417, 1423, 1422, 1418, 1444, 0, 1415, 1413, 1414,
	1406, 1407, 1408, 1409, 1411, 1412, 0, 0, 0, 592,
	0, 0, 593, 0, 0, 0, 1628, 0, 0, 0,
	1596, 1594, 1595, 1598, 1597, 0, 0, 0, 616, 0,
	0, 0, 0, 0, 594, 0, 0, 0, 0, 0,
	0, 0, 0, 614, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1604, 1605, 1607, 1608, 0,
	595, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1623, 1606, 0, 0, 0, 0, 0, 0, 0, 0,
	596, 1646, 0, 597, 620, 0, 0, 0, 623, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1602,
	0, 1639, 1640, 1641, 1642, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1610,
	0, 0, 0, 0, 1617, 1645, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 619, 0, 0, 0, 0, 0, 600,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 598, 0,
	0, 0, 0, 0, 0, 0, 0, 601, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	603, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 604, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	609, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 0, 0, 618, 0, 617, 0, 0,
	0, 0, 606, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 607, 0, 0, 0, 0, 613, 0,
	0, 0, 0, 624, 0, 621, 0, 0, 0, 611,
}
var sqlPact = [...]int{

	5401, -1000, -1000, -1000, -1000, -1000, -1000, 171, 166, 164,
	162, 157, 156, 155, 154, 146, -1000, -1000, -1000, 145,
	-1000, -1000, 144, -1000, 143, 141, 140, 139, -1000, 130,
	128, -1000, -1000, -1000, -1000, 125, 124, 121, 47456, 1532,
	56806, 48674, 1635, 2044, 42170, 56398, 41762, 55990, 55582, 120,
	-1000, 55174, 109, 108, 107, -1000, -1000, 105, 2383, 33980,
	102, 100, 94, 1874, 93, 92, -1000, 90, -1000, 67663,
	1175, -1000, 89, 86, -1000, 5988, 411, 48266, 2076, 84,
	83, 33571, 2004, -1000, -1000, 1435, -1000, -1000, 81, 79,
	76, 75, 73, 72, 69, 68, 66, -1000, 65, 63,
	62, 61, 57, 56, 53, 52, 51, 50, 49, 47,
	43, 40, 38, 36, -1000, 8356, 1388, 1271, 1270, 1269,
	1247, 1258, 786, 35, 33, 32, 31, 30, 29, -1000,
	-1000, 28, 27, 24, 23, -1000, 22, 20, 122, 19,
	12, 9, 2, 1, 2158, 2036, 1158, 376, 15679, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 60826,
	57208, -2, -65, -3, -1000, 2355, 827, 28259, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 412, -1000,
	-1000, -1000, 248, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1385, 605, -1000,
	-1000, -1000, 54766, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 57208, -1000, 1530, -24, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 603, -1000, 1522, 158, 1461, -1000, -1000, -1000,
	-1000, -1000, 57208, -1000, -1000, 2636, 2635, 1428, 601, 54364,
	-1000, 1166, -1000, 729, 18278, -1000, 957, -1000, 18278, 241,
	-1000, -1000, -1000, -1000, -1000, 41354, 12664, 40946, 40538, 37694,
	53956, 12246, 47054, 980, -1000, -1000, -1000, -1000, -1000, -11,
	35186, 57208, -1000, 239, -1000, -1000, -1000, -1000, -1000, -1000,
	24455, 245, 24011, 528, 23567, 246, -1000, -1000, -1000, -1000,
	2634, 2632, 851, 2631, 2293, 60424, 1321, 2628, 1201, 927,
	810, 2627, 2623, 2622, 2621, 2620, 2619, 2618, 1237, 53548,
	2073, 37276, 36858, 47456, 47456, 1828, 53140, -1000, -1000, 1012,
	1009, -1000, -1000, -1000, -1000, 2176, 2029, 2021, 46646, -1000,
	-1000, 2615, 2614, 2613, 2611, 2606, 60022, 1316, 2605, 1773,
	2604, 2602, 2600, 2599, 2598, 2597, 2594, 2593, 2590, -1000,
	46238, 45830, 45422, 45014, 52732, 36440, 36022, -1000, -1000, -1000,
	29887, 4328, 52324, 30725, 47456, -1000, -1000, 24886, -57, -1000,
	-1000, -1000, 2022, -1000, 24886, -57, -1000, 2072, 1415, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1907, 1222, 2473, 35604,
	1700, 1078, 2152, 2588, 1719, 2139, 2134, 2128, 2119, 2116,
	2585, 1207, 2584, 1140, 2583, 1150, 2111, 2508, 1439, 40130,
	2582, 2576, 2333, 2094, 2016, -1000, -1000, -1000, -1000, 1129,
	-1000, -1000, -1000, 42572, -1000, -1000, 937, -1000, -1000, 937,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 978, 59218, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1390, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1919, -1000, 1425, -1000, -1000, 2574, 2036,
	1729, 2251, 2251, 2251, 2378, 394, 383, -1000, 122, -1000,
	-1000, 66985, -1000, -1000, 24886, 24886, 24886, 24886, 24886, 1397,
	-1000, 600, -1000, -1000, 639, -1000, 598, 541, -1000, -1000,
	-1000, -1000, -1000, -1000, 597, 2512, -1000, 842, -1000, -1000,
	-1000, -1000, 2457, -1000, 14804, -1000, -1000, -1000, 368, 596,
	24886, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 234, 752, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 521, 1325, 520, 520, 520, -1000, -1000,
	802, -1000, -1000, -1000, 298, 519, 275, 513, -1000, -1000,
	-1000, -1000, 2066, 595, 594, -1000, 592, 591, 587, -1000,
	-1000, -1000, 586, 585, 584, 583, 580, 579, 578, 570,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 801, -1000, 569,
	567, 564, 561, 560, 555, 554, 553, 552, -1000, -1000,
	-16, 57208, -1000, 412, -16, -1000, -1000, 551, -1000, 18709,
	18709, 18709, -1000, -1000, 1518, 24886, -1000, 1933, -1000, 3929,
	-242, 703, 29071, -1000, 27428, 703, 647, 31945, -1000, 2013,
	-1000, -1000, 545, 227, -1000, -1000, 2005, 57208, 13080, 57208,
	47456, 47456, -1000, -1000, 24886, -1000, -1000, 38110, 34784, 57208,
	47858, 2424, 67460, 34784, 57208, 2064, -1000, -1000, -1000, 57208,
	-1000, 24886, -1000, 2423, 1144, -52, -1000, -1000, -1000, -1000,
	-1000, -1000, 1739, 1678, 921, 1550, 1062, -1000, 18278, 2284,
	-1000, -1000, -1000, 206, 13080, -1000, 1185, 2236, 1040, -1000,
	1548, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1291,
	2235, -1000, 3354, 2234, 1266, -1000, -1000, 773, 2233, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1462, -1000,
	-1000, 2309, -1000, -1000, 1760, 2232, -166, -1000, -1000, 38110,
	35186, -30, -1000, -1000, -83, -1000, 11828, 66985, -1000, -1000,
	-1000, 66985, 716, -1000, -1000, 2231, -1000, 66985, 715, -1000,
	-1000, 2229, -1000, -1000, -1000, 2571, -1000, 2569, 1685, 2568,
	2567, 2566, -1000, 1100, 1302, 2565, -1000, 2564, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 44606, 44198, 809, -1000, 1511,
	-1000, -1000, 43790, 762, 1674, -1000, -1000, 1666, -1000, 796,
	-1000, 2563, 51916, 1849, 762, 1654, -1000, -1000, -1000, -1000,
	-1000, 47456, -1000, 47456, -1000, 47456, -1000, 1114, -1000, 59620,
	-242, -1000, -1000, -1000, -1000, -1000, 2228, 2562, 2560, 2559,
	-1000, 57208, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 149, 2227, -1000, -1000, 149, 2225, -1000, 149, 2223,
	-1000, 148, 2222, -1000, -1000, 1529, 2220, -1000, -124, 2219,
	-1000, -1000, -124, 2201, -1000, -12, -1000, -1000, -1000, 827,
	-1000, 29479, 51508, 38110, 757, 613, 66985, -1000, 38110, 66985,
	-1000, 43790, -1000, 51100, 43388, -1000, -1000, 1053, 1792, -1000,
	-1000, -1000, -1000, 38110, 38110, -1000, 50692, -1000, -1000, -1000,
	1423, 2320, 47456, -1000, -1000, 2049, -1000, 34382, 47456, -1000,
	47456, -1000, 47456, -1000, 47456, -1000, 47456, -1000, -1000, -1000,
	-1000, -1000, 2169, 1277, 1276, -1000, 57208, -1000, -1000, 2329,
	57208, -1000, -1000, -1000, 1738, -1000, -1000, -1000, -1000, 47456,
	-1000, -1000, -1000, -1000, -1000, -1000, 2048, -1000, 1224, -1000,
	1046, -1000, -1000, 151, -1000, -1000, -52, -1000, 59218, -1000,
	-1000, 2036, 1729, -1000, 57208, -1000, -1000, -1000, 2036, 1541,
	1850, 23123, 1810, 24886, 122, -1000, -1000, 122, 122, 17847,
	-1000, -1000, 67460, 67460, 13080, 999, 24886, 24886, 24886, 24886,
	24886, 24886, 24886, 24886, 24886, 24886, 24886, 24886, 24886, 24886,
	24886, 24886, 24886, 24886, 24886, 24886, 24886, 24886, 24886, 24886,
	24886, 24886, 24886, 24886, 24886, 24886, 24886, 24886, 24886, 24886,
	24886, 1979, 24886, 974, 24886, 24886, 24886, 24886, 1838, -1000,
	-1000, 1401, 431, 1563, -1000, 2460, 2460, 2460, 67297, 67297,
	516, 2558, 639, -1000, 24886, -1000, -57, 24886, 13498, -1000,
	2501, 1037, -1000, -1000, 383, 7798, 1669, -1000, 382, 13942,
	-1000, -1000, -1000, 14804, 541, 22679, 24886, 787, 66985, 11412,
	1929, 1895, -1000, 2494, -1000, -1000, 2457, -1000, -1000, -1000,
	-1000, 2489, 994, 993, 2487, -1000, 2482, 2480, 535, 679,
	672, 660, 634, 633, 24886, 24886, 24886, 24886, 24886, 24886,
	24886, 24886, -1000, 22248, 21804, 21360, 26179, 20916, 24886, 15235,
	20472, 20028, 57208, -16, 2420, 24886, 152, -1000, 65828, -1000,
	152, 152, 534, -25, 66985, 1801, 1797, 28665, 2123, 1400,
	1400, 1400, -1000, 533, 627, 703, 8900, 49076, 1418, 703,
	703, 190, 217, 380, 27022, 1933, 49076, -1000, -1000, 47456,
	527, 13498, 13080, 1070, -29, 184, 1811, 1809, 1807, -1000,
	-42, 757, 964, -37, -1000, 3946, -44, -1000, 1021, -1000,
	-1000, -1000, -1000, 137, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 797, 525, 522, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 521, 1325, 520, 520, 520, -1000, -1000, -1000, 298,
	519, 275, 513, -1000, -1000, -1000, -1000, -1000, -1000, 2003,
	-83, 47858, 712, -48, 855, -52, -1000, 937, -1000, 1160,
	-1000, -1000, -1000, -1000, -1000, -1000, 1058, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2510, -1000, 2471, -1000, -1000, 2479,
	-22, -1000, -1000, 13080, -1000, -59, 1285, -1000, 39722, 2313,
	2311, 2304, 1112, -1000, 1077, 2375, 42572, 2393, -6, -1000,
	1996, -1000, -1000, 728, 1043, 959, 42572, 3354, -1000, 67460,
	-1000, 1884, 2369, 1092, 1094, 1092, 1092, 1081, -1000, 42572,
	952, 1344, 38110, -1000, 951, -1000, -60, 2391, -13, -1000,
	1995, 950, -1000, -1000, 47456, 13080, 695, -30, 35186, 57208,
	183, -1000, 24886, -57, 24886, -57, -1000, -1000, 2190, -1000,
	-1000, -1000, 2555, 1236, 1764, -1000, -1000, -1000, 512, 1652,
	3354, 1649, -1000, -1000, 42980, 1989, 57208, 1815, -41, 47456,
	-1000, -1000, 1333, -1000, 2184, 2177, 517, 2554, -1000, 1502,
	1638, -1000, -1000, -1000, 58816, 1003, 2175, 783, 106, 2414,
	106, 32757, -1000, 57208, -1000, 57208, -1000, -1000, -1000, 2553,
	-1000, 47456, -1000, -1000, 47456, -1000, 47456, -1000, 47456, -1000,
	47456, 47456, -1000, 57208, 38110, 38110, 38110, 3946, 38918, -50,
	379, -1000, 50290, 57208, 830, 39320, -210, 757, 695, -1000,
	695, -1000, 47456, 2045, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 57208, -1000, 57208, -1000, -1000, -1000, -1000,
	-1000, -1000, 1127, -1000, 2041, -1000, 2037, -1000, 26, -1000,
	-1000, -1000, -1000, 1515, 47456, 47456, 47456, -1000, 42572, -1000,
	-1000, 2036, -1000, -1000, -1000, -1000, -1000, 66985, -1000, 429,
	-1000, -1000, 66985, 1159, 1819, -1000, 1819, -36, -1000, 65447,
	1786, 47456, -1000, -1000, -1000, -1000, -1000, 726, 753, 753,
	945, 945, 945, 945, 2399, 3717, 744, 3402, 408, 408,
	408, 408, 408, 408, 408, 408, 1448, 316, 316, 1448,
	1448, 1448, 1448, 1448, 316, 316, 316, 408, 408, 408,
	67297, 67152, 5547, 24886, 24886, 949, 1399, 431, 5355, 24886,
	5742, 5742, 5742, 5742, -1000, 1733, -1000, -1000, -1000, -1000,
	1981, 509, 26179, 26179, -1000, -1000, -1000, -1000, 14373, 24886,
	-1000, -1000, -1000, -1000, 19584, -1000, -1000, 65066, -252, 378,
	-203, 6, -1000, 24886, 24886, 24886, 377, -1000, 374, -1000,
	-1000, 947, -1000, 935, 931, 916, -1000, 508, 182, 24886,
	57208, -1000, 62780, 623, -164, -1000, -54, 1088, -1000, 24886,
	178, -1000, 1413, 506, 502, 372, -55, 370, 725, 722,
	369, 360, 358, 24886, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 66838, 62474, 62399, 62093, 7723, 62018,
	61712, -69, 356, -1000, 1978, -203, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 355, -1000, 350, -1000, 66671, -203, 348,
	661, -1000, 26179, 26179, 26179, -1000, 344, -1000, 65522, -1000,
	66524, 19153, 19153, 19153, 343, 66357, 24886, -203, -73, -1000,
	-74, -1000, -1000, 500, -75, 783, 18709, 27850, 13080, -1000,
	783, 783, 24886, -1000, 24886, 28665, 28665, 1187, 1796, 28665,
	-1000, -1000, -1000, -1000, 49076, 616, 703, 49076, -1000, 2457,
	1852, -1000, -1000, -1000, 57208, 412, -1000, 49076, 49076, 13080,
	703, -1000, 341, 31131, 6, 177, -1000, -1000, 13080, 1845,
	1845, 1845, -1000, 1975, 57208, 2437, -1000, -1000, 67460, -1000,
	638, 939, -1000, 2478, 498, -1000, 2457, 2457, 57208, 103,
	18278, -1000, 937, -1000, -1000, 1168, -1000, 1298, -1000, 925,
	-1000, -1000, -1000, 18278, -1000, 1507, 47456, 57208, 57208, -1000,
	-1000, 1625, 58414, 1618, 67460, 57208, -1000, -1000, 497, 496,
	1782, 1781, 57208, 57208, 58012, 57610, 57208, 1395, 24886, 1557,
	1176, -57, -1000, -57, 495, 1006, 47456, 47456, 1242, -1000,
	-1000, -1000, -1000, -1000, 47456, -1000, -1000, 2477, -1000, 1092,
	-1000, -1000, -1000, 1092, 3354, 1241, 47456, 38110, 771, 57208,
	1340, -57, -1000, -57, 494, 13080, 1338, -1000, 1868, -1000,
	-1000, -1000, 10996, 66985, -1000, 66985, -1000, 57208, -1000, 804,
	57208, 39320, 738, 2174, -1000, 3354, 2173, 412, -1000, -1000,
	32351, -83, 757, 38110, 47456, -41, 38110, 38110, 38110, 2552,
	493, 2551, -1000, 47456, 2166, 1495, 1615, 2124, 682, 57208,
	1432, -1000, 24886, 1227, -1000, 31539, 817, 57208, 1180, 70,
	-1000, -1000, -1000, 16, 57208, -1000, 2550, -1000, -1000, 149,
	149, 149, -1000, 148, 1529, -1000, -124, -124, -1000, -1000,
	3946, 757, -43, 492, -1000, 691, 686, 30309, 38110, -81,
	-1000, -1000, -1000, -1000, -1000, 47456, 57208, 565, 1844, 57208,
	-1000, 757, -1000, -1000, 770, -1000, 1042, -83, -83, -1000,
	1122, 1097, 57208, -1000, 13080, 57208, 47456, 13080, 47456, -1000,
	-1000, -1000, -1000, -1000, 1159, -1000, 24886, -1000, -1000, -1000,
	17847, -1000, -1000, -1000, 47456, -213, 24886, 24886, 4742, 4698,
	24886, 26179, 26179, -1000, 24886, 4350, -1000, -1000, -1000, -1000,
	-1000, 1974, 491, 24886, 67460, 5928, 5571, -1000, 339, 61637,
	1448, -1000, 24886, -1000, 335, 17416, -1000, 65903, -40, -40,
	-1000, 2507, 1708, 1445, 1234, 1146, 2474, 10580, -203, -86,
	-1000, -1000, 629, -1000, 2120, -1000, 24886, 66209, 10164, -1000,
	33163, 785, 1432, -1000, -1000, 2457, 717, -1000, -1000, -1000,
	717, -1000, 64760, 67460, 67460, 24886, 24886, -1000, 24886, 24886,
	24886, -1000, -1000, 24886, -1000, -1000, 1969, 24886, -1000, 67460,
	67460, 26179, 26179, 26179, 26179, 26179, 26179, 26179, 26179, 26179,
	26179, 26179, 26179, 26179, 26179, 26179, 26179, 26179, 26179, 26179,
	1734, 26179, 2458, 2458, 2458, -1000, 2024, 1969, 24886, 24886,
	67460, 332, 331, 330, -1000, 24886, -203, -1000, -1000, 3946,
	-1000, 1892, -1000, -177, -1000, 1933, -1000, -1000, 1892, 1892,
	-88, 66985, -1000, 1187, -1000, 487, 24886, 28665, -1000, 621,
	-1000, -106, -1000, 49076, -1000, 620, -249, -1000, 685, -1000,
	-1000, -1000, 412, -1000, -1000, -1000, 176, 49076, -1000, -107,
	-1000, 2408, 329, 13080, -1000, -1000, -1000, -1000, -1000, -1000,
	-57, -83, 1460, -1000, 2465, -1000, 615, 327, 2457, 326,
	325, -83, 57208, -1000, -52, -1000, -1000, -1000, 24886, -1000,
	-1000, -1000, 915, 914, -1000, 2162, -1000, 1599, -1000, 821,
	-1000, 1205, 24886, 24886, 486, 485, 1337, 2547, 2160, 1529,
	2151, 1529, -1000, -1000, 732, -1000, 66985, 478, 472, -1000,
	-59, 1199, -1000, -1000, 24886, 24886, 49884, -1000, 2309, -1000,
	911, -1000, -1000, -1000, 3354, 910, -1000, -1000, 1328, -1000,
	-1000, -1000, -1000, 24886, -1000, -60, 908, 757, 1959, -1000,
	2546, 2539, 2538, 324, -71, -1000, 2406, 1531, 57208, 47456,
	47456, 2404, 695, -1000, 2457, -1000, -1000, -1000, -1000, 762,
	-1000, -1000, 2537, -1000, 828, 13080, 47456, 2143, 1753, 682,
	38516, -1000, 762, 1850, -1000, 66985, -1000, 1180, 16972, 2307,
	-112, -1000, 175, -1000, -1000, -1000, 783, 32757, 28665, 24886,
	2535, -113, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	49482, 49482, 38110, 38110, 38110, 757, 57208, 57208, 39320, 2533,
	462, 57208, 57208, 460, -1000, -1000, -1000, 1440, 47456, -1000,
	-1000, 761, -1000, -1000, 1346, 1544, -1000, 1463, 64685, -1000,
	2326, 13080, 2396, 5742, 24886, 24886, 209, 3994, 475, 5742,
	24886, 24886, 67460, 7236, -114, 24886, 24886, -1000, 24886, 610,
	66985, 2506, 24886, 320, 319, 317, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 315, -1000, -1000, -1000, -1000, -1000,
	66985, 24886, 159, -1000, -1000, -1000, 61228, -1000, 24886, 300,
	299, -1000, -1000, -1000, 296, 292, 8312, 6495, 64379, 64304,
	63998, 66985, 2024, 66985, -1000, -1000, 690, 690, 1069, 1069,
	1069, 1069, 2458, 1606, 581, 1296, 444, 444, 444, 961,
	488, 488, 444, 444, 444, 1958, 1683, 459, 1232, -1000,
	-1000, 66985, 66985, 291, -1000, -1000, -1000, -203, 285, 1879,
	2368, -1000, 28665, 1879, 1879, -1000, -1000, 57208, 66985, -1000,
	-242, -1000, 2457, -1000, -1000, 1852, -1000, 9328, -1000, 13080,
	-1000, -1000, 31131, -1000, 455, -1000, 17, -1000, -1000, 609,
	-1000, -1000, 284, -1000, -1000, -83, 66985, 57208, 57208, 57208,
	2138, -1000, 3884, -1000, 63923, -123, -1000, 65447, 24886, 57208,
	-1000, 1353, 1816, 845, -1000, 57208, -1000, 57208, -1000, -1000,
	57208, 57208, 47456, 57208, 57208, -125, 66985, -96, -1000, 684,
	-1000, 47456, 47456, 38110, -129, 13080, -1000, 38110, -1000, -1000,
	-1000, 1836, -57, -1000, 2532, 453, 3354, -57, -1000, 607,
	-1000, -1000, 451, 57208, 1493, 449, 13080, 1757, 682, 38516,
	-1000, 1003, 1180, -1000, -1000, -111, -1000, 474, -57, 57208,
	2524, 1432, -1000, -122, 66985, -1000, 683, -1000, -131, -1000,
	-1000, 280, -1000, 2274, 2271, -1000, -1000, 24886, 448, 447,
	57208, 1642, -1000, -1000, -1000, -1000, 13080, 1029, -1000, -1000,
	-1000, 2326, 5742, 5742, 24886, 24886, 24886, 5742, 7236, -135,
	-1000, 5742, 5742, -203, -1000, -1000, 65903, -1000, -1000, -1000,
	-1000, 66985, 9748, 1349, -1000, 63617, -1000, -1000, -1000, -1000,
	24886, 24886, -1000, -1000, -1000, -1000, -1000, 26179, 1951, 442,
	67460, -1000, -1000, 780, 24886, 24886, 1933, 780, 780, -136,
	703, -1000, -1000, -1000, 2457, 17, -1000, 2517, 13080, -1000,
	-1000, -1000, -1000, -1000, 57208, -1000, 57208, -1000, 13080, 57208,
	1950, 1585, -1000, -1000, 1763, 441, 26179, 47456, 714, 1908,
	1339, 24886, -1000, -142, -144, 1562, -1000, -1000, 1559, 24886,
	-1000, 67460, 1529, 1529, -149, -150, -1000, 906, 893, 870,
	57208, 16541, -1000, -1000, -1000, 867, -1000, -124, 1340, 1859,
	759, -1000, 39320, 738, -1000, -1000, -1000, 24886, -1000, 47456,
	24886, 1492, -1000, 682, 38516, -1000, 2124, -1000, 2149, 57208,
	2299, -1000, -1000, -1000, 1850, 431, -1000, 757, 430, 427,
	-154, 24886, 24886, -155, -133, -1000, 694, 692, -1000, -1000,
	47456, -1000, 5742, 5742, 5742, -1000, 266, -1000, -1000, 1432,
	2365, -1000, 63542, 63236, 1628, 26179, 67460, -156, -1000, 57208,
	66985, -203, -1000, -1000, -1000, 49076, 445, -1000, -1000, 1861,
	-1000, -1000, -1000, 57208, 1590, -1000, -1000, 24886, 1232, 425,
	24886, -1000, -1000, 1830, 1980, 1836, 423, -1000, -1000, -1000,
	-1000, 1212, -1000, -1000, 66985, 2337, -1000, -1000, 422, 419,
	57208, 57208, 418, 665, 1949, -1000, 417, 738, -1000, 1380,
	-1000, 1857, 265, 2403, -160, 828, -168, 47456, 38516, -1000,
	1753, 995, -170, 57208, 1180, -1000, -1000, 38110, 38110, 1339,
	-175, -176, -1000, 1642, -1000, 57208, -1000, 57208, -1000, -1000,
	1320, 24886, -1000, -1000, 1628, -180, -1000, -151, -1000, 2397,
	-1000, -1000, -1000, -1000, 2131, 63161, 1718, 57208, 62855, 1932,
	-1000, -1000, 1340, 57208, 47456, 806, 13080, 1346, 1346, -1000,
	-1000, 24886, 16110, 1373, 24886, -1000, 47456, -1000, 2270, 1836,
	-57, 1339, 416, 1339, 415, -1000, 1757, 1108, -1000, 783,
	-1000, -1000, -182, -186, 1836, 1339, -1000, -1000, -187, -188,
	262, 25748, 25748, 25748, -203, -1000, 57208, 414, 2093, -1000,
	1465, 1287, 254, 847, -1000, -1000, 1908, -193, 412, -1000,
	24886, -1000, -194, -1000, 816, -204, -1000, 815, -205, -1000,
	1922, -1000, -214, 410, -1000, 1340, 759, 1836, 24886, 1836,
	24886, -1000, 32757, -1000, 757, 757, 1340, 1836, -1000, -1000,
	-1000, -1000, -1000, 26595, 1464, 1163, 65141, -1000, -1000, -1000,
	-1000, 57208, -1000, 1473, 1471, 1120, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1718, 66985, -1000, 1346, 1856, -1000,
	1346, 1906, -1000, 1362, -1000, 57208, 738, -1000, 1340, -215,
	1340, -216, -202, -1000, -1000, -1000, 1340, 2430, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2258, -1000, 836, 1450, 1450,
	1465, -1000, 409, -1000, 407, -1000, -220, -1000, 782, 1339,
	782, 1339, -1000, -1000, 25317, -1000, 2442, -1000, -1000, 1727,
	-1000, 1908, 24886, 24886, 1488, -1000, 2516, 1836, -1000, 1836,
	-1000, -1000, -1000, -1000, -1000, -221, -229, -1000, -1000, -1000,
	-1000, 1340, 1340, 1340, 864, 782, 782, -1000, 406, -1000,
	-1000, 24886, -233, 1340, -1000,
}
var sqlPgo = [...]int{

	0, 3182, 3181, 3179, 3175, 3174, 3170, 3167, 3166, 3161,
	3155, 3154, 3153, 3151, 3150, 3147, 3146, 3144, 3140, 3138,
	3133, 3131, 3130, 3125, 3124, 3123, 3122, 3113, 3112, 3111,
	3110, 3109, 3107, 3104, 3102, 3101, 3099, 3098, 3094, 3093,
	3090, 3089, 3087, 3085, 29, 3083, 3082, 3079, 3078, 3073,
	3068, 3066, 3065, 3064, 3059, 3058, 3057, 3056, 3052, 3051,
	3048, 3046, 3042, 3040, 3039, 3037, 3034, 3033, 3023, 3022,
	3021, 3020, 3019, 3018, 118, 3017, 3016, 3015, 3014, 3013,
	3009, 3007, 3005, 3004, 3003, 2993, 2992, 2991, 2984, 107,
	2982, 2981, 2978, 2976, 2975, 2974, 2972, 2971, 2970, 2968,
	175, 2967, 2966, 2959, 2958, 2956, 2955, 2954, 2949, 2948,
	2943, 2941, 2923, 2922, 2920, 2919, 2918, 2917, 2916, 2915,
	2914, 2912, 2907, 2905, 2904, 2901, 2899, 196, 134, 2896,
	2895, 2892, 2882, 2881, 2880, 89, 85, 20, 2879, 96,
	131, 180, 284, 166, 2878, 2871, 2870, 2869, 2865, 64,
	124, 127, 122, 119, 240, 2861, 2860, 69, 51, 30,
	28, 94, 2857, 2850, 2849, 2373, 84, 2847, 2845, 186,
	173, 2844, 1572, 2843, 130, 86, 77, 111, 63, 2842,
	103, 15, 2841, 178, 38, 2839, 116, 74, 33, 5267,
	5460, 2838, 88, 194, 73, 123, 155, 151, 160, 158,
	120, 1343, 2837, 176, 2836, 121, 144, 2835, 2833, 2832,
	53, 139, 2, 5, 132, 9, 2831, 13, 2827, 11,
	2826, 2825, 2824, 2823, 27, 117, 2822, 44, 36, 2821,
	19, 58, 161, 2820, 159, 2819, 87, 2818, 183, 145,
	143, 18, 164, 2817, 2816, 2815, 2814, 2813, 91, 21,
	90, 2811, 2807, 101, 168, 2806, 32, 129, 70, 95,
	192, 83, 157, 99, 163, 162, 2804, 2803, 2801, 136,
	2797, 2795, 115, 153, 2794, 2793, 34, 56, 169, 54,
	2792, 2791, 114, 2789, 149, 2788, 2787, 2786, 193, 128,
	152, 7, 67, 79, 26, 10, 167, 110, 72, 71,
	2785, 2379, 1432, 1195, 2784, 100, 81, 50, 80, 113,
	187, 59, 2783, 2782, 1118, 2781, 2780, 2777, 2776, 133,
	2775, 2773, 2771, 97, 37, 68, 2770, 112, 57, 147,
	189, 76, 154, 148, 179, 2767, 126, 2766, 98, 108,
	2758, 142, 177, 62, 2756, 1031, 135, 2751, 185, 2746,
	2745, 2744, 2742, 274, 2740, 2739, 338, 2733, 102, 2732,
	2731, 138, 156, 623, 31, 2729, 55, 484, 2728, 141,
	40, 2725, 411, 43, 0, 5713, 4334, 5311, 2724, 1369,
	2720, 150, 92, 2718, 2717, 2716, 2715, 35, 12, 6,
	8, 16, 14, 1532, 1049, 2713, 2708, 75, 93, 104,
	2702, 188, 165, 2701, 2700, 2698, 66, 2697, 25, 2696,
	23, 2695, 2693, 24, 1, 2687, 2684, 172, 2683, 174,
	2682, 2678, 2427, 2677, 190, 2676, 106, 2675, 125, 109,
	2674, 2656, 2654, 2653, 182, 2652, 184, 2651, 17, 22,
	3, 2649, 2647, 2646, 146, 4, 2246, 2643, 2642, 61,
	140, 65, 2641, 2640, 137,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 3, 3, 3,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 32, 32, 10,
	10, 9, 9, 9, 11, 11, 6, 6, 6, 6,
	6, 6, 6, 6, 13, 13, 23, 23, 14, 25,
	424, 424, 17, 27, 18, 28, 12, 426, 426, 426,
	426, 21, 19, 19, 29, 138, 138, 138, 138, 16,
	16, 24, 24, 151, 151, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 423, 423, 153, 153, 152, 148,
	148, 427, 427, 154, 154, 154, 156, 156, 33, 33,
	87, 87, 87, 139, 80, 80, 80, 80, 80, 80,
	80, 75, 75, 372, 372, 373, 373, 134, 134, 135,
	135, 135, 135, 136, 136, 137, 137, 137, 47, 35,
	35, 35, 35, 35, 35, 35, 36, 36, 36, 36,
	37, 37, 37, 37, 37, 37, 38, 38, 38, 38,
	38, 38, 45, 45, 45, 45, 128, 128, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 432, 432,
	433, 433, 434, 434, 435, 435, 435, 435, 435, 435,
	435, 435, 435, 435, 435, 435, 435, 435, 435, 435,
	435, 435, 435, 435, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 59,
	59, 226, 226, 204, 204, 49, 49, 419, 419, 239,
	239, 340, 340, 61, 61, 62, 62, 62, 62, 62,
	62, 63, 63, 63, 63, 63, 63, 63, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 70, 70,
	70, 71, 71, 71, 68, 68, 68, 66, 66, 66,
	65, 65, 65, 69, 69, 69, 67, 67, 67, 240,
	240, 72, 72, 72, 72, 72, 72, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 342, 342,
	73, 73, 312, 312, 76, 76, 270, 270, 77, 77,
	77, 77, 77, 78, 78, 78, 78, 88, 88, 88,
	88, 422, 422, 232, 232, 169, 169, 169, 169, 83,
	83, 83, 83, 84, 84, 84, 85, 85, 133, 133,
	94, 94, 94, 94, 94, 93, 93, 93, 93, 93,
	93, 39, 39, 39, 40, 40, 41, 41, 42, 42,
	43, 43, 44, 44, 44, 44, 44, 96, 96, 428,
	428, 98, 95, 95, 95, 97, 97, 97, 97, 99,
	100, 100, 100, 100, 100, 100, 101, 101, 366, 366,
	247, 247, 364, 364, 380, 380, 365, 365, 208, 208,
	208, 208, 208, 209, 209, 209, 371, 371, 371, 371,
	371, 371, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 118,
	118, 118, 127, 127, 127, 127, 127, 127, 127, 120,
	120, 120, 111, 111, 103, 103, 103, 103, 107, 107,
	107, 107, 107, 104, 104, 108, 108, 110, 110, 112,
	112, 112, 112, 112, 112, 105, 105, 105, 105, 114,
	114, 114, 114, 113, 113, 123, 123, 123, 123, 123,
	123, 326, 326, 119, 119, 119, 119, 122, 122, 122,
	122, 261, 261, 117, 117, 117, 121, 121, 124, 124,
	124, 124, 106, 106, 106, 437, 437, 437, 125, 125,
	116, 116, 126, 126, 126, 126, 126, 126, 126, 115,
	115, 115, 425, 425, 109, 420, 420, 417, 417, 417,
	417, 417, 417, 417, 418, 418, 421, 421, 81, 81,
	81, 54, 54, 438, 438, 438, 55, 55, 439, 439,
	439, 436, 436, 436, 436, 436, 436, 436, 436, 210,
	210, 211, 211, 293, 293, 293, 293, 293, 212, 212,
	155, 155, 155, 215, 216, 216, 213, 213, 214, 214,
	214, 218, 218, 217, 220, 220, 219, 292, 385, 385,
	386, 386, 386, 386, 386, 386, 386, 387, 387, 387,
	387, 387, 387, 387, 387, 387, 387, 383, 383, 383,
	384, 381, 381, 382, 382, 382, 382, 440, 440, 440,
	440, 440, 440, 441, 441, 291, 291, 224, 224, 388,
	388, 388, 388, 389, 389, 389, 389, 389, 392, 391,
	390, 390, 390, 390, 390, 322, 322, 322, 58, 58,
	58, 258, 258, 257, 257, 259, 259, 259, 259, 259,
	259, 259, 259, 259, 259, 259, 259, 259, 259, 130,
	130, 56, 56, 56, 161, 161, 53, 53, 53, 443,
	443, 57, 57, 57, 444, 444, 60, 60, 60, 60,
	60, 60, 52, 52, 52, 52, 52, 445, 445, 276,
	276, 275, 275, 230, 230, 328, 173, 173, 149, 149,
	149, 20, 22, 22, 15, 15, 15, 15, 15, 15,
	30, 30, 31, 31, 26, 26, 429, 429, 430, 430,
	82, 82, 86, 86, 86, 92, 92, 129, 129, 129,
	129, 129, 129, 129, 34, 34, 34, 34, 46, 46,
	46, 46, 90, 447, 447, 447, 91, 91, 446, 446,
	168, 168, 168, 168, 170, 170, 288, 288, 289, 289,
	448, 448, 290, 290, 290, 290, 163, 162, 164, 164,
	51, 51, 51, 157, 157, 158, 158, 159, 159, 160,
	160, 449, 449, 79, 79, 79, 132, 132, 203, 203,
	284, 284, 284, 225, 225, 178, 178, 287, 287, 285,
	285, 285, 285, 256, 256, 256, 131, 131, 235, 235,
	249, 249, 250, 250, 337, 337, 251, 89, 89, 142,
	142, 140, 140, 140, 140, 140, 140, 450, 450, 141,
	141, 141, 143, 143, 143, 143, 143, 143, 143, 146,
	146, 146, 146, 147, 147, 147, 145, 145, 399, 399,
	399, 401, 401, 402, 398, 398, 400, 400, 442, 442,
	260, 260, 260, 222, 223, 221, 221, 451, 451, 228,
	228, 227, 229, 229, 327, 327, 327, 254, 254, 254,
	254, 279, 279, 277, 277, 278, 278, 280, 280, 281,
	281, 281, 282, 282, 283, 283, 253, 253, 308, 308,
	144, 144, 144, 234, 234, 234, 236, 236, 299, 299,
	299, 299, 299, 300, 300, 298, 298, 298, 298, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 330, 330,
	237, 237, 331, 286, 286, 415, 415, 415, 416, 416,
	325, 325, 332, 332, 332, 332, 332, 332, 323, 323,
	324, 324, 338, 339, 339, 264, 264, 264, 264, 262,
	262, 263, 263, 333, 333, 333, 333, 255, 255, 334,
	334, 334, 335, 294, 295, 295, 343, 343, 343, 343,
	358, 233, 233, 233, 452, 452, 344, 344, 344, 344,
	344, 344, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 348, 348, 348, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 357, 357, 357, 357, 357,
	349, 349, 354, 354, 355, 355, 355, 350, 351, 356,
	356, 356, 356, 453, 453, 360, 360, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 346, 346, 346, 353,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 271, 271, 272, 272, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 303, 303, 303, 303, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 393, 393, 393, 393, 393, 393, 393, 393, 396,
	396, 397, 397, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 403, 403, 404, 404, 406, 406, 407, 407,
	408, 409, 409, 409, 410, 411, 411, 405, 405, 412,
	412, 412, 412, 413, 413, 414, 414, 414, 414, 414,
	314, 314, 315, 315, 321, 321, 321, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 171, 171, 171, 171, 171, 245, 245,
	243, 243, 243, 246, 246, 244, 244, 242, 242, 241,
	241, 311, 311, 309, 309, 313, 313, 265, 265, 359,
	359, 359, 359, 359, 359, 359, 266, 266, 266, 274,
	267, 267, 268, 268, 268, 268, 268, 305, 306, 269,
	269, 269, 307, 307, 316, 320, 320, 319, 318, 318,
	317, 317, 296, 296, 297, 297, 252, 252, 454, 454,
	248, 248, 336, 336, 336, 336, 206, 206, 238, 238,
	205, 205, 198, 198, 199, 199, 199, 199, 231, 231,
	361, 361, 361, 362, 363, 310, 188, 187, 175, 176,
	186, 185, 184, 174, 177, 181, 182, 183, 179, 180,
	194, 193, 192, 190, 191, 341, 200, 200, 201, 201,
	201, 202, 202, 202, 202, 172, 172, 195, 195, 196,
	197, 197, 189, 189, 189, 165, 165, 165, 166, 166,
	167, 167, 370, 370, 368, 368, 368, 369, 369, 369,
	369, 367, 367, 367, 367, 367, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 376, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 379, 379,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 0, 1, 1, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 1, 3, 1, 1, 3, 4, 6, 1,
	3, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 3, 4, 6, 4, 6, 6, 6,
	1, 1, 5, 5, 6, 6, 4, 4, 4, 4,
	3, 4, 4, 7, 4, 5, 3, 5, 7, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 5, 6, 6, 4, 8, 3, 4, 3, 6,
	4, 3, 1, 3, 2, 1, 1, 3, 1, 3,
	2, 2, 0, 1, 1, 0, 2, 0, 7, 2,
	5, 6, 2, 1, 6, 4, 9, 7, 12, 12,
	2, 7, 2, 1, 1, 1, 3, 3, 0, 3,
	1, 3, 1, 1, 3, 2, 5, 0, 5, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 3, 3,
	3, 5, 3, 3, 5, 3, 3, 5, 3, 3,
	5, 3, 6, 6, 6, 3, 1, 1, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 3, 3, 4,
	3, 4, 7, 4, 4, 4, 3, 5, 7, 4,
	3, 3, 4, 3, 3, 3, 3, 3, 2, 0,
	1, 0, 1, 0, 3, 3, 3, 3, 3, 6,
	4, 4, 4, 3, 5, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 4, 1, 1, 2, 1, 2, 7,
	3, 2, 0, 1, 3, 6, 5, 1, 2, 1,
	3, 2, 0, 8, 3, 2, 2, 2, 2, 2,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 3, 5, 3, 3, 5, 3, 1,
	3, 2, 2, 5, 3, 6, 3, 1, 1, 2,
	1, 1, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 3,
	5, 2, 3, 0, 3, 2, 3, 0, 2, 3,
	2, 3, 2, 6, 4, 7, 2, 6, 4, 7,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	2, 1, 2, 2, 3, 2, 4, 3, 2, 2,
	1, 2, 1, 3, 3, 1, 2, 1, 2, 1,
	2, 1, 1, 3, 5, 4, 6, 4, 3, 0,
	1, 3, 2, 4, 2, 4, 1, 6, 3, 1,
	1, 5, 3, 2, 6, 3, 3, 4, 4, 3,
	1, 3, 2, 1, 3, 1, 2, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 1, 3, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 2,
	3, 3, 1, 1, 1, 1, 1, 2, 2, 5,
	7, 3, 3, 3, 3, 4, 4, 3, 4, 4,
	3, 4, 4, 4, 3, 2, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 2,
	3, 3, 3, 2, 3, 5, 4, 6, 4, 6,
	4, 1, 0, 2, 3, 3, 3, 7, 5, 3,
	3, 2, 0, 4, 2, 3, 3, 3, 4, 3,
	3, 3, 3, 4, 3, 1, 1, 1, 2, 3,
	2, 3, 6, 6, 7, 9, 6, 3, 4, 5,
	5, 3, 1, 1, 5, 2, 0, 1, 1, 1,
	1, 3, 2, 2, 2, 1, 2, 0, 3, 3,
	2, 10, 13, 0, 2, 3, 9, 12, 0, 2,
	3, 1, 1, 2, 2, 2, 2, 1, 0, 1,
	0, 1, 3, 1, 1, 1, 1, 3, 8, 0,
	1, 1, 0, 2, 1, 0, 1, 0, 9, 9,
	3, 1, 3, 7, 1, 3, 11, 3, 2, 0,
	3, 1, 2, 2, 3, 2, 6, 2, 1, 1,
	2, 4, 2, 5, 5, 5, 2, 8, 9, 6,
	5, 3, 1, 5, 8, 5, 11, 0, 1, 3,
	3, 2, 2, 1, 1, 4, 0, 3, 0, 2,
	2, 2, 0, 1, 1, 2, 2, 0, 3, 3,
	2, 1, 1, 2, 2, 1, 2, 1, 5, 8,
	4, 1, 0, 1, 2, 2, 1, 2, 3, 2,
	2, 3, 2, 2, 2, 2, 2, 3, 1, 4,
	2, 4, 7, 3, 3, 0, 3, 6, 3, 1,
	1, 8, 7, 5, 0, 1, 6, 7, 6, 5,
	3, 4, 14, 17, 14, 17, 4, 0, 2, 2,
	0, 1, 0, 1, 3, 2, 2, 0, 1, 1,
	0, 6, 6, 8, 6, 8, 8, 10, 8, 10,
	6, 8, 6, 8, 6, 8, 1, 0, 2, 0,
	2, 2, 3, 3, 2, 2, 2, 1, 2, 1,
	2, 1, 2, 1, 3, 2, 3, 2, 2, 2,
	2, 2, 2, 1, 1, 0, 2, 2, 1, 0,
	1, 3, 2, 0, 2, 1, 1, 0, 1, 3,
	1, 0, 1, 1, 1, 1, 2, 3, 2, 2,
	8, 11, 3, 3, 0, 3, 0, 3, 0, 3,
	0, 1, 0, 6, 7, 3, 6, 3, 1, 3,
	1, 4, 2, 1, 3, 1, 3, 8, 5, 3,
	4, 3, 0, 2, 2, 0, 10, 3, 2, 0,
	1, 3, 1, 1, 3, 3, 5, 1, 1, 3,
	3, 2, 3, 4, 3, 4, 5, 0, 2, 2,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 8,
	8, 8, 2, 4, 4, 4, 2, 2, 2, 2,
	3, 1, 3, 6, 1, 0, 1, 0, 1, 0,
	1, 1, 0, 1, 5, 1, 0, 1, 0, 1,
	0, 3, 1, 3, 2, 4, 5, 2, 2, 1,
	1, 1, 0, 2, 5, 2, 3, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 3, 0, 2, 0,
	4, 2, 5, 3, 2, 0, 1, 3, 3, 5,
	1, 1, 1, 1, 3, 2, 4, 4, 0, 8,
	4, 3, 4, 1, 5, 3, 4, 5, 1, 5,
	1, 3, 2, 0, 3, 0, 2, 3, 1, 3,
	2, 0, 3, 4, 5, 4, 5, 4, 3, 2,
	1, 0, 5, 1, 0, 2, 2, 2, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 2, 1, 0, 2, 5, 2, 1,
	1, 2, 3, 0, 1, 1, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 5, 4, 1, 2, 1, 4, 1, 1,
	2, 1, 1, 1, 1, 1, 0, 1, 2, 5,
	1, 4, 2, 5, 1, 4, 3, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 1, 0, 1, 4, 1, 3, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 5, 4, 6, 3, 5, 4, 6, 4,
	6, 5, 7, 3, 3, 3, 3, 3, 4, 3,
	2, 4, 2, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	4, 1, 3, 1, 3, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 6, 2, 1, 5, 1, 1, 1, 1, 2,
	1, 5, 5, 3, 1, 1, 1, 2, 2, 2,
	4, 3, 5, 6, 8, 6, 6, 4, 3, 4,
	1, 1, 1, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 6, 6, 8, 8, 6, 4, 6,
	6, 6, 4, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 3, 4, 3, 4, 3,
	4, 4, 3, 6, 5, 5, 5, 4, 4, 3,
	4, 3, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 2,
	2, 2, 0, 1, 4, 2, 2, 2, 2, 2,
	4, 1, 1, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 2, 3,
	1, 2, 3, 2, 3, 2, 3, 1, 0, 1,
	3, 1, 3, 3, 3, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 1, 2,
	3, 0, 3, 3, 2, 2, 1, 2, 2, 3,
	2, 1, 1, 1, 5, 1, 2, 4, 2, 0,
	1, 0, 3, 5, 1, 0, 1, 2, 1, 0,
	1, 3, 3, 2, 1, 1, 1, 3, 1, 3,
	3, 1, 1, 1, 1, 5, 3, 1, 1, 3,
	1, 2, 2, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	7, 1, 7, 5, 3, 1, 1, 1, 1, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 445, -74, -47, -45, -76, -77, -62,
	-75, -78, -73, -88, -92, -82, -94, -129, -3, -33,
	-35, -48, -61, -63, -72, -80, -79, -81, -83, -87,
	-86, -39, -89, -93, -102, -130, -131, -132, 80, 67,
	120, 102, 107, 126, 152, 276, 305, 315, 299, -97,
	-98, 334, -34, -46, -91, -90, -4, -10, 27, 38,
	-36, -37, -38, 52, -56, -53, -50, -59, -431, 82,
	-400, -64, -67, -69, -435, 112, 125, 163, 269, -84,
	-85, 301, 303, -41, -40, 121, -140, -142, -95, -96,
	-133, -103, -104, -105, -106, -107, -108, -109, -110, -111,
	-112, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, 337, 383, 39, 346, 68,
	115, 309, 21, -5, -6, -7, -8, -9, -11, -22,
	-49, -51, -52, -54, -55, -60, -57, -58, -399, -65,
	-66, -68, -70, -71, 300, -143, -141, 442, 395, -13,
	-17, -18, -14, -16, -19, -15, -23, -27, -28, -25,
	-24, -26, -29, -30, -31, -32, -20, -21, -12, 413,
	421, -146, -144, -145, -147, 322, 403, 360, 445, 445,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, 445, 445, 445, -190, -195,
	-196, -197, -189, -165, -376, -379, 4, -374, -377, 131,
	176, 240, 21, 22, 23, 24, 25, 27, 37, 38,
	39, 42, 44, 45, 48, 49, 50, 51, 52, 53,
	56, 61, 66, 67, 68, 69, 70, 75, 72, 73,
	74, 77, 79, 80, 81, 84, 85, 93, 94, 95,
	96, 97, 98, 102, 105, 104, 107, 110, 111, 112,
	114, 116, 117, 120, 121, 124, 122, 366, 368, 123,
	125, 126, 127, 137, 138, 139, 141, 142, 144, 146,
	150, 151, 153, 157, 159, 160, 161, 162, 163, 164,
	165, 177, 172, 178, 182, 185, 184, 186, 187, 188,
	179, 193, 196, 197, 198, 200, 201, 204, 205, 206,
	207, 210, 209, 212, 215, 216, 219, 220, 223, 225,
	226, 228, 229, 227, 230, 233, 231, 232, 235, 236,
	238, 237, 245, 246, 248, 249, 250, 264, 253, 254,
	257, 260, 263, 265, 266, 267, 268, 269, 270, 272,
	274, 276, 278, 280, 281, 282, 283, 284, 285, 287,
	288, 290, 291, 292, 293, 294, 299, 296, 297, 298,
	300, 301, 302, 303, 305, 307, 308, 309, 310, 312,
	314, 335, 336, 348, 315, 316, 317, 318, 319, 320,
	321, 325, 329, 326, 327, 328, 330, 323, 324, 331,
	332, 334, 337, 339, 341, 342, 345, 346, 347, 349,
	352, 353, 354, 350, 351, 344, 359, 357, 358, 361,
	362, 363, 364, 365, 367, 369, 377, 378, 380, 383,
	384, 385, 387, 388, 391, 392, 393, 394, 399, 395,
	397, 400, 401, 402, 408, 407, 414, 415, 417, 418,
	419, 32, 40, 41, 43, 46, 57, 58, 59, 62,
	99, 100, 119, 128, 129, 140, 154, 156, 166, 167,
	168, 183, 189, 191, 171, 213, 243, 244, 258, 262,
	273, 275, 286, 311, 340, 355, 371, 372, 373, 374,
	379, 381, 403, 404, 405, 409, 416, 251, -183, 2,
	-165, -165, 276, 26, 2, 26, 272, 324, 362, 364,
	2, 192, 2, -422, -232, 2, 26, -169, -165, 82,
	152, 322, -183, 2, -422, -232, 24, 2, -165, 2,
	-170, 2, 315, -165, 445, 77, 220, 61, 311, 331,
	-100, 378, -99, 371, 317, -101, -366, 2, 233, -165,
	445, 445, 445, 445, 2, 360, 267, 407, 323, 396,
	95, 283, 176, -417, 2, 4, -377, -374, -199, -198,
	360, 95, -197, -189, 435, -196, 445, 445, 445, 2,
	197, 198, 282, 281, 331, 332, 445, 445, 445, 2,
	25, 55, 76, 79, 101, 127, 147, 150, 255, -432,
	226, 264, 280, 317, 330, 359, 369, 380, -436, 347,
	56, 396, -443, 385, 110, -275, 95, 364, 362, 220,
	151, 392, 307, 155, 390, 105, 182, 394, 393, 445,
	445, 25, 55, 64, 79, 110, 127, 147, 150, -434,
	264, 280, 314, 317, 330, 359, 369, 385, 380, 2,
	407, 323, 360, 176, 95, 396, 307, 279, -74, 2,
	442, 29, 334, -139, 360, 2, -165, 197, 198, 2,
	445, 445, -417, 2, 197, 198, 2, 56, 319, 445,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 2, -127, 331, 347, 160, 38,
	61, 26, 66, 96, 153, 176, 177, 205, 76, 77,
	281, 220, 198, -326, 332, 361, 318, 357, 378, 82,
	397, 308, 419, -425, 122, 4, 95, 233, 333, 371,
	70, 365, 366, -442, 2, 360, -446, 2, 378, 378,
	2, -446, 2, -446, 2, -168, 2, 378, 375, -447,
	378, 416, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, -141, -143, -142, 445, 445, 445,
	445, 445, -127, 331, 2, 61, 26, -450, 145, -227,
	-228, 389, 190, 118, 256, -140, -142, 2, -399, -364,
	2, -301, -380, -303, 433, 434, 428, 239, 420, -314,
	101, 390, 251, -379, -304, -316, 119, 311, -246, 8,
	9, 5, 6, 7, -172, -345, -310, -353, 382, 130,
	242, -202, 447, 10, 442, -396, -142, -315, 33, 156,
	54, -368, -201, -347, -355, -351, -352, -452, 44, 50,
	49, 369, 232, 325, 326, 341, 327, 328, 42, 399,
	172, 248, 250, 184, 4, 191, -200, -189, -393, -394,
	-374, -375, 183, 189, 185, 340, 186, 187, 188, 41,
	286, 141, 142, 140, 111, 100, 99, 244, 46, 45,
	43, 404, -356, 97, 371, 372, 373, 374, 200, 201,
	-165, -376, 64, 87, 88, 86, 91, 90, 92, 89,
	333, 396, 55, 32, 166, 167, 171, 243, 168, 62,
	-395, 351, 83, 149, 181, 169, 194, 195, 199, 214,
	217, 234, 241, 259, 261, 306, 338, -453, 405, 128,
	129, 262, 273, 355, 379, 381, 154, 213, 57, 58,
	-401, 287, -402, -183, -401, 445, 445, 446, 445, -221,
	-222, -223, 2, 26, 108, 442, 2, -329, 2, 440,
	-333, -142, 208, -332, 442, -330, -190, 252, -397, 312,
	-393, -394, -172, -189, -201, 4, -224, 442, 444, 95,
	360, 65, 2, -270, 442, -165, 26, -139, 251, 375,
	446, -312, 442, 251, 148, 253, -165, 2, 2, 335,
	2, 442, -100, 59, 378, -289, 2, -290, -162, -163,
	-164, -338, 196, 278, 285, 422, 419, -364, -428, 148,
	425, 375, -364, -247, 444, 2, -333, 166, -190, 2,
	-187, -367, 4, -374, -377, -375, -378, 64, -376, 26,
	28, 29, 30, 31, 33, 34, 35, 36, 47, 54,
	55, 60, 63, 65, 76, 82, 86, 87, 89, 88,
	90, 91, 92, 101, 103, 106, 108, 109, 113, 115,
	118, 130, 132, 145, 147, 148, 152, 155, 158, 170,
	180, 190, 192, 208, 211, 218, 221, 222, 239, 242,
	247, 251, 252, 255, 256, 271, 277, 289, 304, 322,
	333, 343, 356, 360, 370, 375, 376, 382, 389, 390,
	396, 398, 406, 410, 411, 412, 413, -379, 2, -333,
	166, 2, -192, 166, -333, -195, 2, -372, 166, -370,
	10, -369, 5, 4, -374, -377, -375, 2, -174, -165,
	2, -186, -367, 2, -205, 166, -190, -191, -195, 375,
	446, -238, -198, -199, -231, -165, 444, -301, 2, -89,
	2, -301, 166, 2, -89, 166, 2, -301, 166, 2,
	-89, 166, 2, 2, 2, 380, 2, 79, 166, -165,
	360, 94, 2, 298, -433, 314, 384, 407, 2, 2,
	2, 2, 2, 2, 2, 360, 323, -444, 287, -179,
	2, -165, 145, -372, 166, 2, -372, 166, 2, -193,
	-195, -193, 176, 193, -174, 166, 2, 364, 362, 364,
	362, 148, 2, 192, 2, 192, 2, -334, 2, -335,
	-190, 2, 2, 2, 2, 2, 166, -165, 360, 94,
	2, 207, 2, 2, 2, 2, 2, 2, 2, 2,
	2, -240, 166, 2, -190, -240, 166, 2, -240, 166,
	2, -206, 166, 2, -205, -174, 166, 2, -373, 166,
	2, -372, -373, 166, 2, -342, 2, -341, -369, 403,
	-74, 442, 331, 442, -372, -190, -301, -89, 148, -301,
	-89, 145, 2, 95, 360, -127, 2, 145, 398, 2,
	8, 2, -372, 284, 137, 2, 335, 2, 281, 332,
	61, 419, 148, 2, 2, -420, 2, 251, 148, 2,
	148, 2, 148, 2, 148, 2, 148, 2, 2, 281,
	332, 2, 377, 206, 123, 2, 148, -261, 2, 413,
	148, 2, 5, 2, 196, 278, 348, 2, -190, -437,
	2, 360, 407, 323, 2, 2, 72, 73, 148, 2,
	148, 419, 2, -255, -333, -288, -289, -288, 375, -170,
	-450, -227, -228, -127, 335, 2, 2, -450, -254, -277,
	-278, 218, 132, 247, -260, 26, 108, -260, -260, 48,
	443, 443, 11, 12, 63, 37, 433, 434, 435, 436,
	143, 437, 438, 431, 432, 430, 423, 424, 427, 202,
	203, 78, 426, 425, 71, 224, 313, 133, 134, 135,
	136, 295, 173, 174, 175, 14, 15, 16, 30, 255,
	217, 420, 169, 338, 428, 17, 18, 19, 194, 195,
	241, 40, 170, -171, -207, -301, -301, -301, -301, -301,
	261, 442, -252, -296, 440, -142, 442, 442, 442, 5,
	442, 5, -363, 8, -142, -301, -314, 443, -244, 442,
	-142, -314, -309, 442, 311, 440, 442, -317, -301, 444,
	-403, 414, -349, 442, 275, -348, 442, -348, -348, 408,
	-346, 442, 421, 415, 442, -346, 442, 442, 145, 442,
	442, 442, 442, 442, 442, 442, 442, 442, 442, 442,
	442, 442, 408, 442, 442, 442, 442, 442, 442, 442,
	442, 442, 446, -401, -224, 442, -248, -336, -301, 435,
	-248, -248, 251, -241, -301, 83, -264, 199, 234, 149,
	214, 306, 181, -363, -74, -298, 447, -325, 421, -142,
	-330, -189, -142, -332, 442, -329, -325, 435, -190, 442,
	148, 442, 444, 148, -231, -367, -174, -190, -200, -201,
	-241, -372, -417, -231, -169, 34, -311, -343, -344, -357,
	-345, -354, -350, -353, 291, 292, 290, 294, 293, 44,
	50, 49, 369, 232, 325, 326, 341, 327, 328, 42,
	399, 172, 248, 250, 184, 4, 43, 404, -356, 191,
	183, 189, 185, 340, 186, 187, 188, 41, 286, 141,
	142, 140, 111, 100, 99, 244, 46, 45, 97, 371,
	372, 373, 374, 200, 201, 405, 351, 57, 58, -417,
	-231, 145, -366, -241, 34, -289, 2, -448, 446, 216,
	-209, 223, 238, 159, 252, 417, 245, -371, 5, 4,
	-310, -322, 101, 220, -353, 9, 434, -361, 8, 433,
	-365, -364, 85, 444, -367, -151, 296, -150, 23, 27,
	112, 401, 124, -214, 178, 267, 119, 344, -424, -426,
	316, 367, 368, 74, 245, 296, 119, -257, -259, 34,
	93, 236, 263, 51, 164, 227, 228, 346, 409, 119,
	296, 413, 119, -426, 296, -426, -153, 344, -424, -426,
	316, 296, -152, -214, 119, 447, -372, -238, 446, 446,
	-367, 435, 119, 119, 119, 119, 2, 2, 239, 2,
	2, 2, 150, -436, -434, 2, 2, 2, -190, 166,
	-192, 166, 2, -195, 407, -226, 251, -419, -239, 360,
	-190, -161, -398, 413, 239, 239, 34, 442, 2, -176,
	166, 2, -166, -165, 176, -398, 239, -334, -203, -190,
	-203, 334, -183, 34, -298, 119, 2, 2, 2, -165,
	-154, 446, 53, 302, 119, -154, 119, -154, 119, -154,
	446, 119, -154, 119, 446, 119, 119, 443, 446, -342,
	-372, -137, 413, 148, 82, 442, -373, -419, -174, 2,
	-190, 2, 360, 200, -372, -372, -366, 26, 336, 2,
	73, -190, -421, 145, -418, 307, -417, -190, -190, -190,
	-190, -190, 145, 2, 377, 2, 377, 2, -165, 67,
	-165, 216, -190, 145, 360, 176, 360, -154, 446, -170,
	-450, -254, -366, -450, -278, -277, -280, -301, 26, -283,
	139, 235, -301, -303, -141, -141, -141, -229, -327, -301,
	277, 176, -358, -343, -343, -188, -367, 371, -301, -301,
	-301, -301, -301, -301, -301, -301, -301, -301, -301, -301,
	-301, -301, -301, -301, -301, -301, -301, -301, -301, -301,
	-301, -301, -301, -301, -301, -301, -301, -301, -301, -301,
	-301, -301, -301, 217, 169, 338, 40, 170, -301, 375,
	-301, -301, -301, -301, 231, 239, 242, 382, 130, 391,
	108, 245, -454, 356, 36, -307, -142, -245, 442, -321,
	31, 343, 26, -314, 442, 2, -296, -301, -297, -242,
	-241, -241, 443, 406, 26, 108, 435, 2, 8, -271,
	-273, 418, 230, 98, 161, 229, -272, 321, 443, 446,
	34, 443, -301, -242, -313, -309, -241, -320, -319, 410,
	-367, 435, -404, 138, 155, 8, -363, 8, 371, 371,
	8, 8, 8, 442, 443, 2, 443, 2, 443, 2,
	443, 2, 443, 2, -301, -301, -301, -301, -301, -301,
	-301, -241, -265, 2, -359, -241, 4, 418, 230, 98,
	161, 229, 321, -265, 2, -266, 2, -301, -241, -267,
	-302, -303, 433, 434, 428, -314, -268, 2, -301, -242,
	-301, 47, 211, 376, -269, -301, 148, -241, -241, 2,
	-241, 2, -402, 34, -241, -234, 446, 148, 34, 4,
	-234, -234, 442, 443, 446, 199, 199, -329, -264, 199,
	-262, 259, -262, -262, -415, 442, 441, -325, -175, 440,
	448, -367, -324, -323, 34, -183, 257, -325, -325, 444,
	443, -324, -190, 442, -241, -367, 349, 443, 444, 194,
	194, 194, 443, -137, 375, 413, -74, 443, 446, -233,
	33, 440, -273, 442, -360, 408, 442, 442, 148, -232,
	-428, 443, 378, -290, -208, 285, 342, 297, 329, 358,
	9, 8, 8, 446, -367, 446, 375, -429, 76, 65,
	-292, 166, 65, -381, -177, 76, -382, -165, 60, 390,
	277, 147, -429, 76, -429, 76, 76, 334, 347, 48,
	-333, 37, -89, 212, 148, 419, 360, 375, -333, -259,
	-343, 93, 227, 228, 48, -362, -361, 434, -362, 48,
	-362, -362, -362, 413, -192, -333, 375, 268, -372, 375,
	446, 37, -89, 212, 148, 375, -205, -175, -339, -338,
	-198, -165, 444, -301, -89, -301, -89, 119, 2, -444,
	207, 442, -224, 239, -258, -257, 239, -194, 2, -190,
	148, -231, -340, 192, 446, -239, 268, 119, 119, 442,
	116, 283, 2, 251, 239, -176, 166, -157, 363, 119,
	-295, -294, 411, -284, -89, 442, 101, 34, -284, -249,
	-250, -337, -251, -177, 442, -183, -165, 2, -190, -240,
	-240, -240, -205, -206, -174, -372, -373, -373, -74, -341,
	443, 443, -136, 254, -135, -165, 5, -139, 398, -211,
	-293, -292, -383, -384, -381, 217, 176, 390, 193, 131,
	-137, -338, -137, -339, -339, -190, 145, -231, -231, 331,
	145, 145, 444, -261, 283, 95, 360, 267, 176, -190,
	-205, -190, -333, -450, -281, -361, 442, -282, 311, 312,
	446, -149, 35, 106, 204, -190, 419, 117, -301, -301,
	375, -454, 356, -307, 117, -301, 231, 242, 382, 130,
	391, 108, 245, 148, 442, -302, -302, 443, -243, -301,
	-301, 441, 450, 443, -451, 446, -227, -301, -241, -241,
	443, 443, 375, 375, 375, 375, 442, 444, -241, -231,
	441, 441, 446, 443, -318, -319, 113, -301, 444, -409,
	260, 442, 442, 443, 443, 446, 443, 419, 419, 443,
	443, 443, -301, 34, 446, 446, 446, 443, 446, 446,
	446, 443, 443, 148, 443, 443, -274, 271, 443, 11,
	12, 433, 434, 435, 436, 143, 437, 438, 431, 432,
	430, 423, 424, 425, 71, 224, 313, 14, 15, 16,
	194, 170, -302, -302, -302, 443, -305, -306, 148, 145,
	34, -269, -269, -269, 443, 148, -241, 443, 443, 442,
	443, -295, -336, -236, 2, -329, -185, -367, -295, -295,
	-241, -301, -329, -329, -263, 398, 251, 199, -329, -323,
	443, -416, -363, -325, -324, -363, -300, -299, 146, 35,
	106, 237, -183, -224, -324, -324, -367, -325, 443, -237,
	-331, -397, -451, 444, -367, -128, 5, 242, -128, -128,
	148, -231, 24, -343, 440, 441, 8, 8, 442, -363,
	-363, -231, 148, -364, -289, 388, 69, 285, 371, -364,
	-150, -190, -177, -184, -165, 239, -292, 166, -156, 239,
	-343, -184, 442, 442, 204, 204, -177, -184, 166, -177,
	166, -184, -184, -423, 285, 246, -301, 219, 283, 240,
	-151, 296, -89, -89, 442, -428, 398, 107, -190, -194,
	296, -200, -362, -362, -257, 296, -192, -372, 413, -174,
	-152, -89, -89, 442, -175, -153, 296, -134, 165, 435,
	-165, 407, -165, -210, -211, -165, -438, 415, 413, 119,
	119, -224, -204, -190, 440, -137, -372, -190, -372, -372,
	-372, 2, 442, 2, -190, 119, 251, 239, -158, 114,
	-449, 425, -174, -228, -227, -301, -256, -287, 304, 251,
	-225, -178, -177, 403, -183, -256, -235, 446, 148, 425,
	444, -225, 2, -154, -154, -154, -154, -154, -74, -137,
	446, 442, 425, 425, 442, -372, -372, 443, 446, -190,
	-176, 176, 176, -182, -166, -137, -42, 413, 360, 331,
	331, -165, -186, -174, -190, -187, -205, -282, -301, -327,
	-190, 447, -301, -301, 117, 117, -301, -302, -302, -301,
	117, 148, 442, -301, -311, 30, 30, 443, 446, -297,
	-301, 443, 406, -451, -451, -451, 5, 230, 161, 229,
	-272, 229, -272, -272, 8, 435, -367, 443, -309, 115,
	-301, 370, -367, 435, -410, -180, 442, -165, 411, -227,
	-363, -346, -346, 443, -358, -343, -301, -301, -301, -301,
	-301, -301, -305, -301, -358, -343, -302, -302, -302, -302,
	-302, -302, -302, -302, -302, -302, -302, -302, -302, -302,
	-302, -302, -302, -302, -302, 108, 239, 245, -302, -306,
	-305, -301, -301, -343, 443, 443, 443, -241, -74, -253,
	155, -339, 446, -253, -253, 443, -263, 442, -301, -329,
	441, 443, 446, -324, 441, 446, 449, 425, -224, 444,
	-323, 443, 446, -286, 34, 443, -367, -89, 253, 8,
	441, 443, -363, 443, 443, -231, -301, 375, 375, 119,
	239, 400, -385, -382, -301, -230, -328, -301, 442, 442,
	-148, 112, 334, -430, 2, 119, -154, 119, -154, 417,
	442, 442, 375, -429, 76, -241, -301, -138, 101, -366,
	-426, 375, 375, 268, -241, 375, -137, 148, 2, 2,
	2, 443, 34, 249, -165, -190, -192, 34, -339, -363,
	-161, 2, -276, 398, -175, -190, 119, -159, 210, -449,
	-370, -398, -279, -277, -256, -248, 240, 75, 443, 446,
	444, -295, -250, -236, -301, 2, 443, -135, -136, -372,
	-372, -372, -137, -139, -139, -293, 2, 442, -176, -166,
	442, 254, -190, -261, -216, -215, 267, 245, 252, 443,
	-149, -175, -301, -301, 117, 30, 30, -301, -301, -311,
	443, -301, -301, -241, 441, 5, -301, 443, 443, 443,
	443, -301, 444, -411, -165, -301, 443, 443, 443, 443,
	446, 446, 443, 443, 443, 443, -306, 148, 108, 245,
	442, 443, 443, -308, 158, 48, -329, -308, -308, -231,
	-298, -363, -299, -175, 440, -367, -331, 442, 444, 441,
	443, -177, -184, -292, 119, -386, 76, -387, 63, 131,
	82, 239, 242, 390, 277, 60, 101, 289, 34, 443,
	443, 446, -149, -230, -231, 239, 353, 101, 239, 101,
	94, 385, -177, -184, -231, -231, -190, -177, -184, 443,
	446, 425, -194, -192, -372, 443, -175, -373, -212, 179,
	-89, 2, 442, -224, -258, -89, 441, 442, -165, 251,
	442, -175, -160, 209, -449, -370, -157, -256, -285, 442,
	251, -89, -178, 2, -228, 425, 443, 443, 94, 94,
	-230, 442, 442, -231, -43, -44, 176, 76, 270, -187,
	360, -149, -301, -301, -301, 443, -451, -367, 435, -405,
	267, 443, -301, -301, -302, 148, 442, -311, -406, 412,
	-301, -241, -406, -406, 443, -325, -363, 2, -292, -184,
	-188, -181, -165, 131, 166, 242, 204, 442, -302, -190,
	442, 2, -440, 103, 180, -291, -441, 81, 354, -328,
	443, 443, 242, 242, -301, -343, -154, -154, 443, 443,
	375, 375, 375, -366, 80, -364, 375, -213, -214, 170,
	-439, 413, -210, -438, -230, -190, -230, 251, -449, -370,
	-158, 109, -231, 76, -279, -307, -137, 442, 442, 443,
	-230, -230, 443, 446, 26, 442, 26, 442, -190, 443,
	-228, 48, 443, 443, -302, -311, 443, -407, -408, -180,
	-324, 441, -387, -181, 239, -301, -167, 442, -301, 180,
	104, 162, -212, 442, 289, -173, 63, 442, 442, -177,
	-184, 442, 425, 148, 442, -438, 265, 94, 236, 443,
	34, 443, -276, 443, -190, -370, -159, 393, 240, 443,
	-184, -256, -373, -373, -291, 443, 443, -44, -231, -231,
	-412, 283, 312, 157, -241, 443, 446, 34, 119, 443,
	-388, 225, -165, 443, 104, 162, -213, -231, -190, -427,
	398, -188, -218, -217, -215, -220, -219, -215, -241, -364,
	80, 265, -241, -190, 94, -212, -89, -291, 442, -291,
	442, -160, 334, -294, 443, 443, -212, -291, 443, 443,
	443, -413, -414, 40, 387, 85, -301, -413, -413, -408,
	-410, 131, -389, -392, -391, 251, 339, 149, 266, 443,
	353, 409, -440, 443, -224, -301, 443, 446, 403, 443,
	446, 403, 443, 148, 443, 442, -213, -439, -212, -230,
	-212, -230, -249, -137, -137, -213, -212, -414, 274, 144,
	311, 274, 144, -181, -391, 251, -392, 251, 393, 105,
	-388, -217, 170, -219, 148, 265, -231, -438, -213, 443,
	-213, 443, -295, -213, 30, -390, 236, 302, 53, 334,
	-390, -389, 442, 442, 443, -445, 411, -291, -445, -291,
	-414, 22, 242, 101, -440, -241, -241, -155, 53, 302,
	2, -212, -212, 443, 443, -213, -213, -213, 375, -445,
	-445, 442, -241, 443, -213,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 24, 25, 337, 338,
	340, 341, 342, 344, 345, 347, 349, 351, 353, 354,
	356, 358, 359, 360, 361, 362, 364, 366, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 410,
	412, 0, 837, 839, 841, 843, 27, 28, 0, 0,
	169, 171, 173, 0, 198, 200, 202, 203, 205, -2,
	0, 291, 292, 294, 296, -2, -2, 0, 0, 399,
	401, 0, 0, 421, 422, 0, 927, -2, 415, 417,
	419, 482, 484, 486, 488, 490, 492, 494, 495, 497,
	499, 501, 503, 505, 507, 509, 511, 513, 515, 517,
	519, 521, 523, 525, 527, -2, -2, -2, 0, -2,
	-2, -2, 855, 31, 33, 35, 37, 39, 41, 59,
	254, 255, 257, 259, 261, 264, 265, 267, 966, 298,
	300, 302, 304, 306, 0, -2, 980, 0, 0, 43,
	44, 45, 46, 47, 48, 49, 66, 67, 68, 69,
	70, 71, 72, 52, 54, 55, 61, 62, 64, 0,
	0, 942, 944, 946, 948, -2, 0, 0, 7, 9,
	11, 13, 15, 17, 19, 21, 23, 339, 343, 346,
	348, 350, 352, 355, 357, 363, 365, 367, 728, 1563,
	1577, 1578, 1579, 1582, 1583, 1584, 1585, 1586, 1587, 1908,
	1988, 1989, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613,
	1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623,
	1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633,
	1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643,
	1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653,
	1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663,
	1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673,
	1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683,
	1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693,
	1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703,
	1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713,
	1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723,
	1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733,
	1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743,
	1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753,
	1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763,
	1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773,
	1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783,
	1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793,
	1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803,
	1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813,
	1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823,
	1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833,
	1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843,
	1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853,
	1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863,
	1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873,
	1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883,
	1884, 1885, 1886, 1887, 1888, 1889, 1890, 0, 377, 375,
	1557, 378, 1745, 380, 382, 285, 286, 287, 288, 289,
	290, 0, 152, 0, 392, 386, 391, 393, 395, 396,
	397, 398, 373, 371, 0, 392, 1609, 390, 835, 836,
	830, 831, 1778, 865, 411, -2, -2, -2, 1877, -2,
	443, -2, 450, 1880, 1780, 453, 0, 455, -2, 458,
	838, 840, 842, 29, 30, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, -2, -2, -2, -2, 0,
	0, 1643, 1534, 1579, 1537, 1532, 170, 172, 174, 175,
	0, 0, 0, 0, 0, 0, 199, 201, 204, 206,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 784, 0,
	0, 0, 0, 0, 0, 0, 0, 651, 652, 0,
	0, 657, 779, 780, 801, 0, 0, 0, 0, 293,
	295, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 297,
	0, 0, 0, 0, 0, 0, 0, 232, 331, 332,
	0, 967, 0, 0, 0, 150, 143, 0, 0, 640,
	400, 402, 0, 142, 0, 0, 834, 0, 0, 416,
	418, 420, 483, 485, 487, 489, 491, 493, 496, 498,
	500, 502, 504, 506, 508, 510, 512, 514, 516, 518,
	520, 522, 524, 526, 528, 529, 0, 0, 0, 0,
	0, 533, 0, -2, -2, 0, 0, 0, 0, 0,
	-2, 0, -2, 0, -2, -2, -2, 0, 0, 0,
	-2, -2, 0, 0, 0, 532, 534, 535, 536, 0,
	581, 622, 623, 0, 770, 968, 867, 845, 858, 867,
	847, 848, 849, 850, 851, 856, 857, 860, 0, 852,
	853, 854, 32, 34, 36, 38, 40, 42, 256, 258,
	260, 262, 266, 268, -2, 940, 941, 299, 301, 303,
	305, 307, 403, 0, 405, 0, 533, 931, 0, -2,
	0, 972, 972, 972, 0, 0, 941, 939, 0, 408,
	409, 462, 463, 1197, 0, 0, 0, 0, 0, 1432,
	1281, 0, 464, -2, 1312, 1314, 1856, 1877, 1431, 1316,
	1317, 1318, 1319, 1320, 0, 0, 1323, 0, 1325, 1326,
	1327, 1328, 0, 1330, 0, 1334, 1335, 1336, 0, 1861,
	1511, 1575, -2, 1102, 1103, 1104, 1105, 1106, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1571, 0, 1403, 1350,
	-2, 1596, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1652, -2, -2, -2, -2, -2,
	-2, -2, 1158, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1891, 1354, 1355, 1356, 1357, 1358, 1359, 1360,
	1361, 1362, 0, 1845, 1862, 1863, 1868, 1870, 1864, 1853,
	1373, -2, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899,
	1900, 1901, 1902, 1903, 1904, 1905, 1906, 1159, -2, 1857,
	1858, 1873, 1874, 1879, 1884, 1885, 1860, 1869, -2, -2,
	958, 1753, 961, 728, 959, 943, 945, 0, 947, 0,
	0, 0, 952, 975, 973, 0, 1011, 956, 957, 967,
	1028, 1051, 0, 1033, 0, 1051, 1073, 0, 1038, 1773,
	1351, 1352, 0, 1579, 1576, -2, 0, 0, 0, 0,
	0, 0, 195, 374, 0, 379, 381, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 864, 413, 414, 0,
	438, 0, 442, 1852, -2, -2, 446, 868, 872, 873,
	874, 875, 0, 0, 0, 0, 0, 452, 0, 0,
	439, 440, 456, 459, 0, 50, 0, 1862, 1073, 51,
	0, 1547, 1601, 1602, 1603, 1604, 1605, 1891, 1907, 1909,
	1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919,
	1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929,
	1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939,
	1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949,
	1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959,
	1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969,
	1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979,
	1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 53, 0,
	1862, 56, 0, 1862, 0, -2, 60, 0, 1862, 153,
	154, 1592, 1593, 1597, 1598, 1599, 1600, 63, 0, 1553,
	65, 0, 1550, 73, 0, 1862, 0, 1531, -2, 0,
	0, 632, 1528, 1533, 633, 1538, 0, 176, 177, 178,
	179, 180, 1862, 182, 183, 0, 185, 186, 1862, 188,
	189, 0, 191, 207, 208, 0, 210, 0, 1862, 0,
	0, 0, 216, -2, 233, 0, 230, 0, 220, 221,
	223, 224, 225, 226, 227, 0, 0, 0, 785, 272,
	270, 1558, 0, -2, 1862, 773, 776, 1862, 778, 790,
	1561, 0, -2, 0, 965, 1862, 882, 653, 654, 655,
	656, 0, 284, 0, 895, 0, 897, 0, 917, 1079,
	1028, 234, 235, 236, 237, 238, 1862, 0, 0, 0,
	243, 0, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 135, 1862, 310, 329, 135, 1862, 313, 135, 1862,
	316, 135, 1862, 319, 1526, 135, 1862, 322, 323, 1862,
	325, 155, 326, 1862, 328, 0, -2, 368, 1565, -2,
	334, 0, -2, 0, 167, 0, 638, 639, 0, 832,
	833, 0, 423, 0, 0, 530, 531, 0, 0, 541,
	542, 543, 544, 1751, 1667, 547, 0, 550, 571, 585,
	0, 0, 0, 554, 556, 637, 558, 0, 0, 560,
	0, 562, 0, 564, 0, 566, 0, 568, 570, 572,
	586, 574, 0, 0, 0, 584, 0, 589, 590, 0,
	0, 595, 596, 597, 0, 599, 600, 601, 602, 0,
	604, 605, -2, -2, 609, 611, 0, 617, 0, 621,
	0, 537, 538, 135, 1077, 844, -2, 846, 0, 862,
	934, -2, 0, 404, 0, 407, 938, 932, 937, 989,
	990, 0, 0, 0, 0, 970, 971, 0, 0, 0,
	929, 930, 0, 0, 0, 0, 1437, 1438, 1439, 1440,
	1441, 1442, 1445, 1446, 1443, 1444, 1447, 1448, 0, 0,
	0, 0, 0, 1449, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1450, 1451, 1452, 0, 0,
	1454, 0, 1456, 0, 0, 0, 0, 0, 0, 1260,
	1262, 1519, 0, 0, 1453, 1202, 1203, 1204, 1239, 1240,
	0, 0, 1313, 1516, 1515, 1315, 0, 1468, 0, 1322,
	0, 1194, 1329, 1544, -2, 0, 1432, 1463, 0, 0,
	1337, 1338, 1339, 0, 0, 1468, 0, 0, 1510, 0,
	1405, 0, 1138, 0, 1139, 1140, 0, 1141, 1142, 1155,
	1168, 0, 0, 0, 0, 1172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1160, 0, 0, 0, 1491, -2, 0, 0,
	0, 0, 0, 960, 0, 0, 1015, 1520, 1524, 1525,
	1015, 1015, 0, 0, 1469, 0, 0, 0, 0, 1070,
	1070, 1070, 1068, 1045, 0, 1051, 0, 1061, 0, 1051,
	1051, 0, -2, 1033, 0, 0, 1061, 1074, 1075, 0,
	0, 0, 0, 0, 0, 1580, 0, 0, 0, 1567,
	0, 167, 0, 384, 394, 967, 0, 1471, 1093, 1089,
	1096, 1097, 1098, 1099, 1145, 1146, 1147, 1148, 1149, 1107,
	1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117,
	1118, 1119, 1120, 1121, 1122, 1123, -2, 1156, 1158, 1179,
	1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136,
	1137, 1151, 0, 1126, 1126, 1126, 1143, 1144, 1167, 1178,
	1170, 1178, 1174, 1094, 1095, 1161, 1162, 1163, 1164, 0,
	388, 0, 0, 0, 0, -2, 448, 0, 870, 0,
	876, 473, 474, 475, 878, 879, 0, 451, 476, 477,
	478, 479, 480, 481, 0, 745, 0, 747, 1540, 0,
	449, 466, 454, 0, 460, 74, 827, 103, 0, 827,
	827, 0, 0, 122, 0, 0, 0, 0, 0, 92,
	99, 80, 81, 0, 0, 0, 0, 57, 753, 0,
	756, 0, 0, 0, 0, 0, 0, 0, 768, 0,
	0, 0, 0, 91, 0, 86, 76, 0, 0, 94,
	101, 0, 126, 128, 0, 0, 1064, 631, 0, 0,
	1580, 1536, 0, 0, 0, 0, 209, 211, 0, 213,
	214, 215, 0, 784, 0, 222, 219, 263, 728, 1862,
	752, 1862, 750, 1562, 0, 0, 0, 282, 277, 0,
	279, 771, 0, 964, 0, 0, 0, 0, 791, 0,
	1862, 796, 1549, 1588, 1589, 884, 0, 1085, 0, 898,
	0, 0, 1080, 0, 1082, 0, 240, 241, 242, 0,
	308, 0, 133, 134, 0, 311, 0, 314, 0, 317,
	0, 0, 320, 0, 0, 0, 0, 967, 0, 0,
	0, 145, 0, 0, 0, 0, 167, 167, 1064, 425,
	1064, 427, 0, 0, 545, 546, 548, 549, 551, 552,
	618, 553, 557, 0, 625, 1769, 635, 559, 561, 563,
	565, 567, 0, 576, 0, 578, 0, 580, 592, 591,
	593, 598, 603, 0, 0, 0, 0, 769, 0, 861,
	935, 937, 406, 933, 987, 988, 993, 997, 998, 1001,
	1004, 1005, 995, 1197, 953, 954, 955, 981, 982, 810,
	0, 1988, 1198, 1090, 1199, 1200, 1546, 0, 1205, 1206,
	1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, -2, -2,
	-2, -2, -2, -2, -2, -2, 1223, 1224, 1225, 1226,
	1227, 1228, 1229, 1230, 1231, 1232, 1233, -2, -2, -2,
	1237, 1238, -2, 1455, 1457, 0, 1519, 0, -2, 0,
	-2, -2, -2, -2, 1257, 0, 1259, 1264, 1266, 1268,
	0, 0, 0, 0, 1518, 1278, 1502, 1503, 0, 0,
	1434, 1435, 1436, 1263, 0, 1282, 1517, 1514, 0, 0,
	1467, 978, 1341, 0, 0, 0, 0, 1348, 0, 1545,
	1193, 1180, 1181, 1182, 1183, 1184, 1185, 1195, 1333, 1465,
	0, 1464, 0, 0, 0, 1475, 0, 1509, 1505, 0,
	1568, 1574, 1413, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1374, 1375, 1376, 1377, 1378, 1379,
	1380, 1381, 1382, 1383, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1385, 0, 1478, -2, -2, -2, -2,
	-2, -2, -2, 0, 1387, 0, 1389, 1469, 1488, 0,
	0, 1283, 0, 0, 0, 1432, 0, 1392, 1469, 1496,
	0, 0, 0, 0, 0, 1469, 0, 1501, 0, 1399,
	0, 1401, 962, 0, 0, 1085, 0, 0, 0, 1523,
	1085, 1085, 0, 1010, 0, 0, 0, 0, 0, 0,
	1065, 1069, 1066, 1067, 0, 0, 1051, 1061, 1025, 0,
	0, 1548, 1031, 1060, 0, 728, 1050, 1061, 1061, 0,
	-2, 1035, 0, 0, 978, -2, 168, 727, 0, 0,
	0, 0, 376, 0, 0, 0, 370, 372, 0, 1086,
	1088, 0, 1100, 0, 0, -2, 0, 0, 0, 0,
	0, 441, 0, 869, 877, 0, 470, 0, 472, 0,
	746, 1542, 1541, 0, 461, 0, 0, 0, 0, 826,
	105, 1862, 0, 137, 0, 0, 712, 1554, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 0, 0, 754,
	755, 757, 763, 765, 0, 759, 1543, 0, 760, 0,
	762, 764, 766, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 83, 0, 0, 0, 0, 1530, 158, 1063,
	1529, 1539, 0, 181, 184, 187, 190, 0, 217, 0,
	0, 660, 643, 0, 748, 751, 0, 728, 783, 1560,
	0, 271, 167, 0, 0, 278, 0, 0, 0, 0,
	0, 0, 789, 0, 0, 0, 1862, 886, 892, 0,
	980, 1084, 0, 915, 900, 0, 0, 0, 915, 919,
	920, 922, 923, 0, 0, 1081, 0, 244, 330, 135,
	135, 135, 1527, 135, 135, 156, 324, 327, 333, 369,
	967, 167, 165, 1733, 163, 160, 162, 0, 0, 0,
	661, 663, 664, 665, 666, 0, 1589, 0, 1695, 1589,
	140, 167, 276, 424, 429, 539, 0, 636, 634, 575,
	0, 0, 0, 588, 0, 0, 0, 0, 0, 619,
	620, 624, 1078, 936, 0, 999, 0, 996, 1002, 1003,
	0, 984, 808, 809, 0, 0, 0, 0, -2, -2,
	0, 0, 0, 1279, 0, -2, 1258, 1261, 1265, 1267,
	1269, 0, 0, 0, 0, 0, 0, 1458, 0, 1460,
	1280, 1512, 1515, 1430, 0, 0, 977, 978, 978, 978,
	1347, 0, 0, 0, 0, 0, 0, 0, 1466, 0,
	1473, 1474, 0, 1340, 0, 1506, 0, 0, 0, 1349,
	0, 0, 0, 1150, 1124, 0, 1178, 1176, 1177, 1171,
	1178, 1175, 0, 0, 0, 0, 0, 1368, 0, 0,
	0, 1372, 1384, 0, 1386, 1388, 0, 0, 1390, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1286, 1287, 1288, 1391, 1494, 1495, 0, 0,
	0, 0, 0, 0, 1397, 0, 1500, 1398, 1400, 967,
	1012, 1007, 1521, 1064, 1014, 1016, 1522, 1551, 1007, 1007,
	0, 1470, 1053, 0, 1055, 0, 0, 0, 1057, 0,
	1046, 0, 1048, 1061, 1030, 0, 0, 1023, 0, 1020,
	1021, 1022, 728, 1059, 1032, 1036, 1568, 0, 1076, 0,
	1040, 1043, 0, 0, 1581, 192, 196, 197, 193, 194,
	0, 383, 0, 1472, 0, 1091, 0, 0, 0, 0,
	0, 387, 0, 437, -2, 468, 469, 471, 0, 467,
	104, 814, 0, 0, 1552, 0, 107, 1862, 116, 0,
	689, 0, 0, 0, 0, 0, 829, 0, 1862, 135,
	1862, 135, 118, 121, 0, 125, 123, 0, 0, 680,
	75, 827, 78, 84, 0, 0, 0, 90, 0, 820,
	0, 758, 761, 767, 58, 0, 822, 812, 0, 811,
	127, 79, 85, 0, 824, 77, 0, 167, 0, 1535,
	0, 0, 0, 0, 659, -2, 0, 0, 0, 0,
	0, 0, 1064, 273, 0, 275, 281, 280, 774, -2,
	777, 786, 0, 788, 800, 0, 0, 0, 888, 892,
	0, 891, 965, 992, 979, 1083, 893, 915, 0, 0,
	0, 903, 905, 902, 899, 896, 1085, 0, 0, 0,
	0, 0, 239, 309, 312, 315, 318, 321, 335, 144,
	0, 0, 0, 0, 0, 167, 0, 0, 0, 0,
	0, 1589, 1589, 0, 1556, 141, 426, 0, 0, 577,
	579, 592, 612, 613, 675, 0, 616, 0, 0, 983,
	810, 0, 1201, 1242, 0, 0, -2, 0, 0, 1246,
	0, 0, 0, -2, 0, 0, 0, 1459, 1461, 0,
	1514, 1342, 0, 0, 0, 0, 1324, 1186, 1187, 1188,
	1189, 1190, 1191, 1192, 0, 1331, 1332, 1433, 1476, 1504,
	1508, 0, 1569, 1573, 1411, 1412, 1416, 1559, 0, 0,
	0, 1169, 1173, 1353, 0, 0, 0, 0, 0, 0,
	0, 1477, 1487, 1489, 1284, 1285, 1289, 1290, 1291, 1292,
	1293, 1294, 1295, 1296, 1297, 1298, -2, -2, -2, 1302,
	1303, 1304, -2, -2, -2, 0, 0, 0, 1490, 1492,
	1493, 1497, 1498, 0, 1394, 1395, 1396, 1499, 0, 1009,
	0, 1013, 0, 1009, 1009, 974, 1054, 0, 1072, 1056,
	1028, 1047, 0, 1037, 1026, 0, 1027, 0, 1058, 0,
	1034, 1039, 0, 1042, 0, 1342, -2, 151, 385, 0,
	1092, 1101, 0, 1153, 1157, 389, 1062, 0, 0, 0,
	0, 136, 687, 711, 0, 0, 803, 810, 0, 0,
	109, 0, 0, 0, 117, 0, 114, 0, 120, 124,
	0, 0, 0, 0, 0, 0, 87, 88, 89, 0,
	93, 0, 0, 0, 0, 0, 138, 0, 212, 782,
	218, 669, 0, 644, 0, 728, 752, 0, 269, 0,
	772, 787, 0, 0, 0, 0, 0, 890, 892, 0,
	883, 884, 915, 991, 894, 913, -2, 912, 0, 0,
	0, 980, 921, 918, 924, 925, 0, 164, 0, 159,
	161, 0, 147, 0, 0, 662, 667, 0, 0, 0,
	0, 0, 540, 587, 614, 674, 0, 0, 994, 1000,
	985, 810, 1244, 1248, 0, 0, 0, 1250, -2, 0,
	1272, -2, -2, 1462, 1513, 1321, 978, 1343, 1345, 1346,
	1196, 1507, 0, 1418, 1415, 0, 1402, 1125, 1363, 1364,
	0, 0, 1367, 1369, 1370, 1371, 1486, 0, 0, 0,
	0, 1393, 963, 1407, 0, 0, 1017, 1407, 1407, 0,
	1051, 1049, 1024, 1018, 0, 1569, 1041, 0, 0, 1087,
	1152, 816, 818, 106, 0, 688, 0, 691, 0, 0,
	0, 0, 698, 699, 0, 0, 0, 0, 0, 717,
	726, 0, 805, 0, 0, 0, 111, 130, 0, 0,
	828, 0, 135, 135, 0, 0, 815, 0, 0, 0,
	0, 0, 821, 823, 813, 0, 825, 157, 677, 0,
	648, 645, 660, 643, 749, 781, 274, 0, 799, 0,
	0, 0, 880, 892, 0, 885, 886, 283, 0, 0,
	0, 901, 904, 906, 992, 0, 166, 167, 0, 0,
	0, 0, 0, 0, 428, 430, 0, 0, 436, 673,
	0, 986, 1252, -2, -2, 1273, 0, 1570, 1572, 980,
	0, 1404, 0, 0, -2, 0, 0, 0, 949, 0,
	1008, 1006, 950, 951, 1071, 1061, 0, 1044, 108, 0,
	692, 693, 1555, 695, 0, 697, 700, 0, 702, 1591,
	0, 706, 713, 718, 0, 669, 0, 723, 724, 804,
	715, 0, 110, 112, 129, 807, 113, 119, 0, 0,
	0, 0, 0, 0, 1637, 96, 0, 643, 676, 0,
	646, 0, 0, 0, 0, 800, 0, 0, 0, 887,
	888, 0, 0, 0, 915, 926, 146, 0, 0, 726,
	0, 0, 710, 0, 432, 0, 434, 0, 615, 1344,
	1422, 0, 1365, 1366, -2, 0, 1310, 1406, 1408, 0,
	1029, 1019, 690, 694, 0, 0, 732, 0, 0, 0,
	721, 722, 677, 0, 0, 132, 0, 0, 0, 817,
	819, 0, 0, 0, 0, 641, 0, 649, 0, 669,
	0, 726, 0, 726, 0, 889, 890, 0, 908, 909,
	911, 916, 0, 0, 669, 726, 709, 431, 0, 0,
	0, 0, 0, 0, 1417, 1311, 0, 0, 0, 701,
	737, 0, 0, 0, 719, 720, 717, 0, 728, 115,
	0, 806, 0, 681, 0, 0, 684, 0, 0, 97,
	1637, 95, 0, 0, 650, 677, 648, 669, 0, 669,
	0, 881, 0, 910, 167, 167, 677, 669, 433, 435,
	1414, 1419, 1423, -2, 1826, 1640, 0, 1420, 1421, 1409,
	1410, 0, 703, 733, 734, 0, 729, 730, 731, 1590,
	704, 705, 714, 725, 732, 131, 678, 0, 0, 679,
	0, 0, 100, 0, 102, 0, 643, 647, 677, 0,
	677, 0, 1085, 148, 149, 707, 677, 0, 1425, 1426,
	1427, 1428, 1429, 696, 735, 0, 736, 0, 0, 0,
	737, 682, 0, 685, 0, 98, 0, 642, 797, 726,
	797, 726, 907, 708, 0, 738, 0, 741, 742, 0,
	739, 717, 0, 0, 672, 792, 0, 669, 794, 669,
	1424, 740, 743, 744, 716, 0, 0, 668, 670, 671,
	798, 677, 677, 677, 0, 797, 797, 683, 0, 793,
	795, 0, 0, 677, 686,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 431, 3, 437, 432, 3,
	442, 443, 435, 433, 446, 434, 444, 436, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 450, 3,
	423, 425, 424, 427, 447, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 440, 3, 441, 438, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 448, 430, 449, 428,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 426, 57766, 429, 57767, 439, 57768, 445, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1036
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1041
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1045
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1046
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1047
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1048
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1049
		{
			return helpWith(sqllex, "GRANT")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1050
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1051
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1052
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1053
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1057
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1066
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1067
		{
			return helpWith(sqllex, "ALTER")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1070
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1071
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1072
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1073
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1074
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1075
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1126
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1127
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1138
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1153
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1157
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1162
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1174
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1186
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1205
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1228
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1232
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1237
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1244
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1248
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1254
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{Table: &name, Rows: sqlDollar[6].union.slct()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1261
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1271
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[5].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1279
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1286
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1294
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1301
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 87:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1309
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1314
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1318
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1323
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1329
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1337
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 93:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1346
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1358
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 95:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1368
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1372
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1376
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 98:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1380
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1386
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{Table: &name}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1391
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{Table: &name, From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1398
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableIndexName()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1402
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1408
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1412
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1419
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1424
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1429
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1434
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1439
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1444
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1449
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1453
		{
			return unimplementedWithIssue(sqllex, 28751)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1456
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1465
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1477
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1487
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1494
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1497
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1504
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1513
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1522
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1527
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1534
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1542
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1543
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1547
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1551
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1557
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1565
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1569
		{
			sqlVAL.union.val = nil
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1575
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1579
		{
			sqlVAL.union.val = nil
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1586
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1590
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1594
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1600
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1604
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 138:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1630
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1633
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 140:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1656
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1660
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1663
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1667
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 144:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1704
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1709
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1713
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1719
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1724
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1729
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1733
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 151:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1749
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1752
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1756
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1760
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1768
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1772
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1778
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1782
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1788
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1792
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1796
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1800
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1806
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1810
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1816
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1820
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 167:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1824
		{
			sqlVAL.union.val = nil
		}
	case 168:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1830
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1843
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1844
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1845
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1846
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1856
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1864
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1866
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1869
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1879
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1888
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1896
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1898
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1902
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1905
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1915
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1924
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1932
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1934
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1938
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1941
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1945
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1949
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CommentOnTable{Table: name, Comment: sqlDollar[6].union.strPtr()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1954
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1970
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1976
		{
			sqlVAL.union.val = &sqlDollar[1].str
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1980
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1992
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1993
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1995
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1996
		{
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1997
		{
			return helpWith(sqllex, "CREATE")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2000
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2001
		{
			return unimplemented(sqllex, "create cast")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2002
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2003
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2004
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2005
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2006
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2007
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2008
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2009
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2010
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2011
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2012
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2013
		{
			return unimplemented(sqllex, "create operator")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2014
		{
			return unimplemented(sqllex, "create publication")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2015
		{
			return unimplemented(sqllex, "create rule")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2016
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2017
		{
			return unimplemented(sqllex, "create server")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2018
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2019
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2020
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2023
		{
		}
	case 229:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2024
		{
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2027
		{
		}
	case 231:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2028
		{
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2031
		{
		}
	case 233:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2032
		{
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2035
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2036
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2037
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2038
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2039
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2040
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2041
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2042
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2043
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2044
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2045
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2046
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2047
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2048
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2049
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2050
		{
			return unimplemented(sqllex, "drop server")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2051
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2052
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2053
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2054
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2058
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2059
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2060
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2061
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2063
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2064
		{
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2065
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2066
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2076
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				AsOf:        sqlDollar[7].union.asOfClause(),
			}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2084
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2088
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2092
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2098
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2103
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2112
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2120
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2130
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2134
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2140
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2144
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2151
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2155
		{

			sqlVAL.union.val = nil
		}
	case 283:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2169
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2179
		{
			return helpWith(sqllex, "DELETE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2186
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2189
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2190
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2191
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2192
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2193
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2202
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2203
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2204
		{
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2205
		{
			return helpWith(sqllex, "DROP")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2208
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2209
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2210
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2211
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2212
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2220
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2224
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2227
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2235
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2239
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2242
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2250
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2254
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2257
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2265
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2273
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2280
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2288
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2296
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2303
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2311
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2315
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2318
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2326
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2330
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2333
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2337
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2342
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2365
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2368
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2370
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2374
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2378
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2385
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2389
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2392
		{
			return helpWith(sqllex, "DELETE")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2394
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2395
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2396
		{
			return helpWith(sqllex, "INSERT")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2397
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2399
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2400
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2403
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2408
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2409
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2410
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2414
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2418
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 370:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2428
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2435
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2439
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 373:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2443
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2453
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2459
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2463
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 377:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2467
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2477
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2481
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2485
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2489
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2492
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2512
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2516
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2520
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2523
		{
			return helpWith(sqllex, "GRANT")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2543
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2547
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2551
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2554
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2559
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2563
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2574
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2578
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2592
		{
			return helpWith(sqllex, "RESET")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2593
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2601
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2605
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2608
		{
			return helpWith(sqllex, "RESET")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2616
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2619
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2630
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2633
		{
			return helpWith(sqllex, "USE")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2637
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2638
		{
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2639
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2640
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2644
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2645
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2646
		{
			return helpWith(sqllex, "USE")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2662
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2677
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2680
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2698
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   name,
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2707
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2711
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 429:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2715
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2721
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2725
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2731
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2735
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2739
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2743
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2747
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2758
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2761
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2771
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2787
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2791
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 444:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2796
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2813
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2816
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2818
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2821
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2825
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2844
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2851
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2857
		{
			return unimplemented(sqllex, "set from current")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2858
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2866
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2871
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2878
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2882
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2888
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2892
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2899
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2920
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2924
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2930
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2934
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2938
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2942
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2946
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2952
		{
			sqlVAL.union.val = tree.Low
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2956
		{
			sqlVAL.union.val = tree.Normal
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2960
		{
			sqlVAL.union.val = tree.High
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2971
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2975
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2979
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2984
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2988
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3000
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3001
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3002
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3003
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3004
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3005
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3007
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3008
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3009
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3010
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3011
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3012
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3013
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3014
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3015
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3016
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3017
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3018
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3019
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3020
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3021
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3022
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3024
		{
			return helpWith(sqllex, "SHOW")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3031
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3032
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3033
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3044
		{
			sqlVAL.str = "client_encoding"
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3047
		{
			sqlVAL.str = "timezone"
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3048
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3062
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowTableStats{Table: name}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3067
		{

			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowTableStats{Table: name, UsingJSON: true}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3072
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3083
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3092
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3100
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3107
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3115
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3122
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3132
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3136
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3139
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3141
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3144
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3152
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowColumns{Table: name}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3156
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3164
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3167
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3180
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3188
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3196
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3200
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3202
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3206
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3208
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3212
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3220
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3224
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3226
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3230
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3238
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3241
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3243
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3247
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3257
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3260
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3269
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3272
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3274
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3277
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3279
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3283
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3286
		{
			sqlVAL.union.val = true
		}
	case 582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3287
		{
			sqlVAL.union.val = false
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3295
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3298
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3300
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3304
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3314
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3324
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3334
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3337
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3340
		{
			sqlVAL.union.val = true
		}
	case 592:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3341
		{
			sqlVAL.union.val = false
		}
	case 593:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3348
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3352
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3355
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3362
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3366
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3374
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3379
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3384
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3388
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3396
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3401
		{

			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3406
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3419
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3422
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3430
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3433
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3437
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3441
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3445
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3452
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3460
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
			}}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3466
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3470
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3481
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{Table: &name}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3486
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableIndexName()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3489
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 624:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3497
		{

			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowFingerprints{Table: name}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3505
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 626:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3510
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3630
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3634
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3638
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3677
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3681
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3686
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3690
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3699
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3706
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3710
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3722
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3731
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3734
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 641:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3770
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
			}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:3783
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
			}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3797
		{
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3798
		{
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3799
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 646:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3803
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[8].union.slct(),
				AsColumnNames: sqlDollar[5].union.nameList(),
			}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:3815
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[11].union.slct(),
				AsColumnNames: sqlDollar[8].union.nameList(),
			}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3828
		{
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3829
		{
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3830
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3844
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3845
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3846
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3847
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3848
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3849
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3850
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3851
		{
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3856
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3862
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3866
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3872
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3878
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3881
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 668:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:3885
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3894
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3901
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3906
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3911
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3917
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 675:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3924
		{
			sqlVAL.str = ""
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3931
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 678:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3937
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3944
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3951
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3957
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3961
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 683:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3967
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3977
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3981
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 686:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:3987
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3998
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4009
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4013
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4019
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4023
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4027
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4031
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4035
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4039
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4043
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4061
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4065
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4069
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4073
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4077
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4081
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4085
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4095
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4099
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4103
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 707:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4110
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4120
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4132
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4142
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4154
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4159
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 713:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4165
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4171
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4182
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4192
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4204
		{
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4205
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4206
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4207
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4208
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4209
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 725:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4226
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4230
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4236
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4240
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4260
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4264
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4268
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4272
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4281
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4285
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4289
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4293
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4297
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4303
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4309
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4317
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4321
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4325
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4329
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4333
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4339
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4343
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4349
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4368
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4373
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4377
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4381
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4384
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4385
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4388
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().String())
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4389
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4391
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4392
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4393
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4396
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4398
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4400
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4402
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4403
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4405
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4406
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4408
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4410
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4418
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4421
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 771:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4429
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4433
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4436
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4440
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4444
		{
			sqlVAL.union.val = nil
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4454
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4458
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4461
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4466
		{
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4467
		{
		}
	case 781:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4475
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4483
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 783:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4484
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 784:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4487
		{
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4488
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 786:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4494
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 787:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4496
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 788:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4498
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 789:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4500
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4502
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 791:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4504
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 792:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4520
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4534
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4549
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4563
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4577
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 797:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4580
		{
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4581
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4585
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4600
		{
			sqlVAL.union.val = false
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4606
		{
			sqlVAL.union.val = true
		}
	case 802:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4610
		{
			sqlVAL.union.val = false
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4616
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4620
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4629
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4640
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 807:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4641
		{
			sqlVAL.str = ""
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4645
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4649
		{
			sqlVAL.union.val = tree.Descending
		}
	case 810:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4653
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 811:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4659
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4666
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4670
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4676
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4682
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4688
		{
			table := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameColumn{
				Table:    table,
				Name:     tree.Name(sqlDollar[6].str),
				NewName:  tree.Name(sqlDollar[8].str),
				IfExists: false,
			}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4698
		{
			table := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameColumn{
				Table:    table,
				Name:     tree.Name(sqlDollar[8].str),
				NewName:  tree.Name(sqlDollar[10].str),
				IfExists: true,
			}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4708
		{
			return unimplementedWithIssue(sqllex, 32555)
		}
	case 819:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4710
		{
			return unimplementedWithIssue(sqllex, 32555)
		}
	case 820:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4714
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4720
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4728
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4734
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4742
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4746
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4751
		{
		}
	case 827:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4752
		{
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4755
		{
		}
	case 829:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4756
		{
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4764
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4767
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 832:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4777
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4786
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4789
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4797
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4800
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4804
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4805
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4806
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4822
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4825
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4827
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4830
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4840
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4843
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4845
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4848
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4852
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4857
		{
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4858
		{
		}
	case 855:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4859
		{
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4867
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4874
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4877
		{
		}
	case 859:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4878
		{
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4882
		{
			sqlVAL.str = ""
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4886
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4890
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 863:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4894
		{
			sqlVAL.str = ""
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4900
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4904
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4910
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4914
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4920
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4924
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4937
		{
		}
	case 871:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4939
		{
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4943
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4948
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4952
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4956
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4962
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4968
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4974
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4978
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 880:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4988
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4998
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5008
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5012
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 884:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5016
		{
			sqlVAL.str = ""
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5022
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 886:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5026
		{
			sqlVAL.str = ""
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5032
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 888:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5036
		{
			sqlVAL.str = ""
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5042
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 890:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5046
		{
			sqlVAL.str = ""
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5051
		{
		}
	case 892:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5052
		{
		}
	case 893:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5064
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 894:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5071
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5078
		{
			return helpWith(sqllex, "INSERT")
		}
	case 896:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5089
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5096
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5100
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5109
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5116
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5120
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5124
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5130
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5134
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5154
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 907:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5158
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5162
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5168
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 910:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5171
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5172
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 912:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5174
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5180
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5185
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 915:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5189
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 916:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5206
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5217
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5221
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 919:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5222
		{
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5226
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5230
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5243
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5246
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 926:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5250
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5293
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5299
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5303
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5318
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5322
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5326
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5330
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5334
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5338
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5343
		{
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5344
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5349
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5384
		{
			return helpWith(sqllex, "SELECT")
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5385
		{
			return helpWith(sqllex, "VALUES")
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5386
		{
			return helpWith(sqllex, "TABLE")
		}
	case 949:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5408
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5421
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5435
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5447
		{
			return helpWith(sqllex, "SELECT")
		}
	case 953:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5451
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5460
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5469
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5484
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5491
		{
			return helpWith(sqllex, "TABLE")
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5503
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5507
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5511
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 961:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5515
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5519
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 963:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5525
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5533
		{
		}
	case 965:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5534
		{
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5538
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 967:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5542
		{
			sqlVAL.union.val = nil
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5547
		{
		}
	case 969:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5548
		{
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5552
		{
			sqlVAL.union.val = true
		}
	case 971:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5556
		{
			sqlVAL.union.val = false
		}
	case 972:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5560
		{
			sqlVAL.union.val = false
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5566
		{
			sqlVAL.union.val = true
		}
	case 974:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5572
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5577
		{
		}
	case 976:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5578
		{
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5581
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 978:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5582
		{
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5586
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 980:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5590
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5596
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 982:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5602
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5606
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5612
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5616
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5621
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5636
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5645
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5656
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 993:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5660
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5669
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5675
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5682
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5689
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5698
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5702
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5706
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5712
		{
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5713
		{
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5716
		{
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5717
		{
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5734
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5738
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5744
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5748
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5767
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5770
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5772
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5784
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5787
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5789
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5795
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5799
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5805
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5809
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5814
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5819
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5825
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5831
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5836
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5848
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5852
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5856
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = flags
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5865
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5892
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5906
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5916
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5923
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "select")
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5925
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5929
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5933
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5937
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "srf")
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5953
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5959
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5963
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5969
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5971
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5975
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5981
		{
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5983
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5986
		{
			sqlVAL.union.val = nil
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5987
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5988
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5992
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5996
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6002
		{
			sqlVAL.union.val = true
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6006
		{
			sqlVAL.union.val = false
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6026
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6030
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6034
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6038
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6042
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6046
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6052
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6056
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6063
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6069
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6076
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6082
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6086
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6090
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6094
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6100
		{
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6101
		{
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6112
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6116
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6121
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6122
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6123
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6124
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6128
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6133
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6147
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6151
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6157
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6165
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6175
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6182
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6194
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6208
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6217
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6226
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6232
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6239
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6241
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6250
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6261
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6262
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6279
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6283
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6287
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6291
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6295
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6299
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6303
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedSerialType
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6307
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6311
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6315
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6319
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6323
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6327
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6331
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6335
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6339
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6343
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6347
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.QChar
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6378
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6382
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6386
		{
			sqlVAL.union.val = nil
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6393
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6397
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6401
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6405
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6409
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6413
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6417
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6421
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6425
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6429
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6433
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6437
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6441
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6445
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6452
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6459
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6466
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6470
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6477
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6481
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6485
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6489
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6493
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6499
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			typ, err := coltypes.NewFloat(prec)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = typ
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6514
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6520
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[4].union.int64()), sqlDollar[2].union.bool())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6526
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[3].union.int64()), true)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6534
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6538
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6542
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6548
		{
			colTyp := *(sqlDollar[1].union.colType().(*coltypes.TString))
			n := sqlDollar[3].union.int64()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", &colTyp))
				return 1
			}
			colTyp.N = uint(n)
			sqlVAL.union.val = &colTyp
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6561
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6567
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6571
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6575
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6579
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6588
		{
			sqlVAL.union.val = true
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6589
		{
			sqlVAL.union.val = false
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6594
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6598
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = coltypes.Time
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6602
		{
			return unimplementedWithIssue(sqllex, 32565)
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6603
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6604
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6606
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = coltypes.TimestampWithTZ
			} else {
				sqlVAL.union.val = coltypes.Timestamp
			}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6613
		{
			return unimplementedWithIssue(sqllex, 32098)
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6615
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6618
		{
			return unimplementedWithIssue(sqllex, 32098)
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6621
		{
			sqlVAL.union.val = true
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6622
		{
			sqlVAL.union.val = false
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6623
		{
			sqlVAL.union.val = false
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6627
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6633
		{
			sqlVAL.union.val = tree.Year
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6637
		{
			sqlVAL.union.val = tree.Month
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6641
		{
			sqlVAL.union.val = tree.Day
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6645
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6649
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6653
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6659
		{
			sqlVAL.union.val = tree.Month
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6663
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6667
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6671
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6675
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6679
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6683
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6690
		{
			sqlVAL.union.val = nil
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6696
		{
			sqlVAL.union.val = tree.Second
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6699
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6723
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6727
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6731
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6734
		{
			return unimplementedWithIssue(sqllex, 32005)
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6743
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6748
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6752
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6756
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6760
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6764
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6768
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6772
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6776
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6780
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6784
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6788
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6792
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6796
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6800
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6804
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6808
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6812
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6816
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6820
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6824
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6828
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6832
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6836
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6840
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6844
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6848
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6852
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6856
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6860
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6864
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6868
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6872
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6876
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6880
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6884
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6888
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6892
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6896
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6900
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6904
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6908
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6912
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6916
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6920
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6924
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6928
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6932
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6936
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6940
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6944
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6948
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6952
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6956
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6960
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6964
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6968
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6972
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6976
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6980
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6984
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6987
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6989
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6993
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6997
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7001
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7005
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7009
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7013
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7017
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7021
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7025
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7029
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7033
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7037
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7041
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7045
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7049
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7053
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7070
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7075
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7087
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7091
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7095
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7099
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7103
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7107
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7111
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7115
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7119
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7123
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7127
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7131
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7135
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7139
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7143
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7147
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7151
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7155
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7159
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7163
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7167
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7171
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7175
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7179
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7183
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7187
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7191
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7195
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7209
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7217
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7253
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7257
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7261
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7265
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7269
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7274
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7276
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7280
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7283
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7285
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7289
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7293
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7297
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7301
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7310
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7317
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7321
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7325
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7330
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7334
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7338
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7342
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7346
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7349
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7353
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7357
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7360
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7361
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7363
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7367
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7371
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7374
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7385
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7392
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7401
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7402
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7406
		{
			return unimplementedWithIssue(sqllex, 32563)
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7408
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7412
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7418
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7422
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7426
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7430
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7436
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7440
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7444
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7448
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7452
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7456
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7460
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7464
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7468
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7472
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7476
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7480
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7484
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7491
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7494
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7496
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7499
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7501
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7504
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7506
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7509
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7511
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7514
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7516
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7519
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7521
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7524
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7526
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7529
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7531
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7535
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7538
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7539
		{
			return unimplemented(sqllex, "treat")
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7541
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7545
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7549
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7553
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7557
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7560
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7562
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7565
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7570
		{
			return unimplemented(sqllex, "within group")
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7571
		{
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7575
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7579
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7586
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7590
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7596
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7600
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7606
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7614
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7618
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7622
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7629
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7649
		{
			sqlVAL.str = ""
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7655
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7659
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7670
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7677
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7684
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7691
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7697
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7710
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7738
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7742
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7746
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7750
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7757
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7773
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7777
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7784
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7796
		{
			sqlVAL.union.val = tree.Any
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7800
		{
			sqlVAL.union.val = tree.Some
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7804
		{
			sqlVAL.union.val = tree.All
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7809
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7810
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7811
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7812
		{
			sqlVAL.union.val = tree.Div
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7813
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7814
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7815
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7816
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7817
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7818
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7819
		{
			sqlVAL.union.val = tree.LT
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7820
		{
			sqlVAL.union.val = tree.GT
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7821
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7822
		{
			sqlVAL.union.val = tree.LE
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7823
		{
			sqlVAL.union.val = tree.GE
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7824
		{
			sqlVAL.union.val = tree.NE
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7828
		{
			sqlVAL.union.val = tree.Like
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7829
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7830
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7831
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7854
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7858
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7864
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7868
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7872
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7883
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7887
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7893
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7897
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7904
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7910
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7914
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7920
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7924
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7930
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7934
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7940
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7944
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7950
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7954
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7976
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7980
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7984
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7990
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7997
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8001
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8018
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8022
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8026
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8030
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8034
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8040
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8046
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8052
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8056
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8060
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8066
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8078
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8085
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8089
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8095
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8101
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8105
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8112
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8118
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8122
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8129
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8135
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8139
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8144
		{
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8145
		{
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8149
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8153
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8159
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8168
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8172
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8176
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8184
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8188
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8194
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8198
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8217
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8225
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8248
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8257
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8261
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8265
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8269
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8275
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8279
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8287
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8291
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8302
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8313
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8323
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8423
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8430
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8434
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8438
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8452
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8456
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8460
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8473
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8491
		{
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = res
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8506
		{
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = res
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8515
		{
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = res
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8542
		{
			sqlVAL.str = ""
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8548
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8552
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
