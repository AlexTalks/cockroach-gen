// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql-gen.y:56
type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() tree.Tuple {
	return u.val.(tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:566
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BTREE = lex.BTREE
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const EMIT = lex.EMIT
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BTREE",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"EMIT",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:8445

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 57,
	426, 57,
	-2, 901,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	168, 736,
	-2, 0,
	-1, 60,
	102, 901,
	174, 901,
	374, 901,
	375, 901,
	-2, 0,
	-1, 74,
	114, 875,
	127, 875,
	182, 875,
	209, 875,
	238, 875,
	246, 875,
	371, 875,
	-2, 864,
	-1, 110,
	119, 552,
	198, 552,
	361, 552,
	-2, 0,
	-1, 115,
	4, 903,
	20, 903,
	21, 903,
	22, 903,
	23, 903,
	25, 903,
	30, 903,
	35, 903,
	36, 903,
	37, 903,
	38, 903,
	39, 903,
	40, 903,
	41, 903,
	42, 903,
	43, 903,
	44, 903,
	46, 903,
	47, 903,
	48, 903,
	49, 903,
	50, 903,
	51, 903,
	52, 903,
	55, 903,
	56, 903,
	57, 903,
	58, 903,
	60, 903,
	61, 903,
	65, 903,
	66, 903,
	67, 903,
	68, 903,
	69, 903,
	71, 903,
	72, 903,
	73, 903,
	74, 903,
	76, 903,
	78, 903,
	79, 903,
	82, 903,
	83, 903,
	91, 903,
	92, 903,
	93, 903,
	94, 903,
	95, 903,
	96, 903,
	97, 903,
	98, 903,
	100, 903,
	102, 903,
	104, 903,
	107, 903,
	108, 903,
	110, 903,
	111, 903,
	113, 903,
	115, 903,
	116, 903,
	117, 903,
	118, 903,
	119, 903,
	120, 903,
	121, 903,
	122, 903,
	123, 903,
	124, 903,
	132, 903,
	133, 903,
	134, 903,
	135, 903,
	136, 903,
	137, 903,
	139, 903,
	141, 903,
	145, 903,
	147, 903,
	148, 903,
	150, 903,
	152, 903,
	153, 903,
	154, 903,
	155, 903,
	156, 903,
	157, 903,
	158, 903,
	159, 903,
	160, 903,
	163, 903,
	164, 903,
	169, 903,
	170, 903,
	171, 903,
	174, 903,
	175, 903,
	176, 903,
	177, 903,
	178, 903,
	179, 903,
	180, 903,
	181, 903,
	183, 903,
	185, 903,
	188, 903,
	189, 903,
	190, 903,
	192, 903,
	193, 903,
	196, 903,
	197, 903,
	198, 903,
	200, 903,
	201, 903,
	203, 903,
	204, 903,
	206, 903,
	207, 903,
	210, 903,
	211, 903,
	214, 903,
	216, 903,
	219, 903,
	220, 903,
	221, 903,
	222, 903,
	223, 903,
	225, 903,
	226, 903,
	227, 903,
	228, 903,
	233, 903,
	234, 903,
	235, 903,
	236, 903,
	237, 903,
	239, 903,
	240, 903,
	242, 903,
	243, 903,
	244, 903,
	247, 903,
	248, 903,
	250, 903,
	252, 903,
	253, 903,
	254, 903,
	255, 903,
	256, 903,
	257, 903,
	258, 903,
	259, 903,
	261, 903,
	262, 903,
	263, 903,
	264, 903,
	265, 903,
	267, 903,
	268, 903,
	269, 903,
	270, 903,
	271, 903,
	272, 903,
	273, 903,
	274, 903,
	275, 903,
	277, 903,
	278, 903,
	279, 903,
	280, 903,
	281, 903,
	283, 903,
	284, 903,
	285, 903,
	286, 903,
	287, 903,
	288, 903,
	289, 903,
	291, 903,
	293, 903,
	294, 903,
	295, 903,
	296, 903,
	297, 903,
	298, 903,
	300, 903,
	301, 903,
	302, 903,
	303, 903,
	304, 903,
	305, 903,
	306, 903,
	308, 903,
	309, 903,
	310, 903,
	311, 903,
	312, 903,
	313, 903,
	314, 903,
	315, 903,
	316, 903,
	318, 903,
	319, 903,
	320, 903,
	321, 903,
	323, 903,
	324, 903,
	325, 903,
	326, 903,
	328, 903,
	329, 903,
	330, 903,
	331, 903,
	332, 903,
	333, 903,
	334, 903,
	335, 903,
	336, 903,
	337, 903,
	338, 903,
	339, 903,
	341, 903,
	342, 903,
	344, 903,
	345, 903,
	346, 903,
	347, 903,
	348, 903,
	349, 903,
	350, 903,
	351, 903,
	352, 903,
	353, 903,
	355, 903,
	356, 903,
	357, 903,
	358, 903,
	361, 903,
	362, 903,
	363, 903,
	364, 903,
	366, 903,
	367, 903,
	369, 903,
	370, 903,
	373, 903,
	374, 903,
	375, 903,
	376, 903,
	378, 903,
	380, 903,
	381, 903,
	382, 903,
	383, 903,
	384, 903,
	385, 903,
	387, 903,
	388, 903,
	389, 903,
	394, 903,
	395, 903,
	396, 903,
	397, 903,
	398, 903,
	399, 903,
	-2, 0,
	-1, 136,
	114, 874,
	127, 874,
	182, 874,
	209, 874,
	238, 874,
	246, 874,
	371, 874,
	-2, 867,
	-1, 141,
	1, 797,
	188, 797,
	267, 797,
	272, 797,
	425, 797,
	426, 797,
	-2, 0,
	-1, 143,
	1, 797,
	425, 797,
	426, 797,
	-2, 0,
	-1, 144,
	1, 797,
	425, 797,
	426, 797,
	-2, 0,
	-1, 145,
	1, 801,
	425, 801,
	426, 801,
	-2, 0,
	-1, 173,
	4, 910,
	5, 910,
	6, 910,
	7, 910,
	8, 910,
	9, 910,
	20, 910,
	21, 910,
	22, 910,
	23, 910,
	25, 910,
	30, 910,
	31, 910,
	35, 910,
	36, 910,
	37, 910,
	38, 910,
	39, 910,
	40, 910,
	41, 910,
	42, 910,
	43, 910,
	44, 910,
	46, 910,
	47, 910,
	48, 910,
	49, 910,
	50, 910,
	51, 910,
	52, 910,
	53, 910,
	54, 910,
	55, 910,
	56, 910,
	57, 910,
	58, 910,
	60, 910,
	61, 910,
	63, 910,
	65, 910,
	66, 910,
	67, 910,
	68, 910,
	69, 910,
	71, 910,
	72, 910,
	73, 910,
	74, 910,
	76, 910,
	78, 910,
	79, 910,
	81, 910,
	82, 910,
	83, 910,
	84, 910,
	85, 910,
	86, 910,
	87, 910,
	88, 910,
	89, 910,
	90, 910,
	91, 910,
	92, 910,
	93, 910,
	94, 910,
	95, 910,
	96, 910,
	97, 910,
	98, 910,
	99, 910,
	100, 910,
	102, 910,
	104, 910,
	107, 910,
	108, 910,
	110, 910,
	111, 910,
	113, 910,
	115, 910,
	116, 910,
	117, 910,
	118, 910,
	119, 910,
	120, 910,
	121, 910,
	122, 910,
	123, 910,
	124, 910,
	125, 910,
	126, 910,
	132, 910,
	133, 910,
	134, 910,
	135, 910,
	136, 910,
	137, 910,
	139, 910,
	141, 910,
	144, 910,
	145, 910,
	147, 910,
	148, 910,
	150, 910,
	152, 910,
	153, 910,
	154, 910,
	155, 910,
	156, 910,
	157, 910,
	158, 910,
	159, 910,
	160, 910,
	161, 910,
	163, 910,
	164, 910,
	169, 910,
	170, 910,
	171, 910,
	173, 910,
	174, 910,
	175, 910,
	176, 910,
	177, 910,
	178, 910,
	179, 910,
	180, 910,
	181, 910,
	183, 910,
	185, 910,
	186, 910,
	187, 910,
	188, 910,
	189, 910,
	190, 910,
	191, 910,
	192, 910,
	193, 910,
	196, 910,
	197, 910,
	198, 910,
	200, 910,
	201, 910,
	203, 910,
	204, 910,
	205, 910,
	206, 910,
	207, 910,
	208, 910,
	210, 910,
	211, 910,
	214, 910,
	216, 910,
	217, 910,
	218, 910,
	219, 910,
	220, 910,
	221, 910,
	222, 910,
	223, 910,
	224, 910,
	225, 910,
	226, 910,
	227, 910,
	228, 910,
	229, 910,
	231, 910,
	232, 910,
	233, 910,
	234, 910,
	235, 910,
	236, 910,
	237, 910,
	239, 910,
	240, 910,
	243, 910,
	244, 910,
	247, 910,
	248, 910,
	249, 910,
	250, 910,
	251, 910,
	252, 910,
	253, 910,
	254, 910,
	255, 910,
	256, 910,
	257, 910,
	258, 910,
	259, 910,
	261, 910,
	262, 910,
	263, 910,
	264, 910,
	265, 910,
	267, 910,
	268, 910,
	269, 910,
	270, 910,
	271, 910,
	272, 910,
	273, 910,
	274, 910,
	275, 910,
	277, 910,
	278, 910,
	279, 910,
	280, 910,
	281, 910,
	283, 910,
	284, 910,
	285, 910,
	286, 910,
	287, 910,
	288, 910,
	289, 910,
	291, 910,
	292, 910,
	293, 910,
	294, 910,
	295, 910,
	296, 910,
	297, 910,
	298, 910,
	300, 910,
	301, 910,
	302, 910,
	303, 910,
	304, 910,
	305, 910,
	306, 910,
	308, 910,
	309, 910,
	310, 910,
	311, 910,
	312, 910,
	313, 910,
	314, 910,
	315, 910,
	316, 910,
	317, 910,
	318, 910,
	319, 910,
	320, 910,
	321, 910,
	322, 910,
	323, 910,
	324, 910,
	325, 910,
	326, 910,
	328, 910,
	329, 910,
	330, 910,
	331, 910,
	332, 910,
	333, 910,
	334, 910,
	335, 910,
	336, 910,
	337, 910,
	338, 910,
	339, 910,
	341, 910,
	342, 910,
	344, 910,
	345, 910,
	346, 910,
	347, 910,
	348, 910,
	349, 910,
	350, 910,
	351, 910,
	352, 910,
	353, 910,
	355, 910,
	356, 910,
	357, 910,
	358, 910,
	361, 910,
	362, 910,
	363, 910,
	364, 910,
	365, 910,
	366, 910,
	367, 910,
	369, 910,
	370, 910,
	373, 910,
	374, 910,
	375, 910,
	376, 910,
	377, 910,
	378, 910,
	380, 910,
	381, 910,
	382, 910,
	383, 910,
	384, 910,
	385, 910,
	387, 910,
	388, 910,
	389, 910,
	394, 910,
	395, 910,
	396, 910,
	397, 910,
	398, 910,
	399, 910,
	400, 910,
	408, 910,
	413, 910,
	414, 910,
	415, 910,
	422, 910,
	428, 910,
	-2, 0,
	-1, 176,
	1, 57,
	426, 57,
	-2, 901,
	-1, 209,
	424, 1487,
	427, 1487,
	-2, 595,
	-1, 210,
	424, 1489,
	427, 1489,
	-2, 596,
	-1, 211,
	424, 1488,
	427, 1488,
	-2, 597,
	-1, 212,
	427, 1440,
	-2, 598,
	-1, 625,
	143, 1605,
	359, 1605,
	405, 1605,
	424, 1605,
	-2, 0,
	-1, 626,
	143, 1527,
	359, 1527,
	405, 1527,
	424, 1527,
	-2, 0,
	-1, 628,
	143, 1679,
	359, 1679,
	405, 1679,
	424, 1679,
	-2, 0,
	-1, 630,
	143, 1708,
	359, 1708,
	405, 1708,
	424, 1708,
	-2, 0,
	-1, 637,
	143, 1610,
	359, 1610,
	405, 1610,
	424, 1610,
	-2, 425,
	-1, 672,
	1, 525,
	421, 525,
	423, 525,
	425, 525,
	426, 525,
	-2, 0,
	-1, 673,
	1, 594,
	140, 594,
	421, 594,
	423, 594,
	425, 594,
	426, 594,
	-2, 0,
	-1, 679,
	1, 539,
	421, 539,
	423, 539,
	425, 539,
	426, 539,
	-2, 0,
	-1, 681,
	1, 543,
	421, 543,
	423, 543,
	425, 543,
	426, 543,
	-2, 0,
	-1, 683,
	1, 553,
	421, 553,
	423, 553,
	425, 553,
	426, 553,
	-2, 0,
	-1, 684,
	1, 559,
	421, 559,
	423, 559,
	425, 559,
	426, 559,
	-2, 0,
	-1, 685,
	1, 562,
	421, 562,
	423, 562,
	425, 562,
	426, 562,
	-2, 0,
	-1, 689,
	1, 576,
	421, 576,
	423, 576,
	425, 576,
	426, 576,
	-2, 0,
	-1, 690,
	1, 578,
	421, 578,
	423, 578,
	425, 578,
	426, 578,
	-2, 0,
	-1, 718,
	127, 914,
	209, 914,
	238, 914,
	-2, 870,
	-1, 726,
	127, 913,
	209, 913,
	238, 913,
	-2, 868,
	-1, 753,
	422, 1784,
	-2, 1202,
	-1, 754,
	422, 1785,
	-2, 1203,
	-1, 779,
	422, 1481,
	-2, 1472,
	-1, 785,
	5, 1036,
	-2, 1517,
	-1, 786,
	5, 1037,
	-2, 1522,
	-1, 787,
	5, 1038,
	-2, 1521,
	-1, 788,
	5, 1039,
	-2, 1704,
	-1, 789,
	5, 1040,
	-2, 1612,
	-1, 790,
	5, 1041,
	-2, 1672,
	-1, 791,
	5, 1042,
	-2, 1674,
	-1, 792,
	5, 1043,
	-2, 1675,
	-1, 793,
	5, 1044,
	-2, 1676,
	-1, 794,
	5, 1045,
	-2, 1684,
	-1, 795,
	5, 1046,
	-2, 1716,
	-1, 796,
	5, 1047,
	-2, 1581,
	-1, 797,
	5, 1048,
	-2, 1516,
	-1, 798,
	5, 1049,
	-2, 1620,
	-1, 799,
	5, 1050,
	-2, 1621,
	-1, 800,
	5, 1051,
	-2, 1585,
	-1, 801,
	5, 1052,
	422, 1496,
	-2, 1487,
	-1, 802,
	5, 1100,
	422, 1100,
	-2, 1751,
	-1, 807,
	422, 1497,
	-2, 1488,
	-1, 809,
	5, 1056,
	-2, 1749,
	-1, 810,
	5, 1057,
	-2, 1584,
	-1, 811,
	5, 1058,
	-2, 1586,
	-1, 812,
	5, 1059,
	-2, 1587,
	-1, 813,
	5, 1060,
	-2, 1588,
	-1, 814,
	5, 1061,
	-2, 1750,
	-1, 815,
	5, 1062,
	-2, 1762,
	-1, 816,
	5, 1063,
	-2, 1731,
	-1, 817,
	5, 1064,
	-2, 1760,
	-1, 818,
	5, 1065,
	-2, 1568,
	-1, 819,
	5, 1066,
	-2, 1569,
	-1, 820,
	5, 1080,
	-2, 1743,
	-1, 822,
	5, 1055,
	-2, 1739,
	-1, 823,
	5, 1055,
	-2, 1738,
	-1, 824,
	5, 1055,
	-2, 1755,
	-1, 825,
	5, 1072,
	-2, 1733,
	-1, 826,
	5, 1073,
	-2, 1518,
	-1, 827,
	5, 1090,
	-2, 1732,
	-1, 829,
	5, 1091,
	-2, 1546,
	-1, 830,
	5, 1092,
	-2, 1764,
	-1, 831,
	5, 1094,
	-2, 1765,
	-1, 832,
	5, 1096,
	-2, 1766,
	-1, 833,
	5, 1098,
	-2, 1706,
	-1, 834,
	5, 1024,
	-2, 1594,
	-1, 835,
	5, 1025,
	-2, 1595,
	-1, 855,
	5, 1088,
	-2, 1694,
	-1, 872,
	5, 1090,
	-2, 1735,
	-1, 873,
	5, 1090,
	-2, 1734,
	-1, 874,
	5, 1087,
	-2, 1770,
	-1, 935,
	422, 1496,
	-2, 1487,
	-1, 950,
	283, 1469,
	415, 1469,
	-2, 1468,
	-1, 1099,
	257, 899,
	-2, 721,
	-1, 1108,
	241, 1491,
	-2, 0,
	-1, 1151,
	1, 292,
	421, 292,
	425, 292,
	426, 292,
	-2, 873,
	-1, 1154,
	4, 1769,
	10, 1769,
	11, 1769,
	13, 1769,
	14, 1769,
	15, 1769,
	16, 1769,
	17, 1769,
	18, 1769,
	20, 1769,
	21, 1769,
	22, 1769,
	23, 1769,
	25, 1769,
	28, 1769,
	30, 1769,
	32, 1769,
	35, 1769,
	36, 1769,
	37, 1769,
	38, 1769,
	39, 1769,
	40, 1769,
	41, 1769,
	42, 1769,
	43, 1769,
	44, 1769,
	46, 1769,
	47, 1769,
	48, 1769,
	49, 1769,
	50, 1769,
	51, 1769,
	52, 1769,
	55, 1769,
	56, 1769,
	57, 1769,
	58, 1769,
	60, 1769,
	61, 1769,
	62, 1769,
	65, 1769,
	66, 1769,
	67, 1769,
	68, 1769,
	69, 1769,
	70, 1769,
	71, 1769,
	72, 1769,
	73, 1769,
	74, 1769,
	76, 1769,
	77, 1769,
	78, 1769,
	79, 1769,
	81, 1769,
	82, 1769,
	83, 1769,
	91, 1769,
	92, 1769,
	93, 1769,
	94, 1769,
	95, 1769,
	96, 1769,
	97, 1769,
	98, 1769,
	100, 1769,
	102, 1769,
	104, 1769,
	107, 1769,
	108, 1769,
	110, 1769,
	111, 1769,
	113, 1769,
	115, 1769,
	116, 1769,
	117, 1769,
	118, 1769,
	119, 1769,
	120, 1769,
	121, 1769,
	122, 1769,
	123, 1769,
	124, 1769,
	128, 1769,
	129, 1769,
	130, 1769,
	131, 1769,
	132, 1769,
	133, 1769,
	134, 1769,
	135, 1769,
	136, 1769,
	137, 1769,
	138, 1769,
	139, 1769,
	141, 1769,
	144, 1769,
	145, 1769,
	147, 1769,
	148, 1769,
	150, 1769,
	152, 1769,
	153, 1769,
	154, 1769,
	155, 1769,
	156, 1769,
	157, 1769,
	158, 1769,
	159, 1769,
	160, 1769,
	161, 1769,
	162, 1769,
	163, 1769,
	164, 1769,
	165, 1769,
	166, 1769,
	167, 1769,
	169, 1769,
	170, 1769,
	171, 1769,
	173, 1769,
	174, 1769,
	175, 1769,
	176, 1769,
	177, 1769,
	178, 1769,
	179, 1769,
	180, 1769,
	181, 1769,
	183, 1769,
	185, 1769,
	186, 1769,
	187, 1769,
	188, 1769,
	189, 1769,
	190, 1769,
	191, 1769,
	192, 1769,
	193, 1769,
	194, 1769,
	195, 1769,
	196, 1769,
	197, 1769,
	198, 1769,
	200, 1769,
	201, 1769,
	203, 1769,
	204, 1769,
	205, 1769,
	206, 1769,
	207, 1769,
	208, 1769,
	210, 1769,
	211, 1769,
	214, 1769,
	215, 1769,
	216, 1769,
	219, 1769,
	220, 1769,
	221, 1769,
	222, 1769,
	223, 1769,
	224, 1769,
	225, 1769,
	226, 1769,
	227, 1769,
	228, 1769,
	231, 1769,
	233, 1769,
	234, 1769,
	235, 1769,
	236, 1769,
	237, 1769,
	239, 1769,
	240, 1769,
	243, 1769,
	244, 1769,
	245, 1769,
	247, 1769,
	248, 1769,
	250, 1769,
	252, 1769,
	253, 1769,
	254, 1769,
	255, 1769,
	256, 1769,
	257, 1769,
	258, 1769,
	259, 1769,
	261, 1769,
	262, 1769,
	263, 1769,
	264, 1769,
	265, 1769,
	267, 1769,
	268, 1769,
	269, 1769,
	270, 1769,
	271, 1769,
	272, 1769,
	273, 1769,
	274, 1769,
	275, 1769,
	277, 1769,
	278, 1769,
	279, 1769,
	280, 1769,
	281, 1769,
	282, 1769,
	283, 1769,
	284, 1769,
	285, 1769,
	286, 1769,
	287, 1769,
	288, 1769,
	289, 1769,
	291, 1769,
	292, 1769,
	293, 1769,
	294, 1769,
	295, 1769,
	296, 1769,
	297, 1769,
	298, 1769,
	299, 1769,
	300, 1769,
	301, 1769,
	302, 1769,
	303, 1769,
	304, 1769,
	305, 1769,
	306, 1769,
	308, 1769,
	309, 1769,
	310, 1769,
	311, 1769,
	312, 1769,
	313, 1769,
	314, 1769,
	315, 1769,
	316, 1769,
	318, 1769,
	319, 1769,
	320, 1769,
	321, 1769,
	322, 1769,
	323, 1769,
	324, 1769,
	325, 1769,
	326, 1769,
	328, 1769,
	329, 1769,
	330, 1769,
	331, 1769,
	332, 1769,
	333, 1769,
	334, 1769,
	335, 1769,
	336, 1769,
	337, 1769,
	338, 1769,
	339, 1769,
	341, 1769,
	342, 1769,
	344, 1769,
	345, 1769,
	346, 1769,
	347, 1769,
	348, 1769,
	349, 1769,
	350, 1769,
	351, 1769,
	352, 1769,
	353, 1769,
	355, 1769,
	356, 1769,
	357, 1769,
	358, 1769,
	361, 1769,
	362, 1769,
	363, 1769,
	364, 1769,
	366, 1769,
	367, 1769,
	369, 1769,
	370, 1769,
	373, 1769,
	374, 1769,
	375, 1769,
	376, 1769,
	378, 1769,
	380, 1769,
	381, 1769,
	382, 1769,
	383, 1769,
	384, 1769,
	385, 1769,
	387, 1769,
	388, 1769,
	389, 1769,
	394, 1769,
	395, 1769,
	396, 1769,
	397, 1769,
	398, 1769,
	399, 1769,
	400, 1769,
	401, 1769,
	403, 1769,
	404, 1769,
	405, 1769,
	406, 1769,
	407, 1769,
	408, 1769,
	410, 1769,
	411, 1769,
	412, 1769,
	413, 1769,
	414, 1769,
	415, 1769,
	416, 1769,
	417, 1769,
	418, 1769,
	420, 1769,
	423, 1769,
	424, 1769,
	427, 1769,
	428, 1769,
	-2, 0,
	-1, 1173,
	143, 1679,
	359, 1679,
	405, 1679,
	424, 1679,
	-2, 0,
	-1, 1202,
	143, 1708,
	359, 1708,
	405, 1708,
	424, 1708,
	-2, 0,
	-1, 1203,
	188, 809,
	267, 809,
	272, 809,
	-2, 412,
	-1, 1282,
	127, 913,
	209, 913,
	238, 913,
	-2, 871,
	-1, 1366,
	114, 875,
	127, 875,
	182, 875,
	209, 875,
	238, 875,
	246, 875,
	371, 875,
	-2, 1255,
	-1, 1420,
	423, 1375,
	-2, 0,
	-1, 1424,
	188, 809,
	267, 809,
	272, 809,
	-2, 804,
	-1, 1458,
	114, 875,
	127, 875,
	182, 875,
	209, 875,
	238, 875,
	246, 875,
	371, 875,
	-2, 983,
	-1, 1665,
	188, 809,
	267, 809,
	272, 809,
	-2, 414,
	-1, 1776,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1135,
	-1, 1777,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1136,
	-1, 1778,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1137,
	-1, 1779,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1138,
	-1, 1780,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1139,
	-1, 1781,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1140,
	-1, 1782,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1141,
	-1, 1783,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1142,
	-1, 1795,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1154,
	-1, 1796,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1155,
	-1, 1797,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1156,
	-1, 1800,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1161,
	-1, 1806,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1165,
	-1, 1808,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1173,
	-1, 1809,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1174,
	-1, 1810,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1175,
	-1, 1811,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1176,
	-1, 1897,
	5, 1052,
	143, 1386,
	422, 1496,
	-2, 1487,
	-1, 1898,
	143, 1387,
	-2, 1727,
	-1, 1899,
	143, 1388,
	-2, 1609,
	-1, 1900,
	143, 1389,
	-2, 1547,
	-1, 1901,
	143, 1390,
	-2, 1576,
	-1, 1902,
	143, 1391,
	-2, 1608,
	-1, 1903,
	143, 1392,
	-2, 1671,
	-1, 1972,
	1, 984,
	81, 984,
	114, 984,
	127, 984,
	144, 984,
	149, 984,
	151, 984,
	173, 984,
	182, 984,
	191, 984,
	205, 984,
	209, 984,
	224, 984,
	238, 984,
	241, 984,
	246, 984,
	290, 984,
	292, 984,
	371, 984,
	379, 984,
	391, 984,
	392, 984,
	402, 984,
	421, 984,
	423, 984,
	425, 984,
	426, 984,
	427, 984,
	-2, 983,
	-1, 1977,
	422, 1473,
	-2, 1485,
	-1, 2061,
	423, 1445,
	427, 1445,
	-2, 1461,
	-1, 2187,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1163,
	-1, 2188,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1167,
	-1, 2194,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1169,
	-1, 2427,
	257, 899,
	-2, 721,
	-1, 2495,
	188, 809,
	267, 809,
	272, 809,
	-2, 411,
	-1, 2513,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1171,
	-1, 2520,
	186, 0,
	187, 0,
	231, 0,
	-2, 1190,
	-1, 2581,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1220,
	-1, 2582,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1221,
	-1, 2583,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1222,
	-1, 2587,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1226,
	-1, 2588,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1227,
	-1, 2589,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1228,
	-1, 2631,
	422, 1474,
	-2, 1486,
	-1, 2745,
	186, 0,
	187, 0,
	231, 0,
	-2, 1191,
	-1, 2748,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1194,
	-1, 2749,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1196,
	-1, 2894,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1195,
	-1, 2895,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1197,
	-1, 2905,
	186, 0,
	-2, 1229,
	-1, 2993,
	186, 0,
	-2, 1230,
	-1, 3087,
	38, 0,
	161, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1730,
}

const sqlPrivate = 57344

const sqlLast = 58821

var sqlAct = [...]int{

	807, 2676, 1932, 3086, 3095, 3066, 2845, 3064, 3149, 3063,
	2933, 2088, 3096, 2096, 3051, 3097, 2922, 2551, 2884, 2997,
	2860, 2117, 1083, 3085, 1141, 1763, 2693, 2180, 2688, 1595,
	2801, 1057, 1285, 2640, 2816, 1823, 2434, 2442, 2641, 2698,
	2467, 211, 2436, 1964, 2214, 2909, 500, 954, 727, 2085,
	2293, 2063, 2465, 500, 2447, 970, 2216, 1596, 1375, 2342,
	500, 2059, 1105, 500, 500, 928, 500, 211, 2331, 500,
	500, 593, 1565, 2307, 495, 1453, 500, 2097, 1451, 1432,
	1137, 1540, 1960, 1544, 500, 964, 1549, 2062, 947, 1543,
	1965, 2779, 1989, 550, 1490, 2318, 2292, 1552, 2998, 1754,
	2044, 1835, 1378, 735, 130, 1749, 1690, 1424, 546, 2176,
	1512, 1461, 1855, 2446, 1967, 2409, 1980, 1506, 803, 1469,
	1541, 1471, 2604, 1433, 1861, 73, 1929, 2017, 1820, 585,
	2642, 2018, 920, 1205, 2060, 2045, 1388, 1412, 1849, 1124,
	956, 1152, 1134, 2090, 497, 2066, 923, 212, 1442, 213,
	1937, 496, 1952, 2846, 902, 1893, 1361, 1836, 635, 1286,
	1284, 1689, 767, 766, 130, 136, 629, 207, 500, 500,
	588, 1559, 1150, 1121, 543, 615, 1482, 137, 925, 1061,
	600, 900, 1423, 664, 1290, 480, 2349, 2620, 2209, 1567,
	2621, 1567, 483, 1567, 726, 1452, 2089, 2508, 608, 2118,
	500, 500, 500, 959, 500, 500, 973, 973, 2046, 3176,
	731, 480, 2485, 1946, 779, 500, 500, 3170, 483, 3169,
	3146, 1946, 3143, 1946, 2815, 3121, 1521, 2454, 731, 2815,
	1946, 1963, 2453, 1579, 602, 3115, 3114, 3111, 3108, 1946,
	1946, 3112, 3109, 3047, 3105, 3083, 3082, 741, 1521, 1521,
	1521, 3081, 3080, 3046, 3033, 1579, 1579, 2130, 1521, 3026,
	1515, 3024, 3022, 2815, 732, 2815, 2815, 2995, 2977, 2967,
	2962, 2130, 2714, 2815, 1521, 2960, 950, 2951, 1176, 2815,
	130, 1521, 903, 903, 2950, 967, 2943, 917, 1521, 1082,
	1521, 2942, 2422, 2915, 2896, 2815, 719, 1521, 2130, 2840,
	2836, 2814, 2747, 1946, 1946, 2815, 2130, 2712, 718, 2704,
	2626, 2705, 2616, 2705, 2627, 2046, 2617, 2610, 2529, 1301,
	1302, 1946, 1521, 736, 2524, 1939, 2475, 2304, 1946, 547,
	2414, 1946, 940, 944, 949, 2981, 2120, 2260, 2259, 828,
	2607, 1946, 1946, 2255, 1304, 2240, 1177, 1946, 1579, 2241,
	904, 2228, 578, 2093, 549, 1521, 2148, 2229, 2607, 480,
	1946, 1938, 1063, 40, 1062, 1852, 483, 571, 28, 806,
	1521, 1303, 2129, 2116, 1301, 1302, 2130, 1584, 44, 2113,
	2055, 1945, 1583, 1946, 1521, 1946, 1584, 906, 1188, 907,
	934, 1946, 1668, 2714, 2033, 1978, 2414, 2179, 2159, 1304,
	1520, 1428, 1840, 1060, 176, 2455, 1172, 577, 1171, 2215,
	1687, 1170, 805, 173, 173, 1169, 1168, 1167, 1166, 1165,
	1164, 1163, 1162, 1853, 2456, 1568, 1303, 1568, 1161, 1568,
	1160, 1159, 1070, 1158, 1157, 579, 1156, 971, 1058, 908,
	1529, 905, 725, 59, 581, 1081, 724, 1309, 60, 175,
	175, 723, 722, 721, 717, 716, 715, 714, 713, 2265,
	2266, 712, 711, 710, 709, 708, 707, 703, 2265, 2266,
	702, 701, 662, 661, 1331, 1332, 1333, 660, 659, 658,
	657, 656, 63, 655, 654, 653, 652, 651, 1854, 1851,
	174, 174, 650, 649, 1376, 648, 1177, 647, 646, 167,
	645, 644, 1309, 643, 642, 641, 640, 168, 639, 500,
	500, 2453, 500, 959, 959, 500, 624, 623, 500, 622,
	621, 500, 620, 619, 1324, 534, 533, 500, 138, 138,
	506, 146, 1884, 505, 504, 486, 39, 500, 500, 500,
	500, 500, 959, 959, 28, 931, 485, 40, 141, 959,
	1076, 2265, 2266, 484, 197, 196, 195, 194, 193, 192,
	191, 173, 44, 764, 1575, 190, 1566, 1145, 1733, 189,
	188, 187, 186, 185, 2794, 1856, 1521, 46, 143, 1301,
	1302, 500, 184, 500, 183, 64, 1098, 2271, 930, 45,
	182, 51, 181, 180, 173, 500, 2271, 175, 179, 178,
	1095, 177, 1971, 1110, 1304, 2758, 1882, 2706, 1325, 1938,
	2624, 52, 2345, 139, 66, 54, 67, 2234, 500, 58,
	2211, 2168, 2056, 144, 2049, 1880, 1138, 59, 72, 500,
	175, 1303, 60, 61, 173, 1301, 1302, 1878, 174, 1323,
	1454, 1344, 1345, 1346, 1693, 580, 1468, 167, 110, 1382,
	1592, 1219, 1876, 1085, 1174, 168, 1064, 62, 1066, 1123,
	1304, 3102, 1297, 1350, 2281, 3084, 63, 1850, 2417, 959,
	175, 174, 1177, 2281, 732, 2988, 2092, 1128, 1131, 2271,
	167, 2984, 2741, 734, 2963, 2265, 2266, 1303, 168, 1153,
	2882, 2135, 3174, 2932, 2878, 1323, 2778, 1326, 1327, 1328,
	1329, 2982, 2868, 2777, 2765, 500, 1075, 1309, 2036, 138,
	1831, 174, 2764, 1591, 2763, 2762, 2756, 2755, 2006, 2754,
	167, 1313, 1305, 1306, 1307, 1308, 1310, 1311, 168, 2753,
	2726, 2724, 1374, 2630, 1331, 1332, 1333, 173, 1203, 932,
	1213, 2601, 2600, 2599, 1217, 2531, 2413, 2340, 2282, 548,
	1379, 2300, 2291, 1326, 1327, 1328, 1329, 2282, 2265, 2266,
	2264, 2261, 1369, 1309, 2258, 2256, 2239, 1283, 2221, 64,
	2220, 2210, 2121, 175, 1972, 1282, 65, 1305, 1306, 1307,
	1308, 1310, 1311, 1297, 1324, 1296, 1341, 1351, 3157, 1526,
	1331, 1332, 1333, 916, 3156, 1200, 75, 139, 66, 1524,
	67, 1379, 68, 1364, 1084, 2553, 145, 3075, 3070, 3028,
	3019, 69, 173, 2271, 174, 3018, 1688, 2019, 173, 3015,
	3014, 3009, 173, 167, 3006, 2175, 2980, 2979, 1825, 83,
	2928, 168, 110, 1339, 2907, 1832, 2854, 1281, 2850, 2848,
	1324, 142, 2793, 2776, 2715, 2691, 2683, 2682, 175, 1220,
	2680, 1330, 138, 2658, 175, 173, 2657, 1069, 175, 1074,
	2647, 1080, 2267, 2268, 2269, 2270, 2272, 2273, 1325, 2274,
	2275, 2267, 2268, 2269, 2270, 2272, 2273, 115, 2646, 2612,
	2132, 2519, 2481, 2867, 2473, 732, 2271, 140, 2398, 174,
	2381, 175, 2479, 2359, 2358, 174, 2303, 500, 167, 174,
	2238, 719, 500, 2237, 167, 2226, 168, 1330, 167, 3000,
	2324, 1365, 168, 718, 1293, 1294, 168, 2203, 1439, 1389,
	1386, 1298, 2359, 2137, 1325, 1975, 1430, 138, 500, 1957,
	1944, 1874, 174, 138, 1535, 1467, 4, 138, 1431, 1422,
	1421, 167, 1420, 1419, 1301, 1302, 1418, 1342, 1417, 168,
	1416, 1415, 2881, 1883, 2267, 2268, 2269, 2270, 2272, 2273,
	1390, 1391, 1414, 2281, 1411, 1392, 1181, 1410, 1409, 1304,
	138, 1408, 1407, 1186, 1406, 1405, 1404, 1403, 1449, 1314,
	1312, 1313, 1305, 1306, 1307, 1308, 1310, 1311, 173, 1402,
	1436, 1437, 1593, 1401, 2265, 2266, 1303, 2283, 2284, 2285,
	1400, 1462, 1399, 1371, 1364, 1301, 1302, 1199, 1183, 1178,
	1155, 1413, 2743, 1149, 2750, 2723, 903, 2619, 2615, 2227,
	1958, 2477, 1362, 130, 175, 1340, 1687, 1881, 1450, 1687,
	1304, 2265, 2266, 1343, 1463, 1314, 1312, 1313, 1305, 1306,
	1307, 1308, 1310, 1311, 2437, 2873, 1879, 2282, 2717, 1216,
	732, 2147, 1678, 1677, 2280, 1687, 1684, 1303, 1877, 2716,
	959, 500, 2046, 2622, 1454, 174, 765, 973, 1489, 2956,
	1425, 1459, 1427, 1875, 167, 1396, 2656, 1687, 1394, 2985,
	1279, 1397, 168, 1429, 1395, 500, 973, 500, 500, 2402,
	2269, 2270, 2272, 2273, 1477, 211, 1406, 2146, 2397, 2983,
	1194, 1456, 2392, 138, 2380, 2245, 1406, 2244, 2243, 500,
	500, 2242, 1536, 2931, 2185, 1661, 500, 2021, 500, 1212,
	500, 1513, 2271, 1674, 500, 1384, 2118, 1545, 1548, 2487,
	1483, 2391, 1502, 1309, 898, 535, 2910, 934, 2089, 934,
	2555, 2232, 1862, 3103, 1508, 1272, 1393, 1681, 3113, 1373,
	3110, 2449, 1582, 3060, 2636, 2689, 959, 1224, 2276, 2274,
	2275, 2267, 2268, 2269, 2270, 2272, 2273, 2123, 899, 542,
	2286, 513, 202, 3136, 500, 959, 211, 500, 500, 959,
	1270, 3032, 2828, 3137, 894, 959, 730, 892, 211, 500,
	2497, 890, 500, 500, 1556, 3104, 1554, 888, 500, 2281,
	885, 1570, 1663, 2149, 1572, 480, 1532, 1574, 1063, 1651,
	1062, 1577, 483, 915, 1719, 3173, 2955, 1982, 2954, 2953,
	973, 523, 2952, 1982, 1271, 2670, 540, 1852, 2661, 959,
	959, 1621, 500, 1991, 1981, 2844, 1258, 500, 1563, 480,
	1519, 2665, 211, 500, 1873, 500, 483, 500, 1123, 500,
	2664, 500, 1717, 541, 729, 512, 2633, 2632, 2225, 1682,
	2224, 500, 1539, 500, 2223, 1214, 2222, 2189, 2119, 2133,
	2039, 500, 500, 500, 2032, 2028, 2009, 1655, 1675, 1807,
	1426, 1059, 1872, 2282, 1871, 1853, 1870, 1765, 2086, 1558,
	1087, 1561, 931, 524, 931, 1222, 1153, 705, 1522, 2987,
	500, 539, 1534, 2500, 973, 1730, 2478, 2043, 1731, 1695,
	1665, 1215, 1190, 2675, 1484, 1257, 1994, 1530, 731, 1736,
	480, 2054, 1822, 2001, 1822, 3031, 614, 483, 1585, 1702,
	3078, 1829, 480, 1300, 1725, 930, 1827, 930, 2649, 483,
	1200, 1481, 2935, 1587, 1686, 613, 1601, 1098, 1589, 2000,
	1854, 1851, 1311, 1732, 1562, 1652, 1662, 1253, 2502, 1755,
	1762, 1727, 614, 1485, 1486, 2501, 1198, 1269, 1837, 2165,
	2541, 1818, 1856, 1369, 1841, 1683, 1679, 1691, 2388, 3043,
	2177, 2178, 1837, 973, 532, 3128, 480, 2277, 2278, 2279,
	1699, 1816, 2444, 483, 2276, 2274, 2275, 2267, 2268, 2269,
	2270, 2272, 2273, 1191, 3159, 1254, 527, 3044, 2383, 1708,
	1307, 1308, 1310, 1311, 1892, 2025, 3011, 1896, 1896, 1906,
	1908, 1913, 1862, 1837, 2824, 2445, 542, 500, 1463, 500,
	693, 3099, 1688, 2019, 1936, 1688, 2019, 1856, 3152, 2273,
	1993, 537, 1567, 728, 1734, 1735, 1501, 1487, 1869, 198,
	740, 1694, 1232, 973, 500, 3136, 719, 1856, 1753, 719,
	719, 1688, 1685, 500, 1601, 1601, 500, 1387, 1745, 973,
	1976, 1746, 1747, 500, 2444, 1193, 538, 1278, 1256, 2498,
	1729, 500, 1859, 1688, 2019, 2666, 932, 1812, 932, 500,
	732, 2371, 2496, 526, 525, 1813, 732, 2077, 1814, 2538,
	2029, 500, 1819, 1479, 959, 1509, 1973, 2265, 2266, 2890,
	541, 1472, 2659, 3127, 1473, 500, 973, 1833, 1979, 694,
	536, 500, 500, 1620, 1983, 1479, 2370, 1959, 1221, 1850,
	693, 1969, 1970, 540, 1223, 1764, 500, 1857, 2901, 500,
	203, 896, 3100, 903, 895, 2958, 1992, 886, 2650, 2012,
	740, 886, 2401, 1266, 2822, 1949, 1504, 887, 2236, 1472,
	886, 1839, 1473, 500, 2539, 500, 1359, 500, 2886, 1086,
	500, 1904, 500, 1718, 500, 950, 500, 500, 1924, 500,
	959, 959, 959, 1934, 2011, 959, 732, 1942, 1943, 2026,
	1995, 1997, 500, 1950, 500, 2040, 1953, 1474, 2041, 1954,
	1955, 2936, 1933, 1987, 1968, 2111, 2112, 1459, 539, 1476,
	3101, 1716, 3150, 2003, 1863, 204, 731, 1588, 1986, 694,
	2718, 2010, 1666, 2728, 2020, 2022, 2023, 2024, 2191, 1653,
	1821, 1815, 1267, 2027, 1828, 2271, 2011, 3126, 706, 1817,
	3160, 1620, 1620, 528, 1479, 1474, 203, 1701, 2152, 695,
	1299, 1856, 1804, 1192, 1601, 500, 2107, 1476, 934, 1478,
	2154, 2885, 2823, 2122, 2109, 480, 1987, 1189, 1063, 2735,
	2047, 1511, 483, 2138, 3151, 934, 2489, 3098, 1568, 2102,
	1289, 1240, 1915, 1197, 3135, 3133, 2859, 130, 2125, 1510,
	2155, 529, 2114, 2100, 973, 2857, 500, 1268, 130, 2083,
	1977, 804, 2153, 206, 3153, 2095, 500, 1478, 500, 2104,
	2081, 2105, 2281, 2106, 1538, 1209, 1507, 205, 1233, 2108,
	1438, 204, 1505, 1187, 1987, 1153, 2115, 530, 2124, 531,
	500, 500, 500, 542, 500, 1175, 751, 503, 1485, 1486,
	2134, 1441, 481, 696, 1288, 1479, 2891, 498, 537, 695,
	2406, 2492, 2887, 500, 519, 201, 2142, 2136, 2143, 2200,
	1445, 545, 2945, 2774, 589, 596, 1234, 545, 481, 1231,
	589, 611, 2377, 1390, 1391, 1802, 1805, 618, 2373, 2198,
	1359, 697, 1517, 538, 2141, 638, 1413, 2139, 3165, 1448,
	199, 2812, 2944, 1479, 1210, 2410, 2282, 745, 2375, 1211,
	2590, 2150, 2926, 3003, 1445, 2827, 2635, 1951, 1209, 206,
	2355, 2170, 2826, 931, 2351, 2084, 2082, 541, 2809, 1557,
	1470, 1446, 1801, 205, 202, 1547, 1287, 536, 2206, 1204,
	931, 1620, 1546, 1448, 200, 1369, 1542, 1537, 2374, 2491,
	500, 2192, 1673, 696, 1741, 2537, 2332, 2218, 2219, 3052,
	2005, 1443, 1722, 2488, 1669, 1289, 930, 2013, 2810, 1696,
	2694, 201, 1288, 2861, 1472, 1446, 2172, 1473, 2927, 545,
	545, 1475, 2174, 930, 2361, 2195, 2035, 933, 2360, 2183,
	2058, 697, 2321, 1948, 1444, 507, 2196, 1210, 1947, 2057,
	2201, 2075, 1211, 2051, 2775, 2053, 199, 729, 606, 2677,
	2415, 498, 498, 498, 1671, 965, 498, 1144, 1447, 2275,
	2267, 2268, 2269, 2270, 2272, 2273, 481, 1065, 1672, 1475,
	1241, 3164, 1120, 1118, 2591, 2160, 2490, 2091, 1109, 2091,
	202, 2592, 2333, 2190, 2302, 1742, 1803, 1108, 510, 583,
	200, 973, 2825, 3140, 1287, 2847, 2924, 2314, 3, 2305,
	1474, 732, 1447, 2405, 2312, 2313, 2780, 500, 2605, 1867,
	500, 3142, 1476, 576, 36, 575, 35, 500, 1276, 2906,
	500, 500, 973, 2773, 2674, 2294, 517, 2518, 2925, 2073,
	500, 500, 500, 2014, 2015, 2231, 500, 2464, 2805, 500,
	2335, 2806, 2257, 574, 32, 1263, 500, 500, 500, 500,
	500, 2202, 2856, 2328, 2140, 599, 2038, 932, 2008, 1528,
	500, 1261, 1478, 2336, 2337, 1209, 2326, 500, 1251, 2197,
	2329, 2344, 2411, 1249, 932, 2808, 2295, 2199, 1466, 500,
	959, 573, 79, 500, 2327, 2811, 1277, 2352, 1184, 1247,
	973, 2343, 2167, 2166, 500, 2356, 2162, 2323, 2339, 2144,
	973, 2309, 1705, 2297, 2298, 2299, 1245, 973, 1654, 2316,
	2317, 1866, 2306, 2322, 1398, 1094, 572, 78, 516, 500,
	3094, 500, 2382, 500, 569, 23, 959, 500, 959, 959,
	959, 2334, 500, 1715, 500, 604, 605, 2672, 500, 1243,
	570, 24, 1516, 500, 1210, 500, 2423, 3049, 1479, 1211,
	2346, 2855, 500, 1098, 1119, 1117, 2798, 2654, 1237, 1275,
	952, 2348, 568, 30, 567, 21, 1987, 2389, 2393, 500,
	500, 582, 2399, 2376, 959, 938, 2362, 1116, 2365, 510,
	2652, 2807, 1477, 2451, 2634, 2384, 1262, 2439, 565, 20,
	36, 500, 35, 2472, 2394, 2440, 2163, 2387, 2164, 2385,
	1601, 1098, 1260, 2386, 934, 2416, 2433, 1477, 2400, 1250,
	2431, 2483, 934, 934, 1248, 2425, 934, 517, 2419, 500,
	32, 2087, 2311, 2438, 2412, 2357, 513, 2458, 2459, 2460,
	1246, 2461, 2462, 2363, 500, 2367, 2368, 1513, 2476, 2546,
	934, 511, 597, 598, 1513, 2079, 2482, 1244, 566, 19,
	2078, 555, 15, 2338, 556, 16, 564, 57, 79, 2450,
	498, 1093, 973, 498, 509, 2457, 498, 2076, 732, 965,
	130, 1714, 1113, 2448, 1475, 2463, 508, 2072, 498, 1581,
	1242, 1534, 2448, 2521, 1441, 973, 1580, 500, 498, 498,
	498, 498, 965, 78, 1578, 563, 56, 554, 55, 1236,
	1598, 23, 1576, 2493, 2494, 518, 1573, 2495, 1571, 516,
	512, 1569, 2533, 2534, 2535, 1527, 2499, 24, 1115, 1525,
	514, 1514, 562, 12, 1503, 553, 50, 1500, 560, 47,
	2212, 2408, 638, 2504, 596, 2506, 561, 48, 2408, 30,
	1488, 21, 1480, 1601, 2435, 2556, 498, 1445, 2972, 3137,
	2557, 2880, 552, 49, 2602, 1755, 2560, 2879, 1291, 931,
	1692, 2525, 884, 2974, 1982, 20, 2181, 931, 931, 1195,
	1982, 931, 1999, 1755, 2570, 1998, 1448, 1620, 500, 2703,
	638, 1996, 2545, 487, 2842, 2552, 2540, 2542, 2543, 2042,
	500, 559, 7, 2594, 1443, 931, 973, 2559, 558, 6,
	557, 38, 930, 2037, 2598, 2031, 3013, 2623, 1446, 2567,
	930, 930, 2007, 2145, 930, 2569, 1601, 513, 1598, 1598,
	912, 2618, 2378, 584, 2379, 19, 2817, 1444, 15, 551,
	37, 16, 511, 57, 2663, 1235, 2182, 2990, 930, 1292,
	2595, 2781, 913, 2016, 2320, 1659, 1660, 2603, 2002, 1295,
	2034, 2669, 2395, 3048, 2396, 509, 498, 130, 2606, 2004,
	1601, 1601, 2853, 2611, 2629, 500, 500, 508, 500, 2094,
	1099, 1102, 56, 500, 55, 2643, 2673, 2080, 1601, 1601,
	2625, 2071, 973, 2614, 973, 2608, 2609, 959, 2653, 2420,
	2655, 1935, 607, 2528, 2684, 1447, 518, 1664, 2429, 12,
	2638, 512, 50, 1594, 500, 47, 889, 891, 3148, 1601,
	2471, 514, 3163, 48, 2707, 1376, 2549, 1301, 1302, 2722,
	1620, 2544, 2699, 914, 959, 500, 500, 2480, 2695, 49,
	1226, 2700, 2011, 2157, 2696, 1225, 500, 2265, 2266, 973,
	500, 500, 973, 500, 2660, 2158, 1368, 1301, 1302, 2157,
	2156, 500, 2678, 932, 2681, 1301, 1302, 2686, 1868, 973,
	1848, 932, 932, 2679, 2690, 932, 2692, 2687, 7, 1303,
	488, 489, 2697, 2732, 2701, 6, 1265, 38, 2709, 1264,
	1304, 2708, 2319, 2751, 2536, 2737, 934, 1374, 1372, 932,
	2725, 2918, 2871, 1620, 2729, 1987, 2720, 2721, 2711, 2746,
	1274, 1273, 1259, 1255, 500, 1252, 37, 1303, 1598, 1238,
	2470, 1196, 1667, 897, 704, 2934, 2309, 2651, 3059, 691,
	2369, 1704, 1239, 2733, 934, 2730, 1227, 2631, 1706, 2325,
	1956, 2484, 3042, 2759, 2100, 2235, 2996, 1620, 1620, 2900,
	1865, 2738, 1383, 53, 774, 854, 2799, 2637, 618, 491,
	490, 2065, 2064, 545, 976, 1620, 1620, 1676, 778, 1895,
	1756, 781, 1599, 500, 784, 783, 782, 1600, 2772, 1385,
	780, 1597, 2074, 973, 1457, 973, 933, 2098, 682, 498,
	1680, 1826, 1860, 500, 500, 500, 1620, 2230, 1380, 756,
	1858, 1182, 755, 2330, 2443, 2628, 492, 493, 500, 2866,
	1740, 2173, 1737, 500, 515, 500, 2262, 1148, 500, 500,
	500, 500, 500, 1921, 1914, 500, 500, 959, 1910, 934,
	1280, 973, 1360, 2099, 1218, 959, 2787, 2341, 2818, 2452,
	2820, 2131, 1601, 500, 500, 1748, 2797, 2792, 911, 2788,
	910, 931, 909, 2343, 2786, 3065, 959, 3062, 2888, 2843,
	2783, 2784, 1670, 2151, 1353, 2789, 500, 771, 2310, 2418,
	1091, 3012, 2643, 1352, 2849, 500, 500, 959, 959, 2782,
	971, 893, 3005, 1058, 1208, 2858, 1207, 2837, 1206, 931,
	2354, 3158, 2648, 172, 930, 169, 2865, 2862, 171, 2889,
	1098, 170, 2404, 2863, 82, 2852, 2643, 2864, 34, 33,
	109, 108, 107, 2841, 2838, 2874, 2872, 2643, 106, 973,
	2870, 105, 481, 2795, 2440, 1987, 2892, 104, 2875, 103,
	102, 101, 930, 100, 99, 98, 97, 96, 95, 94,
	93, 92, 91, 2829, 2912, 90, 1065, 89, 498, 1533,
	88, 2834, 87, 86, 85, 973, 481, 2897, 84, 500,
	634, 500, 631, 973, 500, 81, 2908, 80, 31, 26,
	1553, 1553, 500, 113, 1987, 114, 25, 498, 973, 498,
	2796, 498, 934, 77, 931, 545, 76, 29, 2921, 2913,
	2914, 18, 2713, 11, 17, 22, 2448, 135, 134, 133,
	132, 2830, 934, 2939, 2938, 131, 2940, 14, 2835, 2917,
	2919, 13, 128, 129, 2937, 127, 2791, 126, 500, 1620,
	500, 934, 2916, 959, 125, 124, 123, 930, 500, 10,
	8, 112, 9, 2883, 2486, 638, 70, 481, 1065, 589,
	71, 2643, 2959, 27, 2961, 932, 2947, 43, 2965, 481,
	1065, 973, 42, 965, 498, 934, 41, 111, 163, 638,
	2978, 2971, 2948, 2949, 2969, 2699, 934, 162, 161, 2976,
	2970, 500, 2975, 160, 2643, 156, 2643, 500, 155, 159,
	2643, 157, 2986, 932, 158, 500, 2727, 154, 122, 1987,
	165, 164, 152, 638, 149, 3008, 148, 2994, 498, 1601,
	151, 3002, 153, 481, 498, 150, 498, 147, 498, 2989,
	498, 3001, 498, 500, 500, 166, 121, 2440, 120, 500,
	2999, 119, 1720, 118, 1721, 3025, 117, 1518, 116, 5,
	959, 3023, 498, 498, 498, 500, 3010, 931, 2, 1,
	959, 959, 0, 0, 500, 0, 500, 2920, 500, 0,
	2898, 1601, 0, 3045, 0, 3027, 0, 931, 3030, 0,
	3038, 638, 0, 0, 3036, 3037, 0, 500, 0, 0,
	500, 0, 500, 3035, 973, 3055, 931, 3029, 932, 0,
	930, 3068, 3069, 3067, 0, 3071, 2898, 0, 0, 0,
	934, 0, 3073, 0, 1764, 3072, 0, 3074, 3057, 3061,
	930, 0, 0, 0, 0, 3079, 0, 0, 500, 1764,
	931, 3077, 0, 2785, 1598, 0, 0, 0, 0, 930,
	0, 931, 3076, 934, 0, 934, 3093, 3092, 3091, 934,
	1601, 500, 2869, 0, 3118, 738, 3119, 693, 3117, 500,
	0, 3106, 1586, 3016, 0, 0, 1590, 1744, 2821, 0,
	0, 3125, 3122, 930, 2643, 500, 1830, 740, 2831, 2832,
	0, 0, 3123, 3124, 930, 0, 0, 1368, 0, 3120,
	3134, 3131, 3132, 2265, 2266, 1440, 1620, 0, 3141, 3139,
	3067, 3138, 1058, 2851, 0, 3144, 3145, 0, 618, 0,
	545, 0, 0, 739, 3147, 0, 1697, 1698, 0, 0,
	3017, 2643, 0, 3155, 0, 933, 3154, 0, 0, 0,
	0, 0, 3162, 0, 0, 545, 1920, 3161, 0, 3166,
	3167, 3034, 933, 3168, 545, 0, 694, 498, 1620, 0,
	0, 932, 0, 2280, 1990, 3171, 3172, 3175, 0, 0,
	0, 0, 498, 3177, 0, 931, 0, 0, 0, 0,
	498, 932, 0, 0, 0, 1491, 0, 1598, 0, 0,
	0, 0, 498, 0, 0, 0, 0, 0, 0, 2100,
	932, 0, 0, 1495, 0, 0, 498, 1916, 931, 0,
	931, 2964, 481, 2048, 931, 0, 0, 0, 930, 0,
	0, 0, 0, 0, 0, 0, 0, 2061, 0, 0,
	1065, 2271, 0, 934, 932, 1764, 0, 1620, 0, 0,
	0, 0, 0, 0, 1492, 932, 743, 0, 0, 0,
	0, 930, 0, 930, 1990, 0, 545, 930, 498, 0,
	1598, 498, 0, 498, 0, 498, 0, 498, 498, 0,
	965, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	934, 0, 0, 596, 0, 1990, 695, 0, 0, 0,
	0, 0, 1301, 1302, 0, 0, 0, 0, 2973, 0,
	0, 0, 0, 0, 1598, 1598, 0, 0, 2281, 1496,
	0, 1301, 1302, 0, 0, 0, 0, 1304, 0, 0,
	0, 0, 1598, 1598, 1301, 1302, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1304, 0, 0, 0,
	0, 0, 0, 0, 1303, 0, 589, 0, 0, 1304,
	0, 0, 1323, 1598, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1303, 0, 0, 0, 0, 0, 932,
	1497, 1498, 0, 0, 0, 0, 1303, 0, 737, 1493,
	696, 0, 0, 0, 0, 0, 0, 498, 931, 0,
	0, 0, 2282, 0, 0, 2517, 0, 1065, 0, 1065,
	0, 2030, 932, 0, 932, 0, 1494, 0, 932, 0,
	1326, 1327, 1328, 1329, 3039, 0, 3040, 0, 697, 0,
	1309, 498, 498, 498, 0, 498, 0, 0, 0, 0,
	0, 930, 0, 0, 0, 931, 0, 0, 0, 1309,
	3056, 0, 0, 0, 498, 0, 0, 1331, 1332, 1333,
	0, 0, 1309, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1331, 1332, 1333, 0,
	0, 0, 0, 0, 0, 0, 0, 2110, 930, 1331,
	1332, 1333, 0, 1499, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2204, 2205, 0, 0, 1324, 0, 1301,
	1302, 3116, 0, 2276, 2274, 2275, 2267, 2268, 2269, 2270,
	2272, 2273, 0, 0, 0, 0, 1324, 0, 0, 0,
	0, 0, 0, 0, 1304, 0, 0, 0, 0, 1324,
	0, 1065, 0, 0, 501, 0, 2812, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1920, 1920, 0,
	0, 1303, 0, 0, 0, 0, 0, 0, 0, 1323,
	0, 0, 0, 2809, 1330, 0, 2802, 0, 0, 0,
	0, 0, 0, 0, 0, 210, 1598, 0, 0, 2800,
	0, 1325, 932, 0, 2804, 0, 0, 0, 0, 0,
	2288, 2289, 2290, 0, 1067, 0, 1071, 0, 1077, 0,
	1325, 210, 2512, 2810, 0, 0, 0, 0, 1916, 1916,
	0, 0, 0, 1325, 0, 0, 808, 1326, 1327, 1328,
	1329, 0, 0, 0, 0, 0, 0, 1309, 0, 932,
	2803, 933, 0, 0, 0, 0, 0, 0, 0, 933,
	933, 0, 0, 933, 1920, 1920, 1920, 0, 545, 0,
	0, 545, 0, 0, 1331, 1332, 1333, 0, 545, 0,
	0, 545, 545, 0, 0, 0, 0, 1457, 0, 0,
	0, 498, 1990, 2350, 0, 0, 0, 1990, 0, 0,
	2350, 0, 0, 0, 0, 0, 0, 1990, 2350, 1990,
	2350, 2350, 1314, 1312, 1313, 1305, 1306, 1307, 1308, 1310,
	1311, 498, 0, 1180, 1324, 1916, 1916, 1916, 1533, 0,
	1185, 1314, 1312, 1313, 1305, 1306, 1307, 1308, 1310, 1311,
	498, 0, 0, 0, 965, 1312, 1313, 1305, 1306, 1307,
	1308, 1310, 1311, 2805, 0, 498, 2806, 960, 0, 743,
	974, 974, 0, 743, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1553, 0, 1553, 0, 498, 1301, 1302, 0, 498, 0,
	2808, 1330, 0, 498, 0, 498, 0, 0, 0, 965,
	2811, 0, 0, 0, 1990, 0, 545, 0, 1325, 0,
	1304, 0, 0, 1990, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2468, 1065, 0, 0, 0, 0, 0, 1303, 0, 961,
	0, 0, 975, 975, 0, 0, 0, 0, 0, 0,
	0, 0, 1065, 1598, 2265, 2266, 0, 2283, 2284, 2285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1354, 1355, 1356, 1357, 1358, 0, 0, 0,
	2503, 0, 0, 2514, 2515, 1367, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 498, 2807, 0, 0, 0,
	0, 0, 0, 1381, 0, 1598, 0, 0, 0, 0,
	0, 0, 0, 1309, 2280, 0, 0, 0, 0, 1314,
	1312, 1313, 1305, 1306, 1307, 1308, 1310, 1311, 2265, 2266,
	0, 2283, 2284, 2285, 0, 0, 0, 1920, 1920, 0,
	1331, 1332, 1333, 0, 0, 0, 2742, 2390, 2554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2571, 2572, 2573, 2574, 2575, 2576, 2577, 2578, 2579, 2580,
	2581, 2582, 2583, 2584, 2585, 2586, 2587, 2588, 2589, 0,
	2593, 0, 2271, 0, 1598, 0, 0, 0, 2280, 0,
	1324, 0, 0, 2424, 0, 2426, 2427, 2428, 1916, 1916,
	0, 0, 0, 0, 2265, 2266, 0, 2283, 2284, 2285,
	0, 0, 0, 0, 1920, 1920, 1920, 1920, 1920, 1920,
	1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
	1920, 1920, 1920, 933, 1920, 1434, 1434, 1434, 0, 545,
	0, 2474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 545, 0, 0, 0, 0, 2271, 0, 0, 2281,
	0, 0, 0, 0, 2280, 0, 0, 960, 960, 0,
	0, 2645, 0, 0, 1325, 1916, 1916, 1916, 1916, 1916,
	1916, 1916, 1916, 1916, 1916, 1916, 1916, 1916, 1916, 1916,
	1916, 1916, 1916, 1916, 0, 1916, 960, 960, 0, 0,
	0, 0, 0, 960, 2286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1990, 1553, 0, 1553,
	0, 0, 2271, 2281, 498, 0, 0, 0, 0, 0,
	0, 0, 0, 2282, 0, 0, 0, 0, 0, 961,
	961, 0, 0, 0, 0, 0, 2287, 0, 0, 0,
	0, 0, 0, 0, 0, 1990, 933, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 961, 961,
	2286, 0, 0, 0, 0, 961, 596, 596, 1305, 1306,
	1307, 1308, 1310, 1311, 0, 0, 0, 1065, 0, 0,
	0, 965, 498, 0, 498, 0, 0, 0, 0, 2281,
	0, 0, 498, 0, 0, 0, 0, 2282, 0, 0,
	0, 0, 0, 960, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2277, 2278, 2279,
	0, 0, 0, 0, 2276, 2274, 2275, 2267, 2268, 2269,
	2270, 2272, 2273, 0, 0, 2760, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2282, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 961, 0, 0, 926, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 933,
	0, 2277, 2278, 2279, 1065, 0, 0, 0, 2276, 2274,
	2275, 2267, 2268, 2269, 2270, 2272, 2273, 0, 0, 1457,
	743, 743, 0, 0, 1990, 2350, 1990, 0, 0, 0,
	0, 0, 0, 0, 494, 0, 0, 0, 2645, 1065,
	0, 0, 0, 0, 1990, 0, 2350, 0, 0, 1065,
	1065, 498, 1990, 2350, 0, 0, 498, 498, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2719, 2645, 0, 1065, 2061, 0, 2277, 2278, 2279,
	0, 0, 0, 2645, 2276, 2274, 2275, 2267, 2268, 2269,
	2270, 2272, 2273, 1738, 0, 1743, 0, 1990, 0, 0,
	0, 1750, 0, 0, 0, 0, 2468, 2468, 0, 0,
	0, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774,
	1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784,
	1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794,
	1795, 1796, 1797, 1798, 1799, 1800, 2905, 1806, 0, 1808,
	1809, 1810, 1811, 0, 0, 0, 0, 0, 2265, 2266,
	0, 2283, 2284, 2285, 0, 0, 0, 0, 1834, 1301,
	1302, 0, 0, 0, 0, 0, 1367, 0, 0, 0,
	0, 0, 0, 2929, 0, 0, 0, 0, 942, 0,
	1990, 0, 2350, 969, 1304, 2923, 0, 0, 0, 0,
	1920, 0, 0, 498, 0, 0, 0, 2645, 0, 0,
	1885, 1886, 1887, 1888, 1889, 1890, 1891, 0, 2280, 0,
	0, 1303, 0, 0, 1912, 0, 1923, 1925, 1930, 1323,
	0, 0, 0, 0, 0, 0, 0, 1920, 0, 0,
	2645, 0, 2645, 0, 0, 0, 2645, 0, 0, 498,
	0, 498, 0, 0, 0, 0, 0, 0, 0, 1065,
	0, 1916, 0, 0, 2839, 0, 0, 0, 0, 0,
	0, 0, 2511, 0, 0, 0, 0, 0, 0, 2993,
	0, 0, 0, 0, 0, 0, 2271, 1326, 1327, 1328,
	1329, 0, 0, 0, 960, 0, 0, 1309, 1916, 0,
	0, 974, 2554, 0, 0, 0, 0, 0, 545, 0,
	0, 0, 0, 0, 2876, 2877, 2923, 0, 0, 0,
	974, 0, 0, 0, 1331, 1332, 1333, 0, 0, 210,
	2050, 0, 2052, 1920, 2286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1990, 2350, 0, 0, 0, 0,
	498, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2281, 0, 0, 2350, 0, 0, 0,
	0, 0, 0, 0, 1324, 1065, 961, 1065, 0, 498,
	0, 0, 0, 975, 0, 0, 1301, 1302, 0, 0,
	960, 0, 0, 0, 1916, 0, 0, 0, 3053, 0,
	0, 1065, 975, 498, 0, 0, 0, 0, 0, 960,
	210, 1304, 0, 960, 0, 0, 0, 0, 0, 960,
	2645, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1303, 2554,
	0, 1330, 0, 0, 0, 0, 1323, 2282, 0, 0,
	0, 775, 74, 0, 974, 0, 0, 0, 1325, 0,
	0, 0, 1065, 960, 960, 0, 0, 2645, 0, 0,
	1990, 0, 961, 0, 0, 0, 210, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2923, 0, 0, 2193,
	0, 961, 0, 0, 0, 961, 0, 1089, 0, 0,
	0, 961, 0, 1107, 1326, 1327, 1328, 1329, 0, 0,
	0, 0, 74, 0, 1309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1127, 1127, 1127, 969, 0,
	0, 0, 0, 0, 0, 0, 975, 0, 974, 0,
	0, 1331, 1332, 1333, 0, 961, 961, 0, 0, 0,
	0, 2277, 2278, 2279, 0, 0, 0, 0, 2276, 2274,
	2275, 2267, 2268, 2269, 2270, 2272, 2273, 0, 0, 1314,
	1312, 1313, 1305, 1306, 1307, 1308, 1310, 1311, 0, 0,
	0, 0, 720, 1179, 0, 0, 0, 0, 0, 0,
	733, 1324, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2187, 2188, 0,
	0, 0, 0, 2194, 0, 0, 0, 974, 0, 0,
	975, 0, 0, 0, 0, 0, 0, 921, 74, 0,
	0, 0, 2207, 0, 0, 0, 0, 0, 0, 0,
	1301, 1302, 0, 0, 0, 0, 2213, 0, 0, 2217,
	0, 0, 0, 0, 0, 0, 0, 0, 1330, 0,
	0, 0, 0, 0, 0, 1304, 0, 0, 2233, 0,
	0, 0, 0, 0, 0, 1325, 0, 0, 0, 0,
	2246, 0, 0, 0, 0, 0, 0, 974, 0, 0,
	0, 0, 1303, 0, 0, 0, 0, 0, 0, 975,
	1323, 0, 0, 974, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1301, 1302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1930, 1930, 1930, 0, 0, 0, 960, 0,
	1304, 0, 0, 2186, 1434, 0, 0, 0, 0, 0,
	974, 0, 2315, 0, 1376, 0, 0, 0, 1326, 1327,
	1328, 1329, 0, 0, 0, 0, 0, 1303, 1309, 975,
	0, 0, 578, 0, 0, 1323, 0, 0, 0, 0,
	0, 0, 0, 40, 0, 975, 1314, 1312, 1313, 1305,
	1306, 1307, 1308, 1310, 1311, 1331, 1332, 1333, 44, 0,
	0, 0, 0, 0, 0, 0, 0, 2372, 0, 0,
	0, 0, 0, 0, 960, 960, 960, 0, 0, 960,
	961, 0, 0, 0, 0, 0, 0, 577, 0, 0,
	0, 0, 975, 1326, 1327, 1328, 1329, 0, 0, 0,
	0, 0, 0, 1309, 0, 1324, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 0, 0, 0, 0,
	0, 0, 0, 59, 581, 0, 0, 0, 60, 0,
	1331, 1332, 1333, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2441, 961, 961, 961, 0,
	0, 961, 63, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1330, 0, 0, 0, 1464, 0, 0, 0,
	1324, 0, 0, 0, 0, 0, 0, 0, 974, 1325,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 74, 0, 74, 0, 0, 0, 0,
	0, 0, 743, 743, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 743, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2505, 0, 0, 0, 1750, 0, 1330, 0, 0,
	0, 2509, 2510, 0, 0, 2513, 0, 0, 0, 2516,
	733, 0, 0, 0, 1325, 64, 0, 0, 2520, 0,
	975, 0, 0, 0, 0, 2526, 0, 0, 0, 0,
	0, 2315, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 66, 0, 67, 0, 2547, 0,
	1314, 1312, 1313, 1305, 1306, 1307, 1308, 1310, 1311, 0,
	74, 0, 0, 0, 173, 2561, 2562, 74, 2563, 2564,
	2565, 0, 0, 2566, 0, 580, 0, 0, 110, 2568,
	0, 0, 0, 0, 0, 1531, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2596, 2597, 0, 0, 0, 0, 1560, 0, 1560, 0,
	0, 0, 0, 0, 0, 1314, 1312, 1313, 1305, 1306,
	1307, 1308, 1310, 1311, 0, 0, 2613, 0, 0, 0,
	0, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	167, 0, 0, 0, 0, 0, 0, 0, 168, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2639, 0, 0, 0, 0, 138,
	0, 0, 0, 0, 0, 974, 0, 0, 0, 0,
	0, 1657, 0, 0, 0, 0, 2662, 720, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2667, 0,
	0, 0, 0, 2668, 0, 0, 974, 0, 2671, 1363,
	0, 1366, 0, 1301, 1302, 0, 1334, 1335, 1336, 1344,
	1345, 1346, 0, 0, 0, 1703, 0, 0, 1377, 0,
	0, 1709, 0, 1710, 0, 1711, 0, 1712, 1304, 1713,
	0, 1350, 0, 0, 0, 0, 0, 0, 0, 0,
	1434, 0, 0, 0, 0, 0, 0, 975, 0, 1723,
	1107, 2710, 0, 0, 960, 1303, 0, 0, 0, 0,
	0, 0, 0, 1323, 974, 0, 0, 0, 0, 0,
	1320, 0, 0, 0, 974, 0, 0, 0, 975, 0,
	0, 974, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	960, 0, 960, 960, 960, 0, 0, 2739, 2740, 0,
	0, 0, 0, 2744, 2745, 0, 0, 0, 2748, 2749,
	0, 1326, 1327, 1328, 1329, 0, 0, 0, 2752, 0,
	0, 1309, 0, 0, 0, 0, 961, 0, 0, 0,
	0, 0, 0, 0, 2757, 0, 975, 0, 960, 0,
	0, 2761, 0, 0, 1341, 1351, 975, 0, 1331, 1332,
	1333, 74, 0, 975, 1455, 0, 1458, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1347,
	1348, 0, 961, 0, 961, 961, 961, 1318, 1319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1339, 0, 578, 0, 0, 0, 0, 1324, 0,
	0, 0, 0, 0, 40, 0, 2265, 2266, 0, 2283,
	2284, 2285, 0, 0, 1349, 0, 0, 0, 0, 44,
	961, 0, 0, 0, 2523, 0, 974, 0, 0, 0,
	2819, 0, 0, 0, 1974, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 974,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1330, 2280, 0, 0, 0,
	0, 0, 0, 0, 0, 2126, 579, 0, 0, 0,
	0, 0, 1325, 969, 59, 581, 40, 0, 0, 60,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 44, 0, 0, 0, 1342, 0, 0, 975, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 63, 0, 0, 0, 2893, 2894, 2895,
	2127, 975, 0, 0, 2271, 2103, 0, 0, 1127, 0,
	1127, 0, 1127, 0, 969, 969, 0, 0, 0, 0,
	0, 0, 2903, 2904, 0, 0, 0, 0, 2128, 0,
	974, 0, 0, 0, 0, 0, 2911, 581, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2286, 1340, 0, 0, 1315, 1316, 1322, 1321,
	1317, 1343, 0, 1314, 1312, 1313, 1305, 1306, 1307, 1308,
	1310, 1311, 0, 0, 0, 63, 0, 0, 0, 0,
	0, 2281, 2946, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 64, 0, 0, 0,
	2957, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 975, 0, 0, 0, 974, 0, 974, 0,
	0, 960, 0, 0, 139, 66, 0, 67, 0, 0,
	0, 0, 0, 0, 2161, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 0, 960, 110,
	0, 0, 0, 0, 0, 2282, 0, 0, 2169, 969,
	2171, 0, 0, 974, 0, 0, 974, 0, 64, 0,
	0, 175, 0, 0, 3004, 0, 0, 3007, 0, 0,
	0, 2184, 720, 974, 0, 720, 720, 0, 975, 0,
	975, 0, 0, 961, 0, 0, 139, 66, 0, 67,
	0, 0, 3020, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 0, 0, 0, 0, 173, 0, 0,
	0, 167, 0, 0, 0, 0, 0, 0, 580, 168,
	961, 110, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1824, 0, 975, 0, 0, 975, 0,
	138, 0, 0, 175, 0, 0, 733, 0, 0, 2277,
	2278, 2279, 1366, 0, 0, 975, 2276, 2274, 2275, 2267,
	2268, 2269, 2270, 2272, 2273, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3090,
	3090, 0, 0, 0, 174, 0, 0, 974, 0, 974,
	0, 0, 0, 167, 0, 0, 3107, 0, 0, 0,
	0, 168, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 3090, 0, 921, 0, 0, 0, 0,
	0, 960, 0, 0, 0, 974, 0, 0, 0, 960,
	2265, 2266, 1458, 2283, 2284, 2285, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2522, 0,
	960, 0, 0, 0, 74, 0, 0, 0, 0, 975,
	0, 975, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 960, 960, 0, 3090, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 2347, 0,
	2280, 0, 0, 0, 0, 0, 0, 74, 0, 74,
	0, 0, 0, 961, 0, 0, 0, 975, 0, 0,
	0, 961, 0, 974, 0, 0, 0, 0, 1107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 961, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 974,
	0, 0, 2403, 961, 961, 74, 0, 974, 2271, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 0, 974, 0, 0, 0, 0, 0, 0, 0,
	0, 2421, 0, 0, 0, 0, 0, 0, 0, 0,
	2430, 0, 2432, 0, 0, 975, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 960, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 975, 0, 0, 0, 2281, 0, 0, 0, 975,
	0, 0, 0, 0, 0, 974, 0, 0, 0, 0,
	0, 0, 0, 0, 975, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2507, 0, 0, 0, 0, 0, 0, 961,
	1301, 1302, 0, 1334, 1335, 1336, 1344, 1345, 1346, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1337, 2282,
	0, 0, 0, 0, 960, 1304, 0, 975, 1350, 0,
	0, 0, 0, 0, 960, 960, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1303, 0, 0, 0, 0, 0, 0, 0,
	1323, 0, 0, 0, 0, 0, 0, 1320, 974, 0,
	0, 0, 0, 0, 0, 0, 0, 1824, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1366, 0, 0,
	0, 0, 0, 0, 0, 0, 961, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 961, 961, 1326, 1327,
	1328, 1329, 0, 2277, 2278, 2279, 0, 0, 1309, 0,
	2276, 2274, 2275, 2267, 2268, 2269, 2270, 2272, 2273, 0,
	1301, 1302, 0, 1334, 1335, 1336, 1344, 1345, 1346, 0,
	975, 1341, 1351, 0, 0, 1331, 1332, 1333, 1337, 0,
	0, 0, 0, 0, 0, 1304, 0, 0, 1350, 0,
	0, 0, 0, 0, 0, 0, 1347, 1348, 0, 0,
	0, 0, 0, 0, 1318, 1319, 0, 0, 0, 0,
	0, 0, 1303, 0, 0, 0, 0, 0, 1339, 0,
	1323, 0, 0, 0, 0, 1324, 0, 1320, 0, 0,
	0, 921, 0, 0, 0, 0, 0, 0, 0, 921,
	921, 1349, 0, 921, 0, 0, 0, 0, 0, 0,
	0, 2685, 0, 0, 0, 1338, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1326, 1327,
	1328, 1329, 0, 0, 0, 0, 0, 0, 1309, 0,
	0, 0, 1330, 0, 0, 0, 74, 0, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1325,
	0, 1341, 1351, 0, 0, 1331, 1332, 1333, 0, 2731,
	0, 969, 0, 0, 0, 0, 74, 0, 74, 2734,
	0, 0, 1342, 0, 0, 0, 1347, 1348, 0, 0,
	0, 0, 0, 0, 1318, 1319, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1339, 0,
	0, 0, 0, 74, 0, 1324, 0, 0, 0, 0,
	0, 0, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 1349, 0, 0, 733, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1338, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	1340, 0, 0, 1315, 1316, 1322, 1321, 1317, 1343, 0,
	1314, 1312, 1313, 1305, 1306, 1307, 1308, 1310, 1311, 0,
	0, 0, 1330, 2768, 0, 0, 0, 2767, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1325,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1342, 1301, 1302, 0, 1334, 1335, 1336, 1344,
	1345, 1346, 0, 0, 0, 0, 0, 0, 2833, 0,
	0, 1337, 0, 1107, 0, 0, 0, 0, 1304, 0,
	0, 1350, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1303, 0, 0, 0, 0,
	0, 0, 0, 1323, 0, 0, 0, 0, 0, 0,
	1320, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1340, 0, 0, 1315, 1316, 1322, 1321, 1317, 1343, 0,
	1314, 1312, 1313, 1305, 1306, 1307, 1308, 1310, 1311, 0,
	0, 0, 0, 2251, 0, 0, 0, 2252, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1326, 1327, 1328, 1329, 74, 0, 0, 0, 0,
	0, 1309, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 921, 1301, 1302, 0, 1334, 1335, 1336,
	1344, 1345, 1346, 0, 1341, 1351, 0, 0, 1331, 1332,
	1333, 0, 1337, 0, 0, 0, 0, 0, 0, 1304,
	2930, 0, 1350, 0, 0, 0, 0, 0, 0, 1347,
	1348, 0, 0, 0, 0, 0, 0, 1318, 1319, 0,
	0, 0, 0, 0, 0, 0, 1303, 0, 0, 0,
	0, 1339, 0, 0, 1323, 0, 0, 0, 1324, 0,
	0, 1320, 0, 0, 0, 0, 2966, 0, 2968, 0,
	0, 0, 0, 0, 1349, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1338, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1326, 1327, 1328, 1329, 0, 0, 0, 0,
	0, 0, 1309, 0, 0, 1330, 921, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 0, 1325, 0, 0, 1341, 1351, 0, 0, 1331,
	1332, 1333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1342, 0, 3021, 0, 0,
	1347, 1348, 0, 0, 0, 0, 0, 0, 1318, 1319,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1339, 0, 0, 0, 3041, 0, 0, 1324,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1349, 0, 0, 0, 0,
	3058, 0, 0, 0, 0, 0, 0, 0, 0, 1338,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1340, 0, 0, 1315, 1316, 1322, 1321,
	1317, 1343, 0, 1314, 1312, 1313, 1305, 1306, 1307, 1308,
	1310, 1311, 0, 0, 0, 0, 1330, 0, 0, 0,
	2766, 0, 0, 0, 0, 0, 0, 0, 0, 921,
	0, 0, 0, 1325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1342, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 0, 0, 0, 1340, 0, 0, 1315, 1316, 1322,
	1321, 1317, 1343, 0, 1314, 1312, 1313, 1305, 1306, 1307,
	1308, 1310, 1311, 0, 0, 0, 0, 0, 0, 0,
	0, 2254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 0, 0, 0,
	972, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1824, 260, 261, 262, 263,
	977, 264, 978, 979, 980, 981, 216, 982, 983, 984,
	985, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 986, 271, 272, 273, 274, 275, 276, 277, 987,
	988, 278, 221, 222, 223, 989, 279, 224, 990, 962,
	991, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 992, 289, 0, 290, 291, 993, 856, 292, 293,
	994, 995, 997, 996, 998, 999, 1000, 294, 295, 502,
	296, 297, 298, 225, 226, 1001, 299, 1002, 300, 1003,
	301, 1004, 1005, 302, 303, 1006, 304, 305, 1007, 306,
	1008, 227, 307, 308, 310, 313, 309, 314, 315, 228,
	229, 1009, 857, 1010, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 1011, 322, 1012, 1013,
	858, 323, 1014, 324, 231, 1015, 232, 1016, 325, 326,
	327, 328, 329, 330, 233, 234, 235, 860, 1017, 239,
	332, 0, 0, 0, 1018, 331, 333, 340, 1019, 859,
	334, 236, 336, 335, 337, 338, 339, 237, 1020, 238,
	1021, 341, 861, 862, 342, 343, 344, 863, 345, 346,
	0, 0, 347, 348, 349, 1022, 351, 350, 1023, 352,
	240, 864, 353, 354, 865, 1024, 355, 356, 1025, 1026,
	357, 0, 358, 937, 936, 359, 360, 362, 363, 361,
	866, 364, 365, 367, 366, 1027, 1028, 867, 1029, 241,
	368, 242, 369, 370, 1030, 371, 372, 1031, 1032, 373,
	374, 1033, 1034, 375, 243, 868, 376, 869, 244, 377,
	378, 379, 380, 381, 382, 383, 1035, 384, 245, 385,
	246, 386, 1036, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 1037, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 1038, 407, 870, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 1039, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 1040, 432, 413, 414, 433, 871, 434,
	249, 435, 436, 1041, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 250, 1042, 447, 448, 1043,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	1044, 251, 252, 253, 457, 1045, 1046, 458, 459, 254,
	255, 1047, 460, 461, 0, 462, 463, 1048, 1049, 464,
	465, 466, 468, 1050, 469, 1051, 467, 470, 471, 472,
	256, 257, 1052, 474, 473, 258, 1053, 1054, 1055, 1056,
	475, 476, 259, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	972, 0, 0, 0, 0, 0, 1961, 0, 0, 0,
	0, 0, 0, 0, 0, 1962, 260, 261, 262, 263,
	977, 264, 978, 979, 980, 981, 216, 982, 983, 984,
	985, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 986, 271, 272, 273, 274, 275, 276, 277, 987,
	988, 278, 221, 222, 223, 989, 279, 224, 990, 962,
	991, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 992, 289, 0, 290, 291, 993, 856, 292, 293,
	994, 995, 997, 996, 998, 999, 1000, 294, 295, 502,
	296, 297, 298, 225, 226, 1001, 299, 1002, 300, 1003,
	301, 1004, 1005, 302, 303, 1006, 304, 305, 1007, 306,
	1008, 227, 307, 308, 310, 313, 309, 314, 315, 228,
	229, 1009, 857, 1010, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 1011, 322, 1012, 1013,
	858, 323, 1014, 324, 231, 1015, 232, 1016, 325, 326,
	327, 328, 329, 330, 233, 234, 235, 860, 1017, 239,
	332, 0, 0, 0, 1018, 331, 333, 340, 1019, 859,
	334, 236, 336, 335, 337, 338, 339, 237, 1020, 238,
	1021, 341, 861, 862, 342, 343, 344, 863, 345, 346,
	0, 0, 347, 348, 349, 1022, 351, 350, 1023, 352,
	240, 864, 353, 354, 865, 1024, 355, 356, 1025, 1026,
	357, 0, 358, 937, 936, 359, 360, 362, 363, 361,
	866, 364, 365, 367, 366, 1027, 1028, 867, 1029, 241,
	368, 242, 369, 370, 1030, 371, 372, 1031, 1032, 373,
	374, 1033, 1034, 375, 243, 868, 376, 869, 244, 377,
	378, 379, 380, 381, 382, 383, 1035, 384, 245, 385,
	246, 386, 1036, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 1037, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 1038, 407, 870, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 1039, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 1040, 432, 413, 414, 433, 871, 434,
	249, 435, 436, 1041, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 250, 1042, 447, 448, 1043,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	1044, 251, 252, 253, 457, 1045, 1046, 458, 459, 254,
	255, 1047, 460, 461, 0, 462, 463, 1048, 1049, 464,
	465, 466, 468, 1050, 469, 1051, 467, 470, 471, 472,
	256, 257, 1052, 474, 473, 258, 1053, 1054, 1055, 1056,
	475, 476, 259, 477, 478, 479, 0, 0, 0, 0,
	0, 972, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2790, 260, 261, 262,
	263, 977, 264, 978, 979, 980, 981, 216, 982, 983,
	984, 985, 265, 266, 267, 217, 218, 268, 219, 269,
	270, 220, 986, 271, 272, 273, 274, 275, 276, 277,
	987, 988, 278, 221, 222, 223, 989, 279, 224, 990,
	962, 991, 280, 281, 282, 283, 284, 0, 286, 287,
	288, 285, 992, 289, 0, 290, 291, 993, 856, 292,
	293, 994, 995, 997, 996, 998, 999, 1000, 294, 295,
	502, 296, 297, 298, 225, 226, 1001, 299, 1002, 300,
	1003, 301, 1004, 1005, 302, 303, 1006, 304, 305, 1007,
	306, 1008, 227, 307, 308, 310, 313, 309, 314, 315,
	228, 229, 1009, 857, 1010, 0, 0, 0, 0, 316,
	317, 318, 230, 319, 320, 0, 321, 1011, 322, 1012,
	1013, 858, 323, 1014, 324, 231, 1015, 232, 1016, 325,
	326, 327, 328, 329, 330, 233, 234, 235, 860, 1017,
	239, 332, 0, 0, 0, 1018, 331, 333, 340, 1019,
	859, 334, 236, 336, 335, 337, 338, 339, 237, 1020,
	238, 1021, 341, 861, 862, 342, 343, 344, 863, 345,
	346, 0, 0, 347, 348, 349, 1022, 351, 350, 1023,
	352, 240, 864, 353, 354, 865, 1024, 355, 356, 1025,
	1026, 357, 0, 358, 937, 936, 359, 360, 362, 363,
	361, 866, 364, 365, 367, 366, 1027, 1028, 867, 1029,
	241, 368, 242, 369, 370, 1030, 371, 372, 1031, 1032,
	373, 374, 1033, 1034, 375, 243, 868, 376, 869, 244,
	377, 378, 379, 380, 381, 382, 383, 1035, 384, 245,
	385, 246, 386, 1036, 387, 388, 389, 390, 391, 392,
	247, 393, 394, 1037, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 1038, 407, 870,
	408, 409, 410, 411, 248, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 1039, 428, 429, 423, 425, 426,
	427, 424, 430, 431, 1040, 432, 413, 414, 433, 871,
	434, 249, 435, 436, 1041, 446, 437, 438, 439, 415,
	440, 444, 445, 441, 442, 443, 250, 1042, 447, 448,
	1043, 449, 450, 451, 452, 453, 311, 454, 312, 455,
	456, 1044, 251, 252, 253, 457, 1045, 1046, 458, 459,
	254, 255, 1047, 460, 461, 0, 462, 463, 1048, 1049,
	464, 465, 466, 468, 1050, 469, 1051, 467, 470, 471,
	472, 256, 257, 1052, 474, 473, 258, 1053, 1054, 1055,
	1056, 475, 476, 259, 477, 478, 479, 972, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2899, 260, 261, 262, 263, 977, 264, 978,
	979, 980, 981, 216, 982, 983, 984, 985, 265, 266,
	267, 217, 218, 268, 219, 269, 270, 220, 986, 271,
	272, 273, 274, 275, 276, 277, 987, 988, 278, 221,
	222, 223, 989, 279, 224, 990, 962, 991, 280, 281,
	282, 283, 284, 0, 286, 287, 288, 285, 992, 289,
	0, 290, 291, 993, 856, 292, 293, 994, 995, 997,
	996, 998, 999, 1000, 294, 295, 502, 296, 297, 298,
	225, 226, 1001, 299, 1002, 300, 1003, 301, 1004, 1005,
	302, 303, 1006, 304, 305, 1007, 306, 1008, 227, 307,
	308, 310, 313, 309, 314, 315, 228, 229, 1009, 857,
	1010, 0, 0, 0, 0, 316, 317, 318, 230, 319,
	320, 0, 321, 1011, 322, 1012, 1013, 858, 323, 1014,
	324, 231, 1015, 232, 1016, 325, 326, 327, 328, 329,
	330, 233, 234, 235, 860, 1017, 239, 332, 0, 0,
	0, 1018, 331, 333, 340, 1019, 859, 334, 236, 336,
	335, 337, 338, 339, 237, 1020, 238, 1021, 341, 861,
	862, 342, 343, 344, 863, 345, 346, 0, 0, 347,
	348, 349, 1022, 351, 350, 1023, 352, 240, 864, 353,
	354, 865, 1024, 355, 356, 1025, 1026, 357, 0, 358,
	937, 936, 359, 360, 362, 363, 361, 866, 364, 365,
	367, 366, 1027, 1028, 867, 1029, 241, 368, 242, 369,
	370, 1030, 371, 372, 1031, 1032, 373, 374, 1033, 1034,
	375, 243, 868, 376, 869, 244, 377, 378, 379, 380,
	381, 382, 383, 1035, 384, 245, 385, 246, 386, 1036,
	387, 388, 389, 390, 391, 392, 247, 393, 394, 1037,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 1038, 407, 870, 408, 409, 410, 411,
	248, 412, 0, 416, 417, 418, 419, 420, 421, 422,
	1039, 428, 429, 423, 425, 426, 427, 424, 430, 431,
	1040, 432, 413, 414, 433, 871, 434, 249, 435, 436,
	1041, 446, 437, 438, 439, 415, 440, 444, 445, 441,
	442, 443, 250, 1042, 447, 448, 1043, 449, 450, 451,
	452, 453, 311, 454, 312, 455, 456, 1044, 251, 252,
	253, 457, 1045, 1046, 458, 459, 254, 255, 1047, 460,
	461, 0, 462, 463, 1048, 1049, 464, 465, 466, 468,
	1050, 469, 1051, 467, 470, 471, 472, 256, 257, 1052,
	474, 473, 258, 1053, 1054, 1055, 1056, 475, 476, 259,
	477, 478, 479, 972, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2550, 260,
	261, 262, 263, 977, 264, 978, 979, 980, 981, 216,
	982, 983, 984, 985, 265, 266, 267, 217, 218, 268,
	219, 269, 270, 220, 986, 271, 272, 273, 274, 275,
	276, 277, 987, 988, 278, 221, 222, 223, 989, 279,
	224, 990, 962, 991, 280, 281, 282, 283, 284, 0,
	286, 287, 288, 285, 992, 289, 0, 290, 291, 993,
	856, 292, 293, 994, 995, 997, 996, 998, 999, 1000,
	294, 295, 502, 296, 297, 298, 225, 226, 1001, 299,
	1002, 300, 1003, 301, 1004, 1005, 302, 303, 1006, 304,
	305, 1007, 306, 1008, 227, 307, 308, 310, 313, 309,
	314, 315, 228, 229, 1009, 857, 1010, 0, 0, 0,
	0, 316, 317, 318, 230, 319, 320, 0, 321, 1011,
	322, 1012, 1013, 858, 323, 1014, 324, 231, 1015, 232,
	1016, 325, 326, 327, 328, 329, 330, 233, 234, 235,
	860, 1017, 239, 332, 0, 0, 0, 1018, 331, 333,
	340, 1019, 859, 334, 236, 336, 335, 337, 338, 339,
	237, 1020, 238, 1021, 341, 861, 862, 342, 343, 344,
	863, 345, 346, 0, 0, 347, 348, 349, 1022, 351,
	350, 1023, 352, 240, 864, 353, 354, 865, 1024, 355,
	356, 1025, 1026, 357, 0, 358, 937, 936, 359, 360,
	362, 363, 361, 866, 364, 365, 367, 366, 1027, 1028,
	867, 1029, 241, 368, 242, 369, 370, 1030, 371, 372,
	1031, 1032, 373, 374, 1033, 1034, 375, 243, 868, 376,
	869, 244, 377, 378, 379, 380, 381, 382, 383, 1035,
	384, 245, 385, 246, 386, 1036, 387, 388, 389, 390,
	391, 392, 247, 393, 394, 1037, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 1038,
	407, 870, 408, 409, 410, 411, 248, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 1039, 428, 429, 423,
	425, 426, 427, 424, 430, 431, 1040, 432, 413, 414,
	433, 871, 434, 249, 435, 436, 1041, 446, 437, 438,
	439, 415, 440, 444, 445, 441, 442, 443, 250, 1042,
	447, 448, 1043, 449, 450, 451, 452, 453, 311, 454,
	312, 455, 456, 1044, 251, 252, 253, 457, 1045, 1046,
	458, 459, 254, 255, 1047, 460, 461, 0, 462, 463,
	1048, 1049, 464, 465, 466, 468, 1050, 469, 1051, 467,
	470, 471, 472, 256, 257, 1052, 474, 473, 258, 1053,
	1054, 1055, 1056, 475, 476, 259, 477, 478, 479, 972,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2527, 260, 261, 262, 263, 977,
	264, 978, 979, 980, 981, 216, 982, 983, 984, 985,
	265, 266, 267, 217, 218, 268, 219, 269, 270, 220,
	986, 271, 272, 273, 274, 275, 276, 277, 987, 988,
	278, 221, 222, 223, 989, 279, 224, 990, 962, 991,
	280, 281, 282, 283, 284, 0, 286, 287, 288, 285,
	992, 289, 0, 290, 291, 993, 856, 292, 293, 994,
	995, 997, 996, 998, 999, 1000, 294, 295, 502, 296,
	297, 298, 225, 226, 1001, 299, 1002, 300, 1003, 301,
	1004, 1005, 302, 303, 1006, 304, 305, 1007, 306, 1008,
	227, 307, 308, 310, 313, 309, 314, 315, 228, 229,
	1009, 857, 1010, 0, 0, 0, 0, 316, 317, 318,
	230, 319, 320, 0, 321, 1011, 322, 1012, 1013, 858,
	323, 1014, 324, 231, 1015, 232, 1016, 325, 326, 327,
	328, 329, 330, 233, 234, 235, 860, 1017, 239, 332,
	0, 0, 0, 1018, 331, 333, 340, 1019, 859, 334,
	236, 336, 335, 337, 338, 339, 237, 1020, 238, 1021,
	341, 861, 862, 342, 343, 344, 863, 345, 346, 0,
	0, 347, 348, 349, 1022, 351, 350, 1023, 352, 240,
	864, 353, 354, 865, 1024, 355, 356, 1025, 1026, 357,
	0, 358, 937, 936, 359, 360, 362, 363, 361, 866,
	364, 365, 367, 366, 1027, 1028, 867, 1029, 241, 368,
	242, 369, 370, 1030, 371, 372, 1031, 1032, 373, 374,
	1033, 1034, 375, 243, 868, 376, 869, 244, 377, 378,
	379, 380, 381, 382, 383, 1035, 384, 245, 385, 246,
	386, 1036, 387, 388, 389, 390, 391, 392, 247, 393,
	394, 1037, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 1038, 407, 870, 408, 409,
	410, 411, 248, 412, 0, 416, 417, 418, 419, 420,
	421, 422, 1039, 428, 429, 423, 425, 426, 427, 424,
	430, 431, 1040, 432, 413, 414, 433, 871, 434, 249,
	435, 436, 1041, 446, 437, 438, 439, 415, 440, 444,
	445, 441, 442, 443, 250, 1042, 447, 448, 1043, 449,
	450, 451, 452, 453, 311, 454, 312, 455, 456, 1044,
	251, 252, 253, 457, 1045, 1046, 458, 459, 254, 255,
	1047, 460, 461, 0, 462, 463, 1048, 1049, 464, 465,
	466, 468, 1050, 469, 1051, 467, 470, 471, 472, 256,
	257, 1052, 474, 473, 258, 1053, 1054, 1055, 1056, 475,
	476, 259, 477, 478, 479, 972, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2407, 260, 261, 262, 263, 977, 264, 978, 979, 980,
	981, 216, 982, 983, 984, 985, 265, 266, 267, 217,
	218, 268, 219, 269, 270, 220, 986, 271, 272, 273,
	274, 275, 276, 277, 987, 988, 278, 221, 222, 223,
	989, 279, 224, 990, 962, 991, 280, 281, 282, 283,
	284, 0, 286, 287, 288, 285, 992, 289, 0, 290,
	291, 993, 856, 292, 293, 994, 995, 997, 996, 998,
	999, 1000, 294, 295, 502, 296, 297, 298, 225, 226,
	1001, 299, 1002, 300, 1003, 301, 1004, 1005, 302, 303,
	1006, 304, 305, 1007, 306, 1008, 227, 307, 308, 310,
	313, 309, 314, 315, 228, 229, 1009, 857, 1010, 0,
	0, 0, 0, 316, 317, 318, 230, 319, 320, 0,
	321, 1011, 322, 1012, 1013, 858, 323, 1014, 324, 231,
	1015, 232, 1016, 325, 326, 327, 328, 329, 330, 233,
	234, 235, 860, 1017, 239, 332, 0, 0, 0, 1018,
	331, 333, 340, 1019, 859, 334, 236, 336, 335, 337,
	338, 339, 237, 1020, 238, 1021, 341, 861, 862, 342,
	343, 344, 863, 345, 346, 0, 0, 347, 348, 349,
	1022, 351, 350, 1023, 352, 240, 864, 353, 354, 865,
	1024, 355, 356, 1025, 1026, 357, 0, 358, 937, 936,
	359, 360, 362, 363, 361, 866, 364, 365, 367, 366,
	1027, 1028, 867, 1029, 241, 368, 242, 369, 370, 1030,
	371, 372, 1031, 1032, 373, 374, 1033, 1034, 375, 243,
	868, 376, 869, 244, 377, 378, 379, 380, 381, 382,
	383, 1035, 384, 245, 385, 246, 386, 1036, 387, 388,
	389, 390, 391, 392, 247, 393, 394, 1037, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 1038, 407, 870, 408, 409, 410, 411, 248, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 1039, 428,
	429, 423, 425, 426, 427, 424, 430, 431, 1040, 432,
	413, 414, 433, 871, 434, 249, 435, 436, 1041, 446,
	437, 438, 439, 415, 440, 444, 445, 441, 442, 443,
	250, 1042, 447, 448, 1043, 449, 450, 451, 452, 453,
	311, 454, 312, 455, 456, 1044, 251, 252, 253, 457,
	1045, 1046, 458, 459, 254, 255, 1047, 460, 461, 0,
	462, 463, 1048, 1049, 464, 465, 466, 468, 1050, 469,
	1051, 467, 470, 471, 472, 256, 257, 1052, 474, 473,
	258, 1053, 1054, 1055, 1056, 475, 476, 259, 477, 478,
	479, 972, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1864, 260, 261, 262,
	263, 977, 264, 978, 979, 980, 981, 216, 982, 983,
	984, 985, 265, 266, 267, 217, 218, 268, 219, 269,
	270, 220, 986, 271, 272, 273, 274, 275, 276, 277,
	987, 988, 278, 221, 222, 223, 989, 279, 224, 990,
	962, 991, 280, 281, 282, 283, 284, 0, 286, 287,
	288, 285, 992, 289, 0, 290, 291, 993, 856, 292,
	293, 994, 995, 997, 996, 998, 999, 1000, 294, 295,
	502, 296, 297, 298, 225, 226, 1001, 299, 1002, 300,
	1003, 301, 1004, 1005, 302, 303, 1006, 304, 305, 1007,
	306, 1008, 227, 307, 308, 310, 313, 309, 314, 315,
	228, 229, 1009, 857, 1010, 0, 0, 0, 0, 316,
	317, 318, 230, 319, 320, 0, 321, 1011, 322, 1012,
	1013, 858, 323, 1014, 324, 231, 1015, 232, 1016, 325,
	326, 327, 328, 329, 330, 233, 234, 235, 860, 1017,
	239, 332, 0, 0, 0, 1018, 331, 333, 340, 1019,
	859, 334, 236, 336, 335, 337, 338, 339, 237, 1020,
	238, 1021, 341, 861, 862, 342, 343, 344, 863, 345,
	346, 0, 0, 347, 348, 349, 1022, 351, 350, 1023,
	352, 240, 864, 353, 354, 865, 1024, 355, 356, 1025,
	1026, 357, 0, 358, 937, 936, 359, 360, 362, 363,
	361, 866, 364, 365, 367, 366, 1027, 1028, 867, 1029,
	241, 368, 242, 369, 370, 1030, 371, 372, 1031, 1032,
	373, 374, 1033, 1034, 375, 243, 868, 376, 869, 244,
	377, 378, 379, 380, 381, 382, 383, 1035, 384, 245,
	385, 246, 386, 1036, 387, 388, 389, 390, 391, 392,
	247, 393, 394, 1037, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 1038, 407, 870,
	408, 409, 410, 411, 248, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 1039, 428, 429, 423, 425, 426,
	427, 424, 430, 431, 1040, 432, 413, 414, 433, 871,
	434, 249, 435, 436, 1041, 446, 437, 438, 439, 415,
	440, 444, 445, 441, 442, 443, 250, 1042, 447, 448,
	1043, 449, 450, 451, 452, 453, 311, 454, 312, 455,
	456, 1044, 251, 252, 253, 457, 1045, 1046, 458, 459,
	254, 255, 1047, 460, 461, 0, 462, 463, 1048, 1049,
	464, 465, 466, 468, 1050, 469, 1051, 467, 470, 471,
	472, 256, 257, 1052, 474, 473, 258, 1053, 1054, 1055,
	1056, 475, 476, 259, 477, 478, 479, 972, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1523, 260, 261, 262, 263, 977, 264, 978,
	979, 980, 981, 216, 982, 983, 984, 985, 265, 266,
	267, 217, 218, 268, 219, 269, 270, 220, 986, 271,
	272, 273, 274, 275, 276, 277, 987, 988, 278, 221,
	222, 223, 989, 279, 224, 990, 962, 991, 280, 281,
	282, 283, 284, 0, 286, 287, 288, 285, 992, 289,
	0, 290, 291, 993, 856, 292, 293, 994, 995, 997,
	996, 998, 999, 1000, 294, 295, 502, 296, 297, 298,
	225, 226, 1001, 299, 1002, 300, 1003, 301, 1004, 1005,
	302, 303, 1006, 304, 305, 1007, 306, 1008, 227, 307,
	308, 310, 313, 309, 314, 315, 228, 229, 1009, 857,
	1010, 0, 0, 0, 0, 316, 317, 318, 230, 319,
	320, 0, 321, 1011, 322, 1012, 1013, 858, 323, 1014,
	324, 231, 1015, 232, 1016, 325, 326, 327, 328, 329,
	330, 233, 234, 235, 860, 1017, 239, 332, 0, 0,
	0, 1018, 331, 333, 340, 1019, 859, 334, 236, 336,
	335, 337, 338, 339, 237, 1020, 238, 1021, 341, 861,
	862, 342, 343, 344, 863, 345, 346, 0, 0, 347,
	348, 349, 1022, 351, 350, 1023, 352, 240, 864, 353,
	354, 865, 1024, 355, 356, 1025, 1026, 357, 0, 358,
	937, 936, 359, 360, 362, 363, 361, 866, 364, 365,
	367, 366, 1027, 1028, 867, 1029, 241, 368, 242, 369,
	370, 1030, 371, 372, 1031, 1032, 373, 374, 1033, 1034,
	375, 243, 868, 376, 869, 244, 377, 378, 379, 380,
	381, 382, 383, 1035, 384, 245, 385, 246, 386, 1036,
	387, 388, 389, 390, 391, 392, 247, 393, 394, 1037,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 1038, 407, 870, 408, 409, 410, 411,
	248, 412, 0, 416, 417, 418, 419, 420, 421, 422,
	1039, 428, 429, 423, 425, 426, 427, 424, 430, 431,
	1040, 432, 413, 414, 433, 871, 434, 249, 435, 436,
	1041, 446, 437, 438, 439, 415, 440, 444, 445, 441,
	442, 443, 250, 1042, 447, 448, 1043, 449, 450, 451,
	452, 453, 311, 454, 312, 455, 456, 1044, 251, 252,
	253, 457, 1045, 1046, 458, 459, 254, 255, 1047, 460,
	461, 0, 462, 463, 1048, 1049, 464, 465, 466, 468,
	1050, 469, 1051, 467, 470, 471, 472, 256, 257, 1052,
	474, 473, 258, 1053, 1054, 1055, 1056, 475, 476, 259,
	477, 478, 479, 1847, 0, 801, 762, 763, 760, 761,
	773, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 260, 261, 262, 263, 1844, 264, 0, 0, 0,
	0, 847, 776, 0, 0, 0, 265, 266, 267, 217,
	816, 797, 827, 785, 826, 825, 0, 271, 272, 787,
	786, 275, 276, 277, 777, 846, 278, 873, 872, 223,
	0, 279, 853, 0, 836, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 288, 285, 0, 289, 0, 290,
	291, 0, 856, 292, 293, 839, 837, 838, 843, 841,
	840, 842, 294, 295, 502, 296, 829, 298, 823, 822,
	752, 299, 0, 300, 0, 301, 1845, 0, 821, 303,
	0, 304, 305, 0, 306, 0, 757, 307, 308, 310,
	313, 309, 314, 315, 875, 876, 769, 857, 0, 0,
	0, 0, 0, 316, 317, 318, 820, 818, 819, 0,
	321, 0, 322, 0, 0, 858, 323, 0, 324, 877,
	0, 232, 0, 325, 326, 327, 328, 329, 330, 848,
	849, 852, 860, 0, 850, 796, 0, 0, 0, 0,
	331, 333, 340, 0, 859, 334, 809, 800, 810, 811,
	812, 813, 814, 0, 802, 0, 341, 861, 862, 342,
	343, 344, 863, 834, 835, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 878, 864, 353, 354, 865,
	0, 355, 356, 0, 0, 357, 0, 358, 754, 753,
	359, 360, 362, 789, 361, 866, 364, 365, 367, 366,
	749, 0, 867, 770, 851, 368, 824, 369, 370, 0,
	798, 799, 0, 0, 373, 374, 0, 0, 375, 243,
	868, 376, 869, 879, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 880, 385, 246, 386, 0, 387, 388,
	389, 390, 391, 392, 817, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 870, 408, 409, 410, 411, 758, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 790, 791, 792, 793, 424, 430, 431, 844, 432,
	413, 414, 433, 871, 434, 815, 794, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 855, 441, 442, 443,
	881, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 788, 456, 0, 830, 831, 832, 833,
	0, 0, 458, 459, 882, 883, 768, 460, 461, 0,
	462, 463, 0, 0, 464, 465, 466, 468, 845, 469,
	0, 795, 470, 471, 472, 256, 874, 1843, 474, 473,
	258, 0, 0, 0, 0, 475, 476, 259, 477, 478,
	479, 750, 0, 0, 0, 0, 0, 0, 0, 748,
	0, 0, 0, 0, 746, 747, 1846, 0, 0, 0,
	0, 0, 0, 759, 1842, 0, 0, 0, 734, 772,
	801, 762, 763, 760, 761, 773, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 847, 776, 0, 0,
	0, 265, 266, 267, 217, 816, 797, 827, 785, 826,
	825, 0, 271, 272, 787, 786, 275, 276, 277, 777,
	846, 278, 873, 872, 223, 0, 279, 853, 0, 836,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 856, 292, 293,
	839, 837, 838, 843, 841, 840, 842, 294, 295, 502,
	296, 829, 298, 823, 822, 752, 299, 0, 300, 0,
	301, 0, 0, 821, 303, 0, 304, 305, 0, 306,
	0, 757, 307, 308, 310, 313, 309, 314, 315, 875,
	876, 769, 857, 0, 0, 0, 0, 0, 316, 317,
	318, 820, 818, 819, 0, 321, 0, 322, 0, 0,
	858, 323, 0, 324, 877, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 848, 849, 852, 860, 0, 850,
	796, 0, 0, 0, 0, 331, 333, 340, 0, 859,
	334, 809, 800, 810, 811, 812, 813, 814, 0, 802,
	0, 341, 861, 862, 342, 343, 344, 863, 834, 835,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	878, 864, 353, 354, 865, 0, 355, 356, 0, 0,
	357, 0, 358, 754, 753, 359, 360, 362, 789, 361,
	866, 364, 365, 367, 366, 749, 0, 867, 770, 851,
	368, 824, 369, 370, 0, 798, 799, 0, 0, 373,
	374, 0, 0, 375, 243, 868, 376, 869, 879, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 880, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 817,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 870, 408,
	409, 410, 411, 758, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 173, 428, 429, 790, 791, 792, 793,
	424, 430, 431, 844, 432, 413, 414, 433, 871, 434,
	815, 794, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 855, 441, 442, 443, 881, 0, 447, 448, 175,
	449, 450, 451, 452, 453, 311, 454, 312, 788, 456,
	0, 830, 831, 832, 833, 0, 0, 458, 459, 882,
	883, 768, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 845, 469, 0, 795, 470, 471, 472,
	1154, 874, 0, 474, 473, 258, 0, 0, 0, 167,
	475, 476, 259, 477, 478, 479, 750, 168, 0, 0,
	0, 0, 0, 0, 748, 0, 0, 0, 0, 746,
	747, 801, 762, 763, 760, 761, 773, 0, 1370, 0,
	0, 0, 0, 0, 772, 0, 0, 260, 261, 262,
	263, 0, 264, 0, 0, 0, 0, 847, 776, 0,
	0, 0, 265, 266, 267, 217, 816, 797, 827, 785,
	826, 825, 0, 271, 272, 787, 786, 275, 276, 277,
	777, 846, 278, 873, 872, 223, 0, 279, 853, 0,
	836, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	288, 285, 0, 289, 0, 290, 291, 0, 856, 292,
	293, 839, 837, 838, 843, 841, 840, 842, 294, 295,
	502, 296, 829, 298, 823, 822, 752, 299, 0, 300,
	0, 301, 0, 0, 821, 303, 0, 304, 305, 0,
	306, 0, 757, 307, 308, 310, 313, 309, 314, 315,
	875, 876, 769, 857, 0, 0, 0, 0, 0, 316,
	317, 318, 820, 818, 819, 0, 321, 0, 322, 0,
	0, 858, 323, 0, 324, 877, 0, 232, 0, 325,
	326, 327, 328, 329, 330, 848, 849, 852, 860, 0,
	850, 796, 0, 0, 0, 0, 331, 333, 340, 0,
	859, 334, 809, 800, 810, 811, 812, 813, 814, 0,
	802, 0, 341, 861, 862, 342, 343, 344, 863, 834,
	835, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 878, 864, 353, 354, 865, 0, 355, 356, 0,
	0, 357, 0, 358, 754, 753, 359, 360, 362, 789,
	361, 866, 364, 365, 367, 366, 749, 0, 867, 770,
	851, 368, 824, 369, 370, 0, 798, 799, 0, 0,
	373, 374, 0, 0, 375, 243, 868, 376, 869, 879,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 880,
	385, 246, 386, 0, 387, 388, 389, 390, 391, 392,
	817, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 870,
	408, 409, 410, 411, 758, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 173, 428, 429, 790, 791, 792,
	793, 424, 430, 431, 844, 432, 413, 414, 433, 871,
	434, 815, 794, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 855, 441, 442, 443, 881, 0, 447, 448,
	175, 449, 450, 451, 452, 453, 311, 454, 312, 788,
	456, 0, 830, 831, 832, 833, 0, 0, 458, 459,
	882, 883, 768, 460, 461, 0, 462, 463, 0, 0,
	464, 465, 466, 468, 845, 469, 0, 795, 470, 471,
	472, 1154, 874, 0, 474, 473, 258, 0, 0, 0,
	167, 475, 476, 259, 477, 478, 479, 750, 168, 0,
	0, 0, 0, 0, 0, 748, 0, 0, 0, 0,
	746, 747, 801, 762, 763, 760, 761, 773, 0, 1370,
	0, 0, 0, 0, 0, 772, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 847, 776,
	0, 0, 0, 265, 266, 267, 217, 816, 797, 827,
	785, 826, 825, 1926, 271, 272, 787, 786, 275, 276,
	277, 777, 846, 278, 873, 872, 223, 0, 279, 853,
	0, 836, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 856,
	292, 293, 839, 837, 838, 843, 841, 840, 842, 294,
	295, 502, 296, 829, 298, 823, 822, 752, 299, 0,
	300, 0, 301, 0, 0, 821, 303, 0, 304, 305,
	0, 306, 0, 757, 307, 308, 310, 313, 309, 314,
	315, 875, 876, 769, 857, 0, 0, 0, 0, 0,
	316, 317, 318, 820, 818, 819, 0, 321, 0, 322,
	0, 1931, 858, 323, 0, 324, 877, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 848, 849, 852, 860,
	0, 850, 796, 0, 0, 0, 0, 331, 333, 340,
	0, 859, 334, 809, 800, 810, 811, 812, 813, 814,
	0, 802, 0, 341, 861, 862, 342, 343, 344, 863,
	834, 835, 0, 0, 347, 348, 349, 0, 351, 350,
	1927, 352, 878, 864, 353, 354, 865, 0, 355, 356,
	0, 0, 357, 0, 358, 754, 753, 359, 360, 362,
	789, 361, 866, 364, 365, 367, 366, 749, 0, 867,
	770, 851, 368, 824, 369, 370, 0, 798, 799, 0,
	0, 373, 374, 0, 0, 375, 243, 868, 376, 869,
	879, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	880, 385, 246, 386, 0, 387, 388, 389, 390, 391,
	392, 817, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	870, 408, 409, 410, 411, 758, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 0, 428, 429, 790, 791,
	792, 793, 424, 430, 431, 844, 432, 413, 414, 433,
	871, 434, 815, 794, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 855, 441, 442, 443, 881, 0, 447,
	448, 0, 449, 450, 451, 452, 453, 311, 454, 312,
	788, 456, 0, 830, 831, 832, 833, 0, 1928, 458,
	459, 882, 883, 768, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 845, 469, 0, 795, 470,
	471, 472, 256, 874, 0, 474, 473, 258, 0, 0,
	0, 0, 475, 476, 259, 477, 478, 479, 750, 0,
	0, 0, 0, 0, 0, 0, 748, 0, 0, 0,
	0, 746, 747, 801, 762, 763, 760, 761, 773, 0,
	759, 0, 0, 0, 0, 0, 772, 0, 0, 260,
	261, 262, 263, 0, 264, 0, 0, 0, 0, 847,
	776, 0, 0, 0, 265, 266, 267, 217, 816, 797,
	827, 785, 826, 825, 0, 271, 272, 787, 786, 275,
	276, 277, 777, 846, 278, 873, 872, 223, 0, 279,
	853, 0, 836, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 288, 285, 0, 289, 0, 290, 291, 0,
	856, 292, 293, 839, 837, 838, 843, 841, 840, 842,
	294, 295, 502, 296, 829, 298, 823, 822, 752, 299,
	0, 300, 0, 301, 0, 0, 821, 303, 0, 304,
	305, 0, 306, 0, 757, 307, 308, 310, 313, 309,
	314, 315, 875, 876, 769, 857, 0, 0, 0, 0,
	0, 316, 317, 318, 820, 818, 819, 0, 321, 0,
	322, 0, 0, 858, 323, 0, 324, 877, 0, 232,
	0, 325, 326, 327, 328, 329, 330, 848, 849, 852,
	860, 0, 850, 796, 0, 0, 0, 0, 331, 333,
	340, 0, 859, 334, 809, 800, 810, 811, 812, 813,
	814, 0, 802, 0, 341, 861, 862, 342, 343, 344,
	863, 834, 835, 0, 0, 347, 348, 349, 0, 351,
	350, 0, 352, 878, 864, 353, 354, 865, 0, 355,
	356, 0, 0, 357, 0, 358, 754, 753, 359, 360,
	362, 789, 361, 866, 364, 365, 367, 366, 749, 2702,
	867, 770, 851, 368, 824, 369, 370, 0, 798, 799,
	0, 0, 373, 374, 0, 0, 375, 243, 868, 376,
	869, 879, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 880, 385, 246, 386, 0, 387, 388, 389, 390,
	391, 392, 817, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 870, 408, 409, 410, 411, 758, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 0, 428, 429, 790,
	791, 792, 793, 424, 430, 431, 844, 432, 413, 414,
	433, 871, 434, 815, 794, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 855, 441, 442, 443, 881, 0,
	447, 448, 0, 449, 450, 451, 452, 453, 311, 454,
	312, 788, 456, 0, 830, 831, 832, 833, 0, 0,
	458, 459, 882, 883, 768, 460, 461, 0, 462, 463,
	0, 0, 464, 465, 466, 468, 845, 469, 0, 795,
	470, 471, 472, 256, 874, 0, 474, 473, 258, 0,
	0, 0, 0, 475, 476, 259, 477, 478, 479, 750,
	0, 0, 0, 0, 0, 0, 0, 748, 0, 0,
	0, 0, 746, 747, 1435, 801, 762, 763, 760, 761,
	773, 759, 0, 0, 0, 0, 0, 772, 0, 0,
	0, 260, 261, 262, 263, 0, 264, 0, 0, 0,
	0, 847, 776, 0, 0, 0, 265, 266, 267, 217,
	816, 797, 827, 785, 826, 825, 0, 271, 272, 787,
	786, 275, 276, 277, 777, 846, 278, 873, 872, 223,
	0, 279, 853, 0, 836, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 288, 285, 0, 289, 0, 290,
	291, 0, 856, 292, 293, 839, 837, 838, 843, 841,
	840, 842, 294, 295, 502, 296, 829, 298, 823, 822,
	752, 299, 0, 300, 0, 301, 0, 0, 821, 303,
	0, 304, 305, 0, 306, 0, 757, 307, 308, 310,
	313, 309, 314, 315, 875, 876, 769, 857, 0, 0,
	0, 0, 0, 316, 317, 318, 820, 818, 819, 0,
	321, 0, 322, 0, 0, 858, 323, 0, 324, 877,
	0, 232, 0, 325, 326, 327, 328, 329, 330, 848,
	849, 852, 860, 0, 850, 796, 0, 0, 0, 1752,
	331, 333, 340, 0, 859, 334, 809, 800, 810, 811,
	812, 813, 814, 0, 802, 0, 341, 861, 862, 342,
	343, 344, 863, 834, 835, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 878, 864, 353, 354, 865,
	0, 355, 356, 0, 0, 357, 0, 358, 754, 753,
	359, 360, 362, 789, 361, 866, 364, 365, 367, 366,
	749, 0, 867, 770, 851, 368, 824, 369, 370, 0,
	798, 799, 0, 0, 373, 374, 0, 0, 375, 243,
	868, 376, 869, 879, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 880, 385, 246, 386, 1751, 387, 388,
	389, 390, 391, 392, 817, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 870, 408, 409, 410, 411, 758, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 790, 791, 792, 793, 424, 430, 431, 844, 432,
	413, 414, 433, 871, 434, 815, 794, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 855, 441, 442, 443,
	881, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 788, 456, 0, 830, 831, 832, 833,
	0, 0, 458, 459, 882, 883, 768, 460, 461, 0,
	462, 463, 0, 0, 464, 465, 466, 468, 845, 469,
	0, 795, 470, 471, 472, 256, 874, 0, 474, 473,
	258, 0, 0, 0, 0, 475, 476, 259, 477, 478,
	479, 750, 0, 0, 0, 0, 0, 0, 0, 748,
	0, 0, 0, 0, 746, 747, 0, 0, 0, 0,
	0, 0, 0, 759, 0, 0, 0, 0, 742, 772,
	801, 762, 763, 760, 761, 773, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 847, 776, 0, 0,
	0, 265, 266, 267, 217, 816, 797, 827, 785, 826,
	825, 0, 271, 272, 787, 786, 275, 276, 277, 777,
	846, 278, 873, 872, 223, 0, 279, 853, 0, 836,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 856, 292, 293,
	839, 837, 838, 843, 841, 840, 842, 294, 295, 502,
	296, 829, 298, 823, 822, 752, 299, 0, 300, 0,
	301, 0, 0, 821, 303, 0, 304, 305, 0, 306,
	0, 757, 307, 308, 310, 313, 309, 314, 315, 875,
	876, 769, 857, 0, 0, 0, 0, 0, 316, 317,
	318, 820, 818, 819, 0, 321, 0, 322, 0, 0,
	858, 323, 0, 324, 877, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 848, 849, 852, 860, 0, 850,
	796, 0, 0, 0, 0, 331, 333, 340, 0, 859,
	334, 809, 800, 810, 811, 812, 813, 814, 0, 802,
	0, 341, 861, 862, 342, 343, 344, 863, 834, 835,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	878, 864, 353, 354, 865, 0, 355, 356, 0, 0,
	357, 0, 358, 754, 753, 359, 360, 362, 789, 361,
	866, 364, 365, 367, 366, 749, 0, 867, 770, 851,
	368, 824, 369, 370, 0, 798, 799, 744, 0, 373,
	374, 0, 0, 375, 243, 868, 376, 869, 879, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 880, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 817,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 870, 408,
	409, 410, 411, 758, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 790, 791, 792, 793,
	424, 430, 431, 844, 432, 413, 414, 433, 871, 434,
	815, 794, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 855, 441, 442, 443, 881, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 788, 456,
	0, 830, 831, 832, 833, 0, 0, 458, 459, 882,
	883, 768, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 845, 469, 0, 795, 470, 471, 472,
	256, 874, 0, 474, 473, 258, 0, 0, 0, 0,
	475, 476, 259, 477, 478, 479, 750, 0, 0, 0,
	0, 0, 0, 0, 748, 0, 0, 0, 0, 746,
	747, 801, 762, 763, 760, 761, 773, 0, 759, 0,
	0, 0, 0, 0, 772, 0, 0, 260, 261, 262,
	263, 0, 264, 0, 0, 0, 0, 847, 776, 0,
	0, 0, 265, 266, 267, 217, 816, 797, 827, 785,
	826, 825, 0, 271, 272, 787, 786, 275, 276, 277,
	777, 846, 278, 873, 872, 223, 0, 279, 853, 0,
	836, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	288, 285, 0, 289, 0, 290, 291, 0, 856, 292,
	293, 839, 837, 838, 843, 841, 840, 842, 294, 295,
	502, 296, 829, 298, 823, 822, 752, 299, 0, 300,
	0, 301, 0, 0, 821, 303, 0, 304, 305, 0,
	306, 0, 757, 307, 308, 310, 313, 309, 314, 315,
	875, 876, 769, 857, 0, 0, 0, 0, 0, 316,
	317, 318, 820, 818, 819, 0, 321, 0, 322, 0,
	0, 858, 323, 0, 324, 877, 0, 232, 0, 325,
	326, 327, 328, 329, 330, 848, 849, 852, 860, 0,
	850, 796, 0, 0, 0, 0, 331, 333, 340, 0,
	859, 334, 809, 800, 810, 811, 812, 813, 814, 0,
	802, 0, 341, 861, 862, 342, 343, 344, 863, 834,
	835, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 878, 864, 353, 354, 865, 0, 355, 356, 0,
	0, 357, 0, 358, 754, 753, 359, 360, 362, 789,
	361, 866, 364, 365, 367, 366, 749, 0, 867, 770,
	851, 368, 824, 369, 370, 0, 798, 799, 0, 0,
	373, 374, 0, 0, 375, 243, 868, 376, 869, 879,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 880,
	385, 246, 386, 0, 387, 388, 389, 390, 391, 392,
	817, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 870,
	408, 409, 410, 411, 758, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 790, 791, 792,
	793, 424, 430, 431, 844, 432, 413, 414, 433, 871,
	434, 815, 794, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 855, 441, 442, 443, 881, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 788,
	456, 0, 830, 831, 832, 833, 0, 0, 458, 459,
	882, 883, 768, 460, 461, 0, 462, 463, 0, 0,
	464, 465, 466, 468, 845, 469, 0, 795, 470, 471,
	472, 256, 874, 2532, 474, 473, 258, 0, 0, 0,
	0, 475, 476, 259, 477, 478, 479, 750, 0, 0,
	0, 0, 0, 0, 0, 748, 0, 0, 0, 0,
	746, 747, 801, 762, 763, 760, 761, 773, 0, 759,
	0, 0, 0, 0, 0, 772, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 847, 776,
	0, 0, 0, 265, 266, 267, 217, 816, 797, 827,
	785, 826, 825, 0, 271, 272, 787, 786, 275, 276,
	277, 777, 846, 278, 873, 872, 223, 0, 279, 853,
	0, 836, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 856,
	292, 293, 839, 837, 838, 843, 841, 840, 842, 294,
	295, 502, 296, 829, 298, 823, 822, 752, 299, 0,
	300, 0, 301, 0, 0, 821, 303, 0, 304, 305,
	0, 306, 0, 757, 307, 308, 310, 313, 309, 314,
	315, 875, 876, 769, 857, 0, 0, 0, 0, 0,
	316, 317, 318, 820, 818, 819, 0, 321, 0, 322,
	0, 0, 858, 323, 0, 324, 877, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 848, 849, 852, 860,
	0, 850, 796, 0, 0, 0, 0, 331, 333, 340,
	0, 859, 334, 809, 800, 810, 811, 812, 813, 814,
	0, 802, 0, 341, 861, 862, 342, 343, 344, 863,
	834, 835, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 878, 864, 353, 354, 865, 0, 355, 356,
	0, 0, 357, 0, 358, 754, 753, 359, 360, 362,
	789, 361, 866, 364, 365, 367, 366, 749, 0, 867,
	770, 851, 368, 824, 369, 370, 0, 798, 799, 744,
	0, 373, 374, 0, 0, 375, 243, 868, 376, 869,
	879, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	880, 385, 246, 386, 0, 387, 388, 389, 390, 391,
	392, 817, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	870, 408, 409, 410, 411, 758, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 0, 428, 429, 790, 791,
	792, 793, 424, 430, 431, 844, 432, 413, 414, 433,
	871, 434, 815, 794, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 855, 441, 442, 443, 881, 0, 447,
	448, 0, 449, 450, 451, 452, 453, 311, 454, 312,
	788, 456, 0, 830, 831, 832, 833, 0, 0, 458,
	459, 882, 883, 768, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 845, 469, 0, 795, 470,
	471, 472, 256, 874, 0, 474, 473, 258, 0, 0,
	0, 0, 475, 476, 259, 477, 478, 479, 750, 0,
	0, 0, 0, 0, 0, 0, 748, 0, 0, 0,
	0, 746, 747, 801, 762, 763, 760, 761, 773, 0,
	759, 0, 0, 0, 0, 0, 772, 0, 0, 260,
	261, 262, 263, 0, 264, 0, 0, 0, 0, 847,
	776, 0, 0, 0, 265, 266, 267, 217, 816, 797,
	827, 785, 826, 825, 0, 271, 272, 787, 786, 275,
	276, 277, 777, 846, 278, 873, 872, 223, 0, 279,
	853, 0, 836, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 288, 285, 0, 289, 0, 290, 291, 0,
	856, 292, 293, 839, 837, 838, 843, 841, 840, 842,
	294, 295, 502, 296, 829, 298, 823, 822, 752, 299,
	0, 300, 0, 301, 0, 0, 821, 303, 0, 304,
	305, 0, 306, 0, 757, 307, 308, 310, 313, 309,
	314, 315, 875, 876, 769, 857, 0, 0, 0, 0,
	0, 316, 317, 318, 820, 818, 819, 0, 321, 0,
	322, 0, 0, 858, 323, 0, 324, 877, 0, 232,
	0, 325, 326, 327, 328, 329, 330, 848, 849, 852,
	860, 0, 850, 796, 0, 0, 0, 0, 331, 333,
	340, 0, 859, 334, 809, 800, 810, 811, 812, 813,
	814, 0, 802, 0, 341, 861, 862, 342, 343, 344,
	863, 834, 835, 0, 0, 347, 348, 349, 0, 351,
	350, 0, 352, 878, 864, 353, 354, 865, 0, 355,
	356, 0, 0, 357, 0, 358, 754, 753, 359, 360,
	362, 789, 361, 866, 364, 365, 367, 366, 749, 0,
	867, 770, 851, 368, 824, 369, 370, 0, 798, 799,
	0, 0, 373, 374, 0, 0, 375, 243, 868, 376,
	869, 879, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 880, 385, 246, 386, 0, 387, 388, 389, 390,
	391, 392, 817, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 870, 408, 409, 410, 411, 758, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 0, 428, 429, 790,
	791, 792, 793, 424, 430, 431, 844, 432, 413, 414,
	433, 871, 434, 815, 794, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 855, 441, 442, 443, 881, 0,
	447, 448, 0, 449, 450, 451, 452, 453, 311, 454,
	312, 788, 456, 0, 830, 831, 832, 833, 0, 0,
	458, 459, 882, 883, 768, 460, 461, 0, 462, 463,
	0, 0, 464, 465, 466, 468, 845, 469, 0, 795,
	470, 471, 472, 256, 874, 0, 474, 473, 258, 0,
	0, 0, 0, 475, 476, 259, 477, 478, 479, 750,
	0, 0, 0, 0, 0, 0, 0, 748, 0, 0,
	0, 0, 746, 747, 1435, 801, 762, 763, 760, 761,
	773, 759, 0, 0, 0, 0, 0, 772, 0, 0,
	0, 260, 261, 262, 263, 0, 264, 0, 0, 0,
	0, 847, 776, 0, 0, 0, 265, 266, 267, 217,
	816, 797, 827, 785, 826, 825, 0, 271, 272, 787,
	786, 275, 276, 277, 777, 846, 278, 873, 872, 223,
	0, 279, 853, 0, 836, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 288, 285, 0, 289, 0, 290,
	291, 0, 856, 292, 293, 839, 837, 838, 843, 841,
	840, 842, 294, 295, 502, 296, 829, 298, 823, 822,
	752, 299, 0, 300, 0, 301, 0, 0, 821, 303,
	0, 304, 305, 0, 306, 0, 757, 307, 308, 310,
	313, 309, 314, 315, 875, 876, 769, 857, 0, 0,
	0, 0, 0, 316, 317, 318, 820, 818, 819, 0,
	321, 0, 322, 0, 1931, 858, 323, 0, 324, 877,
	0, 232, 0, 325, 326, 327, 328, 329, 330, 848,
	849, 852, 860, 0, 850, 796, 0, 0, 0, 0,
	331, 333, 340, 0, 859, 334, 809, 800, 810, 811,
	812, 813, 814, 0, 802, 0, 341, 861, 862, 342,
	343, 344, 863, 834, 835, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 878, 864, 353, 354, 865,
	0, 355, 356, 0, 0, 357, 0, 358, 754, 753,
	359, 360, 362, 789, 361, 866, 364, 365, 367, 366,
	749, 0, 867, 770, 851, 368, 824, 369, 370, 0,
	798, 799, 0, 0, 373, 374, 0, 0, 375, 243,
	868, 376, 869, 879, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 880, 385, 246, 386, 0, 387, 388,
	389, 390, 391, 392, 817, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 870, 408, 409, 410, 411, 758, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 790, 791, 792, 793, 424, 430, 431, 844, 432,
	413, 414, 433, 871, 434, 815, 794, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 855, 441, 442, 443,
	881, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 788, 456, 0, 830, 831, 832, 833,
	0, 0, 458, 459, 882, 883, 768, 460, 461, 0,
	462, 463, 0, 0, 464, 465, 466, 468, 845, 469,
	0, 795, 470, 471, 472, 256, 874, 0, 474, 473,
	258, 0, 0, 0, 0, 475, 476, 259, 477, 478,
	479, 750, 0, 0, 0, 0, 0, 0, 0, 748,
	0, 0, 0, 0, 746, 747, 0, 0, 0, 0,
	0, 0, 0, 759, 0, 0, 0, 0, 1922, 772,
	801, 762, 763, 760, 761, 773, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 847, 776, 0, 0,
	0, 265, 266, 267, 217, 816, 797, 827, 785, 826,
	825, 0, 271, 272, 787, 786, 275, 276, 277, 777,
	846, 278, 873, 872, 223, 0, 279, 853, 0, 836,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 856, 292, 293,
	839, 837, 838, 843, 841, 840, 842, 294, 295, 502,
	296, 829, 298, 823, 822, 752, 299, 0, 300, 0,
	301, 0, 0, 821, 303, 0, 304, 305, 0, 306,
	0, 757, 307, 308, 310, 313, 309, 314, 315, 875,
	876, 769, 857, 0, 0, 0, 0, 0, 316, 317,
	318, 820, 818, 819, 0, 321, 0, 322, 0, 0,
	858, 323, 0, 324, 877, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 848, 849, 852, 860, 0, 850,
	796, 0, 0, 0, 0, 331, 333, 340, 0, 859,
	334, 809, 800, 810, 811, 812, 813, 814, 0, 802,
	0, 341, 861, 862, 342, 343, 344, 863, 834, 835,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	878, 864, 353, 354, 865, 0, 355, 356, 0, 0,
	357, 0, 358, 754, 753, 359, 360, 362, 789, 361,
	866, 364, 365, 367, 366, 749, 0, 867, 770, 851,
	368, 824, 369, 370, 0, 798, 799, 0, 0, 373,
	374, 0, 0, 375, 243, 868, 376, 869, 879, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 880, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 817,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 870, 408,
	409, 410, 411, 758, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 790, 791, 792, 793,
	424, 430, 431, 844, 432, 413, 414, 433, 871, 434,
	815, 794, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 855, 441, 442, 443, 881, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 788, 456,
	0, 830, 831, 832, 833, 0, 0, 458, 459, 882,
	883, 768, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 845, 469, 0, 795, 470, 471, 472,
	256, 874, 0, 474, 473, 258, 0, 0, 0, 0,
	475, 476, 259, 477, 478, 479, 750, 0, 0, 0,
	0, 0, 0, 0, 748, 0, 0, 0, 0, 746,
	747, 0, 0, 0, 0, 0, 0, 0, 759, 0,
	0, 0, 0, 1911, 772, 801, 762, 763, 760, 761,
	773, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 260, 261, 262, 263, 0, 264, 0, 0, 0,
	0, 847, 776, 0, 0, 0, 265, 266, 267, 217,
	816, 797, 827, 785, 826, 825, 0, 271, 272, 787,
	786, 275, 276, 277, 777, 846, 278, 873, 872, 223,
	0, 279, 853, 0, 836, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 288, 285, 0, 289, 0, 290,
	291, 0, 856, 292, 293, 839, 837, 838, 843, 841,
	840, 842, 294, 295, 502, 296, 829, 298, 823, 822,
	752, 299, 0, 300, 0, 301, 0, 0, 821, 303,
	0, 304, 305, 0, 306, 0, 757, 307, 308, 310,
	313, 309, 314, 315, 875, 876, 769, 857, 0, 0,
	0, 0, 0, 316, 317, 318, 820, 818, 819, 0,
	321, 0, 322, 0, 0, 858, 323, 0, 324, 877,
	0, 232, 0, 325, 326, 327, 328, 329, 330, 848,
	849, 852, 860, 0, 850, 796, 0, 0, 0, 0,
	331, 333, 340, 0, 859, 334, 809, 800, 810, 811,
	812, 813, 814, 0, 802, 0, 341, 861, 862, 342,
	343, 344, 863, 834, 835, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 878, 864, 353, 354, 865,
	0, 355, 356, 0, 0, 357, 0, 358, 754, 753,
	359, 360, 362, 789, 361, 866, 364, 365, 367, 366,
	749, 0, 867, 770, 851, 368, 824, 369, 370, 0,
	798, 799, 0, 0, 373, 374, 0, 0, 375, 243,
	868, 376, 869, 879, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 880, 385, 246, 386, 0, 387, 388,
	389, 390, 391, 392, 817, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 870, 408, 409, 410, 411, 758, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 790, 791, 792, 793, 424, 430, 431, 844, 432,
	413, 414, 433, 871, 434, 815, 794, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 855, 441, 442, 443,
	881, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 788, 456, 0, 830, 831, 832, 833,
	0, 0, 458, 459, 882, 883, 768, 460, 461, 0,
	462, 463, 0, 0, 464, 465, 466, 468, 845, 469,
	0, 795, 470, 471, 472, 256, 874, 0, 474, 473,
	258, 0, 0, 0, 0, 475, 476, 259, 477, 478,
	479, 750, 0, 0, 0, 0, 0, 0, 0, 748,
	0, 0, 0, 0, 746, 747, 0, 0, 0, 0,
	0, 0, 0, 759, 0, 0, 0, 0, 1909, 772,
	801, 762, 763, 760, 761, 773, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 847, 776, 0, 0,
	0, 265, 266, 267, 217, 816, 797, 827, 785, 826,
	825, 0, 271, 272, 787, 786, 275, 276, 277, 777,
	846, 278, 873, 872, 223, 0, 279, 853, 0, 836,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 856, 292, 293,
	839, 837, 838, 843, 841, 840, 842, 294, 295, 502,
	296, 829, 298, 823, 822, 752, 299, 0, 300, 0,
	301, 0, 0, 821, 303, 0, 304, 305, 0, 306,
	0, 757, 307, 308, 310, 313, 309, 314, 315, 875,
	876, 769, 857, 0, 0, 0, 0, 0, 316, 317,
	318, 820, 818, 819, 0, 321, 0, 322, 0, 0,
	858, 323, 0, 324, 877, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 848, 849, 852, 860, 0, 850,
	796, 0, 0, 0, 0, 331, 333, 340, 0, 859,
	334, 809, 800, 810, 811, 812, 813, 814, 0, 802,
	0, 341, 861, 862, 342, 343, 344, 863, 834, 835,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	878, 864, 353, 354, 865, 0, 355, 356, 0, 0,
	357, 0, 358, 754, 753, 359, 360, 362, 789, 361,
	866, 364, 365, 367, 366, 749, 0, 867, 770, 851,
	368, 824, 369, 370, 0, 798, 799, 0, 0, 373,
	374, 0, 0, 375, 243, 868, 376, 869, 879, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 880, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 817,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 870, 408,
	409, 410, 411, 758, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 790, 791, 792, 793,
	424, 430, 431, 844, 432, 413, 414, 433, 871, 434,
	815, 794, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 855, 441, 442, 443, 881, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 788, 456,
	0, 830, 831, 832, 833, 0, 0, 458, 459, 882,
	883, 768, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 845, 469, 0, 795, 470, 471, 472,
	256, 874, 0, 474, 473, 258, 0, 0, 0, 0,
	475, 476, 259, 477, 478, 479, 750, 0, 0, 0,
	0, 0, 0, 0, 748, 0, 0, 0, 0, 746,
	747, 0, 0, 0, 0, 0, 0, 0, 759, 0,
	0, 0, 0, 1907, 772, 801, 762, 763, 760, 761,
	773, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 260, 261, 262, 263, 0, 264, 0, 0, 0,
	0, 847, 776, 0, 0, 0, 265, 266, 267, 217,
	816, 797, 827, 785, 826, 825, 0, 271, 272, 787,
	786, 275, 276, 277, 777, 846, 278, 873, 872, 223,
	0, 279, 853, 0, 836, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 288, 285, 0, 289, 0, 290,
	291, 0, 856, 292, 293, 839, 837, 838, 843, 841,
	840, 842, 294, 295, 502, 296, 829, 298, 823, 822,
	752, 299, 0, 300, 0, 301, 0, 0, 821, 303,
	0, 304, 305, 0, 306, 0, 757, 307, 308, 310,
	313, 309, 314, 315, 875, 876, 769, 857, 0, 0,
	0, 0, 0, 316, 317, 318, 820, 818, 819, 0,
	321, 0, 322, 0, 0, 858, 323, 0, 324, 877,
	0, 232, 0, 325, 326, 327, 328, 329, 330, 848,
	849, 852, 860, 0, 850, 796, 0, 0, 0, 0,
	331, 333, 340, 0, 859, 334, 809, 800, 810, 811,
	812, 813, 814, 0, 802, 0, 341, 861, 862, 342,
	343, 344, 863, 834, 835, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 878, 864, 353, 354, 865,
	0, 355, 356, 0, 0, 357, 0, 358, 754, 753,
	359, 360, 362, 789, 361, 866, 364, 365, 367, 366,
	749, 0, 867, 770, 851, 368, 824, 369, 370, 0,
	798, 799, 0, 0, 373, 374, 0, 0, 375, 243,
	868, 376, 869, 879, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 880, 385, 246, 386, 0, 387, 388,
	389, 390, 391, 392, 817, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 870, 408, 409, 410, 411, 758, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 790, 791, 792, 793, 424, 430, 431, 844, 432,
	413, 414, 433, 871, 434, 815, 794, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 855, 441, 442, 443,
	881, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 788, 456, 0, 830, 831, 832, 833,
	0, 0, 458, 459, 882, 883, 768, 460, 461, 0,
	462, 463, 0, 0, 464, 465, 466, 468, 845, 469,
	0, 795, 470, 471, 472, 256, 874, 0, 474, 473,
	258, 0, 0, 0, 0, 475, 476, 259, 477, 478,
	479, 750, 0, 0, 0, 0, 0, 0, 0, 748,
	0, 0, 0, 0, 746, 747, 0, 0, 0, 0,
	0, 0, 0, 759, 0, 0, 0, 0, 1905, 772,
	1897, 762, 763, 760, 761, 773, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 847, 776, 0, 0,
	0, 265, 266, 267, 217, 816, 797, 827, 785, 826,
	825, 0, 271, 272, 787, 786, 275, 276, 277, 777,
	846, 278, 873, 872, 223, 0, 279, 853, 0, 836,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 856, 292, 293,
	839, 837, 838, 843, 841, 840, 842, 294, 295, 502,
	296, 829, 1900, 823, 822, 752, 299, 0, 300, 0,
	301, 0, 0, 821, 303, 0, 304, 305, 0, 306,
	0, 757, 307, 308, 310, 313, 309, 314, 315, 875,
	876, 769, 857, 0, 0, 0, 0, 0, 316, 317,
	318, 820, 818, 819, 0, 321, 0, 322, 0, 0,
	858, 323, 0, 324, 877, 0, 232, 0, 325, 326,
	1901, 328, 329, 330, 848, 849, 852, 860, 0, 850,
	796, 0, 0, 0, 0, 331, 333, 340, 0, 859,
	334, 809, 800, 810, 811, 812, 813, 814, 0, 802,
	0, 341, 861, 862, 342, 343, 344, 863, 834, 835,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	878, 864, 353, 354, 865, 0, 355, 356, 0, 0,
	357, 0, 358, 754, 753, 1902, 1899, 362, 789, 361,
	866, 364, 365, 367, 366, 749, 0, 867, 770, 851,
	368, 824, 369, 370, 0, 798, 799, 0, 0, 373,
	374, 0, 0, 375, 243, 868, 376, 869, 879, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 880, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 817,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 870, 408,
	409, 410, 411, 758, 412, 0, 416, 417, 418, 419,
	420, 421, 1903, 0, 428, 429, 790, 791, 792, 793,
	424, 430, 431, 844, 432, 413, 414, 433, 871, 434,
	815, 794, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 855, 441, 442, 443, 881, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 788, 456,
	0, 830, 831, 832, 833, 0, 0, 458, 459, 882,
	883, 768, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 845, 469, 0, 795, 470, 471, 472,
	256, 874, 0, 474, 473, 258, 0, 0, 0, 0,
	475, 476, 259, 477, 1898, 479, 750, 0, 0, 0,
	0, 0, 0, 0, 748, 0, 0, 0, 0, 746,
	747, 0, 0, 0, 0, 0, 0, 0, 759, 0,
	0, 0, 0, 1894, 772, 1897, 762, 763, 760, 761,
	773, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 260, 261, 262, 263, 0, 264, 0, 0, 0,
	0, 847, 776, 0, 0, 0, 265, 266, 267, 217,
	816, 797, 827, 785, 826, 825, 0, 271, 272, 787,
	786, 275, 276, 277, 777, 846, 278, 873, 872, 223,
	0, 279, 853, 0, 836, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 288, 285, 0, 289, 0, 290,
	291, 0, 856, 292, 293, 839, 837, 838, 843, 841,
	840, 842, 294, 295, 502, 296, 829, 1900, 823, 822,
	752, 299, 0, 300, 0, 301, 0, 0, 821, 303,
	0, 304, 305, 0, 306, 0, 757, 307, 308, 310,
	313, 309, 314, 315, 875, 876, 769, 857, 0, 0,
	0, 0, 0, 316, 317, 318, 820, 818, 819, 0,
	321, 0, 322, 0, 0, 858, 323, 0, 324, 877,
	0, 232, 0, 325, 326, 1901, 328, 329, 330, 848,
	849, 852, 860, 0, 850, 796, 0, 0, 0, 0,
	331, 333, 340, 0, 859, 334, 809, 800, 810, 811,
	812, 813, 814, 0, 802, 0, 341, 861, 862, 342,
	343, 344, 863, 834, 835, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 878, 864, 353, 354, 865,
	0, 355, 356, 0, 0, 357, 0, 358, 754, 753,
	1902, 1899, 362, 789, 361, 866, 364, 365, 367, 366,
	749, 0, 867, 770, 851, 368, 824, 369, 370, 0,
	798, 799, 0, 0, 373, 374, 0, 0, 375, 243,
	868, 376, 869, 879, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 880, 385, 246, 386, 0, 387, 388,
	389, 390, 391, 392, 817, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 870, 408, 409, 410, 411, 758, 412,
	0, 416, 417, 418, 419, 420, 421, 1903, 0, 428,
	429, 790, 791, 792, 793, 424, 430, 431, 844, 432,
	413, 414, 433, 871, 434, 815, 794, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 855, 441, 442, 443,
	881, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 788, 456, 0, 830, 831, 832, 833,
	0, 0, 458, 459, 882, 883, 768, 460, 461, 0,
	462, 463, 0, 0, 464, 465, 466, 468, 845, 469,
	0, 795, 470, 471, 472, 256, 874, 0, 474, 473,
	258, 0, 0, 0, 0, 475, 476, 259, 477, 1898,
	479, 750, 0, 0, 0, 0, 0, 0, 0, 748,
	0, 0, 0, 0, 746, 747, 801, 762, 763, 760,
	761, 773, 0, 759, 0, 0, 0, 0, 0, 772,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 847, 776, 0, 0, 0, 265, 266, 267,
	217, 816, 797, 827, 785, 826, 825, 0, 271, 272,
	787, 786, 275, 276, 277, 777, 846, 278, 873, 872,
	223, 0, 279, 853, 0, 836, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 856, 292, 293, 839, 837, 838, 843,
	841, 840, 842, 294, 295, 502, 296, 829, 298, 823,
	822, 752, 299, 0, 300, 0, 301, 0, 0, 821,
	303, 0, 304, 305, 0, 306, 0, 757, 307, 308,
	310, 313, 309, 314, 315, 875, 876, 769, 857, 0,
	0, 0, 0, 0, 316, 317, 318, 820, 818, 819,
	0, 321, 0, 322, 0, 0, 858, 323, 0, 324,
	877, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	848, 849, 852, 860, 0, 850, 796, 0, 0, 0,
	0, 331, 333, 340, 0, 859, 334, 809, 800, 810,
	811, 812, 813, 814, 0, 802, 0, 341, 861, 862,
	342, 343, 344, 863, 834, 835, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 878, 864, 353, 354,
	865, 0, 355, 356, 0, 0, 357, 0, 358, 754,
	753, 359, 360, 362, 789, 361, 866, 364, 365, 367,
	366, 749, 0, 867, 770, 851, 368, 824, 369, 370,
	0, 798, 799, 0, 0, 373, 374, 0, 0, 375,
	243, 868, 376, 869, 879, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 880, 385, 246, 386, 0, 387,
	388, 389, 390, 391, 392, 817, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 870, 408, 409, 410, 411, 758,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 790, 791, 792, 793, 424, 430, 431, 844,
	432, 413, 414, 433, 871, 434, 815, 794, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 855, 441, 442,
	443, 881, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 788, 456, 0, 830, 831, 832,
	833, 0, 0, 458, 459, 882, 883, 768, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 845,
	469, 0, 795, 470, 471, 472, 256, 874, 0, 474,
	473, 258, 0, 0, 0, 0, 475, 476, 259, 477,
	478, 479, 750, 0, 0, 0, 0, 0, 0, 0,
	748, 0, 0, 0, 0, 746, 747, 0, 0, 0,
	0, 0, 1379, 0, 759, 0, 0, 0, 0, 0,
	772, 801, 762, 763, 760, 761, 773, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 260, 261, 262,
	263, 1739, 264, 0, 0, 0, 0, 847, 776, 0,
	0, 0, 265, 266, 267, 217, 816, 797, 827, 785,
	826, 825, 0, 271, 272, 787, 786, 275, 276, 277,
	777, 846, 278, 873, 872, 223, 0, 279, 853, 0,
	836, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	288, 285, 0, 289, 0, 290, 291, 0, 856, 292,
	293, 839, 837, 838, 843, 841, 840, 842, 294, 295,
	502, 296, 829, 298, 823, 822, 752, 299, 0, 300,
	0, 301, 0, 0, 821, 303, 0, 304, 305, 0,
	306, 0, 757, 307, 308, 310, 313, 309, 314, 315,
	875, 876, 769, 857, 0, 0, 0, 0, 0, 316,
	317, 318, 820, 818, 819, 0, 321, 0, 322, 0,
	0, 858, 323, 0, 324, 877, 0, 232, 0, 325,
	326, 327, 328, 329, 330, 848, 849, 852, 860, 0,
	850, 796, 0, 0, 0, 0, 331, 333, 340, 0,
	859, 334, 809, 800, 810, 811, 812, 813, 814, 0,
	802, 0, 341, 861, 862, 342, 343, 344, 863, 834,
	835, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 878, 864, 353, 354, 865, 0, 355, 356, 0,
	0, 357, 0, 358, 754, 753, 359, 360, 362, 789,
	361, 866, 364, 365, 367, 366, 749, 0, 867, 770,
	851, 368, 824, 369, 370, 0, 798, 799, 0, 0,
	373, 374, 0, 0, 375, 243, 868, 376, 869, 879,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 880,
	385, 246, 386, 0, 387, 388, 389, 390, 391, 392,
	817, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 870,
	408, 409, 410, 411, 758, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 790, 791, 792,
	793, 424, 430, 431, 844, 432, 413, 414, 433, 871,
	434, 815, 794, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 855, 441, 442, 443, 881, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 788,
	456, 0, 830, 831, 832, 833, 0, 0, 458, 459,
	882, 883, 768, 460, 461, 0, 462, 463, 0, 0,
	464, 465, 466, 468, 845, 469, 0, 795, 470, 471,
	472, 256, 874, 0, 474, 473, 258, 0, 0, 0,
	0, 475, 476, 259, 477, 478, 479, 750, 0, 0,
	0, 0, 0, 0, 0, 748, 0, 0, 0, 0,
	746, 747, 0, 0, 0, 0, 0, 0, 0, 759,
	0, 0, 0, 0, 1079, 772, 801, 762, 763, 760,
	761, 773, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 847, 776, 0, 0, 0, 265, 266, 267,
	217, 816, 797, 827, 785, 826, 825, 0, 271, 272,
	787, 786, 275, 276, 277, 777, 846, 278, 873, 872,
	223, 0, 279, 853, 0, 836, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 856, 292, 293, 839, 837, 838, 843,
	841, 840, 842, 294, 295, 502, 296, 829, 298, 823,
	822, 752, 299, 0, 300, 0, 301, 0, 0, 821,
	303, 0, 304, 305, 0, 306, 0, 757, 307, 308,
	310, 313, 309, 314, 315, 875, 876, 769, 857, 0,
	0, 0, 0, 0, 316, 317, 318, 820, 818, 819,
	0, 321, 0, 322, 0, 0, 858, 323, 0, 324,
	877, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	1078, 849, 852, 860, 0, 850, 796, 0, 0, 0,
	0, 331, 333, 340, 0, 859, 334, 809, 800, 810,
	811, 812, 813, 814, 0, 802, 0, 341, 861, 862,
	342, 343, 344, 863, 834, 835, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 878, 864, 353, 354,
	865, 0, 355, 356, 0, 0, 357, 0, 358, 754,
	753, 359, 360, 362, 789, 361, 866, 364, 365, 367,
	366, 749, 0, 867, 770, 851, 368, 824, 369, 370,
	0, 798, 799, 0, 0, 373, 374, 0, 0, 375,
	243, 868, 376, 869, 879, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 880, 385, 246, 386, 0, 387,
	388, 389, 390, 391, 392, 817, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 870, 408, 409, 410, 411, 758,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 790, 791, 792, 793, 424, 430, 431, 844,
	432, 413, 414, 433, 871, 434, 815, 794, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 855, 441, 442,
	443, 881, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 788, 456, 0, 830, 831, 832,
	833, 0, 0, 458, 459, 882, 883, 768, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 845,
	469, 0, 795, 470, 471, 472, 256, 874, 0, 474,
	473, 258, 0, 0, 0, 0, 475, 476, 259, 477,
	478, 479, 750, 0, 0, 0, 0, 0, 0, 0,
	748, 0, 0, 0, 0, 746, 747, 0, 0, 0,
	0, 0, 0, 0, 759, 0, 0, 0, 0, 1073,
	772, 801, 762, 763, 760, 761, 773, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 260, 261, 262,
	263, 0, 264, 0, 0, 0, 0, 847, 776, 0,
	0, 0, 265, 266, 267, 217, 816, 797, 827, 785,
	826, 825, 0, 271, 272, 787, 786, 275, 276, 277,
	777, 846, 278, 873, 872, 223, 0, 279, 853, 0,
	836, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	288, 285, 0, 289, 0, 290, 291, 0, 856, 292,
	293, 839, 837, 838, 843, 841, 840, 842, 294, 295,
	502, 296, 829, 298, 823, 822, 752, 299, 0, 300,
	0, 301, 0, 0, 821, 303, 0, 304, 305, 0,
	306, 0, 757, 307, 308, 310, 313, 309, 314, 315,
	875, 876, 769, 857, 0, 0, 0, 0, 0, 316,
	317, 318, 820, 818, 819, 0, 321, 0, 322, 0,
	0, 858, 323, 0, 324, 877, 0, 232, 0, 325,
	326, 327, 328, 329, 330, 1072, 849, 852, 860, 0,
	850, 796, 0, 0, 0, 0, 331, 333, 340, 0,
	859, 334, 809, 800, 810, 811, 812, 813, 814, 0,
	802, 0, 341, 861, 862, 342, 343, 344, 863, 834,
	835, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 878, 864, 353, 354, 865, 0, 355, 356, 0,
	0, 357, 0, 358, 754, 753, 359, 360, 362, 789,
	361, 866, 364, 365, 367, 366, 749, 0, 867, 770,
	851, 368, 824, 369, 370, 0, 798, 799, 0, 0,
	373, 374, 0, 0, 375, 243, 868, 376, 869, 879,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 880,
	385, 246, 386, 0, 387, 388, 389, 390, 391, 392,
	817, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 870,
	408, 409, 410, 411, 758, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 790, 791, 792,
	793, 424, 430, 431, 844, 432, 413, 414, 433, 871,
	434, 815, 794, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 855, 441, 442, 443, 881, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 788,
	456, 0, 830, 831, 832, 833, 0, 0, 458, 459,
	882, 883, 768, 460, 461, 0, 462, 463, 0, 0,
	464, 465, 466, 468, 845, 469, 0, 795, 470, 471,
	472, 256, 874, 0, 474, 473, 258, 0, 0, 0,
	0, 475, 476, 259, 477, 478, 479, 750, 0, 0,
	0, 0, 0, 0, 0, 748, 0, 0, 0, 0,
	746, 747, 0, 0, 0, 0, 0, 0, 0, 759,
	0, 0, 0, 0, 1068, 772, 801, 762, 763, 760,
	761, 773, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 847, 776, 0, 0, 0, 265, 266, 267,
	217, 816, 797, 827, 785, 826, 825, 0, 271, 272,
	787, 786, 275, 276, 277, 777, 846, 278, 873, 872,
	223, 0, 279, 853, 0, 836, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 856, 292, 293, 839, 837, 838, 843,
	841, 840, 842, 294, 295, 502, 296, 829, 298, 823,
	822, 752, 299, 0, 300, 0, 301, 0, 0, 821,
	303, 0, 304, 305, 0, 306, 0, 757, 307, 308,
	310, 313, 309, 314, 315, 875, 876, 769, 857, 0,
	0, 0, 0, 0, 316, 317, 318, 820, 818, 819,
	0, 321, 0, 322, 0, 0, 858, 323, 0, 324,
	877, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	848, 849, 852, 860, 0, 850, 796, 0, 0, 0,
	0, 331, 333, 340, 0, 859, 334, 809, 800, 810,
	811, 812, 813, 814, 0, 802, 0, 341, 861, 862,
	342, 343, 344, 863, 834, 835, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 878, 864, 353, 354,
	865, 0, 355, 356, 0, 0, 357, 0, 358, 754,
	753, 359, 360, 362, 789, 361, 866, 364, 365, 367,
	366, 749, 0, 867, 770, 851, 368, 824, 369, 370,
	0, 798, 799, 0, 0, 373, 374, 0, 0, 375,
	243, 868, 376, 869, 879, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 880, 385, 246, 386, 0, 387,
	388, 389, 390, 391, 392, 817, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 870, 408, 409, 410, 411, 758,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 790, 791, 792, 793, 424, 430, 431, 844,
	432, 413, 414, 433, 871, 434, 815, 794, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 855, 441, 442,
	443, 881, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 788, 456, 0, 830, 831, 832,
	833, 0, 0, 458, 459, 882, 883, 768, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 845,
	469, 0, 795, 470, 471, 472, 256, 874, 0, 474,
	473, 258, 0, 0, 0, 0, 475, 476, 259, 477,
	478, 479, 750, 0, 0, 0, 0, 0, 0, 0,
	748, 0, 0, 0, 0, 746, 747, 801, 762, 763,
	760, 761, 773, 0, 759, 0, 0, 0, 0, 0,
	772, 0, 0, 260, 261, 262, 263, 0, 264, 0,
	0, 0, 0, 847, 776, 0, 0, 0, 265, 266,
	267, 217, 816, 797, 827, 785, 826, 825, 0, 271,
	272, 787, 786, 275, 276, 277, 777, 846, 278, 873,
	872, 223, 0, 279, 853, 0, 836, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 288, 285, 0, 289,
	0, 290, 291, 0, 856, 292, 293, 839, 837, 838,
	843, 841, 840, 842, 294, 295, 502, 296, 829, 298,
	823, 822, 752, 299, 0, 300, 0, 301, 0, 0,
	821, 303, 0, 304, 305, 0, 306, 0, 757, 307,
	308, 310, 313, 309, 314, 315, 875, 876, 769, 857,
	0, 0, 0, 0, 0, 316, 317, 318, 820, 818,
	819, 0, 321, 0, 322, 0, 0, 858, 323, 0,
	324, 877, 0, 232, 0, 325, 326, 327, 328, 329,
	330, 848, 849, 852, 860, 0, 850, 796, 0, 0,
	0, 0, 331, 333, 340, 0, 859, 334, 809, 800,
	810, 811, 812, 813, 814, 0, 802, 0, 341, 861,
	862, 342, 343, 344, 863, 834, 835, 0, 0, 347,
	348, 349, 0, 351, 350, 0, 352, 878, 864, 353,
	354, 865, 0, 355, 356, 0, 0, 357, 0, 358,
	754, 753, 359, 360, 362, 789, 361, 866, 364, 365,
	367, 366, 749, 0, 867, 770, 851, 368, 824, 369,
	370, 0, 798, 799, 0, 0, 373, 374, 0, 0,
	375, 243, 868, 376, 869, 879, 377, 378, 379, 380,
	381, 382, 383, 0, 384, 880, 385, 246, 386, 0,
	387, 388, 389, 390, 391, 392, 817, 393, 394, 0,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 0, 407, 870, 408, 409, 410, 411,
	758, 412, 0, 416, 417, 418, 419, 420, 421, 422,
	0, 428, 429, 790, 791, 792, 793, 424, 430, 431,
	844, 432, 413, 414, 433, 871, 434, 815, 794, 436,
	0, 446, 437, 438, 439, 415, 440, 444, 855, 441,
	442, 443, 881, 0, 447, 448, 0, 449, 450, 451,
	452, 453, 311, 454, 312, 788, 456, 0, 830, 831,
	832, 833, 0, 0, 458, 459, 882, 883, 768, 460,
	461, 0, 462, 463, 0, 0, 464, 465, 466, 468,
	845, 469, 0, 795, 470, 471, 472, 256, 874, 0,
	474, 473, 258, 0, 0, 0, 0, 475, 476, 259,
	477, 478, 479, 750, 0, 0, 0, 0, 0, 0,
	0, 748, 0, 0, 0, 0, 746, 747, 801, 762,
	763, 760, 761, 773, 0, 759, 0, 0, 0, 0,
	0, 772, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 847, 776, 0, 0, 0, 265,
	266, 267, 217, 816, 797, 827, 785, 826, 825, 0,
	271, 272, 787, 786, 275, 276, 277, 777, 846, 278,
	873, 872, 223, 0, 279, 853, 0, 836, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 856, 292, 3089, 839, 837,
	838, 843, 841, 840, 842, 294, 295, 502, 296, 829,
	298, 823, 822, 752, 299, 0, 300, 0, 301, 0,
	0, 821, 303, 0, 304, 305, 0, 306, 0, 757,
	307, 308, 310, 313, 309, 314, 315, 875, 876, 769,
	857, 0, 0, 0, 0, 0, 316, 317, 318, 820,
	818, 819, 0, 321, 0, 322, 0, 0, 858, 323,
	0, 324, 877, 0, 232, 0, 325, 326, 327, 328,
	329, 330, 848, 849, 852, 860, 0, 850, 796, 0,
	0, 0, 0, 331, 333, 340, 0, 859, 334, 809,
	800, 810, 811, 812, 813, 814, 0, 802, 0, 341,
	861, 862, 342, 343, 344, 863, 834, 835, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 878, 864,
	353, 354, 865, 0, 355, 356, 0, 0, 357, 0,
	358, 754, 753, 359, 360, 362, 789, 361, 866, 364,
	365, 367, 366, 749, 0, 867, 770, 851, 368, 824,
	369, 370, 0, 798, 799, 0, 0, 373, 374, 0,
	0, 375, 243, 868, 376, 869, 879, 377, 378, 379,
	380, 381, 382, 383, 0, 384, 880, 385, 246, 386,
	0, 387, 388, 389, 390, 391, 392, 817, 393, 394,
	0, 395, 396, 397, 398, 399, 0, 401, 402, 400,
	403, 404, 405, 406, 0, 407, 870, 408, 409, 410,
	411, 758, 412, 0, 416, 417, 418, 419, 420, 421,
	422, 0, 428, 429, 790, 791, 792, 793, 424, 430,
	431, 844, 432, 413, 414, 433, 871, 434, 815, 794,
	436, 0, 446, 437, 438, 439, 415, 440, 444, 855,
	441, 442, 443, 881, 0, 447, 448, 0, 449, 450,
	451, 452, 453, 311, 454, 312, 788, 456, 0, 830,
	831, 832, 833, 0, 0, 458, 459, 882, 883, 768,
	460, 461, 0, 3088, 463, 0, 0, 464, 465, 466,
	468, 845, 469, 0, 795, 470, 471, 472, 256, 874,
	0, 474, 473, 258, 0, 0, 0, 0, 475, 476,
	259, 477, 478, 479, 750, 0, 0, 0, 0, 0,
	0, 0, 748, 0, 0, 0, 0, 746, 747, 801,
	762, 763, 760, 761, 773, 0, 759, 0, 0, 0,
	0, 0, 772, 0, 0, 260, 261, 262, 263, 0,
	264, 0, 0, 0, 0, 847, 776, 0, 0, 0,
	265, 266, 267, 3087, 816, 797, 827, 785, 826, 825,
	0, 271, 272, 787, 786, 275, 276, 277, 777, 846,
	278, 873, 872, 223, 0, 279, 853, 0, 836, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 288, 285,
	0, 289, 0, 290, 291, 0, 856, 292, 3089, 839,
	837, 838, 843, 841, 840, 842, 294, 295, 502, 296,
	829, 298, 823, 822, 752, 299, 0, 300, 0, 301,
	0, 0, 821, 303, 0, 304, 305, 0, 306, 0,
	757, 307, 308, 310, 313, 309, 314, 315, 875, 876,
	769, 857, 0, 0, 0, 0, 0, 316, 317, 318,
	820, 818, 819, 0, 321, 0, 322, 0, 0, 858,
	323, 0, 324, 877, 0, 232, 0, 325, 326, 327,
	328, 329, 330, 848, 849, 852, 860, 0, 850, 796,
	0, 0, 0, 0, 331, 333, 340, 0, 859, 334,
	809, 800, 810, 811, 812, 813, 814, 0, 802, 0,
	341, 861, 862, 342, 343, 344, 863, 834, 835, 0,
	0, 347, 348, 349, 0, 351, 350, 0, 352, 878,
	864, 353, 354, 865, 0, 355, 356, 0, 0, 357,
	0, 358, 754, 753, 359, 360, 362, 789, 361, 866,
	364, 365, 367, 366, 749, 0, 867, 770, 851, 368,
	824, 369, 370, 0, 798, 799, 0, 0, 373, 374,
	0, 0, 375, 243, 868, 376, 869, 879, 377, 378,
	379, 380, 381, 382, 383, 0, 384, 880, 385, 246,
	386, 0, 387, 388, 389, 390, 391, 392, 817, 393,
	394, 0, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 0, 407, 870, 408, 409,
	410, 411, 758, 412, 0, 416, 417, 418, 419, 420,
	421, 422, 0, 428, 429, 790, 791, 792, 793, 424,
	430, 431, 844, 432, 413, 414, 433, 871, 434, 815,
	794, 436, 0, 446, 437, 438, 439, 415, 440, 444,
	855, 441, 442, 443, 881, 0, 447, 448, 0, 449,
	450, 451, 452, 453, 311, 454, 312, 788, 456, 0,
	830, 831, 832, 833, 0, 0, 458, 459, 882, 883,
	768, 460, 461, 0, 3088, 463, 0, 0, 464, 465,
	466, 468, 845, 469, 0, 795, 470, 471, 472, 256,
	874, 0, 474, 473, 258, 0, 0, 0, 0, 475,
	476, 259, 477, 478, 479, 750, 0, 0, 0, 0,
	0, 0, 0, 748, 0, 0, 0, 0, 746, 747,
	801, 762, 763, 760, 761, 773, 0, 759, 0, 0,
	0, 0, 0, 772, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 847, 776, 0, 0,
	0, 265, 266, 267, 217, 816, 797, 827, 785, 826,
	825, 0, 271, 272, 787, 786, 275, 276, 277, 777,
	846, 278, 873, 872, 223, 0, 279, 853, 0, 836,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 856, 292, 293,
	839, 837, 838, 843, 841, 840, 842, 294, 295, 502,
	296, 829, 298, 823, 822, 0, 299, 0, 300, 0,
	301, 0, 0, 821, 303, 0, 304, 305, 0, 306,
	0, 757, 307, 308, 310, 313, 309, 314, 315, 875,
	876, 769, 857, 0, 0, 0, 0, 0, 316, 317,
	318, 820, 818, 819, 0, 321, 0, 322, 0, 0,
	858, 323, 0, 324, 877, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 848, 849, 852, 860, 0, 850,
	796, 0, 0, 0, 0, 331, 333, 340, 0, 859,
	334, 809, 800, 810, 811, 812, 813, 814, 0, 802,
	0, 341, 861, 862, 342, 343, 344, 863, 834, 835,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	878, 864, 353, 354, 865, 0, 355, 356, 0, 0,
	357, 0, 358, 937, 936, 359, 360, 362, 789, 361,
	866, 364, 365, 367, 366, 0, 0, 867, 770, 851,
	368, 824, 369, 370, 0, 798, 799, 0, 0, 373,
	374, 0, 0, 375, 243, 868, 376, 869, 879, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 880, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 817,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 870, 408,
	409, 410, 411, 758, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 790, 791, 792, 793,
	424, 430, 431, 844, 432, 413, 414, 433, 871, 434,
	815, 794, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 855, 441, 442, 443, 881, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 788, 456,
	0, 830, 831, 832, 833, 0, 0, 458, 459, 882,
	883, 768, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 845, 469, 0, 795, 470, 471, 472,
	256, 874, 0, 474, 473, 258, 0, 0, 0, 0,
	475, 476, 259, 477, 478, 479, 801, 762, 763, 760,
	761, 773, 0, 0, 1919, 0, 0, 0, 0, 1917,
	1918, 0, 260, 261, 262, 263, 0, 264, 759, 0,
	0, 0, 847, 776, 772, 0, 0, 265, 266, 267,
	0, 816, 797, 827, 785, 826, 825, 0, 271, 272,
	787, 786, 275, 276, 277, 777, 846, 278, 873, 872,
	223, 0, 279, 853, 0, 836, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 856, 292, 3089, 839, 837, 838, 843,
	841, 840, 842, 294, 295, 502, 296, 829, 298, 823,
	822, 752, 299, 0, 300, 0, 301, 0, 0, 821,
	303, 0, 304, 305, 0, 306, 0, 757, 307, 308,
	310, 313, 309, 314, 315, 875, 876, 769, 857, 0,
	0, 0, 0, 0, 316, 317, 318, 820, 818, 819,
	0, 321, 0, 322, 0, 0, 858, 323, 0, 324,
	877, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	848, 849, 852, 0, 0, 850, 796, 0, 0, 0,
	0, 331, 333, 340, 0, 859, 334, 809, 800, 810,
	811, 812, 813, 814, 0, 802, 0, 341, 0, 0,
	342, 343, 344, 863, 834, 835, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 878, 864, 353, 354,
	0, 0, 355, 356, 0, 0, 357, 0, 358, 754,
	753, 359, 360, 362, 789, 361, 866, 364, 365, 367,
	366, 749, 0, 0, 770, 851, 368, 824, 369, 370,
	0, 798, 799, 0, 0, 373, 374, 0, 0, 375,
	243, 868, 376, 869, 879, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 880, 385, 246, 386, 0, 387,
	388, 389, 390, 391, 392, 817, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 870, 408, 409, 410, 411, 758,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 790, 791, 792, 793, 424, 430, 431, 844,
	432, 413, 414, 433, 0, 434, 815, 794, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 855, 441, 442,
	443, 881, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 788, 456, 0, 830, 831, 832,
	833, 0, 0, 458, 459, 882, 883, 768, 460, 461,
	0, 3088, 463, 0, 0, 464, 465, 466, 468, 845,
	469, 0, 795, 470, 471, 472, 256, 874, 0, 474,
	473, 258, 0, 0, 0, 0, 475, 476, 259, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 734, 0,
	935, 0, 0, 0, 0, 746, 747, 0, 0, 0,
	0, 0, 0, 0, 759, 0, 260, 261, 262, 263,
	772, 264, 0, 0, 0, 0, 847, 0, 0, 0,
	0, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	846, 278, 221, 222, 223, 0, 279, 853, 0, 836,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 856, 292, 293,
	839, 837, 838, 843, 841, 840, 842, 294, 295, 502,
	296, 297, 298, 225, 226, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 0, 304, 305, 0, 306,
	0, 227, 307, 308, 310, 313, 309, 314, 315, 875,
	876, 0, 857, 0, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 0, 322, 0, 0,
	858, 323, 0, 324, 877, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 848, 849, 852, 860, 0, 850,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 859,
	334, 236, 336, 335, 337, 338, 339, 237, 0, 238,
	0, 341, 861, 862, 342, 343, 344, 863, 345, 346,
	0, 0, 347, 348, 349, 922, 351, 350, 0, 352,
	878, 864, 353, 354, 865, 0, 355, 356, 0, 0,
	357, 0, 358, 937, 936, 359, 360, 362, 363, 361,
	866, 364, 365, 367, 366, 0, 0, 867, 0, 851,
	368, 242, 369, 370, 0, 371, 372, 0, 927, 373,
	374, 0, 0, 375, 243, 868, 376, 869, 879, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 880, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 870, 408,
	409, 410, 411, 248, 929, 0, 416, 417, 418, 419,
	420, 421, 422, 173, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 844, 432, 413, 414, 433, 871, 434,
	249, 435, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 881, 0, 447, 448, 175,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	0, 251, 252, 253, 457, 0, 0, 458, 459, 882,
	883, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 845, 469, 0, 467, 470, 471, 472,
	1154, 257, 0, 474, 473, 258, 0, 0, 935, 167,
	475, 476, 259, 477, 478, 479, 0, 168, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 847, 0, 919, 0, 1460, 265,
	266, 267, 217, 218, 268, 219, 269, 270, 220, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 846, 278,
	221, 222, 223, 0, 279, 853, 0, 836, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 856, 292, 293, 839, 837,
	838, 843, 841, 840, 842, 294, 295, 502, 296, 297,
	298, 225, 226, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 0, 304, 305, 0, 306, 0, 227,
	307, 308, 310, 313, 309, 314, 315, 875, 876, 0,
	857, 0, 0, 0, 0, 0, 316, 317, 318, 230,
	319, 320, 0, 321, 0, 322, 0, 0, 858, 323,
	0, 324, 877, 0, 232, 0, 325, 326, 327, 328,
	329, 330, 848, 849, 852, 860, 0, 850, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 859, 334, 236,
	336, 335, 337, 338, 339, 237, 0, 238, 0, 341,
	861, 862, 342, 343, 344, 863, 345, 346, 0, 0,
	347, 348, 349, 922, 351, 350, 0, 352, 878, 864,
	353, 354, 865, 0, 355, 356, 0, 0, 357, 0,
	358, 937, 936, 359, 360, 362, 363, 361, 866, 364,
	365, 367, 366, 0, 0, 867, 0, 851, 368, 242,
	369, 370, 0, 371, 372, 0, 927, 373, 374, 0,
	0, 375, 243, 868, 376, 869, 879, 377, 378, 379,
	380, 381, 382, 383, 0, 384, 880, 385, 246, 386,
	0, 387, 388, 389, 390, 391, 392, 247, 393, 394,
	0, 395, 396, 397, 398, 399, 0, 401, 402, 400,
	403, 404, 405, 406, 0, 407, 870, 408, 409, 410,
	411, 248, 929, 0, 416, 417, 418, 419, 420, 421,
	422, 173, 428, 429, 423, 425, 426, 427, 424, 430,
	431, 844, 432, 413, 414, 433, 871, 434, 249, 435,
	436, 0, 446, 437, 438, 439, 415, 440, 444, 445,
	441, 442, 443, 881, 0, 447, 448, 175, 449, 450,
	451, 452, 453, 311, 454, 312, 455, 456, 0, 251,
	252, 253, 457, 0, 0, 458, 459, 882, 883, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 845, 469, 0, 467, 470, 471, 472, 1154, 257,
	0, 474, 473, 258, 2308, 0, 935, 167, 475, 476,
	259, 477, 478, 479, 0, 168, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 847, 0, 919, 0, 1460, 265, 266, 267,
	217, 218, 268, 219, 269, 270, 220, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 846, 278, 221, 222,
	223, 0, 279, 853, 0, 836, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 856, 292, 293, 839, 837, 838, 843,
	841, 840, 842, 294, 295, 502, 296, 297, 298, 225,
	226, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 0, 304, 305, 0, 306, 0, 227, 307, 308,
	310, 313, 309, 314, 315, 875, 876, 0, 857, 0,
	0, 0, 0, 0, 316, 317, 318, 230, 319, 320,
	0, 321, 0, 322, 0, 0, 858, 323, 0, 324,
	877, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	848, 849, 852, 860, 0, 850, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 859, 334, 236, 336, 335,
	337, 338, 339, 237, 0, 238, 0, 341, 861, 862,
	342, 343, 344, 863, 345, 346, 0, 0, 347, 348,
	349, 922, 351, 350, 0, 352, 878, 864, 353, 354,
	865, 0, 355, 356, 0, 0, 357, 0, 358, 937,
	936, 359, 360, 362, 363, 361, 866, 364, 365, 367,
	366, 0, 0, 867, 0, 851, 368, 242, 369, 370,
	0, 371, 372, 0, 927, 373, 374, 0, 0, 375,
	243, 868, 376, 869, 879, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 880, 385, 246, 386, 0, 387,
	388, 389, 390, 391, 392, 247, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 870, 408, 409, 410, 411, 248,
	929, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 423, 425, 426, 427, 424, 430, 431, 844,
	432, 413, 414, 433, 871, 434, 249, 435, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 445, 441, 442,
	443, 881, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 455, 456, 0, 251, 252, 253,
	457, 0, 0, 458, 459, 882, 883, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 845,
	469, 0, 467, 470, 471, 472, 256, 257, 0, 474,
	473, 258, 918, 0, 935, 0, 475, 476, 259, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	847, 0, 919, 0, 924, 265, 266, 267, 217, 218,
	268, 219, 269, 270, 220, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 846, 278, 221, 222, 223, 0,
	279, 853, 0, 836, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 856, 292, 293, 839, 837, 838, 843, 841, 840,
	842, 294, 295, 502, 296, 297, 298, 225, 226, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 0,
	304, 305, 0, 306, 0, 227, 307, 308, 310, 313,
	309, 314, 315, 875, 876, 0, 857, 0, 0, 0,
	0, 0, 316, 317, 318, 230, 319, 320, 0, 321,
	0, 322, 0, 0, 858, 323, 0, 324, 877, 0,
	232, 0, 325, 326, 327, 328, 329, 330, 848, 849,
	852, 860, 0, 850, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 859, 334, 236, 336, 335, 337, 338,
	339, 237, 0, 238, 0, 341, 861, 862, 342, 343,
	344, 863, 345, 346, 0, 0, 347, 348, 349, 922,
	351, 350, 0, 352, 878, 864, 353, 354, 865, 0,
	355, 356, 0, 0, 357, 0, 358, 937, 936, 359,
	360, 362, 363, 361, 866, 364, 365, 367, 366, 0,
	0, 867, 0, 851, 368, 242, 369, 370, 0, 371,
	372, 0, 927, 373, 374, 0, 0, 375, 243, 868,
	376, 869, 879, 377, 378, 379, 380, 381, 382, 383,
	0, 384, 880, 385, 246, 386, 0, 387, 388, 389,
	390, 391, 392, 247, 393, 394, 0, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	0, 407, 870, 408, 409, 410, 411, 248, 929, 0,
	416, 417, 418, 419, 420, 421, 422, 0, 428, 429,
	423, 425, 426, 427, 424, 430, 431, 844, 432, 413,
	414, 433, 871, 434, 249, 435, 436, 0, 446, 437,
	438, 439, 415, 440, 444, 445, 441, 442, 443, 881,
	0, 447, 448, 0, 449, 450, 451, 452, 453, 311,
	454, 312, 455, 456, 0, 251, 252, 253, 457, 0,
	0, 458, 459, 882, 883, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 845, 469, 0,
	467, 470, 471, 472, 256, 257, 0, 474, 473, 258,
	0, 0, 935, 0, 475, 476, 259, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 847, 0,
	919, 0, 924, 265, 266, 267, 217, 218, 268, 219,
	269, 270, 220, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 846, 278, 221, 222, 223, 0, 279, 853,
	0, 836, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 856,
	292, 293, 839, 837, 838, 843, 841, 840, 842, 294,
	295, 502, 296, 297, 298, 225, 226, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 0, 304, 305,
	0, 306, 0, 227, 307, 308, 310, 313, 309, 314,
	315, 875, 876, 0, 857, 0, 0, 0, 0, 0,
	316, 317, 318, 230, 319, 320, 0, 321, 0, 322,
	0, 0, 858, 323, 0, 324, 877, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 848, 849, 852, 860,
	0, 850, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 859, 334, 236, 336, 335, 337, 338, 339, 237,
	0, 238, 0, 341, 861, 862, 342, 343, 344, 863,
	345, 346, 0, 0, 347, 348, 349, 922, 351, 350,
	0, 352, 878, 864, 353, 354, 865, 0, 355, 356,
	0, 0, 357, 0, 358, 937, 936, 359, 360, 362,
	363, 361, 866, 364, 365, 367, 366, 0, 0, 867,
	0, 851, 368, 242, 369, 370, 0, 371, 372, 0,
	927, 373, 374, 0, 0, 375, 243, 868, 376, 869,
	879, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	880, 385, 246, 386, 0, 387, 388, 389, 390, 391,
	392, 247, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	870, 408, 409, 410, 411, 248, 929, 0, 416, 417,
	418, 419, 420, 421, 422, 0, 428, 429, 423, 425,
	426, 427, 424, 430, 431, 844, 432, 413, 414, 433,
	871, 434, 249, 435, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 445, 441, 442, 443, 881, 0, 447,
	448, 0, 449, 450, 451, 452, 453, 311, 454, 312,
	455, 456, 0, 251, 252, 253, 457, 0, 0, 458,
	459, 882, 883, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 845, 469, 0, 467, 470,
	471, 472, 256, 257, 0, 474, 473, 258, 0, 0,
	935, 0, 475, 476, 259, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 847, 0, 919, 0,
	924, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	846, 278, 221, 222, 223, 0, 279, 853, 0, 836,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 856, 292, 293,
	839, 837, 838, 843, 841, 840, 842, 294, 295, 502,
	296, 297, 298, 225, 226, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 0, 304, 305, 0, 306,
	0, 227, 307, 308, 310, 313, 309, 314, 315, 875,
	876, 0, 857, 0, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 0, 322, 0, 0,
	858, 323, 0, 324, 877, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 848, 849, 852, 860, 0, 850,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 859,
	334, 236, 336, 335, 337, 338, 339, 237, 0, 238,
	0, 341, 861, 862, 342, 343, 344, 863, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	878, 864, 353, 354, 865, 0, 355, 356, 0, 0,
	357, 0, 358, 937, 936, 359, 360, 362, 363, 361,
	866, 364, 365, 367, 366, 0, 0, 867, 0, 851,
	368, 242, 369, 370, 0, 371, 372, 0, 0, 373,
	374, 0, 0, 375, 243, 868, 376, 869, 879, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 880, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 870, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 844, 432, 413, 414, 433, 871, 434,
	249, 435, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 881, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	0, 251, 252, 253, 457, 0, 0, 458, 459, 882,
	883, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 845, 469, 0, 467, 470, 471, 472,
	256, 257, 0, 474, 473, 258, 0, 0, 935, 0,
	475, 476, 259, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 847, 0, 0, 0, 2644, 265,
	266, 267, 217, 218, 268, 219, 269, 270, 220, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 846, 278,
	221, 222, 223, 0, 279, 853, 0, 836, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 856, 292, 293, 839, 837,
	838, 843, 841, 840, 842, 294, 295, 502, 296, 297,
	298, 225, 226, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 0, 304, 305, 0, 306, 0, 227,
	307, 308, 310, 313, 309, 314, 315, 875, 876, 0,
	857, 0, 0, 0, 0, 0, 316, 317, 318, 230,
	319, 320, 0, 321, 0, 322, 0, 0, 858, 323,
	0, 324, 877, 0, 232, 0, 325, 326, 327, 328,
	329, 330, 848, 849, 852, 860, 0, 850, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 859, 334, 236,
	336, 335, 337, 338, 339, 237, 0, 238, 0, 341,
	861, 862, 342, 343, 344, 863, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 878, 864,
	353, 354, 865, 0, 355, 356, 0, 0, 357, 0,
	358, 937, 936, 359, 360, 362, 363, 361, 866, 364,
	365, 367, 366, 0, 0, 867, 0, 851, 368, 242,
	369, 370, 0, 371, 372, 0, 0, 373, 374, 0,
	0, 375, 243, 868, 376, 869, 879, 377, 378, 379,
	380, 381, 382, 383, 0, 384, 880, 385, 246, 386,
	0, 387, 388, 389, 390, 391, 392, 247, 393, 394,
	0, 395, 396, 397, 398, 399, 0, 401, 402, 400,
	403, 404, 405, 406, 0, 407, 870, 408, 409, 410,
	411, 248, 929, 0, 416, 417, 418, 419, 420, 421,
	422, 0, 428, 429, 423, 425, 426, 427, 424, 430,
	431, 844, 432, 413, 414, 433, 871, 434, 249, 435,
	436, 0, 446, 437, 438, 439, 415, 440, 444, 445,
	441, 442, 443, 881, 0, 447, 448, 0, 449, 450,
	451, 452, 453, 311, 454, 312, 455, 456, 0, 251,
	252, 253, 457, 0, 0, 458, 459, 882, 883, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 845, 469, 0, 467, 470, 471, 472, 256, 257,
	0, 474, 473, 258, 1151, 0, 958, 0, 475, 476,
	259, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 216, 0, 0, 0, 1364, 265, 266, 267,
	217, 218, 268, 219, 269, 270, 220, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 221, 222,
	223, 0, 279, 224, 0, 962, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 856, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 225,
	226, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 0, 304, 305, 0, 306, 0, 227, 307, 308,
	310, 313, 309, 314, 315, 228, 229, 0, 857, 0,
	0, 0, 0, 0, 316, 317, 318, 230, 319, 320,
	0, 321, 0, 322, 0, 0, 858, 323, 0, 324,
	231, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	233, 234, 235, 860, 0, 239, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 859, 334, 236, 336, 335,
	337, 338, 339, 237, 0, 238, 0, 341, 861, 862,
	342, 343, 344, 863, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 240, 864, 353, 354,
	865, 0, 355, 356, 0, 0, 357, 0, 358, 937,
	936, 359, 360, 362, 363, 361, 866, 364, 365, 367,
	366, 0, 0, 867, 0, 241, 368, 242, 369, 370,
	0, 371, 372, 0, 0, 373, 374, 0, 0, 375,
	243, 868, 376, 869, 244, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 245, 385, 246, 386, 0, 387,
	388, 389, 390, 391, 392, 247, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 870, 408, 409, 410, 411, 248,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 173,
	428, 429, 423, 425, 426, 427, 424, 430, 431, 0,
	432, 413, 414, 433, 871, 434, 249, 435, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 445, 441, 442,
	443, 250, 0, 447, 448, 175, 449, 450, 451, 452,
	453, 311, 454, 312, 455, 456, 0, 251, 252, 253,
	457, 0, 0, 458, 459, 254, 255, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 1154, 257, 0, 474,
	473, 258, 0, 0, 935, 167, 475, 476, 259, 477,
	478, 479, 0, 168, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	847, 0, 0, 0, 138, 265, 266, 267, 217, 218,
	268, 219, 269, 270, 220, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 846, 278, 221, 222, 223, 0,
	279, 853, 0, 836, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 856, 292, 293, 839, 837, 838, 843, 841, 840,
	842, 294, 295, 502, 296, 297, 298, 225, 226, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 0,
	304, 305, 0, 306, 0, 227, 307, 308, 310, 313,
	309, 314, 315, 875, 876, 0, 857, 0, 0, 0,
	0, 0, 316, 317, 318, 230, 319, 320, 0, 321,
	0, 322, 0, 0, 858, 323, 0, 324, 877, 0,
	232, 0, 325, 326, 327, 328, 329, 330, 848, 849,
	852, 860, 0, 850, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 859, 334, 236, 336, 335, 337, 338,
	339, 237, 0, 238, 0, 341, 861, 862, 342, 343,
	344, 863, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 878, 864, 353, 354, 865, 0,
	355, 356, 0, 0, 357, 0, 358, 937, 936, 359,
	360, 362, 363, 361, 866, 364, 365, 367, 366, 0,
	0, 867, 0, 851, 368, 242, 369, 370, 0, 371,
	372, 0, 0, 373, 374, 0, 0, 375, 243, 868,
	376, 869, 879, 377, 378, 379, 380, 381, 382, 383,
	0, 384, 880, 385, 246, 386, 0, 387, 388, 389,
	390, 391, 392, 247, 393, 394, 0, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	0, 407, 870, 408, 409, 410, 411, 248, 412, 0,
	416, 417, 418, 419, 420, 421, 422, 0, 428, 429,
	423, 425, 426, 427, 424, 430, 431, 844, 432, 413,
	414, 433, 871, 434, 249, 435, 436, 0, 446, 437,
	438, 439, 415, 440, 444, 445, 441, 442, 443, 881,
	0, 447, 448, 0, 449, 450, 451, 452, 453, 311,
	454, 312, 455, 456, 0, 251, 252, 253, 457, 0,
	0, 458, 459, 882, 883, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 845, 469, 0,
	467, 470, 471, 472, 256, 257, 0, 474, 473, 258,
	734, 0, 499, 0, 475, 476, 259, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 265, 266, 267, 217, 218, 268, 219,
	269, 270, 220, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 221, 222, 223, 0, 279, 224,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 225, 226, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 0, 304, 305,
	0, 306, 0, 227, 307, 308, 310, 313, 309, 314,
	315, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 230, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 231, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 233, 234, 235, 0,
	0, 239, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 236, 336, 335, 337, 338, 339, 237,
	0, 238, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 240, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 241, 368, 242, 369, 370, 0, 371, 372, 0,
	0, 373, 374, 0, 0, 375, 243, 0, 376, 0,
	244, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	245, 385, 246, 386, 0, 387, 388, 389, 390, 391,
	392, 247, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	0, 408, 409, 410, 411, 248, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 173, 428, 429, 423, 425,
	426, 427, 424, 430, 431, 0, 432, 413, 414, 433,
	0, 434, 249, 435, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 445, 441, 442, 443, 250, 0, 447,
	448, 175, 449, 450, 451, 452, 453, 311, 454, 312,
	455, 456, 0, 251, 252, 253, 457, 0, 0, 458,
	459, 254, 255, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 1154, 257, 0, 474, 473, 258, 0, 0,
	499, 167, 475, 476, 259, 477, 478, 479, 0, 168,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 216, 0, 0, 0,
	138, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 221, 222, 223, 0, 279, 224, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 225, 226, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 0, 304, 305, 0, 306,
	0, 227, 307, 308, 310, 313, 309, 314, 315, 228,
	229, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 231, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 233, 234, 235, 0, 0, 239,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 236, 336, 335, 337, 338, 339, 237, 0, 238,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	240, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 241,
	368, 242, 369, 370, 0, 371, 372, 0, 0, 373,
	374, 0, 0, 375, 243, 0, 376, 0, 244, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 245, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 0, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 0, 432, 413, 414, 433, 0, 434,
	249, 435, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 250, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	0, 251, 252, 253, 457, 0, 0, 458, 459, 254,
	255, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	256, 257, 0, 474, 473, 258, 0, 0, 499, 0,
	475, 476, 259, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 216, 0, 0, 0, 2101, 265,
	266, 267, 217, 218, 268, 219, 269, 270, 220, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	221, 222, 223, 0, 279, 224, 0, 0, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 0, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 502, 296, 297,
	298, 225, 226, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 0, 304, 305, 0, 306, 0, 227,
	307, 308, 310, 313, 309, 314, 315, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 316, 317, 318, 230,
	319, 320, 0, 321, 0, 322, 0, 0, 0, 323,
	0, 324, 231, 0, 232, 0, 325, 326, 327, 328,
	329, 330, 233, 234, 235, 0, 0, 239, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 0, 334, 236,
	336, 335, 337, 338, 339, 237, 0, 238, 0, 341,
	0, 0, 342, 343, 344, 0, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 240, 0,
	353, 354, 0, 0, 355, 356, 0, 0, 357, 0,
	358, 0, 0, 359, 360, 362, 363, 361, 0, 364,
	365, 367, 366, 0, 0, 0, 0, 241, 368, 242,
	369, 370, 0, 371, 372, 0, 0, 373, 374, 0,
	0, 375, 243, 0, 376, 0, 244, 377, 378, 379,
	380, 381, 382, 383, 0, 384, 245, 385, 246, 386,
	0, 387, 388, 389, 390, 391, 392, 247, 393, 394,
	0, 395, 396, 397, 398, 399, 0, 401, 402, 400,
	403, 404, 405, 406, 0, 407, 0, 408, 409, 410,
	411, 248, 412, 0, 416, 417, 418, 419, 420, 421,
	422, 0, 428, 429, 423, 425, 426, 427, 424, 430,
	431, 0, 432, 413, 414, 433, 0, 434, 249, 435,
	436, 0, 446, 437, 438, 439, 415, 440, 444, 445,
	441, 442, 443, 250, 0, 447, 448, 0, 449, 450,
	451, 452, 453, 311, 454, 312, 455, 456, 0, 251,
	252, 253, 457, 0, 0, 458, 459, 254, 255, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 256, 257,
	0, 474, 473, 258, 0, 0, 499, 0, 475, 476,
	259, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 216, 0, 0, 0, 2553, 265, 266, 267,
	217, 218, 268, 219, 269, 270, 220, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 221, 222,
	223, 0, 279, 224, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 225,
	226, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 0, 304, 305, 0, 306, 0, 227, 307, 308,
	310, 313, 309, 314, 315, 228, 229, 0, 0, 0,
	0, 0, 0, 0, 316, 317, 318, 230, 319, 320,
	0, 321, 0, 322, 0, 0, 0, 323, 0, 324,
	231, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	233, 234, 235, 0, 0, 239, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 0, 334, 236, 336, 335,
	337, 338, 339, 237, 0, 238, 0, 341, 0, 0,
	342, 343, 344, 0, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 240, 0, 353, 354,
	0, 0, 355, 356, 0, 0, 357, 0, 358, 0,
	0, 359, 360, 362, 363, 361, 0, 364, 365, 367,
	366, 0, 0, 0, 0, 241, 368, 242, 369, 370,
	0, 371, 372, 0, 0, 373, 374, 0, 0, 375,
	243, 0, 376, 0, 244, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 245, 385, 246, 386, 0, 387,
	388, 389, 390, 391, 392, 247, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 0, 408, 409, 410, 411, 248,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 423, 425, 426, 427, 424, 430, 431, 0,
	432, 413, 414, 433, 0, 434, 249, 435, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 445, 441, 442,
	443, 250, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 455, 456, 0, 251, 252, 253,
	457, 0, 0, 458, 459, 254, 255, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 256, 257, 0, 474,
	473, 258, 0, 0, 0, 0, 475, 476, 259, 477,
	478, 479, 1230, 0, 958, 957, 0, 0, 0, 955,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 1465, 264, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 265, 266, 267, 217, 218,
	268, 219, 269, 270, 220, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 221, 222, 223, 0,
	279, 224, 0, 962, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 856, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 225, 226, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 0,
	304, 305, 0, 306, 0, 227, 307, 308, 310, 313,
	309, 314, 315, 228, 229, 0, 857, 0, 0, 0,
	0, 0, 1229, 317, 318, 230, 319, 320, 0, 321,
	0, 322, 0, 0, 858, 323, 0, 324, 231, 0,
	232, 0, 325, 326, 327, 328, 329, 330, 233, 234,
	235, 860, 0, 239, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 859, 334, 236, 336, 335, 337, 338,
	339, 237, 0, 238, 0, 341, 861, 862, 342, 343,
	344, 863, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 240, 864, 353, 354, 865, 0,
	355, 356, 0, 0, 357, 0, 358, 937, 936, 359,
	360, 362, 363, 361, 866, 364, 365, 367, 366, 0,
	0, 867, 0, 241, 368, 242, 369, 370, 0, 371,
	372, 0, 0, 373, 374, 0, 0, 375, 243, 868,
	376, 869, 244, 377, 378, 379, 380, 381, 382, 383,
	0, 384, 245, 385, 246, 386, 0, 387, 388, 389,
	390, 1228, 392, 247, 393, 394, 0, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	0, 407, 870, 408, 409, 410, 411, 248, 412, 0,
	416, 417, 418, 419, 420, 421, 422, 0, 428, 429,
	423, 425, 426, 427, 424, 430, 431, 0, 432, 413,
	414, 433, 871, 434, 249, 435, 436, 0, 446, 437,
	438, 439, 415, 440, 444, 445, 441, 442, 443, 250,
	0, 447, 448, 0, 449, 450, 451, 452, 453, 311,
	454, 312, 455, 456, 0, 251, 252, 253, 457, 0,
	0, 458, 459, 254, 255, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 256, 257, 0, 474, 473, 258,
	0, 0, 0, 0, 475, 476, 259, 477, 478, 479,
	1147, 0, 958, 957, 0, 0, 0, 955, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 265, 266, 267, 217, 218, 268, 219,
	269, 270, 220, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 221, 222, 223, 0, 279, 224,
	0, 962, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 856,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 225, 226, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 0, 304, 305,
	0, 306, 0, 227, 307, 308, 310, 313, 309, 314,
	315, 228, 229, 0, 857, 0, 0, 0, 0, 0,
	316, 317, 318, 230, 319, 320, 0, 321, 0, 322,
	0, 0, 858, 323, 0, 324, 231, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 1146, 234, 235, 860,
	0, 239, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 859, 334, 236, 336, 335, 337, 338, 339, 237,
	0, 238, 0, 341, 861, 862, 342, 343, 344, 863,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 240, 864, 353, 354, 865, 0, 355, 356,
	0, 0, 357, 0, 358, 937, 936, 359, 360, 362,
	363, 361, 866, 364, 365, 367, 366, 0, 0, 867,
	0, 241, 368, 242, 369, 370, 0, 371, 372, 0,
	0, 373, 374, 0, 0, 375, 243, 868, 376, 869,
	244, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	245, 385, 246, 386, 0, 387, 388, 389, 390, 391,
	392, 247, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	870, 408, 409, 410, 411, 248, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 0, 428, 429, 423, 425,
	426, 427, 424, 430, 431, 0, 432, 413, 414, 433,
	871, 434, 249, 435, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 445, 441, 442, 443, 250, 0, 447,
	448, 0, 449, 450, 451, 452, 453, 311, 454, 312,
	455, 456, 0, 251, 252, 253, 457, 0, 0, 458,
	459, 254, 255, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 256, 257, 0, 474, 473, 258, 0, 0,
	0, 0, 475, 476, 259, 477, 478, 479, 1143, 0,
	958, 957, 0, 0, 0, 955, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 221, 222, 223, 0, 279, 224, 0, 962,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 856, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 225, 226, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 0, 304, 305, 0, 306,
	0, 227, 307, 308, 310, 313, 309, 314, 315, 228,
	229, 0, 857, 0, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 0, 322, 0, 0,
	858, 323, 0, 324, 231, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 1142, 234, 235, 860, 0, 239,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 859,
	334, 236, 336, 335, 337, 338, 339, 237, 0, 238,
	0, 341, 861, 862, 342, 343, 344, 863, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	240, 864, 353, 354, 865, 0, 355, 356, 0, 0,
	357, 0, 358, 937, 936, 359, 360, 362, 363, 361,
	866, 364, 365, 367, 366, 0, 0, 867, 0, 241,
	368, 242, 369, 370, 0, 371, 372, 0, 0, 373,
	374, 0, 0, 375, 243, 868, 376, 869, 244, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 245, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 870, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 0, 432, 413, 414, 433, 871, 434,
	249, 435, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 250, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	0, 251, 252, 253, 457, 0, 0, 458, 459, 254,
	255, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	256, 257, 0, 474, 473, 258, 0, 0, 0, 0,
	475, 476, 259, 477, 478, 479, 1104, 0, 958, 957,
	0, 0, 0, 955, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 216, 0, 0, 0, 0, 265,
	266, 267, 217, 218, 268, 219, 269, 270, 220, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	221, 222, 223, 0, 279, 224, 0, 962, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 856, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 502, 296, 297,
	298, 225, 226, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 0, 304, 305, 0, 306, 0, 227,
	307, 308, 310, 313, 309, 314, 315, 228, 229, 0,
	857, 0, 0, 0, 0, 0, 316, 317, 318, 230,
	319, 320, 0, 321, 0, 322, 0, 0, 858, 323,
	0, 324, 231, 0, 232, 0, 325, 326, 327, 328,
	329, 330, 1103, 234, 235, 860, 0, 239, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 859, 334, 236,
	336, 335, 337, 338, 339, 237, 0, 238, 0, 341,
	861, 862, 342, 343, 344, 863, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 240, 864,
	353, 354, 865, 0, 355, 356, 0, 0, 357, 0,
	358, 937, 936, 359, 360, 362, 363, 361, 866, 364,
	365, 367, 366, 0, 0, 867, 0, 241, 368, 242,
	369, 370, 0, 371, 372, 0, 0, 373, 374, 0,
	0, 375, 243, 868, 376, 869, 244, 377, 378, 379,
	380, 381, 382, 383, 0, 384, 245, 385, 246, 386,
	0, 387, 388, 389, 390, 391, 392, 247, 393, 394,
	0, 395, 396, 397, 398, 399, 0, 401, 402, 400,
	403, 404, 405, 406, 0, 407, 870, 408, 409, 410,
	411, 248, 412, 0, 416, 417, 418, 419, 420, 421,
	422, 0, 428, 429, 423, 425, 426, 427, 424, 430,
	431, 0, 432, 413, 414, 433, 871, 434, 249, 435,
	436, 0, 446, 437, 438, 439, 415, 440, 444, 445,
	441, 442, 443, 250, 0, 447, 448, 0, 449, 450,
	451, 452, 453, 311, 454, 312, 455, 456, 0, 251,
	252, 253, 457, 0, 0, 458, 459, 254, 255, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 256, 257,
	0, 474, 473, 258, 0, 0, 0, 0, 475, 476,
	259, 477, 478, 479, 1101, 0, 958, 957, 0, 0,
	0, 955, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 216, 0, 0, 0, 0, 265, 266, 267,
	217, 218, 268, 219, 269, 270, 220, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 221, 222,
	223, 0, 279, 224, 0, 962, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 856, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 225,
	226, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 0, 304, 305, 0, 306, 0, 227, 307, 308,
	310, 313, 309, 314, 315, 228, 229, 0, 857, 0,
	0, 0, 0, 0, 316, 317, 318, 230, 319, 320,
	0, 321, 0, 322, 0, 0, 858, 323, 0, 324,
	231, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	1100, 234, 235, 860, 0, 239, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 859, 334, 236, 336, 335,
	337, 338, 339, 237, 0, 238, 0, 341, 861, 862,
	342, 343, 344, 863, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 240, 864, 353, 354,
	865, 0, 355, 356, 0, 0, 357, 0, 358, 937,
	936, 359, 360, 362, 363, 361, 866, 364, 365, 367,
	366, 0, 0, 867, 0, 241, 368, 242, 369, 370,
	0, 371, 372, 0, 0, 373, 374, 0, 0, 375,
	243, 868, 376, 869, 244, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 245, 385, 246, 386, 0, 387,
	388, 389, 390, 391, 392, 247, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 870, 408, 409, 410, 411, 248,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 423, 425, 426, 427, 424, 430, 431, 0,
	432, 413, 414, 433, 871, 434, 249, 435, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 445, 441, 442,
	443, 250, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 455, 456, 0, 251, 252, 253,
	457, 0, 0, 458, 459, 254, 255, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 256, 257, 0, 474,
	473, 258, 0, 0, 0, 0, 475, 476, 259, 477,
	478, 479, 951, 0, 958, 957, 0, 0, 0, 955,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 265, 266, 267, 217, 218,
	268, 219, 269, 270, 220, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 221, 222, 223, 0,
	279, 224, 0, 962, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 856, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 225, 226, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 0,
	304, 305, 0, 306, 0, 227, 307, 308, 310, 313,
	309, 314, 315, 228, 229, 0, 857, 0, 0, 0,
	0, 0, 316, 317, 318, 230, 319, 320, 0, 321,
	0, 322, 0, 0, 858, 323, 0, 324, 231, 0,
	232, 0, 325, 326, 327, 328, 329, 330, 953, 234,
	235, 860, 0, 239, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 859, 334, 236, 336, 335, 337, 338,
	339, 237, 0, 238, 0, 341, 861, 862, 342, 343,
	344, 863, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 240, 864, 353, 354, 865, 0,
	355, 356, 0, 0, 357, 0, 358, 937, 936, 359,
	360, 362, 363, 361, 866, 364, 365, 367, 366, 0,
	0, 867, 0, 241, 368, 242, 369, 370, 0, 371,
	372, 0, 0, 373, 374, 0, 0, 375, 243, 868,
	376, 869, 244, 377, 378, 379, 380, 381, 382, 383,
	0, 384, 245, 385, 246, 386, 0, 387, 388, 389,
	390, 391, 392, 247, 393, 394, 0, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	0, 407, 870, 408, 409, 410, 411, 248, 412, 0,
	416, 417, 418, 419, 420, 421, 422, 0, 428, 429,
	423, 425, 426, 427, 424, 430, 431, 0, 432, 413,
	414, 433, 871, 434, 249, 435, 436, 0, 446, 437,
	438, 439, 415, 440, 444, 445, 441, 442, 443, 250,
	0, 447, 448, 0, 449, 450, 451, 452, 453, 311,
	454, 312, 455, 456, 0, 251, 252, 253, 457, 0,
	0, 458, 459, 254, 255, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 256, 257, 0, 474, 473, 258,
	0, 0, 0, 0, 475, 476, 259, 477, 478, 479,
	958, 957, 0, 0, 0, 955, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 221, 222, 223, 0, 279, 224, 0, 962,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 856, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 225, 226, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 0, 304, 305, 0, 306,
	0, 227, 307, 308, 310, 313, 309, 314, 315, 228,
	229, 0, 857, 0, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 0, 322, 0, 0,
	858, 323, 0, 324, 231, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 233, 234, 235, 860, 0, 239,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 859,
	334, 236, 336, 335, 337, 338, 339, 237, 0, 238,
	0, 341, 861, 862, 342, 343, 344, 863, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	240, 864, 353, 354, 865, 0, 355, 356, 0, 0,
	357, 0, 358, 937, 936, 359, 360, 362, 363, 361,
	866, 364, 365, 367, 366, 0, 0, 867, 0, 241,
	368, 242, 369, 370, 0, 371, 372, 0, 0, 373,
	374, 0, 0, 375, 243, 868, 376, 869, 244, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 245, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 870, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 0, 432, 413, 414, 433, 871, 434,
	249, 435, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 250, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	0, 251, 252, 253, 457, 0, 0, 458, 459, 254,
	255, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	256, 257, 0, 474, 473, 258, 958, 957, 0, 0,
	475, 476, 259, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 216, 0, 0, 0, 0, 265, 266, 267,
	217, 218, 268, 219, 269, 270, 220, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 221, 222,
	223, 0, 279, 224, 0, 962, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 856, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 225,
	226, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 0, 304, 305, 0, 306, 0, 227, 307, 308,
	310, 313, 309, 314, 315, 228, 229, 0, 857, 0,
	0, 0, 0, 0, 316, 317, 318, 230, 319, 320,
	0, 321, 0, 322, 0, 0, 858, 323, 0, 324,
	231, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	233, 234, 235, 860, 0, 239, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 859, 334, 236, 336, 335,
	337, 338, 339, 237, 0, 238, 0, 341, 861, 862,
	342, 343, 344, 863, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 240, 864, 353, 354,
	865, 0, 355, 356, 0, 0, 357, 0, 358, 937,
	936, 359, 360, 362, 363, 361, 866, 364, 365, 367,
	366, 0, 0, 867, 0, 241, 368, 242, 369, 370,
	0, 371, 372, 0, 0, 373, 374, 0, 0, 375,
	243, 868, 376, 869, 244, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 245, 385, 246, 386, 0, 387,
	388, 389, 390, 391, 392, 247, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 870, 408, 409, 410, 411, 248,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 423, 425, 426, 427, 424, 430, 431, 0,
	432, 413, 414, 433, 871, 434, 249, 435, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 445, 441, 442,
	443, 250, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 455, 456, 0, 251, 252, 253,
	457, 0, 0, 458, 459, 254, 255, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 256, 257, 958, 474,
	473, 258, 0, 0, 0, 0, 475, 476, 259, 477,
	478, 479, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 216, 0, 0, 0, 0, 265,
	266, 267, 217, 218, 268, 219, 269, 270, 220, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	221, 222, 223, 0, 279, 224, 0, 962, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 856, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 502, 296, 297,
	298, 225, 226, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 0, 304, 305, 0, 306, 0, 227,
	307, 308, 310, 313, 309, 314, 315, 228, 229, 0,
	857, 0, 0, 0, 0, 0, 316, 317, 318, 230,
	319, 320, 0, 321, 0, 322, 0, 0, 858, 323,
	0, 324, 231, 0, 232, 0, 325, 326, 327, 328,
	329, 330, 233, 234, 235, 860, 0, 239, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 859, 334, 236,
	336, 335, 337, 338, 339, 237, 0, 238, 0, 341,
	861, 862, 342, 343, 344, 863, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 240, 864,
	353, 354, 865, 0, 355, 356, 0, 0, 357, 0,
	358, 937, 936, 359, 360, 362, 363, 361, 866, 364,
	365, 367, 366, 0, 0, 867, 0, 241, 368, 242,
	369, 370, 0, 371, 372, 0, 0, 373, 374, 0,
	0, 375, 243, 868, 376, 869, 244, 377, 378, 379,
	380, 381, 382, 383, 0, 384, 245, 385, 246, 386,
	0, 387, 388, 389, 390, 391, 392, 247, 393, 394,
	0, 395, 396, 397, 398, 399, 0, 401, 402, 400,
	403, 404, 405, 406, 0, 407, 870, 408, 409, 410,
	411, 248, 412, 0, 416, 417, 418, 419, 420, 421,
	422, 0, 428, 429, 423, 425, 426, 427, 424, 430,
	431, 0, 432, 413, 414, 433, 871, 434, 249, 435,
	436, 0, 446, 437, 438, 439, 415, 440, 444, 445,
	441, 442, 443, 250, 0, 447, 448, 0, 449, 450,
	451, 452, 453, 311, 454, 312, 455, 456, 0, 251,
	252, 253, 457, 0, 0, 458, 459, 254, 255, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 256, 257,
	0, 474, 473, 258, 603, 0, 209, 0, 475, 476,
	259, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 216, 0, 0, 0, 0, 265, 266, 267,
	217, 218, 268, 219, 269, 270, 220, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 221, 222,
	223, 0, 279, 224, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 215, 296, 297, 298, 225,
	226, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 0, 304, 305, 0, 306, 0, 227, 307, 308,
	310, 313, 309, 314, 315, 228, 229, 0, 0, 0,
	0, 0, 0, 0, 316, 317, 318, 230, 319, 320,
	0, 321, 0, 322, 0, 0, 0, 323, 0, 324,
	231, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	233, 234, 235, 0, 0, 239, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 0, 334, 236, 336, 335,
	337, 338, 339, 237, 0, 238, 0, 341, 0, 0,
	342, 343, 344, 0, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 240, 0, 353, 354,
	0, 0, 355, 356, 0, 0, 357, 0, 358, 0,
	0, 359, 360, 362, 363, 361, 0, 364, 365, 367,
	366, 0, 0, 0, 0, 241, 368, 242, 369, 370,
	0, 371, 372, 0, 0, 373, 374, 0, 0, 375,
	243, 0, 376, 0, 244, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 245, 385, 246, 386, 0, 387,
	388, 389, 390, 391, 392, 247, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 0, 408, 409, 410, 411, 248,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 423, 425, 426, 427, 424, 430, 431, 0,
	432, 413, 414, 433, 0, 434, 249, 435, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 445, 441, 442,
	443, 250, 0, 447, 448, 214, 449, 450, 451, 452,
	453, 311, 454, 312, 455, 456, 0, 251, 252, 253,
	457, 0, 0, 458, 459, 254, 255, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 256, 257, 0, 474,
	473, 258, 208, 0, 209, 0, 475, 476, 259, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 482, 0, 0,
	216, 0, 0, 0, 0, 265, 266, 267, 217, 218,
	268, 219, 269, 270, 220, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 221, 222, 223, 0,
	279, 224, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 215, 296, 297, 298, 225, 226, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 0,
	304, 305, 0, 306, 0, 227, 307, 308, 310, 313,
	309, 314, 315, 228, 229, 0, 0, 0, 0, 0,
	0, 0, 316, 317, 318, 230, 319, 320, 0, 321,
	0, 322, 0, 0, 0, 323, 0, 324, 231, 0,
	232, 0, 325, 326, 327, 328, 329, 330, 233, 234,
	235, 0, 0, 239, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 0, 334, 236, 336, 335, 337, 338,
	339, 237, 0, 238, 0, 341, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 240, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 361, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 241, 368, 242, 369, 370, 0, 371,
	372, 0, 0, 373, 374, 0, 0, 375, 243, 0,
	376, 0, 244, 377, 378, 379, 380, 381, 382, 383,
	0, 384, 245, 385, 246, 386, 0, 387, 388, 389,
	390, 391, 392, 247, 393, 394, 0, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	0, 407, 0, 408, 409, 410, 411, 248, 412, 0,
	416, 417, 418, 419, 420, 421, 422, 0, 428, 429,
	423, 425, 426, 427, 424, 430, 431, 0, 432, 413,
	414, 433, 0, 434, 249, 435, 436, 0, 446, 437,
	438, 439, 415, 440, 444, 445, 441, 442, 443, 250,
	0, 447, 448, 214, 449, 450, 451, 452, 453, 311,
	454, 312, 455, 456, 0, 251, 252, 253, 457, 0,
	0, 458, 459, 254, 255, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 256, 257, 209, 474, 473, 258,
	0, 0, 0, 0, 475, 476, 259, 477, 478, 479,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 216, 0, 0, 482, 0, 265, 266, 267,
	217, 218, 268, 219, 269, 270, 220, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 221, 222,
	223, 0, 279, 224, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 215, 296, 297, 298, 225,
	226, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 0, 304, 305, 0, 306, 0, 227, 307, 308,
	310, 313, 309, 314, 315, 228, 229, 0, 0, 0,
	0, 0, 0, 0, 316, 317, 318, 230, 319, 320,
	0, 321, 0, 322, 0, 0, 0, 323, 0, 324,
	231, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	233, 234, 235, 0, 0, 239, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 0, 334, 236, 336, 335,
	337, 338, 339, 237, 0, 238, 0, 341, 0, 0,
	342, 343, 344, 0, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 240, 0, 353, 354,
	0, 0, 355, 356, 0, 0, 357, 0, 358, 0,
	0, 359, 360, 362, 363, 361, 0, 364, 365, 367,
	366, 0, 0, 0, 0, 241, 368, 242, 369, 370,
	0, 371, 372, 0, 0, 373, 374, 0, 0, 375,
	243, 0, 376, 0, 244, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 245, 385, 246, 386, 0, 387,
	388, 389, 390, 391, 392, 247, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 0, 1707, 409, 410, 411, 248,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 423, 425, 426, 427, 424, 430, 431, 0,
	432, 413, 414, 433, 0, 434, 249, 435, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 445, 441, 442,
	443, 250, 0, 447, 448, 214, 449, 450, 451, 452,
	453, 311, 454, 312, 455, 456, 0, 251, 252, 253,
	457, 0, 0, 458, 459, 254, 255, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 256, 257, 209, 474,
	473, 258, 0, 0, 0, 0, 475, 476, 259, 477,
	478, 479, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 216, 0, 0, 482, 0, 265,
	266, 267, 217, 218, 268, 219, 269, 270, 220, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	221, 222, 223, 0, 279, 224, 0, 0, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 0, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 215, 296, 297,
	298, 225, 226, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 0, 304, 305, 0, 306, 0, 227,
	307, 308, 310, 313, 309, 314, 315, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 316, 317, 318, 230,
	319, 320, 0, 321, 0, 322, 0, 0, 0, 323,
	0, 324, 231, 0, 232, 0, 325, 326, 327, 328,
	329, 330, 233, 234, 235, 0, 0, 239, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 0, 334, 236,
	336, 335, 337, 338, 339, 237, 0, 238, 0, 341,
	0, 0, 342, 343, 344, 0, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 240, 0,
	353, 354, 0, 0, 355, 356, 0, 0, 357, 0,
	358, 0, 0, 359, 360, 362, 363, 361, 0, 364,
	365, 367, 366, 0, 0, 0, 0, 241, 368, 242,
	369, 370, 0, 371, 372, 0, 0, 373, 374, 0,
	0, 375, 243, 0, 376, 0, 244, 377, 378, 379,
	380, 381, 382, 383, 0, 384, 245, 385, 246, 386,
	0, 387, 388, 389, 390, 391, 392, 247, 393, 394,
	0, 395, 396, 397, 398, 399, 0, 401, 402, 400,
	403, 404, 405, 406, 0, 407, 0, 408, 409, 410,
	411, 248, 412, 0, 416, 417, 418, 419, 420, 421,
	422, 0, 428, 429, 423, 425, 426, 427, 424, 430,
	431, 0, 432, 413, 414, 433, 0, 434, 249, 435,
	436, 0, 446, 437, 438, 439, 415, 440, 444, 445,
	441, 442, 443, 250, 0, 447, 448, 214, 449, 450,
	451, 452, 453, 311, 454, 312, 455, 456, 0, 251,
	252, 253, 457, 0, 0, 458, 459, 254, 255, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 256, 257,
	499, 474, 473, 258, 0, 0, 0, 0, 475, 476,
	259, 477, 478, 479, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 216, 0, 0, 482,
	0, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 221, 222, 223, 0, 279, 224, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 225, 226, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 0, 304, 305, 0, 306,
	0, 227, 307, 308, 310, 313, 309, 314, 315, 228,
	229, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 231, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 233, 234, 235, 0, 0, 239,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 236, 336, 335, 337, 338, 339, 237, 0, 238,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	240, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 241,
	368, 242, 369, 370, 0, 371, 372, 0, 0, 373,
	374, 0, 0, 375, 243, 0, 376, 0, 244, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 245, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 0, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 0, 432, 413, 414, 433, 0, 434,
	249, 435, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 250, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	0, 251, 252, 253, 457, 0, 0, 458, 459, 254,
	255, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	256, 257, 499, 474, 473, 258, 0, 0, 0, 0,
	475, 476, 259, 477, 478, 479, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 216, 0,
	0, 482, 0, 265, 266, 267, 217, 218, 268, 219,
	269, 270, 220, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 221, 222, 223, 1991, 279, 224,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 1988, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 225, 226, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 0, 304, 305,
	0, 306, 0, 227, 307, 308, 310, 313, 309, 314,
	315, 228, 229, 0, 2070, 0, 0, 0, 0, 0,
	316, 317, 318, 230, 319, 320, 0, 321, 0, 322,
	1994, 0, 0, 323, 0, 324, 231, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 233, 234, 235, 0,
	0, 239, 332, 0, 0, 0, 2068, 331, 333, 340,
	0, 0, 334, 236, 336, 335, 337, 338, 339, 237,
	0, 238, 0, 2067, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 240, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 241, 368, 242, 369, 370, 0, 371, 372, 0,
	0, 373, 374, 0, 0, 375, 243, 0, 376, 0,
	244, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	245, 385, 246, 386, 1993, 387, 388, 389, 390, 391,
	392, 247, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	0, 408, 409, 410, 411, 248, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 0, 428, 429, 423, 425,
	426, 427, 424, 430, 431, 0, 432, 413, 414, 433,
	0, 434, 249, 435, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 445, 441, 442, 443, 250, 0, 447,
	448, 0, 449, 450, 451, 452, 453, 311, 454, 312,
	455, 456, 0, 251, 252, 253, 457, 0, 0, 458,
	459, 254, 255, 0, 460, 461, 0, 462, 463, 0,
	2069, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 256, 257, 499, 474, 473, 258, 0, 0,
	0, 0, 475, 476, 259, 477, 478, 479, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 265, 266, 267, 217, 218,
	268, 219, 269, 270, 220, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 221, 222, 223, 1991,
	279, 224, 0, 0, 1985, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 1988, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 225, 226, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 0,
	304, 305, 0, 306, 0, 227, 307, 308, 310, 313,
	309, 314, 315, 228, 229, 0, 0, 0, 0, 0,
	0, 0, 316, 317, 318, 230, 319, 320, 0, 321,
	0, 322, 1994, 0, 0, 323, 0, 324, 231, 0,
	232, 0, 325, 326, 327, 328, 329, 330, 1984, 234,
	235, 0, 0, 239, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 0, 334, 236, 336, 335, 337, 338,
	339, 237, 0, 238, 0, 341, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 240, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 361, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 241, 368, 242, 369, 370, 0, 371,
	372, 0, 0, 373, 374, 0, 0, 375, 243, 0,
	376, 0, 244, 377, 378, 379, 380, 381, 382, 383,
	0, 384, 245, 385, 246, 386, 1993, 387, 388, 389,
	390, 391, 392, 247, 393, 394, 0, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	0, 407, 0, 408, 409, 410, 411, 248, 412, 0,
	416, 417, 418, 419, 420, 421, 422, 0, 428, 429,
	423, 425, 426, 427, 424, 430, 431, 0, 432, 413,
	414, 433, 0, 434, 249, 435, 436, 0, 446, 437,
	438, 439, 415, 440, 444, 445, 441, 442, 443, 250,
	0, 447, 448, 0, 449, 450, 451, 452, 453, 311,
	454, 312, 455, 456, 0, 251, 252, 253, 457, 0,
	0, 458, 459, 254, 255, 0, 460, 461, 0, 462,
	463, 0, 1992, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 256, 257, 0, 474, 473, 258,
	610, 0, 499, 0, 475, 476, 259, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 609, 587, 264, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 265, 266, 267, 217, 218, 268, 219,
	269, 270, 220, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 221, 222, 223, 0, 279, 224,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 590, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 225, 226, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 0, 304, 305,
	0, 306, 0, 227, 307, 308, 310, 313, 309, 314,
	315, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 230, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 591, 324, 231, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 233, 234, 235, 0,
	0, 239, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 236, 336, 335, 337, 338, 339, 237,
	0, 238, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 240, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 241, 368, 242, 369, 370, 0, 371, 372, 0,
	0, 373, 374, 0, 0, 375, 243, 0, 376, 0,
	244, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	245, 385, 246, 386, 0, 387, 388, 389, 390, 391,
	392, 247, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	0, 408, 409, 410, 411, 248, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 592, 428, 429, 423, 425,
	426, 427, 424, 430, 431, 0, 432, 413, 414, 433,
	0, 434, 249, 435, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 445, 441, 442, 443, 250, 0, 447,
	448, 0, 449, 450, 451, 452, 453, 311, 454, 312,
	455, 456, 0, 251, 252, 253, 457, 0, 0, 458,
	459, 254, 255, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 256, 257, 0, 474, 473, 258, 586, 0,
	499, 0, 475, 476, 259, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	587, 264, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 221, 222, 223, 0, 279, 224, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 590, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 225, 226, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 0, 304, 305, 0, 306,
	0, 227, 307, 308, 310, 313, 309, 314, 315, 228,
	229, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 591, 324, 231, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 233, 234, 235, 0, 0, 239,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 236, 336, 335, 337, 338, 339, 237, 0, 238,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	240, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 241,
	368, 242, 369, 370, 0, 371, 372, 0, 0, 373,
	374, 0, 0, 375, 243, 0, 376, 0, 244, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 245, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 0, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 592, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 0, 432, 413, 414, 433, 0, 434,
	249, 435, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 250, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	0, 251, 252, 253, 457, 0, 0, 458, 459, 254,
	255, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	256, 257, 499, 474, 473, 258, 0, 0, 0, 0,
	475, 476, 259, 477, 478, 479, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 265, 266, 267, 217, 218, 268, 219,
	269, 270, 220, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 221, 222, 223, 0, 279, 224,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 590, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 225, 226, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 0, 304, 305,
	0, 306, 0, 227, 307, 308, 310, 313, 309, 314,
	315, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 230, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 591, 324, 231, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 233, 234, 235, 0,
	0, 239, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 236, 336, 335, 337, 338, 339, 237,
	0, 238, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 240, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 241, 368, 242, 369, 370, 0, 371, 372, 0,
	0, 373, 374, 0, 0, 375, 243, 0, 376, 0,
	244, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	245, 385, 246, 386, 0, 387, 388, 389, 390, 391,
	392, 247, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	0, 408, 409, 410, 411, 248, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 592, 428, 429, 423, 425,
	426, 427, 424, 430, 431, 0, 432, 413, 414, 433,
	0, 434, 249, 435, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 445, 441, 442, 443, 250, 0, 447,
	448, 0, 449, 450, 451, 452, 453, 311, 454, 312,
	455, 456, 0, 251, 252, 253, 457, 0, 0, 458,
	459, 254, 255, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 256, 257, 0, 474, 473, 258, 1122, 0,
	499, 0, 475, 476, 259, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 221, 222, 223, 0, 279, 224, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 225, 226, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 0, 304, 305, 0, 306,
	0, 227, 307, 308, 310, 313, 309, 314, 315, 228,
	229, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 231, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 233, 234, 235, 0, 0, 239,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 236, 336, 335, 337, 338, 339, 237, 0, 238,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	240, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 241,
	368, 242, 369, 370, 0, 371, 372, 0, 927, 373,
	374, 0, 0, 375, 243, 0, 376, 0, 244, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 245, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 0, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 0, 432, 413, 414, 433, 0, 434,
	249, 435, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 250, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	0, 251, 252, 253, 457, 0, 0, 458, 459, 254,
	255, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	256, 257, 0, 474, 473, 258, 946, 0, 499, 0,
	475, 476, 259, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 216, 0, 0, 0, 0, 265,
	266, 267, 217, 218, 268, 219, 269, 270, 220, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	221, 222, 223, 0, 279, 224, 0, 0, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 0, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 502, 296, 297,
	298, 225, 226, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 0, 304, 305, 0, 306, 0, 227,
	307, 308, 310, 313, 309, 314, 315, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 316, 317, 318, 230,
	319, 320, 0, 321, 0, 322, 0, 0, 0, 323,
	0, 324, 231, 0, 232, 0, 325, 326, 327, 328,
	329, 330, 948, 234, 235, 0, 0, 239, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 0, 334, 236,
	336, 335, 337, 338, 339, 237, 0, 238, 0, 341,
	0, 0, 342, 343, 344, 0, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 240, 0,
	353, 354, 0, 0, 355, 356, 0, 0, 357, 0,
	358, 0, 0, 359, 360, 362, 363, 361, 0, 364,
	365, 367, 366, 0, 0, 0, 0, 241, 368, 242,
	369, 370, 0, 371, 372, 0, 927, 373, 374, 0,
	0, 375, 243, 0, 376, 0, 244, 377, 378, 379,
	380, 381, 382, 383, 0, 384, 245, 385, 246, 386,
	0, 387, 388, 389, 390, 391, 392, 247, 393, 394,
	0, 395, 396, 397, 398, 399, 0, 401, 402, 400,
	403, 404, 405, 406, 0, 407, 0, 408, 409, 410,
	411, 248, 412, 0, 416, 417, 418, 419, 420, 421,
	422, 0, 428, 429, 423, 425, 426, 427, 424, 430,
	431, 0, 432, 413, 414, 433, 0, 434, 249, 435,
	436, 0, 446, 437, 438, 439, 415, 440, 444, 445,
	441, 442, 443, 250, 0, 447, 448, 0, 449, 450,
	451, 452, 453, 311, 454, 312, 455, 456, 0, 251,
	252, 253, 457, 0, 0, 458, 459, 254, 255, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 256, 257,
	0, 474, 473, 258, 943, 0, 499, 0, 475, 476,
	259, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 216, 0, 0, 0, 0, 265, 266, 267,
	217, 218, 268, 219, 269, 270, 220, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 221, 222,
	223, 0, 279, 224, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 225,
	226, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 0, 304, 305, 0, 306, 0, 227, 307, 308,
	310, 313, 309, 314, 315, 228, 229, 0, 0, 0,
	0, 0, 0, 0, 316, 317, 318, 230, 319, 320,
	0, 321, 0, 322, 0, 0, 0, 323, 0, 324,
	231, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	945, 234, 235, 0, 0, 239, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 0, 334, 236, 336, 335,
	337, 338, 339, 237, 0, 238, 0, 341, 0, 0,
	342, 343, 344, 0, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 240, 0, 353, 354,
	0, 0, 355, 356, 0, 0, 357, 0, 358, 0,
	0, 359, 360, 362, 363, 361, 0, 364, 365, 367,
	366, 0, 0, 0, 0, 241, 368, 242, 369, 370,
	0, 371, 372, 0, 927, 373, 374, 0, 0, 375,
	243, 0, 376, 0, 244, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 245, 385, 246, 386, 0, 387,
	388, 389, 390, 391, 392, 247, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 0, 408, 409, 410, 411, 248,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 423, 425, 426, 427, 424, 430, 431, 0,
	432, 413, 414, 433, 0, 434, 249, 435, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 445, 441, 442,
	443, 250, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 455, 456, 0, 251, 252, 253,
	457, 0, 0, 458, 459, 254, 255, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 256, 257, 0, 474,
	473, 258, 939, 0, 499, 0, 475, 476, 259, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 265, 266, 267, 217, 218,
	268, 219, 269, 270, 220, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 221, 222, 223, 0,
	279, 224, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 225, 226, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 0,
	304, 305, 0, 306, 0, 227, 307, 308, 310, 313,
	309, 314, 315, 228, 229, 0, 0, 0, 0, 0,
	0, 0, 316, 317, 318, 230, 319, 320, 0, 321,
	0, 322, 0, 0, 0, 323, 0, 324, 231, 0,
	232, 0, 325, 326, 327, 328, 329, 330, 941, 234,
	235, 0, 0, 239, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 0, 334, 236, 336, 335, 337, 338,
	339, 237, 0, 238, 0, 341, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 240, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 361, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 241, 368, 242, 369, 370, 0, 371,
	372, 0, 927, 373, 374, 0, 0, 375, 243, 0,
	376, 0, 244, 377, 378, 379, 380, 381, 382, 383,
	0, 384, 245, 385, 246, 386, 0, 387, 388, 389,
	390, 391, 392, 247, 393, 394, 0, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	0, 407, 0, 408, 409, 410, 411, 248, 412, 0,
	416, 417, 418, 419, 420, 421, 422, 0, 428, 429,
	423, 425, 426, 427, 424, 430, 431, 0, 432, 413,
	414, 433, 0, 434, 249, 435, 436, 0, 446, 437,
	438, 439, 415, 440, 444, 445, 441, 442, 443, 250,
	0, 447, 448, 0, 449, 450, 451, 452, 453, 311,
	454, 312, 455, 456, 0, 251, 252, 253, 457, 0,
	0, 458, 459, 254, 255, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 256, 257, 0, 474, 473, 258,
	595, 0, 499, 0, 475, 476, 259, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 265, 266, 267, 217, 218, 268, 219,
	269, 270, 220, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 221, 222, 223, 0, 279, 224,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 225, 226, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 0, 304, 305,
	0, 306, 0, 227, 307, 308, 310, 313, 309, 314,
	315, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 230, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 231, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 233, 234, 235, 0,
	0, 239, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 236, 336, 335, 337, 338, 339, 237,
	0, 238, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 240, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 241, 368, 242, 369, 370, 0, 371, 372, 0,
	0, 373, 374, 0, 0, 375, 243, 0, 376, 0,
	244, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	245, 385, 246, 386, 0, 387, 388, 389, 390, 391,
	392, 247, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	0, 408, 409, 410, 411, 248, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 0, 428, 429, 423, 425,
	426, 427, 424, 430, 431, 0, 432, 413, 414, 433,
	0, 434, 249, 435, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 445, 441, 442, 443, 250, 0, 447,
	448, 594, 449, 450, 451, 452, 453, 311, 454, 312,
	455, 456, 0, 251, 252, 253, 457, 0, 0, 458,
	459, 254, 255, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 256, 257, 0, 474, 473, 258, 522, 0,
	499, 0, 475, 476, 259, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	521, 264, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 221, 222, 223, 0, 279, 224, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 225, 226, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 0, 304, 305, 0, 306,
	0, 227, 307, 308, 310, 313, 309, 314, 315, 228,
	229, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 231, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 233, 234, 235, 0, 0, 239,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 236, 336, 335, 337, 338, 339, 237, 0, 238,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	240, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 241,
	368, 242, 369, 370, 0, 371, 372, 0, 0, 373,
	374, 0, 0, 375, 243, 0, 376, 0, 244, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 245, 385,
	246, 520, 0, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 0, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 0, 432, 413, 414, 433, 0, 434,
	249, 435, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 250, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	0, 251, 252, 253, 457, 0, 0, 458, 459, 254,
	255, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	256, 257, 499, 474, 473, 258, 0, 0, 0, 0,
	475, 476, 259, 477, 478, 479, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 216, 0,
	1966, 0, 0, 265, 266, 267, 217, 218, 268, 219,
	269, 270, 220, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 221, 222, 223, 0, 279, 224,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 225, 226, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 0, 304, 305,
	0, 306, 0, 227, 307, 308, 310, 313, 309, 314,
	315, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 230, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 231, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 233, 234, 235, 0,
	0, 239, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 236, 336, 335, 337, 338, 339, 237,
	0, 238, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 240, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 241, 368, 242, 369, 370, 0, 371, 372, 0,
	0, 373, 374, 0, 0, 375, 243, 0, 376, 0,
	244, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	245, 385, 246, 386, 0, 387, 388, 389, 390, 391,
	392, 247, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	0, 408, 409, 410, 411, 248, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 0, 428, 429, 423, 425,
	426, 427, 424, 430, 431, 0, 432, 413, 414, 433,
	0, 434, 249, 435, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 445, 441, 442, 443, 250, 0, 447,
	448, 0, 449, 450, 451, 452, 453, 311, 454, 312,
	455, 456, 0, 251, 252, 253, 457, 0, 0, 458,
	459, 254, 255, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 256, 257, 0, 474, 473, 258, 499, 2469,
	0, 0, 475, 476, 259, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 216, 0, 0, 0, 0, 265,
	266, 267, 217, 218, 268, 219, 269, 270, 220, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	221, 222, 223, 0, 279, 224, 0, 0, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 0, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 502, 296, 297,
	298, 225, 226, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 0, 304, 305, 0, 306, 0, 227,
	307, 308, 310, 313, 309, 314, 315, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 316, 317, 318, 230,
	319, 320, 0, 321, 0, 322, 0, 0, 0, 323,
	0, 324, 231, 0, 232, 0, 325, 326, 327, 328,
	329, 330, 233, 234, 235, 0, 0, 239, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 0, 334, 236,
	336, 335, 337, 338, 339, 237, 0, 238, 0, 341,
	0, 0, 342, 343, 344, 0, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 240, 0,
	353, 354, 0, 0, 355, 356, 0, 0, 357, 0,
	358, 0, 0, 359, 360, 362, 363, 361, 0, 364,
	365, 367, 366, 0, 0, 0, 0, 241, 368, 242,
	369, 370, 0, 371, 372, 0, 0, 373, 374, 0,
	0, 375, 243, 0, 376, 0, 244, 377, 378, 379,
	380, 381, 382, 383, 0, 384, 245, 385, 246, 386,
	0, 387, 388, 389, 390, 391, 392, 247, 393, 394,
	0, 395, 396, 397, 398, 399, 0, 401, 402, 400,
	403, 404, 405, 406, 0, 407, 0, 408, 409, 410,
	411, 248, 412, 0, 416, 417, 418, 419, 420, 421,
	422, 0, 428, 429, 423, 425, 426, 427, 424, 430,
	431, 0, 432, 413, 414, 433, 0, 434, 249, 435,
	436, 0, 446, 437, 438, 439, 415, 440, 444, 445,
	441, 442, 443, 250, 0, 447, 448, 0, 449, 450,
	451, 452, 453, 311, 454, 312, 455, 456, 0, 251,
	252, 253, 457, 0, 0, 458, 459, 254, 255, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 256, 257,
	0, 474, 473, 258, 499, 2469, 0, 0, 475, 476,
	259, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 265, 266, 267, 217, 218,
	268, 219, 269, 270, 220, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 221, 222, 223, 0,
	279, 224, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 225, 226, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 0,
	304, 305, 0, 306, 0, 227, 307, 308, 310, 313,
	309, 314, 315, 228, 229, 0, 0, 0, 0, 0,
	0, 0, 316, 317, 318, 230, 319, 320, 0, 321,
	0, 322, 0, 0, 0, 323, 0, 324, 231, 0,
	232, 0, 325, 326, 327, 328, 329, 330, 233, 234,
	235, 0, 0, 239, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 0, 334, 236, 336, 335, 337, 338,
	339, 237, 0, 238, 0, 341, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 240, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 361, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 241, 368, 242, 369, 370, 0, 371,
	372, 0, 0, 373, 2466, 0, 0, 375, 243, 0,
	376, 0, 244, 377, 378, 379, 380, 381, 382, 383,
	0, 384, 245, 385, 246, 386, 0, 387, 388, 389,
	390, 391, 392, 247, 393, 394, 0, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	0, 407, 0, 408, 409, 410, 411, 248, 412, 0,
	416, 417, 418, 419, 420, 421, 422, 0, 428, 429,
	423, 425, 426, 427, 424, 430, 431, 0, 432, 413,
	414, 433, 0, 434, 249, 435, 436, 0, 446, 437,
	438, 439, 415, 440, 444, 445, 441, 442, 443, 250,
	0, 447, 448, 0, 449, 450, 451, 452, 453, 311,
	454, 312, 455, 456, 0, 251, 252, 253, 457, 0,
	0, 458, 459, 254, 255, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 256, 257, 499, 474, 473, 258,
	0, 0, 0, 0, 475, 476, 259, 477, 478, 479,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 216, 0, 0, 0, 0, 265, 266, 267,
	217, 218, 268, 219, 269, 270, 220, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 221, 222,
	223, 0, 279, 224, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 225,
	226, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 0, 304, 305, 0, 306, 0, 227, 307, 308,
	310, 313, 309, 314, 315, 228, 229, 0, 0, 0,
	0, 0, 0, 0, 316, 317, 318, 230, 319, 320,
	0, 321, 0, 322, 0, 0, 0, 323, 0, 324,
	231, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	233, 234, 235, 0, 0, 239, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 0, 334, 236, 336, 335,
	337, 338, 339, 237, 0, 238, 0, 341, 0, 0,
	342, 343, 344, 0, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 240, 0, 353, 354,
	0, 0, 355, 356, 0, 0, 357, 0, 358, 0,
	0, 359, 360, 362, 363, 361, 0, 364, 365, 367,
	366, 0, 0, 0, 0, 241, 368, 242, 369, 370,
	0, 371, 372, 0, 927, 373, 374, 0, 0, 375,
	243, 0, 376, 0, 244, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 245, 385, 246, 386, 0, 387,
	388, 389, 390, 391, 392, 247, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 0, 408, 409, 410, 411, 248,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 423, 425, 426, 427, 424, 430, 431, 0,
	432, 413, 414, 433, 0, 434, 249, 435, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 445, 441, 442,
	443, 250, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 455, 456, 0, 251, 252, 253,
	457, 0, 0, 458, 459, 254, 255, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 256, 257, 0, 474,
	473, 258, 1728, 0, 499, 0, 475, 476, 259, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 265, 266, 267, 217, 218,
	268, 219, 269, 270, 220, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 221, 222, 223, 0,
	279, 224, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 225, 226, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 0,
	304, 305, 0, 306, 0, 227, 307, 308, 310, 313,
	309, 314, 315, 228, 229, 0, 0, 0, 0, 0,
	0, 0, 316, 317, 318, 230, 319, 320, 0, 321,
	0, 322, 0, 0, 0, 323, 0, 324, 231, 0,
	232, 0, 325, 326, 327, 328, 329, 330, 233, 234,
	235, 0, 0, 239, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 0, 334, 236, 336, 335, 337, 338,
	339, 237, 0, 238, 0, 341, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 240, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 361, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 241, 368, 242, 369, 370, 0, 371,
	372, 0, 0, 373, 374, 0, 0, 375, 243, 0,
	376, 0, 244, 377, 378, 379, 380, 381, 382, 383,
	0, 384, 245, 385, 246, 386, 0, 387, 388, 389,
	390, 391, 392, 247, 393, 394, 0, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	0, 407, 0, 408, 409, 410, 411, 248, 412, 0,
	416, 417, 418, 419, 420, 421, 422, 0, 428, 429,
	423, 425, 426, 427, 424, 430, 431, 0, 432, 413,
	414, 433, 0, 434, 249, 435, 436, 0, 446, 437,
	438, 439, 415, 440, 444, 445, 441, 442, 443, 250,
	0, 447, 448, 0, 449, 450, 451, 452, 453, 311,
	454, 312, 455, 456, 0, 251, 252, 253, 457, 0,
	0, 458, 459, 254, 255, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 256, 257, 0, 474, 473, 258,
	1726, 0, 499, 0, 475, 476, 259, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 265, 266, 267, 217, 218, 268, 219,
	269, 270, 220, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 221, 222, 223, 0, 279, 224,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 225, 226, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 0, 304, 305,
	0, 306, 0, 227, 307, 308, 310, 313, 309, 314,
	315, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 230, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 231, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 233, 234, 235, 0,
	0, 239, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 236, 336, 335, 337, 338, 339, 237,
	0, 238, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 240, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 241, 368, 242, 369, 370, 0, 371, 372, 0,
	0, 373, 374, 0, 0, 375, 243, 0, 376, 0,
	244, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	245, 385, 246, 386, 0, 387, 388, 389, 390, 391,
	392, 247, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	0, 408, 409, 410, 411, 248, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 0, 428, 429, 423, 425,
	426, 427, 424, 430, 431, 0, 432, 413, 414, 433,
	0, 434, 249, 435, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 445, 441, 442, 443, 250, 0, 447,
	448, 0, 449, 450, 451, 452, 453, 311, 454, 312,
	455, 456, 0, 251, 252, 253, 457, 0, 0, 458,
	459, 254, 255, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 256, 257, 0, 474, 473, 258, 1724, 0,
	499, 0, 475, 476, 259, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 221, 222, 223, 0, 279, 224, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 225, 226, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 0, 304, 305, 0, 306,
	0, 227, 307, 308, 310, 313, 309, 314, 315, 228,
	229, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 231, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 233, 234, 235, 0, 0, 239,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 236, 336, 335, 337, 338, 339, 237, 0, 238,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	240, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 241,
	368, 242, 369, 370, 0, 371, 372, 0, 0, 373,
	374, 0, 0, 375, 243, 0, 376, 0, 244, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 245, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 0, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 0, 432, 413, 414, 433, 0, 434,
	249, 435, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 250, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	0, 251, 252, 253, 457, 0, 0, 458, 459, 254,
	255, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	256, 257, 499, 474, 473, 258, 0, 0, 0, 0,
	475, 476, 259, 477, 478, 479, 0, 0, 260, 261,
	262, 263, 1700, 264, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 265, 266, 267, 217, 218, 268, 219,
	269, 270, 220, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 221, 222, 223, 0, 279, 224,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 225, 226, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 0, 304, 305,
	0, 306, 0, 227, 307, 308, 310, 313, 309, 314,
	315, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 230, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 231, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 233, 234, 235, 0,
	0, 239, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 236, 336, 335, 337, 338, 339, 237,
	0, 238, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 240, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 241, 368, 242, 369, 370, 0, 371, 372, 0,
	0, 373, 374, 0, 0, 375, 243, 0, 376, 0,
	244, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	245, 385, 246, 386, 0, 387, 388, 389, 390, 391,
	392, 247, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	0, 408, 409, 410, 411, 248, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 0, 428, 429, 423, 425,
	426, 427, 424, 430, 431, 0, 432, 413, 414, 433,
	0, 434, 249, 435, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 445, 441, 442, 443, 250, 0, 447,
	448, 0, 449, 450, 451, 452, 453, 311, 454, 312,
	455, 456, 0, 251, 252, 253, 457, 0, 0, 458,
	459, 254, 255, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 256, 257, 0, 474, 473, 258, 1658, 0,
	499, 0, 475, 476, 259, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 221, 222, 223, 0, 279, 224, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 225, 226, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 0, 304, 305, 0, 306,
	0, 227, 307, 308, 310, 313, 309, 314, 315, 228,
	229, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 231, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 233, 234, 235, 0, 0, 239,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 236, 336, 335, 337, 338, 339, 237, 0, 238,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	240, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 241,
	368, 242, 369, 370, 0, 371, 372, 0, 0, 373,
	374, 0, 0, 375, 243, 0, 376, 0, 244, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 245, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 0, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 0, 432, 413, 414, 433, 0, 434,
	249, 435, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 250, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	0, 251, 252, 253, 457, 0, 0, 458, 459, 254,
	255, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	256, 257, 0, 474, 473, 258, 1656, 0, 499, 0,
	475, 476, 259, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 216, 0, 0, 0, 0, 265,
	266, 267, 217, 218, 268, 219, 269, 270, 220, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	221, 222, 223, 0, 279, 224, 0, 0, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 0, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 502, 296, 297,
	298, 225, 226, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 0, 304, 305, 0, 306, 0, 227,
	307, 308, 310, 313, 309, 314, 315, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 316, 317, 318, 230,
	319, 320, 0, 321, 0, 322, 0, 0, 0, 323,
	0, 324, 231, 0, 232, 0, 325, 326, 327, 328,
	329, 330, 233, 234, 235, 0, 0, 239, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 0, 334, 236,
	336, 335, 337, 338, 339, 237, 0, 238, 0, 341,
	0, 0, 342, 343, 344, 0, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 240, 0,
	353, 354, 0, 0, 355, 356, 0, 0, 357, 0,
	358, 0, 0, 359, 360, 362, 363, 361, 0, 364,
	365, 367, 366, 0, 0, 0, 0, 241, 368, 242,
	369, 370, 0, 371, 372, 0, 0, 373, 374, 0,
	0, 375, 243, 0, 376, 0, 244, 377, 378, 379,
	380, 381, 382, 383, 0, 384, 245, 385, 246, 386,
	0, 387, 388, 389, 390, 391, 392, 247, 393, 394,
	0, 395, 396, 397, 398, 399, 0, 401, 402, 400,
	403, 404, 405, 406, 0, 407, 0, 408, 409, 410,
	411, 248, 412, 0, 416, 417, 418, 419, 420, 421,
	422, 0, 428, 429, 423, 425, 426, 427, 424, 430,
	431, 0, 432, 413, 414, 433, 0, 434, 249, 435,
	436, 0, 446, 437, 438, 439, 415, 440, 444, 445,
	441, 442, 443, 250, 0, 447, 448, 0, 449, 450,
	451, 452, 453, 311, 454, 312, 455, 456, 0, 251,
	252, 253, 457, 0, 0, 458, 459, 254, 255, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 256, 257,
	0, 474, 473, 258, 636, 0, 499, 0, 475, 476,
	259, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 216, 0, 0, 0, 0, 265, 266, 267,
	217, 218, 268, 219, 269, 270, 220, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 221, 222,
	1201, 0, 279, 224, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 225,
	226, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 0, 304, 305, 0, 306, 0, 227, 307, 308,
	310, 313, 309, 314, 315, 228, 229, 0, 0, 0,
	0, 0, 0, 0, 316, 317, 318, 230, 319, 320,
	0, 321, 0, 322, 0, 0, 0, 323, 0, 324,
	231, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	233, 234, 235, 0, 0, 239, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 0, 334, 236, 336, 335,
	337, 338, 339, 237, 0, 238, 0, 341, 0, 0,
	342, 343, 344, 0, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 240, 0, 353, 354,
	0, 0, 355, 356, 0, 0, 357, 0, 358, 0,
	0, 359, 360, 362, 363, 637, 0, 364, 365, 367,
	366, 0, 0, 0, 0, 241, 368, 242, 369, 370,
	0, 371, 372, 0, 0, 373, 374, 0, 0, 375,
	243, 0, 376, 0, 244, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 245, 385, 246, 386, 0, 387,
	388, 389, 390, 391, 392, 247, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 0, 408, 409, 410, 411, 248,
	412, 0, 416, 417, 633, 419, 420, 421, 422, 0,
	428, 429, 423, 425, 426, 427, 424, 430, 431, 0,
	432, 413, 414, 433, 0, 434, 249, 435, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 445, 441, 442,
	443, 250, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 455, 456, 0, 632, 252, 253,
	457, 0, 0, 458, 459, 254, 255, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 256, 257, 0, 474,
	473, 258, 1551, 0, 499, 0, 475, 476, 259, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 265, 266, 267, 217, 218,
	268, 219, 269, 270, 220, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 221, 222, 223, 0,
	279, 224, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 225, 226, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 0,
	304, 305, 0, 306, 0, 227, 307, 308, 310, 313,
	309, 314, 315, 228, 229, 0, 0, 0, 0, 0,
	0, 0, 316, 317, 318, 230, 319, 320, 0, 321,
	0, 322, 0, 0, 0, 323, 0, 324, 231, 0,
	232, 0, 325, 326, 327, 328, 329, 330, 1550, 234,
	235, 0, 0, 239, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 0, 334, 236, 336, 335, 337, 338,
	339, 237, 0, 238, 0, 341, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 240, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 361, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 241, 368, 242, 369, 370, 0, 371,
	372, 0, 0, 373, 374, 0, 0, 375, 243, 0,
	376, 0, 244, 377, 378, 379, 380, 381, 382, 383,
	0, 384, 245, 385, 246, 386, 0, 387, 388, 389,
	390, 391, 392, 247, 393, 394, 0, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	0, 407, 0, 408, 409, 410, 411, 248, 412, 0,
	416, 417, 418, 419, 420, 421, 422, 0, 428, 429,
	423, 425, 426, 427, 424, 430, 431, 0, 432, 413,
	414, 433, 0, 434, 249, 435, 436, 0, 446, 437,
	438, 439, 415, 440, 444, 445, 441, 442, 443, 250,
	0, 447, 448, 0, 449, 450, 451, 452, 453, 311,
	454, 312, 455, 456, 0, 251, 252, 253, 457, 0,
	0, 458, 459, 254, 255, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 256, 257, 0, 474, 473, 258,
	636, 0, 499, 0, 475, 476, 259, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 265, 266, 267, 217, 218, 268, 219,
	269, 270, 220, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 221, 222, 1201, 0, 279, 224,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 225, 226, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 0, 304, 305,
	0, 306, 0, 227, 307, 308, 310, 313, 309, 314,
	315, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 230, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 231, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 233, 234, 235, 0,
	0, 239, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 236, 336, 335, 337, 338, 339, 237,
	0, 238, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 240, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 637, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 241, 368, 242, 369, 370, 0, 371, 372, 0,
	0, 373, 374, 0, 0, 375, 243, 0, 376, 0,
	244, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	245, 385, 246, 386, 0, 387, 388, 389, 390, 391,
	392, 247, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	0, 408, 409, 410, 411, 248, 412, 0, 416, 417,
	633, 419, 420, 421, 422, 0, 428, 429, 423, 425,
	426, 427, 424, 430, 431, 0, 432, 413, 414, 433,
	0, 434, 249, 435, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 445, 441, 442, 443, 250, 0, 447,
	448, 0, 449, 450, 451, 452, 453, 311, 454, 312,
	455, 456, 0, 632, 252, 253, 457, 0, 0, 458,
	1202, 254, 255, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 256, 257, 0, 474, 473, 258, 636, 0,
	499, 0, 475, 476, 259, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 221, 222, 223, 0, 626, 224, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 225, 226, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 0, 304, 305, 0, 306,
	0, 227, 307, 308, 310, 313, 309, 314, 315, 228,
	229, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 231, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 233, 234, 235, 0, 0, 239,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 236, 336, 335, 337, 338, 339, 237, 0, 238,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	240, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 637,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 241,
	368, 242, 369, 370, 0, 371, 372, 0, 0, 373,
	374, 0, 0, 375, 243, 0, 376, 0, 244, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 245, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 0, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 633, 419,
	420, 421, 422, 0, 428, 429, 423, 425, 426, 427,
	424, 1173, 431, 0, 432, 413, 414, 433, 0, 434,
	249, 435, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 250, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	0, 632, 252, 253, 457, 0, 0, 458, 459, 254,
	255, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	256, 257, 0, 474, 473, 258, 1140, 0, 499, 0,
	475, 476, 259, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 216, 0, 0, 0, 0, 265,
	266, 267, 217, 218, 268, 219, 269, 270, 220, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	221, 222, 223, 0, 279, 224, 0, 0, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 0, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 502, 296, 297,
	298, 225, 226, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 0, 304, 305, 0, 306, 0, 227,
	307, 308, 310, 313, 309, 314, 315, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 316, 317, 318, 230,
	319, 320, 0, 321, 0, 322, 0, 0, 0, 323,
	0, 324, 231, 0, 232, 0, 325, 326, 327, 328,
	329, 330, 1139, 234, 235, 0, 0, 239, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 0, 334, 236,
	336, 335, 337, 338, 339, 237, 0, 238, 0, 341,
	0, 0, 342, 343, 344, 0, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 240, 0,
	353, 354, 0, 0, 355, 356, 0, 0, 357, 0,
	358, 0, 0, 359, 360, 362, 363, 361, 0, 364,
	365, 367, 366, 0, 0, 0, 0, 241, 368, 242,
	369, 370, 0, 371, 372, 0, 0, 373, 374, 0,
	0, 375, 243, 0, 376, 0, 244, 377, 378, 379,
	380, 381, 382, 383, 0, 384, 245, 385, 246, 386,
	0, 387, 388, 389, 390, 391, 392, 247, 393, 394,
	0, 395, 396, 397, 398, 399, 0, 401, 402, 400,
	403, 404, 405, 406, 0, 407, 0, 408, 409, 410,
	411, 248, 412, 0, 416, 417, 418, 419, 420, 421,
	422, 0, 428, 429, 423, 425, 426, 427, 424, 430,
	431, 0, 432, 413, 414, 433, 0, 434, 249, 435,
	436, 0, 446, 437, 438, 439, 415, 440, 444, 445,
	441, 442, 443, 250, 0, 447, 448, 0, 449, 450,
	451, 452, 453, 311, 454, 312, 455, 456, 0, 251,
	252, 253, 457, 0, 0, 458, 459, 254, 255, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 256, 257,
	0, 474, 473, 258, 1136, 0, 499, 0, 475, 476,
	259, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 216, 0, 0, 0, 0, 265, 266, 267,
	217, 218, 268, 219, 269, 270, 220, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 221, 222,
	223, 0, 279, 224, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 225,
	226, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 0, 304, 305, 0, 306, 0, 227, 307, 308,
	310, 313, 309, 314, 315, 228, 229, 0, 0, 0,
	0, 0, 0, 0, 316, 317, 318, 230, 319, 320,
	0, 321, 0, 322, 0, 0, 0, 323, 0, 324,
	231, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	1135, 234, 235, 0, 0, 239, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 0, 334, 236, 336, 335,
	337, 338, 339, 237, 0, 238, 0, 341, 0, 0,
	342, 343, 344, 0, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 240, 0, 353, 354,
	0, 0, 355, 356, 0, 0, 357, 0, 358, 0,
	0, 359, 360, 362, 363, 361, 0, 364, 365, 367,
	366, 0, 0, 0, 0, 241, 368, 242, 369, 370,
	0, 371, 372, 0, 0, 373, 374, 0, 0, 375,
	243, 0, 376, 0, 244, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 245, 385, 246, 386, 0, 387,
	388, 389, 390, 391, 392, 247, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 0, 408, 409, 410, 411, 248,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 423, 425, 426, 427, 424, 430, 431, 0,
	432, 413, 414, 433, 0, 434, 249, 435, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 445, 441, 442,
	443, 250, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 455, 456, 0, 251, 252, 253,
	457, 0, 0, 458, 459, 254, 255, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 256, 257, 0, 474,
	473, 258, 1133, 0, 499, 0, 475, 476, 259, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 265, 266, 267, 217, 218,
	268, 219, 269, 270, 220, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 221, 222, 223, 0,
	279, 224, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 225, 226, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 0,
	304, 305, 0, 306, 0, 227, 307, 308, 310, 313,
	309, 314, 315, 228, 229, 0, 0, 0, 0, 0,
	0, 0, 316, 317, 318, 230, 319, 320, 0, 321,
	0, 322, 0, 0, 0, 323, 0, 324, 231, 0,
	232, 0, 325, 326, 327, 328, 329, 330, 1132, 234,
	235, 0, 0, 239, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 0, 334, 236, 336, 335, 337, 338,
	339, 237, 0, 238, 0, 341, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 240, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 361, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 241, 368, 242, 369, 370, 0, 371,
	372, 0, 0, 373, 374, 0, 0, 375, 243, 0,
	376, 0, 244, 377, 378, 379, 380, 381, 382, 383,
	0, 384, 245, 385, 246, 386, 0, 387, 388, 389,
	390, 391, 392, 247, 393, 394, 0, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	0, 407, 0, 408, 409, 410, 411, 248, 412, 0,
	416, 417, 418, 419, 420, 421, 422, 0, 428, 429,
	423, 425, 426, 427, 424, 430, 431, 0, 432, 413,
	414, 433, 0, 434, 249, 435, 436, 0, 446, 437,
	438, 439, 415, 440, 444, 445, 441, 442, 443, 250,
	0, 447, 448, 0, 449, 450, 451, 452, 453, 311,
	454, 312, 455, 456, 0, 251, 252, 253, 457, 0,
	0, 458, 459, 254, 255, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 256, 257, 0, 474, 473, 258,
	1130, 0, 499, 0, 475, 476, 259, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 265, 266, 267, 217, 218, 268, 219,
	269, 270, 220, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 221, 222, 223, 0, 279, 224,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 225, 226, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 0, 304, 305,
	0, 306, 0, 227, 307, 308, 310, 313, 309, 314,
	315, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 230, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 231, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 1129, 234, 235, 0,
	0, 239, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 236, 336, 335, 337, 338, 339, 237,
	0, 238, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 240, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 241, 368, 242, 369, 370, 0, 371, 372, 0,
	0, 373, 374, 0, 0, 375, 243, 0, 376, 0,
	244, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	245, 385, 246, 386, 0, 387, 388, 389, 390, 391,
	392, 247, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	0, 408, 409, 410, 411, 248, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 0, 428, 429, 423, 425,
	426, 427, 424, 430, 431, 0, 432, 413, 414, 433,
	0, 434, 249, 435, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 445, 441, 442, 443, 250, 0, 447,
	448, 0, 449, 450, 451, 452, 453, 311, 454, 312,
	455, 456, 0, 251, 252, 253, 457, 0, 0, 458,
	459, 254, 255, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 256, 257, 0, 474, 473, 258, 1126, 0,
	499, 0, 475, 476, 259, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 221, 222, 223, 0, 279, 224, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 225, 226, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 0, 304, 305, 0, 306,
	0, 227, 307, 308, 310, 313, 309, 314, 315, 228,
	229, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 231, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 1125, 234, 235, 0, 0, 239,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 236, 336, 335, 337, 338, 339, 237, 0, 238,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	240, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 241,
	368, 242, 369, 370, 0, 371, 372, 0, 0, 373,
	374, 0, 0, 375, 243, 0, 376, 0, 244, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 245, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 0, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 0, 432, 413, 414, 433, 0, 434,
	249, 435, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 250, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	0, 251, 252, 253, 457, 0, 0, 458, 459, 254,
	255, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	256, 257, 499, 474, 473, 258, 0, 0, 0, 0,
	475, 476, 259, 477, 478, 479, 0, 0, 260, 261,
	262, 263, 1114, 264, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 265, 266, 267, 217, 218, 268, 219,
	269, 270, 220, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 221, 222, 223, 0, 279, 224,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 225, 226, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 0, 304, 305,
	0, 306, 0, 227, 307, 308, 310, 313, 309, 314,
	315, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 230, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 231, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 233, 234, 235, 0,
	0, 239, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 236, 336, 335, 337, 338, 339, 237,
	0, 238, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 240, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 241, 368, 242, 369, 370, 0, 371, 372, 0,
	0, 373, 374, 0, 0, 375, 243, 0, 376, 0,
	244, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	245, 385, 246, 386, 0, 387, 388, 389, 390, 391,
	392, 247, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	0, 408, 409, 410, 411, 248, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 0, 428, 429, 423, 425,
	426, 427, 424, 430, 431, 0, 432, 413, 414, 433,
	0, 434, 249, 435, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 445, 441, 442, 443, 250, 0, 447,
	448, 0, 449, 450, 451, 452, 453, 311, 454, 312,
	455, 456, 0, 251, 252, 253, 457, 0, 0, 458,
	459, 254, 255, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 256, 257, 0, 474, 473, 258, 1112, 0,
	499, 0, 475, 476, 259, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 221, 222, 223, 0, 279, 224, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 225, 226, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 0, 304, 305, 0, 306,
	0, 227, 307, 308, 310, 313, 309, 314, 315, 228,
	229, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 231, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 1111, 234, 235, 0, 0, 239,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 236, 336, 335, 337, 338, 339, 237, 0, 238,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	240, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 241,
	368, 242, 369, 370, 0, 371, 372, 0, 0, 373,
	374, 0, 0, 375, 243, 0, 376, 0, 244, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 245, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 0, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 0, 432, 413, 414, 433, 0, 434,
	249, 435, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 250, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	0, 251, 252, 253, 457, 0, 0, 458, 459, 254,
	255, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	256, 257, 0, 474, 473, 258, 1106, 0, 499, 0,
	475, 476, 259, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 216, 0, 0, 0, 0, 265,
	266, 267, 217, 218, 268, 219, 269, 270, 220, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	221, 222, 223, 0, 279, 224, 0, 0, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 0, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 502, 296, 297,
	298, 225, 226, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 0, 304, 305, 0, 306, 0, 227,
	307, 308, 310, 313, 309, 314, 315, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 316, 317, 318, 230,
	319, 320, 0, 321, 0, 322, 0, 0, 0, 323,
	0, 324, 231, 0, 232, 0, 325, 326, 327, 328,
	329, 330, 233, 234, 235, 0, 0, 239, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 0, 334, 236,
	336, 335, 337, 338, 339, 237, 0, 238, 0, 341,
	0, 0, 342, 343, 344, 0, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 240, 0,
	353, 354, 0, 0, 355, 356, 0, 0, 357, 0,
	358, 0, 0, 359, 360, 362, 363, 361, 0, 364,
	365, 367, 366, 0, 0, 0, 0, 241, 368, 242,
	369, 370, 0, 371, 372, 0, 0, 373, 374, 0,
	0, 375, 243, 0, 376, 0, 244, 377, 378, 379,
	380, 381, 382, 383, 0, 384, 245, 385, 246, 386,
	0, 387, 388, 389, 390, 391, 392, 247, 393, 394,
	0, 395, 396, 397, 398, 399, 0, 401, 402, 400,
	403, 404, 405, 406, 0, 407, 0, 408, 409, 410,
	411, 248, 412, 0, 416, 417, 418, 419, 420, 421,
	422, 0, 428, 429, 423, 425, 426, 427, 424, 430,
	431, 0, 432, 413, 414, 433, 0, 434, 249, 435,
	436, 0, 446, 437, 438, 439, 415, 440, 444, 445,
	441, 442, 443, 250, 0, 447, 448, 0, 449, 450,
	451, 452, 453, 311, 454, 312, 455, 456, 0, 251,
	252, 253, 457, 0, 0, 458, 459, 254, 255, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 256, 257,
	0, 474, 473, 258, 1097, 0, 499, 0, 475, 476,
	259, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 216, 0, 0, 0, 0, 265, 266, 267,
	217, 218, 268, 219, 269, 270, 220, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 221, 222,
	223, 0, 279, 224, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 225,
	226, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 0, 304, 305, 0, 306, 0, 227, 307, 308,
	310, 313, 309, 314, 315, 228, 229, 0, 0, 0,
	0, 0, 0, 0, 316, 317, 318, 230, 319, 320,
	0, 321, 0, 322, 0, 0, 0, 323, 0, 324,
	231, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	1096, 234, 235, 0, 0, 239, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 0, 334, 236, 336, 335,
	337, 338, 339, 237, 0, 238, 0, 341, 0, 0,
	342, 343, 344, 0, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 240, 0, 353, 354,
	0, 0, 355, 356, 0, 0, 357, 0, 358, 0,
	0, 359, 360, 362, 363, 361, 0, 364, 365, 367,
	366, 0, 0, 0, 0, 241, 368, 242, 369, 370,
	0, 371, 372, 0, 0, 373, 374, 0, 0, 375,
	243, 0, 376, 0, 244, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 245, 385, 246, 386, 0, 387,
	388, 389, 390, 391, 392, 247, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 0, 408, 409, 410, 411, 248,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 423, 425, 426, 427, 424, 430, 431, 0,
	432, 413, 414, 433, 0, 434, 249, 435, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 445, 441, 442,
	443, 250, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 455, 456, 0, 251, 252, 253,
	457, 0, 0, 458, 459, 254, 255, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 256, 257, 0, 474,
	473, 258, 1092, 0, 499, 0, 475, 476, 259, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 265, 266, 267, 217, 218,
	268, 219, 269, 270, 220, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 221, 222, 223, 0,
	279, 224, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 225, 226, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 0,
	304, 305, 0, 306, 0, 227, 307, 308, 310, 313,
	309, 314, 315, 228, 229, 0, 0, 0, 0, 0,
	0, 0, 316, 317, 318, 230, 319, 320, 0, 321,
	0, 322, 0, 0, 0, 323, 0, 324, 231, 0,
	232, 0, 325, 326, 327, 328, 329, 330, 233, 234,
	235, 0, 0, 239, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 0, 334, 236, 336, 335, 337, 338,
	339, 237, 0, 238, 0, 341, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 240, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 361, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 241, 368, 242, 369, 370, 0, 371,
	372, 0, 0, 373, 374, 0, 0, 375, 243, 0,
	376, 0, 244, 377, 378, 379, 380, 381, 382, 383,
	0, 384, 245, 385, 246, 386, 0, 387, 388, 389,
	390, 391, 392, 247, 393, 394, 0, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	0, 407, 0, 408, 409, 410, 411, 248, 412, 0,
	416, 417, 418, 419, 420, 421, 422, 0, 428, 429,
	423, 425, 426, 427, 424, 430, 431, 0, 432, 413,
	414, 433, 0, 434, 249, 435, 436, 0, 446, 437,
	438, 439, 415, 440, 444, 445, 441, 442, 443, 250,
	0, 447, 448, 0, 449, 450, 451, 452, 453, 311,
	454, 312, 455, 456, 0, 251, 252, 253, 457, 0,
	0, 458, 459, 254, 255, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 256, 257, 0, 474, 473, 258,
	1088, 0, 499, 0, 475, 476, 259, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 265, 266, 267, 217, 218, 268, 219,
	269, 270, 220, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 221, 222, 223, 0, 279, 224,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 225, 226, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 0, 304, 305,
	0, 306, 0, 227, 307, 308, 310, 313, 309, 314,
	315, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 230, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 231, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 1090, 234, 235, 0,
	0, 239, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 236, 336, 335, 337, 338, 339, 237,
	0, 238, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 240, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 241, 368, 242, 369, 370, 0, 371, 372, 0,
	0, 373, 374, 0, 0, 375, 243, 0, 376, 0,
	244, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	245, 385, 246, 386, 0, 387, 388, 389, 390, 391,
	392, 247, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	0, 408, 409, 410, 411, 248, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 0, 428, 429, 423, 425,
	426, 427, 424, 430, 431, 0, 432, 413, 414, 433,
	0, 434, 249, 435, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 445, 441, 442, 443, 250, 0, 447,
	448, 0, 449, 450, 451, 452, 453, 311, 454, 312,
	455, 456, 0, 251, 252, 253, 457, 0, 0, 458,
	459, 254, 255, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 256, 257, 0, 474, 473, 258, 966, 0,
	499, 0, 475, 476, 259, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 221, 222, 223, 0, 279, 224, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 225, 226, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 0, 304, 305, 0, 306,
	0, 227, 307, 308, 310, 313, 309, 314, 315, 228,
	229, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 231, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 968, 234, 235, 0, 0, 239,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 236, 336, 335, 337, 338, 339, 237, 0, 238,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	240, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 241,
	368, 242, 369, 370, 0, 371, 372, 0, 0, 373,
	374, 0, 0, 375, 243, 0, 376, 0, 244, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 245, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 0, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 0, 432, 413, 414, 433, 0, 434,
	249, 435, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 250, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	0, 251, 252, 253, 457, 0, 0, 458, 459, 254,
	255, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	256, 257, 0, 474, 473, 258, 963, 0, 499, 0,
	475, 476, 259, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 216, 0, 0, 0, 0, 265,
	266, 267, 217, 218, 268, 219, 269, 270, 220, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	221, 222, 223, 0, 279, 224, 0, 0, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 0, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 502, 296, 297,
	298, 225, 226, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 0, 304, 305, 0, 306, 0, 227,
	307, 308, 310, 313, 309, 314, 315, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 316, 317, 318, 230,
	319, 320, 0, 321, 0, 322, 0, 0, 0, 323,
	0, 324, 231, 0, 232, 0, 325, 326, 327, 328,
	329, 330, 233, 234, 235, 0, 0, 239, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 0, 334, 236,
	336, 335, 337, 338, 339, 237, 0, 238, 0, 341,
	0, 0, 342, 343, 344, 0, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 240, 0,
	353, 354, 0, 0, 355, 356, 0, 0, 357, 0,
	358, 0, 0, 359, 360, 362, 363, 361, 0, 364,
	365, 367, 366, 0, 0, 0, 0, 241, 368, 242,
	369, 370, 0, 371, 372, 0, 0, 373, 374, 0,
	0, 375, 243, 0, 376, 0, 244, 377, 378, 379,
	380, 381, 382, 383, 0, 384, 245, 385, 246, 386,
	0, 387, 388, 389, 390, 391, 392, 247, 393, 394,
	0, 395, 396, 397, 398, 399, 0, 401, 402, 400,
	403, 404, 405, 406, 0, 407, 0, 408, 409, 410,
	411, 248, 412, 0, 416, 417, 418, 419, 420, 421,
	422, 0, 428, 429, 423, 425, 426, 427, 424, 430,
	431, 0, 432, 413, 414, 433, 0, 434, 249, 435,
	436, 0, 446, 437, 438, 439, 415, 440, 444, 445,
	441, 442, 443, 250, 0, 447, 448, 0, 449, 450,
	451, 452, 453, 311, 454, 312, 455, 456, 0, 251,
	252, 253, 457, 0, 0, 458, 459, 254, 255, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 256, 257,
	0, 474, 473, 258, 636, 0, 499, 0, 475, 476,
	259, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 216, 0, 0, 0, 0, 265, 266, 267,
	217, 218, 268, 219, 269, 270, 220, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 221, 222,
	223, 0, 626, 224, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 225,
	226, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 0, 304, 305, 0, 306, 0, 227, 307, 308,
	310, 313, 309, 314, 315, 228, 229, 0, 0, 0,
	0, 0, 0, 0, 316, 317, 318, 230, 319, 320,
	0, 321, 0, 322, 0, 0, 0, 323, 0, 324,
	231, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	233, 234, 235, 0, 0, 239, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 0, 334, 236, 336, 335,
	337, 338, 339, 237, 0, 238, 0, 341, 0, 0,
	342, 343, 344, 0, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 240, 0, 353, 354,
	0, 0, 355, 625, 0, 0, 357, 0, 358, 0,
	0, 359, 360, 362, 363, 637, 0, 364, 365, 367,
	366, 0, 0, 0, 0, 241, 368, 242, 369, 370,
	0, 371, 372, 0, 0, 373, 374, 0, 0, 375,
	243, 0, 376, 0, 244, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 245, 385, 246, 386, 0, 387,
	388, 389, 390, 391, 392, 247, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 0, 408, 409, 410, 411, 627,
	412, 0, 416, 417, 633, 419, 420, 421, 422, 0,
	428, 429, 423, 425, 426, 427, 424, 628, 431, 0,
	432, 413, 414, 433, 0, 434, 249, 435, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 445, 441, 442,
	443, 250, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 455, 456, 0, 632, 252, 253,
	457, 0, 0, 458, 630, 254, 255, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 256, 257, 0, 474,
	473, 258, 616, 0, 499, 0, 475, 476, 259, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 265, 266, 267, 217, 218,
	268, 219, 269, 270, 220, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 221, 222, 223, 0,
	279, 224, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 225, 226, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 0,
	304, 305, 0, 306, 0, 227, 307, 308, 310, 313,
	309, 314, 315, 228, 229, 0, 0, 0, 0, 0,
	0, 0, 316, 317, 318, 230, 319, 320, 0, 321,
	0, 322, 0, 0, 0, 323, 0, 324, 231, 0,
	232, 0, 325, 326, 327, 328, 329, 330, 233, 234,
	235, 0, 0, 239, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 0, 334, 236, 336, 335, 337, 338,
	339, 237, 0, 238, 0, 341, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 240, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 361, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 241, 368, 242, 369, 370, 0, 371,
	372, 0, 0, 373, 374, 0, 0, 375, 243, 0,
	376, 0, 244, 377, 378, 379, 380, 381, 382, 383,
	0, 384, 245, 385, 246, 386, 0, 387, 388, 389,
	390, 391, 392, 247, 393, 394, 0, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	0, 407, 0, 408, 409, 410, 411, 248, 412, 0,
	617, 417, 418, 419, 420, 421, 422, 0, 428, 429,
	423, 425, 426, 427, 424, 430, 431, 0, 432, 413,
	414, 433, 0, 434, 249, 435, 436, 0, 446, 437,
	438, 439, 415, 440, 444, 445, 441, 442, 443, 250,
	0, 447, 448, 0, 449, 450, 451, 452, 453, 311,
	454, 312, 455, 456, 0, 251, 252, 253, 457, 0,
	0, 458, 459, 254, 255, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 256, 257, 0, 474, 473, 258,
	612, 0, 499, 0, 475, 476, 259, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 265, 266, 267, 217, 218, 268, 219,
	269, 270, 220, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 221, 222, 223, 0, 279, 224,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 225, 226, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 0, 304, 305,
	0, 306, 0, 227, 307, 308, 310, 313, 309, 314,
	315, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 230, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 231, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 233, 234, 235, 0,
	0, 239, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 236, 336, 335, 337, 338, 339, 237,
	0, 238, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 240, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 241, 368, 242, 369, 370, 0, 371, 372, 0,
	0, 373, 374, 0, 0, 375, 243, 0, 376, 0,
	244, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	245, 385, 246, 386, 0, 387, 388, 389, 390, 391,
	392, 247, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	0, 408, 409, 410, 411, 248, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 0, 428, 429, 423, 425,
	426, 427, 424, 430, 431, 0, 432, 413, 414, 433,
	0, 434, 249, 435, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 445, 441, 442, 443, 250, 0, 447,
	448, 0, 449, 450, 451, 452, 453, 311, 454, 312,
	455, 456, 0, 251, 252, 253, 457, 0, 0, 458,
	459, 254, 255, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 256, 257, 0, 474, 473, 258, 601, 0,
	499, 0, 475, 476, 259, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 221, 222, 223, 0, 279, 224, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 225, 226, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 0, 304, 305, 0, 306,
	0, 227, 307, 308, 310, 313, 309, 314, 315, 228,
	229, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 231, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 233, 234, 235, 0, 0, 239,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 236, 336, 335, 337, 338, 339, 237, 0, 238,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	240, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 241,
	368, 242, 369, 370, 0, 371, 372, 0, 0, 373,
	374, 0, 0, 375, 243, 0, 376, 0, 244, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 245, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 0, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 0, 432, 413, 414, 433, 0, 434,
	249, 435, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 250, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	0, 251, 252, 253, 457, 0, 0, 458, 459, 254,
	255, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	256, 257, 0, 474, 473, 258, 544, 0, 499, 0,
	475, 476, 259, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 216, 0, 0, 0, 0, 265,
	266, 267, 217, 218, 268, 219, 269, 270, 220, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	221, 222, 223, 0, 279, 224, 0, 0, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 0, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 502, 296, 297,
	298, 225, 226, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 0, 304, 305, 0, 306, 0, 227,
	307, 308, 310, 313, 309, 314, 315, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 316, 317, 318, 230,
	319, 320, 0, 321, 0, 322, 0, 0, 0, 323,
	0, 324, 231, 0, 232, 0, 325, 326, 327, 328,
	329, 330, 233, 234, 235, 0, 0, 239, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 0, 334, 236,
	336, 335, 337, 338, 339, 237, 0, 238, 0, 341,
	0, 0, 342, 343, 344, 0, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 240, 0,
	353, 354, 0, 0, 355, 356, 0, 0, 357, 0,
	358, 0, 0, 359, 360, 362, 363, 361, 0, 364,
	365, 367, 366, 0, 0, 0, 0, 241, 368, 242,
	369, 370, 0, 371, 372, 0, 0, 373, 374, 0,
	0, 375, 243, 0, 376, 0, 244, 377, 378, 379,
	380, 381, 382, 383, 0, 384, 245, 385, 246, 386,
	0, 387, 388, 389, 390, 391, 392, 247, 393, 394,
	0, 395, 396, 397, 398, 399, 0, 401, 402, 400,
	403, 404, 405, 406, 0, 407, 0, 408, 409, 410,
	411, 248, 412, 0, 416, 417, 418, 419, 420, 421,
	422, 0, 428, 429, 423, 425, 426, 427, 424, 430,
	431, 0, 432, 413, 414, 433, 0, 434, 249, 435,
	436, 0, 446, 437, 438, 439, 415, 440, 444, 445,
	441, 442, 443, 250, 0, 447, 448, 0, 449, 450,
	451, 452, 453, 311, 454, 312, 455, 456, 0, 251,
	252, 253, 457, 0, 0, 458, 459, 254, 255, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 256, 257,
	499, 474, 473, 258, 0, 0, 0, 0, 475, 476,
	259, 477, 478, 479, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 221, 222, 223, 0, 279, 224, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 225, 226, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 0, 304, 305, 0, 306,
	0, 227, 307, 308, 310, 313, 309, 314, 315, 228,
	229, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 231, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 233, 234, 235, 0, 0, 239,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 236, 336, 335, 337, 338, 339, 237, 0, 238,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	240, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 241,
	368, 242, 369, 370, 0, 371, 372, 0, 0, 373,
	374, 0, 0, 375, 243, 0, 376, 0, 244, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 245, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 0, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 0, 432, 413, 414, 433, 0, 434,
	249, 435, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 250, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	0, 251, 252, 253, 457, 0, 0, 458, 459, 254,
	255, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	256, 257, 499, 474, 473, 258, 0, 0, 0, 0,
	475, 476, 259, 477, 478, 479, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 265, 266, 267, 217, 218, 268, 219,
	269, 270, 220, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 221, 222, 223, 0, 279, 224,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 225, 226, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 0, 304, 305,
	0, 306, 0, 227, 307, 308, 310, 313, 309, 314,
	315, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 230, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 231, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 2366, 234, 235, 0,
	0, 239, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 236, 336, 335, 337, 338, 339, 237,
	0, 238, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 240, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 241, 368, 242, 369, 370, 0, 371, 372, 0,
	0, 373, 374, 0, 0, 375, 243, 0, 376, 0,
	244, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	245, 385, 246, 386, 0, 387, 388, 389, 390, 391,
	392, 247, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	0, 408, 409, 410, 411, 248, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 0, 428, 429, 423, 425,
	426, 427, 424, 430, 431, 0, 432, 413, 414, 433,
	0, 434, 249, 435, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 445, 441, 442, 443, 250, 0, 447,
	448, 0, 449, 450, 451, 452, 453, 311, 454, 312,
	455, 456, 0, 251, 252, 253, 457, 0, 0, 458,
	459, 254, 255, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 256, 257, 499, 474, 473, 258, 0, 0,
	0, 0, 475, 476, 259, 477, 478, 479, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 265, 266, 267, 217, 218,
	268, 219, 269, 270, 220, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 221, 222, 223, 0,
	279, 224, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 225, 226, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 0,
	304, 305, 0, 306, 0, 227, 307, 308, 310, 313,
	309, 314, 315, 228, 229, 0, 0, 0, 0, 0,
	0, 0, 316, 317, 318, 230, 319, 320, 0, 321,
	0, 322, 0, 0, 0, 323, 0, 324, 231, 0,
	232, 0, 325, 326, 327, 328, 329, 330, 2364, 234,
	235, 0, 0, 239, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 0, 334, 236, 336, 335, 337, 338,
	339, 237, 0, 238, 0, 341, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 240, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 361, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 241, 368, 242, 369, 370, 0, 371,
	372, 0, 0, 373, 374, 0, 0, 375, 243, 0,
	376, 0, 244, 377, 378, 379, 380, 381, 382, 383,
	0, 384, 245, 385, 246, 386, 0, 387, 388, 389,
	390, 391, 392, 247, 393, 394, 0, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	0, 407, 0, 408, 409, 410, 411, 248, 412, 0,
	416, 417, 418, 419, 420, 421, 422, 0, 428, 429,
	423, 425, 426, 427, 424, 430, 431, 0, 432, 413,
	414, 433, 0, 434, 249, 435, 436, 0, 446, 437,
	438, 439, 415, 440, 444, 445, 441, 442, 443, 250,
	0, 447, 448, 0, 449, 450, 451, 452, 453, 311,
	454, 312, 455, 456, 0, 251, 252, 253, 457, 0,
	0, 458, 459, 254, 255, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 256, 257, 499, 474, 473, 258,
	0, 0, 0, 0, 475, 476, 259, 477, 478, 479,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 216, 0, 0, 0, 0, 265, 266, 267,
	217, 218, 268, 219, 269, 270, 220, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 221, 222,
	223, 0, 279, 224, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 225,
	226, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 0, 304, 305, 0, 306, 0, 227, 307, 308,
	310, 313, 309, 314, 315, 228, 229, 0, 0, 0,
	0, 0, 0, 0, 316, 317, 318, 230, 319, 320,
	0, 321, 0, 322, 0, 0, 0, 323, 0, 324,
	231, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	2353, 234, 235, 0, 0, 239, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 0, 334, 236, 336, 335,
	337, 338, 339, 237, 0, 238, 0, 341, 0, 0,
	342, 343, 344, 0, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 240, 0, 353, 354,
	0, 0, 355, 356, 0, 0, 357, 0, 358, 0,
	0, 359, 360, 362, 363, 361, 0, 364, 365, 367,
	366, 0, 0, 0, 0, 241, 368, 242, 369, 370,
	0, 371, 372, 0, 0, 373, 374, 0, 0, 375,
	243, 0, 376, 0, 244, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 245, 385, 246, 386, 0, 387,
	388, 389, 390, 391, 392, 247, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 0, 408, 409, 410, 411, 248,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 423, 425, 426, 427, 424, 430, 431, 0,
	432, 413, 414, 433, 0, 434, 249, 435, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 445, 441, 442,
	443, 250, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 455, 456, 0, 251, 252, 253,
	457, 0, 0, 458, 459, 254, 255, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 256, 257, 499, 474,
	473, 258, 0, 0, 0, 0, 475, 476, 259, 477,
	478, 479, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 216, 0, 0, 0, 0, 265,
	266, 267, 217, 218, 268, 219, 269, 270, 220, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	221, 222, 223, 0, 279, 224, 0, 0, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 0, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 502, 296, 297,
	298, 225, 226, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 0, 304, 305, 0, 306, 0, 227,
	307, 308, 310, 313, 309, 314, 315, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 316, 317, 318, 230,
	319, 320, 0, 321, 0, 322, 0, 0, 0, 323,
	0, 324, 231, 0, 232, 0, 325, 326, 327, 328,
	329, 330, 233, 234, 235, 0, 0, 239, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 0, 334, 236,
	336, 335, 337, 338, 339, 237, 0, 238, 0, 341,
	0, 0, 342, 343, 344, 0, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 240, 0,
	353, 354, 0, 0, 355, 356, 0, 0, 357, 0,
	358, 0, 0, 359, 360, 362, 363, 361, 0, 364,
	365, 367, 366, 0, 0, 0, 0, 241, 368, 242,
	369, 370, 0, 371, 372, 0, 0, 373, 374, 0,
	0, 375, 243, 0, 376, 0, 244, 377, 378, 379,
	380, 381, 382, 383, 0, 384, 245, 385, 246, 386,
	0, 387, 388, 389, 390, 391, 392, 247, 393, 394,
	0, 395, 396, 397, 398, 399, 0, 401, 402, 400,
	403, 404, 405, 406, 0, 407, 0, 408, 409, 410,
	411, 248, 412, 0, 617, 417, 418, 419, 420, 421,
	422, 0, 428, 429, 423, 425, 426, 427, 424, 430,
	431, 0, 432, 413, 414, 433, 0, 434, 249, 435,
	436, 0, 446, 437, 438, 439, 415, 440, 444, 445,
	441, 442, 443, 250, 0, 447, 448, 0, 449, 450,
	451, 452, 453, 311, 454, 312, 455, 456, 0, 251,
	252, 253, 457, 0, 0, 458, 459, 254, 255, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 256, 257,
	499, 474, 473, 258, 0, 0, 0, 0, 475, 476,
	259, 477, 478, 479, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 216, 0, 1564, 0,
	0, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 221, 222, 223, 0, 279, 224, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 225, 226, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 0, 304, 305, 0, 306,
	0, 227, 307, 308, 310, 313, 309, 314, 315, 228,
	229, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 231, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 233, 234, 235, 0, 0, 239,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 236, 336, 335, 337, 338, 339, 237, 0, 238,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	240, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 241,
	368, 242, 369, 370, 0, 371, 372, 0, 0, 373,
	374, 0, 0, 375, 243, 0, 376, 0, 244, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 245, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 0, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 0, 0, 413, 414, 433, 0, 434,
	249, 435, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 250, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	0, 251, 252, 253, 457, 0, 0, 458, 459, 254,
	255, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	256, 257, 499, 474, 473, 258, 0, 0, 0, 0,
	475, 476, 259, 477, 478, 479, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 265, 266, 267, 217, 218, 268, 219,
	269, 270, 220, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 221, 222, 223, 0, 279, 224,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 225, 226, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 0, 304, 305,
	0, 306, 0, 227, 307, 308, 310, 313, 309, 314,
	315, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 230, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 231, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 1555, 234, 235, 0,
	0, 239, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 236, 336, 335, 337, 338, 339, 237,
	0, 238, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 240, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 241, 368, 242, 369, 370, 0, 371, 372, 0,
	0, 373, 374, 0, 0, 375, 243, 0, 376, 0,
	244, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	245, 385, 246, 386, 0, 387, 388, 389, 390, 391,
	392, 247, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	0, 408, 409, 410, 411, 248, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 0, 428, 429, 423, 425,
	426, 427, 424, 430, 431, 0, 432, 413, 414, 433,
	0, 434, 249, 435, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 445, 441, 442, 443, 250, 0, 447,
	448, 0, 449, 450, 451, 452, 453, 311, 454, 312,
	455, 456, 0, 251, 252, 253, 457, 0, 0, 458,
	459, 254, 255, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 256, 257, 499, 474, 473, 258, 0, 0,
	0, 0, 475, 476, 259, 477, 478, 479, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 265, 266, 267, 217, 218,
	268, 219, 269, 270, 220, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 221, 222, 223, 0,
	279, 224, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 225, 226, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 0,
	304, 305, 0, 306, 0, 227, 307, 308, 310, 313,
	309, 314, 315, 228, 229, 0, 0, 0, 0, 0,
	0, 0, 316, 317, 318, 230, 319, 320, 0, 321,
	0, 322, 0, 0, 0, 323, 0, 324, 231, 0,
	232, 0, 325, 326, 327, 328, 329, 330, 233, 234,
	235, 0, 0, 239, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 0, 334, 236, 336, 335, 337, 338,
	339, 237, 0, 238, 0, 341, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 240, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 361, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 241, 368, 242, 369, 370, 0, 371,
	372, 0, 0, 373, 374, 0, 0, 375, 243, 0,
	376, 0, 244, 377, 378, 379, 380, 381, 382, 383,
	0, 384, 245, 385, 246, 386, 0, 387, 388, 389,
	390, 391, 392, 247, 901, 394, 0, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	0, 407, 0, 408, 409, 410, 411, 248, 412, 0,
	416, 417, 418, 419, 420, 421, 422, 0, 428, 429,
	423, 425, 426, 427, 424, 430, 431, 0, 432, 413,
	414, 433, 0, 434, 249, 435, 436, 0, 446, 437,
	438, 439, 415, 440, 444, 445, 441, 442, 443, 250,
	0, 447, 448, 0, 449, 450, 451, 452, 453, 311,
	454, 312, 455, 456, 0, 251, 252, 253, 457, 0,
	0, 458, 459, 254, 255, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 256, 257, 499, 474, 473, 258,
	0, 0, 0, 0, 475, 476, 259, 477, 478, 479,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 216, 0, 0, 0, 0, 265, 266, 267,
	217, 218, 268, 219, 269, 270, 220, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 221, 222,
	223, 0, 279, 224, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 225,
	226, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 0, 304, 305, 0, 306, 0, 227, 307, 308,
	310, 313, 309, 314, 315, 228, 229, 0, 0, 0,
	0, 0, 0, 0, 316, 317, 318, 230, 319, 320,
	0, 321, 0, 322, 0, 0, 0, 323, 0, 324,
	231, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	233, 234, 235, 0, 0, 239, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 0, 334, 236, 336, 335,
	337, 338, 339, 237, 0, 238, 0, 341, 0, 0,
	342, 343, 344, 0, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 240, 0, 353, 354,
	0, 0, 355, 356, 0, 0, 357, 0, 358, 0,
	0, 359, 360, 362, 363, 361, 0, 364, 365, 367,
	366, 0, 0, 0, 0, 241, 368, 242, 369, 370,
	0, 371, 372, 0, 0, 373, 374, 0, 0, 375,
	243, 0, 376, 0, 244, 377, 378, 379, 0, 381,
	382, 383, 0, 384, 245, 385, 246, 386, 0, 387,
	388, 389, 0, 391, 392, 247, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 0, 408, 409, 410, 411, 248,
	0, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 423, 425, 426, 427, 424, 430, 431, 0,
	432, 413, 414, 433, 0, 434, 249, 435, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 445, 441, 442,
	443, 250, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 455, 456, 0, 251, 252, 253,
	457, 0, 0, 458, 459, 254, 255, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 256, 257, 0, 474,
	473, 258, 0, 0, 0, 0, 475, 476, 259, 477,
	478, 479, 1301, 1302, 0, 1334, 1335, 1336, 1344, 1345,
	1346, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1337, 0, 0, 0, 0, 0, 0, 1304, 0, 0,
	1350, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1303, 0, 0, 0, 0, 0,
	0, 0, 1323, 0, 0, 0, 0, 0, 0, 1320,
	0, 0, 0, 1301, 1302, 0, 1334, 1335, 1336, 1344,
	1345, 1346, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1337, 0, 0, 0, 0, 0, 0, 1304, 0,
	0, 1350, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1326, 1327, 1328, 1329, 0, 1303, 0, 0, 0, 0,
	1309, 0, 0, 1323, 0, 0, 0, 0, 0, 0,
	1320, 0, 0, 0, 1301, 1302, 0, 1334, 1335, 1336,
	1344, 1345, 1346, 1341, 1351, 0, 0, 1331, 1332, 1333,
	0, 0, 1337, 0, 0, 0, 0, 0, 0, 1304,
	0, 0, 1350, 0, 0, 0, 0, 0, 1347, 1348,
	0, 0, 0, 0, 0, 0, 1318, 1319, 0, 0,
	0, 1326, 1327, 1328, 1329, 0, 1303, 0, 0, 0,
	1339, 1309, 0, 0, 1323, 0, 0, 1324, 0, 0,
	0, 1320, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1349, 1341, 1351, 0, 0, 1331, 1332,
	1333, 0, 0, 0, 0, 0, 0, 1338, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1347,
	1348, 0, 0, 0, 0, 0, 0, 1318, 1319, 0,
	0, 0, 1326, 1327, 1328, 1329, 0, 0, 0, 0,
	0, 1339, 1309, 0, 1330, 0, 0, 0, 1324, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1325, 0, 0, 1349, 1341, 1351, 0, 0, 1331,
	1332, 1333, 0, 0, 0, 0, 0, 0, 1338, 0,
	0, 0, 0, 0, 1342, 0, 0, 0, 0, 0,
	1347, 1348, 0, 0, 0, 0, 0, 0, 1318, 1319,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1339, 0, 0, 1330, 0, 0, 0, 1324,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1325, 0, 0, 1349, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1338,
	0, 0, 0, 0, 0, 1342, 0, 0, 0, 0,
	0, 0, 1340, 0, 0, 1315, 1316, 1322, 1321, 1317,
	1343, 0, 1314, 1312, 1313, 1305, 1306, 1307, 1308, 1310,
	1311, 0, 0, 0, 0, 0, 1330, 0, 0, 2253,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1325, 0, 0, 1301, 1302, 0, 1334,
	1335, 1336, 1344, 1345, 1346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1337, 0, 1342, 0, 0, 0,
	0, 1304, 0, 1340, 1350, 0, 1315, 1316, 1322, 1321,
	1317, 1343, 0, 1314, 1312, 1313, 1305, 1306, 1307, 1308,
	1310, 1311, 0, 0, 0, 0, 0, 0, 1303, 0,
	2250, 0, 0, 0, 0, 0, 1323, 0, 0, 0,
	0, 0, 0, 1320, 0, 0, 0, 1301, 1302, 0,
	1334, 1335, 1336, 1344, 1345, 1346, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1337, 0, 0, 0, 0,
	0, 0, 1304, 0, 1340, 1350, 0, 1315, 1316, 1322,
	1321, 1317, 1343, 0, 1314, 1312, 1313, 1305, 1306, 1307,
	1308, 1310, 1311, 0, 1326, 1327, 1328, 1329, 0, 1303,
	0, 2249, 0, 0, 1309, 0, 0, 1323, 0, 0,
	0, 0, 0, 0, 1320, 0, 0, 0, 1301, 1302,
	0, 1334, 1335, 1336, 1344, 1345, 1346, 1341, 1351, 0,
	0, 1331, 1332, 1333, 0, 0, 1337, 0, 0, 0,
	0, 0, 0, 1304, 0, 0, 1350, 0, 0, 0,
	0, 0, 1347, 1348, 0, 0, 0, 0, 0, 0,
	1318, 1319, 0, 0, 0, 1326, 1327, 1328, 1329, 0,
	1303, 0, 0, 0, 1339, 1309, 0, 0, 1323, 0,
	0, 1324, 0, 0, 0, 1320, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1349, 1341, 1351,
	0, 0, 1331, 1332, 1333, 0, 0, 0, 0, 0,
	0, 1338, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1347, 1348, 0, 0, 0, 0, 0,
	0, 1318, 1319, 0, 0, 0, 1326, 1327, 1328, 1329,
	0, 0, 0, 0, 0, 1339, 1309, 0, 1330, 0,
	0, 0, 1324, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1325, 0, 0, 1349, 1341,
	1351, 0, 0, 1331, 1332, 1333, 0, 0, 0, 0,
	0, 0, 1338, 0, 0, 0, 0, 0, 1342, 0,
	0, 0, 0, 0, 1347, 1348, 0, 0, 0, 0,
	0, 0, 1318, 1319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1339, 0, 0, 1330,
	0, 0, 0, 1324, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1325, 0, 0, 1349,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1338, 0, 0, 0, 0, 0, 1342,
	0, 0, 0, 0, 0, 0, 1340, 0, 0, 1315,
	1316, 1322, 1321, 1317, 1343, 0, 1314, 1312, 1313, 1305,
	1306, 1307, 1308, 1310, 1311, 0, 0, 0, 0, 0,
	1330, 0, 0, 2248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1325, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1342, 0, 0, 0, 0, 0, 0, 1340, 0, 0,
	1315, 1316, 1322, 1321, 1317, 1343, 0, 1314, 1312, 1313,
	1305, 1306, 1307, 1308, 1310, 1311, 0, 0, 0, 0,
	3054, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1301, 1302, 0, 1334, 1335,
	1336, 1344, 1345, 1346, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1337, 0, 0, 0, 0, 0, 0,
	1304, 0, 0, 1350, 0, 0, 0, 0, 1340, 0,
	0, 1315, 1316, 1322, 1321, 1317, 1343, 0, 1314, 1312,
	1313, 1305, 1306, 1307, 1308, 1310, 1311, 1303, 0, 0,
	0, 3050, 0, 0, 0, 1323, 0, 0, 0, 0,
	0, 0, 1320, 0, 0, 0, 1301, 1302, 0, 1334,
	1335, 1336, 1344, 1345, 1346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1337, 0, 0, 0, 0, 0,
	0, 1304, 0, 0, 1350, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1326, 1327, 1328, 1329, 0, 1303, 0,
	0, 0, 0, 1309, 0, 0, 1323, 0, 0, 0,
	0, 0, 0, 1320, 0, 0, 0, 1301, 1302, 0,
	1334, 1335, 1336, 1344, 1345, 1346, 1341, 1351, 0, 0,
	1331, 1332, 1333, 0, 0, 1337, 0, 0, 0, 0,
	0, 0, 1304, 0, 0, 1350, 0, 0, 0, 0,
	0, 1347, 1348, 0, 0, 0, 0, 0, 0, 1318,
	1319, 0, 0, 0, 1326, 1327, 1328, 1329, 0, 1303,
	0, 0, 0, 1339, 1309, 0, 0, 1323, 0, 0,
	1324, 0, 0, 0, 1320, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1349, 1341, 1351, 0,
	0, 1331, 1332, 1333, 0, 0, 0, 0, 0, 0,
	1338, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1347, 1348, 0, 0, 0, 0, 0, 0,
	1318, 1319, 0, 0, 0, 1326, 1327, 1328, 1329, 0,
	0, 0, 0, 0, 1339, 1309, 0, 1330, 0, 0,
	0, 1324, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1325, 0, 0, 1349, 1341, 1351,
	0, 0, 1331, 1332, 1333, 0, 0, 0, 0, 0,
	0, 1338, 0, 0, 0, 0, 0, 1342, 0, 0,
	0, 0, 0, 1347, 1348, 0, 0, 0, 0, 0,
	0, 1318, 1319, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1339, 0, 0, 1330, 0,
	0, 0, 1324, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1325, 0, 0, 1349, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1338, 0, 0, 0, 0, 0, 1342, 0,
	0, 0, 0, 0, 0, 1340, 0, 0, 1315, 1316,
	1322, 1321, 1317, 1343, 0, 1314, 1312, 1313, 1305, 1306,
	1307, 1308, 1310, 1311, 0, 0, 0, 0, 2992, 1330,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1325, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1342,
	0, 0, 0, 0, 0, 0, 1340, 0, 0, 1315,
	1316, 1322, 1321, 1317, 1343, 0, 1314, 1312, 1313, 1305,
	1306, 1307, 1308, 1310, 1311, 0, 0, 0, 0, 2991,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1301, 1302, 0, 1334, 1335, 1336,
	1344, 1345, 1346, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1337, 0, 0, 0, 0, 0, 0, 1304,
	0, 0, 1350, 0, 0, 0, 0, 1340, 0, 0,
	1315, 1316, 1322, 1321, 1317, 1343, 0, 1314, 1312, 1313,
	1305, 1306, 1307, 1308, 1310, 1311, 1303, 0, 0, 0,
	2941, 0, 0, 0, 1323, 0, 0, 0, 0, 0,
	0, 1320, 0, 0, 0, 1301, 1302, 0, 1334, 1335,
	1336, 1344, 1345, 1346, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1337, 0, 0, 0, 0, 0, 0,
	1304, 0, 0, 1350, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1326, 1327, 1328, 1329, 0, 1303, 0, 0,
	0, 0, 1309, 0, 0, 1323, 0, 0, 0, 0,
	0, 0, 1320, 0, 0, 0, 1301, 1302, 0, 1334,
	1335, 1336, 1344, 1345, 1346, 1341, 1351, 0, 0, 1331,
	1332, 1333, 0, 0, 1337, 0, 0, 0, 0, 0,
	0, 1304, 0, 0, 1350, 0, 0, 0, 0, 0,
	1347, 1348, 0, 0, 0, 0, 0, 0, 1318, 1319,
	0, 0, 0, 1326, 1327, 1328, 1329, 0, 1303, 0,
	0, 0, 1339, 1309, 0, 0, 1323, 0, 0, 1324,
	0, 0, 0, 1320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1349, 1341, 1351, 0, 0,
	1331, 1332, 1333, 0, 0, 0, 0, 0, 0, 1338,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1347, 1348, 0, 0, 0, 0, 0, 0, 1318,
	1319, 0, 0, 0, 1326, 1327, 1328, 1329, 0, 0,
	0, 0, 0, 1339, 1309, 0, 1330, 0, 0, 0,
	1324, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1325, 0, 0, 1349, 1341, 1351, 0,
	0, 1331, 1332, 1333, 0, 0, 0, 0, 0, 0,
	1338, 0, 0, 0, 0, 0, 1342, 0, 0, 0,
	0, 0, 1347, 1348, 0, 0, 0, 0, 0, 0,
	1318, 1319, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1339, 0, 0, 1330, 0, 0,
	0, 1324, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1325, 0, 0, 1349, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1338, 0, 0, 0, 0, 0, 1342, 0, 0,
	0, 0, 0, 0, 1340, 0, 0, 1315, 1316, 1322,
	1321, 1317, 1343, 0, 1314, 1312, 1313, 1305, 1306, 1307,
	1308, 1310, 1311, 0, 0, 0, 0, 2902, 1330, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1325, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1342, 0,
	0, 0, 0, 0, 0, 1340, 0, 0, 1315, 1316,
	1322, 1321, 1317, 1343, 0, 1314, 1312, 1313, 1305, 1306,
	1307, 1308, 1310, 1311, 0, 0, 0, 0, 2813, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1301, 1302, 0, 1334, 1335, 1336, 1344,
	1345, 1346, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1337, 0, 0, 0, 0, 0, 0, 1304, 0,
	0, 1350, 0, 0, 0, 0, 1340, 0, 0, 1315,
	1316, 1322, 1321, 1317, 1343, 0, 1314, 1312, 1313, 1305,
	1306, 1307, 1308, 1310, 1311, 1303, 0, 0, 0, 2771,
	0, 0, 0, 1323, 0, 0, 0, 0, 0, 0,
	1320, 0, 0, 0, 1301, 1302, 0, 1334, 1335, 1336,
	1344, 1345, 1346, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1337, 0, 0, 0, 0, 0, 0, 1304,
	0, 0, 1350, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1326, 1327, 1328, 1329, 0, 1303, 0, 0, 0,
	0, 1309, 0, 0, 1323, 0, 0, 0, 0, 0,
	0, 1320, 0, 0, 0, 1301, 1302, 0, 1334, 1335,
	1336, 1344, 1345, 1346, 1341, 1351, 0, 0, 1331, 1332,
	1333, 0, 0, 1337, 0, 0, 0, 0, 0, 0,
	1304, 0, 0, 1350, 0, 0, 0, 0, 0, 1347,
	1348, 0, 0, 0, 0, 0, 0, 1318, 1319, 0,
	0, 0, 1326, 1327, 1328, 1329, 0, 1303, 0, 0,
	0, 1339, 1309, 0, 0, 1323, 0, 0, 1324, 0,
	0, 0, 1320, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1349, 1341, 1351, 0, 0, 1331,
	1332, 1333, 0, 0, 0, 0, 0, 0, 1338, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1347, 1348, 0, 0, 0, 0, 0, 0, 1318, 1319,
	0, 0, 0, 1326, 1327, 1328, 1329, 0, 0, 0,
	0, 0, 1339, 1309, 0, 1330, 0, 0, 0, 1324,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1325, 0, 0, 1349, 1341, 1351, 0, 0,
	1331, 1332, 1333, 0, 0, 0, 0, 0, 0, 1338,
	0, 0, 0, 0, 0, 1342, 0, 0, 0, 0,
	0, 1347, 1348, 0, 0, 0, 0, 0, 0, 1318,
	1319, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1339, 0, 0, 1330, 0, 0, 0,
	1324, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1325, 0, 0, 1349, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1338, 0, 0, 0, 0, 0, 1342, 0, 0, 0,
	0, 0, 0, 1340, 0, 0, 1315, 1316, 1322, 1321,
	1317, 1343, 0, 1314, 1312, 1313, 1305, 1306, 1307, 1308,
	1310, 1311, 0, 0, 0, 0, 2770, 1330, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1325, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1342, 0, 0,
	0, 0, 0, 0, 1340, 0, 0, 1315, 1316, 1322,
	1321, 1317, 1343, 0, 1314, 1312, 1313, 1305, 1306, 1307,
	1308, 1310, 1311, 0, 0, 0, 0, 2769, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1301, 1302, 0, 1334, 1335, 1336, 1344, 1345,
	1346, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1337, 0, 0, 0, 0, 0, 0, 1304, 0, 0,
	1350, 0, 0, 0, 0, 1340, 0, 0, 1315, 1316,
	1322, 1321, 1317, 1343, 0, 1314, 1312, 1313, 1305, 1306,
	1307, 1308, 1310, 1311, 1303, 0, 0, 0, 2736, 0,
	0, 0, 1323, 0, 0, 0, 0, 0, 0, 1320,
	0, 0, 0, 1301, 1302, 0, 1334, 1335, 1336, 1344,
	1345, 1346, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1337, 0, 0, 0, 0, 0, 0, 1304, 0,
	0, 1350, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1326, 1327, 1328, 1329, 0, 1303, 0, 0, 0, 0,
	1309, 0, 0, 1323, 0, 0, 0, 0, 0, 0,
	1320, 0, 0, 0, 1301, 1302, 0, 1334, 1335, 1336,
	1344, 1345, 1346, 1341, 1351, 0, 0, 1331, 1332, 1333,
	0, 0, 1337, 0, 0, 0, 0, 0, 0, 1304,
	0, 0, 1350, 0, 0, 0, 0, 0, 1347, 1348,
	0, 0, 0, 0, 0, 0, 1318, 1319, 0, 0,
	0, 1326, 1327, 1328, 1329, 0, 1303, 0, 0, 0,
	1339, 1309, 0, 0, 1323, 0, 0, 1324, 0, 0,
	0, 1320, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1349, 1341, 1351, 0, 0, 1331, 1332,
	1333, 0, 0, 0, 0, 0, 0, 1338, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1347,
	1348, 0, 0, 0, 0, 0, 0, 1318, 1319, 0,
	0, 0, 1326, 1327, 1328, 1329, 0, 0, 0, 0,
	0, 1339, 1309, 0, 1330, 0, 0, 0, 1324, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1325, 0, 0, 1349, 1341, 1351, 0, 0, 1331,
	1332, 1333, 0, 0, 0, 0, 0, 0, 1338, 0,
	0, 0, 0, 0, 1342, 0, 0, 0, 0, 0,
	1347, 1348, 0, 0, 0, 0, 0, 0, 1318, 1319,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1339, 0, 0, 1330, 0, 0, 0, 1324,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1325, 0, 0, 1349, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1338,
	0, 0, 0, 0, 0, 1342, 0, 0, 0, 0,
	0, 0, 1340, 0, 0, 1315, 1316, 1322, 1321, 1317,
	1343, 0, 1314, 1312, 1313, 1305, 1306, 1307, 1308, 1310,
	1311, 0, 0, 0, 0, 2558, 1330, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1342, 0, 0, 0,
	0, 0, 0, 1340, 0, 0, 1315, 1316, 1322, 1321,
	1317, 1343, 0, 1314, 1312, 1313, 1305, 1306, 1307, 1308,
	1310, 1311, 0, 0, 0, 0, 2530, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1301, 1302, 0, 1334, 1335, 1336, 1344, 1345, 1346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1337,
	0, 0, 0, 0, 0, 0, 1304, 0, 0, 1350,
	0, 0, 0, 0, 1340, 0, 0, 1315, 1316, 1322,
	1321, 1317, 1343, 0, 1314, 1312, 1313, 1305, 1306, 1307,
	1308, 1310, 1311, 1303, 0, 0, 0, 1838, 0, 0,
	0, 1323, 0, 0, 0, 0, 0, 0, 1320, 0,
	0, 0, 1301, 1302, 0, 1334, 1335, 1336, 1344, 1345,
	1346, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1337, 0, 0, 0, 0, 0, 0, 1304, 0, 0,
	1350, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1326,
	1327, 1328, 1329, 0, 1303, 0, 0, 0, 0, 1309,
	0, 0, 1323, 0, 0, 0, 0, 0, 0, 1320,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1341, 1351, 0, 0, 1331, 1332, 1333, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1347, 1348, 0,
	0, 0, 0, 0, 0, 1318, 1319, 0, 0, 0,
	1326, 1327, 1328, 1329, 0, 0, 0, 0, 0, 1339,
	1309, 3130, 0, 0, 0, 0, 1324, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1349, 1341, 1351, 0, 0, 1331, 1332, 1333,
	0, 0, 0, 0, 0, 0, 1338, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1347, 1348,
	0, 0, 0, 0, 0, 0, 1318, 1319, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1339, 0, 0, 1330, 0, 0, 0, 1324, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1325, 0, 0, 1349, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1338, 0, 0,
	0, 0, 0, 1342, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1330, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1325, 0, 0, 1301, 1302, 0, 1334, 1335, 1336,
	1344, 1345, 1346, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1337, 0, 1342, 0, 0, 0, 0, 1304,
	0, 1340, 1350, 0, 1315, 1316, 1322, 1321, 1317, 1343,
	0, 1314, 1312, 1313, 1305, 1306, 1307, 1308, 1310, 1311,
	0, 0, 2208, 0, 0, 0, 1303, 0, 0, 0,
	0, 0, 0, 0, 1323, 0, 0, 0, 0, 0,
	0, 1320, 0, 0, 0, 1301, 1302, 0, 1334, 1335,
	1336, 1344, 1345, 1346, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1337, 0, 0, 0, 0, 2181, 0,
	1304, 0, 1340, 1350, 0, 1315, 1316, 1322, 1321, 1317,
	1343, 0, 1314, 1312, 1313, 1305, 1306, 1307, 1308, 1310,
	1311, 0, 1326, 1327, 1328, 1329, 0, 1303, 0, 0,
	0, 0, 1309, 0, 2295, 1323, 0, 2294, 0, 0,
	0, 0, 1320, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1341, 1351, 0, 0, 1331,
	1332, 1333, 0, 0, 0, 0, 0, 0, 2182, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1347, 1348, 0, 0, 0, 0, 0, 0, 1318, 1319,
	0, 0, 0, 1326, 1327, 1328, 1329, 0, 0, 0,
	0, 0, 1339, 1309, 0, 0, 0, 0, 0, 1324,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1349, 1341, 1351, 0, 0,
	1331, 1332, 1333, 0, 0, 0, 0, 0, 0, 1338,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1347, 1348, 0, 0, 0, 0, 0, 0, 1318,
	1319, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1339, 0, 0, 1330, 0, 0, 0,
	1324, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1325, 0, 0, 1349, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1338, 0, 0, 0, 0, 0, 1342, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1330, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1941, 0, 0, 1325, 0, 0, 1301, 1302, 0,
	1334, 1335, 1336, 1344, 1345, 1346, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1337, 0, 1342, 0, 1940,
	0, 0, 1304, 0, 1340, 1350, 0, 1315, 1316, 1322,
	1321, 1317, 1343, 0, 1314, 1312, 1313, 1305, 1306, 1307,
	1308, 1310, 1311, 0, 0, 0, 0, 0, 0, 1303,
	0, 0, 0, 0, 0, 0, 0, 1323, 0, 0,
	0, 0, 0, 0, 1320, 0, 0, 0, 1301, 1302,
	0, 1334, 1335, 1336, 1344, 1345, 1346, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1337, 0, 0, 0,
	0, 0, 0, 1304, 0, 1340, 1350, 0, 1315, 1316,
	1322, 1321, 1317, 1343, 0, 1314, 1312, 1313, 1305, 1306,
	1307, 1308, 1310, 1311, 0, 1326, 1327, 1328, 1329, 0,
	1303, 0, 0, 0, 0, 1309, 0, 0, 1323, 0,
	0, 0, 0, 0, 0, 1320, 0, 0, 0, 1301,
	1302, 0, 1334, 1335, 1336, 1344, 1345, 1346, 1341, 1351,
	0, 0, 1331, 1332, 1333, 0, 0, 1337, 0, 0,
	0, 0, 0, 0, 1304, 0, 0, 1350, 0, 0,
	0, 0, 0, 1347, 1348, 0, 0, 0, 0, 0,
	0, 1318, 1319, 0, 0, 0, 1326, 1327, 1328, 1329,
	0, 1303, 0, 0, 0, 1339, 1309, 0, 0, 1323,
	0, 0, 1324, 0, 0, 0, 1320, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1349, 1341,
	1351, 0, 0, 1331, 1332, 1333, 0, 0, 0, 0,
	0, 0, 1338, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1347, 1348, 0, 0, 0, 0,
	0, 0, 1318, 1319, 0, 0, 0, 1326, 1327, 1328,
	1329, 0, 0, 0, 0, 0, 1339, 1309, 0, 1330,
	0, 0, 0, 1324, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1325, 0, 0, 1349,
	1341, 1351, 0, 0, 1331, 1332, 1333, 0, 0, 0,
	0, 0, 0, 1338, 731, 0, 0, 0, 0, 1342,
	0, 0, 0, 0, 0, 1347, 1348, 0, 0, 0,
	0, 0, 0, 1318, 1319, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1339, 0, 0,
	1330, 0, 0, 0, 1324, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1325, 0, 0,
	1349, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1338, 0, 0, 0, 0, 0,
	1342, 0, 0, 0, 0, 0, 0, 1340, 0, 0,
	1315, 1316, 1322, 1321, 1317, 1343, 0, 1314, 1312, 1313,
	1305, 1306, 1307, 1308, 1310, 1311, 0, 0, 0, 0,
	0, 1330, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1325, 0,
	0, 0, 1301, 1302, 0, 1334, 1335, 1336, 1344, 1345,
	1346, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1337, 1342, 0, 0, 0, 0, 0, 1304, 1340, 0,
	1350, 1315, 1316, 1322, 1321, 1317, 1343, 0, 1314, 1312,
	1313, 1305, 1306, 1307, 1308, 1310, 1311, 0, 0, 0,
	0, 0, 0, 2548, 1303, 0, 0, 0, 0, 0,
	0, 0, 1323, 0, 0, 0, 0, 0, 0, 1320,
	0, 0, 0, 1301, 1302, 0, 1334, 1335, 1336, 1344,
	1345, 1346, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1337, 0, 0, 0, 2296, 0, 0, 1304, 1340,
	0, 1350, 1315, 1316, 1322, 1321, 1317, 1343, 0, 1314,
	1312, 1313, 1305, 1306, 1307, 1308, 1310, 1311, 0, 0,
	1326, 1327, 1328, 1329, 0, 1303, 0, 0, 0, 0,
	1309, 0, 0, 1323, 0, 2301, 0, 0, 0, 0,
	1320, 0, 0, 0, 1301, 1302, 0, 1334, 1335, 1336,
	1344, 1345, 1346, 1341, 1351, 0, 0, 1331, 1332, 1333,
	0, 0, 1337, 0, 0, 0, 0, 0, 0, 1304,
	0, 0, 1350, 0, 0, 0, 0, 0, 1347, 1348,
	0, 0, 0, 0, 0, 0, 1318, 1319, 0, 0,
	0, 1326, 1327, 1328, 1329, 0, 1303, 0, 0, 0,
	1339, 1309, 0, 0, 1323, 0, 0, 1324, 0, 0,
	0, 1320, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1349, 1341, 1351, 0, 0, 1331, 1332,
	1333, 0, 0, 0, 0, 0, 0, 1338, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1347,
	1348, 0, 0, 0, 0, 0, 0, 1318, 1319, 0,
	0, 0, 1326, 1327, 1328, 1329, 0, 0, 0, 0,
	0, 1339, 1309, 0, 1330, 0, 0, 0, 1324, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1325, 0, 0, 1349, 1341, 1351, 0, 0, 1331,
	1332, 1333, 0, 0, 0, 0, 0, 0, 1338, 0,
	0, 0, 0, 0, 1342, 0, 0, 0, 0, 0,
	1347, 1348, 0, 0, 0, 0, 0, 0, 1318, 1319,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1339, 0, 0, 1330, 0, 0, 0, 1324,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1325, 0, 0, 1349, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1338,
	0, 0, 0, 0, 0, 1342, 0, 0, 0, 0,
	0, 0, 1340, 0, 2263, 1315, 1316, 1322, 1321, 1317,
	1343, 0, 1314, 1312, 1313, 1305, 1306, 1307, 1308, 1310,
	1311, 0, 0, 0, 0, 0, 1330, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1325, 0, 0, 1301, 1302, 0, 1334,
	1335, 1336, 1344, 1345, 1346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1337, 0, 1342, 0, 2247, 0,
	0, 1304, 0, 1340, 1350, 0, 1315, 1316, 1322, 1321,
	1317, 1343, 0, 1314, 1312, 1313, 1305, 1306, 1307, 1308,
	1310, 1311, 0, 0, 0, 0, 0, 0, 1303, 0,
	0, 0, 0, 0, 0, 0, 1323, 0, 0, 0,
	0, 0, 0, 1320, 0, 0, 0, 1301, 1302, 0,
	1334, 1335, 1336, 1344, 1345, 1346, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1337, 0, 0, 0, 0,
	0, 0, 1304, 0, 1340, 1350, 0, 1315, 1316, 1322,
	1321, 1317, 1343, 0, 1314, 1312, 1313, 1305, 1306, 1307,
	1308, 1310, 1311, 0, 1326, 1327, 1328, 1329, 0, 1303,
	0, 0, 0, 0, 1309, 0, 0, 1323, 0, 0,
	0, 0, 0, 0, 1320, 0, 0, 0, 1301, 1302,
	0, 1334, 1335, 1336, 1344, 1345, 1346, 1341, 1351, 0,
	0, 1331, 1332, 1333, 0, 0, 1337, 0, 0, 0,
	0, 0, 0, 1304, 0, 0, 1350, 0, 0, 0,
	0, 0, 1347, 1348, 0, 0, 0, 0, 0, 0,
	1318, 1319, 0, 0, 0, 1326, 1327, 1328, 1329, 0,
	1303, 0, 0, 0, 1339, 1309, 0, 0, 1323, 0,
	0, 1324, 0, 0, 0, 1320, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1349, 1341, 1351,
	0, 0, 1331, 1332, 1333, 0, 0, 0, 0, 0,
	0, 1338, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1347, 1348, 0, 0, 0, 0, 0,
	0, 1318, 1319, 0, 0, 0, 1326, 1327, 1328, 1329,
	0, 0, 0, 0, 0, 1339, 1309, 0, 1330, 0,
	0, 0, 1324, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1325, 0, 0, 1349, 1341,
	1351, 0, 0, 1331, 1332, 1333, 0, 0, 0, 0,
	0, 0, 1338, 0, 0, 0, 0, 0, 1342, 0,
	0, 0, 0, 0, 1347, 1348, 0, 0, 0, 0,
	0, 0, 1318, 1319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1339, 0, 0, 1330,
	0, 0, 0, 1324, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1325, 0, 0, 1349,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1342,
	0, 0, 0, 0, 0, 0, 1340, 0, 0, 1315,
	1316, 1322, 1321, 1317, 1343, 0, 1314, 1312, 1313, 1305,
	1306, 1307, 1308, 1310, 1311, 0, 0, 0, 0, 0,
	1330, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1325, 0, 0,
	1301, 1302, 0, 1334, 1335, 1336, 1344, 1345, 1346, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1342, 0, 0, 0, 0, 1304, 0, 1340, 1350, 0,
	1315, 1316, 1322, 1321, 1317, 1343, 0, 1314, 1312, 1313,
	1305, 1306, 1307, 1308, 1310, 1311, 0, 0, 0, 0,
	0, 0, 1303, 0, 0, 0, 0, 0, 0, 0,
	1323, 0, 0, 0, 0, 0, 0, 1320, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1340, 0,
	0, 1315, 1316, 1322, 1321, 1317, 1343, 0, 1314, 1312,
	1313, 1305, 1306, 1307, 1308, 1310, 1311, 0, 1326, 1327,
	1328, 1329, 0, 0, 0, 0, 0, 0, 1309, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1618, 0, 0, 0, 0, 0, 0, 0,
	0, 1341, 1351, 0, 0, 1331, 1332, 1333, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1629, 1614, 1619,
	1602, 1639, 1638, 0, 1318, 1319, 1604, 1603, 0, 0,
	0, 0, 0, 0, 1648, 1647, 0, 0, 1339, 0,
	0, 0, 0, 0, 0, 1324, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1640, 0, 1636, 1635, 0, 0, 0,
	0, 0, 0, 0, 0, 1634, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1330, 1633, 1631, 1632, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1325,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1613, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1342, 1622, 1617, 1623, 1624, 1625, 1626, 1627,
	0, 1621, 0, 0, 0, 0, 0, 0, 0, 0,
	1645, 1646, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1606, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1637, 0, 0, 0, 1615, 1616, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1618, 0,
	1340, 0, 0, 1315, 1316, 1322, 1321, 1317, 1343, 0,
	1314, 1312, 1313, 1305, 1306, 1307, 1308, 1310, 1311, 0,
	0, 1630, 0, 0, 0, 1759, 1757, 1758, 1761, 1760,
	0, 0, 0, 1629, 1614, 1619, 1602, 1639, 1638, 0,
	0, 0, 1604, 1603, 663, 0, 693, 0, 0, 0,
	1648, 1647, 0, 0, 0, 0, 0, 0, 1607, 1608,
	1609, 1610, 0, 0, 0, 0, 670, 0, 0, 0,
	0, 0, 1628, 1611, 0, 0, 0, 0, 668, 0,
	0, 0, 0, 1650, 0, 0, 0, 0, 0, 1640,
	0, 1636, 1635, 0, 0, 0, 0, 0, 0, 0,
	1605, 1634, 669, 1641, 1642, 1643, 1644, 671, 0, 0,
	0, 698, 0, 0, 0, 0, 0, 677, 678, 0,
	0, 0, 688, 0, 0, 0, 0, 0, 1612, 1633,
	1631, 1632, 0, 1649, 0, 694, 672, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1613, 0,
	692, 0, 0, 0, 0, 0, 0, 0, 0, 1622,
	1617, 1623, 1624, 1625, 1626, 1627, 0, 1621, 0, 0,
	0, 0, 0, 0, 0, 0, 1645, 1646, 0, 673,
	0, 0, 0, 0, 0, 667, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	674, 675, 0, 0, 0, 0, 1606, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1637,
	0, 0, 681, 1615, 1616, 0, 0, 0, 0, 676,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 680, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 695, 0, 1630, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1607, 1608, 1609, 1610, 0, 0,
	679, 0, 0, 0, 0, 0, 0, 0, 1628, 1611,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1650,
	0, 0, 0, 0, 0, 0, 690, 0, 0, 0,
	0, 0, 0, 0, 0, 685, 1605, 0, 0, 1641,
	1642, 1643, 1644, 0, 0, 0, 0, 665, 683, 696,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 666, 1612, 0, 0, 0, 0, 1649,
	0, 0, 0, 686, 0, 0, 684, 0, 0, 0,
	699, 700, 0, 0, 0, 0, 0, 697, 0, 0,
	0, 0, 0, 0, 687, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	689,
}
var sqlPact = [...]int{

	511, -1000, -22, -1000, -1000, -1000, 176, -1000, -1000, -1000,
	-1000, 174, 173, 168, -1000, 167, 165, 159, 157, 148,
	147, 146, 145, 144, 140, 135, 134, -1000, -1000, 133,
	-1000, -1000, -1000, -1000, 132, 131, 130, -1000, 129, 1447,
	31430, 128, 121, 110, 2331, 49596, 1496, 109, 108, -1000,
	105, 1883, 36826, 1119, 1382, -1000, 101, 100, 1133, 49214,
	327, 1937, 34116, 36438, 2003, 48826, 31042, 1896, 33728, 48438,
	-1000, -1000, 1041, -1000, -1000, 48050, 98, 97, 95, 94,
	92, -1000, 91, 47662, 83, 81, 80, 79, 78, 76,
	75, 73, -1000, 72, 70, 68, 67, 62, 61, 60,
	59, 58, 56, 55, 54, 53, 52, 48, 47, -1000,
	58442, 46, 45, 42, -1000, 1295, 41, 40, 39, 38,
	37, -1000, -1000, 36, 33, 32, 31, 30, 29, -1000,
	107, 28, 27, 26, 21, 17, -1000, 1072, 681, 3073,
	13696, 1198, 1195, 1189, 1185, 1182, 772, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 52270, 49596, 16,
	-38, 14, -1000, 2368, 791, 23610, 511, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 36050,
	35662, 35274, 29490, 47274, 46886, 10803, 10803, 922, -1000, -1000,
	-1000, -1000, -1000, -24, 32576, 49596, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 234, -1000, -1000, -1000, -1000, -1000, -1000, 20002, 430,
	19577, 548, 19152, 287, 382, -1000, -1000, -1000, 229, -1000,
	-1000, -1000, -1000, 1226, -1000, -1000, -1000, -1000, 46498, 46110,
	1925, 45722, 29092, 28694, 45334, 1769, 1760, 44946, -1000, -1000,
	44558, -1000, -1000, 2125, 1921, 1920, 34886, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 44176, 43788, 43400, 43012,
	42624, 28296, 27898, 591, -1000, -1000, -1000, -1000, 25162, 588,
	-1000, -1000, -1000, -1000, -1000, 11, -1000, 9, 8, -1000,
	6, 5, 3, -3, -4, -5, -6, -7, -1000, -8,
	-9, -1000, -10, -14, -1000, -17, -19, 2074, 1553, 1440,
	42236, 1005, 49596, -1000, 1494, -81, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 587, 49596, -1000, -1000, 20413, 106, -1000,
	586, -1000, 1895, -1000, 20413, 106, -1000, 1482, 245, 1424,
	-1000, -1000, -1000, 1310, 1076, -1000, -1000, 49596, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2559, 1364, 585, 41848, -1000,
	1827, -1000, 720, 14518, -1000, 906, -1000, 14518, 227, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1526, 1155, 2478, 27500, 1450,
	2325, 2106, 2557, 1679, 2087, 2054, 2037, 2021, 2016, 2553,
	1089, 2551, 1117, 2550, 2009, 1993, 2524, 1365, 837, 2549,
	2548, 1966, 1893, -1000, -1000, -1000, -1000, 1078, -1000, -1000,
	-1000, -1000, -1000, -1000, 38362, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1072, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1617, 2284, 2284,
	2284, 2352, 362, 360, -1000, 107, -1000, 1426, -1000, 1331,
	-1000, -1000, -1000, 57637, -1000, -1000, 20413, 20413, 20413, 20413,
	20413, 1315, -1000, -1000, -1000, 602, -1000, 582, 489, 12037,
	-1000, -1000, -1000, -1000, 581, 2533, -1000, 727, -1000, -1000,
	-1000, -1000, 2458, -1000, -1000, -1000, 381, 20413, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 225, 731, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	498, 1203, 497, 497, 497, -1000, -1000, 758, -1000, -1000,
	683, -1000, 680, -1000, -1000, -1000, 1924, 580, 578, -1000,
	571, 567, 555, -1000, -1000, -1000, 554, 553, 552, 550,
	549, 546, 545, 542, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 758, 758, -1000, 540, 529, 528, 526, 524,
	521, 520, 518, 517, 1527, -1000, -1000, 1527, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 921, 51124, -1000, -1000, -1000,
	-26, 49596, -1000, 382, -26, -1000, -1000, 516, -1000, 14929,
	14929, 14929, -1000, -1000, 1479, 20413, -1000, 1660, -1000, 5057,
	-233, 663, 24774, -1000, 22834, 663, 619, 27102, -1000, 1885,
	-1000, -1000, 513, 222, -1000, -1000, -1000, -1000, -1000, -1000,
	1537, 2177, 1013, -1000, 1164, 2175, -1000, 3163, 2162, 1163,
	-1000, -1000, 739, 2159, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1439, -1000, -1000, 1388, 2156, -168,
	1975, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1546, -1000, 29886,
	32576, -27, -1000, -1000, -72, -1000, 10407, 57637, -1000, -1000,
	-1000, 57637, 684, -1000, -1000, 2154, -1000, 57637, 674, -1000,
	-1000, 2150, -1000, 1866, 49596, 10803, 49596, 49596, -1000, 512,
	1608, 1473, -1000, -1000, 32194, 3163, 1607, -1000, -1000, 734,
	1603, -1000, -1000, 1596, -1000, 382, -1000, -1000, 41460, 51888,
	734, 1590, -1000, -1000, -1000, 38362, -1000, 49596, -1000, 49596,
	-1000, 1036, -1000, 51506, 139, 2146, -1000, -1000, 139, 2143,
	-1000, 139, 2141, -1000, 137, 2137, -1000, -1000, 1390, 2129,
	-1000, -79, 2121, -1000, -1000, -79, 2114, -1000, -1000, 20413,
	-41, -1000, -1000, -1000, 791, 30654, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 41072, 29886, 32194, 49596, 34498, 29886, 570,
	57637, -1000, 2421, 58394, 29886, 57637, -1000, 32194, 49596, 1918,
	-1000, 40684, 40296, 2324, 716, -1000, -1000, 49596, -1000, 20413,
	-1000, 2415, 1620, -35, -1000, -1000, -1000, -1000, -1000, 1647,
	1690, 881, 1048, -1000, 14518, 14518, 2227, -1000, 220, 10803,
	-1000, -1000, 966, 1667, -1000, -1000, -1000, -1000, 29886, 29886,
	-1000, 39908, -1000, -1000, -1000, 1327, 49596, -1000, -1000, 1912,
	-1000, 31812, 49596, -1000, 49596, -1000, 49596, -1000, 49596, -1000,
	49596, -1000, -1000, -1000, -1000, -1000, 2081, 1250, 1212, -1000,
	49596, -1000, 49596, -1000, -1000, -1000, 1645, -1000, -1000, -1000,
	39526, 39138, 38750, -1000, -1000, 1137, -1000, 965, -1000, -1000,
	141, -1000, -1000, 1617, -1000, 1442, 1735, 18727, 1710, 20413,
	107, -1000, -1000, 107, 107, 13271, -1000, -1000, -1000, 49596,
	-1000, 58148, 58394, 10803, 932, 20413, 20413, 20413, 20413, 20413,
	20413, 20413, 20413, 20413, 20413, 20413, 20413, 20413, 20413, 20413,
	20413, 20413, 20413, 20413, 20413, 20413, 20413, 20413, 20413, 20413,
	20413, 20413, 20413, 20413, 20413, 20413, 20413, 20413, 20413, 20413,
	1614, 20413, 920, 20413, 20413, 20413, 20413, 1266, -1000, -1000,
	1290, 406, 1307, -1000, 2487, 2487, 2487, 5513, 5513, 413,
	602, -1000, 20413, -1000, 106, 20413, 360, 55614, 1529, -25,
	11626, 11201, -1000, 2503, 1131, -1000, -1000, -1000, -1000, 18302,
	752, 57637, 10011, 1928, 1810, -1000, 2501, -1000, -1000, 2458,
	-1000, -1000, -1000, -1000, 931, 929, 927, 889, 509, 650,
	635, 623, 604, 530, 20413, 20413, 20413, 20413, 20413, 20413,
	20413, 20413, -1000, -1000, 17891, 17466, 17041, 16616, 16191, 21646,
	15766, 20413, 12448, -1000, -35, -1000, 51124, -1000, 49596, -26,
	2409, 20413, 182, -1000, 56697, -1000, 182, 182, 508, -42,
	57637, 1697, 1692, 23998, 1616, 1347, 1347, 1347, -1000, 507,
	599, 663, 7616, 37208, 1357, 663, 663, 178, 239, 351,
	22446, 1660, 37208, -1000, -1000, 49596, 503, 11201, 10803, -32,
	1159, -1000, 33340, 2256, 2250, 2247, 1031, -1000, 992, 2351,
	38362, 2374, 515, 2289, 1865, -1000, -1000, 917, 38362, 3163,
	-1000, 58394, -1000, 1766, 2346, 1019, 1070, 1019, 1019, 1022,
	38362, 916, 1243, 29886, 2282, 915, -33, 2365, 505, 2280,
	1863, 911, -1000, -1000, 49596, 10803, 2266, 964, 660, -27,
	32576, 49596, 200, -1000, 20413, 106, 20413, 106, 988, -43,
	198, 1703, 1694, 178, -1000, 32958, 2399, 2112, 49596, 1707,
	-1000, 3163, 2102, -1000, 1240, -1000, 2085, 2080, 2395, 1469,
	1587, -1000, -1000, -1000, 1458, 1586, 942, 2056, 747, 254,
	2387, 254, 26326, -1000, 49596, -1000, 49596, -1000, -1000, 49596,
	-1000, 49596, -1000, 49596, -1000, 49596, 49596, -1000, 49596, 29886,
	29886, 29886, -44, 5698, 30654, -50, 733, 909, -57, -1000,
	349, 49596, 788, 32958, 5780, -51, -1000, 849, -1000, -1000,
	-1000, 269, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 758,
	501, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 498, 1203, 497, 497, 497, -1000, -1000,
	-1000, 683, -1000, 680, -1000, -1000, -1000, 758, 758, -1000,
	-1000, -194, 1861, -72, 34498, 660, -1000, 660, -1000, 1909,
	-1000, 2291, 692, -67, 841, -35, -1000, 1527, -1000, 1376,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2532, -1000, 2492, -1000, -1000, 2488, -29,
	-1000, -29, -1000, 10803, -1000, 49596, 1906, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 49596, -1000, 49596, -1000, -1000,
	-1000, -1000, -1000, -1000, 1054, -1000, 1903, -1000, 1902, -1000,
	197, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 49596,
	49596, 49596, -1000, 38362, -1000, -1000, -1000, -1000, 57637, -1000,
	403, -1000, -1000, 57637, 1083, 1715, -1000, 1715, -30, -1000,
	56405, 1683, 49596, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 715, 995, 995, 934, 934,
	934, 934, 2495, 309, 3765, 3324, 625, 625, 625, 625,
	625, 625, 625, 625, 3311, 364, 364, 3311, 3311, 3311,
	3311, 3311, 364, 364, 364, 625, 625, 625, 5513, 57708,
	4940, 20413, 20413, 908, 1288, 406, 4686, 20413, 5015, 5015,
	5015, 5015, -1000, 1654, -1000, -1000, -1000, -1000, 1858, 495,
	21646, 21646, -1000, -1000, -1000, 12037, 20413, -1000, -1000, -1000,
	-1000, 489, 20413, -1000, 55971, -243, 348, -197, 196, 49596,
	20413, -18, -1000, 20413, 20413, 20413, 347, -1000, 345, -1000,
	907, -1000, 905, 901, 899, -1000, 483, 598, -70, -1000,
	1032, -1000, 20413, 193, -1000, 1308, 481, 478, 343, -78,
	712, 709, 708, 706, 20413, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 57566, 53476, 53184, 53113, 6620,
	53042, 7074, -80, 342, -1000, 1849, -197, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 341, -1000, -85, -1000, -86, -1000,
	338, -1000, 57274, -197, 337, 3984, -1000, 21646, 21646, 21646,
	-1000, 329, -1000, 56334, -1000, 57203, 15341, 15341, 15341, 328,
	57132, 20413, -197, -1000, -1000, 474, -96, 747, 14929, 23222,
	10803, -1000, 747, 747, 20413, -1000, 20413, 23998, 23998, 2153,
	1691, 23998, -1000, -1000, -1000, -1000, 37208, 487, 663, 37208,
	-1000, 2458, 1705, -1000, -1000, -1000, 49596, 382, -1000, 37208,
	37208, 10803, 663, -1000, 324, 25550, -18, 188, 1842, 49596,
	49596, 49596, -1000, -1000, 1585, 50742, 1581, 58394, 49596, -1000,
	-1000, 472, 471, 1682, 1678, 49596, 49596, 50360, 49978, 49596,
	1254, 20413, 1568, 1489, 106, -1000, 106, 705, 468, 49596,
	1125, -1000, -1000, -1000, -1000, -1000, 49596, -1000, -1000, 2476,
	-1000, 1019, -1000, -1000, -1000, 1019, 3163, 1095, 49596, 29886,
	738, 703, 49596, 1247, 106, -1000, 106, 699, 466, 10803,
	1269, -1000, 690, 49596, 1796, -1000, 1514, -1000, -1000, 9615,
	57637, -1000, 57637, -1000, -1000, -1000, 10803, 1790, 1790, 323,
	-31, -1000, -1000, -1000, -1000, -1000, -1000, 1732, 49596, 500,
	49596, 106, 49596, 149, 733, 29886, 49596, 29886, 29886, 29886,
	106, 49596, 2045, 49596, 2041, 2183, 639, 49596, 1370, 20413,
	1184, -1000, 25938, 767, 49596, 1102, 84, -1000, -1000, -1000,
	0, 49596, -1000, -1000, 139, 139, 139, -1000, 137, 1390,
	-1000, -79, -79, -1000, -1000, -1000, 5698, 1844, 37980, 49596,
	2437, 733, 462, 29886, -97, -1000, 795, 878, 876, -1000,
	58394, -1000, 601, 885, -1000, 2470, 460, 2458, -1000, 733,
	49596, 69, -1000, 736, 1583, -1000, 14518, 14518, -1000, 1527,
	-1000, -1000, 1122, -1000, 1207, -1000, -1000, -1000, -1000, 14518,
	-1000, -1000, 960, -72, -72, -1000, 1050, 1043, 49596, -1000,
	-1000, -1000, -1000, 1083, -1000, 20413, -1000, -1000, -1000, 13271,
	-1000, -1000, -1000, 49596, -231, 20413, 20413, 4469, 3499, 20413,
	21646, 21646, -1000, 20413, 3292, -1000, -1000, -1000, -1000, -1000,
	1834, 459, 20413, 58394, 6210, 5726, -99, 3311, -1000, 20413,
	-1000, 9219, -105, 55543, 322, 14107, -1000, 56768, -36, -36,
	-1000, 2529, 1625, 1345, 1151, 1066, 2464, -1000, -1000, 330,
	2077, -1000, 20413, 56839, 8823, -1000, 26714, 749, 1370, -1000,
	-1000, 2458, -1000, -1000, -1000, -1000, 55472, 58148, 58394, 20413,
	20413, -1000, 20413, 20413, 20413, -1000, -1000, 20413, -1000, -1000,
	-1000, -1000, 1832, 20413, -1000, 58148, 58394, 21646, 21646, 21646,
	21646, 21646, 21646, 21646, 21646, 21646, 21646, 21646, 21646, 21646,
	21646, 21646, 21646, 21646, 21646, 21646, 1695, 21646, 2477, 2477,
	2477, -1000, 1886, 1832, 20413, 20413, 58394, 320, 319, 318,
	-1000, 20413, -197, 5780, -1000, 1809, -1000, -87, -1000, 1660,
	-1000, -1000, 1809, 1809, -106, 57637, -1000, 2153, -1000, 457,
	20413, 23998, -1000, 597, -1000, -111, -1000, 37208, -1000, 596,
	-240, -1000, 658, -1000, 382, -1000, -1000, -1000, 186, 37208,
	-1000, -113, -1000, 2382, 310, 10803, -1000, -1000, 898, 897,
	-1000, 2019, -1000, 1577, -1000, 773, -1000, 1174, 20413, 24386,
	456, 438, 1230, -1000, 2015, 1390, 1992, 1390, -1000, -1000,
	679, -1000, 57637, 434, 431, -1000, -32, 1153, -1000, -1000,
	20413, 20413, -1000, 891, -1000, -1000, -1000, 3163, 882, -1000,
	-1000, 1228, 20413, -1000, -1000, -1000, -1000, 20413, 20413, -1000,
	-33, 866, 20413, 1970, 733, 1831, 971, -1000, -1000, -1000,
	-1000, -1000, -1000, 1728, 32958, 49596, 428, 49596, 425, -1000,
	-1000, 424, 49596, -1000, -1000, 3163, -1000, 734, -1000, -1000,
	776, 10803, 423, 10803, 1659, 639, 30272, -1000, 734, 1735,
	-1000, 57637, -1000, 1102, 12859, 2255, -114, -1000, 183, -1000,
	-1000, -1000, 747, 26326, 23998, 20413, 2546, -116, -1000, -1000,
	-1000, -1000, -1000, -1000, 106, -34, 422, -1000, 654, 643,
	-72, 1377, -1000, 29886, 49596, 49596, -1000, 2462, -1000, 594,
	308, 2458, 307, -1000, -72, 49596, -1000, 1379, 10803, 49596,
	49596, 10803, 49596, -1000, -1000, -35, -1000, -1000, -1000, -1000,
	49596, -1000, -1000, -1000, 1427, 55115, -1000, 2283, 10803, 2457,
	5015, 20413, 20413, 569, 3908, 984, 5015, 20413, 20413, 58394,
	58000, -121, 20413, 20413, -1000, 593, 57637, -1000, -1000, -1000,
	-1000, 2528, 20413, 306, 296, 294, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 293, -1000, -1000, 57637, 20413, 181,
	-1000, -1000, -1000, 52652, -1000, 20413, 292, 291, -1000, 289,
	281, 6933, 6480, 55044, 54973, 54616, 57637, 1886, 57637, -1000,
	-1000, 675, 675, 1021, 1021, 1021, 1021, 2477, 1497, 449,
	458, 3103, 3103, 3103, 748, 541, 541, 3103, 3103, 3103,
	1830, 1658, 421, 4458, -1000, -1000, 57637, 57637, 280, -1000,
	-1000, -1000, -197, 273, 1805, 2344, -1000, 23998, 1805, 1805,
	-1000, -1000, 49596, 57637, -1000, -233, -1000, 2458, -1000, -1000,
	1705, -1000, 8026, -1000, 10803, -1000, -1000, 25550, -1000, 420,
	-1000, 150, 49596, 49596, 49596, 1991, -1000, 3514, -1000, 54545,
	-122, -1000, 2314, 2314, 20413, 178, 24386, 49596, -1000, 1325,
	1713, 815, 49596, -1000, 49596, -1000, -1000, 49596, 49596, 49596,
	49596, 49596, 57637, -123, 49596, 49596, 29886, 57637, 57637, -124,
	10803, 57637, 2261, -1000, 29886, 880, 1247, 1783, -1000, 417,
	24386, 416, 49596, 32958, 2380, -1000, -1000, -1000, 414, 1956,
	1454, 24386, 1445, 1663, 639, 30272, -1000, 942, 1102, -1000,
	-1000, -66, -1000, 461, 106, 49596, 2540, 1370, -1000, -69,
	57637, -1000, 640, -1000, 37594, 37594, 29886, 29886, -1000, 271,
	2215, 2209, 531, -1000, -1000, 267, -1000, -72, 1493, -1000,
	-1000, 1253, 1510, -1000, -1000, -1000, -1000, -1000, 2283, 5015,
	5015, 20413, 20413, 20413, 5015, 58000, -129, -1000, 5015, 5015,
	-1000, -1000, 56768, -1000, -1000, -1000, -1000, 57637, 8427, 1282,
	-1000, 54474, -1000, -1000, -1000, -1000, 20413, 20413, -1000, -1000,
	-1000, -1000, -1000, 21646, 1826, 412, 58394, -1000, -1000, 744,
	20413, 20413, 1660, 744, 744, -130, 663, -1000, -1000, -1000,
	2458, 150, -1000, 2539, 10803, -1000, -1000, -1000, 49596, -1000,
	49596, -1000, 10803, 49596, 1820, 1570, -1000, -1000, 1672, 408,
	21646, 49596, 691, -1000, 1263, 24386, 2283, 10803, 2283, 54117,
	-132, -137, 1560, -1000, -1000, 1530, 20413, -1000, 58394, 1390,
	1390, -139, -146, -1000, 863, 860, 859, -1000, -1000, -1000,
	857, -1000, 670, -79, 20413, -1000, -1000, 1291, 24386, -148,
	24386, -153, 261, 106, 24386, -1000, -1000, 49596, -154, 49596,
	-1000, 639, 30272, -1000, 2183, -1000, 2192, 49596, 2238, -1000,
	-1000, -1000, 1735, 406, -1000, -155, -1000, -1000, 733, 405,
	404, -1000, -1000, -92, -1000, 677, 657, -1000, -1000, -1000,
	10803, 956, -1000, 5015, 5015, 5015, -1000, 252, -1000, -1000,
	1370, 2340, -1000, 54046, 53975, 3834, 21646, 58394, -156, -1000,
	49596, 57637, -197, -1000, -1000, -1000, 37208, 488, -1000, -1000,
	1759, -1000, -1000, -1000, 49596, 1574, -1000, -1000, 20413, 4458,
	402, 20413, -1000, 1728, 399, -1000, -1000, -1000, -1000, -1000,
	-1000, 2314, -1000, 1140, -1000, -1000, 57637, 2294, -1000, -1000,
	398, 397, 49596, 49596, 393, 388, 20413, 57637, 49596, -161,
	1263, -162, -1000, 1728, -1000, -164, 776, -1000, 387, 30272,
	-1000, 1659, 951, -169, 49596, 1102, -1000, -1000, -1000, 29886,
	29886, 1493, -1000, 49596, -1000, 49596, -1000, 49596, -1000, 1109,
	20413, -1000, -1000, 3834, -170, -1000, -184, -1000, 2371, -1000,
	-1000, -1000, -1000, 1982, 53618, 1633, 49596, 53547, 1247, 49596,
	2283, 49596, 774, 10803, 1253, 1253, -1000, -1000, 20413, 20413,
	57637, 386, -1000, 1728, 1263, 1247, 1263, 385, 24386, -1000,
	1663, 1012, -1000, 747, -1000, -1000, -171, -172, -1000, -177,
	-178, -1000, 242, 21235, 21235, -197, -1000, 49596, 383, 1944,
	-1000, 1436, 1287, 238, 806, -1000, -179, -1000, 382, -1000,
	20413, -1000, -185, -1000, 766, -186, -1000, 764, -187, -188,
	49596, 1247, 1728, -1000, 1728, 24386, -198, -1000, 26326, -1000,
	733, 733, -1000, -1000, -1000, -1000, -1000, 22042, 1374, 1088,
	56042, -1000, -1000, -1000, 49596, -1000, 1444, 1443, 1081, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1633, 57637, -1000, 1253,
	1781, -1000, 1253, 1818, -1000, -1000, -201, -1000, 1247, 1247,
	-203, -1000, -195, -1000, -1000, 2430, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2197, -1000, 799, 1386, 1386, 1436, -1000,
	372, -1000, 366, 1352, -1000, -1000, 1263, -1000, 20824, -1000,
	2441, -1000, -1000, 1689, -1000, -1000, 20413, 20413, -1000, -1000,
	-1000, 1728, -1000, -1000, -1000, -1000, -204, -206, 1247, 1247,
	856, -1000, -1000, 270, 20413, -214, 1247, -1000,
}
var sqlPgo = [...]int{

	0, 2979, 2978, 1948, 2969, 2379, 2968, 2966, 2963, 2961,
	2958, 2350, 2956, 2955, 2947, 2945, 2942, 2940, 2936, 2934,
	2932, 2931, 2930, 2928, 2927, 2924, 2921, 2919, 2918, 2915,
	2913, 2908, 2907, 2898, 2348, 2897, 2341, 2896, 2892, 2887,
	2883, 2880, 2876, 2874, 2873, 18, 2872, 2871, 2870, 2869,
	2302, 2866, 2865, 2286, 2864, 2857, 2278, 2855, 2853, 2852,
	2275, 2272, 2851, 2847, 2247, 2845, 2840, 2245, 2839, 2206,
	2838, 2837, 2204, 2835, 93, 108, 2834, 2201, 2833, 2831,
	2198, 2138, 2114, 2827, 2112, 2826, 2823, 2090, 2074, 2816,
	367, 2815, 2813, 2809, 2808, 2066, 2031, 2807, 2805, 2802,
	166, 2800, 1993, 2798, 2794, 2793, 2792, 2790, 2787, 2785,
	2782, 2781, 2780, 2779, 2778, 2777, 2776, 2775, 2774, 2773,
	2771, 2770, 2769, 2767, 2761, 2758, 2752, 2751, 2750, 183,
	115, 2749, 2748, 1965, 1963, 2744, 2742, 40, 52, 21,
	71, 125, 177, 4761, 165, 2741, 2738, 2735, 2733, 2732,
	27, 121, 119, 110, 117, 72, 2731, 2730, 49, 36,
	26, 20, 89, 2728, 2726, 2724, 1701, 97, 2722, 2721,
	170, 175, 2713, 563, 2711, 34, 85, 82, 86, 130,
	54, 2710, 98, 16, 2709, 114, 186, 2708, 55, 31,
	25, 4298, 88, 62, 74, 151, 144, 149, 147, 118,
	214, 2707, 171, 80, 142, 2704, 2703, 2702, 61, 134,
	1, 6, 153, 7, 2698, 9, 2697, 5, 2695, 2692,
	2690, 2688, 22, 113, 56, 48, 2685, 33, 440, 129,
	2681, 150, 2679, 73, 2677, 179, 139, 2, 157, 2674,
	79, 13, 77, 2673, 2672, 122, 160, 2670, 37, 120,
	81, 94, 184, 152, 95, 148, 155, 2668, 2664, 2663,
	126, 2657, 138, 112, 2656, 2654, 28, 32, 159, 39,
	2652, 2651, 109, 2650, 143, 2649, 2645, 2644, 182, 107,
	133, 10, 51, 87, 11, 156, 101, 78, 68, 2643,
	3115, 1682, 1797, 2642, 96, 50, 35, 91, 102, 163,
	29, 2641, 2640, 1736, 2639, 2638, 2637, 124, 2632, 2631,
	2630, 90, 43, 75, 2628, 105, 38, 111, 178, 59,
	146, 132, 173, 123, 2627, 135, 100, 2622, 141, 172,
	57, 2621, 1066, 2620, 136, 2619, 2617, 2616, 2615, 162,
	2614, 2612, 2611, 339, 2610, 99, 2609, 137, 131, 127,
	58, 106, 161, 158, 231, 2608, 140, 47, 2607, 1907,
	24, 0, 3626, 3544, 2604, 145, 92, 2602, 2601, 2597,
	2596, 30, 14, 4, 8, 15, 12, 412, 369, 2595,
	2594, 65, 83, 103, 2593, 181, 154, 2592, 2590, 2589,
	45, 2586, 19, 2585, 17, 2583, 2582, 23, 3, 2580,
	2579, 167, 2578, 2572, 2571, 2373, 2570, 176, 2569, 2568,
	116, 2567, 2565, 2564, 2312, 2563, 2562, 42, 44, 128,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
	6, 8, 8, 9, 9, 9, 33, 33, 11, 11,
	10, 10, 10, 12, 7, 7, 7, 7, 7, 7,
	7, 7, 14, 14, 24, 24, 15, 26, 407, 407,
	18, 28, 19, 29, 13, 22, 20, 20, 30, 17,
	17, 25, 25, 152, 152, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 406, 406, 154, 154, 153, 149,
	149, 409, 409, 155, 155, 155, 157, 157, 34, 34,
	88, 88, 88, 140, 81, 81, 81, 81, 81, 76,
	76, 359, 359, 360, 360, 136, 136, 137, 137, 137,
	137, 138, 138, 139, 139, 139, 48, 36, 36, 36,
	36, 36, 36, 36, 37, 37, 37, 37, 38, 38,
	38, 38, 38, 38, 39, 39, 39, 39, 39, 39,
	46, 46, 130, 130, 49, 49, 49, 49, 49, 49,
	49, 49, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 60, 60, 58, 327,
	327, 61, 61, 62, 62, 62, 62, 62, 62, 63,
	63, 63, 63, 63, 63, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 70, 70, 70, 71, 71,
	71, 68, 68, 68, 66, 66, 66, 65, 65, 65,
	69, 69, 69, 67, 67, 67, 236, 236, 72, 72,
	72, 72, 72, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 75,
	75, 75, 75, 75, 75, 75, 75, 329, 329, 73,
	73, 301, 301, 77, 77, 261, 261, 78, 78, 78,
	78, 78, 79, 79, 79, 79, 89, 89, 89, 89,
	405, 405, 229, 229, 170, 170, 170, 170, 84, 84,
	84, 84, 85, 85, 85, 86, 86, 135, 135, 94,
	94, 94, 94, 94, 94, 94, 94, 94, 94, 40,
	40, 40, 41, 41, 42, 42, 43, 43, 44, 44,
	45, 45, 45, 45, 45, 96, 96, 96, 98, 95,
	95, 95, 97, 97, 97, 97, 99, 99, 100, 100,
	100, 100, 100, 100, 101, 101, 353, 353, 239, 239,
	351, 351, 352, 352, 206, 206, 206, 206, 206, 207,
	207, 207, 358, 358, 358, 358, 358, 358, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 120,
	120, 120, 129, 129, 129, 129, 129, 129, 129, 122,
	122, 122, 113, 113, 103, 103, 103, 103, 109, 109,
	109, 109, 109, 104, 104, 110, 110, 112, 112, 114,
	114, 114, 114, 114, 114, 105, 105, 105, 105, 116,
	116, 116, 116, 115, 115, 125, 125, 125, 125, 125,
	125, 314, 314, 121, 121, 121, 121, 124, 124, 124,
	124, 119, 119, 119, 123, 123, 126, 126, 126, 126,
	106, 106, 107, 107, 108, 108, 127, 127, 118, 118,
	128, 128, 128, 128, 128, 128, 128, 117, 117, 117,
	408, 408, 111, 403, 403, 401, 401, 401, 401, 401,
	401, 401, 402, 402, 404, 404, 82, 82, 82, 54,
	54, 55, 55, 208, 208, 209, 209, 283, 283, 283,
	283, 210, 210, 156, 156, 156, 213, 214, 214, 211,
	211, 212, 212, 212, 216, 216, 215, 218, 218, 217,
	282, 369, 369, 370, 370, 370, 370, 370, 370, 370,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	367, 367, 367, 368, 365, 365, 366, 366, 366, 366,
	412, 412, 281, 281, 222, 222, 372, 372, 372, 372,
	373, 373, 373, 373, 373, 376, 375, 374, 374, 374,
	374, 374, 310, 310, 310, 59, 59, 59, 250, 250,
	249, 249, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 132, 132, 56, 56, 56,
	162, 162, 53, 53, 53, 57, 57, 52, 52, 52,
	52, 52, 266, 266, 266, 265, 265, 227, 227, 316,
	316, 316, 174, 174, 175, 175, 150, 150, 150, 21,
	23, 23, 16, 16, 16, 16, 16, 16, 31, 31,
	32, 32, 27, 27, 410, 410, 411, 411, 83, 83,
	87, 87, 87, 93, 93, 131, 131, 131, 131, 131,
	131, 131, 35, 35, 35, 35, 47, 47, 47, 47,
	91, 415, 415, 415, 92, 92, 414, 414, 169, 169,
	169, 169, 171, 171, 278, 278, 279, 279, 416, 416,
	280, 280, 280, 164, 163, 165, 165, 51, 51, 51,
	158, 158, 159, 159, 160, 160, 161, 161, 417, 417,
	80, 80, 80, 134, 134, 202, 202, 274, 274, 274,
	223, 223, 180, 180, 277, 277, 275, 275, 275, 248,
	248, 248, 133, 133, 232, 232, 241, 241, 242, 242,
	324, 324, 243, 90, 90, 143, 143, 141, 141, 141,
	141, 141, 141, 142, 142, 142, 144, 144, 144, 144,
	144, 144, 144, 147, 147, 147, 147, 148, 148, 148,
	146, 146, 383, 383, 383, 385, 385, 386, 382, 382,
	384, 384, 413, 413, 252, 252, 252, 220, 221, 219,
	219, 418, 418, 225, 225, 224, 226, 226, 315, 315,
	315, 246, 246, 246, 246, 269, 269, 267, 267, 268,
	268, 270, 270, 271, 271, 271, 272, 272, 273, 273,
	245, 245, 297, 297, 145, 145, 145, 231, 231, 231,
	233, 233, 288, 288, 288, 289, 289, 287, 287, 287,
	287, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	318, 318, 234, 234, 319, 276, 276, 399, 399, 399,
	400, 400, 313, 313, 320, 320, 320, 320, 320, 320,
	311, 311, 312, 312, 325, 326, 326, 255, 255, 255,
	255, 253, 253, 254, 254, 321, 321, 321, 321, 247,
	247, 322, 322, 322, 284, 284, 330, 330, 330, 345,
	345, 230, 230, 230, 340, 340, 331, 331, 331, 331,
	331, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 334, 334, 334, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 344, 344, 344, 344, 344, 335,
	335, 341, 342, 336, 337, 343, 343, 343, 343, 347,
	347, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	339, 262, 262, 262, 262, 262, 262, 262, 262, 262,
	262, 262, 262, 262, 262, 263, 263, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 292, 292, 292, 292, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	377, 377, 377, 377, 377, 377, 377, 377, 380, 380,
	381, 381, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 387, 387, 388, 388, 390, 390, 391, 391, 392,
	393, 393, 393, 394, 395, 395, 389, 389, 396, 396,
	396, 397, 397, 398, 398, 398, 398, 398, 303, 303,
	309, 309, 309, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 172,
	172, 172, 172, 172, 238, 238, 237, 237, 300, 300,
	298, 298, 302, 302, 256, 256, 346, 346, 346, 346,
	346, 346, 346, 257, 257, 257, 264, 258, 258, 259,
	259, 259, 259, 259, 294, 295, 260, 260, 260, 296,
	296, 304, 308, 308, 307, 306, 306, 305, 305, 285,
	285, 286, 286, 244, 244, 419, 419, 240, 240, 323,
	323, 323, 323, 204, 204, 235, 235, 203, 203, 197,
	197, 198, 198, 198, 198, 228, 228, 348, 348, 348,
	349, 350, 299, 190, 189, 177, 178, 188, 187, 186,
	176, 179, 183, 184, 185, 181, 182, 193, 192, 191,
	328, 199, 199, 200, 200, 200, 201, 201, 201, 201,
	173, 173, 194, 194, 195, 196, 196, 166, 166, 166,
	167, 167, 168, 168, 357, 357, 355, 355, 355, 356,
	356, 356, 356, 354, 354, 354, 354, 354, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 3, 1, 1, 3, 4, 6, 1, 3,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 4, 6, 4, 6, 6, 6, 1, 1,
	5, 5, 6, 6, 7, 7, 7, 10, 7, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 5, 6, 6, 4, 8, 3, 3, 3, 6,
	4, 3, 1, 3, 2, 1, 1, 3, 1, 3,
	2, 2, 0, 1, 1, 0, 2, 0, 7, 2,
	5, 6, 2, 1, 6, 9, 12, 12, 2, 7,
	2, 1, 1, 1, 3, 3, 0, 3, 1, 3,
	1, 1, 3, 2, 5, 0, 5, 1, 2, 1,
	2, 1, 2, 2, 3, 3, 3, 3, 3, 5,
	3, 3, 5, 3, 3, 5, 3, 3, 5, 3,
	6, 6, 1, 1, 1, 2, 1, 2, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	3, 1, 2, 1, 2, 1, 7, 3, 6, 2,
	0, 8, 3, 2, 2, 2, 2, 2, 2, 1,
	1, 2, 1, 2, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	3, 5, 3, 3, 5, 3, 1, 3, 2, 2,
	5, 6, 3, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 2, 1, 1, 3, 5,
	2, 3, 0, 3, 2, 3, 0, 2, 3, 2,
	3, 2, 6, 4, 7, 2, 6, 4, 7, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 2,
	1, 2, 2, 3, 2, 4, 3, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 3, 1,
	1, 3, 5, 4, 6, 4, 3, 0, 1, 3,
	2, 4, 2, 4, 1, 6, 6, 3, 5, 3,
	2, 6, 3, 3, 4, 4, 3, 3, 1, 3,
	2, 1, 3, 1, 2, 1, 1, 2, 2, 3,
	1, 1, 1, 3, 2, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 2,
	3, 3, 1, 1, 1, 1, 1, 2, 2, 5,
	7, 3, 3, 3, 3, 4, 4, 3, 4, 4,
	3, 4, 4, 4, 3, 2, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 2,
	3, 3, 3, 2, 3, 5, 4, 6, 4, 6,
	4, 1, 0, 2, 3, 3, 3, 6, 4, 2,
	3, 4, 2, 3, 3, 3, 4, 3, 3, 3,
	4, 4, 4, 4, 4, 4, 2, 3, 2, 3,
	7, 7, 8, 10, 7, 4, 5, 5, 5, 3,
	1, 1, 5, 2, 0, 1, 1, 1, 1, 3,
	2, 2, 2, 1, 2, 0, 3, 3, 2, 8,
	11, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	1, 8, 0, 1, 1, 0, 2, 1, 0, 1,
	0, 9, 9, 3, 1, 3, 7, 1, 3, 11,
	3, 2, 0, 3, 1, 2, 2, 3, 2, 6,
	2, 1, 1, 2, 4, 2, 5, 5, 5, 2,
	8, 9, 6, 5, 3, 1, 4, 7, 5, 10,
	1, 1, 4, 0, 3, 0, 2, 2, 2, 0,
	1, 1, 2, 2, 0, 3, 3, 2, 1, 1,
	2, 2, 1, 2, 1, 4, 7, 3, 1, 0,
	1, 2, 2, 1, 2, 3, 2, 2, 3, 2,
	2, 2, 2, 2, 3, 4, 2, 4, 7, 3,
	3, 0, 3, 6, 3, 6, 3, 13, 16, 9,
	12, 4, 2, 2, 0, 1, 0, 1, 3, 3,
	3, 5, 2, 0, 2, 0, 1, 1, 0, 6,
	6, 8, 6, 8, 8, 10, 8, 10, 6, 8,
	6, 8, 6, 8, 1, 0, 2, 0, 2, 2,
	3, 3, 2, 2, 2, 1, 2, 1, 2, 1,
	2, 1, 3, 2, 3, 2, 2, 2, 2, 2,
	2, 1, 1, 0, 2, 2, 1, 0, 1, 3,
	2, 0, 2, 1, 1, 0, 1, 3, 1, 0,
	1, 1, 1, 2, 3, 2, 2, 8, 11, 3,
	3, 0, 3, 0, 3, 0, 3, 0, 1, 0,
	6, 7, 3, 6, 3, 1, 3, 1, 4, 2,
	1, 3, 1, 3, 8, 5, 4, 3, 0, 2,
	2, 0, 10, 3, 2, 0, 1, 3, 1, 1,
	3, 3, 5, 1, 1, 3, 3, 1, 2, 3,
	2, 3, 4, 2, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 8, 8, 8, 2, 4, 4, 4,
	2, 2, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 0, 1, 1, 0, 1, 5, 1,
	0, 1, 0, 1, 0, 3, 1, 3, 2, 4,
	5, 2, 2, 1, 1, 1, 0, 2, 5, 2,
	3, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	3, 0, 2, 0, 4, 2, 5, 3, 2, 0,
	1, 3, 3, 5, 1, 1, 3, 2, 4, 4,
	0, 8, 4, 3, 4, 1, 5, 3, 4, 5,
	1, 5, 1, 3, 2, 0, 3, 0, 2, 3,
	1, 3, 2, 0, 3, 4, 5, 4, 5, 4,
	3, 2, 1, 0, 5, 1, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 1,
	1, 2, 3, 0, 1, 1, 1, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 5, 2, 4, 1, 2, 2, 1, 1, 1,
	0, 1, 1, 4, 1, 4, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 5, 4, 6, 3, 5, 4, 6, 4,
	6, 5, 7, 3, 3, 3, 3, 3, 4, 3,
	2, 4, 2, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	4, 1, 1, 1, 1, 3, 3, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
	6, 6, 7, 1, 2, 1, 2, 1, 1, 1,
	1, 6, 2, 1, 5, 1, 1, 1, 1, 2,
	1, 5, 5, 3, 1, 1, 2, 2, 1, 5,
	3, 5, 6, 8, 6, 6, 4, 3, 4, 1,
	1, 1, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 6, 6, 8, 8, 6, 4, 6, 6,
	6, 4, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 3, 4, 3, 4, 3, 4,
	4, 3, 6, 5, 5, 5, 4, 4, 3, 4,
	3, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 2, 2,
	0, 1, 4, 2, 2, 2, 2, 2, 4, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 0, 1, 3, 1, 3,
	3, 3, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 1, 2, 3, 0, 3,
	3, 2, 2, 1, 2, 2, 3, 2, 1, 1,
	3, 5, 1, 2, 4, 2, 0, 1, 0, 3,
	5, 1, 0, 1, 2, 1, 0, 1, 3, 3,
	2, 1, 1, 1, 3, 1, 3, 3, 1, 1,
	1, 1, 5, 3, 1, 1, 3, 1, 2, 2,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 7, 1, 7, 5, 3,
	1, 1, 1, 1, 1, 3, 5, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 425, -4, -34, -36, -48, -46,
	-49, -78, -61, -62, -63, -77, -72, -76, -79, -80,
	-81, -82, -73, -88, -87, -89, -93, -40, -90, -83,
	-84, -94, -102, -131, -132, -133, -134, -5, -11, 25,
	36, -37, -38, -39, 51, 78, 66, -56, -53, -50,
	-60, 80, 100, -384, 104, -64, -67, -69, 108, 116,
	121, 122, 146, 155, 258, 265, 287, 289, 291, 300,
	-42, -41, 117, -141, -143, 285, -85, -86, -95, -96,
	-97, -98, -135, 318, -103, -104, -105, -106, -107, -108,
	-109, -110, -111, -112, -113, -114, -115, -116, -117, -118,
	-119, -120, -121, -122, -123, -124, -125, -126, -127, -128,
	321, -35, -47, -92, -91, 366, -6, -7, -8, -9,
	-10, -12, -23, -51, -52, -54, -55, -57, -59, -58,
	-383, -65, -66, -68, -70, -71, -144, -142, 422, 286,
	376, 37, 330, 67, 112, 295, 20, -14, -18, -19,
	-15, -17, -20, -16, -24, -28, -29, -26, -25, -27,
	-30, -31, -32, -33, -21, -22, -13, 393, 401, -147,
	-145, -146, -148, 307, 384, 343, 426, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 2, 343,
	387, 308, 377, 93, 168, 270, 256, -401, 2, 4,
	-363, -361, -198, -197, 343, 93, 30, 38, 39, 41,
	44, 56, 57, 58, 61, 97, 98, 115, 123, 124,
	135, 148, 150, 158, 159, 160, 175, 181, 183, 163,
	204, 233, 235, 248, 252, 262, 264, 273, 297, 324,
	339, 355, 356, 357, 363, 364, 384, 385, 389, 396,
	20, 21, 22, 23, 25, 35, 36, 37, 40, 42,
	43, 46, 47, 48, 49, 50, 51, 52, 55, 60,
	65, 66, 67, 68, 69, 74, 71, 72, 73, 76,
	78, 79, 82, 83, 91, 92, 94, 95, 96, 100,
	102, 104, 107, 108, 110, 111, 113, 116, 117, 120,
	118, 349, 351, 119, 121, 122, 132, 133, 134, 136,
	137, 139, 141, 145, 147, 152, 153, 154, 155, 156,
	157, 169, 164, 170, 174, 177, 176, 178, 179, 180,
	171, 185, 188, 189, 190, 192, 193, 196, 197, 198,
	201, 200, 203, 206, 207, 210, 211, 214, 216, 219,
	220, 223, 221, 222, 225, 226, 228, 227, 234, 236,
	237, 239, 240, 243, 244, 247, 250, 253, 254, 255,
	256, 257, 258, 259, 261, 263, 265, 267, 268, 269,
	270, 271, 272, 274, 275, 277, 278, 279, 280, 281,
	285, 283, 284, 286, 287, 288, 289, 291, 293, 294,
	295, 296, 298, 319, 320, 332, 300, 301, 302, 303,
	304, 305, 306, 310, 314, 311, 312, 313, 308, 309,
	315, 316, 318, 321, 323, 325, 326, 329, 330, 331,
	333, 336, 337, 338, 334, 335, 328, 341, 342, 344,
	345, 346, 347, 348, 350, 352, 353, 358, 361, 362,
	366, 367, 369, 370, 373, 374, 375, 380, 376, 378,
	381, 382, 383, 388, 387, 394, 395, 397, 398, 399,
	-196, -166, 415, -195, 425, 425, 425, 2, 189, 190,
	269, 268, 315, 316, -191, -194, -195, -196, -166, 4,
	-361, -363, 93, 241, 425, 425, 425, 2, 343, 331,
	55, 308, 377, 293, 387, -265, 185, 93, 372, -166,
	265, 24, 2, 102, 174, 375, 374, 24, 261, 309,
	345, 347, 2, 425, 425, 2, 387, 308, 343, 168,
	93, 377, 293, -185, 2, -166, -75, 2, 422, 27,
	-74, -5, -50, -60, -64, -77, -72, -11, -34, -36,
	-56, -53, -61, -67, -69, -81, -80, -82, -84, -88,
	-87, -90, -95, -96, -102, -133, -134, 80, 25, 108,
	318, 117, 184, 2, -405, -229, 2, 24, -170, -166,
	80, 146, 307, -140, 343, 2, -166, 189, 190, 2,
	-185, 2, -401, 2, 189, 190, 2, -405, -229, 23,
	2, -166, 2, 304, 321, -171, 2, 300, -166, 425,
	425, 425, 425, 425, 425, 211, 60, 297, 315, -100,
	362, -99, 355, 302, -101, -353, 2, 223, -166, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 2, -129, 315, 331, 153, 36, 60,
	24, 65, 94, 147, 168, 169, 197, 75, 76, 268,
	211, 190, -314, 316, 344, 303, 341, 362, 80, 378,
	294, -408, 118, 4, 93, 223, 317, 355, 69, 348,
	349, 425, 425, 425, -413, 2, 343, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, -142, -144,
	-143, 425, 425, 425, 425, 425, -224, -225, 371, 182,
	114, 246, -141, -143, 2, -383, -129, 315, 2, 60,
	24, -351, 2, -290, 241, -292, 413, 414, 408, 229,
	400, -303, 99, 218, 217, -293, -304, 115, 297, 422,
	7, 8, 5, 6, -173, -332, -299, -339, 365, 125,
	232, -201, 428, 9, -380, -143, 31, 53, -355, -200,
	-333, -342, -337, -338, -340, 42, 49, 48, 352, 222,
	310, 311, 312, 313, 325, 380, 164, 40, 239, 240,
	176, 4, 183, -199, -166, -377, -378, -361, -362, 175,
	177, 178, 179, 180, 181, 324, 39, 273, 136, 137,
	135, 107, 98, 97, 235, 44, 43, 41, -343, 95,
	355, 356, 357, 358, 192, 193, 63, 85, 86, 84,
	89, 88, 90, 87, 317, 377, 54, 30, 158, 159,
	163, 233, 160, 61, -379, 335, 81, 126, 144, 173,
	161, 186, 187, 191, 205, 208, 224, 231, 249, 251,
	292, 322, 57, 56, 385, 123, 124, 148, 204, 252,
	262, 339, 363, 364, -414, 2, 362, 362, 2, -414,
	2, -414, 2, -169, 2, 362, 359, -415, 362, 396,
	-385, 274, -386, -185, -385, 425, 425, 427, 425, -219,
	-220, -221, 2, 24, 105, 422, 2, -317, 2, 420,
	-321, -143, 199, -320, 422, -318, -191, 242, -381, 298,
	-377, -378, -173, -166, -200, 4, 218, 217, -3, 2,
	-321, 158, -191, 2, -321, 158, 2, -192, 158, -321,
	-194, 2, -359, 158, -357, 9, -356, 5, 4, -361,
	-363, -362, 63, 2, -176, -166, 2, -203, 158, -191,
	-188, -354, 4, -361, -363, -362, -364, 24, 26, 27,
	28, 29, 31, 32, 33, 34, 45, 53, 54, 59,
	62, 64, 75, 80, 84, 85, 87, 86, 88, 89,
	90, 99, 101, 103, 105, 106, 109, 112, 114, 125,
	127, 140, 142, 143, 146, 149, 151, 162, 168, 172,
	182, 184, 199, 202, 209, 212, 213, 229, 230, 232,
	238, 241, 242, 245, 246, 260, 266, 276, 290, 307,
	317, 327, 340, 343, 354, 359, 360, 365, 371, 372,
	377, 379, 386, 390, 391, 392, 393, -189, -354, 359,
	427, -235, -197, -198, -228, -166, 424, -290, 2, -90,
	2, -290, 158, 2, -90, 158, 2, -290, 158, 2,
	-90, 158, 2, -222, 422, 424, 343, 64, 2, -191,
	158, -181, 2, -166, 140, -192, 158, 2, -194, -359,
	158, 2, -359, 158, 2, -193, 2, -191, 168, 168,
	-176, 158, 2, -166, 24, 143, 2, 184, 2, 184,
	2, -322, 2, -321, -236, 158, 2, -191, -236, 158,
	2, -236, 158, 2, -204, 158, 2, -203, -176, 158,
	2, -360, 158, 2, -359, -360, 158, 2, -261, 422,
	-329, 2, -328, -356, 384, 422, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 315, -140, 241, 359, 427, 422, -191,
	-290, -90, -301, 422, 143, -290, -90, 241, 143, 243,
	2, 93, 343, 399, 24, -166, 2, 319, 2, 422,
	-100, 58, 362, -279, 2, -280, -163, -164, -165, 188,
	267, 272, 399, -351, 359, 405, 143, -351, -239, 424,
	-129, 2, 140, 379, 2, 7, 2, -359, 271, 132,
	2, 319, 2, 268, 316, 60, 143, 2, 2, -403,
	2, 241, 143, 2, 143, 2, 143, 2, 143, 2,
	143, 2, 2, 268, 316, 2, 361, 198, 119, 2,
	143, 2, 143, 2, 5, 2, 188, 267, 332, 2,
	343, 387, 308, 2, 2, 143, 2, 143, 399, 2,
	-247, -321, -224, -225, -246, -267, -268, 209, 127, 238,
	-252, 24, 105, -252, -252, 47, 423, 423, -129, 319,
	2, 10, 11, 62, 35, 413, 414, 415, 416, 138,
	417, 418, 411, 412, 410, 403, 404, 407, 194, 195,
	77, 406, 405, 70, 215, 299, 128, 129, 130, 131,
	282, 165, 166, 167, 13, 14, 15, 28, 245, 208,
	400, 161, 322, 408, 16, 17, 18, 186, 187, 231,
	38, 162, -172, -205, -290, -290, -290, -290, -290, 251,
	-244, -285, 420, -143, 422, 422, -143, -290, -303, -237,
	422, 422, 5, 422, 5, -350, 7, -143, -298, 420,
	-305, -290, 424, -387, 394, -335, 422, 264, -334, 422,
	-334, -334, -347, 388, 395, 401, 395, 401, 140, 422,
	422, 422, 422, 422, 422, 422, 422, 422, 422, 422,
	422, 422, -347, -347, 422, 422, 422, 422, 422, 422,
	422, 422, 422, -278, -279, -278, 359, -171, 427, -385,
	-222, 422, -240, -323, -290, 415, -240, -240, 241, -237,
	-290, 81, -255, 191, 224, 144, 205, 292, 173, -350,
	-75, -287, 428, -313, 401, -143, -318, -166, -143, -320,
	422, -317, -313, 415, -191, 422, 143, 422, 424, -152,
	283, -151, 22, 25, 108, 382, 120, -212, 170, 256,
	115, 328, -407, 117, 301, 350, 351, 283, 115, -249,
	-251, 32, 91, 226, 253, 50, 156, 217, 218, 330,
	115, 283, 393, 115, 117, 283, -154, 328, -407, 117,
	301, 283, -153, -212, 115, 428, 117, 236, -359, -235,
	427, 427, -354, 415, 115, 115, 115, 115, 143, -228,
	-354, -191, -199, -166, -200, 422, -222, 229, 241, -401,
	-250, -249, 229, -162, -382, 393, 229, 229, -222, -178,
	158, 2, -167, -166, -178, 158, -382, 229, -322, -202,
	-191, -202, 318, -185, 32, -155, 427, 52, 288, 115,
	-155, 115, -155, 115, -155, 427, 115, -155, 115, 427,
	115, 115, -237, 423, 427, -329, -359, -401, -228, -170,
	-359, 143, 80, 422, 32, -300, -330, -331, -332, -341,
	-336, -339, 42, 49, 48, 352, 222, 310, 311, 312,
	313, 325, 380, 164, 40, 239, 240, 176, 4, 41,
	-343, 183, 175, 177, 178, 179, 180, 181, 324, 39,
	273, 136, 137, 135, 107, 98, 97, 235, 44, 43,
	95, 355, 356, 357, 358, 192, 193, 57, 56, 385,
	335, -360, -401, -228, 140, -176, 2, -191, 2, 71,
	72, 399, -353, -237, 32, -279, 2, -416, 427, 207,
	-207, 214, 228, 152, 242, 397, -358, 5, 4, -299,
	-310, 99, 211, -339, 8, 414, -348, 7, 413, -352,
	-351, -352, 83, 424, -354, 343, 192, -359, -359, -353,
	24, 320, 2, -191, -404, 140, -402, 293, -401, -191,
	-191, -191, -191, -191, 140, 2, 361, 2, 361, 2,
	-166, -166, 207, -191, 2, -193, 2, -192, 2, 343,
	168, 343, -155, 427, -246, -268, -267, -270, -290, 24,
	-273, 134, 225, -290, -292, -142, -142, -142, -226, -315,
	-290, 266, 168, -353, -345, -330, -344, 278, 279, 277,
	281, 280, -330, -190, -354, 355, -290, -290, -290, -290,
	-290, -290, -290, -290, -290, -290, -290, -290, -290, -290,
	-290, -290, -290, -290, -290, -290, -290, -290, -290, -290,
	-290, -290, -290, -290, -290, -290, -290, -290, -290, -290,
	-290, 208, 161, 322, 38, 162, -290, 359, -290, -290,
	-290, -290, 221, 229, 232, 365, 125, 373, 105, 236,
	-419, 340, 34, -296, -143, 422, -309, 29, 327, 24,
	-303, 297, 422, -285, -290, -286, -238, -237, 423, 32,
	427, -237, 423, 386, 24, 105, 415, 2, 7, -262,
	398, 220, 96, 154, 219, -263, 306, -238, -302, -298,
	-308, -307, 390, -354, 415, -388, 133, 149, 7, -350,
	355, 355, 355, 355, 422, 423, 2, 423, 2, 423,
	2, 423, 2, 423, 2, -290, -290, -290, -290, -290,
	-290, -290, -237, -256, 2, -346, -237, 4, 398, 220,
	96, 154, 219, 306, -256, 2, -237, 2, -237, 2,
	-257, 2, -290, -237, -258, -291, -292, 413, 414, 408,
	-303, -259, 2, -290, -238, -290, 45, 202, 360, -260,
	-290, 143, -237, -171, -386, 32, -237, -231, 427, 143,
	32, 4, -231, -231, 422, 423, 427, 191, 191, -317,
	-255, 191, -253, 249, -253, -253, -399, 422, 421, -313,
	-177, 420, 429, -354, -312, -311, 32, -185, 247, -313,
	-313, 424, 423, -312, -191, 422, -237, -354, 427, 359,
	-410, 75, 64, -282, 158, 64, -365, -179, 75, -366,
	-166, 59, 372, 266, 142, -410, 75, -410, 75, 75,
	318, 331, 47, -321, 35, -90, 203, 73, 143, 359,
	-321, -251, -330, 91, 217, 218, 47, -349, -348, 414,
	-349, 47, -349, -349, -349, 393, -192, -321, 359, 257,
	-359, 73, 359, 427, 35, -90, 203, 73, 143, 359,
	-203, -177, 73, 343, -326, -325, 402, -197, -166, 424,
	-290, -90, -290, -90, 333, 423, 424, 186, 186, -208,
	-209, -166, -283, -282, -367, -368, -365, 185, 168, 372,
	126, 32, 115, -228, -327, 184, 115, 257, 115, 115,
	32, 241, 229, 241, 229, -158, 346, 115, -284, 391,
	-274, -90, 422, 99, 32, -274, -241, -242, -324, -243,
	-179, 422, -185, -191, -236, -236, -236, -203, -204, -176,
	-359, -360, -360, 423, -75, -328, 423, -139, 393, 359,
	393, 423, -140, 379, -209, -74, 25, 80, 108, 423,
	427, -230, 31, 420, -262, 422, -347, 422, -139, -325,
	143, -229, -326, -326, 140, 72, 405, 359, 423, 362,
	-280, -206, 272, 326, 284, 314, 8, 7, 7, 427,
	-354, -191, 140, -228, -228, 315, 140, 140, 424, -191,
	-203, -191, -321, -271, -348, 422, -272, 297, 298, 427,
	-150, 33, 103, 196, -191, 399, 113, -290, -290, 359,
	-419, 340, -296, 113, -290, 221, 232, 365, 125, 373,
	105, 236, 143, 422, -291, -291, -237, -290, 421, 431,
	423, 424, -228, -290, -418, 427, -224, -290, -237, -237,
	423, 423, 359, 359, 359, 359, 422, 421, 421, 427,
	-306, -307, 109, -290, 424, -393, 250, 422, 422, 423,
	423, 427, 399, 399, 399, 399, -290, 32, 427, 427,
	427, 423, 427, 427, 427, 423, 423, 143, 423, 423,
	423, 423, -264, 260, 423, 10, 11, 413, 414, 415,
	416, 138, 417, 418, 411, 412, 410, 403, 404, 405,
	70, 215, 299, 13, 14, 15, 186, 162, -291, -291,
	-291, 423, -294, -295, 143, 140, 32, -260, -260, -260,
	423, 143, -237, 422, 423, -284, -323, -233, 2, -317,
	-187, -354, -284, -284, -237, -290, -317, -317, -254, 379,
	241, 191, -317, -311, 423, -400, -350, -313, -312, -350,
	-289, -288, 141, 227, -185, -222, -312, -312, -354, -313,
	423, -234, -319, -381, -418, 424, -151, -191, -179, -186,
	-166, 229, -282, 158, -157, 229, -330, -186, 422, 422,
	196, 196, -179, -186, 158, -179, 158, -186, -186, -406,
	272, 237, -290, 210, 270, 230, -152, 283, -90, -90,
	399, 422, -193, 283, -199, -349, -349, -249, 283, -192,
	-359, 393, 399, -176, -153, -90, -90, 399, 422, -177,
	-154, 283, 399, -191, -136, 157, 236, 415, -354, -130,
	5, 232, -130, 423, 427, 168, -178, 168, -184, -167,
	-90, -191, 143, -139, -359, -192, -359, -359, -359, -90,
	-191, 115, -191, 115, -159, 111, -417, 405, -176, -225,
	-224, -290, -248, -277, 290, 241, -223, -180, -179, 384,
	-185, -248, -232, 427, 143, 405, 424, -223, -155, -155,
	-155, -155, -155, -75, 143, -138, 244, -137, -166, 5,
	-228, 23, -139, 422, -359, 423, -330, 420, 421, 7,
	7, 422, -350, -139, -228, 143, -43, 393, 270, 93,
	343, 256, 168, -351, -351, -279, 370, 68, 272, -351,
	343, 315, 315, -166, -272, -290, -315, -191, 428, -290,
	-290, 113, 113, -290, -291, -291, -290, 113, 143, 422,
	-290, -300, 28, 28, 423, -286, -290, 415, -354, 423,
	423, 423, 386, -418, -418, -418, 5, 220, 154, 219,
	-263, 219, -263, -263, 7, -298, 112, -290, 354, -354,
	415, -394, -182, 422, -166, 391, -224, -350, 423, -345,
	-330, -290, -290, -290, -290, -290, -290, -294, -290, -345,
	-330, -291, -291, -291, -291, -291, -291, -291, -291, -291,
	-291, -291, -291, -291, -291, -291, -291, -291, -291, -291,
	105, 229, 236, -291, -295, -294, -290, -290, -330, 423,
	423, 423, -237, -74, -245, 149, -326, 427, -245, -245,
	423, -254, 422, -290, -317, 421, 423, 427, -312, 421,
	427, 430, 405, -222, 424, -311, 423, 427, -276, 32,
	423, -354, 359, 359, 115, 229, 381, -369, -366, -290,
	-227, -316, -179, -381, 422, -166, 422, 422, -149, 108,
	318, -411, 115, -155, 115, -155, 397, 422, 422, 359,
	-410, 75, -290, -237, 359, 359, 257, -290, -290, -237,
	359, -290, 117, -139, 143, 342, -210, 171, -283, -167,
	422, -178, 422, 422, -222, -191, -250, -162, -266, 379,
	-177, 422, -177, -160, 201, -417, -357, -382, -269, -267,
	-248, -240, 230, 74, 423, 427, 424, -284, -242, -233,
	-290, 2, 423, -90, 427, 422, 405, 405, 243, -359,
	-140, -140, 7, 421, 423, -350, 423, -228, 244, -188,
	-176, -191, -189, -203, -191, 242, 423, -150, -177, -290,
	-290, 113, 28, 28, -290, -290, -300, 423, -290, -290,
	421, 5, -290, 423, 423, 423, 423, -290, 424, -395,
	-166, -290, 423, 423, 423, 423, 427, 427, 423, 423,
	423, 423, -295, 143, 105, 236, 422, 423, 423, -297,
	151, 47, -317, -297, -297, -228, -287, -350, -288, -177,
	420, -354, -319, 422, 424, -179, -186, -282, 115, -370,
	75, -371, 62, 126, 80, 229, 232, 372, 266, 59,
	99, 276, 32, 423, 423, 427, -175, 62, -175, -290,
	-227, -228, 229, 337, 99, 229, 99, 92, 367, -179,
	-186, -228, -228, -191, -179, -186, 423, -193, -192, -359,
	423, -177, 73, -360, 355, -211, -212, 162, 422, -227,
	422, -228, -208, 32, 422, 145, 46, 241, -227, 241,
	-161, 200, -417, -357, -158, -248, -275, 422, 241, -90,
	-180, 2, -225, 405, -137, -138, -359, -359, 423, 92,
	92, 421, 423, -44, -45, 168, 75, 259, -214, -213,
	256, 236, -150, -290, -290, -290, 423, -418, -354, 415,
	-389, 256, 423, -290, -290, -291, 143, 422, -300, -390,
	392, -290, -237, -390, -390, 423, -313, -350, 2, -282,
	-186, -190, -183, -166, 126, 158, 232, 196, 422, -291,
	-191, 422, 2, -281, -412, 79, 338, -316, -150, -190,
	-150, 423, 423, 423, 232, 232, -290, -330, -155, -155,
	423, 423, 359, 359, 359, 359, 399, -290, 254, -227,
	423, -227, 423, 423, -90, -227, -191, 423, -191, -417,
	-357, -159, 106, -228, 75, -269, -296, 423, -139, 422,
	422, 427, 24, 422, 24, 422, -189, 343, 423, -225,
	47, 423, 423, -291, -300, 423, -391, -392, -182, -312,
	421, -371, -183, 229, -290, -168, 422, -290, -210, 422,
	-175, 276, -174, 62, 422, 422, -179, -186, 422, 422,
	-290, -191, 423, -281, 423, -210, 423, -266, 422, -357,
	-160, 374, 230, 423, -186, -248, -360, -360, -45, -228,
	-228, -191, -396, 270, 298, -237, 423, 427, 32, 115,
	423, -372, 216, -166, 423, -211, -228, -150, -191, -409,
	379, -190, -216, -215, -213, -218, -217, -213, -237, -237,
	422, -210, -281, -211, -281, 422, -227, -161, 318, -284,
	423, 423, 423, 423, 423, -397, -398, 38, 369, 83,
	-290, -397, -392, -394, 126, -373, -376, -375, 241, 144,
	255, 323, 423, 337, 389, 423, -222, -290, 423, 427,
	384, 423, 427, 384, 423, 423, -228, -211, -210, -210,
	-227, 423, -241, -139, -139, -398, 263, 139, 297, 263,
	139, -183, -375, 241, -376, 241, 374, 102, -372, -215,
	162, -217, 143, 423, -211, -211, 423, -284, 28, -374,
	226, 288, 52, 318, -374, -373, 422, 422, -156, 52,
	288, -281, -398, 21, 232, 99, -237, -237, -210, 423,
	423, -211, -211, 359, 422, -237, 423, -211,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 43, 44, 45,
	47, 48, 49, 50, 51, 53, 55, 58, 59, 0,
	0, 187, 189, 191, 0, 0, 0, 214, 216, 218,
	219, -2, 0, 0, 0, 249, 250, 252, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	389, 390, 0, 863, -2, 0, 368, 370, 379, 381,
	383, 385, 386, 0, 448, 450, 452, 454, 456, 458,
	460, 462, 464, 465, 467, 469, 471, 473, 475, 477,
	479, 481, 483, 485, 487, 489, 491, 493, 495, 497,
	-2, 775, 777, 779, 781, -2, 62, 64, 66, 68,
	70, 72, 88, 222, 224, 226, 228, 231, 233, 235,
	900, 255, 257, 259, 261, 263, -2, 914, 0, 0,
	0, -2, 0, -2, -2, -2, 793, 73, 74, 75,
	76, 77, 78, 79, 94, 95, 96, 97, 98, 99,
	100, 81, 83, 84, 90, 91, 93, 0, 0, 876,
	878, 880, 882, -2, 0, 0, -2, 7, 13, 15,
	17, 20, 22, 24, 26, 28, 30, 32, 34, 36,
	38, 40, 42, 46, 52, 54, 56, 60, 61, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 159, -2,
	-2, -2, -2, 0, 0, 1544, 1729, 1730, 1731, 1732,
	1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742,
	1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752,
	1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762,
	1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772,
	1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517,
	1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527,
	1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537,
	1538, 1539, 1540, 1541, 1542, 1543, 1545, 1546, 1547, 1548,
	1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558,
	1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568,
	1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578,
	1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588,
	1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598,
	1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608,
	1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618,
	1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628,
	1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638,
	1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648,
	1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658,
	1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668,
	1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678,
	1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688,
	1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698,
	1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708,
	1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718,
	1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728,
	1441, 1484, 1444, 1439, 188, 190, 192, 193, 0, 0,
	0, 0, 0, 0, 675, 1469, 1482, 1483, 1484, 1487,
	1488, 1489, 1544, 0, 215, 217, 220, 221, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 735, 347,
	1635, 349, 351, 0, 0, 0, 0, 243, 244, 245,
	246, 247, 248, 251, 253, 254, 0, 0, 0, 0,
	0, 0, 0, 346, 344, 1464, 288, 289, 0, 0,
	329, 330, 331, 332, 333, 334, 336, 293, 295, 297,
	298, 300, 302, 304, 306, 308, 310, 312, 314, 315,
	317, 319, 320, 322, 324, 325, 327, 736, 0, 0,
	0, 0, 0, 170, 0, 361, 355, 360, 362, 364,
	365, 366, 367, 0, 0, 168, 163, 0, 0, 608,
	342, 340, 0, 162, 0, 0, 772, 0, 361, 1511,
	359, 773, 774, 0, 0, 768, 769, 1665, 803, 369,
	371, 380, 382, 384, 387, -2, -2, 1761, -2, 410,
	-2, 418, 1764, 1667, 421, 0, 423, -2, 426, 449,
	451, 453, 455, 457, 459, 461, 463, 466, 468, 470,
	472, 474, 476, 478, 480, 482, 484, 486, 488, 490,
	492, 494, 496, 498, 499, 0, 0, 0, 0, 0,
	503, 0, -2, -2, 0, 0, 0, 0, 0, -2,
	0, -2, 0, -2, -2, -2, 0, 0, 0, -2,
	-2, 0, 0, 502, 504, 505, 506, 0, 551, 590,
	591, 776, 778, 780, 0, 716, 902, 63, 65, 67,
	69, 71, 223, 225, 227, 229, 232, 234, -2, 874,
	875, 256, 258, 260, 262, 264, -2, 0, 906, 906,
	906, 0, 0, 875, 873, 0, 372, 0, 374, 0,
	503, 377, 378, 430, 431, 1117, 0, 0, 0, 0,
	0, 1258, 1201, -2, -2, 1233, 1235, 1740, 1761, 0,
	1237, 1238, 1239, 1240, 0, 0, 1243, 0, 1245, 1246,
	1247, 1248, 0, 1250, 1254, 1255, 0, 1418, 1480, -2,
	1031, 1032, 1033, 1034, 1035, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1476, 1471, 1322, 1269, -2, 1498, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1551, -2, -2, -2, -2, -2, -2, 1084, -2,
	-2, -2, -2, -2, -2, -2, 1773, 1273, 1274, 1275,
	1276, 1277, 1278, 1279, 1280, 1281, 0, 1729, 1746, 1747,
	1752, 1754, 1748, 1737, 1292, -2, 1774, 1775, 1776, 1777,
	1778, 1779, 1780, 1781, 1782, 1783, 1786, 1787, 1788, 1789,
	1790, 1791, -2, -2, -2, 1741, 1742, 1744, 1753, 1757,
	1758, 1763, 1767, 1768, 805, 783, 796, 805, 785, 786,
	787, 788, 789, 794, 795, 798, 0, 790, 791, 792,
	892, 1642, 895, 675, 893, 877, 879, 0, 881, 0,
	0, 0, 886, 909, 907, 0, 945, 890, 891, 901,
	960, 983, 0, 965, 0, 983, 1005, 0, 970, 1661,
	1270, 1271, 0, 1484, 1481, -2, 1784, 1785, 2, 80,
	0, 1746, 1005, 82, 0, 1746, 85, 0, 1746, 0,
	-2, 89, 0, 1746, 171, 172, 1494, 1495, 1499, 1500,
	1501, 1502, 1773, 92, 0, 1460, 101, 0, 1746, 1438,
	0, 1457, 1503, 1504, 1505, 1506, 1507, 1792, 1793, 1794,
	1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804,
	1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814,
	1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824,
	1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834,
	1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844,
	1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854,
	1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864,
	1865, 1866, 1867, 1868, 1869, 1870, 1871, 0, 1454, 0,
	0, 600, 1435, 1440, 601, 1445, 0, 194, 195, 196,
	197, 198, 1746, 200, 201, 0, 203, 204, 1746, 206,
	207, 0, 209, 0, 0, 0, 0, 0, 230, 675,
	1746, 0, 237, 1465, 0, 699, 1746, 697, 1468, -2,
	1746, 719, 722, 1746, 724, 675, 726, 1467, -2, 1491,
	899, 1746, 819, 348, 350, 0, 242, 0, 832, 0,
	834, 0, 853, 1011, 155, 1746, 267, 286, 155, 1746,
	270, 155, 1746, 273, 155, 1746, 276, 1433, 155, 1746,
	279, 280, 1746, 282, 173, 283, 1746, 285, 343, 0,
	0, -2, 337, 1470, -2, 0, 335, 294, 296, 299,
	301, 303, 305, 307, 309, 311, 313, 316, 318, 321,
	323, 326, 328, -2, 0, 0, 0, 0, 0, 0,
	606, 607, 0, 0, 0, 770, 771, 0, 0, 0,
	391, 0, 0, 0, 0, 802, 388, 0, 407, 0,
	409, 1736, -2, -2, 413, 806, 810, 811, 812, 0,
	0, 0, 0, 420, 0, 0, 0, 424, 427, 0,
	500, 501, 0, 0, 511, 512, 513, 514, 1640, 1565,
	517, 0, 520, 541, 555, 0, 0, 524, 526, 605,
	528, 0, 0, 530, 0, 532, 0, 534, 0, 536,
	0, 538, 540, 542, 556, 544, 0, 0, 0, 554,
	0, 560, 0, 563, 564, 565, 0, 567, 568, 569,
	0, 0, 0, 577, 579, 0, 589, 0, 507, 508,
	155, 1009, -2, 0, 869, 923, 924, 0, 0, 0,
	0, 904, 905, 0, 0, 0, 865, 866, 373, 0,
	376, 0, 0, 0, 0, 1353, 1354, 1355, 1356, 1357,
	1358, 1361, 1362, 1359, 1360, 1363, 1364, 0, 0, 0,
	0, 0, 1365, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1366, 1367, 1368, 0, 0, 1370,
	0, 1372, 0, 0, 0, 0, 0, 0, 1180, 1182,
	1426, 0, 0, 1369, 1122, 1123, 1124, 1159, 1160, 0,
	1234, 1423, 1422, 1236, 0, 1375, -2, 1376, 1258, 0,
	0, 0, 1242, 0, 1114, 1249, 1451, 1256, 1257, 1375,
	0, 1417, 0, 1324, 0, 1067, 0, 1068, 1069, 0,
	1070, 1071, 1082, 1089, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1085, 1086, 0, 0, 0, 0, 0, 1398,
	-2, 0, 0, 782, -2, 784, 0, 800, 0, 894,
	0, 0, 949, 1427, 1431, 1432, 949, 949, 0, 0,
	1376, 0, 0, 0, 0, 1002, 1002, 1002, 1000, 977,
	0, 983, 0, 993, 0, 983, 983, 0, -2, 965,
	0, 0, 993, 1006, 1007, 0, 0, 0, 0, 102,
	765, 123, 0, 765, 765, 0, 0, 142, 0, 0,
	0, 0, 0, 0, 119, 108, 109, 0, 0, 86,
	700, 0, 703, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	121, 0, 146, 148, 0, 0, 0, 0, 996, 599,
	0, 0, 1485, 1443, 0, 0, 0, 0, 0, 0,
	1485, 0, 0, 1471, 1472, 614, 0, 0, 0, 240,
	695, 698, 0, 717, 0, 898, 0, 0, 0, 0,
	1746, 731, 1456, 1490, 0, 1746, 821, 0, 1015, 0,
	835, 0, 0, 1012, 0, 265, 0, 153, 154, 0,
	268, 0, 271, 0, 274, 0, 0, 277, 0, 0,
	0, 0, 0, 901, 0, 0, 185, 0, 353, 363,
	0, 0, 0, 0, 901, 0, 1378, 1023, 1026, 1027,
	1028, 1114, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043,
	1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1090,
	1084, 1100, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,
	1064, 1065, 1066, 1080, 0, 1055, 1055, 1055, 1072, 1073,
	1091, 1092, 1094, 1096, 1098, 1024, 1025, 1090, 1090, 1087,
	1088, 185, 0, 357, 0, 996, 393, 996, 395, 0,
	585, 0, 0, 0, 0, -2, 415, 0, 808, 0,
	813, 439, 440, 441, 815, 816, 419, 442, 443, 444,
	445, 446, 447, 0, 692, 0, 694, 1447, 0, 416,
	432, 417, 422, 0, 428, 0, 0, 515, 516, 518,
	519, 521, 522, 523, 527, 0, 593, 1657, 603, 529,
	531, 533, 535, 537, 0, 546, 0, 548, 0, 550,
	558, 561, 566, 570, 571, 572, 573, 574, 575, 0,
	0, 0, 715, 0, 872, 921, 922, 927, 931, 932,
	935, 938, 939, 929, 1117, 887, 888, 889, 915, 916,
	748, 0, 0, 375, 1118, 1019, 1020, 1074, 1075, 1076,
	1077, 1078, 1119, 1120, 1453, 0, 1125, 1126, 1127, 1128,
	1129, 1130, 1131, 1132, 1133, 1134, -2, -2, -2, -2,
	-2, -2, -2, -2, 1143, 1144, 1145, 1146, 1147, 1148,
	1149, 1150, 1151, 1152, 1153, -2, -2, -2, 1157, 1158,
	-2, 1371, 1373, 0, 1426, 0, -2, 0, -2, -2,
	-2, -2, 1177, 0, 1179, 1184, 1186, 1188, 0, 0,
	0, 0, 1425, 1198, 1409, 0, 0, 1350, 1351, 1352,
	1183, 0, 0, 1424, 1421, 0, 0, 1374, 1253, 0,
	0, 912, 1260, 0, 0, 0, 0, 1267, 0, 1452,
	1101, 1102, 1103, 1104, 1105, 1106, 1115, 0, 0, 1382,
	1416, 1412, 0, 1473, 1479, 1332, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1293, 1294, 1295, 1296, 1297,
	1298, 1299, 1300, 1301, 1302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1304, 0, 1385, -2, -2, -2,
	-2, -2, -2, -2, 0, 1306, 0, 1318, 0, 1320,
	0, 1308, 1376, 1395, 0, 0, 1204, 0, 0, 0,
	1258, 0, 1311, 1376, 1403, 0, 0, 0, 0, 0,
	1376, 0, 1408, 799, 896, 0, 0, 1015, 0, 0,
	0, 1430, 1015, 1015, 0, 944, 0, 0, 0, 0,
	0, 0, 997, 1001, 998, 999, 0, 0, 983, 993,
	957, 0, 0, 1455, 963, 992, 0, 675, 982, 993,
	993, 0, -2, 967, 0, 0, 912, -2, 0, 0,
	0, 0, 764, 125, 1746, 0, 157, 0, 0, 665,
	1461, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 0, 0, 0,
	0, 701, 702, 704, 710, 712, 0, 706, 1450, 0,
	707, 0, 709, 711, 713, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 0, 0, 0,
	0, 1437, 0, 0, 176, 995, 0, 1436, 1446, 0,
	199, 202, 205, 208, 186, 674, 0, 0, 0, 0,
	613, -2, 615, 617, 618, 619, 620, 1590, 1491, 0,
	1491, 0, 0, 0, 185, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 823, 829, 0, 914, 0,
	851, 837, 0, 0, 0, 851, 855, 856, 858, 859,
	0, 0, 1013, 287, 155, 155, 155, 1434, 155, 155,
	174, 281, 284, 345, 290, 338, 901, 0, 0, 0,
	0, 185, 0, 0, 0, 339, 0, 0, 0, 341,
	0, 1016, 1018, 0, 1029, 0, 1082, 0, 160, 185,
	0, 0, 392, 397, 0, 586, 0, 0, 408, 0,
	807, 814, 0, 436, 0, 438, 693, 1449, 1448, 0,
	429, 509, 0, 604, 602, 545, 0, 0, 0, 587,
	588, 592, 1010, 0, 933, 0, 930, 936, 937, 0,
	918, 746, 747, 0, 0, 0, 0, -2, -2, 0,
	0, 0, 1199, 0, -2, 1178, 1181, 1185, 1187, 1189,
	0, 0, 0, 0, 0, 0, 0, 1200, 1419, 1422,
	1348, 0, 0, 1377, 0, 0, 911, 912, 912, 912,
	1266, 0, 0, 0, 0, 0, 0, 1380, 1381, 0,
	0, 1413, 0, 0, 0, 1268, 0, 0, 0, 1079,
	1053, 0, 1093, 1095, 1097, 1099, 0, 0, 0, 0,
	0, 1287, 0, 0, 0, 1291, 1303, 0, 1305, 1317,
	1319, 1307, 0, 0, 1309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1207, 1208,
	1209, 1310, 1401, 1402, 0, 0, 0, 0, 0, 0,
	1316, 0, 1407, 901, 946, 941, 1428, 996, 948, 950,
	1429, 1458, 941, 941, 0, 1377, 985, 0, 987, 0,
	0, 0, 989, 0, 978, 0, 980, 993, 962, 0,
	0, 955, 0, 954, 675, 991, 964, 968, 1473, 0,
	1008, 0, 972, 975, 0, 0, 124, 752, 0, 0,
	1459, 0, 127, 1746, 136, 0, 642, 0, 0, 0,
	0, 0, 767, 137, 1746, 155, 1746, 155, 138, 141,
	0, 145, 143, 0, 0, 633, 103, 765, 106, 112,
	0, 0, 758, 0, 705, 708, 714, 87, 0, 760,
	750, 0, 0, 749, 147, 107, 113, 0, 0, 762,
	105, 0, 0, 0, 185, 0, 0, 1442, 1486, 210,
	212, 213, 211, 622, 0, 1491, 0, 1491, 0, 1463,
	611, 675, 0, 238, 239, 699, 720, -2, 723, 725,
	734, 0, 0, 0, 825, 829, 0, 828, 899, 926,
	913, 1014, 830, 851, 0, 0, 0, 840, 842, 839,
	836, 833, 1015, 0, 0, 0, 0, 0, 266, 269,
	272, 275, 278, 291, 0, 183, 1623, 181, 178, 180,
	352, 0, 164, 0, 0, 0, 1379, 0, 1021, 0,
	0, 0, 0, 161, 356, 0, 394, 0, 0, 0,
	0, 0, 0, 405, 406, -2, 434, 435, 437, 433,
	0, 547, 549, 557, 0, 0, 917, 748, 0, 1121,
	1162, 0, 0, -2, 0, 0, 1166, 0, 0, 0,
	-2, 0, 0, 0, 1410, 0, 1421, 1251, 1252, 1259,
	1349, 1261, 0, 0, 0, 0, 1244, 1107, 1108, 1109,
	1110, 1111, 1112, 1113, 0, 1383, 1411, 1415, 0, 1474,
	1478, 1330, 1331, 1335, 1466, 0, 0, 0, 1272, 0,
	0, 0, 0, 0, 0, 0, 1384, 1394, 1396, 1205,
	1206, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218,
	1219, -2, -2, -2, 1223, 1224, 1225, -2, -2, -2,
	0, 0, 0, 1397, 1399, 1400, 1404, 1405, 0, 1313,
	1314, 1315, 1406, 0, 943, 0, 947, 0, 943, 943,
	908, 986, 0, 1004, 988, 960, 979, 0, 969, 958,
	0, 959, 0, 990, 0, 966, 971, 0, 974, 0,
	1261, -2, 0, 0, 0, 0, 156, 640, 664, 0,
	0, 737, 745, 745, 0, 1461, 0, 0, 129, 0,
	0, 0, 0, 134, 0, 140, 144, 0, 0, 0,
	0, 0, 116, 0, 0, 0, 0, 115, 118, 0,
	0, 114, 0, 158, 0, 0, 630, 0, 616, 0,
	0, 0, 0, 614, 0, 236, 696, 718, 0, 0,
	0, 0, 0, 827, 829, 0, 820, 821, 851, 925,
	831, 849, 850, 848, 0, 0, 0, 914, 857, 854,
	860, 861, 0, 169, 0, 0, 0, 0, 354, 0,
	0, 0, 0, 1022, 1030, 0, 1083, 358, 0, 580,
	581, 628, 0, 584, 510, 928, 934, 919, 748, 1164,
	1168, 0, 0, 0, 1170, -2, 0, 1192, -2, -2,
	1420, 1241, 912, 1262, 1264, 1265, 1116, 1414, 0, 1337,
	1334, 0, 1321, 1054, 1282, 1283, 0, 0, 1286, 1288,
	1289, 1290, 1393, 0, 0, 0, 0, 1312, 897, 1326,
	0, 0, 951, 1326, 1326, 0, 983, 981, 956, 952,
	0, 1474, 973, 0, 0, 754, 756, 126, 0, 641,
	0, 644, 0, 0, 0, 0, 651, 652, 0, 0,
	0, 0, 0, 666, 673, 0, 748, 0, 748, 0,
	0, 0, 0, 131, 150, 0, 0, 766, 0, 155,
	155, 0, 0, 753, 0, 0, 0, 759, 761, 751,
	0, 763, 0, 175, 0, 609, 629, 0, 0, 0,
	0, 0, 0, 0, 0, 732, 733, 0, 0, 0,
	817, 829, 0, 822, 823, 241, 0, 0, 0, 838,
	841, 843, 926, 0, 182, 0, 177, 179, 185, 0,
	0, 1017, 1081, 396, 398, 0, 0, 404, 582, 627,
	0, 0, 920, 1172, -2, -2, 1193, 0, 1475, 1477,
	914, 0, 1323, 0, 0, -2, 0, 0, 0, 883,
	0, 942, 940, 884, 885, 1003, 993, 0, 976, 128,
	0, 645, 646, 1462, 648, 0, 650, 653, 0, 655,
	1493, 0, 659, 622, 0, 670, 671, 738, 739, 744,
	740, 745, 668, 0, 130, 132, 149, 743, 133, 139,
	0, 0, 0, 0, 0, 0, 0, 994, 0, 0,
	673, 0, 663, 622, 612, 0, 734, 729, 0, 0,
	824, 825, 0, 0, 0, 851, 862, 184, 165, 0,
	0, 0, 400, 0, 402, 0, 626, 0, 1263, 1340,
	0, 1284, 1285, -2, 0, 1231, 1325, 1327, 0, 961,
	953, 643, 647, 0, 0, 679, 0, 0, 630, 0,
	748, 0, 152, 0, 0, 0, 755, 757, 0, 0,
	117, 0, 662, 622, 673, 630, 673, 0, 0, 826,
	827, 0, 845, 1015, 847, 852, 0, 0, 399, 0,
	0, 583, 0, 0, 0, 1336, 1232, 0, 0, 0,
	654, 684, 0, 0, 0, 667, 0, 741, 675, 135,
	0, 742, 0, 634, 0, 0, 637, 0, 0, 0,
	0, 630, 622, 610, 622, 0, 0, 818, 0, 846,
	185, 185, 401, 403, 1333, 1338, 1341, -2, 1711, 1541,
	0, 1339, 1328, 1329, 0, 656, 680, 681, 0, 676,
	677, 678, 1492, 657, 658, 672, 679, 151, 631, 0,
	0, 632, 0, 0, 120, 122, 0, 660, 630, 630,
	0, 730, 1015, 166, 167, 0, 1343, 1344, 1345, 1346,
	1347, 649, 682, 0, 683, 0, 0, 0, 684, 635,
	0, 638, 0, 625, 661, 727, 673, 844, 0, 685,
	0, 688, 689, 0, 686, 669, 0, 0, 621, 623,
	624, 622, 1342, 687, 690, 691, 0, 0, 630, 630,
	0, 728, 636, 0, 0, 0, 630, 639,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 411, 3, 417, 412, 3,
	422, 423, 415, 413, 427, 414, 424, 416, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 431, 426,
	403, 405, 404, 407, 428, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 420, 3, 421, 418, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 429, 410, 430, 408,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 406, 57746, 409, 57747, 419, 57748, 425, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1027
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1033
		{
			l := sqlDollar[1].union.stmts()
			s := sqlDollar[3].union.stmt()
			if s != nil {
				l = append(l, s)
			}
			sqlVAL.union.val = l
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1042
		{
			sqlVAL.union.val = []tree.Statement(nil)
			s := sqlDollar[1].union.stmt()
			if s != nil {
				sqlVAL.union.val = []tree.Statement{s}
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1051
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1053
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1058
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1059
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1060
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1062
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1063
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1064
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1065
		{
			return helpWith(sqllex, "GRANT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1066
		{
			return helpWith(sqllex, "INSERT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1067
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1068
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1069
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1070
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1071
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1072
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1073
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1076
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1079
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1084
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1085
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1086
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1088
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1097
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1098
		{
			return helpWith(sqllex, "ALTER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1101
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1102
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1103
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1104
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1105
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 80:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1145
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1156
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 85:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1171
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1175
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1179
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1190
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1202
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1228
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1232
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1236
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1242
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1246
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1252
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1258
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1268
		{

			sqlVAL.union.val = &tree.Relocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1275
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1282
		{

			sqlVAL.union.val = &tree.Relocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1289
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1296
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1306
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1316
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:1326
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1339
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1351
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1355
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1361
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1365
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1371
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1375
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1382
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1387
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1392
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1397
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1402
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1407
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1412
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1416
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1419
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1428
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1440
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1450
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1457
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1460
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1467
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1476
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1485
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1490
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1497
		{
			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1504
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1505
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1509
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1513
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1519
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1527
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1531
		{
			sqlVAL.union.val = nil
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1537
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1541
		{
			sqlVAL.union.val = nil
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1548
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1552
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 155:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1556
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1562
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1566
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 158:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1592
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1595
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1618
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1622
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1625
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1629
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 164:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1660
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:1664
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1668
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1672
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1675
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1692
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1695
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1699
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1703
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1709
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1713
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1719
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 176:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1723
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1729
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1733
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1737
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1741
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1747
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1751
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1757
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1761
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1764
		{
		}
	case 186:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1768
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1780
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1781
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1782
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1783
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1793
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1801
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1803
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1806
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1816
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1825
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1833
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1835
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1839
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1842
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1852
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1861
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1869
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1871
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1875
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1878
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1882
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1887
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1893
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1894
		{
			sqlVAL.str = ""
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1903
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1904
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1906
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1907
		{
			return helpWith(sqllex, "CREATE")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1910
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1911
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1912
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1913
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1915
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1916
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1917
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1928
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1935
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1939
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1949
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1953
		{
			sqlVAL.union.val = nil
		}
	case 241:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1966
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1976
		{
			return helpWith(sqllex, "DELETE")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1983
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1986
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1987
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1988
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1989
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1990
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1999
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2000
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2001
		{
			return helpWith(sqllex, "DROP")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2004
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2005
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2006
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2007
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2008
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2016
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2020
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2023
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2031
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2035
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2038
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2046
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2050
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2053
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2061
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2069
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2076
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2084
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2092
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2099
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2107
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2111
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2114
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2122
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2126
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2129
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2133
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2137
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2158
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2161
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2163
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2167
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2174
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2177
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2178
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2180
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2181
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2182
		{
			return helpWith(sqllex, "DELETE")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2183
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2184
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2185
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2186
		{
			return helpWith(sqllex, "INSERT")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2187
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2189
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2190
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2192
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2195
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2196
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2198
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2199
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2207
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2208
		{
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2212
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2216
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 339:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2226
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2233
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2237
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 342:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2241
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2251
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2257
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2263
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 346:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2267
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2277
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2281
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2285
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2289
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2292
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2312
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2316
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2320
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2323
		{
			return helpWith(sqllex, "GRANT")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2343
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2347
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2351
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2354
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2359
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2363
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2374
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2378
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2392
		{
			return helpWith(sqllex, "RESET")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2393
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2401
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2405
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2408
		{
			return helpWith(sqllex, "RESET")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2416
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2419
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2430
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2433
		{
			return helpWith(sqllex, "USE")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2437
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2438
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2439
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2440
		{
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2441
		{
			return helpWith(sqllex, "USE")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2442
		{
			return unimplemented(sqllex, "set local")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2458
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2473
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2476
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2494
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2502
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2506
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2510
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2516
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2520
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2526
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2530
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2534
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2538
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2542
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2553
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2557
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2560
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2566
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2582
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2586
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 411:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2591
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2608
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2611
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2613
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2616
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2620
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2631
		{
			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2648
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2655
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2661
		{
			return unimplemented(sqllex, "set from current")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2662
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2670
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2675
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2682
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2686
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2692
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2696
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2703
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2709
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2713
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2719
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2723
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2727
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2731
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2735
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2741
		{
			sqlVAL.union.val = tree.Low
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2745
		{
			sqlVAL.union.val = tree.Normal
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2749
		{
			sqlVAL.union.val = tree.High
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2760
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2764
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2768
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2773
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2777
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2789
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2790
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2791
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2792
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2793
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2794
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2795
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2796
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2798
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2799
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2800
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2801
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2802
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2803
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2804
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2805
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2806
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2807
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2808
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2809
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2810
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2811
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2812
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2813
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2815
		{
			return helpWith(sqllex, "SHOW")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2822
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2823
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2824
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2835
		{
			sqlVAL.str = "client_encoding"
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2838
		{
			sqlVAL.str = "timezone"
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2839
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2853
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2857
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2860
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2871
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2879
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2887
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2894
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2901
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2907
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2917
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2921
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2924
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2926
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2929
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2937
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2940
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2948
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2951
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2964
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2972
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2980
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2983
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2985
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2988
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2990
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2993
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3001
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3004
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3006
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3009
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3017
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3020
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3022
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3026
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3036
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3039
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3048
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3051
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3053
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3056
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3058
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3062
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3065
		{
			sqlVAL.union.val = true
		}
	case 552:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3066
		{
			sqlVAL.union.val = false
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3074
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3077
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3079
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3083
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3093
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3102
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3111
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3114
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3121
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3125
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3128
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3135
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3139
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3147
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3152
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3157
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3161
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3169
		{
			sqlVAL.union.val = &tree.ShowCreateTable{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3172
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3180
		{
			sqlVAL.union.val = &tree.ShowCreateView{View: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3183
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3190
		{
			sqlVAL.union.val = &tree.ShowCreateSequence{Sequence: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3193
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3201
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3204
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3212
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3215
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3219
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3224
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3229
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3236
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3244
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3251
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3256
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3268
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3272
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3275
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 592:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3283
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3290
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 594:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3295
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3415
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3419
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3423
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3462
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3466
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3471
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3475
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3484
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3491
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3495
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3507
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3516
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3519
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 609:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3555
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3567
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3581
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3592
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3606
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3612
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3616
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3622
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3628
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3634
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3642
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3649
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3654
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 625:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3659
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3665
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 628:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3672
		{
			sqlVAL.str = ""
		}
	case 630:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3679
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 631:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3685
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3692
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3699
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3705
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3709
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 636:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3715
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3725
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3729
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 639:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3735
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         &tree.Tuple{Exprs: sqlDollar[5].union.exprs()},
				To:           &tree.Tuple{Exprs: sqlDollar[9].union.exprs()},
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3746
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3757
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 642:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3761
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3767
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3771
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3775
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3779
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3783
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3787
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3791
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3809
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3813
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3817
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3821
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3825
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3829
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3833
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3841
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3845
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3849
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 660:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3856
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3866
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3878
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3888
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3900
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3905
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3911
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3917
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3928
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3938
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3962
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3966
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3972
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3976
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3981
		{
			return unimplemented(sqllex, "match full")
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3982
		{
			return unimplemented(sqllex, "match partial")
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3983
		{
			return unimplemented(sqllex, "match simple")
		}
	case 679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3984
		{
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3991
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3995
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3999
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4003
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4007
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4013
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4019
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4027
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4031
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4035
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4039
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4043
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4049
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4053
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4057
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 695:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4075
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 696:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4083
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4091
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 699:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4095
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4098
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4099
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4102
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4103
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4105
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4106
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4107
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4110
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4112
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4114
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4116
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4117
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4119
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4120
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4122
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4131
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4134
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 717:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4142
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4146
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4149
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4153
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 721:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4157
		{
			sqlVAL.union.val = nil
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4167
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4171
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4174
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 725:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4182
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4189
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 727:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:4207
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql-gen.y:4220
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:4234
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:4243
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4252
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4257
		{
			sqlVAL.union.val = true
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4261
		{
			sqlVAL.union.val = false
		}
	case 734:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4265
		{
			sqlVAL.union.val = false
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4271
		{
			sqlVAL.union.val = true
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4275
		{
			sqlVAL.union.val = false
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4281
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4285
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4294
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4297
		{
			return unimplemented(sqllex, "index_elem func expr (computed indexes)")
		}
	case 741:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4298
		{
			return unimplemented(sqllex, "index_elem a_expr (computed indexes)")
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4301
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4302
		{
			sqlVAL.str = ""
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4305
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 745:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4306
		{
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4310
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4314
		{
			sqlVAL.union.val = tree.Descending
		}
	case 748:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4318
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 749:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4324
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4331
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4335
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4341
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4345
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4349
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4353
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4357
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 757:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4359
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 758:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4363
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4367
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4373
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4377
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4383
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4387
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4392
		{
		}
	case 765:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4393
		{
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4396
		{
		}
	case 767:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4397
		{
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4405
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4408
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4418
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4427
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4430
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4438
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4441
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4445
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4446
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4447
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4463
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4466
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4468
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4471
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4481
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4484
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4486
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4489
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4493
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4498
		{
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4499
		{
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4500
		{
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4508
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4515
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4518
		{
		}
	case 797:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4519
		{
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4523
		{
			sqlVAL.str = ""
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4527
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4531
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4535
		{
			sqlVAL.str = ""
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4541
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4545
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4551
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4555
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4561
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4565
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4578
		{
		}
	case 809:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4580
		{
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4584
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4588
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4592
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4598
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4604
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4610
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4614
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 817:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4624
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4634
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4644
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 820:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4648
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 821:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4652
		{
			sqlVAL.str = ""
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4658
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 823:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4662
		{
			sqlVAL.str = ""
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4668
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 825:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4672
		{
			sqlVAL.str = ""
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4678
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 827:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4682
		{
			sqlVAL.str = ""
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4687
		{
		}
	case 829:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4688
		{
		}
	case 830:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4700
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 831:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4707
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 832:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4714
		{
			return helpWith(sqllex, "INSERT")
		}
	case 833:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4725
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4732
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4736
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4744
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4750
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4754
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4758
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4764
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4768
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4788
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 844:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4792
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4796
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4802
		{

			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4806
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 848:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4808
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4814
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4819
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 851:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4823
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 852:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4840
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4851
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4855
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 855:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4856
		{
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4860
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4864
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4877
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4880
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 862:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4884
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4927
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4933
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4937
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4952
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4956
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4960
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4964
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4968
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4972
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4979
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5014
		{
			return helpWith(sqllex, "SELECT")
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5015
		{
			return helpWith(sqllex, "VALUES")
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5016
		{
			return helpWith(sqllex, "TABLE")
		}
	case 883:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5038
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5051
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5065
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5077
		{
			return helpWith(sqllex, "SELECT")
		}
	case 887:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5081
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5090
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5099
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5114
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5121
		{
			return helpWith(sqllex, "TABLE")
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5133
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5136
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5137
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5141
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5145
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 897:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5151
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5159
		{
		}
	case 899:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5160
		{
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5164
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 901:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5167
		{
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5170
		{
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5171
		{
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5175
		{
			sqlVAL.union.val = true
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5179
		{
			sqlVAL.union.val = false
		}
	case 906:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5183
		{
			sqlVAL.union.val = false
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5189
		{
			sqlVAL.union.val = true
		}
	case 908:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5195
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5200
		{
		}
	case 910:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5201
		{
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5204
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 912:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5205
		{
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5209
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 914:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5213
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5219
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5225
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5229
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5235
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5239
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5243
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5252
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5261
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5272
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5276
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5285
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5291
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5298
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5305
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5314
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5318
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 935:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5322
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5328
		{
		}
	case 937:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5329
		{
		}
	case 938:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5332
		{
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5333
		{
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5350
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 941:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5354
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5360
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 943:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5364
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 944:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5383
		{
			sqlVAL.union.val = &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5386
		{
			return helpWith(sqllex, "VALUES")
		}
	case 946:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5388
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &tree.Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5400
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5403
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 949:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5405
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5411
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5415
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5421
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5425
		{

			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5431
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5437
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5442
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}

			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5465
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5469
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5473
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 960:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5477
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 961:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5504
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5518
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5522
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5525
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5527
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 966:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5531
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5535
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5540
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 969:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5556
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5562
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5566
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5572
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5574
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 974:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5578
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 975:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5584
		{
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5586
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 977:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5589
		{
			sqlVAL.union.val = nil
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5590
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5591
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5595
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5599
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 982:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5605
		{
			sqlVAL.union.val = true
		}
	case 983:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5609
		{
			sqlVAL.union.val = false
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5629
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5633
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5637
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5641
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5645
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5649
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5655
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5659
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5666
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5672
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5679
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5685
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5689
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 999:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5693
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5697
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5703
		{
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5704
		{
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5715
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5719
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5724
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5725
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5726
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5727
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5731
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5735
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5748
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5752
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5756
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5762
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5766
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5778
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5792
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5801
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5812
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5816
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5823
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5825
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5834
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5838
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5842
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5851
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5869
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5873
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5877
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5881
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5885
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5889
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5893
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5897
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5901
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5905
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5909
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5913
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5917
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5921
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5925
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5929
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5933
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5953
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5957
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5961
		{
			sqlVAL.union.val = nil
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5968
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5972
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5976
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5980
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5984
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5988
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5992
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5996
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6000
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6004
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6008
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6012
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6022
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6026
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6035
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6044
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6053
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6057
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6064
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6068
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6072
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6076
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6080
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6086
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6090
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6096
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6107
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6113
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6125
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6131
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6135
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6139
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6143
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6148
		{
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6149
		{
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6154
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6158
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6162
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6166
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6170
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6174
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6178
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6182
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6186
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6191
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6197
		{
			sqlVAL.union.val = tree.Year
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6201
		{
			sqlVAL.union.val = tree.Month
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6205
		{
			sqlVAL.union.val = tree.Day
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6209
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6213
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6217
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6223
		{
			sqlVAL.union.val = tree.Month
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6227
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6231
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6235
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6239
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6243
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6247
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6251
		{
			sqlVAL.union.val = nil
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6257
		{
			sqlVAL.union.val = tree.Second
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6260
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6284
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6288
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6292
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6295
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6304
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6308
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6312
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6316
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6320
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6324
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6328
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6332
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6336
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6340
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6344
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6348
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6352
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6356
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6360
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6364
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6368
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6372
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6376
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6380
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6384
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6388
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6392
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6396
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6400
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6404
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6408
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6412
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6416
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6420
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6424
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6428
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6432
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6436
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6440
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6444
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6448
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6452
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6456
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6460
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6464
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6468
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6472
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6476
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6480
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6484
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6488
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6492
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6496
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6500
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6504
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6508
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6512
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6516
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6520
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6524
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6528
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6532
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6536
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6540
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6544
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6547
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6549
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6553
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6557
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6561
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6565
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6569
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6573
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6577
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6581
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6585
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6589
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6593
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6597
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6601
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6605
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6609
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6613
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6630
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6634
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6638
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6653
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6657
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6661
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6665
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6669
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6673
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6677
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6681
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6685
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6689
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6693
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6697
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6701
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6705
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6709
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6713
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6717
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6721
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6725
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6729
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6733
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6737
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6741
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6745
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6749
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6753
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6757
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6761
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6775
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6783
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6819
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6823
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6827
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6831
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6834
		{
			return unimplemented(sqllex, "func const")
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6836
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6840
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6843
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6845
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6849
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6853
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6857
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6861
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6870
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6875
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6879
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6883
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6888
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6892
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6896
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6900
		{
			t := sqlDollar[1].union.tuple()
			sqlVAL.union.val = &t
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6905
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = &t
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6920
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6924
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6927
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6928
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6930
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6934
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6938
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6941
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6952
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6959
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6968
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6969
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6973
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6975
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6979
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6985
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6989
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6993
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6997
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7003
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7007
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7011
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7015
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7019
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7023
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7027
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7031
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7035
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7039
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7043
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7047
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7051
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7058
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7061
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7063
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7066
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7068
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7071
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7073
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7076
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7078
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7081
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7083
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7086
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7088
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7091
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7093
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7096
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7098
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7102
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7105
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7106
		{
			return unimplemented(sqllex, "treat")
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7108
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7112
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7116
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7120
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7124
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7127
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7129
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7132
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7137
		{
			return unimplemented(sqllex, "within group")
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7138
		{
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7142
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7146
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7153
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7157
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7163
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7167
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7173
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7181
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7185
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7189
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7196
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7216
		{
			sqlVAL.str = ""
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7222
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7226
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7237
		{
			bounds := sqlDollar[2].union.windowFrameBounds()
			startBound := bounds.StartBound
			endBound := bounds.EndBound
			switch {
			case startBound.BoundType == tree.ValuePreceding:
				sqllex.Error("RANGE PRECEDING is only supported with UNBOUNDED")
				return 1
			case startBound.BoundType == tree.ValueFollowing:
				sqllex.Error("RANGE FOLLOWING is only supported with UNBOUNDED")
				return 1
			case endBound != nil && endBound.BoundType == tree.ValuePreceding:
				sqllex.Error("RANGE PRECEDING is only supported with UNBOUNDED")
				return 1
			case endBound != nil && endBound.BoundType == tree.ValueFollowing:
				sqllex.Error("RANGE FOLLOWING is only supported with UNBOUNDED")
				return 1
			}
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: bounds,
			}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7261
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7268
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7274
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.ValueFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7287
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.ValuePreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.ValueFollowing && endBound.BoundType == tree.ValuePreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.ValueFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7315
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7319
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7323
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7327
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.ValuePreceding,
			}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7334
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.ValueFollowing,
			}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7350
		{
			sqlVAL.union.val = tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7354
		{
			sqlVAL.union.val = tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7360
		{
			sqlVAL.union.val = tree.Any
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7364
		{
			sqlVAL.union.val = tree.Some
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7368
		{
			sqlVAL.union.val = tree.All
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7373
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7374
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7375
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7376
		{
			sqlVAL.union.val = tree.Div
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7377
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7378
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7379
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7380
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7381
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7382
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7383
		{
			sqlVAL.union.val = tree.LT
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7384
		{
			sqlVAL.union.val = tree.GT
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7385
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7386
		{
			sqlVAL.union.val = tree.LE
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7387
		{
			sqlVAL.union.val = tree.GE
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7388
		{
			sqlVAL.union.val = tree.NE
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7392
		{
			sqlVAL.union.val = tree.Like
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7393
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7394
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7395
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7407
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7413
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7417
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7423
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7427
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7433
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7437
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7443
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7447
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7453
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7457
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7479
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7483
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7487
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7493
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7500
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7504
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7521
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7525
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7529
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7533
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7537
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7543
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7549
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7555
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7559
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7563
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7569
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7573
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7584
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7591
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7595
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7601
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7607
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7611
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7618
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7624
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7628
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7635
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7641
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7645
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7650
		{
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7651
		{
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7655
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7659
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7665
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7674
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7678
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7682
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7690
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7694
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7700
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7704
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7710
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7717
		{

			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7745
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7749
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7753
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7759
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7763
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7771
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7775
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7784
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7795
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7805
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7901
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7908
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7912
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7916
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7930
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7934
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7938
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7951
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7969
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7979
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7983
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7997
		{
			sqlVAL.str = ""
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8003
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8007
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
