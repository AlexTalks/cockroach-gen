// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:24
package parser

import __yyfmt__ "fmt"

//line sql.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:56

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: tblDef().
//
func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql.y:550
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CSV = lex.CSV
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const EMIT = lex.EMIT
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXPERIMENTAL_CHANGEFEED = lex.EXPERIMENTAL_CHANGEFEED
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"EMIT",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPERIMENTAL_CHANGEFEED",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:8057

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 57,
	419, 57,
	-2, 879,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	165, 717,
	-2, 0,
	-1, 60,
	101, 879,
	171, 879,
	367, 879,
	368, 879,
	-2, 0,
	-1, 74,
	113, 853,
	127, 853,
	179, 853,
	205, 853,
	234, 853,
	242, 853,
	364, 853,
	-2, 842,
	-1, 110,
	195, 535,
	355, 535,
	-2, 0,
	-1, 115,
	4, 881,
	20, 881,
	21, 881,
	22, 881,
	23, 881,
	25, 881,
	30, 881,
	35, 881,
	36, 881,
	37, 881,
	38, 881,
	39, 881,
	40, 881,
	41, 881,
	42, 881,
	43, 881,
	44, 881,
	46, 881,
	47, 881,
	48, 881,
	49, 881,
	50, 881,
	51, 881,
	54, 881,
	55, 881,
	56, 881,
	58, 881,
	59, 881,
	63, 881,
	64, 881,
	65, 881,
	66, 881,
	67, 881,
	69, 881,
	70, 881,
	71, 881,
	72, 881,
	74, 881,
	76, 881,
	77, 881,
	80, 881,
	81, 881,
	82, 881,
	90, 881,
	91, 881,
	92, 881,
	93, 881,
	94, 881,
	95, 881,
	96, 881,
	97, 881,
	99, 881,
	101, 881,
	103, 881,
	106, 881,
	107, 881,
	109, 881,
	110, 881,
	114, 881,
	115, 881,
	116, 881,
	117, 881,
	118, 881,
	119, 881,
	120, 881,
	121, 881,
	122, 881,
	123, 881,
	124, 881,
	132, 881,
	133, 881,
	134, 881,
	135, 881,
	136, 881,
	138, 881,
	140, 881,
	144, 881,
	146, 881,
	147, 881,
	149, 881,
	151, 881,
	152, 881,
	153, 881,
	154, 881,
	155, 881,
	156, 881,
	157, 881,
	158, 881,
	161, 881,
	166, 881,
	167, 881,
	168, 881,
	171, 881,
	172, 881,
	173, 881,
	174, 881,
	175, 881,
	176, 881,
	177, 881,
	178, 881,
	180, 881,
	182, 881,
	185, 881,
	186, 881,
	187, 881,
	189, 881,
	190, 881,
	193, 881,
	194, 881,
	195, 881,
	197, 881,
	198, 881,
	200, 881,
	202, 881,
	203, 881,
	206, 881,
	207, 881,
	210, 881,
	212, 881,
	215, 881,
	216, 881,
	217, 881,
	218, 881,
	219, 881,
	221, 881,
	222, 881,
	223, 881,
	224, 881,
	229, 881,
	230, 881,
	231, 881,
	232, 881,
	233, 881,
	235, 881,
	236, 881,
	238, 881,
	239, 881,
	240, 881,
	243, 881,
	244, 881,
	246, 881,
	248, 881,
	249, 881,
	250, 881,
	251, 881,
	252, 881,
	253, 881,
	254, 881,
	255, 881,
	257, 881,
	258, 881,
	259, 881,
	260, 881,
	261, 881,
	263, 881,
	264, 881,
	265, 881,
	266, 881,
	267, 881,
	268, 881,
	269, 881,
	270, 881,
	272, 881,
	273, 881,
	274, 881,
	275, 881,
	276, 881,
	278, 881,
	279, 881,
	280, 881,
	281, 881,
	282, 881,
	283, 881,
	284, 881,
	286, 881,
	288, 881,
	289, 881,
	290, 881,
	291, 881,
	292, 881,
	293, 881,
	295, 881,
	296, 881,
	297, 881,
	298, 881,
	299, 881,
	300, 881,
	301, 881,
	303, 881,
	304, 881,
	305, 881,
	306, 881,
	307, 881,
	308, 881,
	309, 881,
	310, 881,
	311, 881,
	313, 881,
	314, 881,
	315, 881,
	316, 881,
	318, 881,
	319, 881,
	320, 881,
	321, 881,
	323, 881,
	324, 881,
	325, 881,
	326, 881,
	327, 881,
	328, 881,
	329, 881,
	330, 881,
	331, 881,
	332, 881,
	333, 881,
	334, 881,
	336, 881,
	337, 881,
	339, 881,
	340, 881,
	341, 881,
	342, 881,
	343, 881,
	344, 881,
	345, 881,
	346, 881,
	347, 881,
	348, 881,
	350, 881,
	351, 881,
	352, 881,
	355, 881,
	356, 881,
	357, 881,
	358, 881,
	360, 881,
	361, 881,
	362, 881,
	363, 881,
	366, 881,
	367, 881,
	368, 881,
	369, 881,
	371, 881,
	373, 881,
	374, 881,
	375, 881,
	376, 881,
	377, 881,
	378, 881,
	381, 881,
	382, 881,
	387, 881,
	388, 881,
	389, 881,
	390, 881,
	391, 881,
	392, 881,
	-2, 0,
	-1, 136,
	113, 852,
	127, 852,
	179, 852,
	205, 852,
	234, 852,
	242, 852,
	364, 852,
	-2, 845,
	-1, 141,
	1, 775,
	185, 775,
	263, 775,
	267, 775,
	418, 775,
	419, 775,
	-2, 0,
	-1, 143,
	1, 775,
	418, 775,
	419, 775,
	-2, 0,
	-1, 144,
	1, 775,
	418, 775,
	419, 775,
	-2, 0,
	-1, 145,
	1, 779,
	418, 779,
	419, 779,
	-2, 0,
	-1, 171,
	4, 888,
	5, 888,
	6, 888,
	7, 888,
	8, 888,
	9, 888,
	20, 888,
	21, 888,
	22, 888,
	23, 888,
	25, 888,
	30, 888,
	31, 888,
	35, 888,
	36, 888,
	37, 888,
	38, 888,
	39, 888,
	40, 888,
	41, 888,
	42, 888,
	43, 888,
	44, 888,
	46, 888,
	47, 888,
	48, 888,
	49, 888,
	50, 888,
	51, 888,
	52, 888,
	53, 888,
	54, 888,
	55, 888,
	56, 888,
	58, 888,
	59, 888,
	61, 888,
	63, 888,
	64, 888,
	65, 888,
	66, 888,
	67, 888,
	69, 888,
	70, 888,
	71, 888,
	72, 888,
	74, 888,
	76, 888,
	77, 888,
	79, 888,
	80, 888,
	81, 888,
	82, 888,
	83, 888,
	84, 888,
	85, 888,
	86, 888,
	88, 888,
	89, 888,
	90, 888,
	91, 888,
	92, 888,
	93, 888,
	94, 888,
	95, 888,
	96, 888,
	97, 888,
	98, 888,
	99, 888,
	101, 888,
	103, 888,
	106, 888,
	107, 888,
	109, 888,
	110, 888,
	114, 888,
	115, 888,
	116, 888,
	117, 888,
	118, 888,
	119, 888,
	120, 888,
	121, 888,
	122, 888,
	123, 888,
	124, 888,
	125, 888,
	126, 888,
	132, 888,
	133, 888,
	134, 888,
	135, 888,
	136, 888,
	138, 888,
	140, 888,
	143, 888,
	144, 888,
	146, 888,
	147, 888,
	149, 888,
	151, 888,
	152, 888,
	153, 888,
	154, 888,
	155, 888,
	156, 888,
	157, 888,
	158, 888,
	159, 888,
	161, 888,
	166, 888,
	167, 888,
	168, 888,
	170, 888,
	171, 888,
	172, 888,
	173, 888,
	174, 888,
	175, 888,
	176, 888,
	177, 888,
	178, 888,
	180, 888,
	182, 888,
	183, 888,
	184, 888,
	185, 888,
	186, 888,
	187, 888,
	188, 888,
	189, 888,
	190, 888,
	193, 888,
	194, 888,
	195, 888,
	197, 888,
	198, 888,
	200, 888,
	201, 888,
	202, 888,
	203, 888,
	204, 888,
	206, 888,
	207, 888,
	210, 888,
	212, 888,
	213, 888,
	214, 888,
	215, 888,
	216, 888,
	217, 888,
	218, 888,
	219, 888,
	220, 888,
	221, 888,
	222, 888,
	223, 888,
	224, 888,
	225, 888,
	227, 888,
	228, 888,
	229, 888,
	230, 888,
	231, 888,
	232, 888,
	233, 888,
	235, 888,
	236, 888,
	239, 888,
	240, 888,
	243, 888,
	244, 888,
	245, 888,
	246, 888,
	247, 888,
	248, 888,
	249, 888,
	250, 888,
	251, 888,
	252, 888,
	253, 888,
	254, 888,
	255, 888,
	257, 888,
	258, 888,
	259, 888,
	260, 888,
	261, 888,
	263, 888,
	264, 888,
	265, 888,
	266, 888,
	267, 888,
	268, 888,
	269, 888,
	270, 888,
	272, 888,
	273, 888,
	274, 888,
	275, 888,
	276, 888,
	278, 888,
	279, 888,
	280, 888,
	281, 888,
	282, 888,
	283, 888,
	284, 888,
	286, 888,
	287, 888,
	288, 888,
	289, 888,
	290, 888,
	291, 888,
	292, 888,
	293, 888,
	295, 888,
	296, 888,
	297, 888,
	298, 888,
	299, 888,
	300, 888,
	301, 888,
	303, 888,
	304, 888,
	305, 888,
	306, 888,
	307, 888,
	308, 888,
	309, 888,
	310, 888,
	311, 888,
	312, 888,
	313, 888,
	314, 888,
	315, 888,
	316, 888,
	317, 888,
	318, 888,
	319, 888,
	320, 888,
	321, 888,
	323, 888,
	324, 888,
	325, 888,
	326, 888,
	327, 888,
	328, 888,
	329, 888,
	330, 888,
	331, 888,
	332, 888,
	333, 888,
	334, 888,
	336, 888,
	337, 888,
	339, 888,
	340, 888,
	341, 888,
	342, 888,
	343, 888,
	344, 888,
	345, 888,
	346, 888,
	347, 888,
	348, 888,
	350, 888,
	351, 888,
	352, 888,
	355, 888,
	356, 888,
	357, 888,
	358, 888,
	359, 888,
	360, 888,
	361, 888,
	362, 888,
	363, 888,
	366, 888,
	367, 888,
	368, 888,
	369, 888,
	370, 888,
	371, 888,
	373, 888,
	374, 888,
	375, 888,
	376, 888,
	377, 888,
	378, 888,
	381, 888,
	382, 888,
	387, 888,
	388, 888,
	389, 888,
	390, 888,
	391, 888,
	392, 888,
	393, 888,
	401, 888,
	406, 888,
	407, 888,
	408, 888,
	415, 888,
	421, 888,
	-2, 0,
	-1, 174,
	1, 57,
	419, 57,
	-2, 879,
	-1, 207,
	417, 1446,
	420, 1446,
	-2, 578,
	-1, 208,
	417, 1448,
	420, 1448,
	-2, 579,
	-1, 209,
	417, 1447,
	420, 1447,
	-2, 580,
	-1, 210,
	420, 1388,
	-2, 581,
	-1, 607,
	142, 1561,
	353, 1561,
	398, 1561,
	417, 1561,
	-2, 0,
	-1, 608,
	142, 1484,
	353, 1484,
	398, 1484,
	417, 1484,
	-2, 0,
	-1, 610,
	142, 1634,
	353, 1634,
	398, 1634,
	417, 1634,
	-2, 0,
	-1, 612,
	142, 1663,
	353, 1663,
	398, 1663,
	417, 1663,
	-2, 0,
	-1, 619,
	142, 1566,
	353, 1566,
	398, 1566,
	417, 1566,
	-2, 409,
	-1, 654,
	1, 507,
	414, 507,
	416, 507,
	418, 507,
	419, 507,
	-2, 0,
	-1, 655,
	1, 577,
	139, 577,
	414, 577,
	416, 577,
	418, 577,
	419, 577,
	-2, 0,
	-1, 661,
	1, 521,
	414, 521,
	416, 521,
	418, 521,
	419, 521,
	-2, 0,
	-1, 663,
	1, 525,
	414, 525,
	416, 525,
	418, 525,
	419, 525,
	-2, 0,
	-1, 666,
	1, 536,
	414, 536,
	416, 536,
	418, 536,
	419, 536,
	-2, 0,
	-1, 667,
	1, 542,
	414, 542,
	416, 542,
	418, 542,
	419, 542,
	-2, 0,
	-1, 668,
	1, 545,
	414, 545,
	416, 545,
	418, 545,
	419, 545,
	-2, 0,
	-1, 672,
	1, 559,
	414, 559,
	416, 559,
	418, 559,
	419, 559,
	-2, 0,
	-1, 673,
	1, 561,
	414, 561,
	416, 561,
	418, 561,
	419, 561,
	-2, 0,
	-1, 701,
	127, 890,
	205, 890,
	234, 890,
	-2, 848,
	-1, 709,
	127, 889,
	205, 889,
	234, 889,
	-2, 846,
	-1, 736,
	415, 1735,
	-2, 1167,
	-1, 737,
	415, 1736,
	-2, 1168,
	-1, 768,
	415, 1440,
	-2, 1431,
	-1, 769,
	5, 1025,
	415, 1455,
	-2, 1446,
	-1, 770,
	415, 1456,
	-2, 1447,
	-1, 777,
	5, 1009,
	-2, 1476,
	-1, 778,
	5, 1010,
	-2, 1480,
	-1, 779,
	5, 1011,
	-2, 1479,
	-1, 780,
	5, 1012,
	-2, 1659,
	-1, 781,
	5, 1013,
	-2, 1568,
	-1, 782,
	5, 1014,
	-2, 1627,
	-1, 783,
	5, 1015,
	-2, 1629,
	-1, 784,
	5, 1016,
	-2, 1630,
	-1, 785,
	5, 1017,
	-2, 1631,
	-1, 786,
	5, 1018,
	-2, 1639,
	-1, 787,
	5, 1019,
	-2, 1671,
	-1, 788,
	5, 1020,
	-2, 1538,
	-1, 789,
	5, 1021,
	-2, 1475,
	-1, 790,
	5, 1022,
	-2, 1576,
	-1, 791,
	5, 1023,
	-2, 1577,
	-1, 792,
	5, 1024,
	-2, 1542,
	-1, 793,
	5, 1071,
	415, 1071,
	-2, 1704,
	-1, 810,
	5, 1046,
	-2, 1477,
	-1, 811,
	5, 1064,
	-2, 1504,
	-1, 813,
	5, 1038,
	-2, 1525,
	-1, 814,
	5, 1039,
	-2, 1526,
	-1, 815,
	5, 1030,
	-2, 1541,
	-1, 816,
	5, 1031,
	-2, 1543,
	-1, 817,
	5, 1032,
	-2, 1544,
	-1, 818,
	5, 1033,
	-2, 1545,
	-1, 819,
	5, 997,
	-2, 1551,
	-1, 820,
	5, 998,
	-2, 1552,
	-1, 821,
	5, 1061,
	-2, 1649,
	-1, 822,
	5, 1069,
	-2, 1661,
	-1, 823,
	5, 1036,
	-2, 1685,
	-1, 824,
	5, 1063,
	-2, 1686,
	-1, 825,
	5, 1045,
	-2, 1687,
	-1, 826,
	5, 1063,
	-2, 1688,
	-1, 827,
	5, 1063,
	-2, 1689,
	-1, 828,
	5, 1028,
	-2, 1692,
	-1, 829,
	5, 1028,
	-2, 1693,
	-1, 832,
	5, 1053,
	-2, 1697,
	-1, 834,
	5, 1029,
	-2, 1702,
	-1, 835,
	5, 1034,
	-2, 1703,
	-1, 837,
	5, 1028,
	-2, 1707,
	-1, 840,
	5, 1037,
	-2, 1712,
	-1, 841,
	5, 1035,
	-2, 1714,
	-1, 843,
	5, 1065,
	-2, 1716,
	-1, 844,
	5, 1067,
	-2, 1717,
	-1, 847,
	5, 1060,
	-2, 1721,
	-1, 916,
	415, 1455,
	-2, 1446,
	-1, 933,
	278, 1428,
	408, 1428,
	-2, 1427,
	-1, 1074,
	253, 877,
	-2, 703,
	-1, 1083,
	237, 1450,
	-2, 0,
	-1, 1126,
	1, 276,
	414, 276,
	416, 276,
	418, 276,
	419, 276,
	-2, 851,
	-1, 1129,
	4, 1720,
	10, 1720,
	11, 1720,
	13, 1720,
	14, 1720,
	15, 1720,
	16, 1720,
	17, 1720,
	18, 1720,
	20, 1720,
	21, 1720,
	22, 1720,
	23, 1720,
	25, 1720,
	28, 1720,
	30, 1720,
	32, 1720,
	35, 1720,
	36, 1720,
	37, 1720,
	38, 1720,
	39, 1720,
	40, 1720,
	41, 1720,
	42, 1720,
	43, 1720,
	44, 1720,
	46, 1720,
	47, 1720,
	48, 1720,
	49, 1720,
	50, 1720,
	51, 1720,
	54, 1720,
	55, 1720,
	56, 1720,
	58, 1720,
	59, 1720,
	60, 1720,
	63, 1720,
	64, 1720,
	65, 1720,
	66, 1720,
	67, 1720,
	68, 1720,
	69, 1720,
	70, 1720,
	71, 1720,
	72, 1720,
	74, 1720,
	75, 1720,
	76, 1720,
	77, 1720,
	79, 1720,
	80, 1720,
	81, 1720,
	82, 1720,
	90, 1720,
	91, 1720,
	92, 1720,
	93, 1720,
	94, 1720,
	95, 1720,
	96, 1720,
	97, 1720,
	99, 1720,
	101, 1720,
	103, 1720,
	106, 1720,
	107, 1720,
	109, 1720,
	110, 1720,
	114, 1720,
	115, 1720,
	116, 1720,
	117, 1720,
	118, 1720,
	119, 1720,
	120, 1720,
	121, 1720,
	122, 1720,
	123, 1720,
	124, 1720,
	128, 1720,
	129, 1720,
	130, 1720,
	131, 1720,
	132, 1720,
	133, 1720,
	134, 1720,
	135, 1720,
	136, 1720,
	137, 1720,
	138, 1720,
	140, 1720,
	143, 1720,
	144, 1720,
	146, 1720,
	147, 1720,
	149, 1720,
	151, 1720,
	152, 1720,
	153, 1720,
	154, 1720,
	155, 1720,
	156, 1720,
	157, 1720,
	158, 1720,
	159, 1720,
	160, 1720,
	161, 1720,
	162, 1720,
	163, 1720,
	164, 1720,
	166, 1720,
	167, 1720,
	168, 1720,
	170, 1720,
	171, 1720,
	172, 1720,
	173, 1720,
	174, 1720,
	175, 1720,
	176, 1720,
	177, 1720,
	178, 1720,
	180, 1720,
	182, 1720,
	183, 1720,
	184, 1720,
	185, 1720,
	186, 1720,
	187, 1720,
	188, 1720,
	189, 1720,
	190, 1720,
	191, 1720,
	192, 1720,
	193, 1720,
	194, 1720,
	195, 1720,
	197, 1720,
	198, 1720,
	200, 1720,
	201, 1720,
	202, 1720,
	203, 1720,
	204, 1720,
	206, 1720,
	207, 1720,
	210, 1720,
	211, 1720,
	212, 1720,
	215, 1720,
	216, 1720,
	217, 1720,
	218, 1720,
	219, 1720,
	220, 1720,
	221, 1720,
	222, 1720,
	223, 1720,
	224, 1720,
	227, 1720,
	229, 1720,
	230, 1720,
	231, 1720,
	232, 1720,
	233, 1720,
	235, 1720,
	236, 1720,
	239, 1720,
	240, 1720,
	241, 1720,
	243, 1720,
	244, 1720,
	246, 1720,
	248, 1720,
	249, 1720,
	250, 1720,
	251, 1720,
	252, 1720,
	253, 1720,
	254, 1720,
	255, 1720,
	257, 1720,
	258, 1720,
	259, 1720,
	260, 1720,
	261, 1720,
	263, 1720,
	264, 1720,
	265, 1720,
	266, 1720,
	267, 1720,
	268, 1720,
	269, 1720,
	270, 1720,
	272, 1720,
	273, 1720,
	274, 1720,
	275, 1720,
	276, 1720,
	277, 1720,
	278, 1720,
	279, 1720,
	280, 1720,
	281, 1720,
	282, 1720,
	283, 1720,
	284, 1720,
	286, 1720,
	287, 1720,
	288, 1720,
	289, 1720,
	290, 1720,
	291, 1720,
	292, 1720,
	293, 1720,
	294, 1720,
	295, 1720,
	296, 1720,
	297, 1720,
	298, 1720,
	299, 1720,
	300, 1720,
	301, 1720,
	303, 1720,
	304, 1720,
	305, 1720,
	306, 1720,
	307, 1720,
	308, 1720,
	309, 1720,
	310, 1720,
	311, 1720,
	313, 1720,
	314, 1720,
	315, 1720,
	316, 1720,
	317, 1720,
	318, 1720,
	319, 1720,
	320, 1720,
	321, 1720,
	323, 1720,
	324, 1720,
	325, 1720,
	326, 1720,
	327, 1720,
	328, 1720,
	329, 1720,
	330, 1720,
	331, 1720,
	332, 1720,
	333, 1720,
	334, 1720,
	336, 1720,
	337, 1720,
	339, 1720,
	340, 1720,
	341, 1720,
	342, 1720,
	343, 1720,
	344, 1720,
	345, 1720,
	346, 1720,
	347, 1720,
	348, 1720,
	350, 1720,
	351, 1720,
	352, 1720,
	355, 1720,
	356, 1720,
	357, 1720,
	358, 1720,
	360, 1720,
	361, 1720,
	362, 1720,
	363, 1720,
	366, 1720,
	367, 1720,
	368, 1720,
	369, 1720,
	371, 1720,
	373, 1720,
	374, 1720,
	375, 1720,
	376, 1720,
	377, 1720,
	378, 1720,
	381, 1720,
	382, 1720,
	387, 1720,
	388, 1720,
	389, 1720,
	390, 1720,
	391, 1720,
	392, 1720,
	393, 1720,
	394, 1720,
	396, 1720,
	397, 1720,
	398, 1720,
	399, 1720,
	400, 1720,
	401, 1720,
	403, 1720,
	404, 1720,
	405, 1720,
	406, 1720,
	407, 1720,
	408, 1720,
	409, 1720,
	410, 1720,
	411, 1720,
	413, 1720,
	416, 1720,
	417, 1720,
	420, 1720,
	421, 1720,
	-2, 0,
	-1, 1147,
	142, 1634,
	353, 1634,
	398, 1634,
	417, 1634,
	-2, 0,
	-1, 1174,
	142, 1663,
	353, 1663,
	398, 1663,
	417, 1663,
	-2, 0,
	-1, 1175,
	185, 787,
	263, 787,
	267, 787,
	-2, 396,
	-1, 1252,
	127, 889,
	205, 889,
	234, 889,
	-2, 849,
	-1, 1336,
	113, 853,
	127, 853,
	179, 853,
	205, 853,
	234, 853,
	242, 853,
	364, 853,
	-2, 1208,
	-1, 1382,
	416, 1323,
	-2, 0,
	-1, 1389,
	185, 787,
	263, 787,
	267, 787,
	-2, 782,
	-1, 1418,
	416, 1323,
	-2, 0,
	-1, 1426,
	113, 853,
	127, 853,
	179, 853,
	205, 853,
	234, 853,
	242, 853,
	364, 853,
	-2, 956,
	-1, 1624,
	185, 787,
	263, 787,
	267, 787,
	-2, 398,
	-1, 1732,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	396, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	-2, 1106,
	-1, 1733,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	396, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	-2, 1107,
	-1, 1734,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	396, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	-2, 1108,
	-1, 1735,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	396, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	-2, 1109,
	-1, 1736,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	396, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	-2, 1110,
	-1, 1737,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	396, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	-2, 1111,
	-1, 1738,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	396, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	-2, 1112,
	-1, 1739,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	396, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	-2, 1113,
	-1, 1751,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	396, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	-2, 1125,
	-1, 1752,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	396, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	-2, 1126,
	-1, 1753,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	396, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	-2, 1127,
	-1, 1756,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	393, 0,
	401, 0,
	-2, 1132,
	-1, 1762,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	393, 0,
	401, 0,
	-2, 1134,
	-1, 1764,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	393, 0,
	401, 0,
	-2, 1138,
	-1, 1765,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	393, 0,
	401, 0,
	-2, 1139,
	-1, 1766,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	393, 0,
	401, 0,
	-2, 1140,
	-1, 1767,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	393, 0,
	401, 0,
	-2, 1141,
	-1, 1843,
	5, 1025,
	142, 1334,
	415, 1455,
	-2, 1446,
	-1, 1844,
	142, 1335,
	-2, 1681,
	-1, 1845,
	142, 1336,
	-2, 1565,
	-1, 1846,
	142, 1337,
	-2, 1505,
	-1, 1847,
	142, 1338,
	-2, 1533,
	-1, 1848,
	142, 1339,
	-2, 1564,
	-1, 1849,
	142, 1340,
	-2, 1626,
	-1, 1917,
	416, 1323,
	-2, 0,
	-1, 1927,
	1, 957,
	79, 957,
	113, 957,
	127, 957,
	143, 957,
	148, 957,
	150, 957,
	170, 957,
	179, 957,
	188, 957,
	201, 957,
	205, 957,
	220, 957,
	234, 957,
	237, 957,
	242, 957,
	285, 957,
	287, 957,
	364, 957,
	372, 957,
	384, 957,
	385, 957,
	395, 957,
	414, 957,
	416, 957,
	418, 957,
	419, 957,
	420, 957,
	-2, 956,
	-1, 1929,
	415, 1432,
	-2, 1444,
	-1, 2009,
	416, 1393,
	420, 1393,
	-2, 1420,
	-1, 2131,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	393, 0,
	401, 0,
	-2, 1133,
	-1, 2132,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	393, 0,
	401, 0,
	-2, 1135,
	-1, 2137,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	393, 0,
	401, 0,
	-2, 1136,
	-1, 2155,
	247, 1294,
	-2, 1296,
	-1, 2364,
	253, 877,
	-2, 703,
	-1, 2428,
	185, 787,
	263, 787,
	267, 787,
	-2, 395,
	-1, 2443,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	393, 0,
	401, 0,
	-2, 1137,
	-1, 2448,
	183, 0,
	184, 0,
	227, 0,
	-2, 1155,
	-1, 2457,
	247, 1295,
	-2, 1297,
	-1, 2506,
	13, 0,
	14, 0,
	15, 0,
	396, 0,
	397, 0,
	398, 0,
	-2, 1185,
	-1, 2507,
	13, 0,
	14, 0,
	15, 0,
	396, 0,
	397, 0,
	398, 0,
	-2, 1186,
	-1, 2508,
	13, 0,
	14, 0,
	15, 0,
	396, 0,
	397, 0,
	398, 0,
	-2, 1187,
	-1, 2512,
	13, 0,
	14, 0,
	15, 0,
	396, 0,
	397, 0,
	398, 0,
	-2, 1191,
	-1, 2513,
	13, 0,
	14, 0,
	15, 0,
	396, 0,
	397, 0,
	398, 0,
	-2, 1192,
	-1, 2514,
	13, 0,
	14, 0,
	15, 0,
	396, 0,
	397, 0,
	398, 0,
	-2, 1193,
	-1, 2555,
	415, 1433,
	-2, 1445,
	-1, 2669,
	183, 0,
	184, 0,
	227, 0,
	-2, 1156,
	-1, 2672,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	393, 0,
	401, 0,
	-2, 1159,
	-1, 2673,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	393, 0,
	401, 0,
	-2, 1161,
	-1, 2818,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	393, 0,
	401, 0,
	-2, 1160,
	-1, 2819,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	393, 0,
	401, 0,
	-2, 1162,
	-1, 2829,
	183, 0,
	-2, 1194,
	-1, 2918,
	183, 0,
	-2, 1195,
	-1, 3016,
	38, 0,
	159, 0,
	204, 0,
	317, 0,
	393, 0,
	401, 0,
	-2, 1684,
}

const sqlPrivate = 57344

const sqlLast = 57069

var sqlAct = [...]int{

	770, 3078, 2771, 3024, 3015, 2604, 2992, 2035, 2991, 2978,
	2994, 3025, 2478, 2858, 2922, 2847, 2063, 3026, 3014, 2786,
	2043, 1116, 1719, 2809, 937, 2617, 2378, 2622, 2741, 1040,
	2125, 744, 1058, 1779, 1556, 1255, 2627, 2371, 2565, 728,
	1555, 209, 2726, 2834, 2289, 2011, 487, 2400, 2564, 767,
	2402, 2383, 2272, 487, 1425, 2032, 2373, 952, 1416, 2007,
	487, 2704, 2231, 487, 2248, 482, 487, 209, 1148, 487,
	487, 1112, 2044, 1506, 2010, 1080, 487, 1397, 766, 1941,
	1503, 1507, 1911, 1932, 487, 1994, 2259, 2531, 1512, 946,
	1792, 2167, 536, 2121, 930, 1710, 1922, 2923, 1515, 1818,
	1705, 1455, 1389, 2230, 1343, 2347, 1504, 1649, 2382, 533,
	1471, 1791, 1436, 1398, 1477, 718, 130, 1800, 73, 1434,
	753, 1776, 1177, 902, 1969, 571, 1995, 1368, 1370, 1812,
	2008, 2772, 939, 1127, 2014, 2037, 1880, 1109, 1099, 907,
	1903, 1839, 210, 2566, 211, 1407, 597, 1888, 1331, 617,
	136, 1256, 1119, 1528, 734, 1429, 1254, 1648, 761, 574,
	205, 1968, 1044, 884, 1522, 611, 487, 487, 1447, 557,
	28, 1096, 1388, 1924, 882, 137, 130, 646, 1260, 2547,
	2154, 1530, 2548, 2036, 1530, 1530, 2064, 1921, 3105, 3099,
	714, 1417, 1897, 1897, 590, 1996, 714, 564, 487, 487,
	487, 942, 487, 487, 955, 955, 1340, 3098, 40, 2441,
	484, 1897, 3075, 487, 487, 1996, 2740, 483, 1480, 2389,
	1542, 1492, 44, 888, 3072, 889, 3050, 585, 1486, 709,
	2740, 3044, 3043, 530, 3040, 1897, 1897, 3037, 3041, 583,
	2534, 3038, 3034, 3012, 710, 809, 1486, 1486, 724, 3011,
	563, 470, 3010, 1486, 2418, 3009, 1542, 715, 473, 1542,
	2973, 1897, 2960, 2953, 2074, 933, 1486, 2740, 2951, 2949,
	2390, 1793, 2740, 2740, 949, 2974, 2920, 470, 2904, 565,
	2074, 702, 2643, 2894, 473, 2360, 2907, 2740, 59, 567,
	130, 2889, 2887, 60, 2877, 1486, 2740, 2876, 1486, 1890,
	2869, 1486, 2201, 2202, 1486, 2868, 701, 2840, 2820, 2740,
	2766, 1486, 2074, 1542, 1897, 2762, 2739, 719, 1160, 1897,
	2740, 923, 927, 932, 2671, 762, 63, 2641, 2074, 899,
	2633, 2634, 2543, 2537, 2634, 1151, 2544, 1897, 2452, 885,
	885, 886, 1897, 2408, 28, 2245, 2196, 2352, 2066, 1897,
	1897, 2201, 2202, 935, 2195, 1046, 2158, 1045, 1897, 2189,
	2216, 2188, 2159, 2190, 146, 1897, 1815, 2092, 1897, 39,
	1914, 1897, 2073, 2060, 2166, 2003, 2074, 1897, 1486, 1486,
	40, 141, 1486, 1896, 1546, 2534, 1889, 1897, 1547, 1627,
	2643, 1984, 1930, 2519, 44, 2454, 2352, 2124, 2103, 1485,
	171, 1393, 1152, 1795, 1043, 717, 174, 1146, 46, 143,
	1145, 1144, 2391, 1531, 1271, 1272, 1531, 1531, 1143, 905,
	45, 1142, 51, 470, 1816, 1141, 64, 1140, 1139, 2207,
	473, 2392, 2201, 2202, 171, 1047, 173, 1138, 1137, 1274,
	1136, 2201, 2202, 52, 1135, 1646, 1134, 54, 1133, 1132,
	1131, 58, 1130, 139, 66, 144, 67, 890, 887, 708,
	59, 72, 707, 706, 1273, 60, 61, 705, 704, 700,
	173, 699, 698, 697, 171, 172, 696, 695, 2207, 2040,
	694, 693, 2434, 692, 165, 566, 1817, 1814, 110, 62,
	691, 690, 166, 686, 685, 684, 487, 487, 63, 487,
	942, 942, 487, 2217, 644, 487, 643, 642, 487, 172,
	173, 641, 640, 138, 487, 639, 2201, 2202, 638, 637,
	636, 635, 634, 633, 487, 487, 487, 487, 487, 942,
	942, 632, 1152, 631, 630, 629, 942, 628, 627, 2201,
	2202, 1279, 2219, 2220, 2221, 626, 759, 138, 2389, 172,
	1538, 1120, 2217, 1529, 1689, 625, 624, 2668, 165, 2207,
	623, 1831, 622, 1486, 1073, 621, 166, 487, 2207, 606,
	605, 604, 1819, 603, 953, 1041, 602, 1889, 601, 521,
	487, 520, 493, 492, 491, 476, 2218, 138, 475, 474,
	1271, 1272, 195, 1070, 1085, 194, 1152, 2216, 64, 193,
	487, 192, 191, 190, 189, 65, 188, 187, 186, 185,
	184, 487, 183, 182, 181, 1274, 180, 1113, 179, 178,
	177, 176, 175, 2719, 75, 139, 66, 1920, 67, 2678,
	68, 2635, 2552, 2217, 145, 2218, 2285, 1098, 1341, 69,
	1273, 2164, 2217, 2207, 2113, 2004, 171, 1999, 1293, 1424,
	1652, 942, 1074, 1077, 715, 1829, 1433, 83, 1347, 1191,
	110, 1060, 1813, 1103, 1106, 1827, 2207, 1049, 1128, 142,
	3031, 1267, 1825, 849, 2201, 2202, 3013, 2996, 2985, 2914,
	2910, 2890, 173, 171, 2807, 2908, 2079, 2857, 487, 2794,
	2703, 2702, 2701, 2694, 2690, 2212, 2210, 2211, 2203, 2204,
	2205, 2206, 2208, 2209, 115, 171, 2689, 2688, 1296, 1297,
	1298, 1299, 2222, 140, 2684, 1175, 2218, 1279, 2683, 173,
	903, 172, 2682, 1185, 2681, 2218, 2674, 1189, 1271, 1272,
	165, 2654, 2652, 2551, 1314, 1315, 1316, 2528, 166, 2527,
	2217, 173, 1301, 1302, 1303, 2210, 2211, 2203, 2204, 2205,
	2206, 2208, 2209, 1274, 2526, 2464, 1320, 2355, 172, 138,
	1787, 2351, 4, 2284, 2275, 2241, 2229, 165, 2200, 2197,
	2194, 2193, 2191, 768, 2172, 166, 1172, 2171, 1273, 2155,
	172, 1927, 1267, 1552, 898, 1266, 1293, 1490, 1351, 165,
	1344, 1294, 1334, 1252, 3103, 1489, 2039, 166, 3086, 3085,
	1059, 2207, 2480, 1199, 3004, 2999, 2955, 2946, 2945, 2941,
	2940, 1251, 1277, 1278, 1280, 1281, 2934, 2931, 138, 2412,
	2906, 2905, 1781, 2218, 2853, 1192, 2831, 2211, 2203, 2204,
	2205, 2206, 2208, 2209, 2212, 2210, 2211, 2203, 2204, 2205,
	2206, 2208, 2209, 2781, 1647, 1970, 1296, 1297, 1298, 1299,
	2776, 1271, 1272, 2120, 2774, 1279, 2761, 1300, 2745, 2699,
	2644, 715, 2620, 2611, 2610, 2608, 2585, 2793, 2584, 702,
	2574, 2573, 2539, 2447, 1295, 2414, 1274, 1311, 1321, 487,
	1301, 1302, 1303, 1788, 487, 2336, 2320, 2299, 2298, 2244,
	2228, 1263, 1264, 2181, 701, 2180, 2177, 2151, 1268, 2146,
	1371, 1273, 1376, 1271, 1272, 2081, 1917, 1908, 1895, 1823,
	1498, 487, 2203, 2204, 2205, 2206, 2208, 2209, 1395, 1358,
	1357, 2925, 1309, 1356, 1355, 2213, 2214, 2215, 1274, 1294,
	1418, 1396, 2212, 2210, 2211, 2203, 2204, 2205, 2206, 2208,
	2209, 1387, 1386, 1382, 2076, 1381, 1253, 911, 1380, 1378,
	1377, 1374, 1366, 1273, 1373, 1369, 2201, 2202, 1372, 1364,
	1423, 1363, 1362, 1361, 1360, 1359, 1379, 1348, 1335, 1334,
	1401, 1402, 1171, 1156, 2806, 1830, 1124, 2676, 1279, 2651,
	2546, 2542, 2157, 1284, 1282, 1283, 1275, 1276, 1277, 1278,
	1280, 1281, 1909, 2091, 1344, 1300, 1637, 1636, 2410, 1646,
	1643, 2201, 2202, 1301, 1302, 1303, 1332, 2299, 1430, 1646,
	2374, 1415, 1295, 1646, 1338, 2799, 2646, 130, 2645, 2549,
	1996, 1424, 1815, 1188, 1384, 1392, 1249, 715, 1646, 1166,
	1385, 2883, 1633, 2340, 2335, 1312, 2331, 1454, 2090, 2319,
	2236, 2235, 1390, 942, 487, 2583, 2234, 2265, 1427, 2130,
	955, 1620, 1294, 1383, 1184, 1442, 1353, 885, 1394, 760,
	487, 955, 487, 487, 1271, 1272, 2064, 1972, 880, 1828,
	209, 2911, 2205, 2206, 2208, 2209, 2909, 1508, 2420, 1826,
	1816, 1478, 2330, 2207, 487, 487, 1824, 1448, 1361, 1274,
	1640, 487, 1467, 487, 2835, 487, 1361, 1499, 2036, 487,
	2856, 881, 1367, 2482, 2162, 3032, 1801, 3042, 1414, 3039,
	1242, 1310, 2385, 1511, 1273, 2560, 2988, 2618, 1473, 1313,
	1553, 1284, 1282, 1283, 1275, 1276, 1277, 1278, 1280, 1281,
	2067, 1196, 200, 3065, 529, 1295, 500, 2959, 2753, 1943,
	3066, 874, 1817, 1814, 713, 1240, 876, 2430, 487, 942,
	1420, 209, 487, 487, 905, 3033, 2093, 2217, 942, 872,
	209, 487, 1674, 870, 487, 487, 1934, 1519, 1227, 1404,
	487, 1228, 1581, 1517, 3102, 867, 2882, 2588, 2881, 1610,
	2879, 2878, 2598, 1495, 1634, 2593, 1046, 1241, 1045, 2592,
	2557, 1279, 955, 2556, 1934, 1483, 2176, 897, 1350, 1641,
	2175, 510, 487, 2174, 2173, 1933, 1484, 487, 2133, 2065,
	712, 2022, 209, 487, 1098, 487, 528, 487, 499, 487,
	1989, 487, 1983, 1946, 1979, 1960, 2411, 1763, 1819, 1391,
	1502, 487, 1042, 487, 1186, 2770, 1875, 1874, 1873, 1721,
	2218, 487, 487, 487, 1284, 1282, 1283, 1275, 1276, 1277,
	1278, 1280, 1281, 1614, 470, 2033, 1162, 1533, 688, 1524,
	1535, 473, 1521, 1537, 2913, 2603, 1449, 1540, 1194, 580,
	487, 511, 1526, 714, 955, 1686, 2433, 1624, 2958, 1187,
	470, 1193, 1062, 676, 1778, 1993, 1687, 473, 1654, 1778,
	2002, 1953, 1692, 1446, 596, 3007, 1659, 1785, 1952, 1700,
	1270, 1548, 1783, 723, 1281, 2860, 1711, 1718, 1073, 1645,
	1239, 1549, 1551, 1172, 1862, 1450, 1451, 1681, 1813, 1621,
	1611, 595, 2096, 1525, 2471, 1170, 2077, 1223, 1226, 1819,
	201, 2970, 3057, 3028, 2098, 2122, 2123, 1683, 596, 2474,
	1444, 3081, 2381, 1638, 1945, 1650, 1163, 2380, 955, 2327,
	3088, 1656, 2203, 2204, 2205, 2206, 2208, 2209, 2971, 2311,
	1469, 470, 2322, 1466, 2099, 1452, 2339, 1530, 473, 2576,
	470, 677, 1665, 1550, 1224, 2431, 2097, 473, 1430, 1801,
	2937, 1365, 1612, 2594, 2024, 1444, 2472, 1980, 1976, 2815,
	2380, 2885, 487, 2310, 487, 711, 1545, 1165, 1647, 1644,
	2826, 1329, 2209, 202, 1688, 527, 3065, 1691, 1647, 1970,
	1690, 702, 1647, 1970, 702, 702, 1248, 676, 955, 1709,
	1487, 1863, 470, 2179, 487, 1819, 487, 1647, 1970, 473,
	522, 1493, 1904, 487, 955, 1796, 1701, 723, 487, 1702,
	1703, 3029, 1925, 1622, 2429, 714, 487, 1944, 1685, 1798,
	1202, 1419, 2656, 715, 487, 903, 196, 2586, 715, 2663,
	1275, 1276, 1277, 1278, 1280, 1281, 487, 513, 512, 942,
	2647, 1910, 1819, 1872, 1161, 1918, 1919, 3027, 526, 1789,
	487, 955, 1561, 1935, 1786, 1931, 487, 487, 477, 1437,
	204, 1963, 1438, 1236, 3064, 868, 3062, 878, 678, 487,
	877, 1195, 487, 2785, 203, 677, 1181, 1210, 3030, 1915,
	1642, 2783, 3079, 868, 2030, 1673, 1850, 869, 2028, 3056,
	527, 1470, 1947, 1949, 1501, 494, 487, 1259, 487, 868,
	487, 933, 1625, 487, 2737, 487, 2515, 487, 1884, 487,
	487, 199, 487, 942, 942, 942, 201, 715, 942, 1893,
	1894, 1990, 1905, 1906, 487, 1901, 1962, 1885, 1061, 2734,
	1977, 2861, 1653, 1991, 1900, 2058, 2059, 885, 1427, 1955,
	1403, 1237, 1938, 3080, 1439, 2577, 197, 1961, 1838, 1159,
	1150, 1939, 3089, 490, 1182, 2135, 2143, 1441, 1183, 1978,
	1777, 679, 1164, 526, 689, 1784, 2816, 1561, 1561, 1531,
	2735, 529, 2344, 3082, 1482, 579, 1962, 2141, 200, 1658,
	2054, 1338, 1269, 1926, 487, 504, 524, 1957, 198, 202,
	1805, 1981, 2697, 1971, 1973, 1974, 1975, 2082, 1046, 680,
	1997, 2056, 678, 2348, 1443, 1238, 1837, 1169, 497, 1760,
	3055, 2749, 1939, 1986, 1720, 1842, 1842, 2069, 3094, 1853,
	1855, 525, 1860, 955, 905, 487, 2061, 2516, 2871, 1883,
	2042, 1176, 130, 487, 2517, 487, 2870, 2851, 1887, 2047,
	130, 2051, 478, 2052, 905, 2053, 2928, 2055, 911, 1406,
	1128, 2062, 911, 528, 2068, 2559, 487, 487, 487, 2295,
	487, 2078, 2038, 523, 2038, 2057, 470, 1939, 2422, 2138,
	2086, 2049, 2087, 473, 2291, 503, 204, 2080, 2811, 487,
	2139, 1410, 1203, 2031, 2144, 1181, 529, 2029, 1802, 1444,
	203, 1632, 1520, 2021, 1372, 679, 1379, 2730, 1510, 1437,
	2731, 524, 1438, 1437, 1369, 1509, 1438, 2083, 1413, 2085,
	1505, 1500, 1211, 1410, 1258, 2317, 2752, 2470, 1406, 2094,
	2698, 479, 2273, 2751, 519, 2313, 1902, 199, 2115, 1204,
	1758, 1761, 1201, 680, 2733, 1697, 525, 2979, 2748, 1411,
	1413, 2425, 1258, 2736, 1964, 2315, 514, 1678, 3093, 1628,
	1630, 2110, 1561, 2623, 2787, 2112, 1774, 130, 1408, 2852,
	2301, 130, 197, 1182, 1631, 2136, 480, 1183, 528, 754,
	2810, 1411, 2300, 2128, 1929, 1757, 2262, 1772, 523, 1655,
	1899, 500, 1410, 2117, 1439, 2314, 1863, 1863, 1439, 1898,
	1409, 2119, 1257, 588, 200, 2006, 498, 1441, 712, 2005,
	1580, 1441, 2605, 2353, 198, 2274, 1497, 2261, 582, 1413,
	471, 2140, 1440, 3, 1181, 485, 1084, 3069, 2142, 496,
	1257, 1259, 506, 1698, 1095, 1412, 2349, 1408, 2424, 532,
	1093, 495, 575, 562, 36, 532, 471, 2732, 575, 593,
	1411, 1083, 2421, 569, 1443, 600, 561, 35, 1443, 2773,
	2750, 2849, 2134, 620, 2107, 2343, 2108, 1412, 505, 1409,
	2812, 2705, 955, 499, 2532, 1822, 2246, 1965, 1966, 1768,
	715, 2253, 2254, 501, 1863, 1863, 1863, 1769, 487, 2782,
	1770, 487, 2850, 3071, 1775, 560, 32, 2161, 1759, 487,
	487, 955, 1182, 2830, 487, 2696, 1183, 559, 79, 558,
	78, 1246, 487, 487, 487, 555, 23, 1233, 487, 2602,
	2232, 487, 2446, 1231, 2423, 1580, 1580, 2399, 487, 487,
	487, 487, 487, 556, 24, 903, 1412, 2282, 2192, 1444,
	2145, 487, 2084, 1444, 2268, 532, 532, 1988, 487, 1959,
	1491, 1221, 2260, 917, 2296, 903, 866, 554, 30, 1247,
	487, 942, 2283, 2292, 487, 2297, 715, 553, 21, 1435,
	955, 551, 20, 2303, 487, 2307, 2308, 485, 485, 485,
	955, 947, 485, 2247, 2264, 955, 1157, 587, 2276, 515,
	1672, 1474, 471, 1048, 2238, 2239, 2240, 487, 921, 487,
	1219, 487, 581, 2104, 487, 942, 942, 942, 2233, 487,
	1217, 487, 2111, 1094, 2106, 487, 2321, 2088, 36, 1092,
	487, 1771, 487, 2286, 1215, 1073, 2250, 1675, 1773, 487,
	2165, 35, 568, 2149, 2257, 2258, 516, 1662, 2263, 1613,
	2152, 1213, 1442, 552, 19, 487, 487, 1354, 942, 2387,
	1821, 1245, 2337, 2332, 2328, 2316, 2288, 1232, 3023, 2169,
	2170, 1939, 1440, 1230, 2326, 487, 1440, 1442, 2323, 1073,
	32, 2302, 517, 2305, 518, 541, 15, 2281, 2269, 2333,
	2416, 2338, 79, 2600, 78, 2354, 2278, 2279, 1481, 2409,
	23, 1220, 2350, 2976, 487, 2267, 1478, 2357, 2362, 2270,
	871, 873, 1478, 2723, 2375, 2581, 2318, 1207, 24, 487,
	1580, 2579, 2372, 2329, 2324, 2558, 905, 2370, 2325, 2227,
	542, 16, 550, 57, 905, 905, 1444, 1671, 905, 1883,
	1883, 1883, 30, 2368, 2243, 2334, 2899, 2393, 715, 2034,
	1218, 2026, 21, 549, 56, 955, 20, 2255, 540, 55,
	1216, 2025, 1476, 2459, 1863, 1863, 1091, 2363, 2364, 2365,
	487, 2023, 911, 2384, 1214, 2020, 1544, 2449, 1543, 2358,
	1475, 1541, 2384, 548, 12, 1539, 2428, 2366, 2426, 2427,
	1536, 1212, 911, 1534, 1532, 2394, 2395, 2396, 1479, 2397,
	2398, 2432, 2437, 1456, 1468, 2386, 1558, 1472, 1711, 2486,
	2407, 2435, 1465, 1453, 1445, 2439, 1069, 130, 3066, 2805,
	1460, 2804, 539, 50, 546, 47, 1711, 2495, 19, 1450,
	1451, 1651, 2453, 1863, 1863, 1863, 1863, 1863, 1863, 1863,
	1863, 1863, 1863, 1863, 1863, 1863, 1863, 1863, 1863, 1863,
	1863, 1863, 2252, 1863, 2458, 1561, 2455, 1206, 1261, 487,
	15, 1457, 2525, 2483, 2473, 2475, 2476, 2479, 2126, 2485,
	2376, 894, 1149, 1934, 487, 2901, 955, 2405, 2415, 547,
	48, 2280, 1951, 2521, 1950, 485, 1068, 2494, 485, 538,
	49, 485, 2492, 895, 947, 2632, 2417, 1088, 545, 7,
	544, 6, 2768, 485, 2553, 16, 1090, 57, 1992, 2520,
	543, 38, 1934, 485, 485, 485, 485, 947, 537, 37,
	2550, 1558, 1558, 1948, 2533, 2522, 1461, 2530, 56, 1987,
	1982, 2535, 2536, 55, 1958, 2538, 2089, 2127, 1262, 2571,
	2939, 2589, 570, 487, 487, 2742, 487, 1618, 1619, 2601,
	130, 487, 1205, 2595, 2916, 2706, 620, 2596, 12, 955,
	2346, 955, 2599, 1967, 942, 2346, 1954, 2562, 2570, 485,
	2554, 1271, 1272, 896, 1265, 1985, 1271, 1272, 1956, 2975,
	487, 2779, 2612, 2041, 1462, 1463, 2636, 2490, 2625, 1167,
	1561, 2587, 2027, 1458, 2019, 1886, 2629, 50, 3077, 47,
	620, 1274, 2628, 2466, 2467, 2468, 1623, 1554, 2541, 487,
	2406, 589, 955, 487, 487, 955, 487, 2606, 1962, 2624,
	1459, 1273, 3092, 1341, 487, 2650, 1273, 903, 2616, 2201,
	2202, 2477, 955, 2615, 2609, 903, 903, 2614, 2413, 903,
	2101, 2619, 2607, 2621, 2660, 2638, 2545, 2626, 2630, 2580,
	2102, 2582, 2637, 1852, 48, 1271, 1272, 2101, 2100, 1811,
	1198, 2665, 1561, 2361, 49, 1197, 2648, 2649, 2679, 2657,
	2469, 487, 1351, 7, 1349, 6, 1235, 485, 2670, 1234,
	2797, 2640, 1244, 1243, 1229, 38, 1939, 2661, 1225, 1222,
	721, 1208, 676, 37, 1168, 1626, 1464, 879, 905, 1561,
	1561, 687, 2658, 2859, 2529, 674, 1558, 2309, 1661, 1209,
	1663, 2266, 723, 1907, 2666, 2969, 2685, 1561, 1561, 2178,
	2921, 2825, 1820, 2047, 1352, 2462, 53, 2567, 747, 2724,
	487, 2561, 2013, 2012, 958, 1635, 2250, 771, 1841, 1712,
	955, 487, 773, 955, 1559, 2695, 722, 487, 487, 487,
	776, 775, 774, 1561, 1560, 1375, 772, 1557, 1125, 2642,
	2045, 664, 1639, 1782, 1799, 487, 2160, 1345, 739, 751,
	487, 750, 487, 1797, 1155, 487, 487, 487, 487, 487,
	677, 738, 2591, 487, 487, 942, 2743, 2708, 2709, 955,
	2713, 2711, 2721, 942, 2722, 2271, 2717, 2379, 2597, 2792,
	1696, 487, 487, 1580, 2118, 1693, 2578, 502, 2198, 1123,
	1869, 2653, 2746, 2571, 2769, 942, 2755, 1861, 1857, 1250,
	1330, 2780, 2714, 2760, 2046, 487, 905, 1190, 2388, 2075,
	2655, 1704, 893, 892, 487, 487, 942, 942, 891, 2789,
	2993, 2990, 2570, 2813, 2791, 1629, 2555, 2775, 2571, 1073,
	2095, 1323, 743, 2251, 911, 2356, 2814, 1066, 2763, 2784,
	2571, 2778, 911, 911, 1322, 875, 911, 2930, 600, 955,
	2788, 2767, 2790, 532, 1180, 1179, 2796, 2570, 2764, 1178,
	2707, 2294, 2801, 3087, 2800, 2938, 2575, 2817, 2987, 2570,
	2720, 170, 1939, 167, 1422, 169, 168, 504, 917, 2342,
	485, 82, 34, 33, 109, 108, 107, 678, 487, 106,
	955, 105, 104, 2754, 487, 103, 487, 102, 955, 487,
	497, 2759, 101, 100, 99, 98, 1863, 487, 2716, 97,
	2832, 1497, 96, 955, 95, 94, 93, 2765, 1580, 92,
	2846, 2712, 2838, 2839, 91, 1939, 90, 89, 88, 87,
	86, 2710, 85, 84, 616, 2864, 2841, 613, 81, 2844,
	2845, 80, 2863, 1561, 2865, 1863, 31, 26, 2384, 2862,
	905, 113, 114, 25, 487, 77, 487, 76, 2873, 942,
	2571, 29, 953, 18, 487, 1041, 2747, 503, 2802, 2803,
	11, 17, 2884, 2795, 22, 135, 2756, 2757, 720, 903,
	679, 134, 133, 2897, 132, 131, 955, 14, 13, 2570,
	1580, 128, 129, 2886, 2571, 2888, 2571, 127, 2898, 126,
	2892, 2571, 2777, 2903, 2628, 2902, 487, 125, 124, 123,
	10, 8, 487, 471, 2896, 2912, 2572, 112, 680, 9,
	487, 2808, 2419, 2570, 70, 2570, 71, 1580, 1580, 1048,
	2570, 485, 1496, 27, 2933, 2927, 2590, 1939, 43, 471,
	1863, 42, 2919, 41, 111, 1580, 1580, 161, 2590, 487,
	487, 2798, 2590, 1516, 1516, 160, 487, 2590, 2926, 159,
	485, 158, 485, 154, 485, 2935, 2952, 942, 532, 157,
	155, 2950, 487, 500, 156, 2843, 942, 942, 2874, 2875,
	487, 1580, 487, 153, 487, 2947, 122, 163, 498, 2954,
	162, 2956, 2842, 2718, 2943, 2824, 2957, 2963, 2964, 2962,
	151, 2965, 487, 148, 150, 487, 2982, 903, 487, 152,
	955, 496, 149, 147, 164, 121, 2961, 620, 2995, 2891,
	471, 1048, 575, 495, 120, 3002, 3000, 119, 118, 471,
	1048, 1405, 2989, 947, 485, 3001, 2984, 3003, 3008, 620,
	117, 116, 5, 2, 1, 487, 0, 3006, 2837, 0,
	505, 0, 0, 0, 0, 499, 0, 0, 3022, 3021,
	3020, 0, 0, 0, 0, 501, 0, 0, 0, 1558,
	487, 620, 0, 3046, 3005, 2571, 485, 3047, 487, 3048,
	0, 471, 485, 0, 485, 2900, 485, 2867, 485, 3035,
	485, 3054, 2942, 0, 487, 1561, 3052, 3053, 3051, 2924,
	1676, 0, 1677, 2880, 2570, 0, 911, 0, 3063, 3060,
	485, 485, 485, 3061, 0, 3067, 0, 3068, 2995, 2822,
	3073, 3074, 3070, 3049, 2571, 0, 0, 0, 0, 3076,
	0, 0, 0, 0, 0, 0, 0, 0, 3083, 620,
	2915, 3084, 0, 911, 0, 0, 0, 0, 0, 1561,
	0, 903, 3091, 2570, 0, 0, 564, 0, 0, 3090,
	2822, 2147, 2148, 911, 0, 0, 3097, 40, 1720, 0,
	3100, 3101, 726, 0, 0, 911, 0, 0, 3106, 911,
	0, 44, 2936, 1720, 911, 0, 0, 0, 0, 0,
	2572, 1580, 0, 0, 0, 2944, 0, 0, 0, 0,
	0, 2966, 0, 2967, 1558, 0, 0, 0, 0, 563,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2047, 0, 0, 0, 2572, 2983, 1561, 0, 0,
	0, 0, 0, 0, 911, 0, 0, 2572, 565, 0,
	0, 0, 0, 0, 0, 0, 0, 59, 567, 2224,
	2225, 2226, 60, 0, 0, 0, 1041, 0, 2972, 0,
	0, 600, 0, 532, 0, 0, 0, 1271, 1272, 0,
	0, 0, 0, 0, 0, 0, 1558, 0, 917, 0,
	0, 0, 0, 0, 0, 63, 0, 2997, 2998, 0,
	0, 3045, 1274, 532, 0, 532, 0, 0, 917, 0,
	0, 0, 485, 0, 0, 0, 0, 1942, 0, 0,
	0, 0, 0, 1558, 1558, 485, 0, 1273, 0, 0,
	0, 0, 0, 485, 0, 0, 0, 0, 0, 0,
	0, 1558, 1558, 0, 0, 485, 0, 0, 0, 0,
	0, 0, 0, 2201, 2202, 0, 2219, 2220, 2221, 485,
	0, 0, 0, 0, 0, 471, 1998, 2572, 0, 0,
	0, 2667, 0, 0, 0, 0, 0, 1558, 2009, 0,
	0, 1048, 0, 0, 0, 0, 0, 0, 911, 0,
	1720, 0, 0, 0, 0, 64, 0, 2590, 0, 0,
	0, 2572, 0, 2572, 1279, 1942, 0, 532, 2572, 485,
	0, 2216, 485, 0, 485, 0, 485, 0, 485, 485,
	0, 947, 139, 66, 0, 67, 0, 911, 0, 1301,
	1302, 1303, 0, 1942, 0, 0, 0, 3095, 3096, 0,
	0, 0, 0, 171, 0, 0, 848, 0, 0, 0,
	0, 2109, 0, 1580, 566, 3104, 0, 110, 0, 2737,
	0, 0, 911, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 911, 0, 0, 0, 1294, 173,
	2207, 0, 0, 0, 2734, 0, 0, 2727, 0, 0,
	0, 0, 0, 575, 0, 0, 0, 0, 0, 0,
	2725, 0, 0, 0, 488, 2729, 0, 1580, 0, 0,
	2590, 0, 0, 0, 0, 0, 0, 0, 172, 0,
	1050, 1052, 1055, 0, 0, 2735, 2222, 165, 909, 2444,
	2445, 0, 0, 0, 485, 166, 0, 0, 0, 0,
	0, 0, 1048, 0, 1048, 208, 0, 0, 0, 0,
	0, 0, 0, 2728, 2217, 0, 138, 0, 0, 0,
	0, 1295, 0, 0, 0, 485, 485, 485, 0, 485,
	0, 208, 0, 0, 481, 0, 0, 0, 0, 0,
	0, 0, 2572, 0, 0, 1580, 0, 1558, 485, 0,
	0, 0, 0, 0, 911, 0, 0, 0, 2496, 2497,
	2498, 2499, 2500, 2501, 2502, 2503, 2504, 2505, 2506, 2507,
	2508, 2509, 2510, 2511, 2512, 2513, 2514, 0, 2518, 0,
	1341, 0, 0, 1154, 911, 0, 0, 0, 911, 1158,
	911, 2572, 0, 0, 0, 911, 0, 2218, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 944, 0, 40,
	957, 957, 2730, 0, 0, 2731, 0, 726, 0, 0,
	0, 726, 0, 44, 0, 0, 0, 0, 0, 0,
	0, 1282, 1283, 1275, 1276, 1277, 1278, 1280, 1281, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2733,
	0, 563, 0, 0, 0, 0, 0, 0, 2736, 0,
	0, 0, 0, 0, 0, 943, 0, 0, 956, 956,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	565, 0, 0, 0, 0, 0, 925, 0, 0, 59,
	567, 951, 0, 0, 60, 0, 0, 911, 0, 2213,
	2214, 2215, 0, 0, 0, 0, 2212, 2210, 2211, 2203,
	2204, 2205, 2206, 2208, 2209, 0, 0, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 63, 0, 0,
	917, 1324, 1325, 1326, 1327, 1328, 0, 0, 917, 917,
	564, 0, 917, 0, 1337, 0, 0, 532, 0, 0,
	532, 40, 2732, 0, 1346, 0, 1271, 1272, 532, 532,
	0, 0, 0, 532, 0, 44, 0, 0, 0, 911,
	0, 485, 1942, 2290, 0, 0, 0, 1942, 0, 0,
	2290, 1274, 0, 0, 0, 0, 0, 1942, 2290, 1942,
	2290, 2290, 0, 563, 0, 0, 0, 0, 0, 1558,
	485, 0, 0, 0, 0, 0, 1273, 1496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 911, 485,
	0, 0, 565, 947, 0, 0, 0, 64, 0, 0,
	0, 59, 567, 485, 0, 0, 60, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1271, 1272, 1558, 139, 66, 1516, 67, 1516, 0,
	485, 0, 0, 485, 0, 0, 0, 0, 485, 63,
	485, 0, 0, 0, 947, 171, 1274, 0, 0, 1942,
	0, 532, 0, 1279, 0, 0, 566, 0, 1942, 110,
	0, 0, 0, 1399, 1399, 1399, 0, 0, 0, 0,
	0, 1273, 0, 0, 2403, 1048, 944, 944, 1301, 1302,
	1303, 173, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1048, 0, 0, 0, 0, 0,
	0, 1558, 0, 0, 0, 944, 944, 0, 0, 0,
	0, 0, 944, 0, 0, 0, 0, 0, 0, 0,
	172, 0, 0, 2436, 0, 0, 0, 1294, 0, 165,
	0, 0, 0, 0, 943, 943, 0, 166, 485, 64,
	0, 0, 0, 0, 0, 0, 0, 0, 1279, 0,
	0, 0, 0, 0, 1064, 0, 0, 0, 138, 0,
	1082, 0, 0, 943, 943, 0, 139, 66, 0, 67,
	943, 0, 0, 1301, 1302, 1303, 0, 0, 0, 0,
	0, 0, 1102, 1102, 1102, 951, 0, 171, 0, 2481,
	0, 0, 0, 0, 0, 0, 0, 0, 566, 0,
	0, 110, 0, 0, 0, 0, 0, 0, 0, 0,
	1295, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2829, 1294, 173, 0, 0, 0, 944, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1153, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2854, 0, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 165, 917, 0, 0, 0, 0, 0, 532, 166,
	0, 0, 0, 0, 0, 943, 564, 0, 0, 0,
	0, 0, 0, 532, 0, 0, 0, 40, 0, 0,
	535, 0, 0, 0, 0, 1295, 0, 0, 0, 2569,
	0, 44, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1283, 1275, 1276, 1277, 1278, 1280, 1281, 0, 1422,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 563,
	0, 1422, 0, 0, 0, 1422, 0, 0, 0, 0,
	1422, 0, 0, 0, 0, 2918, 0, 0, 726, 726,
	0, 0, 1942, 1516, 0, 1516, 0, 0, 565, 0,
	485, 0, 0, 0, 0, 0, 0, 59, 567, 0,
	0, 0, 60, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1942,
	917, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 63, 0, 1275, 1276, 1277,
	1278, 1280, 1281, 0, 0, 0, 0, 0, 1048, 1694,
	0, 1699, 947, 485, 0, 485, 0, 1706, 0, 0,
	0, 0, 0, 485, 0, 0, 0, 1722, 1723, 1724,
	1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734,
	1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744,
	1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754,
	1755, 1756, 0, 1762, 0, 1764, 1765, 1766, 1767, 0,
	2686, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1790, 0, 0, 0, 0, 0,
	0, 1337, 0, 0, 0, 64, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1832, 1833, 1834, 1835, 1836, 0, 0, 0, 0,
	0, 0, 139, 66, 917, 67, 0, 0, 0, 1048,
	0, 0, 1859, 0, 1871, 0, 0, 0, 1876, 1881,
	532, 0, 0, 171, 0, 0, 1942, 2290, 1942, 1431,
	0, 0, 0, 0, 566, 0, 0, 110, 0, 0,
	0, 2070, 0, 2569, 1048, 0, 0, 0, 0, 1942,
	0, 2290, 40, 0, 1048, 1048, 485, 1942, 2290, 173,
	0, 0, 485, 485, 0, 0, 44, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2569, 944,
	1048, 2009, 0, 0, 0, 0, 957, 0, 0, 0,
	2569, 0, 0, 0, 2071, 0, 0, 957, 172, 0,
	0, 0, 0, 0, 1942, 0, 0, 165, 0, 0,
	0, 0, 0, 2403, 2403, 166, 0, 0, 0, 0,
	0, 2000, 2001, 2072, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 567, 0, 0, 138, 943, 0, 0,
	0, 0, 0, 0, 956, 0, 2201, 2202, 0, 2219,
	2220, 2221, 0, 0, 0, 956, 0, 0, 0, 0,
	0, 0, 0, 0, 208, 0, 0, 0, 0, 0,
	63, 0, 2201, 2202, 0, 2219, 2220, 2221, 0, 0,
	1494, 0, 0, 0, 0, 944, 0, 532, 0, 0,
	2451, 0, 0, 1942, 944, 2290, 0, 0, 2848, 0,
	0, 0, 0, 0, 2216, 0, 485, 0, 0, 0,
	2569, 1523, 0, 1523, 2201, 2202, 0, 2219, 2220, 2221,
	0, 0, 0, 0, 0, 0, 0, 0, 957, 0,
	2216, 0, 2450, 0, 0, 0, 0, 0, 0, 0,
	1422, 0, 0, 943, 2569, 208, 2569, 0, 0, 0,
	0, 2569, 943, 485, 208, 485, 0, 0, 0, 0,
	0, 0, 0, 1048, 0, 0, 0, 0, 0, 0,
	64, 0, 2216, 2207, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1616, 0, 0, 956, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 66, 2207,
	67, 748, 74, 0, 0, 2481, 208, 0, 0, 0,
	957, 532, 2201, 2202, 0, 2219, 2220, 2221, 171, 2848,
	0, 0, 0, 0, 0, 1660, 0, 0, 0, 566,
	0, 1666, 110, 1667, 0, 1668, 0, 1669, 0, 1670,
	0, 2207, 0, 0, 0, 2222, 0, 2217, 1942, 2290,
	0, 0, 0, 1422, 173, 485, 0, 0, 0, 1679,
	1082, 0, 74, 0, 0, 0, 0, 0, 956, 0,
	2216, 2290, 0, 2217, 0, 0, 0, 0, 0, 1048,
	0, 1048, 0, 485, 957, 0, 0, 2222, 0, 2131,
	2132, 0, 0, 172, 0, 2137, 0, 0, 0, 0,
	0, 2980, 165, 0, 1048, 0, 0, 485, 0, 0,
	166, 0, 0, 0, 2150, 2217, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2569, 0, 2156, 0, 0,
	2218, 138, 703, 2163, 0, 0, 0, 0, 2168, 2207,
	716, 0, 956, 0, 2481, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 957, 2182, 2218, 0, 0, 0,
	2201, 2202, 2223, 2219, 2220, 2221, 0, 0, 0, 1048,
	957, 0, 0, 0, 2569, 906, 74, 1942, 0, 0,
	0, 0, 0, 0, 0, 2222, 0, 0, 0, 0,
	0, 0, 0, 2848, 0, 0, 0, 0, 2218, 1337,
	0, 0, 0, 0, 0, 944, 0, 0, 0, 1881,
	1881, 1881, 956, 2217, 0, 0, 0, 957, 2216, 0,
	0, 1399, 0, 0, 0, 0, 0, 0, 956, 2256,
	0, 0, 2213, 2214, 2215, 0, 0, 0, 0, 2212,
	2210, 2211, 2203, 2204, 2205, 2206, 2208, 2209, 0, 0,
	0, 1928, 0, 0, 0, 0, 0, 0, 2213, 2214,
	2215, 0, 0, 943, 0, 2212, 2210, 2211, 2203, 2204,
	2205, 2206, 2208, 2209, 0, 956, 0, 0, 0, 944,
	944, 944, 0, 0, 944, 2312, 0, 2207, 0, 0,
	0, 0, 0, 0, 0, 0, 2218, 0, 951, 0,
	2213, 2214, 2215, 0, 0, 0, 0, 2212, 2210, 2211,
	2203, 2204, 2205, 2206, 2208, 2209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2222, 0, 0, 0, 943, 943, 943,
	0, 0, 943, 0, 0, 0, 0, 0, 2050, 0,
	0, 1102, 0, 1102, 0, 1102, 0, 951, 951, 0,
	0, 2217, 0, 0, 0, 0, 0, 0, 2377, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 957,
	0, 0, 0, 0, 0, 0, 0, 0, 2213, 2214,
	2215, 0, 0, 0, 0, 2212, 2210, 2211, 2203, 2204,
	2205, 2206, 2208, 2209, 0, 0, 0, 0, 0, 0,
	0, 0, 726, 726, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 726, 0, 0, 0, 0,
	0, 0, 0, 0, 2218, 0, 0, 956, 0, 0,
	0, 0, 2438, 0, 0, 0, 1706, 0, 0, 0,
	0, 0, 2442, 0, 0, 2443, 0, 0, 0, 0,
	0, 0, 0, 2105, 0, 0, 0, 2448, 0, 0,
	0, 0, 0, 0, 0, 0, 2456, 0, 0, 0,
	0, 0, 0, 0, 2460, 0, 0, 0, 2256, 0,
	0, 0, 0, 0, 2114, 951, 2116, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2487, 2488, 2489,
	0, 0, 0, 0, 2491, 0, 0, 2129, 0, 0,
	0, 2493, 0, 0, 0, 0, 0, 716, 0, 0,
	0, 0, 0, 0, 0, 0, 2213, 2214, 2215, 0,
	0, 0, 0, 2212, 2210, 2211, 2203, 2204, 2205, 2206,
	2208, 2209, 0, 0, 2523, 2524, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1271, 1272, 0, 1304, 1305,
	1306, 1314, 1315, 1316, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2540, 0, 0, 0, 0, 0, 0,
	1274, 0, 0, 1320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1273, 0, 0, 957, 0,
	2563, 0, 0, 1293, 0, 0, 0, 0, 0, 0,
	1290, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 957, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 956, 0, 0, 0,
	0, 0, 0, 1296, 1297, 1298, 1299, 0, 0, 0,
	0, 0, 1279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1399, 0, 0, 956, 0, 944, 0, 0,
	703, 0, 0, 2639, 1311, 1321, 957, 1301, 1302, 1303,
	0, 0, 0, 0, 0, 0, 957, 0, 0, 0,
	0, 957, 1333, 0, 1336, 0, 0, 0, 1317, 1318,
	2287, 1342, 0, 0, 0, 0, 1288, 1289, 0, 0,
	0, 944, 944, 944, 0, 0, 0, 0, 0, 1309,
	0, 0, 0, 0, 0, 943, 1294, 0, 2669, 1082,
	0, 0, 2672, 2673, 956, 0, 2675, 0, 0, 0,
	0, 0, 1319, 2677, 956, 0, 0, 2680, 0, 956,
	0, 0, 0, 0, 944, 0, 0, 0, 0, 0,
	0, 0, 2341, 0, 2687, 0, 0, 0, 0, 943,
	943, 943, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2359,
	0, 0, 1300, 0, 0, 0, 0, 2367, 0, 2369,
	0, 2700, 0, 0, 0, 0, 0, 0, 0, 1295,
	0, 0, 943, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2744, 957, 1578, 74, 0, 0, 1421, 0, 0, 0,
	1426, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1589, 1574, 1579,
	1562, 1599, 1598, 0, 0, 1564, 1563, 2440, 0, 0,
	0, 0, 1607, 1606, 0, 0, 0, 0, 1310, 956,
	0, 1285, 1286, 1292, 1291, 1287, 1313, 0, 1284, 1282,
	1283, 1275, 1276, 1277, 1278, 1280, 1281, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1600, 0, 1596, 1595, 0, 0, 0, 2818,
	2819, 0, 0, 0, 1594, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 957, 2828, 0, 0, 0, 0, 0, 0,
	0, 0, 1593, 1591, 1592, 0, 0, 2836, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1573,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1582, 1577, 1583, 1584, 1585, 1586, 1587, 0, 1581, 0,
	956, 0, 0, 2872, 0, 0, 0, 1604, 1605, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 957, 0, 957, 0, 0,
	944, 0, 0, 0, 0, 0, 1566, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1597,
	0, 0, 0, 1575, 1576, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 957, 0,
	0, 957, 0, 956, 0, 956, 1590, 0, 943, 0,
	1715, 1713, 1714, 1717, 1716, 0, 0, 0, 957, 2613,
	0, 0, 0, 0, 0, 2929, 0, 0, 2932, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1567, 1568, 1569, 1570, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 956, 1588, 1571, 956,
	0, 0, 0, 0, 0, 0, 0, 0, 1609, 0,
	0, 0, 0, 0, 0, 0, 956, 0, 0, 0,
	0, 0, 2659, 0, 951, 1565, 0, 0, 1601, 1602,
	1603, 0, 2662, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 703, 0, 0, 703, 703, 0, 0, 0,
	0, 1572, 0, 0, 0, 0, 1608, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 957, 0, 0, 957,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3019, 3019, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3036, 0, 0, 1780, 0, 0, 0, 0, 0, 0,
	0, 944, 0, 0, 0, 957, 716, 0, 0, 944,
	0, 1336, 0, 0, 956, 0, 0, 956, 3019, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 944, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 944, 944, 0, 0, 0, 0, 0, 943,
	0, 0, 0, 956, 0, 0, 0, 943, 0, 0,
	0, 0, 0, 0, 0, 2758, 0, 0, 0, 3019,
	906, 1082, 0, 0, 0, 957, 0, 0, 0, 943,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1426, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	943, 943, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 0, 0, 0, 0, 0, 957, 0, 0, 0,
	0, 0, 0, 0, 957, 0, 0, 0, 0, 0,
	0, 0, 0, 956, 0, 74, 0, 0, 0, 957,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 956, 0, 0, 0, 0, 0,
	0, 0, 956, 0, 74, 944, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 1271, 1272, 956, 1304, 1305,
	1306, 1314, 1315, 1316, 0, 0, 0, 0, 74, 0,
	0, 0, 957, 1307, 0, 2855, 74, 0, 0, 0,
	1274, 0, 0, 1320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 943, 0, 1273, 0, 0, 0, 0,
	0, 0, 0, 1293, 0, 0, 0, 0, 0, 0,
	1290, 0, 2893, 0, 2895, 0, 0, 0, 0, 0,
	956, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 944, 0, 0, 0, 0, 0, 0,
	0, 0, 944, 944, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1296, 1297, 1298, 1299, 0, 0, 0,
	0, 0, 1279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 0, 957, 74, 0, 0,
	0, 0, 0, 0, 1311, 1321, 0, 1301, 1302, 1303,
	0, 943, 0, 0, 0, 0, 0, 0, 0, 0,
	943, 943, 0, 0, 2948, 0, 0, 0, 1317, 1318,
	0, 0, 0, 0, 0, 0, 1288, 1289, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1309,
	0, 0, 2968, 0, 956, 0, 1294, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1319, 0, 0, 0, 2986, 0, 0, 0,
	0, 0, 0, 1780, 0, 0, 1308, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1336, 0, 0, 0, 0, 1271, 1272,
	0, 1304, 1305, 1306, 1314, 1315, 1316, 0, 0, 0,
	0, 0, 1300, 0, 0, 0, 1307, 0, 0, 0,
	0, 0, 0, 1274, 0, 0, 1320, 0, 0, 1295,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1273, 0,
	0, 0, 1312, 0, 0, 0, 1293, 0, 0, 0,
	0, 0, 0, 1290, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 906, 0, 0, 0, 0, 0, 0, 0,
	906, 906, 0, 0, 906, 0, 1296, 1297, 1298, 1299,
	0, 0, 0, 0, 0, 1279, 0, 0, 1310, 0,
	0, 1285, 1286, 1292, 1291, 1287, 1313, 0, 1284, 1282,
	1283, 1275, 1276, 1277, 1278, 1280, 1281, 1311, 1321, 0,
	1301, 1302, 1303, 0, 0, 2691, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	0, 1317, 1318, 0, 0, 0, 0, 0, 0, 1288,
	1289, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1309, 0, 0, 0, 0, 74, 0, 1294,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1319, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1308,
	0, 74, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 716, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1300, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1310, 0, 0, 1285, 1286, 1292, 1291, 1287, 1313,
	0, 1284, 1282, 1283, 1275, 1276, 1277, 1278, 1280, 1281,
	0, 0, 0, 0, 0, 0, 0, 0, 2187, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 0, 0, 1810, 0, 769, 757, 758, 755, 756,
	746, 0, 0, 0, 906, 0, 0, 0, 0, 0,
	0, 255, 256, 257, 258, 1807, 259, 0, 0, 0,
	0, 804, 749, 0, 0, 0, 260, 261, 262, 215,
	823, 789, 824, 777, 810, 825, 0, 266, 779, 778,
	269, 270, 271, 752, 803, 826, 827, 221, 0, 272,
	808, 0, 794, 0, 273, 274, 275, 276, 277, 0,
	279, 280, 281, 278, 0, 282, 0, 283, 284, 0,
	850, 285, 286, 287, 797, 795, 796, 800, 0, 798,
	799, 288, 289, 489, 290, 811, 292, 828, 829, 735,
	293, 0, 294, 0, 295, 1808, 0, 812, 297, 0,
	298, 299, 0, 0, 0, 740, 303, 300, 301, 304,
	307, 302, 308, 309, 830, 831, 764, 851, 0, 0,
	0, 0, 0, 310, 311, 832, 813, 814, 0, 314,
	0, 315, 906, 0, 852, 316, 0, 317, 833, 0,
	230, 74, 318, 319, 320, 321, 322, 323, 805, 807,
	854, 0, 788, 0, 0, 0, 0, 324, 326, 333,
	0, 853, 327, 834, 792, 815, 816, 817, 818, 835,
	0, 793, 0, 334, 855, 856, 335, 336, 337, 857,
	819, 820, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 836, 858, 345, 346, 859, 0, 347, 348, 0,
	0, 349, 0, 350, 737, 736, 351, 352, 354, 781,
	353, 860, 356, 357, 359, 358, 732, 0, 861, 765,
	806, 360, 837, 361, 362, 0, 790, 791, 0, 0,
	365, 366, 0, 0, 367, 239, 862, 368, 863, 838,
	369, 370, 371, 372, 373, 374, 375, 0, 376, 839,
	377, 242, 378, 0, 379, 380, 381, 382, 383, 840,
	384, 385, 0, 386, 387, 388, 389, 390, 0, 392,
	393, 391, 394, 395, 396, 397, 906, 398, 864, 399,
	400, 401, 402, 741, 403, 0, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 782, 783, 784, 785,
	415, 421, 422, 801, 423, 404, 405, 424, 865, 425,
	841, 786, 427, 0, 437, 428, 429, 430, 406, 431,
	435, 821, 432, 433, 434, 842, 0, 438, 439, 0,
	440, 441, 442, 443, 444, 305, 445, 306, 780, 447,
	0, 843, 844, 822, 0, 0, 449, 450, 845, 846,
	763, 451, 452, 453, 454, 0, 0, 455, 456, 457,
	459, 802, 460, 0, 787, 461, 462, 463, 251, 847,
	1806, 0, 464, 253, 0, 74, 0, 0, 465, 466,
	254, 467, 468, 469, 733, 0, 0, 0, 0, 0,
	0, 0, 731, 0, 0, 0, 0, 729, 730, 1809,
	0, 0, 0, 0, 0, 0, 742, 1804, 0, 0,
	0, 0, 745, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 0, 0, 0, 954, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1780, 255, 256, 257, 258, 959, 259, 960, 961,
	962, 963, 214, 964, 965, 966, 967, 260, 261, 262,
	215, 216, 263, 217, 264, 265, 218, 968, 266, 267,
	268, 269, 270, 271, 969, 970, 219, 220, 221, 971,
	272, 222, 972, 918, 973, 273, 274, 275, 276, 277,
	0, 279, 280, 281, 278, 974, 282, 0, 283, 284,
	975, 850, 285, 286, 287, 976, 977, 979, 978, 980,
	981, 982, 288, 289, 489, 290, 291, 292, 223, 224,
	983, 293, 984, 294, 985, 295, 986, 987, 296, 297,
	988, 298, 299, 989, 0, 990, 225, 303, 300, 301,
	304, 307, 302, 308, 309, 226, 227, 991, 851, 992,
	0, 0, 0, 0, 310, 311, 228, 312, 313, 0,
	314, 993, 315, 994, 995, 852, 316, 996, 317, 229,
	997, 230, 998, 318, 319, 320, 321, 322, 323, 231,
	232, 854, 999, 325, 0, 0, 0, 1000, 324, 326,
	333, 1001, 853, 327, 233, 329, 328, 330, 331, 332,
	234, 1002, 235, 1003, 334, 855, 856, 335, 336, 337,
	857, 338, 339, 0, 0, 340, 341, 342, 1004, 344,
	343, 1005, 236, 858, 345, 346, 859, 1006, 347, 348,
	1007, 1008, 349, 0, 350, 920, 919, 351, 352, 354,
	355, 353, 860, 356, 357, 359, 358, 1009, 1010, 861,
	1011, 237, 360, 238, 361, 362, 1012, 363, 364, 1013,
	1014, 365, 366, 1015, 1016, 367, 239, 862, 368, 863,
	240, 369, 370, 371, 372, 373, 374, 375, 1017, 376,
	241, 377, 242, 378, 1018, 379, 380, 381, 382, 383,
	243, 384, 385, 1019, 386, 387, 388, 389, 390, 0,
	392, 393, 391, 394, 395, 396, 397, 1020, 398, 864,
	399, 400, 401, 402, 244, 403, 0, 407, 408, 409,
	410, 411, 412, 413, 1021, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 1022, 423, 404, 405, 424, 865,
	425, 245, 426, 427, 1023, 437, 428, 429, 430, 406,
	431, 435, 436, 432, 433, 434, 246, 1024, 438, 439,
	1025, 440, 441, 442, 443, 444, 305, 445, 306, 446,
	447, 1026, 247, 248, 448, 1027, 1028, 449, 450, 249,
	250, 1029, 451, 452, 453, 454, 1030, 1031, 455, 456,
	457, 459, 1032, 460, 1033, 458, 461, 462, 463, 251,
	252, 1034, 1035, 464, 253, 1036, 1037, 1038, 1039, 465,
	466, 254, 467, 468, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 954,
	0, 0, 0, 0, 0, 1912, 0, 0, 0, 0,
	0, 0, 0, 0, 1913, 255, 256, 257, 258, 959,
	259, 960, 961, 962, 963, 214, 964, 965, 966, 967,
	260, 261, 262, 215, 216, 263, 217, 264, 265, 218,
	968, 266, 267, 268, 269, 270, 271, 969, 970, 219,
	220, 221, 971, 272, 222, 972, 918, 973, 273, 274,
	275, 276, 277, 0, 279, 280, 281, 278, 974, 282,
	0, 283, 284, 975, 850, 285, 286, 287, 976, 977,
	979, 978, 980, 981, 982, 288, 289, 489, 290, 291,
	292, 223, 224, 983, 293, 984, 294, 985, 295, 986,
	987, 296, 297, 988, 298, 299, 989, 0, 990, 225,
	303, 300, 301, 304, 307, 302, 308, 309, 226, 227,
	991, 851, 992, 0, 0, 0, 0, 310, 311, 228,
	312, 313, 0, 314, 993, 315, 994, 995, 852, 316,
	996, 317, 229, 997, 230, 998, 318, 319, 320, 321,
	322, 323, 231, 232, 854, 999, 325, 0, 0, 0,
	1000, 324, 326, 333, 1001, 853, 327, 233, 329, 328,
	330, 331, 332, 234, 1002, 235, 1003, 334, 855, 856,
	335, 336, 337, 857, 338, 339, 0, 0, 340, 341,
	342, 1004, 344, 343, 1005, 236, 858, 345, 346, 859,
	1006, 347, 348, 1007, 1008, 349, 0, 350, 920, 919,
	351, 352, 354, 355, 353, 860, 356, 357, 359, 358,
	1009, 1010, 861, 1011, 237, 360, 238, 361, 362, 1012,
	363, 364, 1013, 1014, 365, 366, 1015, 1016, 367, 239,
	862, 368, 863, 240, 369, 370, 371, 372, 373, 374,
	375, 1017, 376, 241, 377, 242, 378, 1018, 379, 380,
	381, 382, 383, 243, 384, 385, 1019, 386, 387, 388,
	389, 390, 0, 392, 393, 391, 394, 395, 396, 397,
	1020, 398, 864, 399, 400, 401, 402, 244, 403, 0,
	407, 408, 409, 410, 411, 412, 413, 1021, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 1022, 423, 404,
	405, 424, 865, 425, 245, 426, 427, 1023, 437, 428,
	429, 430, 406, 431, 435, 436, 432, 433, 434, 246,
	1024, 438, 439, 1025, 440, 441, 442, 443, 444, 305,
	445, 306, 446, 447, 1026, 247, 248, 448, 1027, 1028,
	449, 450, 249, 250, 1029, 451, 452, 453, 454, 1030,
	1031, 455, 456, 457, 459, 1032, 460, 1033, 458, 461,
	462, 463, 251, 252, 1034, 1035, 464, 253, 1036, 1037,
	1038, 1039, 465, 466, 254, 467, 468, 469, 0, 0,
	0, 0, 0, 954, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2715, 255,
	256, 257, 258, 959, 259, 960, 961, 962, 963, 214,
	964, 965, 966, 967, 260, 261, 262, 215, 216, 263,
	217, 264, 265, 218, 968, 266, 267, 268, 269, 270,
	271, 969, 970, 219, 220, 221, 971, 272, 222, 972,
	918, 973, 273, 274, 275, 276, 277, 0, 279, 280,
	281, 278, 974, 282, 0, 283, 284, 975, 850, 285,
	286, 287, 976, 977, 979, 978, 980, 981, 982, 288,
	289, 489, 290, 291, 292, 223, 224, 983, 293, 984,
	294, 985, 295, 986, 987, 296, 297, 988, 298, 299,
	989, 0, 990, 225, 303, 300, 301, 304, 307, 302,
	308, 309, 226, 227, 991, 851, 992, 0, 0, 0,
	0, 310, 311, 228, 312, 313, 0, 314, 993, 315,
	994, 995, 852, 316, 996, 317, 229, 997, 230, 998,
	318, 319, 320, 321, 322, 323, 231, 232, 854, 999,
	325, 0, 0, 0, 1000, 324, 326, 333, 1001, 853,
	327, 233, 329, 328, 330, 331, 332, 234, 1002, 235,
	1003, 334, 855, 856, 335, 336, 337, 857, 338, 339,
	0, 0, 340, 341, 342, 1004, 344, 343, 1005, 236,
	858, 345, 346, 859, 1006, 347, 348, 1007, 1008, 349,
	0, 350, 920, 919, 351, 352, 354, 355, 353, 860,
	356, 357, 359, 358, 1009, 1010, 861, 1011, 237, 360,
	238, 361, 362, 1012, 363, 364, 1013, 1014, 365, 366,
	1015, 1016, 367, 239, 862, 368, 863, 240, 369, 370,
	371, 372, 373, 374, 375, 1017, 376, 241, 377, 242,
	378, 1018, 379, 380, 381, 382, 383, 243, 384, 385,
	1019, 386, 387, 388, 389, 390, 0, 392, 393, 391,
	394, 395, 396, 397, 1020, 398, 864, 399, 400, 401,
	402, 244, 403, 0, 407, 408, 409, 410, 411, 412,
	413, 1021, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 1022, 423, 404, 405, 424, 865, 425, 245, 426,
	427, 1023, 437, 428, 429, 430, 406, 431, 435, 436,
	432, 433, 434, 246, 1024, 438, 439, 1025, 440, 441,
	442, 443, 444, 305, 445, 306, 446, 447, 1026, 247,
	248, 448, 1027, 1028, 449, 450, 249, 250, 1029, 451,
	452, 453, 454, 1030, 1031, 455, 456, 457, 459, 1032,
	460, 1033, 458, 461, 462, 463, 251, 252, 1034, 1035,
	464, 253, 1036, 1037, 1038, 1039, 465, 466, 254, 467,
	468, 469, 954, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2823, 255, 256,
	257, 258, 959, 259, 960, 961, 962, 963, 214, 964,
	965, 966, 967, 260, 261, 262, 215, 216, 263, 217,
	264, 265, 218, 968, 266, 267, 268, 269, 270, 271,
	969, 970, 219, 220, 221, 971, 272, 222, 972, 918,
	973, 273, 274, 275, 276, 277, 0, 279, 280, 281,
	278, 974, 282, 0, 283, 284, 975, 850, 285, 286,
	287, 976, 977, 979, 978, 980, 981, 982, 288, 289,
	489, 290, 291, 292, 223, 224, 983, 293, 984, 294,
	985, 295, 986, 987, 296, 297, 988, 298, 299, 989,
	0, 990, 225, 303, 300, 301, 304, 307, 302, 308,
	309, 226, 227, 991, 851, 992, 0, 0, 0, 0,
	310, 311, 228, 312, 313, 0, 314, 993, 315, 994,
	995, 852, 316, 996, 317, 229, 997, 230, 998, 318,
	319, 320, 321, 322, 323, 231, 232, 854, 999, 325,
	0, 0, 0, 1000, 324, 326, 333, 1001, 853, 327,
	233, 329, 328, 330, 331, 332, 234, 1002, 235, 1003,
	334, 855, 856, 335, 336, 337, 857, 338, 339, 0,
	0, 340, 341, 342, 1004, 344, 343, 1005, 236, 858,
	345, 346, 859, 1006, 347, 348, 1007, 1008, 349, 0,
	350, 920, 919, 351, 352, 354, 355, 353, 860, 356,
	357, 359, 358, 1009, 1010, 861, 1011, 237, 360, 238,
	361, 362, 1012, 363, 364, 1013, 1014, 365, 366, 1015,
	1016, 367, 239, 862, 368, 863, 240, 369, 370, 371,
	372, 373, 374, 375, 1017, 376, 241, 377, 242, 378,
	1018, 379, 380, 381, 382, 383, 243, 384, 385, 1019,
	386, 387, 388, 389, 390, 0, 392, 393, 391, 394,
	395, 396, 397, 1020, 398, 864, 399, 400, 401, 402,
	244, 403, 0, 407, 408, 409, 410, 411, 412, 413,
	1021, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	1022, 423, 404, 405, 424, 865, 425, 245, 426, 427,
	1023, 437, 428, 429, 430, 406, 431, 435, 436, 432,
	433, 434, 246, 1024, 438, 439, 1025, 440, 441, 442,
	443, 444, 305, 445, 306, 446, 447, 1026, 247, 248,
	448, 1027, 1028, 449, 450, 249, 250, 1029, 451, 452,
	453, 454, 1030, 1031, 455, 456, 457, 459, 1032, 460,
	1033, 458, 461, 462, 463, 251, 252, 1034, 1035, 464,
	253, 1036, 1037, 1038, 1039, 465, 466, 254, 467, 468,
	469, 954, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2463, 255, 256, 257,
	258, 959, 259, 960, 961, 962, 963, 214, 964, 965,
	966, 967, 260, 261, 262, 215, 216, 263, 217, 264,
	265, 218, 968, 266, 267, 268, 269, 270, 271, 969,
	970, 219, 220, 221, 971, 272, 222, 972, 918, 973,
	273, 274, 275, 276, 277, 0, 279, 280, 281, 278,
	974, 282, 0, 283, 284, 975, 850, 285, 286, 287,
	976, 977, 979, 978, 980, 981, 982, 288, 289, 489,
	290, 291, 292, 223, 224, 983, 293, 984, 294, 985,
	295, 986, 987, 296, 297, 988, 298, 299, 989, 0,
	990, 225, 303, 300, 301, 304, 307, 302, 308, 309,
	226, 227, 991, 851, 992, 0, 0, 0, 0, 310,
	311, 228, 312, 313, 0, 314, 993, 315, 994, 995,
	852, 316, 996, 317, 229, 997, 230, 998, 318, 319,
	320, 321, 322, 323, 231, 232, 854, 999, 325, 0,
	0, 0, 1000, 324, 326, 333, 1001, 853, 327, 233,
	329, 328, 330, 331, 332, 234, 1002, 235, 1003, 334,
	855, 856, 335, 336, 337, 857, 338, 339, 0, 0,
	340, 341, 342, 1004, 344, 343, 1005, 236, 858, 345,
	346, 859, 1006, 347, 348, 1007, 1008, 349, 0, 350,
	920, 919, 351, 352, 354, 355, 353, 860, 356, 357,
	359, 358, 1009, 1010, 861, 1011, 237, 360, 238, 361,
	362, 1012, 363, 364, 1013, 1014, 365, 366, 1015, 1016,
	367, 239, 862, 368, 863, 240, 369, 370, 371, 372,
	373, 374, 375, 1017, 376, 241, 377, 242, 378, 1018,
	379, 380, 381, 382, 383, 243, 384, 385, 1019, 386,
	387, 388, 389, 390, 0, 392, 393, 391, 394, 395,
	396, 397, 1020, 398, 864, 399, 400, 401, 402, 244,
	403, 0, 407, 408, 409, 410, 411, 412, 413, 1021,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 1022,
	423, 404, 405, 424, 865, 425, 245, 426, 427, 1023,
	437, 428, 429, 430, 406, 431, 435, 436, 432, 433,
	434, 246, 1024, 438, 439, 1025, 440, 441, 442, 443,
	444, 305, 445, 306, 446, 447, 1026, 247, 248, 448,
	1027, 1028, 449, 450, 249, 250, 1029, 451, 452, 453,
	454, 1030, 1031, 455, 456, 457, 459, 1032, 460, 1033,
	458, 461, 462, 463, 251, 252, 1034, 1035, 464, 253,
	1036, 1037, 1038, 1039, 465, 466, 254, 467, 468, 469,
	954, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2345, 255, 256, 257, 258,
	959, 259, 960, 961, 962, 963, 214, 964, 965, 966,
	967, 260, 261, 262, 215, 216, 263, 217, 264, 265,
	218, 968, 266, 267, 268, 269, 270, 271, 969, 970,
	219, 220, 221, 971, 272, 222, 972, 918, 973, 273,
	274, 275, 276, 277, 0, 279, 280, 281, 278, 974,
	282, 0, 283, 284, 975, 850, 285, 286, 287, 976,
	977, 979, 978, 980, 981, 982, 288, 289, 489, 290,
	291, 292, 223, 224, 983, 293, 984, 294, 985, 295,
	986, 987, 296, 297, 988, 298, 299, 989, 0, 990,
	225, 303, 300, 301, 304, 307, 302, 308, 309, 226,
	227, 991, 851, 992, 0, 0, 0, 0, 310, 311,
	228, 312, 313, 0, 314, 993, 315, 994, 995, 852,
	316, 996, 317, 229, 997, 230, 998, 318, 319, 320,
	321, 322, 323, 231, 232, 854, 999, 325, 0, 0,
	0, 1000, 324, 326, 333, 1001, 853, 327, 233, 329,
	328, 330, 331, 332, 234, 1002, 235, 1003, 334, 855,
	856, 335, 336, 337, 857, 338, 339, 0, 0, 340,
	341, 342, 1004, 344, 343, 1005, 236, 858, 345, 346,
	859, 1006, 347, 348, 1007, 1008, 349, 0, 350, 920,
	919, 351, 352, 354, 355, 353, 860, 356, 357, 359,
	358, 1009, 1010, 861, 1011, 237, 360, 238, 361, 362,
	1012, 363, 364, 1013, 1014, 365, 366, 1015, 1016, 367,
	239, 862, 368, 863, 240, 369, 370, 371, 372, 373,
	374, 375, 1017, 376, 241, 377, 242, 378, 1018, 379,
	380, 381, 382, 383, 243, 384, 385, 1019, 386, 387,
	388, 389, 390, 0, 392, 393, 391, 394, 395, 396,
	397, 1020, 398, 864, 399, 400, 401, 402, 244, 403,
	0, 407, 408, 409, 410, 411, 412, 413, 1021, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 1022, 423,
	404, 405, 424, 865, 425, 245, 426, 427, 1023, 437,
	428, 429, 430, 406, 431, 435, 436, 432, 433, 434,
	246, 1024, 438, 439, 1025, 440, 441, 442, 443, 444,
	305, 445, 306, 446, 447, 1026, 247, 248, 448, 1027,
	1028, 449, 450, 249, 250, 1029, 451, 452, 453, 454,
	1030, 1031, 455, 456, 457, 459, 1032, 460, 1033, 458,
	461, 462, 463, 251, 252, 1034, 1035, 464, 253, 1036,
	1037, 1038, 1039, 465, 466, 254, 467, 468, 469, 954,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1803, 255, 256, 257, 258, 959,
	259, 960, 961, 962, 963, 214, 964, 965, 966, 967,
	260, 261, 262, 215, 216, 263, 217, 264, 265, 218,
	968, 266, 267, 268, 269, 270, 271, 969, 970, 219,
	220, 221, 971, 272, 222, 972, 918, 973, 273, 274,
	275, 276, 277, 0, 279, 280, 281, 278, 974, 282,
	0, 283, 284, 975, 850, 285, 286, 287, 976, 977,
	979, 978, 980, 981, 982, 288, 289, 489, 290, 291,
	292, 223, 224, 983, 293, 984, 294, 985, 295, 986,
	987, 296, 297, 988, 298, 299, 989, 0, 990, 225,
	303, 300, 301, 304, 307, 302, 308, 309, 226, 227,
	991, 851, 992, 0, 0, 0, 0, 310, 311, 228,
	312, 313, 0, 314, 993, 315, 994, 995, 852, 316,
	996, 317, 229, 997, 230, 998, 318, 319, 320, 321,
	322, 323, 231, 232, 854, 999, 325, 0, 0, 0,
	1000, 324, 326, 333, 1001, 853, 327, 233, 329, 328,
	330, 331, 332, 234, 1002, 235, 1003, 334, 855, 856,
	335, 336, 337, 857, 338, 339, 0, 0, 340, 341,
	342, 1004, 344, 343, 1005, 236, 858, 345, 346, 859,
	1006, 347, 348, 1007, 1008, 349, 0, 350, 920, 919,
	351, 352, 354, 355, 353, 860, 356, 357, 359, 358,
	1009, 1010, 861, 1011, 237, 360, 238, 361, 362, 1012,
	363, 364, 1013, 1014, 365, 366, 1015, 1016, 367, 239,
	862, 368, 863, 240, 369, 370, 371, 372, 373, 374,
	375, 1017, 376, 241, 377, 242, 378, 1018, 379, 380,
	381, 382, 383, 243, 384, 385, 1019, 386, 387, 388,
	389, 390, 0, 392, 393, 391, 394, 395, 396, 397,
	1020, 398, 864, 399, 400, 401, 402, 244, 403, 0,
	407, 408, 409, 410, 411, 412, 413, 1021, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 1022, 423, 404,
	405, 424, 865, 425, 245, 426, 427, 1023, 437, 428,
	429, 430, 406, 431, 435, 436, 432, 433, 434, 246,
	1024, 438, 439, 1025, 440, 441, 442, 443, 444, 305,
	445, 306, 446, 447, 1026, 247, 248, 448, 1027, 1028,
	449, 450, 249, 250, 1029, 451, 452, 453, 454, 1030,
	1031, 455, 456, 457, 459, 1032, 460, 1033, 458, 461,
	462, 463, 251, 252, 1034, 1035, 464, 253, 1036, 1037,
	1038, 1039, 465, 466, 254, 467, 468, 469, 954, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1488, 255, 256, 257, 258, 959, 259,
	960, 961, 962, 963, 214, 964, 965, 966, 967, 260,
	261, 262, 215, 216, 263, 217, 264, 265, 218, 968,
	266, 267, 268, 269, 270, 271, 969, 970, 219, 220,
	221, 971, 272, 222, 972, 918, 973, 273, 274, 275,
	276, 277, 0, 279, 280, 281, 278, 974, 282, 0,
	283, 284, 975, 850, 285, 286, 287, 976, 977, 979,
	978, 980, 981, 982, 288, 289, 489, 290, 291, 292,
	223, 224, 983, 293, 984, 294, 985, 295, 986, 987,
	296, 297, 988, 298, 299, 989, 0, 990, 225, 303,
	300, 301, 304, 307, 302, 308, 309, 226, 227, 991,
	851, 992, 0, 0, 0, 0, 310, 311, 228, 312,
	313, 0, 314, 993, 315, 994, 995, 852, 316, 996,
	317, 229, 997, 230, 998, 318, 319, 320, 321, 322,
	323, 231, 232, 854, 999, 325, 0, 0, 0, 1000,
	324, 326, 333, 1001, 853, 327, 233, 329, 328, 330,
	331, 332, 234, 1002, 235, 1003, 334, 855, 856, 335,
	336, 337, 857, 338, 339, 0, 0, 340, 341, 342,
	1004, 344, 343, 1005, 236, 858, 345, 346, 859, 1006,
	347, 348, 1007, 1008, 349, 0, 350, 920, 919, 351,
	352, 354, 355, 353, 860, 356, 357, 359, 358, 1009,
	1010, 861, 1011, 237, 360, 238, 361, 362, 1012, 363,
	364, 1013, 1014, 365, 366, 1015, 1016, 367, 239, 862,
	368, 863, 240, 369, 370, 371, 372, 373, 374, 375,
	1017, 376, 241, 377, 242, 378, 1018, 379, 380, 381,
	382, 383, 243, 384, 385, 1019, 386, 387, 388, 389,
	390, 0, 392, 393, 391, 394, 395, 396, 397, 1020,
	398, 864, 399, 400, 401, 402, 244, 403, 0, 407,
	408, 409, 410, 411, 412, 413, 1021, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 1022, 423, 404, 405,
	424, 865, 425, 245, 426, 427, 1023, 437, 428, 429,
	430, 406, 431, 435, 436, 432, 433, 434, 246, 1024,
	438, 439, 1025, 440, 441, 442, 443, 444, 305, 445,
	306, 446, 447, 1026, 247, 248, 448, 1027, 1028, 449,
	450, 249, 250, 1029, 451, 452, 453, 454, 1030, 1031,
	455, 456, 457, 459, 1032, 460, 1033, 458, 461, 462,
	463, 251, 252, 1034, 1035, 464, 253, 1036, 1037, 1038,
	1039, 465, 466, 254, 467, 468, 469, 717, 0, 769,
	757, 758, 755, 756, 746, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 256, 257, 258, 0,
	259, 0, 0, 0, 0, 804, 749, 0, 0, 0,
	260, 261, 262, 215, 823, 789, 824, 777, 810, 825,
	0, 266, 779, 778, 269, 270, 271, 752, 803, 826,
	827, 221, 0, 272, 808, 0, 794, 0, 273, 274,
	275, 276, 277, 0, 279, 280, 281, 278, 0, 282,
	0, 283, 284, 0, 850, 285, 286, 287, 797, 795,
	796, 800, 0, 798, 799, 288, 289, 489, 290, 811,
	292, 828, 829, 735, 293, 0, 294, 0, 295, 0,
	0, 812, 297, 0, 298, 299, 0, 0, 0, 740,
	303, 300, 301, 304, 307, 302, 308, 309, 830, 831,
	764, 851, 0, 0, 0, 0, 0, 310, 311, 832,
	813, 814, 0, 314, 0, 315, 0, 0, 852, 316,
	0, 317, 833, 0, 230, 0, 318, 319, 320, 321,
	322, 323, 805, 807, 854, 0, 788, 0, 0, 0,
	0, 324, 326, 333, 0, 853, 327, 834, 792, 815,
	816, 817, 818, 835, 0, 793, 0, 334, 855, 856,
	335, 336, 337, 857, 819, 820, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 836, 858, 345, 346, 859,
	0, 347, 348, 0, 0, 349, 0, 350, 737, 736,
	351, 352, 354, 781, 353, 860, 356, 357, 359, 358,
	732, 0, 861, 765, 806, 360, 837, 361, 362, 0,
	790, 791, 0, 0, 365, 366, 0, 0, 367, 239,
	862, 368, 863, 838, 369, 370, 371, 372, 373, 374,
	375, 0, 376, 839, 377, 242, 378, 0, 379, 380,
	381, 382, 383, 840, 384, 385, 0, 386, 387, 388,
	389, 390, 0, 392, 393, 391, 394, 395, 396, 397,
	0, 398, 864, 399, 400, 401, 402, 741, 403, 0,
	407, 408, 409, 410, 411, 412, 413, 171, 419, 420,
	782, 783, 784, 785, 415, 421, 422, 801, 423, 404,
	405, 424, 865, 425, 841, 786, 427, 0, 437, 428,
	429, 430, 406, 431, 435, 821, 432, 433, 434, 842,
	0, 438, 439, 173, 440, 441, 442, 443, 444, 305,
	445, 306, 780, 447, 0, 843, 844, 822, 0, 0,
	449, 450, 845, 846, 763, 451, 452, 453, 454, 0,
	0, 455, 456, 457, 459, 802, 460, 0, 787, 461,
	462, 463, 1129, 847, 0, 0, 464, 253, 0, 0,
	0, 165, 465, 466, 254, 467, 468, 469, 733, 166,
	0, 0, 0, 0, 0, 0, 731, 0, 0, 0,
	0, 729, 730, 769, 757, 758, 755, 756, 746, 0,
	1339, 0, 0, 0, 0, 0, 745, 0, 0, 255,
	256, 257, 258, 0, 259, 0, 0, 0, 0, 804,
	749, 0, 0, 0, 260, 261, 262, 215, 823, 789,
	824, 777, 810, 825, 0, 266, 779, 778, 269, 270,
	271, 752, 803, 826, 827, 221, 0, 272, 808, 0,
	794, 0, 273, 274, 275, 276, 277, 0, 279, 280,
	281, 278, 0, 282, 0, 283, 284, 0, 850, 285,
	286, 287, 797, 795, 796, 800, 0, 798, 799, 288,
	289, 489, 290, 811, 292, 828, 829, 735, 293, 0,
	294, 0, 295, 0, 0, 812, 297, 0, 298, 299,
	0, 0, 0, 740, 303, 300, 301, 304, 307, 302,
	308, 309, 830, 831, 764, 851, 0, 0, 0, 0,
	0, 310, 311, 832, 813, 814, 0, 314, 0, 315,
	0, 0, 852, 316, 0, 317, 833, 0, 230, 0,
	318, 319, 320, 321, 322, 323, 805, 807, 854, 0,
	788, 0, 0, 0, 0, 324, 326, 333, 0, 853,
	327, 834, 792, 815, 816, 817, 818, 835, 0, 793,
	0, 334, 855, 856, 335, 336, 337, 857, 819, 820,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 836,
	858, 345, 346, 859, 0, 347, 348, 0, 0, 349,
	0, 350, 737, 736, 351, 352, 354, 781, 353, 860,
	356, 357, 359, 358, 732, 0, 861, 765, 806, 360,
	837, 361, 362, 0, 790, 791, 0, 0, 365, 366,
	0, 0, 367, 239, 862, 368, 863, 838, 369, 370,
	371, 372, 373, 374, 375, 0, 376, 839, 377, 242,
	378, 0, 379, 380, 381, 382, 383, 840, 384, 385,
	0, 386, 387, 388, 389, 390, 0, 392, 393, 391,
	394, 395, 396, 397, 0, 398, 864, 399, 400, 401,
	402, 741, 403, 0, 407, 408, 409, 410, 411, 412,
	413, 171, 419, 420, 782, 783, 784, 785, 415, 421,
	422, 801, 423, 404, 405, 424, 865, 425, 841, 786,
	427, 0, 437, 428, 429, 430, 406, 431, 435, 821,
	432, 433, 434, 842, 0, 438, 439, 173, 440, 441,
	442, 443, 444, 305, 445, 306, 780, 447, 0, 843,
	844, 822, 0, 0, 449, 450, 845, 846, 763, 451,
	452, 453, 454, 0, 0, 455, 456, 457, 459, 802,
	460, 0, 787, 461, 462, 463, 1129, 847, 0, 0,
	464, 253, 0, 0, 0, 165, 465, 466, 254, 467,
	468, 469, 733, 166, 0, 0, 0, 0, 0, 0,
	731, 0, 0, 0, 0, 729, 730, 769, 757, 758,
	755, 756, 746, 0, 1339, 0, 0, 0, 0, 0,
	745, 0, 0, 255, 256, 257, 258, 0, 259, 0,
	0, 0, 0, 804, 749, 0, 0, 0, 260, 261,
	262, 215, 823, 789, 824, 777, 810, 825, 1877, 266,
	779, 778, 269, 270, 271, 752, 803, 826, 827, 221,
	0, 272, 808, 0, 794, 0, 273, 274, 275, 276,
	277, 0, 279, 280, 281, 278, 0, 282, 0, 283,
	284, 0, 850, 285, 286, 287, 797, 795, 796, 800,
	0, 798, 799, 288, 289, 489, 290, 811, 292, 828,
	829, 735, 293, 0, 294, 0, 295, 0, 0, 812,
	297, 0, 298, 299, 0, 0, 0, 740, 303, 300,
	301, 304, 307, 302, 308, 309, 830, 831, 764, 851,
	0, 0, 0, 0, 0, 310, 311, 832, 813, 814,
	0, 314, 0, 315, 0, 1882, 852, 316, 0, 317,
	833, 0, 230, 0, 318, 319, 320, 321, 322, 323,
	805, 807, 854, 0, 788, 0, 0, 0, 0, 324,
	326, 333, 0, 853, 327, 834, 792, 815, 816, 817,
	818, 835, 0, 793, 0, 334, 855, 856, 335, 336,
	337, 857, 819, 820, 0, 0, 340, 341, 342, 0,
	344, 343, 1878, 836, 858, 345, 346, 859, 0, 347,
	348, 0, 0, 349, 0, 350, 737, 736, 351, 352,
	354, 781, 353, 860, 356, 357, 359, 358, 732, 0,
	861, 765, 806, 360, 837, 361, 362, 0, 790, 791,
	0, 0, 365, 366, 0, 0, 367, 239, 862, 368,
	863, 838, 369, 370, 371, 372, 373, 374, 375, 0,
	376, 839, 377, 242, 378, 0, 379, 380, 381, 382,
	383, 840, 384, 385, 0, 386, 387, 388, 389, 390,
	0, 392, 393, 391, 394, 395, 396, 397, 0, 398,
	864, 399, 400, 401, 402, 741, 403, 0, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 782, 783,
	784, 785, 415, 421, 422, 801, 423, 404, 405, 424,
	865, 425, 841, 786, 427, 0, 437, 428, 429, 430,
	406, 431, 435, 821, 432, 433, 434, 842, 0, 438,
	439, 0, 440, 441, 442, 443, 444, 305, 445, 306,
	780, 447, 0, 843, 844, 822, 0, 1879, 449, 450,
	845, 846, 763, 451, 452, 453, 454, 0, 0, 455,
	456, 457, 459, 802, 460, 0, 787, 461, 462, 463,
	251, 847, 0, 0, 464, 253, 0, 0, 0, 0,
	465, 466, 254, 467, 468, 469, 733, 0, 0, 0,
	0, 0, 0, 0, 731, 0, 0, 0, 0, 729,
	730, 769, 757, 758, 755, 756, 746, 0, 742, 0,
	0, 0, 0, 0, 745, 0, 0, 255, 256, 257,
	258, 0, 259, 0, 0, 0, 0, 804, 749, 0,
	0, 0, 260, 261, 262, 215, 823, 789, 824, 777,
	810, 825, 0, 266, 779, 778, 269, 270, 271, 752,
	803, 826, 827, 221, 0, 272, 808, 0, 794, 0,
	273, 274, 275, 276, 277, 0, 279, 280, 281, 278,
	0, 282, 0, 283, 284, 0, 850, 285, 286, 287,
	797, 795, 796, 800, 0, 798, 799, 288, 289, 489,
	290, 811, 292, 828, 829, 735, 293, 0, 294, 0,
	295, 0, 0, 812, 297, 0, 298, 299, 0, 0,
	0, 740, 303, 300, 301, 304, 307, 302, 308, 309,
	830, 831, 764, 851, 0, 0, 0, 0, 0, 310,
	311, 832, 813, 814, 0, 314, 0, 315, 0, 0,
	852, 316, 0, 317, 833, 0, 230, 0, 318, 319,
	320, 321, 322, 323, 805, 807, 854, 0, 788, 0,
	0, 0, 0, 324, 326, 333, 0, 853, 327, 834,
	792, 815, 816, 817, 818, 835, 0, 793, 0, 334,
	855, 856, 335, 336, 337, 857, 819, 820, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 836, 858, 345,
	346, 859, 0, 347, 348, 0, 0, 349, 0, 350,
	737, 736, 351, 352, 354, 781, 353, 860, 356, 357,
	359, 358, 732, 2631, 861, 765, 806, 360, 837, 361,
	362, 0, 790, 791, 0, 0, 365, 366, 0, 0,
	367, 239, 862, 368, 863, 838, 369, 370, 371, 372,
	373, 374, 375, 0, 376, 839, 377, 242, 378, 0,
	379, 380, 381, 382, 383, 840, 384, 385, 0, 386,
	387, 388, 389, 390, 0, 392, 393, 391, 394, 395,
	396, 397, 0, 398, 864, 399, 400, 401, 402, 741,
	403, 0, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 782, 783, 784, 785, 415, 421, 422, 801,
	423, 404, 405, 424, 865, 425, 841, 786, 427, 0,
	437, 428, 429, 430, 406, 431, 435, 821, 432, 433,
	434, 842, 0, 438, 439, 0, 440, 441, 442, 443,
	444, 305, 445, 306, 780, 447, 0, 843, 844, 822,
	0, 0, 449, 450, 845, 846, 763, 451, 452, 453,
	454, 0, 0, 455, 456, 457, 459, 802, 460, 0,
	787, 461, 462, 463, 251, 847, 0, 0, 464, 253,
	0, 0, 0, 0, 465, 466, 254, 467, 468, 469,
	733, 0, 0, 0, 0, 0, 0, 0, 731, 0,
	0, 0, 0, 729, 730, 1400, 769, 757, 758, 755,
	756, 746, 742, 0, 0, 0, 0, 0, 745, 0,
	0, 0, 255, 256, 257, 258, 0, 259, 0, 0,
	0, 0, 804, 749, 0, 0, 0, 260, 261, 262,
	215, 823, 789, 824, 777, 810, 825, 0, 266, 779,
	778, 269, 270, 271, 752, 803, 826, 827, 221, 0,
	272, 808, 0, 794, 0, 273, 274, 275, 276, 277,
	0, 279, 280, 281, 278, 0, 282, 0, 283, 284,
	0, 850, 285, 286, 287, 797, 795, 796, 800, 0,
	798, 799, 288, 289, 489, 290, 811, 292, 828, 829,
	735, 293, 0, 294, 0, 295, 0, 0, 812, 297,
	0, 298, 299, 0, 0, 0, 740, 303, 300, 301,
	304, 307, 302, 308, 309, 830, 831, 764, 851, 0,
	0, 0, 0, 0, 310, 311, 832, 813, 814, 0,
	314, 0, 315, 0, 0, 852, 316, 0, 317, 833,
	0, 230, 0, 318, 319, 320, 321, 322, 323, 805,
	807, 854, 0, 788, 0, 0, 0, 1708, 324, 326,
	333, 0, 853, 327, 834, 792, 815, 816, 817, 818,
	835, 0, 793, 0, 334, 855, 856, 335, 336, 337,
	857, 819, 820, 0, 0, 340, 341, 342, 0, 344,
	343, 0, 836, 858, 345, 346, 859, 0, 347, 348,
	0, 0, 349, 0, 350, 737, 736, 351, 352, 354,
	781, 353, 860, 356, 357, 359, 358, 732, 0, 861,
	765, 806, 360, 837, 361, 362, 0, 790, 791, 0,
	0, 365, 366, 0, 0, 367, 239, 862, 368, 863,
	838, 369, 370, 371, 372, 373, 374, 375, 0, 376,
	839, 377, 242, 378, 1707, 379, 380, 381, 382, 383,
	840, 384, 385, 0, 386, 387, 388, 389, 390, 0,
	392, 393, 391, 394, 395, 396, 397, 0, 398, 864,
	399, 400, 401, 402, 741, 403, 0, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 782, 783, 784,
	785, 415, 421, 422, 801, 423, 404, 405, 424, 865,
	425, 841, 786, 427, 0, 437, 428, 429, 430, 406,
	431, 435, 821, 432, 433, 434, 842, 0, 438, 439,
	0, 440, 441, 442, 443, 444, 305, 445, 306, 780,
	447, 0, 843, 844, 822, 0, 0, 449, 450, 845,
	846, 763, 451, 452, 453, 454, 0, 0, 455, 456,
	457, 459, 802, 460, 0, 787, 461, 462, 463, 251,
	847, 0, 0, 464, 253, 0, 0, 0, 0, 465,
	466, 254, 467, 468, 469, 733, 0, 0, 0, 0,
	0, 0, 0, 731, 0, 0, 0, 0, 729, 730,
	0, 0, 0, 0, 0, 0, 0, 742, 0, 0,
	0, 0, 725, 745, 769, 757, 758, 755, 756, 746,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 256, 257, 258, 0, 259, 0, 0, 0, 0,
	804, 749, 0, 0, 0, 260, 261, 262, 215, 823,
	789, 824, 777, 810, 825, 0, 266, 779, 778, 269,
	270, 271, 752, 803, 826, 827, 221, 0, 272, 808,
	0, 794, 0, 273, 274, 275, 276, 277, 0, 279,
	280, 281, 278, 0, 282, 0, 283, 284, 0, 850,
	285, 286, 287, 797, 795, 796, 800, 0, 798, 799,
	288, 289, 489, 290, 811, 292, 828, 829, 735, 293,
	0, 294, 0, 295, 0, 0, 812, 297, 0, 298,
	299, 0, 0, 0, 740, 303, 300, 301, 304, 307,
	302, 308, 309, 830, 831, 764, 851, 0, 0, 0,
	0, 0, 310, 311, 832, 813, 814, 0, 314, 0,
	315, 0, 0, 852, 316, 0, 317, 833, 0, 230,
	0, 318, 319, 320, 321, 322, 323, 805, 807, 854,
	0, 788, 0, 0, 0, 0, 324, 326, 333, 0,
	853, 327, 834, 792, 815, 816, 817, 818, 835, 0,
	793, 0, 334, 855, 856, 335, 336, 337, 857, 819,
	820, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	836, 858, 345, 346, 859, 0, 347, 348, 0, 0,
	349, 0, 350, 737, 736, 351, 352, 354, 781, 353,
	860, 356, 357, 359, 358, 732, 0, 861, 765, 806,
	360, 837, 361, 362, 0, 790, 791, 727, 0, 365,
	366, 0, 0, 367, 239, 862, 368, 863, 838, 369,
	370, 371, 372, 373, 374, 375, 0, 376, 839, 377,
	242, 378, 0, 379, 380, 381, 382, 383, 840, 384,
	385, 0, 386, 387, 388, 389, 390, 0, 392, 393,
	391, 394, 395, 396, 397, 0, 398, 864, 399, 400,
	401, 402, 741, 403, 0, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 782, 783, 784, 785, 415,
	421, 422, 801, 423, 404, 405, 424, 865, 425, 841,
	786, 427, 0, 437, 428, 429, 430, 406, 431, 435,
	821, 432, 433, 434, 842, 0, 438, 439, 0, 440,
	441, 442, 443, 444, 305, 445, 306, 780, 447, 0,
	843, 844, 822, 0, 0, 449, 450, 845, 846, 763,
	451, 452, 453, 454, 0, 0, 455, 456, 457, 459,
	802, 460, 0, 787, 461, 462, 463, 251, 847, 0,
	0, 464, 253, 0, 0, 0, 0, 465, 466, 254,
	467, 468, 469, 733, 0, 0, 0, 0, 0, 0,
	0, 731, 0, 0, 0, 0, 729, 730, 769, 757,
	758, 755, 756, 746, 0, 742, 0, 0, 0, 0,
	0, 745, 0, 0, 255, 256, 257, 258, 0, 259,
	0, 0, 0, 0, 804, 749, 0, 0, 0, 260,
	261, 262, 215, 823, 789, 824, 777, 810, 825, 0,
	266, 779, 778, 269, 270, 271, 752, 803, 826, 827,
	221, 0, 272, 808, 0, 794, 0, 273, 274, 275,
	276, 277, 0, 279, 280, 281, 278, 0, 282, 0,
	283, 284, 0, 850, 285, 286, 287, 797, 795, 796,
	800, 0, 798, 799, 288, 289, 489, 290, 811, 292,
	828, 829, 735, 293, 0, 294, 0, 295, 0, 0,
	812, 297, 0, 298, 299, 0, 0, 0, 740, 303,
	300, 301, 304, 307, 302, 308, 309, 830, 831, 764,
	851, 0, 0, 0, 0, 0, 310, 311, 832, 813,
	814, 0, 314, 0, 315, 0, 0, 852, 316, 0,
	317, 833, 0, 230, 0, 318, 319, 320, 321, 322,
	323, 805, 807, 854, 0, 788, 0, 0, 0, 0,
	324, 326, 333, 0, 853, 327, 834, 792, 815, 816,
	817, 818, 835, 0, 793, 0, 334, 855, 856, 335,
	336, 337, 857, 819, 820, 0, 0, 340, 341, 342,
	0, 344, 343, 0, 836, 858, 345, 346, 859, 0,
	347, 348, 0, 0, 349, 0, 350, 737, 736, 351,
	352, 354, 781, 353, 860, 356, 357, 359, 358, 732,
	0, 861, 765, 806, 360, 837, 361, 362, 0, 790,
	791, 0, 0, 365, 366, 0, 0, 367, 239, 862,
	368, 863, 838, 369, 370, 371, 372, 373, 374, 375,
	0, 376, 839, 377, 242, 378, 0, 379, 380, 381,
	382, 383, 840, 384, 385, 0, 386, 387, 388, 389,
	390, 0, 392, 393, 391, 394, 395, 396, 397, 0,
	398, 864, 399, 400, 401, 402, 741, 403, 0, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 782,
	783, 784, 785, 415, 421, 422, 801, 423, 404, 405,
	424, 865, 425, 841, 786, 427, 0, 437, 428, 429,
	430, 406, 431, 435, 821, 432, 433, 434, 842, 0,
	438, 439, 0, 440, 441, 442, 443, 444, 305, 445,
	306, 780, 447, 0, 843, 844, 822, 0, 0, 449,
	450, 845, 846, 763, 451, 452, 453, 454, 0, 0,
	455, 456, 457, 459, 802, 460, 0, 787, 461, 462,
	463, 251, 847, 2465, 0, 464, 253, 0, 0, 0,
	0, 465, 466, 254, 467, 468, 469, 733, 0, 0,
	0, 0, 0, 0, 0, 731, 0, 0, 0, 0,
	729, 730, 769, 757, 758, 755, 756, 746, 0, 742,
	0, 0, 0, 0, 0, 745, 0, 0, 255, 256,
	257, 258, 0, 259, 0, 0, 0, 0, 804, 749,
	0, 0, 0, 260, 261, 262, 215, 823, 789, 824,
	777, 810, 825, 0, 266, 779, 778, 269, 270, 271,
	752, 803, 826, 827, 221, 0, 272, 808, 0, 794,
	0, 273, 274, 275, 276, 277, 0, 279, 280, 281,
	278, 0, 282, 0, 283, 284, 0, 850, 285, 286,
	287, 797, 795, 796, 800, 0, 798, 799, 288, 289,
	489, 290, 811, 292, 828, 829, 735, 293, 0, 294,
	0, 295, 0, 0, 812, 297, 0, 298, 299, 0,
	0, 0, 740, 303, 300, 301, 304, 307, 302, 308,
	309, 830, 831, 764, 851, 0, 0, 0, 0, 0,
	310, 311, 832, 813, 814, 0, 314, 0, 315, 0,
	0, 852, 316, 0, 317, 833, 0, 230, 0, 318,
	319, 320, 321, 322, 323, 805, 807, 854, 0, 788,
	0, 0, 0, 0, 324, 326, 333, 0, 853, 327,
	834, 792, 815, 816, 817, 818, 835, 0, 793, 0,
	334, 855, 856, 335, 336, 337, 857, 819, 820, 0,
	0, 340, 341, 342, 0, 344, 343, 0, 836, 858,
	345, 346, 859, 0, 347, 348, 0, 0, 349, 0,
	350, 737, 736, 351, 352, 354, 781, 353, 860, 356,
	357, 359, 358, 732, 0, 861, 765, 806, 360, 837,
	361, 362, 0, 790, 791, 727, 0, 365, 366, 0,
	0, 367, 239, 862, 368, 863, 838, 369, 370, 371,
	372, 373, 374, 375, 0, 376, 839, 377, 242, 378,
	0, 379, 380, 381, 382, 383, 840, 384, 385, 0,
	386, 387, 388, 389, 390, 0, 392, 393, 391, 394,
	395, 396, 397, 0, 398, 864, 399, 400, 401, 402,
	741, 403, 0, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 782, 783, 784, 785, 415, 421, 422,
	801, 423, 404, 405, 424, 865, 425, 841, 786, 427,
	0, 437, 428, 429, 430, 406, 431, 435, 821, 432,
	433, 434, 842, 0, 438, 439, 0, 440, 441, 442,
	443, 444, 305, 445, 306, 780, 447, 0, 843, 844,
	822, 0, 0, 449, 450, 845, 846, 763, 451, 452,
	453, 454, 0, 0, 455, 456, 457, 459, 802, 460,
	0, 787, 461, 462, 463, 251, 847, 0, 0, 464,
	253, 0, 0, 0, 0, 465, 466, 254, 467, 468,
	469, 733, 0, 0, 0, 0, 0, 0, 0, 731,
	0, 0, 0, 0, 729, 730, 0, 0, 0, 0,
	0, 0, 0, 742, 0, 0, 0, 0, 2277, 745,
	769, 757, 758, 755, 756, 746, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 256, 257, 258,
	0, 259, 0, 0, 0, 0, 804, 749, 0, 0,
	0, 260, 261, 262, 215, 823, 789, 824, 777, 810,
	825, 0, 266, 779, 778, 269, 270, 271, 752, 803,
	826, 827, 221, 0, 272, 808, 0, 794, 0, 273,
	274, 275, 276, 277, 0, 279, 280, 281, 278, 0,
	282, 0, 283, 284, 0, 850, 285, 286, 287, 797,
	795, 796, 800, 0, 798, 799, 288, 289, 489, 290,
	811, 292, 828, 829, 735, 293, 0, 294, 0, 295,
	0, 0, 812, 297, 0, 298, 299, 0, 0, 0,
	740, 303, 300, 301, 304, 307, 302, 308, 309, 830,
	831, 764, 851, 0, 0, 0, 0, 0, 310, 311,
	832, 813, 814, 0, 314, 0, 315, 0, 0, 852,
	316, 0, 317, 833, 0, 230, 0, 318, 319, 320,
	321, 322, 323, 805, 807, 854, 0, 788, 0, 0,
	0, 0, 324, 326, 333, 0, 853, 327, 834, 792,
	815, 816, 817, 818, 835, 0, 793, 0, 334, 855,
	856, 335, 336, 337, 857, 819, 820, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 836, 858, 345, 346,
	859, 0, 347, 348, 0, 0, 349, 0, 350, 737,
	736, 351, 352, 354, 781, 353, 860, 356, 357, 359,
	358, 732, 0, 861, 765, 806, 360, 837, 361, 362,
	0, 790, 791, 0, 0, 365, 366, 0, 0, 367,
	239, 862, 368, 863, 838, 369, 370, 371, 372, 373,
	374, 375, 0, 376, 839, 377, 242, 378, 0, 379,
	380, 381, 382, 383, 840, 384, 385, 0, 386, 387,
	388, 389, 390, 0, 392, 393, 391, 394, 395, 396,
	397, 0, 398, 864, 399, 400, 401, 402, 741, 403,
	0, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 782, 783, 784, 785, 415, 421, 422, 801, 423,
	404, 405, 424, 865, 425, 841, 786, 427, 0, 437,
	428, 429, 430, 406, 431, 435, 821, 432, 433, 434,
	842, 0, 438, 439, 0, 440, 441, 442, 443, 444,
	305, 445, 306, 780, 447, 0, 843, 844, 822, 0,
	0, 449, 450, 845, 846, 763, 451, 452, 453, 454,
	0, 0, 455, 456, 457, 459, 802, 460, 0, 787,
	461, 462, 463, 251, 847, 0, 0, 464, 253, 0,
	0, 0, 0, 465, 466, 254, 467, 468, 469, 733,
	0, 0, 0, 0, 0, 0, 0, 731, 0, 0,
	0, 0, 729, 730, 769, 757, 758, 755, 756, 746,
	0, 742, 0, 0, 0, 0, 0, 745, 0, 0,
	255, 256, 257, 258, 0, 259, 0, 0, 0, 0,
	804, 749, 0, 0, 0, 260, 261, 262, 215, 823,
	789, 824, 777, 810, 825, 0, 266, 779, 778, 269,
	270, 271, 752, 803, 826, 827, 221, 0, 272, 808,
	0, 794, 0, 273, 274, 275, 276, 277, 0, 279,
	280, 281, 278, 0, 282, 0, 283, 284, 0, 850,
	285, 286, 287, 797, 795, 796, 800, 0, 798, 799,
	288, 289, 489, 290, 811, 292, 828, 829, 735, 293,
	0, 294, 0, 295, 0, 0, 812, 297, 0, 298,
	299, 0, 0, 0, 740, 303, 300, 301, 304, 307,
	302, 308, 309, 830, 831, 764, 851, 0, 0, 0,
	0, 0, 310, 311, 832, 813, 814, 0, 314, 0,
	315, 0, 0, 852, 316, 0, 317, 833, 0, 230,
	0, 318, 319, 320, 321, 322, 323, 805, 807, 854,
	0, 788, 0, 0, 0, 0, 324, 326, 333, 0,
	853, 327, 834, 792, 815, 816, 817, 818, 835, 0,
	793, 0, 334, 855, 856, 335, 336, 337, 857, 819,
	820, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	836, 858, 345, 346, 859, 0, 347, 348, 0, 0,
	349, 0, 350, 737, 736, 351, 352, 354, 781, 353,
	860, 356, 357, 359, 358, 732, 0, 861, 765, 806,
	360, 837, 361, 362, 0, 790, 791, 0, 0, 365,
	366, 0, 0, 367, 239, 862, 368, 863, 838, 369,
	370, 371, 372, 373, 374, 375, 0, 376, 839, 377,
	242, 378, 0, 379, 380, 381, 382, 383, 840, 384,
	385, 0, 386, 387, 388, 389, 390, 0, 392, 393,
	391, 394, 395, 396, 397, 0, 398, 864, 399, 400,
	401, 402, 741, 403, 0, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 782, 783, 784, 785, 415,
	421, 422, 801, 423, 404, 405, 424, 865, 425, 841,
	786, 427, 0, 437, 428, 429, 430, 406, 431, 435,
	821, 432, 433, 434, 842, 0, 438, 439, 0, 440,
	441, 442, 443, 444, 305, 445, 306, 780, 447, 0,
	843, 844, 822, 0, 0, 449, 450, 845, 846, 763,
	451, 452, 453, 454, 0, 0, 455, 456, 457, 459,
	802, 460, 0, 787, 461, 462, 463, 251, 847, 0,
	0, 464, 253, 0, 0, 0, 0, 465, 466, 254,
	467, 468, 469, 733, 0, 0, 0, 0, 0, 0,
	0, 731, 0, 0, 0, 0, 729, 730, 1400, 769,
	757, 758, 755, 756, 746, 742, 0, 0, 0, 0,
	0, 745, 0, 0, 0, 255, 256, 257, 258, 0,
	259, 0, 0, 0, 0, 804, 749, 0, 0, 0,
	260, 261, 262, 215, 823, 789, 824, 777, 810, 825,
	0, 266, 779, 778, 269, 270, 271, 752, 803, 826,
	827, 221, 0, 272, 808, 0, 794, 0, 273, 274,
	275, 276, 277, 0, 279, 280, 281, 278, 0, 282,
	0, 283, 284, 0, 850, 285, 286, 287, 797, 795,
	796, 800, 0, 798, 799, 288, 289, 489, 290, 811,
	292, 828, 829, 735, 293, 0, 294, 0, 295, 0,
	0, 812, 297, 0, 298, 299, 0, 0, 0, 740,
	303, 300, 301, 304, 307, 302, 308, 309, 830, 831,
	764, 851, 0, 0, 0, 0, 0, 310, 311, 832,
	813, 814, 0, 314, 0, 315, 0, 1882, 852, 316,
	0, 317, 833, 0, 230, 0, 318, 319, 320, 321,
	322, 323, 805, 807, 854, 0, 788, 0, 0, 0,
	0, 324, 326, 333, 0, 853, 327, 834, 792, 815,
	816, 817, 818, 835, 0, 793, 0, 334, 855, 856,
	335, 336, 337, 857, 819, 820, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 836, 858, 345, 346, 859,
	0, 347, 348, 0, 0, 349, 0, 350, 737, 736,
	351, 352, 354, 781, 353, 860, 356, 357, 359, 358,
	732, 0, 861, 765, 806, 360, 837, 361, 362, 0,
	790, 791, 0, 0, 365, 366, 0, 0, 367, 239,
	862, 368, 863, 838, 369, 370, 371, 372, 373, 374,
	375, 0, 376, 839, 377, 242, 378, 0, 379, 380,
	381, 382, 383, 840, 384, 385, 0, 386, 387, 388,
	389, 390, 0, 392, 393, 391, 394, 395, 396, 397,
	0, 398, 864, 399, 400, 401, 402, 741, 403, 0,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	782, 783, 784, 785, 415, 421, 422, 801, 423, 404,
	405, 424, 865, 425, 841, 786, 427, 0, 437, 428,
	429, 430, 406, 431, 435, 821, 432, 433, 434, 842,
	0, 438, 439, 0, 440, 441, 442, 443, 444, 305,
	445, 306, 780, 447, 0, 843, 844, 822, 0, 0,
	449, 450, 845, 846, 763, 451, 452, 453, 454, 0,
	0, 455, 456, 457, 459, 802, 460, 0, 787, 461,
	462, 463, 251, 847, 0, 0, 464, 253, 0, 0,
	0, 0, 465, 466, 254, 467, 468, 469, 733, 0,
	0, 0, 0, 0, 0, 0, 731, 0, 0, 0,
	0, 729, 730, 0, 0, 0, 0, 0, 0, 0,
	742, 0, 0, 0, 0, 1916, 745, 769, 757, 758,
	755, 756, 746, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 256, 257, 258, 0, 259, 0,
	0, 0, 0, 804, 749, 0, 0, 0, 260, 261,
	262, 215, 823, 789, 824, 777, 810, 825, 0, 266,
	779, 778, 269, 270, 271, 752, 803, 826, 827, 221,
	0, 272, 808, 0, 794, 0, 273, 274, 275, 276,
	277, 0, 279, 280, 281, 278, 0, 282, 0, 283,
	284, 0, 850, 285, 286, 287, 797, 795, 796, 800,
	0, 798, 799, 288, 289, 489, 290, 811, 292, 828,
	829, 735, 293, 0, 294, 0, 295, 0, 0, 812,
	297, 0, 298, 299, 0, 0, 0, 740, 303, 300,
	301, 304, 307, 302, 308, 309, 830, 831, 764, 851,
	0, 0, 0, 0, 0, 310, 311, 832, 813, 814,
	0, 314, 0, 315, 0, 0, 852, 316, 0, 317,
	833, 0, 230, 0, 318, 319, 320, 321, 322, 323,
	805, 807, 854, 0, 788, 0, 0, 0, 0, 324,
	326, 333, 0, 853, 327, 834, 792, 815, 816, 817,
	818, 835, 0, 793, 0, 334, 855, 856, 335, 336,
	337, 857, 819, 820, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 836, 858, 345, 346, 859, 0, 347,
	348, 0, 0, 349, 0, 350, 737, 736, 351, 352,
	354, 781, 353, 860, 356, 357, 359, 358, 732, 0,
	861, 765, 806, 360, 837, 361, 362, 0, 790, 791,
	0, 0, 365, 366, 0, 0, 367, 239, 862, 368,
	863, 838, 369, 370, 371, 372, 373, 374, 375, 0,
	376, 839, 377, 242, 378, 0, 379, 380, 381, 382,
	383, 840, 384, 385, 0, 386, 387, 388, 389, 390,
	0, 392, 393, 391, 394, 395, 396, 397, 0, 398,
	864, 399, 400, 401, 402, 741, 403, 0, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 782, 783,
	784, 785, 415, 421, 422, 801, 423, 404, 405, 424,
	865, 425, 841, 786, 427, 0, 437, 428, 429, 430,
	406, 431, 435, 821, 432, 433, 434, 842, 0, 438,
	439, 0, 440, 441, 442, 443, 444, 305, 445, 306,
	780, 447, 0, 843, 844, 822, 0, 0, 449, 450,
	845, 846, 763, 451, 452, 453, 454, 0, 0, 455,
	456, 457, 459, 802, 460, 0, 787, 461, 462, 463,
	251, 847, 0, 0, 464, 253, 0, 0, 0, 0,
	465, 466, 254, 467, 468, 469, 733, 0, 0, 0,
	0, 0, 0, 0, 731, 0, 0, 0, 0, 729,
	730, 0, 0, 0, 0, 0, 0, 0, 742, 0,
	0, 0, 0, 1870, 745, 769, 757, 758, 755, 756,
	746, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 257, 258, 0, 259, 0, 0, 0,
	0, 804, 749, 0, 0, 0, 260, 261, 262, 215,
	823, 789, 824, 777, 810, 825, 0, 266, 779, 778,
	269, 270, 271, 752, 803, 826, 827, 221, 0, 272,
	808, 0, 794, 0, 273, 274, 275, 276, 277, 0,
	279, 280, 281, 278, 0, 282, 0, 283, 284, 0,
	850, 285, 286, 287, 797, 795, 796, 800, 0, 798,
	799, 288, 289, 489, 290, 811, 292, 828, 829, 735,
	293, 0, 294, 0, 295, 0, 0, 812, 297, 0,
	298, 299, 0, 0, 0, 740, 303, 300, 301, 304,
	307, 302, 308, 309, 830, 831, 764, 851, 0, 0,
	0, 0, 0, 310, 311, 832, 813, 814, 0, 314,
	0, 315, 0, 0, 852, 316, 0, 317, 833, 0,
	230, 0, 318, 319, 320, 321, 322, 323, 805, 807,
	854, 0, 788, 0, 0, 0, 0, 324, 326, 333,
	0, 853, 327, 834, 792, 815, 816, 817, 818, 835,
	0, 793, 0, 334, 855, 856, 335, 336, 337, 857,
	819, 820, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 836, 858, 345, 346, 859, 0, 347, 348, 0,
	0, 349, 0, 350, 737, 736, 351, 352, 354, 781,
	353, 860, 356, 357, 359, 358, 732, 0, 861, 765,
	806, 360, 837, 361, 362, 0, 790, 791, 0, 0,
	365, 366, 0, 0, 367, 239, 862, 368, 863, 838,
	369, 370, 371, 372, 373, 374, 375, 0, 376, 839,
	377, 242, 378, 0, 379, 380, 381, 382, 383, 840,
	384, 385, 0, 386, 387, 388, 389, 390, 0, 392,
	393, 391, 394, 395, 396, 397, 0, 398, 864, 399,
	400, 401, 402, 741, 403, 0, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 782, 783, 784, 785,
	415, 421, 422, 801, 423, 404, 405, 424, 865, 425,
	841, 786, 427, 0, 437, 428, 429, 430, 406, 431,
	435, 821, 432, 433, 434, 842, 0, 438, 439, 0,
	440, 441, 442, 443, 444, 305, 445, 306, 780, 447,
	0, 843, 844, 822, 0, 0, 449, 450, 845, 846,
	763, 451, 452, 453, 454, 0, 0, 455, 456, 457,
	459, 802, 460, 0, 787, 461, 462, 463, 251, 847,
	0, 0, 464, 253, 0, 0, 0, 0, 465, 466,
	254, 467, 468, 469, 733, 0, 0, 0, 0, 0,
	0, 0, 731, 0, 0, 0, 0, 729, 730, 0,
	0, 0, 0, 0, 0, 0, 742, 0, 0, 0,
	0, 1858, 745, 769, 757, 758, 755, 756, 746, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 255,
	256, 257, 258, 0, 259, 0, 0, 0, 0, 804,
	749, 0, 0, 0, 260, 261, 262, 215, 823, 789,
	824, 777, 810, 825, 0, 266, 779, 778, 269, 270,
	271, 752, 803, 826, 827, 221, 0, 272, 808, 0,
	794, 0, 273, 274, 275, 276, 277, 0, 279, 280,
	281, 278, 0, 282, 0, 283, 284, 0, 850, 285,
	286, 287, 797, 795, 796, 800, 0, 798, 799, 288,
	289, 489, 290, 811, 292, 828, 829, 735, 293, 0,
	294, 0, 295, 0, 0, 812, 297, 0, 298, 299,
	0, 0, 0, 740, 303, 300, 301, 304, 307, 302,
	308, 309, 830, 831, 764, 851, 0, 0, 0, 0,
	0, 310, 311, 832, 813, 814, 0, 314, 0, 315,
	0, 0, 852, 316, 0, 317, 833, 0, 230, 0,
	318, 319, 320, 321, 322, 323, 805, 807, 854, 0,
	788, 0, 0, 0, 0, 324, 326, 333, 0, 853,
	327, 834, 792, 815, 816, 817, 818, 835, 0, 793,
	0, 334, 855, 856, 335, 336, 337, 857, 819, 820,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 836,
	858, 345, 346, 859, 0, 347, 348, 0, 0, 349,
	0, 350, 737, 736, 351, 352, 354, 781, 353, 860,
	356, 357, 359, 358, 732, 0, 861, 765, 806, 360,
	837, 361, 362, 0, 790, 791, 0, 0, 365, 366,
	0, 0, 367, 239, 862, 368, 863, 838, 369, 370,
	371, 372, 373, 374, 375, 0, 376, 839, 377, 242,
	378, 0, 379, 380, 381, 382, 383, 840, 384, 385,
	0, 386, 387, 388, 389, 390, 0, 392, 393, 391,
	394, 395, 396, 397, 0, 398, 864, 399, 400, 401,
	402, 741, 403, 0, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 782, 783, 784, 785, 415, 421,
	422, 801, 423, 404, 405, 424, 865, 425, 841, 786,
	427, 0, 437, 428, 429, 430, 406, 431, 435, 821,
	432, 433, 434, 842, 0, 438, 439, 0, 440, 441,
	442, 443, 444, 305, 445, 306, 780, 447, 0, 843,
	844, 822, 0, 0, 449, 450, 845, 846, 763, 451,
	452, 453, 454, 0, 0, 455, 456, 457, 459, 802,
	460, 0, 787, 461, 462, 463, 251, 847, 0, 0,
	464, 253, 0, 0, 0, 0, 465, 466, 254, 467,
	468, 469, 733, 0, 0, 0, 0, 0, 0, 0,
	731, 0, 0, 0, 0, 729, 730, 0, 0, 0,
	0, 0, 0, 0, 742, 0, 0, 0, 0, 1856,
	745, 769, 757, 758, 755, 756, 746, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 256, 257,
	258, 0, 259, 0, 0, 0, 0, 804, 749, 0,
	0, 0, 260, 261, 262, 215, 823, 789, 824, 777,
	810, 825, 0, 266, 779, 778, 269, 270, 271, 752,
	803, 826, 827, 221, 0, 272, 808, 0, 794, 0,
	273, 274, 275, 276, 277, 0, 279, 280, 281, 278,
	0, 282, 0, 283, 284, 0, 850, 285, 286, 287,
	797, 795, 796, 800, 0, 798, 799, 288, 289, 489,
	290, 811, 292, 828, 829, 735, 293, 0, 294, 0,
	295, 0, 0, 812, 297, 0, 298, 299, 0, 0,
	0, 740, 303, 300, 301, 304, 307, 302, 308, 309,
	830, 831, 764, 851, 0, 0, 0, 0, 0, 310,
	311, 832, 813, 814, 0, 314, 0, 315, 0, 0,
	852, 316, 0, 317, 833, 0, 230, 0, 318, 319,
	320, 321, 322, 323, 805, 807, 854, 0, 788, 0,
	0, 0, 0, 324, 326, 333, 0, 853, 327, 834,
	792, 815, 816, 817, 818, 835, 0, 793, 0, 334,
	855, 856, 335, 336, 337, 857, 819, 820, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 836, 858, 345,
	346, 859, 0, 347, 348, 0, 0, 349, 0, 350,
	737, 736, 351, 352, 354, 781, 353, 860, 356, 357,
	359, 358, 732, 0, 861, 765, 806, 360, 837, 361,
	362, 0, 790, 791, 0, 0, 365, 366, 0, 0,
	367, 239, 862, 368, 863, 838, 369, 370, 371, 372,
	373, 374, 375, 0, 376, 839, 377, 242, 378, 0,
	379, 380, 381, 382, 383, 840, 384, 385, 0, 386,
	387, 388, 389, 390, 0, 392, 393, 391, 394, 395,
	396, 397, 0, 398, 864, 399, 400, 401, 402, 741,
	403, 0, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 782, 783, 784, 785, 415, 421, 422, 801,
	423, 404, 405, 424, 865, 425, 841, 786, 427, 0,
	437, 428, 429, 430, 406, 431, 435, 821, 432, 433,
	434, 842, 0, 438, 439, 0, 440, 441, 442, 443,
	444, 305, 445, 306, 780, 447, 0, 843, 844, 822,
	0, 0, 449, 450, 845, 846, 763, 451, 452, 453,
	454, 0, 0, 455, 456, 457, 459, 802, 460, 0,
	787, 461, 462, 463, 251, 847, 0, 0, 464, 253,
	0, 0, 0, 0, 465, 466, 254, 467, 468, 469,
	733, 0, 0, 0, 0, 0, 0, 0, 731, 0,
	0, 0, 0, 729, 730, 0, 0, 0, 0, 0,
	0, 0, 742, 0, 0, 0, 0, 1854, 745, 769,
	757, 758, 755, 756, 746, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 256, 257, 258, 0,
	259, 0, 0, 0, 0, 804, 749, 0, 0, 0,
	260, 261, 262, 215, 823, 789, 824, 777, 810, 825,
	0, 266, 779, 778, 269, 270, 271, 752, 803, 826,
	827, 221, 0, 272, 808, 0, 794, 0, 273, 274,
	275, 276, 277, 0, 279, 280, 281, 278, 0, 282,
	0, 283, 284, 0, 850, 285, 286, 287, 797, 795,
	796, 800, 0, 798, 799, 288, 289, 489, 290, 811,
	292, 828, 829, 735, 293, 0, 294, 0, 295, 0,
	0, 812, 297, 0, 298, 299, 0, 0, 0, 740,
	303, 300, 301, 304, 307, 302, 308, 309, 830, 831,
	764, 851, 0, 0, 0, 0, 0, 310, 311, 832,
	813, 814, 0, 314, 0, 315, 0, 0, 852, 316,
	0, 317, 833, 0, 230, 0, 318, 319, 320, 321,
	322, 323, 805, 807, 854, 0, 788, 0, 0, 0,
	0, 324, 326, 333, 0, 853, 327, 834, 792, 815,
	816, 817, 818, 835, 0, 793, 0, 334, 855, 856,
	335, 336, 337, 857, 819, 820, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 836, 858, 345, 346, 859,
	0, 347, 348, 0, 0, 349, 0, 350, 737, 736,
	351, 352, 354, 781, 353, 860, 356, 357, 359, 358,
	732, 0, 861, 765, 806, 360, 837, 361, 362, 0,
	790, 791, 0, 0, 365, 366, 0, 0, 367, 239,
	862, 368, 863, 838, 369, 370, 371, 372, 373, 374,
	375, 0, 376, 839, 377, 242, 378, 0, 379, 380,
	381, 382, 383, 840, 384, 385, 0, 386, 387, 388,
	389, 390, 0, 392, 393, 391, 394, 395, 396, 397,
	0, 398, 864, 399, 400, 401, 402, 741, 403, 0,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	782, 783, 784, 785, 415, 421, 422, 801, 423, 404,
	405, 424, 865, 425, 841, 786, 427, 0, 437, 428,
	429, 430, 406, 431, 435, 821, 432, 433, 434, 842,
	0, 438, 439, 0, 440, 441, 442, 443, 444, 305,
	445, 306, 780, 447, 0, 843, 844, 822, 0, 0,
	449, 450, 845, 846, 763, 451, 452, 453, 454, 0,
	0, 455, 456, 457, 459, 802, 460, 0, 787, 461,
	462, 463, 251, 847, 0, 0, 464, 253, 0, 0,
	0, 0, 465, 466, 254, 467, 468, 469, 733, 0,
	0, 0, 0, 0, 0, 0, 731, 0, 0, 0,
	0, 729, 730, 0, 0, 0, 0, 0, 0, 0,
	742, 0, 0, 0, 0, 1851, 745, 1843, 757, 758,
	755, 756, 746, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 256, 257, 258, 0, 259, 0,
	0, 0, 0, 804, 749, 0, 0, 0, 260, 261,
	262, 215, 823, 789, 824, 777, 810, 825, 0, 266,
	779, 778, 269, 270, 271, 752, 803, 826, 827, 221,
	0, 272, 808, 0, 794, 0, 273, 274, 275, 276,
	277, 0, 279, 280, 281, 278, 0, 282, 0, 283,
	284, 0, 850, 285, 286, 287, 797, 795, 796, 800,
	0, 798, 799, 288, 289, 489, 290, 811, 1846, 828,
	829, 735, 293, 0, 294, 0, 295, 0, 0, 812,
	297, 0, 298, 299, 0, 0, 0, 740, 303, 300,
	301, 304, 307, 302, 308, 309, 830, 831, 764, 851,
	0, 0, 0, 0, 0, 310, 311, 832, 813, 814,
	0, 314, 0, 315, 0, 0, 852, 316, 0, 317,
	833, 0, 230, 0, 318, 319, 1847, 321, 322, 323,
	805, 807, 854, 0, 788, 0, 0, 0, 0, 324,
	326, 333, 0, 853, 327, 834, 792, 815, 816, 817,
	818, 835, 0, 793, 0, 334, 855, 856, 335, 336,
	337, 857, 819, 820, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 836, 858, 345, 346, 859, 0, 347,
	348, 0, 0, 349, 0, 350, 737, 736, 1848, 1845,
	354, 781, 353, 860, 356, 357, 359, 358, 732, 0,
	861, 765, 806, 360, 837, 361, 362, 0, 790, 791,
	0, 0, 365, 366, 0, 0, 367, 239, 862, 368,
	863, 838, 369, 370, 371, 372, 373, 374, 375, 0,
	376, 839, 377, 242, 378, 0, 379, 380, 381, 382,
	383, 840, 384, 385, 0, 386, 387, 388, 389, 390,
	0, 392, 393, 391, 394, 395, 396, 397, 0, 398,
	864, 399, 400, 401, 402, 741, 403, 0, 407, 408,
	409, 410, 411, 412, 1849, 0, 419, 420, 782, 783,
	784, 785, 415, 421, 422, 801, 423, 404, 405, 424,
	865, 425, 841, 786, 427, 0, 437, 428, 429, 430,
	406, 431, 435, 821, 432, 433, 434, 842, 0, 438,
	439, 0, 440, 441, 442, 443, 444, 305, 445, 306,
	780, 447, 0, 843, 844, 822, 0, 0, 449, 450,
	845, 846, 763, 451, 452, 453, 454, 0, 0, 455,
	456, 457, 459, 802, 460, 0, 787, 461, 462, 463,
	251, 847, 0, 0, 464, 253, 0, 0, 0, 0,
	465, 466, 254, 467, 1844, 469, 733, 0, 0, 0,
	0, 0, 0, 0, 731, 0, 0, 0, 0, 729,
	730, 0, 0, 0, 0, 0, 0, 0, 742, 0,
	0, 0, 0, 1840, 745, 1843, 757, 758, 755, 756,
	746, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 257, 258, 0, 259, 0, 0, 0,
	0, 804, 749, 0, 0, 0, 260, 261, 262, 215,
	823, 789, 824, 777, 810, 825, 0, 266, 779, 778,
	269, 270, 271, 752, 803, 826, 827, 221, 0, 272,
	808, 0, 794, 0, 273, 274, 275, 276, 277, 0,
	279, 280, 281, 278, 0, 282, 0, 283, 284, 0,
	850, 285, 286, 287, 797, 795, 796, 800, 0, 798,
	799, 288, 289, 489, 290, 811, 1846, 828, 829, 735,
	293, 0, 294, 0, 295, 0, 0, 812, 297, 0,
	298, 299, 0, 0, 0, 740, 303, 300, 301, 304,
	307, 302, 308, 309, 830, 831, 764, 851, 0, 0,
	0, 0, 0, 310, 311, 832, 813, 814, 0, 314,
	0, 315, 0, 0, 852, 316, 0, 317, 833, 0,
	230, 0, 318, 319, 1847, 321, 322, 323, 805, 807,
	854, 0, 788, 0, 0, 0, 0, 324, 326, 333,
	0, 853, 327, 834, 792, 815, 816, 817, 818, 835,
	0, 793, 0, 334, 855, 856, 335, 336, 337, 857,
	819, 820, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 836, 858, 345, 346, 859, 0, 347, 348, 0,
	0, 349, 0, 350, 737, 736, 1848, 1845, 354, 781,
	353, 860, 356, 357, 359, 358, 732, 0, 861, 765,
	806, 360, 837, 361, 362, 0, 790, 791, 0, 0,
	365, 366, 0, 0, 367, 239, 862, 368, 863, 838,
	369, 370, 371, 372, 373, 374, 375, 0, 376, 839,
	377, 242, 378, 0, 379, 380, 381, 382, 383, 840,
	384, 385, 0, 386, 387, 388, 389, 390, 0, 392,
	393, 391, 394, 395, 396, 397, 0, 398, 864, 399,
	400, 401, 402, 741, 403, 0, 407, 408, 409, 410,
	411, 412, 1849, 0, 419, 420, 782, 783, 784, 785,
	415, 421, 422, 801, 423, 404, 405, 424, 865, 425,
	841, 786, 427, 0, 437, 428, 429, 430, 406, 431,
	435, 821, 432, 433, 434, 842, 0, 438, 439, 0,
	440, 441, 442, 443, 444, 305, 445, 306, 780, 447,
	0, 843, 844, 822, 0, 0, 449, 450, 845, 846,
	763, 451, 452, 453, 454, 0, 0, 455, 456, 457,
	459, 802, 460, 0, 787, 461, 462, 463, 251, 847,
	0, 0, 464, 253, 0, 0, 0, 0, 465, 466,
	254, 467, 1844, 469, 733, 0, 0, 0, 0, 0,
	0, 0, 731, 0, 0, 0, 0, 729, 730, 769,
	757, 758, 755, 756, 746, 0, 742, 0, 0, 0,
	0, 0, 745, 0, 0, 255, 256, 257, 258, 0,
	259, 0, 0, 0, 0, 804, 749, 0, 0, 0,
	260, 261, 262, 215, 823, 789, 824, 777, 810, 825,
	0, 266, 779, 778, 269, 270, 271, 752, 803, 826,
	827, 221, 0, 272, 808, 0, 794, 0, 273, 274,
	275, 276, 277, 0, 279, 280, 281, 278, 0, 282,
	0, 283, 284, 0, 850, 285, 286, 287, 797, 795,
	796, 800, 0, 798, 799, 288, 289, 489, 290, 811,
	292, 828, 829, 735, 293, 0, 294, 0, 295, 0,
	0, 812, 297, 0, 298, 299, 0, 0, 0, 740,
	303, 300, 301, 304, 307, 302, 308, 309, 830, 831,
	764, 851, 0, 0, 0, 0, 0, 310, 311, 832,
	813, 814, 0, 314, 0, 315, 0, 0, 852, 316,
	0, 317, 833, 0, 230, 0, 318, 319, 320, 321,
	322, 323, 805, 807, 854, 0, 788, 0, 0, 0,
	0, 324, 326, 333, 0, 853, 327, 834, 792, 815,
	816, 817, 818, 835, 0, 793, 0, 334, 855, 856,
	335, 336, 337, 857, 819, 820, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 836, 858, 345, 346, 859,
	0, 347, 348, 0, 0, 349, 0, 350, 737, 736,
	351, 352, 354, 781, 353, 860, 356, 357, 359, 358,
	732, 0, 861, 765, 806, 360, 837, 361, 362, 0,
	790, 791, 0, 0, 365, 366, 0, 0, 367, 239,
	862, 368, 863, 838, 369, 370, 371, 372, 373, 374,
	375, 0, 376, 839, 377, 242, 378, 0, 379, 380,
	381, 382, 383, 840, 384, 385, 0, 386, 387, 388,
	389, 390, 0, 392, 393, 391, 394, 395, 396, 397,
	0, 398, 864, 399, 400, 401, 402, 741, 403, 0,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	782, 783, 784, 785, 415, 421, 422, 801, 423, 404,
	405, 424, 865, 425, 841, 786, 427, 0, 437, 428,
	429, 430, 406, 431, 435, 821, 432, 433, 434, 842,
	0, 438, 439, 0, 440, 441, 442, 443, 444, 305,
	445, 306, 780, 447, 0, 843, 844, 822, 0, 0,
	449, 450, 845, 846, 763, 451, 452, 453, 454, 0,
	0, 455, 456, 457, 459, 802, 460, 0, 787, 461,
	462, 463, 251, 847, 0, 0, 464, 253, 0, 0,
	0, 0, 465, 466, 254, 467, 468, 469, 733, 0,
	0, 0, 0, 0, 0, 0, 731, 0, 0, 0,
	0, 729, 730, 0, 0, 0, 0, 0, 1344, 0,
	742, 0, 0, 0, 0, 0, 745, 769, 757, 758,
	755, 756, 746, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 256, 257, 258, 1695, 259, 0,
	0, 0, 0, 804, 749, 0, 0, 0, 260, 261,
	262, 215, 823, 789, 824, 777, 810, 825, 0, 266,
	779, 778, 269, 270, 271, 752, 803, 826, 827, 221,
	0, 272, 808, 0, 794, 0, 273, 274, 275, 276,
	277, 0, 279, 280, 281, 278, 0, 282, 0, 283,
	284, 0, 850, 285, 286, 287, 797, 795, 796, 800,
	0, 798, 799, 288, 289, 489, 290, 811, 292, 828,
	829, 735, 293, 0, 294, 0, 295, 0, 0, 812,
	297, 0, 298, 299, 0, 0, 0, 740, 303, 300,
	301, 304, 307, 302, 308, 309, 830, 831, 764, 851,
	0, 0, 0, 0, 0, 310, 311, 832, 813, 814,
	0, 314, 0, 315, 0, 0, 852, 316, 0, 317,
	833, 0, 230, 0, 318, 319, 320, 321, 322, 323,
	805, 807, 854, 0, 788, 0, 0, 0, 0, 324,
	326, 333, 0, 853, 327, 834, 792, 815, 816, 817,
	818, 835, 0, 793, 0, 334, 855, 856, 335, 336,
	337, 857, 819, 820, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 836, 858, 345, 346, 859, 0, 347,
	348, 0, 0, 349, 0, 350, 737, 736, 351, 352,
	354, 781, 353, 860, 356, 357, 359, 358, 732, 0,
	861, 765, 806, 360, 837, 361, 362, 0, 790, 791,
	0, 0, 365, 366, 0, 0, 367, 239, 862, 368,
	863, 838, 369, 370, 371, 372, 373, 374, 375, 0,
	376, 839, 377, 242, 378, 0, 379, 380, 381, 382,
	383, 840, 384, 385, 0, 386, 387, 388, 389, 390,
	0, 392, 393, 391, 394, 395, 396, 397, 0, 398,
	864, 399, 400, 401, 402, 741, 403, 0, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 782, 783,
	784, 785, 415, 421, 422, 801, 423, 404, 405, 424,
	865, 425, 841, 786, 427, 0, 437, 428, 429, 430,
	406, 431, 435, 821, 432, 433, 434, 842, 0, 438,
	439, 0, 440, 441, 442, 443, 444, 305, 445, 306,
	780, 447, 0, 843, 844, 822, 0, 0, 449, 450,
	845, 846, 763, 451, 452, 453, 454, 0, 0, 455,
	456, 457, 459, 802, 460, 0, 787, 461, 462, 463,
	251, 847, 0, 0, 464, 253, 0, 0, 0, 0,
	465, 466, 254, 467, 468, 469, 733, 0, 0, 0,
	0, 0, 0, 0, 731, 0, 0, 0, 0, 729,
	730, 0, 0, 0, 0, 0, 0, 0, 742, 0,
	0, 0, 0, 1057, 745, 769, 757, 758, 755, 756,
	746, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 257, 258, 0, 259, 0, 0, 0,
	0, 804, 749, 0, 0, 0, 260, 261, 262, 215,
	823, 789, 824, 777, 810, 825, 0, 266, 779, 778,
	269, 270, 271, 752, 803, 826, 827, 221, 0, 272,
	808, 0, 794, 0, 273, 274, 275, 276, 277, 0,
	279, 280, 281, 278, 0, 282, 0, 283, 284, 0,
	850, 285, 286, 287, 797, 795, 796, 800, 0, 798,
	799, 288, 289, 489, 290, 811, 292, 828, 829, 735,
	293, 0, 294, 0, 295, 0, 0, 812, 297, 0,
	298, 299, 0, 0, 0, 740, 303, 300, 301, 304,
	307, 302, 308, 309, 830, 831, 764, 851, 0, 0,
	0, 0, 0, 310, 311, 832, 813, 814, 0, 314,
	0, 315, 0, 0, 852, 316, 0, 317, 833, 0,
	230, 0, 318, 319, 320, 321, 322, 323, 1056, 807,
	854, 0, 788, 0, 0, 0, 0, 324, 326, 333,
	0, 853, 327, 834, 792, 815, 816, 817, 818, 835,
	0, 793, 0, 334, 855, 856, 335, 336, 337, 857,
	819, 820, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 836, 858, 345, 346, 859, 0, 347, 348, 0,
	0, 349, 0, 350, 737, 736, 351, 352, 354, 781,
	353, 860, 356, 357, 359, 358, 732, 0, 861, 765,
	806, 360, 837, 361, 362, 0, 790, 791, 0, 0,
	365, 366, 0, 0, 367, 239, 862, 368, 863, 838,
	369, 370, 371, 372, 373, 374, 375, 0, 376, 839,
	377, 242, 378, 0, 379, 380, 381, 382, 383, 840,
	384, 385, 0, 386, 387, 388, 389, 390, 0, 392,
	393, 391, 394, 395, 396, 397, 0, 398, 864, 399,
	400, 401, 402, 741, 403, 0, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 782, 783, 784, 785,
	415, 421, 422, 801, 423, 404, 405, 424, 865, 425,
	841, 786, 427, 0, 437, 428, 429, 430, 406, 431,
	435, 821, 432, 433, 434, 842, 0, 438, 439, 0,
	440, 441, 442, 443, 444, 305, 445, 306, 780, 447,
	0, 843, 844, 822, 0, 0, 449, 450, 845, 846,
	763, 451, 452, 453, 454, 0, 0, 455, 456, 457,
	459, 802, 460, 0, 787, 461, 462, 463, 251, 847,
	0, 0, 464, 253, 0, 0, 0, 0, 465, 466,
	254, 467, 468, 469, 733, 0, 0, 0, 0, 0,
	0, 0, 731, 0, 0, 0, 0, 729, 730, 0,
	0, 0, 0, 0, 0, 0, 742, 0, 0, 0,
	0, 1054, 745, 769, 757, 758, 755, 756, 746, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 255,
	256, 257, 258, 0, 259, 0, 0, 0, 0, 804,
	749, 0, 0, 0, 260, 261, 262, 215, 823, 789,
	824, 777, 810, 825, 0, 266, 779, 778, 269, 270,
	271, 752, 803, 826, 827, 221, 0, 272, 808, 0,
	794, 0, 273, 274, 275, 276, 277, 0, 279, 280,
	281, 278, 0, 282, 0, 283, 284, 0, 850, 285,
	286, 287, 797, 795, 796, 800, 0, 798, 799, 288,
	289, 489, 290, 811, 292, 828, 829, 735, 293, 0,
	294, 0, 295, 0, 0, 812, 297, 0, 298, 299,
	0, 0, 0, 740, 303, 300, 301, 304, 307, 302,
	308, 309, 830, 831, 764, 851, 0, 0, 0, 0,
	0, 310, 311, 832, 813, 814, 0, 314, 0, 315,
	0, 0, 852, 316, 0, 317, 833, 0, 230, 0,
	318, 319, 320, 321, 322, 323, 1053, 807, 854, 0,
	788, 0, 0, 0, 0, 324, 326, 333, 0, 853,
	327, 834, 792, 815, 816, 817, 818, 835, 0, 793,
	0, 334, 855, 856, 335, 336, 337, 857, 819, 820,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 836,
	858, 345, 346, 859, 0, 347, 348, 0, 0, 349,
	0, 350, 737, 736, 351, 352, 354, 781, 353, 860,
	356, 357, 359, 358, 732, 0, 861, 765, 806, 360,
	837, 361, 362, 0, 790, 791, 0, 0, 365, 366,
	0, 0, 367, 239, 862, 368, 863, 838, 369, 370,
	371, 372, 373, 374, 375, 0, 376, 839, 377, 242,
	378, 0, 379, 380, 381, 382, 383, 840, 384, 385,
	0, 386, 387, 388, 389, 390, 0, 392, 393, 391,
	394, 395, 396, 397, 0, 398, 864, 399, 400, 401,
	402, 741, 403, 0, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 782, 783, 784, 785, 415, 421,
	422, 801, 423, 404, 405, 424, 865, 425, 841, 786,
	427, 0, 437, 428, 429, 430, 406, 431, 435, 821,
	432, 433, 434, 842, 0, 438, 439, 0, 440, 441,
	442, 443, 444, 305, 445, 306, 780, 447, 0, 843,
	844, 822, 0, 0, 449, 450, 845, 846, 763, 451,
	452, 453, 454, 0, 0, 455, 456, 457, 459, 802,
	460, 0, 787, 461, 462, 463, 251, 847, 0, 0,
	464, 253, 0, 0, 0, 0, 465, 466, 254, 467,
	468, 469, 733, 0, 0, 0, 0, 0, 0, 0,
	731, 0, 0, 0, 0, 729, 730, 0, 0, 0,
	0, 0, 0, 0, 742, 0, 0, 0, 0, 1051,
	745, 769, 757, 758, 755, 756, 746, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 256, 257,
	258, 0, 259, 0, 0, 0, 0, 804, 749, 0,
	0, 0, 260, 261, 262, 215, 823, 789, 824, 777,
	810, 825, 0, 266, 779, 778, 269, 270, 271, 752,
	803, 826, 827, 221, 0, 272, 808, 0, 794, 0,
	273, 274, 275, 276, 277, 0, 279, 280, 281, 278,
	0, 282, 0, 283, 284, 0, 850, 285, 286, 287,
	797, 795, 796, 800, 0, 798, 799, 288, 289, 489,
	290, 811, 292, 828, 829, 735, 293, 0, 294, 0,
	295, 0, 0, 812, 297, 0, 298, 299, 0, 0,
	0, 740, 303, 300, 301, 304, 307, 302, 308, 309,
	830, 831, 764, 851, 0, 0, 0, 0, 0, 310,
	311, 832, 813, 814, 0, 314, 0, 315, 0, 0,
	852, 316, 0, 317, 833, 0, 230, 0, 318, 319,
	320, 321, 322, 323, 805, 807, 854, 0, 788, 0,
	0, 0, 0, 324, 326, 333, 0, 853, 327, 834,
	792, 815, 816, 817, 818, 835, 0, 793, 0, 334,
	855, 856, 335, 336, 337, 857, 819, 820, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 836, 858, 345,
	346, 859, 0, 347, 348, 0, 0, 349, 0, 350,
	737, 736, 351, 352, 354, 781, 353, 860, 356, 357,
	359, 358, 732, 0, 861, 765, 806, 360, 837, 361,
	362, 0, 790, 791, 0, 0, 365, 366, 0, 0,
	367, 239, 862, 368, 863, 838, 369, 370, 371, 372,
	373, 374, 375, 0, 376, 839, 377, 242, 378, 0,
	379, 380, 381, 382, 383, 840, 384, 385, 0, 386,
	387, 388, 389, 390, 0, 392, 393, 391, 394, 395,
	396, 397, 0, 398, 864, 399, 400, 401, 402, 741,
	403, 0, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 782, 783, 784, 785, 415, 421, 422, 801,
	423, 404, 405, 424, 865, 425, 841, 786, 427, 0,
	437, 428, 429, 430, 406, 431, 435, 821, 432, 433,
	434, 842, 0, 438, 439, 0, 440, 441, 442, 443,
	444, 305, 445, 306, 780, 447, 0, 843, 844, 822,
	0, 0, 449, 450, 845, 846, 763, 451, 452, 453,
	454, 0, 0, 455, 456, 457, 459, 802, 460, 0,
	787, 461, 462, 463, 251, 847, 0, 0, 464, 253,
	0, 0, 0, 0, 465, 466, 254, 467, 468, 469,
	733, 0, 0, 0, 0, 0, 0, 0, 731, 0,
	0, 0, 0, 729, 730, 769, 757, 758, 755, 756,
	746, 0, 742, 0, 0, 0, 0, 0, 745, 0,
	0, 255, 256, 257, 258, 0, 259, 0, 0, 0,
	0, 804, 749, 0, 0, 0, 260, 261, 262, 215,
	823, 789, 824, 777, 810, 825, 0, 266, 779, 778,
	269, 270, 271, 752, 803, 826, 827, 221, 0, 272,
	808, 0, 794, 0, 273, 274, 275, 276, 277, 0,
	279, 280, 281, 278, 0, 282, 0, 283, 284, 0,
	850, 285, 286, 287, 797, 795, 796, 800, 0, 798,
	799, 288, 289, 489, 290, 811, 292, 828, 829, 735,
	293, 0, 294, 0, 295, 0, 0, 812, 297, 0,
	298, 299, 0, 0, 0, 740, 303, 300, 301, 304,
	307, 302, 308, 309, 830, 831, 764, 851, 0, 0,
	0, 0, 0, 310, 311, 832, 813, 814, 0, 314,
	0, 315, 0, 0, 852, 316, 0, 317, 833, 0,
	230, 0, 318, 319, 320, 321, 322, 323, 805, 807,
	854, 0, 788, 0, 0, 0, 0, 324, 326, 333,
	0, 853, 327, 834, 792, 815, 816, 817, 818, 835,
	0, 793, 0, 334, 855, 856, 335, 336, 337, 857,
	819, 820, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 836, 858, 345, 346, 859, 0, 347, 348, 0,
	0, 349, 0, 350, 737, 736, 351, 352, 354, 781,
	353, 860, 356, 357, 359, 358, 732, 0, 861, 765,
	806, 360, 837, 361, 362, 0, 790, 791, 0, 0,
	365, 366, 0, 0, 367, 239, 862, 368, 863, 838,
	369, 370, 371, 372, 373, 374, 375, 0, 376, 839,
	377, 242, 378, 0, 379, 380, 381, 382, 383, 840,
	384, 385, 0, 386, 387, 388, 389, 390, 0, 392,
	393, 391, 394, 395, 396, 397, 0, 398, 864, 399,
	400, 401, 402, 741, 403, 0, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 782, 783, 784, 785,
	415, 421, 422, 801, 423, 404, 405, 424, 865, 425,
	841, 786, 427, 0, 437, 428, 429, 430, 406, 431,
	435, 821, 432, 433, 434, 842, 0, 438, 439, 0,
	440, 441, 442, 443, 444, 305, 445, 306, 780, 447,
	0, 843, 844, 822, 0, 0, 449, 450, 845, 846,
	763, 451, 452, 453, 454, 0, 0, 455, 456, 457,
	459, 802, 460, 0, 787, 461, 462, 463, 251, 847,
	0, 0, 464, 253, 0, 0, 0, 0, 465, 466,
	254, 467, 468, 469, 733, 0, 0, 0, 0, 0,
	0, 0, 731, 0, 0, 0, 0, 729, 730, 769,
	757, 758, 755, 756, 746, 0, 742, 0, 0, 0,
	0, 0, 745, 0, 0, 255, 256, 257, 258, 0,
	259, 0, 0, 0, 0, 804, 749, 0, 0, 0,
	260, 261, 262, 215, 823, 789, 824, 777, 810, 825,
	0, 266, 779, 778, 269, 270, 271, 752, 803, 826,
	827, 221, 0, 272, 808, 0, 794, 0, 273, 274,
	275, 276, 277, 0, 279, 280, 281, 278, 0, 282,
	0, 283, 284, 0, 850, 285, 286, 3018, 797, 795,
	796, 800, 0, 798, 799, 288, 289, 489, 290, 811,
	292, 828, 829, 735, 293, 0, 294, 0, 295, 0,
	0, 812, 297, 0, 298, 299, 0, 0, 0, 740,
	303, 300, 301, 304, 307, 302, 308, 309, 830, 831,
	764, 851, 0, 0, 0, 0, 0, 310, 311, 832,
	813, 814, 0, 314, 0, 315, 0, 0, 852, 316,
	0, 317, 833, 0, 230, 0, 318, 319, 320, 321,
	322, 323, 805, 807, 854, 0, 788, 0, 0, 0,
	0, 324, 326, 333, 0, 853, 327, 834, 792, 815,
	816, 817, 818, 835, 0, 793, 0, 334, 855, 856,
	335, 336, 337, 857, 819, 820, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 836, 858, 345, 346, 859,
	0, 347, 348, 0, 0, 349, 0, 350, 737, 736,
	351, 352, 354, 781, 353, 860, 356, 357, 359, 358,
	732, 0, 861, 765, 806, 360, 837, 361, 362, 0,
	790, 791, 0, 0, 365, 366, 0, 0, 367, 239,
	862, 368, 863, 838, 369, 370, 371, 372, 373, 374,
	375, 0, 376, 839, 377, 242, 378, 0, 379, 380,
	381, 382, 383, 840, 384, 385, 0, 386, 387, 388,
	389, 390, 0, 392, 393, 391, 394, 395, 396, 397,
	0, 398, 864, 399, 400, 401, 402, 741, 403, 0,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	782, 783, 784, 785, 415, 421, 422, 801, 423, 404,
	405, 424, 865, 425, 841, 786, 427, 0, 437, 428,
	429, 430, 406, 431, 435, 821, 432, 433, 434, 842,
	0, 438, 439, 0, 440, 441, 442, 443, 444, 305,
	445, 306, 780, 447, 0, 843, 844, 822, 0, 0,
	449, 450, 845, 846, 763, 451, 452, 3017, 454, 0,
	0, 455, 456, 457, 459, 802, 460, 0, 787, 461,
	462, 463, 251, 847, 0, 0, 464, 253, 0, 0,
	0, 0, 465, 466, 254, 467, 468, 469, 733, 0,
	0, 0, 0, 0, 0, 0, 731, 0, 0, 0,
	0, 729, 730, 769, 757, 758, 755, 756, 746, 0,
	742, 0, 0, 0, 0, 0, 745, 0, 0, 255,
	256, 257, 258, 0, 259, 0, 0, 0, 0, 804,
	749, 0, 0, 0, 260, 261, 262, 3016, 823, 789,
	824, 777, 810, 825, 0, 266, 779, 778, 269, 270,
	271, 752, 803, 826, 827, 221, 0, 272, 808, 0,
	794, 0, 273, 274, 275, 276, 277, 0, 279, 280,
	281, 278, 0, 282, 0, 283, 284, 0, 850, 285,
	286, 3018, 797, 795, 796, 800, 0, 798, 799, 288,
	289, 489, 290, 811, 292, 828, 829, 735, 293, 0,
	294, 0, 295, 0, 0, 812, 297, 0, 298, 299,
	0, 0, 0, 740, 303, 300, 301, 304, 307, 302,
	308, 309, 830, 831, 764, 851, 0, 0, 0, 0,
	0, 310, 311, 832, 813, 814, 0, 314, 0, 315,
	0, 0, 852, 316, 0, 317, 833, 0, 230, 0,
	318, 319, 320, 321, 322, 323, 805, 807, 854, 0,
	788, 0, 0, 0, 0, 324, 326, 333, 0, 853,
	327, 834, 792, 815, 816, 817, 818, 835, 0, 793,
	0, 334, 855, 856, 335, 336, 337, 857, 819, 820,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 836,
	858, 345, 346, 859, 0, 347, 348, 0, 0, 349,
	0, 350, 737, 736, 351, 352, 354, 781, 353, 860,
	356, 357, 359, 358, 732, 0, 861, 765, 806, 360,
	837, 361, 362, 0, 790, 791, 0, 0, 365, 366,
	0, 0, 367, 239, 862, 368, 863, 838, 369, 370,
	371, 372, 373, 374, 375, 0, 376, 839, 377, 242,
	378, 0, 379, 380, 381, 382, 383, 840, 384, 385,
	0, 386, 387, 388, 389, 390, 0, 392, 393, 391,
	394, 395, 396, 397, 0, 398, 864, 399, 400, 401,
	402, 741, 403, 0, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 782, 783, 784, 785, 415, 421,
	422, 801, 423, 404, 405, 424, 865, 425, 841, 786,
	427, 0, 437, 428, 429, 430, 406, 431, 435, 821,
	432, 433, 434, 842, 0, 438, 439, 0, 440, 441,
	442, 443, 444, 305, 445, 306, 780, 447, 0, 843,
	844, 822, 0, 0, 449, 450, 845, 846, 763, 451,
	452, 3017, 454, 0, 0, 455, 456, 457, 459, 802,
	460, 0, 787, 461, 462, 463, 251, 847, 0, 0,
	464, 253, 0, 0, 0, 0, 465, 466, 254, 467,
	468, 469, 733, 0, 0, 0, 0, 0, 0, 0,
	731, 0, 0, 0, 0, 729, 730, 769, 757, 758,
	755, 756, 746, 0, 742, 0, 0, 0, 0, 0,
	745, 0, 0, 255, 256, 257, 258, 0, 259, 0,
	0, 0, 0, 804, 749, 0, 0, 0, 260, 261,
	262, 215, 823, 789, 824, 777, 810, 825, 0, 266,
	779, 778, 269, 270, 271, 752, 803, 826, 827, 221,
	0, 272, 808, 0, 794, 0, 273, 274, 275, 276,
	277, 0, 279, 280, 281, 278, 0, 282, 0, 283,
	284, 0, 850, 285, 286, 287, 797, 795, 796, 800,
	0, 798, 799, 288, 289, 489, 290, 811, 292, 828,
	829, 0, 293, 0, 294, 0, 295, 0, 0, 812,
	297, 0, 298, 299, 0, 0, 0, 740, 303, 300,
	301, 304, 307, 302, 308, 309, 830, 831, 764, 851,
	0, 0, 0, 0, 0, 310, 311, 832, 813, 814,
	0, 314, 0, 315, 0, 0, 852, 316, 0, 317,
	833, 0, 230, 0, 318, 319, 320, 321, 322, 323,
	805, 807, 854, 0, 788, 0, 0, 0, 0, 324,
	326, 333, 0, 853, 327, 834, 792, 815, 816, 817,
	818, 835, 0, 793, 0, 334, 855, 856, 335, 336,
	337, 857, 819, 820, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 836, 858, 345, 346, 859, 0, 347,
	348, 0, 0, 349, 0, 350, 920, 919, 351, 352,
	354, 781, 353, 860, 356, 357, 359, 358, 0, 0,
	861, 765, 806, 360, 837, 361, 362, 0, 790, 791,
	0, 0, 365, 366, 0, 0, 367, 239, 862, 368,
	863, 838, 369, 370, 371, 372, 373, 374, 375, 0,
	376, 839, 377, 242, 378, 0, 379, 380, 381, 382,
	383, 840, 384, 385, 0, 386, 387, 388, 389, 390,
	0, 392, 393, 391, 394, 395, 396, 397, 0, 398,
	864, 399, 400, 401, 402, 1868, 403, 0, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 782, 783,
	784, 785, 415, 421, 422, 801, 423, 404, 405, 424,
	865, 425, 841, 786, 427, 0, 437, 428, 429, 430,
	406, 431, 435, 821, 432, 433, 434, 842, 0, 438,
	439, 0, 440, 441, 442, 443, 444, 305, 445, 306,
	780, 447, 0, 843, 844, 822, 0, 0, 449, 450,
	845, 846, 763, 451, 452, 453, 454, 0, 0, 455,
	456, 457, 459, 802, 460, 0, 787, 461, 462, 463,
	251, 847, 0, 0, 464, 253, 0, 0, 0, 0,
	465, 466, 254, 467, 468, 469, 769, 757, 758, 755,
	756, 746, 0, 0, 1866, 0, 0, 0, 0, 1864,
	1865, 0, 255, 256, 257, 258, 0, 259, 1867, 0,
	0, 0, 804, 749, 745, 0, 0, 260, 261, 262,
	0, 823, 789, 824, 777, 810, 825, 0, 266, 779,
	778, 269, 270, 271, 752, 803, 826, 827, 221, 0,
	272, 808, 0, 794, 0, 273, 274, 275, 276, 277,
	0, 279, 280, 281, 278, 0, 282, 0, 283, 284,
	0, 850, 285, 286, 3018, 797, 795, 796, 800, 0,
	798, 799, 288, 289, 489, 290, 811, 292, 828, 829,
	735, 293, 0, 294, 0, 295, 0, 0, 812, 297,
	0, 298, 299, 0, 0, 0, 740, 303, 300, 301,
	304, 307, 302, 308, 309, 830, 831, 764, 851, 0,
	0, 0, 0, 0, 310, 311, 832, 813, 814, 0,
	314, 0, 315, 0, 0, 852, 316, 0, 317, 833,
	0, 230, 0, 318, 319, 320, 321, 322, 323, 805,
	807, 0, 0, 788, 0, 0, 0, 0, 324, 326,
	333, 0, 853, 327, 834, 792, 815, 816, 817, 818,
	835, 0, 793, 0, 334, 0, 0, 335, 336, 337,
	857, 819, 820, 0, 0, 340, 341, 342, 0, 344,
	343, 0, 836, 858, 345, 346, 0, 0, 347, 348,
	0, 0, 349, 0, 350, 737, 736, 351, 352, 354,
	781, 353, 860, 356, 357, 359, 358, 732, 0, 0,
	765, 806, 360, 837, 361, 362, 0, 790, 791, 0,
	0, 365, 366, 0, 0, 367, 239, 862, 368, 863,
	838, 369, 370, 371, 372, 373, 374, 375, 0, 376,
	839, 377, 242, 378, 0, 379, 380, 381, 382, 383,
	840, 384, 385, 0, 386, 387, 388, 389, 390, 0,
	392, 393, 391, 394, 395, 396, 397, 0, 398, 864,
	399, 400, 401, 402, 741, 403, 0, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 782, 783, 784,
	785, 415, 421, 422, 801, 423, 404, 405, 424, 0,
	425, 841, 786, 427, 0, 437, 428, 429, 430, 406,
	431, 435, 821, 432, 433, 434, 842, 0, 438, 439,
	0, 440, 441, 442, 443, 444, 305, 445, 306, 780,
	447, 0, 843, 844, 822, 0, 0, 449, 450, 845,
	846, 763, 451, 452, 3017, 454, 0, 0, 455, 456,
	457, 459, 802, 460, 0, 787, 461, 462, 463, 251,
	847, 0, 0, 464, 253, 0, 0, 0, 0, 465,
	466, 254, 467, 468, 469, 0, 0, 0, 0, 0,
	0, 717, 0, 916, 0, 0, 0, 0, 729, 730,
	0, 0, 0, 0, 0, 0, 0, 742, 0, 255,
	256, 257, 258, 745, 259, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 260, 261, 262, 215, 216, 263,
	217, 264, 265, 218, 0, 266, 267, 268, 269, 270,
	271, 0, 0, 219, 220, 221, 0, 272, 222, 0,
	918, 0, 273, 274, 275, 276, 277, 0, 279, 280,
	281, 278, 0, 282, 0, 283, 284, 0, 850, 285,
	286, 287, 0, 912, 913, 0, 0, 914, 915, 288,
	289, 489, 290, 291, 292, 223, 224, 0, 293, 0,
	294, 0, 295, 0, 0, 296, 297, 0, 298, 299,
	0, 0, 0, 225, 303, 300, 301, 304, 307, 302,
	308, 309, 830, 831, 0, 851, 0, 0, 0, 0,
	0, 310, 311, 228, 312, 313, 0, 314, 0, 315,
	0, 0, 852, 316, 0, 317, 833, 0, 230, 0,
	318, 319, 320, 321, 322, 323, 231, 232, 854, 0,
	325, 0, 0, 0, 0, 324, 326, 333, 0, 853,
	327, 233, 329, 328, 330, 331, 332, 234, 0, 235,
	0, 334, 855, 856, 335, 336, 337, 857, 338, 339,
	0, 0, 340, 341, 342, 904, 344, 343, 0, 836,
	858, 345, 346, 859, 0, 347, 348, 0, 0, 349,
	0, 350, 920, 919, 351, 352, 354, 355, 353, 860,
	356, 357, 359, 358, 0, 0, 861, 0, 237, 360,
	238, 361, 362, 0, 363, 364, 0, 910, 365, 366,
	0, 0, 367, 239, 862, 368, 863, 838, 369, 370,
	371, 372, 373, 374, 375, 0, 376, 839, 377, 242,
	378, 0, 379, 380, 381, 382, 383, 243, 384, 385,
	0, 386, 387, 388, 389, 390, 0, 392, 393, 391,
	394, 395, 396, 397, 0, 398, 864, 399, 400, 401,
	402, 244, 403, 0, 407, 408, 409, 410, 411, 412,
	413, 171, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 0, 423, 404, 405, 424, 865, 425, 245, 426,
	427, 0, 437, 428, 429, 430, 406, 431, 435, 436,
	432, 433, 434, 842, 0, 438, 439, 173, 440, 441,
	442, 443, 444, 305, 445, 306, 446, 447, 0, 247,
	248, 448, 0, 0, 449, 450, 845, 846, 0, 451,
	452, 453, 454, 0, 0, 455, 456, 457, 459, 0,
	460, 0, 458, 461, 462, 463, 1129, 252, 0, 0,
	464, 253, 0, 0, 916, 165, 465, 466, 254, 467,
	468, 469, 0, 166, 0, 0, 0, 0, 0, 0,
	255, 256, 257, 258, 0, 259, 0, 0, 0, 0,
	214, 0, 901, 0, 1428, 260, 261, 262, 215, 216,
	263, 217, 264, 265, 218, 0, 266, 267, 268, 269,
	270, 271, 0, 0, 219, 220, 221, 0, 272, 222,
	0, 918, 0, 273, 274, 275, 276, 277, 0, 279,
	280, 281, 278, 0, 282, 0, 283, 284, 0, 850,
	285, 286, 287, 0, 912, 913, 0, 0, 914, 915,
	288, 289, 489, 290, 291, 292, 223, 224, 0, 293,
	0, 294, 0, 295, 0, 0, 296, 297, 0, 298,
	299, 0, 0, 0, 225, 303, 300, 301, 304, 307,
	302, 308, 309, 830, 831, 0, 851, 0, 0, 0,
	0, 0, 310, 311, 228, 312, 313, 0, 314, 0,
	315, 0, 0, 852, 316, 0, 317, 833, 0, 230,
	0, 318, 319, 320, 321, 322, 323, 231, 232, 854,
	0, 325, 0, 0, 0, 0, 324, 326, 333, 0,
	853, 327, 233, 329, 328, 330, 331, 332, 234, 0,
	235, 0, 334, 855, 856, 335, 336, 337, 857, 338,
	339, 0, 0, 340, 341, 342, 904, 344, 343, 0,
	836, 858, 345, 346, 859, 0, 347, 348, 0, 0,
	349, 0, 350, 920, 919, 351, 352, 354, 355, 353,
	860, 356, 357, 359, 358, 0, 0, 861, 0, 237,
	360, 238, 361, 362, 0, 363, 364, 0, 910, 365,
	366, 0, 0, 367, 239, 862, 368, 863, 838, 369,
	370, 371, 372, 373, 374, 375, 0, 376, 839, 377,
	242, 378, 0, 379, 380, 381, 382, 383, 243, 384,
	385, 0, 386, 387, 388, 389, 390, 0, 392, 393,
	391, 394, 395, 396, 397, 0, 398, 864, 399, 400,
	401, 402, 244, 403, 0, 407, 408, 409, 410, 411,
	412, 413, 171, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 0, 423, 404, 405, 424, 865, 425, 245,
	426, 427, 0, 437, 428, 429, 430, 406, 431, 435,
	436, 432, 433, 434, 842, 0, 438, 439, 173, 440,
	441, 442, 443, 444, 305, 445, 306, 446, 447, 0,
	247, 248, 448, 0, 0, 449, 450, 845, 846, 0,
	451, 452, 453, 454, 0, 0, 455, 456, 457, 459,
	0, 460, 0, 458, 461, 462, 463, 1129, 252, 0,
	0, 464, 253, 0, 0, 916, 165, 465, 466, 254,
	467, 468, 469, 0, 166, 0, 0, 0, 0, 0,
	0, 255, 256, 257, 258, 0, 259, 0, 0, 0,
	0, 804, 0, 901, 0, 1428, 260, 261, 262, 215,
	216, 263, 217, 264, 265, 218, 0, 266, 267, 268,
	269, 270, 271, 0, 803, 219, 220, 221, 0, 272,
	808, 0, 794, 0, 273, 274, 275, 276, 277, 0,
	279, 280, 281, 278, 0, 282, 0, 283, 284, 0,
	850, 285, 286, 287, 797, 795, 796, 800, 0, 798,
	799, 288, 289, 489, 290, 291, 292, 223, 224, 0,
	293, 0, 294, 0, 295, 0, 0, 296, 297, 0,
	298, 299, 0, 0, 0, 225, 303, 300, 301, 304,
	307, 302, 308, 309, 830, 831, 0, 851, 0, 0,
	0, 0, 0, 310, 311, 228, 312, 313, 0, 314,
	0, 315, 0, 0, 852, 316, 0, 317, 833, 0,
	230, 0, 318, 319, 320, 321, 322, 323, 805, 807,
	854, 0, 325, 0, 0, 0, 0, 324, 326, 333,
	0, 853, 327, 233, 329, 328, 330, 331, 332, 234,
	0, 235, 0, 334, 855, 856, 335, 336, 337, 857,
	338, 339, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 836, 858, 345, 346, 859, 0, 347, 348, 0,
	0, 349, 0, 350, 920, 919, 351, 352, 354, 355,
	353, 860, 356, 357, 359, 358, 0, 0, 861, 0,
	806, 360, 238, 361, 362, 0, 363, 364, 0, 0,
	365, 366, 0, 0, 367, 239, 862, 368, 863, 838,
	369, 370, 371, 372, 373, 374, 375, 0, 376, 839,
	377, 242, 378, 0, 379, 380, 381, 382, 383, 243,
	384, 385, 0, 386, 387, 388, 389, 390, 0, 392,
	393, 391, 394, 395, 396, 397, 0, 398, 864, 399,
	400, 401, 402, 244, 403, 0, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 801, 423, 404, 405, 424, 865, 425,
	245, 426, 427, 0, 437, 428, 429, 430, 406, 431,
	435, 436, 432, 433, 434, 842, 0, 438, 439, 0,
	440, 441, 442, 443, 444, 305, 445, 306, 446, 447,
	0, 247, 248, 448, 0, 0, 449, 450, 845, 846,
	0, 451, 452, 453, 454, 0, 0, 455, 456, 457,
	459, 802, 460, 0, 458, 461, 462, 463, 251, 252,
	0, 0, 464, 253, 2249, 0, 916, 0, 465, 466,
	254, 467, 468, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 256, 257, 258, 0, 259, 0, 0,
	0, 0, 214, 0, 0, 0, 2568, 260, 261, 262,
	215, 216, 263, 217, 264, 265, 218, 0, 266, 267,
	268, 269, 270, 271, 0, 0, 219, 220, 221, 0,
	272, 222, 0, 918, 0, 273, 274, 275, 276, 277,
	0, 279, 280, 281, 278, 0, 282, 0, 283, 284,
	0, 850, 285, 286, 287, 0, 912, 913, 0, 0,
	914, 915, 288, 289, 489, 290, 291, 292, 223, 224,
	0, 293, 0, 294, 0, 295, 0, 0, 296, 297,
	0, 298, 299, 0, 0, 0, 225, 303, 300, 301,
	304, 307, 302, 308, 309, 830, 831, 0, 851, 0,
	0, 0, 0, 0, 310, 311, 228, 312, 313, 0,
	314, 0, 315, 0, 0, 852, 316, 0, 317, 833,
	0, 230, 0, 318, 319, 320, 321, 322, 323, 231,
	232, 854, 0, 325, 0, 0, 0, 0, 324, 326,
	333, 0, 853, 327, 233, 329, 328, 330, 331, 332,
	234, 0, 235, 0, 334, 855, 856, 335, 336, 337,
	857, 338, 339, 0, 0, 340, 341, 342, 904, 344,
	343, 0, 836, 858, 345, 346, 859, 0, 347, 348,
	0, 0, 349, 0, 350, 920, 919, 351, 352, 354,
	355, 353, 860, 356, 357, 359, 358, 0, 0, 861,
	0, 237, 360, 238, 361, 362, 0, 363, 364, 0,
	910, 365, 366, 0, 0, 367, 239, 862, 368, 863,
	838, 369, 370, 371, 372, 373, 374, 375, 0, 376,
	839, 377, 242, 378, 0, 379, 380, 381, 382, 383,
	243, 384, 385, 0, 386, 387, 388, 389, 390, 0,
	392, 393, 391, 394, 395, 396, 397, 0, 398, 864,
	399, 400, 401, 402, 244, 403, 0, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 0, 423, 404, 405, 424, 865,
	425, 245, 426, 427, 0, 437, 428, 429, 430, 406,
	431, 435, 436, 432, 433, 434, 842, 0, 438, 439,
	0, 440, 441, 442, 443, 444, 305, 445, 306, 446,
	447, 0, 247, 248, 448, 0, 0, 449, 450, 845,
	846, 0, 451, 452, 453, 454, 0, 0, 455, 456,
	457, 459, 0, 460, 0, 458, 461, 462, 463, 251,
	252, 0, 0, 464, 253, 900, 0, 916, 0, 465,
	466, 254, 467, 468, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 256, 257, 258, 0, 259, 0,
	0, 0, 0, 214, 0, 901, 0, 908, 260, 261,
	262, 215, 216, 263, 217, 264, 265, 218, 0, 266,
	267, 268, 269, 270, 271, 0, 0, 219, 220, 221,
	0, 272, 222, 0, 918, 0, 273, 274, 275, 276,
	277, 0, 279, 280, 281, 278, 0, 282, 0, 283,
	284, 0, 850, 285, 286, 287, 0, 912, 913, 0,
	0, 914, 915, 288, 289, 489, 290, 291, 292, 223,
	224, 0, 293, 0, 294, 0, 295, 0, 0, 296,
	297, 0, 298, 299, 0, 0, 0, 225, 303, 300,
	301, 304, 307, 302, 308, 309, 830, 831, 0, 851,
	0, 0, 0, 0, 0, 310, 311, 228, 312, 313,
	0, 314, 0, 315, 0, 0, 852, 316, 0, 317,
	833, 0, 230, 0, 318, 319, 320, 321, 322, 323,
	231, 232, 854, 0, 325, 0, 0, 0, 0, 324,
	326, 333, 0, 853, 327, 233, 329, 328, 330, 331,
	332, 234, 0, 235, 0, 334, 855, 856, 335, 336,
	337, 857, 338, 339, 0, 0, 340, 341, 342, 904,
	344, 343, 0, 836, 858, 345, 346, 859, 0, 347,
	348, 0, 0, 349, 0, 350, 920, 919, 351, 352,
	354, 355, 353, 860, 356, 357, 359, 358, 0, 0,
	861, 0, 237, 360, 238, 361, 362, 0, 363, 364,
	0, 910, 365, 366, 0, 0, 367, 239, 862, 368,
	863, 838, 369, 370, 371, 372, 373, 374, 375, 0,
	376, 839, 377, 242, 378, 0, 379, 380, 381, 382,
	383, 243, 384, 385, 0, 386, 387, 388, 389, 390,
	0, 392, 393, 391, 394, 395, 396, 397, 0, 398,
	864, 399, 400, 401, 402, 244, 403, 0, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 0, 423, 404, 405, 424,
	865, 425, 245, 426, 427, 0, 437, 428, 429, 430,
	406, 431, 435, 436, 432, 433, 434, 842, 0, 438,
	439, 0, 440, 441, 442, 443, 444, 305, 445, 306,
	446, 447, 0, 247, 248, 448, 0, 0, 449, 450,
	845, 846, 0, 451, 452, 453, 454, 0, 0, 455,
	456, 457, 459, 0, 460, 0, 458, 461, 462, 463,
	251, 252, 0, 0, 464, 253, 0, 0, 916, 0,
	465, 466, 254, 467, 468, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 256, 257, 258, 0, 259,
	0, 0, 0, 0, 214, 0, 901, 0, 908, 260,
	261, 262, 215, 216, 263, 217, 264, 265, 218, 0,
	266, 267, 268, 269, 270, 271, 0, 0, 219, 220,
	221, 0, 272, 222, 0, 918, 0, 273, 274, 275,
	276, 277, 0, 279, 280, 281, 278, 0, 282, 0,
	283, 284, 0, 850, 285, 286, 287, 0, 912, 913,
	0, 0, 914, 915, 288, 289, 489, 290, 291, 292,
	223, 224, 0, 293, 0, 294, 0, 295, 0, 0,
	296, 297, 0, 298, 299, 0, 0, 0, 225, 303,
	300, 301, 304, 307, 302, 308, 309, 830, 831, 0,
	851, 0, 0, 0, 0, 0, 310, 311, 228, 312,
	313, 0, 314, 0, 315, 0, 0, 852, 316, 0,
	317, 833, 0, 230, 0, 318, 319, 320, 321, 322,
	323, 231, 232, 854, 0, 325, 0, 0, 0, 0,
	324, 326, 333, 0, 853, 327, 233, 329, 328, 330,
	331, 332, 234, 0, 235, 0, 334, 855, 856, 335,
	336, 337, 857, 338, 339, 0, 0, 340, 341, 342,
	904, 344, 343, 0, 836, 858, 345, 346, 859, 0,
	347, 348, 0, 0, 349, 0, 350, 920, 919, 351,
	352, 354, 355, 353, 860, 356, 357, 359, 358, 0,
	0, 861, 0, 237, 360, 238, 361, 362, 0, 363,
	364, 0, 910, 365, 366, 0, 0, 367, 239, 862,
	368, 863, 838, 369, 370, 371, 372, 373, 374, 375,
	0, 376, 839, 377, 242, 378, 0, 379, 380, 381,
	382, 383, 243, 384, 385, 0, 386, 387, 388, 389,
	390, 0, 392, 393, 391, 394, 395, 396, 397, 0,
	398, 864, 399, 400, 401, 402, 244, 403, 0, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 0, 423, 404, 405,
	424, 865, 425, 245, 426, 427, 0, 437, 428, 429,
	430, 406, 431, 435, 436, 432, 433, 434, 842, 0,
	438, 439, 0, 440, 441, 442, 443, 444, 305, 445,
	306, 446, 447, 0, 247, 248, 448, 0, 0, 449,
	450, 845, 846, 0, 451, 452, 453, 454, 0, 0,
	455, 456, 457, 459, 0, 460, 0, 458, 461, 462,
	463, 251, 252, 0, 0, 464, 253, 1126, 0, 941,
	0, 465, 466, 254, 467, 468, 469, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 256, 257, 258, 0,
	259, 0, 0, 0, 0, 214, 0, 901, 0, 908,
	260, 261, 262, 215, 216, 263, 217, 264, 265, 218,
	0, 266, 267, 268, 269, 270, 271, 0, 0, 219,
	220, 221, 0, 272, 222, 0, 918, 0, 273, 274,
	275, 276, 277, 0, 279, 280, 281, 278, 0, 282,
	0, 283, 284, 0, 850, 285, 286, 287, 0, 0,
	0, 0, 0, 0, 0, 288, 289, 489, 290, 291,
	292, 223, 224, 0, 293, 0, 294, 0, 295, 0,
	0, 296, 297, 0, 298, 299, 0, 0, 0, 225,
	303, 300, 301, 304, 307, 302, 308, 309, 226, 227,
	0, 851, 0, 0, 0, 0, 0, 310, 311, 228,
	312, 313, 0, 314, 0, 315, 0, 0, 852, 316,
	0, 317, 229, 0, 230, 0, 318, 319, 320, 321,
	322, 323, 231, 232, 854, 0, 325, 0, 0, 0,
	0, 324, 326, 333, 0, 853, 327, 233, 329, 328,
	330, 331, 332, 234, 0, 235, 0, 334, 855, 856,
	335, 336, 337, 857, 338, 339, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 236, 858, 345, 346, 859,
	0, 347, 348, 0, 0, 349, 0, 350, 920, 919,
	351, 352, 354, 355, 353, 860, 356, 357, 359, 358,
	0, 0, 861, 0, 237, 360, 238, 361, 362, 0,
	363, 364, 0, 0, 365, 366, 0, 0, 367, 239,
	862, 368, 863, 240, 369, 370, 371, 372, 373, 374,
	375, 0, 376, 241, 377, 242, 378, 0, 379, 380,
	381, 382, 383, 243, 384, 385, 0, 386, 387, 388,
	389, 390, 0, 392, 393, 391, 394, 395, 396, 397,
	0, 398, 864, 399, 400, 401, 402, 244, 403, 0,
	407, 408, 409, 410, 411, 412, 413, 171, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 0, 423, 404,
	405, 424, 865, 425, 245, 426, 427, 0, 437, 428,
	429, 430, 406, 431, 435, 436, 432, 433, 434, 246,
	0, 438, 439, 173, 440, 441, 442, 443, 444, 305,
	445, 306, 446, 447, 0, 247, 248, 448, 0, 0,
	449, 450, 249, 250, 0, 451, 452, 453, 454, 0,
	0, 455, 456, 457, 459, 0, 460, 0, 458, 461,
	462, 463, 1129, 252, 0, 0, 464, 253, 0, 0,
	916, 165, 465, 466, 254, 467, 468, 469, 0, 166,
	0, 0, 0, 0, 0, 0, 255, 256, 257, 258,
	0, 259, 0, 0, 0, 0, 214, 0, 0, 0,
	138, 260, 261, 262, 215, 216, 263, 217, 264, 265,
	218, 0, 266, 267, 268, 269, 270, 271, 0, 0,
	219, 220, 221, 0, 272, 222, 0, 918, 0, 273,
	274, 275, 276, 277, 0, 279, 280, 281, 278, 0,
	282, 0, 283, 284, 0, 850, 285, 286, 287, 0,
	912, 913, 0, 0, 914, 915, 288, 289, 489, 290,
	291, 292, 223, 224, 0, 293, 0, 294, 0, 295,
	0, 0, 296, 297, 0, 298, 299, 0, 0, 0,
	225, 303, 300, 301, 304, 307, 302, 308, 309, 830,
	831, 0, 851, 0, 0, 0, 0, 0, 310, 311,
	228, 312, 313, 0, 314, 0, 315, 0, 0, 852,
	316, 0, 317, 833, 0, 230, 0, 318, 319, 320,
	321, 322, 323, 231, 232, 854, 0, 325, 0, 0,
	0, 0, 324, 326, 333, 0, 853, 327, 233, 329,
	328, 330, 331, 332, 234, 0, 235, 0, 334, 855,
	856, 335, 336, 337, 857, 338, 339, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 836, 858, 345, 346,
	859, 0, 347, 348, 0, 0, 349, 0, 350, 920,
	919, 351, 352, 354, 355, 353, 860, 356, 357, 359,
	358, 0, 0, 861, 0, 237, 360, 238, 361, 362,
	0, 363, 364, 0, 0, 365, 366, 0, 0, 367,
	239, 862, 368, 863, 838, 369, 370, 371, 372, 373,
	374, 375, 0, 376, 839, 377, 242, 378, 0, 379,
	380, 381, 382, 383, 243, 384, 385, 0, 386, 387,
	388, 389, 390, 0, 392, 393, 391, 394, 395, 396,
	397, 0, 398, 864, 399, 400, 401, 402, 244, 403,
	0, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 0, 423,
	404, 405, 424, 865, 425, 245, 426, 427, 0, 437,
	428, 429, 430, 406, 431, 435, 436, 432, 433, 434,
	842, 0, 438, 439, 0, 440, 441, 442, 443, 444,
	305, 445, 306, 446, 447, 0, 247, 248, 448, 0,
	0, 449, 450, 845, 846, 0, 451, 452, 453, 454,
	0, 0, 455, 456, 457, 459, 0, 460, 0, 458,
	461, 462, 463, 251, 252, 0, 0, 464, 253, 717,
	0, 486, 0, 465, 466, 254, 467, 468, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 256, 257,
	258, 0, 259, 0, 0, 0, 0, 214, 0, 0,
	0, 1334, 260, 261, 262, 215, 216, 263, 217, 264,
	265, 218, 0, 266, 267, 268, 269, 270, 271, 0,
	0, 219, 220, 221, 0, 272, 222, 0, 0, 0,
	273, 274, 275, 276, 277, 0, 279, 280, 281, 278,
	0, 282, 0, 283, 284, 0, 0, 285, 286, 287,
	0, 0, 0, 0, 0, 0, 0, 288, 289, 489,
	290, 291, 292, 223, 224, 0, 293, 0, 294, 0,
	295, 0, 0, 296, 297, 0, 298, 299, 0, 0,
	0, 225, 303, 300, 301, 304, 307, 302, 308, 309,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 310,
	311, 228, 312, 313, 0, 314, 0, 315, 0, 0,
	0, 316, 0, 317, 229, 0, 230, 0, 318, 319,
	320, 321, 322, 323, 231, 232, 0, 0, 325, 0,
	0, 0, 0, 324, 326, 333, 0, 0, 327, 233,
	329, 328, 330, 331, 332, 234, 0, 235, 0, 334,
	0, 0, 335, 336, 337, 0, 338, 339, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 236, 0, 345,
	346, 0, 0, 347, 348, 0, 0, 349, 0, 350,
	0, 0, 351, 352, 354, 355, 353, 0, 356, 357,
	359, 358, 0, 0, 0, 0, 237, 360, 238, 361,
	362, 0, 363, 364, 0, 0, 365, 366, 0, 0,
	367, 239, 0, 368, 0, 240, 369, 370, 371, 372,
	373, 374, 375, 0, 376, 241, 377, 242, 378, 0,
	379, 380, 381, 382, 383, 243, 384, 385, 0, 386,
	387, 388, 389, 390, 0, 392, 393, 391, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 244,
	403, 0, 407, 408, 409, 410, 411, 412, 413, 171,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 0,
	423, 404, 405, 424, 0, 425, 245, 426, 427, 0,
	437, 428, 429, 430, 406, 431, 435, 436, 432, 433,
	434, 246, 0, 438, 439, 173, 440, 441, 442, 443,
	444, 305, 445, 306, 446, 447, 0, 247, 248, 448,
	0, 0, 449, 450, 249, 250, 0, 451, 452, 453,
	454, 0, 0, 455, 456, 457, 459, 0, 460, 0,
	458, 461, 462, 463, 1129, 252, 0, 0, 464, 253,
	0, 0, 0, 165, 465, 466, 254, 467, 468, 469,
	0, 166, 769, 757, 758, 755, 756, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 255, 256,
	257, 258, 138, 259, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 260, 261, 262, 215, 823, 789, 824,
	777, 810, 825, 0, 266, 779, 778, 269, 270, 271,
	0, 0, 826, 827, 221, 0, 272, 222, 0, 918,
	0, 273, 274, 275, 276, 277, 0, 279, 280, 281,
	278, 0, 282, 0, 283, 284, 0, 850, 285, 286,
	287, 0, 0, 0, 0, 0, 0, 0, 288, 289,
	489, 290, 811, 292, 828, 829, 0, 293, 0, 294,
	0, 295, 0, 0, 812, 297, 0, 298, 299, 0,
	0, 0, 225, 303, 300, 301, 304, 307, 302, 308,
	309, 226, 227, 764, 851, 0, 0, 0, 0, 0,
	310, 311, 832, 813, 814, 0, 314, 0, 315, 0,
	0, 852, 316, 0, 317, 229, 0, 230, 0, 318,
	319, 320, 321, 322, 323, 231, 232, 854, 0, 788,
	0, 0, 0, 0, 324, 326, 333, 0, 853, 327,
	834, 792, 815, 816, 817, 818, 835, 0, 793, 0,
	334, 855, 856, 335, 336, 337, 857, 819, 820, 0,
	0, 340, 341, 342, 0, 344, 343, 0, 236, 858,
	345, 346, 859, 0, 347, 348, 0, 0, 349, 0,
	350, 920, 919, 351, 352, 354, 781, 353, 860, 356,
	357, 359, 358, 0, 0, 861, 765, 237, 360, 837,
	361, 362, 0, 790, 791, 0, 0, 365, 366, 0,
	0, 367, 239, 862, 368, 863, 240, 369, 370, 371,
	372, 373, 374, 375, 0, 376, 241, 377, 242, 378,
	0, 379, 380, 381, 382, 383, 840, 384, 385, 0,
	386, 387, 388, 389, 390, 0, 392, 393, 391, 394,
	395, 396, 397, 0, 398, 864, 399, 400, 401, 402,
	244, 403, 0, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 782, 783, 784, 785, 415, 421, 422,
	0, 423, 404, 405, 424, 865, 425, 841, 786, 427,
	0, 437, 428, 429, 430, 406, 431, 435, 821, 432,
	433, 434, 246, 0, 438, 439, 0, 440, 441, 442,
	443, 444, 305, 445, 306, 780, 447, 0, 843, 844,
	822, 0, 0, 449, 450, 249, 250, 763, 451, 452,
	453, 454, 0, 0, 455, 456, 457, 459, 0, 460,
	0, 787, 461, 462, 463, 251, 847, 486, 0, 464,
	253, 0, 0, 0, 0, 465, 466, 254, 467, 468,
	469, 0, 0, 255, 256, 257, 258, 0, 259, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 260, 261,
	262, 215, 216, 263, 217, 264, 265, 218, 0, 266,
	267, 268, 269, 270, 271, 0, 0, 219, 220, 221,
	0, 272, 222, 0, 0, 0, 273, 274, 275, 276,
	277, 0, 279, 280, 281, 278, 0, 282, 0, 283,
	284, 0, 0, 285, 286, 287, 0, 0, 0, 0,
	0, 0, 0, 288, 289, 489, 290, 291, 292, 223,
	224, 0, 293, 0, 294, 0, 295, 0, 0, 296,
	297, 0, 298, 299, 0, 0, 0, 225, 303, 300,
	301, 304, 307, 302, 308, 309, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 228, 312, 313,
	0, 314, 0, 315, 0, 0, 0, 316, 0, 317,
	229, 0, 230, 0, 318, 319, 320, 321, 322, 323,
	231, 232, 0, 0, 325, 0, 0, 0, 0, 324,
	326, 333, 0, 0, 327, 233, 329, 328, 330, 331,
	332, 234, 0, 235, 0, 334, 0, 0, 335, 336,
	337, 0, 338, 339, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 236, 0, 345, 346, 0, 0, 347,
	348, 0, 0, 349, 0, 350, 0, 0, 351, 352,
	354, 355, 353, 0, 356, 357, 359, 358, 0, 0,
	0, 0, 237, 360, 238, 361, 362, 0, 363, 364,
	0, 0, 365, 366, 0, 0, 367, 239, 0, 368,
	0, 240, 369, 370, 371, 372, 373, 374, 375, 0,
	376, 241, 377, 242, 378, 0, 379, 380, 381, 382,
	383, 243, 384, 385, 0, 386, 387, 388, 389, 390,
	0, 392, 393, 391, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 244, 403, 0, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 0, 423, 404, 405, 424,
	0, 425, 245, 426, 427, 0, 437, 428, 429, 430,
	406, 431, 435, 436, 432, 433, 434, 246, 0, 438,
	439, 0, 440, 441, 442, 443, 444, 305, 445, 306,
	446, 447, 0, 247, 248, 448, 0, 0, 449, 450,
	249, 250, 0, 451, 452, 453, 454, 0, 0, 455,
	456, 457, 459, 0, 460, 0, 458, 461, 462, 463,
	251, 252, 0, 0, 464, 253, 0, 0, 486, 0,
	465, 466, 254, 467, 468, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 256, 257, 258, 0, 259,
	0, 0, 0, 0, 214, 0, 0, 0, 2048, 260,
	261, 262, 215, 216, 263, 217, 264, 265, 218, 0,
	266, 267, 268, 269, 270, 271, 0, 0, 219, 220,
	221, 0, 272, 222, 0, 0, 0, 273, 274, 275,
	276, 277, 0, 279, 280, 281, 278, 0, 282, 0,
	283, 284, 0, 0, 285, 286, 287, 0, 0, 0,
	0, 0, 0, 0, 288, 289, 489, 290, 291, 292,
	223, 224, 0, 293, 0, 294, 0, 295, 0, 0,
	296, 297, 0, 298, 299, 0, 0, 0, 225, 303,
	300, 301, 304, 307, 302, 308, 309, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 310, 311, 228, 312,
	313, 0, 314, 0, 315, 0, 0, 0, 316, 0,
	317, 229, 0, 230, 0, 318, 319, 320, 321, 322,
	323, 231, 232, 0, 0, 325, 0, 0, 0, 0,
	324, 326, 333, 0, 0, 327, 233, 329, 328, 330,
	331, 332, 234, 0, 235, 0, 334, 0, 0, 335,
	336, 337, 0, 338, 339, 0, 0, 340, 341, 342,
	0, 344, 343, 0, 236, 0, 345, 346, 0, 0,
	347, 348, 0, 0, 349, 0, 350, 0, 0, 351,
	352, 354, 355, 353, 0, 356, 357, 359, 358, 0,
	0, 0, 0, 237, 360, 238, 361, 362, 0, 363,
	364, 0, 0, 365, 366, 0, 0, 367, 239, 0,
	368, 0, 240, 369, 370, 371, 372, 373, 374, 375,
	0, 376, 241, 377, 242, 378, 0, 379, 380, 381,
	382, 383, 243, 384, 385, 0, 386, 387, 388, 389,
	390, 0, 392, 393, 391, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 244, 403, 0, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 0, 423, 404, 405,
	424, 0, 425, 245, 426, 427, 0, 437, 428, 429,
	430, 406, 431, 435, 436, 432, 433, 434, 246, 0,
	438, 439, 0, 440, 441, 442, 443, 444, 305, 445,
	306, 446, 447, 0, 247, 248, 448, 0, 0, 449,
	450, 249, 250, 0, 451, 452, 453, 454, 0, 0,
	455, 456, 457, 459, 0, 460, 0, 458, 461, 462,
	463, 251, 252, 0, 0, 464, 253, 0, 0, 486,
	0, 465, 466, 254, 467, 468, 469, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 256, 257, 258, 0,
	259, 0, 0, 0, 0, 214, 0, 0, 0, 2480,
	260, 261, 262, 215, 216, 263, 217, 264, 265, 218,
	0, 266, 267, 268, 269, 270, 271, 0, 0, 219,
	220, 221, 0, 272, 222, 0, 0, 0, 273, 274,
	275, 276, 277, 0, 279, 280, 281, 278, 0, 282,
	0, 283, 284, 0, 0, 285, 286, 287, 0, 0,
	0, 0, 0, 0, 0, 288, 289, 489, 290, 291,
	292, 223, 224, 0, 293, 0, 294, 0, 295, 0,
	0, 296, 297, 0, 298, 299, 0, 0, 0, 225,
	303, 300, 301, 304, 307, 302, 308, 309, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 310, 311, 228,
	312, 313, 0, 314, 0, 315, 0, 0, 0, 316,
	0, 317, 229, 0, 230, 0, 318, 319, 320, 321,
	322, 323, 231, 232, 0, 0, 325, 0, 0, 0,
	0, 324, 326, 333, 0, 0, 327, 233, 329, 328,
	330, 331, 332, 234, 0, 235, 0, 334, 0, 0,
	335, 336, 337, 0, 338, 339, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 236, 0, 345, 346, 0,
	0, 347, 348, 0, 0, 349, 0, 350, 0, 0,
	351, 352, 354, 355, 353, 0, 356, 357, 359, 358,
	0, 0, 0, 0, 237, 360, 238, 361, 362, 0,
	363, 364, 0, 0, 365, 366, 0, 0, 367, 239,
	0, 368, 0, 240, 369, 370, 371, 372, 373, 374,
	375, 0, 376, 241, 377, 242, 378, 0, 379, 380,
	381, 382, 383, 243, 384, 385, 0, 386, 387, 388,
	389, 390, 0, 392, 393, 391, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 244, 403, 0,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 0, 423, 404,
	405, 424, 0, 425, 245, 426, 427, 0, 437, 428,
	429, 430, 406, 431, 435, 436, 432, 433, 434, 246,
	0, 438, 439, 0, 440, 441, 442, 443, 444, 305,
	445, 306, 446, 447, 0, 247, 248, 448, 0, 0,
	449, 450, 249, 250, 0, 451, 452, 453, 454, 0,
	0, 455, 456, 457, 459, 0, 460, 0, 458, 461,
	462, 463, 251, 252, 0, 0, 464, 253, 0, 0,
	0, 0, 465, 466, 254, 467, 468, 469, 1200, 0,
	941, 940, 0, 0, 0, 938, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 256, 257, 258,
	1432, 259, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 260, 261, 262, 215, 216, 263, 217, 264, 265,
	218, 0, 266, 267, 268, 269, 270, 271, 0, 0,
	219, 220, 221, 0, 272, 222, 0, 918, 0, 273,
	274, 275, 276, 277, 0, 279, 280, 281, 278, 0,
	282, 0, 283, 284, 0, 850, 285, 286, 287, 0,
	0, 0, 0, 0, 0, 0, 288, 289, 489, 290,
	291, 292, 223, 224, 0, 293, 0, 294, 0, 295,
	0, 0, 296, 297, 0, 298, 299, 0, 0, 0,
	225, 303, 300, 301, 304, 307, 302, 308, 309, 226,
	227, 0, 851, 0, 0, 0, 0, 0, 310, 311,
	228, 312, 313, 0, 314, 0, 315, 0, 0, 852,
	316, 0, 317, 229, 0, 230, 0, 318, 319, 320,
	321, 322, 323, 231, 232, 854, 0, 325, 0, 0,
	0, 0, 324, 326, 333, 0, 853, 327, 233, 329,
	328, 330, 331, 332, 234, 0, 235, 0, 334, 855,
	856, 335, 336, 337, 857, 338, 339, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 236, 858, 345, 346,
	859, 0, 347, 348, 0, 0, 349, 0, 350, 920,
	919, 351, 352, 354, 355, 353, 860, 356, 357, 359,
	358, 0, 0, 861, 0, 237, 360, 238, 361, 362,
	0, 363, 364, 0, 0, 365, 366, 0, 0, 367,
	239, 862, 368, 863, 240, 369, 370, 371, 372, 373,
	374, 375, 0, 376, 241, 377, 242, 378, 0, 379,
	380, 381, 382, 383, 243, 384, 385, 0, 386, 387,
	388, 389, 390, 0, 392, 393, 391, 394, 395, 396,
	397, 0, 398, 864, 399, 400, 401, 402, 244, 403,
	0, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 0, 423,
	404, 405, 424, 865, 425, 245, 426, 427, 0, 437,
	428, 429, 430, 406, 431, 435, 436, 432, 433, 434,
	246, 0, 438, 439, 0, 440, 441, 442, 443, 444,
	305, 445, 306, 446, 447, 0, 247, 248, 448, 0,
	0, 449, 450, 249, 250, 0, 451, 452, 453, 454,
	0, 0, 455, 456, 457, 459, 0, 460, 0, 458,
	461, 462, 463, 251, 252, 0, 0, 464, 253, 0,
	0, 0, 0, 465, 466, 254, 467, 468, 469, 1122,
	0, 941, 940, 0, 0, 0, 938, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 256, 257,
	258, 0, 259, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 260, 261, 262, 215, 216, 263, 217, 264,
	265, 218, 0, 266, 267, 268, 269, 270, 271, 0,
	0, 219, 220, 221, 0, 272, 222, 0, 918, 0,
	273, 274, 275, 276, 277, 0, 279, 280, 281, 278,
	0, 282, 0, 283, 284, 0, 850, 285, 286, 287,
	0, 0, 0, 0, 0, 0, 0, 288, 289, 489,
	290, 291, 292, 223, 224, 0, 293, 0, 294, 0,
	295, 0, 0, 296, 297, 0, 298, 299, 0, 0,
	0, 225, 303, 300, 301, 304, 307, 302, 308, 309,
	226, 227, 0, 851, 0, 0, 0, 0, 0, 310,
	311, 228, 312, 313, 0, 314, 0, 315, 0, 0,
	852, 316, 0, 317, 229, 0, 230, 0, 318, 319,
	320, 321, 322, 323, 1121, 232, 854, 0, 325, 0,
	0, 0, 0, 324, 326, 333, 0, 853, 327, 233,
	329, 328, 330, 331, 332, 234, 0, 235, 0, 334,
	855, 856, 335, 336, 337, 857, 338, 339, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 236, 858, 345,
	346, 859, 0, 347, 348, 0, 0, 349, 0, 350,
	920, 919, 351, 352, 354, 355, 353, 860, 356, 357,
	359, 358, 0, 0, 861, 0, 237, 360, 238, 361,
	362, 0, 363, 364, 0, 0, 365, 366, 0, 0,
	367, 239, 862, 368, 863, 240, 369, 370, 371, 372,
	373, 374, 375, 0, 376, 241, 377, 242, 378, 0,
	379, 380, 381, 382, 383, 243, 384, 385, 0, 386,
	387, 388, 389, 390, 0, 392, 393, 391, 394, 395,
	396, 397, 0, 398, 864, 399, 400, 401, 402, 244,
	403, 0, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 0,
	423, 404, 405, 424, 865, 425, 245, 426, 427, 0,
	437, 428, 429, 430, 406, 431, 435, 436, 432, 433,
	434, 246, 0, 438, 439, 0, 440, 441, 442, 443,
	444, 305, 445, 306, 446, 447, 0, 247, 248, 448,
	0, 0, 449, 450, 249, 250, 0, 451, 452, 453,
	454, 0, 0, 455, 456, 457, 459, 0, 460, 0,
	458, 461, 462, 463, 251, 252, 0, 0, 464, 253,
	0, 0, 0, 0, 465, 466, 254, 467, 468, 469,
	1118, 0, 941, 940, 0, 0, 0, 938, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 255, 256,
	257, 258, 0, 259, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 260, 261, 262, 215, 216, 263, 217,
	264, 265, 218, 0, 266, 267, 268, 269, 270, 271,
	0, 0, 219, 220, 221, 0, 272, 222, 0, 918,
	0, 273, 274, 275, 276, 277, 0, 279, 280, 281,
	278, 0, 282, 0, 283, 284, 0, 850, 285, 286,
	287, 0, 0, 0, 0, 0, 0, 0, 288, 289,
	489, 290, 291, 292, 223, 224, 0, 293, 0, 294,
	0, 295, 0, 0, 296, 297, 0, 298, 299, 0,
	0, 0, 225, 303, 300, 301, 304, 307, 302, 308,
	309, 226, 227, 0, 851, 0, 0, 0, 0, 0,
	310, 311, 228, 312, 313, 0, 314, 0, 315, 0,
	0, 852, 316, 0, 317, 229, 0, 230, 0, 318,
	319, 320, 321, 322, 323, 1117, 232, 854, 0, 325,
	0, 0, 0, 0, 324, 326, 333, 0, 853, 327,
	233, 329, 328, 330, 331, 332, 234, 0, 235, 0,
	334, 855, 856, 335, 336, 337, 857, 338, 339, 0,
	0, 340, 341, 342, 0, 344, 343, 0, 236, 858,
	345, 346, 859, 0, 347, 348, 0, 0, 349, 0,
	350, 920, 919, 351, 352, 354, 355, 353, 860, 356,
	357, 359, 358, 0, 0, 861, 0, 237, 360, 238,
	361, 362, 0, 363, 364, 0, 0, 365, 366, 0,
	0, 367, 239, 862, 368, 863, 240, 369, 370, 371,
	372, 373, 374, 375, 0, 376, 241, 377, 242, 378,
	0, 379, 380, 381, 382, 383, 243, 384, 385, 0,
	386, 387, 388, 389, 390, 0, 392, 393, 391, 394,
	395, 396, 397, 0, 398, 864, 399, 400, 401, 402,
	244, 403, 0, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	0, 423, 404, 405, 424, 865, 425, 245, 426, 427,
	0, 437, 428, 429, 430, 406, 431, 435, 436, 432,
	433, 434, 246, 0, 438, 439, 0, 440, 441, 442,
	443, 444, 305, 445, 306, 446, 447, 0, 247, 248,
	448, 0, 0, 449, 450, 249, 250, 0, 451, 452,
	453, 454, 0, 0, 455, 456, 457, 459, 0, 460,
	0, 458, 461, 462, 463, 251, 252, 0, 0, 464,
	253, 0, 0, 0, 0, 465, 466, 254, 467, 468,
	469, 1079, 0, 941, 940, 0, 0, 0, 938, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 255,
	256, 257, 258, 0, 259, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 260, 261, 262, 215, 216, 263,
	217, 264, 265, 218, 0, 266, 267, 268, 269, 270,
	271, 0, 0, 219, 220, 221, 0, 272, 222, 0,
	918, 0, 273, 274, 275, 276, 277, 0, 279, 280,
	281, 278, 0, 282, 0, 283, 284, 0, 850, 285,
	286, 287, 0, 0, 0, 0, 0, 0, 0, 288,
	289, 489, 290, 291, 292, 223, 224, 0, 293, 0,
	294, 0, 295, 0, 0, 296, 297, 0, 298, 299,
	0, 0, 0, 225, 303, 300, 301, 304, 307, 302,
	308, 309, 226, 227, 0, 851, 0, 0, 0, 0,
	0, 310, 311, 228, 312, 313, 0, 314, 0, 315,
	0, 0, 852, 316, 0, 317, 229, 0, 230, 0,
	318, 319, 320, 321, 322, 323, 1078, 232, 854, 0,
	325, 0, 0, 0, 0, 324, 326, 333, 0, 853,
	327, 233, 329, 328, 330, 331, 332, 234, 0, 235,
	0, 334, 855, 856, 335, 336, 337, 857, 338, 339,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 236,
	858, 345, 346, 859, 0, 347, 348, 0, 0, 349,
	0, 350, 920, 919, 351, 352, 354, 355, 353, 860,
	356, 357, 359, 358, 0, 0, 861, 0, 237, 360,
	238, 361, 362, 0, 363, 364, 0, 0, 365, 366,
	0, 0, 367, 239, 862, 368, 863, 240, 369, 370,
	371, 372, 373, 374, 375, 0, 376, 241, 377, 242,
	378, 0, 379, 380, 381, 382, 383, 243, 384, 385,
	0, 386, 387, 388, 389, 390, 0, 392, 393, 391,
	394, 395, 396, 397, 0, 398, 864, 399, 400, 401,
	402, 244, 403, 0, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 0, 423, 404, 405, 424, 865, 425, 245, 426,
	427, 0, 437, 428, 429, 430, 406, 431, 435, 436,
	432, 433, 434, 246, 0, 438, 439, 0, 440, 441,
	442, 443, 444, 305, 445, 306, 446, 447, 0, 247,
	248, 448, 0, 0, 449, 450, 249, 250, 0, 451,
	452, 453, 454, 0, 0, 455, 456, 457, 459, 0,
	460, 0, 458, 461, 462, 463, 251, 252, 0, 0,
	464, 253, 0, 0, 0, 0, 465, 466, 254, 467,
	468, 469, 1076, 0, 941, 940, 0, 0, 0, 938,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 256, 257, 258, 0, 259, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 260, 261, 262, 215, 216,
	263, 217, 264, 265, 218, 0, 266, 267, 268, 269,
	270, 271, 0, 0, 219, 220, 221, 0, 272, 222,
	0, 918, 0, 273, 274, 275, 276, 277, 0, 279,
	280, 281, 278, 0, 282, 0, 283, 284, 0, 850,
	285, 286, 287, 0, 0, 0, 0, 0, 0, 0,
	288, 289, 489, 290, 291, 292, 223, 224, 0, 293,
	0, 294, 0, 295, 0, 0, 296, 297, 0, 298,
	299, 0, 0, 0, 225, 303, 300, 301, 304, 307,
	302, 308, 309, 226, 227, 0, 851, 0, 0, 0,
	0, 0, 310, 311, 228, 312, 313, 0, 314, 0,
	315, 0, 0, 852, 316, 0, 317, 229, 0, 230,
	0, 318, 319, 320, 321, 322, 323, 1075, 232, 854,
	0, 325, 0, 0, 0, 0, 324, 326, 333, 0,
	853, 327, 233, 329, 328, 330, 331, 332, 234, 0,
	235, 0, 334, 855, 856, 335, 336, 337, 857, 338,
	339, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	236, 858, 345, 346, 859, 0, 347, 348, 0, 0,
	349, 0, 350, 920, 919, 351, 352, 354, 355, 353,
	860, 356, 357, 359, 358, 0, 0, 861, 0, 237,
	360, 238, 361, 362, 0, 363, 364, 0, 0, 365,
	366, 0, 0, 367, 239, 862, 368, 863, 240, 369,
	370, 371, 372, 373, 374, 375, 0, 376, 241, 377,
	242, 378, 0, 379, 380, 381, 382, 383, 243, 384,
	385, 0, 386, 387, 388, 389, 390, 0, 392, 393,
	391, 394, 395, 396, 397, 0, 398, 864, 399, 400,
	401, 402, 244, 403, 0, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 0, 423, 404, 405, 424, 865, 425, 245,
	426, 427, 0, 437, 428, 429, 430, 406, 431, 435,
	436, 432, 433, 434, 246, 0, 438, 439, 0, 440,
	441, 442, 443, 444, 305, 445, 306, 446, 447, 0,
	247, 248, 448, 0, 0, 449, 450, 249, 250, 0,
	451, 452, 453, 454, 0, 0, 455, 456, 457, 459,
	0, 460, 0, 458, 461, 462, 463, 251, 252, 0,
	0, 464, 253, 0, 0, 0, 0, 465, 466, 254,
	467, 468, 469, 934, 0, 941, 940, 0, 0, 0,
	938, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 257, 258, 0, 259, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 260, 261, 262, 215,
	216, 263, 217, 264, 265, 218, 0, 266, 267, 268,
	269, 270, 271, 0, 0, 219, 220, 221, 0, 272,
	222, 0, 918, 0, 273, 274, 275, 276, 277, 0,
	279, 280, 281, 278, 0, 282, 0, 283, 284, 0,
	850, 285, 286, 287, 0, 0, 0, 0, 0, 0,
	0, 288, 289, 489, 290, 291, 292, 223, 224, 0,
	293, 0, 294, 0, 295, 0, 0, 296, 297, 0,
	298, 299, 0, 0, 0, 225, 303, 300, 301, 304,
	307, 302, 308, 309, 226, 227, 0, 851, 0, 0,
	0, 0, 0, 310, 311, 228, 312, 313, 0, 314,
	0, 315, 0, 0, 852, 316, 0, 317, 229, 0,
	230, 0, 318, 319, 320, 321, 322, 323, 936, 232,
	854, 0, 325, 0, 0, 0, 0, 324, 326, 333,
	0, 853, 327, 233, 329, 328, 330, 331, 332, 234,
	0, 235, 0, 334, 855, 856, 335, 336, 337, 857,
	338, 339, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 236, 858, 345, 346, 859, 0, 347, 348, 0,
	0, 349, 0, 350, 920, 919, 351, 352, 354, 355,
	353, 860, 356, 357, 359, 358, 0, 0, 861, 0,
	237, 360, 238, 361, 362, 0, 363, 364, 0, 0,
	365, 366, 0, 0, 367, 239, 862, 368, 863, 240,
	369, 370, 371, 372, 373, 374, 375, 0, 376, 241,
	377, 242, 378, 0, 379, 380, 381, 382, 383, 243,
	384, 385, 0, 386, 387, 388, 389, 390, 0, 392,
	393, 391, 394, 395, 396, 397, 0, 398, 864, 399,
	400, 401, 402, 244, 403, 0, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 0, 423, 404, 405, 424, 865, 425,
	245, 426, 427, 0, 437, 428, 429, 430, 406, 431,
	435, 436, 432, 433, 434, 246, 0, 438, 439, 0,
	440, 441, 442, 443, 444, 305, 445, 306, 446, 447,
	0, 247, 248, 448, 0, 0, 449, 450, 249, 250,
	0, 451, 452, 453, 454, 0, 0, 455, 456, 457,
	459, 0, 460, 0, 458, 461, 462, 463, 251, 252,
	941, 940, 464, 253, 0, 938, 0, 0, 465, 466,
	254, 467, 468, 469, 0, 0, 255, 256, 257, 258,
	0, 259, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 260, 261, 262, 215, 216, 263, 217, 264, 265,
	218, 0, 266, 267, 268, 269, 270, 271, 0, 0,
	219, 220, 221, 0, 272, 222, 0, 918, 0, 273,
	274, 275, 276, 277, 0, 279, 280, 281, 278, 0,
	282, 0, 283, 284, 0, 850, 285, 286, 287, 0,
	0, 0, 0, 0, 0, 0, 288, 289, 489, 290,
	291, 292, 223, 224, 0, 293, 0, 294, 0, 295,
	0, 0, 296, 297, 0, 298, 299, 0, 0, 0,
	225, 303, 300, 301, 304, 307, 302, 308, 309, 226,
	227, 0, 851, 0, 0, 0, 0, 0, 310, 311,
	228, 312, 313, 0, 314, 0, 315, 0, 0, 852,
	316, 0, 317, 229, 0, 230, 0, 318, 319, 320,
	321, 322, 323, 231, 232, 854, 0, 325, 0, 0,
	0, 0, 324, 326, 333, 0, 853, 327, 233, 329,
	328, 330, 331, 332, 234, 0, 235, 0, 334, 855,
	856, 335, 336, 337, 857, 338, 339, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 236, 858, 345, 346,
	859, 0, 347, 348, 0, 0, 349, 0, 350, 920,
	919, 351, 352, 354, 355, 353, 860, 356, 357, 359,
	358, 0, 0, 861, 0, 237, 360, 238, 361, 362,
	0, 363, 364, 0, 0, 365, 366, 0, 0, 367,
	239, 862, 368, 863, 240, 369, 370, 371, 372, 373,
	374, 375, 0, 376, 241, 377, 242, 378, 0, 379,
	380, 381, 382, 383, 243, 384, 385, 0, 386, 387,
	388, 389, 390, 0, 392, 393, 391, 394, 395, 396,
	397, 0, 398, 864, 399, 400, 401, 402, 244, 403,
	0, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 0, 423,
	404, 405, 424, 865, 425, 245, 426, 427, 0, 437,
	428, 429, 430, 406, 431, 435, 436, 432, 433, 434,
	246, 0, 438, 439, 0, 440, 441, 442, 443, 444,
	305, 445, 306, 446, 447, 0, 247, 248, 448, 0,
	0, 449, 450, 249, 250, 0, 451, 452, 453, 454,
	0, 0, 455, 456, 457, 459, 0, 460, 0, 458,
	461, 462, 463, 251, 252, 941, 940, 464, 253, 0,
	0, 0, 0, 465, 466, 254, 467, 468, 469, 0,
	0, 255, 256, 257, 258, 0, 259, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 260, 261, 262, 215,
	216, 263, 217, 264, 265, 218, 0, 266, 267, 268,
	269, 270, 271, 0, 0, 219, 220, 221, 0, 272,
	222, 0, 918, 0, 273, 274, 275, 276, 277, 0,
	279, 280, 281, 278, 0, 282, 0, 283, 284, 0,
	850, 285, 286, 287, 0, 0, 0, 0, 0, 0,
	0, 288, 289, 489, 290, 291, 292, 223, 224, 0,
	293, 0, 294, 0, 295, 0, 0, 296, 297, 0,
	298, 299, 0, 0, 0, 225, 303, 300, 301, 304,
	307, 302, 308, 309, 226, 227, 0, 851, 0, 0,
	0, 0, 0, 310, 311, 228, 312, 313, 0, 314,
	0, 315, 0, 0, 852, 316, 0, 317, 229, 0,
	230, 0, 318, 319, 320, 321, 322, 323, 231, 232,
	854, 0, 325, 0, 0, 0, 0, 324, 326, 333,
	0, 853, 327, 233, 329, 328, 330, 331, 332, 234,
	0, 235, 0, 334, 855, 856, 335, 336, 337, 857,
	338, 339, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 236, 858, 345, 346, 859, 0, 347, 348, 0,
	0, 349, 0, 350, 920, 919, 351, 352, 354, 355,
	353, 860, 356, 357, 359, 358, 0, 0, 861, 0,
	237, 360, 238, 361, 362, 0, 363, 364, 0, 0,
	365, 366, 0, 0, 367, 239, 862, 368, 863, 240,
	369, 370, 371, 372, 373, 374, 375, 0, 376, 241,
	377, 242, 378, 0, 379, 380, 381, 382, 383, 243,
	384, 385, 0, 386, 387, 388, 389, 390, 0, 392,
	393, 391, 394, 395, 396, 397, 0, 398, 864, 399,
	400, 401, 402, 244, 403, 0, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 0, 423, 404, 405, 424, 865, 425,
	245, 426, 427, 0, 437, 428, 429, 430, 406, 431,
	435, 436, 432, 433, 434, 246, 0, 438, 439, 0,
	440, 441, 442, 443, 444, 305, 445, 306, 446, 447,
	0, 247, 248, 448, 0, 0, 449, 450, 249, 250,
	0, 451, 452, 453, 454, 0, 0, 455, 456, 457,
	459, 0, 460, 0, 458, 461, 462, 463, 251, 252,
	941, 0, 464, 253, 0, 0, 0, 0, 465, 466,
	254, 467, 468, 469, 0, 0, 255, 256, 257, 258,
	0, 259, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 260, 261, 262, 215, 216, 263, 217, 264, 265,
	218, 0, 266, 267, 268, 269, 270, 271, 0, 0,
	219, 220, 221, 0, 272, 222, 0, 918, 0, 273,
	274, 275, 276, 277, 0, 279, 280, 281, 278, 0,
	282, 0, 283, 284, 0, 850, 285, 286, 287, 0,
	0, 0, 0, 0, 0, 0, 288, 289, 489, 290,
	291, 292, 223, 224, 0, 293, 0, 294, 0, 295,
	0, 0, 296, 297, 0, 298, 299, 0, 0, 0,
	225, 303, 300, 301, 304, 307, 302, 308, 309, 226,
	227, 0, 851, 0, 0, 0, 0, 0, 310, 311,
	228, 312, 313, 0, 314, 0, 315, 0, 0, 852,
	316, 0, 317, 229, 0, 230, 0, 318, 319, 320,
	321, 322, 323, 231, 232, 854, 0, 325, 0, 0,
	0, 0, 324, 326, 333, 0, 853, 327, 233, 329,
	328, 330, 331, 332, 234, 0, 235, 0, 334, 855,
	856, 335, 336, 337, 857, 338, 339, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 236, 858, 345, 346,
	859, 0, 347, 348, 0, 0, 349, 0, 350, 920,
	919, 351, 352, 354, 355, 353, 860, 356, 357, 359,
	358, 0, 0, 861, 0, 237, 360, 238, 361, 362,
	0, 363, 364, 0, 0, 365, 366, 0, 0, 367,
	239, 862, 368, 863, 240, 369, 370, 371, 372, 373,
	374, 375, 0, 376, 241, 377, 242, 378, 0, 379,
	380, 381, 382, 383, 243, 384, 385, 0, 386, 387,
	388, 389, 390, 0, 392, 393, 391, 394, 395, 396,
	397, 0, 398, 864, 399, 400, 401, 402, 244, 403,
	0, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 0, 423,
	404, 405, 424, 865, 425, 245, 426, 427, 0, 437,
	428, 429, 430, 406, 431, 435, 436, 432, 433, 434,
	246, 0, 438, 439, 0, 440, 441, 442, 443, 444,
	305, 445, 306, 446, 447, 0, 247, 248, 448, 0,
	0, 449, 450, 249, 250, 0, 451, 452, 453, 454,
	0, 0, 455, 456, 457, 459, 0, 460, 0, 458,
	461, 462, 463, 251, 252, 0, 0, 464, 253, 586,
	0, 207, 0, 465, 466, 254, 467, 468, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 256, 257,
	258, 0, 259, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 260, 261, 262, 215, 216, 263, 217, 264,
	265, 218, 0, 266, 267, 268, 269, 270, 271, 0,
	0, 219, 220, 221, 0, 272, 222, 0, 0, 0,
	273, 274, 275, 276, 277, 0, 279, 280, 281, 278,
	0, 282, 0, 283, 284, 0, 0, 285, 286, 287,
	0, 0, 0, 0, 0, 0, 0, 288, 289, 213,
	290, 291, 292, 223, 224, 0, 293, 0, 294, 0,
	295, 0, 0, 296, 297, 0, 298, 299, 0, 0,
	0, 225, 303, 300, 301, 304, 307, 302, 308, 309,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 310,
	311, 228, 312, 313, 0, 314, 0, 315, 0, 0,
	0, 316, 0, 317, 229, 0, 230, 0, 318, 319,
	320, 321, 322, 323, 231, 232, 0, 0, 325, 0,
	0, 0, 0, 324, 326, 333, 0, 0, 327, 233,
	329, 328, 330, 331, 332, 234, 0, 235, 0, 334,
	0, 0, 335, 336, 337, 0, 338, 339, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 236, 0, 345,
	346, 0, 0, 347, 348, 0, 0, 349, 0, 350,
	0, 0, 351, 352, 354, 355, 353, 0, 356, 357,
	359, 358, 0, 0, 0, 0, 237, 360, 238, 361,
	362, 0, 363, 364, 0, 0, 365, 366, 0, 0,
	367, 239, 0, 368, 0, 240, 369, 370, 371, 372,
	373, 374, 375, 0, 376, 241, 377, 242, 378, 0,
	379, 380, 381, 382, 383, 243, 384, 385, 0, 386,
	387, 388, 389, 390, 0, 392, 393, 391, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 244,
	403, 0, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 0,
	423, 404, 405, 424, 0, 425, 245, 426, 427, 0,
	437, 428, 429, 430, 406, 431, 435, 436, 432, 433,
	434, 246, 0, 438, 439, 212, 440, 441, 442, 443,
	444, 305, 445, 306, 446, 447, 0, 247, 248, 448,
	0, 0, 449, 450, 249, 250, 0, 451, 452, 453,
	454, 0, 0, 455, 456, 457, 459, 0, 460, 0,
	458, 461, 462, 463, 251, 252, 0, 0, 464, 253,
	206, 0, 207, 0, 465, 466, 254, 467, 468, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 255, 256,
	257, 258, 0, 259, 0, 472, 0, 0, 214, 0,
	0, 0, 0, 260, 261, 262, 215, 216, 263, 217,
	264, 265, 218, 0, 266, 267, 268, 269, 270, 271,
	0, 0, 219, 220, 221, 0, 272, 222, 0, 0,
	0, 273, 274, 275, 276, 277, 0, 279, 280, 281,
	278, 0, 282, 0, 283, 284, 0, 0, 285, 286,
	287, 0, 0, 0, 0, 0, 0, 0, 288, 289,
	213, 290, 291, 292, 223, 224, 0, 293, 0, 294,
	0, 295, 0, 0, 296, 297, 0, 298, 299, 0,
	0, 0, 225, 303, 300, 301, 304, 307, 302, 308,
	309, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 228, 312, 313, 0, 314, 0, 315, 0,
	0, 0, 316, 0, 317, 229, 0, 230, 0, 318,
	319, 320, 321, 322, 323, 231, 232, 0, 0, 325,
	0, 0, 0, 0, 324, 326, 333, 0, 0, 327,
	233, 329, 328, 330, 331, 332, 234, 0, 235, 0,
	334, 0, 0, 335, 336, 337, 0, 338, 339, 0,
	0, 340, 341, 342, 0, 344, 343, 0, 236, 0,
	345, 346, 0, 0, 347, 348, 0, 0, 349, 0,
	350, 0, 0, 351, 352, 354, 355, 353, 0, 356,
	357, 359, 358, 0, 0, 0, 0, 237, 360, 238,
	361, 362, 0, 363, 364, 0, 0, 365, 366, 0,
	0, 367, 239, 0, 368, 0, 240, 369, 370, 371,
	372, 373, 374, 375, 0, 376, 241, 377, 242, 378,
	0, 379, 380, 381, 382, 383, 243, 384, 385, 0,
	386, 387, 388, 389, 390, 0, 392, 393, 391, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	244, 403, 0, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	0, 423, 404, 405, 424, 0, 425, 245, 426, 427,
	0, 437, 428, 429, 430, 406, 431, 435, 436, 432,
	433, 434, 246, 0, 438, 439, 212, 440, 441, 442,
	443, 444, 305, 445, 306, 446, 447, 0, 247, 248,
	448, 0, 0, 449, 450, 249, 250, 0, 451, 452,
	453, 454, 0, 0, 455, 456, 457, 459, 0, 460,
	0, 458, 461, 462, 463, 251, 252, 207, 0, 464,
	253, 0, 0, 0, 0, 465, 466, 254, 467, 468,
	469, 0, 0, 255, 256, 257, 258, 0, 259, 0,
	0, 0, 0, 214, 0, 0, 472, 0, 260, 261,
	262, 215, 216, 263, 217, 264, 265, 218, 0, 266,
	267, 268, 269, 270, 271, 0, 0, 219, 220, 221,
	0, 272, 222, 0, 0, 0, 273, 274, 275, 276,
	277, 0, 279, 280, 281, 278, 0, 282, 0, 283,
	284, 0, 0, 285, 286, 287, 0, 0, 0, 0,
	0, 0, 0, 288, 289, 213, 290, 291, 292, 223,
	224, 0, 293, 0, 294, 0, 295, 0, 0, 296,
	297, 0, 298, 299, 0, 0, 0, 225, 303, 300,
	301, 304, 307, 302, 308, 309, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 228, 312, 313,
	0, 314, 0, 315, 0, 0, 0, 316, 0, 317,
	229, 0, 230, 0, 318, 319, 320, 321, 322, 323,
	231, 232, 0, 0, 325, 0, 0, 0, 0, 324,
	326, 333, 0, 0, 327, 233, 329, 328, 330, 331,
	332, 234, 0, 235, 0, 334, 0, 0, 335, 336,
	337, 0, 338, 339, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 236, 0, 345, 346, 0, 0, 347,
	348, 0, 0, 349, 0, 350, 0, 0, 351, 352,
	354, 355, 353, 0, 356, 357, 359, 358, 0, 0,
	0, 0, 237, 360, 238, 361, 362, 0, 363, 364,
	0, 0, 365, 366, 0, 0, 367, 239, 0, 368,
	0, 240, 369, 370, 371, 372, 373, 374, 375, 0,
	376, 241, 377, 242, 378, 0, 379, 380, 381, 382,
	383, 243, 384, 385, 0, 386, 387, 388, 389, 390,
	0, 392, 393, 391, 394, 395, 396, 397, 0, 398,
	0, 1664, 400, 401, 402, 244, 403, 0, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 0, 423, 404, 405, 424,
	0, 425, 245, 426, 427, 0, 437, 428, 429, 430,
	406, 431, 435, 436, 432, 433, 434, 246, 0, 438,
	439, 212, 440, 441, 442, 443, 444, 305, 445, 306,
	446, 447, 0, 247, 248, 448, 0, 0, 449, 450,
	249, 250, 0, 451, 452, 453, 454, 0, 0, 455,
	456, 457, 459, 0, 460, 0, 458, 461, 462, 463,
	251, 252, 207, 0, 464, 253, 0, 0, 0, 0,
	465, 466, 254, 467, 468, 469, 0, 0, 255, 256,
	257, 258, 0, 259, 0, 0, 0, 0, 214, 0,
	0, 472, 0, 260, 261, 262, 215, 216, 263, 217,
	264, 265, 218, 0, 266, 267, 268, 269, 270, 271,
	0, 0, 219, 220, 221, 0, 272, 222, 0, 0,
	0, 273, 274, 275, 276, 277, 0, 279, 280, 281,
	278, 0, 282, 0, 283, 284, 0, 0, 285, 286,
	287, 0, 0, 0, 0, 0, 0, 0, 288, 289,
	213, 290, 291, 292, 223, 224, 0, 293, 0, 294,
	0, 295, 0, 0, 296, 297, 0, 298, 299, 0,
	0, 0, 225, 303, 300, 301, 304, 307, 302, 308,
	309, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 228, 312, 313, 0, 314, 0, 315, 0,
	0, 0, 316, 0, 317, 229, 0, 230, 0, 318,
	319, 320, 321, 322, 323, 231, 232, 0, 0, 325,
	0, 0, 0, 0, 324, 326, 333, 0, 0, 327,
	233, 329, 328, 330, 331, 332, 234, 0, 235, 0,
	334, 0, 0, 335, 336, 337, 0, 338, 339, 0,
	0, 340, 341, 342, 0, 344, 343, 0, 236, 0,
	345, 346, 0, 0, 347, 348, 0, 0, 349, 0,
	350, 0, 0, 351, 352, 354, 355, 353, 0, 356,
	357, 359, 358, 0, 0, 0, 0, 237, 360, 238,
	361, 362, 0, 363, 364, 0, 0, 365, 366, 0,
	0, 367, 239, 0, 368, 0, 240, 369, 370, 371,
	372, 373, 374, 375, 0, 376, 241, 377, 242, 378,
	0, 379, 380, 381, 382, 383, 243, 384, 385, 0,
	386, 387, 388, 389, 390, 0, 392, 393, 391, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	244, 403, 0, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	0, 423, 404, 405, 424, 0, 425, 245, 426, 427,
	0, 437, 428, 429, 430, 406, 431, 435, 436, 432,
	433, 434, 246, 0, 438, 439, 212, 440, 441, 442,
	443, 444, 305, 445, 306, 446, 447, 0, 247, 248,
	448, 0, 0, 449, 450, 249, 250, 0, 451, 452,
	453, 454, 0, 0, 455, 456, 457, 459, 0, 460,
	0, 458, 461, 462, 463, 251, 252, 486, 0, 464,
	253, 0, 0, 0, 0, 465, 466, 254, 467, 468,
	469, 0, 0, 255, 256, 257, 258, 0, 259, 0,
	0, 0, 0, 214, 0, 0, 472, 0, 260, 261,
	262, 215, 216, 263, 217, 264, 265, 218, 0, 266,
	267, 268, 269, 270, 271, 0, 0, 219, 220, 221,
	0, 272, 222, 0, 0, 0, 273, 274, 275, 276,
	277, 0, 279, 280, 281, 278, 0, 282, 0, 283,
	284, 0, 0, 285, 286, 287, 0, 0, 0, 0,
	0, 0, 0, 288, 289, 489, 290, 291, 292, 223,
	224, 0, 293, 0, 294, 0, 295, 0, 0, 296,
	297, 0, 298, 299, 0, 0, 0, 225, 303, 300,
	301, 304, 307, 302, 308, 309, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 228, 312, 313,
	0, 314, 0, 315, 0, 0, 0, 316, 0, 317,
	229, 0, 230, 0, 318, 319, 320, 321, 322, 323,
	231, 232, 0, 0, 325, 0, 0, 0, 0, 324,
	326, 333, 0, 0, 327, 233, 329, 328, 330, 331,
	332, 234, 0, 235, 0, 334, 0, 0, 335, 336,
	337, 0, 338, 339, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 236, 0, 345, 346, 0, 0, 347,
	348, 0, 0, 349, 0, 350, 0, 0, 351, 352,
	354, 355, 353, 0, 356, 357, 359, 358, 0, 0,
	0, 0, 237, 360, 238, 361, 362, 0, 363, 364,
	0, 0, 365, 366, 0, 0, 367, 239, 0, 368,
	0, 240, 369, 370, 371, 372, 373, 374, 375, 0,
	376, 241, 377, 242, 378, 0, 379, 380, 381, 382,
	383, 243, 384, 385, 0, 386, 387, 388, 389, 390,
	0, 392, 393, 391, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 244, 403, 0, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 0, 423, 404, 405, 424,
	0, 425, 245, 426, 427, 0, 437, 428, 429, 430,
	406, 431, 435, 436, 432, 433, 434, 246, 0, 438,
	439, 0, 440, 441, 442, 443, 444, 305, 445, 306,
	446, 447, 0, 247, 248, 448, 0, 0, 449, 450,
	249, 250, 0, 451, 452, 453, 454, 0, 0, 455,
	456, 457, 459, 0, 460, 0, 458, 461, 462, 463,
	251, 252, 486, 0, 464, 253, 0, 0, 0, 0,
	465, 466, 254, 467, 468, 469, 0, 0, 255, 256,
	257, 258, 0, 259, 0, 0, 0, 0, 214, 0,
	0, 472, 0, 260, 261, 262, 215, 216, 263, 217,
	264, 265, 218, 0, 266, 267, 268, 269, 270, 271,
	0, 0, 219, 220, 221, 1943, 272, 222, 0, 0,
	0, 273, 274, 275, 276, 277, 0, 279, 280, 281,
	278, 1940, 282, 0, 283, 284, 0, 0, 285, 286,
	287, 0, 0, 0, 0, 0, 0, 0, 288, 289,
	489, 290, 291, 292, 223, 224, 0, 293, 0, 294,
	0, 295, 0, 0, 296, 297, 0, 298, 299, 0,
	0, 0, 225, 303, 300, 301, 304, 307, 302, 308,
	309, 226, 227, 0, 2018, 0, 0, 0, 0, 0,
	310, 311, 228, 312, 313, 0, 314, 0, 315, 1946,
	0, 0, 316, 0, 317, 229, 0, 230, 0, 318,
	319, 320, 321, 322, 323, 231, 232, 0, 0, 325,
	0, 0, 0, 2016, 324, 326, 333, 0, 0, 327,
	233, 329, 328, 330, 331, 332, 234, 0, 235, 0,
	2015, 0, 0, 335, 336, 337, 0, 338, 339, 0,
	0, 340, 341, 342, 0, 344, 343, 0, 236, 0,
	345, 346, 0, 0, 347, 348, 0, 0, 349, 0,
	350, 0, 0, 351, 352, 354, 355, 353, 0, 356,
	357, 359, 358, 0, 0, 0, 0, 237, 360, 238,
	361, 362, 0, 363, 364, 0, 0, 365, 366, 0,
	0, 367, 239, 0, 368, 0, 240, 369, 370, 371,
	372, 373, 374, 375, 0, 376, 241, 377, 242, 378,
	1945, 379, 380, 381, 382, 383, 243, 384, 385, 0,
	386, 387, 388, 389, 390, 0, 392, 393, 391, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	244, 403, 0, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	0, 423, 404, 405, 424, 0, 425, 245, 426, 427,
	0, 437, 428, 429, 430, 406, 431, 435, 436, 432,
	433, 434, 246, 0, 438, 439, 0, 440, 441, 442,
	443, 444, 305, 445, 306, 446, 447, 0, 247, 248,
	448, 0, 0, 449, 450, 249, 250, 0, 451, 452,
	453, 454, 0, 2017, 455, 456, 457, 459, 0, 460,
	0, 458, 461, 462, 463, 251, 252, 486, 0, 464,
	253, 0, 0, 0, 0, 465, 466, 254, 467, 468,
	469, 0, 0, 255, 256, 257, 258, 0, 259, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 260, 261,
	262, 215, 216, 263, 217, 264, 265, 218, 0, 266,
	267, 268, 269, 270, 271, 0, 0, 219, 220, 221,
	1943, 272, 222, 0, 0, 1937, 273, 274, 275, 276,
	277, 0, 279, 280, 281, 278, 1940, 282, 0, 283,
	284, 0, 0, 285, 286, 287, 0, 0, 0, 0,
	0, 0, 0, 288, 289, 489, 290, 291, 292, 223,
	224, 0, 293, 0, 294, 0, 295, 0, 0, 296,
	297, 0, 298, 299, 0, 0, 0, 225, 303, 300,
	301, 304, 307, 302, 308, 309, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 228, 312, 313,
	0, 314, 0, 315, 1946, 0, 0, 316, 0, 317,
	229, 0, 230, 0, 318, 319, 320, 321, 322, 323,
	1936, 232, 0, 0, 325, 0, 0, 0, 0, 324,
	326, 333, 0, 0, 327, 233, 329, 328, 330, 331,
	332, 234, 0, 235, 0, 334, 0, 0, 335, 336,
	337, 0, 338, 339, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 236, 0, 345, 346, 0, 0, 347,
	348, 0, 0, 349, 0, 350, 0, 0, 351, 352,
	354, 355, 353, 0, 356, 357, 359, 358, 0, 0,
	0, 0, 237, 360, 238, 361, 362, 0, 363, 364,
	0, 0, 365, 366, 0, 0, 367, 239, 0, 368,
	0, 240, 369, 370, 371, 372, 373, 374, 375, 0,
	376, 241, 377, 242, 378, 1945, 379, 380, 381, 382,
	383, 243, 384, 385, 0, 386, 387, 388, 389, 390,
	0, 392, 393, 391, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 244, 403, 0, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 0, 423, 404, 405, 424,
	0, 425, 245, 426, 427, 0, 437, 428, 429, 430,
	406, 431, 435, 436, 432, 433, 434, 246, 0, 438,
	439, 0, 440, 441, 442, 443, 444, 305, 445, 306,
	446, 447, 0, 247, 248, 448, 0, 0, 449, 450,
	249, 250, 0, 451, 452, 453, 454, 0, 1944, 455,
	456, 457, 459, 0, 460, 0, 458, 461, 462, 463,
	251, 252, 0, 0, 464, 253, 592, 0, 486, 0,
	465, 466, 254, 467, 468, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 256, 257, 591, 573, 259,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 260,
	261, 262, 215, 216, 263, 217, 264, 265, 218, 0,
	266, 267, 268, 269, 270, 271, 0, 0, 219, 220,
	221, 0, 272, 222, 0, 0, 0, 273, 274, 275,
	276, 277, 0, 279, 280, 281, 278, 0, 282, 0,
	283, 284, 576, 0, 285, 286, 287, 0, 0, 0,
	0, 0, 0, 0, 288, 289, 489, 290, 291, 292,
	223, 224, 0, 293, 0, 294, 0, 295, 0, 0,
	296, 297, 0, 298, 299, 0, 0, 0, 225, 303,
	300, 301, 304, 307, 302, 308, 309, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 310, 311, 228, 312,
	313, 0, 314, 0, 315, 0, 0, 0, 316, 577,
	317, 229, 0, 230, 0, 318, 319, 320, 321, 322,
	323, 231, 232, 0, 0, 325, 0, 0, 0, 0,
	324, 326, 333, 0, 0, 327, 233, 329, 328, 330,
	331, 332, 234, 0, 235, 0, 334, 0, 0, 335,
	336, 337, 0, 338, 339, 0, 0, 340, 341, 342,
	0, 344, 343, 0, 236, 0, 345, 346, 0, 0,
	347, 348, 0, 0, 349, 0, 350, 0, 0, 351,
	352, 354, 355, 353, 0, 356, 357, 359, 358, 0,
	0, 0, 0, 237, 360, 238, 361, 362, 0, 363,
	364, 0, 0, 365, 366, 0, 0, 367, 239, 0,
	368, 0, 240, 369, 370, 371, 372, 373, 374, 375,
	0, 376, 241, 377, 242, 378, 0, 379, 380, 381,
	382, 383, 243, 384, 385, 0, 386, 387, 388, 389,
	390, 0, 392, 393, 391, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 244, 403, 0, 407,
	408, 409, 410, 411, 412, 413, 578, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 0, 423, 404, 405,
	424, 0, 425, 245, 426, 427, 0, 437, 428, 429,
	430, 406, 431, 435, 436, 432, 433, 434, 246, 0,
	438, 439, 0, 440, 441, 442, 443, 444, 305, 445,
	306, 446, 447, 0, 247, 248, 448, 0, 0, 449,
	450, 249, 250, 0, 451, 452, 453, 454, 0, 0,
	455, 456, 457, 459, 0, 460, 0, 458, 461, 462,
	463, 251, 252, 0, 0, 464, 253, 572, 0, 486,
	0, 465, 466, 254, 467, 468, 469, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 256, 257, 258, 573,
	259, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	260, 261, 262, 215, 216, 263, 217, 264, 265, 218,
	0, 266, 267, 268, 269, 270, 271, 0, 0, 219,
	220, 221, 0, 272, 222, 0, 0, 0, 273, 274,
	275, 276, 277, 0, 279, 280, 281, 278, 0, 282,
	0, 283, 284, 576, 0, 285, 286, 287, 0, 0,
	0, 0, 0, 0, 0, 288, 289, 489, 290, 291,
	292, 223, 224, 0, 293, 0, 294, 0, 295, 0,
	0, 296, 297, 0, 298, 299, 0, 0, 0, 225,
	303, 300, 301, 304, 307, 302, 308, 309, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 310, 311, 228,
	312, 313, 0, 314, 0, 315, 0, 0, 0, 316,
	577, 317, 229, 0, 230, 0, 318, 319, 320, 321,
	322, 323, 231, 232, 0, 0, 325, 0, 0, 0,
	0, 324, 326, 333, 0, 0, 327, 233, 329, 328,
	330, 331, 332, 234, 0, 235, 0, 334, 0, 0,
	335, 336, 337, 0, 338, 339, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 236, 0, 345, 346, 0,
	0, 347, 348, 0, 0, 349, 0, 350, 0, 0,
	351, 352, 354, 355, 353, 0, 356, 357, 359, 358,
	0, 0, 0, 0, 237, 360, 238, 361, 362, 0,
	363, 364, 0, 0, 365, 366, 0, 0, 367, 239,
	0, 368, 0, 240, 369, 370, 371, 372, 373, 374,
	375, 0, 376, 241, 377, 242, 378, 0, 379, 380,
	381, 382, 383, 243, 384, 385, 0, 386, 387, 388,
	389, 390, 0, 392, 393, 391, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 244, 403, 0,
	407, 408, 409, 410, 411, 412, 413, 578, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 0, 423, 404,
	405, 424, 0, 425, 245, 426, 427, 0, 437, 428,
	429, 430, 406, 431, 435, 436, 432, 433, 434, 246,
	0, 438, 439, 0, 440, 441, 442, 443, 444, 305,
	445, 306, 446, 447, 0, 247, 248, 448, 0, 0,
	449, 450, 249, 250, 0, 451, 452, 453, 454, 0,
	0, 455, 456, 457, 459, 0, 460, 0, 458, 461,
	462, 463, 251, 252, 486, 0, 464, 253, 0, 0,
	0, 0, 465, 466, 254, 467, 468, 469, 0, 0,
	255, 256, 257, 258, 0, 259, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 260, 261, 262, 215, 216,
	263, 217, 264, 265, 218, 0, 266, 267, 268, 269,
	270, 271, 0, 0, 219, 220, 221, 0, 272, 222,
	0, 0, 0, 273, 274, 275, 276, 277, 0, 279,
	280, 281, 278, 0, 282, 0, 283, 284, 576, 0,
	285, 286, 287, 0, 0, 0, 0, 0, 0, 0,
	288, 289, 489, 290, 291, 292, 223, 224, 0, 293,
	0, 294, 0, 295, 0, 0, 296, 297, 0, 298,
	299, 0, 0, 0, 225, 303, 300, 301, 304, 307,
	302, 308, 309, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 310, 311, 228, 312, 313, 0, 314, 0,
	315, 0, 0, 0, 316, 577, 317, 229, 0, 230,
	0, 318, 319, 320, 321, 322, 323, 231, 232, 0,
	0, 325, 0, 0, 0, 0, 324, 326, 333, 0,
	0, 327, 233, 329, 328, 330, 331, 332, 234, 0,
	235, 0, 334, 0, 0, 335, 336, 337, 0, 338,
	339, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	236, 0, 345, 346, 0, 0, 347, 348, 0, 0,
	349, 0, 350, 0, 0, 351, 352, 354, 355, 353,
	0, 356, 357, 359, 358, 0, 0, 0, 0, 237,
	360, 238, 361, 362, 0, 363, 364, 0, 0, 365,
	366, 0, 0, 367, 239, 0, 368, 0, 240, 369,
	370, 371, 372, 373, 374, 375, 0, 376, 241, 377,
	242, 378, 0, 379, 380, 381, 382, 383, 243, 384,
	385, 0, 386, 387, 388, 389, 390, 0, 392, 393,
	391, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 244, 403, 0, 407, 408, 409, 410, 411,
	412, 413, 578, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 0, 423, 404, 405, 424, 0, 425, 245,
	426, 427, 0, 437, 428, 429, 430, 406, 431, 435,
	436, 432, 433, 434, 246, 0, 438, 439, 0, 440,
	441, 442, 443, 444, 305, 445, 306, 446, 447, 0,
	247, 248, 448, 0, 0, 449, 450, 249, 250, 0,
	451, 452, 453, 454, 0, 0, 455, 456, 457, 459,
	0, 460, 0, 458, 461, 462, 463, 251, 252, 0,
	0, 464, 253, 1097, 0, 486, 0, 465, 466, 254,
	467, 468, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 257, 258, 0, 259, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 260, 261, 262, 215,
	216, 263, 217, 264, 265, 218, 0, 266, 267, 268,
	269, 270, 271, 0, 0, 219, 220, 221, 0, 272,
	222, 0, 0, 0, 273, 274, 275, 276, 277, 0,
	279, 280, 281, 278, 0, 282, 0, 283, 284, 0,
	0, 285, 286, 287, 0, 0, 0, 0, 0, 0,
	0, 288, 289, 489, 290, 291, 292, 223, 224, 0,
	293, 0, 294, 0, 295, 0, 0, 296, 297, 0,
	298, 299, 0, 0, 0, 225, 303, 300, 301, 304,
	307, 302, 308, 309, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 310, 311, 228, 312, 313, 0, 314,
	0, 315, 0, 0, 0, 316, 0, 317, 229, 0,
	230, 0, 318, 319, 320, 321, 322, 323, 231, 232,
	0, 0, 325, 0, 0, 0, 0, 324, 326, 333,
	0, 0, 327, 233, 329, 328, 330, 331, 332, 234,
	0, 235, 0, 334, 0, 0, 335, 336, 337, 0,
	338, 339, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 236, 0, 345, 346, 0, 0, 347, 348, 0,
	0, 349, 0, 350, 0, 0, 351, 352, 354, 355,
	353, 0, 356, 357, 359, 358, 0, 0, 0, 0,
	237, 360, 238, 361, 362, 0, 363, 364, 0, 910,
	365, 366, 0, 0, 367, 239, 0, 368, 0, 240,
	369, 370, 371, 372, 373, 374, 375, 0, 376, 241,
	377, 242, 378, 0, 379, 380, 381, 382, 383, 243,
	384, 385, 0, 386, 387, 388, 389, 390, 0, 392,
	393, 391, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 244, 403, 0, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 0, 423, 404, 405, 424, 0, 425,
	245, 426, 427, 0, 437, 428, 429, 430, 406, 431,
	435, 436, 432, 433, 434, 246, 0, 438, 439, 0,
	440, 441, 442, 443, 444, 305, 445, 306, 446, 447,
	0, 247, 248, 448, 0, 0, 449, 450, 249, 250,
	0, 451, 452, 453, 454, 0, 0, 455, 456, 457,
	459, 0, 460, 0, 458, 461, 462, 463, 251, 252,
	0, 0, 464, 253, 929, 0, 486, 0, 465, 466,
	254, 467, 468, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 256, 257, 258, 0, 259, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 260, 261, 262,
	215, 216, 263, 217, 264, 265, 218, 0, 266, 267,
	268, 269, 270, 271, 0, 0, 219, 220, 221, 0,
	272, 222, 0, 0, 0, 273, 274, 275, 276, 277,
	0, 279, 280, 281, 278, 0, 282, 0, 283, 284,
	0, 0, 285, 286, 287, 0, 0, 0, 0, 0,
	0, 0, 288, 289, 489, 290, 291, 292, 223, 224,
	0, 293, 0, 294, 0, 295, 0, 0, 296, 297,
	0, 298, 299, 0, 0, 0, 225, 303, 300, 301,
	304, 307, 302, 308, 309, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 310, 311, 228, 312, 313, 0,
	314, 0, 315, 0, 0, 0, 316, 0, 317, 229,
	0, 230, 0, 318, 319, 320, 321, 322, 323, 931,
	232, 0, 0, 325, 0, 0, 0, 0, 324, 326,
	333, 0, 0, 327, 233, 329, 328, 330, 331, 332,
	234, 0, 235, 0, 334, 0, 0, 335, 336, 337,
	0, 338, 339, 0, 0, 340, 341, 342, 0, 344,
	343, 0, 236, 0, 345, 346, 0, 0, 347, 348,
	0, 0, 349, 0, 350, 0, 0, 351, 352, 354,
	355, 353, 0, 356, 357, 359, 358, 0, 0, 0,
	0, 237, 360, 238, 361, 362, 0, 363, 364, 0,
	910, 365, 366, 0, 0, 367, 239, 0, 368, 0,
	240, 369, 370, 371, 372, 373, 374, 375, 0, 376,
	241, 377, 242, 378, 0, 379, 380, 381, 382, 383,
	243, 384, 385, 0, 386, 387, 388, 389, 390, 0,
	392, 393, 391, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 244, 403, 0, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 0, 423, 404, 405, 424, 0,
	425, 245, 426, 427, 0, 437, 428, 429, 430, 406,
	431, 435, 436, 432, 433, 434, 246, 0, 438, 439,
	0, 440, 441, 442, 443, 444, 305, 445, 306, 446,
	447, 0, 247, 248, 448, 0, 0, 449, 450, 249,
	250, 0, 451, 452, 453, 454, 0, 0, 455, 456,
	457, 459, 0, 460, 0, 458, 461, 462, 463, 251,
	252, 0, 0, 464, 253, 926, 0, 486, 0, 465,
	466, 254, 467, 468, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 256, 257, 258, 0, 259, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 260, 261,
	262, 215, 216, 263, 217, 264, 265, 218, 0, 266,
	267, 268, 269, 270, 271, 0, 0, 219, 220, 221,
	0, 272, 222, 0, 0, 0, 273, 274, 275, 276,
	277, 0, 279, 280, 281, 278, 0, 282, 0, 283,
	284, 0, 0, 285, 286, 287, 0, 0, 0, 0,
	0, 0, 0, 288, 289, 489, 290, 291, 292, 223,
	224, 0, 293, 0, 294, 0, 295, 0, 0, 296,
	297, 0, 298, 299, 0, 0, 0, 225, 303, 300,
	301, 304, 307, 302, 308, 309, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 228, 312, 313,
	0, 314, 0, 315, 0, 0, 0, 316, 0, 317,
	229, 0, 230, 0, 318, 319, 320, 321, 322, 323,
	928, 232, 0, 0, 325, 0, 0, 0, 0, 324,
	326, 333, 0, 0, 327, 233, 329, 328, 330, 331,
	332, 234, 0, 235, 0, 334, 0, 0, 335, 336,
	337, 0, 338, 339, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 236, 0, 345, 346, 0, 0, 347,
	348, 0, 0, 349, 0, 350, 0, 0, 351, 352,
	354, 355, 353, 0, 356, 357, 359, 358, 0, 0,
	0, 0, 237, 360, 238, 361, 362, 0, 363, 364,
	0, 910, 365, 366, 0, 0, 367, 239, 0, 368,
	0, 240, 369, 370, 371, 372, 373, 374, 375, 0,
	376, 241, 377, 242, 378, 0, 379, 380, 381, 382,
	383, 243, 384, 385, 0, 386, 387, 388, 389, 390,
	0, 392, 393, 391, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 244, 403, 0, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 0, 423, 404, 405, 424,
	0, 425, 245, 426, 427, 0, 437, 428, 429, 430,
	406, 431, 435, 436, 432, 433, 434, 246, 0, 438,
	439, 0, 440, 441, 442, 443, 444, 305, 445, 306,
	446, 447, 0, 247, 248, 448, 0, 0, 449, 450,
	249, 250, 0, 451, 452, 453, 454, 0, 0, 455,
	456, 457, 459, 0, 460, 0, 458, 461, 462, 463,
	251, 252, 0, 0, 464, 253, 922, 0, 486, 0,
	465, 466, 254, 467, 468, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 256, 257, 258, 0, 259,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 260,
	261, 262, 215, 216, 263, 217, 264, 265, 218, 0,
	266, 267, 268, 269, 270, 271, 0, 0, 219, 220,
	221, 0, 272, 222, 0, 0, 0, 273, 274, 275,
	276, 277, 0, 279, 280, 281, 278, 0, 282, 0,
	283, 284, 0, 0, 285, 286, 287, 0, 0, 0,
	0, 0, 0, 0, 288, 289, 489, 290, 291, 292,
	223, 224, 0, 293, 0, 294, 0, 295, 0, 0,
	296, 297, 0, 298, 299, 0, 0, 0, 225, 303,
	300, 301, 304, 307, 302, 308, 309, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 310, 311, 228, 312,
	313, 0, 314, 0, 315, 0, 0, 0, 316, 0,
	317, 229, 0, 230, 0, 318, 319, 320, 321, 322,
	323, 924, 232, 0, 0, 325, 0, 0, 0, 0,
	324, 326, 333, 0, 0, 327, 233, 329, 328, 330,
	331, 332, 234, 0, 235, 0, 334, 0, 0, 335,
	336, 337, 0, 338, 339, 0, 0, 340, 341, 342,
	0, 344, 343, 0, 236, 0, 345, 346, 0, 0,
	347, 348, 0, 0, 349, 0, 350, 0, 0, 351,
	352, 354, 355, 353, 0, 356, 357, 359, 358, 0,
	0, 0, 0, 237, 360, 238, 361, 362, 0, 363,
	364, 0, 910, 365, 366, 0, 0, 367, 239, 0,
	368, 0, 240, 369, 370, 371, 372, 373, 374, 375,
	0, 376, 241, 377, 242, 378, 0, 379, 380, 381,
	382, 383, 243, 384, 385, 0, 386, 387, 388, 389,
	390, 0, 392, 393, 391, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 244, 403, 0, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 0, 423, 404, 405,
	424, 0, 425, 245, 426, 427, 0, 437, 428, 429,
	430, 406, 431, 435, 436, 432, 433, 434, 246, 0,
	438, 439, 0, 440, 441, 442, 443, 444, 305, 445,
	306, 446, 447, 0, 247, 248, 448, 0, 0, 449,
	450, 249, 250, 0, 451, 452, 453, 454, 0, 0,
	455, 456, 457, 459, 0, 460, 0, 458, 461, 462,
	463, 251, 252, 0, 0, 464, 253, 509, 0, 486,
	0, 465, 466, 254, 467, 468, 469, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 256, 257, 258, 508,
	259, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	260, 261, 262, 215, 216, 263, 217, 264, 265, 218,
	0, 266, 267, 268, 269, 270, 271, 0, 0, 219,
	220, 221, 0, 272, 222, 0, 0, 0, 273, 274,
	275, 276, 277, 0, 279, 280, 281, 278, 0, 282,
	0, 283, 284, 0, 0, 285, 286, 287, 0, 0,
	0, 0, 0, 0, 0, 288, 289, 489, 290, 291,
	292, 223, 224, 0, 293, 0, 294, 0, 295, 0,
	0, 296, 297, 0, 298, 299, 0, 0, 0, 225,
	303, 300, 301, 304, 307, 302, 308, 309, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 310, 311, 228,
	312, 313, 0, 314, 0, 315, 0, 0, 0, 316,
	0, 317, 229, 0, 230, 0, 318, 319, 320, 321,
	322, 323, 231, 232, 0, 0, 325, 0, 0, 0,
	0, 324, 326, 333, 0, 0, 327, 233, 329, 328,
	330, 331, 332, 234, 0, 235, 0, 334, 0, 0,
	335, 336, 337, 0, 338, 339, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 236, 0, 345, 346, 0,
	0, 347, 348, 0, 0, 349, 0, 350, 0, 0,
	351, 352, 354, 355, 353, 0, 356, 357, 359, 358,
	0, 0, 0, 0, 237, 360, 238, 361, 362, 0,
	363, 364, 0, 0, 365, 366, 0, 0, 367, 239,
	0, 368, 0, 240, 369, 370, 371, 372, 373, 374,
	375, 0, 376, 241, 377, 242, 507, 0, 379, 380,
	381, 382, 383, 243, 384, 385, 0, 386, 387, 388,
	389, 390, 0, 392, 393, 391, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 244, 403, 0,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 0, 423, 404,
	405, 424, 0, 425, 245, 426, 427, 0, 437, 428,
	429, 430, 406, 431, 435, 436, 432, 433, 434, 246,
	0, 438, 439, 0, 440, 441, 442, 443, 444, 305,
	445, 306, 446, 447, 0, 247, 248, 448, 0, 0,
	449, 450, 249, 250, 0, 451, 452, 453, 454, 0,
	0, 455, 456, 457, 459, 0, 460, 0, 458, 461,
	462, 463, 251, 252, 486, 0, 464, 253, 0, 0,
	0, 0, 465, 466, 254, 467, 468, 469, 0, 0,
	255, 256, 257, 258, 0, 259, 0, 0, 0, 0,
	214, 0, 1923, 0, 0, 260, 261, 262, 215, 216,
	263, 217, 264, 265, 218, 0, 266, 267, 268, 269,
	270, 271, 0, 0, 219, 220, 221, 0, 272, 222,
	0, 0, 0, 273, 274, 275, 276, 277, 0, 279,
	280, 281, 278, 0, 282, 0, 283, 284, 0, 0,
	285, 286, 287, 0, 0, 0, 0, 0, 0, 0,
	288, 289, 489, 290, 291, 292, 223, 224, 0, 293,
	0, 294, 0, 295, 0, 0, 296, 297, 0, 298,
	299, 0, 0, 0, 225, 303, 300, 301, 304, 307,
	302, 308, 309, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 310, 311, 228, 312, 313, 0, 314, 0,
	315, 0, 0, 0, 316, 0, 317, 229, 0, 230,
	0, 318, 319, 320, 321, 322, 323, 231, 232, 0,
	0, 325, 0, 0, 0, 0, 324, 326, 333, 0,
	0, 327, 233, 329, 328, 330, 331, 332, 234, 0,
	235, 0, 334, 0, 0, 335, 336, 337, 0, 338,
	339, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	236, 0, 345, 346, 0, 0, 347, 348, 0, 0,
	349, 0, 350, 0, 0, 351, 352, 354, 355, 353,
	0, 356, 357, 359, 358, 0, 0, 0, 0, 237,
	360, 238, 361, 362, 0, 363, 364, 0, 0, 365,
	366, 0, 0, 367, 239, 0, 368, 0, 240, 369,
	370, 371, 372, 373, 374, 375, 0, 376, 241, 377,
	242, 378, 0, 379, 380, 381, 382, 383, 243, 384,
	385, 0, 386, 387, 388, 389, 390, 0, 392, 393,
	391, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 244, 403, 0, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 0, 423, 404, 405, 424, 0, 425, 245,
	426, 427, 0, 437, 428, 429, 430, 406, 431, 435,
	436, 432, 433, 434, 246, 0, 438, 439, 0, 440,
	441, 442, 443, 444, 305, 445, 306, 446, 447, 0,
	247, 248, 448, 0, 0, 449, 450, 249, 250, 0,
	451, 452, 453, 454, 0, 0, 455, 456, 457, 459,
	0, 460, 0, 458, 461, 462, 463, 251, 252, 486,
	2404, 464, 253, 0, 0, 0, 0, 465, 466, 254,
	467, 468, 469, 0, 0, 255, 256, 257, 258, 0,
	259, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	260, 261, 262, 215, 216, 263, 217, 264, 265, 218,
	0, 266, 267, 268, 269, 270, 271, 0, 0, 219,
	220, 221, 0, 272, 222, 0, 0, 0, 273, 274,
	275, 276, 277, 0, 279, 280, 281, 278, 0, 282,
	0, 283, 284, 0, 0, 285, 286, 287, 0, 0,
	0, 0, 0, 0, 0, 288, 289, 489, 290, 291,
	292, 223, 224, 0, 293, 0, 294, 0, 295, 0,
	0, 296, 297, 0, 298, 299, 0, 0, 0, 225,
	303, 300, 301, 304, 307, 302, 308, 309, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 310, 311, 228,
	312, 313, 0, 314, 0, 315, 0, 0, 0, 316,
	0, 317, 229, 0, 230, 0, 318, 319, 320, 321,
	322, 323, 231, 232, 0, 0, 325, 0, 0, 0,
	0, 324, 326, 333, 0, 0, 327, 233, 329, 328,
	330, 331, 332, 234, 0, 235, 0, 334, 0, 0,
	335, 336, 337, 0, 338, 339, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 236, 0, 345, 346, 0,
	0, 347, 348, 0, 0, 349, 0, 350, 0, 0,
	351, 352, 354, 355, 353, 0, 356, 357, 359, 358,
	0, 0, 0, 0, 237, 360, 238, 361, 362, 0,
	363, 364, 0, 0, 365, 366, 0, 0, 367, 239,
	0, 368, 0, 240, 369, 370, 371, 372, 373, 374,
	375, 0, 376, 241, 377, 242, 378, 0, 379, 380,
	381, 382, 383, 243, 384, 385, 0, 386, 387, 388,
	389, 390, 0, 392, 393, 391, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 244, 403, 0,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 0, 423, 404,
	405, 424, 0, 425, 245, 426, 427, 0, 437, 428,
	429, 430, 406, 431, 435, 436, 432, 433, 434, 246,
	0, 438, 439, 0, 440, 441, 442, 443, 444, 305,
	445, 306, 446, 447, 0, 247, 248, 448, 0, 0,
	449, 450, 249, 250, 0, 451, 452, 453, 454, 0,
	0, 455, 456, 457, 459, 0, 460, 0, 458, 461,
	462, 463, 251, 252, 486, 2404, 464, 253, 0, 0,
	0, 0, 465, 466, 254, 467, 468, 469, 0, 0,
	255, 256, 257, 258, 0, 259, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 260, 261, 262, 215, 216,
	263, 217, 264, 265, 218, 0, 266, 267, 268, 269,
	270, 271, 0, 0, 219, 220, 221, 0, 272, 222,
	0, 0, 0, 273, 274, 275, 276, 277, 0, 279,
	280, 281, 278, 0, 282, 0, 283, 284, 0, 0,
	285, 286, 287, 0, 0, 0, 0, 0, 0, 0,
	288, 289, 489, 290, 291, 292, 223, 224, 0, 293,
	0, 294, 0, 295, 0, 0, 296, 297, 0, 298,
	299, 0, 0, 0, 225, 303, 300, 301, 304, 307,
	302, 308, 309, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 310, 311, 228, 312, 313, 0, 314, 0,
	315, 0, 0, 0, 316, 0, 317, 229, 0, 230,
	0, 318, 319, 320, 321, 322, 323, 231, 232, 0,
	0, 325, 0, 0, 0, 0, 324, 326, 333, 0,
	0, 327, 233, 329, 328, 330, 331, 332, 234, 0,
	235, 0, 334, 0, 0, 335, 336, 337, 0, 338,
	339, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	236, 0, 345, 346, 0, 0, 347, 348, 0, 0,
	349, 0, 350, 0, 0, 351, 352, 354, 355, 353,
	0, 356, 357, 359, 358, 0, 0, 0, 0, 237,
	360, 238, 361, 362, 0, 363, 364, 0, 0, 365,
	2401, 0, 0, 367, 239, 0, 368, 0, 240, 369,
	370, 371, 372, 373, 374, 375, 0, 376, 241, 377,
	242, 378, 0, 379, 380, 381, 382, 383, 243, 384,
	385, 0, 386, 387, 388, 389, 390, 0, 392, 393,
	391, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 244, 403, 0, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 0, 423, 404, 405, 424, 0, 425, 245,
	426, 427, 0, 437, 428, 429, 430, 406, 431, 435,
	436, 432, 433, 434, 246, 0, 438, 439, 0, 440,
	441, 442, 443, 444, 305, 445, 306, 446, 447, 0,
	247, 248, 448, 0, 0, 449, 450, 249, 250, 0,
	451, 452, 453, 454, 0, 0, 455, 456, 457, 459,
	0, 460, 0, 458, 461, 462, 463, 251, 252, 486,
	0, 464, 253, 0, 0, 0, 0, 465, 466, 254,
	467, 468, 469, 0, 0, 255, 256, 257, 258, 0,
	259, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	260, 261, 262, 215, 216, 263, 217, 264, 265, 218,
	0, 266, 267, 268, 269, 270, 271, 0, 0, 219,
	220, 221, 0, 272, 222, 0, 0, 0, 273, 274,
	275, 276, 277, 0, 279, 280, 281, 278, 0, 282,
	0, 283, 284, 0, 0, 285, 286, 287, 0, 0,
	0, 0, 0, 0, 0, 288, 289, 489, 290, 291,
	292, 223, 224, 0, 293, 0, 294, 0, 295, 0,
	0, 296, 297, 0, 298, 299, 0, 0, 0, 225,
	303, 300, 301, 304, 307, 302, 308, 309, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 310, 311, 228,
	312, 313, 0, 314, 0, 315, 0, 0, 0, 316,
	0, 317, 229, 0, 230, 0, 318, 319, 320, 321,
	322, 323, 231, 232, 0, 0, 325, 0, 0, 0,
	0, 324, 326, 333, 0, 0, 327, 233, 329, 328,
	330, 331, 332, 234, 0, 235, 0, 334, 0, 0,
	335, 336, 337, 0, 338, 339, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 236, 0, 345, 346, 0,
	0, 347, 348, 0, 0, 349, 0, 350, 0, 0,
	351, 352, 354, 355, 353, 0, 356, 357, 359, 358,
	0, 0, 0, 0, 237, 360, 238, 361, 362, 0,
	363, 364, 0, 910, 365, 366, 0, 0, 367, 239,
	0, 368, 0, 240, 369, 370, 371, 372, 373, 374,
	375, 0, 376, 241, 377, 242, 378, 0, 379, 380,
	381, 382, 383, 243, 384, 385, 0, 386, 387, 388,
	389, 390, 0, 392, 393, 391, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 244, 403, 0,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 0, 423, 404,
	405, 424, 0, 425, 245, 426, 427, 0, 437, 428,
	429, 430, 406, 431, 435, 436, 432, 433, 434, 246,
	0, 438, 439, 0, 440, 441, 442, 443, 444, 305,
	445, 306, 446, 447, 0, 247, 248, 448, 0, 0,
	449, 450, 249, 250, 0, 451, 452, 453, 454, 0,
	0, 455, 456, 457, 459, 0, 460, 0, 458, 461,
	462, 463, 251, 252, 0, 0, 464, 253, 1684, 0,
	486, 0, 465, 466, 254, 467, 468, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 256, 257, 258,
	0, 259, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 260, 261, 262, 215, 216, 263, 217, 264, 265,
	218, 0, 266, 267, 268, 269, 270, 271, 0, 0,
	219, 220, 221, 0, 272, 222, 0, 0, 0, 273,
	274, 275, 276, 277, 0, 279, 280, 281, 278, 0,
	282, 0, 283, 284, 0, 0, 285, 286, 287, 0,
	0, 0, 0, 0, 0, 0, 288, 289, 489, 290,
	291, 292, 223, 224, 0, 293, 0, 294, 0, 295,
	0, 0, 296, 297, 0, 298, 299, 0, 0, 0,
	225, 303, 300, 301, 304, 307, 302, 308, 309, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 310, 311,
	228, 312, 313, 0, 314, 0, 315, 0, 0, 0,
	316, 0, 317, 229, 0, 230, 0, 318, 319, 320,
	321, 322, 323, 231, 232, 0, 0, 325, 0, 0,
	0, 0, 324, 326, 333, 0, 0, 327, 233, 329,
	328, 330, 331, 332, 234, 0, 235, 0, 334, 0,
	0, 335, 336, 337, 0, 338, 339, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 236, 0, 345, 346,
	0, 0, 347, 348, 0, 0, 349, 0, 350, 0,
	0, 351, 352, 354, 355, 353, 0, 356, 357, 359,
	358, 0, 0, 0, 0, 237, 360, 238, 361, 362,
	0, 363, 364, 0, 0, 365, 366, 0, 0, 367,
	239, 0, 368, 0, 240, 369, 370, 371, 372, 373,
	374, 375, 0, 376, 241, 377, 242, 378, 0, 379,
	380, 381, 382, 383, 243, 384, 385, 0, 386, 387,
	388, 389, 390, 0, 392, 393, 391, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 244, 403,
	0, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 0, 423,
	404, 405, 424, 0, 425, 245, 426, 427, 0, 437,
	428, 429, 430, 406, 431, 435, 436, 432, 433, 434,
	246, 0, 438, 439, 0, 440, 441, 442, 443, 444,
	305, 445, 306, 446, 447, 0, 247, 248, 448, 0,
	0, 449, 450, 249, 250, 0, 451, 452, 453, 454,
	0, 0, 455, 456, 457, 459, 0, 460, 0, 458,
	461, 462, 463, 251, 252, 0, 0, 464, 253, 1682,
	0, 486, 0, 465, 466, 254, 467, 468, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 256, 257,
	258, 0, 259, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 260, 261, 262, 215, 216, 263, 217, 264,
	265, 218, 0, 266, 267, 268, 269, 270, 271, 0,
	0, 219, 220, 221, 0, 272, 222, 0, 0, 0,
	273, 274, 275, 276, 277, 0, 279, 280, 281, 278,
	0, 282, 0, 283, 284, 0, 0, 285, 286, 287,
	0, 0, 0, 0, 0, 0, 0, 288, 289, 489,
	290, 291, 292, 223, 224, 0, 293, 0, 294, 0,
	295, 0, 0, 296, 297, 0, 298, 299, 0, 0,
	0, 225, 303, 300, 301, 304, 307, 302, 308, 309,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 310,
	311, 228, 312, 313, 0, 314, 0, 315, 0, 0,
	0, 316, 0, 317, 229, 0, 230, 0, 318, 319,
	320, 321, 322, 323, 231, 232, 0, 0, 325, 0,
	0, 0, 0, 324, 326, 333, 0, 0, 327, 233,
	329, 328, 330, 331, 332, 234, 0, 235, 0, 334,
	0, 0, 335, 336, 337, 0, 338, 339, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 236, 0, 345,
	346, 0, 0, 347, 348, 0, 0, 349, 0, 350,
	0, 0, 351, 352, 354, 355, 353, 0, 356, 357,
	359, 358, 0, 0, 0, 0, 237, 360, 238, 361,
	362, 0, 363, 364, 0, 0, 365, 366, 0, 0,
	367, 239, 0, 368, 0, 240, 369, 370, 371, 372,
	373, 374, 375, 0, 376, 241, 377, 242, 378, 0,
	379, 380, 381, 382, 383, 243, 384, 385, 0, 386,
	387, 388, 389, 390, 0, 392, 393, 391, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 244,
	403, 0, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 0,
	423, 404, 405, 424, 0, 425, 245, 426, 427, 0,
	437, 428, 429, 430, 406, 431, 435, 436, 432, 433,
	434, 246, 0, 438, 439, 0, 440, 441, 442, 443,
	444, 305, 445, 306, 446, 447, 0, 247, 248, 448,
	0, 0, 449, 450, 249, 250, 0, 451, 452, 453,
	454, 0, 0, 455, 456, 457, 459, 0, 460, 0,
	458, 461, 462, 463, 251, 252, 0, 0, 464, 253,
	1680, 0, 486, 0, 465, 466, 254, 467, 468, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 255, 256,
	257, 258, 0, 259, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 260, 261, 262, 215, 216, 263, 217,
	264, 265, 218, 0, 266, 267, 268, 269, 270, 271,
	0, 0, 219, 220, 221, 0, 272, 222, 0, 0,
	0, 273, 274, 275, 276, 277, 0, 279, 280, 281,
	278, 0, 282, 0, 283, 284, 0, 0, 285, 286,
	287, 0, 0, 0, 0, 0, 0, 0, 288, 289,
	489, 290, 291, 292, 223, 224, 0, 293, 0, 294,
	0, 295, 0, 0, 296, 297, 0, 298, 299, 0,
	0, 0, 225, 303, 300, 301, 304, 307, 302, 308,
	309, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 228, 312, 313, 0, 314, 0, 315, 0,
	0, 0, 316, 0, 317, 229, 0, 230, 0, 318,
	319, 320, 321, 322, 323, 231, 232, 0, 0, 325,
	0, 0, 0, 0, 324, 326, 333, 0, 0, 327,
	233, 329, 328, 330, 331, 332, 234, 0, 235, 0,
	334, 0, 0, 335, 336, 337, 0, 338, 339, 0,
	0, 340, 341, 342, 0, 344, 343, 0, 236, 0,
	345, 346, 0, 0, 347, 348, 0, 0, 349, 0,
	350, 0, 0, 351, 352, 354, 355, 353, 0, 356,
	357, 359, 358, 0, 0, 0, 0, 237, 360, 238,
	361, 362, 0, 363, 364, 0, 0, 365, 366, 0,
	0, 367, 239, 0, 368, 0, 240, 369, 370, 371,
	372, 373, 374, 375, 0, 376, 241, 377, 242, 378,
	0, 379, 380, 381, 382, 383, 243, 384, 385, 0,
	386, 387, 388, 389, 390, 0, 392, 393, 391, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	244, 403, 0, 407, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	0, 423, 404, 405, 424, 0, 425, 245, 426, 427,
	0, 437, 428, 429, 430, 406, 431, 435, 436, 432,
	433, 434, 246, 0, 438, 439, 0, 440, 441, 442,
	443, 444, 305, 445, 306, 446, 447, 0, 247, 248,
	448, 0, 0, 449, 450, 249, 250, 0, 451, 452,
	453, 454, 0, 0, 455, 456, 457, 459, 0, 460,
	0, 458, 461, 462, 463, 251, 252, 486, 0, 464,
	253, 0, 0, 0, 0, 465, 466, 254, 467, 468,
	469, 0, 0, 255, 256, 257, 258, 1657, 259, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 260, 261,
	262, 215, 216, 263, 217, 264, 265, 218, 0, 266,
	267, 268, 269, 270, 271, 0, 0, 219, 220, 221,
	0, 272, 222, 0, 0, 0, 273, 274, 275, 276,
	277, 0, 279, 280, 281, 278, 0, 282, 0, 283,
	284, 0, 0, 285, 286, 287, 0, 0, 0, 0,
	0, 0, 0, 288, 289, 489, 290, 291, 292, 223,
	224, 0, 293, 0, 294, 0, 295, 0, 0, 296,
	297, 0, 298, 299, 0, 0, 0, 225, 303, 300,
	301, 304, 307, 302, 308, 309, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 228, 312, 313,
	0, 314, 0, 315, 0, 0, 0, 316, 0, 317,
	229, 0, 230, 0, 318, 319, 320, 321, 322, 323,
	231, 232, 0, 0, 325, 0, 0, 0, 0, 324,
	326, 333, 0, 0, 327, 233, 329, 328, 330, 331,
	332, 234, 0, 235, 0, 334, 0, 0, 335, 336,
	337, 0, 338, 339, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 236, 0, 345, 346, 0, 0, 347,
	348, 0, 0, 349, 0, 350, 0, 0, 351, 352,
	354, 355, 353, 0, 356, 357, 359, 358, 0, 0,
	0, 0, 237, 360, 238, 361, 362, 0, 363, 364,
	0, 0, 365, 366, 0, 0, 367, 239, 0, 368,
	0, 240, 369, 370, 371, 372, 373, 374, 375, 0,
	376, 241, 377, 242, 378, 0, 379, 380, 381, 382,
	383, 243, 384, 385, 0, 386, 387, 388, 389, 390,
	0, 392, 393, 391, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 244, 403, 0, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 0, 423, 404, 405, 424,
	0, 425, 245, 426, 427, 0, 437, 428, 429, 430,
	406, 431, 435, 436, 432, 433, 434, 246, 0, 438,
	439, 0, 440, 441, 442, 443, 444, 305, 445, 306,
	446, 447, 0, 247, 248, 448, 0, 0, 449, 450,
	249, 250, 0, 451, 452, 453, 454, 0, 0, 455,
	456, 457, 459, 0, 460, 0, 458, 461, 462, 463,
	251, 252, 0, 0, 464, 253, 1617, 0, 486, 0,
	465, 466, 254, 467, 468, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 256, 257, 258, 0, 259,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 260,
	261, 262, 215, 216, 263, 217, 264, 265, 218, 0,
	266, 267, 268, 269, 270, 271, 0, 0, 219, 220,
	221, 0, 272, 222, 0, 0, 0, 273, 274, 275,
	276, 277, 0, 279, 280, 281, 278, 0, 282, 0,
	283, 284, 0, 0, 285, 286, 287, 0, 0, 0,
	0, 0, 0, 0, 288, 289, 489, 290, 291, 292,
	223, 224, 0, 293, 0, 294, 0, 295, 0, 0,
	296, 297, 0, 298, 299, 0, 0, 0, 225, 303,
	300, 301, 304, 307, 302, 308, 309, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 310, 311, 228, 312,
	313, 0, 314, 0, 315, 0, 0, 0, 316, 0,
	317, 229, 0, 230, 0, 318, 319, 320, 321, 322,
	323, 231, 232, 0, 0, 325, 0, 0, 0, 0,
	324, 326, 333, 0, 0, 327, 233, 329, 328, 330,
	331, 332, 234, 0, 235, 0, 334, 0, 0, 335,
	336, 337, 0, 338, 339, 0, 0, 340, 341, 342,
	0, 344, 343, 0, 236, 0, 345, 346, 0, 0,
	347, 348, 0, 0, 349, 0, 350, 0, 0, 351,
	352, 354, 355, 353, 0, 356, 357, 359, 358, 0,
	0, 0, 0, 237, 360, 238, 361, 362, 0, 363,
	364, 0, 0, 365, 366, 0, 0, 367, 239, 0,
	368, 0, 240, 369, 370, 371, 372, 373, 374, 375,
	0, 376, 241, 377, 242, 378, 0, 379, 380, 381,
	382, 383, 243, 384, 385, 0, 386, 387, 388, 389,
	390, 0, 392, 393, 391, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 244, 403, 0, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 0, 423, 404, 405,
	424, 0, 425, 245, 426, 427, 0, 437, 428, 429,
	430, 406, 431, 435, 436, 432, 433, 434, 246, 0,
	438, 439, 0, 440, 441, 442, 443, 444, 305, 445,
	306, 446, 447, 0, 247, 248, 448, 0, 0, 449,
	450, 249, 250, 0, 451, 452, 453, 454, 0, 0,
	455, 456, 457, 459, 0, 460, 0, 458, 461, 462,
	463, 251, 252, 0, 0, 464, 253, 1615, 0, 486,
	0, 465, 466, 254, 467, 468, 469, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 256, 257, 258, 0,
	259, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	260, 261, 262, 215, 216, 263, 217, 264, 265, 218,
	0, 266, 267, 268, 269, 270, 271, 0, 0, 219,
	220, 221, 0, 272, 222, 0, 0, 0, 273, 274,
	275, 276, 277, 0, 279, 280, 281, 278, 0, 282,
	0, 283, 284, 0, 0, 285, 286, 287, 0, 0,
	0, 0, 0, 0, 0, 288, 289, 489, 290, 291,
	292, 223, 224, 0, 293, 0, 294, 0, 295, 0,
	0, 296, 297, 0, 298, 299, 0, 0, 0, 225,
	303, 300, 301, 304, 307, 302, 308, 309, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 310, 311, 228,
	312, 313, 0, 314, 0, 315, 0, 0, 0, 316,
	0, 317, 229, 0, 230, 0, 318, 319, 320, 321,
	322, 323, 231, 232, 0, 0, 325, 0, 0, 0,
	0, 324, 326, 333, 0, 0, 327, 233, 329, 328,
	330, 331, 332, 234, 0, 235, 0, 334, 0, 0,
	335, 336, 337, 0, 338, 339, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 236, 0, 345, 346, 0,
	0, 347, 348, 0, 0, 349, 0, 350, 0, 0,
	351, 352, 354, 355, 353, 0, 356, 357, 359, 358,
	0, 0, 0, 0, 237, 360, 238, 361, 362, 0,
	363, 364, 0, 0, 365, 366, 0, 0, 367, 239,
	0, 368, 0, 240, 369, 370, 371, 372, 373, 374,
	375, 0, 376, 241, 377, 242, 378, 0, 379, 380,
	381, 382, 383, 243, 384, 385, 0, 386, 387, 388,
	389, 390, 0, 392, 393, 391, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 244, 403, 0,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 0, 423, 404,
	405, 424, 0, 425, 245, 426, 427, 0, 437, 428,
	429, 430, 406, 431, 435, 436, 432, 433, 434, 246,
	0, 438, 439, 0, 440, 441, 442, 443, 444, 305,
	445, 306, 446, 447, 0, 247, 248, 448, 0, 0,
	449, 450, 249, 250, 0, 451, 452, 453, 454, 0,
	0, 455, 456, 457, 459, 0, 460, 0, 458, 461,
	462, 463, 251, 252, 0, 0, 464, 253, 618, 0,
	486, 0, 465, 466, 254, 467, 468, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 256, 257, 258,
	0, 259, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 260, 261, 262, 215, 216, 263, 217, 264, 265,
	218, 0, 266, 267, 268, 269, 270, 271, 0, 0,
	219, 220, 1173, 0, 272, 222, 0, 0, 0, 273,
	274, 275, 276, 277, 0, 279, 280, 281, 278, 0,
	282, 0, 283, 284, 0, 0, 285, 286, 287, 0,
	0, 0, 0, 0, 0, 0, 288, 289, 489, 290,
	291, 292, 223, 224, 0, 293, 0, 294, 0, 295,
	0, 0, 296, 297, 0, 298, 299, 0, 0, 0,
	225, 303, 300, 301, 304, 307, 302, 308, 309, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 310, 311,
	228, 312, 313, 0, 314, 0, 315, 0, 0, 0,
	316, 0, 317, 229, 0, 230, 0, 318, 319, 320,
	321, 322, 323, 231, 232, 0, 0, 325, 0, 0,
	0, 0, 324, 326, 333, 0, 0, 327, 233, 329,
	328, 330, 331, 332, 234, 0, 235, 0, 334, 0,
	0, 335, 336, 337, 0, 338, 339, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 236, 0, 345, 346,
	0, 0, 347, 348, 0, 0, 349, 0, 350, 0,
	0, 351, 352, 354, 355, 619, 0, 356, 357, 359,
	358, 0, 0, 0, 0, 237, 360, 238, 361, 362,
	0, 363, 364, 0, 0, 365, 366, 0, 0, 367,
	239, 0, 368, 0, 240, 369, 370, 371, 372, 373,
	374, 375, 0, 376, 241, 377, 242, 378, 0, 379,
	380, 381, 382, 383, 243, 384, 385, 0, 386, 387,
	388, 389, 390, 0, 392, 393, 391, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 244, 403,
	0, 407, 408, 615, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 0, 423,
	404, 405, 424, 0, 425, 245, 426, 427, 0, 437,
	428, 429, 430, 406, 431, 435, 436, 432, 433, 434,
	246, 0, 438, 439, 0, 440, 441, 442, 443, 444,
	305, 445, 306, 446, 447, 0, 614, 248, 448, 0,
	0, 449, 450, 249, 250, 0, 451, 452, 453, 454,
	0, 0, 455, 456, 457, 459, 0, 460, 0, 458,
	461, 462, 463, 251, 252, 0, 0, 464, 253, 1514,
	0, 486, 0, 465, 466, 254, 467, 468, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 256, 257,
	258, 0, 259, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 260, 261, 262, 215, 216, 263, 217, 264,
	265, 218, 0, 266, 267, 268, 269, 270, 271, 0,
	0, 219, 220, 221, 0, 272, 222, 0, 0, 0,
	273, 274, 275, 276, 277, 0, 279, 280, 281, 278,
	0, 282, 0, 283, 284, 0, 0, 285, 286, 287,
	0, 0, 0, 0, 0, 0, 0, 288, 289, 489,
	290, 291, 292, 223, 224, 0, 293, 0, 294, 0,
	295, 0, 0, 296, 297, 0, 298, 299, 0, 0,
	0, 225, 303, 300, 301, 304, 307, 302, 308, 309,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 310,
	311, 228, 312, 313, 0, 314, 0, 315, 0, 0,
	0, 316, 0, 317, 229, 0, 230, 0, 318, 319,
	320, 321, 322, 323, 1513, 232, 0, 0, 325, 0,
	0, 0, 0, 324, 326, 333, 0, 0, 327, 233,
	329, 328, 330, 331, 332, 234, 0, 235, 0, 334,
	0, 0, 335, 336, 337, 0, 338, 339, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 236, 0, 345,
	346, 0, 0, 347, 348, 0, 0, 349, 0, 350,
	0, 0, 351, 352, 354, 355, 353, 0, 356, 357,
	359, 358, 0, 0, 0, 0, 237, 360, 238, 361,
	362, 0, 363, 364, 0, 0, 365, 366, 0, 0,
	367, 239, 0, 368, 0, 240, 369, 370, 371, 372,
	373, 374, 375, 0, 376, 241, 377, 242, 378, 0,
	379, 380, 381, 382, 383, 243, 384, 385, 0, 386,
	387, 388, 389, 390, 0, 392, 393, 391, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 244,
	403, 0, 407, 408, 409, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 421, 422, 0,
	423, 404, 405, 424, 0, 425, 245, 426, 427, 0,
	437, 428, 429, 430, 406, 431, 435, 436, 432, 433,
	434, 246, 0, 438, 439, 0, 440, 441, 442, 443,
	444, 305, 445, 306, 446, 447, 0, 247, 248, 448,
	0, 0, 449, 450, 249, 250, 0, 451, 452, 453,
	454, 0, 0, 455, 456, 457, 459, 0, 460, 0,
	458, 461, 462, 463, 251, 252, 0, 0, 464, 253,
	618, 0, 486, 0, 465, 466, 254, 467, 468, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 255, 256,
	257, 258, 0, 259, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 260, 261, 262, 215, 216, 263, 217,
	264, 265, 218, 0, 266, 267, 268, 269, 270, 271,
	0, 0, 219, 220, 1173, 0, 272, 222, 0, 0,
	0, 273, 274, 275, 276, 277, 0, 279, 280, 281,
	278, 0, 282, 0, 283, 284, 0, 0, 285, 286,
	287, 0, 0, 0, 0, 0, 0, 0, 288, 289,
	489, 290, 291, 292, 223, 224, 0, 293, 0, 294,
	0, 295, 0, 0, 296, 297, 0, 298, 299, 0,
	0, 0, 225, 303, 300, 301, 304, 307, 302, 308,
	309, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 228, 312, 313, 0, 314, 0, 315, 0,
	0, 0, 316, 0, 317, 229, 0, 230, 0, 318,
	319, 320, 321, 322, 323, 231, 232, 0, 0, 325,
	0, 0, 0, 0, 324, 326, 333, 0, 0, 327,
	233, 329, 328, 330, 331, 332, 234, 0, 235, 0,
	334, 0, 0, 335, 336, 337, 0, 338, 339, 0,
	0, 340, 341, 342, 0, 344, 343, 0, 236, 0,
	345, 346, 0, 0, 347, 348, 0, 0, 349, 0,
	350, 0, 0, 351, 352, 354, 355, 619, 0, 356,
	357, 359, 358, 0, 0, 0, 0, 237, 360, 238,
	361, 362, 0, 363, 364, 0, 0, 365, 366, 0,
	0, 367, 239, 0, 368, 0, 240, 369, 370, 371,
	372, 373, 374, 375, 0, 376, 241, 377, 242, 378,
	0, 379, 380, 381, 382, 383, 243, 384, 385, 0,
	386, 387, 388, 389, 390, 0, 392, 393, 391, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	244, 403, 0, 407, 408, 615, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	0, 423, 404, 405, 424, 0, 425, 245, 426, 427,
	0, 437, 428, 429, 430, 406, 431, 435, 436, 432,
	433, 434, 246, 0, 438, 439, 0, 440, 441, 442,
	443, 444, 305, 445, 306, 446, 447, 0, 614, 248,
	448, 0, 0, 449, 1174, 249, 250, 0, 451, 452,
	453, 454, 0, 0, 455, 456, 457, 459, 0, 460,
	0, 458, 461, 462, 463, 251, 252, 0, 0, 464,
	253, 618, 0, 486, 0, 465, 466, 254, 467, 468,
	469, 0, 0, 0, 0, 0, 0, 0, 0, 255,
	256, 257, 258, 0, 259, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 260, 261, 262, 215, 216, 263,
	217, 264, 265, 218, 0, 266, 267, 268, 269, 270,
	271, 0, 0, 219, 220, 221, 0, 608, 222, 0,
	0, 0, 273, 274, 275, 276, 277, 0, 279, 280,
	281, 278, 0, 282, 0, 283, 284, 0, 0, 285,
	286, 287, 0, 0, 0, 0, 0, 0, 0, 288,
	289, 489, 290, 291, 292, 223, 224, 0, 293, 0,
	294, 0, 295, 0, 0, 296, 297, 0, 298, 299,
	0, 0, 0, 225, 303, 300, 301, 304, 307, 302,
	308, 309, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 310, 311, 228, 312, 313, 0, 314, 0, 315,
	0, 0, 0, 316, 0, 317, 229, 0, 230, 0,
	318, 319, 320, 321, 322, 323, 231, 232, 0, 0,
	325, 0, 0, 0, 0, 324, 326, 333, 0, 0,
	327, 233, 329, 328, 330, 331, 332, 234, 0, 235,
	0, 334, 0, 0, 335, 336, 337, 0, 338, 339,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 236,
	0, 345, 346, 0, 0, 347, 348, 0, 0, 349,
	0, 350, 0, 0, 351, 352, 354, 355, 619, 0,
	356, 357, 359, 358, 0, 0, 0, 0, 237, 360,
	238, 361, 362, 0, 363, 364, 0, 0, 365, 366,
	0, 0, 367, 239, 0, 368, 0, 240, 369, 370,
	371, 372, 373, 374, 375, 0, 376, 241, 377, 242,
	378, 0, 379, 380, 381, 382, 383, 243, 384, 385,
	0, 386, 387, 388, 389, 390, 0, 392, 393, 391,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 244, 403, 0, 407, 408, 615, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 1147,
	422, 0, 423, 404, 405, 424, 0, 425, 245, 426,
	427, 0, 437, 428, 429, 430, 406, 431, 435, 436,
	432, 433, 434, 246, 0, 438, 439, 0, 440, 441,
	442, 443, 444, 305, 445, 306, 446, 447, 0, 614,
	248, 448, 0, 0, 449, 450, 249, 250, 0, 451,
	452, 453, 454, 0, 0, 455, 456, 457, 459, 0,
	460, 0, 458, 461, 462, 463, 251, 252, 0, 0,
	464, 253, 1115, 0, 486, 0, 465, 466, 254, 467,
	468, 469, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 256, 257, 258, 0, 259, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 260, 261, 262, 215, 216,
	263, 217, 264, 265, 218, 0, 266, 267, 268, 269,
	270, 271, 0, 0, 219, 220, 221, 0, 272, 222,
	0, 0, 0, 273, 274, 275, 276, 277, 0, 279,
	280, 281, 278, 0, 282, 0, 283, 284, 0, 0,
	285, 286, 287, 0, 0, 0, 0, 0, 0, 0,
	288, 289, 489, 290, 291, 292, 223, 224, 0, 293,
	0, 294, 0, 295, 0, 0, 296, 297, 0, 298,
	299, 0, 0, 0, 225, 303, 300, 301, 304, 307,
	302, 308, 309, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 310, 311, 228, 312, 313, 0, 314, 0,
	315, 0, 0, 0, 316, 0, 317, 229, 0, 230,
	0, 318, 319, 320, 321, 322, 323, 1114, 232, 0,
	0, 325, 0, 0, 0, 0, 324, 326, 333, 0,
	0, 327, 233, 329, 328, 330, 331, 332, 234, 0,
	235, 0, 334, 0, 0, 335, 336, 337, 0, 338,
	339, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	236, 0, 345, 346, 0, 0, 347, 348, 0, 0,
	349, 0, 350, 0, 0, 351, 352, 354, 355, 353,
	0, 356, 357, 359, 358, 0, 0, 0, 0, 237,
	360, 238, 361, 362, 0, 363, 364, 0, 0, 365,
	366, 0, 0, 367, 239, 0, 368, 0, 240, 369,
	370, 371, 372, 373, 374, 375, 0, 376, 241, 377,
	242, 378, 0, 379, 380, 381, 382, 383, 243, 384,
	385, 0, 386, 387, 388, 389, 390, 0, 392, 393,
	391, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 244, 403, 0, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 0, 423, 404, 405, 424, 0, 425, 245,
	426, 427, 0, 437, 428, 429, 430, 406, 431, 435,
	436, 432, 433, 434, 246, 0, 438, 439, 0, 440,
	441, 442, 443, 444, 305, 445, 306, 446, 447, 0,
	247, 248, 448, 0, 0, 449, 450, 249, 250, 0,
	451, 452, 453, 454, 0, 0, 455, 456, 457, 459,
	0, 460, 0, 458, 461, 462, 463, 251, 252, 0,
	0, 464, 253, 1111, 0, 486, 0, 465, 466, 254,
	467, 468, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 257, 258, 0, 259, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 260, 261, 262, 215,
	216, 263, 217, 264, 265, 218, 0, 266, 267, 268,
	269, 270, 271, 0, 0, 219, 220, 221, 0, 272,
	222, 0, 0, 0, 273, 274, 275, 276, 277, 0,
	279, 280, 281, 278, 0, 282, 0, 283, 284, 0,
	0, 285, 286, 287, 0, 0, 0, 0, 0, 0,
	0, 288, 289, 489, 290, 291, 292, 223, 224, 0,
	293, 0, 294, 0, 295, 0, 0, 296, 297, 0,
	298, 299, 0, 0, 0, 225, 303, 300, 301, 304,
	307, 302, 308, 309, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 310, 311, 228, 312, 313, 0, 314,
	0, 315, 0, 0, 0, 316, 0, 317, 229, 0,
	230, 0, 318, 319, 320, 321, 322, 323, 1110, 232,
	0, 0, 325, 0, 0, 0, 0, 324, 326, 333,
	0, 0, 327, 233, 329, 328, 330, 331, 332, 234,
	0, 235, 0, 334, 0, 0, 335, 336, 337, 0,
	338, 339, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 236, 0, 345, 346, 0, 0, 347, 348, 0,
	0, 349, 0, 350, 0, 0, 351, 352, 354, 355,
	353, 0, 356, 357, 359, 358, 0, 0, 0, 0,
	237, 360, 238, 361, 362, 0, 363, 364, 0, 0,
	365, 366, 0, 0, 367, 239, 0, 368, 0, 240,
	369, 370, 371, 372, 373, 374, 375, 0, 376, 241,
	377, 242, 378, 0, 379, 380, 381, 382, 383, 243,
	384, 385, 0, 386, 387, 388, 389, 390, 0, 392,
	393, 391, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 244, 403, 0, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 0, 423, 404, 405, 424, 0, 425,
	245, 426, 427, 0, 437, 428, 429, 430, 406, 431,
	435, 436, 432, 433, 434, 246, 0, 438, 439, 0,
	440, 441, 442, 443, 444, 305, 445, 306, 446, 447,
	0, 247, 248, 448, 0, 0, 449, 450, 249, 250,
	0, 451, 452, 453, 454, 0, 0, 455, 456, 457,
	459, 0, 460, 0, 458, 461, 462, 463, 251, 252,
	0, 0, 464, 253, 1108, 0, 486, 0, 465, 466,
	254, 467, 468, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 256, 257, 258, 0, 259, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 260, 261, 262,
	215, 216, 263, 217, 264, 265, 218, 0, 266, 267,
	268, 269, 270, 271, 0, 0, 219, 220, 221, 0,
	272, 222, 0, 0, 0, 273, 274, 275, 276, 277,
	0, 279, 280, 281, 278, 0, 282, 0, 283, 284,
	0, 0, 285, 286, 287, 0, 0, 0, 0, 0,
	0, 0, 288, 289, 489, 290, 291, 292, 223, 224,
	0, 293, 0, 294, 0, 295, 0, 0, 296, 297,
	0, 298, 299, 0, 0, 0, 225, 303, 300, 301,
	304, 307, 302, 308, 309, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 310, 311, 228, 312, 313, 0,
	314, 0, 315, 0, 0, 0, 316, 0, 317, 229,
	0, 230, 0, 318, 319, 320, 321, 322, 323, 1107,
	232, 0, 0, 325, 0, 0, 0, 0, 324, 326,
	333, 0, 0, 327, 233, 329, 328, 330, 331, 332,
	234, 0, 235, 0, 334, 0, 0, 335, 336, 337,
	0, 338, 339, 0, 0, 340, 341, 342, 0, 344,
	343, 0, 236, 0, 345, 346, 0, 0, 347, 348,
	0, 0, 349, 0, 350, 0, 0, 351, 352, 354,
	355, 353, 0, 356, 357, 359, 358, 0, 0, 0,
	0, 237, 360, 238, 361, 362, 0, 363, 364, 0,
	0, 365, 366, 0, 0, 367, 239, 0, 368, 0,
	240, 369, 370, 371, 372, 373, 374, 375, 0, 376,
	241, 377, 242, 378, 0, 379, 380, 381, 382, 383,
	243, 384, 385, 0, 386, 387, 388, 389, 390, 0,
	392, 393, 391, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 244, 403, 0, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 0, 423, 404, 405, 424, 0,
	425, 245, 426, 427, 0, 437, 428, 429, 430, 406,
	431, 435, 436, 432, 433, 434, 246, 0, 438, 439,
	0, 440, 441, 442, 443, 444, 305, 445, 306, 446,
	447, 0, 247, 248, 448, 0, 0, 449, 450, 249,
	250, 0, 451, 452, 453, 454, 0, 0, 455, 456,
	457, 459, 0, 460, 0, 458, 461, 462, 463, 251,
	252, 0, 0, 464, 253, 1105, 0, 486, 0, 465,
	466, 254, 467, 468, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 256, 257, 258, 0, 259, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 260, 261,
	262, 215, 216, 263, 217, 264, 265, 218, 0, 266,
	267, 268, 269, 270, 271, 0, 0, 219, 220, 221,
	0, 272, 222, 0, 0, 0, 273, 274, 275, 276,
	277, 0, 279, 280, 281, 278, 0, 282, 0, 283,
	284, 0, 0, 285, 286, 287, 0, 0, 0, 0,
	0, 0, 0, 288, 289, 489, 290, 291, 292, 223,
	224, 0, 293, 0, 294, 0, 295, 0, 0, 296,
	297, 0, 298, 299, 0, 0, 0, 225, 303, 300,
	301, 304, 307, 302, 308, 309, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 228, 312, 313,
	0, 314, 0, 315, 0, 0, 0, 316, 0, 317,
	229, 0, 230, 0, 318, 319, 320, 321, 322, 323,
	1104, 232, 0, 0, 325, 0, 0, 0, 0, 324,
	326, 333, 0, 0, 327, 233, 329, 328, 330, 331,
	332, 234, 0, 235, 0, 334, 0, 0, 335, 336,
	337, 0, 338, 339, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 236, 0, 345, 346, 0, 0, 347,
	348, 0, 0, 349, 0, 350, 0, 0, 351, 352,
	354, 355, 353, 0, 356, 357, 359, 358, 0, 0,
	0, 0, 237, 360, 238, 361, 362, 0, 363, 364,
	0, 0, 365, 366, 0, 0, 367, 239, 0, 368,
	0, 240, 369, 370, 371, 372, 373, 374, 375, 0,
	376, 241, 377, 242, 378, 0, 379, 380, 381, 382,
	383, 243, 384, 385, 0, 386, 387, 388, 389, 390,
	0, 392, 393, 391, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 244, 403, 0, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 0, 423, 404, 405, 424,
	0, 425, 245, 426, 427, 0, 437, 428, 429, 430,
	406, 431, 435, 436, 432, 433, 434, 246, 0, 438,
	439, 0, 440, 441, 442, 443, 444, 305, 445, 306,
	446, 447, 0, 247, 248, 448, 0, 0, 449, 450,
	249, 250, 0, 451, 452, 453, 454, 0, 0, 455,
	456, 457, 459, 0, 460, 0, 458, 461, 462, 463,
	251, 252, 0, 0, 464, 253, 1101, 0, 486, 0,
	465, 466, 254, 467, 468, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 256, 257, 258, 0, 259,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 260,
	261, 262, 215, 216, 263, 217, 264, 265, 218, 0,
	266, 267, 268, 269, 270, 271, 0, 0, 219, 220,
	221, 0, 272, 222, 0, 0, 0, 273, 274, 275,
	276, 277, 0, 279, 280, 281, 278, 0, 282, 0,
	283, 284, 0, 0, 285, 286, 287, 0, 0, 0,
	0, 0, 0, 0, 288, 289, 489, 290, 291, 292,
	223, 224, 0, 293, 0, 294, 0, 295, 0, 0,
	296, 297, 0, 298, 299, 0, 0, 0, 225, 303,
	300, 301, 304, 307, 302, 308, 309, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 310, 311, 228, 312,
	313, 0, 314, 0, 315, 0, 0, 0, 316, 0,
	317, 229, 0, 230, 0, 318, 319, 320, 321, 322,
	323, 1100, 232, 0, 0, 325, 0, 0, 0, 0,
	324, 326, 333, 0, 0, 327, 233, 329, 328, 330,
	331, 332, 234, 0, 235, 0, 334, 0, 0, 335,
	336, 337, 0, 338, 339, 0, 0, 340, 341, 342,
	0, 344, 343, 0, 236, 0, 345, 346, 0, 0,
	347, 348, 0, 0, 349, 0, 350, 0, 0, 351,
	352, 354, 355, 353, 0, 356, 357, 359, 358, 0,
	0, 0, 0, 237, 360, 238, 361, 362, 0, 363,
	364, 0, 0, 365, 366, 0, 0, 367, 239, 0,
	368, 0, 240, 369, 370, 371, 372, 373, 374, 375,
	0, 376, 241, 377, 242, 378, 0, 379, 380, 381,
	382, 383, 243, 384, 385, 0, 386, 387, 388, 389,
	390, 0, 392, 393, 391, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 244, 403, 0, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 0, 423, 404, 405,
	424, 0, 425, 245, 426, 427, 0, 437, 428, 429,
	430, 406, 431, 435, 436, 432, 433, 434, 246, 0,
	438, 439, 0, 440, 441, 442, 443, 444, 305, 445,
	306, 446, 447, 0, 247, 248, 448, 0, 0, 449,
	450, 249, 250, 0, 451, 452, 453, 454, 0, 0,
	455, 456, 457, 459, 0, 460, 0, 458, 461, 462,
	463, 251, 252, 486, 0, 464, 253, 0, 0, 0,
	0, 465, 466, 254, 467, 468, 469, 0, 0, 255,
	256, 257, 258, 1089, 259, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 260, 261, 262, 215, 216, 263,
	217, 264, 265, 218, 0, 266, 267, 268, 269, 270,
	271, 0, 0, 219, 220, 221, 0, 272, 222, 0,
	0, 0, 273, 274, 275, 276, 277, 0, 279, 280,
	281, 278, 0, 282, 0, 283, 284, 0, 0, 285,
	286, 287, 0, 0, 0, 0, 0, 0, 0, 288,
	289, 489, 290, 291, 292, 223, 224, 0, 293, 0,
	294, 0, 295, 0, 0, 296, 297, 0, 298, 299,
	0, 0, 0, 225, 303, 300, 301, 304, 307, 302,
	308, 309, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 310, 311, 228, 312, 313, 0, 314, 0, 315,
	0, 0, 0, 316, 0, 317, 229, 0, 230, 0,
	318, 319, 320, 321, 322, 323, 231, 232, 0, 0,
	325, 0, 0, 0, 0, 324, 326, 333, 0, 0,
	327, 233, 329, 328, 330, 331, 332, 234, 0, 235,
	0, 334, 0, 0, 335, 336, 337, 0, 338, 339,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 236,
	0, 345, 346, 0, 0, 347, 348, 0, 0, 349,
	0, 350, 0, 0, 351, 352, 354, 355, 353, 0,
	356, 357, 359, 358, 0, 0, 0, 0, 237, 360,
	238, 361, 362, 0, 363, 364, 0, 0, 365, 366,
	0, 0, 367, 239, 0, 368, 0, 240, 369, 370,
	371, 372, 373, 374, 375, 0, 376, 241, 377, 242,
	378, 0, 379, 380, 381, 382, 383, 243, 384, 385,
	0, 386, 387, 388, 389, 390, 0, 392, 393, 391,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 244, 403, 0, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 0, 423, 404, 405, 424, 0, 425, 245, 426,
	427, 0, 437, 428, 429, 430, 406, 431, 435, 436,
	432, 433, 434, 246, 0, 438, 439, 0, 440, 441,
	442, 443, 444, 305, 445, 306, 446, 447, 0, 247,
	248, 448, 0, 0, 449, 450, 249, 250, 0, 451,
	452, 453, 454, 0, 0, 455, 456, 457, 459, 0,
	460, 0, 458, 461, 462, 463, 251, 252, 0, 0,
	464, 253, 1087, 0, 486, 0, 465, 466, 254, 467,
	468, 469, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 256, 257, 258, 0, 259, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 260, 261, 262, 215, 216,
	263, 217, 264, 265, 218, 0, 266, 267, 268, 269,
	270, 271, 0, 0, 219, 220, 221, 0, 272, 222,
	0, 0, 0, 273, 274, 275, 276, 277, 0, 279,
	280, 281, 278, 0, 282, 0, 283, 284, 0, 0,
	285, 286, 287, 0, 0, 0, 0, 0, 0, 0,
	288, 289, 489, 290, 291, 292, 223, 224, 0, 293,
	0, 294, 0, 295, 0, 0, 296, 297, 0, 298,
	299, 0, 0, 0, 225, 303, 300, 301, 304, 307,
	302, 308, 309, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 310, 311, 228, 312, 313, 0, 314, 0,
	315, 0, 0, 0, 316, 0, 317, 229, 0, 230,
	0, 318, 319, 320, 321, 322, 323, 1086, 232, 0,
	0, 325, 0, 0, 0, 0, 324, 326, 333, 0,
	0, 327, 233, 329, 328, 330, 331, 332, 234, 0,
	235, 0, 334, 0, 0, 335, 336, 337, 0, 338,
	339, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	236, 0, 345, 346, 0, 0, 347, 348, 0, 0,
	349, 0, 350, 0, 0, 351, 352, 354, 355, 353,
	0, 356, 357, 359, 358, 0, 0, 0, 0, 237,
	360, 238, 361, 362, 0, 363, 364, 0, 0, 365,
	366, 0, 0, 367, 239, 0, 368, 0, 240, 369,
	370, 371, 372, 373, 374, 375, 0, 376, 241, 377,
	242, 378, 0, 379, 380, 381, 382, 383, 243, 384,
	385, 0, 386, 387, 388, 389, 390, 0, 392, 393,
	391, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 244, 403, 0, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 0, 423, 404, 405, 424, 0, 425, 245,
	426, 427, 0, 437, 428, 429, 430, 406, 431, 435,
	436, 432, 433, 434, 246, 0, 438, 439, 0, 440,
	441, 442, 443, 444, 305, 445, 306, 446, 447, 0,
	247, 248, 448, 0, 0, 449, 450, 249, 250, 0,
	451, 452, 453, 454, 0, 0, 455, 456, 457, 459,
	0, 460, 0, 458, 461, 462, 463, 251, 252, 0,
	0, 464, 253, 1081, 0, 486, 0, 465, 466, 254,
	467, 468, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 257, 258, 0, 259, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 260, 261, 262, 215,
	216, 263, 217, 264, 265, 218, 0, 266, 267, 268,
	269, 270, 271, 0, 0, 219, 220, 221, 0, 272,
	222, 0, 0, 0, 273, 274, 275, 276, 277, 0,
	279, 280, 281, 278, 0, 282, 0, 283, 284, 0,
	0, 285, 286, 287, 0, 0, 0, 0, 0, 0,
	0, 288, 289, 489, 290, 291, 292, 223, 224, 0,
	293, 0, 294, 0, 295, 0, 0, 296, 297, 0,
	298, 299, 0, 0, 0, 225, 303, 300, 301, 304,
	307, 302, 308, 309, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 310, 311, 228, 312, 313, 0, 314,
	0, 315, 0, 0, 0, 316, 0, 317, 229, 0,
	230, 0, 318, 319, 320, 321, 322, 323, 231, 232,
	0, 0, 325, 0, 0, 0, 0, 324, 326, 333,
	0, 0, 327, 233, 329, 328, 330, 331, 332, 234,
	0, 235, 0, 334, 0, 0, 335, 336, 337, 0,
	338, 339, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 236, 0, 345, 346, 0, 0, 347, 348, 0,
	0, 349, 0, 350, 0, 0, 351, 352, 354, 355,
	353, 0, 356, 357, 359, 358, 0, 0, 0, 0,
	237, 360, 238, 361, 362, 0, 363, 364, 0, 0,
	365, 366, 0, 0, 367, 239, 0, 368, 0, 240,
	369, 370, 371, 372, 373, 374, 375, 0, 376, 241,
	377, 242, 378, 0, 379, 380, 381, 382, 383, 243,
	384, 385, 0, 386, 387, 388, 389, 390, 0, 392,
	393, 391, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 244, 403, 0, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 0, 423, 404, 405, 424, 0, 425,
	245, 426, 427, 0, 437, 428, 429, 430, 406, 431,
	435, 436, 432, 433, 434, 246, 0, 438, 439, 0,
	440, 441, 442, 443, 444, 305, 445, 306, 446, 447,
	0, 247, 248, 448, 0, 0, 449, 450, 249, 250,
	0, 451, 452, 453, 454, 0, 0, 455, 456, 457,
	459, 0, 460, 0, 458, 461, 462, 463, 251, 252,
	0, 0, 464, 253, 1072, 0, 486, 0, 465, 466,
	254, 467, 468, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 256, 257, 258, 0, 259, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 260, 261, 262,
	215, 216, 263, 217, 264, 265, 218, 0, 266, 267,
	268, 269, 270, 271, 0, 0, 219, 220, 221, 0,
	272, 222, 0, 0, 0, 273, 274, 275, 276, 277,
	0, 279, 280, 281, 278, 0, 282, 0, 283, 284,
	0, 0, 285, 286, 287, 0, 0, 0, 0, 0,
	0, 0, 288, 289, 489, 290, 291, 292, 223, 224,
	0, 293, 0, 294, 0, 295, 0, 0, 296, 297,
	0, 298, 299, 0, 0, 0, 225, 303, 300, 301,
	304, 307, 302, 308, 309, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 310, 311, 228, 312, 313, 0,
	314, 0, 315, 0, 0, 0, 316, 0, 317, 229,
	0, 230, 0, 318, 319, 320, 321, 322, 323, 1071,
	232, 0, 0, 325, 0, 0, 0, 0, 324, 326,
	333, 0, 0, 327, 233, 329, 328, 330, 331, 332,
	234, 0, 235, 0, 334, 0, 0, 335, 336, 337,
	0, 338, 339, 0, 0, 340, 341, 342, 0, 344,
	343, 0, 236, 0, 345, 346, 0, 0, 347, 348,
	0, 0, 349, 0, 350, 0, 0, 351, 352, 354,
	355, 353, 0, 356, 357, 359, 358, 0, 0, 0,
	0, 237, 360, 238, 361, 362, 0, 363, 364, 0,
	0, 365, 366, 0, 0, 367, 239, 0, 368, 0,
	240, 369, 370, 371, 372, 373, 374, 375, 0, 376,
	241, 377, 242, 378, 0, 379, 380, 381, 382, 383,
	243, 384, 385, 0, 386, 387, 388, 389, 390, 0,
	392, 393, 391, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 244, 403, 0, 407, 408, 409,
	410, 411, 412, 413, 0, 419, 420, 414, 416, 417,
	418, 415, 421, 422, 0, 423, 404, 405, 424, 0,
	425, 245, 426, 427, 0, 437, 428, 429, 430, 406,
	431, 435, 436, 432, 433, 434, 246, 0, 438, 439,
	0, 440, 441, 442, 443, 444, 305, 445, 306, 446,
	447, 0, 247, 248, 448, 0, 0, 449, 450, 249,
	250, 0, 451, 452, 453, 454, 0, 0, 455, 456,
	457, 459, 0, 460, 0, 458, 461, 462, 463, 251,
	252, 0, 0, 464, 253, 1067, 0, 486, 0, 465,
	466, 254, 467, 468, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 256, 257, 258, 0, 259, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 260, 261,
	262, 215, 216, 263, 217, 264, 265, 218, 0, 266,
	267, 268, 269, 270, 271, 0, 0, 219, 220, 221,
	0, 272, 222, 0, 0, 0, 273, 274, 275, 276,
	277, 0, 279, 280, 281, 278, 0, 282, 0, 283,
	284, 0, 0, 285, 286, 287, 0, 0, 0, 0,
	0, 0, 0, 288, 289, 489, 290, 291, 292, 223,
	224, 0, 293, 0, 294, 0, 295, 0, 0, 296,
	297, 0, 298, 299, 0, 0, 0, 225, 303, 300,
	301, 304, 307, 302, 308, 309, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 310, 311, 228, 312, 313,
	0, 314, 0, 315, 0, 0, 0, 316, 0, 317,
	229, 0, 230, 0, 318, 319, 320, 321, 322, 323,
	231, 232, 0, 0, 325, 0, 0, 0, 0, 324,
	326, 333, 0, 0, 327, 233, 329, 328, 330, 331,
	332, 234, 0, 235, 0, 334, 0, 0, 335, 336,
	337, 0, 338, 339, 0, 0, 340, 341, 342, 0,
	344, 343, 0, 236, 0, 345, 346, 0, 0, 347,
	348, 0, 0, 349, 0, 350, 0, 0, 351, 352,
	354, 355, 353, 0, 356, 357, 359, 358, 0, 0,
	0, 0, 237, 360, 238, 361, 362, 0, 363, 364,
	0, 0, 365, 366, 0, 0, 367, 239, 0, 368,
	0, 240, 369, 370, 371, 372, 373, 374, 375, 0,
	376, 241, 377, 242, 378, 0, 379, 380, 381, 382,
	383, 243, 384, 385, 0, 386, 387, 388, 389, 390,
	0, 392, 393, 391, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 244, 403, 0, 407, 408,
	409, 410, 411, 412, 413, 0, 419, 420, 414, 416,
	417, 418, 415, 421, 422, 0, 423, 404, 405, 424,
	0, 425, 245, 426, 427, 0, 437, 428, 429, 430,
	406, 431, 435, 436, 432, 433, 434, 246, 0, 438,
	439, 0, 440, 441, 442, 443, 444, 305, 445, 306,
	446, 447, 0, 247, 248, 448, 0, 0, 449, 450,
	249, 250, 0, 451, 452, 453, 454, 0, 0, 455,
	456, 457, 459, 0, 460, 0, 458, 461, 462, 463,
	251, 252, 0, 0, 464, 253, 1063, 0, 486, 0,
	465, 466, 254, 467, 468, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 256, 257, 258, 0, 259,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 260,
	261, 262, 215, 216, 263, 217, 264, 265, 218, 0,
	266, 267, 268, 269, 270, 271, 0, 0, 219, 220,
	221, 0, 272, 222, 0, 0, 0, 273, 274, 275,
	276, 277, 0, 279, 280, 281, 278, 0, 282, 0,
	283, 284, 0, 0, 285, 286, 287, 0, 0, 0,
	0, 0, 0, 0, 288, 289, 489, 290, 291, 292,
	223, 224, 0, 293, 0, 294, 0, 295, 0, 0,
	296, 297, 0, 298, 299, 0, 0, 0, 225, 303,
	300, 301, 304, 307, 302, 308, 309, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 310, 311, 228, 312,
	313, 0, 314, 0, 315, 0, 0, 0, 316, 0,
	317, 229, 0, 230, 0, 318, 319, 320, 321, 322,
	323, 1065, 232, 0, 0, 325, 0, 0, 0, 0,
	324, 326, 333, 0, 0, 327, 233, 329, 328, 330,
	331, 332, 234, 0, 235, 0, 334, 0, 0, 335,
	336, 337, 0, 338, 339, 0, 0, 340, 341, 342,
	0, 344, 343, 0, 236, 0, 345, 346, 0, 0,
	347, 348, 0, 0, 349, 0, 350, 0, 0, 351,
	352, 354, 355, 353, 0, 356, 357, 359, 358, 0,
	0, 0, 0, 237, 360, 238, 361, 362, 0, 363,
	364, 0, 0, 365, 366, 0, 0, 367, 239, 0,
	368, 0, 240, 369, 370, 371, 372, 373, 374, 375,
	0, 376, 241, 377, 242, 378, 0, 379, 380, 381,
	382, 383, 243, 384, 385, 0, 386, 387, 388, 389,
	390, 0, 392, 393, 391, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 244, 403, 0, 407,
	408, 409, 410, 411, 412, 413, 0, 419, 420, 414,
	416, 417, 418, 415, 421, 422, 0, 423, 404, 405,
	424, 0, 425, 245, 426, 427, 0, 437, 428, 429,
	430, 406, 431, 435, 436, 432, 433, 434, 246, 0,
	438, 439, 0, 440, 441, 442, 443, 444, 305, 445,
	306, 446, 447, 0, 247, 248, 448, 0, 0, 449,
	450, 249, 250, 0, 451, 452, 453, 454, 0, 0,
	455, 456, 457, 459, 0, 460, 0, 458, 461, 462,
	463, 251, 252, 0, 0, 464, 253, 948, 0, 486,
	0, 465, 466, 254, 467, 468, 469, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 256, 257, 258, 0,
	259, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	260, 261, 262, 215, 216, 263, 217, 264, 265, 218,
	0, 266, 267, 268, 269, 270, 271, 0, 0, 219,
	220, 221, 0, 272, 222, 0, 0, 0, 273, 274,
	275, 276, 277, 0, 279, 280, 281, 278, 0, 282,
	0, 283, 284, 0, 0, 285, 286, 287, 0, 0,
	0, 0, 0, 0, 0, 288, 289, 489, 290, 291,
	292, 223, 224, 0, 293, 0, 294, 0, 295, 0,
	0, 296, 297, 0, 298, 299, 0, 0, 0, 225,
	303, 300, 301, 304, 307, 302, 308, 309, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 310, 311, 228,
	312, 313, 0, 314, 0, 315, 0, 0, 0, 316,
	0, 317, 229, 0, 230, 0, 318, 319, 320, 321,
	322, 323, 950, 232, 0, 0, 325, 0, 0, 0,
	0, 324, 326, 333, 0, 0, 327, 233, 329, 328,
	330, 331, 332, 234, 0, 235, 0, 334, 0, 0,
	335, 336, 337, 0, 338, 339, 0, 0, 340, 341,
	342, 0, 344, 343, 0, 236, 0, 345, 346, 0,
	0, 347, 348, 0, 0, 349, 0, 350, 0, 0,
	351, 352, 354, 355, 353, 0, 356, 357, 359, 358,
	0, 0, 0, 0, 237, 360, 238, 361, 362, 0,
	363, 364, 0, 0, 365, 366, 0, 0, 367, 239,
	0, 368, 0, 240, 369, 370, 371, 372, 373, 374,
	375, 0, 376, 241, 377, 242, 378, 0, 379, 380,
	381, 382, 383, 243, 384, 385, 0, 386, 387, 388,
	389, 390, 0, 392, 393, 391, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 244, 403, 0,
	407, 408, 409, 410, 411, 412, 413, 0, 419, 420,
	414, 416, 417, 418, 415, 421, 422, 0, 423, 404,
	405, 424, 0, 425, 245, 426, 427, 0, 437, 428,
	429, 430, 406, 431, 435, 436, 432, 433, 434, 246,
	0, 438, 439, 0, 440, 441, 442, 443, 444, 305,
	445, 306, 446, 447, 0, 247, 248, 448, 0, 0,
	449, 450, 249, 250, 0, 451, 452, 453, 454, 0,
	0, 455, 456, 457, 459, 0, 460, 0, 458, 461,
	462, 463, 251, 252, 0, 0, 464, 253, 945, 0,
	486, 0, 465, 466, 254, 467, 468, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 256, 257, 258,
	0, 259, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 260, 261, 262, 215, 216, 263, 217, 264, 265,
	218, 0, 266, 267, 268, 269, 270, 271, 0, 0,
	219, 220, 221, 0, 272, 222, 0, 0, 0, 273,
	274, 275, 276, 277, 0, 279, 280, 281, 278, 0,
	282, 0, 283, 284, 0, 0, 285, 286, 287, 0,
	0, 0, 0, 0, 0, 0, 288, 289, 489, 290,
	291, 292, 223, 224, 0, 293, 0, 294, 0, 295,
	0, 0, 296, 297, 0, 298, 299, 0, 0, 0,
	225, 303, 300, 301, 304, 307, 302, 308, 309, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 310, 311,
	228, 312, 313, 0, 314, 0, 315, 0, 0, 0,
	316, 0, 317, 229, 0, 230, 0, 318, 319, 320,
	321, 322, 323, 231, 232, 0, 0, 325, 0, 0,
	0, 0, 324, 326, 333, 0, 0, 327, 233, 329,
	328, 330, 331, 332, 234, 0, 235, 0, 334, 0,
	0, 335, 336, 337, 0, 338, 339, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 236, 0, 345, 346,
	0, 0, 347, 348, 0, 0, 349, 0, 350, 0,
	0, 351, 352, 354, 355, 353, 0, 356, 357, 359,
	358, 0, 0, 0, 0, 237, 360, 238, 361, 362,
	0, 363, 364, 0, 0, 365, 366, 0, 0, 367,
	239, 0, 368, 0, 240, 369, 370, 371, 372, 373,
	374, 375, 0, 376, 241, 377, 242, 378, 0, 379,
	380, 381, 382, 383, 243, 384, 385, 0, 386, 387,
	388, 389, 390, 0, 392, 393, 391, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 244, 403,
	0, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 0, 423,
	404, 405, 424, 0, 425, 245, 426, 427, 0, 437,
	428, 429, 430, 406, 431, 435, 436, 432, 433, 434,
	246, 0, 438, 439, 0, 440, 441, 442, 443, 444,
	305, 445, 306, 446, 447, 0, 247, 248, 448, 0,
	0, 449, 450, 249, 250, 0, 451, 452, 453, 454,
	0, 0, 455, 456, 457, 459, 0, 460, 0, 458,
	461, 462, 463, 251, 252, 0, 0, 464, 253, 618,
	0, 486, 0, 465, 466, 254, 467, 468, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 256, 257,
	258, 0, 259, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 260, 261, 262, 215, 216, 263, 217, 264,
	265, 218, 0, 266, 267, 268, 269, 270, 271, 0,
	0, 219, 220, 221, 0, 608, 222, 0, 0, 0,
	273, 274, 275, 276, 277, 0, 279, 280, 281, 278,
	0, 282, 0, 283, 284, 0, 0, 285, 286, 287,
	0, 0, 0, 0, 0, 0, 0, 288, 289, 489,
	290, 291, 292, 223, 224, 0, 293, 0, 294, 0,
	295, 0, 0, 296, 297, 0, 298, 299, 0, 0,
	0, 225, 303, 300, 301, 304, 307, 302, 308, 309,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 310,
	311, 228, 312, 313, 0, 314, 0, 315, 0, 0,
	0, 316, 0, 317, 229, 0, 230, 0, 318, 319,
	320, 321, 322, 323, 231, 232, 0, 0, 325, 0,
	0, 0, 0, 324, 326, 333, 0, 0, 327, 233,
	329, 328, 330, 331, 332, 234, 0, 235, 0, 334,
	0, 0, 335, 336, 337, 0, 338, 339, 0, 0,
	340, 341, 342, 0, 344, 343, 0, 236, 0, 345,
	346, 0, 0, 347, 607, 0, 0, 349, 0, 350,
	0, 0, 351, 352, 354, 355, 619, 0, 356, 357,
	359, 358, 0, 0, 0, 0, 237, 360, 238, 361,
	362, 0, 363, 364, 0, 0, 365, 366, 0, 0,
	367, 239, 0, 368, 0, 240, 369, 370, 371, 372,
	373, 374, 375, 0, 376, 241, 377, 242, 378, 0,
	379, 380, 381, 382, 383, 243, 384, 385, 0, 386,
	387, 388, 389, 390, 0, 392, 393, 391, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 609,
	403, 0, 407, 408, 615, 410, 411, 412, 413, 0,
	419, 420, 414, 416, 417, 418, 415, 610, 422, 0,
	423, 404, 405, 424, 0, 425, 245, 426, 427, 0,
	437, 428, 429, 430, 406, 431, 435, 436, 432, 433,
	434, 246, 0, 438, 439, 0, 440, 441, 442, 443,
	444, 305, 445, 306, 446, 447, 0, 614, 248, 448,
	0, 0, 449, 612, 249, 250, 0, 451, 452, 453,
	454, 0, 0, 455, 456, 457, 459, 0, 460, 0,
	458, 461, 462, 463, 251, 252, 0, 0, 464, 253,
	598, 0, 486, 0, 465, 466, 254, 467, 468, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 255, 256,
	257, 258, 0, 259, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 260, 261, 262, 215, 216, 263, 217,
	264, 265, 218, 0, 266, 267, 268, 269, 270, 271,
	0, 0, 219, 220, 221, 0, 272, 222, 0, 0,
	0, 273, 274, 275, 276, 277, 0, 279, 280, 281,
	278, 0, 282, 0, 283, 284, 0, 0, 285, 286,
	287, 0, 0, 0, 0, 0, 0, 0, 288, 289,
	489, 290, 291, 292, 223, 224, 0, 293, 0, 294,
	0, 295, 0, 0, 296, 297, 0, 298, 299, 0,
	0, 0, 225, 303, 300, 301, 304, 307, 302, 308,
	309, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	310, 311, 228, 312, 313, 0, 314, 0, 315, 0,
	0, 0, 316, 0, 317, 229, 0, 230, 0, 318,
	319, 320, 321, 322, 323, 231, 232, 0, 0, 325,
	0, 0, 0, 0, 324, 326, 333, 0, 0, 327,
	233, 329, 328, 330, 331, 332, 234, 0, 235, 0,
	334, 0, 0, 335, 336, 337, 0, 338, 339, 0,
	0, 340, 341, 342, 0, 344, 343, 0, 236, 0,
	345, 346, 0, 0, 347, 348, 0, 0, 349, 0,
	350, 0, 0, 351, 352, 354, 355, 353, 0, 356,
	357, 359, 358, 0, 0, 0, 0, 237, 360, 238,
	361, 362, 0, 363, 364, 0, 0, 365, 366, 0,
	0, 367, 239, 0, 368, 0, 240, 369, 370, 371,
	372, 373, 374, 375, 0, 376, 241, 377, 242, 378,
	0, 379, 380, 381, 382, 383, 243, 384, 385, 0,
	386, 387, 388, 389, 390, 0, 392, 393, 391, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	244, 403, 0, 599, 408, 409, 410, 411, 412, 413,
	0, 419, 420, 414, 416, 417, 418, 415, 421, 422,
	0, 423, 404, 405, 424, 0, 425, 245, 426, 427,
	0, 437, 428, 429, 430, 406, 431, 435, 436, 432,
	433, 434, 246, 0, 438, 439, 0, 440, 441, 442,
	443, 444, 305, 445, 306, 446, 447, 0, 247, 248,
	448, 0, 0, 449, 450, 249, 250, 0, 451, 452,
	453, 454, 0, 0, 455, 456, 457, 459, 0, 460,
	0, 458, 461, 462, 463, 251, 252, 0, 0, 464,
	253, 594, 0, 486, 0, 465, 466, 254, 467, 468,
	469, 0, 0, 0, 0, 0, 0, 0, 0, 255,
	256, 257, 258, 0, 259, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 260, 261, 262, 215, 216, 263,
	217, 264, 265, 218, 0, 266, 267, 268, 269, 270,
	271, 0, 0, 219, 220, 221, 0, 272, 222, 0,
	0, 0, 273, 274, 275, 276, 277, 0, 279, 280,
	281, 278, 0, 282, 0, 283, 284, 0, 0, 285,
	286, 287, 0, 0, 0, 0, 0, 0, 0, 288,
	289, 489, 290, 291, 292, 223, 224, 0, 293, 0,
	294, 0, 295, 0, 0, 296, 297, 0, 298, 299,
	0, 0, 0, 225, 303, 300, 301, 304, 307, 302,
	308, 309, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 310, 311, 228, 312, 313, 0, 314, 0, 315,
	0, 0, 0, 316, 0, 317, 229, 0, 230, 0,
	318, 319, 320, 321, 322, 323, 231, 232, 0, 0,
	325, 0, 0, 0, 0, 324, 326, 333, 0, 0,
	327, 233, 329, 328, 330, 331, 332, 234, 0, 235,
	0, 334, 0, 0, 335, 336, 337, 0, 338, 339,
	0, 0, 340, 341, 342, 0, 344, 343, 0, 236,
	0, 345, 346, 0, 0, 347, 348, 0, 0, 349,
	0, 350, 0, 0, 351, 352, 354, 355, 353, 0,
	356, 357, 359, 358, 0, 0, 0, 0, 237, 360,
	238, 361, 362, 0, 363, 364, 0, 0, 365, 366,
	0, 0, 367, 239, 0, 368, 0, 240, 369, 370,
	371, 372, 373, 374, 375, 0, 376, 241, 377, 242,
	378, 0, 379, 380, 381, 382, 383, 243, 384, 385,
	0, 386, 387, 388, 389, 390, 0, 392, 393, 391,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 244, 403, 0, 407, 408, 409, 410, 411, 412,
	413, 0, 419, 420, 414, 416, 417, 418, 415, 421,
	422, 0, 423, 404, 405, 424, 0, 425, 245, 426,
	427, 0, 437, 428, 429, 430, 406, 431, 435, 436,
	432, 433, 434, 246, 0, 438, 439, 0, 440, 441,
	442, 443, 444, 305, 445, 306, 446, 447, 0, 247,
	248, 448, 0, 0, 449, 450, 249, 250, 0, 451,
	452, 453, 454, 0, 0, 455, 456, 457, 459, 0,
	460, 0, 458, 461, 462, 463, 251, 252, 0, 0,
	464, 253, 584, 0, 486, 0, 465, 466, 254, 467,
	468, 469, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 256, 257, 258, 0, 259, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 260, 261, 262, 215, 216,
	263, 217, 264, 265, 218, 0, 266, 267, 268, 269,
	270, 271, 0, 0, 219, 220, 221, 0, 272, 222,
	0, 0, 0, 273, 274, 275, 276, 277, 0, 279,
	280, 281, 278, 0, 282, 0, 283, 284, 0, 0,
	285, 286, 287, 0, 0, 0, 0, 0, 0, 0,
	288, 289, 489, 290, 291, 292, 223, 224, 0, 293,
	0, 294, 0, 295, 0, 0, 296, 297, 0, 298,
	299, 0, 0, 0, 225, 303, 300, 301, 304, 307,
	302, 308, 309, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 310, 311, 228, 312, 313, 0, 314, 0,
	315, 0, 0, 0, 316, 0, 317, 229, 0, 230,
	0, 318, 319, 320, 321, 322, 323, 231, 232, 0,
	0, 325, 0, 0, 0, 0, 324, 326, 333, 0,
	0, 327, 233, 329, 328, 330, 331, 332, 234, 0,
	235, 0, 334, 0, 0, 335, 336, 337, 0, 338,
	339, 0, 0, 340, 341, 342, 0, 344, 343, 0,
	236, 0, 345, 346, 0, 0, 347, 348, 0, 0,
	349, 0, 350, 0, 0, 351, 352, 354, 355, 353,
	0, 356, 357, 359, 358, 0, 0, 0, 0, 237,
	360, 238, 361, 362, 0, 363, 364, 0, 0, 365,
	366, 0, 0, 367, 239, 0, 368, 0, 240, 369,
	370, 371, 372, 373, 374, 375, 0, 376, 241, 377,
	242, 378, 0, 379, 380, 381, 382, 383, 243, 384,
	385, 0, 386, 387, 388, 389, 390, 0, 392, 393,
	391, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 244, 403, 0, 407, 408, 409, 410, 411,
	412, 413, 0, 419, 420, 414, 416, 417, 418, 415,
	421, 422, 0, 423, 404, 405, 424, 0, 425, 245,
	426, 427, 0, 437, 428, 429, 430, 406, 431, 435,
	436, 432, 433, 434, 246, 0, 438, 439, 0, 440,
	441, 442, 443, 444, 305, 445, 306, 446, 447, 0,
	247, 248, 448, 0, 0, 449, 450, 249, 250, 0,
	451, 452, 453, 454, 0, 0, 455, 456, 457, 459,
	0, 460, 0, 458, 461, 462, 463, 251, 252, 0,
	0, 464, 253, 531, 0, 486, 0, 465, 466, 254,
	467, 468, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 257, 258, 0, 259, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 260, 261, 262, 215,
	216, 263, 217, 264, 265, 218, 0, 266, 267, 268,
	269, 270, 271, 0, 0, 219, 220, 221, 0, 272,
	222, 0, 0, 0, 273, 274, 275, 276, 277, 0,
	279, 280, 281, 278, 0, 282, 0, 283, 284, 0,
	0, 285, 286, 287, 0, 0, 0, 0, 0, 0,
	0, 288, 289, 489, 290, 291, 292, 223, 224, 0,
	293, 0, 294, 0, 295, 0, 0, 296, 297, 0,
	298, 299, 0, 0, 0, 225, 303, 300, 301, 304,
	307, 302, 308, 309, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 310, 311, 228, 312, 313, 0, 314,
	0, 315, 0, 0, 0, 316, 0, 317, 229, 0,
	230, 0, 318, 319, 320, 321, 322, 323, 231, 232,
	0, 0, 325, 0, 0, 0, 0, 324, 326, 333,
	0, 0, 327, 233, 329, 328, 330, 331, 332, 234,
	0, 235, 0, 334, 0, 0, 335, 336, 337, 0,
	338, 339, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 236, 0, 345, 346, 0, 0, 347, 348, 0,
	0, 349, 0, 350, 0, 0, 351, 352, 354, 355,
	353, 0, 356, 357, 359, 358, 0, 0, 0, 0,
	237, 360, 238, 361, 362, 0, 363, 364, 0, 0,
	365, 366, 0, 0, 367, 239, 0, 368, 0, 240,
	369, 370, 371, 372, 373, 374, 375, 0, 376, 241,
	377, 242, 378, 0, 379, 380, 381, 382, 383, 243,
	384, 385, 0, 386, 387, 388, 389, 390, 0, 392,
	393, 391, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 244, 403, 0, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 0, 423, 404, 405, 424, 0, 425,
	245, 426, 427, 0, 437, 428, 429, 430, 406, 431,
	435, 436, 432, 433, 434, 246, 0, 438, 439, 0,
	440, 441, 442, 443, 444, 305, 445, 306, 446, 447,
	0, 247, 248, 448, 0, 0, 449, 450, 249, 250,
	0, 451, 452, 453, 454, 0, 0, 455, 456, 457,
	459, 0, 460, 0, 458, 461, 462, 463, 251, 252,
	486, 0, 464, 253, 0, 0, 0, 0, 465, 466,
	254, 467, 468, 469, 0, 0, 255, 256, 257, 258,
	0, 259, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 260, 261, 262, 215, 216, 263, 217, 264, 265,
	218, 0, 266, 267, 268, 269, 270, 271, 0, 0,
	219, 220, 221, 0, 272, 222, 0, 0, 0, 273,
	274, 275, 276, 277, 0, 279, 280, 281, 278, 0,
	282, 0, 283, 284, 0, 0, 285, 286, 287, 0,
	0, 0, 0, 0, 0, 0, 288, 289, 489, 290,
	291, 292, 223, 224, 0, 293, 0, 294, 0, 295,
	0, 0, 296, 297, 0, 298, 299, 0, 0, 0,
	225, 303, 300, 301, 304, 307, 302, 308, 309, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 310, 311,
	228, 312, 313, 0, 314, 0, 315, 0, 0, 0,
	316, 0, 317, 229, 0, 230, 0, 318, 319, 320,
	321, 322, 323, 231, 232, 0, 0, 325, 0, 0,
	0, 0, 324, 326, 333, 0, 0, 327, 233, 329,
	328, 330, 331, 332, 234, 0, 235, 0, 334, 0,
	0, 335, 336, 337, 0, 338, 339, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 236, 0, 345, 346,
	0, 0, 347, 348, 0, 0, 349, 0, 350, 0,
	0, 351, 352, 354, 355, 353, 0, 356, 357, 359,
	358, 0, 0, 0, 0, 237, 360, 238, 361, 362,
	0, 363, 364, 0, 0, 365, 366, 0, 0, 367,
	239, 0, 368, 0, 240, 369, 370, 371, 372, 373,
	374, 375, 0, 376, 241, 377, 242, 378, 0, 379,
	380, 381, 382, 383, 243, 384, 385, 0, 386, 387,
	388, 389, 390, 0, 392, 393, 391, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 244, 403,
	0, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 0, 423,
	404, 405, 424, 0, 425, 245, 426, 427, 0, 437,
	428, 429, 430, 406, 431, 435, 436, 432, 433, 434,
	246, 0, 438, 439, 0, 440, 441, 442, 443, 444,
	305, 445, 306, 446, 447, 0, 247, 248, 448, 0,
	0, 449, 450, 249, 250, 0, 451, 452, 453, 454,
	0, 0, 455, 456, 457, 459, 0, 460, 0, 458,
	461, 462, 463, 251, 252, 486, 0, 464, 253, 0,
	0, 0, 0, 465, 466, 254, 467, 468, 469, 0,
	0, 255, 256, 257, 258, 0, 259, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 260, 261, 262, 215,
	216, 263, 217, 264, 265, 218, 0, 266, 267, 268,
	269, 270, 271, 0, 0, 219, 220, 221, 0, 272,
	222, 0, 0, 0, 273, 274, 275, 276, 277, 0,
	279, 280, 281, 278, 0, 282, 0, 283, 284, 0,
	0, 285, 286, 287, 0, 0, 0, 0, 0, 0,
	0, 288, 289, 489, 290, 291, 292, 223, 224, 0,
	293, 0, 294, 0, 295, 0, 0, 296, 297, 0,
	298, 299, 0, 0, 0, 225, 303, 300, 301, 304,
	307, 302, 308, 309, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 310, 311, 228, 312, 313, 0, 314,
	0, 315, 0, 0, 0, 316, 0, 317, 229, 0,
	230, 0, 318, 319, 320, 321, 322, 323, 2306, 232,
	0, 0, 325, 0, 0, 0, 0, 324, 326, 333,
	0, 0, 327, 233, 329, 328, 330, 331, 332, 234,
	0, 235, 0, 334, 0, 0, 335, 336, 337, 0,
	338, 339, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 236, 0, 345, 346, 0, 0, 347, 348, 0,
	0, 349, 0, 350, 0, 0, 351, 352, 354, 355,
	353, 0, 356, 357, 359, 358, 0, 0, 0, 0,
	237, 360, 238, 361, 362, 0, 363, 364, 0, 0,
	365, 366, 0, 0, 367, 239, 0, 368, 0, 240,
	369, 370, 371, 372, 373, 374, 375, 0, 376, 241,
	377, 242, 378, 0, 379, 380, 381, 382, 383, 243,
	384, 385, 0, 386, 387, 388, 389, 390, 0, 392,
	393, 391, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 244, 403, 0, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 0, 423, 404, 405, 424, 0, 425,
	245, 426, 427, 0, 437, 428, 429, 430, 406, 431,
	435, 436, 432, 433, 434, 246, 0, 438, 439, 0,
	440, 441, 442, 443, 444, 305, 445, 306, 446, 447,
	0, 247, 248, 448, 0, 0, 449, 450, 249, 250,
	0, 451, 452, 453, 454, 0, 0, 455, 456, 457,
	459, 0, 460, 0, 458, 461, 462, 463, 251, 252,
	486, 0, 464, 253, 0, 0, 0, 0, 465, 466,
	254, 467, 468, 469, 0, 0, 255, 256, 257, 258,
	0, 259, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 260, 261, 262, 215, 216, 263, 217, 264, 265,
	218, 0, 266, 267, 268, 269, 270, 271, 0, 0,
	219, 220, 221, 0, 272, 222, 0, 0, 0, 273,
	274, 275, 276, 277, 0, 279, 280, 281, 278, 0,
	282, 0, 283, 284, 0, 0, 285, 286, 287, 0,
	0, 0, 0, 0, 0, 0, 288, 289, 489, 290,
	291, 292, 223, 224, 0, 293, 0, 294, 0, 295,
	0, 0, 296, 297, 0, 298, 299, 0, 0, 0,
	225, 303, 300, 301, 304, 307, 302, 308, 309, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 310, 311,
	228, 312, 313, 0, 314, 0, 315, 0, 0, 0,
	316, 0, 317, 229, 0, 230, 0, 318, 319, 320,
	321, 322, 323, 2304, 232, 0, 0, 325, 0, 0,
	0, 0, 324, 326, 333, 0, 0, 327, 233, 329,
	328, 330, 331, 332, 234, 0, 235, 0, 334, 0,
	0, 335, 336, 337, 0, 338, 339, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 236, 0, 345, 346,
	0, 0, 347, 348, 0, 0, 349, 0, 350, 0,
	0, 351, 352, 354, 355, 353, 0, 356, 357, 359,
	358, 0, 0, 0, 0, 237, 360, 238, 361, 362,
	0, 363, 364, 0, 0, 365, 366, 0, 0, 367,
	239, 0, 368, 0, 240, 369, 370, 371, 372, 373,
	374, 375, 0, 376, 241, 377, 242, 378, 0, 379,
	380, 381, 382, 383, 243, 384, 385, 0, 386, 387,
	388, 389, 390, 0, 392, 393, 391, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 244, 403,
	0, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 0, 423,
	404, 405, 424, 0, 425, 245, 426, 427, 0, 437,
	428, 429, 430, 406, 431, 435, 436, 432, 433, 434,
	246, 0, 438, 439, 0, 440, 441, 442, 443, 444,
	305, 445, 306, 446, 447, 0, 247, 248, 448, 0,
	0, 449, 450, 249, 250, 0, 451, 452, 453, 454,
	0, 0, 455, 456, 457, 459, 0, 460, 0, 458,
	461, 462, 463, 251, 252, 486, 0, 464, 253, 0,
	0, 0, 0, 465, 466, 254, 467, 468, 469, 0,
	0, 255, 256, 257, 258, 0, 259, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 260, 261, 262, 215,
	216, 263, 217, 264, 265, 218, 0, 266, 267, 268,
	269, 270, 271, 0, 0, 219, 220, 221, 0, 272,
	222, 0, 0, 0, 273, 274, 275, 276, 277, 0,
	279, 280, 281, 278, 0, 282, 0, 283, 284, 0,
	0, 285, 286, 287, 0, 0, 0, 0, 0, 0,
	0, 288, 289, 489, 290, 291, 292, 223, 224, 0,
	293, 0, 294, 0, 295, 0, 0, 296, 297, 0,
	298, 299, 0, 0, 0, 225, 303, 300, 301, 304,
	307, 302, 308, 309, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 310, 311, 228, 312, 313, 0, 314,
	0, 315, 0, 0, 0, 316, 0, 317, 229, 0,
	230, 0, 318, 319, 320, 321, 322, 323, 2293, 232,
	0, 0, 325, 0, 0, 0, 0, 324, 326, 333,
	0, 0, 327, 233, 329, 328, 330, 331, 332, 234,
	0, 235, 0, 334, 0, 0, 335, 336, 337, 0,
	338, 339, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 236, 0, 345, 346, 0, 0, 347, 348, 0,
	0, 349, 0, 350, 0, 0, 351, 352, 354, 355,
	353, 0, 356, 357, 359, 358, 0, 0, 0, 0,
	237, 360, 238, 361, 362, 0, 363, 364, 0, 0,
	365, 366, 0, 0, 367, 239, 0, 368, 0, 240,
	369, 370, 371, 372, 373, 374, 375, 0, 376, 241,
	377, 242, 378, 0, 379, 380, 381, 382, 383, 243,
	384, 385, 0, 386, 387, 388, 389, 390, 0, 392,
	393, 391, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 244, 403, 0, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 0, 423, 404, 405, 424, 0, 425,
	245, 426, 427, 0, 437, 428, 429, 430, 406, 431,
	435, 436, 432, 433, 434, 246, 0, 438, 439, 0,
	440, 441, 442, 443, 444, 305, 445, 306, 446, 447,
	0, 247, 248, 448, 0, 0, 449, 450, 249, 250,
	0, 451, 452, 453, 454, 0, 0, 455, 456, 457,
	459, 0, 460, 0, 458, 461, 462, 463, 251, 252,
	486, 0, 464, 253, 0, 0, 0, 0, 465, 466,
	254, 467, 468, 469, 0, 0, 255, 256, 257, 258,
	0, 259, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 260, 261, 262, 215, 216, 263, 217, 264, 265,
	218, 0, 266, 267, 268, 269, 270, 271, 0, 0,
	219, 220, 221, 0, 272, 222, 0, 0, 0, 273,
	274, 275, 276, 277, 0, 279, 280, 281, 278, 0,
	282, 0, 283, 284, 0, 0, 285, 286, 287, 0,
	0, 0, 0, 0, 0, 0, 288, 289, 489, 290,
	291, 292, 223, 224, 0, 293, 0, 294, 0, 295,
	0, 0, 296, 297, 0, 298, 299, 0, 0, 0,
	225, 303, 300, 301, 304, 307, 302, 308, 309, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 310, 311,
	228, 312, 313, 0, 314, 0, 315, 0, 0, 0,
	316, 0, 317, 229, 0, 230, 0, 318, 319, 320,
	321, 322, 323, 231, 232, 0, 0, 325, 0, 0,
	0, 0, 324, 326, 333, 0, 0, 327, 233, 329,
	328, 330, 331, 332, 234, 0, 235, 0, 334, 0,
	0, 335, 336, 337, 0, 338, 339, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 236, 0, 345, 346,
	0, 0, 347, 348, 0, 0, 349, 0, 350, 0,
	0, 351, 352, 354, 355, 353, 0, 356, 357, 359,
	358, 0, 0, 0, 0, 237, 360, 238, 361, 362,
	0, 363, 364, 0, 0, 365, 366, 0, 0, 367,
	239, 0, 368, 0, 240, 369, 370, 371, 372, 373,
	374, 375, 0, 376, 241, 377, 242, 378, 0, 379,
	380, 381, 382, 383, 243, 384, 385, 0, 386, 387,
	388, 389, 390, 0, 392, 393, 391, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 244, 403,
	0, 599, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 0, 423,
	404, 405, 424, 0, 425, 245, 426, 427, 0, 437,
	428, 429, 430, 406, 431, 435, 436, 432, 433, 434,
	246, 0, 438, 439, 0, 440, 441, 442, 443, 444,
	305, 445, 306, 446, 447, 0, 247, 248, 448, 0,
	0, 449, 450, 249, 250, 0, 451, 452, 453, 454,
	0, 0, 455, 456, 457, 459, 0, 460, 0, 458,
	461, 462, 463, 251, 252, 486, 0, 464, 253, 0,
	0, 0, 0, 465, 466, 254, 467, 468, 469, 0,
	0, 255, 256, 257, 258, 0, 259, 0, 0, 0,
	0, 214, 0, 1527, 0, 0, 260, 261, 262, 215,
	216, 263, 217, 264, 265, 218, 0, 266, 267, 268,
	269, 270, 271, 0, 0, 219, 220, 221, 0, 272,
	222, 0, 0, 0, 273, 274, 275, 276, 277, 0,
	279, 280, 281, 278, 0, 282, 0, 283, 284, 0,
	0, 285, 286, 287, 0, 0, 0, 0, 0, 0,
	0, 288, 289, 489, 290, 291, 292, 223, 224, 0,
	293, 0, 294, 0, 295, 0, 0, 296, 297, 0,
	298, 299, 0, 0, 0, 225, 303, 300, 301, 304,
	307, 302, 308, 309, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 310, 311, 228, 312, 313, 0, 314,
	0, 315, 0, 0, 0, 316, 0, 317, 229, 0,
	230, 0, 318, 319, 320, 321, 322, 323, 231, 232,
	0, 0, 325, 0, 0, 0, 0, 324, 326, 333,
	0, 0, 327, 233, 329, 328, 330, 331, 332, 234,
	0, 235, 0, 334, 0, 0, 335, 336, 337, 0,
	338, 339, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 236, 0, 345, 346, 0, 0, 347, 348, 0,
	0, 349, 0, 350, 0, 0, 351, 352, 354, 355,
	353, 0, 356, 357, 359, 358, 0, 0, 0, 0,
	237, 360, 238, 361, 362, 0, 363, 364, 0, 0,
	365, 366, 0, 0, 367, 239, 0, 368, 0, 240,
	369, 370, 371, 372, 373, 374, 375, 0, 376, 241,
	377, 242, 378, 0, 379, 380, 381, 382, 383, 243,
	384, 385, 0, 386, 387, 388, 389, 390, 0, 392,
	393, 391, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 244, 403, 0, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 0, 0, 404, 405, 424, 0, 425,
	245, 426, 427, 0, 437, 428, 429, 430, 406, 431,
	435, 436, 432, 433, 434, 246, 0, 438, 439, 0,
	440, 441, 442, 443, 444, 305, 445, 306, 446, 447,
	0, 247, 248, 448, 0, 0, 449, 450, 249, 250,
	0, 451, 452, 453, 454, 0, 0, 455, 456, 457,
	459, 0, 460, 0, 458, 461, 462, 463, 251, 252,
	486, 0, 464, 253, 0, 0, 0, 0, 465, 466,
	254, 467, 468, 469, 0, 0, 255, 256, 257, 258,
	0, 259, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 260, 261, 262, 215, 216, 263, 217, 264, 265,
	218, 0, 266, 267, 268, 269, 270, 271, 0, 0,
	219, 220, 221, 0, 272, 222, 0, 0, 0, 273,
	274, 275, 276, 277, 0, 279, 280, 281, 278, 0,
	282, 0, 283, 284, 0, 0, 285, 286, 287, 0,
	0, 0, 0, 0, 0, 0, 288, 289, 489, 290,
	291, 292, 223, 224, 0, 293, 0, 294, 0, 295,
	0, 0, 296, 297, 0, 298, 299, 0, 0, 0,
	225, 303, 300, 301, 304, 307, 302, 308, 309, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 310, 311,
	228, 312, 313, 0, 314, 0, 315, 0, 0, 0,
	316, 0, 317, 229, 0, 230, 0, 318, 319, 320,
	321, 322, 323, 1518, 232, 0, 0, 325, 0, 0,
	0, 0, 324, 326, 333, 0, 0, 327, 233, 329,
	328, 330, 331, 332, 234, 0, 235, 0, 334, 0,
	0, 335, 336, 337, 0, 338, 339, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 236, 0, 345, 346,
	0, 0, 347, 348, 0, 0, 349, 0, 350, 0,
	0, 351, 352, 354, 355, 353, 0, 356, 357, 359,
	358, 0, 0, 0, 0, 237, 360, 238, 361, 362,
	0, 363, 364, 0, 0, 365, 366, 0, 0, 367,
	239, 0, 368, 0, 240, 369, 370, 371, 372, 373,
	374, 375, 0, 376, 241, 377, 242, 378, 0, 379,
	380, 381, 382, 383, 243, 384, 385, 0, 386, 387,
	388, 389, 390, 0, 392, 393, 391, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 244, 403,
	0, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 0, 423,
	404, 405, 424, 0, 425, 245, 426, 427, 0, 437,
	428, 429, 430, 406, 431, 435, 436, 432, 433, 434,
	246, 0, 438, 439, 0, 440, 441, 442, 443, 444,
	305, 445, 306, 446, 447, 0, 247, 248, 448, 0,
	0, 449, 450, 249, 250, 0, 451, 452, 453, 454,
	0, 0, 455, 456, 457, 459, 0, 460, 0, 458,
	461, 462, 463, 251, 252, 486, 0, 464, 253, 0,
	0, 0, 0, 465, 466, 254, 467, 468, 469, 0,
	0, 255, 256, 257, 258, 0, 259, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 260, 261, 262, 215,
	216, 263, 217, 264, 265, 218, 0, 266, 267, 268,
	269, 270, 271, 0, 0, 219, 220, 221, 0, 272,
	222, 0, 0, 0, 273, 274, 275, 276, 277, 0,
	279, 280, 281, 278, 0, 282, 0, 283, 284, 0,
	0, 285, 286, 287, 0, 0, 0, 0, 0, 0,
	0, 288, 289, 489, 290, 291, 292, 223, 224, 0,
	293, 0, 294, 0, 295, 0, 0, 296, 297, 0,
	298, 299, 0, 0, 0, 225, 303, 300, 301, 304,
	307, 302, 308, 309, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 310, 311, 228, 312, 313, 0, 314,
	0, 315, 0, 0, 0, 316, 0, 317, 229, 0,
	230, 0, 318, 319, 320, 321, 322, 323, 231, 232,
	0, 0, 325, 0, 0, 0, 0, 324, 326, 333,
	0, 0, 327, 233, 329, 328, 330, 331, 332, 234,
	0, 235, 0, 334, 0, 0, 335, 336, 337, 0,
	338, 339, 0, 0, 340, 341, 342, 0, 344, 343,
	0, 236, 0, 345, 346, 0, 0, 347, 348, 0,
	0, 349, 0, 350, 0, 0, 351, 352, 354, 355,
	353, 0, 356, 357, 359, 358, 0, 0, 0, 0,
	237, 360, 238, 361, 362, 0, 363, 364, 0, 0,
	365, 366, 0, 0, 367, 239, 0, 368, 0, 240,
	369, 370, 371, 372, 373, 374, 375, 0, 376, 241,
	377, 242, 378, 0, 379, 380, 381, 382, 383, 243,
	883, 385, 0, 386, 387, 388, 389, 390, 0, 392,
	393, 391, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 244, 403, 0, 407, 408, 409, 410,
	411, 412, 413, 0, 419, 420, 414, 416, 417, 418,
	415, 421, 422, 0, 423, 404, 405, 424, 0, 425,
	245, 426, 427, 0, 437, 428, 429, 430, 406, 431,
	435, 436, 432, 433, 434, 246, 0, 438, 439, 0,
	440, 441, 442, 443, 444, 305, 445, 306, 446, 447,
	0, 247, 248, 448, 0, 0, 449, 450, 249, 250,
	0, 451, 452, 453, 454, 0, 0, 455, 456, 457,
	459, 0, 460, 0, 458, 461, 462, 463, 251, 252,
	486, 0, 464, 253, 0, 0, 0, 0, 465, 466,
	254, 467, 468, 469, 0, 0, 255, 256, 257, 258,
	0, 259, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 260, 261, 262, 215, 216, 263, 217, 264, 265,
	218, 0, 266, 267, 268, 269, 270, 271, 0, 0,
	219, 220, 221, 0, 272, 222, 0, 0, 0, 273,
	274, 275, 276, 277, 0, 279, 280, 281, 278, 0,
	282, 0, 283, 284, 0, 0, 285, 286, 287, 0,
	0, 0, 0, 0, 0, 0, 288, 289, 489, 290,
	291, 292, 223, 224, 0, 293, 0, 294, 0, 295,
	0, 0, 296, 297, 0, 298, 299, 0, 0, 0,
	225, 303, 300, 301, 304, 307, 302, 308, 309, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 310, 311,
	228, 312, 313, 0, 314, 0, 315, 0, 0, 0,
	316, 0, 317, 229, 0, 230, 0, 318, 319, 320,
	321, 322, 323, 231, 232, 0, 0, 325, 0, 0,
	0, 0, 324, 326, 333, 0, 0, 327, 233, 329,
	328, 330, 331, 332, 234, 0, 235, 0, 334, 0,
	0, 335, 336, 337, 0, 338, 339, 0, 0, 340,
	341, 342, 0, 344, 343, 0, 236, 0, 345, 346,
	0, 0, 347, 348, 0, 0, 349, 0, 350, 0,
	0, 351, 352, 354, 355, 353, 0, 356, 357, 359,
	358, 0, 0, 0, 0, 237, 360, 238, 361, 362,
	0, 363, 364, 0, 0, 365, 366, 0, 0, 367,
	239, 0, 368, 0, 240, 369, 370, 371, 0, 373,
	374, 375, 0, 376, 241, 377, 242, 378, 0, 379,
	380, 381, 0, 383, 243, 384, 385, 0, 386, 387,
	388, 389, 390, 0, 392, 393, 391, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 244, 0,
	0, 407, 408, 409, 410, 411, 412, 413, 0, 419,
	420, 414, 416, 417, 418, 415, 421, 422, 0, 423,
	404, 405, 424, 0, 425, 245, 426, 427, 0, 437,
	428, 429, 430, 406, 431, 435, 436, 432, 433, 434,
	246, 0, 438, 439, 0, 440, 441, 442, 443, 444,
	305, 445, 306, 446, 447, 0, 247, 248, 448, 0,
	0, 449, 450, 249, 250, 0, 451, 452, 453, 454,
	0, 0, 455, 456, 457, 459, 0, 460, 0, 458,
	461, 462, 463, 251, 252, 0, 0, 464, 253, 0,
	0, 0, 0, 465, 466, 254, 467, 468, 469, 1271,
	1272, 0, 1304, 1305, 1306, 1314, 1315, 1316, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1307, 0, 0,
	0, 0, 0, 0, 1274, 0, 0, 1320, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1271, 1272, 0,
	1304, 1305, 1306, 1314, 1315, 1316, 0, 0, 0, 1273,
	0, 0, 0, 0, 0, 1307, 0, 1293, 0, 0,
	0, 0, 1274, 0, 1290, 1320, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1273, 0, 0,
	0, 0, 0, 0, 0, 1293, 0, 0, 0, 0,
	0, 0, 1290, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1296, 1297, 1298,
	1299, 0, 0, 0, 0, 0, 1279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1311, 1321,
	0, 1301, 1302, 1303, 0, 1296, 1297, 1298, 1299, 0,
	0, 0, 0, 0, 1279, 0, 0, 0, 0, 0,
	0, 0, 1317, 1318, 0, 0, 0, 0, 0, 0,
	1288, 1289, 0, 0, 0, 0, 1311, 1321, 0, 1301,
	1302, 1303, 0, 1309, 0, 0, 0, 0, 0, 0,
	1294, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1317, 1318, 0, 0, 0, 0, 1319, 0, 1288, 1289,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1308, 1309, 0, 0, 0, 0, 0, 0, 1294, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1319, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1300, 0, 1308, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1295, 0, 0, 0, 0, 0, 0,
	0, 0, 1271, 1272, 0, 1304, 1305, 1306, 1314, 1315,
	1316, 0, 0, 0, 1300, 0, 1312, 0, 0, 0,
	1307, 0, 0, 0, 0, 0, 0, 1274, 0, 0,
	1320, 1295, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1273, 0, 1312, 0, 0, 0, 0, 0,
	1293, 0, 0, 0, 0, 0, 0, 1290, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1310, 0, 0, 1285, 1286, 1292, 1291, 1287,
	1313, 0, 1284, 1282, 1283, 1275, 1276, 1277, 1278, 1280,
	1281, 0, 0, 0, 0, 0, 0, 0, 0, 2186,
	1296, 1297, 1298, 1299, 0, 0, 0, 0, 0, 1279,
	1310, 0, 0, 1285, 1286, 1292, 1291, 1287, 1313, 0,
	1284, 1282, 1283, 1275, 1276, 1277, 1278, 1280, 1281, 0,
	0, 1311, 1321, 0, 1301, 1302, 1303, 2185, 0, 0,
	0, 0, 0, 1271, 1272, 0, 1304, 1305, 1306, 1314,
	1315, 1316, 0, 0, 0, 1317, 1318, 0, 0, 0,
	0, 1307, 0, 1288, 1289, 0, 0, 0, 1274, 0,
	0, 1320, 0, 0, 0, 0, 1309, 0, 0, 0,
	0, 0, 0, 1294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1273, 0, 0, 0, 0, 0, 1319,
	0, 1293, 0, 0, 0, 0, 0, 0, 1290, 0,
	0, 0, 0, 1308, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1300,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1296, 1297, 1298, 1299, 0, 1295, 0, 0, 0,
	1279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1271, 1272, 0, 1304, 1305, 1306, 1314, 1315, 1316, 1312,
	0, 0, 1311, 1321, 0, 1301, 1302, 1303, 1307, 0,
	0, 0, 0, 0, 0, 1274, 0, 0, 1320, 0,
	0, 0, 0, 0, 0, 0, 1317, 1318, 0, 0,
	0, 0, 0, 0, 1288, 1289, 0, 0, 0, 0,
	1273, 0, 0, 0, 0, 0, 0, 1309, 1293, 0,
	0, 0, 0, 0, 1294, 1290, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1319, 0, 0, 0, 0, 1310, 0, 0, 1285, 1286,
	1292, 1291, 1287, 1313, 1308, 1284, 1282, 1283, 1275, 1276,
	1277, 1278, 1280, 1281, 0, 0, 0, 0, 0, 0,
	0, 0, 2184, 0, 0, 0, 0, 0, 1296, 1297,
	1298, 1299, 0, 0, 0, 0, 0, 1279, 0, 0,
	1300, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1295, 0, 1311,
	1321, 0, 1301, 1302, 1303, 0, 0, 0, 0, 0,
	0, 1271, 1272, 0, 1304, 1305, 1306, 1314, 1315, 1316,
	1312, 0, 0, 1317, 1318, 0, 0, 0, 0, 1307,
	0, 1288, 1289, 0, 0, 0, 1274, 0, 0, 1320,
	0, 0, 0, 0, 1309, 0, 0, 0, 0, 0,
	0, 1294, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1273, 0, 0, 0, 0, 0, 1319, 0, 1293,
	0, 0, 0, 0, 0, 0, 1290, 0, 0, 0,
	0, 1308, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1310, 0, 0, 1285,
	1286, 1292, 1291, 1287, 1313, 0, 1284, 1282, 1283, 1275,
	1276, 1277, 1278, 1280, 1281, 0, 0, 1300, 0, 2981,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1296,
	1297, 1298, 1299, 0, 1295, 0, 0, 0, 1279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1271, 1272,
	0, 1304, 1305, 1306, 1314, 1315, 1316, 1312, 0, 0,
	1311, 1321, 0, 1301, 1302, 1303, 1307, 0, 0, 0,
	0, 0, 0, 1274, 0, 0, 1320, 0, 0, 0,
	0, 0, 0, 0, 1317, 1318, 0, 0, 0, 0,
	0, 0, 1288, 1289, 0, 0, 0, 0, 1273, 0,
	0, 0, 0, 0, 0, 1309, 1293, 0, 0, 0,
	0, 0, 1294, 1290, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1319, 0,
	0, 0, 0, 1310, 0, 0, 1285, 1286, 1292, 1291,
	1287, 1313, 1308, 1284, 1282, 1283, 1275, 1276, 1277, 1278,
	1280, 1281, 0, 0, 0, 0, 2977, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1296, 1297, 1298, 1299,
	0, 0, 0, 0, 0, 1279, 0, 0, 1300, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1295, 0, 1311, 1321, 0,
	1301, 1302, 1303, 0, 0, 0, 0, 0, 0, 1271,
	1272, 0, 1304, 1305, 1306, 1314, 1315, 1316, 1312, 0,
	0, 1317, 1318, 0, 0, 0, 0, 1307, 0, 1288,
	1289, 0, 0, 0, 1274, 0, 0, 1320, 0, 0,
	0, 0, 1309, 0, 0, 0, 0, 0, 0, 1294,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1273,
	0, 0, 0, 0, 0, 1319, 0, 1293, 0, 0,
	0, 0, 0, 0, 1290, 0, 0, 0, 0, 1308,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1310, 0, 0, 1285, 1286, 1292,
	1291, 1287, 1313, 0, 1284, 1282, 1283, 1275, 1276, 1277,
	1278, 1280, 1281, 0, 0, 1300, 0, 2917, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1296, 1297, 1298,
	1299, 0, 1295, 0, 0, 0, 1279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1271, 1272, 0, 1304,
	1305, 1306, 1314, 1315, 1316, 1312, 0, 0, 1311, 1321,
	0, 1301, 1302, 1303, 1307, 0, 0, 0, 0, 0,
	0, 1274, 0, 0, 1320, 0, 0, 0, 0, 0,
	0, 0, 1317, 1318, 0, 0, 0, 0, 0, 0,
	1288, 1289, 0, 0, 0, 0, 1273, 0, 0, 0,
	0, 0, 0, 1309, 1293, 0, 0, 0, 0, 0,
	1294, 1290, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1319, 0, 0, 0,
	0, 1310, 0, 0, 1285, 1286, 1292, 1291, 1287, 1313,
	1308, 1284, 1282, 1283, 1275, 1276, 1277, 1278, 1280, 1281,
	0, 0, 0, 0, 2866, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1296, 1297, 1298, 1299, 0, 0,
	0, 0, 0, 1279, 0, 0, 1300, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1295, 0, 1311, 1321, 0, 1301, 1302,
	1303, 0, 0, 0, 0, 0, 0, 1271, 1272, 0,
	1304, 1305, 1306, 1314, 1315, 1316, 1312, 0, 0, 1317,
	1318, 0, 0, 0, 0, 1307, 0, 1288, 1289, 0,
	0, 0, 1274, 0, 0, 1320, 0, 0, 0, 0,
	1309, 0, 0, 0, 0, 0, 0, 1294, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1273, 0, 0,
	0, 0, 0, 1319, 0, 1293, 0, 0, 0, 0,
	0, 0, 1290, 0, 0, 0, 0, 1308, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1310, 0, 0, 1285, 1286, 1292, 1291, 1287,
	1313, 0, 1284, 1282, 1283, 1275, 1276, 1277, 1278, 1280,
	1281, 0, 0, 1300, 0, 2833, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1296, 1297, 1298, 1299, 0,
	1295, 0, 0, 0, 1279, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1271, 1272, 0, 1304, 1305, 1306,
	1314, 1315, 1316, 1312, 0, 0, 1311, 1321, 0, 1301,
	1302, 1303, 1307, 0, 0, 0, 0, 0, 0, 1274,
	0, 0, 1320, 0, 0, 0, 0, 0, 0, 0,
	1317, 1318, 0, 0, 0, 0, 0, 0, 1288, 1289,
	0, 0, 0, 0, 1273, 0, 0, 0, 0, 0,
	0, 1309, 1293, 0, 0, 0, 0, 0, 1294, 1290,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1319, 0, 0, 0, 0, 1310,
	0, 0, 1285, 1286, 1292, 1291, 1287, 1313, 1308, 1284,
	1282, 1283, 1275, 1276, 1277, 1278, 1280, 1281, 0, 0,
	0, 0, 2827, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1296, 1297, 1298, 1299, 0, 0, 0, 0,
	0, 1279, 0, 0, 1300, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1295, 0, 1311, 1321, 0, 1301, 1302, 1303, 0,
	0, 0, 0, 0, 0, 1271, 1272, 0, 1304, 1305,
	1306, 1314, 1315, 1316, 1312, 0, 0, 1317, 1318, 0,
	0, 0, 0, 1307, 0, 1288, 1289, 0, 0, 0,
	1274, 0, 0, 1320, 0, 0, 0, 0, 1309, 0,
	0, 0, 0, 0, 0, 1294, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1273, 0, 0, 0, 0,
	0, 1319, 0, 1293, 0, 0, 0, 0, 0, 0,
	1290, 0, 0, 0, 0, 1308, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1310, 0, 0, 1285, 1286, 1292, 1291, 1287, 1313, 0,
	1284, 1282, 1283, 1275, 1276, 1277, 1278, 1280, 1281, 0,
	0, 1300, 0, 2821, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1296, 1297, 1298, 1299, 0, 1295, 0,
	0, 0, 1279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1271, 1272, 0, 1304, 1305, 1306, 1314, 1315,
	1316, 1312, 0, 0, 1311, 1321, 0, 1301, 1302, 1303,
	1307, 0, 0, 0, 0, 0, 0, 1274, 0, 0,
	1320, 0, 0, 0, 0, 0, 0, 0, 1317, 1318,
	0, 0, 0, 0, 0, 0, 1288, 1289, 0, 0,
	0, 0, 1273, 0, 0, 0, 0, 0, 0, 1309,
	1293, 0, 0, 0, 0, 0, 1294, 1290, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1319, 0, 0, 0, 0, 1310, 0, 0,
	1285, 1286, 1292, 1291, 1287, 1313, 1308, 1284, 1282, 1283,
	1275, 1276, 1277, 1278, 1280, 1281, 0, 0, 0, 0,
	2738, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1296, 1297, 1298, 1299, 0, 0, 0, 0, 0, 1279,
	0, 0, 1300, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1295,
	0, 1311, 1321, 0, 1301, 1302, 1303, 0, 0, 0,
	0, 0, 0, 1271, 1272, 0, 1304, 1305, 1306, 1314,
	1315, 1316, 1312, 0, 0, 1317, 1318, 0, 0, 0,
	0, 1307, 0, 1288, 1289, 0, 0, 0, 1274, 0,
	0, 1320, 0, 0, 0, 0, 1309, 0, 0, 0,
	0, 0, 0, 1294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1273, 0, 0, 0, 0, 0, 1319,
	0, 1293, 0, 0, 0, 0, 0, 0, 1290, 0,
	0, 0, 0, 1308, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1310, 0,
	0, 1285, 1286, 1292, 1291, 1287, 1313, 0, 1284, 1282,
	1283, 1275, 1276, 1277, 1278, 1280, 1281, 0, 0, 1300,
	0, 2693, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1296, 1297, 1298, 1299, 0, 1295, 0, 0, 0,
	1279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1271, 1272, 0, 1304, 1305, 1306, 1314, 1315, 1316, 1312,
	0, 0, 1311, 1321, 0, 1301, 1302, 1303, 1307, 0,
	0, 0, 0, 0, 0, 1274, 0, 0, 1320, 0,
	0, 0, 0, 0, 0, 0, 1317, 1318, 0, 0,
	0, 0, 0, 0, 1288, 1289, 0, 0, 0, 0,
	1273, 0, 0, 0, 0, 0, 0, 1309, 1293, 0,
	0, 0, 0, 0, 1294, 1290, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1319, 0, 0, 0, 0, 1310, 0, 0, 1285, 1286,
	1292, 1291, 1287, 1313, 1308, 1284, 1282, 1283, 1275, 1276,
	1277, 1278, 1280, 1281, 0, 0, 0, 0, 2692, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1296, 1297,
	1298, 1299, 0, 0, 0, 0, 0, 1279, 0, 0,
	1300, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1295, 0, 1311,
	1321, 0, 1301, 1302, 1303, 0, 0, 0, 0, 0,
	0, 1271, 1272, 0, 1304, 1305, 1306, 1314, 1315, 1316,
	1312, 0, 0, 1317, 1318, 0, 0, 0, 0, 1307,
	0, 1288, 1289, 0, 0, 0, 1274, 0, 0, 1320,
	0, 0, 0, 0, 1309, 0, 0, 0, 0, 0,
	0, 1294, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1273, 0, 0, 0, 0, 0, 1319, 0, 1293,
	0, 0, 0, 0, 0, 0, 1290, 0, 0, 0,
	0, 1308, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1310, 0, 0, 1285,
	1286, 1292, 1291, 1287, 1313, 0, 1284, 1282, 1283, 1275,
	1276, 1277, 1278, 1280, 1281, 0, 0, 1300, 0, 2664,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1296,
	1297, 1298, 1299, 0, 1295, 0, 0, 0, 1279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1271, 1272,
	0, 1304, 1305, 1306, 1314, 1315, 1316, 1312, 0, 0,
	1311, 1321, 0, 1301, 1302, 1303, 1307, 0, 0, 0,
	0, 0, 0, 1274, 0, 0, 1320, 0, 0, 0,
	0, 0, 0, 0, 1317, 1318, 0, 0, 0, 0,
	0, 0, 1288, 1289, 0, 0, 0, 0, 1273, 0,
	0, 0, 0, 0, 0, 1309, 1293, 0, 0, 0,
	0, 0, 1294, 1290, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1319, 0,
	0, 0, 0, 1310, 0, 0, 1285, 1286, 1292, 1291,
	1287, 1313, 1308, 1284, 1282, 1283, 1275, 1276, 1277, 1278,
	1280, 1281, 0, 0, 0, 0, 2484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1296, 1297, 1298, 1299,
	0, 0, 0, 0, 0, 1279, 0, 0, 1300, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1295, 0, 1311, 1321, 0,
	1301, 1302, 1303, 0, 0, 0, 0, 0, 0, 1271,
	1272, 0, 1304, 1305, 1306, 1314, 1315, 1316, 1312, 0,
	0, 1317, 1318, 0, 0, 0, 0, 1307, 0, 1288,
	1289, 0, 0, 0, 1274, 0, 0, 1320, 0, 0,
	0, 0, 1309, 0, 0, 0, 0, 0, 0, 1294,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1273,
	0, 0, 0, 0, 0, 1319, 0, 1293, 0, 0,
	0, 0, 0, 0, 1290, 0, 0, 0, 0, 1308,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1310, 0, 0, 1285, 1286, 1292,
	1291, 1287, 1313, 0, 1284, 1282, 1283, 1275, 1276, 1277,
	1278, 1280, 1281, 0, 0, 1300, 0, 2457, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1296, 1297, 1298,
	1299, 0, 1295, 0, 0, 0, 1279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1312, 0, 0, 1311, 1321,
	0, 1301, 1302, 1303, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1317, 1318, 0, 0, 0, 0, 0, 0,
	1288, 1289, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1309, 0, 0, 0, 0, 0, 0,
	1294, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1319, 0, 0, 0,
	0, 1310, 0, 0, 1285, 1286, 1292, 1291, 1287, 1313,
	1308, 1284, 1282, 1283, 1275, 1276, 1277, 1278, 1280, 1281,
	0, 0, 0, 0, 1794, 0, 0, 0, 0, 0,
	0, 0, 1271, 1272, 0, 1304, 1305, 1306, 1314, 1315,
	1316, 0, 0, 0, 0, 0, 1300, 0, 0, 0,
	1307, 0, 0, 0, 0, 0, 0, 1274, 0, 0,
	1320, 0, 0, 1295, 0, 0, 0, 0, 0, 0,
	1271, 1272, 0, 1304, 1305, 1306, 1314, 1315, 1316, 0,
	0, 0, 1273, 0, 0, 0, 1312, 0, 1307, 0,
	1293, 0, 0, 0, 0, 1274, 0, 1290, 1320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1273, 0, 0, 0, 0, 0, 0, 0, 1293, 0,
	0, 0, 0, 0, 0, 1290, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1296, 1297, 1298, 1299, 0, 0, 0, 0, 0, 1279,
	3059, 0, 1310, 0, 0, 1285, 1286, 1292, 1291, 1287,
	1313, 0, 1284, 1282, 1283, 1275, 1276, 1277, 1278, 1280,
	1281, 1311, 1321, 2153, 1301, 1302, 1303, 0, 1296, 1297,
	1298, 1299, 0, 0, 0, 0, 0, 1279, 0, 2233,
	0, 0, 2232, 0, 0, 1317, 1318, 0, 0, 0,
	0, 0, 0, 1288, 1289, 0, 0, 0, 0, 1311,
	1321, 0, 1301, 1302, 1303, 0, 1309, 0, 0, 0,
	0, 0, 0, 1294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1317, 1318, 0, 0, 0, 0, 1319,
	0, 1288, 1289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1308, 1309, 0, 0, 0, 0, 0,
	0, 1294, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3058, 0, 0, 0, 0, 0, 1319, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1300,
	0, 1308, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1295, 0, 0, 0,
	0, 0, 0, 0, 1271, 1272, 0, 1304, 1305, 1306,
	1314, 1315, 1316, 0, 0, 0, 0, 1300, 0, 1312,
	0, 0, 1307, 0, 0, 0, 0, 2126, 0, 1274,
	0, 0, 1320, 0, 1295, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1273, 0, 0, 1312, 0, 0,
	0, 0, 1293, 0, 0, 0, 0, 0, 0, 1290,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1310, 2127, 0, 1285, 1286,
	1292, 1291, 1287, 1313, 0, 1284, 1282, 1283, 1275, 1276,
	1277, 1278, 1280, 1281, 0, 0, 0, 0, 0, 0,
	0, 0, 1296, 1297, 1298, 1299, 0, 0, 0, 0,
	0, 1279, 0, 1310, 0, 0, 1285, 1286, 1292, 1291,
	1287, 1313, 0, 1284, 1282, 1283, 1275, 1276, 1277, 1278,
	1280, 1281, 0, 1311, 1321, 0, 1301, 1302, 1303, 1892,
	0, 0, 0, 0, 0, 1271, 1272, 0, 1304, 1305,
	1306, 1314, 1315, 1316, 0, 0, 0, 1317, 1318, 0,
	0, 0, 0, 1307, 0, 1288, 1289, 1891, 0, 0,
	1274, 0, 0, 1320, 0, 0, 0, 0, 1309, 0,
	0, 0, 0, 0, 0, 1294, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1273, 0, 0, 0, 0,
	0, 1319, 0, 1293, 0, 0, 0, 0, 0, 0,
	1290, 0, 0, 0, 0, 1308, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1300, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1296, 1297, 1298, 1299, 0, 1295, 0,
	0, 0, 1279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1271, 1272, 0, 1304, 1305, 1306, 1314, 1315,
	1316, 1312, 0, 0, 1311, 1321, 0, 1301, 1302, 1303,
	1307, 0, 0, 0, 0, 0, 0, 1274, 0, 0,
	1320, 0, 0, 0, 0, 0, 0, 0, 1317, 1318,
	0, 0, 0, 0, 0, 0, 1288, 1289, 0, 0,
	0, 0, 1273, 0, 0, 0, 0, 0, 0, 1309,
	1293, 0, 0, 0, 0, 0, 1294, 1290, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1319, 0, 0, 0, 0, 1310, 0, 0,
	1285, 1286, 1292, 1291, 1287, 1313, 1308, 1284, 1282, 1283,
	1275, 1276, 1277, 1278, 1280, 1281, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1296, 1297, 1298, 1299, 0, 0, 0, 0, 0, 1279,
	0, 0, 1300, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1295,
	0, 1311, 1321, 0, 1301, 1302, 1303, 0, 0, 0,
	0, 0, 0, 1271, 1272, 0, 1304, 1305, 1306, 1314,
	1315, 1316, 1312, 0, 0, 1317, 1318, 0, 0, 0,
	0, 1307, 0, 1288, 1289, 0, 0, 0, 1274, 0,
	0, 1320, 0, 0, 0, 0, 1309, 0, 0, 0,
	0, 0, 0, 1294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1273, 0, 0, 0, 0, 0, 1319,
	0, 1293, 0, 0, 0, 0, 0, 0, 1290, 0,
	0, 0, 0, 1308, 714, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1310, 0,
	0, 1285, 1286, 1292, 1291, 1287, 1313, 0, 1284, 1282,
	1283, 1275, 1276, 1277, 1278, 1280, 1281, 0, 0, 1300,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1296, 1297, 1298, 1299, 0, 1295, 0, 0, 0,
	1279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1271, 1272, 0, 1304, 1305, 1306, 1314, 1315, 1316, 1312,
	0, 0, 1311, 1321, 0, 1301, 1302, 1303, 1307, 0,
	0, 0, 0, 0, 0, 1274, 0, 0, 1320, 0,
	0, 0, 0, 0, 0, 0, 1317, 1318, 0, 0,
	0, 0, 0, 0, 1288, 1289, 0, 0, 0, 0,
	1273, 0, 0, 0, 0, 0, 0, 1309, 1293, 0,
	0, 0, 0, 0, 1294, 1290, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1319, 0, 0, 0, 0, 1310, 0, 0, 1285, 1286,
	1292, 1291, 1287, 1313, 1308, 1284, 1282, 1283, 1275, 1276,
	1277, 1278, 1280, 1281, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1296, 1297,
	1298, 1299, 0, 0, 0, 0, 0, 1279, 0, 0,
	1300, 0, 2242, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1295, 0, 1311,
	1321, 0, 1301, 1302, 1303, 0, 0, 0, 0, 0,
	0, 1271, 1272, 0, 1304, 1305, 1306, 1314, 1315, 1316,
	1312, 0, 0, 1317, 1318, 0, 0, 0, 0, 1307,
	0, 1288, 1289, 2237, 0, 0, 1274, 0, 0, 1320,
	0, 0, 0, 0, 1309, 0, 0, 0, 0, 0,
	0, 1294, 2461, 0, 0, 0, 0, 0, 0, 0,
	0, 1273, 0, 0, 0, 0, 0, 1319, 0, 1293,
	0, 0, 0, 0, 0, 0, 1290, 0, 0, 0,
	0, 1308, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1310, 0, 0, 1285,
	1286, 1292, 1291, 1287, 1313, 0, 1284, 1282, 1283, 1275,
	1276, 1277, 1278, 1280, 1281, 0, 0, 1300, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1296,
	1297, 1298, 1299, 0, 1295, 0, 0, 0, 1279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1312, 0, 0,
	1311, 1321, 0, 1301, 1302, 1303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1317, 1318, 0, 0, 0, 0,
	0, 0, 1288, 1289, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1309, 0, 0, 0, 0,
	0, 0, 1294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1319, 0,
	0, 0, 0, 1310, 0, 0, 1285, 1286, 1292, 1291,
	1287, 1313, 1308, 1284, 1282, 1283, 1275, 1276, 1277, 1278,
	1280, 1281, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1271, 1272, 0, 1304, 1305, 1306,
	1314, 1315, 1316, 0, 0, 0, 0, 0, 1300, 0,
	0, 0, 1307, 0, 0, 0, 0, 0, 0, 1274,
	0, 0, 1320, 0, 0, 1295, 0, 0, 0, 0,
	0, 0, 1271, 1272, 0, 1304, 1305, 1306, 1314, 1315,
	1316, 0, 0, 0, 1273, 0, 0, 0, 1312, 0,
	1307, 0, 1293, 0, 2183, 0, 0, 1274, 0, 1290,
	1320, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1273, 0, 0, 0, 0, 0, 0, 0,
	1293, 0, 0, 0, 0, 0, 0, 1290, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1296, 1297, 1298, 1299, 0, 0, 0, 0,
	0, 1279, 0, 0, 1310, 0, 0, 1285, 1286, 1292,
	1291, 1287, 1313, 0, 1284, 1282, 1283, 1275, 1276, 1277,
	1278, 1280, 1281, 1311, 1321, 0, 1301, 1302, 1303, 0,
	1296, 1297, 1298, 1299, 0, 0, 0, 0, 0, 1279,
	0, 0, 0, 0, 0, 0, 0, 1317, 1318, 0,
	0, 0, 0, 0, 0, 1288, 1289, 0, 0, 0,
	0, 1311, 1321, 0, 1301, 1302, 1303, 0, 1309, 0,
	0, 0, 0, 0, 0, 1294, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1317, 1318, 0, 0, 0,
	0, 1319, 0, 1288, 1289, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1308, 1309, 0, 0, 0,
	0, 0, 0, 1294, 0, 0, 0, 0, 0, 0,
	2199, 0, 0, 0, 0, 0, 0, 0, 0, 1319,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1300, 0, 1308, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1295, 0,
	0, 0, 0, 0, 0, 1271, 1272, 0, 1304, 1305,
	1306, 1314, 1315, 1316, 0, 0, 0, 0, 0, 1300,
	0, 1312, 0, 1307, 0, 0, 0, 0, 0, 0,
	1274, 0, 0, 1320, 0, 0, 1295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1273, 0, 0, 0, 1312,
	0, 0, 0, 1293, 0, 0, 0, 0, 0, 0,
	1290, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1310, 0, 0,
	1285, 1286, 1292, 1291, 1287, 1313, 0, 1284, 1282, 1283,
	1275, 1276, 1277, 1278, 1280, 1281, 0, 0, 0, 0,
	0, 0, 0, 1296, 1297, 1298, 1299, 0, 0, 0,
	0, 0, 1279, 0, 0, 1310, 0, 0, 1285, 1286,
	1292, 1291, 1287, 1313, 0, 1284, 1282, 1283, 1275, 1276,
	1277, 1278, 1280, 1281, 1311, 1321, 0, 1301, 1302, 1303,
	0, 0, 0, 0, 0, 1271, 1272, 0, 1304, 1305,
	1306, 1314, 1315, 1316, 0, 0, 0, 0, 1317, 1318,
	0, 0, 0, 1307, 0, 0, 1288, 1289, 0, 0,
	1274, 0, 0, 1320, 0, 0, 0, 0, 0, 1309,
	0, 0, 0, 0, 0, 0, 1294, 0, 0, 0,
	0, 0, 0, 0, 0, 1273, 0, 0, 0, 0,
	0, 0, 1319, 1293, 0, 0, 0, 0, 0, 0,
	1290, 0, 0, 0, 0, 0, 1308, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1300, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1296, 1297, 1298, 1299, 0, 0, 1295,
	0, 0, 1279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1271, 1272, 0, 1304, 1305, 1306, 1314, 1315,
	1316, 0, 1312, 0, 1311, 1321, 0, 1301, 1302, 1303,
	0, 0, 0, 0, 0, 0, 0, 1274, 0, 0,
	1320, 0, 0, 0, 0, 0, 0, 0, 1317, 1318,
	0, 0, 0, 0, 0, 0, 1288, 1289, 0, 0,
	0, 0, 1273, 0, 0, 0, 0, 0, 0, 1309,
	1293, 0, 0, 0, 0, 0, 1294, 1290, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1319, 0, 0, 0, 0, 0, 1310, 0,
	0, 1285, 1286, 1292, 1291, 1287, 1313, 0, 1284, 1282,
	1283, 1275, 1276, 1277, 1278, 1280, 1281, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1296, 1297, 1298, 1299, 0, 0, 0, 0, 0, 1279,
	0, 0, 1300, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1578, 0, 0, 0, 0, 0, 0, 1295,
	0, 1311, 1321, 0, 1301, 1302, 1303, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1312, 0, 0, 0, 0, 1589, 1574, 1579,
	1562, 1599, 1598, 1288, 1289, 1564, 1563, 0, 0, 0,
	0, 0, 1607, 1606, 0, 0, 1309, 0, 0, 0,
	0, 0, 0, 1294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1600, 0, 1596, 1595, 0, 0, 0, 0,
	0, 0, 0, 0, 1594, 0, 0, 0, 1310, 0,
	0, 1285, 1286, 1292, 1291, 1287, 1313, 0, 1284, 1282,
	1283, 1275, 1276, 1277, 1278, 1280, 1281, 0, 0, 1300,
	0, 0, 1593, 1591, 1592, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1573,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1312,
	1582, 1577, 1583, 1584, 1585, 1586, 1587, 0, 1581, 0,
	0, 0, 0, 0, 0, 0, 0, 1604, 1605, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 645,
	0, 676, 0, 0, 0, 0, 1566, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1597,
	0, 652, 0, 1575, 1576, 0, 0, 0, 0, 0,
	0, 0, 0, 650, 0, 1310, 0, 0, 1285, 1286,
	1292, 1291, 1287, 1313, 0, 1284, 1282, 1283, 1275, 1276,
	1277, 1278, 1280, 1281, 0, 651, 1590, 0, 0, 0,
	653, 0, 0, 0, 681, 0, 0, 0, 0, 0,
	659, 660, 0, 0, 0, 671, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 677,
	654, 0, 0, 1567, 1568, 1569, 1570, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1588, 1571, 0,
	0, 0, 0, 0, 0, 675, 665, 0, 1609, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1565, 0, 0, 1601, 1602,
	1603, 0, 0, 655, 0, 0, 0, 0, 0, 649,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1572, 656, 657, 0, 0, 1608, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 663, 0, 0, 0, 0, 0,
	0, 658, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 662, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 678, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 661, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 673, 0, 0, 0,
	0, 0, 0, 0, 0, 668, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 647, 666, 679,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 648, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 669, 0, 0, 667, 0, 0, 0,
	682, 683, 0, 0, 0, 0, 0, 680, 0, 0,
	0, 0, 0, 670, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 672,
}
var sqlPact = [...]int{

	344, -1000, -13, -1000, -1000, -1000, 204, -1000, -1000, -1000,
	-1000, 203, 202, 201, -1000, 200, 198, 196, 195, 194,
	192, 191, 190, 189, 188, 186, 185, -1000, -1000, 184,
	-1000, -1000, -1000, -1000, 183, 181, 177, -1000, 174, 1454,
	30828, 171, 170, 167, 1486, 48276, 1346, 166, 165, -1000,
	164, 1523, 35745, 1100, 1752, -1000, 163, 161, 1428, 47901,
	3675, 1871, 33465, 1267, 1836, 47520, 30447, 1821, 33084, 47139,
	-1000, -1000, 1022, -1000, -1000, 46758, 160, 158, 155, 153,
	152, -1000, 151, 46377, 147, 144, 142, 138, 137, 127,
	120, 119, -1000, 117, 116, 115, 113, 105, 104, 103,
	102, 101, 100, 97, 94, 93, 89, 88, 86, -1000,
	56697, 77, 76, 75, -1000, 1256, 73, 72, 65, 63,
	62, -1000, -1000, 59, 58, 55, 54, 53, 51, -1000,
	132, 50, 49, 45, 44, 41, -1000, 1031, 403, 2498,
	12580, 1173, 1161, 1157, 1139, 1144, 712, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 50901, 48276, 40, -195, 39,
	-1000, 2279, 782, 23543, 344, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 35364, 34983, 34602,
	28941, 45996, 45615, 10154, 10154, 879, -1000, -1000, -1000, -1000,
	-1000, -16, 31953, 48276, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 250, -1000, -1000, -1000, -1000, -1000, -1000, 19617, 19199,
	18781, 385, -1000, -1000, -1000, 244, -1000, -1000, -1000, -1000,
	1220, -1000, -1000, -1000, -1000, 45234, 44853, 2117, 44472, 28550,
	28159, 44091, 1706, 1681, 43710, -1000, -1000, 43329, -1000, -1000,
	2174, 1858, 1852, 34221, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 42954, 42573, 42192, 41811, 41430, 27768, 27377,
	561, -1000, -1000, -1000, -1000, 24305, -1000, -1000, -1000, -1000,
	-1000, 34, -1000, 32, 31, -1000, 30, 28, 26, 22,
	20, 19, 10, 9, -1000, 7, 3, -1000, 0, -7,
	-1000, -8, -11, 2615, 1238, 1313, 41049, 978, 2202, -1000,
	1343, -18, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 48276,
	-1000, 20021, -1000, 558, -1000, 1864, -1000, 20021, -1000, 1342,
	176, 1235, -1000, -1000, -1000, 1254, 1005, -1000, -1000, 48276,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2502, 1323, 557,
	40668, -1000, 1659, -1000, 662, 13388, -1000, 881, -1000, 13388,
	242, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1279, 1129, 2468,
	26986, 1448, 2304, 2125, 2499, 1505, 2059, 2042, 2028, 2018,
	1969, 2497, 1063, 2496, 973, 816, 2492, 1941, 1935, 2484,
	1308, 807, 2491, 2490, 1929, 1837, -1000, -1000, -1000, -1000,
	1024, -1000, -1000, -1000, -1000, -1000, -1000, 37245, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1031, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1617, 2244, 2244, 2244, 2338, 369, 366, -1000, 132, -1000,
	1413, -1000, 1298, -1000, -1000, -1000, 56045, -1000, -1000, 20021,
	20021, 20021, 20021, 20021, 1154, -1000, -1000, -1000, 593, -1000,
	554, 553, 10949, -1000, -1000, 2426, -1000, -1000, -1000, 377,
	-1000, -1000, 20021, -1000, 241, -1000, -1000, -1000, -1000, 552,
	2479, -1000, 783, -1000, -1000, -1000, 669, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1928, 509, 508, -1000, 505, 504,
	-1000, -1000, -1000, 550, 549, 548, 547, 546, 544, -1000,
	-1000, -1000, 1121, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 721, -1000, 721, 721, 485, 485,
	539, 536, 487, 535, -1000, -1000, 534, 485, 533, 530,
	-1000, -1000, 528, 665, 636, 527, 526, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1321, -1000, -1000, 1321,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 876, 49776, -1000,
	-1000, -1000, -19, 48276, -1000, 385, -19, -1000, -1000, 516,
	-1000, 14210, 14210, 14210, -1000, -1000, 1333, 20021, -1000, 1669,
	-1000, 3533, -230, 515, 24686, 627, 627, -1000, 22400, 600,
	26595, -1000, 509, 508, 505, 504, -1000, 239, -1000, -1000,
	-1000, -1000, -1000, 1711, 2110, 970, -1000, 1087, 2109, -1000,
	2181, 2108, 1085, -1000, -1000, 706, 2100, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1243, -1000, -1000, 1894,
	2094, -203, 1991, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1372, -1000, 29316, 31953, -21, -1000, -1000, -42, -1000, 9765,
	56045, -1000, 56045, 681, -1000, 56045, 673, -1000, 1828, 48276,
	10154, 48276, 48276, -1000, 495, 1516, 1287, -1000, -1000, 31578,
	2181, 1515, -1000, -1000, 691, 1510, -1000, -1000, 1503, -1000,
	385, -1000, -1000, 40287, 50526, 691, 1497, -1000, -1000, -1000,
	37245, -1000, 48276, -1000, 48276, -1000, 1010, -1000, 50151, 133,
	2090, -1000, -1000, 133, 2089, -1000, 133, 2086, -1000, 130,
	2081, -1000, -1000, 1316, 2077, -1000, -107, 2074, -1000, -1000,
	-107, 2072, -1000, -1000, 20021, -32, -1000, -1000, -1000, 782,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 39906, 29316, -1000,
	31578, 48276, 33840, 705, 56045, 2385, 56488, 29316, 56045, 31578,
	48276, 1920, -1000, 39525, 39144, 2288, 659, -1000, -1000, 48276,
	-1000, 20021, -1000, 2384, 1530, -31, -1000, -1000, -1000, -1000,
	-1000, 1576, 1570, 794, 992, -1000, 13388, 13388, 2159, -1000,
	233, 10154, -1000, -1000, 950, 1620, -1000, -1000, -1000, -1000,
	-1000, 38763, -1000, -1000, -1000, 1294, 48276, -1000, -1000, 1918,
	-1000, 31203, 48276, -1000, 48276, -1000, 48276, -1000, 48276, -1000,
	48276, -1000, -1000, -1000, -1000, -1000, 2008, 1160, 1908, -1000,
	48276, -1000, 48276, -1000, -1000, -1000, 1574, -1000, -1000, -1000,
	38388, 38007, 37626, -1000, -1000, 1110, -1000, 948, -1000, -1000,
	134, -1000, -1000, 1617, -1000, 1293, 1645, 18363, 1632, 20021,
	132, -1000, -1000, 132, 132, 12162, -1000, -1000, -1000, 48276,
	-1000, 5528, 56488, 10154, 889, 20021, 20021, 20021, 20021, 20021,
	20021, 20021, 20021, 20021, 20021, 20021, 20021, 20021, 20021, 20021,
	20021, 20021, 20021, 20021, 20021, 20021, 20021, 20021, 20021, 20021,
	20021, 20021, 20021, 20021, 20021, 20021, 20021, 20021, 20021, 20021,
	1601, 20021, 874, 20021, 20021, 20021, 20021, 1682, -1000, -1000,
	1255, 407, 1273, -1000, 2455, 2455, 2455, 5195, 5195, 468,
	593, -1000, 20021, -1000, 98, 20021, 366, 54038, -17, 10545,
	-1000, -1000, -1000, -1000, 17945, 723, 56045, 9376, 6881, -1000,
	2462, 927, 1938, 1747, 494, 670, 663, 653, 559, 20021,
	20021, 20021, 20021, 20021, 20021, -1000, -1000, -1000, -1000, -1000,
	-1000, 2426, -1000, 17541, 17123, -1000, 2456, 16705, 16287, -1000,
	15869, 21233, 15451, 888, 887, 886, 20021, 11353, -1000, -31,
	-1000, 49776, -1000, 48276, -19, 2373, 20021, 157, -1000, 54905,
	-1000, 157, 157, 493, -33, 56045, 1631, 1622, 23924, 1568,
	1187, 1187, 1187, -1000, 492, 578, 627, 7412, 15033, 491,
	627, 627, 210, 36120, 1199, 36120, 255, 365, 22019, 1669,
	-1000, -1000, 48276, 10154, -28, 1132, -1000, 32703, 2260, 2221,
	2219, 985, -1000, 965, 2330, 37245, 2353, 98, 2273, 1827,
	-1000, -1000, 872, 37245, 2181, -1000, 56488, -1000, 1684, 2327,
	1006, 1021, 1006, 1006, 1002, 37245, 871, 1134, 29316, 2269,
	869, -29, 2350, 98, 2268, 1825, 867, -1000, -1000, 48276,
	10154, 2247, 947, 625, -21, 31953, 48276, 230, -1000, 20021,
	20021, 962, -41, 228, 1646, 1642, 210, -1000, 32328, 2372,
	2071, 48276, 858, -1000, 2181, 2067, -1000, 1131, -1000, 2057,
	2047, 2370, 1281, 1492, -1000, -1000, -1000, 1277, 1488, 914,
	2045, 714, 381, 2361, 381, 25833, -1000, 48276, -1000, 48276,
	-1000, -1000, 48276, -1000, 48276, -1000, 48276, -1000, 48276, 48276,
	-1000, 48276, 29316, 29316, 29316, -43, 4051, 30066, 680, 856,
	-38, -1000, 758, 32328, 4346, -44, -1000, 913, -1000, -1000,
	-1000, 271, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 721,
	490, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 487, 1121, 485, 485, 485, -1000, -1000,
	-1000, 665, 636, -1000, -1000, -1000, 721, 721, -1000, -1000,
	-200, 1820, -42, 33840, 625, -1000, 625, -1000, 1898, -1000,
	2276, 640, -49, 800, -31, -1000, 1321, -1000, 1055, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2477, -1000, 2460, -1000, -1000, 2453, -22, -1000,
	-22, -1000, 10154, -1000, 48276, 1895, -1000, -1000, -1000, -1000,
	-1000, -1000, 48276, -1000, 48276, -1000, -1000, -1000, -1000, -1000,
	-1000, 3061, -1000, 1893, -1000, 4051, 227, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 48276, 48276, 48276, -1000, 37245,
	-1000, -1000, -1000, -1000, 56045, -1000, 438, -1000, -1000, 56045,
	1043, 1649, -1000, 1649, -23, -1000, 54744, 1610, 48276, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 657, 404, 404, 893, 893, 893, 893, 2376, 3706,
	3801, 3187, 718, 718, 718, 718, 718, 718, 718, 718,
	841, 1054, 1054, 841, 841, 841, 841, 841, 1054, 1054,
	1054, 718, 718, 718, 5195, 56205, 580, 20021, 20021, 855,
	1250, 407, 580, 20021, 580, 580, 580, 580, -1000, 1482,
	-1000, -1000, -1000, -1000, 1818, 484, 21233, 21233, -1000, -1000,
	-1000, 10949, 20021, -1000, -1000, -1000, -1000, 482, 20021, -1000,
	54199, -244, 363, -159, -1000, 20021, 568, -58, -1000, 996,
	-1000, 20021, 224, -1000, -1000, -46, 20021, 20021, 20021, 361,
	-1000, 358, -1000, 851, -1000, 850, 847, 843, -1000, 481,
	1177, 480, 478, 20021, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 55792, 51952, 51697, 51659, 6408, -55, -57, 356,
	-1000, 1816, -159, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	355, -1000, 354, -62, -1000, -70, -1000, 353, -1000, 55754,
	-159, 352, 4632, -1000, 21233, 21233, 21233, 10949, 475, 350,
	-1000, 54490, -1000, 654, 649, 648, 55501, 14615, 14615, 14615,
	349, 55340, 20021, -159, -1000, -1000, 474, -71, 714, 14210,
	23162, 10154, -1000, 714, 714, 20021, -1000, 20021, 23924, 23924,
	1600, 1618, 23924, -1000, -1000, -1000, -1000, 36120, 631, 627,
	36120, -1000, 2426, 1612, -1000, 348, -1000, 13806, 36120, 36120,
	10154, -1000, -1000, 48276, 385, -1000, -1000, 627, 347, 219,
	1707, 48276, 48276, 48276, -1000, -1000, 1479, 49401, 1464, 56488,
	48276, -1000, -1000, 473, 472, 1609, 1597, 48276, 48276, 49026,
	48651, 48276, 1126, 20021, 1549, 1467, 98, -1000, 647, 471,
	48276, 1084, -1000, -1000, -1000, -1000, -1000, 48276, -1000, -1000,
	2443, -1000, 1006, -1000, -1000, -1000, 1006, 2181, 1071, 48276,
	29316, 696, 644, 48276, 1133, 98, -1000, 642, 470, 10154,
	1088, -1000, 641, 48276, 1729, -1000, 1370, -1000, -1000, 8987,
	56045, 56045, -1000, -1000, 10154, 1628, 1628, 345, -24, -1000,
	-1000, -1000, -1000, -1000, -1000, 1668, 48276, 592, 48276, 98,
	48276, 143, 2469, 48276, 29316, 29316, 29316, 98, 48276, 2039,
	48276, 2023, 2022, 612, 48276, 1203, 20021, 1105, -1000, 25067,
	735, 48276, 1062, 128, -1000, -1000, -1000, 14, 48276, -1000,
	-1000, 133, 133, 133, -1000, 130, 1316, -1000, -107, -107,
	-1000, -1000, -1000, 1805, 36870, 48276, 2397, 29316, -73, -1000,
	762, 848, 846, -1000, 56488, -1000, 585, 812, -1000, 2441,
	460, 2426, -1000, 680, 48276, 112, -1000, 692, 1606, -1000,
	13388, 13388, -1000, 1321, -1000, -1000, 1081, -1000, 1108, -1000,
	-1000, -1000, -1000, 13388, -1000, -1000, 938, -42, -42, -1000,
	-1000, 172, -1000, 48276, -1000, -1000, -1000, -1000, 1043, -1000,
	20021, -1000, -1000, -1000, 12162, -1000, -1000, -1000, 48276, -212,
	20021, 580, 580, 20021, 21233, 21233, -1000, 580, -1000, -1000,
	-1000, -1000, -1000, 1800, 458, 20021, 56488, 4534, 4492, -78,
	841, 20021, -25, -1000, 20021, -1000, 53901, -1000, -1000, 581,
	2062, -1000, 20021, 55203, 8598, 339, 12984, -1000, 55042, -52,
	-52, -1000, 2475, 1531, 1171, 1124, 1028, 2434, -1000, 26214,
	719, 1203, 53740, 5528, 56488, 20021, 20021, 20021, -1000, -1000,
	2426, -1000, 20021, -1000, -1000, -1000, -1000, -1000, 1798, 20021,
	-1000, 5528, 56488, 21233, 21233, 21233, 21233, 21233, 21233, 21233,
	21233, 21233, 21233, 21233, 21233, 21233, 21233, 21233, 21233, 21233,
	21233, 21233, 1432, 21233, 2429, 2429, 2429, -27, 20021, -1000,
	1889, 1798, 20021, 20021, -1000, -1000, -1000, 56488, 338, 323,
	321, -1000, 20021, -159, 4346, -1000, 1746, -1000, -180, -1000,
	1669, -1000, -1000, 1746, 1746, -83, 56045, -1000, 1600, -1000,
	457, 20021, 23924, -1000, 567, -1000, -84, -1000, 36120, -1000,
	566, -241, -1000, 621, -1000, 627, 317, -1000, -1000, -1000,
	215, 385, -1000, 36120, -1000, 10154, -1000, -1000, 840, 837,
	-1000, 2021, -1000, 1460, -1000, 741, -1000, 1082, 20021, 22781,
	456, 455, 1262, -1000, 2017, 1316, 2011, 1316, -1000, -1000,
	655, -1000, 56045, 453, 451, -1000, -28, 1104, -1000, 25458,
	20021, -1000, 836, -1000, -1000, -1000, 2181, 832, -1000, -1000,
	1130, 25458, -1000, -1000, -1000, 25458, 20021, -1000, -29, 829,
	25458, 1986, 680, 1797, 928, -1000, -1000, -1000, -1000, -1000,
	-1000, 1664, 32328, 48276, 450, 48276, 449, -1000, -1000, 448,
	48276, 625, 2181, -1000, 691, -1000, -1000, 745, 10154, 447,
	10154, 1585, 612, 29691, -1000, 691, 1645, 56045, -1000, 1062,
	11757, 2233, -86, -1000, 214, -1000, -1000, -1000, 714, 25833,
	23924, 20021, 2489, -89, -1000, -1000, -1000, -1000, -1000, 98,
	-30, 445, -1000, 620, 618, -42, 1231, 2202, 2202, -1000,
	2428, -1000, 565, 316, 2426, 315, -1000, -42, 48276, -1000,
	1212, 10154, 48276, 48276, 10154, 48276, -1000, -1000, -31, -1000,
	-1000, -1000, -1000, 48276, -1000, -1000, -1000, 1221, 53603, -1000,
	2245, 10154, 2371, 580, 3263, 529, 20021, 56488, 56342, -92,
	20021, 20021, -1000, 310, 20021, 563, 56045, -1000, -1000, -1000,
	56045, 20021, 212, -1000, 2473, 20021, 308, 306, 302, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 298, -1000, -1000,
	51276, -1000, 20021, 291, -1000, 290, 278, 6155, 53442, 53305,
	277, 56045, 1889, 56045, -1000, -1000, 664, 664, 991, 991,
	991, 991, 2429, 422, 946, 341, 292, 292, 292, 431,
	506, 506, 292, 292, 292, 1783, 1518, 444, 4780, 20021,
	276, -1000, -1000, 56045, 56045, 275, -1000, -1000, -1000, -159,
	274, 1741, 2319, -1000, 23924, 1741, 1741, -1000, -1000, 48276,
	56045, -1000, -230, -1000, 2426, -1000, -1000, 1612, -1000, 7815,
	36120, 627, 10154, -1000, -1000, 206, 48276, 48276, 48276, 2009,
	-1000, 3347, -1000, 53144, -100, -1000, 2295, 2295, 20021, 210,
	-1000, -1000, 443, 22781, 48276, -1000, 1543, 1655, 777, 48276,
	-1000, 48276, -1000, -1000, 48276, 48276, 48276, 48276, 48276, -1000,
	441, -101, 48276, 48276, 29316, -1000, -1000, -106, 10154, -1000,
	2241, -1000, 29316, 885, 1133, 1719, -1000, 439, 22781, 435,
	48276, 32328, 2359, -1000, 680, -1000, -1000, 428, 1765, 1274,
	22781, 1266, 1587, 612, 29691, -1000, 914, 1062, -1000, -1000,
	-34, -1000, 452, 98, 48276, 2488, 1203, -1000, -35, 56045,
	-1000, 617, -1000, 36495, 36495, 29316, 29316, -1000, 2140, 2138,
	560, -1000, -1000, 268, -1000, -42, 1635, -1000, -1000, 1137,
	1364, -1000, -1000, -1000, -1000, -1000, 2245, 20021, 20021, 56342,
	-108, -1000, 580, 580, -1000, 53007, -1000, 56045, 8209, -1000,
	55042, -1000, -1000, -1000, -1000, 1148, -1000, 52846, -1000, -1000,
	-1000, 20021, -1000, -1000, -1000, -1000, 21233, 1781, 411, 56488,
	52709, -1000, -1000, -1000, 709, 20021, 20021, 1669, 709, 709,
	-109, 627, -1000, -1000, -1000, 2426, -1000, 36120, 206, 10154,
	-1000, -1000, -1000, 48276, -1000, 48276, -1000, 10154, 48276, 1755,
	1439, -1000, -1000, 1596, 409, 21233, 48276, 685, -1000, 1228,
	22781, 2245, 10154, 2245, 52548, 6881, -111, -116, 1438, -1000,
	1430, 20021, -1000, 56488, 1316, 1316, -119, -122, -1000, 828,
	827, 20021, 825, -1000, -1000, -1000, 823, -1000, 639, -107,
	25458, -1000, -1000, 1141, 22781, -124, 22781, -125, 265, 98,
	-1000, 22781, -1000, 48276, -133, 48276, -1000, 612, 29691, -1000,
	2022, -1000, 2051, 48276, 2212, -1000, -1000, -1000, 1645, 407,
	-1000, -138, -1000, -1000, 406, 405, -1000, -1000, -134, -1000,
	661, 656, -1000, -1000, -1000, 10154, 926, -1000, 580, 580,
	-1000, -1000, -1000, -1000, 263, 1203, 2318, -1000, 52411, 4466,
	21233, 56488, -140, -1000, -1000, 48276, 56045, -159, -1000, -1000,
	-1000, 36120, 507, -1000, -1000, 1502, -1000, -1000, -1000, 48276,
	1451, -1000, -1000, 20021, 4780, 402, 20021, -1000, 1664, 401,
	-1000, -1000, -1000, -1000, -1000, -1000, 2295, -46, -1000, 1109,
	-1000, -1000, 56045, 2290, -1000, -1000, 395, 394, 48276, 48276,
	-52, 393, 392, 25458, -1000, 48276, -147, 1228, -148, -1000,
	1664, -1000, -153, 745, -1000, 391, 29691, -1000, 1585, 911,
	-154, 48276, 1062, -1000, -1000, 29316, 29316, 1635, -1000, 48276,
	-1000, 48276, -1000, 48276, -1000, 1065, 20021, -1000, 4466, -156,
	-1000, -145, -1000, 2357, -1000, -1000, -1000, -1000, 1999, 52250,
	1555, 48276, 52113, 1133, 48276, 2245, 262, 48276, 744, 10154,
	1137, 1137, -1000, -1000, 261, 20021, 20021, -1000, 390, -1000,
	1664, 1228, 1133, 1228, 389, 22781, -1000, 1587, 982, -1000,
	714, -1000, -1000, -161, -164, -1000, -167, -173, -1000, 260,
	20829, 20829, -159, -1000, 48276, 387, 1952, -1000, 1240, 1190,
	254, 773, -1000, -174, -1000, -1000, 385, -1000, 20021, -1000,
	-179, -1000, 732, -182, -1000, 730, 2473, -184, -185, 48276,
	1133, 1664, -1000, 1664, 22781, -190, -1000, 25833, -1000, 680,
	680, -1000, -1000, -1000, -1000, -1000, 21622, 1381, 1040, 54452,
	-1000, -1000, -1000, 48276, -1000, 1259, 1257, 1039, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1555, 56045, -1000, 1137, 1687,
	-1000, 1137, 1771, -1000, -1000, -192, -1000, 1133, 1133, -204,
	-1000, -201, -1000, -1000, 2380, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2127, -1000, 766, 1290, 1290, 1240, -1000, 384,
	-1000, 383, 1299, -1000, -1000, 1228, -1000, 20425, -1000, 2411,
	-1000, -1000, 1550, -1000, -1000, 20021, 20021, -1000, -1000, -1000,
	1664, -1000, -1000, -1000, -1000, -209, -227, 1133, 1133, 821,
	-1000, -1000, 379, 20021, -228, 1133, -1000,
}
var sqlPgo = [...]int{

	0, 2974, 2973, 1843, 2972, 2328, 2971, 2970, 2958, 2957,
	2954, 2320, 2945, 2944, 2943, 2942, 2939, 2934, 2933, 2930,
	2920, 2917, 2916, 2913, 2904, 2900, 2899, 2893, 2891, 2889,
	2885, 2877, 2310, 2874, 2308, 2873, 2871, 2868, 2863, 2856,
	2854, 2852, 2851, 23, 2849, 2847, 2841, 2840, 2299, 2839,
	2838, 2289, 2837, 2829, 2234, 2827, 2822, 2821, 2232, 2193,
	2818, 2817, 2168, 2815, 2814, 2163, 2812, 2142, 2811, 2805,
	2140, 2804, 92, 109, 2801, 2095, 2800, 2793, 2063, 1991,
	1987, 2791, 1977, 2787, 2785, 1953, 1935, 2783, 169, 2782,
	2781, 2777, 2776, 1929, 1927, 2771, 2768, 2767, 165, 2764,
	1915, 2763, 2762, 2760, 2759, 2758, 2757, 2756, 2754, 2749,
	2746, 2745, 2744, 2742, 2739, 2735, 2734, 2733, 2732, 2727,
	2725, 2722, 2721, 2719, 2716, 2715, 2714, 177, 105, 2713,
	2712, 1876, 1863, 2711, 2709, 50, 47, 16, 68, 118,
	175, 4631, 150, 2706, 2705, 2703, 2701, 2698, 2696, 30,
	112, 119, 114, 110, 2695, 153, 2693, 2691, 55, 37,
	27, 19, 73, 2689, 2685, 2684, 1799, 98, 2677, 2675,
	159, 146, 2674, 546, 28, 89, 82, 88, 143, 51,
	2667, 97, 15, 2665, 173, 44, 2663, 57, 29, 22,
	3448, 94, 75, 65, 217, 210, 144, 142, 120, 773,
	2662, 164, 71, 137, 2661, 2660, 2655, 59, 130, 5,
	2, 131, 6, 2653, 8, 2651, 10, 2650, 2648, 2643,
	2642, 32, 108, 91, 244, 2641, 48, 221, 125, 2639,
	147, 2638, 64, 162, 138, 271, 90, 2637, 77, 20,
	72, 2634, 2630, 87, 156, 2629, 26, 106, 80, 101,
	178, 140, 86, 145, 141, 2628, 2627, 2620, 136, 2619,
	129, 99, 2618, 2617, 83, 25, 2616, 35, 151, 36,
	2615, 2614, 93, 2610, 135, 2609, 2607, 172, 102, 122,
	13, 45, 74, 7, 148, 111, 58, 52, 2605, 2961,
	1314, 39, 31, 2591, 103, 62, 33, 61, 104, 158,
	40, 2584, 2583, 154, 2581, 2579, 2578, 2577, 2576, 117,
	2574, 2573, 2572, 96, 187, 54, 2571, 100, 38, 155,
	139, 123, 171, 113, 2570, 126, 85, 133, 2568, 34,
	2567, 1059, 2566, 128, 2565, 2564, 2562, 2561, 325, 2560,
	2554, 2552, 673, 2549, 95, 2548, 127, 124, 161, 206,
	107, 157, 149, 370, 2547, 132, 24, 2545, 152, 21,
	0, 3366, 3424, 2544, 134, 79, 2543, 2542, 2541, 2539,
	42, 9, 3, 1, 17, 11, 78, 49, 245, 2538,
	2537, 81, 115, 2536, 174, 163, 2534, 2532, 2531, 43,
	2530, 14, 2529, 12, 2526, 2525, 18, 4, 2523, 2521,
	160, 2520, 2519, 2518, 2352, 2517, 168, 2515, 2513, 2511,
	1976, 2507, 2505, 56, 121,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
	8, 8, 9, 9, 9, 31, 31, 11, 11, 10,
	10, 10, 12, 7, 7, 7, 7, 7, 7, 7,
	14, 14, 23, 23, 15, 25, 18, 406, 406, 27,
	13, 21, 19, 19, 28, 17, 17, 24, 24, 151,
	151, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 405,
	405, 153, 153, 152, 148, 148, 155, 155, 155, 157,
	157, 154, 154, 147, 147, 32, 32, 86, 86, 86,
	138, 79, 79, 79, 74, 74, 358, 358, 359, 359,
	134, 134, 135, 135, 135, 135, 136, 136, 137, 137,
	137, 46, 34, 34, 34, 34, 34, 34, 34, 35,
	35, 36, 36, 36, 37, 37, 37, 44, 44, 128,
	128, 47, 47, 47, 47, 47, 47, 47, 47, 48,
	48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 48, 58, 58, 56, 59, 59, 60, 60,
	60, 60, 60, 60, 61, 61, 61, 61, 61, 61,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	68, 68, 68, 69, 69, 69, 66, 66, 66, 64,
	64, 64, 63, 63, 63, 67, 67, 67, 65, 65,
	65, 234, 234, 70, 70, 70, 70, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 73, 73, 73, 73, 73, 73, 73,
	73, 328, 328, 71, 71, 301, 301, 75, 75, 259,
	259, 76, 76, 76, 76, 76, 77, 77, 77, 77,
	87, 87, 87, 87, 404, 404, 228, 228, 170, 170,
	170, 170, 82, 82, 82, 82, 83, 83, 83, 84,
	84, 133, 133, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 38, 38, 38, 39, 39, 40, 40,
	41, 41, 42, 42, 43, 43, 43, 43, 43, 94,
	94, 94, 96, 93, 93, 93, 95, 95, 95, 95,
	97, 97, 98, 98, 98, 98, 98, 98, 99, 99,
	352, 352, 237, 237, 350, 350, 351, 351, 205, 205,
	205, 205, 205, 206, 206, 206, 357, 357, 357, 357,
	357, 357, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 118, 118, 118, 127, 127, 127, 127,
	127, 127, 127, 120, 120, 120, 111, 111, 101, 101,
	107, 107, 107, 107, 107, 102, 102, 108, 108, 110,
	110, 112, 112, 112, 112, 112, 112, 103, 103, 103,
	103, 114, 114, 114, 114, 113, 113, 123, 123, 123,
	123, 123, 123, 123, 316, 316, 119, 119, 119, 119,
	122, 122, 122, 122, 117, 117, 117, 121, 121, 124,
	124, 124, 124, 104, 104, 105, 105, 106, 106, 125,
	125, 116, 116, 126, 126, 126, 126, 126, 126, 126,
	115, 115, 115, 407, 407, 109, 402, 402, 400, 400,
	400, 400, 400, 400, 400, 401, 401, 403, 403, 80,
	80, 52, 52, 53, 53, 207, 207, 208, 208, 282,
	282, 282, 282, 209, 209, 156, 156, 156, 212, 213,
	213, 210, 210, 211, 211, 211, 215, 215, 214, 217,
	217, 216, 281, 368, 368, 369, 369, 369, 369, 369,
	369, 369, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 366, 366, 366, 367, 364, 364, 365, 365,
	365, 365, 408, 408, 280, 280, 221, 221, 371, 371,
	371, 371, 372, 372, 372, 372, 372, 375, 374, 373,
	373, 373, 373, 373, 312, 312, 312, 57, 57, 57,
	248, 248, 247, 247, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 130, 130, 54,
	54, 54, 162, 162, 51, 51, 51, 55, 55, 50,
	50, 50, 50, 50, 265, 265, 263, 263, 226, 226,
	318, 318, 318, 174, 174, 149, 149, 149, 20, 22,
	22, 16, 16, 16, 16, 16, 16, 29, 29, 30,
	30, 26, 26, 264, 264, 266, 266, 81, 81, 85,
	85, 91, 91, 129, 129, 129, 129, 129, 129, 129,
	33, 33, 33, 33, 45, 45, 45, 45, 89, 411,
	411, 411, 90, 90, 410, 410, 169, 169, 169, 169,
	171, 171, 277, 277, 278, 278, 412, 412, 279, 279,
	279, 164, 163, 165, 165, 49, 49, 49, 158, 158,
	159, 159, 160, 160, 161, 161, 413, 413, 78, 78,
	78, 132, 132, 201, 201, 274, 274, 274, 222, 222,
	179, 179, 276, 276, 275, 275, 275, 246, 246, 246,
	131, 131, 231, 231, 239, 239, 240, 240, 324, 324,
	241, 88, 88, 141, 141, 139, 139, 139, 139, 139,
	139, 140, 140, 140, 142, 142, 142, 142, 142, 142,
	142, 145, 145, 145, 145, 146, 146, 146, 144, 144,
	382, 382, 382, 384, 384, 385, 381, 381, 383, 383,
	409, 409, 250, 250, 250, 219, 220, 218, 218, 224,
	224, 223, 225, 225, 317, 317, 317, 244, 244, 244,
	244, 269, 269, 267, 267, 268, 268, 270, 270, 271,
	271, 271, 272, 272, 273, 273, 243, 243, 297, 297,
	143, 143, 143, 230, 230, 230, 232, 232, 287, 287,
	287, 288, 288, 286, 286, 286, 286, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	398, 398, 398, 399, 399, 315, 315, 320, 320, 320,
	320, 320, 320, 313, 313, 314, 314, 325, 326, 326,
	253, 253, 253, 253, 251, 251, 252, 252, 321, 321,
	321, 321, 245, 245, 322, 322, 322, 283, 283, 329,
	329, 329, 344, 344, 229, 229, 229, 339, 339, 330,
	330, 330, 330, 330, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 333, 333, 333, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 343, 343, 343,
	343, 343, 334, 334, 340, 341, 335, 336, 342, 342,
	342, 342, 346, 346, 337, 337, 337, 337, 337, 337,
	337, 338, 260, 260, 260, 260, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 261, 261, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 291, 291,
	291, 291, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 376, 376, 376, 376, 376, 376, 376,
	376, 379, 379, 380, 380, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 386, 386, 387,
	387, 389, 389, 390, 390, 391, 392, 392, 392, 393,
	394, 394, 388, 388, 395, 395, 395, 396, 396, 397,
	397, 397, 397, 397, 303, 303, 304, 305, 311, 311,
	311, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 172, 172, 172,
	172, 172, 236, 236, 235, 235, 300, 300, 298, 298,
	302, 302, 254, 254, 345, 345, 345, 345, 345, 345,
	345, 255, 255, 255, 262, 256, 256, 257, 257, 257,
	257, 257, 294, 295, 258, 258, 258, 296, 296, 306,
	310, 310, 309, 308, 308, 307, 307, 284, 284, 285,
	285, 242, 242, 414, 414, 238, 238, 323, 323, 323,
	323, 203, 203, 233, 233, 202, 202, 196, 196, 197,
	197, 197, 197, 227, 227, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 347, 347, 347, 348,
	349, 299, 189, 188, 176, 177, 187, 186, 185, 175,
	178, 182, 183, 184, 180, 181, 192, 191, 190, 327,
	198, 198, 199, 199, 199, 200, 200, 200, 200, 173,
	173, 193, 193, 194, 195, 195, 166, 166, 166, 167,
	167, 168, 168, 356, 356, 354, 354, 354, 355, 355,
	355, 355, 353, 353, 353, 353, 353, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 1, 3, 4, 6, 1, 3, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 6, 4, 6, 6, 6, 5, 1, 1, 5,
	7, 7, 7, 10, 7, 4, 12, 4, 12, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 3, 3, 3, 6, 4, 3, 1, 3, 2,
	1, 1, 3, 1, 3, 2, 1, 1, 0, 2,
	0, 2, 0, 2, 0, 7, 2, 5, 6, 2,
	1, 12, 12, 2, 7, 2, 1, 1, 1, 3,
	3, 0, 3, 1, 3, 1, 1, 3, 2, 5,
	0, 5, 1, 2, 1, 2, 1, 2, 2, 3,
	3, 3, 5, 3, 3, 5, 3, 6, 6, 1,
	1, 1, 2, 1, 2, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 3, 1, 2,
	1, 2, 1, 7, 3, 8, 8, 3, 2, 2,
	2, 2, 2, 2, 1, 1, 2, 1, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 3, 5, 3, 3, 5,
	3, 1, 3, 2, 2, 5, 3, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 2,
	1, 1, 3, 5, 2, 3, 0, 3, 2, 3,
	0, 2, 3, 2, 3, 2, 6, 4, 7, 2,
	6, 4, 7, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 2, 1, 2, 2, 3, 2, 4,
	3, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 3, 1, 1, 3, 5, 4, 6, 4,
	3, 0, 1, 3, 2, 4, 2, 4, 1, 6,
	6, 3, 5, 3, 2, 6, 3, 3, 4, 4,
	3, 3, 1, 3, 2, 1, 3, 1, 2, 1,
	1, 2, 2, 3, 1, 1, 1, 3, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 3, 3, 1, 1, 1, 1,
	1, 2, 2, 5, 7, 3, 3, 3, 3, 3,
	4, 4, 3, 4, 4, 4, 3, 2, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 2, 3, 3, 3, 2, 3, 5, 4, 6,
	4, 5, 6, 5, 1, 0, 2, 3, 3, 3,
	6, 4, 2, 3, 4, 2, 3, 3, 3, 4,
	3, 3, 3, 4, 4, 4, 4, 4, 4, 2,
	3, 2, 3, 7, 7, 8, 10, 7, 4, 5,
	5, 5, 3, 1, 1, 5, 2, 0, 1, 1,
	1, 1, 3, 2, 2, 2, 1, 2, 0, 3,
	2, 8, 11, 6, 9, 1, 0, 1, 3, 1,
	1, 1, 1, 8, 0, 1, 1, 0, 2, 1,
	0, 1, 0, 9, 9, 3, 1, 3, 7, 1,
	3, 11, 3, 2, 0, 3, 1, 2, 2, 3,
	2, 6, 2, 1, 1, 2, 4, 2, 5, 5,
	5, 2, 8, 9, 6, 5, 3, 1, 4, 7,
	5, 10, 1, 1, 4, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 1, 2, 1, 4, 7, 3,
	1, 0, 1, 2, 2, 1, 2, 3, 2, 2,
	3, 2, 2, 2, 2, 2, 3, 4, 2, 4,
	7, 3, 3, 0, 3, 6, 3, 6, 3, 13,
	16, 9, 12, 4, 2, 0, 1, 0, 1, 3,
	3, 3, 5, 2, 0, 1, 1, 0, 6, 6,
	8, 6, 8, 8, 10, 8, 10, 6, 8, 6,
	8, 6, 8, 1, 0, 2, 0, 2, 2, 3,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	3, 2, 3, 2, 2, 2, 2, 2, 2, 1,
	1, 0, 2, 2, 1, 0, 1, 3, 2, 0,
	2, 1, 1, 0, 1, 3, 1, 0, 1, 1,
	1, 2, 3, 2, 2, 8, 11, 3, 3, 0,
	3, 0, 3, 0, 3, 0, 1, 0, 6, 7,
	3, 6, 3, 1, 3, 1, 4, 2, 1, 3,
	1, 3, 8, 5, 4, 3, 0, 2, 2, 0,
	10, 3, 2, 0, 1, 3, 1, 1, 3, 3,
	5, 1, 1, 3, 3, 1, 2, 3, 2, 3,
	4, 2, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 8, 8, 8, 2, 4, 4, 4, 2, 2,
	2, 2, 3, 1, 3, 6, 1, 0, 1, 0,
	1, 0, 1, 1, 0, 1, 5, 1, 0, 1,
	0, 3, 1, 3, 2, 4, 5, 2, 2, 1,
	1, 1, 0, 2, 5, 2, 3, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 3, 0, 2, 0,
	4, 2, 5, 3, 2, 0, 1, 3, 3, 5,
	1, 1, 3, 2, 4, 4, 0, 8, 4, 6,
	7, 3, 4, 3, 4, 3, 4, 1, 5, 5,
	0, 2, 3, 1, 3, 2, 0, 3, 4, 5,
	4, 5, 4, 3, 2, 1, 0, 5, 1, 0,
	2, 2, 2, 1, 1, 0, 4, 2, 1, 2,
	2, 4, 1, 3, 1, 2, 3, 2, 0, 2,
	5, 2, 1, 1, 2, 3, 0, 1, 1, 1,
	1, 1, 2, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 5, 2, 4, 1, 2, 2,
	1, 1, 1, 0, 1, 1, 4, 1, 4, 1,
	4, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 4, 1, 3,
	3, 3, 5, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 3, 4, 3, 4, 4, 5, 3, 3,
	3, 3, 3, 4, 3, 2, 4, 2, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 4, 1, 1, 1, 1,
	3, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 2,
	1, 2, 1, 1, 2, 1, 3, 1, 1, 2,
	2, 1, 1, 3, 5, 6, 8, 6, 6, 4,
	3, 4, 1, 1, 1, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 6, 6, 8, 6, 6, 4,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	3, 4, 3, 4, 3, 4, 4, 3, 6, 5,
	5, 5, 4, 4, 3, 4, 3, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 0, 1, 4, 2,
	2, 2, 2, 2, 4, 5, 4, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 0, 1, 3, 1, 3, 3, 3,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 1, 2, 3, 0, 3, 3, 2,
	2, 1, 2, 2, 3, 2, 1, 1, 3, 5,
	1, 2, 4, 2, 0, 1, 0, 3, 5, 1,
	0, 1, 2, 1, 0, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 3, 1, 1, 1, 1,
	5, 3, 1, 1, 3, 1, 1, 1, 1, 6,
	2, 1, 5, 1, 1, 1, 1, 2, 2, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 7, 1, 7, 5, 3, 1,
	1, 1, 1, 1, 3, 5, 1, 1, 1, 1,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 418, -4, -32, -34, -46, -44,
	-47, -76, -59, -60, -61, -75, -70, -74, -77, -78,
	-79, -80, -71, -86, -85, -87, -91, -38, -88, -81,
	-82, -92, -100, -129, -130, -131, -132, -5, -11, 25,
	36, -35, -36, -37, 50, 76, 64, -54, -51, -48,
	-58, 78, 99, -383, 103, -62, -65, -67, 107, 116,
	121, 122, 145, 154, 254, 261, 282, 284, 286, 295,
	-40, -39, 117, -139, -141, 280, -83, -84, -93, -94,
	-95, -96, -133, 313, -101, -102, -103, -104, -105, -106,
	-107, -108, -109, -110, -111, -112, -113, -114, -115, -116,
	-117, -118, -119, -120, -121, -122, -123, -124, -125, -126,
	316, -33, -45, -90, -89, 360, -6, -7, -8, -9,
	-10, -12, -22, -49, -50, -52, -53, -55, -57, -56,
	-382, -63, -64, -66, -68, -69, -142, -140, 415, 281,
	369, 37, 325, 65, 111, 290, 20, -14, -18, -15,
	-17, -19, -16, -23, -27, -25, -24, -26, -28, -29,
	-30, -31, -20, -21, -13, 386, 394, -145, -143, -144,
	-146, 302, 377, 338, 419, 418, 418, 418, 418, 418,
	418, 418, 418, 418, 418, 418, 418, 418, 418, 418,
	418, 418, 418, 418, 418, 418, 2, 338, 380, 303,
	370, 92, 165, 266, 252, -400, 2, 4, -362, -360,
	-197, -196, 338, 92, 30, 38, 39, 41, 44, 54,
	55, 56, 59, 96, 97, 114, 123, 124, 134, 147,
	149, 157, 158, 172, 178, 180, 200, 229, 231, 244,
	248, 258, 260, 268, 292, 319, 334, 350, 351, 357,
	358, 377, 378, 382, 389, 20, 21, 22, 23, 25,
	35, 36, 37, 40, 42, 43, 46, 47, 48, 49,
	50, 51, 58, 63, 64, 65, 66, 67, 72, 69,
	70, 71, 74, 76, 77, 80, 81, 82, 90, 91,
	93, 94, 95, 99, 101, 103, 106, 107, 109, 110,
	116, 117, 120, 115, 118, 344, 346, 119, 121, 122,
	132, 133, 135, 136, 138, 140, 144, 146, 151, 152,
	153, 154, 155, 156, 166, 161, 167, 171, 174, 173,
	175, 176, 177, 168, 182, 185, 186, 187, 189, 190,
	193, 194, 195, 198, 197, 202, 203, 206, 207, 210,
	212, 215, 216, 219, 217, 218, 221, 222, 224, 223,
	230, 232, 233, 235, 236, 239, 240, 243, 246, 249,
	250, 251, 252, 253, 254, 255, 257, 259, 261, 263,
	264, 265, 266, 267, 269, 270, 272, 273, 274, 275,
	276, 280, 278, 279, 281, 282, 283, 284, 286, 288,
	289, 290, 291, 293, 314, 315, 327, 295, 296, 297,
	298, 299, 300, 301, 305, 309, 306, 307, 308, 303,
	304, 310, 311, 313, 316, 318, 320, 321, 324, 325,
	326, 328, 331, 332, 333, 329, 330, 323, 336, 337,
	339, 340, 341, 342, 343, 345, 347, 348, 352, 355,
	356, 360, 361, 362, 363, 366, 367, 368, 373, 369,
	371, 374, 375, 376, 381, 387, 388, 390, 391, 392,
	-195, -166, 408, -194, 418, 418, 418, 2, 186, 265,
	310, -190, -193, -194, -195, -166, 4, -360, -362, 92,
	237, 418, 418, 418, 2, 338, 326, 115, 303, 370,
	288, 380, -263, 182, 92, 365, -166, 261, 24, 2,
	101, 171, 368, 367, 24, 257, 304, 340, 342, 2,
	418, 418, 2, 380, 303, 338, 165, 92, 370, 288,
	-184, 2, -166, -73, 2, 415, -72, -5, -48, -58,
	-62, -75, -70, -11, -32, -34, -54, -51, -59, -65,
	-67, -79, -78, -80, -82, -86, -85, -88, -93, -94,
	-100, -131, -132, 78, 25, 107, 313, 117, 181, 2,
	-404, -228, 2, 24, -170, -166, 78, 145, 302, 338,
	2, 186, 2, -184, 2, -400, 2, 186, 2, -404,
	-228, 23, 2, -166, 2, 299, 316, -171, 2, 295,
	-166, 418, 418, 418, 418, 418, 418, 207, 58, 292,
	310, -98, 356, -97, 350, 297, -99, -352, 2, 219,
	-166, 418, 418, 418, 418, 418, 418, 418, 418, 418,
	418, 418, 418, 418, 418, 418, 418, 418, 418, 418,
	418, 418, 418, 418, 418, 2, -127, 310, 326, 152,
	36, 58, 24, 63, 93, 146, 165, 166, 194, 73,
	74, 264, 207, 187, -316, 119, 311, 339, 298, 336,
	356, 78, 371, 289, -407, 118, 4, 92, 219, 312,
	350, 67, 343, 344, 418, 418, 418, -409, 2, 338,
	418, 418, 418, 418, 418, 418, 418, 418, 418, 418,
	418, -140, -142, -141, 418, 418, 418, 418, 418, -223,
	-224, 364, 179, 113, 242, -139, -141, 2, -382, -127,
	310, 2, 58, 24, -350, 2, -289, 237, -291, 406,
	407, 401, 225, 393, -303, 98, 214, 213, -293, -306,
	114, 292, 415, -200, -292, 421, 9, -379, -141, 31,
	-304, -305, 52, -198, -166, 7, 8, 5, 6, -173,
	-331, -299, -338, 359, 125, 228, -376, -377, -199, 4,
	-360, -354, -332, -341, -336, -337, -339, 42, 48, 47,
	347, 218, 305, 306, 307, 308, 320, 373, 161, 40,
	235, 236, 173, 180, 61, 84, 85, 83, 88, 89,
	86, 312, 370, 53, 30, 157, 229, 158, 59, -378,
	43, 94, 106, 135, 136, 174, 175, 176, 177, 189,
	190, 330, 352, 39, 41, 44, 54, 55, 96, 97,
	123, 124, 134, 147, 172, 178, 200, 231, 248, 258,
	268, 319, 334, 350, 351, 357, 358, 378, -361, -342,
	79, 126, 143, 170, 159, 183, 184, 188, 201, 204,
	220, 227, 245, 247, 287, 317, -410, 2, 356, 356,
	2, -410, 2, -410, 2, -169, 2, 356, 353, -411,
	356, 389, -384, 269, -385, -184, -384, 418, 418, 420,
	418, -218, -219, -220, 2, 24, 104, 415, 2, -319,
	2, 413, -321, -173, 196, -378, -141, -320, 415, -190,
	238, -199, 84, 85, 88, 89, 4, -166, 61, 214,
	213, -3, 2, -321, 157, -190, 2, -321, 157, 2,
	-191, 157, -321, -193, 2, -358, 157, -356, 9, -355,
	5, 4, -360, -362, -361, 2, -175, -166, 2, -202,
	157, -190, -187, -353, 4, -360, -362, -361, -363, 24,
	26, 27, 28, 29, 31, 32, 33, 34, 45, 52,
	53, 57, 60, 62, 73, 78, 83, 84, 86, 85,
	87, 88, 89, 98, 100, 102, 104, 105, 108, 111,
	113, 125, 127, 139, 141, 142, 145, 148, 150, 160,
	165, 169, 179, 181, 196, 199, 205, 208, 209, 225,
	226, 228, 234, 237, 238, 241, 242, 256, 262, 271,
	285, 302, 312, 322, 335, 338, 349, 353, 354, 359,
	364, 365, 370, 372, 379, 380, 383, 384, 385, 386,
	-188, -353, 353, 420, -233, -196, -197, -227, -166, 417,
	-289, 2, -289, 157, 2, -289, 157, 2, -221, 415,
	417, 338, 62, 2, -190, 157, -180, 2, -166, 109,
	-191, 157, 2, -193, -358, 157, 2, -358, 157, 2,
	-192, 2, -190, 165, 165, -175, 157, 2, -166, 24,
	142, 2, 181, 2, 181, 2, -322, 2, -321, -234,
	157, 2, -190, -234, 157, 2, -234, 157, 2, -203,
	157, 2, -202, -175, 157, 2, -359, 157, 2, -358,
	-359, 157, 2, -259, 415, -328, 2, -327, -355, 377,
	418, 418, 418, 418, 418, 418, 418, 418, 418, 418,
	418, 418, 418, 418, 418, 418, 418, 310, -138, 80,
	237, 353, 420, -190, -289, -301, 415, 142, -289, 237,
	142, 239, 2, 92, 338, 392, 24, -166, 2, 314,
	2, 415, -98, 56, 356, -278, 2, -279, -163, -164,
	-165, 185, 263, 267, 392, -350, 353, 398, 142, -350,
	-237, 417, -127, 2, 139, 372, 2, 7, 2, -358,
	2, 314, 2, 264, 311, 58, 142, 2, 2, -402,
	2, 237, 142, 2, 142, 2, 142, 2, 142, 2,
	142, 2, 2, 264, 311, 2, 355, 195, 355, 2,
	142, 2, 142, 2, 5, 2, 185, 263, 327, 2,
	338, 380, 303, 2, 2, 142, 2, 142, 392, 2,
	-245, -321, -223, -224, -244, -267, -268, 205, 127, 234,
	-250, 24, 104, -250, -250, 46, 416, 416, -127, 314,
	2, 10, 11, 60, 35, 406, 407, 408, 409, 137,
	410, 411, 404, 405, 403, 396, 397, 400, 191, 192,
	75, 399, 398, 68, 211, 294, 128, 129, 130, 131,
	277, 162, 163, 164, 13, 14, 15, 28, 241, 204,
	393, 159, 317, 401, 16, 17, 18, 183, 184, 227,
	38, 160, -172, -204, -289, -289, -289, -289, -289, 247,
	-242, -284, 413, -141, 415, 415, -141, -289, -235, 415,
	-349, 7, -141, -298, 413, -307, -289, 417, 415, 5,
	415, 5, -386, 387, 139, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 260, -346, 381, -346, -346,
	-333, 415, -333, 415, 415, -334, 415, 415, 415, -333,
	415, 415, 415, 388, 388, 394, 415, 415, -277, -278,
	-277, 353, -171, 420, -384, -221, 415, -238, -323, -289,
	408, -238, -238, 237, -235, -289, 79, -253, 188, 220,
	143, 201, 287, 170, -349, -73, -286, 421, 415, -173,
	-378, -141, -166, -315, 394, -315, -141, -320, 415, -319,
	408, -190, 415, 417, -151, 278, -150, 22, 25, 107,
	375, 120, -211, 167, 252, 114, 323, -406, 117, 296,
	345, 346, 278, 114, -247, -249, 32, 90, 222, 249,
	49, 155, 213, 214, 325, 114, 278, 386, 114, 117,
	278, -153, 323, -406, 117, 296, 278, -152, -211, 114,
	421, 117, 232, -358, -233, 420, 420, -353, 408, 114,
	114, 142, -227, -353, -190, -198, -166, -199, 415, -221,
	225, 237, -400, -248, -247, 225, -162, -381, 386, 225,
	225, -221, -177, 157, 2, -167, -166, -177, 157, -381,
	225, -322, -201, -190, -201, 313, -184, 32, -155, 420,
	51, 283, 114, -155, 114, -155, 114, -155, 420, 114,
	-155, 114, 420, 114, 114, -235, 416, 420, -358, -400,
	-227, -170, 78, 415, 32, -300, -329, -330, -331, -340,
	-335, -338, 42, 48, 47, 347, 218, 305, 306, 307,
	308, 320, 373, 161, 40, 235, 236, 173, 4, 41,
	-342, 180, 172, 174, 175, 176, 177, 178, 319, 39,
	268, 135, 136, 134, 106, 97, 96, 231, 44, 43,
	94, 350, 351, 352, 189, 190, 55, 54, 378, 330,
	-359, -400, -227, 139, -175, 2, -190, 2, 69, 70,
	392, -352, -235, 32, -278, 2, -412, 420, 203, -206,
	210, 224, 151, 238, 390, -357, 5, 4, -299, -312,
	98, 207, -338, 8, 407, -347, 7, 406, -351, -350,
	-351, 82, 417, -353, 338, 189, -352, 24, 315, 2,
	-190, -403, 139, -401, 288, -400, -190, -190, -190, -190,
	-190, 139, 2, 355, 2, 139, -166, -166, 203, -190,
	2, -192, 2, -191, 2, 338, 165, 338, -155, 420,
	-244, -268, -267, -270, -289, 24, -273, 133, 221, -289,
	-291, -140, -140, -140, -225, -317, -289, 262, 165, -352,
	-344, -329, -343, 273, 274, 272, 276, 275, -329, -189,
	-353, 350, -289, -289, -289, -289, -289, -289, -289, -289,
	-289, -289, -289, -289, -289, -289, -289, -289, -289, -289,
	-289, -289, -289, -289, -289, -289, -289, -289, -289, -289,
	-289, -289, -289, -289, -289, -289, -289, 204, 159, 317,
	38, 160, -289, 353, -289, -289, -289, -289, 217, 225,
	228, 359, 125, 366, 104, 232, -414, 335, 34, -296,
	-141, 415, -311, 29, 322, 24, -303, 292, 415, -284,
	-289, -285, -236, -235, 416, 420, -236, -302, -298, -310,
	-309, 383, -353, 408, 416, -235, 379, 24, 104, 408,
	2, 7, -260, 391, 216, 95, 153, 215, -261, 301,
	-387, 132, 148, 415, 416, 2, 416, 2, 416, 2,
	416, 2, -289, -289, -289, -289, -289, -235, -349, -254,
	2, -345, -235, 4, 391, 216, 95, 153, 215, 301,
	-254, 2, 7, -235, 2, -235, 2, -255, 2, -289,
	-235, -256, -290, -291, 406, 407, 401, 415, 292, -257,
	2, -289, -236, 350, 350, 350, -289, 45, 199, 354,
	-258, -289, 142, -235, -171, -385, 32, -235, -230, 420,
	142, 32, 4, -230, -230, 415, 416, 420, 188, 188,
	-319, -253, 188, -251, 245, -251, -251, -398, 415, 414,
	-315, -176, 413, 422, -353, -236, 2, 415, -315, -315,
	417, -314, -313, 32, -184, 243, -314, 416, -190, -353,
	420, 353, -264, 73, 62, -281, 157, 62, -364, -178,
	73, -365, -166, 57, 365, 262, 141, -264, 73, -264,
	73, 73, 313, 326, 46, -321, 35, -88, 71, 142,
	353, -321, -249, -329, 90, 213, 214, 46, -348, -347,
	407, -348, 46, -348, -348, -348, 386, -191, -321, 353,
	253, -358, 71, 353, 420, 35, -88, 71, 142, 353,
	-202, -176, 71, 338, -326, -325, 395, -196, -166, 417,
	-289, -289, 328, 416, 417, 183, 183, -207, -208, -166,
	-282, -281, -366, -367, -364, 182, 165, 365, 126, 32,
	114, -227, 353, 114, 253, 114, 114, 32, 237, 225,
	237, 225, -158, 341, 114, -283, 384, -274, -88, 415,
	98, 32, -274, -239, -240, -324, -241, -178, 415, -184,
	-190, -234, -234, -234, -202, -203, -175, -358, -359, -359,
	416, -73, -327, -137, 386, 353, 386, 372, -208, -72,
	25, 78, 107, 416, 420, -229, 31, 413, -260, 415,
	-346, 415, -137, -325, 142, -228, -326, -326, 139, 70,
	398, 353, 416, 356, -279, -205, 267, 321, 279, 309,
	8, 7, 7, 420, -353, -190, 139, -227, -227, 310,
	-73, 139, -73, 417, -190, -202, -190, -321, -271, -347,
	415, -272, 292, 293, 420, -149, 33, 102, 193, -190,
	392, -289, -289, 353, -414, 335, -296, -289, 217, 228,
	359, 125, 366, 104, 232, 142, 415, -290, -290, -235,
	-289, 415, -235, 414, 424, 416, -289, 414, 414, 420,
	-308, -309, 108, -289, 417, -224, 420, -223, -289, -235,
	-235, 416, 416, 353, 353, 353, 353, 415, -392, 246,
	415, 415, -289, 32, 420, 420, 420, 420, 416, 416,
	420, 416, 142, 416, 416, 416, 416, 416, -262, 256,
	416, 10, 11, 406, 407, 408, 409, 137, 410, 411,
	404, 405, 403, 396, 397, 398, 68, 211, 294, 13,
	14, 15, 183, 160, -290, -290, -290, -235, 415, 416,
	-294, -295, 142, 139, 392, 392, 392, 32, -258, -258,
	-258, 416, 142, -235, 415, 416, -283, -323, -232, 2,
	-319, -186, -353, -283, -283, -235, -289, -319, -319, -252,
	372, 237, 188, -319, -313, 416, -399, -349, -315, -314,
	-349, -288, -287, 140, 223, 416, -236, 2, -314, -314,
	-353, -184, -221, -315, 416, 417, -150, -190, -178, -185,
	-166, 225, -281, 157, -157, 225, -329, -185, 415, 415,
	193, 193, -178, -185, 157, -178, 157, -185, -185, -405,
	267, 233, -289, 206, 266, 226, -151, 278, -88, 392,
	415, -192, 278, -198, -348, -348, -247, 278, -191, -358,
	386, 392, -175, -152, -88, 392, 415, -176, -153, 278,
	392, -190, -134, 156, 232, 408, -353, -128, 5, 228,
	-128, 416, 420, 165, -177, 165, -183, -167, -88, -190,
	142, 4, -191, -358, -358, -358, -88, -190, 114, -190,
	114, -159, 110, -413, 398, -175, -224, -289, -246, -276,
	285, 237, -222, -179, -178, 377, -184, -246, -231, 420,
	142, 398, 417, -222, -155, -155, -155, -155, -155, 142,
	-136, 240, -135, -166, 5, -227, 23, -358, 416, -329,
	413, 414, 7, 7, 415, -349, -137, -227, 142, -41,
	386, 266, 92, 338, 252, 165, -350, -350, -278, 363,
	66, 267, -350, 338, 310, -73, -166, -272, -289, -317,
	-190, 421, -289, -289, -290, -290, 142, 415, -289, -300,
	28, 28, 416, -236, 420, -285, -289, 416, -298, 111,
	-289, 349, -353, 408, 416, 379, -224, -224, -224, 5,
	216, 153, 215, -261, 215, -261, -261, 7, -393, -181,
	415, -166, 384, -223, 416, -344, -329, -289, -289, -289,
	-349, -289, -294, -289, -344, -329, -290, -290, -290, -290,
	-290, -290, -290, -290, -290, -290, -290, -290, -290, -290,
	-290, -290, -290, -290, -290, 104, 225, 232, -290, 420,
	-236, -295, -294, -289, -289, -329, 416, 416, 416, -235,
	-72, -243, 148, -326, 420, -243, -243, 416, -252, 415,
	-289, -319, 414, 416, 420, -314, 414, 420, 423, 398,
	-315, 416, 417, -221, -313, -353, 353, 353, 114, 225,
	374, -368, -365, -289, -226, -318, -178, -380, 415, -166,
	-376, -377, -173, 415, 415, -148, 107, 313, -266, 114,
	-155, 114, -155, 390, 415, 415, 353, -264, 73, -292,
	-173, -235, 353, 353, 253, -292, -292, -235, 353, -292,
	117, -137, 142, 337, -209, 168, -282, -167, 415, -177,
	415, 415, -221, -190, -326, -248, -162, -265, 372, -176,
	415, -176, -160, 198, -413, -356, -381, -269, -267, -246,
	-238, 226, 72, 416, 420, 417, -283, -240, -232, -289,
	2, 416, -88, 420, 415, 398, 398, 239, -138, -138,
	7, 414, 416, -349, 416, -227, 240, -187, -175, -190,
	-188, -202, -190, 238, 416, -149, -176, 28, 28, -289,
	-300, 416, -289, -289, 416, -289, 414, -289, 417, 5,
	-289, 416, 416, 416, 416, -394, -166, -289, 416, 416,
	416, 420, 416, 416, 416, -295, 142, 104, 232, 415,
	-289, 416, 416, 416, -297, 150, 46, -319, -297, -297,
	-227, -286, -349, -287, -176, 413, -314, -315, -353, 417,
	-178, -185, -281, 114, -369, 73, -370, 60, 126, 78,
	225, 228, 365, 262, 57, 98, 271, 32, 416, 416,
	420, -174, 60, -174, -289, 415, -226, -227, 225, 98,
	225, 98, 91, 361, -178, -185, -227, -227, -190, -178,
	-185, 415, 416, -192, -191, -358, 416, -176, 71, -359,
	350, -210, -211, 160, 415, -226, 415, -227, -207, 32,
	-137, 415, 144, 237, -226, 237, -161, 197, -413, -356,
	-158, -246, -275, 415, 237, -88, -179, 2, -224, 398,
	-135, -136, -358, -358, 91, 91, 414, 416, -42, -43,
	165, 73, 255, -213, -212, 252, 232, -149, -289, -289,
	416, 416, -353, 408, -224, -388, 252, 416, -289, -290,
	142, 415, -300, 416, -389, 385, -289, -235, -389, -389,
	416, -315, -349, -314, -281, -185, -189, -182, -166, 126,
	157, 228, 193, 415, -290, -190, 415, 2, -280, -408,
	77, 333, -318, -149, -189, -149, 416, -235, 416, 416,
	228, 228, -289, -329, -155, -155, 416, 416, 353, 353,
	-235, 353, 353, 392, -292, 250, -226, 416, -226, 416,
	416, -88, -226, -190, 416, -190, -413, -356, -159, 105,
	-227, 73, -269, -296, 416, 415, 415, 420, 24, 415,
	24, 415, -188, 338, 416, -224, 46, 416, -290, -300,
	416, -390, -391, -181, -314, 414, -370, -182, 225, -289,
	-168, 415, -289, -209, 415, -174, -224, 271, -154, 60,
	415, 415, -178, -185, -224, 415, 415, -292, -190, 416,
	-280, 416, -209, 416, -265, 415, -356, -160, 367, 226,
	416, -185, -246, -359, -359, -43, -227, -227, -190, -395,
	266, 293, -235, 416, 420, 32, 114, 416, -371, 212,
	-166, 416, -210, -227, -149, 416, -190, -147, 372, -189,
	-215, -214, -212, -217, -216, -212, 416, -235, -235, 415,
	-209, -280, -210, -280, 415, -226, -161, 313, -283, 416,
	416, 416, 416, 416, -396, -397, 38, 362, 82, -289,
	-396, -391, -393, 126, -372, -375, -374, 237, 143, 251,
	318, 416, 332, 382, 416, -221, -289, 416, 420, 377,
	416, 420, 377, 416, 416, -227, -210, -209, -209, -226,
	416, -239, -137, -137, -397, 259, 138, 292, 259, 138,
	-182, -374, 237, -375, 237, 367, 101, -371, -214, 160,
	-216, 142, 416, -210, -210, 416, -283, 28, -373, 222,
	283, 51, 313, -373, -372, 415, 415, -156, 51, 283,
	-280, -397, 21, 228, 98, -235, -235, -209, 416, 416,
	-210, -210, 353, 415, -235, 416, -210,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 43, 44, 45,
	47, 48, 49, 50, 51, 53, 55, 58, 59, 0,
	0, 182, 184, 186, 0, 0, 0, 201, 203, 205,
	206, -2, 0, 0, 0, 234, 235, 237, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	373, 374, 0, 841, -2, 0, 352, 354, 363, 365,
	367, 369, 370, 0, 432, 434, 436, 438, 440, 442,
	444, 446, 448, 449, 451, 453, 455, 457, 459, 461,
	463, 465, 467, 469, 471, 473, 475, 477, 479, 481,
	-2, 753, 755, 757, 759, -2, 62, 64, 66, 68,
	70, 72, 87, 209, 211, 213, 215, 218, 220, 222,
	878, 240, 242, 244, 246, 248, -2, 890, 0, 0,
	0, -2, 0, -2, -2, -2, 771, 73, 74, 75,
	76, 77, 78, 93, 94, 95, 96, 97, 98, 80,
	82, 83, 89, 90, 92, 0, 0, 854, 856, 858,
	860, -2, 0, 0, -2, 7, 13, 15, 17, 20,
	22, 24, 26, 28, 30, 32, 34, 36, 38, 40,
	42, 46, 52, 54, 56, 60, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 156, -2, -2, -2,
	-2, 0, 0, 1502, 1683, 1684, 1685, 1686, 1687, 1688,
	1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698,
	1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708,
	1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718,
	1719, 1720, 1721, 1722, 1723, 1467, 1468, 1469, 1470, 1471,
	1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481,
	1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491,
	1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501,
	1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512,
	1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522,
	1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532,
	1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542,
	1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552,
	1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562,
	1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572,
	1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582,
	1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592,
	1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602,
	1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612,
	1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622,
	1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632,
	1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642,
	1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652,
	1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662,
	1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672,
	1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682,
	1389, 1443, 1392, 1387, 183, 185, 187, 188, 0, 0,
	0, 657, 1428, 1441, 1442, 1443, 1446, 1447, 1448, 1502,
	0, 202, 204, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 716, 331, 1591, 333, 335,
	0, 0, 0, 0, 228, 229, 230, 231, 232, 233,
	236, 238, 239, 0, 0, 0, 0, 0, 0, 0,
	330, 328, 1423, 273, 274, 0, 313, 314, 315, 316,
	317, 318, 320, 277, 279, 281, 282, 284, 286, 288,
	290, 292, 294, 296, 298, 299, 301, 303, 304, 306,
	308, 309, 311, 717, 0, 0, 0, 0, 0, 165,
	0, 345, 339, 344, 346, 348, 349, 350, 351, 0,
	163, 0, 590, 326, 324, 0, 159, 0, 750, 0,
	345, 1470, 343, 751, 752, 0, 0, 747, 748, 1620,
	781, 353, 355, 364, 366, 368, 371, -2, -2, 1713,
	-2, 394, -2, 402, 1716, 1622, 405, 0, 407, -2,
	410, 433, 435, 437, 439, 441, 443, 445, 447, 450,
	452, 454, 456, 458, 460, 462, 464, 466, 468, 470,
	472, 474, 476, 478, 480, 482, 483, 0, 0, 0,
	0, 0, 487, 0, -2, -2, 0, 0, 0, 0,
	0, -2, 0, -2, 0, 0, -2, -2, -2, 0,
	0, 0, -2, -2, 0, 0, 486, 488, 489, 490,
	0, 534, 573, 574, 754, 756, 758, 0, 698, 880,
	63, 65, 67, 69, 71, 210, 212, 214, 216, 219,
	221, -2, 852, 853, 241, 243, 245, 247, 249, -2,
	0, 884, 884, 884, 0, 0, 853, 851, 0, 356,
	0, 358, 0, 487, 361, 362, 414, 415, 1088, 0,
	0, 0, 0, 0, 0, 1166, -2, -2, 1198, 1200,
	1694, 1713, 0, 1202, 1203, 0, 1205, 1207, 1208, 0,
	1211, 1212, 1366, 1435, 1430, 1395, 1396, 1397, 1398, 0,
	0, 1401, 0, 1403, 1404, 1405, 1268, 1222, -2, -2,
	-2, 1439, 1004, 1005, 1006, 1007, 1008, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1724, 1226, 1227, 1228, 1229, 1230,
	1231, 1232, 1233, 0, 1683, 1700, 1706, 1701, 1691, 1240,
	-2, -2, 1509, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1695, 1696, -2, 1698, -2, -2, 1705, -2, 1709, 1710,
	-2, -2, 1715, -2, -2, 1718, 1719, -2, 1457, 1057,
	1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734,
	1737, 1738, 1739, 1740, 1741, 1742, 783, 761, 774, 783,
	763, 764, 765, 766, 767, 772, 773, 776, 0, 768,
	769, 770, 870, 1597, 873, 657, 871, 855, 857, 0,
	859, 0, 0, 0, 864, 887, 885, 0, 921, 868,
	869, 879, 936, 0, 0, 956, 956, 947, 0, 978,
	0, 1440, 0, 0, 0, 0, -2, 1443, 1724, 1735,
	1736, 2, 79, 0, 1700, 978, 81, 0, 1700, 84,
	0, 1700, 0, -2, 88, 0, 1700, 166, 167, 1453,
	1454, 1458, 1459, 1460, 1461, 91, 0, 1419, 99, 0,
	1700, 1386, 0, 1416, 1462, 1463, 1464, 1465, 1466, 1743,
	1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753,
	1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763,
	1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773,
	1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783,
	1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793,
	1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803,
	1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813,
	1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823,
	0, 1413, 0, 0, 583, 1383, 1388, 584, 1393, 0,
	189, 190, 191, 1700, 193, 194, 1700, 196, 0, 0,
	0, 0, 0, 217, 657, 1700, 0, 224, 1424, 0,
	681, 1700, 679, 1427, -2, 1700, 701, 704, 1700, 706,
	657, 708, 1426, -2, 1450, 877, 1700, 797, 332, 334,
	0, 227, 0, 810, 0, 812, 0, 831, 984, 148,
	1700, 252, 271, 148, 1700, 255, 148, 1700, 258, 148,
	1700, 261, 1381, 148, 1700, 264, 265, 1700, 267, 168,
	268, 1700, 270, 327, 0, 0, -2, 321, 1429, -2,
	319, 278, 280, 283, 285, 287, 289, 291, 293, 295,
	297, 300, 302, 305, 307, 310, 312, -2, 0, 160,
	0, 0, 0, 0, 589, 0, 0, 0, 749, 0,
	0, 0, 375, 0, 0, 0, 0, 780, 372, 0,
	391, 0, 393, 1690, -2, -2, 397, 784, 788, 789,
	790, 0, 0, 0, 0, 404, 0, 0, 0, 408,
	411, 0, 484, 485, 0, 0, 495, 496, 497, 498,
	499, 0, 502, 523, 538, 0, 0, 506, 508, 588,
	510, 0, 0, 512, 0, 514, 0, 516, 0, 518,
	0, 520, 522, 524, 539, 526, 0, 0, 0, 537,
	0, 543, 0, 546, 547, 548, 0, 550, 551, 552,
	0, 0, 0, 560, 562, 0, 572, 0, 491, 492,
	148, 982, -2, 0, 847, 899, 900, 0, 0, 0,
	0, 882, 883, 0, 0, 0, 843, 844, 357, 0,
	360, 0, 0, 0, 0, 1301, 1302, 1303, 1304, 1305,
	1306, 1309, 1310, 1307, 1308, 1311, 1312, 0, 0, 0,
	0, 0, 1313, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1314, 1315, 1316, 0, 0, 1318,
	0, 1320, 0, 0, 0, 0, 0, 0, 1145, 1147,
	1374, 0, 0, 1317, 1093, 1094, 1095, 1130, 1131, 0,
	1199, 1371, 1370, 1201, 0, 1323, -2, 1324, 0, 0,
	1204, 1410, 1209, 1210, 1323, 0, 1365, 0, 0, 1400,
	0, 1085, 1270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1041, 1055, 1062, 1059, 1058,
	1043, 0, 1042, 0, 0, 1040, 0, 0, 0, 1044,
	0, 1346, -2, 0, 0, 0, 0, 0, 760, -2,
	762, 0, 778, 0, 872, 0, 0, 925, 1375, 1379,
	1380, 925, 925, 0, 0, 1324, 0, 0, 0, 0,
	975, 975, 975, 973, 950, 0, 956, 0, -2, 0,
	956, 956, 0, 966, 0, 966, -2, 947, 0, 0,
	979, 980, 0, 0, 100, 744, 119, 0, 744, 744,
	0, 0, 137, 0, 0, 0, 0, 0, 0, 115,
	107, 108, 0, 0, 85, 682, 0, 685, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 0, 0, 0, 117, 0, 141, 143, 0,
	0, 0, 0, 969, 582, 0, 0, 1444, 1391, 0,
	0, 0, 0, 1444, 0, 0, 1430, 1431, 596, 0,
	0, 0, 0, 677, 680, 0, 699, 0, 876, 0,
	0, 0, 0, 1700, 713, 1415, 1449, 0, 1700, 799,
	0, 988, 0, 813, 0, 0, 985, 0, 250, 0,
	146, 147, 0, 253, 0, 256, 0, 259, 0, 0,
	262, 0, 0, 0, 0, 0, 879, 0, 180, 0,
	337, 347, 0, 0, 879, 0, 1326, 996, 999, 1000,
	1001, 1085, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016,
	1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1063,
	1057, 1071, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036,
	1037, 1038, 1039, 1053, 0, 1028, 1028, 1028, 1045, 1046,
	1064, 1065, 1067, 1069, 997, 998, 1063, 1063, 1060, 1061,
	180, 0, 341, 0, 969, 377, 969, 379, 0, 568,
	0, 0, 0, 0, -2, 399, 0, 786, 0, 791,
	423, 424, 425, 793, 794, 403, 426, 427, 428, 429,
	430, 431, 0, 674, 0, 676, 1406, 0, 400, 416,
	401, 406, 0, 412, 0, 0, 500, 501, 503, 504,
	505, 509, 0, 576, 1612, 586, 511, 513, 515, 517,
	519, 879, 528, 0, 530, 879, 541, 544, 549, 553,
	554, 555, 556, 557, 558, 0, 0, 0, 697, 0,
	850, 897, 898, 903, 907, 908, 911, 914, 915, 905,
	1088, 865, 866, 867, 891, 892, 727, 0, 0, 359,
	1089, 992, 993, 1047, 1048, 1049, 1050, 1051, 1090, 1091,
	1412, 0, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103,
	1104, 1105, -2, -2, -2, -2, -2, -2, -2, -2,
	1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123,
	1124, -2, -2, -2, 1128, 1129, -2, 1319, 1321, 0,
	1374, 0, -2, 0, -2, -2, -2, -2, 1142, 0,
	1144, 1149, 1151, 1153, 0, 0, 0, 0, 1373, 1163,
	1357, 0, 0, 1298, 1299, 1300, 1148, 0, 0, 1372,
	1369, 0, 0, 1322, 1206, 0, 0, 0, 1330, 1364,
	1360, 0, 1432, 1438, 1213, 890, 0, 0, 0, 0,
	1220, 0, 1411, 1072, 1073, 1074, 1075, 1076, 1077, 1086,
	1278, 0, 0, 0, 1241, 1242, 1243, 1244, 1245, 1246,
	1247, 1248, 0, 0, 0, 0, 0, 0, 0, 0,
	1250, 0, 1333, -2, -2, -2, -2, -2, -2, -2,
	0, 1252, 0, 0, 1264, 0, 1266, 0, 1254, 1324,
	1343, 0, 0, 1169, 0, 0, 0, 0, 1713, 0,
	1257, 1324, 1351, 0, 0, 0, 0, 0, 0, 0,
	0, 1324, 0, 1356, 777, 874, 0, 0, 988, 0,
	0, 0, 1378, 988, 988, 0, 920, 0, 0, 0,
	0, 0, 0, 970, 974, 971, 972, 0, 0, 956,
	966, 933, 0, 0, 1414, 0, 941, -2, 966, 966,
	0, 943, 965, 0, 657, 955, 945, -2, 0, -2,
	0, 0, 0, 0, 743, 121, 1700, 0, 150, 0,
	0, 647, 1420, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 683, 684, 686, 692, 694, 0, 688, 1409,
	0, 689, 0, 691, 693, 695, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	0, 1385, 0, 0, 171, 968, 0, 1384, 1394, 0,
	192, 195, 181, 656, 0, 0, 0, 0, 595, -2,
	597, 599, 600, 601, 602, 1547, 1450, 0, 1450, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 801, 807, 0, 890, 0, 829, 815, 0,
	0, 0, 829, 833, 834, 836, 837, 0, 0, 986,
	272, 148, 148, 148, 1382, 148, 148, 169, 266, 269,
	329, 275, 322, 0, 0, 0, 0, 0, 0, 323,
	0, 0, 0, 325, 0, 989, 991, 0, 1002, 0,
	1055, 0, 157, 180, 0, 0, 376, 381, 0, 569,
	0, 0, 392, 0, 785, 792, 0, 420, 0, 422,
	675, 1408, 1407, 0, 413, 493, 0, 587, 585, 527,
	531, 879, 533, 0, 570, 571, 575, 983, 0, 909,
	0, 906, 912, 913, 0, 894, 725, 726, 0, 0,
	0, -2, -2, 0, 0, 0, 1164, -2, 1143, 1146,
	1150, 1152, 1154, 0, 0, 0, 0, 0, 0, 0,
	1165, 1323, 0, 1367, 1370, -2, 1325, 1328, 1329, 0,
	0, 1361, 0, 0, 0, 0, 0, 889, 890, 890,
	890, 1219, 0, 0, 0, 0, 0, 0, 1221, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1239, 1026,
	0, 1249, 0, 1251, 1052, 1263, 1265, 1253, 0, 0,
	1255, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1172, 1173, 1174, 0, 1323, 1256,
	1349, 1350, 0, 0, 1066, 1068, 1070, 0, 0, 0,
	0, 1262, 0, 1355, 879, 922, 917, 1376, 969, 924,
	926, 1377, 1417, 917, 917, 0, 1325, 958, 0, 960,
	0, 0, 0, 962, 0, 951, 0, 953, 966, 938,
	0, 0, 931, 0, 930, 956, 0, 942, 944, 946,
	1432, 657, 964, 0, 981, 0, 120, 731, 0, 0,
	1418, 0, 123, 1700, 131, 0, 624, 0, 0, 0,
	0, 0, 746, 132, 1700, 148, 1700, 148, 133, 136,
	0, 140, 138, 0, 0, 615, 101, 744, 104, 0,
	0, 737, 0, 687, 690, 696, 86, 0, 739, 729,
	0, 0, 728, 142, 105, 0, 0, 741, 103, 0,
	0, 0, 180, 0, 0, 1390, 1445, 197, 199, 200,
	198, 604, 0, 1450, 0, 1450, 0, 1422, 593, 657,
	0, 969, 681, 702, -2, 705, 707, 715, 0, 0,
	0, 803, 807, 0, 806, 877, 902, 987, 808, 829,
	0, 0, 0, 818, 820, 817, 814, 811, 988, 0,
	0, 0, 0, 0, 251, 254, 257, 260, 263, 0,
	178, 1579, 176, 173, 175, 336, 0, 0, 0, 1327,
	0, 994, 0, 0, 0, 0, 158, 340, 0, 378,
	0, 0, 0, 0, 0, 0, 389, 390, -2, 418,
	419, 421, 417, 0, 529, 532, 540, 0, 0, 893,
	727, 0, 1092, -2, 0, 0, 0, 0, -2, 0,
	0, 0, 1358, 0, 0, 0, 1369, -2, 1331, 1359,
	1363, 0, 1433, 1437, 1214, 0, 0, 0, 0, 1402,
	1078, 1079, 1080, 1081, 1082, 1083, 1084, 0, 1276, 1277,
	1281, 1425, 0, 0, 1225, 0, 0, 0, 0, 0,
	0, 1332, 1342, 1344, 1170, 1171, 1175, 1176, 1177, 1178,
	1179, 1180, 1181, 1182, 1183, 1184, -2, -2, -2, 1188,
	1189, 1190, -2, -2, -2, 0, 0, 0, 1345, 0,
	0, 1347, 1348, 1352, 1353, 0, 1259, 1260, 1261, 1354,
	0, 919, 0, 923, 0, 919, 919, 886, 959, 0,
	977, 961, 936, 952, 0, 949, 934, 0, 935, 0,
	966, 956, 0, 963, 948, -2, 0, 0, 0, 0,
	149, 622, 646, 0, 0, 718, 724, 724, 0, 1420,
	1223, 1224, 0, 0, 0, 125, 0, 0, 0, 0,
	129, 0, 135, 139, 0, 0, 0, 0, 0, 112,
	0, 0, 0, 0, 0, 111, 114, 0, 0, 110,
	0, 155, 0, 0, 612, 0, 598, 0, 0, 0,
	0, 596, 0, 223, 180, 678, 700, 0, 0, 0,
	0, 0, 805, 807, 0, 798, 799, 829, 901, 809,
	827, 828, 826, 0, 0, 0, 890, 835, 832, 838,
	839, 0, 164, 0, 0, 0, 0, 338, 0, 0,
	0, 995, 1003, 0, 1056, 342, 0, 563, 564, 610,
	0, 567, 494, 904, 910, 895, 727, 0, 0, -2,
	0, 1157, -2, -2, 1294, 1325, 1368, 1362, 0, 1399,
	890, 1215, 1217, 1218, 1087, 1283, 1280, 0, 1267, 1234,
	1235, 0, 1237, 1238, 1027, 1341, 0, 0, 0, 0,
	1325, 1296, 1258, 875, 1272, 0, 0, 927, 1272, 1272,
	0, 956, 954, 932, 928, 0, 939, 966, 1433, 0,
	733, 735, 122, 0, 623, 0, 626, 0, 0, 0,
	0, 633, 634, 0, 0, 0, 0, 0, 648, 655,
	0, 727, 0, 727, 0, 0, 0, 0, 0, 145,
	0, 0, 745, 0, 148, 148, 0, 0, 732, 0,
	0, 0, 0, 738, 740, 730, 0, 742, 0, 170,
	0, 591, 611, 0, 0, 0, 0, 0, 0, 0,
	225, 0, 714, 0, 0, 0, 795, 807, 0, 800,
	801, 226, 0, 0, 0, 816, 819, 821, 902, 0,
	177, 0, 172, 174, 0, 0, 990, 1054, 380, 382,
	0, 0, 388, 565, 609, 0, 0, 896, -2, -2,
	1158, 1295, 1434, 1436, 0, 890, 0, 1269, 0, -2,
	0, 0, 0, 1297, 861, 0, 918, 916, 862, 863,
	976, 966, 0, 940, 124, 0, 627, 628, 1421, 630,
	0, 632, 635, 0, 637, 1452, 0, 641, 604, 0,
	652, 653, 719, 720, 723, 721, 724, 890, 650, 0,
	126, 127, 144, 152, 128, 134, 0, 0, 0, 0,
	890, 0, 0, 0, 967, 0, 0, 655, 0, 645,
	604, 594, 0, 715, 711, 0, 0, 802, 803, 0,
	0, 0, 829, 840, 179, 0, 0, 0, 384, 0,
	386, 0, 608, 0, 1216, 1286, 0, 1236, -2, 0,
	1196, 1271, 1273, 0, 937, 929, 625, 629, 0, 0,
	661, 0, 0, 612, 0, 727, 0, 0, 154, 0,
	0, 0, 734, 736, 0, 0, 0, 113, 0, 644,
	604, 655, 612, 655, 0, 0, 804, 805, 0, 823,
	988, 825, 830, 0, 0, 383, 0, 0, 566, 0,
	0, 0, 1282, 1197, 0, 0, 0, 636, 666, 0,
	0, 0, 649, 0, 722, 1214, 657, 130, 0, 151,
	0, 616, 0, 0, 619, 0, 0, 0, 0, 0,
	612, 604, 592, 604, 0, 0, 796, 0, 824, 180,
	180, 385, 387, 1279, 1284, 1287, -2, 1666, 1499, 0,
	1285, 1274, 1275, 0, 638, 662, 663, 0, 658, 659,
	660, 1451, 639, 640, 654, 661, 153, 613, 0, 0,
	614, 0, 0, 116, 118, 0, 642, 612, 612, 0,
	712, 988, 161, 162, 0, 1289, 1290, 1291, 1292, 1293,
	631, 664, 0, 665, 0, 0, 0, 666, 617, 0,
	620, 0, 607, 643, 709, 655, 822, 0, 667, 0,
	670, 671, 0, 668, 651, 0, 0, 603, 605, 606,
	604, 1288, 669, 672, 673, 0, 0, 612, 612, 0,
	710, 618, 0, 0, 0, 612, 621,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 404, 3, 410, 405, 3,
	415, 416, 408, 406, 420, 407, 417, 409, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 424, 419,
	396, 398, 397, 400, 421, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 413, 3, 414, 411, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 422, 403, 423, 401,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 399, 57739, 402,
	57740, 412, 57741, 418, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1006
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1012
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1018
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []tree.Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []tree.Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1027
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1029
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1034
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1035
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1036
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1038
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1039
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1040
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1041
		{
			return helpWith(sqllex, "GRANT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1042
		{
			return helpWith(sqllex, "INSERT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1043
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1044
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1045
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1046
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1047
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1048
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1049
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1052
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1055
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1060
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1061
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1062
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1073
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1074
		{
			return helpWith(sqllex, "ALTER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1077
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1078
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1079
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1080
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1081
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1118
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1129
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1144
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 85:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1163
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1175
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1200
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1236
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1246
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1252
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1261
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1270
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1279
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1291
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1302
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1362
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        tree.Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        tree.Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1385
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1395
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1442
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1465
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = nil
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1479
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1493
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1498
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1499
		{
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1502
		{
			return unimplemented(sqllex, "alter using")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1503
		{
		}
	case 155:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1527
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1530
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1560
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.str = "CSV"
		}
	case 161:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1595
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1598
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1615
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1618
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1626
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1636
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 171:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1656
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 179:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 180:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1687
		{
		}
	case 181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1691
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1703
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1704
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1705
		{
			return helpWith(sqllex, "CANCEL SESSION")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1706
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = &tree.CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1717
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1725
		{
			sqlVAL.union.val = &tree.CancelQuery{ID: sqlDollar[3].union.expr(), IfExists: false}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1729
		{
			sqlVAL.union.val = &tree.CancelQuery{ID: sqlDollar[5].union.expr(), IfExists: true}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1732
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1740
		{
			sqlVAL.union.val = &tree.CancelSession{ID: sqlDollar[3].union.expr(), IfExists: false}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1744
		{
			sqlVAL.union.val = &tree.CancelSession{ID: sqlDollar[5].union.expr(), IfExists: true}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1747
		{
			return helpWith(sqllex, "CANCEL SESSION")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1751
		{
			/* SKIP DOC */
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 198:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1755
		{
			/* SKIP DOC */
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1761
		{
			sqlVAL.str = ""
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1770
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1771
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1773
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1774
		{
			return helpWith(sqllex, "CREATE")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1777
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1778
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1779
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1780
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1782
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1783
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1784
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1802
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1806
		{
			/* SKIP DOC */
			// TODO(dan): This reuses the `AS OF SYSTEM TIME` syntax for convenience,
			// but it means something different here than SELECT and BACKUP. On the
			// other hand, RESTORE already stretches the definition a bit. Revisit.
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets:  sqlDollar[4].union.targetList(),
				SinkType: sqlDollar[6].str,
				AsOf:     sqlDollar[7].union.asOfClause(),
				Options:  sqlDollar[8].union.kvOptions(),
			}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1837
		{
			return helpWith(sqllex, "DELETE")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1844
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1847
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1848
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1849
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1850
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1851
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1860
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1861
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1862
		{
			return helpWith(sqllex, "DROP")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1865
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1866
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1867
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1868
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1869
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1884
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1892
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1896
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1899
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1914
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1922
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1930
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1937
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1960
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1968
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1975
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1983
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1990
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1998
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2021
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2023
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2030
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2033
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2034
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2036
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2037
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2038
		{
			return helpWith(sqllex, "DELETE")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2039
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2040
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2041
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2042
		{
			return helpWith(sqllex, "INSERT")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2043
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2045
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2046
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2048
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2051
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2052
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2054
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2055
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2063
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2064
		{ /* SKIP DOC */
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 323:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2082
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2089
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2093
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2107
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2113
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2119
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 330:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2123
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2133
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2148
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2172
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2176
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2179
		{
			return helpWith(sqllex, "GRANT")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2207
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2210
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2219
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2248
		{
			return helpWith(sqllex, "RESET")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2249
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2264
		{
			return helpWith(sqllex, "RESET")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2272
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2275
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2289
		{
			return helpWith(sqllex, "USE")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2293
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2294
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2295
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2296
		{ /* SKIP DOC */
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2297
		{
			return helpWith(sqllex, "USE")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2298
		{
			return unimplemented(sqllex, "set local")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2314
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2329
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2332
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2350
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2358
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2362
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 381:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2366
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2372
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2376
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2382
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2386
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2390
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2394
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2398
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2416
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2422
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2437
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2441
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 395:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2446
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2463
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2466
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2468
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2471
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2475
		{
			sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2479
		{
			sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2491
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2497
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2502
		{
			return unimplemented(sqllex, "set from current")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2503
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2511
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2515
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2521
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2525
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2531
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2535
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2542
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2552
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2558
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2562
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2566
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2570
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = tree.Low
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2584
		{
			sqlVAL.union.val = tree.Normal
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2588
		{
			sqlVAL.union.val = tree.High
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2599
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2603
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2607
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2616
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2628
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2629
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2630
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2631
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2632
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2633
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2634
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2635
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2637
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2638
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2639
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2640
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2641
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2642
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2643
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2644
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2645
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2646
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2647
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2648
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2649
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2650
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2651
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2652
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2654
		{
			return helpWith(sqllex, "SHOW")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2661
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2662
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2663
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2674
		{
			sqlVAL.str = "client_encoding"
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2677
		{
			sqlVAL.str = "timezone"
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2678
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2699
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2710
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2718
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = &tree.ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2729
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2746
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2748
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2751
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2762
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2773
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2786
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2794
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2802
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2805
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2810
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2812
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2815
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2826
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2828
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2831
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2842
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2844
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2848
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2858
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2861
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2874
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2876
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2879
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2881
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2885
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[6].union.stmt(), TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2889
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceReplica}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2894
		{
			sqlVAL.union.val = true
		}
	case 535:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = false
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2903
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2906
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2922
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2931
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				// Note: the schema name may be interpreted as database name,
				// see name_resolution.go.
				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2943
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2957
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2964
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2967
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2975
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2979
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2983
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2986
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2994
		{
			sqlVAL.union.val = &tree.ShowCreateTable{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2997
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3005
		{
			sqlVAL.union.val = &tree.ShowCreateView{View: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3008
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = &tree.ShowCreateSequence{Sequence: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3018
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3026
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3029
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3040
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3044
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3048
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3052
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3058
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3065
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3071
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3075
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3086
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3093
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3101
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3107
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 577:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3112
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3240
		{
			// This sub-rule is meant to support both ROLE and other keywords
			// used as table name without the TABLE prefix. The keyword ROLE
			// here can have two meanings:
			//
			// - for all statements except SHOW GRANTS, it must be interpreted
			//   as a plain table name.
			// - for SHOW GRANTS specifically, it must be handled as an ON ROLE
			//   specifier without a name list (the rule with a name list is separate,
			//   see above).
			//
			// Yet we want to use a single "targets" non-terminal for all
			// statements that use targets, to share the code. This action
			// achieves this as follows:
			//
			// - for all statements (including SHOW GRANTS), it populates the
			//   Tables list in TargetList{} with the given name. This will
			//   include the given keyword as table pattern in all cases,
			//   including when the keyword was ROLE.
			//
			// - if ROLE was specified, it remembers this fact in the ForRoles
			//   field.  This distinguishes `ON ROLE` (where "role" is
			//   specified as keyword), which triggers the special case in
			//   SHOW GRANTS, from `ON "role"` (where "role" is specified as
			//   identifier), which is always handled as a table name.
			//
			//   Both `ON ROLE` and `ON "role"` populate the Tables list in the same way,
			//   so that other statements than SHOW GRANTS don't observe any difference.
			//
			// Arguably this code is a bit too clever. Future work should aim
			// to remove the special casing of SHOW GRANTS altogether instead
			// of increasing (or attempting to modify) the grey magic occurring
			// here.
			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role", // backdoor for "SHOW GRANTS ON ROLE" (no name list)
			}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3283
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3322
		{
			sqlVAL.union.val = &tree.PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3325
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3387
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3398
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3440
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3448
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3455
		{
			/* SKIP DOC */
			sqlVAL.union.val = tree.DropCascade
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3459
		{
			/* SKIP DOC */
			sqlVAL.union.val = tree.DropRestrict
		}
	case 607:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3463
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 610:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3476
		{
			sqlVAL.str = ""
		}
	case 612:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 613:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 618:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3519
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3529
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3533
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 621:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3539
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         &tree.Tuple{Exprs: sqlDollar[5].union.exprs()},
				To:           &tree.Tuple{Exprs: sqlDollar[9].union.exprs()},
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3550
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3561
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3565
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3575
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3613
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3617
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3621
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3625
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3649
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3653
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 642:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3692
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3704
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3732
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3742
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3766
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3770
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3785
		{
			return unimplemented(sqllex, "match full")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3786
		{
			return unimplemented(sqllex, "match partial")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3787
		{
			return unimplemented(sqllex, "match simple")
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3788
		{
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3795
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3799
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3803
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3807
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3811
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3823
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3831
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3835
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3839
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3879
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 678:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3887
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3895
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3899
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3906
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3907
		{ /* SKIP DOC */
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3909
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3910
		{ /* SKIP DOC */
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3912
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3914
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3916
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3919
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3921
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3922
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3924
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3933
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3936
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 699:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3944
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3948
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3951
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3955
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 703:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3959
		{
			sqlVAL.union.val = nil
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3969
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3973
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3976
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 707:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3991
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:4009
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql.y:4022
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:4036
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:4045
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4054
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = true
		}
	case 715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = false
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = true
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4073
		{
			sqlVAL.union.val = false
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4095
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4096
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4099
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4100
		{
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = tree.Descending
		}
	case 727:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 728:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4151
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 736:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:4153
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 737:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4157
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4171
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4177
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = true
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = false
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4196
		{
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4197
		{
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4208
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4216
		{
			sqlVAL.union.val = &tree.ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4219
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4230
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4234
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4235
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4236
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4255
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4260
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4270
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4273
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4278
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4282
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4287
		{
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4288
		{
		}
	case 771:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4289
		{
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4297
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4304
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4307
		{
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4308
		{
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4312
		{
			sqlVAL.str = ""
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4316
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4320
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 779:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4324
		{
			sqlVAL.str = ""
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4330
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4334
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4340
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4344
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4350
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4354
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4367
		{
		}
	case 787:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4369
		{
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4373
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4377
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4387
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4393
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4399
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4403
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 795:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4413
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:4423
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4433
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4437
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4441
		{
			sqlVAL.str = ""
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4451
		{
			sqlVAL.str = ""
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.str = ""
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4467
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 805:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4471
		{
			sqlVAL.str = ""
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4476
		{
		}
	case 807:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4477
		{
		}
	case 808:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4489
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 809:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4496
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4503
		{
			return helpWith(sqllex, "INSERT")
		}
	case 811:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4521
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4525
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4547
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4553
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4557
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4577
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 822:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4581
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4585
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4591
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4595
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 826:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4597
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4603
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4608
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 829:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4612
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 830:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:4629
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4640
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4644
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 833:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4645
		{
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4649
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4653
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4666
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4669
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 840:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4673
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4716
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4722
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4726
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4741
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4745
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4749
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4753
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4757
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4761
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4768
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4803
		{
			return helpWith(sqllex, "SELECT")
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4804
		{
			return helpWith(sqllex, "VALUES")
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4805
		{
			return helpWith(sqllex, "TABLE")
		}
	case 861:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4827
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4840
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4854
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4866
		{
			return helpWith(sqllex, "SELECT")
		}
	case 865:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4870
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4879
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4888
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4910
		{
			return helpWith(sqllex, "TABLE")
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4922
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4925
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4926
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 875:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4940
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4948
		{
		}
	case 877:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4949
		{
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4953
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 879:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4956
		{
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4959
		{
		}
	case 881:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4960
		{
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4964
		{
			sqlVAL.union.val = true
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4968
		{
			sqlVAL.union.val = false
		}
	case 884:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4972
		{
			sqlVAL.union.val = false
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4978
		{
			sqlVAL.union.val = true
		}
	case 886:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4984
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4989
		{
		}
	case 888:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4990
		{
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4994
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 890:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4998
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5004
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5010
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5014
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5020
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5024
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5028
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5037
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5046
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5057
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5061
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5070
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5076
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5083
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5090
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5099
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5103
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 911:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5107
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5113
		{
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5114
		{
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5117
		{
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5118
		{
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5140
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 917:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5144
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5150
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 919:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5154
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 920:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5173
		{
			sqlVAL.union.val = &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5176
		{
			return helpWith(sqllex, "VALUES")
		}
	case 922:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5178
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &tree.Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5190
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5193
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 925:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5195
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5201
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5205
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5211
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5215
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5220
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5226
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5231
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5254
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5258
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5262
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 936:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5266
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 937:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5293
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5306
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5310
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5313
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5314
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 942:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5315
		{
			return helpWithFunction(sqllex, sqlDollar[2].union.resolvableFuncRefFromName())
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5317
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.expr().(tree.TableExpr), Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5320
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5322
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5325
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5327
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 948:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5331
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5351
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5356
		{
			sqlVAL.union.val = nil
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5357
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5358
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 953:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5362
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5366
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5372
		{
			sqlVAL.union.val = true
		}
	case 956:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5376
		{
			sqlVAL.union.val = false
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5396
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5400
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5404
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5408
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5412
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5416
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5422
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5426
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5433
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5439
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5446
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5452
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 971:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5456
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 972:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5460
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5464
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5470
		{
		}
	case 975:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5471
		{
		}
	case 976:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5482
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5486
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5491
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 979:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5492
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 980:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5493
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 981:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5494
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 982:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5498
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5502
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 984:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5515
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 985:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5519
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5523
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5529
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 988:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5533
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5545
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5559
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5567
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5578
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5582
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5589
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5591
		{
			/* SKIP DOC */
			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5599
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5603
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5607
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5616
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5634
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5638
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5642
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5646
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5650
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5654
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5658
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5662
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5666
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5670
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5674
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5678
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5682
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5686
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5690
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5694
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5698
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5718
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5722
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5726
		{
			sqlVAL.union.val = nil
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5733
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5737
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5741
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5745
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5749
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5753
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5757
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5761
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5765
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5769
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5773
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5777
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5787
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5791
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5800
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5809
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5818
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5822
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5829
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5833
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5837
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5841
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5845
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5851
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5855
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5861
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5872
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5878
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5890
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5896
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5900
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5904
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5908
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5913
		{
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5914
		{
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5919
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5923
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5927
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5931
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5935
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5939
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5943
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5948
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5954
		{
			sqlVAL.union.val = tree.Year
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5958
		{
			sqlVAL.union.val = tree.Month
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5962
		{
			sqlVAL.union.val = tree.Day
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5966
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5970
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5974
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5980
		{
			sqlVAL.union.val = tree.Month
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5984
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5988
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5992
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5996
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6000
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6004
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6008
		{
			sqlVAL.union.val = nil
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6014
		{
			sqlVAL.union.val = tree.Second
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6017
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6041
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6045
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6049
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6052
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6061
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6065
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6069
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6073
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6077
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6081
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6085
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6089
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6093
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6097
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6101
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6105
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6109
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6113
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6117
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6121
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6125
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6129
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6133
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6137
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6141
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6145
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6149
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6153
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6157
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6161
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6165
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6169
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6173
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6177
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6181
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6185
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6189
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6193
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6197
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6201
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6205
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6209
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6213
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6217
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6221
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6225
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6229
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6233
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6237
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6241
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6245
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6249
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6253
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6257
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6261
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6265
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6269
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6273
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6277
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6280
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6282
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6286
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6290
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6294
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6298
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6302
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6306
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6310
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6314
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6318
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6322
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6326
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6330
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6334
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6338
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6342
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6346
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6363
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6367
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6371
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6386
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6390
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6394
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6398
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6402
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6406
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6410
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6414
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6418
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6422
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6426
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6430
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6434
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6438
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6442
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6446
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6450
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6454
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6458
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6462
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6466
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6470
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6474
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6478
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6482
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6486
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6490
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6494
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6508
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6516
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6552
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6557
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6566
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6571
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6576
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6580
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6584
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6588
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6592
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6600
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6604
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6607
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:6608
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6610
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6614
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6618
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6621
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6632
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6639
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6648
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6649
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6653
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6655
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6659
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6665
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6669
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6673
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6679
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6683
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6687
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6691
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6695
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:6699
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6703
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6707
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6711
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6718
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6721
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6723
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6726
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6728
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6731
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6733
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6736
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6738
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6741
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6743
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6746
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6748
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6751
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6753
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6757
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6760
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6761
		{
			return unimplemented(sqllex, "treat")
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6763
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6767
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6771
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6775
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6779
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6782
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6784
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6787
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6792
		{
			return unimplemented(sqllex, "within group")
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6793
		{
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6797
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6801
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6808
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6812
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6818
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6822
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6828
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6836
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6840
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6844
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6851
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6870
		{
			sqlVAL.str = ""
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6876
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6880
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6890
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6891
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6892
		{
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6895
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6896
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6902
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6903
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6904
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6905
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6906
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6917
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6921
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6927
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6933
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6939
		{
			sqlVAL.union.val = tree.Any
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6943
		{
			sqlVAL.union.val = tree.Some
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6947
		{
			sqlVAL.union.val = tree.All
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6952
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6953
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6954
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6955
		{
			sqlVAL.union.val = tree.Div
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6956
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6957
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6958
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6959
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6960
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6961
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6962
		{
			sqlVAL.union.val = tree.LT
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6963
		{
			sqlVAL.union.val = tree.GT
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6964
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6965
		{
			sqlVAL.union.val = tree.LE
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6966
		{
			sqlVAL.union.val = tree.GE
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6967
		{
			sqlVAL.union.val = tree.NE
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6971
		{
			sqlVAL.union.val = tree.Like
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6972
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6973
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6974
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6986
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6992
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6996
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7002
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7006
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7012
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7016
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7022
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7026
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7032
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7036
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:7058
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7062
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7066
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7072
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7079
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7083
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7100
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7104
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7108
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7112
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7116
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7122
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7128
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7134
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7138
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7142
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7148
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7152
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7163
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7170
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7174
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:7180
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7186
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7190
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7197
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7203
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7207
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7214
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7220
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7224
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7229
		{
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7230
		{
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7234
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7238
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7244
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7253
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7257
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7261
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7269
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7273
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7279
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7283
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7289
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7296
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see tree.TableNameWithIndex).
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7324
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7328
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7332
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7338
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7342
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7349
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7353
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7357
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7361
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:7364
		{
			return unimplemented(sqllex, "func const")
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7366
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7370
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7373
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7375
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7379
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7383
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7390
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7394
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7403
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7414
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7424
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7520
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7527
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7531
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:7535
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:7549
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7553
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7557
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7570
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7588
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7598
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7602
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7616
		{
			sqlVAL.str = ""
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7622
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7626
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
