// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:64

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) forLocked() tree.ForLocked {
	return u.val.(tree.ForLocked)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) windowFrameExclusion() tree.WindowFrameExclusion {
	return u.val.(tree.WindowFrameExclusion)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:591
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const AND_AND = lex.AND_AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTHORIZATION = lex.AUTHORIZATION
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const COMPLETE = lex.COMPLETE
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXCLUDE = lex.EXCLUDE
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OTHERS = lex.OTHERS
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHARE = lex.SHARE
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIES = lex.TIES
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"AND_AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTHORIZATION",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"COMPLETE",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXCLUDE",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OTHERS",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIES",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"'@'",
	"','",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9625

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	-2, 1052,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 68,
	182, 888,
	199, 888,
	214, 248,
	292, 248,
	300, 728,
	327, 248,
	336, 728,
	374, 728,
	398, 248,
	422, 728,
	-2, 0,
	-1, 74,
	214, 252,
	-2, 0,
	-1, 75,
	109, 1052,
	188, 1052,
	408, 1052,
	409, 1052,
	-2, 0,
	-1, 87,
	122, 1026,
	138, 1026,
	196, 1026,
	225, 1026,
	256, 1026,
	266, 1026,
	403, 1026,
	-2, 1010,
	-1, 117,
	128, 649,
	213, 649,
	294, 629,
	345, 629,
	391, 649,
	-2, 0,
	-1, 118,
	4, 1054,
	21, 1054,
	22, 1054,
	23, 1054,
	24, 1054,
	25, 1054,
	27, 1054,
	33, 1054,
	38, 1054,
	39, 1054,
	40, 1054,
	41, 1054,
	42, 1054,
	43, 1054,
	44, 1054,
	45, 1054,
	46, 1054,
	47, 1054,
	48, 1054,
	49, 1054,
	51, 1054,
	52, 1054,
	53, 1054,
	54, 1054,
	55, 1054,
	56, 1054,
	59, 1054,
	60, 1054,
	61, 1054,
	62, 1054,
	64, 1054,
	65, 1054,
	69, 1054,
	70, 1054,
	71, 1054,
	72, 1054,
	73, 1054,
	74, 1054,
	76, 1054,
	77, 1054,
	78, 1054,
	79, 1054,
	81, 1054,
	83, 1054,
	84, 1054,
	85, 1054,
	88, 1054,
	89, 1054,
	97, 1054,
	98, 1054,
	99, 1054,
	100, 1054,
	101, 1054,
	102, 1054,
	103, 1054,
	104, 1054,
	106, 1054,
	108, 1054,
	109, 1054,
	111, 1054,
	114, 1054,
	115, 1054,
	116, 1054,
	118, 1054,
	120, 1054,
	121, 1054,
	123, 1054,
	124, 1054,
	125, 1054,
	126, 1054,
	127, 1054,
	128, 1054,
	129, 1054,
	130, 1054,
	131, 1054,
	132, 1054,
	133, 1054,
	134, 1054,
	135, 1054,
	137, 1054,
	143, 1054,
	144, 1054,
	145, 1054,
	146, 1054,
	147, 1054,
	148, 1054,
	150, 1054,
	152, 1054,
	156, 1054,
	157, 1054,
	159, 1054,
	160, 1054,
	162, 1054,
	163, 1054,
	165, 1054,
	166, 1054,
	167, 1054,
	168, 1054,
	169, 1054,
	170, 1054,
	171, 1054,
	172, 1054,
	174, 1054,
	175, 1054,
	177, 1054,
	178, 1054,
	179, 1054,
	182, 1054,
	183, 1054,
	184, 1054,
	185, 1054,
	188, 1054,
	189, 1054,
	190, 1054,
	191, 1054,
	192, 1054,
	193, 1054,
	194, 1054,
	195, 1054,
	197, 1054,
	199, 1054,
	201, 1054,
	203, 1054,
	204, 1054,
	205, 1054,
	207, 1054,
	208, 1054,
	211, 1054,
	212, 1054,
	213, 1054,
	214, 1054,
	216, 1054,
	217, 1054,
	219, 1054,
	220, 1054,
	222, 1054,
	223, 1054,
	226, 1054,
	227, 1054,
	230, 1054,
	231, 1054,
	233, 1054,
	234, 1054,
	235, 1054,
	236, 1054,
	237, 1054,
	238, 1054,
	239, 1054,
	240, 1054,
	241, 1054,
	242, 1054,
	244, 1054,
	245, 1054,
	246, 1054,
	247, 1054,
	249, 1054,
	252, 1054,
	253, 1054,
	254, 1054,
	255, 1054,
	257, 1054,
	258, 1054,
	259, 1054,
	261, 1054,
	262, 1054,
	263, 1054,
	264, 1054,
	267, 1054,
	268, 1054,
	269, 1054,
	271, 1054,
	273, 1054,
	274, 1054,
	275, 1054,
	276, 1054,
	277, 1054,
	278, 1054,
	279, 1054,
	280, 1054,
	281, 1054,
	282, 1054,
	284, 1054,
	285, 1054,
	286, 1054,
	287, 1054,
	288, 1054,
	289, 1054,
	291, 1054,
	293, 1054,
	294, 1054,
	295, 1054,
	296, 1054,
	297, 1054,
	298, 1054,
	299, 1054,
	300, 1054,
	301, 1054,
	303, 1054,
	304, 1054,
	305, 1054,
	306, 1054,
	307, 1054,
	309, 1054,
	310, 1054,
	311, 1054,
	312, 1054,
	313, 1054,
	314, 1054,
	315, 1054,
	316, 1054,
	318, 1054,
	320, 1054,
	321, 1054,
	322, 1054,
	323, 1054,
	324, 1054,
	325, 1054,
	327, 1054,
	328, 1054,
	329, 1054,
	330, 1054,
	331, 1054,
	332, 1054,
	333, 1054,
	334, 1054,
	336, 1054,
	337, 1054,
	338, 1054,
	339, 1054,
	340, 1054,
	341, 1054,
	342, 1054,
	343, 1054,
	344, 1054,
	345, 1054,
	347, 1054,
	348, 1054,
	349, 1054,
	350, 1054,
	351, 1054,
	353, 1054,
	354, 1054,
	355, 1054,
	356, 1054,
	358, 1054,
	359, 1054,
	360, 1054,
	361, 1054,
	362, 1054,
	363, 1054,
	364, 1054,
	365, 1054,
	366, 1054,
	367, 1054,
	368, 1054,
	369, 1054,
	371, 1054,
	372, 1054,
	373, 1054,
	375, 1054,
	376, 1054,
	377, 1054,
	378, 1054,
	379, 1054,
	380, 1054,
	381, 1054,
	383, 1054,
	384, 1054,
	385, 1054,
	386, 1054,
	387, 1054,
	389, 1054,
	391, 1054,
	392, 1054,
	393, 1054,
	394, 1054,
	395, 1054,
	397, 1054,
	398, 1054,
	399, 1054,
	401, 1054,
	402, 1054,
	405, 1054,
	406, 1054,
	407, 1054,
	408, 1054,
	409, 1054,
	410, 1054,
	412, 1054,
	414, 1054,
	415, 1054,
	416, 1054,
	417, 1054,
	418, 1054,
	419, 1054,
	420, 1054,
	422, 1054,
	423, 1054,
	424, 1054,
	429, 1054,
	430, 1054,
	431, 1054,
	432, 1054,
	433, 1054,
	434, 1054,
	-2, 0,
	-1, 119,
	1, 941,
	203, 941,
	291, 941,
	298, 941,
	437, 941,
	460, 941,
	-2, 0,
	-1, 121,
	1, 941,
	460, 941,
	-2, 0,
	-1, 122,
	1, 941,
	460, 941,
	-2, 0,
	-1, 123,
	1, 945,
	460, 945,
	-2, 0,
	-1, 148,
	122, 1025,
	138, 1025,
	196, 1025,
	225, 1025,
	256, 1025,
	266, 1025,
	403, 1025,
	-2, 1019,
	-1, 181,
	4, 1061,
	5, 1061,
	6, 1061,
	7, 1061,
	8, 1061,
	9, 1061,
	10, 1061,
	21, 1061,
	22, 1061,
	23, 1061,
	24, 1061,
	25, 1061,
	27, 1061,
	33, 1061,
	34, 1061,
	38, 1061,
	39, 1061,
	40, 1061,
	41, 1061,
	42, 1061,
	43, 1061,
	44, 1061,
	45, 1061,
	46, 1061,
	47, 1061,
	48, 1061,
	49, 1061,
	51, 1061,
	52, 1061,
	53, 1061,
	54, 1061,
	55, 1061,
	56, 1061,
	57, 1061,
	58, 1061,
	59, 1061,
	60, 1061,
	61, 1061,
	62, 1061,
	64, 1061,
	65, 1061,
	67, 1061,
	69, 1061,
	70, 1061,
	71, 1061,
	72, 1061,
	73, 1061,
	74, 1061,
	76, 1061,
	77, 1061,
	78, 1061,
	79, 1061,
	81, 1061,
	83, 1061,
	84, 1061,
	85, 1061,
	87, 1061,
	88, 1061,
	89, 1061,
	90, 1061,
	91, 1061,
	92, 1061,
	93, 1061,
	94, 1061,
	95, 1061,
	96, 1061,
	97, 1061,
	98, 1061,
	99, 1061,
	100, 1061,
	101, 1061,
	102, 1061,
	103, 1061,
	104, 1061,
	105, 1061,
	106, 1061,
	108, 1061,
	109, 1061,
	111, 1061,
	114, 1061,
	115, 1061,
	116, 1061,
	118, 1061,
	120, 1061,
	121, 1061,
	123, 1061,
	124, 1061,
	125, 1061,
	126, 1061,
	127, 1061,
	128, 1061,
	129, 1061,
	130, 1061,
	131, 1061,
	132, 1061,
	133, 1061,
	134, 1061,
	135, 1061,
	136, 1061,
	137, 1061,
	143, 1061,
	144, 1061,
	145, 1061,
	146, 1061,
	147, 1061,
	148, 1061,
	150, 1061,
	152, 1061,
	155, 1061,
	156, 1061,
	157, 1061,
	159, 1061,
	160, 1061,
	162, 1061,
	163, 1061,
	165, 1061,
	166, 1061,
	167, 1061,
	168, 1061,
	169, 1061,
	170, 1061,
	171, 1061,
	172, 1061,
	173, 1061,
	174, 1061,
	175, 1061,
	177, 1061,
	178, 1061,
	179, 1061,
	182, 1061,
	183, 1061,
	184, 1061,
	185, 1061,
	187, 1061,
	188, 1061,
	189, 1061,
	190, 1061,
	191, 1061,
	192, 1061,
	193, 1061,
	194, 1061,
	195, 1061,
	197, 1061,
	199, 1061,
	200, 1061,
	201, 1061,
	202, 1061,
	203, 1061,
	204, 1061,
	205, 1061,
	206, 1061,
	207, 1061,
	208, 1061,
	211, 1061,
	212, 1061,
	213, 1061,
	214, 1061,
	216, 1061,
	217, 1061,
	219, 1061,
	220, 1061,
	221, 1061,
	222, 1061,
	223, 1061,
	224, 1061,
	226, 1061,
	227, 1061,
	230, 1061,
	231, 1061,
	233, 1061,
	234, 1061,
	235, 1061,
	236, 1061,
	237, 1061,
	238, 1061,
	239, 1061,
	240, 1061,
	241, 1061,
	242, 1061,
	243, 1061,
	244, 1061,
	245, 1061,
	246, 1061,
	247, 1061,
	248, 1061,
	249, 1061,
	250, 1061,
	251, 1061,
	252, 1061,
	253, 1061,
	254, 1061,
	255, 1061,
	257, 1061,
	258, 1061,
	259, 1061,
	262, 1061,
	263, 1061,
	264, 1061,
	267, 1061,
	268, 1061,
	269, 1061,
	270, 1061,
	271, 1061,
	272, 1061,
	273, 1061,
	274, 1061,
	275, 1061,
	276, 1061,
	277, 1061,
	278, 1061,
	279, 1061,
	280, 1061,
	281, 1061,
	282, 1061,
	284, 1061,
	285, 1061,
	286, 1061,
	287, 1061,
	288, 1061,
	289, 1061,
	291, 1061,
	293, 1061,
	294, 1061,
	295, 1061,
	296, 1061,
	297, 1061,
	298, 1061,
	299, 1061,
	300, 1061,
	301, 1061,
	303, 1061,
	304, 1061,
	305, 1061,
	306, 1061,
	307, 1061,
	309, 1061,
	310, 1061,
	311, 1061,
	312, 1061,
	313, 1061,
	314, 1061,
	315, 1061,
	316, 1061,
	318, 1061,
	319, 1061,
	320, 1061,
	321, 1061,
	322, 1061,
	323, 1061,
	324, 1061,
	325, 1061,
	327, 1061,
	328, 1061,
	329, 1061,
	330, 1061,
	331, 1061,
	332, 1061,
	333, 1061,
	334, 1061,
	336, 1061,
	337, 1061,
	338, 1061,
	339, 1061,
	340, 1061,
	341, 1061,
	342, 1061,
	343, 1061,
	344, 1061,
	345, 1061,
	346, 1061,
	347, 1061,
	348, 1061,
	349, 1061,
	350, 1061,
	351, 1061,
	352, 1061,
	353, 1061,
	354, 1061,
	355, 1061,
	356, 1061,
	358, 1061,
	359, 1061,
	360, 1061,
	361, 1061,
	362, 1061,
	363, 1061,
	364, 1061,
	365, 1061,
	366, 1061,
	367, 1061,
	368, 1061,
	369, 1061,
	371, 1061,
	372, 1061,
	373, 1061,
	375, 1061,
	376, 1061,
	377, 1061,
	378, 1061,
	379, 1061,
	380, 1061,
	381, 1061,
	383, 1061,
	384, 1061,
	385, 1061,
	386, 1061,
	387, 1061,
	389, 1061,
	391, 1061,
	392, 1061,
	393, 1061,
	394, 1061,
	395, 1061,
	396, 1061,
	397, 1061,
	398, 1061,
	399, 1061,
	401, 1061,
	402, 1061,
	404, 1061,
	405, 1061,
	406, 1061,
	407, 1061,
	408, 1061,
	409, 1061,
	410, 1061,
	411, 1061,
	412, 1061,
	414, 1061,
	415, 1061,
	416, 1061,
	417, 1061,
	418, 1061,
	419, 1061,
	420, 1061,
	422, 1061,
	423, 1061,
	424, 1061,
	429, 1061,
	430, 1061,
	431, 1061,
	432, 1061,
	433, 1061,
	434, 1061,
	435, 1061,
	443, 1061,
	448, 1061,
	449, 1061,
	450, 1061,
	457, 1061,
	461, 1061,
	-2, 0,
	-1, 554,
	154, 1735,
	388, 1735,
	440, 1735,
	459, 1735,
	-2, 0,
	-1, 555,
	154, 1813,
	388, 1813,
	440, 1813,
	459, 1813,
	-2, 0,
	-1, 556,
	154, 1724,
	388, 1724,
	440, 1724,
	459, 1724,
	-2, 0,
	-1, 558,
	154, 1902,
	388, 1902,
	440, 1902,
	459, 1902,
	-2, 0,
	-1, 560,
	154, 1931,
	388, 1931,
	440, 1931,
	459, 1931,
	-2, 0,
	-1, 567,
	154, 1823,
	388, 1823,
	440, 1823,
	459, 1823,
	-2, 501,
	-1, 584,
	459, 1682,
	462, 1682,
	-2, 697,
	-1, 585,
	459, 1684,
	462, 1684,
	-2, 698,
	-1, 586,
	459, 1683,
	462, 1683,
	-2, 699,
	-1, 587,
	462, 1629,
	-2, 700,
	-1, 734,
	294, 630,
	345, 630,
	-2, 0,
	-1, 735,
	294, 629,
	345, 629,
	-2, 581,
	-1, 738,
	1, 659,
	456, 659,
	458, 659,
	460, 659,
	-2, 0,
	-1, 739,
	1, 696,
	151, 696,
	456, 696,
	458, 696,
	460, 696,
	-2, 0,
	-1, 747,
	1, 633,
	456, 633,
	458, 633,
	460, 633,
	-2, 0,
	-1, 750,
	1, 659,
	456, 659,
	458, 659,
	460, 659,
	-2, 0,
	-1, 751,
	1, 661,
	456, 661,
	458, 661,
	460, 661,
	-2, 0,
	-1, 752,
	1, 664,
	456, 664,
	458, 664,
	460, 664,
	-2, 0,
	-1, 756,
	1, 678,
	456, 678,
	458, 678,
	460, 678,
	-2, 0,
	-1, 757,
	1, 680,
	456, 680,
	458, 680,
	460, 680,
	-2, 0,
	-1, 800,
	138, 1063,
	225, 1063,
	256, 1063,
	-2, 1019,
	-1, 815,
	138, 1062,
	225, 1062,
	256, 1062,
	-2, 1019,
	-1, 839,
	459, 1681,
	-2, 509,
	-1, 868,
	457, 1673,
	-2, 1664,
	-1, 874,
	5, 1198,
	-2, 1715,
	-1, 875,
	5, 1199,
	-2, 1719,
	-1, 876,
	5, 1200,
	-2, 1718,
	-1, 877,
	5, 1201,
	-2, 1928,
	-1, 878,
	5, 1202,
	-2, 1825,
	-1, 879,
	5, 1203,
	-2, 1894,
	-1, 880,
	5, 1204,
	-2, 1896,
	-1, 881,
	5, 1205,
	-2, 1908,
	-1, 882,
	5, 1206,
	-2, 1897,
	-1, 883,
	5, 1207,
	-2, 1898,
	-1, 884,
	5, 1208,
	-2, 1714,
	-1, 885,
	5, 1209,
	-2, 1944,
	-1, 886,
	5, 1210,
	-2, 1788,
	-1, 887,
	5, 1211,
	-2, 1833,
	-1, 888,
	5, 1212,
	-2, 1835,
	-1, 889,
	5, 1213,
	-2, 1792,
	-1, 890,
	5, 1214,
	457, 1691,
	-2, 1682,
	-1, 891,
	5, 1270,
	457, 1270,
	-2, 1979,
	-1, 896,
	457, 1692,
	-2, 1683,
	-1, 898,
	5, 1218,
	-2, 1977,
	-1, 899,
	5, 1219,
	-2, 1978,
	-1, 900,
	5, 1220,
	-2, 1791,
	-1, 901,
	5, 1221,
	-2, 1990,
	-1, 902,
	5, 1222,
	-2, 1793,
	-1, 903,
	5, 1223,
	-2, 1794,
	-1, 904,
	5, 1224,
	-2, 1795,
	-1, 905,
	5, 1225,
	-2, 1959,
	-1, 906,
	5, 1226,
	-2, 1988,
	-1, 907,
	5, 1227,
	-2, 1771,
	-1, 908,
	5, 1228,
	-2, 1772,
	-1, 909,
	5, 1242,
	-2, 1971,
	-1, 911,
	5, 1217,
	-2, 1967,
	-1, 912,
	5, 1217,
	-2, 1966,
	-1, 913,
	5, 1217,
	-2, 1983,
	-1, 914,
	5, 1234,
	-2, 1961,
	-1, 915,
	5, 1235,
	-2, 1716,
	-1, 916,
	5, 1245,
	-2, 1960,
	-1, 917,
	5, 1247,
	-2, 1999,
	-1, 919,
	5, 1258,
	-2, 1745,
	-1, 920,
	5, 1269,
	-2, 1992,
	-1, 921,
	5, 1261,
	-2, 1993,
	-1, 922,
	5, 1269,
	-2, 1994,
	-1, 923,
	5, 1265,
	-2, 1995,
	-1, 924,
	5, 1185,
	-2, 1801,
	-1, 925,
	5, 1186,
	-2, 1802,
	-1, 926,
	459, 1679,
	-2, 1663,
	-1, 927,
	457, 2019,
	-2, 1680,
	-1, 947,
	5, 1253,
	-2, 1918,
	-1, 964,
	5, 1252,
	-2, 2000,
	-1, 974,
	5, 1254,
	423, 1254,
	-2, 1962,
	-1, 975,
	5, 1255,
	423, 1255,
	-2, 1963,
	-1, 1011,
	457, 1691,
	-2, 1682,
	-1, 1039,
	154, 1931,
	388, 1931,
	440, 1931,
	459, 1931,
	-2, 0,
	-1, 1042,
	1, 487,
	460, 487,
	-2, 953,
	-1, 1162,
	309, 1660,
	450, 1660,
	-2, 1659,
	-1, 1185,
	461, 1660,
	-2, 1661,
	-1, 1220,
	300, 728,
	422, 728,
	-2, 247,
	-1, 1240,
	280, 1050,
	-2, 861,
	-1, 1249,
	260, 1686,
	-2, 0,
	-1, 1313,
	1, 362,
	456, 362,
	458, 362,
	460, 362,
	-2, 1024,
	-1, 1316,
	4, 1998,
	11, 1998,
	12, 1998,
	14, 1998,
	15, 1998,
	16, 1998,
	17, 1998,
	18, 1998,
	19, 1998,
	21, 1998,
	22, 1998,
	23, 1998,
	24, 1998,
	25, 1998,
	27, 1998,
	30, 1998,
	31, 1998,
	33, 1998,
	35, 1998,
	38, 1998,
	39, 1998,
	40, 1998,
	41, 1998,
	42, 1998,
	43, 1998,
	44, 1998,
	45, 1998,
	46, 1998,
	47, 1998,
	48, 1998,
	49, 1998,
	51, 1998,
	52, 1998,
	53, 1998,
	54, 1998,
	55, 1998,
	56, 1998,
	59, 1998,
	60, 1998,
	61, 1998,
	62, 1998,
	64, 1998,
	65, 1998,
	66, 1998,
	69, 1998,
	70, 1998,
	71, 1998,
	72, 1998,
	73, 1998,
	74, 1998,
	75, 1998,
	76, 1998,
	77, 1998,
	78, 1998,
	79, 1998,
	81, 1998,
	82, 1998,
	83, 1998,
	84, 1998,
	85, 1998,
	87, 1998,
	88, 1998,
	89, 1998,
	97, 1998,
	98, 1998,
	99, 1998,
	100, 1998,
	101, 1998,
	102, 1998,
	103, 1998,
	104, 1998,
	106, 1998,
	108, 1998,
	109, 1998,
	111, 1998,
	114, 1998,
	115, 1998,
	116, 1998,
	118, 1998,
	120, 1998,
	121, 1998,
	123, 1998,
	124, 1998,
	125, 1998,
	126, 1998,
	127, 1998,
	128, 1998,
	129, 1998,
	130, 1998,
	131, 1998,
	132, 1998,
	133, 1998,
	134, 1998,
	135, 1998,
	139, 1998,
	140, 1998,
	141, 1998,
	142, 1998,
	143, 1998,
	144, 1998,
	145, 1998,
	146, 1998,
	147, 1998,
	148, 1998,
	149, 1998,
	150, 1998,
	152, 1998,
	155, 1998,
	156, 1998,
	157, 1998,
	159, 1998,
	160, 1998,
	162, 1998,
	163, 1998,
	165, 1998,
	166, 1998,
	167, 1998,
	168, 1998,
	169, 1998,
	170, 1998,
	171, 1998,
	172, 1998,
	173, 1998,
	174, 1998,
	175, 1998,
	176, 1998,
	177, 1998,
	178, 1998,
	179, 1998,
	180, 1998,
	181, 1998,
	183, 1998,
	184, 1998,
	185, 1998,
	187, 1998,
	188, 1998,
	189, 1998,
	190, 1998,
	191, 1998,
	192, 1998,
	193, 1998,
	194, 1998,
	195, 1998,
	197, 1998,
	199, 1998,
	200, 1998,
	201, 1998,
	202, 1998,
	203, 1998,
	204, 1998,
	205, 1998,
	206, 1998,
	207, 1998,
	208, 1998,
	209, 1998,
	210, 1998,
	211, 1998,
	212, 1998,
	213, 1998,
	214, 1998,
	216, 1998,
	217, 1998,
	219, 1998,
	220, 1998,
	221, 1998,
	222, 1998,
	223, 1998,
	224, 1998,
	226, 1998,
	227, 1998,
	230, 1998,
	231, 1998,
	232, 1998,
	233, 1998,
	234, 1998,
	235, 1998,
	236, 1998,
	237, 1998,
	238, 1998,
	239, 1998,
	240, 1998,
	241, 1998,
	242, 1998,
	243, 1998,
	244, 1998,
	245, 1998,
	246, 1998,
	247, 1998,
	250, 1998,
	252, 1998,
	253, 1998,
	254, 1998,
	255, 1998,
	257, 1998,
	258, 1998,
	259, 1998,
	262, 1998,
	263, 1998,
	264, 1998,
	265, 1998,
	267, 1998,
	268, 1998,
	269, 1998,
	271, 1998,
	273, 1998,
	274, 1998,
	275, 1998,
	276, 1998,
	277, 1998,
	278, 1998,
	279, 1998,
	280, 1998,
	281, 1998,
	282, 1998,
	284, 1998,
	285, 1998,
	286, 1998,
	287, 1998,
	288, 1998,
	289, 1998,
	291, 1998,
	293, 1998,
	294, 1998,
	295, 1998,
	296, 1998,
	297, 1998,
	298, 1998,
	299, 1998,
	300, 1998,
	301, 1998,
	303, 1998,
	304, 1998,
	305, 1998,
	306, 1998,
	307, 1998,
	308, 1998,
	309, 1998,
	310, 1998,
	311, 1998,
	312, 1998,
	313, 1998,
	314, 1998,
	315, 1998,
	316, 1998,
	318, 1998,
	319, 1998,
	320, 1998,
	321, 1998,
	322, 1998,
	323, 1998,
	324, 1998,
	325, 1998,
	326, 1998,
	327, 1998,
	328, 1998,
	329, 1998,
	330, 1998,
	331, 1998,
	332, 1998,
	333, 1998,
	334, 1998,
	336, 1998,
	337, 1998,
	338, 1998,
	339, 1998,
	340, 1998,
	341, 1998,
	342, 1998,
	343, 1998,
	344, 1998,
	345, 1998,
	347, 1998,
	348, 1998,
	349, 1998,
	350, 1998,
	351, 1998,
	352, 1998,
	353, 1998,
	354, 1998,
	355, 1998,
	356, 1998,
	358, 1998,
	359, 1998,
	360, 1998,
	361, 1998,
	362, 1998,
	363, 1998,
	364, 1998,
	365, 1998,
	366, 1998,
	367, 1998,
	368, 1998,
	369, 1998,
	371, 1998,
	372, 1998,
	373, 1998,
	375, 1998,
	376, 1998,
	377, 1998,
	378, 1998,
	379, 1998,
	380, 1998,
	381, 1998,
	383, 1998,
	384, 1998,
	385, 1998,
	386, 1998,
	387, 1998,
	389, 1998,
	391, 1998,
	392, 1998,
	393, 1998,
	394, 1998,
	395, 1998,
	397, 1998,
	398, 1998,
	399, 1998,
	401, 1998,
	402, 1998,
	405, 1998,
	406, 1998,
	407, 1998,
	408, 1998,
	409, 1998,
	410, 1998,
	412, 1998,
	414, 1998,
	415, 1998,
	416, 1998,
	417, 1998,
	418, 1998,
	419, 1998,
	420, 1998,
	422, 1998,
	423, 1998,
	424, 1998,
	429, 1998,
	430, 1998,
	431, 1998,
	432, 1998,
	433, 1998,
	434, 1998,
	435, 1998,
	436, 1998,
	438, 1998,
	439, 1998,
	440, 1998,
	441, 1998,
	442, 1998,
	443, 1998,
	445, 1998,
	446, 1998,
	447, 1998,
	448, 1998,
	449, 1998,
	450, 1998,
	451, 1998,
	452, 1998,
	453, 1998,
	455, 1998,
	458, 1998,
	459, 1998,
	461, 1998,
	462, 1998,
	-2, 0,
	-1, 1319,
	154, 1902,
	388, 1902,
	440, 1902,
	459, 1902,
	-2, 0,
	-1, 1348,
	294, 630,
	345, 630,
	-2, 0,
	-1, 1371,
	1, 625,
	456, 625,
	458, 625,
	460, 625,
	-2, 0,
	-1, 1372,
	1, 650,
	456, 650,
	458, 650,
	460, 650,
	-2, 0,
	-1, 1373,
	1, 632,
	456, 632,
	458, 632,
	460, 632,
	-2, 0,
	-1, 1375,
	1, 636,
	456, 636,
	458, 636,
	460, 636,
	-2, 0,
	-1, 1400,
	1, 1951,
	456, 1951,
	458, 1951,
	459, 1951,
	460, 1951,
	-2, 676,
	-1, 1401,
	1, 1900,
	456, 1900,
	458, 1900,
	459, 1900,
	460, 1900,
	-2, 677,
	-1, 1414,
	1, 948,
	460, 948,
	-2, 953,
	-1, 1419,
	138, 1062,
	225, 1062,
	256, 1062,
	-2, 1019,
	-1, 1515,
	122, 1026,
	138, 1026,
	196, 1026,
	225, 1026,
	256, 1026,
	266, 1026,
	403, 1026,
	-2, 1426,
	-1, 1568,
	458, 1564,
	-2, 0,
	-1, 1610,
	122, 1026,
	138, 1026,
	196, 1026,
	225, 1026,
	256, 1026,
	266, 1026,
	403, 1026,
	-2, 1135,
	-1, 1664,
	457, 1257,
	-2, 1245,
	-1, 1703,
	1, 489,
	460, 489,
	-2, 953,
	-1, 1900,
	1, 627,
	456, 627,
	458, 627,
	460, 627,
	-2, 0,
	-1, 1901,
	1, 652,
	456, 652,
	458, 652,
	460, 652,
	-2, 0,
	-1, 1986,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1306,
	-1, 1987,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1307,
	-1, 1988,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1308,
	-1, 1989,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1309,
	-1, 1990,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1310,
	-1, 1991,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1311,
	-1, 1992,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1312,
	-1, 1993,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1313,
	-1, 2005,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1325,
	-1, 2006,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1326,
	-1, 2007,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1327,
	-1, 2010,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1332,
	-1, 2016,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1336,
	-1, 2018,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1344,
	-1, 2019,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1345,
	-1, 2020,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1346,
	-1, 2021,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1347,
	-1, 2115,
	5, 1214,
	154, 1575,
	457, 1691,
	-2, 1682,
	-1, 2116,
	154, 1576,
	-2, 1955,
	-1, 2117,
	154, 1577,
	-2, 1822,
	-1, 2118,
	154, 1578,
	-2, 1746,
	-1, 2119,
	154, 1579,
	-2, 1782,
	-1, 2120,
	154, 1580,
	-2, 1820,
	-1, 2121,
	154, 1581,
	-2, 1893,
	-1, 2197,
	1, 1136,
	2, 1136,
	87, 1136,
	122, 1136,
	138, 1136,
	151, 1136,
	155, 1136,
	161, 1136,
	164, 1136,
	187, 1136,
	196, 1136,
	206, 1136,
	221, 1136,
	225, 1136,
	243, 1136,
	256, 1136,
	260, 1136,
	266, 1136,
	317, 1136,
	319, 1136,
	403, 1136,
	413, 1136,
	426, 1136,
	427, 1136,
	428, 1136,
	437, 1136,
	456, 1136,
	458, 1136,
	460, 1136,
	462, 1136,
	-2, 1135,
	-1, 2202,
	457, 1665,
	-2, 1677,
	-1, 2223,
	457, 1256,
	-2, 1246,
	-1, 2461,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1334,
	-1, 2462,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1338,
	-1, 2468,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1340,
	-1, 2648,
	203, 953,
	291, 953,
	298, 953,
	437, 953,
	-2, 486,
	-1, 2740,
	280, 1050,
	-2, 861,
	-1, 2820,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1342,
	-1, 2827,
	200, 0,
	202, 0,
	250, 0,
	-2, 1361,
	-1, 2890,
	14, 0,
	15, 0,
	16, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1390,
	-1, 2891,
	14, 0,
	15, 0,
	16, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1391,
	-1, 2892,
	14, 0,
	15, 0,
	16, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1392,
	-1, 2896,
	14, 0,
	15, 0,
	16, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1396,
	-1, 2897,
	14, 0,
	15, 0,
	16, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1397,
	-1, 2898,
	14, 0,
	15, 0,
	16, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1398,
	-1, 2941,
	457, 1666,
	-2, 1678,
	-1, 3029,
	459, 2101,
	-2, 996,
	-1, 3075,
	200, 0,
	202, 0,
	250, 0,
	-2, 1362,
	-1, 3078,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1365,
	-1, 3079,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1367,
	-1, 3235,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1366,
	-1, 3236,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1368,
	-1, 3246,
	200, 0,
	-2, 1399,
	-1, 3350,
	200, 0,
	-2, 1400,
	-1, 3466,
	43, 0,
	173, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1958,
}

const sqlPrivate = 57344

const sqlLast = 74919

var sqlAct = [...]int{

	896, 3465, 3560, 3302, 3276, 3475, 3279, 3550, 2354, 3179,
	2146, 2727, 3435, 3444, 3432, 3419, 3476, 3061, 3513, 2961,
	3477, 2363, 3309, 3354, 2858, 3265, 2355, 3203, 1973, 2188,
	3226, 825, 1012, 3020, 3464, 3015, 3314, 1166, 1048, 213,
	2756, 213, 213, 3137, 213, 213, 213, 213, 213, 1305,
	2665, 213, 2033, 2189, 2749, 2751, 1430, 2252, 1301, 586,
	3002, 3025, 2723, 2962, 1634, 1751, 565, 3250, 1067, 2351,
	2397, 1876, 1513, 1605, 816, 2328, 2331, 213, 2395, 2326,
	2454, 586, 2610, 1159, 868, 2597, 2570, 1004, 2310, 2624,
	1603, 3060, 1355, 2586, 1577, 1826, 3109, 2364, 2405, 1635,
	2569, 2254, 1827, 2913, 2190, 2311, 2046, 2394, 1970, 1541,
	1834, 682, 1837, 1523, 2489, 1760, 2064, 3355, 1966, 2450,
	1178, 2386, 1789, 2404, 86, 1785, 1414, 2388, 2329, 892,
	1055, 1738, 1778, 3303, 2164, 1578, 1736, 2076, 2192, 2030,
	1175, 2629, 2287, 2725, 4, 1855, 824, 141, 32, 1168,
	1288, 2143, 2357, 1314, 1298, 1191, 1823, 1234, 813, 2244,
	207, 999, 2398, 533, 1044, 2058, 996, 1587, 2172, 2154,
	2084, 1504, 853, 978, 2047, 206, 213, 213, 2111, 519,
	1431, 587, 1429, 541, 205, 549, 148, 1822, 588, 582,
	1312, 1843, 1264, 1536, 2286, 149, 559, 658, 1188, 627,
	1750, 852, 536, 1001, 976, 37, 1413, 36, 1435, 544,
	34, 25, 23, 21, 745, 1246, 2930, 2485, 2931, 591,
	677, 1857, 141, 729, 1443, 1444, 1877, 3590, 2766, 3581,
	2356, 2163, 1857, 2163, 594, 1052, 1857, 1613, 3580, 3559,
	820, 591, 2163, 1794, 1474, 3542, 3540, 2646, 3499, 3151,
	3151, 1446, 3500, 3497, 3495, 3492, 594, 2163, 2163, 3493,
	2410, 820, 2156, 3489, 815, 1374, 2765, 3490, 1010, 3486,
	692, 2163, 3462, 1794, 3415, 821, 1794, 1443, 1444, 1445,
	1476, 1477, 1478, 1486, 1487, 1488, 3461, 3460, 1465, 3457,
	1794, 1869, 3338, 1869, 3456, 3414, 1479, 1474, 1869, 2216,
	1869, 3404, 3403, 3397, 1446, 3151, 3151, 1794, 3391, 1492,
	2306, 1029, 3151, 3389, 979, 979, 3352, 3151, 3335, 3332,
	2216, 3293, 1794, 3151, 2061, 1794, 3292, 829, 801, 3285,
	1794, 3284, 1445, 1794, 3071, 3151, 3256, 800, 3237, 3224,
	1794, 1465, 2216, 1869, 2916, 3215, 3176, 3168, 1462, 2778,
	2163, 2163, 1468, 1469, 1470, 1471, 3150, 3077, 1052, 3037,
	3151, 2216, 1451, 2794, 3031, 3000, 2936, 1024, 2794, 3001,
	2937, 808, 2926, 2919, 2851, 2839, 2927, 2163, 1794, 2163,
	2793, 980, 2785, 2916, 2794, 2718, 2786, 2583, 2581, 1869,
	2062, 2163, 2163, 1473, 1475, 2580, 2534, 2517, 2506, 2163,
	2163, 2518, 2163, 2504, 2212, 1468, 1469, 1470, 1471, 2505,
	2384, 2155, 2229, 2215, 1873, 1451, 2163, 2216, 2210, 2204,
	1514, 993, 2163, 1794, 2542, 2543, 181, 2162, 1872, 3169,
	1794, 2163, 1873, 982, 2786, 983, 2163, 2301, 1794, 1483,
	2243, 1025, 1493, 1709, 2778, 1466, 1473, 1475, 2338, 2453,
	1793, 2241, 1573, 1187, 1604, 2987, 2183, 2488, 2815, 1788,
	2063, 2060, 1443, 1444, 181, 183, 1489, 2182, 1490, 1357,
	2181, 2180, 2179, 2767, 984, 1460, 1461, 981, 807, 678,
	1858, 806, 2542, 2543, 181, 2560, 2561, 2562, 2557, 1446,
	1481, 1858, 2768, 2102, 805, 1858, 804, 803, 1466, 799,
	2433, 2542, 2543, 183, 57, 798, 680, 1729, 797, 182,
	796, 795, 794, 793, 792, 791, 1491, 1445, 58, 175,
	790, 1472, 789, 183, 213, 788, 787, 176, 727, 726,
	725, 1480, 62, 724, 1514, 723, 2765, 722, 721, 1467,
	720, 719, 718, 75, 717, 716, 2557, 182, 150, 715,
	714, 3126, 213, 2344, 713, 1025, 2065, 175, 712, 213,
	711, 710, 2548, 68, 709, 176, 708, 182, 3482, 707,
	2155, 706, 705, 704, 1472, 213, 1070, 213, 213, 1171,
	213, 1070, 213, 703, 702, 701, 150, 691, 690, 3088,
	213, 213, 1467, 74, 649, 1054, 648, 607, 181, 1059,
	1451, 606, 605, 85, 597, 1068, 150, 596, 75, 82,
	1179, 595, 572, 571, 570, 213, 569, 2934, 1484, 1025,
	2548, 553, 1209, 203, 202, 3463, 201, 1865, 200, 213,
	199, 1171, 1171, 213, 213, 198, 213, 183, 1856, 2548,
	1181, 197, 1944, 196, 195, 2558, 194, 193, 213, 192,
	191, 190, 76, 189, 188, 2059, 213, 187, 1456, 1454,
	1455, 1447, 1448, 1449, 1450, 1452, 1453, 186, 185, 184,
	213, 213, 213, 213, 213, 1171, 1171, 2795, 2627, 2221,
	1171, 182, 213, 1171, 213, 213, 2511, 1042, 1376, 2500,
	2316, 175, 2205, 2542, 2543, 2196, 2100, 2098, 213, 176,
	1734, 1482, 2096, 2558, 1457, 1458, 1464, 1463, 1459, 1485,
	1606, 1456, 1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453,
	150, 1544, 2558, 2094, 3098, 1309, 1879, 1543, 3097, 2345,
	1620, 1530, 1442, 3385, 1171, 1193, 2360, 1061, 1197, 2559,
	1014, 1063, 3345, 1156, 1161, 1525, 1544, 181, 1547, 1196,
	591, 1201, 1543, 1207, 3216, 1037, 213, 3275, 77, 3341,
	3211, 3339, 1162, 117, 3130, 594, 1185, 895, 3108, 213,
	3107, 1190, 3095, 1542, 1525, 918, 1251, 3094, 1189, 3093,
	3092, 3086, 3085, 3084, 213, 2999, 183, 2950, 2949, 1208,
	147, 80, 2947, 81, 1878, 2940, 2910, 2559, 2909, 2908,
	2835, 2831, 2622, 2577, 821, 1203, 2568, 2541, 2538, 1329,
	2537, 2789, 181, 2535, 1302, 2524, 2559, 1247, 1247, 2523,
	2522, 1292, 1295, 2519, 681, 1317, 2516, 141, 117, 1315,
	182, 2548, 2494, 2542, 2543, 2493, 2486, 1325, 2385, 2197,
	175, 2542, 2543, 1384, 1328, 2069, 1442, 992, 176, 1248,
	1441, 183, 1512, 1443, 1444, 1831, 3588, 1185, 2553, 2551,
	2552, 2544, 2545, 2546, 2547, 2549, 2550, 3558, 3557, 150,
	3260, 3498, 1799, 1474, 118, 1420, 1526, 1797, 1524, 1013,
	1446, 2273, 2860, 3452, 823, 3450, 3382, 151, 3379, 3376,
	2343, 3375, 3374, 3370, 3364, 182, 1375, 3336, 3331, 1447,
	1448, 1449, 1450, 1452, 1453, 175, 3330, 2042, 1445, 2554,
	2555, 2556, 2036, 176, 2558, 1419, 2553, 2551, 2552, 2544,
	2545, 2546, 2547, 2549, 2550, 3271, 3248, 3221, 2218, 3220,
	3201, 3198, 3192, 3125, 679, 1412, 2551, 2552, 2544, 2545,
	2546, 2547, 2549, 2550, 3106, 3051, 3048, 1730, 2288, 2101,
	1349, 1007, 2977, 2976, 1334, 181, 2449, 3210, 2965, 1418,
	2964, 2922, 2826, 2796, 2779, 2743, 181, 2712, 2690, 1417,
	2668, 2548, 1202, 2667, 1428, 2642, 2582, 2515, 213, 2548,
	2514, 1415, 2499, 2640, 2603, 821, 2477, 2325, 2542, 2543,
	1548, 1451, 1545, 1537, 183, 1534, 2225, 181, 2224, 2200,
	2177, 2161, 1584, 2092, 213, 183, 1508, 894, 2559, 1619,
	1576, 801, 1575, 1572, 213, 1070, 213, 213, 213, 1571,
	800, 1570, 1473, 1475, 586, 213, 213, 1438, 1439, 586,
	213, 1629, 1546, 1421, 1569, 213, 183, 1568, 182, 1567,
	1566, 1171, 1565, 1564, 1623, 1443, 1444, 1701, 175, 182,
	1562, 1561, 851, 1560, 2558, 1559, 176, 2542, 2543, 175,
	1558, 1557, 1070, 1556, 1555, 1474, 1554, 176, 1594, 1443,
	1444, 181, 1446, 1553, 1466, 1614, 1552, 150, 1706, 1551,
	182, 1581, 1582, 1010, 1550, 1010, 2668, 1732, 2359, 1527,
	175, 1735, 1509, 1507, 1502, 1036, 1446, 1880, 176, 1027,
	1445, 1700, 1627, 1020, 3357, 3197, 1538, 1539, 3127, 1465,
	183, 3081, 2946, 2929, 2925, 2503, 979, 2178, 3129, 150,
	2542, 2543, 2945, 1526, 1445, 821, 2548, 2553, 2551, 2552,
	2544, 2545, 2546, 2547, 2549, 2550, 1720, 1719, 181, 2638,
	1729, 1726, 141, 1505, 1599, 1729, 1615, 1626, 2559, 1729,
	3377, 1056, 2099, 2097, 182, 2824, 1624, 2752, 2095, 3214,
	3170, 1052, 1611, 2693, 175, 2932, 1703, 835, 1467, 1622,
	1058, 2781, 176, 1468, 1469, 1470, 1471, 183, 1704, 2093,
	1631, 2780, 1574, 1451, 591, 1698, 1606, 1171, 213, 591,
	3342, 1006, 3340, 150, 1070, 2548, 1728, 1744, 3315, 594,
	1641, 1602, 1608, 1601, 594, 1557, 1600, 1598, 1597, 1596,
	1557, 1729, 3274, 1630, 1473, 1475, 1410, 181, 1697, 1049,
	3010, 182, 1057, 1795, 1544, 1755, 1725, 2521, 1632, 1052,
	1543, 175, 850, 213, 213, 2520, 2459, 1723, 1348, 176,
	213, 1775, 2275, 1715, 1777, 1053, 1052, 1782, 2975, 1877,
	213, 1043, 1385, 1532, 2290, 1721, 183, 785, 1356, 213,
	150, 213, 2729, 213, 2728, 3310, 1466, 213, 1357, 2552,
	2544, 2545, 2546, 2547, 2549, 2550, 1828, 1832, 2558, 213,
	2546, 2547, 2549, 2550, 2991, 2979, 1443, 1444, 1759, 1455,
	1447, 1448, 1449, 1450, 1452, 1453, 786, 2801, 2706, 1773,
	182, 3251, 991, 3561, 1511, 2356, 1474, 1050, 3483, 2862,
	175, 2509, 2077, 1446, 1051, 1786, 2223, 1815, 176, 1171,
	213, 1171, 1563, 1540, 213, 2721, 2061, 1171, 1819, 1667,
	1171, 213, 1224, 213, 213, 3494, 3491, 2761, 2957, 150,
	3429, 1445, 1472, 1171, 1171, 1171, 3016, 213, 591, 2219,
	2392, 3396, 213, 2129, 1840, 644, 3528, 2446, 1849, 1724,
	1467, 586, 213, 594, 213, 3484, 213, 3529, 213, 1190,
	213, 3161, 2559, 1338, 1807, 639, 1189, 1212, 2230, 1049,
	2256, 2650, 1781, 781, 213, 1058, 1792, 213, 1222, 213,
	819, 779, 2062, 777, 3585, 1443, 1444, 1932, 213, 3301,
	775, 766, 1427, 3295, 1383, 1847, 1382, 1930, 1739, 2247,
	2993, 2989, 1740, 1896, 1716, 772, 1008, 213, 1818, 1809,
	1808, 2245, 1446, 213, 1451, 2544, 2545, 2546, 2547, 2549,
	2550, 2639, 2988, 2954, 645, 1882, 1425, 1057, 1860, 2953,
	1058, 1862, 2498, 821, 1864, 638, 1070, 2497, 1867, 1884,
	1445, 1842, 1049, 1052, 1845, 1473, 1475, 2496, 2495, 1223,
	2463, 2308, 2063, 2060, 818, 2692, 2300, 1050, 1315, 2297,
	2259, 2278, 2211, 1887, 1051, 1974, 1752, 2017, 2247, 1456,
	1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453, 1953, 1948,
	2245, 1381, 1057, 1416, 2544, 2545, 2546, 2547, 2549, 2550,
	1186, 1741, 2652, 2088, 2087, 1748, 1975, 1466, 2352, 1874,
	3395, 1453, 1331, 3232, 1743, 1257, 1037, 1256, 1886, 2048,
	2049, 591, 1336, 3545, 2277, 769, 1753, 1754, 2028, 2802,
	819, 1070, 1942, 1451, 820, 1891, 594, 2048, 2074, 211,
	1050, 1426, 3148, 1971, 1972, 2237, 1255, 1051, 1254, 2203,
	1912, 1276, 2026, 1218, 1749, 2032, 2266, 1943, 2065, 814,
	2078, 1586, 2550, 1941, 1235, 2294, 1950, 3281, 3454, 1745,
	3145, 3157, 2265, 2110, 213, 2114, 2114, 2127, 1946, 2048,
	1730, 1727, 2147, 2149, 3480, 1730, 2288, 2153, 1951, 1730,
	2288, 1423, 2967, 1905, 637, 3546, 636, 1615, 2032, 1424,
	1233, 1467, 1945, 1947, 818, 1070, 213, 2258, 1350, 1332,
	1846, 1952, 3146, 1052, 1900, 213, 1641, 1641, 213, 2077,
	2804, 1070, 801, 2803, 640, 801, 801, 3553, 1347, 1590,
	2201, 1962, 821, 1018, 1963, 1964, 2040, 1035, 1232, 1899,
	2073, 1371, 2038, 1395, 2430, 821, 1940, 2065, 1409, 821,
	2202, 1730, 2288, 2845, 647, 646, 2022, 2059, 2451, 2452,
	699, 1593, 2209, 1746, 2023, 1901, 3528, 2024, 2198, 1380,
	2029, 817, 3565, 1010, 820, 2044, 1906, 2184, 1357, 3548,
	1588, 2194, 2195, 3518, 1357, 2758, 1052, 1220, 1761, 1746,
	3371, 839, 1372, 2185, 2686, 1591, 2759, 1010, 2233, 1017,
	213, 2071, 2703, 573, 1235, 3231, 3481, 1765, 1171, 676,
	2235, 2649, 979, 2086, 3155, 2698, 2276, 1589, 2090, 2091,
	2715, 2257, 2168, 1447, 1448, 1449, 1450, 1452, 1453, 2978,
	1015, 1772, 3412, 1757, 2599, 1070, 2680, 821, 2651, 1535,
	213, 3575, 2236, 2138, 2122, 1706, 2636, 2151, 213, 2065,
	1762, 2159, 2160, 2758, 1755, 3141, 2234, 2170, 3142, 213,
	2174, 2175, 1961, 761, 2242, 2990, 1007, 2340, 1007, 783,
	1857, 2298, 213, 782, 1611, 1171, 3188, 1746, 2213, 2679,
	141, 773, 3479, 773, 1337, 812, 1931, 1739, 213, 1070,
	774, 1740, 1171, 1592, 213, 213, 1929, 3144, 2246, 1546,
	579, 1742, 3062, 1666, 3242, 773, 3535, 2220, 3440, 3147,
	3381, 817, 2025, 1501, 3517, 531, 3551, 3547, 2248, 2513,
	213, 2027, 213, 2968, 2173, 213, 2169, 1275, 2312, 1217,
	1766, 2228, 3566, 3156, 1449, 1450, 1452, 1453, 1939, 526,
	213, 2313, 2068, 2193, 1392, 820, 2309, 213, 3196, 213,
	3282, 213, 2436, 3065, 3057, 2295, 2942, 213, 762, 598,
	213, 2281, 213, 2227, 213, 3410, 213, 213, 1904, 213,
	1171, 1171, 1171, 2231, 1171, 2280, 1538, 1539, 213, 213,
	1741, 213, 213, 581, 1333, 2014, 3552, 2598, 2465, 1767,
	1768, 1030, 213, 1743, 3411, 2130, 3478, 770, 1763, 2272,
	2260, 2262, 2251, 3527, 2367, 213, 213, 213, 1755, 1359,
	213, 3143, 213, 3004, 2268, 213, 3525, 213, 3554, 213,
	2380, 2381, 2409, 3320, 2376, 2279, 2312, 1764, 2312, 3189,
	2305, 2031, 1393, 700, 1641, 2439, 1434, 1422, 2296, 2406,
	213, 213, 213, 213, 3200, 213, 3228, 2318, 1745, 2320,
	2349, 3516, 2842, 2747, 591, 2408, 1162, 2411, 2412, 2347,
	2474, 2289, 2291, 2292, 2293, 2422, 2323, 2039, 2682, 594,
	213, 1821, 1185, 1583, 1346, 1190, 1586, 2335, 1028, 575,
	1023, 2339, 2314, 1034, 2472, 1776, 1898, 2369, 518, 3063,
	2391, 2684, 2358, 2413, 2358, 2414, 2419, 580, 2362, 2441,
	3576, 763, 3148, 1394, 2899, 1016, 1006, 3104, 1006, 2378,
	2373, 1756, 2374, 1769, 2375, 2012, 1717, 2382, 2015, 141,
	1590, 2377, 2843, 1315, 2393, 3570, 2434, 2383, 1517, 1858,
	3145, 2438, 1522, 3138, 810, 1433, 761, 577, 2683, 3287,
	3286, 2630, 1746, 3269, 1590, 3361, 2421, 3136, 3227, 2435,
	1185, 1185, 1593, 3140, 1714, 2425, 2956, 2426, 812, 2427,
	2748, 599, 600, 2491, 2492, 2423, 2011, 2424, 2466, 213,
	2663, 2171, 3146, 2655, 2428, 574, 1593, 1770, 2501, 1501,
	1638, 2659, 2442, 2348, 2330, 2327, 1591, 1841, 2469, 1830,
	3160, 1185, 1829, 1308, 1803, 1588, 811, 3159, 527, 2470,
	2448, 1958, 2475, 839, 3139, 764, 2445, 839, 1746, 2841,
	1591, 2444, 578, 2165, 3420, 1154, 1433, 1936, 2065, 1712,
	1154, 1710, 1432, 576, 2487, 1185, 3021, 2437, 3383, 3204,
	2324, 762, 1589, 1278, 3308, 1713, 3306, 3270, 2670, 1784,
	2900, 2669, 2457, 765, 2282, 1949, 2901, 1892, 3229, 3105,
	528, 602, 601, 1434, 2464, 2924, 2579, 2596, 1070, 1783,
	2595, 821, 1373, 2584, 2208, 2207, 2206, 1360, 2591, 2592,
	1263, 3569, 2593, 1249, 2337, 818, 3277, 213, 2167, 3366,
	1742, 3180, 2790, 2166, 1592, 213, 1839, 2590, 1779, 529,
	1250, 530, 213, 2717, 2013, 213, 213, 1070, 3532, 3304,
	1959, 603, 604, 1432, 3423, 3110, 1070, 3267, 1592, 1753,
	1754, 696, 213, 2508, 1261, 3141, 698, 2914, 3142, 1666,
	1666, 2082, 1407, 3367, 2502, 2617, 2620, 213, 689, 3534,
	3496, 1008, 3378, 1008, 1389, 2628, 3247, 1780, 2607, 3268,
	3158, 1010, 3103, 2995, 2471, 213, 213, 213, 2618, 2619,
	2605, 213, 2606, 2473, 213, 3278, 1010, 3144, 2571, 2608,
	2647, 213, 213, 213, 213, 213, 1335, 2825, 761, 3147,
	3424, 2621, 2799, 2653, 763, 3384, 2626, 213, 213, 213,
	1387, 2602, 2536, 2283, 2284, 1010, 213, 2631, 2625, 3368,
	812, 2585, 2574, 2575, 2576, 1370, 1368, 1366, 213, 1171,
	2476, 213, 2656, 2657, 1364, 2600, 2334, 2307, 2274, 1070,
	2226, 1362, 2672, 1621, 2676, 2677, 2637, 1070, 2671, 1354,
	2674, 1618, 213, 1408, 1326, 213, 213, 2572, 1352, 2660,
	2616, 814, 2432, 2431, 1259, 213, 2695, 2416, 1171, 213,
	1938, 1171, 1171, 1171, 1928, 1909, 2628, 1699, 213, 2632,
	2633, 1549, 2664, 1330, 213, 2697, 1007, 2648, 2130, 2130,
	213, 1239, 213, 762, 2732, 2081, 1262, 2634, 3474, 213,
	1627, 3143, 2612, 3175, 1406, 2654, 809, 1744, 764, 3167,
	1007, 2704, 2645, 2726, 1739, 3417, 1388, 3134, 1740, 1641,
	3019, 2973, 1171, 1171, 2588, 2643, 2644, 2713, 2971, 2955,
	213, 213, 1744, 2763, 213, 2685, 2691, 2746, 2736, 2601,
	1260, 1171, 697, 694, 695, 2699, 765, 2406, 2687, 2688,
	2731, 2730, 2689, 2353, 2702, 1641, 2406, 2708, 926, 2754,
	687, 688, 1386, 3514, 213, 1786, 1070, 213, 213, 1070,
	213, 2707, 2714, 1786, 2342, 2280, 2613, 1369, 1367, 1365,
	2853, 2709, 2710, 2341, 2321, 2711, 1363, 2777, 213, 2130,
	2130, 2130, 1185, 1361, 1871, 1179, 2750, 209, 1068, 521,
	522, 1353, 537, 521, 537, 547, 552, 1741, 1870, 568,
	1351, 2797, 1818, 2760, 821, 2700, 1258, 209, 2611, 2701,
	1743, 1868, 2769, 1927, 2753, 1866, 1638, 1638, 2810, 1863,
	2762, 1070, 1861, 1859, 1850, 686, 763, 2809, 2615, 209,
	1800, 2788, 1070, 1798, 213, 1787, 2792, 1774, 1771, 2771,
	2772, 2773, 1758, 2774, 2775, 1747, 988, 3324, 2455, 2776,
	2850, 141, 771, 2798, 1628, 1436, 3529, 1666, 3446, 3223,
	3218, 2856, 2828, 3217, 2407, 1745, 1733, 1214, 2247, 2247,
	989, 2247, 3326, 2264, 1154, 3030, 2806, 1755, 1404, 1405,
	2245, 2263, 1902, 2261, 1926, 2837, 2838, 2811, 1925, 1907,
	3373, 3347, 2813, 3111, 2285, 2304, 2267, 2807, 1440, 1443,
	1444, 2271, 2614, 1443, 1444, 1707, 532, 2303, 2302, 2911,
	2269, 3416, 2833, 2270, 3386, 839, 1006, 3008, 3003, 2939,
	2361, 1154, 2456, 2635, 521, 521, 1446, 213, 2152, 1702,
	764, 1633, 209, 2844, 2846, 2847, 3549, 3568, 3388, 2852,
	1006, 1437, 213, 1514, 1185, 2312, 1971, 2869, 1070, 2865,
	2863, 2859, 543, 2866, 1445, 2868, 990, 2085, 1445, 1746,
	2876, 3082, 1971, 2879, 2542, 2543, 2944, 213, 765, 2933,
	1641, 2878, 1443, 1444, 776, 778, 2903, 2941, 2239, 2238,
	2928, 1340, 2848, 2239, 2641, 2240, 2089, 1339, 2083, 2041,
	1737, 2904, 1164, 2907, 2056, 1391, 2943, 2840, 1390, 1512,
	1010, 1010, 1510, 3577, 3358, 3261, 3259, 3191, 1517, 2864,
	3128, 3054, 2915, 213, 3047, 2917, 2918, 3036, 3014, 1641,
	1641, 2980, 2998, 2997, 2996, 2970, 2770, 2744, 2742, 2418,
	2417, 2371, 2346, 2322, 2043, 1641, 1641, 1924, 1923, 1922,
	1921, 1853, 1852, 2992, 1240, 1243, 2935, 2912, 1851, 141,
	213, 213, 213, 1154, 1833, 2134, 1811, 1810, 1806, 1805,
	1804, 1802, 1801, 1403, 1402, 1287, 1641, 1070, 213, 1286,
	1285, 1284, 1171, 1283, 1282, 1281, 1280, 1279, 1277, 2984,
	2985, 2986, 1272, 1271, 1270, 1269, 213, 2959, 1268, 1231,
	1230, 1229, 3011, 3032, 1228, 1227, 1321, 1742, 1226, 213,
	213, 1171, 1171, 1171, 1225, 213, 213, 213, 2994, 3023,
	213, 213, 2130, 2130, 213, 213, 1219, 1171, 3027, 1213,
	1211, 1210, 2951, 213, 1033, 1032, 3022, 963, 3012, 873,
	1708, 3026, 784, 2948, 1638, 3007, 1070, 631, 2280, 768,
	2972, 1008, 2974, 2367, 3280, 1397, 2664, 1341, 73, 1221,
	618, 67, 2969, 2920, 2921, 3017, 3013, 3428, 2678, 1908,
	1358, 1910, 2604, 3080, 2176, 1008, 3055, 3409, 3089, 2512,
	3353, 1010, 2406, 3028, 3241, 3043, 3024, 2080, 1531, 69,
	3034, 213, 861, 3033, 946, 3187, 3186, 3135, 2958, 2396,
	3184, 3183, 2130, 2130, 2130, 2130, 2130, 2130, 2130, 2130,
	2130, 2130, 2130, 2130, 2130, 2130, 2130, 2130, 2130, 2130,
	2130, 3076, 2130, 3053, 3046, 3067, 3044, 3045, 3059, 1641,
	3049, 3039, 3064, 3050, 3068, 3052, 3038, 828, 1073, 1718,
	867, 1731, 2222, 2113, 1637, 870, 1818, 1639, 872, 871,
	1640, 1533, 869, 213, 1007, 1636, 2336, 2365, 1266, 749,
	1722, 2037, 2075, 1070, 2507, 1070, 1528, 841, 863, 1007,
	2072, 1026, 840, 2609, 2757, 2938, 3209, 1957, 3056, 2447,
	1954, 634, 1021, 2539, 213, 213, 213, 2057, 1019, 2135,
	2128, 2124, 1411, 3102, 3123, 1503, 213, 2366, 1007, 1060,
	844, 2035, 213, 1519, 213, 2481, 2764, 213, 213, 213,
	1031, 2623, 2217, 3443, 3153, 1154, 1965, 568, 1070, 213,
	213, 1171, 1666, 1820, 1070, 987, 1171, 986, 985, 1641,
	3119, 1010, 213, 209, 2588, 209, 209, 3115, 1176, 1010,
	209, 3131, 3132, 3120, 3113, 3114, 3118, 213, 209, 1192,
	1070, 3121, 1010, 1171, 3163, 2625, 3434, 3124, 1666, 3162,
	3431, 2724, 1711, 2232, 3133, 1495, 2733, 857, 1184, 2589,
	2791, 1236, 3372, 1216, 3152, 3178, 1494, 780, 3363, 1047,
	1046, 1045, 213, 2662, 3574, 2966, 180, 1238, 177, 3181,
	3206, 209, 209, 1070, 1176, 3172, 3208, 179, 3219, 178,
	1154, 2982, 3182, 3173, 2716, 90, 209, 3205, 3116, 35,
	16, 116, 3177, 3194, 1274, 115, 3193, 114, 113, 1070,
	112, 111, 1068, 110, 3207, 109, 108, 107, 209, 209,
	209, 209, 1176, 106, 105, 104, 103, 3213, 3202, 102,
	568, 101, 209, 209, 100, 99, 98, 97, 3239, 96,
	95, 3154, 3253, 94, 93, 92, 686, 1070, 91, 564,
	561, 3230, 3164, 3165, 49, 213, 48, 213, 89, 1070,
	213, 88, 15, 33, 1154, 13, 53, 54, 213, 3233,
	12, 1883, 3190, 28, 3112, 29, 3239, 3195, 3238, 79,
	1154, 78, 3117, 27, 1006, 14, 26, 3264, 1974, 24,
	213, 3249, 10, 8, 1818, 7, 30, 1595, 11, 1006,
	3212, 3254, 3255, 146, 209, 145, 72, 3263, 144, 213,
	71, 143, 3257, 213, 142, 3258, 70, 209, 2134, 2134,
	22, 213, 3298, 9, 138, 3312, 1171, 3222, 1006, 3313,
	3009, 213, 552, 3262, 3307, 3283, 66, 140, 3317, 139,
	63, 3319, 137, 136, 64, 135, 134, 65, 133, 20,
	5, 52, 213, 213, 6, 3316, 3296, 3299, 3225, 2800,
	3333, 3334, 3305, 3322, 83, 84, 31, 61, 60, 59,
	2726, 19, 213, 1666, 51, 3311, 18, 170, 213, 169,
	3321, 3289, 3323, 168, 167, 162, 161, 3328, 213, 1638,
	3026, 166, 164, 163, 1154, 3327, 165, 160, 132, 1641,
	1790, 172, 171, 174, 158, 154, 153, 157, 3329, 3369,
	159, 3344, 156, 3360, 155, 152, 3337, 173, 131, 2134,
	2134, 2134, 1666, 1666, 130, 1638, 56, 3359, 3290, 3291,
	129, 3356, 128, 3351, 3380, 127, 3346, 126, 1666, 1666,
	125, 213, 1171, 55, 17, 2, 1, 213, 1154, 0,
	0, 1171, 1171, 0, 1641, 0, 0, 1171, 0, 3402,
	0, 213, 0, 213, 0, 0, 0, 0, 0, 1666,
	3387, 0, 3316, 0, 3390, 0, 0, 3394, 3413, 3393,
	0, 0, 0, 1007, 1007, 213, 3325, 0, 3399, 3406,
	0, 213, 213, 3425, 1070, 0, 0, 3398, 0, 0,
	3400, 3401, 213, 213, 2478, 2479, 3405, 3437, 0, 1008,
	3441, 0, 3433, 3436, 0, 3447, 3449, 0, 3451, 0,
	0, 0, 3430, 1974, 1008, 0, 521, 0, 0, 3438,
	3459, 0, 3458, 0, 1875, 0, 213, 1185, 0, 0,
	1790, 1641, 3453, 1885, 3455, 0, 0, 209, 0, 209,
	3485, 2130, 209, 1008, 0, 0, 1893, 1894, 1895, 3472,
	3445, 3473, 1192, 0, 1176, 209, 3470, 3471, 0, 0,
	0, 3501, 209, 1192, 537, 213, 0, 209, 1192, 3503,
	3487, 3505, 3510, 568, 0, 0, 0, 0, 3515, 3511,
	3504, 3502, 3506, 0, 2130, 213, 3507, 0, 0, 0,
	0, 0, 0, 0, 0, 2565, 2566, 2567, 0, 3521,
	3522, 0, 0, 0, 3526, 1585, 3407, 3524, 3408, 213,
	3523, 213, 1666, 3530, 0, 3531, 3533, 3539, 3433, 3541,
	0, 3436, 2367, 3538, 3537, 3544, 3543, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3426, 0, 3508, 3509,
	1638, 0, 3512, 0, 1007, 3448, 3556, 3555, 0, 0,
	0, 0, 0, 0, 3563, 0, 0, 3562, 0, 3564,
	0, 3567, 0, 0, 0, 0, 0, 0, 3445, 0,
	0, 3571, 0, 0, 0, 0, 0, 0, 3572, 3573,
	0, 0, 3578, 0, 3579, 2130, 0, 0, 0, 1638,
	1638, 0, 3582, 3583, 3584, 3586, 3587, 0, 0, 0,
	0, 0, 0, 0, 3591, 1638, 1638, 0, 0, 3589,
	0, 0, 1666, 1006, 1006, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1638, 0, 0, 0,
	0, 0, 2134, 2134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1443, 1444, 0, 827, 0, 0,
	0, 0, 0, 0, 3536, 0, 0, 0, 0, 0,
	0, 209, 209, 0, 1474, 0, 0, 0, 209, 0,
	0, 1446, 0, 0, 0, 0, 0, 0, 1838, 0,
	0, 0, 0, 0, 1007, 0, 0, 209, 0, 209,
	0, 209, 1007, 0, 0, 521, 0, 1154, 0, 1445,
	0, 0, 0, 0, 0, 1007, 0, 1854, 0, 0,
	0, 0, 2134, 2134, 2134, 2134, 2134, 2134, 2134, 2134,
	2134, 2134, 2134, 2134, 2134, 2134, 2134, 2134, 2134, 2134,
	2134, 0, 2134, 0, 0, 0, 1154, 0, 0, 0,
	0, 0, 57, 0, 0, 1154, 0, 0, 568, 0,
	0, 0, 686, 0, 0, 0, 58, 0, 0, 209,
	0, 1176, 209, 0, 0, 0, 0, 0, 839, 0,
	62, 0, 0, 0, 1006, 568, 0, 0, 0, 1638,
	209, 839, 1451, 0, 0, 0, 0, 0, 0, 209,
	209, 0, 209, 0, 209, 0, 209, 0, 209, 0,
	0, 68, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1933, 1473, 1475, 1934, 0, 1935, 2821, 2822,
	0, 0, 0, 1443, 1444, 0, 209, 0, 1008, 1008,
	0, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 0, 1474, 0, 552, 75, 82, 1154, 0,
	1446, 568, 0, 0, 0, 0, 1154, 0, 0, 0,
	0, 0, 0, 0, 0, 1466, 0, 0, 2299, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1445, 1638,
	0, 0, 1666, 0, 0, 0, 0, 1465, 0, 0,
	76, 0, 0, 0, 0, 0, 0, 0, 2880, 2881,
	2882, 2883, 2884, 2885, 2886, 2887, 2888, 2889, 2890, 2891,
	2892, 2893, 2894, 2895, 2896, 2897, 2898, 0, 2902, 0,
	0, 0, 0, 0, 1006, 0, 0, 0, 0, 0,
	0, 0, 1006, 2819, 0, 0, 0, 1666, 0, 0,
	1443, 1444, 0, 0, 0, 1006, 1486, 1487, 1488, 0,
	0, 1468, 1469, 1470, 1471, 0, 0, 0, 0, 1467,
	1474, 1451, 0, 2379, 0, 0, 0, 1446, 0, 0,
	0, 0, 1492, 0, 0, 1154, 0, 2214, 1154, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1473, 1475, 0, 1445, 77, 0, 0, 1008,
	0, 0, 521, 0, 1465, 0, 0, 0, 0, 0,
	1443, 1444, 0, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 0, 0, 1666, 0, 0, 0, 147, 80,
	1474, 81, 0, 0, 521, 0, 0, 1446, 0, 0,
	1154, 209, 0, 521, 1466, 0, 209, 0, 0, 0,
	181, 1154, 0, 0, 0, 0, 0, 0, 0, 827,
	0, 0, 681, 827, 0, 1445, 117, 0, 1468, 1469,
	1470, 1471, 0, 0, 0, 0, 0, 0, 1451, 1454,
	1455, 1447, 1448, 1449, 1450, 1452, 1453, 0, 0, 183,
	0, 0, 0, 0, 0, 1194, 0, 1198, 0, 1204,
	0, 0, 1483, 0, 0, 1493, 0, 0, 0, 1473,
	1475, 0, 118, 0, 0, 0, 0, 0, 0, 0,
	1472, 0, 0, 0, 0, 151, 0, 0, 537, 0,
	0, 0, 0, 182, 0, 0, 0, 0, 1467, 0,
	0, 0, 0, 175, 0, 0, 0, 0, 1451, 1008,
	0, 176, 0, 1481, 0, 0, 0, 1008, 0, 1638,
	0, 1466, 0, 0, 0, 0, 0, 1154, 2255, 0,
	1008, 0, 150, 0, 0, 0, 209, 0, 0, 1473,
	1475, 0, 0, 1324, 0, 0, 0, 209, 0, 0,
	1327, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1638, 0, 209, 0, 0, 0,
	0, 0, 209, 2315, 0, 0, 0, 0, 0, 0,
	0, 1466, 0, 0, 0, 0, 0, 1472, 0, 0,
	0, 0, 0, 0, 1377, 0, 0, 0, 209, 0,
	1192, 0, 0, 209, 0, 1467, 0, 1456, 1454, 1455,
	1447, 1448, 1449, 1450, 1452, 1453, 0, 0, 1838, 0,
	0, 2134, 0, 0, 0, 2255, 0, 521, 0, 2370,
	0, 1484, 0, 0, 0, 209, 1154, 0, 209, 0,
	209, 0, 209, 0, 209, 209, 0, 1176, 0, 0,
	0, 1638, 0, 0, 0, 0, 2389, 686, 0, 2255,
	2255, 0, 0, 0, 2134, 0, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 1467, 1496, 1497, 1498, 1499,
	1500, 0, 0, 209, 1176, 209, 0, 0, 1192, 0,
	1192, 0, 0, 1176, 0, 1176, 0, 1176, 0, 0,
	0, 0, 0, 0, 0, 1154, 1516, 0, 0, 0,
	0, 0, 1529, 0, 1482, 0, 0, 0, 209, 209,
	1176, 209, 1485, 209, 1456, 1454, 1455, 1447, 1448, 1449,
	1450, 1452, 1453, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2705, 0, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	57, 0, 1443, 1444, 0, 2134, 0, 0, 0, 0,
	0, 0, 0, 0, 58, 0, 0, 0, 0, 0,
	0, 2737, 1474, 0, 2739, 2740, 2741, 0, 62, 1446,
	0, 0, 0, 0, 1456, 1454, 1455, 1447, 1448, 1449,
	1450, 1452, 1453, 0, 0, 0, 0, 3246, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1445, 0, 68,
	0, 0, 1154, 0, 1154, 0, 1465, 0, 0, 0,
	0, 1579, 1579, 1579, 0, 2783, 2784, 0, 57, 0,
	0, 0, 0, 0, 0, 0, 0, 1192, 0, 74,
	3272, 0, 58, 0, 1790, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 75, 82, 62, 0, 0, 0,
	0, 0, 2818, 0, 0, 0, 0, 1154, 0, 0,
	0, 0, 0, 1154, 0, 0, 0, 0, 0, 0,
	1468, 1469, 1470, 1471, 0, 0, 0, 68, 0, 0,
	1451, 827, 0, 0, 0, 0, 0, 0, 76, 1154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2542, 2543, 0, 2560, 2561, 2562, 0, 74, 0, 0,
	0, 1473, 1475, 0, 0, 209, 0, 85, 0, 3073,
	0, 0, 75, 82, 0, 0, 0, 0, 0, 0,
	209, 3350, 1154, 0, 0, 521, 0, 0, 0, 0,
	0, 0, 0, 521, 0, 0, 0, 0, 0, 0,
	521, 0, 0, 521, 521, 0, 0, 0, 1154, 209,
	0, 0, 0, 1466, 2557, 0, 76, 0, 0, 0,
	1192, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1192, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 0, 1154, 0, 0, 0,
	0, 0, 0, 2255, 2255, 209, 0, 0, 1154, 2255,
	0, 0, 2666, 0, 0, 0, 0, 0, 0, 2255,
	2666, 2255, 2666, 2666, 0, 0, 147, 80, 0, 81,
	0, 0, 0, 0, 0, 209, 209, 209, 2548, 1472,
	839, 0, 0, 0, 0, 0, 0, 0, 181, 0,
	0, 0, 0, 0, 0, 0, 209, 1467, 0, 1176,
	681, 0, 0, 0, 117, 0, 0, 0, 0, 0,
	0, 0, 77, 0, 0, 0, 0, 0, 0, 0,
	2720, 0, 0, 2722, 2255, 0, 0, 183, 0, 2563,
	0, 0, 0, 209, 0, 0, 0, 209, 0, 0,
	0, 0, 0, 0, 147, 80, 209, 81, 0, 0,
	118, 0, 1176, 0, 0, 0, 0, 0, 2255, 0,
	521, 2558, 0, 151, 0, 0, 181, 2255, 0, 0,
	0, 182, 0, 0, 0, 0, 0, 0, 681, 0,
	0, 175, 117, 0, 0, 0, 0, 0, 0, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 1838,
	0, 0, 1838, 0, 0, 183, 0, 0, 0, 0,
	150, 0, 0, 0, 0, 0, 1456, 1454, 1455, 1447,
	1448, 1449, 1450, 1452, 1453, 0, 0, 0, 118, 0,
	0, 0, 2805, 0, 0, 1176, 209, 0, 209, 0,
	0, 151, 0, 0, 3040, 3041, 3042, 0, 0, 182,
	0, 0, 0, 0, 0, 2559, 209, 0, 0, 175,
	0, 0, 0, 0, 0, 0, 0, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1154, 0, 0, 0, 839, 1318, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1955, 0,
	1960, 0, 0, 0, 0, 0, 1967, 0, 0, 0,
	0, 0, 2861, 1976, 1977, 1978, 1979, 1980, 1981, 1982,
	1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992,
	1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
	2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 0, 2016,
	0, 2018, 2019, 2020, 2021, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2554, 2555, 2556,
	0, 2045, 0, 0, 2553, 2551, 2552, 2544, 2545, 2546,
	2547, 2549, 2550, 0, 0, 0, 1516, 0, 0, 0,
	2070, 0, 0, 0, 209, 209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 521, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	521, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 0, 0,
	0, 0, 2126, 0, 2137, 2139, 2144, 0, 0, 0,
	0, 0, 0, 0, 0, 1192, 0, 0, 0, 0,
	0, 0, 0, 0, 3174, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1002, 1443, 1444, 0, 0, 0, 0,
	0, 568, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1474, 0, 0, 0, 0, 0,
	0, 1446, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 0, 0, 3005, 209,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 1445,
	0, 0, 0, 0, 0, 0, 209, 0, 1465, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2255, 209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2389, 2389, 0,
	0, 0, 0, 686, 686, 2255, 0, 0, 1838, 1838,
	0, 0, 686, 2255, 2467, 0, 0, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1468, 1469, 1470, 1471, 0, 0, 0, 0,
	0, 0, 1451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2542, 2543, 0, 2560, 2561,
	2562, 0, 0, 1473, 1475, 0, 0, 0, 0, 3090,
	0, 0, 0, 2317, 3072, 2319, 0, 0, 0, 0,
	0, 0, 0, 0, 1443, 1444, 0, 1476, 1477, 1478,
	1486, 1487, 1488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1479, 1474, 0, 0, 0, 0, 0,
	0, 1446, 0, 0, 0, 1466, 1492, 0, 0, 2557,
	0, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	0, 1192, 0, 209, 0, 0, 0, 0, 0, 1445,
	0, 0, 0, 0, 0, 0, 209, 0, 1465, 0,
	0, 0, 0, 0, 0, 1462, 0, 0, 0, 0,
	0, 0, 2255, 2255, 2255, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1192, 0, 0, 0, 0, 0,
	2255, 0, 2666, 0, 0, 1192, 1192, 209, 0, 0,
	0, 1472, 0, 2548, 0, 0, 927, 209, 209, 0,
	0, 0, 2429, 0, 0, 0, 0, 0, 0, 1467,
	2255, 0, 1468, 1469, 1470, 1471, 0, 0, 0, 0,
	0, 0, 1451, 0, 0, 3199, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 210, 0, 0, 0, 0,
	0, 0, 0, 0, 2563, 0, 1483, 0, 0, 1493,
	0, 0, 0, 1473, 1475, 210, 0, 0, 0, 0,
	1192, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1489, 0, 1490, 2558, 210, 0, 0,
	0, 0, 1460, 1461, 0, 0, 0, 2461, 2462, 0,
	0, 0, 0, 2468, 0, 0, 0, 1481, 0, 0,
	0, 0, 0, 0, 0, 1466, 0, 0, 0, 0,
	0, 0, 2482, 2483, 0, 0, 0, 0, 2070, 0,
	0, 0, 0, 1491, 0, 0, 0, 2490, 1456, 1454,
	1455, 1447, 1448, 1449, 1450, 1452, 1453, 0, 1480, 0,
	0, 0, 0, 2255, 0, 2666, 0, 0, 3266, 0,
	0, 0, 0, 2510, 0, 0, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2525, 0,
	2559, 0, 0, 0, 0, 0, 0, 0, 568, 0,
	0, 1472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3266, 0, 1467,
	0, 2255, 0, 0, 893, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 0, 0, 2144, 2144, 2144, 1192,
	0, 0, 0, 0, 0, 1484, 0, 0, 0, 0,
	0, 1579, 0, 0, 0, 0, 0, 0, 0, 2594,
	209, 209, 0, 208, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2861, 0, 0, 592, 0, 0, 521, 0, 1065, 0,
	0, 0, 0, 0, 0, 1183, 3266, 0, 0, 0,
	0, 0, 2554, 2555, 2556, 592, 0, 0, 0, 2553,
	2551, 2552, 2544, 2545, 2546, 2547, 2549, 2550, 0, 0,
	0, 0, 0, 0, 827, 0, 0, 0, 1482, 0,
	0, 1457, 1458, 1464, 1463, 1459, 1485, 827, 1456, 1454,
	1455, 1447, 1448, 1449, 1450, 1452, 1453, 0, 0, 209,
	0, 3422, 0, 0, 0, 2666, 0, 0, 0, 0,
	0, 1267, 2681, 0, 0, 0, 0, 0, 0, 1192,
	0, 1192, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1291, 1291, 1291, 1183, 0, 0, 0,
	0, 0, 0, 3421, 0, 0, 0, 1322, 1323, 1192,
	209, 0, 0, 0, 0, 0, 0, 0, 1009, 0,
	209, 2255, 0, 0, 124, 0, 0, 0, 0, 0,
	57, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 58, 119, 0, 0, 0, 0,
	0, 0, 2542, 2543, 2861, 2560, 2561, 2562, 62, 0,
	0, 0, 2755, 0, 0, 0, 0, 0, 0, 0,
	0, 2830, 0, 39, 121, 0, 0, 0, 0, 1396,
	0, 0, 0, 214, 0, 0, 0, 38, 0, 68,
	0, 0, 0, 2255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	0, 0, 0, 3266, 42, 0, 2557, 0, 0, 74,
	0, 0, 122, 0, 0, 0, 0, 0, 40, 85,
	0, 0, 0, 0, 75, 82, 0, 1192, 0, 2255,
	0, 0, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2812, 0, 0, 0, 1967,
	0, 43, 0, 0, 585, 2816, 2817, 0, 0, 2820,
	0, 0, 0, 2823, 0, 0, 0, 0, 76, 0,
	0, 0, 2827, 0, 0, 0, 0, 0, 0, 0,
	2548, 2834, 0, 0, 2594, 0, 0, 0, 0, 0,
	0, 210, 1075, 210, 210, 1075, 0, 1075, 210, 0,
	0, 0, 0, 0, 0, 2854, 210, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2870, 2871, 0, 2872, 2873, 2874,
	0, 2563, 2875, 0, 0, 0, 2877, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1075, 1075, 210,
	210, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2558, 210, 0, 0, 2905, 2906, 0,
	0, 0, 0, 0, 77, 0, 0, 0, 0, 0,
	0, 0, 44, 0, 0, 0, 210, 210, 210, 210,
	0, 1075, 1075, 0, 0, 2923, 1075, 0, 0, 1075,
	210, 210, 0, 0, 0, 47, 147, 80, 0, 81,
	0, 45, 0, 0, 0, 123, 0, 1616, 0, 0,
	0, 46, 0, 0, 0, 0, 0, 0, 181, 0,
	1625, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 0, 117, 0, 0, 0, 2952, 0,
	1075, 0, 0, 120, 0, 0, 0, 2559, 0, 0,
	0, 0, 0, 2960, 2963, 0, 0, 183, 0, 0,
	0, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 210, 0, 2981, 0, 0,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	0, 208, 208, 151, 0, 0, 208, 0, 0, 0,
	0, 182, 0, 0, 592, 0, 0, 0, 0, 0,
	0, 175, 0, 0, 0, 0, 0, 0, 0, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	150, 0, 0, 3, 1579, 0, 0, 208, 208, 0,
	0, 0, 0, 3035, 0, 0, 0, 0, 0, 2554,
	2555, 2556, 208, 1443, 1444, 0, 2553, 2551, 2552, 2544,
	2545, 2546, 2547, 2549, 2550, 0, 1443, 1444, 0, 0,
	0, 0, 0, 1474, 208, 208, 208, 208, 0, 0,
	1446, 0, 0, 0, 0, 0, 1474, 0, 208, 208,
	0, 0, 0, 1446, 3069, 3070, 0, 0, 0, 0,
	3074, 3075, 0, 0, 0, 3078, 3079, 0, 1445, 0,
	0, 0, 3083, 0, 0, 0, 0, 1465, 0, 0,
	0, 1445, 0, 0, 0, 0, 1813, 0, 0, 0,
	1465, 3087, 0, 1825, 0, 0, 0, 0, 3091, 0,
	0, 0, 0, 2542, 2543, 0, 2560, 2561, 2562, 0,
	0, 0, 1267, 0, 1844, 0, 1844, 0, 0, 0,
	208, 0, 2829, 2460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 0, 0, 0, 0,
	0, 1468, 1469, 1470, 1471, 0, 0, 0, 0, 0,
	0, 1451, 0, 0, 1468, 1469, 1470, 1471, 0, 0,
	210, 0, 0, 0, 1451, 0, 0, 2557, 0, 0,
	0, 1075, 0, 210, 210, 0, 0, 0, 0, 0,
	210, 0, 1473, 1475, 1825, 210, 0, 1889, 0, 1071,
	0, 0, 1172, 0, 1071, 1473, 1475, 1075, 0, 0,
	2963, 0, 0, 0, 0, 1903, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1913, 0, 1915, 1075, 1917,
	0, 1919, 0, 1920, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1466, 0, 0, 0, 0, 0,
	0, 2548, 0, 0, 1172, 1172, 0, 1466, 0, 0,
	0, 1937, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2963, 0, 0, 0, 1172, 1172,
	0, 0, 2563, 1172, 0, 0, 1172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3234, 3235, 3236,
	1472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1472, 2558, 0, 0, 0, 1467, 0,
	0, 0, 3244, 3245, 0, 0, 0, 0, 0, 0,
	0, 1467, 0, 1075, 210, 0, 3252, 1172, 0, 0,
	1075, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1609, 0, 1009, 0, 0, 208, 0,
	0, 0, 0, 0, 2542, 2543, 0, 2560, 2561, 2562,
	0, 208, 1609, 0, 0, 0, 0, 2963, 592, 210,
	210, 0, 0, 592, 0, 3288, 210, 0, 0, 0,
	0, 0, 0, 3294, 0, 0, 827, 0, 0, 0,
	0, 3300, 0, 0, 0, 210, 0, 210, 2559, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2963, 0, 0, 2963, 2557, 0,
	2542, 2543, 0, 2560, 2561, 2562, 0, 1456, 1454, 1455,
	1447, 1448, 1449, 1450, 1452, 1453, 2963, 2963, 0, 0,
	1456, 1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453, 0,
	0, 2199, 0, 0, 0, 1075, 0, 1075, 0, 0,
	0, 0, 0, 1075, 0, 0, 1075, 210, 0, 0,
	210, 0, 0, 0, 0, 0, 0, 0, 0, 1075,
	1075, 1075, 0, 0, 2557, 0, 0, 3362, 210, 0,
	3365, 0, 2548, 0, 0, 0, 0, 210, 210, 0,
	210, 0, 210, 0, 210, 0, 210, 0, 897, 0,
	2554, 2555, 2556, 0, 0, 0, 0, 2553, 2551, 2552,
	2544, 2545, 2546, 2547, 2549, 2550, 0, 0, 0, 0,
	0, 0, 592, 0, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 2563, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2548, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2558, 0, 208, 208, 0,
	0, 0, 1075, 0, 208, 2564, 0, 0, 0, 0,
	0, 0, 0, 827, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 208, 0, 208, 1071, 2563,
	0, 0, 0, 0, 0, 0, 0, 585, 0, 0,
	0, 1183, 585, 0, 0, 0, 3469, 3469, 3469, 0,
	0, 0, 0, 0, 1172, 0, 0, 0, 0, 0,
	0, 2558, 0, 0, 0, 3488, 0, 0, 0, 0,
	0, 0, 0, 2333, 0, 1071, 0, 0, 1825, 0,
	0, 0, 0, 0, 0, 0, 2963, 1075, 2963, 2559,
	0, 0, 0, 0, 0, 208, 0, 0, 208, 0,
	0, 0, 3469, 0, 0, 0, 0, 0, 0, 0,
	2372, 0, 0, 1291, 0, 1291, 208, 1291, 0, 1183,
	1183, 0, 0, 0, 0, 592, 208, 0, 208, 0,
	208, 0, 208, 0, 208, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2415, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2559, 0, 0, 2420, 0,
	1183, 1075, 208, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 0, 0, 1075, 0, 0,
	0, 0, 0, 0, 0, 3469, 0, 0, 0, 0,
	0, 0, 0, 2440, 1183, 0, 2443, 0, 0, 0,
	1172, 2554, 2555, 2556, 0, 0, 0, 1071, 2553, 2551,
	2552, 2544, 2545, 2546, 2547, 2549, 2550, 0, 0, 0,
	0, 0, 0, 2458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1075, 0, 0, 2554, 2555, 2556,
	0, 0, 0, 0, 2553, 2551, 2552, 2544, 2545, 2546,
	2547, 2549, 2550, 0, 0, 0, 0, 0, 0, 0,
	0, 1075, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 210, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 210, 0,
	0, 1075, 1172, 0, 1172, 0, 0, 0, 0, 0,
	1172, 0, 0, 1172, 210, 1075, 0, 0, 1075, 0,
	210, 0, 0, 1009, 0, 0, 1172, 1172, 1172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 585, 0, 210, 1009, 0, 0,
	0, 210, 208, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 210, 0, 0, 210, 0, 210, 0,
	210, 0, 210, 210, 0, 0, 1075, 1075, 1075, 0,
	1075, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1071,
	0, 210, 0, 210, 862, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 210, 0, 210,
	2658, 210, 0, 0, 1072, 0, 0, 1173, 0, 1072,
	0, 0, 208, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 210, 0, 0, 0,
	2694, 2696, 2333, 0, 0, 0, 208, 0, 0, 0,
	87, 0, 0, 0, 1071, 0, 0, 0, 0, 0,
	0, 0, 208, 0, 0, 0, 0, 0, 592, 1173,
	1173, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 208, 0, 0, 0, 2734, 208,
	0, 0, 2738, 0, 0, 0, 0, 0, 0, 0,
	0, 2745, 0, 1173, 1173, 0, 802, 0, 1173, 0,
	0, 1173, 0, 0, 0, 822, 0, 0, 1071, 0,
	0, 208, 0, 0, 208, 0, 208, 668, 208, 0,
	208, 208, 0, 0, 1071, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 997, 0,
	650, 0, 0, 2787, 0, 0, 208, 0, 0, 0,
	0, 0, 1173, 0, 0, 0, 0, 0, 0, 208,
	0, 208, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 651, 0, 0, 0, 0, 0, 0,
	0, 2808, 652, 1183, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 208, 208, 0, 208, 653, 208,
	0, 2814, 608, 0, 1075, 0, 0, 0, 0, 0,
	0, 1172, 0, 0, 673, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 208, 609, 0, 0, 0, 654,
	0, 0, 0, 0, 0, 0, 0, 0, 1071, 0,
	0, 0, 0, 1075, 0, 0, 0, 0, 655, 0,
	0, 0, 1075, 0, 0, 0, 0, 0, 610, 629,
	0, 0, 0, 0, 0, 0, 0, 0, 656, 0,
	0, 657, 0, 0, 0, 0, 0, 0, 1172, 0,
	611, 0, 0, 612, 0, 0, 0, 0, 0, 0,
	0, 0, 1071, 210, 0, 1172, 0, 672, 0, 635,
	0, 0, 0, 0, 0, 613, 0, 0, 0, 0,
	0, 0, 0, 0, 633, 0, 0, 0, 0, 0,
	0, 0, 0, 210, 210, 210, 0, 0, 0, 0,
	0, 0, 210, 614, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 1075, 0, 0, 0, 0,
	0, 0, 0, 615, 0, 1075, 616, 639, 0, 0,
	0, 642, 0, 1075, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1172, 1172, 1172, 0, 1172, 0, 0,
	0, 210, 0, 0, 1075, 210, 0, 1075, 1075, 1075,
	659, 0, 0, 0, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 676, 660, 0,
	0, 1009, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1009, 638, 0, 0,
	0, 0, 0, 1072, 619, 675, 0, 0, 1075, 1075,
	0, 0, 661, 0, 0, 662, 210, 0, 0, 0,
	0, 670, 0, 0, 0, 1609, 0, 1075, 663, 1173,
	0, 0, 0, 0, 0, 617, 0, 0, 0, 0,
	0, 0, 0, 0, 3006, 620, 0, 0, 0, 0,
	1072, 0, 1075, 0, 210, 1075, 210, 0, 664, 671,
	0, 3018, 0, 621, 0, 0, 665, 0, 0, 0,
	0, 208, 0, 0, 210, 0, 0, 0, 0, 667,
	0, 0, 0, 0, 666, 0, 0, 0, 0, 0,
	641, 0, 0, 0, 0, 0, 674, 0, 0, 0,
	622, 208, 208, 208, 0, 0, 0, 669, 0, 0,
	1609, 0, 0, 623, 0, 0, 3058, 1075, 0, 0,
	0, 0, 208, 0, 0, 87, 0, 87, 1075, 87,
	0, 628, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 624, 0, 0, 637, 0, 636, 0,
	0, 625, 0, 0, 0, 0, 0, 0, 0, 208,
	0, 0, 0, 208, 626, 0, 0, 0, 0, 632,
	0, 0, 208, 0, 643, 1173, 640, 0, 0, 0,
	0, 630, 1072, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 822, 87, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 208, 0, 0, 0, 0, 0,
	0, 1071, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1075, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 208, 0, 208, 0, 0, 0, 0, 0,
	1071, 0, 87, 0, 0, 0, 0, 0, 0, 1071,
	0, 0, 208, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3166, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2333, 0, 0, 0, 0, 1173, 0, 1173,
	0, 0, 0, 0, 0, 1173, 0, 0, 1173, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1173, 1173, 1173, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 210, 210, 802,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1075, 210, 0, 0, 1506, 1075, 0,
	0, 0, 1172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1071, 0, 0, 1515, 0, 0, 0, 1521,
	1071, 0, 0, 0, 0, 0, 0, 1075, 1075, 1075,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1172, 0, 1075, 1172, 1172, 1172, 0, 0, 210,
	1009, 1009, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1075, 0, 1072, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3273, 0, 0, 0, 1172, 1172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1071,
	0, 0, 1071, 0, 3318, 0, 0, 0, 0, 1072,
	87, 0, 0, 1607, 0, 1610, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3343, 1183, 0, 0, 1075,
	0, 1075, 0, 0, 0, 208, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 208, 0, 1071, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1071, 0, 0, 0, 0,
	0, 1009, 0, 1072, 0, 210, 0, 0, 0, 0,
	0, 0, 0, 0, 1075, 210, 210, 1075, 0, 1072,
	1075, 0, 1075, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 208, 0, 0,
	0, 0, 0, 0, 3392, 0, 1075, 0, 0, 1075,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1075,
	0, 0, 0, 0, 0, 3427, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3442, 1173, 0, 0, 0,
	0, 1071, 0, 0, 0, 1075, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1072, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1009, 0, 1075, 0, 0, 0, 0, 0, 1009,
	0, 0, 0, 0, 0, 1075, 0, 0, 0, 0,
	0, 0, 1609, 1173, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1072, 0, 0,
	1173, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 208, 0, 0, 210, 0, 0,
	1071, 0, 1075, 0, 0, 1172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 822, 0, 0, 0, 0, 210, 210,
	0, 0, 0, 0, 1172, 1172, 1172, 0, 1173, 1173,
	1173, 0, 1173, 0, 0, 0, 0, 0, 0, 0,
	1172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1071,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1443, 1444, 0, 1476, 1477, 1478, 1486, 1487,
	1488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1479, 1474, 0, 0, 0, 0, 210, 1075, 1446,
	0, 0, 0, 0, 1492, 0, 0, 1075, 1075, 0,
	0, 0, 0, 1075, 0, 0, 0, 0, 0, 0,
	802, 0, 0, 802, 802, 0, 0, 1445, 0, 0,
	0, 0, 208, 0, 0, 0, 1465, 0, 0, 0,
	0, 0, 0, 1462, 0, 0, 0, 0, 210, 0,
	1075, 0, 0, 0, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 0, 0, 0, 1071, 0, 1071, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2034, 0,
	0, 0, 0, 0, 0, 208, 0, 0, 0, 0,
	0, 0, 822, 0, 0, 0, 0, 0, 0, 0,
	1468, 1469, 1470, 1471, 0, 1515, 0, 0, 0, 1515,
	1451, 0, 0, 0, 0, 0, 208, 208, 0, 0,
	0, 1071, 0, 0, 1172, 0, 0, 1071, 0, 1172,
	0, 0, 0, 0, 1483, 0, 0, 1493, 0, 0,
	0, 1473, 1475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1071, 0, 0, 1172, 0, 0, 0,
	0, 1489, 0, 1490, 0, 0, 0, 0, 0, 0,
	1460, 1461, 0, 997, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1481, 0, 0, 0, 0,
	0, 0, 0, 1466, 0, 0, 1071, 1610, 0, 0,
	0, 0, 0, 0, 0, 208, 1072, 0, 0, 0,
	0, 1491, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 1071, 0, 0, 0, 1480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1072, 0, 0, 0, 0,
	0, 0, 0, 0, 1072, 0, 208, 0, 0, 0,
	1071, 0, 0, 0, 0, 0, 208, 0, 0, 1472,
	0, 0, 1071, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1467, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1443, 1444, 0, 1476, 1477, 1478, 1486,
	1487, 1488, 0, 0, 0, 87, 0, 0, 0, 1172,
	0, 0, 1479, 1474, 0, 0, 0, 1173, 0, 0,
	1446, 0, 0, 0, 0, 1492, 0, 1072, 0, 0,
	0, 0, 0, 0, 0, 1072, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1445, 0,
	0, 0, 0, 87, 0, 87, 1173, 1465, 0, 1173,
	1173, 1173, 0, 0, 1462, 0, 1482, 0, 0, 1457,
	1458, 1464, 1463, 1459, 1485, 0, 1456, 1454, 1455, 1447,
	1448, 1449, 1450, 1452, 1453, 0, 0, 0, 0, 2530,
	0, 0, 0, 2531, 0, 0, 0, 0, 87, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1173, 1173, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1468, 1469, 1470, 1471, 1172, 0, 87, 0, 1173,
	0, 1451, 0, 0, 1172, 1172, 0, 0, 0, 0,
	1172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1072, 1483, 0, 1072, 1493, 0,
	0, 0, 1473, 1475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1071, 0, 0,
	87, 0, 1489, 0, 1490, 0, 0, 0, 0, 0,
	0, 1460, 1461, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1481, 0, 0, 0,
	0, 0, 0, 0, 1466, 0, 0, 0, 0, 1072,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1072, 0, 1491, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1480, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2034, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1472, 1515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1443, 1444, 0, 1476, 1477, 1478, 1486, 1487, 1488, 0,
	0, 0, 0, 0, 1484, 0, 0, 0, 0, 1479,
	1474, 0, 0, 0, 0, 0, 1072, 1446, 0, 0,
	0, 0, 1492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1445, 0, 0, 0, 0,
	0, 0, 0, 0, 1465, 0, 0, 0, 0, 0,
	0, 1462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 997, 0, 0, 0, 0, 0, 1482, 0, 0,
	1457, 1458, 1464, 1463, 1459, 1485, 997, 1456, 1454, 1455,
	1447, 1448, 1449, 1450, 1452, 1453, 0, 0, 0, 0,
	2066, 0, 0, 0, 2067, 0, 0, 0, 1468, 1469,
	1470, 1471, 0, 0, 0, 0, 0, 0, 1451, 0,
	0, 0, 0, 0, 0, 1072, 0, 0, 0, 0,
	1173, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1483, 0, 0, 1493, 0, 0, 0, 1473,
	1475, 0, 0, 0, 0, 0, 0, 0, 0, 1173,
	1173, 1173, 0, 0, 0, 0, 0, 0, 0, 1489,
	0, 1490, 0, 0, 0, 1173, 0, 0, 1460, 1461,
	0, 0, 0, 0, 87, 87, 0, 0, 87, 0,
	0, 0, 0, 1481, 1072, 0, 0, 0, 0, 0,
	0, 1466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 87, 1491,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1480, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 822, 0, 0, 1472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1467, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1072, 0, 1072, 0, 0, 0, 0, 0, 0,
	0, 1484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1443, 1444, 0, 1476, 1477, 1478, 1486, 1487, 1488,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1479, 1474, 0, 0, 0, 0, 0, 0, 1446, 0,
	0, 0, 0, 1492, 0, 0, 1072, 0, 0, 1173,
	0, 0, 1072, 0, 1173, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1445, 0, 0, 0,
	0, 0, 0, 0, 0, 1465, 0, 0, 1072, 0,
	0, 1173, 1462, 0, 1482, 0, 0, 1457, 1458, 1464,
	1463, 1459, 1485, 0, 1456, 1454, 1455, 1447, 1448, 1449,
	1450, 1452, 1453, 0, 0, 0, 0, 0, 0, 0,
	0, 3096, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1072, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1468,
	1469, 1470, 1471, 0, 0, 0, 0, 1072, 0, 1451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 1493, 87, 0, 0,
	1473, 1475, 0, 0, 0, 1072, 0, 0, 0, 0,
	997, 997, 0, 0, 0, 0, 0, 1072, 0, 0,
	1489, 0, 1490, 0, 0, 0, 0, 0, 0, 1460,
	1461, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1481, 0, 0, 0, 0, 0,
	0, 0, 1466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1491, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1173, 1480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1443, 1444, 0, 1476, 1477,
	1478, 1486, 1487, 1488, 0, 0, 0, 0, 1472, 0,
	0, 0, 0, 0, 1479, 1474, 0, 0, 0, 0,
	0, 0, 1446, 0, 0, 0, 1467, 1492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1445, 0, 1484, 0, 0, 0, 0, 0, 0, 1465,
	0, 997, 0, 0, 0, 0, 1462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1173, 0, 0, 0, 0, 0, 0, 0, 0, 1173,
	1173, 0, 0, 0, 87, 1173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1468, 1469, 1470, 1471, 0, 0, 0,
	0, 0, 1072, 1451, 0, 1482, 0, 0, 1457, 1458,
	1464, 1463, 1459, 1485, 0, 1456, 1454, 1455, 1447, 1448,
	1449, 1450, 1452, 1453, 0, 0, 0, 1483, 0, 0,
	1493, 0, 2832, 0, 1473, 1475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1489, 0, 1490, 0, 0, 0,
	0, 0, 0, 1460, 1461, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1481, 0,
	0, 997, 0, 0, 0, 0, 1466, 0, 0, 997,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1491, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1480,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1472, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	1467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1482,
	0, 0, 1457, 1458, 1464, 1463, 1459, 1485, 0, 1456,
	1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453, 0, 0,
	0, 0, 0, 0, 0, 0, 2533, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1069, 0, 0, 0, 0, 2034,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 1076, 223, 1077, 1078,
	1079, 0, 1080, 472, 1081, 1082, 1083, 1084, 224, 226,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	1085, 232, 233, 234, 235, 236, 237, 1086, 1087, 238,
	477, 478, 479, 1088, 239, 480, 1089, 1074, 1090, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	1091, 250, 0, 251, 252, 253, 1092, 948, 254, 255,
	1093, 1094, 1096, 1095, 1097, 1098, 1099, 256, 257, 258,
	259, 260, 261, 481, 482, 1100, 262, 1101, 264, 263,
	1102, 265, 1103, 1104, 266, 267, 268, 1105, 269, 1106,
	270, 271, 1107, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 484, 485, 1108, 215, 1109, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 1110, 289, 1111, 1112, 949, 290, 291, 1113, 292,
	487, 1114, 488, 293, 1115, 294, 295, 296, 297, 489,
	490, 491, 345, 951, 298, 299, 1116, 300, 301, 303,
	0, 87, 216, 302, 304, 311, 1117, 950, 305, 492,
	307, 306, 308, 309, 310, 493, 1118, 494, 1119, 312,
	952, 495, 953, 313, 314, 315, 954, 316, 317, 0,
	0, 318, 319, 320, 321, 1120, 323, 322, 1121, 324,
	496, 955, 325, 326, 956, 1122, 327, 328, 1123, 1124,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 338, 957, 341, 342, 344, 343, 1125, 217,
	958, 1126, 497, 498, 346, 347, 1127, 348, 349, 350,
	1128, 1129, 352, 353, 354, 1130, 1131, 355, 356, 499,
	959, 357, 960, 500, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 1132, 366, 367, 501, 368, 502, 369,
	1133, 370, 0, 371, 372, 373, 374, 375, 376, 503,
	377, 378, 1134, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 1135, 392, 961,
	393, 394, 395, 396, 504, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 1136, 415, 416, 409, 411,
	412, 413, 410, 414, 417, 418, 1137, 419, 399, 400,
	420, 421, 962, 422, 505, 423, 424, 1138, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 506,
	1139, 436, 437, 435, 1140, 438, 439, 440, 441, 442,
	277, 443, 1141, 444, 507, 508, 509, 510, 1142, 451,
	1143, 445, 446, 511, 447, 512, 1144, 448, 449, 450,
	0, 452, 453, 1145, 1146, 454, 455, 456, 457, 458,
	460, 1147, 461, 1148, 459, 462, 463, 464, 513, 514,
	515, 1149, 466, 465, 516, 1150, 1151, 1152, 1153, 467,
	468, 517, 469, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1069, 0, 0,
	0, 0, 0, 0, 0, 2186, 0, 0, 0, 0,
	0, 0, 0, 2187, 218, 219, 220, 221, 222, 1076,
	223, 1077, 1078, 1079, 0, 1080, 472, 1081, 1082, 1083,
	1084, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 1085, 232, 233, 234, 235, 236, 237,
	1086, 1087, 238, 477, 478, 479, 1088, 239, 480, 1089,
	1074, 1090, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 1091, 250, 0, 251, 252, 253, 1092,
	948, 254, 255, 1093, 1094, 1096, 1095, 1097, 1098, 1099,
	256, 257, 258, 259, 260, 261, 481, 482, 1100, 262,
	1101, 264, 263, 1102, 265, 1103, 1104, 266, 267, 268,
	1105, 269, 1106, 270, 271, 1107, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 1108,
	215, 1109, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 1110, 289, 1111, 1112, 949, 290,
	291, 1113, 292, 487, 1114, 488, 293, 1115, 294, 295,
	296, 297, 489, 490, 491, 345, 951, 298, 299, 1116,
	300, 301, 303, 0, 0, 216, 302, 304, 311, 1117,
	950, 305, 492, 307, 306, 308, 309, 310, 493, 1118,
	494, 1119, 312, 952, 495, 953, 313, 314, 315, 954,
	316, 317, 0, 0, 318, 319, 320, 321, 1120, 323,
	322, 1121, 324, 496, 955, 325, 326, 956, 1122, 327,
	328, 1123, 1124, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 957, 341, 342, 344,
	343, 1125, 217, 958, 1126, 497, 498, 346, 347, 1127,
	348, 349, 350, 1128, 1129, 352, 353, 354, 1130, 1131,
	355, 356, 499, 959, 357, 960, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 1132, 366, 367, 501,
	368, 502, 369, 1133, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 1134, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	1135, 392, 961, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 1136, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 1137,
	419, 399, 400, 420, 421, 962, 422, 505, 423, 424,
	1138, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 1139, 436, 437, 435, 1140, 438, 439,
	440, 441, 442, 277, 443, 1141, 444, 507, 508, 509,
	510, 1142, 451, 1143, 445, 446, 511, 447, 512, 1144,
	448, 449, 450, 0, 452, 453, 1145, 1146, 454, 455,
	456, 457, 458, 460, 1147, 461, 1148, 459, 462, 463,
	464, 513, 514, 515, 1149, 466, 465, 516, 1150, 1151,
	1152, 1153, 467, 468, 517, 469, 470, 471, 0, 0,
	0, 0, 1069, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3122, 218,
	219, 220, 221, 222, 1076, 223, 1077, 1078, 1079, 0,
	1080, 472, 1081, 1082, 1083, 1084, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 1085, 232,
	233, 234, 235, 236, 237, 1086, 1087, 238, 477, 478,
	479, 1088, 239, 480, 1089, 1074, 1090, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 1091, 250,
	0, 251, 252, 253, 1092, 948, 254, 255, 1093, 1094,
	1096, 1095, 1097, 1098, 1099, 256, 257, 258, 259, 260,
	261, 481, 482, 1100, 262, 1101, 264, 263, 1102, 265,
	1103, 1104, 266, 267, 268, 1105, 269, 1106, 270, 271,
	1107, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 1108, 215, 1109, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 1110,
	289, 1111, 1112, 949, 290, 291, 1113, 292, 487, 1114,
	488, 293, 1115, 294, 295, 296, 297, 489, 490, 491,
	345, 951, 298, 299, 1116, 300, 301, 303, 0, 0,
	216, 302, 304, 311, 1117, 950, 305, 492, 307, 306,
	308, 309, 310, 493, 1118, 494, 1119, 312, 952, 495,
	953, 313, 314, 315, 954, 316, 317, 0, 0, 318,
	319, 320, 321, 1120, 323, 322, 1121, 324, 496, 955,
	325, 326, 956, 1122, 327, 328, 1123, 1124, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 957, 341, 342, 344, 343, 1125, 217, 958, 1126,
	497, 498, 346, 347, 1127, 348, 349, 350, 1128, 1129,
	352, 353, 354, 1130, 1131, 355, 356, 499, 959, 357,
	960, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 1132, 366, 367, 501, 368, 502, 369, 1133, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	1134, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 1135, 392, 961, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 1136, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 1137, 419, 399, 400, 420, 421,
	962, 422, 505, 423, 424, 1138, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 1139, 436,
	437, 435, 1140, 438, 439, 440, 441, 442, 277, 443,
	1141, 444, 507, 508, 509, 510, 1142, 451, 1143, 445,
	446, 511, 447, 512, 1144, 448, 449, 450, 0, 452,
	453, 1145, 1146, 454, 455, 456, 457, 458, 460, 1147,
	461, 1148, 459, 462, 463, 464, 513, 514, 515, 1149,
	466, 465, 516, 1150, 1151, 1152, 1153, 467, 468, 517,
	469, 470, 471, 1069, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3240, 0,
	218, 219, 220, 221, 222, 1076, 223, 1077, 1078, 1079,
	0, 1080, 472, 1081, 1082, 1083, 1084, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 1085,
	232, 233, 234, 235, 236, 237, 1086, 1087, 238, 477,
	478, 479, 1088, 239, 480, 1089, 1074, 1090, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 1091,
	250, 0, 251, 252, 253, 1092, 948, 254, 255, 1093,
	1094, 1096, 1095, 1097, 1098, 1099, 256, 257, 258, 259,
	260, 261, 481, 482, 1100, 262, 1101, 264, 263, 1102,
	265, 1103, 1104, 266, 267, 268, 1105, 269, 1106, 270,
	271, 1107, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 1108, 215, 1109, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	1110, 289, 1111, 1112, 949, 290, 291, 1113, 292, 487,
	1114, 488, 293, 1115, 294, 295, 296, 297, 489, 490,
	491, 345, 951, 298, 299, 1116, 300, 301, 303, 0,
	0, 216, 302, 304, 311, 1117, 950, 305, 492, 307,
	306, 308, 309, 310, 493, 1118, 494, 1119, 312, 952,
	495, 953, 313, 314, 315, 954, 316, 317, 0, 0,
	318, 319, 320, 321, 1120, 323, 322, 1121, 324, 496,
	955, 325, 326, 956, 1122, 327, 328, 1123, 1124, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 957, 341, 342, 344, 343, 1125, 217, 958,
	1126, 497, 498, 346, 347, 1127, 348, 349, 350, 1128,
	1129, 352, 353, 354, 1130, 1131, 355, 356, 499, 959,
	357, 960, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 1132, 366, 367, 501, 368, 502, 369, 1133,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 1134, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 1135, 392, 961, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 1136, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 1137, 419, 399, 400, 420,
	421, 962, 422, 505, 423, 424, 1138, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 1139,
	436, 437, 435, 1140, 438, 439, 440, 441, 442, 277,
	443, 1141, 444, 507, 508, 509, 510, 1142, 451, 1143,
	445, 446, 511, 447, 512, 1144, 448, 449, 450, 0,
	452, 453, 1145, 1146, 454, 455, 456, 457, 458, 460,
	1147, 461, 1148, 459, 462, 463, 464, 513, 514, 515,
	1149, 466, 465, 516, 1150, 1151, 1152, 1153, 467, 468,
	517, 469, 470, 471, 1069, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3171,
	0, 218, 219, 220, 221, 222, 1076, 223, 1077, 1078,
	1079, 0, 1080, 472, 1081, 1082, 1083, 1084, 224, 226,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	1085, 232, 233, 234, 235, 236, 237, 1086, 1087, 238,
	477, 478, 479, 1088, 239, 480, 1089, 1074, 1090, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	1091, 250, 0, 251, 252, 253, 1092, 948, 254, 255,
	1093, 1094, 1096, 1095, 1097, 1098, 1099, 256, 257, 258,
	259, 260, 261, 481, 482, 1100, 262, 1101, 264, 263,
	1102, 265, 1103, 1104, 266, 267, 268, 1105, 269, 1106,
	270, 271, 1107, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 484, 485, 1108, 215, 1109, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 1110, 289, 1111, 1112, 949, 290, 291, 1113, 292,
	487, 1114, 488, 293, 1115, 294, 295, 296, 297, 489,
	490, 491, 345, 951, 298, 299, 1116, 300, 301, 303,
	0, 0, 216, 302, 304, 311, 1117, 950, 305, 492,
	307, 306, 308, 309, 310, 493, 1118, 494, 1119, 312,
	952, 495, 953, 313, 314, 315, 954, 316, 317, 0,
	0, 318, 319, 320, 321, 1120, 323, 322, 1121, 324,
	496, 955, 325, 326, 956, 1122, 327, 328, 1123, 1124,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 338, 957, 341, 342, 344, 343, 1125, 217,
	958, 1126, 497, 498, 346, 347, 1127, 348, 349, 350,
	1128, 1129, 352, 353, 354, 1130, 1131, 355, 356, 499,
	959, 357, 960, 500, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 1132, 366, 367, 501, 368, 502, 369,
	1133, 370, 0, 371, 372, 373, 374, 375, 376, 503,
	377, 378, 1134, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 1135, 392, 961,
	393, 394, 395, 396, 504, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 1136, 415, 416, 409, 411,
	412, 413, 410, 414, 417, 418, 1137, 419, 399, 400,
	420, 421, 962, 422, 505, 423, 424, 1138, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 506,
	1139, 436, 437, 435, 1140, 438, 439, 440, 441, 442,
	277, 443, 1141, 444, 507, 508, 509, 510, 1142, 451,
	1143, 445, 446, 511, 447, 512, 1144, 448, 449, 450,
	0, 452, 453, 1145, 1146, 454, 455, 456, 457, 458,
	460, 1147, 461, 1148, 459, 462, 463, 464, 513, 514,
	515, 1149, 466, 465, 516, 1150, 1151, 1152, 1153, 467,
	468, 517, 469, 470, 471, 1069, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2857, 0, 218, 219, 220, 221, 222, 1076, 223, 1077,
	1078, 1079, 0, 1080, 472, 1081, 1082, 1083, 1084, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 1085, 232, 233, 234, 235, 236, 237, 1086, 1087,
	238, 477, 478, 479, 1088, 239, 480, 1089, 1074, 1090,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 1091, 250, 0, 251, 252, 253, 1092, 948, 254,
	255, 1093, 1094, 1096, 1095, 1097, 1098, 1099, 256, 257,
	258, 259, 260, 261, 481, 482, 1100, 262, 1101, 264,
	263, 1102, 265, 1103, 1104, 266, 267, 268, 1105, 269,
	1106, 270, 271, 1107, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 1108, 215, 1109,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 1110, 289, 1111, 1112, 949, 290, 291, 1113,
	292, 487, 1114, 488, 293, 1115, 294, 295, 296, 297,
	489, 490, 491, 345, 951, 298, 299, 1116, 300, 301,
	303, 0, 0, 216, 302, 304, 311, 1117, 950, 305,
	492, 307, 306, 308, 309, 310, 493, 1118, 494, 1119,
	312, 952, 495, 953, 313, 314, 315, 954, 316, 317,
	0, 0, 318, 319, 320, 321, 1120, 323, 322, 1121,
	324, 496, 955, 325, 326, 956, 1122, 327, 328, 1123,
	1124, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 957, 341, 342, 344, 343, 1125,
	217, 958, 1126, 497, 498, 346, 347, 1127, 348, 349,
	350, 1128, 1129, 352, 353, 354, 1130, 1131, 355, 356,
	499, 959, 357, 960, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 1132, 366, 367, 501, 368, 502,
	369, 1133, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 1134, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 1135, 392,
	961, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 1136, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 1137, 419, 399,
	400, 420, 421, 962, 422, 505, 423, 424, 1138, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 1139, 436, 437, 435, 1140, 438, 439, 440, 441,
	442, 277, 443, 1141, 444, 507, 508, 509, 510, 1142,
	451, 1143, 445, 446, 511, 447, 512, 1144, 448, 449,
	450, 0, 452, 453, 1145, 1146, 454, 455, 456, 457,
	458, 460, 1147, 461, 1148, 459, 462, 463, 464, 513,
	514, 515, 1149, 466, 465, 516, 1150, 1151, 1152, 1153,
	467, 468, 517, 469, 470, 471, 1069, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2849, 0, 218, 219, 220, 221, 222, 1076, 223,
	1077, 1078, 1079, 0, 1080, 472, 1081, 1082, 1083, 1084,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 1085, 232, 233, 234, 235, 236, 237, 1086,
	1087, 238, 477, 478, 479, 1088, 239, 480, 1089, 1074,
	1090, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 1091, 250, 0, 251, 252, 253, 1092, 948,
	254, 255, 1093, 1094, 1096, 1095, 1097, 1098, 1099, 256,
	257, 258, 259, 260, 261, 481, 482, 1100, 262, 1101,
	264, 263, 1102, 265, 1103, 1104, 266, 267, 268, 1105,
	269, 1106, 270, 271, 1107, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 1108, 215,
	1109, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 1110, 289, 1111, 1112, 949, 290, 291,
	1113, 292, 487, 1114, 488, 293, 1115, 294, 295, 296,
	297, 489, 490, 491, 345, 951, 298, 299, 1116, 300,
	301, 303, 0, 0, 216, 302, 304, 311, 1117, 950,
	305, 492, 307, 306, 308, 309, 310, 493, 1118, 494,
	1119, 312, 952, 495, 953, 313, 314, 315, 954, 316,
	317, 0, 0, 318, 319, 320, 321, 1120, 323, 322,
	1121, 324, 496, 955, 325, 326, 956, 1122, 327, 328,
	1123, 1124, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 957, 341, 342, 344, 343,
	1125, 217, 958, 1126, 497, 498, 346, 347, 1127, 348,
	349, 350, 1128, 1129, 352, 353, 354, 1130, 1131, 355,
	356, 499, 959, 357, 960, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 1132, 366, 367, 501, 368,
	502, 369, 1133, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 1134, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 1135,
	392, 961, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 1136, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 1137, 419,
	399, 400, 420, 421, 962, 422, 505, 423, 424, 1138,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 1139, 436, 437, 435, 1140, 438, 439, 440,
	441, 442, 277, 443, 1141, 444, 507, 508, 509, 510,
	1142, 451, 1143, 445, 446, 511, 447, 512, 1144, 448,
	449, 450, 0, 452, 453, 1145, 1146, 454, 455, 456,
	457, 458, 460, 1147, 461, 1148, 459, 462, 463, 464,
	513, 514, 515, 1149, 466, 465, 516, 1150, 1151, 1152,
	1153, 467, 468, 517, 469, 470, 471, 1069, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2719, 0, 218, 219, 220, 221, 222, 1076,
	223, 1077, 1078, 1079, 0, 1080, 472, 1081, 1082, 1083,
	1084, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 1085, 232, 233, 234, 235, 236, 237,
	1086, 1087, 238, 477, 478, 479, 1088, 239, 480, 1089,
	1074, 1090, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 1091, 250, 0, 251, 252, 253, 1092,
	948, 254, 255, 1093, 1094, 1096, 1095, 1097, 1098, 1099,
	256, 257, 258, 259, 260, 261, 481, 482, 1100, 262,
	1101, 264, 263, 1102, 265, 1103, 1104, 266, 267, 268,
	1105, 269, 1106, 270, 271, 1107, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 1108,
	215, 1109, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 1110, 289, 1111, 1112, 949, 290,
	291, 1113, 292, 487, 1114, 488, 293, 1115, 294, 295,
	296, 297, 489, 490, 491, 345, 951, 298, 299, 1116,
	300, 301, 303, 0, 0, 216, 302, 304, 311, 1117,
	950, 305, 492, 307, 306, 308, 309, 310, 493, 1118,
	494, 1119, 312, 952, 495, 953, 313, 314, 315, 954,
	316, 317, 0, 0, 318, 319, 320, 321, 1120, 323,
	322, 1121, 324, 496, 955, 325, 326, 956, 1122, 327,
	328, 1123, 1124, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 957, 341, 342, 344,
	343, 1125, 217, 958, 1126, 497, 498, 346, 347, 1127,
	348, 349, 350, 1128, 1129, 352, 353, 354, 1130, 1131,
	355, 356, 499, 959, 357, 960, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 1132, 366, 367, 501,
	368, 502, 369, 1133, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 1134, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	1135, 392, 961, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 1136, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 1137,
	419, 399, 400, 420, 421, 962, 422, 505, 423, 424,
	1138, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 1139, 436, 437, 435, 1140, 438, 439,
	440, 441, 442, 277, 443, 1141, 444, 507, 508, 509,
	510, 1142, 451, 1143, 445, 446, 511, 447, 512, 1144,
	448, 449, 450, 0, 452, 453, 1145, 1146, 454, 455,
	456, 457, 458, 460, 1147, 461, 1148, 459, 462, 463,
	464, 513, 514, 515, 1149, 466, 465, 516, 1150, 1151,
	1152, 1153, 467, 468, 517, 469, 470, 471, 1069, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2079, 0, 218, 219, 220, 221, 222,
	1076, 223, 1077, 1078, 1079, 0, 1080, 472, 1081, 1082,
	1083, 1084, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 1085, 232, 233, 234, 235, 236,
	237, 1086, 1087, 238, 477, 478, 479, 1088, 239, 480,
	1089, 1074, 1090, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 1091, 250, 0, 251, 252, 253,
	1092, 948, 254, 255, 1093, 1094, 1096, 1095, 1097, 1098,
	1099, 256, 257, 258, 259, 260, 261, 481, 482, 1100,
	262, 1101, 264, 263, 1102, 265, 1103, 1104, 266, 267,
	268, 1105, 269, 1106, 270, 271, 1107, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	1108, 215, 1109, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 1110, 289, 1111, 1112, 949,
	290, 291, 1113, 292, 487, 1114, 488, 293, 1115, 294,
	295, 296, 297, 489, 490, 491, 345, 951, 298, 299,
	1116, 300, 301, 303, 0, 0, 216, 302, 304, 311,
	1117, 950, 305, 492, 307, 306, 308, 309, 310, 493,
	1118, 494, 1119, 312, 952, 495, 953, 313, 314, 315,
	954, 316, 317, 0, 0, 318, 319, 320, 321, 1120,
	323, 322, 1121, 324, 496, 955, 325, 326, 956, 1122,
	327, 328, 1123, 1124, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 957, 341, 342,
	344, 343, 1125, 217, 958, 1126, 497, 498, 346, 347,
	1127, 348, 349, 350, 1128, 1129, 352, 353, 354, 1130,
	1131, 355, 356, 499, 959, 357, 960, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 1132, 366, 367,
	501, 368, 502, 369, 1133, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 1134, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 1135, 392, 961, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 1136,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	1137, 419, 399, 400, 420, 421, 962, 422, 505, 423,
	424, 1138, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 1139, 436, 437, 435, 1140, 438,
	439, 440, 441, 442, 277, 443, 1141, 444, 507, 508,
	509, 510, 1142, 451, 1143, 445, 446, 511, 447, 512,
	1144, 448, 449, 450, 0, 452, 453, 1145, 1146, 454,
	455, 456, 457, 458, 460, 1147, 461, 1148, 459, 462,
	463, 464, 513, 514, 515, 1149, 466, 465, 516, 1150,
	1151, 1152, 1153, 467, 468, 517, 469, 470, 471, 1177,
	0, 1069, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1796, 0, 0, 0, 218, 219,
	220, 221, 222, 1076, 223, 1077, 1078, 1079, 0, 1080,
	472, 1081, 1082, 1083, 1084, 224, 226, 225, 227, 228,
	473, 474, 229, 475, 230, 231, 476, 1085, 232, 233,
	234, 235, 236, 237, 1086, 1087, 238, 477, 478, 479,
	1088, 239, 480, 1089, 1074, 1090, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 1091, 250, 0,
	251, 252, 253, 1092, 948, 254, 255, 1093, 1094, 1096,
	1095, 1097, 1098, 1099, 256, 257, 258, 259, 260, 261,
	481, 482, 1100, 262, 1101, 264, 263, 1102, 265, 1103,
	1104, 266, 267, 268, 1105, 269, 1106, 270, 271, 1107,
	272, 483, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 484, 485, 1108, 215, 1109, 0, 0, 0, 0,
	283, 284, 285, 486, 286, 287, 0, 288, 1110, 289,
	1111, 1112, 949, 290, 291, 1113, 292, 487, 1114, 488,
	293, 1115, 294, 295, 296, 297, 489, 490, 491, 345,
	951, 298, 299, 1116, 300, 301, 303, 0, 0, 216,
	302, 304, 311, 1117, 950, 305, 492, 307, 306, 308,
	309, 310, 493, 1118, 494, 1119, 312, 952, 495, 953,
	313, 314, 315, 954, 316, 317, 0, 0, 318, 319,
	320, 321, 1120, 323, 322, 1121, 324, 496, 955, 325,
	326, 956, 1122, 327, 328, 1123, 1124, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 340, 338,
	957, 341, 342, 344, 343, 1125, 217, 958, 1126, 497,
	498, 346, 347, 1127, 348, 349, 350, 1128, 1129, 352,
	353, 354, 1130, 1131, 355, 356, 499, 959, 357, 960,
	500, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	1132, 366, 367, 501, 368, 502, 369, 1133, 370, 0,
	371, 372, 373, 374, 375, 376, 503, 377, 378, 1134,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 1135, 392, 961, 393, 394, 395,
	396, 504, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 1136, 415, 416, 409, 411, 412, 413, 410,
	414, 417, 418, 1137, 419, 399, 400, 420, 421, 962,
	422, 505, 423, 424, 1138, 434, 425, 426, 427, 401,
	428, 432, 433, 429, 430, 431, 506, 1139, 436, 437,
	435, 1140, 438, 439, 440, 441, 442, 277, 443, 1141,
	444, 507, 508, 509, 510, 1142, 451, 1143, 445, 446,
	511, 447, 512, 1144, 448, 449, 450, 0, 452, 453,
	1145, 1146, 454, 455, 456, 457, 458, 460, 1147, 461,
	1148, 459, 462, 463, 464, 513, 514, 515, 1149, 466,
	465, 516, 1150, 1151, 1152, 1153, 467, 468, 517, 469,
	470, 471, 1066, 0, 1069, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 1076, 223, 1077, 1078,
	1079, 0, 1080, 472, 1081, 1082, 1083, 1084, 224, 226,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	1085, 232, 233, 234, 235, 236, 237, 1086, 1087, 238,
	477, 478, 479, 1088, 239, 480, 1089, 1074, 1090, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	1091, 250, 0, 251, 252, 253, 1092, 948, 254, 255,
	1093, 1094, 1096, 1095, 1097, 1098, 1099, 256, 257, 258,
	259, 260, 261, 481, 482, 1100, 262, 1101, 264, 263,
	1102, 265, 1103, 1104, 266, 267, 268, 1105, 269, 1106,
	270, 271, 1107, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 484, 485, 1108, 215, 1109, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 1110, 289, 1111, 1112, 949, 290, 291, 1113, 292,
	487, 1114, 488, 293, 1115, 294, 295, 296, 297, 489,
	490, 491, 345, 951, 298, 299, 1116, 300, 301, 303,
	0, 0, 216, 302, 304, 311, 1117, 950, 305, 492,
	307, 306, 308, 309, 310, 493, 1118, 494, 1119, 312,
	952, 495, 953, 313, 314, 315, 954, 316, 317, 0,
	0, 318, 319, 320, 321, 1120, 323, 322, 1121, 324,
	496, 955, 325, 326, 956, 1122, 327, 328, 1123, 1124,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 338, 957, 341, 342, 344, 343, 1125, 217,
	958, 1126, 497, 498, 346, 347, 1127, 348, 349, 350,
	1128, 1129, 352, 353, 354, 1130, 1131, 355, 356, 499,
	959, 357, 960, 500, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 1132, 366, 367, 501, 368, 502, 369,
	1133, 370, 0, 371, 372, 373, 374, 375, 376, 503,
	377, 378, 1134, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 1135, 392, 961,
	393, 394, 395, 396, 504, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 1136, 415, 416, 409, 411,
	412, 413, 410, 414, 417, 418, 1137, 419, 399, 400,
	420, 421, 962, 422, 505, 423, 424, 1138, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 506,
	1139, 436, 437, 435, 1140, 438, 439, 440, 441, 442,
	277, 443, 1141, 444, 507, 508, 509, 510, 1142, 451,
	1143, 445, 446, 511, 447, 512, 1144, 448, 449, 450,
	0, 452, 453, 1145, 1146, 454, 455, 456, 457, 458,
	460, 1147, 461, 1148, 459, 462, 463, 464, 513, 514,
	515, 1149, 466, 465, 516, 1150, 1151, 1152, 1153, 467,
	468, 517, 469, 470, 471, 1069, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 1076, 223, 1077,
	1078, 1079, 0, 1080, 472, 1081, 1082, 1083, 1084, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 1085, 232, 233, 234, 235, 236, 237, 1086, 1087,
	238, 477, 478, 479, 1088, 239, 480, 1089, 1074, 1090,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 1091, 250, 0, 251, 252, 253, 1092, 948, 254,
	255, 1093, 1094, 1096, 1095, 1097, 1098, 1099, 256, 257,
	258, 259, 260, 261, 481, 482, 1100, 262, 1101, 264,
	263, 1102, 265, 1103, 1104, 266, 267, 268, 1105, 269,
	1106, 270, 271, 1107, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 1108, 215, 1109,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 1110, 289, 1111, 1112, 949, 290, 291, 1113,
	292, 487, 1114, 488, 293, 1115, 294, 295, 296, 297,
	489, 490, 491, 345, 951, 298, 299, 1116, 300, 301,
	303, 0, 0, 216, 302, 304, 311, 1117, 950, 305,
	492, 307, 306, 308, 309, 310, 493, 1118, 494, 1119,
	312, 952, 495, 953, 313, 314, 315, 954, 316, 317,
	0, 0, 318, 319, 320, 321, 1120, 323, 322, 1121,
	324, 496, 955, 325, 326, 956, 1122, 327, 328, 1123,
	1124, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 957, 341, 342, 344, 343, 1125,
	217, 958, 1126, 497, 498, 346, 347, 1127, 348, 349,
	350, 1128, 1129, 352, 353, 354, 1130, 1131, 355, 356,
	499, 959, 357, 960, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 1132, 366, 367, 501, 368, 502,
	369, 1133, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 1134, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 1135, 392,
	961, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 1136, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 1137, 419, 399,
	400, 420, 421, 962, 422, 505, 423, 424, 1138, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 1139, 436, 437, 435, 1140, 438, 439, 440, 441,
	442, 277, 443, 1141, 444, 507, 508, 509, 510, 1142,
	451, 1143, 445, 446, 511, 447, 512, 1144, 448, 449,
	450, 0, 452, 453, 1145, 1146, 454, 455, 456, 457,
	458, 460, 1147, 461, 1148, 459, 462, 463, 464, 513,
	514, 515, 1149, 466, 465, 516, 1150, 1151, 1152, 1153,
	467, 468, 517, 469, 470, 471, 2055, 0, 890, 847,
	848, 849, 845, 846, 859, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	2052, 223, 0, 0, 0, 0, 0, 939, 864, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 905, 884,
	916, 874, 915, 914, 0, 232, 876, 875, 235, 236,
	237, 866, 938, 238, 974, 975, 479, 0, 239, 945,
	0, 928, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 948, 254, 255, 931, 929, 930, 935, 933, 932,
	934, 256, 257, 258, 259, 919, 261, 912, 911, 836,
	262, 0, 264, 263, 0, 265, 2053, 0, 266, 910,
	268, 0, 269, 0, 270, 271, 0, 272, 842, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 965, 966,
	855, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	909, 907, 908, 0, 288, 0, 289, 0, 0, 949,
	290, 291, 0, 292, 972, 0, 865, 293, 0, 294,
	295, 296, 297, 940, 941, 944, 345, 951, 298, 299,
	0, 300, 301, 886, 0, 0, 216, 302, 304, 311,
	0, 950, 305, 898, 889, 900, 902, 903, 904, 899,
	0, 891, 0, 312, 952, 942, 953, 313, 314, 315,
	954, 924, 925, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 973, 955, 325, 326, 956, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 878, 338, 957, 341, 342,
	344, 343, 833, 217, 958, 856, 943, 913, 346, 347,
	0, 887, 349, 888, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 959, 357, 960, 967, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	968, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 906, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 961, 393, 394, 395, 396, 843, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 879, 880, 882, 883, 410, 414, 417, 418,
	936, 419, 399, 400, 420, 421, 962, 422, 901, 881,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 947,
	429, 430, 431, 969, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 877, 0, 444, 920, 921,
	922, 923, 0, 451, 0, 445, 446, 970, 447, 971,
	854, 448, 449, 450, 0, 452, 453, 0, 837, 454,
	455, 456, 457, 458, 460, 937, 461, 0, 885, 462,
	463, 464, 513, 917, 964, 2051, 466, 465, 516, 0,
	0, 0, 0, 467, 468, 517, 469, 470, 471, 834,
	0, 0, 0, 0, 0, 0, 0, 832, 0, 0,
	0, 0, 830, 831, 2054, 0, 0, 0, 0, 0,
	0, 860, 2050, 0, 823, 858, 890, 847, 848, 849,
	845, 846, 859, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 939, 864, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 905, 884, 916, 874,
	915, 914, 0, 232, 876, 875, 235, 236, 237, 866,
	938, 238, 974, 975, 479, 0, 239, 945, 0, 928,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 948,
	254, 255, 931, 929, 930, 935, 933, 932, 934, 256,
	257, 258, 259, 919, 261, 912, 911, 836, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 910, 268, 0,
	269, 0, 270, 271, 0, 272, 842, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 965, 966, 855, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 909, 907,
	908, 0, 288, 0, 289, 0, 0, 949, 290, 291,
	0, 292, 972, 0, 865, 293, 0, 294, 295, 296,
	297, 940, 941, 944, 345, 951, 298, 299, 0, 300,
	301, 886, 0, 0, 216, 302, 304, 311, 0, 950,
	305, 898, 889, 900, 902, 903, 904, 899, 0, 891,
	0, 312, 952, 942, 953, 313, 314, 315, 954, 924,
	925, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 973, 955, 325, 326, 956, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 878, 338, 957, 341, 342, 344, 343,
	833, 217, 958, 856, 943, 913, 346, 347, 0, 887,
	349, 888, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 959, 357, 960, 967, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 968, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 906, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 961, 393, 394, 395, 396, 843, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 181, 415, 416,
	879, 880, 882, 883, 410, 414, 417, 418, 936, 419,
	399, 400, 420, 421, 962, 422, 901, 881, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 947, 429, 430,
	431, 969, 0, 436, 437, 435, 183, 438, 439, 440,
	441, 442, 277, 877, 0, 444, 920, 921, 922, 923,
	0, 451, 0, 445, 446, 970, 447, 971, 854, 448,
	449, 450, 0, 452, 453, 0, 837, 454, 455, 456,
	457, 458, 460, 937, 461, 0, 885, 462, 463, 464,
	1316, 917, 964, 0, 466, 465, 516, 0, 0, 0,
	175, 467, 468, 517, 469, 470, 471, 834, 176, 0,
	0, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	830, 831, 890, 847, 848, 849, 845, 846, 859, 1520,
	1518, 0, 0, 858, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 939, 864, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 905, 884, 916, 874, 915, 914, 0, 232,
	876, 875, 235, 236, 237, 866, 938, 238, 974, 975,
	479, 0, 239, 945, 0, 928, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 948, 254, 255, 931, 929,
	930, 935, 933, 932, 934, 256, 257, 258, 259, 919,
	261, 912, 911, 836, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 910, 268, 0, 269, 0, 270, 271,
	0, 272, 842, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 965, 966, 855, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 909, 907, 908, 0, 288, 0,
	289, 0, 0, 949, 290, 291, 0, 292, 972, 0,
	865, 293, 0, 294, 295, 296, 297, 940, 941, 944,
	345, 951, 298, 299, 0, 300, 301, 886, 0, 0,
	216, 302, 304, 311, 0, 950, 305, 898, 889, 900,
	902, 903, 904, 899, 0, 891, 0, 312, 952, 942,
	953, 313, 314, 315, 954, 924, 925, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 973, 955,
	325, 326, 956, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 878,
	338, 957, 341, 342, 344, 343, 833, 217, 958, 856,
	943, 913, 346, 347, 0, 887, 349, 888, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 959, 357,
	960, 967, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 968, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 906, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 961, 393, 394,
	395, 396, 843, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 181, 415, 416, 879, 880, 882, 883,
	410, 414, 417, 418, 936, 419, 399, 400, 420, 421,
	962, 422, 901, 881, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 947, 429, 430, 431, 969, 0, 436,
	437, 435, 183, 438, 439, 440, 441, 442, 277, 877,
	0, 444, 920, 921, 922, 923, 0, 451, 0, 445,
	446, 970, 447, 971, 854, 448, 449, 450, 0, 452,
	453, 0, 837, 454, 455, 456, 457, 458, 460, 937,
	461, 0, 885, 462, 463, 464, 1316, 917, 964, 0,
	466, 465, 516, 0, 0, 0, 175, 467, 468, 517,
	469, 470, 471, 834, 176, 0, 0, 0, 0, 0,
	0, 832, 0, 0, 0, 0, 830, 831, 890, 847,
	848, 849, 845, 846, 859, 1520, 2480, 0, 0, 858,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 939, 864, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 905, 884,
	916, 874, 915, 914, 0, 232, 876, 875, 235, 236,
	237, 866, 938, 238, 974, 975, 479, 0, 239, 945,
	0, 928, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 948, 254, 255, 931, 929, 930, 935, 933, 932,
	934, 256, 257, 258, 259, 919, 261, 912, 911, 836,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 910,
	268, 0, 269, 0, 270, 271, 0, 272, 842, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 965, 966,
	855, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	909, 907, 908, 0, 288, 0, 289, 0, 0, 949,
	290, 291, 0, 292, 972, 0, 865, 293, 0, 294,
	295, 296, 297, 940, 941, 944, 345, 951, 298, 299,
	0, 300, 301, 886, 0, 0, 216, 302, 304, 311,
	0, 950, 305, 898, 889, 900, 902, 903, 904, 899,
	0, 891, 0, 312, 952, 942, 953, 313, 314, 315,
	954, 924, 925, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 973, 955, 325, 326, 956, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 878, 338, 957, 341, 342,
	344, 343, 833, 217, 958, 856, 943, 913, 346, 347,
	0, 887, 349, 888, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 959, 357, 960, 967, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	968, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 906, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 961, 393, 394, 395, 396, 843, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 181,
	415, 416, 879, 880, 882, 883, 410, 414, 417, 418,
	936, 419, 399, 400, 420, 421, 962, 422, 901, 881,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 947,
	429, 430, 431, 969, 0, 436, 437, 435, 183, 438,
	439, 440, 441, 442, 277, 877, 0, 444, 920, 921,
	922, 923, 0, 451, 0, 445, 446, 970, 447, 971,
	854, 448, 449, 450, 0, 452, 453, 0, 837, 454,
	455, 456, 457, 458, 460, 937, 461, 0, 885, 462,
	463, 464, 1316, 917, 964, 0, 466, 465, 516, 0,
	0, 0, 175, 467, 468, 517, 469, 470, 471, 834,
	176, 0, 0, 0, 0, 0, 0, 832, 0, 0,
	0, 0, 830, 831, 890, 847, 848, 849, 845, 846,
	859, 1520, 1518, 0, 0, 858, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 939, 864, 0, 0, 0, 224, 226,
	225, 227, 228, 473, 905, 884, 916, 874, 915, 914,
	2140, 232, 876, 875, 235, 236, 237, 866, 938, 238,
	974, 975, 479, 0, 239, 945, 0, 928, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 948, 254, 255,
	931, 929, 930, 935, 933, 932, 934, 256, 257, 258,
	259, 919, 261, 912, 911, 836, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 910, 268, 0, 269, 0,
	270, 271, 0, 272, 842, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 965, 966, 855, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 909, 907, 908, 0,
	288, 0, 289, 0, 2145, 949, 290, 291, 0, 292,
	972, 0, 865, 293, 0, 294, 295, 296, 297, 940,
	941, 944, 345, 951, 298, 299, 0, 300, 301, 886,
	0, 0, 216, 302, 304, 311, 0, 950, 305, 898,
	889, 900, 902, 903, 904, 899, 0, 891, 0, 312,
	952, 942, 953, 313, 314, 315, 954, 924, 925, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 2141, 324,
	973, 955, 325, 326, 956, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 878, 338, 957, 341, 342, 344, 343, 833, 217,
	958, 856, 943, 913, 346, 347, 0, 887, 349, 888,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	959, 357, 960, 967, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 968, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 906,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 961,
	393, 394, 395, 396, 843, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 879, 880,
	882, 883, 410, 414, 417, 418, 936, 419, 399, 400,
	420, 421, 962, 422, 901, 881, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 947, 429, 430, 431, 969,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 877, 0, 444, 920, 921, 922, 923, 0, 451,
	2142, 445, 446, 970, 447, 971, 854, 448, 449, 450,
	0, 452, 453, 0, 837, 454, 455, 456, 457, 458,
	460, 937, 461, 0, 885, 462, 463, 464, 513, 917,
	964, 0, 466, 465, 516, 0, 0, 0, 0, 467,
	468, 517, 469, 470, 471, 834, 0, 0, 0, 0,
	0, 0, 0, 832, 0, 0, 0, 0, 830, 831,
	0, 0, 0, 0, 0, 0, 0, 860, 0, 0,
	1379, 858, 890, 847, 848, 849, 845, 846, 859, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 939, 864, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 905, 884, 916, 874, 915, 914, 0, 232,
	876, 875, 235, 236, 237, 866, 938, 238, 974, 975,
	479, 0, 239, 945, 0, 928, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 948, 254, 255, 931, 929,
	930, 935, 933, 932, 934, 256, 257, 258, 259, 919,
	261, 912, 911, 836, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 910, 268, 0, 269, 0, 270, 271,
	0, 272, 842, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 965, 966, 855, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 909, 907, 908, 0, 288, 0,
	289, 0, 0, 949, 290, 291, 0, 292, 972, 0,
	865, 293, 0, 294, 295, 296, 297, 940, 941, 944,
	345, 951, 298, 299, 0, 300, 301, 886, 0, 0,
	216, 302, 304, 311, 0, 950, 305, 898, 889, 900,
	902, 903, 904, 899, 0, 891, 0, 312, 952, 942,
	953, 313, 314, 315, 954, 924, 925, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 973, 955,
	325, 326, 956, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 878,
	338, 957, 341, 342, 344, 343, 833, 217, 958, 856,
	943, 913, 346, 347, 0, 887, 349, 888, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 959, 357,
	960, 967, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 968, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 906, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 961, 393, 394,
	395, 396, 843, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 879, 880, 882, 883,
	410, 414, 417, 418, 936, 419, 399, 400, 420, 421,
	962, 422, 901, 881, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 947, 429, 430, 431, 969, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 877,
	0, 444, 920, 921, 922, 923, 0, 451, 0, 445,
	446, 970, 447, 971, 854, 448, 449, 450, 0, 452,
	453, 0, 837, 454, 455, 456, 457, 458, 460, 937,
	461, 0, 885, 462, 463, 464, 513, 917, 964, 0,
	466, 465, 516, 1378, 0, 0, 0, 467, 468, 517,
	469, 470, 471, 834, 0, 0, 0, 0, 0, 0,
	0, 832, 0, 0, 0, 0, 830, 831, 0, 0,
	0, 0, 0, 0, 0, 860, 0, 0, 826, 858,
	890, 847, 848, 849, 845, 846, 859, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 939,
	864, 0, 0, 0, 224, 226, 225, 227, 228, 473,
	905, 884, 916, 874, 915, 914, 0, 232, 876, 875,
	235, 236, 237, 866, 938, 238, 974, 975, 479, 0,
	239, 945, 0, 928, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 948, 254, 255, 931, 929, 930, 935,
	933, 932, 934, 256, 257, 258, 259, 919, 261, 912,
	911, 836, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 910, 268, 0, 269, 0, 270, 271, 0, 272,
	842, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	965, 966, 855, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 909, 907, 908, 0, 288, 0, 289, 0,
	0, 949, 290, 291, 0, 292, 972, 0, 865, 293,
	0, 294, 295, 296, 297, 940, 941, 944, 345, 951,
	298, 299, 0, 300, 301, 886, 0, 0, 216, 302,
	304, 311, 0, 950, 305, 898, 889, 900, 902, 903,
	904, 899, 0, 891, 0, 312, 952, 942, 953, 313,
	314, 315, 954, 924, 925, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 973, 955, 325, 326,
	956, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 878, 338, 957,
	341, 342, 344, 343, 833, 217, 958, 856, 943, 913,
	346, 347, 0, 887, 349, 888, 838, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 959, 357, 960, 967,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 968, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 906, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 961, 393, 394, 395, 396,
	843, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 0, 415, 416, 879, 880, 882, 883, 410, 414,
	417, 418, 936, 419, 399, 400, 420, 421, 962, 422,
	901, 881, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 947, 429, 430, 431, 969, 0, 436, 437, 435,
	0, 438, 439, 440, 441, 442, 277, 877, 0, 444,
	920, 921, 922, 923, 0, 451, 0, 445, 446, 970,
	447, 971, 854, 448, 449, 450, 0, 452, 453, 0,
	837, 454, 455, 456, 457, 458, 460, 937, 461, 0,
	885, 462, 463, 464, 513, 917, 964, 0, 466, 465,
	516, 0, 0, 0, 0, 467, 468, 517, 469, 470,
	471, 834, 0, 0, 0, 0, 0, 0, 0, 832,
	0, 0, 0, 0, 830, 831, 890, 847, 848, 849,
	845, 846, 859, 860, 0, 0, 0, 858, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 939, 864, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 905, 884, 916, 874,
	915, 914, 0, 232, 876, 875, 235, 236, 237, 866,
	938, 238, 974, 975, 479, 0, 239, 945, 0, 928,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 3439, 253, 0, 948,
	254, 255, 931, 929, 930, 935, 933, 932, 934, 256,
	257, 258, 259, 919, 261, 912, 911, 836, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 910, 268, 0,
	269, 0, 270, 271, 0, 272, 842, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 965, 966, 855, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 909, 907,
	908, 0, 288, 0, 289, 0, 0, 949, 290, 291,
	0, 292, 972, 0, 865, 293, 0, 294, 295, 296,
	297, 940, 941, 944, 345, 951, 298, 299, 0, 300,
	301, 886, 0, 0, 216, 302, 304, 311, 0, 950,
	305, 898, 889, 900, 902, 903, 904, 899, 0, 891,
	0, 312, 952, 942, 953, 313, 314, 315, 954, 924,
	925, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 973, 955, 325, 326, 956, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 878, 338, 957, 341, 342, 344, 343,
	833, 217, 958, 856, 943, 913, 346, 347, 0, 887,
	349, 888, 838, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 959, 357, 960, 967, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 968, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 906, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 961, 393, 394, 395, 396, 843, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	879, 880, 882, 883, 410, 414, 417, 418, 936, 419,
	399, 400, 420, 421, 962, 422, 901, 881, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 947, 429, 430,
	431, 969, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 877, 0, 444, 920, 921, 922, 923,
	0, 451, 0, 445, 446, 970, 447, 971, 854, 448,
	449, 450, 0, 452, 453, 0, 837, 454, 455, 456,
	457, 458, 460, 937, 461, 0, 885, 462, 463, 464,
	513, 917, 964, 0, 466, 465, 516, 0, 0, 0,
	0, 467, 468, 517, 469, 470, 471, 834, 0, 0,
	0, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	830, 831, 890, 847, 848, 849, 845, 846, 859, 860,
	0, 0, 0, 858, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 939, 864, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 905, 884, 916, 874, 915, 914, 0, 232,
	876, 875, 235, 236, 237, 866, 938, 238, 974, 975,
	479, 0, 239, 945, 0, 928, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 3297, 253, 0, 948, 254, 255, 931, 929,
	930, 935, 933, 932, 934, 256, 257, 258, 259, 919,
	261, 912, 911, 836, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 910, 268, 0, 269, 0, 270, 271,
	0, 272, 842, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 965, 966, 855, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 909, 907, 908, 0, 288, 0,
	289, 0, 0, 949, 290, 291, 0, 292, 972, 0,
	865, 293, 0, 294, 295, 296, 297, 940, 941, 944,
	345, 951, 298, 299, 0, 300, 301, 886, 0, 0,
	216, 302, 304, 311, 0, 950, 305, 898, 889, 900,
	902, 903, 904, 899, 0, 891, 0, 312, 952, 942,
	953, 313, 314, 315, 954, 924, 925, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 973, 955,
	325, 326, 956, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 878,
	338, 957, 341, 342, 344, 343, 833, 217, 958, 856,
	943, 913, 346, 347, 0, 887, 349, 888, 838, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 959, 357,
	960, 967, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 968, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 906, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 961, 393, 394,
	395, 396, 843, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 879, 880, 882, 883,
	410, 414, 417, 418, 936, 419, 399, 400, 420, 421,
	962, 422, 901, 881, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 947, 429, 430, 431, 969, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 877,
	0, 444, 920, 921, 922, 923, 0, 451, 0, 445,
	446, 970, 447, 971, 854, 448, 449, 450, 0, 452,
	453, 0, 837, 454, 455, 456, 457, 458, 460, 937,
	461, 0, 885, 462, 463, 464, 513, 917, 964, 0,
	466, 465, 516, 0, 0, 0, 0, 467, 468, 517,
	469, 470, 471, 834, 0, 0, 0, 0, 0, 0,
	0, 832, 0, 0, 0, 0, 830, 831, 890, 847,
	848, 849, 845, 846, 859, 860, 0, 0, 0, 858,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 939, 864, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 905, 884,
	916, 874, 915, 914, 0, 232, 876, 875, 235, 236,
	237, 866, 938, 238, 974, 975, 479, 0, 239, 945,
	0, 928, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 948, 254, 255, 931, 929, 930, 935, 933, 932,
	934, 256, 257, 258, 259, 919, 261, 912, 911, 836,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 910,
	268, 0, 269, 0, 270, 271, 0, 272, 842, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 965, 966,
	855, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	909, 907, 908, 0, 288, 0, 289, 0, 0, 949,
	290, 291, 0, 292, 972, 0, 865, 293, 0, 294,
	295, 296, 297, 940, 941, 944, 345, 951, 298, 299,
	0, 300, 301, 886, 0, 0, 216, 302, 304, 311,
	0, 950, 305, 898, 889, 900, 902, 903, 904, 899,
	0, 891, 0, 312, 952, 942, 953, 313, 314, 315,
	954, 924, 925, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 973, 955, 325, 326, 956, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 878, 338, 957, 341, 342,
	344, 343, 833, 3029, 958, 856, 943, 913, 346, 347,
	0, 887, 349, 888, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 959, 357, 960, 967, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	968, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 906, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 961, 393, 394, 395, 396, 843, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 879, 880, 882, 883, 410, 414, 417, 418,
	936, 419, 399, 400, 420, 421, 962, 422, 901, 881,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 947,
	429, 430, 431, 969, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 877, 0, 444, 920, 921,
	922, 923, 0, 451, 0, 445, 446, 970, 447, 971,
	854, 448, 449, 450, 0, 452, 453, 0, 837, 454,
	455, 456, 457, 458, 460, 937, 461, 0, 885, 462,
	463, 464, 513, 917, 964, 0, 466, 465, 516, 0,
	0, 0, 0, 467, 468, 517, 469, 470, 471, 834,
	0, 0, 0, 0, 0, 0, 0, 832, 0, 0,
	0, 0, 830, 831, 1580, 0, 0, 0, 0, 0,
	0, 860, 0, 0, 0, 858, 890, 847, 848, 849,
	845, 846, 859, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 939, 864, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 905, 884, 916, 874,
	915, 914, 0, 232, 876, 875, 235, 236, 237, 866,
	938, 238, 974, 975, 479, 0, 239, 945, 0, 928,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 948,
	254, 255, 931, 929, 930, 935, 933, 932, 934, 256,
	257, 258, 259, 919, 261, 912, 911, 836, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 910, 268, 0,
	269, 0, 270, 271, 0, 272, 842, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 965, 966, 855, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 909, 907,
	908, 0, 288, 0, 289, 0, 0, 949, 290, 291,
	0, 292, 972, 0, 865, 293, 0, 294, 295, 296,
	297, 940, 941, 944, 345, 951, 298, 299, 0, 300,
	301, 886, 0, 0, 216, 302, 304, 311, 0, 950,
	305, 898, 889, 900, 902, 903, 904, 899, 0, 891,
	0, 312, 952, 942, 953, 313, 314, 315, 954, 924,
	925, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 973, 955, 325, 326, 956, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 878, 338, 957, 341, 342, 344, 343,
	833, 217, 958, 856, 943, 913, 346, 347, 0, 887,
	349, 888, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 959, 357, 960, 967, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 968, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 906, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 961, 393, 394, 395, 396, 843, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	879, 880, 882, 883, 410, 414, 417, 418, 936, 419,
	399, 400, 420, 421, 962, 422, 901, 881, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 947, 429, 430,
	431, 969, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 877, 0, 444, 920, 921, 922, 923,
	0, 451, 0, 445, 446, 970, 447, 971, 854, 448,
	449, 450, 0, 452, 453, 0, 837, 454, 455, 456,
	457, 458, 460, 937, 461, 0, 885, 462, 463, 464,
	513, 917, 964, 2836, 466, 465, 516, 0, 0, 0,
	0, 467, 468, 517, 469, 470, 471, 834, 0, 0,
	0, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	830, 831, 890, 847, 848, 849, 845, 846, 859, 860,
	0, 0, 0, 858, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 939, 864, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 905, 884, 916, 874, 915, 914, 0, 232,
	876, 875, 235, 236, 237, 866, 938, 238, 974, 975,
	479, 0, 239, 945, 0, 928, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 948, 254, 255, 931, 929,
	930, 935, 933, 932, 934, 256, 257, 258, 259, 919,
	261, 912, 911, 836, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 910, 268, 0, 269, 0, 270, 271,
	0, 272, 842, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 965, 966, 855, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 909, 907, 908, 0, 288, 0,
	289, 0, 0, 949, 290, 291, 0, 292, 972, 0,
	865, 293, 0, 294, 295, 296, 297, 940, 941, 944,
	345, 951, 298, 299, 0, 300, 301, 886, 0, 0,
	1969, 302, 304, 311, 0, 950, 305, 898, 889, 900,
	902, 903, 904, 899, 0, 891, 0, 312, 952, 942,
	953, 313, 314, 315, 954, 924, 925, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 973, 955,
	325, 326, 956, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 878,
	338, 957, 341, 342, 344, 343, 833, 217, 958, 856,
	943, 913, 346, 347, 0, 887, 349, 888, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 959, 357,
	960, 967, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 968, 368, 502, 369, 1968, 370,
	0, 371, 372, 373, 374, 375, 376, 906, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 961, 393, 394,
	395, 396, 843, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 879, 880, 882, 883,
	410, 414, 417, 418, 936, 419, 399, 400, 420, 421,
	962, 422, 901, 881, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 947, 429, 430, 431, 969, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 877,
	0, 444, 920, 921, 922, 923, 0, 451, 0, 445,
	446, 970, 447, 971, 854, 448, 449, 450, 0, 452,
	453, 0, 837, 454, 455, 456, 457, 458, 460, 937,
	461, 0, 885, 462, 463, 464, 513, 917, 964, 0,
	466, 465, 516, 0, 0, 0, 0, 467, 468, 517,
	469, 470, 471, 834, 0, 0, 0, 0, 0, 0,
	0, 832, 0, 0, 0, 0, 830, 831, 890, 847,
	848, 849, 845, 846, 859, 860, 0, 0, 0, 858,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 939, 864, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 905, 884,
	916, 874, 915, 914, 0, 232, 876, 875, 235, 236,
	237, 866, 938, 238, 974, 975, 479, 0, 239, 945,
	0, 928, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 948, 254, 255, 931, 929, 930, 935, 933, 932,
	934, 256, 257, 258, 259, 919, 261, 912, 911, 836,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 910,
	268, 0, 269, 0, 270, 271, 0, 272, 842, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 965, 966,
	855, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	909, 907, 908, 0, 288, 0, 289, 0, 0, 949,
	290, 291, 0, 292, 972, 0, 865, 293, 0, 294,
	295, 296, 297, 940, 941, 944, 345, 951, 298, 299,
	0, 300, 301, 886, 0, 0, 216, 302, 304, 311,
	0, 950, 305, 898, 889, 900, 902, 903, 904, 899,
	0, 891, 0, 312, 952, 942, 953, 313, 314, 315,
	954, 924, 925, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 973, 955, 325, 326, 956, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 878, 338, 957, 341, 342,
	344, 343, 833, 217, 958, 856, 943, 913, 346, 347,
	0, 887, 349, 888, 838, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 959, 357, 960, 967, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	968, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 906, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 961, 393, 394, 395, 396, 843, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 879, 880, 882, 883, 410, 414, 417, 418,
	936, 419, 399, 400, 420, 421, 962, 422, 901, 881,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 947,
	429, 430, 431, 969, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 877, 0, 444, 920, 921,
	922, 923, 0, 451, 0, 445, 446, 970, 447, 971,
	854, 448, 449, 450, 0, 452, 453, 0, 837, 454,
	455, 456, 457, 458, 460, 937, 461, 0, 885, 462,
	463, 464, 513, 917, 964, 0, 466, 465, 516, 0,
	0, 0, 0, 467, 468, 517, 469, 470, 471, 834,
	0, 0, 0, 0, 0, 0, 0, 832, 0, 0,
	0, 0, 830, 831, 890, 847, 848, 849, 845, 846,
	859, 860, 0, 0, 0, 858, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 939, 864, 0, 0, 0, 224, 226,
	225, 227, 228, 473, 905, 884, 916, 874, 915, 914,
	0, 232, 876, 875, 235, 236, 237, 866, 938, 238,
	974, 975, 479, 0, 239, 945, 0, 928, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 948, 254, 255,
	931, 929, 930, 935, 933, 932, 934, 256, 257, 258,
	259, 919, 261, 912, 911, 836, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 910, 268, 0, 269, 0,
	270, 271, 0, 272, 842, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 965, 966, 855, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 909, 907, 908, 0,
	288, 0, 289, 0, 0, 949, 290, 291, 0, 292,
	972, 0, 865, 293, 0, 294, 295, 296, 297, 940,
	941, 944, 345, 951, 298, 299, 0, 300, 301, 886,
	0, 0, 216, 302, 304, 311, 0, 950, 305, 898,
	889, 900, 902, 903, 904, 899, 0, 891, 0, 312,
	952, 942, 953, 313, 314, 315, 954, 924, 925, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	973, 955, 325, 326, 956, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 878, 338, 957, 341, 342, 344, 343, 833, 217,
	958, 856, 943, 913, 346, 347, 0, 887, 349, 888,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	959, 357, 960, 967, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 968, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 906,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 961,
	393, 394, 395, 396, 843, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 879, 880,
	882, 883, 410, 414, 417, 418, 936, 419, 399, 400,
	420, 421, 962, 422, 901, 881, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 947, 429, 430, 431, 969,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 877, 0, 444, 920, 921, 922, 923, 0, 451,
	0, 445, 446, 970, 447, 971, 854, 448, 449, 450,
	0, 452, 453, 0, 837, 454, 455, 456, 457, 458,
	460, 937, 461, 0, 885, 462, 463, 464, 513, 917,
	964, 0, 466, 465, 516, 0, 0, 0, 0, 467,
	468, 517, 469, 470, 471, 834, 0, 0, 0, 0,
	0, 0, 0, 832, 0, 0, 0, 0, 830, 831,
	1580, 0, 0, 0, 0, 0, 0, 860, 0, 0,
	0, 858, 890, 847, 848, 849, 845, 846, 859, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 939, 864, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 905, 884, 916, 874, 915, 914, 0, 232,
	876, 875, 235, 236, 237, 866, 938, 238, 974, 975,
	479, 0, 239, 945, 0, 928, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 948, 254, 255, 931, 929,
	930, 935, 933, 932, 934, 256, 257, 258, 259, 919,
	261, 912, 911, 836, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 910, 268, 0, 269, 0, 270, 271,
	0, 272, 842, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 965, 966, 855, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 909, 907, 908, 0, 288, 0,
	289, 0, 2145, 949, 290, 291, 0, 292, 972, 0,
	865, 293, 0, 294, 295, 296, 297, 940, 941, 944,
	345, 951, 298, 299, 0, 300, 301, 886, 0, 0,
	216, 302, 304, 311, 0, 950, 305, 898, 889, 900,
	902, 903, 904, 899, 0, 891, 0, 312, 952, 942,
	953, 313, 314, 315, 954, 924, 925, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 973, 955,
	325, 326, 956, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 878,
	338, 957, 341, 342, 344, 343, 833, 217, 958, 856,
	943, 913, 346, 347, 0, 887, 349, 888, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 959, 357,
	960, 967, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 968, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 906, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 961, 393, 394,
	395, 396, 843, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 879, 880, 882, 883,
	410, 414, 417, 418, 936, 419, 399, 400, 420, 421,
	962, 422, 901, 881, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 947, 429, 430, 431, 969, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 877,
	0, 444, 920, 921, 922, 923, 0, 451, 0, 445,
	446, 970, 447, 971, 854, 448, 449, 450, 0, 452,
	453, 0, 837, 454, 455, 456, 457, 458, 460, 937,
	461, 0, 885, 462, 463, 464, 513, 917, 964, 0,
	466, 465, 516, 0, 0, 0, 0, 467, 468, 517,
	469, 470, 471, 834, 0, 0, 0, 0, 0, 0,
	0, 832, 0, 0, 0, 0, 830, 831, 890, 847,
	848, 849, 845, 846, 859, 860, 0, 0, 0, 858,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 939, 864, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 905, 884,
	916, 874, 915, 914, 0, 232, 876, 875, 235, 236,
	237, 866, 938, 238, 974, 975, 479, 0, 239, 945,
	0, 928, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 948, 254, 255, 931, 929, 930, 935, 933, 932,
	934, 256, 257, 258, 259, 919, 261, 912, 911, 836,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 910,
	268, 0, 269, 0, 270, 271, 0, 272, 842, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 965, 966,
	855, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	909, 907, 908, 0, 288, 0, 289, 0, 0, 949,
	290, 291, 0, 292, 972, 0, 865, 293, 0, 294,
	295, 296, 297, 940, 941, 944, 345, 951, 298, 299,
	0, 300, 301, 886, 0, 0, 216, 302, 304, 311,
	0, 950, 305, 898, 889, 900, 902, 903, 904, 899,
	0, 891, 0, 312, 952, 942, 953, 313, 314, 315,
	954, 924, 925, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 973, 955, 325, 326, 956, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 878, 338, 957, 341, 342,
	344, 343, 833, 217, 958, 856, 943, 913, 346, 347,
	0, 887, 349, 888, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 959, 357, 960, 967, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	968, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 906, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 961, 393, 394, 395, 396, 843, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 879, 880, 882, 883, 410, 414, 417, 418,
	936, 419, 399, 400, 420, 421, 962, 422, 901, 881,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 947,
	429, 430, 431, 969, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 877, 0, 444, 920, 921,
	922, 923, 0, 451, 0, 445, 446, 970, 447, 971,
	854, 448, 449, 450, 0, 452, 453, 0, 837, 454,
	455, 456, 457, 458, 460, 937, 461, 0, 885, 462,
	463, 464, 513, 917, 964, 0, 466, 465, 516, 0,
	0, 0, 0, 467, 468, 517, 469, 470, 471, 834,
	0, 0, 0, 0, 0, 0, 0, 832, 0, 0,
	0, 0, 830, 831, 0, 0, 0, 0, 0, 0,
	0, 860, 1518, 0, 2150, 858, 890, 847, 848, 849,
	845, 846, 859, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 939, 864, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 905, 884, 916, 874,
	915, 914, 0, 232, 876, 875, 235, 236, 237, 866,
	938, 238, 974, 975, 479, 0, 239, 945, 0, 928,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 948,
	254, 255, 931, 929, 930, 935, 933, 932, 934, 256,
	257, 258, 259, 919, 261, 912, 911, 836, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 910, 268, 0,
	269, 0, 270, 271, 0, 272, 842, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 965, 966, 855, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 909, 907,
	908, 0, 288, 0, 289, 0, 0, 949, 290, 291,
	0, 292, 972, 0, 865, 293, 0, 294, 295, 296,
	297, 940, 941, 944, 345, 951, 298, 299, 0, 300,
	301, 886, 0, 0, 216, 302, 304, 311, 0, 950,
	305, 898, 889, 900, 902, 903, 904, 899, 0, 891,
	0, 312, 952, 942, 953, 313, 314, 315, 954, 924,
	925, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 973, 955, 325, 326, 956, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 878, 338, 957, 341, 342, 344, 343,
	833, 217, 958, 856, 943, 913, 346, 347, 0, 887,
	349, 888, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 959, 357, 960, 967, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 968, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 906, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 961, 393, 394, 395, 396, 843, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	879, 880, 882, 883, 410, 414, 417, 418, 936, 419,
	399, 400, 420, 421, 962, 422, 901, 881, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 947, 429, 430,
	431, 969, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 877, 0, 444, 920, 921, 922, 923,
	0, 451, 0, 445, 446, 970, 447, 971, 854, 448,
	449, 450, 0, 452, 453, 0, 837, 454, 455, 456,
	457, 458, 460, 937, 461, 0, 885, 462, 463, 464,
	513, 917, 964, 0, 466, 465, 516, 0, 0, 0,
	0, 467, 468, 517, 469, 470, 471, 834, 0, 0,
	0, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	830, 831, 0, 0, 0, 0, 0, 0, 0, 860,
	0, 0, 2148, 858, 890, 847, 848, 849, 845, 846,
	859, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 939, 864, 0, 0, 0, 224, 226,
	225, 227, 228, 473, 905, 884, 916, 874, 915, 914,
	0, 232, 876, 875, 235, 236, 237, 866, 938, 238,
	974, 975, 479, 0, 239, 945, 0, 928, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 948, 254, 255,
	931, 929, 930, 935, 933, 932, 934, 256, 257, 258,
	259, 919, 261, 912, 911, 836, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 910, 268, 0, 269, 0,
	270, 271, 0, 272, 842, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 965, 966, 855, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 909, 907, 908, 0,
	288, 0, 289, 0, 0, 949, 290, 291, 0, 292,
	972, 0, 865, 293, 0, 294, 295, 296, 297, 940,
	941, 944, 345, 951, 298, 299, 0, 300, 301, 886,
	0, 0, 216, 302, 304, 311, 0, 950, 305, 898,
	889, 900, 902, 903, 904, 899, 0, 891, 0, 312,
	952, 942, 953, 313, 314, 315, 954, 924, 925, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	973, 955, 325, 326, 956, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 878, 338, 957, 341, 342, 344, 343, 833, 217,
	958, 856, 943, 913, 346, 347, 0, 887, 349, 888,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	959, 357, 960, 967, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 968, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 906,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 961,
	393, 394, 395, 396, 843, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 879, 880,
	882, 883, 410, 414, 417, 418, 936, 419, 399, 400,
	420, 421, 962, 422, 901, 881, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 947, 429, 430, 431, 969,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 877, 0, 444, 920, 921, 922, 923, 0, 451,
	0, 445, 446, 970, 447, 971, 854, 448, 449, 450,
	0, 452, 453, 0, 837, 454, 455, 456, 457, 458,
	460, 937, 461, 0, 885, 462, 463, 464, 513, 917,
	964, 0, 466, 465, 516, 0, 0, 0, 0, 467,
	468, 517, 469, 470, 471, 834, 0, 0, 0, 0,
	0, 0, 0, 832, 0, 0, 0, 0, 830, 831,
	0, 0, 0, 0, 0, 0, 0, 860, 0, 0,
	2136, 858, 890, 847, 848, 849, 845, 846, 859, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 939, 864, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 905, 884, 916, 874, 915, 914, 0, 232,
	876, 875, 235, 236, 237, 866, 938, 238, 974, 975,
	479, 0, 239, 945, 0, 928, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 948, 254, 255, 931, 929,
	930, 935, 933, 932, 934, 256, 257, 258, 259, 919,
	261, 912, 911, 836, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 910, 268, 0, 269, 0, 270, 271,
	0, 272, 842, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 965, 966, 855, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 909, 907, 908, 0, 288, 0,
	289, 0, 0, 949, 290, 291, 0, 292, 972, 0,
	865, 293, 0, 294, 295, 296, 297, 940, 941, 944,
	345, 951, 298, 299, 0, 300, 301, 886, 0, 0,
	216, 302, 304, 311, 0, 950, 305, 898, 889, 900,
	902, 903, 904, 899, 0, 891, 0, 312, 952, 942,
	953, 313, 314, 315, 954, 924, 925, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 973, 955,
	325, 326, 956, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 878,
	338, 957, 341, 342, 344, 343, 833, 217, 958, 856,
	943, 913, 346, 347, 0, 887, 349, 888, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 959, 357,
	960, 967, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 968, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 906, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 961, 393, 394,
	395, 396, 843, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 879, 880, 882, 883,
	410, 414, 417, 418, 936, 419, 399, 400, 420, 421,
	962, 422, 901, 881, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 947, 429, 430, 431, 969, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 877,
	0, 444, 920, 921, 922, 923, 0, 451, 0, 445,
	446, 970, 447, 971, 854, 448, 449, 450, 0, 452,
	453, 0, 837, 454, 455, 456, 457, 458, 460, 937,
	461, 0, 885, 462, 463, 464, 513, 917, 964, 0,
	466, 465, 516, 0, 0, 0, 0, 467, 468, 517,
	469, 470, 471, 834, 0, 0, 0, 0, 0, 0,
	0, 832, 0, 0, 0, 0, 830, 831, 0, 0,
	0, 0, 0, 0, 0, 860, 0, 0, 2125, 858,
	890, 847, 848, 849, 845, 846, 859, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 939,
	864, 0, 0, 0, 224, 226, 225, 227, 228, 473,
	905, 884, 916, 874, 915, 914, 0, 232, 876, 875,
	235, 236, 237, 866, 938, 238, 974, 975, 479, 0,
	239, 945, 0, 928, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 948, 254, 255, 931, 929, 930, 935,
	933, 932, 934, 256, 257, 258, 259, 919, 261, 912,
	911, 836, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 910, 268, 0, 269, 0, 270, 271, 0, 272,
	842, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	965, 966, 855, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 909, 907, 908, 0, 288, 0, 289, 0,
	0, 949, 290, 291, 0, 292, 972, 0, 865, 293,
	0, 294, 295, 296, 297, 940, 941, 944, 345, 951,
	298, 299, 0, 300, 301, 886, 0, 0, 216, 302,
	304, 311, 0, 950, 305, 898, 889, 900, 902, 903,
	904, 899, 0, 891, 0, 312, 952, 942, 953, 313,
	314, 315, 954, 924, 925, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 973, 955, 325, 326,
	956, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 878, 338, 957,
	341, 342, 344, 343, 833, 217, 958, 856, 943, 913,
	346, 347, 0, 887, 349, 888, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 959, 357, 960, 967,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 968, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 906, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 961, 393, 394, 395, 396,
	843, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 0, 415, 416, 879, 880, 882, 883, 410, 414,
	417, 418, 936, 419, 399, 400, 420, 421, 962, 422,
	901, 881, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 947, 429, 430, 431, 969, 0, 436, 437, 435,
	0, 438, 439, 440, 441, 442, 277, 877, 0, 444,
	920, 921, 922, 923, 0, 451, 0, 445, 446, 970,
	447, 971, 854, 448, 449, 450, 0, 452, 453, 0,
	837, 454, 455, 456, 457, 458, 460, 937, 461, 0,
	885, 462, 463, 464, 513, 917, 964, 0, 466, 465,
	516, 0, 0, 0, 0, 467, 468, 517, 469, 470,
	471, 834, 0, 0, 0, 0, 0, 0, 0, 832,
	0, 0, 0, 0, 830, 831, 0, 0, 0, 0,
	0, 0, 0, 860, 0, 0, 2123, 858, 2115, 847,
	848, 849, 845, 846, 859, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 939, 864, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 905, 884,
	916, 874, 915, 914, 0, 232, 876, 875, 235, 236,
	237, 866, 938, 238, 974, 975, 479, 0, 239, 945,
	0, 928, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 948, 254, 255, 931, 929, 930, 935, 933, 932,
	934, 256, 257, 258, 259, 919, 2118, 912, 911, 836,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 910,
	268, 0, 269, 0, 270, 271, 0, 272, 842, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 965, 966,
	855, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	909, 907, 908, 0, 288, 0, 289, 0, 0, 949,
	290, 291, 0, 292, 972, 0, 865, 293, 0, 294,
	295, 296, 2119, 940, 941, 944, 345, 951, 298, 299,
	0, 300, 301, 886, 0, 0, 216, 302, 304, 311,
	0, 950, 305, 898, 889, 900, 902, 903, 904, 899,
	0, 891, 0, 312, 952, 942, 953, 313, 314, 315,
	954, 924, 925, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 973, 955, 325, 326, 956, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 2120, 2117, 339, 878, 338, 957, 341, 342,
	344, 343, 833, 217, 958, 856, 943, 913, 346, 347,
	0, 887, 349, 888, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 959, 357, 960, 967, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	968, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 906, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 961, 393, 394, 395, 396, 843, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 2121, 0,
	415, 416, 879, 880, 882, 883, 410, 414, 417, 418,
	936, 419, 399, 400, 420, 421, 962, 422, 901, 881,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 947,
	429, 430, 431, 969, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 877, 0, 444, 920, 921,
	922, 923, 0, 451, 0, 445, 446, 970, 447, 971,
	854, 448, 449, 450, 0, 452, 453, 0, 837, 454,
	455, 456, 457, 458, 460, 937, 461, 0, 885, 462,
	463, 464, 513, 917, 964, 0, 466, 465, 516, 0,
	0, 0, 0, 467, 468, 517, 469, 2116, 471, 834,
	0, 0, 0, 0, 0, 0, 0, 832, 0, 0,
	0, 0, 830, 831, 0, 0, 0, 0, 0, 0,
	0, 860, 0, 0, 2112, 858, 2115, 847, 848, 849,
	845, 846, 859, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 939, 864, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 905, 884, 916, 874,
	915, 914, 0, 232, 876, 875, 235, 236, 237, 866,
	938, 238, 974, 975, 479, 0, 239, 945, 0, 928,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 948,
	254, 255, 931, 929, 930, 935, 933, 932, 934, 256,
	257, 258, 259, 919, 2118, 912, 911, 836, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 910, 268, 0,
	269, 0, 270, 271, 0, 272, 842, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 965, 966, 855, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 909, 907,
	908, 0, 288, 0, 289, 0, 0, 949, 290, 291,
	0, 292, 972, 0, 865, 293, 0, 294, 295, 296,
	2119, 940, 941, 944, 345, 951, 298, 299, 0, 300,
	301, 886, 0, 0, 216, 302, 304, 311, 0, 950,
	305, 898, 889, 900, 902, 903, 904, 899, 0, 891,
	0, 312, 952, 942, 953, 313, 314, 315, 954, 924,
	925, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 973, 955, 325, 326, 956, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	2120, 2117, 339, 878, 338, 957, 341, 342, 344, 343,
	833, 217, 958, 856, 943, 913, 346, 347, 0, 887,
	349, 888, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 959, 357, 960, 967, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 968, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 906, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 961, 393, 394, 395, 396, 843, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 2121, 0, 415, 416,
	879, 880, 882, 883, 410, 414, 417, 418, 936, 419,
	399, 400, 420, 421, 962, 422, 901, 881, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 947, 429, 430,
	431, 969, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 877, 0, 444, 920, 921, 922, 923,
	0, 451, 0, 445, 446, 970, 447, 971, 854, 448,
	449, 450, 0, 452, 453, 0, 837, 454, 455, 456,
	457, 458, 460, 937, 461, 0, 885, 462, 463, 464,
	513, 917, 964, 0, 466, 465, 516, 0, 0, 0,
	0, 467, 468, 517, 469, 2116, 471, 834, 0, 0,
	0, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	830, 831, 890, 847, 848, 849, 845, 846, 859, 860,
	0, 0, 0, 858, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 939, 864, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 905, 884, 916, 874, 915, 914, 0, 232,
	876, 875, 235, 236, 237, 866, 938, 238, 974, 975,
	479, 0, 239, 945, 0, 928, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 948, 254, 255, 931, 929,
	930, 935, 933, 932, 934, 256, 257, 258, 259, 919,
	261, 912, 911, 836, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 910, 268, 0, 269, 0, 270, 271,
	0, 272, 842, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 965, 966, 855, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 909, 907, 908, 0, 288, 0,
	289, 0, 0, 949, 290, 291, 0, 292, 972, 0,
	865, 293, 0, 294, 295, 296, 297, 940, 941, 944,
	345, 951, 298, 299, 0, 300, 301, 886, 0, 0,
	216, 302, 304, 311, 0, 950, 305, 898, 889, 900,
	902, 903, 904, 899, 0, 891, 0, 312, 952, 942,
	953, 313, 314, 315, 954, 924, 925, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 973, 955,
	325, 326, 956, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 878,
	338, 957, 341, 342, 344, 343, 833, 217, 958, 856,
	943, 913, 346, 347, 0, 887, 349, 888, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 959, 357,
	960, 967, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 968, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 906, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 961, 393, 394,
	395, 396, 843, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 879, 880, 882, 883,
	410, 414, 417, 418, 936, 419, 399, 400, 420, 421,
	962, 422, 901, 881, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 947, 429, 430, 431, 969, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 877,
	0, 444, 920, 921, 922, 923, 0, 451, 0, 445,
	446, 970, 447, 971, 854, 448, 449, 450, 0, 452,
	453, 0, 837, 454, 455, 456, 457, 458, 460, 937,
	461, 0, 885, 462, 463, 464, 513, 917, 964, 0,
	466, 465, 516, 0, 0, 0, 0, 467, 468, 517,
	469, 470, 471, 834, 0, 0, 0, 0, 0, 0,
	0, 832, 0, 0, 0, 0, 830, 831, 0, 0,
	0, 0, 0, 1526, 0, 860, 0, 0, 0, 858,
	890, 847, 848, 849, 845, 846, 859, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 1956, 223, 0, 0, 0, 0, 0, 939,
	864, 0, 0, 0, 224, 226, 225, 227, 228, 473,
	905, 884, 916, 874, 915, 914, 0, 232, 876, 875,
	235, 236, 237, 866, 938, 238, 974, 975, 479, 0,
	239, 945, 0, 928, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 948, 254, 255, 931, 929, 930, 935,
	933, 932, 934, 256, 257, 258, 259, 919, 261, 912,
	911, 836, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 910, 268, 0, 269, 0, 270, 271, 0, 272,
	842, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	965, 966, 855, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 909, 907, 908, 0, 288, 0, 289, 0,
	0, 949, 290, 291, 0, 292, 972, 0, 865, 293,
	0, 294, 295, 296, 297, 940, 941, 944, 345, 951,
	298, 299, 0, 300, 301, 886, 0, 0, 216, 302,
	304, 311, 0, 950, 305, 898, 889, 900, 902, 903,
	904, 899, 0, 891, 0, 312, 952, 942, 953, 313,
	314, 315, 954, 924, 925, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 973, 955, 325, 326,
	956, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 878, 338, 957,
	341, 342, 344, 343, 833, 217, 958, 856, 943, 913,
	346, 347, 0, 887, 349, 888, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 959, 357, 960, 967,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 968, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 906, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 961, 393, 394, 395, 396,
	843, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 0, 415, 416, 879, 880, 882, 883, 410, 414,
	417, 418, 936, 419, 399, 400, 420, 421, 962, 422,
	901, 881, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 947, 429, 430, 431, 969, 0, 436, 437, 435,
	0, 438, 439, 440, 441, 442, 277, 877, 0, 444,
	920, 921, 922, 923, 0, 451, 0, 445, 446, 970,
	447, 971, 854, 448, 449, 450, 0, 452, 453, 0,
	837, 454, 455, 456, 457, 458, 460, 937, 461, 0,
	885, 462, 463, 464, 513, 917, 964, 0, 466, 465,
	516, 0, 0, 0, 0, 467, 468, 517, 469, 470,
	471, 834, 0, 0, 0, 0, 0, 0, 0, 832,
	0, 0, 0, 0, 830, 831, 0, 0, 0, 0,
	0, 0, 0, 860, 0, 0, 1206, 858, 890, 847,
	848, 849, 845, 846, 859, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 939, 864, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 905, 884,
	916, 874, 915, 914, 0, 232, 876, 875, 235, 236,
	237, 866, 938, 238, 974, 975, 479, 0, 239, 945,
	0, 928, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 948, 254, 255, 931, 929, 930, 935, 933, 932,
	934, 256, 257, 258, 259, 919, 261, 912, 911, 836,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 910,
	268, 0, 269, 0, 270, 271, 0, 272, 842, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 965, 966,
	855, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	909, 907, 908, 0, 288, 0, 289, 0, 0, 949,
	290, 291, 0, 292, 972, 0, 865, 293, 0, 294,
	295, 296, 297, 1205, 941, 944, 345, 951, 298, 299,
	0, 300, 301, 886, 0, 0, 216, 302, 304, 311,
	0, 950, 305, 898, 889, 900, 902, 903, 904, 899,
	0, 891, 0, 312, 952, 942, 953, 313, 314, 315,
	954, 924, 925, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 973, 955, 325, 326, 956, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 878, 338, 957, 341, 342,
	344, 343, 833, 217, 958, 856, 943, 913, 346, 347,
	0, 887, 349, 888, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 959, 357, 960, 967, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	968, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 906, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 961, 393, 394, 395, 396, 843, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 879, 880, 882, 883, 410, 414, 417, 418,
	936, 419, 399, 400, 420, 421, 962, 422, 901, 881,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 947,
	429, 430, 431, 969, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 877, 0, 444, 920, 921,
	922, 923, 0, 451, 0, 445, 446, 970, 447, 971,
	854, 448, 449, 450, 0, 452, 453, 0, 837, 454,
	455, 456, 457, 458, 460, 937, 461, 0, 885, 462,
	463, 464, 513, 917, 964, 0, 466, 465, 516, 0,
	0, 0, 0, 467, 468, 517, 469, 470, 471, 834,
	0, 0, 0, 0, 0, 0, 0, 832, 0, 0,
	0, 0, 830, 831, 0, 0, 0, 0, 0, 0,
	0, 860, 0, 0, 1200, 858, 890, 847, 848, 849,
	845, 846, 859, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 939, 864, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 905, 884, 916, 874,
	915, 914, 0, 232, 876, 875, 235, 236, 237, 866,
	938, 238, 974, 975, 479, 0, 239, 945, 0, 928,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 948,
	254, 255, 931, 929, 930, 935, 933, 932, 934, 256,
	257, 258, 259, 919, 261, 912, 911, 836, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 910, 268, 0,
	269, 0, 270, 271, 0, 272, 842, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 965, 966, 855, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 909, 907,
	908, 0, 288, 0, 289, 0, 0, 949, 290, 291,
	0, 292, 972, 0, 865, 293, 0, 294, 295, 296,
	297, 1199, 941, 944, 345, 951, 298, 299, 0, 300,
	301, 886, 0, 0, 216, 302, 304, 311, 0, 950,
	305, 898, 889, 900, 902, 903, 904, 899, 0, 891,
	0, 312, 952, 942, 953, 313, 314, 315, 954, 924,
	925, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 973, 955, 325, 326, 956, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 878, 338, 957, 341, 342, 344, 343,
	833, 217, 958, 856, 943, 913, 346, 347, 0, 887,
	349, 888, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 959, 357, 960, 967, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 968, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 906, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 961, 393, 394, 395, 396, 843, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	879, 880, 882, 883, 410, 414, 417, 418, 936, 419,
	399, 400, 420, 421, 962, 422, 901, 881, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 947, 429, 430,
	431, 969, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 877, 0, 444, 920, 921, 922, 923,
	0, 451, 0, 445, 446, 970, 447, 971, 854, 448,
	449, 450, 0, 452, 453, 0, 837, 454, 455, 456,
	457, 458, 460, 937, 461, 0, 885, 462, 463, 464,
	513, 917, 964, 0, 466, 465, 516, 0, 0, 0,
	0, 467, 468, 517, 469, 470, 471, 834, 0, 0,
	0, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	830, 831, 0, 0, 0, 0, 0, 0, 0, 860,
	0, 0, 1195, 858, 890, 847, 848, 849, 845, 846,
	859, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 939, 864, 0, 0, 0, 224, 226,
	225, 227, 228, 473, 905, 884, 916, 874, 915, 914,
	0, 232, 876, 875, 235, 236, 237, 866, 938, 238,
	974, 975, 479, 0, 239, 945, 0, 928, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 948, 254, 255,
	931, 929, 930, 935, 933, 932, 934, 256, 257, 258,
	259, 919, 261, 912, 911, 836, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 910, 268, 0, 269, 0,
	270, 271, 0, 272, 842, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 965, 966, 855, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 909, 907, 908, 0,
	288, 0, 289, 0, 0, 949, 290, 291, 0, 292,
	972, 0, 865, 293, 0, 294, 295, 296, 297, 940,
	941, 944, 345, 951, 298, 299, 0, 300, 301, 886,
	0, 0, 216, 302, 304, 311, 0, 950, 305, 898,
	889, 900, 902, 903, 904, 899, 0, 891, 0, 312,
	952, 942, 953, 313, 314, 315, 954, 924, 925, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	973, 955, 325, 326, 956, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 878, 338, 957, 341, 342, 344, 343, 833, 217,
	958, 856, 943, 913, 346, 347, 0, 887, 349, 888,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	959, 357, 960, 967, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 968, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 906,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 961,
	393, 394, 395, 396, 843, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 879, 880,
	882, 883, 410, 414, 417, 418, 936, 419, 399, 400,
	420, 421, 962, 422, 901, 881, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 947, 429, 430, 431, 969,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 877, 0, 444, 920, 921, 922, 923, 0, 451,
	0, 445, 446, 970, 447, 971, 854, 448, 449, 450,
	0, 452, 453, 0, 837, 454, 455, 456, 457, 458,
	460, 937, 461, 0, 885, 462, 463, 464, 513, 917,
	964, 0, 466, 465, 516, 0, 0, 0, 0, 467,
	468, 517, 469, 470, 471, 834, 0, 0, 0, 0,
	0, 0, 0, 832, 0, 0, 0, 0, 830, 831,
	890, 847, 848, 849, 845, 846, 859, 860, 0, 0,
	0, 858, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 939,
	864, 0, 0, 0, 224, 226, 225, 227, 228, 473,
	905, 884, 916, 874, 915, 914, 0, 232, 876, 875,
	235, 236, 237, 866, 938, 238, 974, 975, 479, 0,
	239, 945, 0, 928, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 948, 254, 255, 931, 929, 930, 935,
	933, 932, 934, 256, 257, 258, 259, 919, 261, 912,
	911, 836, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 910, 268, 0, 269, 0, 270, 271, 0, 272,
	842, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	965, 966, 855, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 909, 907, 908, 0, 288, 0, 289, 0,
	0, 949, 290, 291, 0, 292, 972, 0, 865, 293,
	0, 294, 295, 296, 297, 940, 941, 944, 345, 951,
	298, 299, 0, 300, 301, 886, 0, 0, 216, 302,
	304, 311, 0, 950, 305, 898, 889, 900, 902, 903,
	904, 899, 0, 891, 0, 312, 952, 942, 953, 313,
	314, 315, 954, 924, 925, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 973, 955, 325, 326,
	956, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 878, 338, 957,
	341, 342, 344, 343, 833, 217, 958, 856, 943, 913,
	346, 347, 0, 887, 349, 888, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 959, 357, 960, 967,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 968, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 906, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 961, 393, 394, 395, 396,
	843, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 0, 415, 416, 879, 880, 882, 883, 410, 414,
	417, 418, 936, 419, 399, 400, 420, 421, 962, 422,
	901, 881, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 947, 429, 430, 431, 969, 0, 436, 437, 435,
	0, 438, 439, 440, 441, 442, 277, 877, 0, 444,
	920, 921, 922, 923, 0, 451, 0, 445, 446, 970,
	447, 971, 854, 448, 449, 450, 0, 452, 453, 0,
	837, 454, 455, 456, 457, 458, 460, 937, 461, 0,
	885, 462, 463, 464, 513, 917, 964, 0, 466, 465,
	516, 0, 0, 0, 0, 467, 468, 517, 469, 470,
	471, 834, 0, 0, 0, 0, 0, 0, 0, 832,
	0, 0, 0, 0, 830, 831, 890, 847, 848, 849,
	845, 846, 859, 860, 0, 0, 0, 858, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 939, 864, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 905, 884, 916, 874,
	915, 914, 0, 232, 876, 875, 235, 236, 237, 866,
	938, 238, 974, 975, 479, 0, 239, 945, 0, 928,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 948,
	254, 3468, 931, 929, 930, 935, 933, 932, 934, 256,
	257, 258, 259, 919, 261, 912, 911, 836, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 910, 268, 0,
	269, 0, 270, 271, 0, 272, 842, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 965, 966, 855, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 909, 907,
	908, 0, 288, 0, 289, 0, 0, 949, 290, 291,
	0, 292, 972, 0, 865, 293, 0, 294, 295, 296,
	297, 940, 941, 944, 345, 951, 298, 299, 0, 300,
	301, 886, 0, 0, 216, 302, 304, 311, 0, 950,
	305, 898, 889, 900, 902, 903, 904, 899, 0, 891,
	0, 312, 952, 942, 953, 313, 314, 315, 954, 924,
	925, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 973, 955, 325, 326, 956, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 878, 338, 957, 341, 342, 344, 343,
	833, 217, 958, 856, 943, 913, 346, 347, 0, 887,
	349, 888, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 959, 357, 960, 967, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 968, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 906, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 961, 393, 394, 395, 396, 843, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	879, 880, 882, 883, 410, 414, 417, 418, 936, 419,
	399, 400, 420, 421, 962, 422, 901, 881, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 947, 429, 430,
	431, 969, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 877, 0, 444, 920, 921, 922, 923,
	0, 451, 0, 445, 446, 970, 447, 971, 854, 448,
	449, 450, 0, 3467, 453, 0, 837, 454, 455, 456,
	457, 458, 460, 937, 461, 0, 885, 462, 463, 464,
	513, 917, 964, 0, 466, 465, 516, 0, 0, 0,
	0, 467, 468, 517, 469, 470, 471, 834, 0, 0,
	0, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	830, 831, 890, 847, 848, 849, 845, 846, 859, 860,
	0, 0, 0, 858, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 939, 864, 0, 0, 0, 224, 226, 225, 227,
	228, 3466, 905, 884, 916, 874, 915, 914, 0, 232,
	876, 875, 235, 236, 237, 866, 938, 238, 974, 975,
	479, 0, 239, 945, 0, 928, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 948, 254, 3468, 931, 929,
	930, 935, 933, 932, 934, 256, 257, 258, 259, 919,
	261, 912, 911, 836, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 910, 268, 0, 269, 0, 270, 271,
	0, 272, 842, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 965, 966, 855, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 909, 907, 908, 0, 288, 0,
	289, 0, 0, 949, 290, 291, 0, 292, 972, 0,
	865, 293, 0, 294, 295, 296, 297, 940, 941, 944,
	345, 951, 298, 299, 0, 300, 301, 886, 0, 0,
	216, 302, 304, 311, 0, 950, 305, 898, 889, 900,
	902, 903, 904, 899, 0, 891, 0, 312, 952, 942,
	953, 313, 314, 315, 954, 924, 925, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 973, 955,
	325, 326, 956, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 878,
	338, 957, 341, 342, 344, 343, 833, 217, 958, 856,
	943, 913, 346, 347, 0, 887, 349, 888, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 959, 357,
	960, 967, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 968, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 906, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 961, 393, 394,
	395, 396, 843, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 879, 880, 882, 883,
	410, 414, 417, 418, 936, 419, 399, 400, 420, 421,
	962, 422, 901, 881, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 947, 429, 430, 431, 969, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 877,
	0, 444, 920, 921, 922, 923, 0, 451, 0, 445,
	446, 970, 447, 971, 854, 448, 449, 450, 0, 3467,
	453, 0, 837, 454, 455, 456, 457, 458, 460, 937,
	461, 0, 885, 462, 463, 464, 513, 917, 964, 0,
	466, 465, 516, 0, 0, 0, 0, 467, 468, 517,
	469, 470, 471, 834, 0, 0, 0, 0, 0, 0,
	0, 832, 0, 0, 0, 0, 830, 831, 890, 847,
	848, 849, 845, 846, 859, 860, 0, 0, 0, 858,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 939, 864, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 905, 884,
	916, 874, 915, 914, 0, 232, 876, 875, 235, 236,
	237, 866, 938, 238, 974, 975, 479, 0, 239, 945,
	0, 928, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 948, 254, 255, 931, 929, 930, 935, 933, 932,
	934, 256, 257, 258, 259, 919, 261, 912, 911, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 910,
	268, 0, 269, 0, 270, 271, 0, 272, 842, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 965, 966,
	855, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	909, 907, 908, 0, 288, 0, 289, 0, 0, 949,
	290, 291, 0, 292, 972, 0, 865, 293, 0, 294,
	295, 296, 297, 940, 941, 944, 345, 951, 298, 299,
	0, 300, 301, 886, 0, 0, 216, 302, 304, 311,
	0, 950, 305, 898, 889, 900, 902, 903, 904, 899,
	0, 891, 0, 312, 952, 942, 953, 313, 314, 315,
	954, 924, 925, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 973, 955, 325, 326, 956, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 878, 338, 957, 341, 342,
	344, 343, 0, 217, 958, 856, 943, 913, 346, 347,
	0, 887, 349, 888, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 959, 357, 960, 967, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	968, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 906, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 961, 393, 394, 395, 396, 843, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 879, 880, 882, 883, 410, 414, 417, 418,
	936, 419, 399, 400, 420, 421, 962, 422, 901, 881,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 947,
	429, 430, 431, 969, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 877, 0, 444, 920, 921,
	922, 923, 0, 451, 0, 445, 446, 970, 447, 971,
	854, 448, 449, 450, 0, 452, 453, 0, 0, 454,
	455, 456, 457, 458, 460, 937, 461, 0, 885, 462,
	463, 464, 513, 917, 964, 0, 466, 465, 516, 0,
	0, 0, 0, 467, 468, 517, 469, 470, 471, 890,
	847, 848, 849, 845, 846, 859, 0, 2133, 0, 0,
	0, 0, 2131, 2132, 0, 0, 218, 219, 220, 221,
	222, 860, 223, 0, 0, 858, 0, 0, 939, 864,
	0, 0, 0, 224, 226, 225, 227, 228, 0, 905,
	884, 916, 874, 915, 914, 0, 232, 876, 875, 235,
	236, 237, 866, 938, 238, 974, 975, 479, 0, 239,
	945, 0, 928, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 948, 254, 3468, 931, 929, 930, 935, 933,
	932, 934, 256, 257, 258, 259, 919, 261, 912, 911,
	836, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	910, 268, 0, 269, 0, 270, 271, 0, 272, 842,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 965,
	966, 855, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 909, 907, 908, 0, 288, 0, 289, 0, 0,
	949, 290, 291, 0, 292, 972, 0, 865, 293, 0,
	294, 295, 296, 297, 940, 941, 944, 345, 0, 298,
	299, 0, 300, 301, 886, 0, 0, 216, 302, 304,
	311, 0, 950, 305, 898, 889, 900, 902, 903, 904,
	899, 0, 891, 0, 312, 0, 942, 0, 313, 314,
	315, 954, 924, 925, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 973, 955, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 878, 338, 957, 341,
	342, 344, 343, 833, 217, 0, 856, 943, 913, 346,
	347, 0, 887, 349, 888, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 959, 357, 960, 967, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 968, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 906, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 961, 393, 394, 395, 396, 843,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 879, 880, 882, 883, 410, 414, 417,
	418, 936, 419, 399, 400, 420, 421, 0, 422, 901,
	881, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	947, 429, 430, 431, 969, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 877, 0, 444, 920,
	921, 922, 923, 0, 451, 0, 445, 446, 970, 447,
	971, 854, 448, 449, 450, 0, 3467, 453, 0, 837,
	454, 455, 456, 457, 458, 460, 937, 461, 0, 885,
	462, 463, 464, 513, 917, 964, 0, 466, 465, 516,
	0, 0, 0, 0, 467, 468, 517, 469, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 823, 0,
	1011, 0, 0, 830, 831, 0, 0, 0, 0, 0,
	0, 0, 860, 0, 0, 0, 858, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 939,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 473,
	474, 229, 475, 230, 231, 476, 0, 232, 233, 234,
	235, 236, 237, 0, 938, 238, 477, 478, 479, 0,
	239, 945, 0, 928, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 948, 254, 255, 931, 929, 930, 935,
	933, 932, 934, 256, 257, 258, 259, 260, 261, 481,
	482, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	483, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	965, 966, 0, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 486, 286, 287, 0, 288, 0, 289, 0,
	0, 949, 290, 291, 0, 292, 972, 0, 488, 293,
	0, 294, 295, 296, 297, 940, 941, 944, 345, 951,
	298, 299, 0, 300, 301, 303, 0, 0, 216, 302,
	304, 311, 0, 950, 305, 492, 307, 306, 308, 309,
	310, 493, 0, 494, 0, 312, 952, 942, 953, 313,
	314, 315, 954, 316, 317, 0, 0, 318, 319, 320,
	321, 998, 323, 322, 0, 324, 973, 955, 325, 326,
	956, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 340, 338, 957,
	341, 342, 344, 343, 0, 217, 958, 0, 943, 498,
	346, 347, 0, 348, 349, 350, 0, 1003, 352, 353,
	354, 0, 0, 355, 356, 499, 959, 357, 960, 967,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 968, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 503, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 961, 393, 394, 395, 396,
	504, 1005, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 181, 415, 416, 409, 411, 412, 413, 410, 414,
	417, 418, 936, 419, 399, 400, 420, 421, 962, 422,
	505, 423, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 433, 429, 430, 431, 969, 0, 436, 437, 435,
	183, 438, 439, 440, 441, 442, 277, 443, 0, 444,
	507, 508, 509, 510, 0, 451, 0, 445, 446, 970,
	447, 971, 0, 448, 449, 450, 0, 452, 453, 0,
	0, 454, 455, 456, 457, 458, 460, 937, 461, 0,
	459, 462, 463, 464, 1316, 514, 515, 0, 466, 465,
	516, 1011, 0, 0, 175, 467, 468, 517, 469, 470,
	471, 0, 176, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	939, 995, 0, 1612, 0, 224, 226, 225, 227, 228,
	473, 474, 229, 475, 230, 231, 476, 0, 232, 233,
	234, 235, 236, 237, 0, 938, 238, 477, 478, 479,
	0, 239, 945, 0, 928, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 948, 254, 255, 931, 929, 930,
	935, 933, 932, 934, 256, 257, 258, 259, 260, 261,
	481, 482, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 483, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 965, 966, 0, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 486, 286, 287, 0, 288, 0, 289,
	0, 0, 949, 290, 291, 0, 292, 972, 0, 488,
	293, 0, 294, 295, 296, 297, 940, 941, 944, 345,
	951, 298, 299, 0, 300, 301, 303, 0, 0, 216,
	302, 304, 311, 0, 950, 305, 492, 307, 306, 308,
	309, 310, 493, 0, 494, 0, 312, 952, 942, 953,
	313, 314, 315, 954, 316, 317, 0, 0, 318, 319,
	320, 321, 998, 323, 322, 0, 324, 973, 955, 325,
	326, 956, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 340, 338,
	957, 341, 342, 344, 343, 0, 217, 958, 0, 943,
	498, 346, 347, 0, 348, 349, 350, 0, 1003, 352,
	353, 354, 0, 0, 355, 356, 499, 959, 357, 960,
	967, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 968, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 503, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 961, 393, 394, 395,
	396, 504, 1005, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 181, 415, 416, 409, 411, 412, 413, 410,
	414, 417, 418, 936, 419, 399, 400, 420, 421, 962,
	422, 505, 423, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 433, 429, 430, 431, 969, 0, 436, 437,
	435, 183, 438, 439, 440, 441, 442, 277, 443, 0,
	444, 507, 508, 509, 510, 0, 451, 0, 445, 446,
	970, 447, 971, 0, 448, 449, 450, 0, 452, 453,
	0, 0, 454, 455, 456, 457, 458, 460, 937, 461,
	0, 459, 462, 463, 464, 1316, 514, 515, 0, 466,
	465, 516, 2587, 0, 1011, 175, 467, 468, 517, 469,
	470, 471, 0, 176, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 995, 939, 1612, 0, 0, 0, 224, 226,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	0, 232, 233, 234, 235, 236, 237, 0, 938, 238,
	477, 478, 479, 0, 239, 945, 0, 928, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 948, 254, 255,
	931, 929, 930, 935, 933, 932, 934, 256, 257, 258,
	259, 260, 261, 481, 482, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 965, 966, 0, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 0, 289, 0, 0, 949, 290, 291, 0, 292,
	972, 0, 488, 293, 0, 294, 295, 296, 297, 940,
	941, 944, 345, 951, 298, 299, 0, 300, 301, 303,
	0, 0, 216, 302, 304, 311, 0, 950, 305, 492,
	307, 306, 308, 309, 310, 493, 0, 494, 0, 312,
	952, 942, 953, 313, 314, 315, 954, 316, 317, 0,
	0, 318, 319, 320, 321, 998, 323, 322, 0, 324,
	973, 955, 325, 326, 956, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 338, 957, 341, 342, 344, 343, 0, 217,
	958, 0, 943, 498, 346, 347, 0, 348, 349, 350,
	0, 1003, 352, 353, 354, 0, 0, 355, 356, 499,
	959, 357, 960, 967, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 968, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 503,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 961,
	393, 394, 395, 396, 504, 1005, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 409, 411,
	412, 413, 410, 414, 417, 418, 936, 419, 399, 400,
	420, 421, 962, 422, 505, 423, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 969,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 443, 0, 444, 507, 508, 509, 510, 0, 451,
	0, 445, 446, 970, 447, 971, 0, 448, 449, 450,
	0, 452, 453, 0, 0, 454, 455, 456, 457, 458,
	460, 937, 461, 0, 459, 462, 463, 464, 513, 514,
	515, 0, 466, 465, 516, 994, 0, 1011, 0, 467,
	468, 517, 469, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 995, 939, 1000, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 0, 232, 233, 234, 235, 236, 237,
	0, 938, 238, 477, 478, 479, 0, 239, 945, 0,
	928, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	948, 254, 255, 931, 929, 930, 935, 933, 932, 934,
	256, 257, 258, 259, 260, 261, 481, 482, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 965, 966, 0,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 0, 289, 0, 0, 949, 290,
	291, 0, 292, 972, 0, 488, 293, 0, 294, 295,
	296, 297, 940, 941, 944, 345, 951, 298, 299, 0,
	300, 301, 303, 0, 0, 216, 302, 304, 311, 0,
	950, 305, 492, 307, 306, 308, 309, 310, 493, 0,
	494, 0, 312, 952, 942, 953, 313, 314, 315, 954,
	316, 317, 0, 0, 318, 319, 320, 321, 998, 323,
	322, 0, 324, 973, 955, 325, 326, 956, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 957, 341, 342, 344,
	343, 0, 217, 958, 0, 943, 498, 346, 347, 0,
	348, 349, 350, 0, 1003, 352, 353, 354, 0, 0,
	355, 356, 499, 959, 357, 960, 967, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 968,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 961, 393, 394, 395, 396, 504, 1005, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 936,
	419, 399, 400, 420, 421, 962, 422, 505, 423, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 969, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 443, 0, 444, 507, 508, 509,
	510, 0, 451, 0, 445, 446, 970, 447, 971, 0,
	448, 449, 450, 0, 452, 453, 0, 0, 454, 455,
	456, 457, 458, 460, 937, 461, 0, 459, 462, 463,
	464, 513, 514, 515, 0, 466, 465, 516, 1011, 0,
	0, 0, 467, 468, 517, 469, 470, 471, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 939, 995, 0,
	1000, 0, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 0, 232, 233, 234, 235, 236,
	237, 0, 938, 238, 477, 478, 479, 0, 239, 945,
	0, 928, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 948, 254, 255, 931, 929, 930, 935, 933, 932,
	934, 256, 257, 258, 259, 260, 261, 481, 482, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 965, 966,
	0, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 0, 289, 0, 0, 949,
	290, 291, 0, 292, 972, 0, 488, 293, 0, 294,
	295, 296, 297, 940, 941, 944, 345, 951, 298, 299,
	0, 300, 301, 303, 0, 0, 216, 302, 304, 311,
	0, 950, 305, 492, 307, 306, 308, 309, 310, 493,
	0, 494, 0, 312, 952, 942, 953, 313, 314, 315,
	954, 316, 317, 0, 0, 318, 319, 320, 321, 998,
	323, 322, 0, 324, 973, 955, 325, 326, 956, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 957, 341, 342,
	344, 343, 0, 217, 958, 0, 943, 498, 346, 347,
	0, 348, 349, 350, 0, 1003, 352, 353, 354, 0,
	0, 355, 356, 499, 959, 357, 960, 967, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	968, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 961, 393, 394, 395, 396, 504, 1005,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	936, 419, 399, 400, 420, 421, 962, 422, 505, 423,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 969, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 443, 0, 444, 507, 508,
	509, 510, 0, 451, 0, 445, 446, 970, 447, 971,
	0, 448, 449, 450, 0, 452, 453, 0, 0, 454,
	455, 456, 457, 458, 460, 937, 461, 0, 459, 462,
	463, 464, 513, 514, 515, 0, 466, 465, 516, 1011,
	0, 0, 0, 467, 468, 517, 469, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 939, 995,
	0, 1000, 0, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 0, 232, 233, 234, 235,
	236, 237, 0, 938, 238, 477, 478, 479, 0, 239,
	945, 0, 928, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 948, 254, 255, 931, 929, 930, 935, 933,
	932, 934, 256, 257, 258, 259, 260, 261, 481, 482,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 965,
	966, 0, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 0, 289, 0, 0,
	949, 290, 291, 0, 292, 972, 0, 488, 293, 0,
	294, 295, 296, 297, 940, 941, 944, 345, 951, 298,
	299, 0, 300, 301, 303, 0, 0, 216, 302, 304,
	311, 0, 950, 305, 492, 307, 306, 308, 309, 310,
	493, 0, 494, 0, 312, 952, 942, 953, 313, 314,
	315, 954, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 973, 955, 325, 326, 956,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 957, 341,
	342, 344, 343, 0, 217, 958, 0, 943, 498, 346,
	347, 0, 348, 349, 350, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 959, 357, 960, 967, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 968, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 961, 393, 394, 395, 396, 504,
	1005, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 936, 419, 399, 400, 420, 421, 962, 422, 505,
	423, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 969, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 443, 0, 444, 507,
	508, 509, 510, 0, 451, 0, 445, 446, 970, 447,
	971, 0, 448, 449, 450, 0, 452, 453, 0, 0,
	454, 455, 456, 457, 458, 460, 937, 461, 0, 459,
	462, 463, 464, 513, 514, 515, 0, 466, 465, 516,
	823, 0, 1170, 0, 467, 468, 517, 469, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 472, 1507, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 0, 239, 480, 0, 1074, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 948, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 949, 290, 291, 0, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 489, 490, 491,
	345, 951, 298, 299, 0, 300, 301, 303, 0, 0,
	0, 302, 304, 311, 0, 950, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 952, 495,
	953, 313, 314, 315, 954, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 955,
	325, 326, 956, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 957, 341, 342, 344, 343, 0, 0, 958, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 959, 357,
	960, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 961, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 181, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	962, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 183, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 1316, 514, 515, 0,
	466, 465, 516, 1313, 0, 1170, 175, 467, 468, 517,
	469, 470, 471, 0, 176, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 472, 150, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 477, 478, 479, 0, 239, 480, 0, 1074, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 948, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 0, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 949, 290, 291, 0,
	292, 487, 0, 488, 293, 0, 294, 295, 296, 297,
	489, 490, 491, 345, 951, 298, 299, 0, 300, 301,
	303, 0, 0, 0, 302, 304, 311, 0, 950, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 952, 495, 953, 313, 314, 315, 954, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 496, 955, 325, 326, 956, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 957, 341, 342, 344, 343, 0,
	0, 958, 0, 497, 498, 346, 347, 0, 348, 349,
	350, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 959, 357, 960, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 501, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	961, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 181, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 0, 419, 399,
	400, 420, 421, 962, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 0, 436, 437, 435, 183, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 507, 508, 509, 510, 0,
	451, 0, 445, 446, 511, 447, 512, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 1316,
	514, 515, 0, 466, 465, 516, 0, 0, 0, 175,
	467, 468, 517, 469, 470, 471, 0, 176, 0, 0,
	0, 0, 1170, 1169, 0, 0, 0, 0, 1167, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 150, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 472, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 0, 239, 480, 0, 1074, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 948, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 949, 290, 291, 0, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 489, 490, 491,
	345, 951, 298, 299, 0, 300, 301, 303, 0, 0,
	0, 302, 304, 311, 0, 950, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 952, 495,
	953, 313, 314, 315, 954, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 955,
	325, 326, 956, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 957, 341, 342, 344, 343, 0, 0, 958, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 959, 357,
	960, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 961, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	962, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 0,
	466, 465, 516, 0, 0, 0, 0, 467, 468, 517,
	469, 470, 471, 1170, 1169, 0, 0, 0, 0, 1167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 1791, 223, 0, 0, 0,
	0, 0, 472, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 477,
	478, 479, 0, 239, 480, 0, 1074, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 948, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 0, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 949, 290, 291, 0, 292, 487,
	0, 488, 293, 0, 294, 295, 296, 297, 489, 490,
	491, 345, 951, 298, 299, 0, 300, 301, 303, 0,
	0, 0, 302, 304, 311, 0, 950, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 952,
	495, 953, 313, 314, 315, 954, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 496,
	955, 325, 326, 956, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 957, 341, 342, 344, 343, 0, 0, 958,
	0, 497, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 959,
	357, 960, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 501, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 961, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 0, 419, 399, 400, 420,
	421, 962, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 511, 447, 512, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 513, 514, 515,
	0, 466, 465, 516, 0, 0, 0, 0, 467, 468,
	517, 469, 470, 471, 1170, 1169, 0, 0, 0, 0,
	1167, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 2782, 223, 0, 0,
	0, 0, 0, 472, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	477, 478, 479, 0, 239, 480, 0, 1074, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 948, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 481, 482, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 484, 485, 0, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 0, 289, 0, 0, 949, 290, 291, 0, 292,
	487, 0, 488, 293, 0, 294, 295, 296, 297, 489,
	490, 491, 345, 951, 298, 299, 0, 300, 301, 303,
	0, 0, 0, 302, 304, 311, 0, 950, 305, 492,
	307, 306, 308, 309, 310, 493, 0, 494, 0, 312,
	952, 495, 953, 313, 314, 315, 954, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	496, 955, 325, 326, 956, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 338, 957, 341, 342, 344, 343, 0, 0,
	958, 0, 497, 498, 346, 347, 0, 348, 349, 350,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	959, 357, 960, 500, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 501, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 503,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 961,
	393, 394, 395, 396, 504, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 409, 411,
	412, 413, 410, 414, 417, 418, 0, 419, 399, 400,
	420, 421, 962, 422, 505, 423, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 506,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 443, 0, 444, 507, 508, 509, 510, 0, 451,
	0, 445, 446, 511, 447, 512, 0, 448, 449, 450,
	0, 452, 453, 0, 0, 454, 455, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 513, 514,
	515, 0, 466, 465, 516, 1011, 0, 0, 0, 467,
	468, 517, 469, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 939, 0, 0, 1320, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 938,
	238, 477, 478, 479, 0, 239, 945, 0, 928, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 948, 254,
	255, 931, 929, 930, 935, 933, 932, 934, 256, 257,
	258, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 965, 966, 0, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 949, 290, 291, 0,
	292, 972, 0, 488, 293, 0, 294, 295, 296, 297,
	940, 941, 944, 345, 951, 298, 299, 0, 300, 301,
	303, 0, 0, 216, 302, 304, 311, 0, 950, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 952, 942, 953, 313, 314, 315, 954, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 973, 955, 325, 326, 956, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 957, 341, 342, 344, 343, 0,
	217, 958, 0, 943, 498, 346, 347, 0, 348, 349,
	350, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 959, 357, 960, 967, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 968, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	961, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 936, 419, 399,
	400, 420, 421, 962, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	969, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 507, 508, 509, 510, 0,
	451, 0, 445, 446, 970, 447, 971, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 937, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 0, 466, 465, 516, 823, 0, 212, 0,
	467, 468, 517, 469, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 472, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 477, 478, 479, 0, 239, 480,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 481, 482, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	0, 0, 0, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 0, 292, 487, 0, 488, 293, 0, 294,
	295, 296, 297, 489, 490, 491, 345, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 0, 302, 304, 311,
	0, 0, 305, 492, 307, 306, 308, 309, 310, 493,
	0, 494, 0, 312, 0, 495, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 496, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 0, 341, 342,
	344, 343, 0, 0, 0, 0, 497, 498, 346, 347,
	0, 348, 349, 350, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 0, 357, 0, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	501, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 0, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 181,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	0, 419, 399, 400, 420, 421, 0, 422, 505, 423,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 0, 436, 437, 435, 183, 438,
	439, 440, 441, 442, 277, 443, 0, 444, 507, 508,
	509, 510, 0, 451, 0, 445, 446, 511, 447, 512,
	0, 448, 449, 450, 0, 452, 453, 0, 0, 454,
	455, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 1316, 514, 515, 0, 466, 465, 516, 212,
	0, 0, 175, 467, 468, 517, 469, 470, 471, 0,
	176, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 472, 0,
	0, 150, 0, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 477, 478, 479, 0, 239,
	480, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 481, 482,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 0, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 0, 289, 0, 0,
	0, 290, 291, 0, 292, 487, 0, 488, 293, 0,
	294, 295, 296, 297, 489, 490, 491, 345, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 216, 302, 304,
	311, 0, 0, 305, 492, 307, 306, 308, 309, 310,
	493, 0, 494, 0, 312, 0, 495, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 496, 0, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 0, 341,
	342, 344, 343, 0, 217, 0, 0, 497, 498, 346,
	347, 0, 348, 349, 350, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 0, 357, 0, 500, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 501, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 0, 393, 394, 395, 396, 504,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 0, 419, 399, 400, 420, 421, 0, 422, 505,
	423, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 443, 0, 444, 507,
	508, 509, 510, 0, 451, 0, 445, 446, 511, 447,
	512, 0, 448, 449, 450, 0, 452, 453, 0, 0,
	454, 455, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 513, 514, 515, 0, 466, 465, 516,
	212, 0, 0, 0, 467, 468, 517, 469, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 472,
	0, 0, 1617, 0, 224, 226, 225, 227, 228, 473,
	474, 229, 475, 230, 231, 476, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 477, 478, 479, 0,
	239, 480, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 481,
	482, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	483, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	484, 485, 0, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 486, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 487, 0, 488, 293,
	0, 294, 295, 296, 297, 489, 490, 491, 345, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 216, 302,
	304, 311, 0, 0, 305, 492, 307, 306, 308, 309,
	310, 493, 0, 494, 0, 312, 0, 495, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 496, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 340, 338, 0,
	341, 342, 344, 343, 0, 217, 0, 0, 497, 498,
	346, 347, 0, 348, 349, 350, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 0, 357, 0, 500,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 501, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 503, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 0, 393, 394, 395, 396,
	504, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 0, 415, 416, 409, 411, 412, 413, 410, 414,
	417, 418, 0, 419, 399, 400, 420, 421, 0, 422,
	505, 423, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 433, 429, 430, 431, 506, 0, 436, 437, 435,
	0, 438, 439, 440, 441, 442, 277, 443, 0, 444,
	507, 508, 509, 510, 0, 451, 0, 445, 446, 511,
	447, 512, 0, 448, 449, 450, 0, 452, 453, 0,
	0, 454, 455, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 513, 514, 515, 0, 466, 465,
	516, 212, 0, 0, 0, 467, 468, 517, 469, 470,
	471, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	472, 2735, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 474, 229, 475, 230, 231, 476, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 477, 478, 479,
	0, 239, 480, 0, 0, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 0, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	481, 482, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 483, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 484, 485, 0, 0, 0, 0, 0, 0, 0,
	283, 284, 285, 486, 286, 287, 0, 288, 0, 289,
	0, 0, 0, 290, 291, 0, 292, 487, 0, 488,
	293, 0, 294, 295, 296, 297, 489, 490, 491, 345,
	0, 298, 299, 0, 300, 301, 303, 0, 0, 0,
	302, 304, 311, 0, 0, 305, 492, 307, 306, 308,
	309, 310, 493, 0, 494, 0, 312, 0, 495, 0,
	313, 314, 315, 0, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 496, 0, 325,
	326, 0, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 340, 338,
	0, 341, 342, 344, 343, 0, 0, 0, 0, 497,
	498, 346, 347, 0, 348, 349, 350, 0, 0, 352,
	353, 354, 0, 0, 355, 356, 499, 0, 357, 0,
	500, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 501, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 503, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 0, 393, 394, 395,
	396, 504, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 0, 415, 416, 409, 411, 412, 413, 410,
	414, 417, 418, 0, 419, 399, 400, 420, 421, 0,
	422, 505, 423, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 433, 429, 430, 431, 506, 0, 436, 437,
	435, 0, 438, 439, 440, 441, 442, 277, 443, 0,
	444, 507, 508, 509, 510, 0, 451, 0, 445, 446,
	511, 447, 512, 0, 448, 449, 450, 0, 452, 453,
	0, 0, 454, 455, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 513, 514, 515, 0, 466,
	465, 516, 212, 0, 0, 0, 467, 468, 517, 469,
	470, 471, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 472, 0, 0, 2368, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 0, 239, 480, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 0, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 489, 490, 491,
	345, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	0, 302, 304, 311, 0, 0, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 0, 495,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 0, 341, 342, 344, 343, 0, 0, 0, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 0, 357,
	0, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 0, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	0, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 0,
	466, 465, 516, 212, 0, 0, 0, 467, 468, 517,
	469, 470, 471, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 472, 0, 0, 2860, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 477,
	478, 479, 0, 239, 480, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 0, 0, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 487,
	0, 488, 293, 0, 294, 295, 296, 297, 489, 490,
	491, 345, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 0, 302, 304, 311, 0, 0, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 0,
	495, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 496,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 0, 341, 342, 344, 343, 0, 0, 0,
	0, 497, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 0,
	357, 0, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 501, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 0, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 0, 419, 399, 400, 420,
	421, 0, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 511, 447, 512, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 513, 514, 515,
	0, 466, 465, 516, 693, 0, 584, 0, 467, 468,
	517, 469, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 472, 1881, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 239, 480, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 590, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 489, 490, 491, 345, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 216, 302, 304, 311, 0, 0,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 0, 495, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 0, 341, 342, 344, 343,
	0, 217, 0, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 0, 357, 0, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 0, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 419,
	399, 400, 420, 421, 0, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 589, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 0, 466, 465, 516, 0, 583, 0,
	584, 467, 468, 517, 469, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 593, 223, 0, 0, 0, 0, 0, 472,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 473,
	474, 229, 475, 230, 231, 476, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 477, 478, 479, 0,
	239, 480, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 590, 259, 260, 261, 481,
	482, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	483, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	484, 485, 0, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 486, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 487, 0, 488, 293,
	0, 294, 295, 296, 297, 489, 490, 491, 345, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 216, 302,
	304, 311, 0, 0, 305, 492, 307, 306, 308, 309,
	310, 493, 0, 494, 0, 312, 0, 495, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 496, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 340, 338, 0,
	341, 342, 344, 343, 0, 217, 0, 0, 497, 498,
	346, 347, 0, 348, 349, 350, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 0, 357, 0, 500,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 501, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 503, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 0, 393, 394, 395, 396,
	504, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 0, 415, 416, 409, 411, 412, 413, 410, 414,
	417, 418, 0, 419, 399, 400, 420, 421, 0, 422,
	505, 423, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 433, 429, 430, 431, 506, 0, 436, 437, 435,
	589, 438, 439, 440, 441, 442, 277, 443, 0, 444,
	507, 508, 509, 510, 0, 451, 0, 445, 446, 511,
	447, 512, 0, 448, 449, 450, 0, 452, 453, 0,
	0, 454, 455, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 513, 514, 515, 0, 466, 465,
	516, 584, 0, 0, 0, 467, 468, 517, 469, 470,
	471, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 593, 0, 0, 0,
	472, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 474, 229, 475, 230, 231, 476, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 477, 478, 479,
	0, 239, 480, 0, 0, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 0, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 590, 259, 260, 261,
	481, 482, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 483, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 484, 485, 0, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 486, 286, 287, 0, 288, 0, 289,
	0, 0, 0, 290, 291, 0, 292, 487, 0, 488,
	293, 0, 294, 295, 296, 297, 489, 490, 491, 345,
	0, 298, 299, 0, 300, 301, 303, 0, 0, 216,
	302, 304, 311, 0, 0, 305, 492, 307, 306, 308,
	309, 310, 493, 0, 494, 0, 312, 0, 495, 0,
	313, 314, 315, 0, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 496, 0, 325,
	326, 0, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 340, 338,
	0, 341, 342, 344, 343, 0, 217, 0, 0, 497,
	498, 346, 347, 0, 348, 349, 350, 0, 0, 352,
	353, 354, 0, 0, 355, 356, 499, 0, 357, 0,
	500, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 501, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 503, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 0, 1911, 394, 395,
	396, 504, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 0, 415, 416, 409, 411, 412, 413, 410,
	414, 417, 418, 0, 419, 399, 400, 420, 421, 0,
	422, 505, 423, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 433, 429, 430, 431, 506, 0, 436, 437,
	435, 589, 438, 439, 440, 441, 442, 277, 443, 0,
	444, 507, 508, 509, 510, 0, 451, 0, 445, 446,
	511, 447, 512, 0, 448, 449, 450, 0, 452, 453,
	0, 0, 454, 455, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 513, 514, 515, 0, 466,
	465, 516, 584, 0, 0, 0, 467, 468, 517, 469,
	470, 471, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 593, 0, 0,
	0, 472, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 0, 239, 480, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 590, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 489, 490, 491,
	345, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	216, 302, 304, 311, 0, 0, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 0, 495,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 0, 341, 342, 344, 343, 0, 217, 0, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 0, 357,
	0, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 0, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	0, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 589, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 0,
	466, 465, 516, 212, 0, 0, 0, 467, 468, 517,
	469, 470, 471, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 593, 0,
	0, 0, 472, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 477,
	478, 479, 0, 239, 480, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 0, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 487,
	0, 488, 293, 0, 294, 295, 296, 297, 489, 490,
	491, 345, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 216, 302, 304, 311, 0, 0, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 0,
	495, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 496,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 0, 341, 342, 344, 343, 0, 217, 0,
	0, 497, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 0,
	357, 0, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 501, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 0, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 0, 419, 399, 400, 420,
	421, 0, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 511, 447, 512, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 513, 514, 515,
	0, 466, 465, 516, 0, 0, 0, 0, 467, 468,
	517, 469, 470, 471, 1345, 0, 1170, 1169, 0, 0,
	0, 0, 1167, 0, 0, 0, 0, 0, 0, 593,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 472, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 239, 480, 0, 1074,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 948,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 215,
	0, 0, 0, 0, 0, 1344, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 949, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 489, 490, 491, 345, 951, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 950,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 952, 495, 953, 313, 314, 315, 954, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 955, 325, 326, 956, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 957, 341, 342, 344, 343,
	0, 0, 958, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 959, 357, 960, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 1343,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 961, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 1342, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 419,
	399, 400, 420, 421, 962, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 0, 466, 465, 516, 0, 0, 0,
	0, 467, 468, 517, 469, 470, 471, 1311, 0, 1170,
	1169, 0, 0, 0, 0, 1167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 472, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 477, 478, 479, 0, 239,
	480, 0, 1074, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 948, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 481, 482,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 0, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 0, 289, 0, 0,
	949, 290, 291, 0, 292, 487, 0, 488, 293, 0,
	294, 295, 296, 297, 1310, 490, 491, 345, 951, 298,
	299, 0, 300, 301, 303, 0, 0, 0, 302, 304,
	311, 0, 950, 305, 492, 307, 306, 308, 309, 310,
	493, 0, 494, 0, 312, 952, 495, 953, 313, 314,
	315, 954, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 496, 955, 325, 326, 956,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 957, 341,
	342, 344, 343, 0, 0, 958, 0, 497, 498, 346,
	347, 0, 348, 349, 350, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 959, 357, 960, 500, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 501, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 961, 393, 394, 395, 396, 504,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 0, 419, 399, 400, 420, 421, 962, 422, 505,
	423, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 443, 0, 444, 507,
	508, 509, 510, 0, 451, 0, 445, 446, 511, 447,
	512, 0, 448, 449, 450, 0, 452, 453, 0, 0,
	454, 455, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 513, 514, 515, 0, 466, 465, 516,
	0, 0, 0, 0, 467, 468, 517, 469, 470, 471,
	1307, 0, 1170, 1169, 0, 0, 0, 0, 1167, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 472, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 0, 239, 480, 0, 1074, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 948, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 949, 290, 291, 0, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 1306, 490, 491,
	345, 951, 298, 299, 0, 300, 301, 303, 0, 0,
	0, 302, 304, 311, 0, 950, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 952, 495,
	953, 313, 314, 315, 954, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 955,
	325, 326, 956, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 957, 341, 342, 344, 343, 0, 0, 958, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 959, 357,
	960, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 961, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	962, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 0,
	466, 465, 516, 0, 0, 0, 0, 467, 468, 517,
	469, 470, 471, 1245, 0, 1170, 1169, 0, 0, 0,
	0, 1167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 472, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 477, 478, 479, 0, 239, 480, 0, 1074, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 948, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 0, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 949, 290, 291, 0,
	292, 487, 0, 488, 293, 0, 294, 295, 296, 297,
	1244, 490, 491, 345, 951, 298, 299, 0, 300, 301,
	303, 0, 0, 0, 302, 304, 311, 0, 950, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 952, 495, 953, 313, 314, 315, 954, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 496, 955, 325, 326, 956, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 957, 341, 342, 344, 343, 0,
	0, 958, 0, 497, 498, 346, 347, 0, 348, 349,
	350, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 959, 357, 960, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 501, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	961, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 0, 419, 399,
	400, 420, 421, 962, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 507, 508, 509, 510, 0,
	451, 0, 445, 446, 511, 447, 512, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 0, 466, 465, 516, 0, 0, 0, 0,
	467, 468, 517, 469, 470, 471, 1242, 0, 1170, 1169,
	0, 0, 0, 0, 1167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 472, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 477, 478, 479, 0, 239, 480,
	0, 1074, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 948, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 481, 482, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	0, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 0, 289, 0, 0, 949,
	290, 291, 0, 292, 487, 0, 488, 293, 0, 294,
	295, 296, 297, 1241, 490, 491, 345, 951, 298, 299,
	0, 300, 301, 303, 0, 0, 0, 302, 304, 311,
	0, 950, 305, 492, 307, 306, 308, 309, 310, 493,
	0, 494, 0, 312, 952, 495, 953, 313, 314, 315,
	954, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 496, 955, 325, 326, 956, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 957, 341, 342,
	344, 343, 0, 0, 958, 0, 497, 498, 346, 347,
	0, 348, 349, 350, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 959, 357, 960, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	501, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 961, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	0, 419, 399, 400, 420, 421, 962, 422, 505, 423,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 443, 0, 444, 507, 508,
	509, 510, 0, 451, 0, 445, 446, 511, 447, 512,
	0, 448, 449, 450, 0, 452, 453, 0, 0, 454,
	455, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 513, 514, 515, 0, 466, 465, 516, 0,
	0, 0, 0, 467, 468, 517, 469, 470, 471, 1163,
	0, 1170, 1169, 0, 0, 0, 0, 1167, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	472, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 474, 229, 475, 230, 231, 476, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 477, 478, 479,
	0, 239, 480, 0, 1074, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 948, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	481, 482, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 483, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 484, 485, 0, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 486, 286, 287, 0, 288, 0, 289,
	0, 0, 949, 290, 291, 0, 292, 487, 0, 488,
	293, 0, 294, 295, 296, 297, 1165, 490, 491, 345,
	951, 298, 299, 0, 300, 301, 303, 0, 0, 0,
	302, 304, 311, 0, 950, 305, 492, 307, 306, 308,
	309, 310, 493, 0, 494, 0, 312, 952, 495, 953,
	313, 314, 315, 954, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 496, 955, 325,
	326, 956, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 340, 338,
	957, 341, 342, 344, 343, 0, 0, 958, 0, 497,
	498, 346, 347, 0, 348, 349, 350, 0, 0, 352,
	353, 354, 0, 0, 355, 356, 499, 959, 357, 960,
	500, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 501, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 503, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 961, 393, 394, 395,
	396, 504, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 0, 415, 416, 409, 411, 412, 413, 410,
	414, 417, 418, 0, 419, 399, 400, 420, 421, 962,
	422, 505, 423, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 433, 429, 430, 431, 506, 0, 436, 437,
	435, 0, 438, 439, 440, 441, 442, 277, 443, 0,
	444, 507, 508, 509, 510, 0, 451, 0, 445, 446,
	511, 447, 512, 0, 448, 449, 450, 0, 452, 453,
	0, 0, 454, 455, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 513, 514, 515, 0, 466,
	465, 516, 0, 0, 0, 0, 467, 468, 517, 469,
	470, 471, 1170, 1169, 0, 0, 0, 0, 1167, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 472, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 0, 239, 480, 0, 1074, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 948, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 949, 290, 291, 0, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 489, 490, 491,
	345, 951, 298, 299, 0, 300, 301, 303, 0, 0,
	0, 302, 304, 311, 0, 950, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 952, 495,
	953, 313, 314, 315, 954, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 955,
	325, 326, 956, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 957, 341, 342, 344, 343, 0, 0, 958, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 959, 357,
	960, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 961, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	962, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 0,
	466, 465, 516, 1170, 1169, 0, 0, 467, 468, 517,
	469, 470, 471, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 472, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 477,
	478, 479, 0, 239, 480, 0, 1074, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 948, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 481, 482, 1705, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 0, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 949, 290, 291, 0, 292, 487,
	0, 488, 293, 0, 294, 295, 296, 297, 489, 490,
	491, 345, 951, 298, 299, 0, 300, 301, 303, 0,
	0, 0, 302, 304, 311, 0, 950, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 952,
	495, 953, 313, 314, 315, 954, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 496,
	955, 325, 326, 956, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 957, 341, 342, 344, 343, 0, 0, 958,
	0, 497, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 959,
	357, 960, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 501, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 961, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 0, 419, 399, 400, 420,
	421, 962, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 511, 447, 512, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 513, 514, 515,
	0, 466, 465, 516, 1170, 1169, 0, 0, 467, 468,
	517, 469, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 472, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	477, 478, 479, 0, 239, 480, 0, 1074, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 948, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 481, 482, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 484, 485, 0, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 0, 289, 0, 0, 949, 290, 291, 0, 292,
	487, 0, 488, 293, 0, 294, 295, 296, 297, 489,
	490, 491, 345, 951, 298, 299, 0, 300, 301, 303,
	0, 0, 0, 302, 304, 311, 0, 950, 305, 492,
	307, 306, 308, 309, 310, 493, 0, 494, 0, 312,
	952, 495, 953, 313, 314, 315, 954, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	496, 955, 325, 326, 956, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 338, 957, 341, 342, 344, 343, 0, 0,
	958, 0, 497, 498, 346, 347, 0, 348, 349, 350,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	959, 357, 960, 500, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 501, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 503,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 961,
	393, 394, 395, 396, 504, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 409, 411,
	412, 413, 410, 414, 417, 418, 0, 419, 399, 400,
	420, 421, 962, 422, 505, 423, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 506,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 443, 0, 444, 507, 508, 509, 510, 0, 451,
	0, 445, 446, 511, 447, 512, 0, 448, 449, 450,
	0, 452, 453, 0, 0, 454, 455, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 513, 514,
	515, 1170, 466, 465, 516, 0, 0, 0, 0, 467,
	468, 517, 469, 470, 471, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	472, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 474, 229, 475, 230, 231, 476, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 477, 478, 479,
	0, 239, 480, 0, 1074, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 948, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	481, 482, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 483, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 484, 485, 0, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 486, 286, 287, 0, 288, 0, 289,
	0, 0, 949, 290, 291, 0, 292, 487, 0, 488,
	293, 0, 294, 295, 296, 297, 489, 490, 491, 345,
	951, 298, 299, 0, 300, 301, 303, 0, 0, 0,
	302, 304, 311, 0, 950, 305, 492, 307, 306, 308,
	309, 310, 493, 0, 494, 0, 312, 952, 495, 953,
	313, 314, 315, 954, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 496, 955, 325,
	326, 956, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 340, 338,
	957, 341, 342, 344, 343, 0, 0, 958, 0, 497,
	498, 346, 347, 0, 348, 349, 350, 0, 0, 352,
	353, 354, 0, 0, 355, 356, 499, 959, 357, 960,
	500, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 501, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 503, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 961, 393, 394, 395,
	396, 504, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 0, 415, 416, 409, 411, 412, 413, 410,
	414, 417, 418, 0, 419, 399, 400, 420, 421, 962,
	422, 505, 423, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 433, 429, 430, 431, 506, 0, 436, 437,
	435, 0, 438, 439, 440, 441, 442, 277, 443, 0,
	444, 507, 508, 509, 510, 0, 451, 0, 445, 446,
	511, 447, 512, 0, 448, 449, 450, 0, 452, 453,
	0, 0, 454, 455, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 513, 514, 515, 212, 466,
	465, 516, 0, 0, 0, 0, 467, 468, 517, 469,
	470, 471, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 472, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 477, 478, 479, 2256, 239, 480,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 2253, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 481, 482, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	0, 2403, 0, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 0, 289, 2259, 0, 0,
	290, 291, 0, 292, 487, 0, 488, 293, 0, 294,
	295, 296, 297, 489, 490, 491, 345, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 2400, 302, 304, 311,
	0, 0, 305, 492, 307, 306, 308, 309, 310, 493,
	0, 494, 0, 2402, 0, 495, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 496, 0, 325, 326, 2399, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 0, 341, 342,
	344, 343, 0, 0, 0, 0, 497, 498, 346, 347,
	0, 348, 349, 350, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 0, 357, 0, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	501, 368, 502, 369, 2258, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 0, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	0, 419, 399, 400, 420, 421, 0, 422, 505, 423,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 443, 0, 444, 507, 508,
	509, 510, 0, 451, 0, 445, 446, 511, 447, 512,
	0, 448, 449, 450, 0, 452, 453, 0, 2401, 454,
	455, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 513, 514, 515, 212, 466, 465, 516, 0,
	0, 0, 0, 467, 468, 517, 469, 470, 471, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 472, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 477, 478, 479, 2256, 239, 480, 0, 0, 2250,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 2253, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 0, 0, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 2259, 0, 0, 290, 291, 0,
	292, 487, 0, 488, 293, 0, 294, 295, 296, 297,
	2249, 490, 491, 345, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 0, 302, 304, 311, 0, 0, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 0, 495, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 496, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 0, 341, 342, 344, 343, 0,
	0, 0, 0, 497, 498, 346, 347, 0, 348, 349,
	350, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 0, 357, 0, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 501, 368, 502,
	369, 2258, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	0, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 0, 419, 399,
	400, 420, 421, 0, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 507, 508, 509, 510, 0,
	451, 0, 445, 446, 511, 447, 512, 0, 448, 449,
	450, 0, 452, 453, 0, 2257, 454, 455, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 0, 466, 465, 516, 1398, 0, 212, 0,
	467, 468, 517, 469, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 472, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 477, 478, 479, 0, 239, 480,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 481, 482, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	0, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 0, 292, 487, 0, 488, 293, 0, 294,
	295, 296, 297, 489, 490, 491, 345, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 216, 302, 304, 311,
	0, 0, 305, 492, 307, 306, 308, 309, 310, 493,
	0, 494, 0, 312, 0, 495, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 496, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 0, 341, 342,
	344, 343, 0, 217, 0, 0, 497, 498, 346, 347,
	0, 348, 349, 350, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 0, 357, 0, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	501, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 0, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	1401, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	0, 419, 399, 400, 420, 421, 0, 422, 505, 423,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 0, 436, 437, 435, 1399, 438,
	439, 440, 441, 442, 277, 443, 0, 444, 507, 508,
	509, 510, 0, 451, 0, 445, 446, 511, 447, 512,
	0, 448, 449, 450, 0, 452, 453, 0, 0, 454,
	455, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 513, 514, 515, 0, 1400, 465, 516, 1158,
	0, 212, 0, 467, 468, 517, 469, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	472, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 474, 229, 475, 230, 231, 476, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 477, 478, 479,
	0, 239, 480, 0, 0, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 0, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	481, 482, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 483, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 484, 485, 0, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 486, 286, 287, 0, 288, 0, 289,
	0, 0, 0, 290, 291, 0, 292, 487, 0, 488,
	293, 0, 294, 295, 296, 297, 1160, 490, 491, 345,
	0, 298, 299, 0, 300, 301, 303, 0, 0, 216,
	302, 304, 311, 0, 0, 305, 492, 307, 306, 308,
	309, 310, 493, 0, 494, 0, 312, 0, 495, 0,
	313, 314, 315, 0, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 496, 0, 325,
	326, 0, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 340, 338,
	0, 341, 342, 344, 343, 0, 217, 0, 0, 497,
	498, 346, 347, 0, 348, 349, 350, 0, 1003, 352,
	353, 354, 0, 0, 355, 356, 499, 0, 357, 0,
	500, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 501, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 503, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 0, 393, 394, 395,
	396, 504, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 0, 415, 416, 409, 411, 412, 413, 410,
	414, 417, 418, 0, 419, 399, 400, 420, 421, 0,
	422, 505, 423, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 433, 429, 430, 431, 506, 0, 436, 437,
	435, 0, 438, 439, 440, 441, 442, 277, 443, 0,
	444, 507, 508, 509, 510, 0, 451, 0, 445, 446,
	511, 447, 512, 0, 448, 449, 450, 0, 452, 453,
	0, 0, 454, 455, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 513, 514, 515, 0, 466,
	465, 516, 1155, 0, 212, 0, 467, 468, 517, 469,
	470, 471, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 472, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	477, 478, 479, 0, 239, 480, 0, 0, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 0, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 481, 482, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 484, 485, 0, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 0, 289, 0, 0, 0, 290, 291, 0, 292,
	487, 0, 488, 293, 0, 294, 295, 296, 297, 1157,
	490, 491, 345, 0, 298, 299, 0, 300, 301, 303,
	0, 0, 216, 302, 304, 311, 0, 0, 305, 492,
	307, 306, 308, 309, 310, 493, 0, 494, 0, 312,
	0, 495, 0, 313, 314, 315, 0, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	496, 0, 325, 326, 0, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 338, 0, 341, 342, 344, 343, 0, 217,
	0, 0, 497, 498, 346, 347, 0, 348, 349, 350,
	0, 1003, 352, 353, 354, 0, 0, 355, 356, 499,
	0, 357, 0, 500, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 501, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 503,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 0,
	393, 394, 395, 396, 504, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 409, 411,
	412, 413, 410, 414, 417, 418, 0, 419, 399, 400,
	420, 421, 0, 422, 505, 423, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 506,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 443, 0, 444, 507, 508, 509, 510, 0, 451,
	0, 445, 446, 511, 447, 512, 0, 448, 449, 450,
	0, 452, 453, 0, 0, 454, 455, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 513, 514,
	515, 0, 466, 465, 516, 1062, 0, 212, 0, 467,
	468, 517, 469, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 472, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 477, 478, 479, 0, 239, 480, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 481, 482, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 0,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 487, 0, 488, 293, 0, 294, 295,
	296, 297, 1064, 490, 491, 345, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 216, 302, 304, 311, 0,
	0, 305, 492, 307, 306, 308, 309, 310, 493, 0,
	494, 0, 312, 0, 495, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 496, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 0, 341, 342, 344,
	343, 0, 217, 0, 0, 497, 498, 346, 347, 0,
	348, 349, 350, 0, 1003, 352, 353, 354, 0, 0,
	355, 356, 499, 0, 357, 0, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 501,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 0, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 0,
	419, 399, 400, 420, 421, 0, 422, 505, 423, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 443, 0, 444, 507, 508, 509,
	510, 0, 451, 0, 445, 446, 511, 447, 512, 0,
	448, 449, 450, 0, 452, 453, 0, 0, 454, 455,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 513, 514, 515, 0, 466, 465, 516, 546, 0,
	212, 0, 467, 468, 517, 469, 470, 471, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	545, 222, 535, 223, 0, 0, 0, 0, 0, 472,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 473,
	474, 229, 475, 230, 231, 476, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 477, 478, 479, 0,
	239, 480, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 538, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 481,
	482, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	483, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	484, 485, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 285, 486, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 539, 292, 487, 0, 488, 293,
	0, 294, 295, 296, 297, 489, 490, 491, 345, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 0, 305, 492, 307, 306, 308, 309,
	310, 493, 0, 494, 0, 312, 0, 495, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 496, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 340, 338, 0,
	341, 342, 344, 343, 0, 0, 0, 0, 497, 498,
	346, 347, 0, 348, 349, 350, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 0, 357, 0, 500,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 501, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 503, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 0, 393, 394, 395, 396,
	504, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 540, 415, 416, 409, 411, 412, 413, 410, 414,
	417, 418, 0, 419, 399, 400, 420, 421, 0, 422,
	505, 423, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 433, 429, 430, 431, 506, 0, 436, 437, 435,
	0, 438, 439, 440, 441, 442, 277, 443, 0, 444,
	507, 508, 509, 510, 0, 451, 0, 445, 446, 511,
	447, 512, 0, 448, 449, 450, 0, 452, 453, 0,
	0, 454, 455, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 513, 514, 515, 0, 466, 465,
	516, 534, 0, 212, 0, 467, 468, 517, 469, 470,
	471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 535, 223, 0, 0, 0,
	0, 0, 472, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 477,
	478, 479, 0, 239, 480, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 538, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 0, 0, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 539, 292, 487,
	0, 488, 293, 0, 294, 295, 296, 297, 489, 490,
	491, 345, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 0, 302, 304, 311, 0, 0, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 0,
	495, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 496,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 0, 341, 342, 344, 343, 0, 0, 0,
	0, 497, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 0,
	357, 0, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 501, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 0, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 540, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 0, 419, 399, 400, 420,
	421, 0, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 511, 447, 512, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 513, 514, 515,
	212, 466, 465, 516, 0, 0, 0, 0, 467, 468,
	517, 469, 470, 471, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 472,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 473,
	474, 229, 475, 230, 231, 476, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 477, 478, 479, 0,
	239, 480, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 481,
	482, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	483, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	484, 485, 0, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 486, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 487, 0, 488, 293,
	0, 294, 295, 296, 297, 489, 490, 491, 345, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 216, 302,
	304, 311, 0, 0, 305, 492, 307, 306, 308, 309,
	310, 493, 0, 494, 0, 312, 0, 495, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 496, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 340, 338, 0,
	341, 342, 344, 343, 0, 217, 0, 0, 497, 498,
	346, 347, 0, 348, 349, 350, 0, 1003, 352, 353,
	354, 0, 0, 355, 356, 499, 0, 357, 0, 500,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 501, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 503, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 0, 393, 394, 395, 396,
	504, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 0, 415, 416, 409, 411, 412, 413, 410, 414,
	417, 418, 0, 419, 399, 400, 420, 421, 0, 422,
	505, 423, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 433, 429, 430, 431, 506, 0, 436, 437, 435,
	0, 438, 439, 440, 441, 442, 277, 443, 0, 444,
	507, 508, 509, 510, 0, 451, 0, 445, 446, 511,
	447, 512, 0, 448, 449, 450, 0, 452, 453, 0,
	0, 454, 455, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 513, 514, 515, 0, 466, 465,
	516, 2332, 0, 212, 0, 467, 468, 517, 469, 470,
	471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 472, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 477,
	478, 479, 0, 239, 480, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 0, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 487,
	0, 488, 293, 0, 294, 295, 296, 297, 489, 490,
	491, 345, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 216, 302, 304, 311, 0, 0, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 0,
	495, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 496,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 0, 341, 342, 344, 343, 0, 217, 0,
	0, 497, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 0,
	357, 0, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 501, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 0, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 0, 419, 399, 400, 420,
	421, 0, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 511, 447, 512, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 513, 514, 515,
	0, 466, 465, 516, 1890, 0, 212, 0, 467, 468,
	517, 469, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 472, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 239, 480, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 489, 490, 491, 345, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 216, 302, 304, 311, 0, 0,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 0, 495, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 0, 341, 342, 344, 343,
	0, 217, 0, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 0, 357, 0, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 0, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 419,
	399, 400, 420, 421, 0, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 212, 466, 465, 516, 0, 0, 0,
	0, 467, 468, 517, 469, 470, 471, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 472, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 477,
	478, 479, 0, 239, 480, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 0, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 487,
	0, 488, 293, 0, 294, 295, 296, 297, 489, 490,
	491, 345, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 216, 302, 304, 311, 0, 0, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 0,
	495, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 496,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 0, 341, 342, 344, 343, 0, 217, 0,
	0, 497, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 0,
	357, 0, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 501, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 0, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 0, 419, 399, 400, 420,
	421, 0, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 0,
	436, 437, 435, 1824, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 511, 447, 512, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 513, 514, 515,
	0, 466, 465, 516, 1817, 0, 212, 0, 467, 468,
	517, 469, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 472, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 239, 480, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 1816, 490, 491, 345, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 216, 302, 304, 311, 0, 0,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 0, 495, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 0, 341, 342, 344, 343,
	0, 217, 0, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 0, 357, 0, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 0, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 419,
	399, 400, 420, 421, 0, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 0, 466, 465, 516, 1812, 0, 212,
	0, 467, 468, 517, 469, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 472, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 477, 478, 479, 0, 239,
	480, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 481, 482,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 0, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 0, 289, 0, 0,
	0, 290, 291, 0, 292, 487, 0, 488, 293, 0,
	294, 295, 296, 297, 1814, 490, 491, 345, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 216, 302, 304,
	311, 0, 0, 305, 492, 307, 306, 308, 309, 310,
	493, 0, 494, 0, 312, 0, 495, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 496, 0, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 0, 341,
	342, 344, 343, 0, 217, 0, 0, 497, 498, 346,
	347, 0, 348, 349, 350, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 0, 357, 0, 500, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 501, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 0, 393, 394, 395, 396, 504,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 0, 419, 399, 400, 420, 421, 0, 422, 505,
	423, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 443, 0, 444, 507,
	508, 509, 510, 0, 451, 0, 445, 446, 511, 447,
	512, 0, 448, 449, 450, 0, 452, 453, 0, 0,
	454, 455, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 513, 514, 515, 0, 466, 465, 516,
	1300, 0, 212, 0, 467, 468, 517, 469, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 472, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 0, 239, 480, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 1299, 490, 491,
	345, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	216, 302, 304, 311, 0, 0, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 0, 495,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 0, 341, 342, 344, 343, 0, 217, 0, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 0, 357,
	0, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 0, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	0, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 0,
	466, 465, 516, 1297, 0, 212, 0, 467, 468, 517,
	469, 470, 471, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 472, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 477, 478, 479, 0, 239, 480, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 0, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 487, 0, 488, 293, 0, 294, 295, 296, 297,
	1296, 490, 491, 345, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 216, 302, 304, 311, 0, 0, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 0, 495, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 496, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 0, 341, 342, 344, 343, 0,
	217, 0, 0, 497, 498, 346, 347, 0, 348, 349,
	350, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 0, 357, 0, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 501, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	0, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 0, 419, 399,
	400, 420, 421, 0, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 507, 508, 509, 510, 0,
	451, 0, 445, 446, 511, 447, 512, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 0, 466, 465, 516, 1294, 0, 212, 0,
	467, 468, 517, 469, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 472, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 477, 478, 479, 0, 239, 480,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 481, 482, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	0, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 0, 292, 487, 0, 488, 293, 0, 294,
	295, 296, 297, 1293, 490, 491, 345, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 216, 302, 304, 311,
	0, 0, 305, 492, 307, 306, 308, 309, 310, 493,
	0, 494, 0, 312, 0, 495, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 496, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 0, 341, 342,
	344, 343, 0, 217, 0, 0, 497, 498, 346, 347,
	0, 348, 349, 350, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 0, 357, 0, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	501, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 0, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	0, 419, 399, 400, 420, 421, 0, 422, 505, 423,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 443, 0, 444, 507, 508,
	509, 510, 0, 451, 0, 445, 446, 511, 447, 512,
	0, 448, 449, 450, 0, 452, 453, 0, 0, 454,
	455, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 513, 514, 515, 0, 466, 465, 516, 1290,
	0, 212, 0, 467, 468, 517, 469, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	472, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 474, 229, 475, 230, 231, 476, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 477, 478, 479,
	0, 239, 480, 0, 0, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 0, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	481, 482, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 483, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 484, 485, 0, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 486, 286, 287, 0, 288, 0, 289,
	0, 0, 0, 290, 291, 0, 292, 487, 0, 488,
	293, 0, 294, 295, 296, 297, 1289, 490, 491, 345,
	0, 298, 299, 0, 300, 301, 303, 0, 0, 216,
	302, 304, 311, 0, 0, 305, 492, 307, 306, 308,
	309, 310, 493, 0, 494, 0, 312, 0, 495, 0,
	313, 314, 315, 0, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 496, 0, 325,
	326, 0, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 340, 338,
	0, 341, 342, 344, 343, 0, 217, 0, 0, 497,
	498, 346, 347, 0, 348, 349, 350, 0, 0, 352,
	353, 354, 0, 0, 355, 356, 499, 0, 357, 0,
	500, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 501, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 503, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 0, 393, 394, 395,
	396, 504, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 0, 415, 416, 409, 411, 412, 413, 410,
	414, 417, 418, 0, 419, 399, 400, 420, 421, 0,
	422, 505, 423, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 433, 429, 430, 431, 506, 0, 436, 437,
	435, 0, 438, 439, 440, 441, 442, 277, 443, 0,
	444, 507, 508, 509, 510, 0, 451, 0, 445, 446,
	511, 447, 512, 0, 448, 449, 450, 0, 452, 453,
	0, 0, 454, 455, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 513, 514, 515, 0, 466,
	465, 516, 1265, 0, 212, 0, 467, 468, 517, 469,
	470, 471, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 472, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	477, 478, 479, 0, 239, 480, 0, 0, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 0, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 481, 482, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 484, 485, 0, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 0, 289, 0, 0, 0, 290, 291, 0, 292,
	487, 0, 488, 293, 0, 294, 295, 296, 297, 489,
	490, 491, 345, 0, 298, 299, 0, 300, 301, 303,
	0, 0, 216, 302, 304, 311, 0, 0, 305, 492,
	307, 306, 308, 309, 310, 493, 0, 494, 0, 312,
	0, 495, 0, 313, 314, 315, 0, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	496, 0, 325, 326, 0, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 338, 0, 341, 342, 344, 343, 0, 217,
	0, 0, 497, 498, 346, 347, 0, 348, 349, 350,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	0, 357, 0, 500, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 501, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 503,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 0,
	393, 394, 395, 396, 504, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 409, 411,
	412, 413, 410, 414, 417, 418, 0, 419, 399, 400,
	420, 421, 0, 422, 505, 423, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 506,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 443, 0, 444, 507, 508, 509, 510, 0, 451,
	0, 445, 446, 511, 447, 512, 0, 448, 449, 450,
	0, 452, 453, 0, 0, 454, 455, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 513, 514,
	515, 0, 466, 465, 516, 1180, 0, 212, 0, 467,
	468, 517, 469, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 472, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 477, 478, 479, 0, 239, 480, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 481, 482, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 0,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 487, 0, 488, 293, 0, 294, 295,
	296, 297, 1182, 490, 491, 345, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 216, 302, 304, 311, 0,
	0, 305, 492, 307, 306, 308, 309, 310, 493, 0,
	494, 0, 312, 0, 495, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 496, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 0, 341, 342, 344,
	343, 0, 217, 0, 0, 497, 498, 346, 347, 0,
	348, 349, 350, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 0, 357, 0, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 501,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 0, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 0,
	419, 399, 400, 420, 421, 0, 422, 505, 423, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 443, 0, 444, 507, 508, 509,
	510, 0, 451, 0, 445, 446, 511, 447, 512, 0,
	448, 449, 450, 0, 452, 453, 0, 0, 454, 455,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 513, 514, 515, 212, 466, 465, 516, 0, 0,
	0, 0, 467, 468, 517, 469, 470, 471, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 472, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	477, 478, 479, 0, 239, 480, 0, 0, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 0, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 481, 482, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 484, 485, 0, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 0, 289, 0, 0, 0, 290, 291, 0, 292,
	487, 0, 488, 293, 0, 294, 295, 296, 297, 489,
	490, 491, 345, 0, 298, 299, 0, 300, 301, 303,
	0, 0, 216, 302, 304, 311, 0, 0, 305, 492,
	307, 306, 308, 309, 310, 493, 0, 494, 0, 312,
	0, 495, 0, 313, 314, 315, 0, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	496, 0, 325, 326, 0, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 338, 0, 341, 342, 344, 343, 0, 217,
	0, 0, 497, 498, 346, 347, 0, 348, 349, 350,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	0, 357, 0, 500, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 501, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 503,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 0,
	393, 394, 395, 396, 504, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 409, 411,
	412, 413, 410, 414, 417, 418, 0, 419, 399, 400,
	420, 421, 0, 422, 505, 423, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 506,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 443, 0, 444, 507, 508, 509, 510, 0, 451,
	0, 445, 446, 511, 447, 512, 0, 448, 449, 450,
	0, 452, 453, 0, 0, 454, 455, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 513, 514,
	515, 212, 466, 465, 516, 0, 0, 0, 0, 467,
	468, 517, 469, 470, 471, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	472, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 474, 229, 475, 230, 231, 476, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 477, 478, 479,
	0, 239, 480, 0, 0, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 538, 0, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	481, 482, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 483, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 484, 485, 0, 0, 0, 0, 0, 0, 0,
	283, 284, 285, 486, 286, 287, 0, 288, 0, 289,
	0, 0, 0, 290, 291, 539, 292, 487, 0, 488,
	293, 0, 294, 295, 296, 297, 489, 490, 491, 345,
	0, 298, 299, 0, 300, 301, 303, 0, 0, 0,
	302, 304, 311, 0, 0, 305, 492, 307, 306, 308,
	309, 310, 493, 0, 494, 0, 312, 0, 495, 0,
	313, 314, 315, 0, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 496, 0, 325,
	326, 0, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 340, 338,
	0, 341, 342, 344, 343, 0, 0, 0, 0, 497,
	498, 346, 347, 0, 348, 349, 350, 0, 0, 352,
	353, 354, 0, 0, 355, 356, 499, 0, 357, 0,
	500, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 501, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 503, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 0, 393, 394, 395,
	396, 504, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 540, 415, 416, 409, 411, 412, 413, 410,
	414, 417, 418, 0, 419, 399, 400, 420, 421, 0,
	422, 505, 423, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 433, 429, 430, 431, 506, 0, 436, 437,
	435, 0, 438, 439, 440, 441, 442, 277, 443, 0,
	444, 507, 508, 509, 510, 0, 451, 0, 445, 446,
	511, 447, 512, 0, 448, 449, 450, 0, 452, 453,
	0, 0, 454, 455, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 513, 514, 515, 212, 466,
	465, 516, 0, 0, 0, 0, 467, 468, 517, 469,
	470, 471, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 472, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 477, 478, 479, 0, 239, 480,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 1918, 259, 260, 261, 481, 482, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	0, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 0, 292, 487, 0, 488, 293, 0, 294,
	295, 296, 297, 489, 490, 491, 345, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 216, 302, 304, 311,
	0, 0, 305, 492, 307, 306, 308, 309, 310, 493,
	0, 494, 0, 312, 0, 495, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 496, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 0, 341, 342,
	344, 343, 0, 217, 0, 0, 497, 498, 346, 347,
	0, 348, 349, 350, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 0, 357, 0, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	501, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 0, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	0, 419, 399, 400, 420, 421, 0, 422, 505, 423,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 443, 0, 444, 507, 508,
	509, 510, 0, 451, 0, 445, 446, 511, 447, 512,
	0, 448, 449, 450, 0, 452, 453, 0, 0, 454,
	455, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 513, 514, 515, 212, 466, 465, 516, 0,
	0, 0, 0, 467, 468, 517, 469, 470, 471, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 472, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 477, 478, 479, 0, 239, 480, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	1916, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 0, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 487, 0, 488, 293, 0, 294, 295, 296, 297,
	489, 490, 491, 345, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 216, 302, 304, 311, 0, 0, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 0, 495, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 496, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 0, 341, 342, 344, 343, 0,
	217, 0, 0, 497, 498, 346, 347, 0, 348, 349,
	350, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 0, 357, 0, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 501, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	0, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 0, 419, 399,
	400, 420, 421, 0, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 507, 508, 509, 510, 0,
	451, 0, 445, 446, 511, 447, 512, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 212, 466, 465, 516, 0, 0, 0, 0,
	467, 468, 517, 469, 470, 471, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 472, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 0, 239, 480, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 1914, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 489, 490, 491,
	345, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	216, 302, 304, 311, 0, 0, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 0, 495,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 0, 341, 342, 344, 343, 0, 217, 0, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 0, 357,
	0, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 0, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	0, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 0,
	466, 465, 516, 685, 0, 212, 0, 467, 468, 517,
	469, 470, 471, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 472, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 477, 478, 479, 0, 239, 480, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 0, 0, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 487, 0, 488, 293, 0, 294, 295, 296, 297,
	489, 490, 491, 345, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 0, 302, 304, 311, 0, 0, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 684,
	312, 0, 495, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 496, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 0, 341, 342, 344, 343, 0,
	0, 0, 0, 497, 498, 346, 347, 0, 348, 349,
	350, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 0, 357, 0, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 501, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	0, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 0, 419, 399,
	400, 420, 421, 0, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 0, 436, 437, 435, 683, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 507, 508, 509, 510, 0,
	451, 0, 445, 446, 511, 447, 512, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 212, 466, 465, 516, 0, 0, 0, 0,
	467, 468, 517, 469, 470, 471, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 472, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 0, 239, 480, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 2403, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 489, 490, 491,
	345, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	0, 302, 304, 311, 0, 0, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 0, 495,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 0, 341, 342, 344, 343, 0, 0, 0, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 0, 357,
	0, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 3185, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 0, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	0, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 0,
	466, 465, 516, 525, 0, 212, 0, 467, 468, 517,
	469, 470, 471, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 524, 223, 0,
	0, 0, 0, 0, 472, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 477, 478, 479, 0, 239, 480, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 0, 0, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 487, 0, 488, 293, 0, 294, 295, 296, 297,
	489, 490, 491, 345, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 0, 302, 304, 311, 0, 0, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 0, 495, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 496, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 0, 341, 342, 344, 343, 0,
	0, 0, 0, 497, 498, 346, 347, 0, 348, 349,
	350, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 0, 357, 0, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 501, 368, 502,
	523, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	0, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 0, 419, 399,
	400, 420, 421, 0, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 507, 508, 509, 510, 0,
	451, 0, 445, 446, 511, 447, 512, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 212, 466, 465, 516, 0, 0, 0, 0,
	467, 468, 517, 469, 470, 471, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 472, 0, 2191, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 0, 239, 480, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 0, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 489, 490, 491,
	345, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	0, 302, 304, 311, 0, 0, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 0, 495,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 0, 341, 342, 344, 343, 0, 0, 0, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 0, 357,
	0, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 0, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	0, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 0,
	466, 465, 516, 212, 2390, 0, 0, 467, 468, 517,
	469, 470, 471, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 472, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 477,
	478, 479, 0, 239, 480, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 0, 0, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 487,
	0, 488, 293, 0, 294, 295, 296, 297, 489, 490,
	491, 345, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 0, 302, 304, 311, 0, 0, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 0,
	495, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 496,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 0, 341, 342, 344, 343, 0, 0, 0,
	0, 497, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 0,
	357, 0, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 501, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 0, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 0, 419, 399, 400, 420,
	421, 0, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 511, 447, 512, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 513, 514, 515,
	212, 466, 465, 516, 0, 0, 0, 0, 467, 468,
	517, 469, 470, 471, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 472,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 473,
	474, 229, 475, 230, 231, 476, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 477, 478, 479, 0,
	239, 480, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 481,
	482, 2983, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	483, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	484, 485, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 285, 486, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 487, 0, 488, 293,
	0, 294, 295, 296, 297, 489, 490, 491, 345, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 0, 305, 492, 307, 306, 308, 309,
	310, 493, 0, 494, 0, 312, 0, 495, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 496, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 340, 338, 0,
	341, 342, 344, 343, 0, 0, 0, 0, 497, 498,
	346, 347, 0, 348, 349, 350, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 0, 357, 0, 500,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 501, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 503, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 0, 393, 394, 395, 396,
	504, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 0, 415, 416, 409, 411, 412, 413, 410, 414,
	417, 418, 0, 419, 399, 400, 420, 421, 0, 422,
	505, 423, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 433, 429, 430, 431, 506, 0, 436, 437, 435,
	0, 438, 439, 440, 441, 442, 277, 443, 0, 444,
	507, 508, 509, 510, 0, 451, 0, 445, 446, 511,
	447, 512, 0, 448, 449, 450, 0, 452, 453, 0,
	0, 454, 455, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 513, 514, 515, 0, 466, 465,
	516, 212, 2390, 0, 0, 467, 468, 517, 469, 470,
	471, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	472, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 474, 229, 475, 230, 231, 476, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 477, 478, 479,
	0, 239, 480, 0, 0, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 0, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	481, 482, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 483, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 484, 485, 0, 0, 0, 0, 0, 0, 0,
	283, 284, 285, 486, 286, 287, 0, 288, 0, 289,
	0, 0, 0, 290, 291, 0, 292, 487, 0, 488,
	293, 0, 294, 295, 296, 297, 489, 490, 491, 345,
	0, 298, 299, 0, 300, 301, 303, 0, 0, 0,
	302, 304, 311, 0, 0, 305, 492, 307, 306, 308,
	309, 310, 493, 0, 494, 0, 312, 0, 495, 0,
	313, 314, 315, 0, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 496, 0, 325,
	326, 0, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 340, 338,
	0, 341, 342, 344, 343, 0, 0, 0, 0, 497,
	498, 346, 347, 0, 348, 349, 350, 0, 0, 352,
	353, 2387, 0, 0, 355, 356, 499, 0, 357, 0,
	500, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 501, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 503, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 0, 393, 394, 395,
	396, 504, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 0, 415, 416, 409, 411, 412, 413, 410,
	414, 417, 418, 0, 419, 399, 400, 420, 421, 0,
	422, 505, 423, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 433, 429, 430, 431, 506, 0, 436, 437,
	435, 0, 438, 439, 440, 441, 442, 277, 443, 0,
	444, 507, 508, 509, 510, 0, 451, 0, 445, 446,
	511, 447, 512, 0, 448, 449, 450, 0, 452, 453,
	0, 0, 454, 455, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 513, 514, 515, 212, 466,
	465, 516, 0, 0, 0, 0, 467, 468, 517, 469,
	470, 471, 0, 0, 0, 218, 219, 220, 221, 222,
	1897, 223, 0, 0, 0, 0, 0, 472, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 477, 478, 479, 0, 239, 480,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 481, 482, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	0, 0, 0, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 0, 292, 487, 0, 488, 293, 0, 294,
	295, 296, 297, 489, 490, 491, 345, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 0, 302, 304, 311,
	0, 0, 305, 492, 307, 306, 308, 309, 310, 493,
	0, 494, 0, 312, 0, 495, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 496, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 0, 341, 342,
	344, 343, 0, 0, 0, 0, 497, 498, 346, 347,
	0, 348, 349, 350, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 0, 357, 0, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	501, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 0, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	0, 419, 399, 400, 420, 421, 0, 422, 505, 423,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 443, 0, 444, 507, 508,
	509, 510, 0, 451, 0, 445, 446, 511, 447, 512,
	0, 448, 449, 450, 0, 452, 453, 0, 0, 454,
	455, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 513, 514, 515, 0, 466, 465, 516, 1888,
	0, 212, 0, 467, 468, 517, 469, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	472, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 474, 229, 475, 230, 231, 476, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 477, 478, 479,
	0, 239, 480, 0, 0, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 0, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	481, 482, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 483, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 484, 485, 0, 0, 0, 0, 0, 0, 0,
	283, 284, 285, 486, 286, 287, 0, 288, 0, 289,
	0, 0, 0, 290, 291, 0, 292, 487, 0, 488,
	293, 0, 294, 295, 296, 297, 489, 490, 491, 345,
	0, 298, 299, 0, 300, 301, 303, 0, 0, 0,
	302, 304, 311, 0, 0, 305, 492, 307, 306, 308,
	309, 310, 493, 0, 494, 0, 312, 0, 495, 0,
	313, 314, 315, 0, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 496, 0, 325,
	326, 0, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 340, 338,
	0, 341, 342, 344, 343, 0, 0, 0, 0, 497,
	498, 346, 347, 0, 348, 349, 350, 0, 0, 352,
	353, 354, 0, 0, 355, 356, 499, 0, 357, 0,
	500, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 501, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 503, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 0, 393, 394, 395,
	396, 504, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 0, 415, 416, 409, 411, 412, 413, 410,
	414, 417, 418, 0, 419, 399, 400, 420, 421, 0,
	422, 505, 423, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 433, 429, 430, 431, 506, 0, 436, 437,
	435, 0, 438, 439, 440, 441, 442, 277, 443, 0,
	444, 507, 508, 509, 510, 0, 451, 0, 445, 446,
	511, 447, 512, 0, 448, 449, 450, 0, 452, 453,
	0, 0, 454, 455, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 513, 514, 515, 0, 466,
	465, 516, 566, 0, 212, 0, 467, 468, 517, 469,
	470, 471, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 472, 0, 0, 0, 0, 224, 1040,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	477, 478, 1038, 0, 239, 480, 0, 0, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 0, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 481, 482, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 484, 485, 0, 0, 0, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 0, 289, 0, 0, 0, 290, 291, 0, 292,
	487, 0, 488, 293, 0, 294, 295, 296, 297, 489,
	490, 491, 345, 0, 298, 299, 0, 300, 301, 303,
	0, 0, 0, 302, 304, 311, 0, 0, 305, 492,
	307, 306, 308, 309, 310, 493, 0, 494, 0, 312,
	0, 495, 0, 313, 314, 315, 0, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	496, 0, 325, 326, 0, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 567, 0, 341, 342, 344, 343, 0, 0,
	0, 0, 497, 498, 346, 347, 0, 348, 349, 350,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	0, 357, 0, 500, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 501, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 503,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 0,
	393, 394, 395, 396, 504, 397, 0, 398, 402, 403,
	563, 405, 406, 407, 408, 0, 415, 416, 409, 411,
	412, 413, 410, 414, 1041, 418, 0, 419, 399, 400,
	420, 421, 0, 422, 505, 423, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 506,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 443, 0, 444, 562, 508, 509, 510, 0, 451,
	0, 445, 446, 511, 447, 512, 0, 448, 449, 450,
	0, 452, 453, 0, 0, 454, 455, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 513, 514,
	515, 0, 466, 465, 516, 1836, 0, 212, 0, 467,
	468, 517, 469, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 472, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 477, 478, 479, 0, 239, 480, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 481, 482, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 487, 0, 488, 293, 0, 294, 295,
	296, 297, 1835, 490, 491, 345, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	0, 305, 492, 307, 306, 308, 309, 310, 493, 0,
	494, 0, 312, 0, 495, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 496, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 0, 341, 342, 344,
	343, 0, 0, 0, 0, 497, 498, 346, 347, 0,
	348, 349, 350, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 0, 357, 0, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 501,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 0, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 0,
	419, 399, 400, 420, 421, 0, 422, 505, 423, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 443, 0, 444, 507, 508, 509,
	510, 0, 451, 0, 445, 446, 511, 447, 512, 0,
	448, 449, 450, 0, 452, 453, 0, 0, 454, 455,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 513, 514, 515, 0, 466, 465, 516, 566, 0,
	212, 0, 467, 468, 517, 469, 470, 471, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 472,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 473,
	474, 229, 475, 230, 231, 476, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 477, 478, 479, 0,
	556, 480, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 481,
	482, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	483, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	484, 485, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 285, 486, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 487, 0, 488, 293,
	0, 294, 295, 296, 297, 489, 490, 491, 345, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 0, 305, 492, 307, 306, 308, 309,
	310, 493, 0, 494, 0, 312, 0, 495, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 496, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 340, 567, 0,
	341, 342, 344, 343, 0, 0, 0, 0, 497, 498,
	346, 347, 0, 348, 349, 350, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 0, 357, 0, 500,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 501, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 503, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 0, 393, 394, 395, 396,
	504, 397, 0, 398, 402, 403, 563, 405, 406, 407,
	408, 0, 415, 416, 409, 411, 412, 413, 410, 414,
	1319, 418, 0, 419, 399, 400, 420, 421, 0, 422,
	505, 423, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 433, 429, 430, 431, 506, 0, 436, 437, 435,
	0, 438, 439, 440, 441, 442, 277, 443, 0, 444,
	562, 508, 509, 510, 0, 451, 0, 445, 446, 511,
	447, 512, 0, 448, 449, 450, 0, 452, 453, 0,
	0, 454, 455, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 513, 514, 515, 0, 466, 465,
	516, 1304, 0, 212, 0, 467, 468, 517, 469, 470,
	471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 472, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 477,
	478, 479, 0, 239, 480, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 0, 0, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 487,
	0, 488, 293, 0, 294, 295, 296, 297, 1303, 490,
	491, 345, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 0, 302, 304, 311, 0, 0, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 0,
	495, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 496,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 0, 341, 342, 344, 343, 0, 0, 0,
	0, 497, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 0,
	357, 0, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 501, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 0, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 0, 419, 399, 400, 420,
	421, 0, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 511, 447, 512, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 513, 514, 515,
	0, 466, 465, 516, 1253, 0, 212, 0, 467, 468,
	517, 469, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 472, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 239, 480, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 0,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 1252, 490, 491, 345, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 0,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 0, 495, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 0, 341, 342, 344, 343,
	0, 0, 0, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 0, 357, 0, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 0, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 419,
	399, 400, 420, 421, 0, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 0, 466, 465, 516, 1237, 0, 212,
	0, 467, 468, 517, 469, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 472, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 477, 478, 479, 0, 239,
	480, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 481, 482,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 0, 289, 0, 0,
	0, 290, 291, 0, 292, 487, 0, 488, 293, 0,
	294, 295, 296, 297, 489, 490, 491, 345, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 0, 302, 304,
	311, 0, 0, 305, 492, 307, 306, 308, 309, 310,
	493, 0, 494, 0, 312, 0, 495, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 496, 0, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 0, 341,
	342, 344, 343, 0, 0, 0, 0, 497, 498, 346,
	347, 0, 348, 349, 350, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 0, 357, 0, 500, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 501, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 0, 393, 394, 395, 396, 504,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 0, 419, 399, 400, 420, 421, 0, 422, 505,
	423, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 443, 0, 444, 507,
	508, 509, 510, 0, 451, 0, 445, 446, 511, 447,
	512, 0, 448, 449, 450, 0, 452, 453, 0, 0,
	454, 455, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 513, 514, 515, 0, 466, 465, 516,
	1174, 0, 212, 0, 467, 468, 517, 469, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 472, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 0, 239, 480, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 0, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 489, 490, 491,
	345, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	0, 302, 304, 311, 0, 0, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 0, 495,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 0, 341, 342, 344, 343, 0, 0, 0, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 0, 357,
	0, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 0, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	0, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 0,
	466, 465, 516, 566, 0, 212, 0, 467, 468, 517,
	469, 470, 471, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 472, 0, 0, 0, 0, 224,
	1040, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 477, 478, 1038, 0, 239, 480, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 0, 0, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 487, 0, 488, 293, 0, 294, 295, 296, 297,
	489, 490, 491, 345, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 0, 302, 304, 311, 0, 0, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 0, 495, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 496, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 567, 0, 341, 342, 344, 343, 0,
	0, 0, 0, 497, 498, 346, 347, 0, 348, 349,
	350, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 0, 357, 0, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 501, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	0, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 563, 405, 406, 407, 408, 0, 415, 416, 409,
	411, 412, 413, 410, 414, 1041, 418, 0, 419, 399,
	400, 420, 421, 0, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 562, 508, 509, 510, 0,
	451, 0, 445, 1039, 511, 447, 512, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 212, 466, 465, 516, 0, 0, 0, 0,
	467, 468, 517, 469, 470, 471, 0, 0, 0, 218,
	219, 220, 221, 222, 1022, 223, 0, 0, 0, 0,
	0, 472, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 0, 239, 480, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 0, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 489, 490, 491,
	345, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	0, 302, 304, 311, 0, 0, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 0, 495,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 0, 341, 342, 344, 343, 0, 0, 0, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 0, 357,
	0, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 0, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	0, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 0,
	466, 465, 516, 566, 0, 212, 0, 467, 468, 517,
	469, 470, 471, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 472, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 477, 478, 479, 0, 556, 480, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 554, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 0, 0, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 487, 0, 488, 293, 0, 294, 295, 296, 297,
	489, 490, 491, 345, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 0, 302, 304, 311, 0, 0, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 0, 495, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 496, 0, 325, 326, 0, 0, 327, 555, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 567, 0, 341, 342, 344, 343, 0,
	0, 0, 0, 497, 498, 346, 347, 0, 348, 349,
	350, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 0, 357, 0, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 501, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	0, 393, 394, 395, 396, 557, 397, 0, 398, 402,
	403, 563, 405, 406, 407, 408, 0, 415, 416, 409,
	411, 412, 413, 410, 414, 558, 418, 0, 419, 399,
	400, 420, 421, 0, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 562, 508, 509, 510, 0,
	451, 0, 445, 560, 511, 447, 512, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 0, 466, 465, 516, 550, 0, 212, 0,
	467, 468, 517, 469, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 472, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 477, 478, 479, 0, 239, 480,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 481, 482, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	0, 0, 0, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 0, 292, 487, 0, 488, 293, 0, 294,
	295, 296, 297, 489, 490, 491, 345, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 0, 302, 304, 311,
	0, 0, 305, 492, 307, 306, 308, 309, 310, 493,
	0, 494, 0, 312, 0, 495, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 496, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 0, 341, 342,
	344, 343, 0, 0, 0, 0, 497, 498, 346, 347,
	0, 348, 349, 350, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 0, 357, 0, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	501, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 0, 393, 394, 395, 396, 504, 397,
	0, 398, 551, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	0, 419, 399, 400, 420, 421, 0, 422, 505, 423,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 443, 0, 444, 507, 508,
	509, 510, 0, 451, 0, 445, 446, 511, 447, 512,
	0, 448, 449, 450, 0, 452, 453, 0, 0, 454,
	455, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 513, 514, 515, 0, 466, 465, 516, 548,
	0, 212, 0, 467, 468, 517, 469, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	472, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 474, 229, 475, 230, 231, 476, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 477, 478, 479,
	0, 239, 480, 0, 0, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 0, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	481, 482, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 483, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 484, 485, 0, 0, 0, 0, 0, 0, 0,
	283, 284, 285, 486, 286, 287, 0, 288, 0, 289,
	0, 0, 0, 290, 291, 0, 292, 487, 0, 488,
	293, 0, 294, 295, 296, 297, 489, 490, 491, 345,
	0, 298, 299, 0, 300, 301, 303, 0, 0, 0,
	302, 304, 311, 0, 0, 305, 492, 307, 306, 308,
	309, 310, 493, 0, 494, 0, 312, 0, 495, 0,
	313, 314, 315, 0, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 496, 0, 325,
	326, 0, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 340, 338,
	0, 341, 342, 344, 343, 0, 0, 0, 0, 497,
	498, 346, 347, 0, 348, 349, 350, 0, 0, 352,
	353, 354, 0, 0, 355, 356, 499, 0, 357, 0,
	500, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 501, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 503, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 0, 393, 394, 395,
	396, 504, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 0, 415, 416, 409, 411, 412, 413, 410,
	414, 417, 418, 0, 419, 399, 400, 420, 421, 0,
	422, 505, 423, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 433, 429, 430, 431, 506, 0, 436, 437,
	435, 0, 438, 439, 440, 441, 442, 277, 443, 0,
	444, 507, 508, 509, 510, 0, 451, 0, 445, 446,
	511, 447, 512, 0, 448, 449, 450, 0, 452, 453,
	0, 0, 454, 455, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 513, 514, 515, 0, 466,
	465, 516, 542, 0, 212, 0, 467, 468, 517, 469,
	470, 471, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 472, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	477, 478, 479, 0, 239, 480, 0, 0, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 0, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 481, 482, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 484, 485, 0, 0, 0, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 0, 289, 0, 0, 0, 290, 291, 0, 292,
	487, 0, 488, 293, 0, 294, 295, 296, 297, 489,
	490, 491, 345, 0, 298, 299, 0, 300, 301, 303,
	0, 0, 0, 302, 304, 311, 0, 0, 305, 492,
	307, 306, 308, 309, 310, 493, 0, 494, 0, 312,
	0, 495, 0, 313, 314, 315, 0, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	496, 0, 325, 326, 0, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 338, 0, 341, 342, 344, 343, 0, 0,
	0, 0, 497, 498, 346, 347, 0, 348, 349, 350,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	0, 357, 0, 500, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 501, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 503,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 0,
	393, 394, 395, 396, 504, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 409, 411,
	412, 413, 410, 414, 417, 418, 0, 419, 399, 400,
	420, 421, 0, 422, 505, 423, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 506,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 443, 0, 444, 507, 508, 509, 510, 0, 451,
	0, 445, 446, 511, 447, 512, 0, 448, 449, 450,
	0, 452, 453, 0, 0, 454, 455, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 513, 514,
	515, 0, 466, 465, 516, 520, 0, 212, 0, 467,
	468, 517, 469, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 472, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 477, 478, 479, 0, 239, 480, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 481, 482, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 487, 0, 488, 293, 0, 294, 295,
	296, 297, 489, 490, 491, 345, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	0, 305, 492, 307, 306, 308, 309, 310, 493, 0,
	494, 0, 312, 0, 495, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 496, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 0, 341, 342, 344,
	343, 0, 0, 0, 0, 497, 498, 346, 347, 0,
	348, 349, 350, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 0, 357, 0, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 501,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 0, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 0,
	419, 399, 400, 420, 421, 0, 422, 505, 423, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 443, 0, 444, 507, 508, 509,
	510, 0, 451, 0, 445, 446, 511, 447, 512, 0,
	448, 449, 450, 0, 452, 453, 0, 0, 454, 455,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 513, 514, 515, 212, 466, 465, 516, 0, 0,
	0, 0, 467, 468, 517, 469, 470, 471, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 472, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	477, 478, 479, 0, 239, 480, 0, 0, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 0, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 481, 482, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 484, 485, 0, 0, 0, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 0, 289, 0, 0, 0, 290, 291, 0, 292,
	487, 0, 488, 293, 0, 294, 295, 296, 297, 489,
	490, 491, 345, 0, 298, 299, 0, 300, 301, 303,
	0, 0, 0, 302, 304, 311, 0, 0, 305, 492,
	307, 306, 308, 309, 310, 493, 0, 494, 0, 312,
	0, 495, 0, 313, 314, 315, 0, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	496, 0, 325, 326, 0, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 338, 0, 341, 342, 344, 343, 0, 0,
	0, 0, 497, 498, 346, 347, 0, 348, 349, 350,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	0, 357, 0, 500, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 501, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 503,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 0,
	393, 394, 395, 396, 504, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 409, 411,
	412, 413, 410, 414, 417, 418, 0, 419, 399, 400,
	420, 421, 0, 422, 505, 423, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 506,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 443, 0, 444, 507, 508, 509, 510, 0, 451,
	0, 445, 446, 511, 447, 512, 0, 448, 449, 450,
	0, 452, 453, 0, 0, 454, 455, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 513, 514,
	515, 212, 466, 465, 516, 0, 0, 0, 0, 467,
	468, 517, 469, 470, 471, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	472, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 474, 229, 475, 230, 231, 476, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 477, 478, 479,
	0, 239, 480, 0, 0, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 0, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	481, 482, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 483, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 484, 485, 0, 0, 0, 0, 0, 0, 0,
	283, 284, 285, 486, 286, 287, 0, 288, 0, 289,
	0, 0, 0, 290, 291, 0, 292, 487, 0, 488,
	293, 0, 294, 295, 296, 297, 2675, 490, 491, 345,
	0, 298, 299, 0, 300, 301, 303, 0, 0, 0,
	302, 304, 311, 0, 0, 305, 492, 307, 306, 308,
	309, 310, 493, 0, 494, 0, 312, 0, 495, 0,
	313, 314, 315, 0, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 496, 0, 325,
	326, 0, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 340, 338,
	0, 341, 342, 344, 343, 0, 0, 0, 0, 497,
	498, 346, 347, 0, 348, 349, 350, 0, 0, 352,
	353, 354, 0, 0, 355, 356, 499, 0, 357, 0,
	500, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 501, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 503, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 0, 393, 394, 395,
	396, 504, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 0, 415, 416, 409, 411, 412, 413, 410,
	414, 417, 418, 0, 419, 399, 400, 420, 421, 0,
	422, 505, 423, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 433, 429, 430, 431, 506, 0, 436, 437,
	435, 0, 438, 439, 440, 441, 442, 277, 443, 0,
	444, 507, 508, 509, 510, 0, 451, 0, 445, 446,
	511, 447, 512, 0, 448, 449, 450, 0, 452, 453,
	0, 0, 454, 455, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 513, 514, 515, 212, 466,
	465, 516, 0, 0, 0, 0, 467, 468, 517, 469,
	470, 471, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 472, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 477, 478, 479, 0, 239, 480,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 481, 482, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	0, 0, 0, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 0, 292, 487, 0, 488, 293, 0, 294,
	295, 296, 297, 2673, 490, 491, 345, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 0, 302, 304, 311,
	0, 0, 305, 492, 307, 306, 308, 309, 310, 493,
	0, 494, 0, 312, 0, 495, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 496, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 0, 341, 342,
	344, 343, 0, 0, 0, 0, 497, 498, 346, 347,
	0, 348, 349, 350, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 0, 357, 0, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	501, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 0, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	0, 419, 399, 400, 420, 421, 0, 422, 505, 423,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 443, 0, 444, 507, 508,
	509, 510, 0, 451, 0, 445, 446, 511, 447, 512,
	0, 448, 449, 450, 0, 452, 453, 0, 0, 454,
	455, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 513, 514, 515, 212, 466, 465, 516, 0,
	0, 0, 0, 467, 468, 517, 469, 470, 471, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 472, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 477, 478, 479, 0, 239, 480, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 0, 0, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 487, 0, 488, 293, 0, 294, 295, 296, 297,
	2661, 490, 491, 345, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 0, 302, 304, 311, 0, 0, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 0, 495, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 496, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 0, 341, 342, 344, 343, 0,
	0, 0, 0, 497, 498, 346, 347, 0, 348, 349,
	350, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 0, 357, 0, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 501, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	0, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 0, 419, 399,
	400, 420, 421, 0, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 507, 508, 509, 510, 0,
	451, 0, 445, 446, 511, 447, 512, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 212, 466, 465, 516, 0, 0, 0, 0,
	467, 468, 517, 469, 470, 471, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 472, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 0, 239, 480, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 0, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 2350, 490, 491,
	345, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	0, 302, 304, 311, 0, 0, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 0, 495,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 0, 341, 342, 344, 343, 0, 0, 0, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 0, 357,
	0, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 0, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	0, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 212,
	466, 465, 516, 0, 0, 0, 0, 467, 468, 517,
	469, 470, 471, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 472, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 477, 478, 479, 0, 239,
	480, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 481, 482,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 0, 289, 0, 0,
	0, 290, 291, 0, 292, 487, 0, 488, 293, 0,
	294, 295, 296, 297, 489, 490, 491, 345, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 0, 302, 304,
	311, 0, 0, 305, 492, 307, 306, 308, 309, 310,
	493, 0, 494, 0, 312, 0, 495, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 496, 0, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 0, 341,
	342, 344, 343, 0, 0, 0, 0, 497, 498, 346,
	347, 0, 348, 349, 350, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 0, 357, 0, 500, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 501, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 0, 393, 394, 395, 396, 504,
	397, 0, 398, 551, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 0, 419, 399, 400, 420, 421, 0, 422, 505,
	423, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 443, 0, 444, 507,
	508, 509, 510, 0, 451, 0, 445, 446, 511, 447,
	512, 0, 448, 449, 450, 0, 452, 453, 0, 0,
	454, 455, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 513, 514, 515, 212, 466, 465, 516,
	0, 0, 0, 0, 467, 468, 517, 469, 470, 471,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 472, 0, 1848, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 239, 480, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 0,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 489, 490, 491, 345, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 0,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 0, 495, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 0, 341, 342, 344, 343,
	0, 0, 0, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 0, 357, 0, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 0, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 0,
	399, 400, 420, 421, 0, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 212, 466, 465, 516, 0, 0, 0,
	0, 467, 468, 517, 469, 470, 471, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 472, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 477,
	478, 479, 0, 239, 480, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 0, 0, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 487,
	0, 488, 293, 0, 294, 295, 296, 297, 1273, 490,
	491, 345, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 0, 302, 304, 311, 0, 0, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 0,
	495, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 496,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 0, 341, 342, 344, 343, 0, 0, 0,
	0, 497, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 0,
	357, 0, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 501, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 0, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 0, 419, 399, 400, 420,
	421, 0, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 511, 447, 512, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 513, 514, 515,
	212, 466, 465, 516, 0, 0, 0, 0, 467, 468,
	517, 469, 470, 471, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 472,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 473,
	474, 229, 475, 230, 231, 476, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 477, 478, 479, 0,
	239, 480, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 481,
	482, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	483, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	484, 485, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 285, 486, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 487, 0, 488, 293,
	0, 294, 295, 296, 297, 1215, 490, 491, 345, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 0, 305, 492, 307, 306, 308, 309,
	310, 493, 0, 494, 0, 312, 0, 495, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 496, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 340, 338, 0,
	341, 342, 344, 343, 0, 0, 0, 0, 497, 498,
	346, 347, 0, 348, 349, 350, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 0, 357, 0, 500,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 501, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 503, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 0, 393, 394, 395, 396,
	504, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 0, 415, 416, 409, 411, 412, 413, 410, 414,
	417, 418, 0, 419, 399, 400, 420, 421, 0, 422,
	505, 423, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 433, 429, 430, 431, 506, 0, 436, 437, 435,
	0, 438, 439, 440, 441, 442, 277, 443, 0, 444,
	507, 508, 509, 510, 0, 451, 0, 445, 446, 511,
	447, 512, 0, 448, 449, 450, 0, 452, 453, 0,
	0, 454, 455, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 513, 514, 515, 212, 466, 465,
	516, 0, 0, 0, 0, 467, 468, 517, 469, 470,
	471, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 472, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 477, 478, 479, 0, 239, 480, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 481, 482, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 487, 0, 488, 293, 0, 294, 295,
	296, 297, 489, 490, 491, 345, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	0, 305, 492, 307, 306, 308, 309, 310, 493, 0,
	494, 0, 312, 0, 495, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 496, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 0, 341, 342, 344,
	343, 0, 0, 0, 0, 497, 498, 346, 347, 0,
	348, 349, 350, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 0, 357, 0, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 501,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 977, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 0, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 0,
	419, 399, 400, 420, 421, 0, 422, 505, 423, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 443, 0, 444, 507, 508, 509,
	510, 0, 451, 0, 445, 446, 511, 447, 512, 0,
	448, 449, 450, 0, 452, 453, 0, 0, 454, 455,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 513, 514, 515, 212, 466, 465, 516, 0, 0,
	0, 0, 467, 468, 517, 469, 470, 471, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 472, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	477, 478, 479, 0, 239, 480, 0, 0, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 0, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 481, 482, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 484, 485, 0, 0, 0, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 0, 289, 0, 0, 0, 290, 291, 0, 292,
	487, 0, 488, 0, 0, 294, 295, 296, 297, 489,
	490, 491, 345, 0, 298, 299, 0, 300, 301, 303,
	0, 0, 0, 302, 304, 311, 0, 0, 305, 492,
	307, 306, 308, 309, 310, 493, 0, 494, 0, 312,
	0, 495, 0, 313, 314, 315, 0, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	496, 0, 325, 326, 0, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 338, 0, 341, 342, 344, 343, 0, 0,
	0, 0, 497, 498, 346, 347, 0, 348, 349, 350,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	0, 357, 0, 500, 358, 351, 359, 360, 0, 362,
	363, 364, 365, 0, 366, 367, 501, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 0, 375, 376, 503,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 0,
	393, 394, 395, 396, 504, 0, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 409, 411,
	412, 413, 410, 414, 417, 418, 0, 419, 399, 400,
	420, 421, 0, 422, 505, 423, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 506,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 443, 0, 444, 507, 508, 509, 510, 0, 451,
	0, 445, 446, 511, 447, 512, 0, 448, 449, 450,
	0, 452, 453, 0, 0, 454, 455, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 513, 514,
	515, 0, 466, 465, 516, 0, 0, 0, 0, 467,
	468, 517, 469, 470, 471, 1443, 1444, 0, 1476, 1477,
	1478, 1486, 1487, 1488, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1479, 1474, 0, 0, 0, 0,
	0, 0, 1446, 0, 0, 0, 0, 1492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1443, 1444, 0, 1476, 1477, 1478, 1486, 1487, 1488,
	1445, 0, 0, 0, 0, 0, 0, 0, 0, 1465,
	1479, 1474, 0, 0, 0, 0, 1462, 0, 1446, 0,
	0, 0, 0, 1492, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1445, 0, 0, 0,
	0, 0, 0, 0, 0, 1465, 0, 0, 0, 0,
	0, 0, 1462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1468, 1469, 1470, 1471, 0, 0, 0,
	0, 0, 0, 1451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1483, 0, 0,
	1493, 0, 0, 0, 1473, 1475, 0, 0, 0, 1468,
	1469, 1470, 1471, 0, 0, 0, 0, 0, 0, 1451,
	0, 0, 0, 0, 1489, 0, 1490, 0, 0, 0,
	0, 0, 0, 1460, 1461, 0, 0, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 1493, 0, 1481, 0,
	1473, 1475, 0, 0, 0, 0, 1466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1489, 0, 1490, 0, 1491, 0, 0, 0, 0, 1460,
	1461, 0, 0, 0, 0, 0, 0, 0, 0, 1480,
	0, 0, 0, 0, 1481, 0, 0, 0, 0, 0,
	0, 0, 1466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1491, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1472, 0, 0, 1480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1443, 1444, 0, 1476, 1477,
	1478, 1486, 1487, 1488, 0, 0, 1484, 0, 1472, 0,
	0, 0, 0, 0, 1479, 1474, 0, 0, 0, 0,
	0, 0, 1446, 0, 0, 0, 1467, 1492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1445, 0, 1484, 0, 0, 0, 0, 0, 0, 1465,
	0, 0, 0, 0, 0, 0, 1462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1482,
	0, 0, 1457, 1458, 1464, 1463, 1459, 1485, 0, 1456,
	1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453, 0, 0,
	0, 0, 0, 0, 0, 0, 2532, 0, 0, 0,
	0, 0, 0, 1468, 1469, 1470, 1471, 0, 0, 0,
	0, 0, 0, 1451, 0, 1482, 0, 0, 1457, 1458,
	1464, 1463, 1459, 1485, 0, 1456, 1454, 1455, 1447, 1448,
	1449, 1450, 1452, 1453, 0, 0, 0, 1483, 0, 0,
	1493, 0, 2529, 0, 1473, 1475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1489, 0, 1490, 0, 0, 0,
	0, 0, 0, 1460, 1461, 0, 0, 0, 0, 1443,
	1444, 0, 1476, 1477, 1478, 1486, 1487, 1488, 1481, 0,
	0, 0, 0, 0, 0, 0, 1466, 0, 1479, 1474,
	0, 0, 0, 0, 0, 0, 1446, 0, 0, 0,
	0, 1492, 0, 0, 1491, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1480,
	0, 0, 0, 0, 1445, 0, 0, 0, 0, 0,
	0, 0, 0, 1465, 0, 0, 0, 0, 0, 0,
	1462, 0, 0, 0, 0, 0, 0, 0, 0, 1443,
	1444, 0, 1476, 1477, 1478, 1486, 1487, 1488, 0, 0,
	0, 0, 1472, 0, 0, 0, 0, 0, 1479, 1474,
	0, 0, 0, 0, 0, 0, 1446, 0, 0, 0,
	1467, 1492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1468, 1469, 1470,
	1471, 0, 0, 0, 1445, 0, 1484, 1451, 0, 0,
	0, 0, 0, 1465, 0, 0, 0, 0, 0, 0,
	1462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1483, 0, 0, 1493, 0, 0, 0, 1473, 1475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1489, 0,
	1490, 0, 0, 0, 0, 0, 0, 1460, 1461, 0,
	0, 0, 0, 0, 0, 0, 0, 1468, 1469, 1470,
	1471, 0, 1481, 0, 0, 0, 0, 1451, 0, 1482,
	1466, 0, 1457, 1458, 1464, 1463, 1459, 1485, 0, 1456,
	1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453, 1491, 0,
	0, 1483, 0, 0, 1493, 0, 2528, 0, 1473, 1475,
	0, 0, 0, 1480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1489, 0,
	1490, 0, 0, 0, 0, 0, 0, 1460, 1461, 0,
	0, 0, 0, 1443, 1444, 0, 1476, 1477, 1478, 1486,
	1487, 1488, 1481, 0, 0, 0, 1472, 0, 0, 0,
	1466, 0, 1479, 1474, 0, 0, 0, 0, 0, 0,
	1446, 0, 0, 0, 1467, 1492, 0, 0, 1491, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1480, 0, 0, 0, 0, 1445, 0,
	1484, 0, 0, 0, 0, 0, 0, 1465, 0, 0,
	0, 0, 0, 0, 1462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1468, 1469, 1470, 1471, 0, 0, 0, 0, 0,
	1484, 1451, 0, 1482, 0, 0, 1457, 1458, 1464, 1463,
	1459, 1485, 0, 1456, 1454, 1455, 1447, 1448, 1449, 1450,
	1452, 1453, 0, 0, 0, 1483, 0, 0, 1493, 0,
	2527, 0, 1473, 1475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1489, 0, 1490, 0, 0, 0, 0, 0,
	0, 1460, 1461, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1481, 0, 0, 0,
	0, 0, 0, 1482, 1466, 0, 1457, 1458, 1464, 1463,
	1459, 1485, 0, 1456, 1454, 1455, 1447, 1448, 1449, 1450,
	1452, 1453, 1491, 0, 0, 0, 0, 0, 0, 0,
	2067, 0, 0, 0, 0, 0, 0, 1480, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1443, 1444, 0, 1476, 1477, 1478,
	1486, 1487, 1488, 0, 0, 0, 0, 0, 0, 0,
	1472, 0, 0, 1479, 1474, 0, 0, 0, 0, 0,
	0, 1446, 0, 0, 0, 0, 1492, 0, 1467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1443, 1444, 0, 1476, 1477, 1478, 1486, 1487, 1488, 1445,
	0, 0, 0, 0, 1484, 0, 0, 0, 1465, 1479,
	1474, 0, 0, 0, 0, 1462, 0, 1446, 0, 0,
	0, 0, 1492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1445, 0, 0, 0, 0,
	0, 0, 0, 0, 1465, 0, 0, 0, 0, 0,
	0, 1462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1468, 1469, 1470, 1471, 0, 0, 0, 0,
	0, 0, 1451, 0, 0, 0, 0, 1482, 0, 0,
	1457, 1458, 1464, 1463, 1459, 1485, 0, 1456, 1454, 1455,
	1447, 1448, 1449, 1450, 1452, 1453, 1483, 0, 0, 1493,
	3418, 0, 0, 1473, 1475, 0, 0, 0, 1468, 1469,
	1470, 1471, 0, 0, 0, 0, 0, 0, 1451, 0,
	0, 0, 0, 1489, 0, 1490, 0, 0, 0, 0,
	0, 0, 1460, 1461, 0, 0, 0, 0, 0, 0,
	0, 0, 1483, 0, 0, 1493, 0, 1481, 0, 1473,
	1475, 0, 0, 0, 0, 1466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1489,
	0, 1490, 0, 1491, 0, 0, 0, 0, 1460, 1461,
	0, 0, 0, 0, 0, 0, 0, 0, 1480, 0,
	0, 0, 0, 1481, 0, 0, 0, 0, 0, 0,
	0, 1466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1491,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1472, 0, 0, 1480, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1467,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1443, 1444, 0, 1476, 1477, 1478, 1486, 1487, 1488,
	0, 0, 0, 0, 0, 1484, 0, 1472, 0, 0,
	1479, 1474, 0, 0, 0, 0, 0, 0, 1446, 0,
	0, 0, 0, 1492, 0, 1467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1445, 0, 0, 0,
	0, 1484, 0, 0, 0, 1465, 0, 0, 0, 0,
	0, 0, 1462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1482, 0,
	0, 1457, 1458, 1464, 1463, 1459, 1485, 0, 1456, 1454,
	1455, 1447, 1448, 1449, 1450, 1452, 1453, 0, 0, 0,
	0, 3349, 0, 0, 0, 0, 0, 0, 0, 1468,
	1469, 1470, 1471, 0, 0, 0, 0, 0, 0, 1451,
	0, 0, 0, 0, 1482, 0, 0, 1457, 1458, 1464,
	1463, 1459, 1485, 0, 1456, 1454, 1455, 1447, 1448, 1449,
	1450, 1452, 1453, 1483, 0, 0, 1493, 3348, 0, 0,
	1473, 1475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1489, 0, 1490, 0, 0, 0, 0, 0, 0, 1460,
	1461, 0, 0, 0, 0, 1443, 1444, 0, 1476, 1477,
	1478, 1486, 1487, 1488, 1481, 0, 0, 0, 0, 0,
	0, 0, 1466, 0, 1479, 1474, 0, 0, 0, 0,
	0, 0, 1446, 0, 0, 0, 0, 1492, 0, 0,
	1491, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1480, 0, 0, 0, 0,
	1445, 0, 0, 0, 0, 0, 0, 0, 0, 1465,
	0, 0, 0, 0, 0, 0, 1462, 0, 0, 0,
	0, 0, 0, 0, 0, 1443, 1444, 0, 1476, 1477,
	1478, 1486, 1487, 1488, 0, 0, 0, 0, 1472, 0,
	0, 0, 0, 0, 1479, 1474, 0, 0, 0, 0,
	0, 0, 1446, 0, 0, 0, 1467, 1492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1468, 1469, 1470, 1471, 0, 0, 0,
	1445, 0, 1484, 1451, 0, 0, 0, 0, 0, 1465,
	0, 0, 0, 0, 0, 0, 1462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1483, 0, 0,
	1493, 0, 0, 0, 1473, 1475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1489, 0, 1490, 0, 0, 0,
	0, 0, 0, 1460, 1461, 0, 0, 0, 0, 0,
	0, 0, 0, 1468, 1469, 1470, 1471, 0, 1481, 0,
	0, 0, 0, 1451, 0, 1482, 1466, 0, 1457, 1458,
	1464, 1463, 1459, 1485, 0, 1456, 1454, 1455, 1447, 1448,
	1449, 1450, 1452, 1453, 1491, 0, 0, 1483, 3243, 0,
	1493, 0, 0, 0, 1473, 1475, 0, 0, 0, 1480,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1489, 0, 1490, 0, 0, 0,
	0, 0, 0, 1460, 1461, 0, 0, 0, 0, 1443,
	1444, 0, 1476, 1477, 1478, 1486, 1487, 1488, 1481, 0,
	0, 0, 1472, 0, 0, 0, 1466, 0, 1479, 1474,
	0, 0, 0, 0, 0, 0, 1446, 0, 0, 0,
	1467, 1492, 0, 0, 1491, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1480,
	0, 0, 0, 0, 1445, 0, 1484, 0, 0, 0,
	0, 0, 0, 1465, 0, 0, 0, 0, 0, 0,
	1462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1468, 1469, 1470,
	1471, 0, 0, 0, 0, 0, 1484, 1451, 0, 1482,
	0, 0, 1457, 1458, 1464, 1463, 1459, 1485, 0, 1456,
	1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453, 0, 0,
	0, 1483, 3149, 0, 1493, 0, 0, 0, 1473, 1475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1489, 0,
	1490, 0, 0, 0, 0, 0, 0, 1460, 1461, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1481, 0, 0, 0, 0, 0, 0, 1482,
	1466, 0, 1457, 1458, 1464, 1463, 1459, 1485, 0, 1456,
	1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453, 1491, 0,
	0, 0, 3101, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1443, 1444, 0, 1476, 1477, 1478, 1486, 1487, 1488, 0,
	0, 0, 0, 0, 0, 0, 1472, 0, 0, 1479,
	1474, 0, 0, 0, 0, 0, 0, 1446, 0, 0,
	0, 0, 1492, 0, 1467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1443, 1444, 0, 1476,
	1477, 1478, 1486, 1487, 1488, 1445, 0, 0, 0, 0,
	1484, 0, 0, 0, 1465, 1479, 1474, 0, 0, 0,
	0, 1462, 0, 1446, 0, 0, 0, 0, 1492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1445, 0, 0, 0, 0, 0, 0, 0, 0,
	1465, 0, 0, 0, 0, 0, 0, 1462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1468, 1469,
	1470, 1471, 0, 0, 0, 0, 0, 0, 1451, 0,
	0, 0, 0, 1482, 0, 0, 1457, 1458, 1464, 1463,
	1459, 1485, 0, 1456, 1454, 1455, 1447, 1448, 1449, 1450,
	1452, 1453, 1483, 0, 0, 1493, 3100, 0, 0, 1473,
	1475, 0, 0, 0, 1468, 1469, 1470, 1471, 0, 0,
	0, 0, 0, 0, 1451, 0, 0, 0, 0, 1489,
	0, 1490, 0, 0, 0, 0, 0, 0, 1460, 1461,
	0, 0, 0, 0, 0, 0, 0, 0, 1483, 0,
	0, 1493, 0, 1481, 0, 1473, 1475, 0, 0, 0,
	0, 1466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1489, 0, 1490, 0, 1491,
	0, 0, 0, 0, 1460, 1461, 0, 0, 0, 0,
	0, 0, 0, 0, 1480, 0, 0, 0, 0, 1481,
	0, 0, 0, 0, 0, 0, 0, 1466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1491, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1472, 0, 0,
	1480, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1443, 1444, 0,
	1476, 1477, 1478, 1486, 1487, 1488, 0, 0, 0, 0,
	0, 1484, 0, 1472, 0, 0, 1479, 1474, 0, 0,
	0, 0, 0, 0, 1446, 0, 0, 0, 0, 1492,
	0, 1467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1445, 0, 0, 0, 0, 1484, 0, 0,
	0, 1465, 0, 0, 0, 0, 0, 0, 1462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1482, 0, 0, 1457, 1458, 1464,
	1463, 1459, 1485, 0, 1456, 1454, 1455, 1447, 1448, 1449,
	1450, 1452, 1453, 0, 0, 0, 0, 3099, 0, 0,
	0, 0, 0, 0, 0, 1468, 1469, 1470, 1471, 0,
	0, 0, 0, 0, 0, 1451, 0, 0, 0, 0,
	1482, 0, 0, 1457, 1458, 1464, 1463, 1459, 1485, 0,
	1456, 1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453, 1483,
	0, 0, 1493, 3066, 0, 0, 1473, 1475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1489, 0, 1490, 0,
	0, 0, 0, 0, 0, 1460, 1461, 0, 0, 0,
	0, 1443, 1444, 0, 1476, 1477, 1478, 1486, 1487, 1488,
	1481, 0, 0, 0, 0, 0, 0, 0, 1466, 0,
	1479, 1474, 0, 0, 0, 0, 0, 0, 1446, 0,
	0, 0, 0, 1492, 0, 0, 1491, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1480, 0, 0, 0, 0, 1445, 0, 0, 0,
	0, 0, 0, 0, 0, 1465, 0, 0, 0, 0,
	0, 0, 1462, 0, 0, 0, 0, 0, 0, 0,
	0, 1443, 1444, 0, 1476, 1477, 1478, 1486, 1487, 1488,
	0, 0, 0, 0, 1472, 0, 0, 0, 0, 0,
	1479, 1474, 0, 0, 0, 0, 0, 0, 1446, 0,
	0, 0, 1467, 1492, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1468,
	1469, 1470, 1471, 0, 0, 0, 1445, 0, 1484, 1451,
	0, 0, 0, 0, 0, 1465, 0, 0, 0, 0,
	0, 0, 1462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 1493, 0, 0, 0,
	1473, 1475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1489, 0, 1490, 0, 0, 0, 0, 0, 0, 1460,
	1461, 0, 0, 0, 0, 0, 0, 0, 0, 1468,
	1469, 1470, 1471, 0, 1481, 0, 0, 0, 0, 1451,
	3520, 1482, 1466, 0, 1457, 1458, 1464, 1463, 1459, 1485,
	0, 1456, 1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453,
	1491, 0, 0, 1483, 2867, 0, 1493, 0, 0, 0,
	1473, 1475, 0, 0, 0, 1480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1489, 0, 1490, 0, 0, 0, 0, 0, 0, 1460,
	1461, 0, 0, 0, 0, 1443, 1444, 0, 1476, 1477,
	1478, 1486, 1487, 1488, 1481, 0, 0, 0, 1472, 0,
	0, 0, 1466, 0, 1479, 1474, 0, 0, 0, 0,
	2455, 0, 1446, 0, 0, 0, 1467, 1492, 0, 0,
	1491, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1480, 0, 0, 0, 0,
	1445, 0, 1484, 0, 0, 0, 0, 0, 0, 1465,
	0, 0, 0, 0, 0, 0, 1462, 3519, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1472, 0,
	0, 0, 0, 0, 2456, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1467, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1468, 1469, 1470, 1471, 0, 0, 0,
	0, 0, 1484, 1451, 0, 1482, 0, 0, 1457, 1458,
	1464, 1463, 1459, 1485, 0, 1456, 1454, 1455, 1447, 1448,
	1449, 1450, 1452, 1453, 0, 0, 2484, 1483, 0, 0,
	1493, 0, 0, 0, 1473, 1475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1489, 0, 1490, 0, 0, 0,
	0, 0, 0, 1460, 1461, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1481, 0,
	0, 0, 0, 0, 0, 1482, 1466, 0, 1457, 1458,
	1464, 1463, 1459, 1485, 0, 1456, 1454, 1455, 1447, 1448,
	1449, 1450, 1452, 1453, 1491, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1480,
	0, 1443, 1444, 0, 1476, 1477, 1478, 1486, 1487, 1488,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1479, 1474, 0, 0, 0, 0, 0, 0, 1446, 0,
	0, 0, 0, 1492, 0, 0, 0, 0, 0, 0,
	0, 0, 1472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1445, 0, 0, 0,
	1467, 0, 0, 0, 0, 1465, 0, 0, 0, 0,
	0, 0, 1462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1468,
	1469, 1470, 1471, 0, 0, 0, 0, 0, 0, 1451,
	0, 2572, 0, 0, 2571, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 1493, 0, 0, 1482,
	1473, 1475, 1457, 1458, 1464, 1463, 1459, 1485, 0, 1456,
	1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453, 0, 0,
	1489, 0, 1490, 0, 0, 0, 0, 0, 2158, 1460,
	1461, 0, 0, 0, 0, 1443, 1444, 0, 1476, 1477,
	1478, 1486, 1487, 1488, 1481, 0, 0, 0, 0, 0,
	0, 0, 1466, 0, 1479, 1474, 0, 0, 0, 2157,
	0, 0, 1446, 0, 0, 0, 0, 1492, 0, 0,
	1491, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1480, 0, 0, 0, 0,
	1445, 0, 0, 0, 0, 0, 0, 0, 0, 1465,
	0, 0, 0, 0, 0, 0, 1462, 0, 0, 0,
	0, 0, 0, 1443, 1444, 0, 1476, 1477, 1478, 1486,
	1487, 1488, 0, 0, 0, 0, 0, 0, 1472, 0,
	0, 0, 1479, 1474, 0, 0, 0, 0, 0, 0,
	1446, 0, 0, 0, 0, 1492, 1467, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1468, 1469, 1470, 1471, 0, 1445, 0,
	0, 0, 1484, 1451, 0, 0, 0, 1465, 0, 0,
	0, 0, 0, 0, 1462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1483, 0, 0,
	1493, 0, 0, 0, 1473, 1475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1489, 0, 1490, 0, 0, 0,
	0, 0, 0, 1460, 1461, 0, 0, 0, 0, 0,
	0, 1468, 1469, 1470, 1471, 0, 0, 0, 1481, 0,
	0, 1451, 0, 0, 0, 1482, 1466, 0, 1457, 1458,
	1464, 1463, 1459, 1485, 0, 1456, 1454, 1455, 1447, 1448,
	1449, 1450, 1452, 1453, 1491, 1483, 0, 0, 1493, 0,
	0, 0, 1473, 1475, 0, 0, 0, 0, 0, 1480,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1489, 0, 1490, 0, 0, 0, 0, 0,
	0, 1460, 1461, 0, 0, 0, 0, 1443, 1444, 0,
	1476, 1477, 1478, 1486, 1487, 1488, 1481, 0, 0, 0,
	0, 0, 1472, 0, 1466, 0, 1479, 1474, 0, 0,
	0, 0, 0, 0, 1446, 0, 0, 0, 0, 1492,
	1467, 0, 1491, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1480, 820, 0,
	0, 0, 1445, 0, 0, 0, 1484, 0, 0, 0,
	0, 1465, 0, 0, 0, 0, 0, 0, 1462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1468, 1469, 1470, 1471, 0,
	0, 0, 0, 0, 1484, 1451, 0, 0, 0, 1482,
	0, 0, 1457, 1458, 1464, 1463, 1459, 1485, 0, 1456,
	1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453, 0, 1483,
	0, 0, 1493, 0, 0, 0, 1473, 1475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1489, 0, 1490, 0,
	0, 0, 0, 0, 0, 1460, 1461, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1481, 0, 0, 0, 0, 0, 0, 1482, 1466, 0,
	1457, 1458, 1464, 1463, 1459, 1485, 0, 1456, 1454, 1455,
	1447, 1448, 1449, 1450, 1452, 1453, 1491, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1480, 0, 1443, 1444, 0, 1476, 1477, 1478, 1486,
	1487, 1488, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1479, 1474, 0, 0, 0, 0, 0, 0,
	1446, 0, 0, 0, 0, 1492, 0, 0, 0, 0,
	0, 0, 0, 0, 1472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1445, 0,
	0, 0, 1467, 0, 0, 0, 0, 1465, 0, 0,
	0, 0, 0, 0, 1462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2855, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1468, 1469, 1470, 1471, 0, 0, 0, 0, 0,
	0, 1451, 0, 0, 0, 0, 2578, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1483, 0, 0, 1493, 0,
	0, 1482, 1473, 1475, 1457, 1458, 1464, 1463, 1459, 1485,
	0, 1456, 1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453,
	0, 0, 1489, 0, 1490, 0, 0, 0, 0, 0,
	0, 1460, 1461, 0, 0, 0, 0, 1443, 1444, 0,
	1476, 1477, 1478, 1486, 1487, 1488, 1481, 0, 0, 0,
	0, 0, 0, 0, 1466, 0, 1479, 1474, 0, 0,
	0, 2573, 0, 0, 1446, 0, 0, 0, 0, 1492,
	0, 0, 1491, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1480, 0, 0,
	0, 0, 1445, 0, 0, 0, 0, 0, 0, 0,
	0, 1465, 0, 0, 0, 0, 0, 0, 1462, 0,
	0, 0, 0, 0, 0, 1443, 1444, 0, 1476, 1477,
	1478, 1486, 1487, 1488, 0, 0, 0, 0, 0, 0,
	1472, 0, 0, 0, 1479, 1474, 0, 0, 0, 0,
	0, 0, 1446, 0, 0, 0, 0, 1492, 1467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1468, 1469, 1470, 1471, 0,
	1445, 0, 0, 0, 1484, 1451, 0, 0, 0, 1465,
	0, 0, 0, 0, 0, 0, 1462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1483,
	0, 0, 1493, 0, 0, 0, 1473, 1475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1489, 0, 1490, 0,
	0, 0, 0, 0, 0, 1460, 1461, 0, 0, 0,
	0, 0, 0, 1468, 1469, 1470, 1471, 0, 0, 0,
	1481, 0, 0, 1451, 0, 0, 0, 1482, 1466, 0,
	1457, 1458, 1464, 1463, 1459, 1485, 0, 1456, 1454, 1455,
	1447, 1448, 1449, 1450, 1452, 1453, 1491, 1483, 0, 0,
	1493, 0, 0, 0, 1473, 1475, 0, 0, 0, 0,
	0, 1480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1489, 0, 1490, 0, 0, 0,
	0, 0, 0, 1460, 1461, 0, 0, 0, 0, 1443,
	1444, 0, 1476, 1477, 1478, 1486, 1487, 1488, 1481, 0,
	0, 0, 0, 0, 1472, 0, 1466, 0, 1479, 1474,
	0, 0, 0, 2526, 0, 0, 1446, 0, 0, 0,
	0, 1492, 1467, 0, 1491, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1480,
	0, 0, 0, 0, 1445, 0, 0, 0, 1484, 0,
	0, 0, 0, 1465, 0, 0, 0, 2540, 0, 0,
	1462, 0, 0, 0, 0, 0, 0, 0, 0, 1443,
	1444, 0, 1476, 1477, 1478, 1486, 1487, 1488, 0, 0,
	0, 0, 1472, 0, 0, 0, 0, 0, 1479, 1474,
	0, 0, 0, 0, 0, 0, 1446, 0, 0, 0,
	1467, 1492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1468, 1469, 1470,
	1471, 0, 0, 0, 1445, 0, 1484, 1451, 0, 0,
	0, 1482, 0, 1465, 1457, 1458, 1464, 1463, 1459, 1485,
	1462, 1456, 1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453,
	0, 1483, 0, 0, 1493, 0, 0, 0, 1473, 1475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1489, 0,
	1490, 0, 0, 0, 0, 0, 0, 1460, 1461, 0,
	0, 0, 0, 0, 0, 0, 0, 1468, 1469, 1470,
	1471, 0, 1481, 0, 0, 0, 0, 1451, 0, 1482,
	1466, 0, 1457, 1458, 1464, 1463, 1459, 1485, 0, 1456,
	1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453, 1491, 0,
	0, 1483, 0, 0, 1493, 0, 0, 0, 1473, 1475,
	0, 0, 0, 1480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1489, 0,
	1490, 0, 0, 0, 0, 0, 0, 1460, 1461, 0,
	0, 0, 0, 1443, 1444, 0, 1476, 1477, 1478, 1486,
	1487, 1488, 1481, 0, 0, 0, 1472, 0, 0, 0,
	1466, 0, 1479, 1474, 0, 0, 0, 0, 0, 0,
	1446, 0, 0, 0, 1467, 1492, 0, 0, 1491, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1480, 0, 0, 0, 0, 1445, 0,
	1484, 0, 0, 0, 0, 0, 0, 1465, 0, 0,
	0, 0, 0, 0, 1462, 0, 0, 0, 0, 0,
	0, 1443, 1444, 0, 1476, 1477, 1478, 1486, 1487, 1488,
	0, 0, 0, 0, 0, 0, 1472, 0, 0, 0,
	0, 1474, 0, 0, 0, 0, 0, 0, 1446, 0,
	0, 0, 0, 1492, 1467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1468, 1469, 1470, 1471, 0, 1445, 0, 0, 0,
	1484, 1451, 0, 1482, 0, 1465, 1457, 1458, 1464, 1463,
	1459, 1485, 1462, 1456, 1454, 1455, 1447, 1448, 1449, 1450,
	1452, 1453, 0, 0, 0, 1483, 0, 0, 1493, 0,
	0, 0, 1473, 1475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1489, 0, 1490, 0, 0, 0, 0, 0,
	0, 1460, 1461, 0, 0, 0, 0, 0, 0, 1468,
	1469, 1470, 1471, 0, 0, 0, 1481, 0, 0, 1451,
	0, 0, 0, 1482, 1466, 0, 1457, 1458, 1464, 1463,
	1459, 1485, 0, 1456, 1454, 1455, 1447, 1448, 1449, 1450,
	1452, 1453, 1491, 1483, 0, 0, 1493, 0, 0, 0,
	1473, 1475, 0, 0, 0, 1443, 1444, 0, 1476, 1477,
	1478, 1486, 1487, 1488, 0, 0, 0, 0, 0, 0,
	1489, 0, 1490, 0, 0, 1474, 0, 0, 0, 1460,
	1461, 0, 1446, 0, 0, 0, 0, 1492, 0, 0,
	0, 0, 0, 0, 1481, 0, 0, 0, 0, 0,
	1472, 0, 1466, 0, 0, 0, 0, 0, 0, 0,
	1445, 0, 0, 0, 0, 0, 0, 0, 1467, 1465,
	1491, 0, 0, 0, 0, 0, 1462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1472, 0,
	0, 0, 0, 1468, 1469, 1470, 1471, 0, 0, 0,
	0, 0, 0, 1451, 0, 0, 1467, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1483, 0, 0,
	1493, 0, 1484, 0, 1473, 1475, 0, 1482, 0, 0,
	1457, 1458, 1464, 1463, 1459, 1485, 0, 1456, 1454, 1455,
	1447, 1448, 1449, 1450, 1452, 1453, 0, 0, 0, 0,
	0, 0, 0, 1460, 1461, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1481, 0,
	0, 0, 0, 0, 0, 0, 1466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1482, 0, 0, 1457, 1458,
	1464, 1463, 1459, 1485, 0, 1456, 1454, 1455, 1447, 1448,
	1449, 1450, 1452, 1453, 1663, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1675, 1657, 1664, 1647, 1685, 1684,
	1467, 0, 1649, 1648, 0, 0, 0, 0, 0, 0,
	1695, 1696, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1686, 0, 1682, 1681, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1680, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1679, 1677, 1678, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1482,
	0, 0, 1457, 1458, 1464, 1463, 1459, 1485, 0, 1456,
	1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453, 0, 1659,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1668,
	1662, 1670, 1672, 1673, 1674, 1669, 728, 1667, 761, 0,
	0, 0, 0, 0, 0, 0, 0, 1691, 1692, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	735, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 746, 733, 0, 0, 0, 0,
	0, 1651, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1683, 0, 0, 0, 1660, 734, 1661,
	0, 0, 0, 736, 0, 0, 0, 767, 0, 0,
	0, 0, 0, 0, 743, 744, 0, 0, 0, 0,
	755, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 762, 738, 0, 0, 0, 0, 1676,
	0, 0, 0, 1644, 1642, 1643, 1646, 1645, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 760, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1652, 1653,
	1655, 1656, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 739, 1671, 1654, 0, 0, 0, 0,
	0, 732, 0, 0, 0, 1694, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 740, 741, 0, 0,
	0, 1650, 0, 0, 1687, 1688, 1689, 1690, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 748, 747,
	0, 0, 0, 0, 0, 0, 742, 0, 0, 0,
	0, 0, 0, 0, 1658, 0, 0, 0, 0, 1665,
	1693, 766, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 763, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 737, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 759, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 757, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 751, 0, 0, 0, 0,
	0, 752, 0, 0, 0, 0, 0, 0, 730, 0,
	764, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 731, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 753, 0, 0, 0, 750,
	0, 0, 0, 0, 0, 0, 0, 0, 765, 0,
	0, 0, 0, 0, 0, 0, 754, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 756, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 758,
}
var sqlPact = [...]int{

	5793, -1000, -1000, -1000, -1000, -1000, -1000, 209, 208, 207,
	197, 194, 193, 191, 190, -1000, -1000, -1000, 189, -1000,
	-1000, 187, -1000, 186, 184, 183, 181, -1000, 175, 170,
	168, -1000, -1000, -1000, -1000, 166, 164, 163, 52610, 1728,
	63973, 55541, 1813, 47129, 63550, 46706, 63127, 62704, 161, -1000,
	62281, 156, 154, 153, -1000, -1000, 152, 1701, 38206, 151,
	147, 144, 1857, 142, 141, -1000, 137, -1000, 7570, 1246,
	-1000, 136, 134, -1000, 7485, 477, 54701, 2226, 128, 127,
	37782, 2209, 2214, -1000, -1000, 1601, -1000, -1000, 125, 124,
	123, 113, 112, 111, 109, 106, 104, -1000, 101, 100,
	98, 94, 90, 89, 85, 84, 82, 81, 80, 78,
	77, 75, 73, 70, 69, 68, -1000, 74484, 1523, 1413,
	1398, 1391, 1389, 1381, 865, 66, 65, 62, 60, 55,
	54, 53, -1000, -1000, 52, 51, 50, 48, -1000, 45,
	39, 149, 37, 36, 34, 21, 18, 2032, 2180, 1268,
	882, 18436, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 68143, 64390, 17, -27, 14,
	-1000, 2524, 845, 31423, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 422, -1000, -1000, -1000, 281, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1631, 646,
	-1000, -1000, -1000, 61858, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1720, -21, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 642, -1000, 1718, 157, 1628, -1000, -1000, -1000, -1000,
	-1000, 64390, -1000, -1000, 2803, 2802, 1635, 638, 61441, -1000,
	1249, -1000, 811, 21124, -1000, 997, -1000, 21124, 278, -1000,
	-1000, -1000, -1000, -1000, 46283, 14860, 45860, 45437, 42067, 61018,
	14427, 52193, 1112, -1000, -1000, -1000, -1000, -1000, -9, 39469,
	64390, -1000, 276, -1000, -1000, -1000, -1000, -1000, -1000, 27500,
	736, 27042, 803, 26584, 620, -1000, -1000, -1000, -1000, 2799,
	2798, 983, 2797, 2464, 67726, 1455, 2794, 1376, 1061, 910,
	2782, 2776, 2773, 2772, 2769, 2768, 2767, 1264, 60595, 2210,
	41634, 41201, 52610, 52610, 1991, 60172, -1000, -1000, 1170, 1139,
	-1000, -1000, -1000, -1000, 2332, 2212, 2168, 51770, -1000, -1000,
	2766, 2763, 2762, 2761, 2760, 67309, 1453, 2756, 1919, 2755,
	2754, 2753, 2752, 2751, 2749, 2748, 2747, 2743, -1000, 51347,
	50924, 50501, 50078, 59749, 40768, 40335, -1000, -1000, -1000, 33111,
	4461, 59326, 34410, 52610, 52610, -1000, -1000, 27946, 129, -1000,
	-1000, -1000, 2170, -1000, 27946, 129, -1000, 64390, -1000, 2202,
	1510, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2264, 1371, 2659, 39902, 1626, 1174, 2326, 2317, 1256, 1907,
	2309, 2302, 2295, 2294, 2293, 1347, 1957, 263, 17978, 1278,
	1250, 2278, 2232, 2673, 1641, 45014, 2742, 2741, 2482, 2220,
	2169, -1000, -1000, -1000, -1000, 1214, -1000, -1000, 47546, -1000,
	-1000, 1016, -1000, -1000, 1016, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1105, 66475, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1408, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1759,
	-1000, 1589, -1000, -1000, 1191, 2180, 1897, 2509, 2509, 2509,
	2527, 392, 388, -1000, 149, -1000, -1000, 73558, -1000, -1000,
	27946, 27946, 27946, 27946, 27946, 1541, -1000, 637, -1000, -1000,
	688, -1000, 636, 549, -1000, -1000, -1000, -1000, -1000, -1000,
	635, 2677, -1000, 847, -1000, -1000, -1000, -1000, 2615, -1000,
	17074, -1000, -1000, -1000, 421, 632, 27946, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 272, 824, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 538,
	1451, 536, 536, 536, -1000, -1000, 900, -1000, -1000, -1000,
	316, 535, 291, 533, -1000, -1000, -1000, -1000, 2200, 627,
	622, -1000, 619, 616, 609, -1000, -1000, -1000, 607, 606,
	604, 603, 598, 596, 594, 593, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 899, -1000, 586, 585, 583, 582, 580,
	577, 564, 562, 556, -1000, -1000, -10, 64390, -1000, 422,
	-10, -1000, -1000, 553, -1000, 21570, 21570, 21570, -1000, -1000,
	1713, 27946, -1000, 1889, -1000, 412, -7, 750, 32265, -1000,
	30577, 750, 696, 35675, -1000, 2167, -1000, -1000, 552, 271,
	-1000, -1000, 2159, 64390, 15291, 64390, 52610, 52610, -1000, 2423,
	27946, -1000, -1000, 39048, 64390, 53027, 2576, 74290, 39048, 64390,
	2196, -1000, -1000, -1000, 64390, -1000, 27946, -1000, 2574, 1176,
	42919, 2546, -19, -1000, -1000, -1000, -1000, -1000, -1000, 1898,
	1888, 982, 1762, 1132, -1000, 21124, 2457, -1000, -1000, -1000,
	241, 15291, -1000, 2361, 2401, 1147, -1000, 1757, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1424, 2398, -1000, 1653,
	2394, 1422, -1000, -1000, 871, 2393, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1676, -1000, -1000, 2479, -1000,
	-1000, 1830, 2391, -2, -1000, -1000, 33548, 39469, -12, -1000,
	-1000, -32, -1000, 13994, 73558, -1000, -1000, -1000, 73558, 753,
	-1000, -1000, 2389, -1000, 73558, 748, -1000, -1000, 2386, -1000,
	-1000, -1000, 2740, -1000, 2739, 1846, 2738, 2737, 2736, -1000,
	1218, 1417, 2735, -1000, 2734, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 49655, 49232, 906, -1000, 1711, -1000, -1000, 48809,
	848, 1844, -1000, -1000, 1841, -1000, 820, -1000, 2732, 58903,
	2004, 848, 1839, -1000, -1000, -1000, -1000, -1000, 52610, -1000,
	52610, -1000, 52610, -1000, 1263, -1000, 66892, -7, -1000, -1000,
	-1000, -1000, -1000, 2380, 2726, 2720, 2719, -1000, 64390, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 176, 2379,
	-1000, -1000, 176, 2378, -1000, 176, 2375, -1000, 165, 2371,
	-1000, -1000, 1714, 2367, -1000, -162, 2354, -1000, -1000, -162,
	2340, -1000, -30, -1000, -1000, -1000, 845, -1000, 32688, 58480,
	42498, 821, 640, 37359, 73558, -1000, 33548, 73558, -1000, 42498,
	48809, -1000, 58057, 48392, -1000, -1000, 1161, 1940, -1000, -1000,
	-1000, -1000, 42498, 42498, 42498, -1000, 57634, -1000, 1637, 1320,
	2485, 52610, -1000, 1494, -1000, -1000, -1000, 2499, 2194, -1000,
	38627, 54278, -1000, 53861, -1000, 53444, -1000, 52610, -1000, 52610,
	-1000, 2718, 2717, 2716, -1000, 2715, 2494, 73558, 2490, -1000,
	2342, 1405, 1395, 64390, -1000, -1000, 64390, -1000, 64390, -1000,
	-1000, -1000, 1894, -1000, -1000, -1000, -1000, 52610, -1000, -1000,
	-1000, -1000, -1000, -1000, 2189, -1000, 1464, -1000, 1158, -1000,
	-1000, 180, -1000, -1000, -19, -1000, 66475, -1000, -1000, 2180,
	1897, -1000, 64390, -1000, -1000, 1934, -1000, 1216, -1000, 2180,
	1680, 1978, 26126, 1956, 27946, 149, -1000, -1000, 149, 149,
	20678, -1000, -1000, 74290, 74290, 15291, 1122, 27946, 27946, 27946,
	27946, 27946, 27946, 27946, 27946, 27946, 27946, 27946, 27946, 27946,
	27946, 27946, 27946, 27946, 27946, 27946, 27946, 27946, 27946, 27946,
	27946, 27946, 27946, 27946, 27946, 27946, 27946, 27946, 27946, 27946,
	27946, 27946, 1842, 27946, 1089, 27946, 27946, 27946, 27946, 1416,
	-1000, -1000, 1561, 455, 1610, -1000, 2641, 2641, 2641, 73840,
	73840, 450, 2712, 688, -1000, 27946, -1000, 129, 27946, 15724,
	-1000, 2666, 1224, -1000, -1000, 388, 9052, 1807, -1000, 387,
	16182, -1000, -1000, -1000, 17074, 549, 25668, 27946, 887, 73558,
	13563, 2221, 2060, -1000, 2660, -1000, -1000, 2629, -1000, -1000,
	-1000, -1000, 2629, 1120, 1119, 2658, -1000, 2629, 2629, 546,
	721, 700, 695, 694, 491, 27946, 27946, 27946, 27946, 27946,
	27946, 27946, 27946, -1000, 25222, 24764, 24306, 29284, 23848, 27946,
	17520, 23390, 22932, 64390, -10, 2573, 27946, 108, -1000, 72454,
	-1000, 108, 108, 544, -31, 73558, 1948, 1948, 31844, 1865,
	1554, 1554, 1554, -1000, 543, 661, 12, 11, 10, -1000,
	-1000, 7, -4, 750, 10530, 55958, 1576, 750, 750, 236,
	274, 381, 30156, 1889, 55958, -1000, -1000, 52610, 542, 15724,
	15291, 1186, -39, 233, 1966, 1965, 1964, -1000, 1337, -40,
	1084, -24, -1000, 3715, -45, -1000, 894, -1000, -1000, -1000,
	-1000, 222, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 893, 541, 539, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 538,
	1451, 536, 536, 536, -1000, -1000, -1000, 316, 535, 291,
	533, -1000, -1000, -1000, -1000, -1000, -1000, 2156, -32, 53027,
	782, -46, 986, -19, -1000, -1000, -1000, 42919, 1016, -1000,
	1400, -1000, -1000, -1000, -1000, -1000, -1000, 1173, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2674, -1000, 2650, -1000, -1000,
	2657, -11, -1000, -1000, 15291, -1000, -22, 1410, -1000, 44591,
	2483, 2481, 2473, 1225, -1000, 1195, 2525, 47546, 2552, 2555,
	662, -1000, 2154, -1000, -1000, 808, 1342, 1083, 47546, 1653,
	-1000, 74290, -1000, 2047, 2523, 1141, 1203, 1141, 1141, 1137,
	-1000, 47546, 1081, 1491, 42498, -1000, 1078, -1000, -25, 2550,
	2549, 91, -1000, 2153, 1073, -1000, -1000, 52610, 15291, 724,
	-1000, 42498, -12, 39469, 64390, 231, -1000, 27946, 129, 27946,
	129, -1000, -1000, 2330, -1000, -1000, -1000, 2711, 1404, 1916,
	-1000, -1000, -1000, 530, 1837, 1653, 1836, -1000, -1000, 47969,
	2152, 64390, 1976, -14, 52610, -1000, -1000, 1487, -1000, 2329,
	2320, 433, 2710, -1000, 1699, 1835, -1000, -1000, -1000, 66058,
	1131, 2299, 879, 631, 2565, 631, 36517, -1000, 64390, -1000,
	64390, -1000, -1000, -1000, 2709, -1000, 52610, -1000, -1000, 52610,
	-1000, 52610, -1000, 52610, -1000, 52610, 52610, -1000, 64390, 42498,
	42498, 42498, 4383, 43757, -48, 380, -1000, 57217, 64390, 937,
	44174, 64390, 2446, -202, -1000, 821, 821, 724, -1000, 724,
	-1000, 52610, 2186, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2708, 2707, -1000, 840, 52610, 64390, 52610, -1000, -1000, 64390,
	-1000, 64390, -1000, -1000, 64390, -1000, 64390, -1000, 64390, -1000,
	-1000, -1000, -1000, -1000, -1000, 129, 27946, 1300, -1000, 2182,
	-1000, 2181, -1000, 41, -1000, -1000, -1000, -1000, 1753, 52610,
	52610, 64390, 52610, -1000, 47546, -1000, -1000, 2180, -1000, 949,
	-1000, -1000, -1000, -1000, -1000, 73558, -1000, 499, -1000, -1000,
	73558, 1334, 1979, -1000, 1979, -13, -1000, 71994, 1931, 52610,
	-1000, -1000, -1000, -1000, -1000, 802, 1384, 1384, 1058, 1058,
	1058, 1058, 2568, 842, 1275, 3633, 3929, 3929, 3929, 3929,
	3929, 3929, 3929, 3929, 3999, 451, 451, 3999, 3999, 3999,
	3999, 3999, 451, 451, 451, 3929, 3929, 3929, 73840, 73762,
	6262, 27946, 27946, 1072, 1518, 455, 5103, 27946, 6275, 6275,
	6275, 6275, -1000, 1848, -1000, -1000, -1000, -1000, 2146, 529,
	29284, 29284, -1000, -1000, -1000, -1000, 16628, 27946, -1000, -1000,
	-1000, -1000, 22474, -1000, -1000, 71710, -248, 378, -191, -5,
	-1000, 27946, 27946, 27946, 377, -1000, 374, -1000, -1000, 1070,
	-1000, 1069, 1059, 1054, -1000, 525, 230, 27946, 64390, -1000,
	69598, 659, -53, -1000, -60, 1194, -1000, 27946, 227, -1000,
	1548, 523, 520, 368, -61, -1000, 365, 801, 793, 362,
	361, 357, 27946, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 73478, 69518, 69314, 69030, 8701, 68984, 10014,
	-62, 355, -1000, 2128, -191, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 352, -1000, 350, -1000, 73274, -191, 349, 6689,
	-1000, 29284, 29284, 29284, -1000, 348, -1000, 72250, -1000, 73196,
	22028, 22028, 22028, 345, 72992, 27946, -191, -63, -1000, -70,
	-1000, -1000, 519, -71, 879, 21570, 31000, 15291, -1000, 879,
	879, 27946, -1000, 27946, 1954, -1000, -1000, -1000, 1951, 1474,
	1948, 31844, -1000, -1000, -1000, -1000, 55958, 526, 750, -1000,
	-1000, -1000, -1000, -1000, 55958, -1000, 2615, 2336, -1000, -1000,
	-1000, 64390, 422, -1000, 55958, 55958, 15291, 750, -1000, 344,
	34831, -5, 219, -1000, -1000, 15291, 2036, 2036, 2036, -1000,
	-1000, 64390, 2579, -1000, 1462, -1000, 74290, -1000, 684, 975,
	-1000, 2656, 518, -1000, 2629, 2629, 64390, 93, 21124, -1000,
	1016, -1000, -1000, 1309, -1000, 1440, -1000, 1118, -1000, -1000,
	-1000, 21124, -1000, 1764, 64390, 64390, 52610, -1000, -1000, 1833,
	65641, 1822, 74290, 64390, -1000, -1000, 516, 513, 1930, 1927,
	64390, 64390, 65224, 64807, 64390, 1481, 27946, 1742, 1385, 129,
	129, -1000, -1000, 129, 511, 1052, 52610, 52610, 52610, 1406,
	-1000, -1000, -1000, -1000, -1000, 52610, -1000, -1000, 2655, -1000,
	1141, -1000, -1000, -1000, 1141, 1653, 1393, 52610, 42498, 870,
	64390, 1499, 129, 129, -1000, -1000, 129, 510, 15291, 1411,
	-1000, 2015, -1000, -73, -1000, -1000, 13132, 73558, -1000, 73558,
	-1000, 64390, -1000, 903, 64390, 44174, 834, 2297, -1000, 1653,
	2296, 422, -1000, -1000, 36096, -32, 821, 42498, 52610, -14,
	42498, 42498, 42498, 2706, 508, 2705, -1000, 52610, 2283, 1693,
	1812, 2348, 717, 64390, 1579, -1000, 27946, 1436, -1000, 35254,
	919, 64390, 1368, 74, -1000, -1000, -1000, 33, 64390, -1000,
	2704, -1000, -1000, 176, 176, 176, -1000, 165, 1714, -1000,
	-162, -162, -1000, -1000, 4383, 821, -18, 507, -1000, 741,
	731, 33979, 42498, -76, -1000, -1000, -1000, -1000, -1000, 52610,
	64390, 629, 2000, 64390, -78, -1000, 218, 506, -1000, 821,
	33548, 2118, -1000, -1000, 869, -1000, 1155, -1000, -1000, -1000,
	-1000, -1000, -1000, -32, -32, -1000, -1000, -1000, -1000, 73558,
	-1000, 1279, 1276, 64390, -1000, 15291, 64390, 52610, 15291, 52610,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1334, -1000, 27946,
	-1000, -1000, -1000, 20678, -1000, -1000, -1000, 52610, -3, 27946,
	27946, 4401, 3812, 27946, 29284, 29284, -1000, 27946, 1034, -1000,
	-1000, -1000, -1000, -1000, 2113, 505, 27946, 74290, 6352, 5831,
	-1000, 343, 9730, 3999, -1000, 27946, -1000, 342, 20232, -1000,
	72532, -26, -83, -1000, 2672, 1870, 1784, 1415, 1313, 2654,
	12701, -191, -84, -1000, -1000, 668, -1000, 2331, -1000, 27946,
	72736, 12270, -1000, 36938, 883, 1579, -1000, -1000, 2629, 794,
	-1000, -1000, -1000, 794, -1000, 71506, 74290, 74290, 27946, 27946,
	-1000, 27946, 27946, 27946, -1000, -1000, 27946, -1000, -1000, 2104,
	27946, -1000, 74290, 74290, 29284, 29284, 29284, 29284, 29284, 29284,
	29284, 29284, 29284, 29284, 29284, 29284, 29284, 29284, 29284, 29284,
	29284, 29284, 29284, 1892, 29284, 2633, 2633, 2633, -1000, 2176,
	2104, 27946, 27946, 74290, 341, 340, 338, -1000, 27946, -191,
	-1000, -1000, 4383, -1000, 2056, -1000, -79, -1000, 1889, -1000,
	-1000, 2056, 2056, -85, 73558, 31844, 31844, -1000, 504, 27946,
	1949, -1000, 658, -1000, -86, -1000, 55958, -1000, 657, -246,
	-1000, 725, -1000, -1000, -1000, -1000, 422, -1000, -1000, -1000,
	158, 55958, -1000, -92, -1000, 2564, 337, 15291, -1000, -1000,
	-1000, -1000, -1000, -1000, -32, 1593, 2671, -1000, 2638, 667,
	656, 334, 2629, 330, 329, -32, 64390, -1000, -19, -1000,
	-1000, -1000, 27946, -1000, -1000, 2480, 1051, 1045, -1000, 2275,
	-1000, 1808, -1000, 923, -1000, 1317, -1000, 27946, 27946, 503,
	501, 1476, 2703, 2274, 1714, 2267, 1714, -1000, -1000, 816,
	-1000, 73558, 496, 495, -1000, -22, 1341, 857, -1000, -1000,
	27946, 27946, 56796, -1000, 2479, 2479, -6, -1000, 1044, -1000,
	-1000, -1000, 1653, 1023, -1000, -1000, 1485, -1000, -1000, 856,
	-1000, -1000, 27946, -1000, -25, 1022, 821, 2089, -1000, -1000,
	2702, 2701, 2700, 327, -93, -28, 74290, 2563, 1655, 64390,
	52610, 52610, 2562, 792, -1000, 2615, -1000, -1000, -1000, -1000,
	848, -1000, -1000, 2696, -1000, 933, 15291, 52610, 2266, 1909,
	717, 43340, -1000, 848, 1978, 73558, -1000, 1368, 19774, 2476,
	-94, -1000, -1000, -1000, 879, 36517, 31844, 27946, 2695, -99,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 56379, 56379,
	42498, 42498, 42498, 821, 64390, 64390, 44174, 2692, 489, 64390,
	64390, 488, -1000, 64390, 64390, 2689, 42498, -1000, -1000, 129,
	-1000, 1590, 52610, -1000, -1000, 840, -1000, -1000, 1524, 1735,
	1524, 1592, 71225, -1000, 2492, 15291, 2572, 6275, 27946, 27946,
	213, 5264, 4559, 6275, 27946, 27946, 74290, 74014, -101, 27946,
	27946, -1000, 27946, 655, 73558, 2636, 27946, 325, 324, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 323, -1000,
	-1000, -1000, -1000, -1000, 73558, 27946, 130, -1000, -1000, -1000,
	68560, -1000, 27946, 322, 321, -1000, -1000, -1000, 319, 314,
	9379, 266, 71179, 70898, 70694, 73558, 2176, 73558, -1000, -1000,
	830, 830, 1109, 1109, 1109, 1109, 2633, 822, 1046, 490,
	413, 413, 413, 682, 977, 977, 413, 413, 413, 2088,
	1895, 487, 6623, -1000, -1000, 73558, 73558, 312, -1000, -1000,
	-1000, -191, 310, 2041, 2522, -1000, 31844, 2041, 2041, -1000,
	-1000, 1474, 64390, 73558, 31844, -7, -1000, 2615, -1000, -1000,
	2336, -1000, 10973, -1000, 15291, -1000, -1000, 34831, -1000, 476,
	-1000, 92, -1000, -1000, 652, 2688, 663, -1000, 306, -1000,
	-1000, -32, 73558, 64390, 64390, 64390, 2263, -1000, 1967, -1000,
	70614, -102, -1000, 71994, 27946, 64390, -1000, 1466, 1992, 972,
	-1000, 64390, -1000, 64390, -1000, -1000, 64390, 64390, 52610, 2249,
	-111, 73558, -33, -1000, 720, -1000, -1000, 11839, 52610, 52610,
	42498, 2243, -112, 15291, -1000, 42498, -1000, -1000, -1000, 1996,
	-1000, 55118, 1639, 129, -1000, 2685, 475, 1653, 129, -1000,
	1584, -1000, 649, -1000, -1000, 474, 64390, 1684, 473, 15291,
	1913, 717, 43340, -1000, 1131, 1368, -1000, -1000, -51, -1000,
	500, 129, 1579, -1000, -118, 73558, -1000, 719, -1000, -113,
	-1000, -1000, 296, -1000, 2445, 2442, -1000, -1000, 27946, 472,
	470, 64390, 2441, -1000, -1000, -119, -1000, 1866, -1000, -1000,
	-1000, -1000, 15291, 1331, -1000, -1000, -1000, -1000, 2492, 6275,
	6275, 27946, 27946, 27946, 6275, 74014, -120, -1000, 6275, 6275,
	-191, -1000, -1000, 72532, -1000, -1000, -1000, 73558, 11408, 1526,
	-1000, 70410, -1000, -1000, -1000, -1000, 27946, 27946, -1000, -1000,
	-1000, -1000, -1000, 29284, 2082, 469, 74290, -1000, -1000, 874,
	27946, 27946, 1889, 874, 874, -1000, -122, -1000, 750, -1000,
	-1000, -1000, 2615, 92, -1000, 2684, 15291, 415, -1000, 2683,
	-1000, -1000, -1000, -1000, 64390, -1000, 64390, -1000, 15291, 64390,
	2070, 1792, -1000, -1000, 1926, 468, 29284, 52610, 755, 2069,
	1482, 27946, -1000, -127, -129, 1789, -1000, -1000, 1788, 27946,
	-1000, 74290, 1714, 1714, -132, -137, -1000, 27946, 1015, 64390,
	19328, 2479, -1000, -1000, -1000, 27946, 1011, -1000, -162, 1499,
	2023, -1000, -1000, -1000, -1000, 1925, -1000, -1000, 64390, 1923,
	837, -1000, 44174, 834, -1000, -1000, 809, -1000, 27946, -1000,
	52610, 27946, 1663, -1000, 717, 43340, -1000, 2348, -1000, 2414,
	64390, 2472, -1000, 1978, 455, -1000, 821, 449, 441, -139,
	27946, 27946, -140, 440, 821, -170, -1000, 735, 733, -1000,
	-1000, 52610, 52610, -1000, 6275, 6275, 6275, -1000, 284, -1000,
	-1000, 1579, 2520, -1000, 70129, 70083, 471, 29284, 74290, -142,
	-1000, 64390, 73558, -191, -1000, -1000, -1000, 55958, 648, -1000,
	2682, -1000, -1000, 1507, -1000, -1000, -1000, 64390, 1797, -1000,
	-1000, 27946, 6623, 437, 27946, -1000, -1000, 1993, 2115, 1996,
	436, -1000, -1000, -1000, -1000, 1388, -1000, -1000, 73558, 2504,
	-1000, -1000, 435, 434, 73558, 432, 710, 2078, -1000, -1000,
	73558, 431, 834, -1000, 1534, 1639, 429, -1000, -1000, -1000,
	2030, 275, 2559, 809, -1000, 2609, -1000, -145, 933, -150,
	52610, 43340, -1000, 1909, 1102, -155, 64390, 1368, -1000, -1000,
	42498, 42498, 1482, -156, -157, -1000, 42498, -1000, 1866, -1000,
	64390, -1000, 64390, -1000, -1000, -1000, 1569, 27946, -1000, -1000,
	471, -163, -1000, -188, -1000, 2556, -1000, -1000, -1000, -1000,
	-1000, 2261, 69802, 1881, 64390, 5293, 2096, -1000, -1000, 1499,
	64390, 52610, 927, 15291, 1524, 1524, 27946, 18882, 1532, 27946,
	-1000, 52610, 64390, -1000, 2440, 1996, 129, -1000, -1000, 1482,
	428, 1482, 426, -1000, 1913, 1221, -1000, 879, -1000, -1000,
	-164, -169, 1996, 1482, -1000, -171, -1000, -172, -186, 167,
	28838, 28838, 28838, -191, -1000, 64390, 425, 2231, -1000, 1636,
	1429, 110, 941, -1000, -1000, 2069, -189, 422, -1000, 27946,
	-1000, -195, -1000, 918, -203, -1000, 917, -204, -1000, 2076,
	-1000, -205, 414, -210, -1000, -1000, -1000, 1499, 837, 1996,
	27946, 1996, 27946, -1000, 36517, -1000, 821, 821, 1499, 1996,
	821, -1000, -1000, -1000, 2310, -1000, 29715, 1664, 1359, 71790,
	2310, 2310, -1000, -1000, 64390, -1000, 1656, 1643, 1258, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1881, 73558, -1000,
	1524, 2022, -1000, 1524, 2075, -1000, 1530, -1000, 64390, -1000,
	64390, 834, -1000, 1499, -212, 1499, -213, -196, -1000, -1000,
	-1000, 1499, -1000, -1000, 1434, 2586, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2427, -1000, 948, 1571, 1571,
	1636, -1000, 411, -1000, 410, -1000, -219, -1000, -1000, 877,
	1482, 877, 1482, -1000, -1000, 1348, -1000, -1000, 1564, 28392,
	-1000, 2595, -1000, -1000, 1920, -1000, 2069, 27946, 27946, 1685,
	-1000, 2681, 1996, -1000, 1996, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -220, -229, -1000, -1000, -1000, -1000, 1499, 1499,
	1499, 1006, 877, 877, -1000, 399, -1000, -1000, 27946, -231,
	1499, -1000,
}
var sqlPgo = [...]int{

	0, 3326, 3325, 3324, 3323, 3320, 3317, 3315, 3312, 3310,
	3306, 3304, 3298, 3297, 3295, 3294, 3292, 3290, 3287, 3286,
	3285, 3284, 3283, 3282, 3281, 3278, 3277, 3276, 3273, 3272,
	3271, 3266, 3265, 3264, 3263, 3259, 3257, 3256, 3254, 3251,
	3249, 3248, 3247, 3246, 3245, 3244, 3239, 3238, 30, 3234,
	3231, 3230, 3229, 3228, 3227, 3226, 3225, 3224, 3223, 3222,
	3220, 3219, 3217, 3216, 3210, 3209, 36, 3204, 213, 3203,
	3200, 3196, 3194, 3191, 3190, 3188, 3186, 3185, 3183, 212,
	3178, 144, 3177, 3176, 3175, 3173, 3172, 211, 3169, 3166,
	3165, 3163, 3161, 3159, 3155, 3153, 122, 3151, 3150, 148,
	3147, 3146, 3145, 3143, 3142, 3141, 3138, 3136, 3134, 3130,
	196, 3129, 210, 3128, 3125, 3124, 3123, 3120, 3119, 3117,
	3116, 3115, 3114, 3111, 3109, 3106, 3105, 3104, 3103, 3097,
	3096, 3095, 3093, 3091, 3090, 3088, 3087, 3085, 3081, 223,
	141, 3080, 3079, 207, 205, 3075, 3074, 127, 121, 71,
	3071, 111, 124, 195, 7324, 186, 3069, 3067, 3058, 158,
	3056, 3055, 80, 131, 136, 125, 132, 145, 3054, 3053,
	69, 54, 33, 27, 95, 3051, 3050, 3049, 2428, 112,
	3048, 3047, 202, 185, 3046, 1232, 3042, 140, 88, 110,
	57, 98, 3041, 117, 25, 3040, 138, 50, 3039, 120,
	68, 28, 5624, 5113, 3038, 83, 215, 76, 184, 175,
	160, 188, 181, 129, 84, 3037, 191, 3036, 58, 154,
	3035, 3033, 3032, 62, 143, 79, 3031, 9, 3, 133,
	17, 91, 14, 3030, 12, 3026, 2998, 2997, 2995, 32,
	123, 2993, 114, 74, 2986, 19, 2983, 155, 163, 2982,
	169, 93, 2981, 2976, 198, 156, 150, 10, 174, 2975,
	2973, 2971, 2970, 2969, 94, 21, 97, 2967, 2965, 103,
	182, 2962, 40, 128, 75, 115, 208, 92, 168, 85,
	167, 134, 178, 2961, 2960, 2959, 151, 2958, 2957, 116,
	165, 2953, 2951, 214, 35, 56, 180, 61, 2950, 2949,
	119, 2947, 152, 2946, 2945, 2944, 206, 126, 164, 6,
	78, 107, 26, 8, 171, 106, 90, 82, 2943, 3495,
	1353, 327, 2942, 100, 86, 52, 96, 113, 201, 64,
	2941, 2940, 1167, 2938, 2937, 2936, 2934, 137, 2932, 2931,
	2930, 104, 53, 73, 2929, 118, 63, 13, 237, 203,
	89, 161, 166, 192, 2928, 135, 2927, 38, 105, 2926,
	153, 190, 99, 2925, 1052, 109, 2922, 193, 2921, 2920,
	2919, 2918, 172, 2917, 2915, 775, 2914, 108, 2913, 2912,
	142, 170, 194, 72, 31, 2911, 66, 29, 2910, 149,
	37, 2909, 2093, 49, 0, 6788, 5416, 5873, 2908, 1539,
	2907, 162, 101, 2871, 2870, 2869, 70, 2868, 60, 2867,
	2866, 43, 2865, 15, 5, 7, 20, 16, 1007, 767,
	2864, 2862, 87, 102, 146, 2859, 204, 173, 2858, 2857,
	2854, 67, 2850, 23, 2849, 24, 2848, 2847, 34, 1,
	18, 2844, 2842, 189, 2841, 187, 2840, 2839, 2586, 2838,
	200, 65, 2837, 130, 159, 2832, 2831, 2830, 2829, 197,
	2828, 199, 2825, 11, 22, 4, 2824, 2819, 2817, 157,
	2, 2532, 2812, 2810, 55, 2809, 2807, 139,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 3, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 12, 12, 7, 7, 8, 8, 8, 36,
	36, 10, 10, 9, 9, 9, 11, 11, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 14, 14, 26,
	26, 15, 15, 28, 28, 16, 16, 29, 29, 450,
	450, 19, 31, 20, 32, 13, 451, 451, 451, 451,
	24, 21, 33, 22, 22, 22, 150, 150, 150, 150,
	18, 18, 27, 27, 164, 164, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 449, 449, 166,
	166, 165, 161, 161, 452, 452, 167, 167, 167, 169,
	169, 37, 37, 95, 95, 95, 96, 96, 97, 97,
	151, 88, 88, 88, 88, 88, 88, 88, 88, 88,
	83, 83, 392, 392, 393, 393, 146, 146, 147, 147,
	147, 147, 148, 148, 149, 149, 149, 51, 39, 39,
	39, 39, 39, 39, 39, 40, 40, 40, 40, 41,
	41, 41, 41, 41, 41, 42, 42, 42, 42, 42,
	42, 49, 49, 49, 49, 140, 140, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 456, 456, 456, 456,
	456, 456, 456, 456, 456, 456, 456, 456, 456, 456,
	456, 456, 456, 456, 456, 456, 456, 457, 457, 458,
	458, 459, 459, 460, 460, 460, 460, 460, 460, 460,
	460, 460, 460, 460, 460, 460, 460, 460, 460, 460,
	460, 460, 460, 54, 54, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 63, 63,
	241, 241, 217, 217, 64, 64, 64, 65, 65, 66,
	66, 53, 53, 445, 445, 255, 255, 359, 359, 68,
	68, 69, 69, 69, 69, 69, 69, 70, 70, 70,
	70, 70, 70, 70, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 77, 77, 77, 78, 78, 78,
	75, 75, 75, 73, 73, 73, 72, 72, 72, 76,
	76, 76, 74, 74, 74, 256, 256, 79, 79, 79,
	79, 79, 79, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 361, 361,
	80, 80, 80, 330, 330, 84, 84, 84, 287, 287,
	85, 85, 85, 85, 85, 86, 86, 86, 86, 98,
	98, 98, 98, 448, 448, 248, 248, 182, 182, 182,
	182, 91, 91, 91, 91, 92, 92, 92, 93, 93,
	145, 145, 104, 104, 104, 104, 104, 103, 103, 103,
	103, 103, 103, 43, 43, 43, 44, 44, 45, 45,
	46, 46, 47, 47, 48, 48, 48, 48, 48, 106,
	106, 453, 453, 108, 105, 105, 105, 107, 107, 107,
	107, 109, 110, 110, 110, 110, 110, 110, 110, 110,
	111, 111, 386, 386, 263, 263, 384, 384, 400, 400,
	385, 385, 221, 221, 221, 221, 221, 222, 222, 222,
	391, 391, 391, 391, 391, 391, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 130, 130, 130,
	139, 139, 139, 139, 139, 139, 139, 132, 132, 132,
	121, 121, 113, 113, 113, 113, 113, 117, 117, 117,
	117, 117, 114, 114, 123, 123, 123, 123, 118, 118,
	120, 120, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 115, 115, 115, 115, 125, 125, 125, 125, 293,
	293, 293, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 135, 135, 135, 135, 135, 135, 344, 344,
	131, 131, 131, 131, 134, 134, 134, 134, 277, 277,
	128, 128, 128, 129, 129, 129, 133, 133, 136, 136,
	136, 136, 116, 116, 116, 462, 462, 462, 137, 137,
	127, 127, 138, 138, 138, 138, 138, 138, 138, 138,
	126, 126, 126, 126, 119, 446, 446, 443, 443, 443,
	443, 443, 443, 443, 444, 444, 447, 447, 89, 89,
	89, 58, 58, 463, 463, 463, 59, 59, 464, 464,
	464, 461, 461, 461, 461, 461, 461, 461, 461, 223,
	223, 224, 224, 311, 311, 311, 311, 311, 227, 227,
	168, 168, 168, 230, 231, 231, 228, 228, 229, 229,
	229, 233, 233, 232, 235, 235, 234, 310, 407, 407,
	409, 409, 409, 409, 409, 409, 409, 411, 411, 411,
	411, 411, 411, 411, 411, 411, 411, 405, 405, 405,
	406, 401, 401, 402, 402, 402, 402, 225, 225, 226,
	226, 226, 226, 403, 404, 246, 246, 347, 408, 408,
	410, 410, 412, 465, 465, 465, 465, 465, 465, 466,
	466, 309, 309, 239, 239, 413, 413, 413, 413, 414,
	414, 414, 414, 414, 417, 416, 415, 415, 415, 415,
	415, 340, 340, 340, 62, 62, 62, 274, 274, 273,
	273, 275, 275, 275, 275, 275, 275, 275, 275, 275,
	275, 275, 275, 275, 275, 142, 142, 60, 60, 60,
	174, 174, 57, 57, 57, 468, 468, 61, 61, 61,
	469, 469, 67, 67, 67, 67, 67, 67, 56, 56,
	56, 56, 56, 470, 470, 294, 294, 292, 292, 245,
	245, 346, 186, 186, 162, 162, 162, 23, 25, 25,
	17, 17, 34, 34, 35, 35, 30, 30, 454, 454,
	455, 455, 90, 90, 94, 94, 94, 102, 102, 141,
	141, 141, 141, 141, 141, 141, 38, 38, 38, 38,
	50, 50, 50, 50, 100, 472, 472, 472, 101, 101,
	471, 471, 181, 181, 181, 181, 183, 183, 306, 306,
	307, 307, 473, 473, 308, 308, 308, 308, 176, 175,
	177, 177, 55, 55, 55, 170, 170, 171, 171, 172,
	172, 173, 173, 474, 474, 87, 87, 87, 144, 144,
	216, 216, 302, 302, 302, 240, 240, 191, 191, 305,
	305, 303, 303, 303, 303, 272, 272, 272, 143, 143,
	253, 253, 265, 265, 266, 266, 356, 356, 267, 99,
	99, 154, 154, 152, 152, 152, 152, 152, 152, 159,
	159, 159, 159, 159, 153, 153, 153, 155, 155, 155,
	155, 155, 155, 155, 158, 158, 158, 158, 160, 160,
	160, 157, 157, 424, 424, 424, 426, 426, 427, 423,
	423, 425, 425, 467, 467, 276, 276, 276, 237, 238,
	236, 236, 243, 243, 242, 244, 244, 345, 345, 345,
	270, 270, 270, 270, 297, 297, 295, 295, 296, 296,
	298, 298, 299, 299, 299, 300, 300, 301, 301, 269,
	269, 326, 326, 156, 156, 156, 250, 250, 250, 251,
	251, 317, 317, 317, 317, 317, 317, 318, 318, 316,
	316, 316, 316, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 349, 349, 252, 252, 350, 304, 304, 441,
	441, 441, 442, 442, 343, 343, 351, 351, 351, 351,
	351, 351, 341, 341, 342, 342, 357, 358, 358, 280,
	280, 280, 280, 278, 278, 281, 281, 281, 281, 279,
	279, 352, 352, 352, 352, 271, 271, 353, 353, 353,
	354, 312, 313, 313, 362, 362, 362, 362, 362, 377,
	249, 249, 249, 249, 249, 475, 475, 363, 363, 363,
	363, 363, 363, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 367, 367, 367, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 376, 376, 376, 376,
	376, 368, 368, 373, 373, 374, 374, 374, 369, 370,
	375, 375, 375, 375, 476, 476, 379, 379, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 365, 365, 365,
	372, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 288, 288, 289, 289, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 320, 320, 320, 320, 320, 320,
	320, 320, 320, 320, 320, 320, 320, 320, 320, 320,
	320, 320, 320, 320, 320, 320, 320, 320, 320, 320,
	320, 320, 320, 321, 321, 321, 321, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 418, 418, 418, 418, 418, 418, 418, 418,
	421, 421, 422, 422, 419, 419, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 420, 420, 420, 420, 420,
	420, 420, 420, 420, 420, 420, 420, 420, 420, 420,
	420, 420, 420, 420, 420, 420, 420, 420, 420, 420,
	420, 420, 420, 428, 428, 429, 429, 431, 431, 432,
	432, 433, 434, 434, 434, 435, 436, 436, 430, 430,
	437, 437, 437, 437, 438, 438, 439, 439, 439, 439,
	439, 440, 440, 440, 440, 440, 332, 332, 333, 333,
	339, 339, 339, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 184,
	184, 184, 184, 184, 261, 261, 259, 259, 259, 262,
	262, 260, 260, 258, 258, 257, 257, 329, 329, 327,
	327, 331, 331, 282, 282, 378, 378, 378, 378, 378,
	378, 378, 283, 283, 283, 291, 284, 284, 285, 285,
	285, 285, 285, 323, 324, 286, 286, 286, 325, 325,
	334, 338, 338, 337, 336, 336, 335, 335, 314, 314,
	315, 315, 268, 268, 477, 477, 264, 264, 355, 355,
	355, 355, 219, 219, 254, 254, 218, 218, 211, 211,
	212, 212, 212, 212, 247, 247, 380, 380, 380, 381,
	382, 383, 328, 201, 200, 188, 189, 199, 198, 197,
	187, 190, 194, 195, 196, 192, 193, 207, 206, 205,
	203, 204, 360, 213, 213, 214, 214, 214, 215, 215,
	215, 215, 185, 185, 208, 208, 209, 210, 210, 202,
	202, 202, 178, 178, 178, 179, 179, 180, 180, 390,
	390, 388, 388, 388, 389, 389, 389, 389, 387, 387,
	387, 387, 387, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	396, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	399, 399,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 1, 3, 4,
	6, 1, 3, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 4, 6, 4,
	6, 6, 9, 6, 9, 6, 5, 6, 5, 1,
	1, 5, 5, 6, 6, 4, 4, 4, 4, 3,
	4, 4, 4, 7, 7, 9, 5, 3, 5, 7,
	4, 12, 4, 12, 1, 3, 5, 5, 2, 5,
	3, 6, 4, 6, 5, 6, 6, 4, 8, 3,
	4, 3, 6, 4, 3, 1, 3, 2, 1, 1,
	3, 1, 3, 2, 2, 0, 1, 1, 0, 2,
	0, 7, 2, 5, 6, 2, 1, 3, 1, 3,
	1, 6, 4, 9, 7, 12, 12, 12, 9, 2,
	7, 2, 1, 1, 1, 3, 3, 0, 3, 1,
	3, 1, 1, 3, 2, 5, 0, 5, 1, 2,
	1, 2, 1, 2, 2, 3, 3, 3, 3, 3,
	5, 3, 3, 5, 3, 3, 5, 3, 3, 5,
	3, 6, 6, 6, 3, 1, 1, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 3, 3, 4, 3,
	4, 7, 4, 4, 4, 3, 5, 7, 4, 3,
	3, 4, 3, 3, 3, 3, 3, 2, 0, 1,
	0, 1, 0, 3, 3, 3, 3, 3, 6, 4,
	4, 4, 3, 5, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 4, 1, 1, 2, 1, 2, 7, 3,
	2, 0, 1, 3, 3, 1, 0, 1, 2, 2,
	1, 6, 5, 1, 2, 1, 3, 2, 0, 8,
	3, 2, 2, 2, 2, 2, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 3,
	5, 3, 3, 5, 3, 1, 3, 2, 2, 5,
	3, 6, 3, 1, 1, 2, 1, 1, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 2, 1, 2, 1, 3,
	5, 7, 2, 3, 0, 3, 5, 2, 3, 0,
	2, 3, 2, 3, 2, 6, 4, 7, 2, 6,
	4, 7, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 2, 1, 2, 2, 3, 2, 4, 3,
	2, 2, 1, 2, 1, 3, 3, 1, 2, 1,
	2, 1, 2, 1, 1, 3, 5, 4, 6, 4,
	3, 0, 1, 3, 2, 4, 2, 4, 1, 6,
	3, 1, 1, 5, 3, 2, 6, 3, 3, 4,
	4, 3, 1, 3, 2, 3, 3, 1, 3, 1,
	2, 1, 1, 2, 2, 3, 1, 1, 1, 1,
	1, 3, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 2, 3, 3,
	1, 1, 1, 1, 1, 2, 2, 5, 7, 3,
	3, 3, 3, 4, 4, 4, 3, 4, 4, 3,
	4, 4, 5, 3, 5, 5, 5, 3, 3, 3,
	4, 3, 4, 3, 5, 4, 5, 3, 4, 5,
	3, 4, 3, 4, 3, 3, 4, 4, 5, 0,
	1, 1, 3, 2, 4, 3, 3, 5, 4, 3,
	5, 3, 5, 4, 6, 4, 6, 4, 1, 0,
	3, 4, 4, 5, 7, 5, 3, 3, 2, 0,
	4, 2, 3, 4, 2, 3, 3, 3, 4, 3,
	3, 3, 3, 4, 3, 1, 1, 1, 2, 3,
	2, 3, 6, 6, 7, 9, 7, 9, 3, 4,
	5, 5, 5, 3, 5, 2, 0, 1, 1, 1,
	1, 3, 2, 2, 2, 1, 2, 0, 3, 3,
	2, 10, 13, 0, 2, 3, 9, 12, 0, 2,
	3, 1, 1, 2, 2, 2, 2, 1, 0, 1,
	0, 1, 3, 1, 1, 1, 1, 3, 8, 0,
	1, 1, 0, 2, 1, 0, 1, 0, 9, 9,
	3, 1, 3, 7, 1, 3, 11, 3, 2, 0,
	3, 1, 2, 2, 3, 2, 6, 2, 1, 1,
	2, 4, 2, 5, 5, 5, 2, 8, 9, 6,
	5, 3, 1, 5, 8, 5, 11, 3, 0, 2,
	4, 3, 3, 1, 5, 1, 3, 1, 2, 0,
	1, 2, 2, 0, 1, 3, 3, 2, 2, 1,
	1, 4, 0, 3, 0, 2, 2, 2, 0, 1,
	1, 2, 2, 0, 3, 3, 2, 1, 1, 2,
	2, 1, 2, 1, 5, 8, 4, 1, 0, 1,
	2, 2, 1, 2, 3, 2, 2, 3, 2, 2,
	2, 2, 2, 3, 1, 4, 2, 4, 7, 3,
	3, 0, 3, 6, 3, 1, 1, 8, 7, 5,
	0, 1, 6, 7, 6, 5, 3, 4, 14, 17,
	14, 17, 4, 0, 2, 2, 0, 1, 0, 1,
	3, 2, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 6, 8, 6, 8, 6, 8, 1, 0,
	2, 0, 2, 2, 3, 3, 2, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 3, 2, 3, 2,
	2, 2, 2, 2, 2, 1, 1, 0, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 0,
	1, 3, 1, 0, 1, 1, 1, 1, 2, 3,
	2, 2, 8, 11, 3, 3, 0, 3, 0, 3,
	0, 3, 0, 1, 0, 6, 7, 3, 6, 3,
	1, 3, 1, 4, 2, 1, 3, 1, 3, 8,
	5, 3, 4, 3, 0, 2, 2, 0, 10, 3,
	2, 0, 1, 3, 1, 1, 3, 3, 5, 1,
	1, 3, 3, 2, 3, 4, 3, 4, 5, 0,
	2, 4, 2, 3, 2, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 8, 8, 8, 2, 4, 4,
	4, 2, 2, 2, 2, 3, 1, 3, 6, 1,
	0, 1, 0, 1, 0, 1, 1, 0, 1, 5,
	1, 0, 1, 0, 3, 1, 3, 2, 4, 5,
	2, 2, 1, 1, 1, 0, 2, 5, 2, 3,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 3,
	0, 2, 0, 4, 2, 5, 3, 2, 0, 1,
	3, 3, 5, 1, 1, 1, 1, 1, 3, 2,
	4, 4, 0, 8, 4, 3, 4, 1, 5, 3,
	4, 5, 1, 5, 1, 3, 2, 0, 3, 0,
	2, 3, 1, 3, 2, 0, 3, 5, 6, 4,
	6, 4, 3, 2, 1, 0, 5, 1, 0, 2,
	2, 2, 1, 1, 0, 1, 1, 1, 0, 4,
	2, 1, 2, 2, 4, 1, 3, 1, 2, 3,
	2, 2, 1, 0, 2, 5, 7, 2, 1, 1,
	2, 4, 3, 5, 0, 1, 1, 1, 1, 1,
	1, 2, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 5, 4, 1, 2, 1, 4, 1,
	1, 2, 1, 1, 1, 1, 1, 0, 1, 2,
	5, 1, 4, 2, 5, 1, 4, 3, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 1, 0, 1, 4, 1, 3,
	3, 3, 5, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 3, 5, 4, 6, 3, 5, 4, 6,
	4, 6, 5, 7, 3, 3, 3, 3, 3, 4,
	3, 2, 4, 2, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 6, 7, 3,
	4, 4, 1, 3, 1, 3, 3, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
	6, 6, 7, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 6, 2, 1, 5, 1, 1, 1, 1,
	2, 1, 5, 5, 3, 1, 1, 1, 2, 2,
	2, 4, 3, 5, 6, 8, 6, 5, 4, 3,
	4, 1, 1, 1, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 6, 6, 8, 8, 6, 4,
	6, 6, 6, 4, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 3, 4, 3, 4,
	3, 4, 4, 3, 6, 5, 5, 5, 4, 4,
	3, 4, 3, 5, 0, 5, 0, 2, 0, 1,
	3, 3, 2, 2, 0, 6, 1, 0, 3, 0,
	3, 3, 3, 0, 1, 4, 2, 2, 2, 2,
	2, 3, 2, 2, 3, 0, 4, 1, 1, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 2, 3, 1, 2, 3, 2,
	3, 2, 3, 1, 0, 1, 3, 1, 3, 3,
	3, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 1, 2, 3, 0, 3, 3,
	2, 2, 1, 2, 2, 3, 2, 1, 1, 1,
	5, 1, 2, 4, 2, 0, 1, 0, 3, 5,
	1, 0, 1, 2, 1, 0, 1, 3, 3, 2,
	1, 1, 1, 3, 1, 3, 3, 1, 1, 1,
	1, 5, 3, 1, 1, 3, 1, 2, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 7, 1, 7,
	5, 3, 1, 1, 1, 1, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 460, -81, -51, -49, -84, -85, -69,
	-86, -80, -98, -102, -90, -104, -141, -3, -37, -39,
	-52, -68, -70, -79, -88, -87, -89, -91, -95, -94,
	-83, -43, -99, -103, -112, -142, -143, -144, 84, 70,
	125, 106, 111, 158, 289, 318, 328, 312, -107, -108,
	347, -38, -50, -101, -100, -4, -10, 27, 41, -40,
	-41, -42, 55, -60, -57, -54, -63, -456, 86, -425,
	-71, -74, -76, -460, 116, 131, 175, 281, -92, -93,
	314, 316, 132, -45, -44, 126, -152, -154, -105, -106,
	-145, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, -127, -128, -129, -130, -131,
	-132, -133, -134, -135, -136, -137, -138, 351, 397, 42,
	360, 71, 119, 322, 21, -5, -6, -7, -8, -9,
	-11, -12, -25, -53, -55, -56, -58, -59, -67, -61,
	-62, -424, -72, -73, -75, -77, -78, 313, -155, -153,
	457, 410, -14, -19, -20, -15, -16, -18, -21, -17,
	-26, -31, -32, -28, -29, -27, -30, -33, -34, -35,
	-36, -23, -24, -13, -22, 428, 436, -158, -156, -157,
	-160, 335, 418, 374, 460, 460, 460, 460, 460, 460,
	460, 460, 460, 460, 460, 460, 460, 460, 460, 460,
	460, 460, 460, 460, -203, -208, -209, -210, -202, -178,
	-396, -399, 4, -394, -397, 137, 182, 249, 21, 22,
	23, 24, 25, 27, 38, 40, 39, 41, 42, 45,
	47, 48, 51, 52, 53, 54, 55, 56, 59, 64,
	69, 70, 71, 72, 73, 74, 79, 76, 77, 78,
	81, 83, 84, 85, 88, 89, 97, 98, 99, 100,
	101, 102, 106, 109, 108, 111, 114, 115, 116, 118,
	120, 121, 123, 125, 126, 129, 127, 380, 128, 130,
	131, 132, 133, 143, 144, 145, 147, 148, 150, 152,
	156, 157, 159, 163, 165, 166, 167, 168, 174, 175,
	177, 178, 183, 179, 184, 188, 191, 190, 192, 193,
	194, 185, 199, 203, 204, 205, 207, 208, 211, 212,
	213, 214, 217, 216, 219, 222, 223, 226, 227, 230,
	231, 233, 234, 237, 235, 238, 236, 239, 242, 240,
	241, 244, 245, 247, 246, 172, 254, 255, 257, 258,
	259, 275, 262, 263, 264, 267, 268, 271, 274, 276,
	277, 278, 279, 280, 281, 282, 284, 285, 287, 289,
	291, 293, 294, 295, 296, 297, 298, 300, 301, 303,
	304, 305, 306, 307, 312, 309, 310, 311, 313, 314,
	315, 316, 318, 320, 321, 322, 323, 325, 327, 348,
	349, 362, 328, 329, 330, 331, 332, 333, 334, 338,
	342, 339, 340, 341, 343, 336, 337, 344, 345, 347,
	350, 351, 353, 355, 356, 359, 360, 361, 363, 366,
	367, 368, 364, 365, 358, 373, 371, 372, 375, 376,
	377, 378, 379, 381, 383, 391, 392, 394, 397, 398,
	399, 389, 401, 402, 405, 406, 407, 408, 409, 414,
	410, 412, 415, 416, 417, 423, 422, 429, 430, 432,
	433, 434, 33, 43, 44, 46, 49, 60, 61, 62,
	65, 103, 104, 124, 134, 135, 146, 160, 162, 169,
	170, 171, 189, 195, 197, 201, 220, 252, 253, 269,
	273, 286, 288, 299, 324, 354, 369, 384, 385, 386,
	387, 393, 395, 418, 419, 420, 424, 431, 260, -196,
	2, -178, -178, 289, 26, 2, 26, 285, 337, 376,
	378, 2, -448, -248, 2, 26, -182, -178, 86, 158,
	335, -196, 2, -448, -248, 24, 2, -178, 2, -183,
	2, 328, -178, 460, 81, 227, 64, 324, 344, -110,
	392, -109, 384, 330, -111, -386, 2, 242, -178, 460,
	460, 460, 460, 2, 374, 278, 422, 336, 411, 99,
	296, 182, -443, 2, 4, -397, -394, -212, -211, 374,
	99, -210, -202, 450, -209, 460, 460, 460, 2, 204,
	205, 295, 294, 344, 345, 460, 460, 460, 2, 25,
	58, 80, 83, 105, 133, 153, 156, 265, -457, 234,
	275, 293, 330, 343, 373, 381, 394, -461, 361, 59,
	411, -468, 399, 114, -292, 99, 378, 376, 227, 157,
	406, 320, 161, 404, 109, 188, 409, 408, 460, 460,
	25, 58, 67, 83, 114, 133, 153, 156, -459, 275,
	293, 327, 330, 343, 373, 381, 399, 394, 2, 422,
	336, 374, 182, 99, 411, 320, 292, -81, 2, 457,
	29, 347, -151, 374, 198, 2, -178, 204, 205, 2,
	460, 460, -443, 2, 204, 205, 2, 198, 2, 59,
	332, 460, 460, 460, 460, 460, 460, 460, 460, 460,
	460, 460, 460, 460, 460, 460, 460, 460, 460, 460,
	460, 460, 460, 460, 460, 460, 460, 460, 2, -139,
	344, 361, 167, 41, 64, 26, 69, 279, 100, 159,
	182, 183, 212, 80, 81, -293, 40, 205, 204, -344,
	375, 331, 337, 371, 392, 86, 412, 321, 434, 297,
	127, 4, 99, 242, 346, 384, 227, 73, -467, 2,
	374, -471, 2, 392, 392, 2, -471, 2, -471, 2,
	-181, 2, 392, 388, -472, 392, 431, 460, 460, 460,
	460, 460, 460, 460, 460, 460, 460, 460, 460, 460,
	-153, -155, -154, 460, 460, 460, 460, 460, -139, 344,
	2, 64, 26, -159, 151, -242, -243, 403, 196, 122,
	266, -152, -154, 2, -424, -384, 2, -319, -400, -321,
	448, 449, 443, 248, 435, -332, 105, 404, 260, -399,
	-322, -334, 124, 324, -262, 8, 9, 5, 6, 7,
	-185, -364, -328, -372, 396, 136, 251, -215, 461, 10,
	457, -421, -154, -333, 34, 162, 57, -388, -214, -366,
	-374, -370, -371, -475, 47, 53, 52, 381, 241, 338,
	339, 355, 340, 341, 45, 414, 179, 257, 259, 190,
	4, 197, -213, -202, -418, -419, -394, -395, 189, 195,
	191, 354, 192, 193, 194, 44, 299, 147, 148, 146,
	115, 104, 103, 253, 49, 48, 46, 419, -375, 101,
	384, 385, 386, 387, 207, 208, -178, -396, 67, 91,
	92, 90, 95, 94, 96, 93, 346, 411, 58, 33,
	169, 170, 201, 252, 171, 65, -420, 365, 87, 155,
	187, 173, 200, 202, 206, 221, 224, 243, 250, 270,
	272, 319, 352, -476, 420, 134, 135, 273, 286, 369,
	393, 395, 160, 220, 60, 61, -426, 300, -427, -196,
	-426, 460, 460, 462, 460, -236, -237, -238, 2, 26,
	112, 457, 2, -348, 2, 455, -352, -154, 215, -351,
	457, -349, -203, 261, -422, 325, -418, -419, -185, -202,
	-214, 4, -239, 457, 459, 99, 374, 68, 2, -287,
	457, -178, 26, 260, 388, 462, -330, 457, 260, 154,
	263, -178, 2, 2, 348, 2, 457, -110, 62, 392,
	39, 344, -307, 2, -308, -175, -176, -177, -357, 203,
	291, 298, 437, 434, -384, -453, 154, 440, 388, -384,
	-263, 459, 2, -352, 169, -203, 2, -200, -387, 4,
	-394, -397, -395, -398, 67, -396, 26, 28, 29, 30,
	32, 34, 35, 36, 37, 50, 57, 58, 63, 66,
	68, 80, 86, 90, 91, 93, 92, 94, 95, 96,
	105, 107, 110, 112, 113, 117, 119, 122, 136, 138,
	151, 153, 154, 158, 161, 164, 176, 186, 196, 198,
	215, 218, 225, 228, 229, 248, 251, 256, 260, 261,
	265, 266, 283, 290, 302, 317, 335, 346, 357, 370,
	374, 382, 388, 390, 396, 403, 404, 411, 413, 421,
	425, 426, 427, 428, -399, 2, -352, 169, 2, -205,
	169, -352, -208, 2, -392, 169, -390, 10, -389, 5,
	4, -394, -397, -395, 2, -187, -178, 2, -199, -387,
	2, -218, 169, -203, -204, -208, 388, 462, -254, -211,
	-212, -247, -178, 459, -319, 2, -99, 2, -319, 169,
	2, -99, 169, 2, -319, 169, 2, -99, 169, 2,
	2, 2, 394, 2, 83, 169, -178, 374, 98, 2,
	311, -458, 327, 398, 422, 2, 2, 2, 2, 2,
	2, 2, 374, 336, -469, 300, -192, 2, -178, 151,
	-392, 169, 2, -392, 169, 2, -206, -208, -206, 182,
	199, -187, 169, 2, 378, 376, 378, 376, 154, 2,
	198, 2, 198, 2, -353, 2, -354, -203, 2, 2,
	2, 2, 2, 169, -178, 374, 98, 2, 214, 2,
	2, 2, 2, 2, 2, 2, 2, 2, -256, 169,
	2, -203, -256, 169, 2, -256, 169, 2, -219, 169,
	2, -218, -187, 169, 2, -393, 169, 2, -392, -393,
	169, 2, -361, 2, -360, -389, 418, -81, 457, 344,
	457, -392, -203, -203, -319, -99, 154, -319, -99, -151,
	151, 2, 99, 374, -139, 2, 151, 413, 2, 8,
	2, -392, 331, 297, 143, 2, 348, 2, 64, -293,
	434, 154, 2, 154, 2, -277, 2, 428, -446, 2,
	260, 154, 2, 154, 2, 154, 2, 154, 2, 154,
	2, 294, 345, 205, 2, -99, 425, -319, 425, 2,
	391, 213, 128, 154, -277, 2, 154, 2, 154, 2,
	5, 2, 203, 291, 362, 2, -203, -462, 2, 374,
	422, 336, 2, 2, 76, 77, 154, 2, 154, 434,
	2, -271, -352, -306, -307, -306, 388, -183, -159, -242,
	-243, -139, 348, 2, 408, 245, 350, 211, -159, -270,
	-295, -296, 225, 138, 256, -276, 26, 112, -276, -276,
	51, 458, 458, 11, 12, 66, 38, 448, 449, 450,
	451, 149, 452, 453, 446, 447, 445, 438, 439, 442,
	209, 210, 82, 441, 440, 75, 232, 326, 139, 140,
	141, 142, 308, 180, 31, 181, 14, 15, 16, 30,
	265, 224, 435, 173, 352, 443, 17, 18, 19, 200,
	202, 250, 43, 176, -184, -220, -319, -319, -319, -319,
	-319, 272, 457, -268, -314, 455, -154, 457, 457, 457,
	5, 457, 5, -383, 8, -154, -319, -332, 458, -260,
	457, -154, -332, -327, 457, 324, 455, 457, -335, -319,
	459, -428, 429, -368, 457, 288, -367, 457, -367, -367,
	423, -365, 457, 436, 430, 457, -365, 457, 457, 151,
	457, 457, 457, 457, 457, 457, 457, 457, 457, 457,
	457, 457, 457, 423, 457, 457, 457, 457, 457, 457,
	457, 457, 457, 462, -426, -239, 457, -264, -355, -319,
	450, -264, -264, 260, -257, -319, 87, -280, 206, 243,
	155, 221, 319, 187, -383, -82, -68, -79, -87, -99,
	-112, -143, -144, -316, 461, -343, 436, -154, -349, -202,
	-154, -351, 457, -348, -343, 450, -203, 457, 154, 457,
	459, 154, -247, -387, -187, -203, -213, -214, 111, -257,
	-443, -247, -182, 35, -329, -362, -363, -376, -364, -373,
	-369, -372, 304, 305, 303, 307, 306, 47, 53, 52,
	381, 241, 338, 339, 355, 340, 341, 45, 414, 179,
	257, 259, 190, 4, 46, 419, -375, 197, 189, 195,
	191, 354, 192, 193, 194, 44, 299, 147, 148, 146,
	115, 104, 103, 253, 49, 48, 101, 384, 385, 386,
	387, 207, 208, 420, 365, 60, 61, -443, -247, 151,
	-386, -257, 35, -307, 2, 105, -390, 39, -473, 462,
	223, -222, 231, 247, 166, 261, 432, 254, -391, 5,
	4, -328, -340, 105, 227, -372, 9, 449, -380, 8,
	448, -385, -384, 89, 459, -387, -164, 309, -163, 23,
	27, 116, 416, 129, -229, 184, 278, 124, 358, 407,
	-450, -451, 329, 379, 380, 78, 254, 309, 124, -273,
	-275, 35, 97, 245, 274, 54, 177, 236, 237, 360,
	424, 124, 309, 428, 124, -451, 309, -451, -166, 358,
	407, -450, -451, 329, 309, -165, -229, 124, 461, -96,
	-392, 457, -254, 462, 462, -387, 450, 124, 124, 124,
	124, 2, 2, 248, 2, 2, 2, 156, -461, -459,
	2, 2, 2, -203, 169, -205, 169, 2, -208, 422,
	-241, 260, -445, -255, 374, -203, -174, -423, 428, 248,
	248, 35, 457, 2, -189, 169, 2, -179, -178, 182,
	-423, 248, -353, -216, -203, -216, 347, -196, 35, -316,
	124, 2, 2, 2, -178, -167, 462, 56, 315, 124,
	-167, 124, -167, 124, -167, 462, 124, -167, 124, 462,
	124, 124, 458, 462, -361, -392, -149, 428, 154, 86,
	457, 457, -151, -97, -96, -392, -445, -187, 2, -203,
	2, 374, 207, -392, -392, -392, -386, 26, 349, 2,
	294, 345, 77, -203, 374, 99, 182, 70, -447, 151,
	-444, 320, -443, -203, 99, -203, 99, -203, 99, -203,
	-203, 2, 2, 2, 2, 74, 74, 151, 2, 391,
	2, 391, 2, -178, -178, -178, 223, -203, 151, 374,
	182, 99, 374, -167, 462, -183, -159, -270, -386, 211,
	350, -159, -296, -295, -298, -319, 26, -301, 145, 244,
	-319, -321, -153, -153, -153, -244, -345, -319, 290, 182,
	-377, -362, -362, -201, -387, 384, -319, -319, -319, -319,
	-319, -319, -319, -319, -319, -319, -319, -319, -319, -319,
	-319, -319, -319, -319, -319, -319, -319, -319, -319, -319,
	-319, -319, -319, -319, -319, -319, -319, -319, -319, -319,
	-319, 224, 173, 352, 43, 176, -319, 388, -319, -319,
	-319, -319, 240, 248, 251, 396, 136, 405, 112, 254,
	-477, 370, 37, -325, -154, -261, 457, -339, 32, 357,
	26, -332, 457, 2, -314, -319, -315, -258, -257, -257,
	458, 421, 26, 112, 450, 2, 8, -288, -290, 433,
	239, 102, 168, 238, -289, 334, 458, 462, 35, 458,
	-319, -258, -331, -327, -257, -338, -337, 425, -387, 450,
	-429, 144, 161, 8, -381, 8, -381, 384, 384, 8,
	-381, -381, 457, 458, 2, 458, 2, 458, 2, 458,
	2, 458, 2, -319, -319, -319, -319, -319, -319, -319,
	-257, -282, 2, -378, -257, 4, 433, 239, 102, 168,
	238, 334, -282, 2, -283, 2, -319, -257, -284, -320,
	-321, 448, 449, 443, -332, -285, 2, -319, -258, -319,
	50, 218, 390, -286, -319, 154, -257, -257, 2, -257,
	2, -427, 35, -257, -250, 462, 154, 35, 4, -250,
	-250, 457, 458, 462, -281, 165, 235, 230, -281, -348,
	-280, 206, -278, 270, -278, -278, -441, 457, 456, 460,
	460, 460, 460, 460, -343, -188, 455, 463, -387, -342,
	-341, 35, -196, 267, -343, -343, 459, 458, -342, -203,
	457, -257, -387, 363, 458, 459, 200, 200, 200, 325,
	458, 388, 428, -81, 262, 458, 462, -249, 34, 455,
	-290, 457, -379, 423, 457, 457, 154, -248, -453, 458,
	392, -308, -221, 298, 356, 310, 342, 372, 9, 8,
	8, 462, -387, 462, -454, 80, 388, 68, -310, 169,
	68, -401, -190, 80, -402, -178, 63, 404, 290, 153,
	-454, 80, -454, 80, 80, 347, 361, 51, -352, 38,
	38, 26, -99, 219, 154, 434, 374, 182, 388, -352,
	-275, -362, 97, 236, 237, 51, -382, -380, 449, -382,
	51, -382, -382, -382, 428, -205, -352, 388, 280, -392,
	388, 462, 38, 38, 26, -99, 219, 154, 388, -218,
	-188, -358, -357, -393, -211, -178, 459, -319, -99, -319,
	-99, 124, 2, -469, 214, 457, -225, 248, -274, -273,
	248, -207, 2, -203, 154, -247, -359, 198, 462, -255,
	280, 124, 124, 457, 120, 296, 2, 260, 248, -189,
	169, -170, 377, 124, -313, -312, 426, -302, -99, 457,
	105, 35, -302, -265, -266, -356, -267, -190, 457, -196,
	-178, 2, -203, -256, -256, -256, -218, -219, -187, -392,
	-393, -393, -81, -360, 458, 458, -148, 264, -147, -178,
	5, -151, 413, -224, -311, -310, -405, -406, -401, 224,
	182, 404, 199, 137, -240, -191, -190, 98, -149, -357,
	462, -149, -149, -358, -358, -203, 151, 2, 2, -277,
	-203, -187, -218, -247, -247, -187, -187, -187, -99, -319,
	344, 151, 151, 459, -277, 296, 99, 374, 278, 182,
	-203, -218, -187, -203, -352, -159, 408, -299, -380, 457,
	-300, 324, 325, 462, -162, 36, 110, 211, -203, 434,
	121, -319, -319, 388, -477, 370, -325, 121, -319, 240,
	251, 396, 136, 405, 112, 254, 154, 457, -320, -320,
	458, -259, -319, -319, 456, 465, 458, -243, 462, -242,
	-319, -257, -257, 458, 458, 388, 388, 388, 388, 457,
	459, -257, -247, 456, 456, 462, 458, -336, -337, 117,
	-319, 459, -434, 271, 457, 457, 458, 458, 462, 458,
	434, 434, 458, 458, 458, -319, 35, 462, 462, 462,
	458, 462, 462, 462, 458, 458, 154, 458, 458, -291,
	283, 458, 11, 12, 448, 449, 450, 451, 149, 452,
	453, 446, 447, 445, 438, 439, 440, 75, 232, 326,
	14, 15, 16, 200, 176, -320, -320, -320, 458, -323,
	-324, 154, 151, 35, -286, -286, -286, 458, 154, -257,
	458, 458, 457, 458, -313, -355, -251, 2, -348, -198,
	-387, -313, -313, -257, -319, 206, 206, -279, 413, 260,
	-281, -348, -341, 458, -442, -383, -343, -342, -383, -318,
	-317, 152, 36, 110, 246, 172, -196, -239, -342, -342,
	-387, -343, 458, -252, -350, -422, -243, 459, -387, -140,
	5, 251, -140, -140, -247, 24, 284, -362, 455, 456,
	8, 8, 457, -381, -381, -247, 154, -384, -307, 402,
	72, 298, 384, -384, -163, 309, -190, -190, -203, 248,
	-310, 169, -169, 248, -362, -197, -178, 457, 457, 211,
	211, -190, -197, 169, -190, 169, -197, -197, -449, 298,
	255, -319, 226, 296, 249, -164, 309, -99, -99, -99,
	457, -453, 413, 111, -203, -218, -203, -207, 309, -213,
	-382, -382, -273, 309, -205, -392, 428, -187, -165, -99,
	-99, -99, 457, -188, -166, 309, -146, 178, 458, 450,
	-178, 422, -178, -223, -226, -224, -190, -463, 430, 428,
	124, 124, -239, -217, -203, 455, -149, -392, -203, -392,
	-392, -392, 2, 457, 2, -203, 124, 260, 248, -171,
	118, -474, 440, -187, -243, -319, -272, -305, 317, 260,
	-240, 418, -196, -272, -253, 462, 154, 440, 459, -240,
	2, -167, -167, -167, -167, -167, -81, -149, 462, 457,
	440, 440, 457, -392, -392, 458, 462, -203, -189, 182,
	182, -195, -179, 458, 462, 459, 457, -149, -96, 154,
	-46, 428, 374, 344, 344, -178, -199, -187, -203, -200,
	-218, -300, -319, -345, -203, 461, -319, -319, 121, 121,
	-319, -320, -320, -319, 121, 154, 457, -319, -329, 30,
	30, 458, 462, -315, -319, 458, 421, -243, -243, 458,
	5, 239, 168, 238, -289, 238, -289, -289, 8, 450,
	-387, 458, -327, 119, -319, 382, -387, 450, -435, -193,
	457, -178, 426, -242, -381, -365, -365, 458, -377, -362,
	-319, -319, -319, -319, -319, -319, -323, -319, -377, -362,
	-320, -320, -320, -320, -320, -320, -320, -320, -320, -320,
	-320, -320, -320, -320, -320, -320, -320, -320, -320, 112,
	248, 254, -320, -324, -323, -319, -319, -362, 458, 458,
	458, -257, -81, -269, 161, -358, 462, -269, -269, 458,
	-348, -348, 457, -319, 206, 456, 458, 462, -342, 456,
	462, 464, 440, -239, 459, -341, 458, 462, -304, 35,
	458, -387, 263, 5, 8, 455, 456, 458, -381, 458,
	458, -247, -319, 388, 388, 124, 248, 415, -407, -402,
	-319, -245, -346, -319, 457, 457, -161, 116, 347, -455,
	2, 124, -167, 124, -167, 432, 457, 457, 388, 428,
	-257, -319, -150, 105, -386, -451, -451, 461, 388, 388,
	280, 428, -257, 388, -149, 154, 2, 2, 2, 458,
	458, 462, -408, 35, 258, -178, -203, -205, 35, -64,
	428, -357, -383, -174, 2, -294, 413, -188, -203, 124,
	-172, 217, -474, -390, -423, -297, -295, -272, -264, 249,
	79, 458, -313, -266, -251, -319, 2, 458, -147, -148,
	-392, -392, -392, -149, -151, -151, -311, 2, 457, -189,
	-179, 457, -151, -191, 2, -393, -99, 264, -203, -277,
	-231, -230, 278, 254, -231, 261, 458, -162, -188, -319,
	-319, 121, 30, 30, -319, -319, -329, 458, -319, -319,
	-257, 456, 5, -319, 458, 458, 458, -319, 459, -436,
	-178, -319, 458, 458, 458, 458, 462, 462, 458, 458,
	458, 458, -324, 154, 112, 254, 457, 458, 458, -326,
	164, 51, -348, -326, -326, -279, -247, -348, -316, -383,
	-317, -188, 455, -387, -350, 457, 459, 456, 2, 455,
	458, -190, -190, -310, 124, -409, 80, -411, 66, 137,
	86, 248, 251, 404, 290, 63, 105, 302, 35, 458,
	458, 462, -162, -245, -247, 248, 367, 105, 248, 105,
	98, 399, -190, -197, -247, -247, -203, 130, 458, 462,
	440, 450, -207, -205, -392, 130, 458, -188, -393, -227,
	185, -190, -406, -403, -404, 290, -410, -412, 137, 290,
	-99, 2, 457, -225, -274, -99, 264, 456, 457, -178,
	260, 457, -188, -173, 216, -474, -390, -170, -272, -303,
	457, 260, -99, -243, 440, 458, 458, 98, 98, -245,
	457, 457, -247, 98, 458, -47, -48, 182, 80, 282,
	-200, 374, 182, -162, -319, -319, -319, 458, -243, -387,
	450, -430, 278, 458, -319, -319, -320, 154, 457, -329,
	-431, 427, -319, -257, -431, -431, 458, -343, -383, 2,
	455, 2, -310, -197, -201, -194, -178, 137, 169, 251,
	211, 457, -320, -203, 457, 2, -465, 107, 186, -309,
	-466, 85, 368, -346, 458, 458, 251, 251, -319, -362,
	-167, -167, 458, 458, -319, 388, -386, 84, -384, -451,
	-319, 388, -228, -229, 176, -408, 211, -194, 211, -464,
	428, -223, -463, -65, -66, 389, -357, -245, -203, -245,
	260, -474, -390, -171, 113, -247, 80, -297, -325, -149,
	457, 457, 458, -245, -245, 458, 457, -149, 462, 26,
	457, 26, 457, -203, -218, 458, -243, 51, 458, 458,
	-320, -329, 458, -432, -433, -193, -342, 456, 2, -411,
	-194, 248, -319, -180, 457, -319, 186, 108, 174, -227,
	457, 302, -186, 66, 457, 457, 457, 440, 154, 457,
	-463, 276, 457, 98, 245, 458, 35, -66, 9, 458,
	-294, 458, -203, -390, -172, 408, 249, 458, -197, -272,
	-393, -393, -309, 458, 458, -393, -48, -247, -247, -437,
	296, 325, 163, -257, 458, 462, 35, 124, 458, -413,
	233, -178, 458, 108, 174, -228, -247, -203, -452, 413,
	-201, -233, -232, -230, -235, -234, -230, -257, -384, 84,
	276, -257, -203, -246, -347, -190, 98, -227, -99, -309,
	457, -309, 457, -173, 347, -312, 458, 458, -227, -309,
	458, 458, 458, 458, -438, -439, 43, 401, 89, -319,
	-438, -438, -433, -435, 137, -414, -417, -416, 260, 353,
	155, 277, 458, 367, 424, -465, 458, -239, -319, 458,
	462, 418, 458, 462, 418, 458, 154, 458, 457, 458,
	462, -228, -464, -227, -245, -227, -245, -265, -149, -149,
	-228, -227, -149, -440, 123, -439, 287, 150, 324, 287,
	150, -440, -440, -194, -416, 260, -417, 260, 408, 109,
	-413, -232, 176, -234, 154, 276, -247, -347, -463, -228,
	458, -228, 458, -313, -228, 89, 161, 383, 245, 30,
	-415, 245, 315, 56, 347, -415, -414, 457, 457, 458,
	-470, 426, -309, -470, -309, 324, 268, -439, 22, 251,
	105, -465, -257, -257, -168, 56, 315, 2, -227, -227,
	458, 458, -228, -228, -228, 388, -470, -470, 457, -257,
	458, -228,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 363, 364, 366,
	367, 368, 370, 371, 373, 375, 377, 379, 380, 382,
	384, 386, 387, 388, 389, 390, 392, 394, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 452, 454,
	0, 919, 921, 923, 925, 25, 26, 0, 0, 188,
	190, 192, 0, 217, 219, 221, 222, 224, -2, 0,
	317, 318, 320, 322, -2, -2, 0, 0, 441, 443,
	0, 0, 0, 463, 464, 0, 1009, -2, 457, 459,
	461, 526, 528, 530, 532, 534, 536, 538, 539, 541,
	543, 545, 547, 549, 551, 553, 555, 557, 559, 561,
	563, 565, 567, 569, 571, 573, 575, -2, -2, -2,
	0, -2, -2, -2, 937, 29, 31, 33, 35, 37,
	39, 41, 61, 273, 274, 276, 278, 280, 283, 284,
	286, 1051, 324, 326, 328, 330, 332, 0, -2, 1063,
	0, 0, 43, 44, 45, 46, 47, 48, 49, 50,
	68, 69, 70, 71, 72, 73, 74, 75, 54, 56,
	57, 63, 64, 66, 52, 0, 0, 1027, 1029, 1031,
	1033, -2, 0, 0, 7, 9, 11, 13, 15, 17,
	19, 21, 365, 369, 372, 374, 376, 378, 381, 383,
	385, 391, 393, 395, 814, 1660, 1674, 1675, 1676, 1679,
	1680, 1681, 1682, 1683, 1684, 2020, 2100, 2101, 1703, 1704,
	1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714,
	1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724,
	1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734,
	1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744,
	1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754,
	1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764,
	1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774,
	1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784,
	1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794,
	1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804,
	1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814,
	1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824,
	1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834,
	1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844,
	1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854,
	1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864,
	1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874,
	1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884,
	1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894,
	1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904,
	1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914,
	1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924,
	1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934,
	1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944,
	1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954,
	1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964,
	1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974,
	1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984,
	1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994,
	1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 0, 419,
	417, 1654, 420, 1854, 422, 424, 311, 312, 313, 314,
	315, 316, 0, 434, 428, 433, 435, 437, 438, 439,
	440, 414, 412, 0, 434, 1706, 432, 917, 918, 912,
	913, 1887, 947, 453, -2, -2, -2, 1989, -2, 485,
	-2, 492, 1992, 1889, 497, 0, 499, -2, 502, 920,
	922, 924, 27, 28, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 152, -2, -2, -2, -2, 0, 0,
	1743, 1630, 1676, 1633, 1628, 189, 191, 193, 194, 0,
	0, 0, 0, 0, 0, 218, 220, 223, 225, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 250, 0,
	0, 0, 0, 0, 0, 0, 0, 870, 0, 0,
	0, 0, 0, 0, 0, 0, 721, 722, 0, 0,
	727, 865, 866, 887, 0, 0, 0, 0, 319, 321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 323, 0,
	0, 0, 0, 0, 0, 0, 251, 357, 358, 0,
	1052, 0, 0, 0, 0, 169, 160, 0, 0, 710,
	442, 444, 0, 155, 0, 0, 916, 0, 171, 0,
	0, 458, 460, 462, 527, 529, 531, 533, 535, 537,
	540, 542, 544, 546, 548, 550, 552, 554, 556, 558,
	560, 562, 564, 566, 568, 570, 572, 574, 576, 577,
	0, 0, 0, 0, -2, -2, 0, 0, -2, -2,
	0, 0, 0, 0, 0, 0, 0, -2, 0, 0,
	-2, -2, -2, 0, 0, 0, -2, -2, 0, 0,
	0, 580, 582, 583, 584, 0, 631, 648, 0, 856,
	1053, 949, 927, 940, 949, 929, 930, 931, 932, 933,
	938, 939, 942, 0, 934, 935, 936, 30, 32, 34,
	36, 38, 40, 42, 275, 277, 279, 281, 285, 287,
	-2, 1025, 1026, 325, 327, 329, 331, 333, 445, 0,
	447, 0, 581, 1013, 0, -2, 0, 1057, 1057, 1057,
	0, 0, 1026, 1024, 0, 450, 451, 506, 507, 1288,
	0, 0, 0, 0, 0, 1528, 1372, 0, 508, -2,
	1403, 1405, 1968, 1989, 1527, 1407, 1408, 1409, 1410, 1411,
	0, 0, 1414, 0, 1416, 1417, 1418, 1419, 0, 1421,
	0, 1425, 1426, 1427, 0, 1973, 1607, 1672, -2, 1193,
	1194, 1195, 1196, 1197, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1668, 0, 1494, 1441, -2, 1693, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1752, -2, -2, -2, -2, -2, -2, -2, 1249, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 2003, 1445,
	1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 0, 1957,
	1974, 1975, 1980, 1982, 1976, 1965, 1464, -2, 2004, 2005,
	2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015,
	2016, 2017, 2018, 1250, -2, 1969, 1970, 1985, 1986, 1991,
	1996, 1997, 1972, 1981, -2, -2, 1043, 1862, 1046, 814,
	1044, 1028, 1030, 0, 1032, 0, 0, 0, 1037, 1060,
	1058, 0, 1094, 1041, 1042, 1052, 1112, 1135, 0, 1117,
	0, 1135, 1161, 0, 1122, 1882, 1442, 1443, 0, 1676,
	1673, -2, 0, 0, 0, 0, 0, 0, 214, 415,
	0, 421, 423, 0, 0, 0, 0, 0, 0, 0,
	0, 946, 455, 456, 0, 480, 0, 484, 1964, -2,
	1711, 1902, -2, 488, 950, 954, 955, 956, 957, 0,
	0, 0, 0, 0, 494, 0, 0, 481, 482, 500,
	503, 0, 51, 0, 1974, 1161, 53, 0, 1644, 1698,
	1699, 1700, 1701, 1702, 2003, 2019, 2021, 2022, 2023, 2024,
	2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034,
	2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044,
	2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054,
	2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064,
	2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074,
	2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084,
	2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094,
	2095, 2096, 2097, 2098, 2099, 55, 0, 1974, 58, 0,
	1974, 0, -2, 62, 0, 1974, 172, 173, 1689, 1690,
	1694, 1695, 1696, 1697, 65, 0, 1650, 67, 0, 1647,
	76, 0, 1974, 0, 1627, -2, 0, 0, 702, 1624,
	1629, 703, 1634, 0, 195, 196, 197, 198, 199, 1974,
	201, 202, 0, 204, 205, 1974, 207, 208, 0, 210,
	226, 227, 0, 229, 0, 1974, 0, 0, 0, 235,
	-2, 252, 0, 249, 0, 239, 240, 242, 243, 244,
	245, 246, 0, 0, 0, 871, 291, 289, 1655, 0,
	-2, 1974, 859, 862, 1974, 864, 876, 1658, 0, -2,
	0, 1050, 1974, 964, 723, 724, 725, 726, 0, 310,
	0, 977, 0, 979, 0, 999, 1167, 1112, 253, 254,
	255, 256, 257, 1974, 0, 0, 0, 262, 0, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 148, 1974,
	336, 355, 148, 1974, 339, 148, 1974, 342, 148, 1974,
	345, 1622, 148, 1974, 348, 349, 1974, 351, 174, 352,
	1974, 354, 0, -2, 408, 1662, -2, 360, 0, -2,
	0, 186, 0, 0, 708, 709, 0, 914, 915, 0,
	0, 465, 0, 0, 578, 579, 0, 0, 589, 590,
	591, 592, 1890, 1860, 1768, 596, 0, 599, -2, 0,
	0, 0, 603, 0, 607, 608, 609, 0, 707, 611,
	0, 0, 613, 0, 617, 0, 620, 0, 622, 0,
	624, -2, -2, -2, 635, -2, 0, 639, 0, 641,
	0, 0, 0, 0, 656, 657, 0, 662, 0, 665,
	666, 667, 0, 669, 670, 671, 672, 0, 674, 675,
	-2, -2, 679, 681, 0, 688, 0, 693, 0, 585,
	586, 148, 1165, 926, -2, 928, 0, 944, 1016, -2,
	0, 446, 0, 449, 1020, 0, 1022, 0, 1014, 1019,
	1072, 1073, 0, 0, 0, 0, 1055, 1056, 0, 0,
	0, 1011, 1012, 0, 0, 0, 0, 1533, 1534, 1535,
	1536, 1537, 1538, 1541, 1542, 1539, 1540, 1543, 1544, 0,
	0, 0, 0, 0, 1545, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1546, 1547, 1548, 0,
	0, 1550, 0, 1552, 0, 0, 0, 0, 0, 0,
	1351, 1353, 1615, 0, 0, 1549, 1293, 1294, 1295, 1330,
	1331, 0, 0, 1404, 1612, 1611, 1406, 0, 1564, 0,
	1413, 0, 1285, 1420, 1641, -2, 0, 1528, 1559, 0,
	0, 1428, 1429, 1430, 0, 0, 1564, 0, 0, 1606,
	0, 1496, 0, 1229, 0, 1230, 1231, 0, 1232, 1233,
	1246, 1259, 0, 0, 0, 0, 1263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1251, 0, 0, 0, 1587, -2, 0,
	0, 0, 0, 0, 1045, 0, 0, 1098, 1616, 1620,
	1621, 1098, 1098, 0, 0, 1565, 1158, 1158, 0, 0,
	1154, 1154, 1154, 1152, 1129, 0, 396, 398, 400, 402,
	403, 404, 406, 1135, 0, 1145, 0, 1135, 1135, 0,
	-2, 1117, 0, 0, 1145, 1162, 1163, 0, 0, 0,
	0, 0, 0, 1677, 0, 0, 0, 1664, 0, 0,
	0, 426, 436, 1052, 0, 1567, 1184, 1178, 1187, 1188,
	1189, 1190, 1236, 1237, 1238, 1239, 1240, 1198, 1199, 1200,
	1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210,
	1211, 1212, 1213, 1214, -2, 1247, 1249, 1270, 1218, 1219,
	1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1242,
	0, 1217, 1217, 1217, 1234, 1235, 1258, 1269, 1261, 1269,
	1265, 1185, 1186, 1252, 1253, 1254, 1255, 0, 430, 0,
	0, 0, 0, -2, 490, 495, 496, 0, 0, 952,
	0, 958, 517, 518, 519, 960, 961, 0, 493, 520,
	521, 522, 523, 524, 525, 0, 831, 0, 833, 1636,
	0, 491, 510, 498, 0, 504, 77, 909, 114, 0,
	909, 909, 0, 0, 135, 0, 0, 0, 0, 0,
	0, 101, 110, 89, 90, 0, 0, 0, 0, 59,
	839, 0, 842, 0, 0, 0, 0, 0, 0, 0,
	854, 0, 0, 0, 0, 100, 0, 95, 79, 0,
	0, 0, 102, 112, 0, 139, 141, 0, 0, 1148,
	156, 0, 701, 0, 0, 1677, 1632, 0, 0, 0,
	0, 228, 230, 0, 232, 233, 234, 0, 870, 0,
	241, 238, 282, 788, 1974, 838, 1974, 836, 1659, 0,
	0, 0, 308, 303, 0, 305, 857, 0, 1049, 0,
	0, 0, 0, 877, 0, 1974, 882, 1646, 1685, 1686,
	966, 0, 1173, 0, 980, 0, 0, 1168, 0, 1170,
	0, 259, 260, 261, 0, 334, 0, 146, 147, 0,
	337, 0, 340, 0, 343, 0, 0, 346, 0, 0,
	0, 0, 1052, 0, 0, 0, 162, 0, 0, 0,
	0, 0, 0, 186, 158, 186, 186, 1148, 467, 1148,
	469, 0, 0, 593, 594, 595, 597, 598, 600, 601,
	-2, -2, 689, 659, 0, 0, 0, 658, 610, 0,
	695, 1878, 705, 612, 1743, 615, 1743, 618, 1743, 621,
	623, 626, 651, 634, 638, 0, 0, 0, 643, 0,
	645, 0, 647, 659, 660, 663, 668, 673, 0, 0,
	0, 0, 0, 855, 0, 943, 1017, 1019, 448, 0,
	1023, 1015, 1070, 1071, 1076, 1080, 1081, 1084, 1087, 1088,
	1078, 1288, 1038, 1039, 1040, 1064, 1065, 896, 0, 2100,
	1289, 1179, 1290, 1291, 1643, 0, 1296, 1297, 1298, 1299,
	1300, 1301, 1302, 1303, 1304, 1305, -2, -2, -2, -2,
	-2, -2, -2, -2, 1314, 1315, 1316, 1317, 1318, 1319,
	1320, 1321, 1322, 1323, 1324, -2, -2, -2, 1328, 1329,
	-2, 1551, 1553, 0, 1615, 0, -2, 0, -2, -2,
	-2, -2, 1348, 0, 1350, 1355, 1357, 1359, 0, 0,
	0, 0, 1614, 1369, 1598, 1599, 0, 0, 1530, 1531,
	1532, 1354, 0, 1373, 1613, 1610, 0, 0, 1563, 1063,
	1432, 0, 0, 0, 0, 1439, 0, 1642, 1284, 1271,
	1272, 1273, 1274, 1275, 1276, 1286, 1424, 1561, 0, 1560,
	0, 0, 0, 1571, 0, 1605, 1601, 0, 1665, 1671,
	1504, 0, 0, 0, 0, 1639, 0, 0, 0, 0,
	0, 0, 0, 1465, 1466, 1467, 1468, 1469, 1470, 1471,
	1472, 1473, 1474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1476, 0, 1574, -2, -2, -2, -2, -2,
	-2, -2, 0, 1478, 0, 1480, 1565, 1584, 0, 0,
	1374, 0, 0, 0, 1528, 0, 1483, 1565, 1592, 0,
	0, 0, 0, 0, 1565, 0, 1597, 0, 1490, 0,
	1492, 1047, 0, 0, 1173, 0, 0, 0, 1619, 1173,
	1173, 0, 1093, 0, 0, 1155, 1156, 1157, 0, 0,
	1158, 0, 1149, 1153, 1150, 1151, 0, 0, 1135, 397,
	399, 401, 405, 407, 1145, 1109, 0, 0, 1645, 1115,
	1144, 0, 814, 1134, 1145, 1145, 0, -2, 1119, 0,
	0, 1063, -2, 187, 813, 0, 0, 0, 0, 416,
	418, 0, 0, 410, 0, 413, 0, 1174, 1177, 0,
	1191, 0, 0, -2, 0, 0, 0, 0, 0, 483,
	0, 951, 959, 0, 514, 0, 516, 0, 832, 1638,
	1637, 0, 505, 0, 0, 0, 0, 908, 118, 1974,
	0, 150, 0, 0, 782, 1651, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 91, 0, 0, 0, 0, 0, 0, 0,
	840, 841, 843, 849, 851, 0, 845, 1640, 0, 846,
	0, 848, 850, 852, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 92, 0, 0, 0, 0,
	1626, 177, 1147, 0, 1625, 1635, 0, 200, 203, 206,
	209, 0, 236, 0, 0, 730, 713, 0, 834, 837,
	0, 814, 869, 1657, 0, 290, 186, 0, 0, 304,
	0, 0, 0, 0, 0, 0, 875, 0, 0, 0,
	1974, 968, 974, 0, 1063, 1172, 0, 997, 982, 0,
	0, 0, 997, 1001, 1002, 1004, 1005, 0, 0, 1169,
	0, 263, 356, 148, 148, 148, 1623, 148, 148, 175,
	350, 353, 359, 409, 1052, 186, 184, 1839, 182, 179,
	181, 0, 0, 0, 731, 733, 734, 735, 736, 0,
	1686, 0, 1797, 1686, 0, 985, 987, 0, 153, 186,
	0, 0, 302, 466, 471, 587, 0, 628, 653, 602,
	604, 605, 606, 706, 704, 614, 616, 619, 637, 640,
	642, 0, 0, 0, 655, 0, 0, 0, 0, 0,
	690, 691, 692, 694, 1166, 1018, 1021, 0, 1082, 0,
	1079, 1085, 1086, 0, 1067, 894, 895, 0, 0, 0,
	0, -2, -2, 0, 0, 0, 1370, 0, -2, 1349,
	1352, 1356, 1358, 1360, 0, 0, 0, 0, 0, 0,
	1554, 0, 1556, 1371, 1608, 1611, 1526, 0, 0, 1062,
	1063, 1063, 0, 1438, 0, 0, 0, 0, 0, 0,
	0, 1562, 0, 1569, 1570, 0, 1431, 0, 1602, 0,
	0, 0, 1440, 0, 0, 0, 1241, 1215, 0, 1269,
	1267, 1268, 1262, 1269, 1266, 0, 0, 0, 0, 0,
	1459, 0, 0, 0, 1463, 1475, 0, 1477, 1479, 0,
	0, 1481, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1377, 1378, 1379, 1482, 1590,
	1591, 0, 0, 0, 0, 0, 0, 1488, 0, 1596,
	1489, 1491, 1052, 1095, 1090, 1617, 1148, 1097, 1099, 1618,
	1648, 1090, 1090, 0, 1566, 0, 0, 1139, 0, 0,
	0, 1141, 0, 1130, 0, 1132, 1145, 1114, 0, 0,
	1107, 0, 1103, 1104, 1105, 1106, 814, 1143, 1116, 1120,
	1665, 0, 1164, 0, 1124, 1127, 0, 0, 1678, 211,
	215, 216, 212, 213, 425, 0, 0, 1568, 0, 1180,
	0, 0, 0, 0, 0, 429, 0, 479, -2, 512,
	513, 515, 0, 511, 115, 909, 0, 0, 900, 0,
	120, 1974, 129, 0, 759, 0, 1649, 0, 0, 0,
	0, 911, 0, 1974, 148, 1974, 148, 131, 134, 0,
	138, 136, 0, 0, 750, 78, 909, 81, 85, 93,
	0, 0, 0, 99, 0, 0, 0, 902, 0, 844,
	847, 853, 60, 0, 904, 898, 0, 897, 140, 83,
	87, 94, 0, 906, 80, 0, 186, 0, 157, 1631,
	0, 0, 0, 0, 0, 729, 799, 0, 0, 0,
	0, 0, 0, 296, 292, 0, 301, 307, 306, 860,
	-2, 863, 872, 0, 874, 886, 0, 0, 0, 970,
	974, 0, 973, 1050, 1075, 1171, 975, 997, 0, 0,
	0, 984, 981, 978, 1173, 0, 0, 0, 0, 0,
	258, 335, 338, 341, 344, 347, 361, 161, 0, 0,
	0, 0, 0, 186, 0, 0, 0, 0, 0, 1686,
	1686, 0, 1653, 0, 0, 0, 0, 154, 159, 0,
	468, 0, 0, 644, 646, 659, 682, 683, 745, 0,
	745, 0, 0, 1066, 896, 0, 1292, 1333, 0, 0,
	-2, 0, 0, 1337, 0, 0, 0, -2, 0, 0,
	0, 1555, 1557, 0, 1610, 1433, 0, 0, 0, 1437,
	1415, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 0, 1422,
	1423, 1529, 1572, 1600, 1604, 0, 1666, 1670, 1502, 1503,
	1507, 1656, 0, 0, 0, 1260, 1264, 1444, 0, 0,
	0, 0, 0, 0, 0, 1573, 1583, 1585, 1375, 1376,
	1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389,
	-2, -2, -2, 1393, 1394, 1395, -2, -2, -2, 0,
	0, 0, 1586, 1588, 1589, 1593, 1594, 0, 1485, 1486,
	1487, 1595, 0, 1092, 0, 1096, 0, 1092, 1092, 1059,
	1137, 0, 0, 1160, 0, 1112, 1131, 0, 1121, 1110,
	0, 1111, 0, 1142, 0, 1118, 1123, 0, 1126, 0,
	1433, -2, 427, 411, 0, 0, 1182, 1192, 0, 1244,
	1248, 431, 1146, 0, 0, 0, 0, 149, 757, 781,
	0, 0, 889, 896, 0, 0, 122, 0, 0, 0,
	130, 0, 127, 0, 133, 137, 0, 0, 0, 0,
	0, 96, 97, 98, 0, 103, 104, 0, 0, 0,
	0, 0, 0, 0, 151, 0, 231, 868, 237, 739,
	787, 0, 789, 0, 714, 0, 788, 838, 0, 288,
	0, 295, 0, 858, 873, 0, 0, 0, 0, 0,
	972, 974, 0, 965, 966, 997, 1074, 976, 995, -2,
	994, 0, 1063, 1003, 1000, 1006, 1007, 0, 183, 0,
	178, 180, 0, 164, 0, 0, 732, 737, 0, 0,
	0, 0, 0, 986, 988, 0, 170, 0, 588, 654,
	684, 744, 0, 0, 686, 1077, 1083, 1068, 896, 1335,
	1339, 0, 0, 0, 1341, -2, 0, 1363, -2, -2,
	1558, 1609, 1412, 1063, 1434, 1436, 1287, 1603, 0, 1509,
	1506, 0, 1493, 1216, 1454, 1455, 0, 0, 1458, 1460,
	1461, 1462, 1582, 0, 0, 0, 0, 1484, 1048, 1498,
	0, 0, 1100, 1498, 1498, 1138, 0, 1140, 1135, 1133,
	1108, 1101, 0, 1666, 1125, 0, 0, 1175, 1181, 0,
	1243, 116, 117, 119, 0, 758, 0, 761, 0, 0,
	0, 0, 768, 769, 0, 0, 0, 0, 0, 803,
	812, 0, 891, 0, 0, 0, 124, 143, 0, 0,
	910, 0, 148, 148, 0, 0, 901, 0, 0, 0,
	0, 0, 903, 905, 899, 0, 0, 907, 176, 747,
	0, 799, 791, 792, 793, 0, 798, 800, 0, 0,
	718, 715, 730, 713, 835, 867, 0, 293, 0, 885,
	0, 0, 0, 962, 974, 0, 967, 968, 309, 0,
	0, 0, 983, 1075, 0, 185, 186, 0, 0, 0,
	0, 0, 0, 0, 186, 470, 472, 0, 0, 478,
	743, 0, 0, 1069, 1343, -2, -2, 1364, 0, 1667,
	1669, 1063, 0, 1495, 0, 0, -2, 0, 0, 0,
	1034, 0, 1091, 1089, 1035, 1036, 1159, 1145, 0, 1128,
	0, 1183, 121, 0, 762, 763, 1652, 765, 0, 767,
	770, 0, 772, 1688, 0, 776, 783, 804, 0, 739,
	0, 809, 810, 890, 785, 0, 123, 125, 142, 893,
	126, 132, 0, 0, 82, 0, 0, 1737, 107, 105,
	84, 0, 713, 746, 0, 790, 0, 801, 802, 716,
	0, 0, 0, 294, 297, 0, 300, 0, 886, 0,
	0, 0, 969, 970, 0, 0, 0, 997, 1008, 163,
	0, 0, 812, 0, 0, 780, 0, 168, 0, 474,
	0, 476, 0, 685, 687, 1435, 1513, 0, 1456, 1457,
	-2, 0, 1401, 1497, 1499, 0, 1113, 1102, 1176, 760,
	764, 0, 0, 818, 0, 0, 0, 807, 808, 747,
	0, 0, 145, 0, 0, 0, 0, 0, 0, 0,
	711, 0, 0, 719, 0, 739, 0, 298, 299, 812,
	0, 812, 0, 971, 972, 0, 990, 991, 993, 998,
	0, 0, 739, 812, 779, 0, 473, 0, 0, 0,
	0, 0, 0, 1508, 1402, 0, 0, 0, 771, 823,
	0, 0, 0, 805, 806, 803, 0, 814, 128, 0,
	892, 0, 751, 0, 0, 754, 0, 0, 108, 1737,
	106, 0, 0, 0, 795, 797, 720, 747, 718, 739,
	0, 739, 0, 963, 0, 992, 186, 186, 747, 739,
	186, 475, 477, 1505, 1525, 1514, -2, 1937, 1740, 0,
	1525, 1525, 1500, 1501, 0, 773, 819, 820, 0, 815,
	816, 817, 1687, 774, 775, 784, 811, 818, 144, 748,
	0, 0, 749, 0, 0, 111, 0, 113, 0, 794,
	0, 713, 717, 747, 0, 747, 0, 1173, 165, 166,
	777, 747, 167, 1510, 0, 0, 1516, 1517, 1518, 1519,
	1520, 1511, 1512, 766, 821, 0, 822, 0, 0, 0,
	823, 752, 0, 755, 0, 109, 0, 796, 712, 883,
	812, 883, 812, 989, 778, 0, 1522, 1523, 0, 0,
	824, 0, 827, 828, 0, 825, 803, 0, 0, 742,
	878, 0, 739, 880, 739, 1521, 1524, 1515, 826, 829,
	830, 786, 0, 0, 738, 740, 741, 884, 747, 747,
	747, 0, 883, 883, 753, 0, 879, 881, 0, 0,
	747, 756,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 446, 3, 452, 447, 3,
	457, 458, 450, 448, 462, 449, 459, 451, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 465, 3,
	438, 440, 439, 442, 461, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 455, 3, 456, 453, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 463, 445, 464, 443,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 441, 57781, 444, 57782, 454, 57783, 460, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1074
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1079
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1083
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1084
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1085
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1086
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1087
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1088
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1089
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1090
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1094
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1103
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1104
		{
			return helpWith(sqllex, "ALTER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1107
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1108
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1109
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1110
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1111
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1112
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1113
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1166
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1186
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1197
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1212
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1216
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1220
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1231
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1243
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1262
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1294
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1298
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1302
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1308
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1312
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1318
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1327
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1338
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1342
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1348
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1356
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1366
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1370
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1380
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1391
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1398
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1410
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1417
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1425
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1430
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1434
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1439
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1445
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1453
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1464
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 103:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1474
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 104:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1484
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 105:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1493
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[9].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			s.AllIndexes = true
			sqlVAL.union.val = s
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1506
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1510
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1514
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 109:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1518
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 110:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1524
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1529
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1540
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1544
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1550
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1554
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 116:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1561
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1566
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1571
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1576
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1581
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1586
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1591
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1596
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1601
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1606
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1611
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1620
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1632
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1642
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1649
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1652
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1659
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1668
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1677
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1682
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1689
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1697
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1698
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1702
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1706
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1712
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1720
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1724
		{
			sqlVAL.union.val = nil
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1730
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1734
		{
			sqlVAL.union.val = nil
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1741
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1745
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1749
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1755
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1759
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 151:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1785
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1788
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1811
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1815
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1818
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1822
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1826
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1832
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1836
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1842
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1879
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1884
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1888
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1894
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1899
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1904
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1909
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1914
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1918
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1934
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1937
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1941
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1945
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1953
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1957
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1963
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 177:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1967
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1973
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1977
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1981
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1985
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1991
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1995
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2001
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2005
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 186:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2009
		{
			sqlVAL.union.val = nil
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2015
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2028
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2029
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2030
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2031
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2041
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2049
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2051
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2054
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2064
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2073
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2081
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2083
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2087
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2090
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2100
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2109
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2117
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2119
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2123
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2126
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2130
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2134
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2138
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2153
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2159
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2164
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2176
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2177
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2179
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2180
		{
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2181
		{
			return helpWith(sqllex, "CREATE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2184
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2185
		{
			return unimplemented(sqllex, "create cast")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2186
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2187
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2188
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2189
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2190
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2191
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2192
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2193
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2194
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2195
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2196
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2197
		{
			return unimplemented(sqllex, "create operator")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2198
		{
			return unimplemented(sqllex, "create publication")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2199
		{
			return unimplemented(sqllex, "create rule")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2200
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2201
		{
			return unimplemented(sqllex, "create server")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2202
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2203
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2204
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2207
		{
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2208
		{
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2211
		{
		}
	case 250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2212
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2215
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2216
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2219
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2220
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2221
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2222
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2223
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2224
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 259:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2225
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2226
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2227
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2228
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2229
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2230
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2231
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2232
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2233
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2234
		{
			return unimplemented(sqllex, "drop server")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2235
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2236
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2237
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2238
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2242
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2243
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2244
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2245
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2247
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2248
		{
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2249
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2250
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2260
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2268
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2272
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2276
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2282
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2286
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2295
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2302
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2308
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2314
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2318
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2329
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2341
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2349
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2357
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2367
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2371
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2377
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2381
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2388
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2392
		{

			sqlVAL.union.val = nil
		}
	case 309:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2406
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2416
		{
			return helpWith(sqllex, "DELETE")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2423
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2426
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2427
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2428
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2429
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2430
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2439
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2440
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2441
		{
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2442
		{
			return helpWith(sqllex, "DROP")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2445
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2446
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2447
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2448
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2449
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2457
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2461
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2464
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2472
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2476
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2479
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2487
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2491
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2494
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2502
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2510
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2517
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2525
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2533
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2540
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2548
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2552
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2555
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2563
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2567
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2570
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2574
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2579
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2602
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2605
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2607
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2611
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2615
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2622
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2626
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2629
		{
			return helpWith(sqllex, "DELETE")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2631
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2632
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2633
		{
			return helpWith(sqllex, "INSERT")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2634
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2636
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2637
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2638
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2641
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2646
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2647
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2648
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2653
		{
			return helpWith(sqllex, "DELETE")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2654
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2655
		{
			return helpWith(sqllex, "INSERT")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2657
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2661
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2662
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2666
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2670
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 410:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2680
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2688
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2696
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2700
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 414:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2704
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2714
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2721
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2729
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2733
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 419:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2737
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2747
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2751
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2755
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2759
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2762
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2782
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2786
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2790
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2793
		{
			return helpWith(sqllex, "GRANT")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2813
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2817
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2821
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2824
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2829
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2833
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2843
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2847
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2861
		{
			return helpWith(sqllex, "RESET")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2862
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2870
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2874
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2877
		{
			return helpWith(sqllex, "RESET")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2885
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2888
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2899
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2902
		{
			return helpWith(sqllex, "USE")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2906
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2907
		{
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2908
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2909
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2913
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2914
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2915
		{
			return helpWith(sqllex, "USE")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2931
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2946
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2949
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2967
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2975
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2979
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2983
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2989
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2993
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2999
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3003
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3007
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3011
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3015
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3026
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3029
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3039
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3055
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3059
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 486:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3064
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3081
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3084
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3086
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3089
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3093
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3112
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3119
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3124
		{

			sqlVAL.union.val = &tree.SetSessionAuthorizationDefault{}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3129
		{
			return unimplementedWithIssue(sqllex, 40283)
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3134
		{
			return unimplemented(sqllex, "set from current")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3135
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3143
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3148
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3155
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3159
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3165
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3169
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3176
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3197
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3201
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3207
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3211
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3215
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3219
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3223
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3229
		{
			sqlVAL.union.val = tree.Low
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3233
		{
			sqlVAL.union.val = tree.Normal
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3237
		{
			sqlVAL.union.val = tree.High
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3248
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3252
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3256
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3261
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3265
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3278
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3279
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3280
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3281
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3282
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3283
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3285
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3286
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3287
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3288
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3289
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3290
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3291
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3292
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3293
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3294
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3295
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3296
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3297
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3298
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3299
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3300
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3301
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3302
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3304
		{
			return helpWith(sqllex, "SHOW")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3311
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3312
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3313
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3324
		{
			sqlVAL.str = "client_encoding"
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3327
		{
			sqlVAL.str = "timezone"
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3328
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 587:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3342
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3346
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3350
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3361
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3369
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3377
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3384
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
			}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3392
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3400
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3407
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3417
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3421
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3424
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3426
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3429
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3437
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3440
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3448
		{
			sqlVAL.union.val = &tree.ShowPartitions{Object: sqlDollar[5].union.unresolvedObjectName().String(), IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3452
		{
			sqlVAL.union.val = &tree.ShowPartitions{Object: sqlDollar[5].str, IsDB: true}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3456
		{
			sqlVAL.union.val = &tree.ShowPartitions{Object: sqlDollar[5].union.newTableIndexName().String(), IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3459
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3467
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3470
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3483
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3491
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3499
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3502
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 614:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3504
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3508
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3512
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3515
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3517
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3521
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3524
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3532
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3535
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3537
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3540
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3548
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3551
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3553
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3556
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 629:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3560
		{
			sqlVAL.union.val = true
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3562
		{
			sqlVAL.union.val = true
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3564
		{
			sqlVAL.union.val = false
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3574
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: true}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3578
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: false}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3581
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3582
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3584
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3588
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[5].union.slct(), Block: true}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3591
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3593
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3601
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				Block: true,
			}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3609
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 642:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3618
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3621
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 644:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3623
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3626
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3628
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3632
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3635
		{
			sqlVAL.union.val = true
		}
	case 649:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3636
		{
			sqlVAL.union.val = false
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3644
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3647
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3649
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3652
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3660
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3670
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3680
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3683
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3686
		{
			sqlVAL.union.val = true
		}
	case 659:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3687
		{
			sqlVAL.union.val = false
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3694
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3698
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3701
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3708
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3712
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3715
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3722
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3726
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3734
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3739
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3744
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3748
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3756
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3760
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3764
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3777
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3780
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3788
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3791
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 682:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3795
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3799
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3803
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3811
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3819
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3826
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3833
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3837
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3848
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3853
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3857
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: sqlDollar[5].str}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3860
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3864
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3871
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 696:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3876
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3996
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4000
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4004
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4043
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4047
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4052
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4056
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4065
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4072
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 707:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4076
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4088
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4097
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4100
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4136
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  sqlDollar[8].union.interleave(),
				Defs:        sqlDollar[6].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[9].union.partitionBy(),
			}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4148
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  sqlDollar[11].union.interleave(),
				Defs:        sqlDollar[9].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[12].union.partitionBy(),
			}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4161
		{
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4162
		{
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4163
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 716:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4167
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  nil,
				Defs:        sqlDollar[5].union.tblDefs(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:4178
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  nil,
				Defs:        sqlDollar[8].union.tblDefs(),
				AsSource:    sqlDollar[11].union.slct(),
			}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4190
		{
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4191
		{
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4192
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4206
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4207
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4208
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4209
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4210
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4211
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4212
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4213
		{
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4218
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4224
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4228
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4234
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4240
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4243
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 738:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4247
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4256
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4263
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4268
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4273
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4279
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 745:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4286
		{
			sqlVAL.str = ""
		}
	case 747:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4293
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 748:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4299
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4306
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4313
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4319
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4323
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 753:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4329
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4339
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4343
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 756:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4349
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4363
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4374
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 759:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4378
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4384
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4388
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4392
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4396
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4400
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4404
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4408
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4426
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4430
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4434
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4438
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4442
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4446
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4450
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4460
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4464
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4468
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 777:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4475
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4485
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4497
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4507
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4519
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4524
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 783:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4530
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4536
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4547
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4557
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4571
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4575
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4581
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4591
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4602
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4606
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4613
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 794:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4619
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4630
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4634
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4640
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4646
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4650
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4656
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4660
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4666
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4671
		{
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4672
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4673
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4674
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4675
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4676
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 811:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4693
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 812:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4697
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4703
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 814:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4707
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4727
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4731
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4735
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 818:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4739
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4748
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4752
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4756
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4760
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4764
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4770
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4776
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4784
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4788
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4792
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4796
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4800
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4806
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4810
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4816
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 834:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4835
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4840
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4844
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 838:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4848
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4851
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4852
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4855
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4856
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4858
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4859
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4860
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4863
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4865
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4867
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4869
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4870
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4872
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4873
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4875
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4877
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4885
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4888
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 857:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4896
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4900
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4903
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4907
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 861:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4911
		{
			sqlVAL.union.val = nil
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4921
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4925
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4928
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4933
		{
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4934
		{
		}
	case 867:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4942
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4950
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 869:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4951
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 870:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4954
		{
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4955
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 872:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4961
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 873:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4963
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 874:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4965
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 875:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4967
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4969
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 877:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4971
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 878:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4987
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5001
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5016
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5030
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5044
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 883:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5047
		{
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5048
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5052
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5067
		{
			sqlVAL.union.val = false
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5073
		{
			sqlVAL.union.val = true
		}
	case 888:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5077
		{
			sqlVAL.union.val = false
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5083
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5087
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5096
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5107
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 893:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5108
		{
			sqlVAL.str = ""
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5112
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5116
		{
			sqlVAL.union.val = tree.Descending
		}
	case 896:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5120
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 897:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5126
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5133
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5137
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5143
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5149
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5157
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5163
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5171
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5177
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5185
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5189
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5194
		{
		}
	case 909:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5195
		{
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5198
		{
		}
	case 911:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5199
		{
		}
	case 912:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5207
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5210
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5220
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5229
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5232
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5240
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5243
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5247
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5248
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5249
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5265
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5268
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5270
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5273
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5283
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5286
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5288
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5291
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5295
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5300
		{
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5301
		{
		}
	case 937:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5302
		{
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5310
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5317
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 940:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5320
		{
		}
	case 941:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5321
		{
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5325
		{
			sqlVAL.str = ""
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5329
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5333
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 945:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5337
		{
			sqlVAL.str = ""
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5343
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5347
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 948:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5353
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5357
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5363
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5367
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 952:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5380
		{
		}
	case 953:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5382
		{
		}
	case 954:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5386
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5391
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5395
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5399
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5405
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5411
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 960:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5417
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5421
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 962:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5431
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5441
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5451
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5455
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 966:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5459
		{
			sqlVAL.str = ""
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5465
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 968:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5469
		{
			sqlVAL.str = ""
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5475
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 970:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5479
		{
			sqlVAL.str = ""
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5485
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 972:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5489
		{
			sqlVAL.str = ""
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5494
		{
		}
	case 974:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5495
		{
		}
	case 975:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5507
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 976:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5514
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5521
		{
			return helpWith(sqllex, "INSERT")
		}
	case 978:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5532
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5539
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5543
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5552
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5559
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5563
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5567
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5573
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5577
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5597
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 989:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5601
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5605
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5611
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 992:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5614
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5615
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 994:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5617
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 995:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5623
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 996:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5628
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 997:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5632
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 998:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5649
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5661
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5664
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5667
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5673
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5677
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5690
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5693
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5697
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5740
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5746
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5750
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5765
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), ForLocked: sqlDollar[2].union.forLocked()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5769
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), ForLocked: sqlDollar[3].union.forLocked()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5773
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), ForLocked: sqlDollar[4].union.forLocked()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5777
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), ForLocked: sqlDollar[3].union.forLocked()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5781
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), ForLocked: sqlDollar[4].union.forLocked()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5785
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), ForLocked: sqlDollar[5].union.forLocked()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5790
		{
			sqlVAL.union.val = tree.ForNone
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5791
		{
			sqlVAL.union.val = tree.ForUpdate
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5792
		{
			sqlVAL.union.val = tree.ForNoKeyUpdate
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5793
		{
			sqlVAL.union.val = tree.ForShare
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5794
		{
			sqlVAL.union.val = tree.ForKeyShare
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5799
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5834
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5835
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5836
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5858
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5871
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5885
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5897
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5901
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5910
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5919
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5934
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5941
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5953
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5957
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5961
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5965
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5969
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5975
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5983
		{
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5984
		{
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5988
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5992
		{
			sqlVAL.union.val = nil
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5997
		{
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5998
		{
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6002
		{
			sqlVAL.union.val = true
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6006
		{
			sqlVAL.union.val = false
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6010
		{
			sqlVAL.union.val = false
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6016
		{
			sqlVAL.union.val = true
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6022
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6027
		{
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6028
		{
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6032
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6036
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6042
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6048
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6052
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6058
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6062
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6067
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6082
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6091
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6102
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6106
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6115
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6121
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6128
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6135
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6144
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6148
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6152
		{
			sqlVAL.union.val = tree.NewNumVal(constant.MakeInt64(1), "", false)
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6158
		{
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6159
		{
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6162
		{
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6163
		{
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6180
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6184
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6190
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6194
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6213
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6216
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6218
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6230
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6233
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6235
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6241
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6245
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6251
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6255
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6260
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6265
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6271
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6276
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6283
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6288
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6299
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6303
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6307
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6315
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6346
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6360
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6370
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6378
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6387
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6391
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6395
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6406
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6430
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6436
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6440
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6446
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6448
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6452
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6458
		{
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6460
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6463
		{
			sqlVAL.union.val = nil
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6464
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6465
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6469
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6473
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6479
		{
			sqlVAL.union.val = true
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6483
		{
			sqlVAL.union.val = false
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6503
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6507
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6511
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6515
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6519
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6523
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6529
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6533
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6540
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6546
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6553
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6559
		{
			sqlVAL.str = tree.AstFull
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6563
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6567
		{
			sqlVAL.str = tree.AstRight
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6571
		{
			sqlVAL.str = tree.AstInner
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6577
		{
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6578
		{
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6599
		{
			sqlVAL.str = tree.AstHash
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6603
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6607
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6611
		{
			sqlVAL.str = ""
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6624
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6628
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6633
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6634
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6635
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6636
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6640
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6645
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6659
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6663
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6669
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6677
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6687
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6694
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6706
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6719
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6727
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6728
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6736
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6742
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6749
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6750
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6752
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6760
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6761
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6772
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6773
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6790
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6794
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6798
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6802
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6806
		{
			sqlVAL.union.val = types.String
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6810
		{
			sqlVAL.union.val = types.Name
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6814
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6823
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6827
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6831
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6835
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6839
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6843
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6847
		{
			sqlVAL.union.val = types.INet
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6851
		{
			sqlVAL.union.val = types.Oid
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6855
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6859
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6863
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6894
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6902
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6910
		{
			sqlVAL.union.val = nil
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6917
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6921
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6925
		{
			sqlVAL.union.val = types.Int2
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6929
		{
			sqlVAL.union.val = types.Int2
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6933
		{
			sqlVAL.union.val = types.Int4
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6937
		{
			sqlVAL.union.val = types.Int
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6941
		{
			sqlVAL.union.val = types.Int
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6945
		{
			sqlVAL.union.val = types.Int
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6949
		{
			sqlVAL.union.val = types.Float4
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6953
		{
			sqlVAL.union.val = types.Float4
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6957
		{
			sqlVAL.union.val = types.Float
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6961
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6965
		{
			sqlVAL.union.val = types.Float
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6969
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6977
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6985
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6993
		{
			sqlVAL.union.val = types.Bool
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6997
		{
			sqlVAL.union.val = types.Bool
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7004
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7008
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7012
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7016
		{
			sqlVAL.union.val = types.RegType
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7020
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7026
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7039
		{
			sqlVAL.union.val = types.Float
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7045
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7051
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7059
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7063
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7067
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7073
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7085
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7091
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7095
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7099
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7103
		{
			sqlVAL.union.val = types.String
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7112
		{
			sqlVAL.union.val = true
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7113
		{
			sqlVAL.union.val = false
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7118
		{
			sqlVAL.union.val = types.Date
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7122
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = types.Time
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7127
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = types.MakeTime(prec)
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7134
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7135
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7137
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7145
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7157
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7161
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7170
		{
			sqlVAL.union.val = true
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7171
		{
			sqlVAL.union.val = false
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7172
		{
			sqlVAL.union.val = false
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7176
		{
			sqlVAL.union.val = types.Interval
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7182
		{
			sqlVAL.union.val = tree.Year
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7186
		{
			sqlVAL.union.val = tree.Month
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7190
		{
			sqlVAL.union.val = tree.Day
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7194
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7198
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7202
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7208
		{
			sqlVAL.union.val = tree.Month
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7212
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7216
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7220
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7224
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7228
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7232
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7239
		{
			sqlVAL.union.val = nil
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7245
		{
			sqlVAL.union.val = tree.Second
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7248
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7272
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7276
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7280
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7284
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7295
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7300
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7304
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7308
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7312
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7316
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7320
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7324
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7328
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7332
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7336
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7340
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7344
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7348
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7352
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7356
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7360
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7364
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7368
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7372
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7376
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7380
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7384
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7388
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7392
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7396
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7400
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7404
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7408
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7412
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7416
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Overlaps, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7420
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7424
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7428
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7432
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7436
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7440
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7444
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7448
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7452
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7456
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7460
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7464
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7468
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7472
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7476
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7480
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7484
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7488
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7492
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7496
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7500
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7504
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7508
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7512
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7516
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7520
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7524
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7528
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7532
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7536
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7539
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7541
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7545
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7549
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7553
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7557
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7561
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7565
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7569
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7573
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7577
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7581
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7585
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7589
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7593
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7597
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7601
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7605
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7622
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7627
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7639
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7643
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7647
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7651
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7655
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7659
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7663
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7667
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7671
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7675
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7679
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7683
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7687
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7691
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7695
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7699
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7703
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7707
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7711
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7715
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7719
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7723
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7727
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7731
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7735
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7739
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7743
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7747
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7761
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7769
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7805
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7809
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7813
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7817
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7821
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7826
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7828
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7832
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7835
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7837
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7841
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7845
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7849
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7853
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7862
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7869
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7873
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7877
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7882
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7886
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7890
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7894
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7898
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7901
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7905
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7909
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7912
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7913
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7915
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7921
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7925
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7928
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7939
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7946
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7955
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7956
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7961
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7965
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7969
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7975
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7979
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7983
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7987
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7993
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7997
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8001
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8005
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8009
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8013
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8017
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8021
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8025
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8029
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8033
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8037
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8041
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8048
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8051
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8053
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8056
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8058
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8061
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8063
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8066
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8068
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8071
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8073
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8076
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8078
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8081
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8083
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8086
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8088
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8092
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8095
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8096
		{
			return unimplemented(sqllex, "treat")
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8098
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8102
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8106
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8110
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8114
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8117
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8119
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8122
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8127
		{
			return unimplemented(sqllex, "within group")
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8128
		{
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8132
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8136
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8143
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8147
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8153
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8157
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8163
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8171
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8175
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8179
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8186
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8206
		{
			sqlVAL.str = ""
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8212
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8216
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8222
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.RANGE,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8230
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.ROWS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8238
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.GROUPS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8246
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8252
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8265
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8293
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8297
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8301
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8305
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8312
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8321
		{
			sqlVAL.union.val = tree.ExcludeCurrentRow
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8325
		{
			sqlVAL.union.val = tree.ExcludeGroup
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8329
		{
			sqlVAL.union.val = tree.ExcludeTies
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8333
		{

			sqlVAL.union.val = tree.NoExclusion
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8338
		{
			sqlVAL.union.val = tree.NoExclusion
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8351
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8355
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8362
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8374
		{
			sqlVAL.union.val = tree.Any
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8378
		{
			sqlVAL.union.val = tree.Some
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8382
		{
			sqlVAL.union.val = tree.All
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8387
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8388
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8389
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8390
		{
			sqlVAL.union.val = tree.Div
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8391
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8392
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8393
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8394
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8395
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8396
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8397
		{
			sqlVAL.union.val = tree.LT
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8398
		{
			sqlVAL.union.val = tree.GT
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8399
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8400
		{
			sqlVAL.union.val = tree.LE
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8401
		{
			sqlVAL.union.val = tree.GE
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8402
		{
			sqlVAL.union.val = tree.NE
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8406
		{
			sqlVAL.union.val = tree.Like
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8407
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8408
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8409
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8432
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8436
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8442
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8446
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8450
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8461
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8465
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8471
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8475
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8482
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8488
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8492
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8498
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8502
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8508
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8512
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8518
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8522
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8528
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8532
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8554
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8558
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8562
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8568
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8575
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8579
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8596
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8600
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8604
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8608
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8612
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8618
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8624
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8630
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8634
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8638
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8644
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8656
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8663
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8667
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8673
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8679
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8683
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8690
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8696
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8700
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8707
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8713
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8717
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8722
		{
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8723
		{
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8727
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8731
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8737
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8746
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8750
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8754
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8762
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8766
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8772
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8776
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8795
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8803
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8826
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8835
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1631:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8839
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8843
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8847
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8853
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8857
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8865
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8869
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8878
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8889
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8898
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8906
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9003
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9010
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1666:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9014
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1667:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9018
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1669:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9032
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1670:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9036
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9040
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9053
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9071
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9084
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1678:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9091
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1686:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9116
		{
			sqlVAL.str = ""
		}
	case 1687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9122
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1688:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9126
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
