// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:64

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:579
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9434

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 26,
	-2, 1024,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 69,
	179, 863,
	196, 863,
	211, 241,
	287, 241,
	295, 705,
	322, 241,
	331, 705,
	368, 705,
	393, 241,
	417, 705,
	-2, 0,
	-1, 75,
	211, 245,
	-2, 0,
	-1, 76,
	106, 1024,
	185, 1024,
	403, 1024,
	404, 1024,
	-2, 0,
	-1, 87,
	119, 998,
	134, 998,
	193, 998,
	222, 998,
	253, 998,
	263, 998,
	398, 998,
	-2, 985,
	-1, 116,
	124, 625,
	202, 617,
	210, 625,
	289, 611,
	340, 611,
	386, 625,
	-2, 0,
	-1, 117,
	4, 1026,
	21, 1026,
	22, 1026,
	23, 1026,
	24, 1026,
	25, 1026,
	27, 1026,
	32, 1026,
	37, 1026,
	38, 1026,
	39, 1026,
	40, 1026,
	41, 1026,
	42, 1026,
	43, 1026,
	44, 1026,
	45, 1026,
	46, 1026,
	47, 1026,
	49, 1026,
	50, 1026,
	51, 1026,
	52, 1026,
	53, 1026,
	54, 1026,
	57, 1026,
	58, 1026,
	59, 1026,
	60, 1026,
	62, 1026,
	63, 1026,
	67, 1026,
	68, 1026,
	69, 1026,
	70, 1026,
	71, 1026,
	73, 1026,
	74, 1026,
	75, 1026,
	76, 1026,
	78, 1026,
	80, 1026,
	81, 1026,
	82, 1026,
	85, 1026,
	86, 1026,
	94, 1026,
	95, 1026,
	96, 1026,
	97, 1026,
	98, 1026,
	99, 1026,
	100, 1026,
	101, 1026,
	103, 1026,
	105, 1026,
	106, 1026,
	108, 1026,
	111, 1026,
	112, 1026,
	113, 1026,
	115, 1026,
	117, 1026,
	118, 1026,
	120, 1026,
	121, 1026,
	122, 1026,
	123, 1026,
	124, 1026,
	125, 1026,
	126, 1026,
	127, 1026,
	128, 1026,
	129, 1026,
	130, 1026,
	131, 1026,
	133, 1026,
	139, 1026,
	140, 1026,
	141, 1026,
	142, 1026,
	143, 1026,
	144, 1026,
	146, 1026,
	148, 1026,
	152, 1026,
	153, 1026,
	155, 1026,
	156, 1026,
	158, 1026,
	159, 1026,
	161, 1026,
	162, 1026,
	163, 1026,
	164, 1026,
	165, 1026,
	166, 1026,
	167, 1026,
	168, 1026,
	170, 1026,
	171, 1026,
	173, 1026,
	174, 1026,
	175, 1026,
	179, 1026,
	180, 1026,
	181, 1026,
	182, 1026,
	185, 1026,
	186, 1026,
	187, 1026,
	188, 1026,
	189, 1026,
	190, 1026,
	191, 1026,
	192, 1026,
	194, 1026,
	196, 1026,
	198, 1026,
	200, 1026,
	201, 1026,
	202, 1026,
	204, 1026,
	205, 1026,
	208, 1026,
	209, 1026,
	210, 1026,
	211, 1026,
	213, 1026,
	214, 1026,
	216, 1026,
	217, 1026,
	219, 1026,
	220, 1026,
	223, 1026,
	224, 1026,
	227, 1026,
	228, 1026,
	230, 1026,
	231, 1026,
	232, 1026,
	233, 1026,
	234, 1026,
	235, 1026,
	236, 1026,
	237, 1026,
	238, 1026,
	239, 1026,
	241, 1026,
	242, 1026,
	243, 1026,
	244, 1026,
	246, 1026,
	249, 1026,
	250, 1026,
	251, 1026,
	252, 1026,
	254, 1026,
	255, 1026,
	256, 1026,
	258, 1026,
	259, 1026,
	260, 1026,
	261, 1026,
	264, 1026,
	265, 1026,
	267, 1026,
	269, 1026,
	270, 1026,
	271, 1026,
	272, 1026,
	273, 1026,
	274, 1026,
	275, 1026,
	276, 1026,
	277, 1026,
	279, 1026,
	280, 1026,
	281, 1026,
	282, 1026,
	283, 1026,
	284, 1026,
	286, 1026,
	288, 1026,
	289, 1026,
	290, 1026,
	291, 1026,
	292, 1026,
	293, 1026,
	294, 1026,
	295, 1026,
	296, 1026,
	298, 1026,
	299, 1026,
	300, 1026,
	301, 1026,
	302, 1026,
	304, 1026,
	305, 1026,
	306, 1026,
	307, 1026,
	308, 1026,
	309, 1026,
	310, 1026,
	311, 1026,
	313, 1026,
	315, 1026,
	316, 1026,
	317, 1026,
	318, 1026,
	319, 1026,
	320, 1026,
	322, 1026,
	323, 1026,
	324, 1026,
	325, 1026,
	326, 1026,
	327, 1026,
	328, 1026,
	329, 1026,
	331, 1026,
	332, 1026,
	333, 1026,
	334, 1026,
	335, 1026,
	336, 1026,
	337, 1026,
	338, 1026,
	339, 1026,
	340, 1026,
	342, 1026,
	343, 1026,
	344, 1026,
	345, 1026,
	347, 1026,
	348, 1026,
	349, 1026,
	350, 1026,
	352, 1026,
	353, 1026,
	354, 1026,
	355, 1026,
	356, 1026,
	357, 1026,
	358, 1026,
	359, 1026,
	360, 1026,
	361, 1026,
	362, 1026,
	363, 1026,
	365, 1026,
	366, 1026,
	367, 1026,
	369, 1026,
	370, 1026,
	371, 1026,
	372, 1026,
	373, 1026,
	374, 1026,
	375, 1026,
	376, 1026,
	377, 1026,
	379, 1026,
	380, 1026,
	381, 1026,
	382, 1026,
	384, 1026,
	386, 1026,
	387, 1026,
	388, 1026,
	389, 1026,
	390, 1026,
	392, 1026,
	393, 1026,
	394, 1026,
	396, 1026,
	397, 1026,
	400, 1026,
	401, 1026,
	402, 1026,
	403, 1026,
	404, 1026,
	405, 1026,
	407, 1026,
	409, 1026,
	410, 1026,
	411, 1026,
	412, 1026,
	413, 1026,
	414, 1026,
	415, 1026,
	417, 1026,
	418, 1026,
	419, 1026,
	424, 1026,
	425, 1026,
	426, 1026,
	427, 1026,
	428, 1026,
	429, 1026,
	-2, 0,
	-1, 118,
	1, 916,
	200, 916,
	286, 916,
	293, 916,
	432, 916,
	455, 916,
	-2, 0,
	-1, 120,
	1, 916,
	455, 916,
	-2, 0,
	-1, 121,
	1, 916,
	455, 916,
	-2, 0,
	-1, 122,
	1, 920,
	455, 920,
	-2, 0,
	-1, 146,
	119, 997,
	134, 997,
	193, 997,
	222, 997,
	253, 997,
	263, 997,
	398, 997,
	-2, 994,
	-1, 178,
	4, 1033,
	5, 1033,
	6, 1033,
	7, 1033,
	8, 1033,
	9, 1033,
	10, 1033,
	21, 1033,
	22, 1033,
	23, 1033,
	24, 1033,
	25, 1033,
	27, 1033,
	32, 1033,
	33, 1033,
	37, 1033,
	38, 1033,
	39, 1033,
	40, 1033,
	41, 1033,
	42, 1033,
	43, 1033,
	44, 1033,
	45, 1033,
	46, 1033,
	47, 1033,
	49, 1033,
	50, 1033,
	51, 1033,
	52, 1033,
	53, 1033,
	54, 1033,
	55, 1033,
	56, 1033,
	57, 1033,
	58, 1033,
	59, 1033,
	60, 1033,
	62, 1033,
	63, 1033,
	65, 1033,
	67, 1033,
	68, 1033,
	69, 1033,
	70, 1033,
	71, 1033,
	73, 1033,
	74, 1033,
	75, 1033,
	76, 1033,
	78, 1033,
	80, 1033,
	81, 1033,
	82, 1033,
	84, 1033,
	85, 1033,
	86, 1033,
	87, 1033,
	88, 1033,
	89, 1033,
	90, 1033,
	91, 1033,
	92, 1033,
	93, 1033,
	94, 1033,
	95, 1033,
	96, 1033,
	97, 1033,
	98, 1033,
	99, 1033,
	100, 1033,
	101, 1033,
	102, 1033,
	103, 1033,
	105, 1033,
	106, 1033,
	108, 1033,
	111, 1033,
	112, 1033,
	113, 1033,
	115, 1033,
	117, 1033,
	118, 1033,
	120, 1033,
	121, 1033,
	122, 1033,
	123, 1033,
	124, 1033,
	125, 1033,
	126, 1033,
	127, 1033,
	128, 1033,
	129, 1033,
	130, 1033,
	131, 1033,
	132, 1033,
	133, 1033,
	139, 1033,
	140, 1033,
	141, 1033,
	142, 1033,
	143, 1033,
	144, 1033,
	146, 1033,
	148, 1033,
	151, 1033,
	152, 1033,
	153, 1033,
	155, 1033,
	156, 1033,
	158, 1033,
	159, 1033,
	161, 1033,
	162, 1033,
	163, 1033,
	164, 1033,
	165, 1033,
	166, 1033,
	167, 1033,
	168, 1033,
	169, 1033,
	170, 1033,
	171, 1033,
	173, 1033,
	174, 1033,
	175, 1033,
	179, 1033,
	180, 1033,
	181, 1033,
	182, 1033,
	184, 1033,
	185, 1033,
	186, 1033,
	187, 1033,
	188, 1033,
	189, 1033,
	190, 1033,
	191, 1033,
	192, 1033,
	194, 1033,
	196, 1033,
	197, 1033,
	198, 1033,
	199, 1033,
	200, 1033,
	201, 1033,
	202, 1033,
	203, 1033,
	204, 1033,
	205, 1033,
	208, 1033,
	209, 1033,
	210, 1033,
	211, 1033,
	213, 1033,
	214, 1033,
	216, 1033,
	217, 1033,
	218, 1033,
	219, 1033,
	220, 1033,
	221, 1033,
	223, 1033,
	224, 1033,
	227, 1033,
	228, 1033,
	230, 1033,
	231, 1033,
	232, 1033,
	233, 1033,
	234, 1033,
	235, 1033,
	236, 1033,
	237, 1033,
	238, 1033,
	239, 1033,
	240, 1033,
	241, 1033,
	242, 1033,
	243, 1033,
	244, 1033,
	245, 1033,
	246, 1033,
	247, 1033,
	248, 1033,
	249, 1033,
	250, 1033,
	251, 1033,
	252, 1033,
	254, 1033,
	255, 1033,
	256, 1033,
	259, 1033,
	260, 1033,
	261, 1033,
	264, 1033,
	265, 1033,
	266, 1033,
	267, 1033,
	268, 1033,
	269, 1033,
	270, 1033,
	271, 1033,
	272, 1033,
	273, 1033,
	274, 1033,
	275, 1033,
	276, 1033,
	277, 1033,
	279, 1033,
	280, 1033,
	281, 1033,
	282, 1033,
	283, 1033,
	284, 1033,
	286, 1033,
	288, 1033,
	289, 1033,
	290, 1033,
	291, 1033,
	292, 1033,
	293, 1033,
	294, 1033,
	295, 1033,
	296, 1033,
	298, 1033,
	299, 1033,
	300, 1033,
	301, 1033,
	302, 1033,
	304, 1033,
	305, 1033,
	306, 1033,
	307, 1033,
	308, 1033,
	309, 1033,
	310, 1033,
	311, 1033,
	313, 1033,
	314, 1033,
	315, 1033,
	316, 1033,
	317, 1033,
	318, 1033,
	319, 1033,
	320, 1033,
	322, 1033,
	323, 1033,
	324, 1033,
	325, 1033,
	326, 1033,
	327, 1033,
	328, 1033,
	329, 1033,
	331, 1033,
	332, 1033,
	333, 1033,
	334, 1033,
	335, 1033,
	336, 1033,
	337, 1033,
	338, 1033,
	339, 1033,
	340, 1033,
	341, 1033,
	342, 1033,
	343, 1033,
	344, 1033,
	345, 1033,
	346, 1033,
	347, 1033,
	348, 1033,
	349, 1033,
	350, 1033,
	352, 1033,
	353, 1033,
	354, 1033,
	355, 1033,
	356, 1033,
	357, 1033,
	358, 1033,
	359, 1033,
	360, 1033,
	361, 1033,
	362, 1033,
	363, 1033,
	365, 1033,
	366, 1033,
	367, 1033,
	369, 1033,
	370, 1033,
	371, 1033,
	372, 1033,
	373, 1033,
	374, 1033,
	375, 1033,
	376, 1033,
	377, 1033,
	379, 1033,
	380, 1033,
	381, 1033,
	382, 1033,
	384, 1033,
	386, 1033,
	387, 1033,
	388, 1033,
	389, 1033,
	390, 1033,
	391, 1033,
	392, 1033,
	393, 1033,
	394, 1033,
	396, 1033,
	397, 1033,
	399, 1033,
	400, 1033,
	401, 1033,
	402, 1033,
	403, 1033,
	404, 1033,
	405, 1033,
	406, 1033,
	407, 1033,
	409, 1033,
	410, 1033,
	411, 1033,
	412, 1033,
	413, 1033,
	414, 1033,
	415, 1033,
	417, 1033,
	418, 1033,
	419, 1033,
	424, 1033,
	425, 1033,
	426, 1033,
	427, 1033,
	428, 1033,
	429, 1033,
	430, 1033,
	438, 1033,
	443, 1033,
	444, 1033,
	445, 1033,
	452, 1033,
	457, 1033,
	-2, 0,
	-1, 548,
	150, 1700,
	383, 1700,
	435, 1700,
	454, 1700,
	-2, 0,
	-1, 549,
	150, 1778,
	383, 1778,
	435, 1778,
	454, 1778,
	-2, 0,
	-1, 550,
	150, 1690,
	383, 1690,
	435, 1690,
	454, 1690,
	-2, 0,
	-1, 552,
	150, 1865,
	383, 1865,
	435, 1865,
	454, 1865,
	-2, 0,
	-1, 554,
	150, 1893,
	383, 1893,
	435, 1893,
	454, 1893,
	-2, 0,
	-1, 561,
	150, 1788,
	383, 1788,
	435, 1788,
	454, 1788,
	-2, 490,
	-1, 578,
	454, 1649,
	456, 1649,
	-2, 674,
	-1, 579,
	454, 1651,
	456, 1651,
	-2, 675,
	-1, 580,
	454, 1650,
	456, 1650,
	-2, 676,
	-1, 581,
	456, 1596,
	-2, 677,
	-1, 725,
	289, 612,
	340, 612,
	-2, 0,
	-1, 726,
	289, 611,
	340, 611,
	-2, 568,
	-1, 728,
	1, 635,
	451, 635,
	453, 635,
	455, 635,
	-2, 0,
	-1, 729,
	1, 673,
	147, 673,
	451, 673,
	453, 673,
	455, 673,
	-2, 0,
	-1, 738,
	1, 635,
	451, 635,
	453, 635,
	455, 635,
	-2, 0,
	-1, 739,
	1, 637,
	451, 637,
	453, 637,
	455, 637,
	-2, 0,
	-1, 740,
	1, 640,
	451, 640,
	453, 640,
	455, 640,
	-2, 0,
	-1, 744,
	1, 654,
	451, 654,
	453, 654,
	455, 654,
	-2, 0,
	-1, 745,
	1, 656,
	451, 656,
	453, 656,
	455, 656,
	-2, 0,
	-1, 790,
	134, 1035,
	222, 1035,
	253, 1035,
	-2, 994,
	-1, 805,
	134, 1034,
	222, 1034,
	253, 1034,
	-2, 994,
	-1, 829,
	454, 1648,
	-2, 498,
	-1, 858,
	452, 1640,
	-2, 1631,
	-1, 864,
	5, 1170,
	-2, 1681,
	-1, 865,
	5, 1171,
	-2, 1685,
	-1, 866,
	5, 1172,
	-2, 1684,
	-1, 867,
	5, 1173,
	-2, 1891,
	-1, 868,
	5, 1174,
	-2, 1790,
	-1, 869,
	5, 1175,
	-2, 1857,
	-1, 870,
	5, 1176,
	-2, 1859,
	-1, 871,
	5, 1177,
	-2, 1870,
	-1, 872,
	5, 1178,
	-2, 1860,
	-1, 873,
	5, 1179,
	-2, 1861,
	-1, 874,
	5, 1180,
	-2, 1680,
	-1, 875,
	5, 1181,
	-2, 1906,
	-1, 876,
	5, 1182,
	-2, 1753,
	-1, 877,
	5, 1183,
	-2, 1798,
	-1, 878,
	5, 1184,
	-2, 1800,
	-1, 879,
	5, 1185,
	-2, 1757,
	-1, 880,
	5, 1186,
	452, 1658,
	-2, 1649,
	-1, 881,
	5, 1242,
	452, 1242,
	-2, 1941,
	-1, 886,
	452, 1659,
	-2, 1650,
	-1, 888,
	5, 1190,
	-2, 1939,
	-1, 889,
	5, 1191,
	-2, 1940,
	-1, 890,
	5, 1192,
	-2, 1756,
	-1, 891,
	5, 1193,
	-2, 1952,
	-1, 892,
	5, 1194,
	-2, 1758,
	-1, 893,
	5, 1195,
	-2, 1759,
	-1, 894,
	5, 1196,
	-2, 1760,
	-1, 895,
	5, 1197,
	-2, 1921,
	-1, 896,
	5, 1198,
	-2, 1950,
	-1, 897,
	5, 1199,
	-2, 1736,
	-1, 898,
	5, 1200,
	-2, 1737,
	-1, 899,
	5, 1214,
	-2, 1933,
	-1, 901,
	5, 1189,
	-2, 1929,
	-1, 902,
	5, 1189,
	-2, 1928,
	-1, 903,
	5, 1189,
	-2, 1945,
	-1, 904,
	5, 1206,
	-2, 1923,
	-1, 905,
	5, 1207,
	-2, 1682,
	-1, 906,
	5, 1217,
	-2, 1922,
	-1, 907,
	5, 1219,
	-2, 1961,
	-1, 909,
	5, 1230,
	-2, 1710,
	-1, 910,
	5, 1241,
	-2, 1954,
	-1, 911,
	5, 1233,
	-2, 1955,
	-1, 912,
	5, 1241,
	-2, 1956,
	-1, 913,
	5, 1237,
	-2, 1957,
	-1, 914,
	5, 1157,
	-2, 1766,
	-1, 915,
	5, 1158,
	-2, 1767,
	-1, 916,
	454, 1646,
	-2, 1630,
	-1, 917,
	452, 1981,
	-2, 1647,
	-1, 937,
	5, 1225,
	-2, 1880,
	-1, 954,
	5, 1224,
	-2, 1962,
	-1, 964,
	5, 1226,
	418, 1226,
	-2, 1924,
	-1, 965,
	5, 1227,
	418, 1227,
	-2, 1925,
	-1, 1001,
	452, 1658,
	-2, 1649,
	-1, 1030,
	150, 1893,
	383, 1893,
	435, 1893,
	454, 1893,
	-2, 0,
	-1, 1031,
	1, 478,
	455, 478,
	-2, 928,
	-1, 1151,
	304, 1627,
	445, 1627,
	-2, 1626,
	-1, 1174,
	457, 1627,
	-2, 1628,
	-1, 1209,
	295, 705,
	417, 705,
	-2, 240,
	-1, 1229,
	275, 1022,
	-2, 836,
	-1, 1238,
	257, 1653,
	-2, 0,
	-1, 1302,
	1, 355,
	451, 355,
	453, 355,
	455, 355,
	-2, 996,
	-1, 1305,
	4, 1960,
	11, 1960,
	12, 1960,
	14, 1960,
	15, 1960,
	16, 1960,
	17, 1960,
	18, 1960,
	19, 1960,
	21, 1960,
	22, 1960,
	23, 1960,
	24, 1960,
	25, 1960,
	27, 1960,
	30, 1960,
	32, 1960,
	34, 1960,
	37, 1960,
	38, 1960,
	39, 1960,
	40, 1960,
	41, 1960,
	42, 1960,
	43, 1960,
	44, 1960,
	45, 1960,
	46, 1960,
	47, 1960,
	49, 1960,
	50, 1960,
	51, 1960,
	52, 1960,
	53, 1960,
	54, 1960,
	57, 1960,
	58, 1960,
	59, 1960,
	60, 1960,
	62, 1960,
	63, 1960,
	64, 1960,
	67, 1960,
	68, 1960,
	69, 1960,
	70, 1960,
	71, 1960,
	72, 1960,
	73, 1960,
	74, 1960,
	75, 1960,
	76, 1960,
	78, 1960,
	79, 1960,
	80, 1960,
	81, 1960,
	82, 1960,
	84, 1960,
	85, 1960,
	86, 1960,
	94, 1960,
	95, 1960,
	96, 1960,
	97, 1960,
	98, 1960,
	99, 1960,
	100, 1960,
	101, 1960,
	103, 1960,
	105, 1960,
	106, 1960,
	108, 1960,
	111, 1960,
	112, 1960,
	113, 1960,
	115, 1960,
	117, 1960,
	118, 1960,
	120, 1960,
	121, 1960,
	122, 1960,
	123, 1960,
	124, 1960,
	125, 1960,
	126, 1960,
	127, 1960,
	128, 1960,
	129, 1960,
	130, 1960,
	131, 1960,
	135, 1960,
	136, 1960,
	137, 1960,
	138, 1960,
	139, 1960,
	140, 1960,
	141, 1960,
	142, 1960,
	143, 1960,
	144, 1960,
	145, 1960,
	146, 1960,
	148, 1960,
	151, 1960,
	152, 1960,
	153, 1960,
	155, 1960,
	156, 1960,
	158, 1960,
	159, 1960,
	161, 1960,
	162, 1960,
	163, 1960,
	164, 1960,
	165, 1960,
	166, 1960,
	167, 1960,
	168, 1960,
	169, 1960,
	170, 1960,
	171, 1960,
	172, 1960,
	173, 1960,
	174, 1960,
	175, 1960,
	176, 1960,
	177, 1960,
	178, 1960,
	180, 1960,
	181, 1960,
	182, 1960,
	184, 1960,
	185, 1960,
	186, 1960,
	187, 1960,
	188, 1960,
	189, 1960,
	190, 1960,
	191, 1960,
	192, 1960,
	194, 1960,
	196, 1960,
	197, 1960,
	198, 1960,
	199, 1960,
	200, 1960,
	201, 1960,
	202, 1960,
	203, 1960,
	204, 1960,
	205, 1960,
	206, 1960,
	207, 1960,
	208, 1960,
	209, 1960,
	210, 1960,
	211, 1960,
	213, 1960,
	214, 1960,
	216, 1960,
	217, 1960,
	218, 1960,
	219, 1960,
	220, 1960,
	221, 1960,
	223, 1960,
	224, 1960,
	227, 1960,
	228, 1960,
	229, 1960,
	230, 1960,
	231, 1960,
	232, 1960,
	233, 1960,
	234, 1960,
	235, 1960,
	236, 1960,
	237, 1960,
	238, 1960,
	239, 1960,
	240, 1960,
	241, 1960,
	242, 1960,
	243, 1960,
	244, 1960,
	247, 1960,
	249, 1960,
	250, 1960,
	251, 1960,
	252, 1960,
	254, 1960,
	255, 1960,
	256, 1960,
	259, 1960,
	260, 1960,
	261, 1960,
	262, 1960,
	264, 1960,
	265, 1960,
	267, 1960,
	269, 1960,
	270, 1960,
	271, 1960,
	272, 1960,
	273, 1960,
	274, 1960,
	275, 1960,
	276, 1960,
	277, 1960,
	279, 1960,
	280, 1960,
	281, 1960,
	282, 1960,
	283, 1960,
	284, 1960,
	286, 1960,
	288, 1960,
	289, 1960,
	290, 1960,
	291, 1960,
	292, 1960,
	293, 1960,
	294, 1960,
	295, 1960,
	296, 1960,
	298, 1960,
	299, 1960,
	300, 1960,
	301, 1960,
	302, 1960,
	303, 1960,
	304, 1960,
	305, 1960,
	306, 1960,
	307, 1960,
	308, 1960,
	309, 1960,
	310, 1960,
	311, 1960,
	313, 1960,
	314, 1960,
	315, 1960,
	316, 1960,
	317, 1960,
	318, 1960,
	319, 1960,
	320, 1960,
	321, 1960,
	322, 1960,
	323, 1960,
	324, 1960,
	325, 1960,
	326, 1960,
	327, 1960,
	328, 1960,
	329, 1960,
	331, 1960,
	332, 1960,
	333, 1960,
	334, 1960,
	335, 1960,
	336, 1960,
	337, 1960,
	338, 1960,
	339, 1960,
	340, 1960,
	342, 1960,
	343, 1960,
	344, 1960,
	345, 1960,
	346, 1960,
	347, 1960,
	348, 1960,
	349, 1960,
	350, 1960,
	352, 1960,
	353, 1960,
	354, 1960,
	355, 1960,
	356, 1960,
	357, 1960,
	358, 1960,
	359, 1960,
	360, 1960,
	361, 1960,
	362, 1960,
	363, 1960,
	365, 1960,
	366, 1960,
	367, 1960,
	369, 1960,
	370, 1960,
	371, 1960,
	372, 1960,
	373, 1960,
	374, 1960,
	375, 1960,
	376, 1960,
	377, 1960,
	379, 1960,
	380, 1960,
	381, 1960,
	382, 1960,
	384, 1960,
	386, 1960,
	387, 1960,
	388, 1960,
	389, 1960,
	390, 1960,
	392, 1960,
	393, 1960,
	394, 1960,
	396, 1960,
	397, 1960,
	400, 1960,
	401, 1960,
	402, 1960,
	403, 1960,
	404, 1960,
	405, 1960,
	407, 1960,
	409, 1960,
	410, 1960,
	411, 1960,
	412, 1960,
	413, 1960,
	414, 1960,
	415, 1960,
	417, 1960,
	418, 1960,
	419, 1960,
	424, 1960,
	425, 1960,
	426, 1960,
	427, 1960,
	428, 1960,
	429, 1960,
	430, 1960,
	431, 1960,
	433, 1960,
	434, 1960,
	435, 1960,
	436, 1960,
	437, 1960,
	438, 1960,
	440, 1960,
	441, 1960,
	442, 1960,
	443, 1960,
	444, 1960,
	445, 1960,
	446, 1960,
	447, 1960,
	448, 1960,
	450, 1960,
	453, 1960,
	454, 1960,
	456, 1960,
	457, 1960,
	-2, 0,
	-1, 1308,
	150, 1865,
	383, 1865,
	435, 1865,
	454, 1865,
	-2, 0,
	-1, 1335,
	289, 612,
	340, 612,
	-2, 0,
	-1, 1356,
	1, 607,
	451, 607,
	453, 607,
	455, 607,
	-2, 0,
	-1, 1357,
	1, 626,
	451, 626,
	453, 626,
	455, 626,
	-2, 0,
	-1, 1358,
	1, 614,
	451, 614,
	453, 614,
	455, 614,
	-2, 0,
	-1, 1379,
	1, 1913,
	451, 1913,
	453, 1913,
	454, 1913,
	455, 1913,
	-2, 652,
	-1, 1380,
	1, 1863,
	451, 1863,
	453, 1863,
	454, 1863,
	455, 1863,
	-2, 653,
	-1, 1393,
	1, 923,
	455, 923,
	-2, 928,
	-1, 1398,
	134, 1034,
	222, 1034,
	253, 1034,
	-2, 994,
	-1, 1491,
	119, 998,
	134, 998,
	193, 998,
	222, 998,
	253, 998,
	263, 998,
	398, 998,
	-2, 1398,
	-1, 1544,
	453, 1531,
	-2, 0,
	-1, 1586,
	119, 998,
	134, 998,
	193, 998,
	222, 998,
	253, 998,
	263, 998,
	398, 998,
	-2, 1107,
	-1, 1641,
	452, 1229,
	-2, 1217,
	-1, 1680,
	1, 480,
	455, 480,
	-2, 928,
	-1, 1868,
	1, 609,
	451, 609,
	453, 609,
	455, 609,
	-2, 0,
	-1, 1869,
	1, 628,
	451, 628,
	453, 628,
	455, 628,
	-2, 0,
	-1, 1945,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1278,
	-1, 1946,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1279,
	-1, 1947,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1280,
	-1, 1948,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1281,
	-1, 1949,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1282,
	-1, 1950,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1283,
	-1, 1951,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1284,
	-1, 1952,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1285,
	-1, 1964,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1297,
	-1, 1965,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1298,
	-1, 1966,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1299,
	-1, 1969,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1304,
	-1, 1975,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1308,
	-1, 1977,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1316,
	-1, 1978,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1317,
	-1, 1979,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1318,
	-1, 1980,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1319,
	-1, 2074,
	5, 1186,
	150, 1542,
	452, 1658,
	-2, 1649,
	-1, 2075,
	150, 1543,
	-2, 1917,
	-1, 2076,
	150, 1544,
	-2, 1787,
	-1, 2077,
	150, 1545,
	-2, 1711,
	-1, 2078,
	150, 1546,
	-2, 1747,
	-1, 2079,
	150, 1547,
	-2, 1785,
	-1, 2080,
	150, 1548,
	-2, 1856,
	-1, 2156,
	1, 1108,
	84, 1108,
	119, 1108,
	134, 1108,
	147, 1108,
	151, 1108,
	157, 1108,
	160, 1108,
	184, 1108,
	193, 1108,
	203, 1108,
	218, 1108,
	222, 1108,
	240, 1108,
	253, 1108,
	257, 1108,
	263, 1108,
	312, 1108,
	314, 1108,
	398, 1108,
	408, 1108,
	421, 1108,
	422, 1108,
	423, 1108,
	432, 1108,
	451, 1108,
	453, 1108,
	455, 1108,
	456, 1108,
	-2, 1107,
	-1, 2161,
	452, 1632,
	-2, 1644,
	-1, 2183,
	452, 1228,
	-2, 1218,
	-1, 2410,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1306,
	-1, 2411,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1310,
	-1, 2417,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1312,
	-1, 2598,
	200, 928,
	286, 928,
	293, 928,
	432, 928,
	-2, 477,
	-1, 2688,
	275, 1022,
	-2, 836,
	-1, 2765,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1314,
	-1, 2772,
	197, 0,
	199, 0,
	247, 0,
	-2, 1333,
	-1, 2835,
	14, 0,
	15, 0,
	16, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1362,
	-1, 2836,
	14, 0,
	15, 0,
	16, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1363,
	-1, 2837,
	14, 0,
	15, 0,
	16, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1364,
	-1, 2841,
	14, 0,
	15, 0,
	16, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1368,
	-1, 2842,
	14, 0,
	15, 0,
	16, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1369,
	-1, 2843,
	14, 0,
	15, 0,
	16, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1370,
	-1, 2886,
	452, 1633,
	-2, 1645,
	-1, 2974,
	454, 2063,
	-2, 971,
	-1, 3018,
	197, 0,
	199, 0,
	247, 0,
	-2, 1334,
	-1, 3021,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1337,
	-1, 3022,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1339,
	-1, 3174,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1338,
	-1, 3175,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1340,
	-1, 3185,
	197, 0,
	-2, 1371,
	-1, 3286,
	197, 0,
	-2, 1372,
	-1, 3402,
	41, 0,
	169, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1920,
}

const sqlPrivate = 57344

const sqlLast = 71689

var sqlAct = [...]int{

	886, 3488, 3121, 3215, 3411, 3218, 3401, 3478, 2313, 3240,
	2675, 3004, 3371, 2105, 3413, 3355, 3380, 3368, 3412, 2322,
	3204, 3246, 2803, 1002, 3290, 2314, 2907, 3143, 815, 3400,
	1932, 3165, 2965, 2960, 2704, 3251, 3080, 2148, 1992, 210,
	1037, 210, 210, 1294, 1155, 210, 210, 210, 210, 210,
	1611, 1406, 210, 2697, 2947, 2970, 2671, 2908, 2699, 1056,
	580, 559, 1581, 2310, 3189, 2573, 806, 2354, 2287, 994,
	2559, 2546, 2403, 1290, 2285, 2519, 2364, 3003, 210, 1848,
	1579, 676, 580, 1340, 2345, 2353, 2535, 858, 1806, 2347,
	1809, 2323, 1553, 2290, 2858, 1180, 3052, 2214, 2149, 2212,
	1798, 1799, 2615, 1489, 2271, 1725, 1734, 2518, 1929, 1517,
	1148, 1499, 202, 2023, 814, 139, 2438, 3291, 2005, 1925,
	1759, 2399, 1827, 1167, 2147, 2288, 885, 1752, 882, 4,
	1712, 2043, 1710, 1044, 1393, 86, 2123, 1554, 2035, 1989,
	2673, 1277, 2578, 2102, 2151, 2247, 986, 2363, 2316, 3241,
	1795, 1287, 1157, 1303, 803, 1164, 2357, 1223, 2017, 204,
	527, 989, 1033, 2131, 581, 2006, 2246, 582, 1563, 2113,
	968, 32, 146, 210, 210, 203, 2070, 1480, 1407, 1405,
	543, 1794, 553, 147, 576, 511, 1301, 1815, 1512, 1253,
	535, 139, 652, 2144, 1177, 621, 1724, 2204, 842, 530,
	991, 37, 966, 1411, 1392, 36, 671, 538, 34, 720,
	26, 24, 22, 735, 1235, 2875, 58, 2434, 2876, 585,
	1849, 3516, 3507, 3506, 2122, 2122, 2122, 1829, 59, 1041,
	2315, 1580, 810, 1612, 1829, 588, 58, 1829, 2319, 2760,
	810, 585, 63, 2266, 3487, 1762, 3474, 1766, 59, 3094,
	2020, 3472, 3435, 1841, 3094, 3436, 2233, 588, 3433, 2714,
	3431, 2122, 63, 2122, 805, 2713, 686, 3428, 1000, 1186,
	3429, 1198, 69, 3425, 819, 1041, 3426, 3422, 1490, 3398,
	1766, 2596, 1766, 3397, 811, 3396, 1766, 3393, 1841, 178,
	1841, 1192, 69, 3392, 3350, 3340, 1841, 2176, 3094, 2861,
	3339, 3333, 75, 3094, 1766, 813, 3327, 997, 2122, 3094,
	3325, 85, 791, 3094, 2453, 2021, 76, 969, 969, 2454,
	2172, 3288, 75, 790, 2176, 3272, 3269, 180, 1766, 3094,
	3232, 85, 3231, 1766, 3224, 1766, 76, 1766, 3223, 3195,
	3176, 3094, 1766, 2176, 3155, 3118, 3111, 2726, 2122, 2122,
	825, 3093, 2115, 1766, 3094, 798, 1297, 178, 3020, 3351,
	77, 2176, 1419, 1420, 2982, 2976, 2945, 2742, 2742, 2946,
	178, 2881, 179, 3274, 2882, 2871, 970, 1841, 2872, 1020,
	77, 2864, 172, 1015, 2122, 2861, 2022, 2019, 1422, 2796,
	173, 2784, 1766, 2741, 2122, 180, 2742, 76, 2733, 972,
	973, 2734, 1419, 1420, 2532, 2114, 2530, 2122, 180, 2122,
	2529, 148, 3112, 2122, 2483, 1421, 2466, 2122, 2455, 2467,
	1766, 2122, 672, 1441, 2343, 2122, 2189, 1845, 1422, 2122,
	2734, 2261, 1589, 2437, 1197, 2175, 2169, 2203, 2176, 2122,
	179, 1683, 2726, 2163, 2491, 2492, 1766, 58, 2174, 674,
	172, 2297, 843, 179, 1191, 1421, 1016, 2121, 173, 59,
	2122, 1844, 2402, 172, 1845, 78, 178, 1765, 2201, 3014,
	1549, 173, 1176, 63, 2142, 1342, 2715, 2491, 2492, 148,
	2024, 1703, 3069, 1830, 2141, 78, 1444, 1445, 1446, 1447,
	1830, 2140, 148, 1830, 2139, 2716, 1427, 145, 81, 2138,
	82, 974, 971, 69, 180, 2506, 2384, 1490, 797, 796,
	795, 794, 178, 793, 2491, 2492, 210, 145, 81, 178,
	82, 789, 788, 787, 786, 210, 785, 1449, 1450, 1451,
	784, 675, 783, 75, 116, 782, 1427, 781, 780, 178,
	779, 778, 85, 718, 717, 716, 210, 76, 715, 179,
	180, 675, 714, 210, 116, 713, 712, 180, 711, 172,
	710, 709, 708, 707, 3031, 2713, 706, 173, 705, 210,
	1059, 210, 210, 1160, 210, 1059, 210, 180, 2497, 2018,
	1442, 117, 704, 703, 210, 210, 1043, 1016, 2318, 702,
	1048, 77, 701, 700, 149, 179, 699, 178, 698, 178,
	178, 117, 179, 2181, 697, 696, 1013, 695, 694, 210,
	693, 2497, 172, 983, 149, 116, 685, 684, 643, 178,
	173, 642, 179, 210, 601, 1160, 1160, 210, 210, 1837,
	210, 600, 172, 178, 148, 180, 1828, 180, 180, 1905,
	173, 148, 210, 599, 3214, 591, 590, 589, 2497, 1170,
	210, 566, 565, 564, 1448, 563, 547, 180, 2114, 200,
	199, 148, 2507, 198, 210, 210, 210, 210, 210, 1160,
	1160, 180, 1443, 197, 1160, 196, 210, 1160, 210, 210,
	179, 195, 179, 179, 1151, 1016, 194, 193, 1174, 1031,
	172, 192, 172, 172, 1057, 2507, 78, 191, 173, 1168,
	173, 173, 179, 190, 189, 188, 187, 186, 185, 184,
	183, 182, 172, 1298, 181, 1052, 179, 1145, 1150, 148,
	173, 148, 148, 1582, 2303, 1160, 172, 2879, 145, 81,
	2743, 82, 2507, 2576, 173, 1028, 2460, 2449, 2275, 1236,
	1236, 148, 2164, 585, 210, 1418, 1520, 1520, 1179, 2155,
	178, 1178, 1519, 1519, 2508, 148, 2061, 2059, 2057, 588,
	210, 2055, 675, 1851, 2053, 116, 1185, 1708, 1190, 1596,
	1196, 1506, 1501, 1523, 1518, 210, 3151, 1182, 1050, 1174,
	1004, 3418, 884, 3399, 3321, 1240, 3281, 2508, 180, 139,
	3156, 1432, 1430, 1431, 1423, 1424, 1425, 1426, 1428, 1429,
	3277, 3073, 3275, 3051, 1306, 3050, 1281, 1284, 3038, 811,
	3037, 3036, 117, 3035, 3029, 3028, 3027, 2944, 2896, 2895,
	2893, 2885, 1363, 1291, 2508, 149, 1304, 2855, 2491, 2492,
	1850, 2854, 2853, 179, 1423, 1424, 1425, 1426, 1428, 1429,
	2780, 58, 1237, 172, 1501, 2491, 2492, 2776, 2737, 2491,
	2492, 173, 2571, 59, 1314, 2526, 2517, 1399, 2490, 2487,
	2486, 1317, 2484, 2473, 2472, 2471, 2468, 63, 2491, 2492,
	2465, 2443, 673, 2502, 2500, 2501, 2493, 2494, 2495, 2496,
	2498, 2499, 2442, 2435, 2344, 2156, 208, 2028, 1418, 1419,
	1420, 1488, 1771, 982, 1803, 1417, 3514, 69, 2304, 1769,
	3486, 3485, 3434, 1502, 1003, 1500, 1391, 1398, 2501, 2493,
	2494, 2495, 2496, 2498, 2499, 1422, 1704, 2248, 2590, 2805,
	3388, 3386, 3318, 3315, 908, 2398, 3312, 75, 3311, 1153,
	3310, 1322, 3306, 3300, 3273, 3268, 85, 3267, 1995, 3210,
	1336, 76, 1421, 3187, 3161, 1397, 2493, 2494, 2495, 2496,
	2498, 2499, 2552, 3160, 3141, 1396, 3138, 3132, 3068, 3049,
	1404, 2996, 2497, 996, 2993, 2923, 2922, 2911, 210, 2910,
	1394, 3150, 2867, 2771, 2727, 2691, 2661, 2001, 2640, 2497,
	2618, 1229, 1232, 2497, 2617, 77, 811, 791, 2592, 2531,
	2464, 2463, 2448, 1551, 210, 1560, 2491, 2492, 790, 2509,
	2510, 2511, 2497, 840, 210, 1059, 210, 210, 210, 1400,
	2426, 2284, 1414, 1415, 1160, 580, 210, 210, 1419, 1420,
	580, 210, 1522, 1427, 1605, 1524, 210, 1521, 1513, 1510,
	2185, 841, 2184, 1310, 2159, 2136, 829, 2120, 2051, 1484,
	1853, 1678, 1595, 1552, 1422, 1548, 2507, 1547, 1546, 1545,
	1544, 1059, 1543, 1542, 1590, 1541, 1540, 2506, 1538, 2302,
	1537, 1536, 1535, 1534, 1533, 1532, 1531, 1530, 2088, 1557,
	1558, 1421, 1529, 1706, 1528, 1527, 1000, 1526, 1000, 1503,
	1485, 1329, 1483, 1478, 1027, 1018, 2507, 1677, 1010, 1570,
	78, 1514, 1515, 3199, 3213, 1603, 3293, 3137, 3070, 1598,
	139, 3024, 2892, 2874, 2870, 2452, 2178, 2137, 1729, 3072,
	2891, 1608, 969, 1502, 2588, 997, 1675, 997, 1481, 1591,
	1047, 2618, 145, 81, 2643, 82, 811, 2491, 2492, 1599,
	2497, 1045, 1852, 1703, 3313, 1703, 1602, 2700, 2508, 1703,
	3154, 3113, 2877, 2729, 178, 2728, 1041, 1038, 1520, 2955,
	1681, 1582, 1587, 1335, 1519, 3252, 675, 1575, 1041, 116,
	2020, 1600, 1032, 1389, 2470, 1680, 1849, 2469, 2408, 2235,
	1550, 1042, 1046, 2921, 585, 1709, 1160, 210, 2508, 585,
	2250, 1689, 180, 1059, 998, 1508, 1341, 1578, 1702, 1584,
	588, 1577, 1364, 776, 1576, 588, 1574, 1573, 1572, 1607,
	3247, 1493, 1718, 1041, 1674, 1498, 117, 2060, 2058, 2056,
	1342, 2677, 2054, 2676, 2507, 2052, 1609, 1800, 2936, 149,
	567, 2925, 210, 210, 1533, 2021, 3278, 179, 3276, 210,
	2746, 1533, 777, 1039, 2655, 1747, 3489, 172, 3190, 210,
	1040, 1695, 2315, 2807, 2036, 173, 2183, 1539, 210, 1516,
	210, 2458, 210, 3419, 2669, 3430, 210, 2502, 2500, 2501,
	2493, 2494, 2495, 2496, 2498, 2499, 1307, 1791, 210, 1213,
	1749, 3427, 2709, 1751, 1733, 2903, 1756, 2493, 2494, 2495,
	2496, 2498, 2499, 2495, 2496, 2498, 2499, 3365, 2961, 2351,
	1694, 1693, 3461, 1326, 1703, 1700, 2022, 2019, 2500, 2501,
	2493, 2494, 2495, 2496, 2498, 2499, 2508, 1767, 1160, 210,
	1160, 3420, 1804, 3332, 573, 754, 1160, 3460, 2600, 210,
	1760, 210, 210, 1425, 1426, 1428, 1429, 2216, 3104, 1201,
	1211, 1160, 1160, 1787, 210, 1790, 585, 1821, 1487, 210,
	1362, 1179, 1812, 981, 1178, 2190, 580, 210, 1038, 210,
	1690, 210, 588, 210, 1361, 210, 772, 1726, 770, 1854,
	1038, 2589, 768, 210, 1047, 2207, 210, 1755, 210, 766,
	1606, 1764, 763, 638, 1894, 1892, 2205, 210, 2207, 1041,
	3511, 3239, 1713, 809, 3234, 1722, 1714, 2938, 1697, 2205,
	2024, 2602, 2934, 809, 2933, 1864, 210, 575, 2900, 1047,
	1819, 1212, 210, 1781, 1832, 1780, 2899, 1834, 1727, 1728,
	1836, 804, 1729, 2447, 1839, 2219, 1046, 2446, 2503, 2504,
	2505, 2445, 1059, 2444, 2642, 2502, 2500, 2501, 2493, 2494,
	2495, 2496, 2498, 2499, 1039, 1723, 2412, 1814, 1324, 1817,
	1360, 1040, 2268, 811, 829, 2260, 1039, 2257, 829, 2238,
	3171, 1046, 639, 1040, 2171, 1429, 1143, 808, 1976, 1912,
	1304, 1143, 1395, 1909, 1175, 2047, 2046, 808, 1934, 2311,
	3331, 1618, 1715, 2423, 2747, 1246, 1856, 1245, 1591, 1244,
	1644, 1243, 1903, 1265, 1717, 1860, 2237, 1779, 633, 2018,
	1224, 1028, 569, 760, 1846, 1699, 2421, 3091, 2007, 2008,
	1855, 1902, 1207, 1991, 2197, 585, 1374, 1059, 3220, 574,
	1698, 2162, 1319, 1904, 2226, 3390, 2007, 2033, 2225, 1818,
	1337, 588, 1402, 2179, 3088, 2024, 1222, 810, 2749, 3481,
	1877, 2748, 1763, 2381, 2168, 1713, 1991, 810, 3452, 1714,
	1719, 3100, 1999, 2913, 2790, 1868, 1933, 1997, 2254, 571,
	210, 2218, 2069, 1907, 2073, 2073, 2086, 2036, 2007, 632,
	1910, 2106, 2108, 1221, 2499, 3089, 2112, 1356, 1704, 2248,
	1704, 2248, 1867, 2787, 1704, 2248, 1906, 2706, 1334, 1908,
	1041, 1059, 210, 1026, 791, 1911, 568, 791, 791, 3460,
	1388, 210, 1041, 1209, 210, 1921, 1869, 1059, 1922, 1923,
	1720, 2418, 2400, 2401, 2707, 2652, 1320, 1342, 2647, 2160,
	523, 1720, 2419, 1342, 2032, 2424, 1359, 1746, 1357, 811,
	691, 1731, 3307, 1224, 572, 1715, 1729, 3501, 2157, 3416,
	2664, 2037, 811, 1720, 518, 570, 811, 1717, 2024, 3170,
	670, 1758, 2143, 2601, 2788, 2599, 2153, 2154, 1419, 1420,
	2045, 2630, 1000, 1930, 1931, 2049, 2050, 2003, 2632, 2706,
	3129, 1757, 807, 2636, 1829, 2217, 1847, 3451, 2030, 1511,
	641, 640, 807, 2586, 1422, 2236, 1000, 210, 2935, 2299,
	1008, 2634, 2924, 2258, 3098, 1920, 2170, 1862, 1863, 1753,
	1901, 997, 2629, 1719, 969, 2206, 1720, 3005, 3181, 1325,
	2127, 1421, 2027, 3467, 1371, 631, 3376, 630, 3084, 1059,
	2097, 3085, 1727, 1728, 210, 997, 3317, 3479, 2081, 1477,
	2110, 2161, 210, 2462, 811, 139, 2633, 2118, 2119, 1704,
	1701, 2133, 2134, 210, 2129, 2132, 634, 774, 2024, 1754,
	2173, 773, 810, 764, 1007, 2152, 210, 764, 3087, 1160,
	1587, 3417, 3008, 3136, 765, 2420, 1264, 764, 1893, 1891,
	3090, 2888, 210, 1059, 2422, 749, 210, 210, 3000, 1021,
	1716, 996, 2914, 996, 1005, 1206, 1522, 2180, 1344, 3414,
	3459, 2208, 1427, 592, 3348, 3480, 1720, 802, 3221, 3457,
	1372, 1713, 210, 2387, 210, 1714, 3257, 210, 3140, 2695,
	3099, 2306, 1793, 3450, 2272, 1559, 1019, 1014, 2193, 1735,
	510, 2188, 210, 1449, 1450, 1451, 2605, 3482, 2089, 210,
	2195, 210, 2949, 210, 1410, 3415, 3047, 1739, 2000, 210,
	3006, 2414, 210, 2202, 210, 2269, 210, 2187, 210, 210,
	2240, 210, 1160, 1160, 1160, 2191, 1160, 1493, 1514, 1515,
	210, 210, 2196, 210, 210, 1750, 2255, 750, 1151, 761,
	1373, 210, 3086, 1401, 1990, 2194, 1442, 1998, 2228, 1736,
	2211, 1730, 1618, 1618, 1174, 210, 2390, 210, 1321, 2239,
	210, 1715, 210, 3502, 210, 1562, 2339, 2340, 519, 2294,
	692, 1143, 2256, 1717, 2093, 2367, 2232, 2272, 1691, 2272,
	2308, 3167, 210, 210, 210, 2579, 210, 2249, 2251, 2252,
	2253, 2335, 2220, 2222, 1866, 2844, 3346, 1409, 2326, 1333,
	1830, 3496, 3226, 1716, 1025, 585, 3297, 2265, 1973, 210,
	1179, 829, 2350, 2273, 2366, 2368, 1477, 1143, 2282, 3225,
	520, 588, 2277, 1643, 2279, 3347, 3208, 2298, 1740, 1719,
	1174, 1174, 1566, 2365, 2902, 2375, 2270, 3103, 1443, 139,
	1323, 2369, 749, 2370, 3102, 2328, 2321, 2696, 3048, 2241,
	2376, 2389, 2377, 2332, 2341, 2333, 2392, 2334, 521, 2385,
	522, 2613, 593, 594, 802, 1569, 2609, 2317, 2386, 2317,
	2336, 2307, 998, 2352, 998, 2289, 2337, 2128, 1304, 2342,
	751, 1566, 2286, 3166, 1564, 1408, 3319, 1688, 1741, 1742,
	1813, 1802, 1801, 2415, 1775, 1174, 2786, 1737, 3356, 1567,
	1898, 1987, 2242, 1684, 1562, 2440, 2441, 2124, 210, 2966,
	1917, 1409, 2283, 1345, 1569, 2378, 1410, 2379, 3144, 2380,
	2450, 1565, 1720, 1267, 1985, 1738, 1006, 3245, 3244, 3209,
	1615, 2845, 2394, 2130, 750, 2620, 1971, 2846, 2548, 1974,
	2619, 2406, 2397, 2395, 1861, 2388, 2869, 3495, 1567, 1143,
	596, 595, 1711, 1686, 690, 2436, 2545, 1432, 1430, 1431,
	1423, 1424, 1425, 1426, 1428, 1429, 2544, 1358, 683, 1687,
	2167, 1566, 800, 2126, 749, 2166, 2165, 1238, 2125, 1252,
	1250, 3168, 752, 525, 2296, 2259, 808, 3101, 1970, 3302,
	3216, 3122, 2738, 2413, 1239, 1568, 802, 1059, 2528, 1408,
	597, 598, 2533, 2451, 1569, 1811, 2666, 2540, 2541, 1743,
	1918, 811, 3464, 3242, 2542, 3206, 210, 3359, 2561, 3303,
	753, 3053, 2859, 1564, 210, 2041, 3466, 3432, 2580, 1981,
	3314, 210, 801, 3320, 210, 210, 1059, 1982, 1567, 3186,
	1983, 2243, 2244, 1988, 1568, 1059, 3046, 3207, 2940, 2520,
	1386, 2770, 210, 2457, 2583, 2566, 2485, 2425, 2293, 1716,
	1565, 2556, 1368, 1366, 2521, 2267, 750, 210, 1618, 3217,
	1355, 2567, 2568, 2234, 1744, 1353, 2186, 751, 2338, 1597,
	2555, 1351, 3360, 1000, 3304, 210, 210, 210, 1594, 2547,
	2562, 210, 1387, 1315, 210, 804, 1349, 2597, 1000, 2570,
	2383, 210, 210, 210, 210, 210, 2382, 2575, 1347, 2574,
	2603, 1339, 1890, 1972, 2551, 1248, 2372, 210, 210, 210,
	2554, 2539, 997, 2523, 2524, 2525, 210, 1000, 3117, 2557,
	2040, 2560, 2534, 1900, 1568, 1874, 1676, 997, 210, 1160,
	1525, 210, 1318, 1228, 2089, 2089, 2549, 2584, 3410, 1059,
	3110, 2564, 3353, 688, 689, 3077, 1059, 762, 2610, 2964,
	2569, 210, 2595, 2919, 210, 210, 997, 681, 682, 2577,
	2917, 2901, 1251, 1249, 210, 2565, 524, 1160, 210, 752,
	1160, 1160, 1160, 1984, 2606, 2607, 2694, 210, 1143, 2581,
	2582, 2645, 1986, 210, 2680, 2679, 2593, 2594, 1385, 210,
	2621, 210, 2624, 2678, 2622, 2598, 2626, 2627, 210, 751,
	1367, 1365, 2646, 1603, 2604, 2312, 2301, 753, 1354, 2300,
	2093, 2093, 2280, 1352, 1643, 1643, 2563, 996, 1843, 1350,
	1174, 1160, 1160, 1718, 1842, 1840, 2711, 1838, 1835, 210,
	210, 2635, 1833, 210, 1348, 2089, 2089, 2089, 2653, 2641,
	1790, 996, 1831, 1822, 2648, 2684, 1346, 1889, 1718, 1338,
	2702, 2651, 2657, 1247, 2674, 210, 1772, 1059, 210, 210,
	1059, 210, 1770, 1143, 1761, 2240, 1748, 2663, 767, 769,
	2577, 2637, 2638, 1745, 1732, 2639, 1721, 210, 2798, 2698,
	2587, 1760, 978, 3261, 1412, 1604, 2656, 2649, 2365, 1760,
	2404, 2650, 3461, 3382, 2725, 3163, 3158, 2365, 3157, 799,
	1707, 752, 1203, 2207, 2658, 2659, 979, 3263, 2660, 916,
	2224, 2093, 2093, 2093, 2205, 2975, 2614, 2744, 2736, 2754,
	1059, 1615, 1615, 2740, 811, 2719, 2720, 2721, 139, 2722,
	2723, 1059, 2662, 210, 2755, 2710, 2708, 1143, 2701, 753,
	1729, 2207, 1870, 2724, 1872, 2717, 3309, 2773, 206, 2207,
	513, 514, 2223, 1143, 531, 513, 531, 541, 546, 3283,
	2221, 562, 2405, 1383, 1384, 3054, 2245, 1413, 2227, 206,
	1416, 1419, 1420, 1174, 1419, 1420, 2782, 2783, 526, 2264,
	2751, 1168, 2231, 2262, 1057, 2229, 3352, 680, 2756, 980,
	2263, 206, 2758, 2230, 2585, 3322, 2953, 1422, 2948, 2884,
	2320, 2111, 1679, 1610, 3477, 3494, 2491, 2492, 1419, 1420,
	3324, 2856, 1490, 2752, 2199, 2198, 1328, 2044, 2537, 2890,
	2793, 2199, 1327, 2778, 1421, 537, 210, 1421, 2591, 2789,
	2791, 2792, 2200, 2550, 2048, 2042, 2797, 2015, 998, 1370,
	3025, 210, 1369, 2889, 2795, 2785, 2272, 1059, 2810, 1488,
	2804, 2808, 2811, 1486, 2813, 2801, 3503, 3294, 3200, 2878,
	3198, 3131, 998, 2873, 2848, 1143, 2821, 210, 3071, 2809,
	2823, 2999, 2992, 2981, 2959, 2943, 2942, 2941, 2916, 2718,
	2692, 2690, 513, 513, 2374, 2654, 2373, 2330, 2305, 2281,
	206, 2002, 1888, 1887, 1886, 1825, 1824, 2849, 1823, 1618,
	1805, 1783, 1000, 1000, 1782, 2862, 2863, 1778, 1777, 1776,
	2860, 1774, 1773, 210, 1403, 1382, 139, 1381, 1276, 1143,
	1275, 1274, 1273, 2685, 2926, 1272, 2687, 2688, 2689, 1271,
	1643, 2857, 1270, 1269, 1268, 1618, 1266, 1261, 1260, 2880,
	1259, 997, 997, 1258, 1257, 2937, 1220, 1219, 210, 210,
	210, 1218, 1217, 1216, 1215, 1214, 1208, 1202, 2089, 2089,
	1200, 1199, 2897, 1024, 1023, 1059, 210, 953, 863, 1682,
	1160, 2886, 775, 625, 2930, 759, 3219, 2731, 2732, 1930,
	2814, 1376, 74, 2905, 210, 1210, 612, 68, 2915, 3364,
	747, 2977, 2956, 2628, 2894, 1930, 2824, 210, 210, 1160,
	1160, 1160, 1873, 210, 210, 210, 1343, 1875, 210, 210,
	2972, 2553, 210, 210, 2968, 2939, 2135, 2918, 210, 2920,
	2931, 2932, 3345, 3032, 2971, 2887, 2852, 2967, 2240, 2461,
	3289, 1059, 3180, 2039, 2093, 2093, 1507, 1615, 2089, 2089,
	2089, 2089, 2089, 2089, 2089, 2089, 2089, 2089, 2089, 2089,
	2089, 2089, 2089, 2089, 2089, 2089, 2089, 2957, 2089, 2958,
	2952, 3023, 1790, 70, 851, 936, 3128, 3127, 3078, 2973,
	2904, 2979, 1000, 2969, 2356, 2978, 210, 2355, 3125, 3123,
	818, 2988, 2984, 2326, 2989, 2990, 2983, 1062, 1692, 2998,
	2991, 857, 3019, 2997, 1705, 2182, 2994, 2072, 1614, 2995,
	860, 1616, 3010, 3007, 3002, 862, 861, 1617, 1509, 859,
	1613, 997, 2365, 2295, 2093, 2093, 2093, 2093, 2093, 2093,
	2093, 2093, 2093, 2093, 2093, 2093, 2093, 2093, 2093, 2093,
	2093, 2093, 2093, 2324, 2093, 1255, 736, 737, 210, 1696,
	1996, 2034, 2456, 1504, 831, 853, 2031, 1017, 1059, 1618,
	1059, 830, 2558, 2705, 2883, 3149, 1916, 2396, 2962, 1913,
	628, 2488, 2016, 1009, 2094, 2087, 2083, 3045, 996, 1390,
	210, 210, 210, 1479, 2325, 1049, 834, 1994, 2614, 1495,
	2430, 2572, 210, 996, 2712, 2177, 3379, 1924, 210, 1792,
	210, 977, 976, 210, 210, 210, 975, 3370, 1618, 1618,
	3367, 2672, 1685, 2192, 210, 210, 1160, 3096, 3058, 1059,
	1471, 1160, 996, 2681, 1618, 1618, 3063, 210, 3067, 1000,
	847, 3061, 2574, 1173, 3011, 1011, 2538, 1000, 2739, 3056,
	3057, 1225, 210, 3059, 680, 1059, 3308, 1470, 1160, 3076,
	1000, 771, 3299, 1036, 1035, 1618, 3062, 2865, 2866, 1034,
	2612, 3500, 3095, 2912, 3120, 1022, 177, 174, 997, 176,
	175, 2928, 562, 2665, 90, 35, 997, 210, 17, 3074,
	3075, 115, 114, 1143, 3066, 3148, 1059, 3097, 206, 997,
	206, 206, 3146, 1165, 113, 206, 112, 3105, 3107, 3108,
	3159, 3134, 3106, 206, 1181, 3145, 3133, 3114, 111, 110,
	109, 108, 1059, 3147, 107, 106, 105, 104, 103, 102,
	101, 100, 1143, 99, 3153, 3115, 3124, 1790, 1205, 98,
	97, 1143, 96, 95, 94, 93, 92, 91, 2427, 2428,
	558, 555, 1227, 50, 49, 3169, 206, 206, 3192, 1165,
	1059, 3064, 89, 88, 16, 829, 33, 14, 210, 54,
	210, 206, 1059, 210, 3172, 2985, 2986, 2987, 829, 1263,
	55, 210, 3162, 3177, 13, 29, 30, 80, 79, 28,
	3188, 1643, 15, 206, 206, 206, 206, 1165, 27, 25,
	11, 8, 3203, 210, 7, 562, 10, 206, 206, 998,
	3130, 3193, 3194, 1571, 3196, 3135, 12, 1618, 144, 143,
	1057, 73, 3119, 210, 998, 142, 72, 1643, 141, 140,
	71, 210, 3237, 23, 3249, 3201, 1160, 2537, 3152, 9,
	136, 210, 3222, 3250, 2954, 1143, 3178, 67, 3142, 2514,
	2515, 2516, 1143, 998, 138, 3254, 137, 64, 3256, 3197,
	135, 210, 210, 134, 3235, 65, 133, 3253, 132, 3243,
	66, 131, 3202, 206, 21, 5, 53, 3270, 3271, 3248,
	3259, 210, 6, 3265, 3178, 3164, 2745, 210, 83, 206,
	84, 3260, 31, 3258, 62, 2971, 1933, 210, 1615, 3264,
	61, 60, 20, 52, 546, 19, 168, 167, 166, 165,
	160, 3305, 159, 164, 1618, 162, 161, 3296, 3229, 3230,
	163, 158, 2674, 130, 3292, 170, 3266, 169, 3287, 3295,
	156, 152, 151, 155, 1615, 3280, 3262, 3282, 157, 154,
	153, 3316, 150, 171, 129, 57, 128, 127, 210, 1160,
	126, 125, 124, 56, 210, 18, 2, 1, 1160, 1160,
	0, 0, 0, 1143, 1160, 3338, 1143, 210, 0, 210,
	0, 0, 0, 0, 1174, 0, 3323, 0, 0, 3326,
	0, 3253, 3116, 3330, 3055, 0, 0, 3349, 0, 3335,
	0, 210, 3060, 3329, 0, 0, 3342, 210, 210, 0,
	1059, 3336, 3337, 0, 0, 3361, 0, 3341, 210, 210,
	0, 2089, 3369, 3372, 3383, 0, 3373, 996, 996, 3377,
	0, 3385, 0, 3387, 0, 0, 1143, 0, 3228, 0,
	3366, 3394, 3374, 0, 0, 3395, 0, 1143, 0, 0,
	0, 1643, 210, 0, 0, 0, 0, 0, 3389, 3391,
	0, 0, 0, 0, 2089, 3421, 3334, 0, 0, 0,
	0, 0, 3343, 0, 3344, 3409, 3408, 3406, 3407, 0,
	0, 0, 0, 0, 0, 0, 0, 3423, 3439, 0,
	3441, 210, 0, 3437, 0, 0, 0, 2093, 3447, 0,
	1643, 1643, 3362, 0, 3446, 0, 3438, 513, 0, 3449,
	3443, 210, 0, 3440, 0, 3442, 1643, 1643, 3381, 0,
	0, 0, 0, 0, 0, 0, 0, 3456, 206, 0,
	206, 3455, 3458, 206, 1933, 210, 0, 210, 3369, 3462,
	2093, 3372, 3465, 1181, 3463, 1165, 206, 1643, 3470, 3471,
	0, 3473, 3475, 3469, 206, 1181, 531, 3476, 1615, 206,
	1181, 2089, 0, 1143, 0, 562, 0, 3484, 0, 3483,
	0, 0, 3444, 3445, 0, 3491, 3448, 0, 3490, 0,
	3492, 1561, 2766, 2767, 3493, 0, 0, 0, 3497, 0,
	2326, 0, 0, 3504, 3384, 3505, 0, 996, 0, 3498,
	3499, 0, 1618, 0, 0, 1419, 1420, 1615, 1615, 0,
	3512, 3513, 0, 0, 3508, 3509, 3510, 0, 0, 0,
	0, 0, 0, 1615, 1615, 0, 3517, 0, 3515, 0,
	3468, 1422, 0, 0, 0, 0, 3381, 2093, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 998, 998,
	0, 0, 0, 0, 1615, 0, 0, 1618, 1421, 0,
	3091, 0, 2825, 2826, 2827, 2828, 2829, 2830, 2831, 2832,
	2833, 2834, 2835, 2836, 2837, 2838, 2839, 2840, 2841, 2842,
	2843, 1143, 2847, 0, 0, 0, 0, 3088, 0, 0,
	3081, 0, 0, 0, 0, 0, 0, 0, 0, 1643,
	0, 0, 0, 3079, 0, 0, 0, 0, 0, 3083,
	0, 0, 0, 0, 0, 0, 206, 0, 2491, 2492,
	0, 2509, 2510, 2511, 0, 0, 0, 0, 3089, 0,
	0, 817, 0, 0, 0, 0, 0, 3016, 0, 1427,
	1618, 0, 0, 0, 996, 0, 0, 1143, 0, 0,
	0, 0, 996, 0, 0, 0, 0, 0, 0, 3082,
	0, 206, 206, 0, 0, 996, 0, 0, 206, 0,
	1449, 1450, 1451, 0, 0, 0, 0, 0, 1810, 2506,
	0, 0, 0, 0, 0, 0, 0, 206, 0, 206,
	0, 206, 0, 1419, 1420, 513, 1643, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1615, 1826, 0, 2491,
	2492, 0, 2509, 2510, 2511, 1419, 1420, 0, 998, 1422,
	0, 0, 0, 1442, 0, 0, 0, 0, 3015, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1422, 0, 0, 0, 0, 1421, 0, 562, 0,
	0, 0, 2497, 0, 1441, 0, 0, 0, 206, 0,
	1165, 206, 0, 0, 1143, 0, 1143, 0, 1421, 0,
	2506, 3084, 0, 562, 3085, 0, 0, 0, 206, 0,
	0, 0, 0, 0, 0, 206, 206, 0, 206, 0,
	206, 0, 206, 0, 206, 0, 0, 0, 0, 0,
	2769, 0, 1895, 1615, 2512, 1896, 0, 1897, 0, 0,
	0, 3087, 0, 0, 0, 1443, 206, 1444, 1445, 1446,
	1447, 0, 0, 3090, 0, 1143, 0, 1427, 0, 0,
	0, 0, 0, 0, 0, 546, 2507, 0, 0, 0,
	0, 562, 0, 2497, 0, 0, 0, 0, 0, 1427,
	0, 1143, 0, 0, 0, 0, 0, 0, 1449, 1450,
	1451, 0, 0, 0, 0, 998, 0, 0, 0, 0,
	0, 0, 0, 998, 0, 0, 0, 0, 0, 0,
	1449, 1450, 1451, 0, 0, 0, 998, 0, 0, 0,
	0, 0, 1143, 1419, 1420, 2512, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1442, 0, 0, 0, 0, 0, 0, 1143, 1422,
	0, 0, 0, 0, 0, 3086, 0, 2507, 2508, 0,
	0, 0, 0, 1442, 0, 1430, 1431, 1423, 1424, 1425,
	1426, 1428, 1429, 0, 0, 0, 1421, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1143, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1143, 0,
	0, 0, 0, 0, 1643, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1448, 0, 0, 0, 513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	829, 0, 0, 1443, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2508,
	0, 513, 0, 0, 0, 1443, 0, 1427, 206, 1643,
	513, 0, 0, 206, 0, 0, 0, 0, 0, 817,
	2503, 2504, 2505, 817, 0, 0, 0, 2502, 2500, 2501,
	2493, 2494, 2495, 2496, 2498, 2499, 1419, 1420, 1449, 1450,
	1451, 0, 1462, 1463, 1464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1183, 0, 1187, 0, 1193,
	0, 1615, 1422, 0, 0, 0, 1468, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1421,
	0, 1442, 1643, 0, 0, 3185, 531, 1441, 0, 0,
	0, 0, 1432, 1430, 1431, 1423, 1424, 1425, 1426, 1428,
	1429, 2503, 2504, 2505, 0, 0, 1615, 0, 2502, 2500,
	2501, 2493, 2494, 2495, 2496, 2498, 2499, 1423, 1424, 1425,
	1426, 1428, 1429, 2215, 0, 0, 0, 0, 3211, 0,
	0, 206, 0, 1313, 0, 0, 0, 0, 0, 0,
	1316, 0, 206, 0, 0, 0, 0, 0, 0, 0,
	1444, 1445, 1446, 1447, 0, 206, 0, 0, 0, 0,
	1427, 0, 0, 0, 0, 0, 1143, 0, 0, 0,
	829, 206, 0, 1443, 0, 206, 2274, 0, 0, 0,
	0, 0, 0, 0, 1459, 0, 0, 1469, 992, 1615,
	0, 1449, 1450, 1451, 0, 0, 0, 0, 0, 0,
	0, 206, 0, 1181, 0, 0, 206, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1810, 0, 0, 0, 3286, 0, 201, 2215, 0,
	513, 0, 2329, 0, 0, 0, 1457, 0, 206, 0,
	0, 206, 0, 206, 1442, 206, 0, 206, 206, 0,
	1165, 0, 0, 0, 0, 0, 0, 0, 0, 2348,
	680, 0, 2215, 2215, 0, 0, 0, 0, 0, 0,
	206, 0, 1472, 1473, 1474, 1475, 1476, 0, 0, 0,
	0, 0, 0, 0, 1181, 0, 1181, 0, 0, 1165,
	0, 1165, 0, 1165, 1431, 1423, 1424, 1425, 1426, 1428,
	1429, 0, 1492, 0, 0, 0, 0, 0, 1505, 0,
	0, 206, 206, 206, 0, 206, 1419, 1420, 1448, 1452,
	1453, 1454, 1462, 1463, 1464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1455, 1443, 0, 206, 0,
	0, 0, 1422, 0, 0, 0, 1468, 0, 0, 0,
	0, 0, 2491, 2492, 0, 2509, 2510, 2511, 0, 0,
	0, 1460, 0, 0, 0, 0, 0, 0, 0, 1421,
	0, 2775, 0, 0, 0, 0, 0, 1441, 0, 0,
	0, 0, 0, 0, 1438, 0, 0, 0, 2491, 2492,
	0, 2509, 2510, 2511, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2774, 0, 0,
	0, 0, 0, 2506, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1555, 1555, 1555,
	0, 0, 0, 0, 0, 0, 0, 1181, 0, 0,
	1444, 1445, 1446, 1447, 0, 1458, 0, 0, 0, 2506,
	1427, 0, 0, 1461, 0, 1432, 1430, 1431, 1423, 1424,
	1425, 1426, 1428, 1429, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1459, 0, 0, 1469, 0, 0,
	0, 1449, 1450, 1451, 0, 0, 2497, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 817, 0, 0, 0,
	0, 0, 1465, 0, 1466, 0, 0, 0, 0, 0,
	0, 1436, 1437, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2497, 0, 0, 206, 1457, 0, 0, 0,
	0, 0, 0, 0, 1442, 0, 0, 0, 2512, 0,
	206, 0, 0, 0, 0, 513, 0, 0, 0, 0,
	0, 0, 1467, 513, 0, 0, 0, 0, 0, 0,
	513, 0, 0, 513, 513, 0, 0, 1456, 0, 206,
	2507, 0, 0, 0, 2512, 0, 0, 0, 0, 0,
	0, 1181, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1181, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2507, 0, 1448, 0,
	0, 0, 0, 0, 2215, 2215, 206, 0, 0, 0,
	2215, 0, 0, 2616, 0, 0, 1443, 0, 0, 0,
	2215, 2616, 2215, 2616, 2616, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 206, 206, 206, 0,
	0, 1460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2508, 0, 0, 0, 0, 206, 0, 0,
	1165, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2668, 0, 0, 2670, 2215, 0, 0, 0, 2508, 0,
	0, 0, 0, 206, 0, 0, 0, 206, 0, 0,
	0, 0, 0, 0, 0, 0, 206, 0, 0, 0,
	0, 0, 1165, 0, 0, 0, 0, 0, 2215, 0,
	513, 0, 0, 0, 0, 1458, 0, 2215, 1433, 1434,
	1440, 1439, 1435, 1461, 0, 1432, 1430, 1431, 1423, 1424,
	1425, 1426, 1428, 1429, 0, 0, 0, 1054, 3041, 0,
	0, 3040, 0, 0, 1172, 0, 0, 0, 206, 1810,
	0, 0, 1810, 0, 2503, 2504, 2505, 0, 0, 0,
	0, 2502, 2500, 2501, 2493, 2494, 2495, 2496, 2498, 2499,
	0, 0, 0, 0, 2750, 0, 0, 1165, 206, 0,
	206, 0, 0, 1419, 1420, 0, 0, 0, 0, 0,
	2503, 2504, 2505, 0, 0, 0, 206, 2502, 2500, 2501,
	2493, 2494, 2495, 2496, 2498, 2499, 0, 0, 0, 1422,
	1256, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1280, 1280, 1280, 1172, 1421, 0, 0, 0,
	1914, 0, 1919, 0, 1441, 0, 1311, 1312, 1926, 0,
	0, 0, 2806, 0, 0, 1935, 1936, 1937, 1938, 1939,
	1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949,
	1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959,
	1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969,
	2764, 1975, 0, 1977, 1978, 1979, 1980, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1444, 1445, 1446,
	1447, 0, 1375, 2004, 0, 0, 0, 1427, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1492, 0,
	0, 0, 2029, 0, 206, 206, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 513, 1419, 1420, 1449, 1450,
	1451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	513, 0, 0, 2062, 2063, 2064, 2065, 2066, 2067, 2068,
	0, 0, 1422, 0, 2085, 0, 2096, 2098, 2103, 0,
	0, 0, 0, 0, 0, 0, 1181, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1421,
	0, 1442, 0, 0, 0, 0, 0, 1441, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2763, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2950, 206, 206,
	1444, 1445, 1446, 1447, 0, 1448, 0, 0, 0, 0,
	1427, 0, 0, 0, 0, 206, 0, 0, 0, 0,
	0, 0, 0, 1443, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2215, 206, 0, 0, 0, 0, 0,
	0, 1449, 1450, 1451, 0, 0, 2348, 2348, 0, 0,
	0, 0, 680, 680, 2215, 0, 0, 1810, 1810, 0,
	0, 680, 2215, 0, 0, 0, 0, 206, 0, 1419,
	1420, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1592, 0, 1442, 1422, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1601, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1421, 0, 0, 3033, 0, 0, 0, 0,
	1441, 2276, 0, 2278, 0, 0, 0, 0, 0, 0,
	0, 0, 1432, 1430, 1431, 1423, 1424, 1425, 1426, 1428,
	1429, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1448, 0,
	0, 0, 0, 0, 0, 0, 2416, 0, 0, 0,
	0, 206, 0, 0, 0, 0, 1443, 1181, 0, 206,
	0, 0, 0, 1444, 1445, 1446, 1447, 0, 0, 0,
	0, 0, 206, 1427, 0, 0, 0, 0, 0, 0,
	917, 0, 0, 0, 0, 0, 0, 0, 0, 2215,
	2215, 2215, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1181, 0, 0, 1449, 1450, 1451, 2215, 0, 2616,
	0, 0, 1181, 1181, 206, 0, 0, 0, 0, 207,
	0, 0, 0, 206, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2215, 0, 0, 0,
	207, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3139, 0, 123, 0, 0, 0, 1442, 0, 58,
	0, 0, 207, 0, 0, 0, 0, 0, 0, 0,
	0, 59, 118, 0, 0, 1432, 1430, 1431, 1423, 1424,
	1425, 1426, 1428, 1429, 0, 63, 1181, 0, 0, 0,
	1785, 0, 0, 0, 0, 0, 0, 1797, 0, 0,
	39, 120, 2410, 2411, 0, 0, 0, 0, 2417, 0,
	0, 0, 0, 38, 0, 69, 1256, 0, 1816, 0,
	1816, 0, 0, 0, 0, 0, 0, 2431, 2432, 0,
	0, 1448, 0, 2029, 0, 41, 0, 0, 0, 0,
	42, 0, 2439, 0, 0, 75, 0, 0, 121, 1443,
	0, 0, 0, 40, 85, 0, 0, 0, 0, 76,
	43, 0, 0, 0, 0, 1419, 1420, 2215, 2459, 2616,
	0, 0, 3205, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 0, 2474, 0, 0, 44, 1797, 0, 0,
	1858, 1422, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 77, 0, 0, 0, 1871, 0, 0,
	0, 0, 0, 0, 0, 1878, 0, 1880, 1421, 1882,
	0, 1884, 2215, 1885, 0, 0, 1441, 0, 0, 0,
	206, 2103, 2103, 2103, 0, 0, 0, 0, 0, 0,
	1181, 0, 0, 0, 0, 1899, 1555, 0, 0, 0,
	0, 0, 0, 0, 2543, 0, 0, 0, 0, 0,
	206, 206, 0, 0, 0, 0, 0, 0, 1432, 1430,
	1431, 1423, 1424, 1425, 1426, 1428, 1429, 0, 0, 0,
	2806, 0, 0, 0, 0, 0, 513, 0, 0, 1444,
	1445, 1446, 1447, 0, 0, 0, 3205, 0, 0, 1427,
	0, 0, 0, 0, 0, 0, 0, 0, 78, 0,
	0, 0, 0, 0, 0, 0, 45, 0, 0, 0,
	817, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1449, 1450, 1451, 817, 0, 0, 0, 0, 0, 48,
	145, 81, 0, 82, 0, 46, 0, 206, 0, 122,
	0, 0, 0, 2616, 0, 47, 0, 0, 2631, 0,
	0, 0, 178, 0, 0, 0, 1181, 0, 1181, 0,
	0, 0, 0, 0, 51, 0, 0, 116, 0, 0,
	0, 0, 0, 1442, 0, 0, 119, 0, 0, 0,
	3357, 0, 0, 0, 0, 0, 1181, 206, 0, 0,
	180, 0, 0, 0, 0, 0, 0, 206, 2215, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 149, 0, 0,
	0, 2806, 0, 0, 0, 179, 0, 2703, 0, 0,
	0, 0, 0, 0, 0, 172, 0, 1448, 0, 0,
	0, 0, 2158, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1443, 0, 0, 0, 0,
	2215, 0, 0, 0, 148, 0, 0, 3, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3205, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1181, 0, 2215, 0, 0, 0,
	2757, 0, 0, 0, 1926, 0, 0, 0, 0, 0,
	2761, 2762, 0, 0, 2765, 0, 0, 0, 2768, 207,
	1064, 207, 207, 1064, 0, 1064, 207, 2772, 0, 0,
	0, 0, 0, 0, 207, 0, 2779, 0, 0, 2543,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2799, 0, 0, 0, 1432, 1430, 1431, 1423, 1424, 1425,
	1426, 1428, 1429, 0, 0, 1064, 1064, 207, 207, 2815,
	2816, 0, 2817, 2818, 2819, 0, 0, 2820, 0, 0,
	0, 2822, 207, 0, 0, 0, 0, 0, 0, 0,
	1172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 207, 207, 207, 207, 0, 1064,
	1064, 0, 2850, 2851, 1064, 0, 0, 1064, 207, 207,
	2292, 0, 0, 0, 0, 1797, 0, 1419, 1420, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2868, 0, 0, 0, 0, 0, 0, 2491, 2492, 0,
	2509, 2510, 2511, 1422, 0, 0, 0, 2331, 0, 0,
	1280, 0, 1280, 0, 1280, 1064, 1172, 1172, 2491, 2492,
	0, 2509, 2510, 2511, 0, 0, 0, 0, 0, 0,
	1421, 0, 0, 0, 207, 0, 0, 0, 1441, 2371,
	0, 0, 0, 0, 2898, 0, 0, 0, 0, 0,
	207, 0, 0, 0, 0, 0, 0, 211, 2506, 2906,
	2909, 0, 0, 0, 0, 0, 0, 1419, 1420, 0,
	1452, 1453, 1454, 1462, 1463, 1464, 0, 0, 0, 2506,
	2391, 1172, 2393, 2927, 2409, 0, 1455, 0, 0, 0,
	0, 0, 0, 1422, 0, 0, 0, 1468, 0, 0,
	0, 1444, 1445, 1446, 1447, 0, 0, 2407, 0, 0,
	0, 1427, 0, 0, 0, 0, 0, 579, 0, 0,
	1421, 0, 0, 0, 0, 0, 0, 0, 1441, 0,
	0, 2497, 0, 0, 0, 1438, 0, 0, 0, 579,
	0, 0, 1449, 1450, 1451, 0, 0, 0, 1555, 0,
	0, 0, 2497, 0, 0, 0, 0, 2980, 2513, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2512, 0, 0, 0, 0, 0, 0,
	0, 1444, 1445, 1446, 1447, 1442, 0, 0, 0, 0,
	0, 1427, 0, 0, 2512, 3012, 3013, 0, 0, 0,
	0, 3017, 3018, 0, 0, 2507, 3021, 3022, 0, 0,
	0, 0, 0, 3026, 0, 1459, 0, 0, 1469, 0,
	0, 0, 1449, 1450, 1451, 0, 2507, 0, 0, 0,
	0, 0, 3030, 0, 0, 0, 0, 0, 0, 3034,
	0, 0, 0, 1465, 0, 1466, 0, 0, 0, 0,
	0, 0, 1436, 1437, 0, 0, 0, 0, 0, 1448,
	0, 0, 0, 0, 0, 0, 0, 1457, 0, 0,
	0, 0, 883, 0, 207, 1442, 0, 1443, 0, 0,
	0, 0, 0, 0, 0, 1064, 0, 207, 207, 0,
	0, 0, 0, 1467, 1064, 207, 0, 2508, 0, 0,
	207, 0, 0, 0, 0, 0, 0, 0, 1456, 0,
	0, 205, 0, 0, 0, 0, 0, 0, 2508, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1064, 586, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2909, 0, 0, 0, 0, 0, 0, 1448,
	0, 0, 0, 0, 586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1443, 0, 0,
	0, 0, 0, 0, 0, 2608, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1460, 0, 0, 0, 1432, 1430, 1431, 1423,
	1424, 1425, 1426, 1428, 1429, 2644, 1172, 2292, 0, 2503,
	2504, 2505, 0, 0, 0, 0, 2502, 2500, 2501, 2493,
	2494, 2495, 2496, 2498, 2499, 2909, 0, 0, 0, 0,
	2503, 2504, 2505, 0, 0, 0, 0, 2502, 2500, 2501,
	2493, 2494, 2495, 2496, 2498, 2499, 3173, 3174, 3175, 0,
	0, 0, 0, 999, 0, 0, 1064, 207, 0, 0,
	0, 0, 2682, 1064, 0, 0, 2686, 0, 0, 0,
	0, 3183, 3184, 0, 0, 2693, 1458, 0, 0, 1433,
	1434, 1440, 1439, 1435, 1461, 3191, 1432, 1430, 1431, 1423,
	1424, 1425, 1426, 1428, 1429, 0, 0, 0, 0, 3358,
	0, 0, 207, 207, 0, 0, 0, 0, 0, 207,
	0, 0, 0, 0, 0, 0, 0, 0, 852, 87,
	0, 0, 0, 0, 0, 0, 2909, 2735, 207, 0,
	207, 0, 207, 0, 3227, 0, 0, 0, 0, 0,
	0, 0, 3233, 0, 0, 817, 0, 0, 0, 3238,
	0, 0, 0, 0, 0, 0, 0, 2753, 0, 1172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2909, 0, 0, 2909, 0, 2759, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1064, 0,
	1064, 0, 2909, 2909, 0, 87, 1064, 0, 0, 207,
	0, 0, 207, 0, 0, 0, 0, 0, 0, 0,
	0, 1064, 1064, 0, 0, 0, 0, 1060, 0, 207,
	1161, 0, 1060, 0, 0, 0, 207, 207, 0, 207,
	0, 207, 719, 207, 749, 207, 0, 0, 0, 0,
	0, 0, 3298, 0, 0, 3301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 726, 207, 792, 0,
	0, 0, 0, 0, 0, 0, 0, 812, 755, 724,
	0, 0, 1161, 1161, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 725, 0, 0, 602, 0, 727, 0, 987,
	0, 756, 1064, 0, 0, 0, 0, 733, 734, 0,
	0, 0, 0, 743, 0, 0, 1161, 1161, 603, 0,
	0, 1161, 0, 0, 1161, 0, 750, 728, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	887, 0, 0, 0, 0, 817, 0, 0, 0, 604,
	623, 0, 0, 748, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 0, 1161, 606, 0, 0, 0, 0, 3405, 3405,
	3405, 0, 0, 0, 0, 729, 0, 1064, 0, 629,
	0, 0, 0, 723, 0, 607, 0, 3424, 0, 0,
	0, 0, 0, 0, 627, 0, 0, 0, 0, 730,
	731, 0, 0, 0, 0, 0, 0, 0, 2909, 0,
	2909, 0, 608, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3405, 0, 0, 0, 0, 732,
	0, 205, 609, 205, 205, 610, 633, 2951, 205, 0,
	636, 0, 0, 0, 754, 0, 586, 0, 0, 0,
	0, 1064, 0, 0, 2963, 0, 0, 0, 0, 751,
	0, 0, 0, 0, 207, 0, 0, 1064, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 3405,
	0, 0, 0, 0, 205, 0, 3001, 632, 0, 0,
	0, 0, 0, 0, 613, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 205, 205, 205,
	0, 0, 0, 0, 0, 0, 745, 0, 0, 0,
	205, 205, 0, 0, 0, 611, 739, 0, 0, 0,
	0, 0, 740, 0, 614, 0, 0, 0, 0, 721,
	0, 752, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 615, 0, 0, 0, 722, 0, 0, 0, 1064,
	0, 0, 0, 0, 0, 741, 0, 0, 0, 738,
	0, 0, 207, 757, 758, 0, 0, 0, 635, 753,
	0, 0, 0, 207, 0, 0, 205, 742, 616, 0,
	0, 0, 0, 0, 0, 0, 207, 0, 0, 1064,
	0, 617, 205, 0, 0, 0, 0, 744, 0, 0,
	0, 0, 207, 1064, 0, 0, 207, 0, 622, 0,
	0, 0, 1060, 0, 0, 0, 0, 0, 0, 746,
	618, 1161, 579, 631, 0, 630, 0, 579, 0, 0,
	619, 0, 207, 0, 0, 0, 0, 207, 0, 0,
	0, 0, 620, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 637, 3109, 634, 0, 0, 0, 1060, 624,
	0, 0, 2292, 0, 0, 0, 0, 0, 0, 207,
	0, 0, 207, 87, 207, 87, 207, 87, 207, 207,
	0, 0, 1064, 1064, 1064, 0, 1064, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 207, 207, 0, 207, 0, 0, 0,
	0, 0, 812, 87, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 87, 207,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1161, 0, 0, 0, 0, 0, 0,
	1060, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3212,
	0, 1585, 0, 999, 0, 0, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	1585, 0, 0, 0, 0, 0, 0, 586, 0, 0,
	0, 0, 586, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3255,
	1061, 0, 0, 1162, 0, 1061, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 792, 0, 0, 0, 0, 0, 3279,
	1172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1482, 0, 0, 0, 1161, 0, 1161, 0, 0,
	0, 0, 0, 1161, 0, 1162, 1162, 0, 0, 1491,
	0, 0, 0, 1497, 0, 0, 0, 0, 1161, 1161,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 579, 0, 0, 0, 1064, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1162,
	1162, 0, 0, 0, 1162, 0, 0, 1162, 0, 662,
	0, 0, 0, 0, 0, 0, 3328, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1064, 0, 0, 0,
	0, 0, 644, 0, 0, 1064, 0, 0, 0, 586,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1162, 0, 0, 0, 1060,
	0, 0, 0, 645, 0, 0, 3363, 0, 0, 0,
	0, 0, 646, 0, 0, 0, 3378, 207, 0, 0,
	0, 0, 0, 0, 205, 205, 0, 647, 0, 0,
	0, 205, 0, 0, 87, 0, 0, 1583, 0, 1586,
	0, 0, 0, 667, 0, 0, 0, 207, 207, 207,
	205, 0, 205, 0, 205, 0, 207, 0, 648, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 1064,
	0, 0, 0, 0, 0, 0, 649, 0, 0, 1064,
	0, 0, 0, 0, 1060, 0, 1064, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 650, 0, 0, 651,
	0, 0, 0, 0, 207, 0, 0, 1064, 207, 0,
	1064, 1064, 1064, 0, 0, 0, 0, 207, 0, 0,
	0, 205, 0, 0, 205, 0, 666, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 0, 0, 0, 0, 0, 0, 586, 205,
	0, 205, 0, 205, 0, 205, 0, 205, 1060, 0,
	0, 1064, 1064, 0, 0, 0, 0, 0, 0, 207,
	0, 0, 0, 0, 1060, 0, 0, 0, 0, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1064, 0, 207,
	1064, 207, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 653, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 670, 654, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1064, 0, 669, 0, 0, 0, 0, 0, 0, 655,
	0, 1064, 656, 0, 0, 1061, 0, 0, 664, 0,
	0, 0, 0, 0, 1162, 657, 1060, 0, 0, 0,
	1419, 1420, 0, 1452, 1453, 1454, 1462, 1463, 1464, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1455,
	0, 0, 0, 0, 658, 665, 1422, 0, 0, 0,
	1468, 1061, 0, 0, 659, 0, 1161, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 661, 0, 0, 0,
	1060, 660, 0, 1421, 0, 0, 0, 0, 0, 0,
	0, 1441, 0, 668, 0, 0, 812, 0, 1438, 0,
	0, 0, 0, 0, 663, 0, 0, 999, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1064, 0, 0,
	0, 999, 0, 0, 0, 0, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1444, 1445, 1446, 1447, 0, 1161,
	1161, 1161, 0, 1161, 1427, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1162, 0, 1459, 0,
	0, 1469, 0, 1061, 0, 1449, 1450, 1451, 0, 0,
	792, 0, 0, 792, 792, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1465, 0, 1466, 0,
	0, 0, 0, 0, 0, 1436, 1437, 0, 0, 207,
	207, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1457, 0, 0, 0, 0, 1064, 207, 0, 1442, 0,
	1064, 0, 0, 0, 0, 0, 0, 0, 1993, 0,
	0, 0, 0, 0, 205, 0, 1467, 0, 0, 0,
	0, 0, 812, 0, 0, 205, 0, 0, 0, 1064,
	1064, 1064, 0, 0, 0, 1491, 0, 0, 205, 1491,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 0,
	0, 0, 0, 0, 205, 0, 0, 0, 586, 0,
	0, 1064, 0, 0, 0, 0, 0, 0, 1162, 0,
	1162, 0, 1448, 0, 0, 0, 1162, 0, 0, 0,
	0, 0, 0, 0, 205, 0, 0, 0, 0, 205,
	1443, 1162, 1162, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 987, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1460, 0, 0, 0, 0,
	0, 205, 0, 0, 205, 0, 205, 1586, 205, 0,
	205, 205, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 205, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1064, 0,
	1064, 0, 1061, 0, 1060, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 205, 205, 0, 205, 1458,
	0, 0, 1433, 1434, 1440, 1439, 1435, 1461, 0, 1432,
	1430, 1431, 1423, 1424, 1425, 1426, 1428, 1429, 0, 0,
	0, 205, 0, 1060, 0, 207, 0, 0, 0, 0,
	0, 0, 1060, 0, 207, 207, 1064, 0, 0, 1064,
	0, 1064, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 1064, 0, 1061, 1064, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1419, 1420,
	0, 1452, 1453, 1454, 1462, 1463, 1464, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1422, 0, 1064, 0, 1468, 87,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1161, 0, 0, 0,
	0, 1421, 1064, 0, 0, 0, 1060, 0, 0, 1441,
	0, 1061, 0, 1060, 0, 0, 1438, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 87, 1061, 0, 0,
	0, 0, 0, 0, 1161, 0, 0, 1161, 1161, 1161,
	1064, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1064, 87, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1444, 1445, 1446, 1447, 0, 0, 999, 0,
	0, 0, 1427, 0, 0, 0, 0, 0, 1161, 1161,
	0, 0, 0, 999, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1459, 0, 0, 1469,
	0, 207, 0, 1449, 1450, 1451, 1064, 0, 0, 0,
	0, 0, 1585, 0, 1060, 0, 0, 1060, 0, 0,
	0, 0, 0, 0, 1465, 0, 1466, 0, 0, 1061,
	0, 207, 207, 1436, 1437, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1457, 0,
	0, 0, 0, 0, 0, 0, 1442, 0, 0, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1162,
	0, 0, 0, 1993, 1467, 0, 0, 1060, 0, 0,
	0, 0, 0, 1061, 0, 0, 0, 0, 1060, 205,
	205, 205, 0, 0, 1491, 0, 0, 0, 1585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 0, 0, 0, 0, 0, 0, 0, 207, 1064,
	0, 0, 0, 0, 0, 0, 0, 0, 1064, 1064,
	1448, 0, 0, 0, 1064, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 0, 1443, 0,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	0, 0, 1162, 1162, 1162, 0, 1162, 0, 207, 0,
	1064, 0, 0, 1460, 0, 0, 0, 0, 207, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1060, 0, 0, 0, 0, 0,
	0, 205, 0, 0, 987, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 987,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 0, 205, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1458, 0, 205,
	1433, 1434, 1440, 1439, 1435, 1461, 0, 1432, 1430, 1431,
	1423, 1424, 1425, 1426, 1428, 1429, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1060, 0, 0, 0, 0, 1161, 87, 87,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1161, 1161, 1161, 0,
	0, 87, 87, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1060, 0,
	0, 0, 0, 0, 0, 0, 0, 999, 999, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 812, 0, 1419,
	1420, 0, 1452, 1453, 1454, 1462, 1463, 1464, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1061, 1455, 0,
	0, 0, 87, 0, 0, 1422, 0, 0, 0, 1468,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1421, 0, 0, 0, 1061, 0, 0, 0,
	1441, 0, 0, 0, 0, 1061, 0, 1438, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1060, 0, 1060, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1444, 1445, 1446, 1447, 0, 205, 0,
	0, 0, 0, 1427, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1161, 0, 0, 1060, 999, 1161, 0,
	0, 0, 0, 0, 0, 0, 0, 1459, 0, 1162,
	1469, 0, 0, 0, 1449, 1450, 1451, 0, 0, 1061,
	0, 0, 1060, 0, 0, 1161, 1061, 0, 0, 0,
	205, 0, 0, 0, 0, 1465, 0, 1466, 0, 0,
	0, 0, 0, 0, 1436, 1437, 0, 1162, 0, 0,
	1162, 1162, 1162, 0, 0, 0, 0, 0, 0, 1457,
	87, 0, 0, 1060, 0, 0, 0, 1442, 0, 0,
	0, 0, 0, 987, 987, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1467, 0, 0, 0, 1060,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1456, 1162, 1162, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1060, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1061, 0, 1060,
	1061, 1448, 0, 0, 999, 0, 0, 0, 0, 0,
	0, 0, 999, 0, 0, 0, 0, 0, 0, 1443,
	0, 0, 0, 0, 0, 1585, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1061, 0, 0, 1161, 0, 0, 0, 205, 0, 0,
	0, 1061, 0, 0, 0, 0, 205, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1419, 1420, 0, 1452, 1453, 1454,
	1462, 1463, 1464, 987, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1455, 0, 0, 0, 0, 0, 0,
	1422, 0, 0, 0, 1468, 0, 0, 0, 1458, 0,
	0, 1433, 1434, 1440, 1439, 1435, 1461, 0, 1432, 1430,
	1431, 1423, 1424, 1425, 1426, 1428, 1429, 1421, 0, 0,
	0, 2479, 0, 0, 2480, 1441, 0, 0, 0, 0,
	0, 0, 1438, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1161, 0, 0, 0,
	0, 0, 0, 0, 0, 1161, 1161, 1061, 0, 0,
	0, 1161, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1444, 1445,
	1446, 1447, 0, 0, 0, 0, 0, 1060, 1427, 0,
	0, 0, 0, 205, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	987, 0, 1459, 0, 0, 1469, 0, 0, 987, 1449,
	1450, 1451, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1465, 0, 1466, 205, 0, 0, 0, 0, 0, 1436,
	1437, 1419, 1420, 0, 1452, 1453, 1454, 1462, 1463, 1464,
	0, 0, 0, 0, 1457, 1061, 0, 0, 0, 0,
	1162, 0, 1442, 205, 205, 0, 0, 1422, 0, 0,
	0, 1468, 0, 0, 0, 0, 0, 0, 0, 0,
	1467, 0, 0, 0, 0, 0, 0, 87, 0, 1162,
	1162, 1162, 87, 0, 1421, 1456, 0, 0, 0, 0,
	0, 0, 1441, 0, 0, 0, 0, 0, 0, 1438,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 1061, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 0, 0, 0, 1443, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 1445, 1446, 1447, 0,
	0, 0, 0, 0, 0, 1427, 0, 0, 0, 1460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1459,
	205, 0, 1469, 0, 0, 0, 1449, 1450, 1451, 0,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1436, 1437, 1061, 0,
	1061, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1457, 0, 0, 0, 0, 0, 0, 0, 1442,
	0, 0, 0, 1458, 0, 0, 1433, 1434, 1440, 1439,
	1435, 1461, 0, 1432, 1430, 1431, 1423, 1424, 1425, 1426,
	1428, 1429, 0, 0, 0, 0, 2025, 0, 0, 2026,
	0, 0, 0, 1993, 0, 0, 1162, 0, 0, 1061,
	0, 1162, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1061, 0, 0, 1162, 0,
	0, 0, 0, 1448, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1443, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1061, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1061, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1061, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1061, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1458, 87, 0, 1433, 1434, 1440, 1439, 1435, 1461, 0,
	1432, 1430, 1431, 1423, 1424, 1425, 1426, 1428, 1429, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1162,
	0, 0, 0, 0, 0, 0, 0, 0, 1162, 1162,
	0, 0, 0, 0, 1162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1058, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1061, 215, 216, 217, 218, 219, 1065, 220, 1066, 1067,
	1068, 1069, 464, 1070, 1071, 1072, 1073, 221, 222, 223,
	224, 465, 466, 225, 467, 226, 227, 468, 1074, 228,
	229, 230, 231, 232, 233, 1075, 1076, 234, 469, 470,
	471, 1077, 235, 472, 1078, 1063, 1079, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 1080, 245, 0,
	246, 247, 248, 1081, 938, 249, 250, 1082, 1083, 1085,
	1084, 1086, 1087, 1088, 251, 252, 253, 254, 255, 256,
	473, 474, 1089, 257, 1090, 259, 258, 1091, 260, 1092,
	1093, 261, 262, 263, 1094, 264, 1095, 265, 266, 1096,
	475, 267, 268, 270, 273, 269, 274, 275, 276, 277,
	476, 477, 1097, 212, 1098, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 1099, 284, 1100,
	1101, 939, 285, 286, 1102, 287, 479, 1103, 480, 288,
	1104, 289, 290, 291, 292, 481, 482, 483, 340, 941,
	293, 294, 1105, 295, 296, 298, 0, 0, 0, 213,
	297, 299, 306, 1106, 940, 300, 484, 302, 301, 303,
	304, 305, 485, 1107, 486, 1108, 307, 942, 487, 943,
	308, 309, 310, 944, 311, 312, 0, 0, 313, 314,
	315, 316, 1109, 318, 317, 1110, 319, 488, 945, 320,
	321, 946, 1111, 322, 323, 1112, 1113, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	947, 336, 337, 339, 338, 1114, 214, 948, 1115, 489,
	490, 341, 342, 1116, 343, 344, 345, 1117, 1118, 347,
	348, 349, 1119, 1120, 350, 491, 949, 351, 950, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 1121, 359,
	360, 493, 361, 494, 362, 1122, 363, 0, 364, 365,
	366, 367, 368, 369, 495, 370, 371, 1123, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 1124, 385, 951, 386, 387, 388, 389, 496,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	1125, 408, 409, 402, 404, 405, 406, 403, 407, 410,
	411, 1126, 412, 392, 393, 413, 952, 414, 497, 415,
	416, 1127, 426, 417, 418, 419, 394, 420, 424, 425,
	421, 422, 423, 498, 1128, 428, 429, 427, 1129, 430,
	431, 432, 433, 434, 271, 435, 272, 436, 1130, 499,
	500, 501, 502, 1131, 443, 1132, 437, 438, 503, 439,
	504, 1133, 440, 441, 442, 0, 444, 445, 1134, 1135,
	446, 447, 448, 449, 450, 452, 1136, 453, 1137, 451,
	454, 455, 456, 505, 506, 507, 1138, 458, 457, 508,
	1139, 1140, 1141, 1142, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1058, 0, 0, 0, 0, 0, 0, 0,
	2145, 0, 0, 0, 0, 0, 0, 0, 2146, 215,
	216, 217, 218, 219, 1065, 220, 1066, 1067, 1068, 1069,
	464, 1070, 1071, 1072, 1073, 221, 222, 223, 224, 465,
	466, 225, 467, 226, 227, 468, 1074, 228, 229, 230,
	231, 232, 233, 1075, 1076, 234, 469, 470, 471, 1077,
	235, 472, 1078, 1063, 1079, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 1080, 245, 0, 246, 247,
	248, 1081, 938, 249, 250, 1082, 1083, 1085, 1084, 1086,
	1087, 1088, 251, 252, 253, 254, 255, 256, 473, 474,
	1089, 257, 1090, 259, 258, 1091, 260, 1092, 1093, 261,
	262, 263, 1094, 264, 1095, 265, 266, 1096, 475, 267,
	268, 270, 273, 269, 274, 275, 276, 277, 476, 477,
	1097, 212, 1098, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 1099, 284, 1100, 1101, 939,
	285, 286, 1102, 287, 479, 1103, 480, 288, 1104, 289,
	290, 291, 292, 481, 482, 483, 340, 941, 293, 294,
	1105, 295, 296, 298, 0, 0, 0, 213, 297, 299,
	306, 1106, 940, 300, 484, 302, 301, 303, 304, 305,
	485, 1107, 486, 1108, 307, 942, 487, 943, 308, 309,
	310, 944, 311, 312, 0, 0, 313, 314, 315, 316,
	1109, 318, 317, 1110, 319, 488, 945, 320, 321, 946,
	1111, 322, 323, 1112, 1113, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 947, 336,
	337, 339, 338, 1114, 214, 948, 1115, 489, 490, 341,
	342, 1116, 343, 344, 345, 1117, 1118, 347, 348, 349,
	1119, 1120, 350, 491, 949, 351, 950, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 1121, 359, 360, 493,
	361, 494, 362, 1122, 363, 0, 364, 365, 366, 367,
	368, 369, 495, 370, 371, 1123, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	1124, 385, 951, 386, 387, 388, 389, 496, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 1125, 408,
	409, 402, 404, 405, 406, 403, 407, 410, 411, 1126,
	412, 392, 393, 413, 952, 414, 497, 415, 416, 1127,
	426, 417, 418, 419, 394, 420, 424, 425, 421, 422,
	423, 498, 1128, 428, 429, 427, 1129, 430, 431, 432,
	433, 434, 271, 435, 272, 436, 1130, 499, 500, 501,
	502, 1131, 443, 1132, 437, 438, 503, 439, 504, 1133,
	440, 441, 442, 0, 444, 445, 1134, 1135, 446, 447,
	448, 449, 450, 452, 1136, 453, 1137, 451, 454, 455,
	456, 505, 506, 507, 1138, 458, 457, 508, 1139, 1140,
	1141, 1142, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 0, 1058, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3065, 215,
	216, 217, 218, 219, 1065, 220, 1066, 1067, 1068, 1069,
	464, 1070, 1071, 1072, 1073, 221, 222, 223, 224, 465,
	466, 225, 467, 226, 227, 468, 1074, 228, 229, 230,
	231, 232, 233, 1075, 1076, 234, 469, 470, 471, 1077,
	235, 472, 1078, 1063, 1079, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 1080, 245, 0, 246, 247,
	248, 1081, 938, 249, 250, 1082, 1083, 1085, 1084, 1086,
	1087, 1088, 251, 252, 253, 254, 255, 256, 473, 474,
	1089, 257, 1090, 259, 258, 1091, 260, 1092, 1093, 261,
	262, 263, 1094, 264, 1095, 265, 266, 1096, 475, 267,
	268, 270, 273, 269, 274, 275, 276, 277, 476, 477,
	1097, 212, 1098, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 1099, 284, 1100, 1101, 939,
	285, 286, 1102, 287, 479, 1103, 480, 288, 1104, 289,
	290, 291, 292, 481, 482, 483, 340, 941, 293, 294,
	1105, 295, 296, 298, 0, 0, 0, 213, 297, 299,
	306, 1106, 940, 300, 484, 302, 301, 303, 304, 305,
	485, 1107, 486, 1108, 307, 942, 487, 943, 308, 309,
	310, 944, 311, 312, 0, 0, 313, 314, 315, 316,
	1109, 318, 317, 1110, 319, 488, 945, 320, 321, 946,
	1111, 322, 323, 1112, 1113, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 947, 336,
	337, 339, 338, 1114, 214, 948, 1115, 489, 490, 341,
	342, 1116, 343, 344, 345, 1117, 1118, 347, 348, 349,
	1119, 1120, 350, 491, 949, 351, 950, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 1121, 359, 360, 493,
	361, 494, 362, 1122, 363, 0, 364, 365, 366, 367,
	368, 369, 495, 370, 371, 1123, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	1124, 385, 951, 386, 387, 388, 389, 496, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 1125, 408,
	409, 402, 404, 405, 406, 403, 407, 410, 411, 1126,
	412, 392, 393, 413, 952, 414, 497, 415, 416, 1127,
	426, 417, 418, 419, 394, 420, 424, 425, 421, 422,
	423, 498, 1128, 428, 429, 427, 1129, 430, 431, 432,
	433, 434, 271, 435, 272, 436, 1130, 499, 500, 501,
	502, 1131, 443, 1132, 437, 438, 503, 439, 504, 1133,
	440, 441, 442, 0, 444, 445, 1134, 1135, 446, 447,
	448, 449, 450, 452, 1136, 453, 1137, 451, 454, 455,
	456, 505, 506, 507, 1138, 458, 457, 508, 1139, 1140,
	1141, 1142, 459, 460, 509, 461, 462, 463, 1058, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3179, 0, 215, 216, 217, 218, 219,
	1065, 220, 1066, 1067, 1068, 1069, 464, 1070, 1071, 1072,
	1073, 221, 222, 223, 224, 465, 466, 225, 467, 226,
	227, 468, 1074, 228, 229, 230, 231, 232, 233, 1075,
	1076, 234, 469, 470, 471, 1077, 235, 472, 1078, 1063,
	1079, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 1080, 245, 0, 246, 247, 248, 1081, 938, 249,
	250, 1082, 1083, 1085, 1084, 1086, 1087, 1088, 251, 252,
	253, 254, 255, 256, 473, 474, 1089, 257, 1090, 259,
	258, 1091, 260, 1092, 1093, 261, 262, 263, 1094, 264,
	1095, 265, 266, 1096, 475, 267, 268, 270, 273, 269,
	274, 275, 276, 277, 476, 477, 1097, 212, 1098, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 1099, 284, 1100, 1101, 939, 285, 286, 1102, 287,
	479, 1103, 480, 288, 1104, 289, 290, 291, 292, 481,
	482, 483, 340, 941, 293, 294, 1105, 295, 296, 298,
	0, 0, 0, 213, 297, 299, 306, 1106, 940, 300,
	484, 302, 301, 303, 304, 305, 485, 1107, 486, 1108,
	307, 942, 487, 943, 308, 309, 310, 944, 311, 312,
	0, 0, 313, 314, 315, 316, 1109, 318, 317, 1110,
	319, 488, 945, 320, 321, 946, 1111, 322, 323, 1112,
	1113, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 947, 336, 337, 339, 338, 1114,
	214, 948, 1115, 489, 490, 341, 342, 1116, 343, 344,
	345, 1117, 1118, 347, 348, 349, 1119, 1120, 350, 491,
	949, 351, 950, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 1121, 359, 360, 493, 361, 494, 362, 1122,
	363, 0, 364, 365, 366, 367, 368, 369, 495, 370,
	371, 1123, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 1124, 385, 951, 386,
	387, 388, 389, 496, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 1125, 408, 409, 402, 404, 405,
	406, 403, 407, 410, 411, 1126, 412, 392, 393, 413,
	952, 414, 497, 415, 416, 1127, 426, 417, 418, 419,
	394, 420, 424, 425, 421, 422, 423, 498, 1128, 428,
	429, 427, 1129, 430, 431, 432, 433, 434, 271, 435,
	272, 436, 1130, 499, 500, 501, 502, 1131, 443, 1132,
	437, 438, 503, 439, 504, 1133, 440, 441, 442, 0,
	444, 445, 1134, 1135, 446, 447, 448, 449, 450, 452,
	1136, 453, 1137, 451, 454, 455, 456, 505, 506, 507,
	1138, 458, 457, 508, 1139, 1140, 1141, 1142, 459, 460,
	509, 461, 462, 463, 1058, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2802,
	0, 215, 216, 217, 218, 219, 1065, 220, 1066, 1067,
	1068, 1069, 464, 1070, 1071, 1072, 1073, 221, 222, 223,
	224, 465, 466, 225, 467, 226, 227, 468, 1074, 228,
	229, 230, 231, 232, 233, 1075, 1076, 234, 469, 470,
	471, 1077, 235, 472, 1078, 1063, 1079, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 1080, 245, 0,
	246, 247, 248, 1081, 938, 249, 250, 1082, 1083, 1085,
	1084, 1086, 1087, 1088, 251, 252, 253, 254, 255, 256,
	473, 474, 1089, 257, 1090, 259, 258, 1091, 260, 1092,
	1093, 261, 262, 263, 1094, 264, 1095, 265, 266, 1096,
	475, 267, 268, 270, 273, 269, 274, 275, 276, 277,
	476, 477, 1097, 212, 1098, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 1099, 284, 1100,
	1101, 939, 285, 286, 1102, 287, 479, 1103, 480, 288,
	1104, 289, 290, 291, 292, 481, 482, 483, 340, 941,
	293, 294, 1105, 295, 296, 298, 0, 0, 0, 213,
	297, 299, 306, 1106, 940, 300, 484, 302, 301, 303,
	304, 305, 485, 1107, 486, 1108, 307, 942, 487, 943,
	308, 309, 310, 944, 311, 312, 0, 0, 313, 314,
	315, 316, 1109, 318, 317, 1110, 319, 488, 945, 320,
	321, 946, 1111, 322, 323, 1112, 1113, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	947, 336, 337, 339, 338, 1114, 214, 948, 1115, 489,
	490, 341, 342, 1116, 343, 344, 345, 1117, 1118, 347,
	348, 349, 1119, 1120, 350, 491, 949, 351, 950, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 1121, 359,
	360, 493, 361, 494, 362, 1122, 363, 0, 364, 365,
	366, 367, 368, 369, 495, 370, 371, 1123, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 1124, 385, 951, 386, 387, 388, 389, 496,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	1125, 408, 409, 402, 404, 405, 406, 403, 407, 410,
	411, 1126, 412, 392, 393, 413, 952, 414, 497, 415,
	416, 1127, 426, 417, 418, 419, 394, 420, 424, 425,
	421, 422, 423, 498, 1128, 428, 429, 427, 1129, 430,
	431, 432, 433, 434, 271, 435, 272, 436, 1130, 499,
	500, 501, 502, 1131, 443, 1132, 437, 438, 503, 439,
	504, 1133, 440, 441, 442, 0, 444, 445, 1134, 1135,
	446, 447, 448, 449, 450, 452, 1136, 453, 1137, 451,
	454, 455, 456, 505, 506, 507, 1138, 458, 457, 508,
	1139, 1140, 1141, 1142, 459, 460, 509, 461, 462, 463,
	1058, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2794, 0, 215, 216, 217,
	218, 219, 1065, 220, 1066, 1067, 1068, 1069, 464, 1070,
	1071, 1072, 1073, 221, 222, 223, 224, 465, 466, 225,
	467, 226, 227, 468, 1074, 228, 229, 230, 231, 232,
	233, 1075, 1076, 234, 469, 470, 471, 1077, 235, 472,
	1078, 1063, 1079, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 1080, 245, 0, 246, 247, 248, 1081,
	938, 249, 250, 1082, 1083, 1085, 1084, 1086, 1087, 1088,
	251, 252, 253, 254, 255, 256, 473, 474, 1089, 257,
	1090, 259, 258, 1091, 260, 1092, 1093, 261, 262, 263,
	1094, 264, 1095, 265, 266, 1096, 475, 267, 268, 270,
	273, 269, 274, 275, 276, 277, 476, 477, 1097, 212,
	1098, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 1099, 284, 1100, 1101, 939, 285, 286,
	1102, 287, 479, 1103, 480, 288, 1104, 289, 290, 291,
	292, 481, 482, 483, 340, 941, 293, 294, 1105, 295,
	296, 298, 0, 0, 0, 213, 297, 299, 306, 1106,
	940, 300, 484, 302, 301, 303, 304, 305, 485, 1107,
	486, 1108, 307, 942, 487, 943, 308, 309, 310, 944,
	311, 312, 0, 0, 313, 314, 315, 316, 1109, 318,
	317, 1110, 319, 488, 945, 320, 321, 946, 1111, 322,
	323, 1112, 1113, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 947, 336, 337, 339,
	338, 1114, 214, 948, 1115, 489, 490, 341, 342, 1116,
	343, 344, 345, 1117, 1118, 347, 348, 349, 1119, 1120,
	350, 491, 949, 351, 950, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 1121, 359, 360, 493, 361, 494,
	362, 1122, 363, 0, 364, 365, 366, 367, 368, 369,
	495, 370, 371, 1123, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 1124, 385,
	951, 386, 387, 388, 389, 496, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 1125, 408, 409, 402,
	404, 405, 406, 403, 407, 410, 411, 1126, 412, 392,
	393, 413, 952, 414, 497, 415, 416, 1127, 426, 417,
	418, 419, 394, 420, 424, 425, 421, 422, 423, 498,
	1128, 428, 429, 427, 1129, 430, 431, 432, 433, 434,
	271, 435, 272, 436, 1130, 499, 500, 501, 502, 1131,
	443, 1132, 437, 438, 503, 439, 504, 1133, 440, 441,
	442, 0, 444, 445, 1134, 1135, 446, 447, 448, 449,
	450, 452, 1136, 453, 1137, 451, 454, 455, 456, 505,
	506, 507, 1138, 458, 457, 508, 1139, 1140, 1141, 1142,
	459, 460, 509, 461, 462, 463, 1058, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2667, 0, 215, 216, 217, 218, 219, 1065, 220,
	1066, 1067, 1068, 1069, 464, 1070, 1071, 1072, 1073, 221,
	222, 223, 224, 465, 466, 225, 467, 226, 227, 468,
	1074, 228, 229, 230, 231, 232, 233, 1075, 1076, 234,
	469, 470, 471, 1077, 235, 472, 1078, 1063, 1079, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 1080,
	245, 0, 246, 247, 248, 1081, 938, 249, 250, 1082,
	1083, 1085, 1084, 1086, 1087, 1088, 251, 252, 253, 254,
	255, 256, 473, 474, 1089, 257, 1090, 259, 258, 1091,
	260, 1092, 1093, 261, 262, 263, 1094, 264, 1095, 265,
	266, 1096, 475, 267, 268, 270, 273, 269, 274, 275,
	276, 277, 476, 477, 1097, 212, 1098, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 1099,
	284, 1100, 1101, 939, 285, 286, 1102, 287, 479, 1103,
	480, 288, 1104, 289, 290, 291, 292, 481, 482, 483,
	340, 941, 293, 294, 1105, 295, 296, 298, 0, 0,
	0, 213, 297, 299, 306, 1106, 940, 300, 484, 302,
	301, 303, 304, 305, 485, 1107, 486, 1108, 307, 942,
	487, 943, 308, 309, 310, 944, 311, 312, 0, 0,
	313, 314, 315, 316, 1109, 318, 317, 1110, 319, 488,
	945, 320, 321, 946, 1111, 322, 323, 1112, 1113, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 947, 336, 337, 339, 338, 1114, 214, 948,
	1115, 489, 490, 341, 342, 1116, 343, 344, 345, 1117,
	1118, 347, 348, 349, 1119, 1120, 350, 491, 949, 351,
	950, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	1121, 359, 360, 493, 361, 494, 362, 1122, 363, 0,
	364, 365, 366, 367, 368, 369, 495, 370, 371, 1123,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 1124, 385, 951, 386, 387, 388,
	389, 496, 390, 0, 391, 395, 396, 397, 398, 399,
	400, 401, 1125, 408, 409, 402, 404, 405, 406, 403,
	407, 410, 411, 1126, 412, 392, 393, 413, 952, 414,
	497, 415, 416, 1127, 426, 417, 418, 419, 394, 420,
	424, 425, 421, 422, 423, 498, 1128, 428, 429, 427,
	1129, 430, 431, 432, 433, 434, 271, 435, 272, 436,
	1130, 499, 500, 501, 502, 1131, 443, 1132, 437, 438,
	503, 439, 504, 1133, 440, 441, 442, 0, 444, 445,
	1134, 1135, 446, 447, 448, 449, 450, 452, 1136, 453,
	1137, 451, 454, 455, 456, 505, 506, 507, 1138, 458,
	457, 508, 1139, 1140, 1141, 1142, 459, 460, 509, 461,
	462, 463, 1058, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2038, 0, 215,
	216, 217, 218, 219, 1065, 220, 1066, 1067, 1068, 1069,
	464, 1070, 1071, 1072, 1073, 221, 222, 223, 224, 465,
	466, 225, 467, 226, 227, 468, 1074, 228, 229, 230,
	231, 232, 233, 1075, 1076, 234, 469, 470, 471, 1077,
	235, 472, 1078, 1063, 1079, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 1080, 245, 0, 246, 247,
	248, 1081, 938, 249, 250, 1082, 1083, 1085, 1084, 1086,
	1087, 1088, 251, 252, 253, 254, 255, 256, 473, 474,
	1089, 257, 1090, 259, 258, 1091, 260, 1092, 1093, 261,
	262, 263, 1094, 264, 1095, 265, 266, 1096, 475, 267,
	268, 270, 273, 269, 274, 275, 276, 277, 476, 477,
	1097, 212, 1098, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 1099, 284, 1100, 1101, 939,
	285, 286, 1102, 287, 479, 1103, 480, 288, 1104, 289,
	290, 291, 292, 481, 482, 483, 340, 941, 293, 294,
	1105, 295, 296, 298, 0, 0, 0, 213, 297, 299,
	306, 1106, 940, 300, 484, 302, 301, 303, 304, 305,
	485, 1107, 486, 1108, 307, 942, 487, 943, 308, 309,
	310, 944, 311, 312, 0, 0, 313, 314, 315, 316,
	1109, 318, 317, 1110, 319, 488, 945, 320, 321, 946,
	1111, 322, 323, 1112, 1113, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 947, 336,
	337, 339, 338, 1114, 214, 948, 1115, 489, 490, 341,
	342, 1116, 343, 344, 345, 1117, 1118, 347, 348, 349,
	1119, 1120, 350, 491, 949, 351, 950, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 1121, 359, 360, 493,
	361, 494, 362, 1122, 363, 0, 364, 365, 366, 367,
	368, 369, 495, 370, 371, 1123, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	1124, 385, 951, 386, 387, 388, 389, 496, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 1125, 408,
	409, 402, 404, 405, 406, 403, 407, 410, 411, 1126,
	412, 392, 393, 413, 952, 414, 497, 415, 416, 1127,
	426, 417, 418, 419, 394, 420, 424, 425, 421, 422,
	423, 498, 1128, 428, 429, 427, 1129, 430, 431, 432,
	433, 434, 271, 435, 272, 436, 1130, 499, 500, 501,
	502, 1131, 443, 1132, 437, 438, 503, 439, 504, 1133,
	440, 441, 442, 0, 444, 445, 1134, 1135, 446, 447,
	448, 449, 450, 452, 1136, 453, 1137, 451, 454, 455,
	456, 505, 506, 507, 1138, 458, 457, 508, 1139, 1140,
	1141, 1142, 459, 460, 509, 461, 462, 463, 1166, 0,
	1058, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1768, 0, 0, 0, 215, 216, 217,
	218, 219, 1065, 220, 1066, 1067, 1068, 1069, 464, 1070,
	1071, 1072, 1073, 221, 222, 223, 224, 465, 466, 225,
	467, 226, 227, 468, 1074, 228, 229, 230, 231, 232,
	233, 1075, 1076, 234, 469, 470, 471, 1077, 235, 472,
	1078, 1063, 1079, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 1080, 245, 0, 246, 247, 248, 1081,
	938, 249, 250, 1082, 1083, 1085, 1084, 1086, 1087, 1088,
	251, 252, 253, 254, 255, 256, 473, 474, 1089, 257,
	1090, 259, 258, 1091, 260, 1092, 1093, 261, 262, 263,
	1094, 264, 1095, 265, 266, 1096, 475, 267, 268, 270,
	273, 269, 274, 275, 276, 277, 476, 477, 1097, 212,
	1098, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 1099, 284, 1100, 1101, 939, 285, 286,
	1102, 287, 479, 1103, 480, 288, 1104, 289, 290, 291,
	292, 481, 482, 483, 340, 941, 293, 294, 1105, 295,
	296, 298, 0, 0, 0, 213, 297, 299, 306, 1106,
	940, 300, 484, 302, 301, 303, 304, 305, 485, 1107,
	486, 1108, 307, 942, 487, 943, 308, 309, 310, 944,
	311, 312, 0, 0, 313, 314, 315, 316, 1109, 318,
	317, 1110, 319, 488, 945, 320, 321, 946, 1111, 322,
	323, 1112, 1113, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 947, 336, 337, 339,
	338, 1114, 214, 948, 1115, 489, 490, 341, 342, 1116,
	343, 344, 345, 1117, 1118, 347, 348, 349, 1119, 1120,
	350, 491, 949, 351, 950, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 1121, 359, 360, 493, 361, 494,
	362, 1122, 363, 0, 364, 365, 366, 367, 368, 369,
	495, 370, 371, 1123, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 1124, 385,
	951, 386, 387, 388, 389, 496, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 1125, 408, 409, 402,
	404, 405, 406, 403, 407, 410, 411, 1126, 412, 392,
	393, 413, 952, 414, 497, 415, 416, 1127, 426, 417,
	418, 419, 394, 420, 424, 425, 421, 422, 423, 498,
	1128, 428, 429, 427, 1129, 430, 431, 432, 433, 434,
	271, 435, 272, 436, 1130, 499, 500, 501, 502, 1131,
	443, 1132, 437, 438, 503, 439, 504, 1133, 440, 441,
	442, 0, 444, 445, 1134, 1135, 446, 447, 448, 449,
	450, 452, 1136, 453, 1137, 451, 454, 455, 456, 505,
	506, 507, 1138, 458, 457, 508, 1139, 1140, 1141, 1142,
	459, 460, 509, 461, 462, 463, 1055, 0, 1058, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	1065, 220, 1066, 1067, 1068, 1069, 464, 1070, 1071, 1072,
	1073, 221, 222, 223, 224, 465, 466, 225, 467, 226,
	227, 468, 1074, 228, 229, 230, 231, 232, 233, 1075,
	1076, 234, 469, 470, 471, 1077, 235, 472, 1078, 1063,
	1079, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 1080, 245, 0, 246, 247, 248, 1081, 938, 249,
	250, 1082, 1083, 1085, 1084, 1086, 1087, 1088, 251, 252,
	253, 254, 255, 256, 473, 474, 1089, 257, 1090, 259,
	258, 1091, 260, 1092, 1093, 261, 262, 263, 1094, 264,
	1095, 265, 266, 1096, 475, 267, 268, 270, 273, 269,
	274, 275, 276, 277, 476, 477, 1097, 212, 1098, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 1099, 284, 1100, 1101, 939, 285, 286, 1102, 287,
	479, 1103, 480, 288, 1104, 289, 290, 291, 292, 481,
	482, 483, 340, 941, 293, 294, 1105, 295, 296, 298,
	0, 0, 0, 213, 297, 299, 306, 1106, 940, 300,
	484, 302, 301, 303, 304, 305, 485, 1107, 486, 1108,
	307, 942, 487, 943, 308, 309, 310, 944, 311, 312,
	0, 0, 313, 314, 315, 316, 1109, 318, 317, 1110,
	319, 488, 945, 320, 321, 946, 1111, 322, 323, 1112,
	1113, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 947, 336, 337, 339, 338, 1114,
	214, 948, 1115, 489, 490, 341, 342, 1116, 343, 344,
	345, 1117, 1118, 347, 348, 349, 1119, 1120, 350, 491,
	949, 351, 950, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 1121, 359, 360, 493, 361, 494, 362, 1122,
	363, 0, 364, 365, 366, 367, 368, 369, 495, 370,
	371, 1123, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 1124, 385, 951, 386,
	387, 388, 389, 496, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 1125, 408, 409, 402, 404, 405,
	406, 403, 407, 410, 411, 1126, 412, 392, 393, 413,
	952, 414, 497, 415, 416, 1127, 426, 417, 418, 419,
	394, 420, 424, 425, 421, 422, 423, 498, 1128, 428,
	429, 427, 1129, 430, 431, 432, 433, 434, 271, 435,
	272, 436, 1130, 499, 500, 501, 502, 1131, 443, 1132,
	437, 438, 503, 439, 504, 1133, 440, 441, 442, 0,
	444, 445, 1134, 1135, 446, 447, 448, 449, 450, 452,
	1136, 453, 1137, 451, 454, 455, 456, 505, 506, 507,
	1138, 458, 457, 508, 1139, 1140, 1141, 1142, 459, 460,
	509, 461, 462, 463, 1058, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 1065, 220, 1066, 1067,
	1068, 1069, 464, 1070, 1071, 1072, 1073, 221, 222, 223,
	224, 465, 466, 225, 467, 226, 227, 468, 1074, 228,
	229, 230, 231, 232, 233, 1075, 1076, 234, 469, 470,
	471, 1077, 235, 472, 1078, 1063, 1079, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 1080, 245, 0,
	246, 247, 248, 1081, 938, 249, 250, 1082, 1083, 1085,
	1084, 1086, 1087, 1088, 251, 252, 253, 254, 255, 256,
	473, 474, 1089, 257, 1090, 259, 258, 1091, 260, 1092,
	1093, 261, 262, 263, 1094, 264, 1095, 265, 266, 1096,
	475, 267, 268, 270, 273, 269, 274, 275, 276, 277,
	476, 477, 1097, 212, 1098, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 1099, 284, 1100,
	1101, 939, 285, 286, 1102, 287, 479, 1103, 480, 288,
	1104, 289, 290, 291, 292, 481, 482, 483, 340, 941,
	293, 294, 1105, 295, 296, 298, 0, 0, 0, 213,
	297, 299, 306, 1106, 940, 300, 484, 302, 301, 303,
	304, 305, 485, 1107, 486, 1108, 307, 942, 487, 943,
	308, 309, 310, 944, 311, 312, 0, 0, 313, 314,
	315, 316, 1109, 318, 317, 1110, 319, 488, 945, 320,
	321, 946, 1111, 322, 323, 1112, 1113, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	947, 336, 337, 339, 338, 1114, 214, 948, 1115, 489,
	490, 341, 342, 1116, 343, 344, 345, 1117, 1118, 347,
	348, 349, 1119, 1120, 350, 491, 949, 351, 950, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 1121, 359,
	360, 493, 361, 494, 362, 1122, 363, 0, 364, 365,
	366, 367, 368, 369, 495, 370, 371, 1123, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 1124, 385, 951, 386, 387, 388, 389, 496,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	1125, 408, 409, 402, 404, 405, 406, 403, 407, 410,
	411, 1126, 412, 392, 393, 413, 952, 414, 497, 415,
	416, 1127, 426, 417, 418, 419, 394, 420, 424, 425,
	421, 422, 423, 498, 1128, 428, 429, 427, 1129, 430,
	431, 432, 433, 434, 271, 435, 272, 436, 1130, 499,
	500, 501, 502, 1131, 443, 1132, 437, 438, 503, 439,
	504, 1133, 440, 441, 442, 0, 444, 445, 1134, 1135,
	446, 447, 448, 449, 450, 452, 1136, 453, 1137, 451,
	454, 455, 456, 505, 506, 507, 1138, 458, 457, 508,
	1139, 1140, 1141, 1142, 459, 460, 509, 461, 462, 463,
	2014, 0, 880, 837, 838, 839, 835, 836, 849, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 2011, 220, 0, 0, 0, 0,
	929, 854, 0, 0, 0, 221, 222, 223, 224, 465,
	895, 874, 906, 864, 905, 904, 0, 228, 866, 865,
	231, 232, 233, 856, 928, 234, 964, 965, 471, 0,
	235, 935, 0, 918, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 938, 249, 250, 921, 919, 920, 925, 923,
	922, 924, 251, 252, 253, 254, 909, 256, 902, 901,
	826, 257, 0, 259, 258, 0, 260, 2012, 0, 261,
	900, 263, 0, 264, 0, 265, 266, 0, 832, 267,
	268, 270, 273, 269, 274, 275, 276, 277, 955, 956,
	845, 212, 0, 0, 0, 0, 0, 278, 279, 280,
	899, 897, 898, 0, 283, 0, 284, 0, 0, 939,
	285, 286, 0, 287, 962, 0, 855, 288, 0, 289,
	290, 291, 292, 930, 931, 934, 340, 941, 293, 294,
	0, 295, 296, 876, 0, 0, 0, 213, 297, 299,
	306, 0, 940, 300, 888, 879, 890, 892, 893, 894,
	889, 0, 881, 0, 307, 942, 932, 943, 308, 309,
	310, 944, 914, 915, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 963, 945, 320, 321, 946,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 868, 333, 947, 336,
	337, 339, 338, 823, 214, 948, 846, 933, 903, 341,
	342, 0, 877, 344, 878, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 949, 351, 950, 957, 352, 346,
	353, 354, 355, 356, 357, 358, 0, 359, 360, 958,
	361, 494, 362, 0, 363, 0, 364, 365, 366, 367,
	368, 369, 896, 370, 371, 0, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 951, 386, 387, 388, 389, 833, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 0, 408,
	409, 869, 870, 872, 873, 403, 407, 410, 411, 926,
	412, 392, 393, 413, 952, 414, 891, 871, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 937, 421, 422,
	423, 959, 0, 428, 429, 427, 0, 430, 431, 432,
	433, 434, 271, 435, 272, 867, 0, 910, 911, 912,
	913, 0, 443, 0, 437, 438, 960, 439, 961, 844,
	440, 441, 442, 0, 444, 445, 0, 827, 446, 447,
	448, 449, 450, 452, 927, 453, 0, 875, 454, 455,
	456, 505, 907, 954, 2010, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 824, 0,
	0, 0, 0, 0, 0, 0, 822, 0, 0, 0,
	0, 820, 821, 2013, 0, 0, 0, 0, 0, 0,
	850, 2009, 0, 0, 813, 848, 880, 837, 838, 839,
	835, 836, 849, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 929, 854, 0, 0, 0, 221,
	222, 223, 224, 465, 895, 874, 906, 864, 905, 904,
	0, 228, 866, 865, 231, 232, 233, 856, 928, 234,
	964, 965, 471, 0, 235, 935, 0, 918, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 938, 249, 250, 921,
	919, 920, 925, 923, 922, 924, 251, 252, 253, 254,
	909, 256, 902, 901, 826, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 900, 263, 0, 264, 0, 265,
	266, 0, 832, 267, 268, 270, 273, 269, 274, 275,
	276, 277, 955, 956, 845, 212, 0, 0, 0, 0,
	0, 278, 279, 280, 899, 897, 898, 0, 283, 0,
	284, 0, 0, 939, 285, 286, 0, 287, 962, 0,
	855, 288, 0, 289, 290, 291, 292, 930, 931, 934,
	340, 941, 293, 294, 0, 295, 296, 876, 0, 0,
	0, 213, 297, 299, 306, 0, 940, 300, 888, 879,
	890, 892, 893, 894, 889, 0, 881, 0, 307, 942,
	932, 943, 308, 309, 310, 944, 914, 915, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 963,
	945, 320, 321, 946, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	868, 333, 947, 336, 337, 339, 338, 823, 214, 948,
	846, 933, 903, 341, 342, 0, 877, 344, 878, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 949, 351,
	950, 957, 352, 346, 353, 354, 355, 356, 357, 358,
	0, 359, 360, 958, 361, 494, 362, 0, 363, 0,
	364, 365, 366, 367, 368, 369, 896, 370, 371, 0,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 951, 386, 387, 388,
	389, 833, 390, 0, 391, 395, 396, 397, 398, 399,
	400, 401, 178, 408, 409, 869, 870, 872, 873, 403,
	407, 410, 411, 926, 412, 392, 393, 413, 952, 414,
	891, 871, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 937, 421, 422, 423, 959, 0, 428, 429, 427,
	180, 430, 431, 432, 433, 434, 271, 435, 272, 867,
	0, 910, 911, 912, 913, 0, 443, 0, 437, 438,
	960, 439, 961, 844, 440, 441, 442, 0, 444, 445,
	0, 827, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 875, 454, 455, 456, 1305, 907, 954, 0, 458,
	457, 508, 0, 0, 0, 172, 459, 460, 509, 461,
	462, 463, 824, 173, 0, 0, 0, 0, 0, 0,
	822, 0, 0, 0, 0, 820, 821, 880, 837, 838,
	839, 835, 836, 849, 1496, 1494, 0, 0, 0, 848,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 929, 854, 0, 0, 0,
	221, 222, 223, 224, 465, 895, 874, 906, 864, 905,
	904, 0, 228, 866, 865, 231, 232, 233, 856, 928,
	234, 964, 965, 471, 0, 235, 935, 0, 918, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 938, 249, 250,
	921, 919, 920, 925, 923, 922, 924, 251, 252, 253,
	254, 909, 256, 902, 901, 826, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 900, 263, 0, 264, 0,
	265, 266, 0, 832, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 955, 956, 845, 212, 0, 0, 0,
	0, 0, 278, 279, 280, 899, 897, 898, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 962,
	0, 855, 288, 0, 289, 290, 291, 292, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 876, 0,
	0, 0, 213, 297, 299, 306, 0, 940, 300, 888,
	879, 890, 892, 893, 894, 889, 0, 881, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 914, 915, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 868, 333, 947, 336, 337, 339, 338, 823, 214,
	948, 846, 933, 903, 341, 342, 0, 877, 344, 878,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 958, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 896, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 951, 386, 387,
	388, 389, 833, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 178, 408, 409, 869, 870, 872, 873,
	403, 407, 410, 411, 926, 412, 392, 393, 413, 952,
	414, 891, 871, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 937, 421, 422, 423, 959, 0, 428, 429,
	427, 180, 430, 431, 432, 433, 434, 271, 435, 272,
	867, 0, 910, 911, 912, 913, 0, 443, 0, 437,
	438, 960, 439, 961, 844, 440, 441, 442, 0, 444,
	445, 0, 827, 446, 447, 448, 449, 450, 452, 927,
	453, 0, 875, 454, 455, 456, 1305, 907, 954, 0,
	458, 457, 508, 0, 0, 0, 172, 459, 460, 509,
	461, 462, 463, 824, 173, 0, 0, 0, 0, 0,
	0, 822, 0, 0, 0, 0, 820, 821, 880, 837,
	838, 839, 835, 836, 849, 1496, 2429, 0, 0, 0,
	848, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 929, 854, 0, 0,
	0, 221, 222, 223, 224, 465, 895, 874, 906, 864,
	905, 904, 0, 228, 866, 865, 231, 232, 233, 856,
	928, 234, 964, 965, 471, 0, 235, 935, 0, 918,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 938, 249,
	250, 921, 919, 920, 925, 923, 922, 924, 251, 252,
	253, 254, 909, 256, 902, 901, 826, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 900, 263, 0, 264,
	0, 265, 266, 0, 832, 267, 268, 270, 273, 269,
	274, 275, 276, 277, 955, 956, 845, 212, 0, 0,
	0, 0, 0, 278, 279, 280, 899, 897, 898, 0,
	283, 0, 284, 0, 0, 939, 285, 286, 0, 287,
	962, 0, 855, 288, 0, 289, 290, 291, 292, 930,
	931, 934, 340, 941, 293, 294, 0, 295, 296, 876,
	0, 0, 0, 213, 297, 299, 306, 0, 940, 300,
	888, 879, 890, 892, 893, 894, 889, 0, 881, 0,
	307, 942, 932, 943, 308, 309, 310, 944, 914, 915,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 963, 945, 320, 321, 946, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 868, 333, 947, 336, 337, 339, 338, 823,
	214, 948, 846, 933, 903, 341, 342, 0, 877, 344,
	878, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	949, 351, 950, 957, 352, 346, 353, 354, 355, 356,
	357, 358, 0, 359, 360, 958, 361, 494, 362, 0,
	363, 0, 364, 365, 366, 367, 368, 369, 896, 370,
	371, 0, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 951, 386,
	387, 388, 389, 833, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 178, 408, 409, 869, 870, 872,
	873, 403, 407, 410, 411, 926, 412, 392, 393, 413,
	952, 414, 891, 871, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 937, 421, 422, 423, 959, 0, 428,
	429, 427, 180, 430, 431, 432, 433, 434, 271, 435,
	272, 867, 0, 910, 911, 912, 913, 0, 443, 0,
	437, 438, 960, 439, 961, 844, 440, 441, 442, 0,
	444, 445, 0, 827, 446, 447, 448, 449, 450, 452,
	927, 453, 0, 875, 454, 455, 456, 1305, 907, 954,
	0, 458, 457, 508, 0, 0, 0, 172, 459, 460,
	509, 461, 462, 463, 824, 173, 0, 0, 0, 0,
	0, 0, 822, 0, 0, 0, 0, 820, 821, 880,
	837, 838, 839, 835, 836, 849, 1496, 1494, 0, 0,
	0, 848, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 929, 854, 0,
	0, 0, 221, 222, 223, 224, 465, 895, 874, 906,
	864, 905, 904, 2099, 228, 866, 865, 231, 232, 233,
	856, 928, 234, 964, 965, 471, 0, 235, 935, 0,
	918, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 938,
	249, 250, 921, 919, 920, 925, 923, 922, 924, 251,
	252, 253, 254, 909, 256, 902, 901, 826, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 900, 263, 0,
	264, 0, 265, 266, 0, 832, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 955, 956, 845, 212, 0,
	0, 0, 0, 0, 278, 279, 280, 899, 897, 898,
	0, 283, 0, 284, 0, 2104, 939, 285, 286, 0,
	287, 962, 0, 855, 288, 0, 289, 290, 291, 292,
	930, 931, 934, 340, 941, 293, 294, 0, 295, 296,
	876, 0, 0, 0, 213, 297, 299, 306, 0, 940,
	300, 888, 879, 890, 892, 893, 894, 889, 0, 881,
	0, 307, 942, 932, 943, 308, 309, 310, 944, 914,
	915, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	2100, 319, 963, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 868, 333, 947, 336, 337, 339, 338,
	823, 214, 948, 846, 933, 903, 341, 342, 0, 877,
	344, 878, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 957, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 958, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 896,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 951,
	386, 387, 388, 389, 833, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 869, 870,
	872, 873, 403, 407, 410, 411, 926, 412, 392, 393,
	413, 952, 414, 891, 871, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 937, 421, 422, 423, 959, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 867, 0, 910, 911, 912, 913, 0, 443,
	2101, 437, 438, 960, 439, 961, 844, 440, 441, 442,
	0, 444, 445, 0, 827, 446, 447, 448, 449, 450,
	452, 927, 453, 0, 875, 454, 455, 456, 505, 907,
	954, 0, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 824, 0, 0, 0, 0,
	0, 0, 0, 822, 0, 0, 0, 0, 820, 821,
	0, 0, 0, 0, 0, 0, 0, 850, 0, 0,
	0, 816, 848, 880, 837, 838, 839, 835, 836, 849,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 929, 854, 0, 0, 0, 221, 222, 223, 224,
	465, 895, 874, 906, 864, 905, 904, 0, 228, 866,
	865, 231, 232, 233, 856, 928, 234, 964, 965, 471,
	0, 235, 935, 0, 918, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 938, 249, 250, 921, 919, 920, 925,
	923, 922, 924, 251, 252, 253, 254, 909, 256, 902,
	901, 826, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 900, 263, 0, 264, 0, 265, 266, 0, 832,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 955,
	956, 845, 212, 0, 0, 0, 0, 0, 278, 279,
	280, 899, 897, 898, 0, 283, 0, 284, 0, 0,
	939, 285, 286, 0, 287, 962, 0, 855, 288, 0,
	289, 290, 291, 292, 930, 931, 934, 340, 941, 293,
	294, 0, 295, 296, 876, 0, 0, 0, 213, 297,
	299, 306, 0, 940, 300, 888, 879, 890, 892, 893,
	894, 889, 0, 881, 0, 307, 942, 932, 943, 308,
	309, 310, 944, 914, 915, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 963, 945, 320, 321,
	946, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 868, 333, 947,
	336, 337, 339, 338, 823, 214, 948, 846, 933, 903,
	341, 342, 0, 877, 344, 878, 828, 0, 347, 348,
	349, 0, 0, 350, 491, 949, 351, 950, 957, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	958, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 896, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 951, 386, 387, 388, 389, 833, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 869, 870, 872, 873, 403, 407, 410, 411,
	926, 412, 392, 393, 413, 952, 414, 891, 871, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 937, 421,
	422, 423, 959, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 867, 0, 910, 911,
	912, 913, 0, 443, 0, 437, 438, 960, 439, 961,
	844, 440, 441, 442, 0, 444, 445, 0, 827, 446,
	447, 448, 449, 450, 452, 927, 453, 0, 875, 454,
	455, 456, 505, 907, 954, 0, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 824,
	0, 0, 0, 0, 0, 0, 0, 822, 0, 0,
	0, 0, 820, 821, 880, 837, 838, 839, 835, 836,
	849, 850, 0, 0, 0, 0, 848, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 929, 854, 0, 0, 0, 221, 222, 223,
	224, 465, 895, 874, 906, 864, 905, 904, 0, 228,
	866, 865, 231, 232, 233, 856, 928, 234, 964, 965,
	471, 0, 235, 935, 0, 918, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 3375, 248, 0, 938, 249, 250, 921, 919, 920,
	925, 923, 922, 924, 251, 252, 253, 254, 909, 256,
	902, 901, 826, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 900, 263, 0, 264, 0, 265, 266, 0,
	832, 267, 268, 270, 273, 269, 274, 275, 276, 277,
	955, 956, 845, 212, 0, 0, 0, 0, 0, 278,
	279, 280, 899, 897, 898, 0, 283, 0, 284, 0,
	0, 939, 285, 286, 0, 287, 962, 0, 855, 288,
	0, 289, 290, 291, 292, 930, 931, 934, 340, 941,
	293, 294, 0, 295, 296, 876, 0, 0, 0, 213,
	297, 299, 306, 0, 940, 300, 888, 879, 890, 892,
	893, 894, 889, 0, 881, 0, 307, 942, 932, 943,
	308, 309, 310, 944, 914, 915, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 963, 945, 320,
	321, 946, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 868, 333,
	947, 336, 337, 339, 338, 823, 214, 948, 846, 933,
	903, 341, 342, 0, 877, 344, 878, 828, 0, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 957,
	352, 346, 353, 354, 355, 356, 357, 358, 0, 359,
	360, 958, 361, 494, 362, 0, 363, 0, 364, 365,
	366, 367, 368, 369, 896, 370, 371, 0, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 951, 386, 387, 388, 389, 833,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	0, 408, 409, 869, 870, 872, 873, 403, 407, 410,
	411, 926, 412, 392, 393, 413, 952, 414, 891, 871,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 937,
	421, 422, 423, 959, 0, 428, 429, 427, 0, 430,
	431, 432, 433, 434, 271, 435, 272, 867, 0, 910,
	911, 912, 913, 0, 443, 0, 437, 438, 960, 439,
	961, 844, 440, 441, 442, 0, 444, 445, 0, 827,
	446, 447, 448, 449, 450, 452, 927, 453, 0, 875,
	454, 455, 456, 505, 907, 954, 0, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	824, 0, 0, 0, 0, 0, 0, 0, 822, 0,
	0, 0, 0, 820, 821, 880, 837, 838, 839, 835,
	836, 849, 850, 0, 0, 0, 0, 848, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 929, 854, 0, 0, 0, 221, 222,
	223, 224, 465, 895, 874, 906, 864, 905, 904, 0,
	228, 866, 865, 231, 232, 233, 856, 928, 234, 964,
	965, 471, 0, 235, 935, 0, 918, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 3236, 248, 0, 938, 249, 250, 921, 919,
	920, 925, 923, 922, 924, 251, 252, 253, 254, 909,
	256, 902, 901, 826, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 900, 263, 0, 264, 0, 265, 266,
	0, 832, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 955, 956, 845, 212, 0, 0, 0, 0, 0,
	278, 279, 280, 899, 897, 898, 0, 283, 0, 284,
	0, 0, 939, 285, 286, 0, 287, 962, 0, 855,
	288, 0, 289, 290, 291, 292, 930, 931, 934, 340,
	941, 293, 294, 0, 295, 296, 876, 0, 0, 0,
	213, 297, 299, 306, 0, 940, 300, 888, 879, 890,
	892, 893, 894, 889, 0, 881, 0, 307, 942, 932,
	943, 308, 309, 310, 944, 914, 915, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 963, 945,
	320, 321, 946, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 868,
	333, 947, 336, 337, 339, 338, 823, 214, 948, 846,
	933, 903, 341, 342, 0, 877, 344, 878, 828, 0,
	347, 348, 349, 0, 0, 350, 491, 949, 351, 950,
	957, 352, 346, 353, 354, 355, 356, 357, 358, 0,
	359, 360, 958, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 367, 368, 369, 896, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 951, 386, 387, 388, 389,
	833, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 869, 870, 872, 873, 403, 407,
	410, 411, 926, 412, 392, 393, 413, 952, 414, 891,
	871, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	937, 421, 422, 423, 959, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 867, 0,
	910, 911, 912, 913, 0, 443, 0, 437, 438, 960,
	439, 961, 844, 440, 441, 442, 0, 444, 445, 0,
	827, 446, 447, 448, 449, 450, 452, 927, 453, 0,
	875, 454, 455, 456, 505, 907, 954, 0, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 824, 0, 0, 0, 0, 0, 0, 0, 822,
	0, 0, 0, 0, 820, 821, 880, 837, 838, 839,
	835, 836, 849, 850, 0, 0, 0, 0, 848, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 929, 854, 0, 0, 0, 221,
	222, 223, 224, 465, 895, 874, 906, 864, 905, 904,
	0, 228, 866, 865, 231, 232, 233, 856, 928, 234,
	964, 965, 471, 0, 235, 935, 0, 918, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 938, 249, 250, 921,
	919, 920, 925, 923, 922, 924, 251, 252, 253, 254,
	909, 256, 902, 901, 826, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 900, 263, 0, 264, 0, 265,
	266, 0, 832, 267, 268, 270, 273, 269, 274, 275,
	276, 277, 955, 956, 845, 212, 0, 0, 0, 0,
	0, 278, 279, 280, 899, 897, 898, 0, 283, 0,
	284, 0, 0, 939, 285, 286, 0, 287, 962, 0,
	855, 288, 0, 289, 290, 291, 292, 930, 931, 934,
	340, 941, 293, 294, 0, 295, 296, 876, 0, 0,
	0, 213, 297, 299, 306, 0, 940, 300, 888, 879,
	890, 892, 893, 894, 889, 0, 881, 0, 307, 942,
	932, 943, 308, 309, 310, 944, 914, 915, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 963,
	945, 320, 321, 946, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	868, 333, 947, 336, 337, 339, 338, 823, 2974, 948,
	846, 933, 903, 341, 342, 0, 877, 344, 878, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 949, 351,
	950, 957, 352, 346, 353, 354, 355, 356, 357, 358,
	0, 359, 360, 958, 361, 494, 362, 0, 363, 0,
	364, 365, 366, 367, 368, 369, 896, 370, 371, 0,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 951, 386, 387, 388,
	389, 833, 390, 0, 391, 395, 396, 397, 398, 399,
	400, 401, 0, 408, 409, 869, 870, 872, 873, 403,
	407, 410, 411, 926, 412, 392, 393, 413, 952, 414,
	891, 871, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 937, 421, 422, 423, 959, 0, 428, 429, 427,
	0, 430, 431, 432, 433, 434, 271, 435, 272, 867,
	0, 910, 911, 912, 913, 0, 443, 0, 437, 438,
	960, 439, 961, 844, 440, 441, 442, 0, 444, 445,
	0, 827, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 875, 454, 455, 456, 505, 907, 954, 0, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 824, 0, 0, 0, 0, 0, 0, 0,
	822, 0, 0, 0, 0, 820, 821, 1556, 0, 0,
	0, 0, 0, 0, 850, 0, 0, 0, 0, 848,
	880, 837, 838, 839, 835, 836, 849, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 929, 854,
	0, 0, 0, 221, 222, 223, 224, 465, 895, 874,
	906, 864, 905, 904, 0, 228, 866, 865, 231, 232,
	233, 856, 928, 234, 964, 965, 471, 0, 235, 935,
	0, 918, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	938, 249, 250, 921, 919, 920, 925, 923, 922, 924,
	251, 252, 253, 254, 909, 256, 902, 901, 826, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 900, 263,
	0, 264, 0, 265, 266, 0, 832, 267, 268, 270,
	273, 269, 274, 275, 276, 277, 955, 956, 845, 212,
	0, 0, 0, 0, 0, 278, 279, 280, 899, 897,
	898, 0, 283, 0, 284, 0, 0, 939, 285, 286,
	0, 287, 962, 0, 855, 288, 0, 289, 290, 291,
	292, 930, 931, 934, 340, 941, 293, 294, 0, 295,
	296, 876, 0, 0, 0, 213, 297, 299, 306, 0,
	940, 300, 888, 879, 890, 892, 893, 894, 889, 0,
	881, 0, 307, 942, 932, 943, 308, 309, 310, 944,
	914, 915, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 963, 945, 320, 321, 946, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 868, 333, 947, 336, 337, 339,
	338, 823, 214, 948, 846, 933, 903, 341, 342, 0,
	877, 344, 878, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 949, 351, 950, 957, 352, 346, 353, 354,
	355, 356, 357, 358, 0, 359, 360, 958, 361, 494,
	362, 0, 363, 0, 364, 365, 366, 367, 368, 369,
	896, 370, 371, 0, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	951, 386, 387, 388, 389, 833, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 869,
	870, 872, 873, 403, 407, 410, 411, 926, 412, 392,
	393, 413, 952, 414, 891, 871, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 937, 421, 422, 423, 959,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 867, 0, 910, 911, 912, 913, 0,
	443, 0, 437, 438, 960, 439, 961, 844, 440, 441,
	442, 0, 444, 445, 0, 827, 446, 447, 448, 449,
	450, 452, 927, 453, 0, 875, 454, 455, 456, 505,
	907, 954, 2781, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 824, 0, 0, 0,
	0, 0, 0, 0, 822, 0, 0, 0, 0, 820,
	821, 880, 837, 838, 839, 835, 836, 849, 850, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 929,
	854, 0, 0, 0, 221, 222, 223, 224, 465, 895,
	874, 906, 864, 905, 904, 0, 228, 866, 865, 231,
	232, 233, 856, 928, 234, 964, 965, 471, 0, 235,
	935, 0, 918, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 938, 249, 250, 921, 919, 920, 925, 923, 922,
	924, 251, 252, 253, 254, 909, 256, 902, 901, 826,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 900,
	263, 0, 264, 0, 265, 266, 0, 832, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 955, 956, 845,
	212, 0, 0, 0, 0, 0, 278, 279, 280, 899,
	897, 898, 0, 283, 0, 284, 0, 0, 939, 285,
	286, 0, 287, 962, 0, 855, 288, 0, 289, 290,
	291, 292, 930, 931, 934, 340, 941, 293, 294, 0,
	295, 296, 876, 0, 0, 0, 1928, 297, 299, 306,
	0, 940, 300, 888, 879, 890, 892, 893, 894, 889,
	0, 881, 0, 307, 942, 932, 943, 308, 309, 310,
	944, 914, 915, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 963, 945, 320, 321, 946, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 868, 333, 947, 336, 337,
	339, 338, 823, 214, 948, 846, 933, 903, 341, 342,
	0, 877, 344, 878, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 949, 351, 950, 957, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 958, 361,
	494, 362, 1927, 363, 0, 364, 365, 366, 367, 368,
	369, 896, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 951, 386, 387, 388, 389, 833, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	869, 870, 872, 873, 403, 407, 410, 411, 926, 412,
	392, 393, 413, 952, 414, 891, 871, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 937, 421, 422, 423,
	959, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 867, 0, 910, 911, 912, 913,
	0, 443, 0, 437, 438, 960, 439, 961, 844, 440,
	441, 442, 0, 444, 445, 0, 827, 446, 447, 448,
	449, 450, 452, 927, 453, 0, 875, 454, 455, 456,
	505, 907, 954, 0, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 824, 0, 0,
	0, 0, 0, 0, 0, 822, 0, 0, 0, 0,
	820, 821, 880, 837, 838, 839, 835, 836, 849, 850,
	0, 0, 0, 0, 848, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	929, 854, 0, 0, 0, 221, 222, 223, 224, 465,
	895, 874, 906, 864, 905, 904, 0, 228, 866, 865,
	231, 232, 233, 856, 928, 234, 964, 965, 471, 0,
	235, 935, 0, 918, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 938, 249, 250, 921, 919, 920, 925, 923,
	922, 924, 251, 252, 253, 254, 909, 256, 902, 901,
	826, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	900, 263, 0, 264, 0, 265, 266, 0, 832, 267,
	268, 270, 273, 269, 274, 275, 276, 277, 955, 956,
	845, 212, 0, 0, 0, 0, 0, 278, 279, 280,
	899, 897, 898, 0, 283, 0, 284, 0, 0, 939,
	285, 286, 0, 287, 962, 0, 855, 288, 0, 289,
	290, 291, 292, 930, 931, 934, 340, 941, 293, 294,
	0, 295, 296, 876, 0, 0, 0, 213, 297, 299,
	306, 0, 940, 300, 888, 879, 890, 892, 893, 894,
	889, 0, 881, 0, 307, 942, 932, 943, 308, 309,
	310, 944, 914, 915, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 963, 945, 320, 321, 946,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 868, 333, 947, 336,
	337, 339, 338, 823, 214, 948, 846, 933, 903, 341,
	342, 0, 877, 344, 878, 828, 0, 347, 348, 349,
	0, 0, 350, 491, 949, 351, 950, 957, 352, 346,
	353, 354, 355, 356, 357, 358, 0, 359, 360, 958,
	361, 494, 362, 0, 363, 0, 364, 365, 366, 367,
	368, 369, 896, 370, 371, 0, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 951, 386, 387, 388, 389, 833, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 0, 408,
	409, 869, 870, 872, 873, 403, 407, 410, 411, 926,
	412, 392, 393, 413, 952, 414, 891, 871, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 937, 421, 422,
	423, 959, 0, 428, 429, 427, 0, 430, 431, 432,
	433, 434, 271, 435, 272, 867, 0, 910, 911, 912,
	913, 0, 443, 0, 437, 438, 960, 439, 961, 844,
	440, 441, 442, 0, 444, 445, 0, 827, 446, 447,
	448, 449, 450, 452, 927, 453, 0, 875, 454, 455,
	456, 505, 907, 954, 0, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 824, 0,
	0, 0, 0, 0, 0, 0, 822, 0, 0, 0,
	0, 820, 821, 880, 837, 838, 839, 835, 836, 849,
	850, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 929, 854, 0, 0, 0, 221, 222, 223, 224,
	465, 895, 874, 906, 864, 905, 904, 0, 228, 866,
	865, 231, 232, 233, 856, 928, 234, 964, 965, 471,
	0, 235, 935, 0, 918, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 938, 249, 250, 921, 919, 920, 925,
	923, 922, 924, 251, 252, 253, 254, 909, 256, 902,
	901, 826, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 900, 263, 0, 264, 0, 265, 266, 0, 832,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 955,
	956, 845, 212, 0, 0, 0, 0, 0, 278, 279,
	280, 899, 897, 898, 0, 283, 0, 284, 0, 0,
	939, 285, 286, 0, 287, 962, 0, 855, 288, 0,
	289, 290, 291, 292, 930, 931, 934, 340, 941, 293,
	294, 0, 295, 296, 876, 0, 0, 0, 213, 297,
	299, 306, 0, 940, 300, 888, 879, 890, 892, 893,
	894, 889, 0, 881, 0, 307, 942, 932, 943, 308,
	309, 310, 944, 914, 915, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 963, 945, 320, 321,
	946, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 868, 333, 947,
	336, 337, 339, 338, 823, 214, 948, 846, 933, 903,
	341, 342, 0, 877, 344, 878, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 949, 351, 950, 957, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	958, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 896, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 951, 386, 387, 388, 389, 833, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 869, 870, 872, 873, 403, 407, 410, 411,
	926, 412, 392, 393, 413, 952, 414, 891, 871, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 937, 421,
	422, 423, 959, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 867, 0, 910, 911,
	912, 913, 0, 443, 0, 437, 438, 960, 439, 961,
	844, 440, 441, 442, 0, 444, 445, 0, 827, 446,
	447, 448, 449, 450, 452, 927, 453, 0, 875, 454,
	455, 456, 505, 907, 954, 0, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 824,
	0, 0, 0, 0, 0, 0, 0, 822, 0, 0,
	0, 0, 820, 821, 1556, 0, 0, 0, 0, 0,
	0, 850, 0, 0, 0, 0, 848, 880, 837, 838,
	839, 835, 836, 849, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 929, 854, 0, 0, 0,
	221, 222, 223, 224, 465, 895, 874, 906, 864, 905,
	904, 0, 228, 866, 865, 231, 232, 233, 856, 928,
	234, 964, 965, 471, 0, 235, 935, 0, 918, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 938, 249, 250,
	921, 919, 920, 925, 923, 922, 924, 251, 252, 253,
	254, 909, 256, 902, 901, 826, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 900, 263, 0, 264, 0,
	265, 266, 0, 832, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 955, 956, 845, 212, 0, 0, 0,
	0, 0, 278, 279, 280, 899, 897, 898, 0, 283,
	0, 284, 0, 2104, 939, 285, 286, 0, 287, 962,
	0, 855, 288, 0, 289, 290, 291, 292, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 876, 0,
	0, 0, 213, 297, 299, 306, 0, 940, 300, 888,
	879, 890, 892, 893, 894, 889, 0, 881, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 914, 915, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 868, 333, 947, 336, 337, 339, 338, 823, 214,
	948, 846, 933, 903, 341, 342, 0, 877, 344, 878,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 958, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 896, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 951, 386, 387,
	388, 389, 833, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 869, 870, 872, 873,
	403, 407, 410, 411, 926, 412, 392, 393, 413, 952,
	414, 891, 871, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 937, 421, 422, 423, 959, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	867, 0, 910, 911, 912, 913, 0, 443, 0, 437,
	438, 960, 439, 961, 844, 440, 441, 442, 0, 444,
	445, 0, 827, 446, 447, 448, 449, 450, 452, 927,
	453, 0, 875, 454, 455, 456, 505, 907, 954, 0,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 824, 0, 0, 0, 0, 0, 0,
	0, 822, 0, 0, 0, 0, 820, 821, 880, 837,
	838, 839, 835, 836, 849, 850, 0, 0, 0, 0,
	848, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 929, 854, 0, 0,
	0, 221, 222, 223, 224, 465, 895, 874, 906, 864,
	905, 904, 0, 228, 866, 865, 231, 232, 233, 856,
	928, 234, 964, 965, 471, 0, 235, 935, 0, 918,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 938, 249,
	250, 921, 919, 920, 925, 923, 922, 924, 251, 252,
	253, 254, 909, 256, 902, 901, 826, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 900, 263, 0, 264,
	0, 265, 266, 0, 832, 267, 268, 270, 273, 269,
	274, 275, 276, 277, 955, 956, 845, 212, 0, 0,
	0, 0, 0, 278, 279, 280, 899, 897, 898, 0,
	283, 0, 284, 0, 0, 939, 285, 286, 0, 287,
	962, 0, 855, 288, 0, 289, 290, 291, 292, 930,
	931, 934, 340, 941, 293, 294, 0, 295, 296, 876,
	0, 0, 0, 213, 297, 299, 306, 0, 940, 300,
	888, 879, 890, 892, 893, 894, 889, 0, 881, 0,
	307, 942, 932, 943, 308, 309, 310, 944, 914, 915,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 963, 945, 320, 321, 946, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 868, 333, 947, 336, 337, 339, 338, 823,
	214, 948, 846, 933, 903, 341, 342, 0, 877, 344,
	878, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	949, 351, 950, 957, 352, 346, 353, 354, 355, 356,
	357, 358, 0, 359, 360, 958, 361, 494, 362, 0,
	363, 0, 364, 365, 366, 367, 368, 369, 896, 370,
	371, 0, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 951, 386,
	387, 388, 389, 833, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 869, 870, 872,
	873, 403, 407, 410, 411, 926, 412, 392, 393, 413,
	952, 414, 891, 871, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 937, 421, 422, 423, 959, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 867, 0, 910, 911, 912, 913, 0, 443, 0,
	437, 438, 960, 439, 961, 844, 440, 441, 442, 0,
	444, 445, 0, 827, 446, 447, 448, 449, 450, 452,
	927, 453, 0, 875, 454, 455, 456, 505, 907, 954,
	0, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 824, 0, 0, 0, 0, 0,
	0, 0, 822, 0, 0, 0, 0, 820, 821, 0,
	0, 0, 0, 0, 0, 0, 850, 1494, 0, 0,
	2109, 848, 880, 837, 838, 839, 835, 836, 849, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	929, 854, 0, 0, 0, 221, 222, 223, 224, 465,
	895, 874, 906, 864, 905, 904, 0, 228, 866, 865,
	231, 232, 233, 856, 928, 234, 964, 965, 471, 0,
	235, 935, 0, 918, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 938, 249, 250, 921, 919, 920, 925, 923,
	922, 924, 251, 252, 253, 254, 909, 256, 902, 901,
	826, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	900, 263, 0, 264, 0, 265, 266, 0, 832, 267,
	268, 270, 273, 269, 274, 275, 276, 277, 955, 956,
	845, 212, 0, 0, 0, 0, 0, 278, 279, 280,
	899, 897, 898, 0, 283, 0, 284, 0, 0, 939,
	285, 286, 0, 287, 962, 0, 855, 288, 0, 289,
	290, 291, 292, 930, 931, 934, 340, 941, 293, 294,
	0, 295, 296, 876, 0, 0, 0, 213, 297, 299,
	306, 0, 940, 300, 888, 879, 890, 892, 893, 894,
	889, 0, 881, 0, 307, 942, 932, 943, 308, 309,
	310, 944, 914, 915, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 963, 945, 320, 321, 946,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 868, 333, 947, 336,
	337, 339, 338, 823, 214, 948, 846, 933, 903, 341,
	342, 0, 877, 344, 878, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 949, 351, 950, 957, 352, 346,
	353, 354, 355, 356, 357, 358, 0, 359, 360, 958,
	361, 494, 362, 0, 363, 0, 364, 365, 366, 367,
	368, 369, 896, 370, 371, 0, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 951, 386, 387, 388, 389, 833, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 0, 408,
	409, 869, 870, 872, 873, 403, 407, 410, 411, 926,
	412, 392, 393, 413, 952, 414, 891, 871, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 937, 421, 422,
	423, 959, 0, 428, 429, 427, 0, 430, 431, 432,
	433, 434, 271, 435, 272, 867, 0, 910, 911, 912,
	913, 0, 443, 0, 437, 438, 960, 439, 961, 844,
	440, 441, 442, 0, 444, 445, 0, 827, 446, 447,
	448, 449, 450, 452, 927, 453, 0, 875, 454, 455,
	456, 505, 907, 954, 0, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 824, 0,
	0, 0, 0, 0, 0, 0, 822, 0, 0, 0,
	0, 820, 821, 0, 0, 0, 0, 0, 0, 0,
	850, 0, 0, 0, 2107, 848, 880, 837, 838, 839,
	835, 836, 849, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 929, 854, 0, 0, 0, 221,
	222, 223, 224, 465, 895, 874, 906, 864, 905, 904,
	0, 228, 866, 865, 231, 232, 233, 856, 928, 234,
	964, 965, 471, 0, 235, 935, 0, 918, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 938, 249, 250, 921,
	919, 920, 925, 923, 922, 924, 251, 252, 253, 254,
	909, 256, 902, 901, 826, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 900, 263, 0, 264, 0, 265,
	266, 0, 832, 267, 268, 270, 273, 269, 274, 275,
	276, 277, 955, 956, 845, 212, 0, 0, 0, 0,
	0, 278, 279, 280, 899, 897, 898, 0, 283, 0,
	284, 0, 0, 939, 285, 286, 0, 287, 962, 0,
	855, 288, 0, 289, 290, 291, 292, 930, 931, 934,
	340, 941, 293, 294, 0, 295, 296, 876, 0, 0,
	0, 213, 297, 299, 306, 0, 940, 300, 888, 879,
	890, 892, 893, 894, 889, 0, 881, 0, 307, 942,
	932, 943, 308, 309, 310, 944, 914, 915, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 963,
	945, 320, 321, 946, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	868, 333, 947, 336, 337, 339, 338, 823, 214, 948,
	846, 933, 903, 341, 342, 0, 877, 344, 878, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 949, 351,
	950, 957, 352, 346, 353, 354, 355, 356, 357, 358,
	0, 359, 360, 958, 361, 494, 362, 0, 363, 0,
	364, 365, 366, 367, 368, 369, 896, 370, 371, 0,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 951, 386, 387, 388,
	389, 833, 390, 0, 391, 395, 396, 397, 398, 399,
	400, 401, 0, 408, 409, 869, 870, 872, 873, 403,
	407, 410, 411, 926, 412, 392, 393, 413, 952, 414,
	891, 871, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 937, 421, 422, 423, 959, 0, 428, 429, 427,
	0, 430, 431, 432, 433, 434, 271, 435, 272, 867,
	0, 910, 911, 912, 913, 0, 443, 0, 437, 438,
	960, 439, 961, 844, 440, 441, 442, 0, 444, 445,
	0, 827, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 875, 454, 455, 456, 505, 907, 954, 0, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 824, 0, 0, 0, 0, 0, 0, 0,
	822, 0, 0, 0, 0, 820, 821, 0, 0, 0,
	0, 0, 0, 0, 850, 0, 0, 0, 2095, 848,
	880, 837, 838, 839, 835, 836, 849, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 929, 854,
	0, 0, 0, 221, 222, 223, 224, 465, 895, 874,
	906, 864, 905, 904, 0, 228, 866, 865, 231, 232,
	233, 856, 928, 234, 964, 965, 471, 0, 235, 935,
	0, 918, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	938, 249, 250, 921, 919, 920, 925, 923, 922, 924,
	251, 252, 253, 254, 909, 256, 902, 901, 826, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 900, 263,
	0, 264, 0, 265, 266, 0, 832, 267, 268, 270,
	273, 269, 274, 275, 276, 277, 955, 956, 845, 212,
	0, 0, 0, 0, 0, 278, 279, 280, 899, 897,
	898, 0, 283, 0, 284, 0, 0, 939, 285, 286,
	0, 287, 962, 0, 855, 288, 0, 289, 290, 291,
	292, 930, 931, 934, 340, 941, 293, 294, 0, 295,
	296, 876, 0, 0, 0, 213, 297, 299, 306, 0,
	940, 300, 888, 879, 890, 892, 893, 894, 889, 0,
	881, 0, 307, 942, 932, 943, 308, 309, 310, 944,
	914, 915, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 963, 945, 320, 321, 946, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 868, 333, 947, 336, 337, 339,
	338, 823, 214, 948, 846, 933, 903, 341, 342, 0,
	877, 344, 878, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 949, 351, 950, 957, 352, 346, 353, 354,
	355, 356, 357, 358, 0, 359, 360, 958, 361, 494,
	362, 0, 363, 0, 364, 365, 366, 367, 368, 369,
	896, 370, 371, 0, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	951, 386, 387, 388, 389, 833, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 869,
	870, 872, 873, 403, 407, 410, 411, 926, 412, 392,
	393, 413, 952, 414, 891, 871, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 937, 421, 422, 423, 959,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 867, 0, 910, 911, 912, 913, 0,
	443, 0, 437, 438, 960, 439, 961, 844, 440, 441,
	442, 0, 444, 445, 0, 827, 446, 447, 448, 449,
	450, 452, 927, 453, 0, 875, 454, 455, 456, 505,
	907, 954, 0, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 824, 0, 0, 0,
	0, 0, 0, 0, 822, 0, 0, 0, 0, 820,
	821, 0, 0, 0, 0, 0, 0, 0, 850, 0,
	0, 0, 2084, 848, 880, 837, 838, 839, 835, 836,
	849, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 929, 854, 0, 0, 0, 221, 222, 223,
	224, 465, 895, 874, 906, 864, 905, 904, 0, 228,
	866, 865, 231, 232, 233, 856, 928, 234, 964, 965,
	471, 0, 235, 935, 0, 918, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 938, 249, 250, 921, 919, 920,
	925, 923, 922, 924, 251, 252, 253, 254, 909, 256,
	902, 901, 826, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 900, 263, 0, 264, 0, 265, 266, 0,
	832, 267, 268, 270, 273, 269, 274, 275, 276, 277,
	955, 956, 845, 212, 0, 0, 0, 0, 0, 278,
	279, 280, 899, 897, 898, 0, 283, 0, 284, 0,
	0, 939, 285, 286, 0, 287, 962, 0, 855, 288,
	0, 289, 290, 291, 292, 930, 931, 934, 340, 941,
	293, 294, 0, 295, 296, 876, 0, 0, 0, 213,
	297, 299, 306, 0, 940, 300, 888, 879, 890, 892,
	893, 894, 889, 0, 881, 0, 307, 942, 932, 943,
	308, 309, 310, 944, 914, 915, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 963, 945, 320,
	321, 946, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 868, 333,
	947, 336, 337, 339, 338, 823, 214, 948, 846, 933,
	903, 341, 342, 0, 877, 344, 878, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 957,
	352, 346, 353, 354, 355, 356, 357, 358, 0, 359,
	360, 958, 361, 494, 362, 0, 363, 0, 364, 365,
	366, 367, 368, 369, 896, 370, 371, 0, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 951, 386, 387, 388, 389, 833,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	0, 408, 409, 869, 870, 872, 873, 403, 407, 410,
	411, 926, 412, 392, 393, 413, 952, 414, 891, 871,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 937,
	421, 422, 423, 959, 0, 428, 429, 427, 0, 430,
	431, 432, 433, 434, 271, 435, 272, 867, 0, 910,
	911, 912, 913, 0, 443, 0, 437, 438, 960, 439,
	961, 844, 440, 441, 442, 0, 444, 445, 0, 827,
	446, 447, 448, 449, 450, 452, 927, 453, 0, 875,
	454, 455, 456, 505, 907, 954, 0, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	824, 0, 0, 0, 0, 0, 0, 0, 822, 0,
	0, 0, 0, 820, 821, 0, 0, 0, 0, 0,
	0, 0, 850, 0, 0, 0, 2082, 848, 2074, 837,
	838, 839, 835, 836, 849, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 929, 854, 0, 0,
	0, 221, 222, 223, 224, 465, 895, 874, 906, 864,
	905, 904, 0, 228, 866, 865, 231, 232, 233, 856,
	928, 234, 964, 965, 471, 0, 235, 935, 0, 918,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 938, 249,
	250, 921, 919, 920, 925, 923, 922, 924, 251, 252,
	253, 254, 909, 2077, 902, 901, 826, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 900, 263, 0, 264,
	0, 265, 266, 0, 832, 267, 268, 270, 273, 269,
	274, 275, 276, 277, 955, 956, 845, 212, 0, 0,
	0, 0, 0, 278, 279, 280, 899, 897, 898, 0,
	283, 0, 284, 0, 0, 939, 285, 286, 0, 287,
	962, 0, 855, 288, 0, 289, 290, 291, 2078, 930,
	931, 934, 340, 941, 293, 294, 0, 295, 296, 876,
	0, 0, 0, 213, 297, 299, 306, 0, 940, 300,
	888, 879, 890, 892, 893, 894, 889, 0, 881, 0,
	307, 942, 932, 943, 308, 309, 310, 944, 914, 915,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 963, 945, 320, 321, 946, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 2079,
	2076, 334, 868, 333, 947, 336, 337, 339, 338, 823,
	214, 948, 846, 933, 903, 341, 342, 0, 877, 344,
	878, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	949, 351, 950, 957, 352, 346, 353, 354, 355, 356,
	357, 358, 0, 359, 360, 958, 361, 494, 362, 0,
	363, 0, 364, 365, 366, 367, 368, 369, 896, 370,
	371, 0, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 951, 386,
	387, 388, 389, 833, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 2080, 0, 408, 409, 869, 870, 872,
	873, 403, 407, 410, 411, 926, 412, 392, 393, 413,
	952, 414, 891, 871, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 937, 421, 422, 423, 959, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 867, 0, 910, 911, 912, 913, 0, 443, 0,
	437, 438, 960, 439, 961, 844, 440, 441, 442, 0,
	444, 445, 0, 827, 446, 447, 448, 449, 450, 452,
	927, 453, 0, 875, 454, 455, 456, 505, 907, 954,
	0, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 2075, 463, 824, 0, 0, 0, 0, 0,
	0, 0, 822, 0, 0, 0, 0, 820, 821, 0,
	0, 0, 0, 0, 0, 0, 850, 0, 0, 0,
	2071, 848, 2074, 837, 838, 839, 835, 836, 849, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	929, 854, 0, 0, 0, 221, 222, 223, 224, 465,
	895, 874, 906, 864, 905, 904, 0, 228, 866, 865,
	231, 232, 233, 856, 928, 234, 964, 965, 471, 0,
	235, 935, 0, 918, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 938, 249, 250, 921, 919, 920, 925, 923,
	922, 924, 251, 252, 253, 254, 909, 2077, 902, 901,
	826, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	900, 263, 0, 264, 0, 265, 266, 0, 832, 267,
	268, 270, 273, 269, 274, 275, 276, 277, 955, 956,
	845, 212, 0, 0, 0, 0, 0, 278, 279, 280,
	899, 897, 898, 0, 283, 0, 284, 0, 0, 939,
	285, 286, 0, 287, 962, 0, 855, 288, 0, 289,
	290, 291, 2078, 930, 931, 934, 340, 941, 293, 294,
	0, 295, 296, 876, 0, 0, 0, 213, 297, 299,
	306, 0, 940, 300, 888, 879, 890, 892, 893, 894,
	889, 0, 881, 0, 307, 942, 932, 943, 308, 309,
	310, 944, 914, 915, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 963, 945, 320, 321, 946,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 2079, 2076, 334, 868, 333, 947, 336,
	337, 339, 338, 823, 214, 948, 846, 933, 903, 341,
	342, 0, 877, 344, 878, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 949, 351, 950, 957, 352, 346,
	353, 354, 355, 356, 357, 358, 0, 359, 360, 958,
	361, 494, 362, 0, 363, 0, 364, 365, 366, 367,
	368, 369, 896, 370, 371, 0, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 951, 386, 387, 388, 389, 833, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 2080, 0, 408,
	409, 869, 870, 872, 873, 403, 407, 410, 411, 926,
	412, 392, 393, 413, 952, 414, 891, 871, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 937, 421, 422,
	423, 959, 0, 428, 429, 427, 0, 430, 431, 432,
	433, 434, 271, 435, 272, 867, 0, 910, 911, 912,
	913, 0, 443, 0, 437, 438, 960, 439, 961, 844,
	440, 441, 442, 0, 444, 445, 0, 827, 446, 447,
	448, 449, 450, 452, 927, 453, 0, 875, 454, 455,
	456, 505, 907, 954, 0, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 2075, 463, 824, 0,
	0, 0, 0, 0, 0, 0, 822, 0, 0, 0,
	0, 820, 821, 880, 837, 838, 839, 835, 836, 849,
	850, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 929, 854, 0, 0, 0, 221, 222, 223, 224,
	465, 895, 874, 906, 864, 905, 904, 0, 228, 866,
	865, 231, 232, 233, 856, 928, 234, 964, 965, 471,
	0, 235, 935, 0, 918, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 938, 249, 250, 921, 919, 920, 925,
	923, 922, 924, 251, 252, 253, 254, 909, 256, 902,
	901, 826, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 900, 263, 0, 264, 0, 265, 266, 0, 832,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 955,
	956, 845, 212, 0, 0, 0, 0, 0, 278, 279,
	280, 899, 897, 898, 0, 283, 0, 284, 0, 0,
	939, 285, 286, 0, 287, 962, 0, 855, 288, 0,
	289, 290, 291, 292, 930, 931, 934, 340, 941, 293,
	294, 0, 295, 296, 876, 0, 0, 0, 213, 297,
	299, 306, 0, 940, 300, 888, 879, 890, 892, 893,
	894, 889, 0, 881, 0, 307, 942, 932, 943, 308,
	309, 310, 944, 914, 915, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 963, 945, 320, 321,
	946, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 868, 333, 947,
	336, 337, 339, 338, 823, 214, 948, 846, 933, 903,
	341, 342, 0, 877, 344, 878, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 949, 351, 950, 957, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	958, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 896, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 951, 386, 387, 388, 389, 833, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 869, 870, 872, 873, 403, 407, 410, 411,
	926, 412, 392, 393, 413, 952, 414, 891, 871, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 937, 421,
	422, 423, 959, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 867, 0, 910, 911,
	912, 913, 0, 443, 0, 437, 438, 960, 439, 961,
	844, 440, 441, 442, 0, 444, 445, 0, 827, 446,
	447, 448, 449, 450, 452, 927, 453, 0, 875, 454,
	455, 456, 505, 907, 954, 0, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 824,
	0, 0, 0, 0, 0, 0, 0, 822, 0, 0,
	0, 0, 820, 821, 0, 0, 0, 0, 0, 1502,
	0, 850, 0, 0, 0, 0, 848, 880, 837, 838,
	839, 835, 836, 849, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 1915,
	220, 0, 0, 0, 0, 929, 854, 0, 0, 0,
	221, 222, 223, 224, 465, 895, 874, 906, 864, 905,
	904, 0, 228, 866, 865, 231, 232, 233, 856, 928,
	234, 964, 965, 471, 0, 235, 935, 0, 918, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 938, 249, 250,
	921, 919, 920, 925, 923, 922, 924, 251, 252, 253,
	254, 909, 256, 902, 901, 826, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 900, 263, 0, 264, 0,
	265, 266, 0, 832, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 955, 956, 845, 212, 0, 0, 0,
	0, 0, 278, 279, 280, 899, 897, 898, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 962,
	0, 855, 288, 0, 289, 290, 291, 292, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 876, 0,
	0, 0, 213, 297, 299, 306, 0, 940, 300, 888,
	879, 890, 892, 893, 894, 889, 0, 881, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 914, 915, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 868, 333, 947, 336, 337, 339, 338, 823, 214,
	948, 846, 933, 903, 341, 342, 0, 877, 344, 878,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 958, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 896, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 951, 386, 387,
	388, 389, 833, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 869, 870, 872, 873,
	403, 407, 410, 411, 926, 412, 392, 393, 413, 952,
	414, 891, 871, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 937, 421, 422, 423, 959, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	867, 0, 910, 911, 912, 913, 0, 443, 0, 437,
	438, 960, 439, 961, 844, 440, 441, 442, 0, 444,
	445, 0, 827, 446, 447, 448, 449, 450, 452, 927,
	453, 0, 875, 454, 455, 456, 505, 907, 954, 0,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 824, 0, 0, 0, 0, 0, 0,
	0, 822, 0, 0, 0, 0, 820, 821, 0, 0,
	0, 0, 0, 0, 0, 850, 0, 0, 0, 1195,
	848, 880, 837, 838, 839, 835, 836, 849, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 929,
	854, 0, 0, 0, 221, 222, 223, 224, 465, 895,
	874, 906, 864, 905, 904, 0, 228, 866, 865, 231,
	232, 233, 856, 928, 234, 964, 965, 471, 0, 235,
	935, 0, 918, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 938, 249, 250, 921, 919, 920, 925, 923, 922,
	924, 251, 252, 253, 254, 909, 256, 902, 901, 826,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 900,
	263, 0, 264, 0, 265, 266, 0, 832, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 955, 956, 845,
	212, 0, 0, 0, 0, 0, 278, 279, 280, 899,
	897, 898, 0, 283, 0, 284, 0, 0, 939, 285,
	286, 0, 287, 962, 0, 855, 288, 0, 289, 290,
	291, 292, 1194, 931, 934, 340, 941, 293, 294, 0,
	295, 296, 876, 0, 0, 0, 213, 297, 299, 306,
	0, 940, 300, 888, 879, 890, 892, 893, 894, 889,
	0, 881, 0, 307, 942, 932, 943, 308, 309, 310,
	944, 914, 915, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 963, 945, 320, 321, 946, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 868, 333, 947, 336, 337,
	339, 338, 823, 214, 948, 846, 933, 903, 341, 342,
	0, 877, 344, 878, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 949, 351, 950, 957, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 958, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 896, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 951, 386, 387, 388, 389, 833, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	869, 870, 872, 873, 403, 407, 410, 411, 926, 412,
	392, 393, 413, 952, 414, 891, 871, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 937, 421, 422, 423,
	959, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 867, 0, 910, 911, 912, 913,
	0, 443, 0, 437, 438, 960, 439, 961, 844, 440,
	441, 442, 0, 444, 445, 0, 827, 446, 447, 448,
	449, 450, 452, 927, 453, 0, 875, 454, 455, 456,
	505, 907, 954, 0, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 824, 0, 0,
	0, 0, 0, 0, 0, 822, 0, 0, 0, 0,
	820, 821, 0, 0, 0, 0, 0, 0, 0, 850,
	0, 0, 0, 1189, 848, 880, 837, 838, 839, 835,
	836, 849, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 929, 854, 0, 0, 0, 221, 222,
	223, 224, 465, 895, 874, 906, 864, 905, 904, 0,
	228, 866, 865, 231, 232, 233, 856, 928, 234, 964,
	965, 471, 0, 235, 935, 0, 918, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 938, 249, 250, 921, 919,
	920, 925, 923, 922, 924, 251, 252, 253, 254, 909,
	256, 902, 901, 826, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 900, 263, 0, 264, 0, 265, 266,
	0, 832, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 955, 956, 845, 212, 0, 0, 0, 0, 0,
	278, 279, 280, 899, 897, 898, 0, 283, 0, 284,
	0, 0, 939, 285, 286, 0, 287, 962, 0, 855,
	288, 0, 289, 290, 291, 292, 1188, 931, 934, 340,
	941, 293, 294, 0, 295, 296, 876, 0, 0, 0,
	213, 297, 299, 306, 0, 940, 300, 888, 879, 890,
	892, 893, 894, 889, 0, 881, 0, 307, 942, 932,
	943, 308, 309, 310, 944, 914, 915, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 963, 945,
	320, 321, 946, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 868,
	333, 947, 336, 337, 339, 338, 823, 214, 948, 846,
	933, 903, 341, 342, 0, 877, 344, 878, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 949, 351, 950,
	957, 352, 346, 353, 354, 355, 356, 357, 358, 0,
	359, 360, 958, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 367, 368, 369, 896, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 951, 386, 387, 388, 389,
	833, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 869, 870, 872, 873, 403, 407,
	410, 411, 926, 412, 392, 393, 413, 952, 414, 891,
	871, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	937, 421, 422, 423, 959, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 867, 0,
	910, 911, 912, 913, 0, 443, 0, 437, 438, 960,
	439, 961, 844, 440, 441, 442, 0, 444, 445, 0,
	827, 446, 447, 448, 449, 450, 452, 927, 453, 0,
	875, 454, 455, 456, 505, 907, 954, 0, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 824, 0, 0, 0, 0, 0, 0, 0, 822,
	0, 0, 0, 0, 820, 821, 0, 0, 0, 0,
	0, 0, 0, 850, 0, 0, 0, 1184, 848, 880,
	837, 838, 839, 835, 836, 849, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 929, 854, 0,
	0, 0, 221, 222, 223, 224, 465, 895, 874, 906,
	864, 905, 904, 0, 228, 866, 865, 231, 232, 233,
	856, 928, 234, 964, 965, 471, 0, 235, 935, 0,
	918, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 938,
	249, 250, 921, 919, 920, 925, 923, 922, 924, 251,
	252, 253, 254, 909, 256, 902, 901, 826, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 900, 263, 0,
	264, 0, 265, 266, 0, 832, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 955, 956, 845, 212, 0,
	0, 0, 0, 0, 278, 279, 280, 899, 897, 898,
	0, 283, 0, 284, 0, 0, 939, 285, 286, 0,
	287, 962, 0, 855, 288, 0, 289, 290, 291, 292,
	930, 931, 934, 340, 941, 293, 294, 0, 295, 296,
	876, 0, 0, 0, 213, 297, 299, 306, 0, 940,
	300, 888, 879, 890, 892, 893, 894, 889, 0, 881,
	0, 307, 942, 932, 943, 308, 309, 310, 944, 914,
	915, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 963, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 868, 333, 947, 336, 337, 339, 338,
	823, 214, 948, 846, 933, 903, 341, 342, 0, 877,
	344, 878, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 957, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 958, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 896,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 951,
	386, 387, 388, 389, 833, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 869, 870,
	872, 873, 403, 407, 410, 411, 926, 412, 392, 393,
	413, 952, 414, 891, 871, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 937, 421, 422, 423, 959, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 867, 0, 910, 911, 912, 913, 0, 443,
	0, 437, 438, 960, 439, 961, 844, 440, 441, 442,
	0, 444, 445, 0, 827, 446, 447, 448, 449, 450,
	452, 927, 453, 0, 875, 454, 455, 456, 505, 907,
	954, 0, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 824, 0, 0, 0, 0,
	0, 0, 0, 822, 0, 0, 0, 0, 820, 821,
	880, 837, 838, 839, 835, 836, 849, 850, 0, 0,
	0, 0, 848, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 929, 854,
	0, 0, 0, 221, 222, 223, 224, 465, 895, 874,
	906, 864, 905, 904, 0, 228, 866, 865, 231, 232,
	233, 856, 928, 234, 964, 965, 471, 0, 235, 935,
	0, 918, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	938, 249, 250, 921, 919, 920, 925, 923, 922, 924,
	251, 252, 253, 254, 909, 256, 902, 901, 826, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 900, 263,
	0, 264, 0, 265, 266, 0, 832, 267, 268, 270,
	273, 269, 274, 275, 276, 277, 955, 956, 845, 212,
	0, 0, 0, 0, 0, 278, 279, 280, 899, 897,
	898, 0, 283, 0, 284, 0, 0, 939, 285, 286,
	0, 287, 962, 0, 855, 288, 0, 289, 290, 291,
	292, 930, 931, 934, 340, 941, 293, 294, 0, 295,
	296, 876, 0, 0, 0, 213, 297, 299, 306, 0,
	940, 300, 888, 879, 890, 892, 893, 894, 889, 0,
	881, 0, 307, 942, 932, 943, 308, 309, 310, 944,
	914, 915, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 963, 945, 320, 321, 946, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 868, 333, 947, 336, 337, 339,
	338, 823, 214, 948, 846, 933, 903, 341, 342, 0,
	877, 344, 878, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 949, 351, 950, 957, 352, 346, 353, 354,
	355, 356, 357, 358, 0, 359, 360, 958, 361, 494,
	362, 0, 363, 0, 364, 365, 366, 367, 368, 369,
	896, 370, 371, 0, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	951, 386, 387, 388, 389, 833, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 869,
	870, 872, 873, 403, 407, 410, 411, 926, 412, 392,
	393, 413, 952, 414, 891, 871, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 937, 421, 422, 423, 959,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 867, 0, 910, 911, 912, 913, 0,
	443, 0, 437, 438, 960, 439, 961, 844, 440, 441,
	442, 0, 444, 445, 0, 827, 446, 447, 448, 449,
	450, 452, 927, 453, 0, 875, 454, 455, 456, 505,
	907, 954, 0, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 824, 0, 0, 0,
	0, 0, 0, 0, 822, 0, 0, 0, 0, 820,
	821, 880, 837, 838, 839, 835, 836, 849, 850, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 929,
	854, 0, 0, 0, 221, 222, 223, 224, 465, 895,
	874, 906, 864, 905, 904, 0, 228, 866, 865, 231,
	232, 233, 856, 928, 234, 964, 965, 471, 0, 235,
	935, 0, 918, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 938, 249, 3404, 921, 919, 920, 925, 923, 922,
	924, 251, 252, 253, 254, 909, 256, 902, 901, 826,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 900,
	263, 0, 264, 0, 265, 266, 0, 832, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 955, 956, 845,
	212, 0, 0, 0, 0, 0, 278, 279, 280, 899,
	897, 898, 0, 283, 0, 284, 0, 0, 939, 285,
	286, 0, 287, 962, 0, 855, 288, 0, 289, 290,
	291, 292, 930, 931, 934, 340, 941, 293, 294, 0,
	295, 296, 876, 0, 0, 0, 213, 297, 299, 306,
	0, 940, 300, 888, 879, 890, 892, 893, 894, 889,
	0, 881, 0, 307, 942, 932, 943, 308, 309, 310,
	944, 914, 915, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 963, 945, 320, 321, 946, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 868, 333, 947, 336, 337,
	339, 338, 823, 214, 948, 846, 933, 903, 341, 342,
	0, 877, 344, 878, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 949, 351, 950, 957, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 958, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 896, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 951, 386, 387, 388, 389, 833, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	869, 870, 872, 873, 403, 407, 410, 411, 926, 412,
	392, 393, 413, 952, 414, 891, 871, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 937, 421, 422, 423,
	959, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 867, 0, 910, 911, 912, 913,
	0, 443, 0, 437, 438, 960, 439, 961, 844, 440,
	441, 442, 0, 3403, 445, 0, 827, 446, 447, 448,
	449, 450, 452, 927, 453, 0, 875, 454, 455, 456,
	505, 907, 954, 0, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 824, 0, 0,
	0, 0, 0, 0, 0, 822, 0, 0, 0, 0,
	820, 821, 880, 837, 838, 839, 835, 836, 849, 850,
	0, 0, 0, 0, 848, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	929, 854, 0, 0, 0, 221, 222, 223, 224, 3402,
	895, 874, 906, 864, 905, 904, 0, 228, 866, 865,
	231, 232, 233, 856, 928, 234, 964, 965, 471, 0,
	235, 935, 0, 918, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 938, 249, 3404, 921, 919, 920, 925, 923,
	922, 924, 251, 252, 253, 254, 909, 256, 902, 901,
	826, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	900, 263, 0, 264, 0, 265, 266, 0, 832, 267,
	268, 270, 273, 269, 274, 275, 276, 277, 955, 956,
	845, 212, 0, 0, 0, 0, 0, 278, 279, 280,
	899, 897, 898, 0, 283, 0, 284, 0, 0, 939,
	285, 286, 0, 287, 962, 0, 855, 288, 0, 289,
	290, 291, 292, 930, 931, 934, 340, 941, 293, 294,
	0, 295, 296, 876, 0, 0, 0, 213, 297, 299,
	306, 0, 940, 300, 888, 879, 890, 892, 893, 894,
	889, 0, 881, 0, 307, 942, 932, 943, 308, 309,
	310, 944, 914, 915, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 963, 945, 320, 321, 946,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 868, 333, 947, 336,
	337, 339, 338, 823, 214, 948, 846, 933, 903, 341,
	342, 0, 877, 344, 878, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 949, 351, 950, 957, 352, 346,
	353, 354, 355, 356, 357, 358, 0, 359, 360, 958,
	361, 494, 362, 0, 363, 0, 364, 365, 366, 367,
	368, 369, 896, 370, 371, 0, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 951, 386, 387, 388, 389, 833, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 0, 408,
	409, 869, 870, 872, 873, 403, 407, 410, 411, 926,
	412, 392, 393, 413, 952, 414, 891, 871, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 937, 421, 422,
	423, 959, 0, 428, 429, 427, 0, 430, 431, 432,
	433, 434, 271, 435, 272, 867, 0, 910, 911, 912,
	913, 0, 443, 0, 437, 438, 960, 439, 961, 844,
	440, 441, 442, 0, 3403, 445, 0, 827, 446, 447,
	448, 449, 450, 452, 927, 453, 0, 875, 454, 455,
	456, 505, 907, 954, 0, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 824, 0,
	0, 0, 0, 0, 0, 0, 822, 0, 0, 0,
	0, 820, 821, 880, 837, 838, 839, 835, 836, 849,
	850, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 929, 854, 0, 0, 0, 221, 222, 223, 224,
	465, 895, 874, 906, 864, 905, 904, 0, 228, 866,
	865, 231, 232, 233, 856, 928, 234, 964, 965, 471,
	0, 235, 935, 0, 918, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 938, 249, 250, 921, 919, 920, 925,
	923, 922, 924, 251, 252, 253, 254, 909, 256, 902,
	901, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 900, 263, 0, 264, 0, 265, 266, 0, 832,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 955,
	956, 845, 212, 0, 0, 0, 0, 0, 278, 279,
	280, 899, 897, 898, 0, 283, 0, 284, 0, 0,
	939, 285, 286, 0, 287, 962, 0, 855, 288, 0,
	289, 290, 291, 292, 930, 931, 934, 340, 941, 293,
	294, 0, 295, 296, 876, 0, 0, 0, 213, 297,
	299, 306, 0, 940, 300, 888, 879, 890, 892, 893,
	894, 889, 0, 881, 0, 307, 942, 932, 943, 308,
	309, 310, 944, 914, 915, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 963, 945, 320, 321,
	946, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 868, 333, 947,
	336, 337, 339, 338, 0, 214, 948, 846, 933, 903,
	341, 342, 0, 877, 344, 878, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 949, 351, 950, 957, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	958, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 896, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 951, 386, 387, 388, 389, 833, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 869, 870, 872, 873, 403, 407, 410, 411,
	926, 412, 392, 393, 413, 952, 414, 891, 871, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 937, 421,
	422, 423, 959, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 867, 0, 910, 911,
	912, 913, 0, 443, 0, 437, 438, 960, 439, 961,
	844, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 927, 453, 0, 875, 454,
	455, 456, 505, 907, 954, 0, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 880,
	837, 838, 839, 835, 836, 849, 0, 2092, 0, 0,
	0, 0, 2090, 2091, 0, 0, 215, 216, 217, 218,
	219, 850, 220, 0, 0, 0, 848, 929, 854, 0,
	0, 0, 221, 222, 223, 224, 0, 895, 874, 906,
	864, 905, 904, 0, 228, 866, 865, 231, 232, 233,
	856, 928, 234, 964, 965, 471, 0, 235, 935, 0,
	918, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 938,
	249, 3404, 921, 919, 920, 925, 923, 922, 924, 251,
	252, 253, 254, 909, 256, 902, 901, 826, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 900, 263, 0,
	264, 0, 265, 266, 0, 832, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 955, 956, 845, 212, 0,
	0, 0, 0, 0, 278, 279, 280, 899, 897, 898,
	0, 283, 0, 284, 0, 0, 939, 285, 286, 0,
	287, 962, 0, 855, 288, 0, 289, 290, 291, 292,
	930, 931, 934, 340, 0, 293, 294, 0, 295, 296,
	876, 0, 0, 0, 213, 297, 299, 306, 0, 940,
	300, 888, 879, 890, 892, 893, 894, 889, 0, 881,
	0, 307, 0, 932, 0, 308, 309, 310, 944, 914,
	915, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 963, 945, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 868, 333, 947, 336, 337, 339, 338,
	823, 214, 0, 846, 933, 903, 341, 342, 0, 877,
	344, 878, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 957, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 958, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 896,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 951,
	386, 387, 388, 389, 833, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 869, 870,
	872, 873, 403, 407, 410, 411, 926, 412, 392, 393,
	413, 0, 414, 891, 871, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 937, 421, 422, 423, 959, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 867, 0, 910, 911, 912, 913, 0, 443,
	0, 437, 438, 960, 439, 961, 844, 440, 441, 442,
	0, 3403, 445, 0, 827, 446, 447, 448, 449, 450,
	452, 927, 453, 0, 875, 454, 455, 456, 505, 907,
	954, 0, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 813, 0, 1001, 0, 820, 821,
	0, 0, 0, 0, 0, 0, 0, 850, 0, 0,
	0, 0, 848, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 929, 0, 0, 0, 0, 221,
	222, 223, 224, 465, 466, 225, 467, 226, 227, 468,
	0, 228, 229, 230, 231, 232, 233, 0, 928, 234,
	469, 470, 471, 0, 235, 935, 0, 918, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 938, 249, 250, 921,
	919, 920, 925, 923, 922, 924, 251, 252, 253, 254,
	255, 256, 473, 474, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 475, 267, 268, 270, 273, 269, 274, 275,
	276, 277, 955, 956, 0, 212, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 939, 285, 286, 0, 287, 962, 0,
	480, 288, 0, 289, 290, 291, 292, 930, 931, 934,
	340, 941, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 213, 297, 299, 306, 0, 940, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 942,
	932, 943, 308, 309, 310, 944, 311, 312, 0, 0,
	313, 314, 315, 316, 988, 318, 317, 0, 319, 963,
	945, 320, 321, 946, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 947, 336, 337, 339, 338, 0, 214, 948,
	0, 933, 490, 341, 342, 0, 343, 344, 345, 0,
	993, 347, 348, 349, 0, 0, 350, 491, 949, 351,
	950, 957, 352, 346, 353, 354, 355, 356, 357, 358,
	0, 359, 360, 958, 361, 494, 362, 0, 363, 0,
	364, 365, 366, 367, 368, 369, 495, 370, 371, 0,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 951, 386, 387, 388,
	389, 496, 995, 0, 391, 395, 396, 397, 398, 399,
	400, 401, 178, 408, 409, 402, 404, 405, 406, 403,
	407, 410, 411, 926, 412, 392, 393, 413, 952, 414,
	497, 415, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 425, 421, 422, 423, 959, 0, 428, 429, 427,
	180, 430, 431, 432, 433, 434, 271, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	960, 439, 961, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 451, 454, 455, 456, 1305, 506, 507, 0, 458,
	457, 508, 1001, 0, 0, 172, 459, 460, 509, 461,
	462, 463, 0, 173, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	929, 0, 985, 0, 1588, 221, 222, 223, 224, 465,
	466, 225, 467, 226, 227, 468, 0, 228, 229, 230,
	231, 232, 233, 0, 928, 234, 469, 470, 471, 0,
	235, 935, 0, 918, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 938, 249, 250, 921, 919, 920, 925, 923,
	922, 924, 251, 252, 253, 254, 255, 256, 473, 474,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 475, 267,
	268, 270, 273, 269, 274, 275, 276, 277, 955, 956,
	0, 212, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 939,
	285, 286, 0, 287, 962, 0, 480, 288, 0, 289,
	290, 291, 292, 930, 931, 934, 340, 941, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 213, 297, 299,
	306, 0, 940, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 942, 932, 943, 308, 309,
	310, 944, 311, 312, 0, 0, 313, 314, 315, 316,
	988, 318, 317, 0, 319, 963, 945, 320, 321, 946,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 947, 336,
	337, 339, 338, 0, 214, 948, 0, 933, 490, 341,
	342, 0, 343, 344, 345, 0, 993, 347, 348, 349,
	0, 0, 350, 491, 949, 351, 950, 957, 352, 346,
	353, 354, 355, 356, 357, 358, 0, 359, 360, 958,
	361, 494, 362, 0, 363, 0, 364, 365, 366, 367,
	368, 369, 495, 370, 371, 0, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 951, 386, 387, 388, 389, 496, 995, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 178, 408,
	409, 402, 404, 405, 406, 403, 407, 410, 411, 926,
	412, 392, 393, 413, 952, 414, 497, 415, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 425, 421, 422,
	423, 959, 0, 428, 429, 427, 180, 430, 431, 432,
	433, 434, 271, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 960, 439, 961, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 927, 453, 0, 451, 454, 455,
	456, 1305, 506, 507, 0, 458, 457, 508, 0, 0,
	0, 172, 459, 460, 509, 461, 462, 463, 0, 173,
	0, 0, 2536, 0, 1001, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 985, 0,
	1588, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 929, 0, 0, 0, 0, 221, 222, 223,
	224, 465, 466, 225, 467, 226, 227, 468, 0, 228,
	229, 230, 231, 232, 233, 0, 928, 234, 469, 470,
	471, 0, 235, 935, 0, 918, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 938, 249, 250, 921, 919, 920,
	925, 923, 922, 924, 251, 252, 253, 254, 255, 256,
	473, 474, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	475, 267, 268, 270, 273, 269, 274, 275, 276, 277,
	955, 956, 0, 212, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 939, 285, 286, 0, 287, 962, 0, 480, 288,
	0, 289, 290, 291, 292, 930, 931, 934, 340, 941,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 213,
	297, 299, 306, 0, 940, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 942, 932, 943,
	308, 309, 310, 944, 311, 312, 0, 0, 313, 314,
	315, 316, 988, 318, 317, 0, 319, 963, 945, 320,
	321, 946, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	947, 336, 337, 339, 338, 0, 214, 948, 0, 933,
	490, 341, 342, 0, 343, 344, 345, 0, 993, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 957,
	352, 346, 353, 354, 355, 356, 357, 358, 0, 359,
	360, 958, 361, 494, 362, 0, 363, 0, 364, 365,
	366, 367, 368, 369, 495, 370, 371, 0, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 951, 386, 387, 388, 389, 496,
	995, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	0, 408, 409, 402, 404, 405, 406, 403, 407, 410,
	411, 926, 412, 392, 393, 413, 952, 414, 497, 415,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 425,
	421, 422, 423, 959, 0, 428, 429, 427, 0, 430,
	431, 432, 433, 434, 271, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 960, 439,
	961, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 927, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	0, 984, 0, 1001, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	985, 929, 990, 0, 0, 0, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 0, 228, 229,
	230, 231, 232, 233, 0, 928, 234, 469, 470, 471,
	0, 235, 935, 0, 918, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 938, 249, 250, 921, 919, 920, 925,
	923, 922, 924, 251, 252, 253, 254, 255, 256, 473,
	474, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 955,
	956, 0, 212, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	939, 285, 286, 0, 287, 962, 0, 480, 288, 0,
	289, 290, 291, 292, 930, 931, 934, 340, 941, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 213, 297,
	299, 306, 0, 940, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 942, 932, 943, 308,
	309, 310, 944, 311, 312, 0, 0, 313, 314, 315,
	316, 988, 318, 317, 0, 319, 963, 945, 320, 321,
	946, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 947,
	336, 337, 339, 338, 0, 214, 948, 0, 933, 490,
	341, 342, 0, 343, 344, 345, 0, 993, 347, 348,
	349, 0, 0, 350, 491, 949, 351, 950, 957, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	958, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 495, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 951, 386, 387, 388, 389, 496, 995,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	926, 412, 392, 393, 413, 952, 414, 497, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 959, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 960, 439, 961,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 927, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 1001,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 929, 0, 985,
	0, 990, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 0, 228, 229, 230, 231, 232, 233,
	0, 928, 234, 469, 470, 471, 0, 235, 935, 0,
	918, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 938,
	249, 250, 921, 919, 920, 925, 923, 922, 924, 251,
	252, 253, 254, 255, 256, 473, 474, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 955, 956, 0, 212, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 939, 285, 286, 0,
	287, 962, 0, 480, 288, 0, 289, 290, 291, 292,
	930, 931, 934, 340, 941, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 213, 297, 299, 306, 0, 940,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 942, 932, 943, 308, 309, 310, 944, 311,
	312, 0, 0, 313, 314, 315, 316, 988, 318, 317,
	0, 319, 963, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 947, 336, 337, 339, 338,
	0, 214, 948, 0, 933, 490, 341, 342, 0, 343,
	344, 345, 0, 993, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 957, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 958, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 951,
	386, 387, 388, 389, 496, 995, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 926, 412, 392, 393,
	413, 952, 414, 497, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 959, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 960, 439, 961, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 927, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 1001, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 929, 0, 985, 0, 990, 221, 222,
	223, 224, 465, 466, 225, 467, 226, 227, 468, 0,
	228, 229, 230, 231, 232, 233, 0, 928, 234, 469,
	470, 471, 0, 235, 935, 0, 918, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 938, 249, 250, 921, 919,
	920, 925, 923, 922, 924, 251, 252, 253, 254, 255,
	256, 473, 474, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 475, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 955, 956, 0, 212, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 939, 285, 286, 0, 287, 962, 0, 480,
	288, 0, 289, 290, 291, 292, 930, 931, 934, 340,
	941, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	213, 297, 299, 306, 0, 940, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 942, 932,
	943, 308, 309, 310, 944, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 963, 945,
	320, 321, 946, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 947, 336, 337, 339, 338, 0, 214, 948, 0,
	933, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 949, 351, 950,
	957, 352, 346, 353, 354, 355, 356, 357, 358, 0,
	359, 360, 958, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 367, 368, 369, 495, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 951, 386, 387, 388, 389,
	496, 995, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 926, 412, 392, 393, 413, 952, 414, 497,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 959, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 960,
	439, 961, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 927, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 813, 0, 1159, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 464, 0, 1483, 0, 0, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 469, 470, 471,
	0, 235, 472, 0, 1063, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 938, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 473,
	474, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 476,
	477, 0, 212, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	939, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 941, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 940, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 942, 487, 943, 308,
	309, 310, 944, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 945, 320, 321,
	946, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 947,
	336, 337, 339, 338, 0, 0, 948, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 949, 351, 950, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	493, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 495, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 951, 386, 387, 388, 389, 496, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 178,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 952, 414, 497, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 498, 0, 428, 429, 427, 180, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 1305, 506, 507, 0, 458, 457, 508, 1302,
	0, 1159, 172, 459, 460, 509, 461, 462, 463, 0,
	173, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 464,
	0, 148, 0, 0, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 469, 470, 471, 0, 235,
	472, 0, 1063, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 938, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 473, 474, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 0,
	212, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 939, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 941, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 940, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 942, 487, 943, 308, 309, 310,
	944, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 945, 320, 321, 946, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 947, 336, 337,
	339, 338, 0, 0, 948, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 949, 351, 950, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 493, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 951, 386, 387, 388, 389, 496, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 178, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 952, 414, 497, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 0, 428, 429, 427, 180, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	1305, 506, 507, 0, 458, 457, 508, 0, 0, 0,
	172, 459, 460, 509, 461, 462, 463, 0, 173, 0,
	0, 0, 0, 1159, 1158, 0, 0, 0, 0, 1156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 148,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 469, 470, 471,
	0, 235, 472, 0, 1063, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 938, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 473,
	474, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 476,
	477, 0, 212, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	939, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 941, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 940, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 942, 487, 943, 308,
	309, 310, 944, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 945, 320, 321,
	946, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 947,
	336, 337, 339, 338, 0, 0, 948, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 949, 351, 950, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	493, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 495, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 951, 386, 387, 388, 389, 496, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 952, 414, 497, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 498, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 1159,
	1158, 0, 0, 0, 0, 1156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 2730, 220, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 469, 470, 471, 0, 235, 472, 0,
	1063, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 938,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 473, 474, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 476, 477, 0, 212, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 939, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 941, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 940,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 942, 487, 943, 308, 309, 310, 944, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 947, 336, 337, 339, 338,
	0, 0, 948, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 493, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 951,
	386, 387, 388, 389, 496, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 0, 412, 392, 393,
	413, 952, 414, 497, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 498, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 1001, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 929, 0, 0, 0, 1309, 221, 222,
	223, 224, 465, 466, 225, 467, 226, 227, 468, 0,
	228, 229, 230, 231, 232, 233, 0, 928, 234, 469,
	470, 471, 0, 235, 935, 0, 918, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 938, 249, 250, 921, 919,
	920, 925, 923, 922, 924, 251, 252, 253, 254, 255,
	256, 473, 474, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 475, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 955, 956, 0, 212, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 939, 285, 286, 0, 287, 962, 0, 480,
	288, 0, 289, 290, 291, 292, 930, 931, 934, 340,
	941, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	213, 297, 299, 306, 0, 940, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 942, 932,
	943, 308, 309, 310, 944, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 963, 945,
	320, 321, 946, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 947, 336, 337, 339, 338, 0, 214, 948, 0,
	933, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 949, 351, 950,
	957, 352, 346, 353, 354, 355, 356, 357, 358, 0,
	359, 360, 958, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 367, 368, 369, 495, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 951, 386, 387, 388, 389,
	496, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 926, 412, 392, 393, 413, 952, 414, 497,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 959, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 960,
	439, 961, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 927, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 813, 0, 209, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 469, 470, 471,
	0, 235, 472, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 473,
	474, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	493, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 495, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 496, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 178,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 0, 414, 497, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 498, 0, 428, 429, 427, 180, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 1305, 506, 507, 0, 458, 457, 508, 209,
	0, 0, 172, 459, 460, 509, 461, 462, 463, 0,
	173, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 464, 0, 0,
	0, 148, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 469, 470, 471, 0, 235, 472, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 473, 474, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 476, 477, 0, 212, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 213, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 214, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 493, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 496, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 0, 412, 392, 393,
	413, 0, 414, 497, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 498, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 209, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 464, 0, 0, 0, 1593, 221, 222,
	223, 224, 465, 466, 225, 467, 226, 227, 468, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 469,
	470, 471, 0, 235, 472, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 473, 474, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 475, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 476, 477, 0, 212, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	213, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 214, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 0,
	359, 360, 493, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 367, 368, 369, 495, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	496, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 0, 414, 497,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 498, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 209, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 464,
	0, 2683, 0, 0, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 469, 470, 471, 0, 235,
	472, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 473, 474, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 493, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 496, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 0, 414, 497, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 209, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 464, 0, 0, 0, 2327,
	221, 222, 223, 224, 465, 466, 225, 467, 226, 227,
	468, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 469, 470, 471, 0, 235, 472, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 473, 474, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 475, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 493, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 495, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 496, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 0, 412, 392, 393, 413, 0,
	414, 497, 415, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 498, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 687, 0, 578, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 464, 0, 2805, 0, 0, 221, 222,
	223, 224, 465, 466, 225, 467, 226, 227, 468, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 469,
	470, 471, 0, 235, 472, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 584, 254, 255,
	256, 473, 474, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 475, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 476, 477, 0, 212, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	213, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 214, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 0,
	359, 360, 493, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 367, 368, 369, 495, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	496, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 0, 414, 497,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 498, 0, 428, 429, 427, 583,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 0, 577, 0, 578, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 587, 220, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 221, 222, 223,
	224, 465, 466, 225, 467, 226, 227, 468, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 469, 470,
	471, 0, 235, 472, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 584, 254, 255, 256,
	473, 474, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	475, 267, 268, 270, 273, 269, 274, 275, 276, 277,
	476, 477, 0, 212, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 213,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 214, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 0, 359,
	360, 493, 361, 494, 362, 0, 363, 0, 364, 365,
	366, 367, 368, 369, 495, 370, 371, 0, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 496,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	0, 408, 409, 402, 404, 405, 406, 403, 407, 410,
	411, 0, 412, 392, 393, 413, 0, 414, 497, 415,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 425,
	421, 422, 423, 498, 0, 428, 429, 427, 583, 430,
	431, 432, 433, 434, 271, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 578, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 464, 587, 0, 0, 0, 221,
	222, 223, 224, 465, 466, 225, 467, 226, 227, 468,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	469, 470, 471, 0, 235, 472, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 584, 254,
	255, 256, 473, 474, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 475, 267, 268, 270, 273, 269, 274, 275,
	276, 277, 476, 477, 0, 212, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 213, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 214, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	0, 359, 360, 493, 361, 494, 362, 0, 363, 0,
	364, 365, 366, 367, 368, 369, 495, 370, 371, 0,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 0, 1876, 387, 388,
	389, 496, 390, 0, 391, 395, 396, 397, 398, 399,
	400, 401, 0, 408, 409, 402, 404, 405, 406, 403,
	407, 410, 411, 0, 412, 392, 393, 413, 0, 414,
	497, 415, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 425, 421, 422, 423, 498, 0, 428, 429, 427,
	583, 430, 431, 432, 433, 434, 271, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 578, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 464, 587, 0, 0,
	0, 221, 222, 223, 224, 465, 466, 225, 467, 226,
	227, 468, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 469, 470, 471, 0, 235, 472, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	584, 254, 255, 256, 473, 474, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 475, 267, 268, 270, 273, 269,
	274, 275, 276, 277, 476, 477, 0, 212, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 213, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	214, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 0, 359, 360, 493, 361, 494, 362, 0,
	363, 0, 364, 365, 366, 367, 368, 369, 495, 370,
	371, 0, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 496, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 402, 404, 405,
	406, 403, 407, 410, 411, 0, 412, 392, 393, 413,
	0, 414, 497, 415, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 425, 421, 422, 423, 498, 0, 428,
	429, 427, 583, 430, 431, 432, 433, 434, 271, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	209, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 464, 587,
	0, 0, 0, 221, 222, 223, 224, 465, 466, 225,
	467, 226, 227, 468, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 469, 470, 471, 0, 235, 472,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 473, 474, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 475, 267, 268, 270,
	273, 269, 274, 275, 276, 277, 476, 477, 0, 212,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 481, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 213, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 214, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 0, 359, 360, 493, 361, 494,
	362, 0, 363, 0, 364, 365, 366, 367, 368, 369,
	495, 370, 371, 0, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 496, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 402,
	404, 405, 406, 403, 407, 410, 411, 0, 412, 392,
	393, 413, 0, 414, 497, 415, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 425, 421, 422, 423, 498,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 1332, 0, 1159, 1158,
	0, 0, 0, 0, 1156, 0, 0, 0, 0, 0,
	0, 587, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 221, 222, 223, 224, 465, 466, 225, 467, 226,
	227, 468, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 469, 470, 471, 0, 235, 472, 0, 1063,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 938, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 473, 474, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 475, 267, 268, 270, 273, 269,
	274, 275, 276, 277, 476, 477, 0, 212, 0, 0,
	0, 0, 0, 1331, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 939, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 941, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 940, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 942, 487, 943, 308, 309, 310, 944, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 945, 320, 321, 946, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 947, 336, 337, 339, 338, 0,
	0, 948, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	949, 351, 950, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 0, 359, 360, 493, 361, 494, 362, 0,
	363, 0, 364, 365, 366, 367, 1330, 369, 495, 370,
	371, 0, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 951, 386,
	387, 388, 389, 496, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 402, 404, 405,
	406, 403, 407, 410, 411, 0, 412, 392, 393, 413,
	952, 414, 497, 415, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 425, 421, 422, 423, 498, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 1300, 0, 1159, 1158, 0, 0,
	0, 0, 1156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 221,
	222, 223, 224, 465, 466, 225, 467, 226, 227, 468,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	469, 470, 471, 0, 235, 472, 0, 1063, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 938, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 473, 474, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 475, 267, 268, 270, 273, 269, 274, 275,
	276, 277, 476, 477, 0, 212, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 939, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 1299, 482, 483,
	340, 941, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 940, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 942,
	487, 943, 308, 309, 310, 944, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	945, 320, 321, 946, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 947, 336, 337, 339, 338, 0, 0, 948,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 949, 351,
	950, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	0, 359, 360, 493, 361, 494, 362, 0, 363, 0,
	364, 365, 366, 367, 368, 369, 495, 370, 371, 0,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 951, 386, 387, 388,
	389, 496, 390, 0, 391, 395, 396, 397, 398, 399,
	400, 401, 0, 408, 409, 402, 404, 405, 406, 403,
	407, 410, 411, 0, 412, 392, 393, 413, 952, 414,
	497, 415, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 425, 421, 422, 423, 498, 0, 428, 429, 427,
	0, 430, 431, 432, 433, 434, 271, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 1296, 0, 1159, 1158, 0, 0, 0, 0,
	1156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 221, 222, 223,
	224, 465, 466, 225, 467, 226, 227, 468, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 469, 470,
	471, 0, 235, 472, 0, 1063, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 938, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	473, 474, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	475, 267, 268, 270, 273, 269, 274, 275, 276, 277,
	476, 477, 0, 212, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 939, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 1295, 482, 483, 340, 941,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 940, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 942, 487, 943,
	308, 309, 310, 944, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 945, 320,
	321, 946, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	947, 336, 337, 339, 338, 0, 0, 948, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 0, 359,
	360, 493, 361, 494, 362, 0, 363, 0, 364, 365,
	366, 367, 368, 369, 495, 370, 371, 0, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 951, 386, 387, 388, 389, 496,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	0, 408, 409, 402, 404, 405, 406, 403, 407, 410,
	411, 0, 412, 392, 393, 413, 952, 414, 497, 415,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 425,
	421, 422, 423, 498, 0, 428, 429, 427, 0, 430,
	431, 432, 433, 434, 271, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	1234, 0, 1159, 1158, 0, 0, 0, 0, 1156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 221, 222, 223, 224, 465,
	466, 225, 467, 226, 227, 468, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 469, 470, 471, 0,
	235, 472, 0, 1063, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 938, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 473, 474,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 475, 267,
	268, 270, 273, 269, 274, 275, 276, 277, 476, 477,
	0, 212, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 939,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 1233, 482, 483, 340, 941, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 940, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 942, 487, 943, 308, 309,
	310, 944, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 945, 320, 321, 946,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 947, 336,
	337, 339, 338, 0, 0, 948, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 949, 351, 950, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 0, 359, 360, 493,
	361, 494, 362, 0, 363, 0, 364, 365, 366, 367,
	368, 369, 495, 370, 371, 0, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 951, 386, 387, 388, 389, 496, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 0, 408,
	409, 402, 404, 405, 406, 403, 407, 410, 411, 0,
	412, 392, 393, 413, 952, 414, 497, 415, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 425, 421, 422,
	423, 498, 0, 428, 429, 427, 0, 430, 431, 432,
	433, 434, 271, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 0, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 1231, 0,
	1159, 1158, 0, 0, 0, 0, 1156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 221, 222, 223, 224, 465, 466, 225,
	467, 226, 227, 468, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 469, 470, 471, 0, 235, 472,
	0, 1063, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	938, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 473, 474, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 475, 267, 268, 270,
	273, 269, 274, 275, 276, 277, 476, 477, 0, 212,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 939, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 1230, 482, 483, 340, 941, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	940, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 942, 487, 943, 308, 309, 310, 944,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 945, 320, 321, 946, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 947, 336, 337, 339,
	338, 0, 0, 948, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 949, 351, 950, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 0, 359, 360, 493, 361, 494,
	362, 0, 363, 0, 364, 365, 366, 367, 368, 369,
	495, 370, 371, 0, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	951, 386, 387, 388, 389, 496, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 402,
	404, 405, 406, 403, 407, 410, 411, 0, 412, 392,
	393, 413, 952, 414, 497, 415, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 425, 421, 422, 423, 498,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 1152, 0, 1159, 1158,
	0, 0, 0, 0, 1156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 221, 222, 223, 224, 465, 466, 225, 467, 226,
	227, 468, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 469, 470, 471, 0, 235, 472, 0, 1063,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 938, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 473, 474, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 475, 267, 268, 270, 273, 269,
	274, 275, 276, 277, 476, 477, 0, 212, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 939, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 1154,
	482, 483, 340, 941, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 940, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 942, 487, 943, 308, 309, 310, 944, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 945, 320, 321, 946, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 947, 336, 337, 339, 338, 0,
	0, 948, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	949, 351, 950, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 0, 359, 360, 493, 361, 494, 362, 0,
	363, 0, 364, 365, 366, 367, 368, 369, 495, 370,
	371, 0, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 951, 386,
	387, 388, 389, 496, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 402, 404, 405,
	406, 403, 407, 410, 411, 0, 412, 392, 393, 413,
	952, 414, 497, 415, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 425, 421, 422, 423, 498, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 1159, 1158, 0, 0, 0, 0,
	1156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 221, 222, 223,
	224, 465, 466, 225, 467, 226, 227, 468, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 469, 470,
	471, 0, 235, 472, 0, 1063, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 938, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	473, 474, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	475, 267, 268, 270, 273, 269, 274, 275, 276, 277,
	476, 477, 0, 212, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 939, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 941,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 940, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 942, 487, 943,
	308, 309, 310, 944, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 945, 320,
	321, 946, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	947, 336, 337, 339, 338, 0, 0, 948, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 0, 359,
	360, 493, 361, 494, 362, 0, 363, 0, 364, 365,
	366, 367, 368, 369, 495, 370, 371, 0, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 951, 386, 387, 388, 389, 496,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	0, 408, 409, 402, 404, 405, 406, 403, 407, 410,
	411, 0, 412, 392, 393, 413, 952, 414, 497, 415,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 425,
	421, 422, 423, 498, 0, 428, 429, 427, 0, 430,
	431, 432, 433, 434, 271, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	1159, 1158, 0, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 221, 222, 223, 224, 465, 466, 225,
	467, 226, 227, 468, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 469, 470, 471, 0, 235, 472,
	0, 1063, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	938, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 473, 474, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 475, 267, 268, 270,
	273, 269, 274, 275, 276, 277, 476, 477, 0, 212,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 939, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 481, 482, 483, 340, 941, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	940, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 942, 487, 943, 308, 309, 310, 944,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 945, 320, 321, 946, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 947, 336, 337, 339,
	338, 0, 0, 948, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 949, 351, 950, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 0, 359, 360, 493, 361, 494,
	362, 0, 363, 0, 364, 365, 366, 367, 368, 369,
	495, 370, 371, 0, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	951, 386, 387, 388, 389, 496, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 402,
	404, 405, 406, 403, 407, 410, 411, 0, 412, 392,
	393, 413, 952, 414, 497, 415, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 425, 421, 422, 423, 498,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 1159, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 221, 222, 223, 224, 465,
	466, 225, 467, 226, 227, 468, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 469, 470, 471, 0,
	235, 472, 0, 1063, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 938, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 473, 474,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 475, 267,
	268, 270, 273, 269, 274, 275, 276, 277, 476, 477,
	0, 212, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 939,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 941, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 940, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 942, 487, 943, 308, 309,
	310, 944, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 945, 320, 321, 946,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 947, 336,
	337, 339, 338, 0, 0, 948, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 949, 351, 950, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 0, 359, 360, 493,
	361, 494, 362, 0, 363, 0, 364, 365, 366, 367,
	368, 369, 495, 370, 371, 0, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 951, 386, 387, 388, 389, 496, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 0, 408,
	409, 402, 404, 405, 406, 403, 407, 410, 411, 0,
	412, 392, 393, 413, 952, 414, 497, 415, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 425, 421, 422,
	423, 498, 0, 428, 429, 427, 0, 430, 431, 432,
	433, 434, 271, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 209, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 221, 222, 223,
	224, 465, 466, 225, 467, 226, 227, 468, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 469, 470,
	471, 2216, 235, 472, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 2213, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	473, 474, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	475, 267, 268, 270, 273, 269, 274, 275, 276, 277,
	476, 477, 0, 2362, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 2219,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 2359,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 2361, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 2358, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 0, 359,
	360, 493, 361, 494, 362, 2218, 363, 0, 364, 365,
	366, 367, 368, 369, 495, 370, 371, 0, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 496,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	0, 408, 409, 402, 404, 405, 406, 403, 407, 410,
	411, 0, 412, 392, 393, 413, 0, 414, 497, 415,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 425,
	421, 422, 423, 498, 0, 428, 429, 427, 0, 430,
	431, 432, 433, 434, 271, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 2360,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 209, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 221,
	222, 223, 224, 465, 466, 225, 467, 226, 227, 468,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	469, 470, 471, 2216, 235, 472, 0, 0, 2210, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 2213,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 473, 474, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 475, 267, 268, 270, 273, 269, 274, 275,
	276, 277, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 2219, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 2209, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 0, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	0, 359, 360, 493, 361, 494, 362, 2218, 363, 0,
	364, 365, 366, 367, 368, 369, 495, 370, 371, 0,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 496, 390, 0, 391, 395, 396, 397, 398, 399,
	400, 401, 0, 408, 409, 402, 404, 405, 406, 403,
	407, 410, 411, 0, 412, 392, 393, 413, 0, 414,
	497, 415, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 425, 421, 422, 423, 498, 0, 428, 429, 427,
	0, 430, 431, 432, 433, 434, 271, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 2217, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 1377, 0, 209, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 221, 222, 223,
	224, 465, 466, 225, 467, 226, 227, 468, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 469, 470,
	471, 0, 235, 472, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	473, 474, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	475, 267, 268, 270, 273, 269, 274, 275, 276, 277,
	476, 477, 0, 212, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 213,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 214, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 0, 359,
	360, 493, 361, 494, 362, 0, 363, 0, 364, 365,
	366, 367, 368, 369, 495, 370, 371, 0, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 496,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	0, 1380, 409, 402, 404, 405, 406, 403, 407, 410,
	411, 0, 412, 392, 393, 413, 0, 414, 497, 415,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 425,
	421, 422, 423, 498, 0, 428, 429, 427, 1378, 430,
	431, 432, 433, 434, 271, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 1379, 457, 508,
	1147, 0, 209, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 221, 222, 223, 224, 465,
	466, 225, 467, 226, 227, 468, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 469, 470, 471, 0,
	235, 472, 0, 0, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 473, 474,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 475, 267,
	268, 270, 273, 269, 274, 275, 276, 277, 476, 477,
	0, 212, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 1149, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 213, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 214, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 993, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 0, 359, 360, 493,
	361, 494, 362, 0, 363, 0, 364, 365, 366, 367,
	368, 369, 495, 370, 371, 0, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 496, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 0, 408,
	409, 402, 404, 405, 406, 403, 407, 410, 411, 0,
	412, 392, 393, 413, 0, 414, 497, 415, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 425, 421, 422,
	423, 498, 0, 428, 429, 427, 0, 430, 431, 432,
	433, 434, 271, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 0, 458, 457, 508, 1144, 0,
	209, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 221, 222, 223, 224, 465, 466, 225,
	467, 226, 227, 468, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 469, 470, 471, 0, 235, 472,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 473, 474, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 475, 267, 268, 270,
	273, 269, 274, 275, 276, 277, 476, 477, 0, 212,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 1146, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 213, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 214, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 993, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 0, 359, 360, 493, 361, 494,
	362, 0, 363, 0, 364, 365, 366, 367, 368, 369,
	495, 370, 371, 0, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 496, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 402,
	404, 405, 406, 403, 407, 410, 411, 0, 412, 392,
	393, 413, 0, 414, 497, 415, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 425, 421, 422, 423, 498,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 1051, 0, 209, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 221, 222, 223, 224, 465, 466, 225, 467, 226,
	227, 468, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 469, 470, 471, 0, 235, 472, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 473, 474, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 475, 267, 268, 270, 273, 269,
	274, 275, 276, 277, 476, 477, 0, 212, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 1053,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 213, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	214, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 993, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 0, 359, 360, 493, 361, 494, 362, 0,
	363, 0, 364, 365, 366, 367, 368, 369, 495, 370,
	371, 0, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 496, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 402, 404, 405,
	406, 403, 407, 410, 411, 0, 412, 392, 393, 413,
	0, 414, 497, 415, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 425, 421, 422, 423, 498, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 540, 0, 209, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 539, 219, 529, 220,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 221,
	222, 223, 224, 465, 466, 225, 467, 226, 227, 468,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	469, 470, 471, 0, 235, 472, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 532, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 473, 474, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 475, 267, 268, 270, 273, 269, 274, 275,
	276, 277, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 533, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 0, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	0, 359, 360, 493, 361, 494, 362, 0, 363, 0,
	364, 365, 366, 367, 368, 369, 495, 370, 371, 0,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 496, 390, 0, 391, 395, 396, 397, 398, 399,
	400, 401, 534, 408, 409, 402, 404, 405, 406, 403,
	407, 410, 411, 0, 412, 392, 393, 413, 0, 414,
	497, 415, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 425, 421, 422, 423, 498, 0, 428, 429, 427,
	0, 430, 431, 432, 433, 434, 271, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 528, 0, 209, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 529, 220, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 221, 222, 223,
	224, 465, 466, 225, 467, 226, 227, 468, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 469, 470,
	471, 0, 235, 472, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 532, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	473, 474, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	475, 267, 268, 270, 273, 269, 274, 275, 276, 277,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 533, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 0, 359,
	360, 493, 361, 494, 362, 0, 363, 0, 364, 365,
	366, 367, 368, 369, 495, 370, 371, 0, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 496,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	534, 408, 409, 402, 404, 405, 406, 403, 407, 410,
	411, 0, 412, 392, 393, 413, 0, 414, 497, 415,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 425,
	421, 422, 423, 498, 0, 428, 429, 427, 0, 430,
	431, 432, 433, 434, 271, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 209, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 221,
	222, 223, 224, 465, 466, 225, 467, 226, 227, 468,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	469, 470, 471, 0, 235, 472, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 473, 474, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 475, 267, 268, 270, 273, 269, 274, 275,
	276, 277, 476, 477, 0, 212, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 213, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 214, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	993, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	0, 359, 360, 493, 361, 494, 362, 0, 363, 0,
	364, 365, 366, 367, 368, 369, 495, 370, 371, 0,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 496, 390, 0, 391, 395, 396, 397, 398, 399,
	400, 401, 0, 408, 409, 402, 404, 405, 406, 403,
	407, 410, 411, 0, 412, 392, 393, 413, 0, 414,
	497, 415, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 425, 421, 422, 423, 498, 0, 428, 429, 427,
	0, 430, 431, 432, 433, 434, 271, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 2291, 0, 209, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 221, 222, 223,
	224, 465, 466, 225, 467, 226, 227, 468, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 469, 470,
	471, 0, 235, 472, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	473, 474, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	475, 267, 268, 270, 273, 269, 274, 275, 276, 277,
	476, 477, 0, 212, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 213,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 214, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 0, 359,
	360, 493, 361, 494, 362, 0, 363, 0, 364, 365,
	366, 367, 368, 369, 495, 370, 371, 0, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 496,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	0, 408, 409, 402, 404, 405, 406, 403, 407, 410,
	411, 0, 412, 392, 393, 413, 0, 414, 497, 415,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 425,
	421, 422, 423, 498, 0, 428, 429, 427, 0, 430,
	431, 432, 433, 434, 271, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	1859, 0, 209, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 221, 222, 223, 224, 465,
	466, 225, 467, 226, 227, 468, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 469, 470, 471, 0,
	235, 472, 0, 0, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 473, 474,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 475, 267,
	268, 270, 273, 269, 274, 275, 276, 277, 476, 477,
	0, 212, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 213, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 214, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 0, 359, 360, 493,
	361, 494, 362, 0, 363, 0, 364, 365, 366, 367,
	368, 369, 495, 370, 371, 0, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 496, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 0, 408,
	409, 402, 404, 405, 406, 403, 407, 410, 411, 0,
	412, 392, 393, 413, 0, 414, 497, 415, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 425, 421, 422,
	423, 498, 0, 428, 429, 427, 0, 430, 431, 432,
	433, 434, 271, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 209, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 221, 222, 223,
	224, 465, 466, 225, 467, 226, 227, 468, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 469, 470,
	471, 0, 235, 472, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	473, 474, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	475, 267, 268, 270, 273, 269, 274, 275, 276, 277,
	476, 477, 0, 212, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 213,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 214, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 0, 359,
	360, 493, 361, 494, 362, 0, 363, 0, 364, 365,
	366, 367, 368, 369, 495, 370, 371, 0, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 496,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	0, 408, 409, 402, 404, 405, 406, 403, 407, 410,
	411, 0, 412, 392, 393, 413, 0, 414, 497, 415,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 425,
	421, 422, 423, 498, 0, 428, 429, 427, 1796, 430,
	431, 432, 433, 434, 271, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	1789, 0, 209, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 221, 222, 223, 224, 465,
	466, 225, 467, 226, 227, 468, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 469, 470, 471, 0,
	235, 472, 0, 0, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 473, 474,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 475, 267,
	268, 270, 273, 269, 274, 275, 276, 277, 476, 477,
	0, 212, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 1788, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 213, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 214, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 0, 359, 360, 493,
	361, 494, 362, 0, 363, 0, 364, 365, 366, 367,
	368, 369, 495, 370, 371, 0, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 496, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 0, 408,
	409, 402, 404, 405, 406, 403, 407, 410, 411, 0,
	412, 392, 393, 413, 0, 414, 497, 415, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 425, 421, 422,
	423, 498, 0, 428, 429, 427, 0, 430, 431, 432,
	433, 434, 271, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 0, 458, 457, 508, 1784, 0,
	209, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 221, 222, 223, 224, 465, 466, 225,
	467, 226, 227, 468, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 469, 470, 471, 0, 235, 472,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 473, 474, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 475, 267, 268, 270,
	273, 269, 274, 275, 276, 277, 476, 477, 0, 212,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 1786, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 213, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 214, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 0, 359, 360, 493, 361, 494,
	362, 0, 363, 0, 364, 365, 366, 367, 368, 369,
	495, 370, 371, 0, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 496, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 402,
	404, 405, 406, 403, 407, 410, 411, 0, 412, 392,
	393, 413, 0, 414, 497, 415, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 425, 421, 422, 423, 498,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 1289, 0, 209, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 221, 222, 223, 224, 465, 466, 225, 467, 226,
	227, 468, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 469, 470, 471, 0, 235, 472, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 473, 474, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 475, 267, 268, 270, 273, 269,
	274, 275, 276, 277, 476, 477, 0, 212, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 1288,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 213, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	214, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 0, 359, 360, 493, 361, 494, 362, 0,
	363, 0, 364, 365, 366, 367, 368, 369, 495, 370,
	371, 0, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 496, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 402, 404, 405,
	406, 403, 407, 410, 411, 0, 412, 392, 393, 413,
	0, 414, 497, 415, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 425, 421, 422, 423, 498, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 1286, 0, 209, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 221,
	222, 223, 224, 465, 466, 225, 467, 226, 227, 468,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	469, 470, 471, 0, 235, 472, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 473, 474, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 475, 267, 268, 270, 273, 269, 274, 275,
	276, 277, 476, 477, 0, 212, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 1285, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 213, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 214, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	0, 359, 360, 493, 361, 494, 362, 0, 363, 0,
	364, 365, 366, 367, 368, 369, 495, 370, 371, 0,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 496, 390, 0, 391, 395, 396, 397, 398, 399,
	400, 401, 0, 408, 409, 402, 404, 405, 406, 403,
	407, 410, 411, 0, 412, 392, 393, 413, 0, 414,
	497, 415, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 425, 421, 422, 423, 498, 0, 428, 429, 427,
	0, 430, 431, 432, 433, 434, 271, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 1283, 0, 209, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 221, 222, 223,
	224, 465, 466, 225, 467, 226, 227, 468, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 469, 470,
	471, 0, 235, 472, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	473, 474, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	475, 267, 268, 270, 273, 269, 274, 275, 276, 277,
	476, 477, 0, 212, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 1282, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 213,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 214, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 0, 359,
	360, 493, 361, 494, 362, 0, 363, 0, 364, 365,
	366, 367, 368, 369, 495, 370, 371, 0, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 496,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	0, 408, 409, 402, 404, 405, 406, 403, 407, 410,
	411, 0, 412, 392, 393, 413, 0, 414, 497, 415,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 425,
	421, 422, 423, 498, 0, 428, 429, 427, 0, 430,
	431, 432, 433, 434, 271, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	1279, 0, 209, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 221, 222, 223, 224, 465,
	466, 225, 467, 226, 227, 468, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 469, 470, 471, 0,
	235, 472, 0, 0, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 473, 474,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 475, 267,
	268, 270, 273, 269, 274, 275, 276, 277, 476, 477,
	0, 212, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 1278, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 213, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 214, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 0, 359, 360, 493,
	361, 494, 362, 0, 363, 0, 364, 365, 366, 367,
	368, 369, 495, 370, 371, 0, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 496, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 0, 408,
	409, 402, 404, 405, 406, 403, 407, 410, 411, 0,
	412, 392, 393, 413, 0, 414, 497, 415, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 425, 421, 422,
	423, 498, 0, 428, 429, 427, 0, 430, 431, 432,
	433, 434, 271, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 0, 458, 457, 508, 1254, 0,
	209, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 221, 222, 223, 224, 465, 466, 225,
	467, 226, 227, 468, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 469, 470, 471, 0, 235, 472,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 473, 474, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 475, 267, 268, 270,
	273, 269, 274, 275, 276, 277, 476, 477, 0, 212,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 481, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 213, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 214, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 0, 359, 360, 493, 361, 494,
	362, 0, 363, 0, 364, 365, 366, 367, 368, 369,
	495, 370, 371, 0, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 496, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 402,
	404, 405, 406, 403, 407, 410, 411, 0, 412, 392,
	393, 413, 0, 414, 497, 415, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 425, 421, 422, 423, 498,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 1169, 0, 209, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 221, 222, 223, 224, 465, 466, 225, 467, 226,
	227, 468, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 469, 470, 471, 0, 235, 472, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 473, 474, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 475, 267, 268, 270, 273, 269,
	274, 275, 276, 277, 476, 477, 0, 212, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 1171,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 213, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	214, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 0, 359, 360, 493, 361, 494, 362, 0,
	363, 0, 364, 365, 366, 367, 368, 369, 495, 370,
	371, 0, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 496, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 402, 404, 405,
	406, 403, 407, 410, 411, 0, 412, 392, 393, 413,
	0, 414, 497, 415, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 425, 421, 422, 423, 498, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	209, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 221, 222, 223, 224, 465, 466, 225,
	467, 226, 227, 468, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 469, 470, 471, 0, 235, 472,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 473, 474, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 475, 267, 268, 270,
	273, 269, 274, 275, 276, 277, 476, 477, 0, 212,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 481, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 213, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 214, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 0, 359, 360, 493, 361, 494,
	362, 0, 363, 0, 364, 365, 366, 367, 368, 369,
	495, 370, 371, 0, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 496, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 402,
	404, 405, 406, 403, 407, 410, 411, 0, 412, 392,
	393, 413, 0, 414, 497, 415, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 425, 421, 422, 423, 498,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 209, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 221, 222, 223, 224, 465,
	466, 225, 467, 226, 227, 468, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 469, 470, 471, 0,
	235, 472, 0, 0, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 532, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 473, 474,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 475, 267,
	268, 270, 273, 269, 274, 275, 276, 277, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 533, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 0, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 0, 359, 360, 493,
	361, 494, 362, 0, 363, 0, 364, 365, 366, 367,
	368, 369, 495, 370, 371, 0, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 496, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 534, 408,
	409, 402, 404, 405, 406, 403, 407, 410, 411, 0,
	412, 392, 393, 413, 0, 414, 497, 415, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 425, 421, 422,
	423, 498, 0, 428, 429, 427, 0, 430, 431, 432,
	433, 434, 271, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 209, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 221, 222, 223,
	224, 465, 466, 225, 467, 226, 227, 468, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 469, 470,
	471, 0, 235, 472, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 1883, 254, 255, 256,
	473, 474, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	475, 267, 268, 270, 273, 269, 274, 275, 276, 277,
	476, 477, 0, 212, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 213,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 214, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 0, 359,
	360, 493, 361, 494, 362, 0, 363, 0, 364, 365,
	366, 367, 368, 369, 495, 370, 371, 0, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 496,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	0, 408, 409, 402, 404, 405, 406, 403, 407, 410,
	411, 0, 412, 392, 393, 413, 0, 414, 497, 415,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 425,
	421, 422, 423, 498, 0, 428, 429, 427, 0, 430,
	431, 432, 433, 434, 271, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 209, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 221,
	222, 223, 224, 465, 466, 225, 467, 226, 227, 468,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	469, 470, 471, 0, 235, 472, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 1881, 254,
	255, 256, 473, 474, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 475, 267, 268, 270, 273, 269, 274, 275,
	276, 277, 476, 477, 0, 212, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 213, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 214, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	0, 359, 360, 493, 361, 494, 362, 0, 363, 0,
	364, 365, 366, 367, 368, 369, 495, 370, 371, 0,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 496, 390, 0, 391, 395, 396, 397, 398, 399,
	400, 401, 0, 408, 409, 402, 404, 405, 406, 403,
	407, 410, 411, 0, 412, 392, 393, 413, 0, 414,
	497, 415, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 425, 421, 422, 423, 498, 0, 428, 429, 427,
	0, 430, 431, 432, 433, 434, 271, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 209, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 221, 222, 223, 224, 465, 466, 225, 467, 226,
	227, 468, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 469, 470, 471, 0, 235, 472, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	1879, 254, 255, 256, 473, 474, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 475, 267, 268, 270, 273, 269,
	274, 275, 276, 277, 476, 477, 0, 212, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 213, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	214, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 0, 359, 360, 493, 361, 494, 362, 0,
	363, 0, 364, 365, 366, 367, 368, 369, 495, 370,
	371, 0, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 496, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 402, 404, 405,
	406, 403, 407, 410, 411, 0, 412, 392, 393, 413,
	0, 414, 497, 415, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 425, 421, 422, 423, 498, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 679, 0, 209, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 221,
	222, 223, 224, 465, 466, 225, 467, 226, 227, 468,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	469, 470, 471, 0, 235, 472, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 473, 474, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 475, 267, 268, 270, 273, 269, 274, 275,
	276, 277, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 678, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 0, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	0, 359, 360, 493, 361, 494, 362, 0, 363, 0,
	364, 365, 366, 367, 368, 369, 495, 370, 371, 0,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 496, 390, 0, 391, 395, 396, 397, 398, 399,
	400, 401, 0, 408, 409, 402, 404, 405, 406, 403,
	407, 410, 411, 0, 412, 392, 393, 413, 0, 414,
	497, 415, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 425, 421, 422, 423, 498, 0, 428, 429, 427,
	677, 430, 431, 432, 433, 434, 271, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 517, 0, 209, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 516, 220, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 221, 222, 223,
	224, 465, 466, 225, 467, 226, 227, 468, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 469, 470,
	471, 0, 235, 472, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	473, 474, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	475, 267, 268, 270, 273, 269, 274, 275, 276, 277,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 0, 359,
	360, 493, 361, 494, 515, 0, 363, 0, 364, 365,
	366, 367, 368, 369, 495, 370, 371, 0, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 496,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	0, 408, 409, 402, 404, 405, 406, 403, 407, 410,
	411, 0, 412, 392, 393, 413, 0, 414, 497, 415,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 425,
	421, 422, 423, 498, 0, 428, 429, 427, 0, 430,
	431, 432, 433, 434, 271, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 209, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 464, 0, 2150, 0, 0, 221,
	222, 223, 224, 465, 466, 225, 467, 226, 227, 468,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	469, 470, 471, 0, 235, 472, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 473, 474, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 475, 267, 268, 270, 273, 269, 274, 275,
	276, 277, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 0, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	0, 359, 360, 493, 361, 494, 362, 0, 363, 0,
	364, 365, 366, 367, 368, 369, 495, 370, 371, 0,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 496, 390, 0, 391, 395, 396, 397, 398, 399,
	400, 401, 0, 408, 409, 402, 404, 405, 406, 403,
	407, 410, 411, 0, 412, 392, 393, 413, 0, 414,
	497, 415, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 425, 421, 422, 423, 498, 0, 428, 429, 427,
	0, 430, 431, 432, 433, 434, 271, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 209, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 221, 222, 223, 224, 465, 466, 225, 467, 226,
	227, 468, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 469, 470, 471, 0, 235, 472, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 473, 474, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 475, 267, 268, 270, 273, 269,
	274, 275, 276, 277, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 0, 359, 360, 493, 361, 494, 362, 3126,
	363, 0, 364, 365, 366, 367, 368, 369, 495, 370,
	371, 0, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 496, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 402, 404, 405,
	406, 403, 407, 410, 411, 0, 412, 392, 393, 413,
	0, 414, 497, 415, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 425, 421, 422, 423, 498, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 209, 2349, 0, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 221, 222, 223,
	224, 465, 466, 225, 467, 226, 227, 468, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 469, 470,
	471, 0, 235, 472, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	473, 474, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	475, 267, 268, 270, 273, 269, 274, 275, 276, 277,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 0, 359,
	360, 493, 361, 494, 362, 0, 363, 0, 364, 365,
	366, 367, 368, 369, 495, 370, 371, 0, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 496,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	0, 408, 409, 402, 404, 405, 406, 403, 407, 410,
	411, 0, 412, 392, 393, 413, 0, 414, 497, 415,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 425,
	421, 422, 423, 498, 0, 428, 429, 427, 0, 430,
	431, 432, 433, 434, 271, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 209, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 221,
	222, 223, 224, 465, 466, 225, 467, 226, 227, 468,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	469, 470, 471, 0, 235, 472, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 473, 474, 2929, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 475, 267, 268, 270, 273, 269, 274, 275,
	276, 277, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 0, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	0, 359, 360, 493, 361, 494, 362, 0, 363, 0,
	364, 365, 366, 367, 368, 369, 495, 370, 371, 0,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 496, 390, 0, 391, 395, 396, 397, 398, 399,
	400, 401, 0, 408, 409, 402, 404, 405, 406, 403,
	407, 410, 411, 0, 412, 392, 393, 413, 0, 414,
	497, 415, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 425, 421, 422, 423, 498, 0, 428, 429, 427,
	0, 430, 431, 432, 433, 434, 271, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 209, 2349, 0, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 221, 222, 223, 224, 465,
	466, 225, 467, 226, 227, 468, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 469, 470, 471, 0,
	235, 472, 0, 0, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 473, 474,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 475, 267,
	268, 270, 273, 269, 274, 275, 276, 277, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 0, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 2346,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 0, 359, 360, 493,
	361, 494, 362, 0, 363, 0, 364, 365, 366, 367,
	368, 369, 495, 370, 371, 0, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 496, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 0, 408,
	409, 402, 404, 405, 406, 403, 407, 410, 411, 0,
	412, 392, 393, 413, 0, 414, 497, 415, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 425, 421, 422,
	423, 498, 0, 428, 429, 427, 0, 430, 431, 432,
	433, 434, 271, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 209, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 215, 216, 217, 218, 219, 1865, 220, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 221, 222, 223,
	224, 465, 466, 225, 467, 226, 227, 468, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 469, 470,
	471, 0, 235, 472, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	473, 474, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	475, 267, 268, 270, 273, 269, 274, 275, 276, 277,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 0, 359,
	360, 493, 361, 494, 362, 0, 363, 0, 364, 365,
	366, 367, 368, 369, 495, 370, 371, 0, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 496,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	0, 408, 409, 402, 404, 405, 406, 403, 407, 410,
	411, 0, 412, 392, 393, 413, 0, 414, 497, 415,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 425,
	421, 422, 423, 498, 0, 428, 429, 427, 0, 430,
	431, 432, 433, 434, 271, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	1857, 0, 209, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 221, 222, 223, 224, 465,
	466, 225, 467, 226, 227, 468, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 469, 470, 471, 0,
	235, 472, 0, 0, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 473, 474,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 475, 267,
	268, 270, 273, 269, 274, 275, 276, 277, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 0, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 0, 359, 360, 493,
	361, 494, 362, 0, 363, 0, 364, 365, 366, 367,
	368, 369, 495, 370, 371, 0, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 496, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 0, 408,
	409, 402, 404, 405, 406, 403, 407, 410, 411, 0,
	412, 392, 393, 413, 0, 414, 497, 415, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 425, 421, 422,
	423, 498, 0, 428, 429, 427, 0, 430, 431, 432,
	433, 434, 271, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 0, 458, 457, 508, 560, 0,
	209, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 221, 222, 223, 224, 465, 466, 225,
	467, 226, 227, 468, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 469, 470, 1029, 0, 235, 472,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 473, 474, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 475, 267, 268, 270,
	273, 269, 274, 275, 276, 277, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 481, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 561, 0, 336, 337, 339,
	338, 0, 0, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 0, 359, 360, 493, 361, 494,
	362, 0, 363, 0, 364, 365, 366, 367, 368, 369,
	495, 370, 371, 0, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 496, 390, 0, 391, 395,
	396, 557, 398, 399, 400, 401, 0, 408, 409, 402,
	404, 405, 406, 403, 407, 410, 411, 0, 412, 392,
	393, 413, 0, 414, 497, 415, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 425, 421, 422, 423, 498,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 436, 0, 556, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 1808, 0, 209, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 221, 222, 223, 224, 465, 466, 225, 467, 226,
	227, 468, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 469, 470, 471, 0, 235, 472, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 473, 474, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 475, 267, 268, 270, 273, 269,
	274, 275, 276, 277, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 1807,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 0, 359, 360, 493, 361, 494, 362, 0,
	363, 0, 364, 365, 366, 367, 368, 369, 495, 370,
	371, 0, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 496, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 402, 404, 405,
	406, 403, 407, 410, 411, 0, 412, 392, 393, 413,
	0, 414, 497, 415, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 425, 421, 422, 423, 498, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 560, 0, 209, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 221,
	222, 223, 224, 465, 466, 225, 467, 226, 227, 468,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	469, 470, 471, 0, 550, 472, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 473, 474, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 475, 267, 268, 270, 273, 269, 274, 275,
	276, 277, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 561, 0, 336, 337, 339, 338, 0, 0, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	0, 359, 360, 493, 361, 494, 362, 0, 363, 0,
	364, 365, 366, 367, 368, 369, 495, 370, 371, 0,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 496, 390, 0, 391, 395, 396, 557, 398, 399,
	400, 401, 0, 408, 409, 402, 404, 405, 406, 403,
	407, 1308, 411, 0, 412, 392, 393, 413, 0, 414,
	497, 415, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 425, 421, 422, 423, 498, 0, 428, 429, 427,
	0, 430, 431, 432, 433, 434, 271, 435, 272, 436,
	0, 556, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 1293, 0, 209, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 221, 222, 223,
	224, 465, 466, 225, 467, 226, 227, 468, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 469, 470,
	471, 0, 235, 472, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	473, 474, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	475, 267, 268, 270, 273, 269, 274, 275, 276, 277,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 1292, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 0, 359,
	360, 493, 361, 494, 362, 0, 363, 0, 364, 365,
	366, 367, 368, 369, 495, 370, 371, 0, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 496,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	0, 408, 409, 402, 404, 405, 406, 403, 407, 410,
	411, 0, 412, 392, 393, 413, 0, 414, 497, 415,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 425,
	421, 422, 423, 498, 0, 428, 429, 427, 0, 430,
	431, 432, 433, 434, 271, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	1242, 0, 209, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 221, 222, 223, 224, 465,
	466, 225, 467, 226, 227, 468, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 469, 470, 471, 0,
	235, 472, 0, 0, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 473, 474,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 475, 267,
	268, 270, 273, 269, 274, 275, 276, 277, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 1241, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 0, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 0, 359, 360, 493,
	361, 494, 362, 0, 363, 0, 364, 365, 366, 367,
	368, 369, 495, 370, 371, 0, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 496, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 0, 408,
	409, 402, 404, 405, 406, 403, 407, 410, 411, 0,
	412, 392, 393, 413, 0, 414, 497, 415, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 425, 421, 422,
	423, 498, 0, 428, 429, 427, 0, 430, 431, 432,
	433, 434, 271, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 0, 458, 457, 508, 1226, 0,
	209, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 221, 222, 223, 224, 465, 466, 225,
	467, 226, 227, 468, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 469, 470, 471, 0, 235, 472,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 473, 474, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 475, 267, 268, 270,
	273, 269, 274, 275, 276, 277, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 481, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 0, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 0, 359, 360, 493, 361, 494,
	362, 0, 363, 0, 364, 365, 366, 367, 368, 369,
	495, 370, 371, 0, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 496, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 402,
	404, 405, 406, 403, 407, 410, 411, 0, 412, 392,
	393, 413, 0, 414, 497, 415, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 425, 421, 422, 423, 498,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 1163, 0, 209, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 221, 222, 223, 224, 465, 466, 225, 467, 226,
	227, 468, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 469, 470, 471, 0, 235, 472, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 473, 474, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 475, 267, 268, 270, 273, 269,
	274, 275, 276, 277, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 0, 359, 360, 493, 361, 494, 362, 0,
	363, 0, 364, 365, 366, 367, 368, 369, 495, 370,
	371, 0, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 496, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 402, 404, 405,
	406, 403, 407, 410, 411, 0, 412, 392, 393, 413,
	0, 414, 497, 415, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 425, 421, 422, 423, 498, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 560, 0, 209, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 221,
	222, 223, 224, 465, 466, 225, 467, 226, 227, 468,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	469, 470, 1029, 0, 235, 472, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 473, 474, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 475, 267, 268, 270, 273, 269, 274, 275,
	276, 277, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 561, 0, 336, 337, 339, 338, 0, 0, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	0, 359, 360, 493, 361, 494, 362, 0, 363, 0,
	364, 365, 366, 367, 368, 369, 495, 370, 371, 0,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 496, 390, 0, 391, 395, 396, 557, 398, 399,
	400, 401, 0, 408, 409, 402, 404, 405, 406, 403,
	407, 410, 411, 0, 412, 392, 393, 413, 0, 414,
	497, 415, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 425, 421, 422, 423, 498, 0, 428, 429, 427,
	0, 430, 431, 432, 433, 434, 271, 435, 272, 436,
	0, 556, 500, 501, 502, 0, 443, 0, 437, 1030,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 209, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 215, 216, 217, 218, 219,
	1012, 220, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 221, 222, 223, 224, 465, 466, 225, 467, 226,
	227, 468, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 469, 470, 471, 0, 235, 472, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 473, 474, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 475, 267, 268, 270, 273, 269,
	274, 275, 276, 277, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 0, 359, 360, 493, 361, 494, 362, 0,
	363, 0, 364, 365, 366, 367, 368, 369, 495, 370,
	371, 0, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 496, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 402, 404, 405,
	406, 403, 407, 410, 411, 0, 412, 392, 393, 413,
	0, 414, 497, 415, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 425, 421, 422, 423, 498, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 560, 0, 209, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 221,
	222, 223, 224, 465, 466, 225, 467, 226, 227, 468,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	469, 470, 471, 0, 550, 472, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	548, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 473, 474, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 475, 267, 268, 270, 273, 269, 274, 275,
	276, 277, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 549, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 561, 0, 336, 337, 339, 338, 0, 0, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	0, 359, 360, 493, 361, 494, 362, 0, 363, 0,
	364, 365, 366, 367, 368, 369, 495, 370, 371, 0,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 551, 390, 0, 391, 395, 396, 557, 398, 399,
	400, 401, 0, 408, 409, 402, 404, 405, 406, 403,
	407, 552, 411, 0, 412, 392, 393, 413, 0, 414,
	497, 415, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 425, 421, 422, 423, 498, 0, 428, 429, 427,
	0, 430, 431, 432, 433, 434, 271, 435, 272, 436,
	0, 556, 500, 501, 502, 0, 443, 0, 437, 554,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 544, 0, 209, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 221, 222, 223,
	224, 465, 466, 225, 467, 226, 227, 468, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 469, 470,
	471, 0, 235, 472, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	473, 474, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	475, 267, 268, 270, 273, 269, 274, 275, 276, 277,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 0, 359,
	360, 493, 361, 494, 362, 0, 363, 0, 364, 365,
	366, 367, 368, 369, 495, 370, 371, 0, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 496,
	390, 0, 391, 545, 396, 397, 398, 399, 400, 401,
	0, 408, 409, 402, 404, 405, 406, 403, 407, 410,
	411, 0, 412, 392, 393, 413, 0, 414, 497, 415,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 425,
	421, 422, 423, 498, 0, 428, 429, 427, 0, 430,
	431, 432, 433, 434, 271, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	542, 0, 209, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 221, 222, 223, 224, 465,
	466, 225, 467, 226, 227, 468, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 469, 470, 471, 0,
	235, 472, 0, 0, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 473, 474,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 475, 267,
	268, 270, 273, 269, 274, 275, 276, 277, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 0, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 0, 359, 360, 493,
	361, 494, 362, 0, 363, 0, 364, 365, 366, 367,
	368, 369, 495, 370, 371, 0, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 496, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 0, 408,
	409, 402, 404, 405, 406, 403, 407, 410, 411, 0,
	412, 392, 393, 413, 0, 414, 497, 415, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 425, 421, 422,
	423, 498, 0, 428, 429, 427, 0, 430, 431, 432,
	433, 434, 271, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 0, 458, 457, 508, 536, 0,
	209, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 221, 222, 223, 224, 465, 466, 225,
	467, 226, 227, 468, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 469, 470, 471, 0, 235, 472,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 473, 474, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 475, 267, 268, 270,
	273, 269, 274, 275, 276, 277, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 481, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 0, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 0, 359, 360, 493, 361, 494,
	362, 0, 363, 0, 364, 365, 366, 367, 368, 369,
	495, 370, 371, 0, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 496, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 402,
	404, 405, 406, 403, 407, 410, 411, 0, 412, 392,
	393, 413, 0, 414, 497, 415, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 425, 421, 422, 423, 498,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 512, 0, 209, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 221, 222, 223, 224, 465, 466, 225, 467, 226,
	227, 468, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 469, 470, 471, 0, 235, 472, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 473, 474, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 475, 267, 268, 270, 273, 269,
	274, 275, 276, 277, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 0, 359, 360, 493, 361, 494, 362, 0,
	363, 0, 364, 365, 366, 367, 368, 369, 495, 370,
	371, 0, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 496, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 402, 404, 405,
	406, 403, 407, 410, 411, 0, 412, 392, 393, 413,
	0, 414, 497, 415, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 425, 421, 422, 423, 498, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	209, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 221, 222, 223, 224, 465, 466, 225,
	467, 226, 227, 468, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 469, 470, 471, 0, 235, 472,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 473, 474, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 475, 267, 268, 270,
	273, 269, 274, 275, 276, 277, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 481, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 0, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 0, 359, 360, 493, 361, 494,
	362, 0, 363, 0, 364, 365, 366, 367, 368, 369,
	495, 370, 371, 0, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 496, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 402,
	404, 405, 406, 403, 407, 410, 411, 0, 412, 392,
	393, 413, 0, 414, 497, 415, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 425, 421, 422, 423, 498,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 209, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 221, 222, 223, 224, 465,
	466, 225, 467, 226, 227, 468, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 469, 470, 471, 0,
	235, 472, 0, 0, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 473, 474,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 475, 267,
	268, 270, 273, 269, 274, 275, 276, 277, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 2625, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 0, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 0, 359, 360, 493,
	361, 494, 362, 0, 363, 0, 364, 365, 366, 367,
	368, 369, 495, 370, 371, 0, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 496, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 0, 408,
	409, 402, 404, 405, 406, 403, 407, 410, 411, 0,
	412, 392, 393, 413, 0, 414, 497, 415, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 425, 421, 422,
	423, 498, 0, 428, 429, 427, 0, 430, 431, 432,
	433, 434, 271, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 209, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 221, 222, 223,
	224, 465, 466, 225, 467, 226, 227, 468, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 469, 470,
	471, 0, 235, 472, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	473, 474, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	475, 267, 268, 270, 273, 269, 274, 275, 276, 277,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 2623, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 0, 359,
	360, 493, 361, 494, 362, 0, 363, 0, 364, 365,
	366, 367, 368, 369, 495, 370, 371, 0, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 496,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	0, 408, 409, 402, 404, 405, 406, 403, 407, 410,
	411, 0, 412, 392, 393, 413, 0, 414, 497, 415,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 425,
	421, 422, 423, 498, 0, 428, 429, 427, 0, 430,
	431, 432, 433, 434, 271, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 209, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 221,
	222, 223, 224, 465, 466, 225, 467, 226, 227, 468,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	469, 470, 471, 0, 235, 472, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 473, 474, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 475, 267, 268, 270, 273, 269, 274, 275,
	276, 277, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 2611, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 0, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	0, 359, 360, 493, 361, 494, 362, 0, 363, 0,
	364, 365, 366, 367, 368, 369, 495, 370, 371, 0,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 496, 390, 0, 391, 395, 396, 397, 398, 399,
	400, 401, 0, 408, 409, 402, 404, 405, 406, 403,
	407, 410, 411, 0, 412, 392, 393, 413, 0, 414,
	497, 415, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 425, 421, 422, 423, 498, 0, 428, 429, 427,
	0, 430, 431, 432, 433, 434, 271, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 209, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 221, 222, 223, 224, 465, 466, 225, 467, 226,
	227, 468, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 469, 470, 471, 0, 235, 472, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 473, 474, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 475, 267, 268, 270, 273, 269,
	274, 275, 276, 277, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 2309,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 0, 359, 360, 493, 361, 494, 362, 0,
	363, 0, 364, 365, 366, 367, 368, 369, 495, 370,
	371, 0, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 496, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 402, 404, 405,
	406, 403, 407, 410, 411, 0, 412, 392, 393, 413,
	0, 414, 497, 415, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 425, 421, 422, 423, 498, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	209, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 221, 222, 223, 224, 465, 466, 225,
	467, 226, 227, 468, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 469, 470, 471, 0, 235, 472,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 473, 474, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 475, 267, 268, 270,
	273, 269, 274, 275, 276, 277, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 481, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 0, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 0, 359, 360, 493, 361, 494,
	362, 0, 363, 0, 364, 365, 366, 367, 368, 369,
	495, 370, 371, 0, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 496, 390, 0, 391, 545,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 402,
	404, 405, 406, 403, 407, 410, 411, 0, 412, 392,
	393, 413, 0, 414, 497, 415, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 425, 421, 422, 423, 498,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 209, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	464, 0, 1820, 0, 0, 221, 222, 223, 224, 465,
	466, 225, 467, 226, 227, 468, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 469, 470, 471, 0,
	235, 472, 0, 0, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 473, 474,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 475, 267,
	268, 270, 273, 269, 274, 275, 276, 277, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 0, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 0, 359, 360, 493,
	361, 494, 362, 0, 363, 0, 364, 365, 366, 367,
	368, 369, 495, 370, 371, 0, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 496, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 0, 408,
	409, 402, 404, 405, 406, 403, 407, 410, 411, 0,
	0, 392, 393, 413, 0, 414, 497, 415, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 425, 421, 422,
	423, 498, 0, 428, 429, 427, 0, 430, 431, 432,
	433, 434, 271, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 209, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 221, 222, 223,
	224, 465, 466, 225, 467, 226, 227, 468, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 469, 470,
	471, 0, 235, 472, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	473, 474, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	475, 267, 268, 270, 273, 269, 274, 275, 276, 277,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 1262, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 0, 359,
	360, 493, 361, 494, 362, 0, 363, 0, 364, 365,
	366, 367, 368, 369, 495, 370, 371, 0, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 496,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	0, 408, 409, 402, 404, 405, 406, 403, 407, 410,
	411, 0, 412, 392, 393, 413, 0, 414, 497, 415,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 425,
	421, 422, 423, 498, 0, 428, 429, 427, 0, 430,
	431, 432, 433, 434, 271, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 209, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 221,
	222, 223, 224, 465, 466, 225, 467, 226, 227, 468,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	469, 470, 471, 0, 235, 472, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 473, 474, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 475, 267, 268, 270, 273, 269, 274, 275,
	276, 277, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 1204, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 0, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	0, 359, 360, 493, 361, 494, 362, 0, 363, 0,
	364, 365, 366, 367, 368, 369, 495, 370, 371, 0,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 496, 390, 0, 391, 395, 396, 397, 398, 399,
	400, 401, 0, 408, 409, 402, 404, 405, 406, 403,
	407, 410, 411, 0, 412, 392, 393, 413, 0, 414,
	497, 415, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 425, 421, 422, 423, 498, 0, 428, 429, 427,
	0, 430, 431, 432, 433, 434, 271, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 209, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 221, 222, 223, 224, 465, 466, 225, 467, 226,
	227, 468, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 469, 470, 471, 0, 235, 472, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 473, 474, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 475, 267, 268, 270, 273, 269,
	274, 275, 276, 277, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 0, 359, 360, 493, 361, 494, 362, 0,
	363, 0, 364, 365, 366, 367, 368, 369, 495, 967,
	371, 0, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 496, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 402, 404, 405,
	406, 403, 407, 410, 411, 0, 412, 392, 393, 413,
	0, 414, 497, 415, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 425, 421, 422, 423, 498, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	209, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 221, 222, 223, 224, 465, 466, 225,
	467, 226, 227, 468, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 469, 470, 471, 0, 235, 472,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 473, 474, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 475, 267, 268, 270,
	273, 269, 274, 275, 276, 277, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 0, 0, 289, 290, 291,
	292, 481, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 0, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	0, 356, 357, 358, 0, 359, 360, 493, 361, 494,
	362, 0, 363, 0, 364, 365, 366, 0, 368, 369,
	495, 370, 371, 0, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 496, 0, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 402,
	404, 405, 406, 403, 407, 410, 411, 0, 412, 392,
	393, 413, 0, 414, 497, 415, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 425, 421, 422, 423, 498,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 1419, 1420, 0, 1452,
	1453, 1454, 1462, 1463, 1464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1455, 0, 0, 0, 0,
	0, 0, 1422, 0, 0, 0, 1468, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1421,
	0, 0, 0, 0, 0, 0, 0, 1441, 0, 0,
	0, 0, 0, 0, 1438, 0, 0, 0, 0, 0,
	0, 0, 0, 1419, 1420, 0, 1452, 1453, 1454, 1462,
	1463, 1464, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1455, 0, 0, 0, 0, 0, 0, 1422,
	0, 0, 0, 1468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1444, 1445, 1446, 1447, 0, 0, 1421, 0, 0, 0,
	1427, 0, 0, 0, 1441, 0, 0, 0, 0, 0,
	0, 1438, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1459, 0, 0, 1469, 0, 0,
	0, 1449, 1450, 1451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1465, 0, 1466, 0, 0, 0, 0, 0,
	0, 1436, 1437, 0, 0, 0, 0, 1444, 1445, 1446,
	1447, 0, 0, 0, 0, 0, 1457, 1427, 0, 0,
	0, 0, 0, 0, 1442, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1459, 1467, 0, 1469, 0, 0, 0, 1449, 1450,
	1451, 0, 0, 0, 0, 0, 0, 1456, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1465,
	0, 1466, 0, 0, 0, 0, 0, 0, 1436, 1437,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1457, 0, 0, 0, 0, 1448, 0,
	0, 1442, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1443, 0, 0, 1467,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1456, 0, 0, 0, 0, 0,
	0, 1460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1419, 1420, 0, 1452,
	1453, 1454, 1462, 1463, 1464, 1448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1455, 0, 0, 0, 0,
	0, 0, 1422, 1443, 0, 0, 1468, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1460, 1421,
	0, 0, 0, 0, 0, 1458, 0, 1441, 1433, 1434,
	1440, 1439, 1435, 1461, 1438, 1432, 1430, 1431, 1423, 1424,
	1425, 1426, 1428, 1429, 0, 0, 0, 0, 0, 0,
	0, 3039, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1419,
	1420, 0, 1452, 1453, 1454, 1462, 1463, 1464, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1455, 0,
	1444, 1445, 1446, 1447, 0, 1422, 0, 0, 0, 1468,
	1427, 0, 1458, 0, 0, 1433, 1434, 1440, 1439, 1435,
	1461, 0, 1432, 1430, 1431, 1423, 1424, 1425, 1426, 1428,
	1429, 0, 1421, 0, 1459, 0, 0, 1469, 2777, 0,
	1441, 1449, 1450, 1451, 0, 0, 0, 1438, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1465, 0, 1466, 0, 0, 0, 0, 0,
	0, 1436, 1437, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1457, 0, 0, 0,
	0, 0, 0, 0, 1442, 0, 0, 0, 0, 0,
	0, 0, 0, 1444, 1445, 1446, 1447, 0, 0, 0,
	0, 0, 1467, 1427, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1456, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1459, 0, 0,
	1469, 0, 0, 0, 1449, 1450, 1451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1465, 0, 1466, 1448, 0,
	0, 0, 0, 0, 1436, 1437, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1443, 0, 0, 1457,
	0, 0, 0, 0, 0, 0, 0, 1442, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1460, 0, 0, 0, 1467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1419, 1420, 0, 1452, 1453, 1454, 1462, 1463,
	1464, 1448, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1455, 0, 0, 0, 0, 0, 0, 1422, 1443,
	0, 0, 1468, 0, 0, 1458, 0, 0, 1433, 1434,
	1440, 1439, 1435, 1461, 0, 1432, 1430, 1431, 1423, 1424,
	1425, 1426, 1428, 1429, 1460, 1421, 0, 0, 0, 0,
	0, 2482, 0, 1441, 0, 0, 0, 0, 0, 0,
	1438, 0, 0, 0, 0, 0, 0, 0, 0, 1419,
	1420, 0, 1452, 1453, 1454, 1462, 1463, 1464, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1455, 0,
	0, 0, 0, 0, 0, 1422, 0, 0, 0, 1468,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1444, 1445, 1446, 1447,
	0, 0, 1421, 0, 0, 0, 1427, 0, 1458, 0,
	1441, 1433, 1434, 1440, 1439, 1435, 1461, 1438, 1432, 1430,
	1431, 1423, 1424, 1425, 1426, 1428, 1429, 0, 0, 0,
	1459, 0, 0, 1469, 2481, 0, 0, 1449, 1450, 1451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1465, 0,
	1466, 0, 0, 0, 0, 0, 0, 1436, 1437, 0,
	0, 0, 0, 1444, 1445, 1446, 1447, 0, 0, 0,
	0, 0, 1457, 1427, 0, 0, 0, 0, 0, 0,
	1442, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1459, 1467, 0,
	1469, 0, 0, 0, 1449, 1450, 1451, 0, 0, 0,
	0, 0, 0, 1456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1465, 0, 1466, 0, 0,
	0, 0, 0, 0, 1436, 1437, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1457,
	0, 0, 0, 0, 1448, 0, 0, 1442, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1443, 0, 0, 1467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1456, 0, 0, 0, 0, 0, 0, 1460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1419, 1420, 0, 1452, 1453, 1454, 1462, 1463,
	1464, 1448, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1455, 0, 0, 0, 0, 0, 0, 1422, 1443,
	0, 0, 1468, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1460, 1421, 0, 0, 0, 0,
	0, 1458, 0, 1441, 1433, 1434, 1440, 1439, 1435, 1461,
	1438, 1432, 1430, 1431, 1423, 1424, 1425, 1426, 1428, 1429,
	0, 0, 0, 0, 0, 0, 0, 2478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1419, 1420, 0, 1452, 1453,
	1454, 1462, 1463, 1464, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1455, 0, 1444, 1445, 1446, 1447,
	0, 1422, 0, 0, 0, 1468, 1427, 0, 1458, 0,
	0, 1433, 1434, 1440, 1439, 1435, 1461, 0, 1432, 1430,
	1431, 1423, 1424, 1425, 1426, 1428, 1429, 0, 1421, 0,
	1459, 0, 0, 1469, 2477, 0, 1441, 1449, 1450, 1451,
	0, 0, 0, 1438, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1465, 0,
	1466, 0, 0, 0, 0, 0, 0, 1436, 1437, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1457, 0, 0, 0, 0, 0, 0, 0,
	1442, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	1445, 1446, 1447, 0, 0, 0, 0, 0, 1467, 1427,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1459, 0, 0, 1469, 0, 0, 0,
	1449, 1450, 1451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1465, 0, 1466, 1448, 0, 0, 0, 0, 0,
	1436, 1437, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1443, 0, 0, 1457, 0, 0, 0, 0,
	0, 0, 0, 1442, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1460, 0, 0,
	0, 1467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1419, 1420,
	0, 1452, 1453, 1454, 1462, 1463, 1464, 1448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1455, 0, 0,
	0, 0, 0, 0, 1422, 1443, 0, 0, 1468, 0,
	0, 1458, 0, 0, 1433, 1434, 1440, 1439, 1435, 1461,
	0, 1432, 1430, 1431, 1423, 1424, 1425, 1426, 1428, 1429,
	1460, 1421, 0, 0, 0, 0, 0, 2476, 0, 1441,
	0, 0, 0, 0, 0, 0, 1438, 0, 0, 0,
	0, 0, 0, 0, 0, 1419, 1420, 0, 1452, 1453,
	1454, 1462, 1463, 1464, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1455, 0, 0, 0, 0, 0,
	0, 1422, 0, 0, 0, 1468, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1444, 1445, 1446, 1447, 0, 0, 1421, 0,
	0, 0, 1427, 0, 1458, 0, 1441, 1433, 1434, 1440,
	1439, 1435, 1461, 1438, 1432, 1430, 1431, 1423, 1424, 1425,
	1426, 1428, 1429, 0, 0, 0, 1459, 0, 0, 1469,
	2026, 0, 0, 1449, 1450, 1451, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1465, 0, 1466, 0, 0, 0,
	0, 0, 0, 1436, 1437, 0, 0, 0, 0, 1444,
	1445, 1446, 1447, 0, 0, 0, 0, 0, 1457, 1427,
	0, 0, 0, 0, 0, 0, 1442, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1459, 1467, 0, 1469, 0, 0, 0,
	1449, 1450, 1451, 0, 0, 0, 0, 0, 0, 1456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1465, 0, 1466, 0, 0, 0, 0, 0, 0,
	1436, 1437, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1457, 0, 0, 0, 0,
	1448, 0, 0, 1442, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1443, 0,
	0, 1467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1456, 0, 0, 0,
	0, 0, 0, 1460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1419, 1420,
	0, 1452, 1453, 1454, 1462, 1463, 1464, 1448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1455, 0, 0,
	0, 0, 0, 0, 1422, 1443, 0, 0, 1468, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1460, 1421, 0, 0, 0, 0, 0, 1458, 0, 1441,
	1433, 1434, 1440, 1439, 1435, 1461, 1438, 1432, 1430, 1431,
	1423, 1424, 1425, 1426, 1428, 1429, 0, 0, 0, 0,
	3354, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1419, 1420, 0, 1452, 1453, 1454, 1462, 1463, 1464,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1455, 0, 1444, 1445, 1446, 1447, 0, 1422, 0, 0,
	0, 1468, 1427, 0, 1458, 0, 0, 1433, 1434, 1440,
	1439, 1435, 1461, 0, 1432, 1430, 1431, 1423, 1424, 1425,
	1426, 1428, 1429, 0, 1421, 0, 1459, 3285, 0, 1469,
	0, 0, 1441, 1449, 1450, 1451, 0, 0, 0, 1438,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1465, 0, 1466, 0, 0, 0,
	0, 0, 0, 1436, 1437, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1457, 0,
	0, 0, 0, 0, 0, 0, 1442, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 1445, 1446, 1447, 0,
	0, 0, 0, 0, 1467, 1427, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1459,
	0, 0, 1469, 0, 0, 0, 1449, 1450, 1451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1465, 0, 1466,
	1448, 0, 0, 0, 0, 0, 1436, 1437, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1443, 0,
	0, 1457, 0, 0, 0, 0, 0, 0, 0, 1442,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1460, 0, 0, 0, 1467, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1419, 1420, 0, 1452, 1453, 1454,
	1462, 1463, 1464, 1448, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1455, 0, 0, 0, 0, 0, 0,
	1422, 1443, 0, 0, 1468, 0, 0, 1458, 0, 0,
	1433, 1434, 1440, 1439, 1435, 1461, 0, 1432, 1430, 1431,
	1423, 1424, 1425, 1426, 1428, 1429, 1460, 1421, 0, 0,
	3284, 0, 0, 0, 0, 1441, 0, 0, 0, 0,
	0, 0, 1438, 0, 0, 0, 0, 0, 0, 0,
	0, 1419, 1420, 0, 1452, 1453, 1454, 1462, 1463, 1464,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1455, 0, 0, 0, 0, 0, 0, 1422, 0, 0,
	0, 1468, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1444, 1445,
	1446, 1447, 0, 0, 1421, 0, 0, 0, 1427, 0,
	1458, 0, 1441, 1433, 1434, 1440, 1439, 1435, 1461, 1438,
	1432, 1430, 1431, 1423, 1424, 1425, 1426, 1428, 1429, 0,
	0, 0, 1459, 3182, 0, 1469, 0, 0, 0, 1449,
	1450, 1451, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1465, 0, 1466, 0, 0, 0, 0, 0, 0, 1436,
	1437, 0, 0, 0, 0, 1444, 1445, 1446, 1447, 0,
	0, 0, 0, 0, 1457, 1427, 0, 0, 0, 0,
	0, 0, 1442, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1459,
	1467, 0, 1469, 0, 0, 0, 1449, 1450, 1451, 0,
	0, 0, 0, 0, 0, 1456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1465, 0, 1466,
	0, 0, 0, 0, 0, 0, 1436, 1437, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1457, 0, 0, 0, 0, 1448, 0, 0, 1442,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1443, 0, 0, 1467, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1456, 0, 0, 0, 0, 0, 0, 1460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1419, 1420, 0, 1452, 1453, 1454,
	1462, 1463, 1464, 1448, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1455, 0, 0, 0, 0, 0, 0,
	1422, 1443, 0, 0, 1468, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1460, 1421, 0, 0,
	0, 0, 0, 1458, 0, 1441, 1433, 1434, 1440, 1439,
	1435, 1461, 1438, 1432, 1430, 1431, 1423, 1424, 1425, 1426,
	1428, 1429, 0, 0, 0, 0, 3092, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1419, 1420, 0,
	1452, 1453, 1454, 1462, 1463, 1464, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1455, 0, 1444, 1445,
	1446, 1447, 0, 1422, 0, 0, 0, 1468, 1427, 0,
	1458, 0, 0, 1433, 1434, 1440, 1439, 1435, 1461, 0,
	1432, 1430, 1431, 1423, 1424, 1425, 1426, 1428, 1429, 0,
	1421, 0, 1459, 3044, 0, 1469, 0, 0, 1441, 1449,
	1450, 1451, 0, 0, 0, 1438, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1465, 0, 1466, 0, 0, 0, 0, 0, 0, 1436,
	1437, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1457, 0, 0, 0, 0, 0,
	0, 0, 1442, 0, 0, 0, 0, 0, 0, 0,
	0, 1444, 1445, 1446, 1447, 0, 0, 0, 0, 0,
	1467, 1427, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1459, 0, 0, 1469, 0,
	0, 0, 1449, 1450, 1451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1465, 0, 1466, 1448, 0, 0, 0,
	0, 0, 1436, 1437, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1443, 0, 0, 1457, 0, 0,
	0, 0, 0, 0, 0, 1442, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1460,
	0, 0, 0, 1467, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1419, 1420, 0, 1452, 1453, 1454, 1462, 1463, 1464, 1448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1455,
	0, 0, 0, 0, 0, 0, 1422, 1443, 0, 0,
	1468, 0, 0, 1458, 0, 0, 1433, 1434, 1440, 1439,
	1435, 1461, 0, 1432, 1430, 1431, 1423, 1424, 1425, 1426,
	1428, 1429, 1460, 1421, 0, 0, 3043, 0, 0, 0,
	0, 1441, 0, 0, 0, 0, 0, 0, 1438, 0,
	0, 0, 0, 0, 0, 0, 0, 1419, 1420, 0,
	1452, 1453, 1454, 1462, 1463, 1464, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1455, 0, 0, 0,
	0, 0, 0, 1422, 0, 0, 0, 1468, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1444, 1445, 1446, 1447, 0, 0,
	1421, 0, 0, 0, 1427, 0, 1458, 0, 1441, 1433,
	1434, 1440, 1439, 1435, 1461, 1438, 1432, 1430, 1431, 1423,
	1424, 1425, 1426, 1428, 1429, 0, 0, 0, 1459, 3042,
	0, 1469, 0, 0, 0, 1449, 1450, 1451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1465, 0, 1466, 0,
	0, 0, 0, 0, 0, 1436, 1437, 0, 0, 0,
	0, 1444, 1445, 1446, 1447, 0, 0, 0, 0, 0,
	1457, 1427, 0, 0, 0, 0, 0, 0, 1442, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1459, 1467, 0, 1469, 0,
	0, 0, 1449, 1450, 1451, 0, 0, 0, 0, 0,
	0, 1456, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1465, 0, 1466, 0, 0, 0, 0,
	0, 0, 1436, 1437, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1457, 0, 0,
	0, 0, 1448, 0, 0, 1442, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1443, 0, 0, 1467, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1456, 0,
	0, 0, 0, 0, 0, 1460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1419, 1420, 0, 1452, 1453, 1454, 1462, 1463, 1464, 1448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1455,
	0, 0, 0, 0, 0, 0, 1422, 1443, 0, 0,
	1468, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1460, 1421, 0, 0, 0, 0, 0, 1458,
	0, 1441, 1433, 1434, 1440, 1439, 1435, 1461, 1438, 1432,
	1430, 1431, 1423, 1424, 1425, 1426, 1428, 1429, 0, 0,
	0, 0, 3009, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1419, 1420, 0, 1452, 1453, 1454, 1462,
	1463, 1464, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1455, 0, 1444, 1445, 1446, 1447, 0, 1422,
	0, 0, 0, 1468, 1427, 0, 1458, 0, 0, 1433,
	1434, 1440, 1439, 1435, 1461, 0, 1432, 1430, 1431, 1423,
	1424, 1425, 1426, 1428, 1429, 0, 1421, 0, 1459, 2812,
	0, 1469, 0, 0, 1441, 1449, 1450, 1451, 0, 0,
	0, 1438, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1465, 0, 1466, 0,
	0, 0, 0, 0, 0, 1436, 1437, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1457, 0, 0, 0, 0, 0, 0, 0, 1442, 0,
	0, 0, 0, 0, 0, 0, 0, 1444, 1445, 1446,
	1447, 0, 0, 0, 0, 0, 1467, 1427, 3454, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1456, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1459, 0, 0, 1469, 0, 0, 0, 1449, 1450,
	1451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1465,
	0, 1466, 1448, 0, 0, 0, 0, 0, 1436, 1437,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1443, 0, 0, 1457, 0, 0, 0, 0, 0, 0,
	0, 1442, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1460, 0, 0, 0, 1467,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1456, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3453, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1419, 1420, 0, 1452,
	1453, 1454, 1462, 1463, 1464, 1448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1455, 0, 0, 0, 0,
	2404, 0, 1422, 1443, 0, 0, 1468, 0, 0, 1458,
	0, 0, 1433, 1434, 1440, 1439, 1435, 1461, 0, 1432,
	1430, 1431, 1423, 1424, 1425, 1426, 1428, 1429, 1460, 1421,
	2433, 0, 0, 0, 0, 0, 0, 1441, 0, 0,
	0, 0, 0, 0, 1438, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2405, 0, 0, 0, 0, 0, 0, 1419,
	1420, 0, 1452, 1453, 1454, 1462, 1463, 1464, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1455, 0,
	1444, 1445, 1446, 1447, 0, 1422, 0, 0, 0, 1468,
	1427, 0, 1458, 0, 0, 1433, 1434, 1440, 1439, 1435,
	1461, 0, 1432, 1430, 1431, 1423, 1424, 1425, 1426, 1428,
	1429, 0, 1421, 0, 1459, 0, 0, 1469, 0, 0,
	1441, 1449, 1450, 1451, 0, 0, 0, 1438, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1465, 0, 1466, 0, 0, 0, 0, 0,
	0, 1436, 1437, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1457, 0, 0, 0,
	0, 0, 0, 0, 1442, 0, 0, 0, 0, 0,
	0, 0, 0, 1444, 1445, 1446, 1447, 0, 0, 0,
	0, 0, 1467, 1427, 0, 2521, 0, 0, 2520, 0,
	0, 0, 0, 0, 0, 0, 0, 1456, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1459, 0, 0,
	1469, 0, 0, 0, 1449, 1450, 1451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1465, 0, 1466, 1448, 0,
	0, 0, 0, 0, 1436, 1437, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1443, 0, 0, 1457,
	0, 0, 0, 0, 0, 0, 0, 1442, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1460, 0, 0, 0, 1467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2117, 0, 0, 0, 0,
	0, 0, 1419, 1420, 0, 1452, 1453, 1454, 1462, 1463,
	1464, 1448, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1455, 0, 0, 0, 2116, 0, 0, 1422, 1443,
	0, 0, 1468, 0, 0, 1458, 0, 0, 1433, 1434,
	1440, 1439, 1435, 1461, 0, 1432, 1430, 1431, 1423, 1424,
	1425, 1426, 1428, 1429, 1460, 1421, 0, 0, 0, 0,
	0, 0, 0, 1441, 0, 0, 0, 0, 0, 0,
	1438, 0, 0, 0, 0, 0, 0, 0, 0, 1419,
	1420, 0, 1452, 1453, 1454, 1462, 1463, 1464, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1455, 0,
	0, 0, 0, 0, 0, 1422, 0, 0, 0, 1468,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1444, 1445, 1446, 1447,
	0, 0, 1421, 0, 0, 0, 1427, 0, 1458, 0,
	1441, 1433, 1434, 1440, 1439, 1435, 1461, 1438, 1432, 1430,
	1431, 1423, 1424, 1425, 1426, 1428, 1429, 0, 0, 0,
	1459, 0, 0, 1469, 0, 0, 0, 1449, 1450, 1451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1465, 0,
	1466, 0, 0, 0, 0, 0, 0, 1436, 1437, 0,
	0, 0, 0, 1444, 1445, 1446, 1447, 0, 0, 0,
	0, 0, 1457, 1427, 0, 0, 0, 0, 0, 0,
	1442, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1459, 1467, 0,
	1469, 0, 0, 0, 1449, 1450, 1451, 0, 0, 0,
	0, 0, 0, 1456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1465, 0, 1466, 0, 0,
	0, 0, 0, 0, 1436, 1437, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1457,
	0, 0, 0, 0, 1448, 0, 0, 1442, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1443, 0, 0, 1467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1456, 810, 0, 0, 0, 0, 0, 1460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1419, 1420, 0, 1452, 1453, 1454, 1462, 1463,
	1464, 1448, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1455, 0, 0, 0, 0, 0, 0, 1422, 1443,
	0, 0, 1468, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1460, 1421, 0, 0, 0, 0,
	0, 1458, 0, 1441, 1433, 1434, 1440, 1439, 1435, 1461,
	1438, 1432, 1430, 1431, 1423, 1424, 1425, 1426, 1428, 1429,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1419, 1420, 0, 1452, 1453,
	1454, 1462, 1463, 1464, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1455, 0, 1444, 1445, 1446, 1447,
	0, 1422, 0, 0, 0, 1468, 1427, 0, 1458, 0,
	0, 1433, 1434, 1440, 1439, 1435, 1461, 0, 1432, 1430,
	1431, 1423, 1424, 1425, 1426, 1428, 1429, 0, 1421, 0,
	1459, 0, 0, 1469, 0, 0, 1441, 1449, 1450, 1451,
	0, 0, 0, 1438, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1465, 0,
	1466, 0, 0, 0, 0, 0, 0, 1436, 1437, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1457, 0, 0, 0, 0, 0, 0, 0,
	1442, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	1445, 1446, 1447, 0, 0, 0, 0, 0, 1467, 1427,
	0, 0, 0, 0, 2527, 0, 0, 0, 0, 0,
	0, 0, 0, 1456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1459, 0, 0, 1469, 0, 0, 0,
	1449, 1450, 1451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1465, 0, 1466, 1448, 0, 0, 0, 0, 0,
	1436, 1437, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1443, 0, 0, 1457, 0, 0, 0, 0,
	0, 0, 0, 1442, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1460, 0, 0,
	0, 1467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2800,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1419, 1420,
	0, 1452, 1453, 1454, 1462, 1463, 1464, 1448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1455, 0, 0,
	0, 2522, 0, 0, 1422, 1443, 0, 0, 1468, 0,
	0, 1458, 0, 0, 1433, 1434, 1440, 1439, 1435, 1461,
	0, 1432, 1430, 1431, 1423, 1424, 1425, 1426, 1428, 1429,
	1460, 1421, 0, 0, 0, 0, 0, 0, 0, 1441,
	0, 0, 0, 0, 0, 0, 1438, 0, 0, 0,
	0, 0, 0, 0, 0, 1419, 1420, 0, 1452, 1453,
	1454, 1462, 1463, 1464, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1455, 0, 0, 0, 0, 0,
	0, 1422, 0, 0, 0, 1468, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1444, 1445, 1446, 1447, 0, 0, 1421, 0,
	0, 0, 1427, 0, 1458, 0, 1441, 1433, 1434, 1440,
	1439, 1435, 1461, 1438, 1432, 1430, 1431, 1423, 1424, 1425,
	1426, 1428, 1429, 0, 0, 0, 1459, 0, 0, 1469,
	0, 0, 0, 1449, 1450, 1451, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1465, 0, 1466, 0, 0, 0,
	0, 0, 0, 1436, 1437, 0, 0, 0, 0, 1444,
	1445, 1446, 1447, 0, 0, 0, 0, 0, 1457, 1427,
	0, 0, 0, 0, 0, 0, 1442, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1459, 1467, 0, 1469, 0, 0, 0,
	1449, 1450, 1451, 0, 0, 0, 0, 0, 0, 1456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1465, 0, 1466, 0, 0, 0, 0, 0, 0,
	1436, 1437, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1457, 0, 0, 0, 0,
	1448, 0, 0, 1442, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1443, 0,
	0, 1467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1456, 0, 0, 0,
	0, 0, 0, 1460, 0, 0, 0, 0, 0, 0,
	0, 0, 2489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1419, 1420,
	0, 1452, 1453, 1454, 1462, 1463, 1464, 1448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1455, 0, 0,
	0, 2475, 0, 0, 1422, 1443, 0, 0, 1468, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1460, 1421, 0, 0, 0, 0, 0, 1458, 0, 1441,
	1433, 1434, 1440, 1439, 1435, 1461, 1438, 1432, 1430, 1431,
	1423, 1424, 1425, 1426, 1428, 1429, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1419, 1420, 0, 1452, 1453, 1454, 1462, 1463, 1464,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1455, 0, 1444, 1445, 1446, 1447, 0, 1422, 0, 0,
	0, 1468, 1427, 0, 1458, 0, 0, 1433, 1434, 1440,
	1439, 1435, 1461, 0, 1432, 1430, 1431, 1423, 1424, 1425,
	1426, 1428, 1429, 0, 1421, 0, 1459, 0, 0, 1469,
	0, 0, 1441, 1449, 1450, 1451, 0, 0, 0, 1438,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1465, 0, 1466, 0, 0, 0,
	0, 0, 0, 1436, 1437, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1457, 0,
	0, 0, 0, 0, 0, 0, 1442, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 1445, 1446, 1447, 0,
	0, 0, 0, 0, 1467, 1427, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1459,
	0, 0, 1469, 0, 0, 0, 1449, 1450, 1451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1465, 0, 1466,
	1448, 0, 0, 0, 0, 0, 1436, 1437, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1640, 1443, 0,
	0, 1457, 0, 0, 0, 0, 0, 0, 0, 1442,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1460, 0, 0, 0, 1467, 0, 0,
	0, 0, 0, 0, 0, 1652, 1634, 1641, 1624, 1662,
	1661, 0, 1456, 1626, 1625, 0, 0, 0, 0, 0,
	0, 1672, 1673, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1448, 0, 0, 0, 0, 0, 0,
	0, 1663, 0, 1659, 1658, 0, 0, 0, 0, 0,
	0, 1443, 0, 0, 0, 1657, 0, 1458, 0, 0,
	1433, 1434, 1440, 1439, 1435, 1461, 0, 1432, 1430, 1431,
	1423, 1424, 1425, 1426, 1428, 1429, 1460, 0, 0, 0,
	0, 0, 0, 0, 0, 1656, 1654, 1655, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1636, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1645,
	1639, 1647, 1649, 1650, 1651, 1646, 0, 1644, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1668, 1669, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1458, 0, 0, 1433, 1434, 1440, 1439, 1435, 1461, 0,
	1432, 1430, 1431, 1423, 1424, 1425, 1426, 1428, 1429, 0,
	0, 1628, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1660, 0, 0, 0, 1637, 0, 1638,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1653, 0, 0,
	0, 1621, 1619, 1620, 1623, 1622, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1629, 1630, 1632, 1633,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1648, 1631, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1671, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1627, 0, 1664, 1665, 1666, 1667, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1635, 0, 0, 0, 0, 1642, 1670,
}
var sqlPact = [...]int{

	5382, -1000, -1000, -1000, -1000, -1000, -1000, 259, 256, 255,
	254, 253, 252, 251, 250, 249, -1000, -1000, -1000, 248,
	-1000, -1000, 242, -1000, 236, 232, 231, 226, -1000, 220,
	218, -1000, -1000, -1000, -1000, 208, 205, 204, 49556, 1553,
	60784, 52040, 1608, 2101, 44140, 60366, 43722, 59948, 59530, 201,
	-1000, 59112, 200, 198, 197, -1000, -1000, 196, 1218, 35750,
	192, 191, 190, 1781, 188, 176, -1000, 169, -1000, 6743,
	1267, -1000, 166, 163, -1000, 7467, 420, 51622, 2086, 162,
	161, 35331, 2072, -1000, -1000, 1563, -1000, -1000, 155, 153,
	152, 150, 149, 143, 141, 138, 137, -1000, 134, 128,
	127, 113, 111, 108, 107, 106, 105, 103, 101, 100,
	97, 93, 90, 89, 88, -1000, 6680, 1491, 1370, 1367,
	1360, 1356, 1354, 806, 86, 85, 83, 82, 80, 77,
	-1000, -1000, 75, 71, 69, 68, -1000, 67, 66, 182,
	58, 56, 55, 54, 53, 2090, 2068, 1274, 303, 17019,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 64904, 61196, 47, -56, 46, -1000, 2410, 891,
	29889, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 452, -1000, -1000, -1000, 326, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1678, 636, -1000, -1000, -1000, 58694, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 61196, -1000, 1550, 0, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 633, -1000, 1549, 229, 1509,
	-1000, -1000, -1000, -1000, -1000, 61196, -1000, -1000, 2692, 2691,
	1581, 632, 58282, -1000, 1160, -1000, 742, 19678, -1000, 981,
	-1000, 19678, 324, -1000, -1000, -1000, -1000, -1000, 43304, 13934,
	42886, 42468, 39554, 57864, 13506, 49144, 1081, -1000, -1000, -1000,
	-1000, -1000, 16, 36986, 61196, -1000, 323, -1000, -1000, -1000,
	-1000, -1000, -1000, 25995, 267, 25541, 289, 25087, 269, -1000,
	-1000, -1000, -1000, 2689, 2688, 940, 2685, 2352, 64492, 1407,
	2684, 1287, 1008, 852, 2683, 2682, 2681, 2680, 2679, 2675,
	2674, 1195, 57446, 2116, 39126, 38698, 49556, 49556, 1918, 57028,
	-1000, -1000, 1109, 1105, -1000, -1000, -1000, -1000, 2233, 2098,
	2097, 48726, -1000, -1000, 2672, 2671, 2668, 2666, 2665, 64080,
	1388, 2664, 1832, 2662, 2661, 2660, 2657, 2653, 2650, 2649,
	2648, 2646, -1000, 48308, 47890, 47472, 47054, 56610, 38270, 37842,
	-1000, -1000, -1000, 31557, 814, 56192, 32415, 49556, 49556, -1000,
	-1000, 26436, -41, -1000, -1000, -1000, 2063, -1000, 26436, -41,
	-1000, 2115, 1510, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1958, 1291, 2544, 37414, 1576, 1091, 2229, 1184, 1776,
	2226, 2214, 2199, 2193, 2188, 1278, 1885, 1230, 1190, 2181,
	2180, 2567, 1504, 42050, 2645, 2643, 2420, 2168, 2062, -1000,
	-1000, -1000, -1000, 1161, -1000, -1000, -1000, -1000, -1000, 44552,
	-1000, -1000, 947, -1000, -1000, 947, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1079, 63256, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1264, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1761,
	-1000, 1520, -1000, -1000, 2642, 2068, 1783, 2388, 2388, 2388,
	2451, 442, 435, -1000, 182, -1000, -1000, 71060, -1000, -1000,
	26436, 26436, 26436, 26436, 26436, 1451, -1000, 631, -1000, -1000,
	668, -1000, 630, 587, -1000, -1000, -1000, -1000, -1000, -1000,
	628, 2578, -1000, 886, -1000, -1000, -1000, -1000, 2534, -1000,
	16124, -1000, -1000, -1000, 453, 627, 26436, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 317, 761, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 577,
	1386, 576, 576, 576, -1000, -1000, 831, -1000, -1000, -1000,
	322, 575, 321, 573, -1000, -1000, -1000, -1000, 2113, 625,
	623, -1000, 622, 620, 615, -1000, -1000, -1000, 614, 613,
	612, 611, 610, 609, 608, 606, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 829, -1000, 604, 603, 601, 600, 598,
	597, 596, 595, 593, -1000, -1000, 14, 61196, -1000, 452,
	14, -1000, -1000, 591, -1000, 20119, 20119, 20119, -1000, -1000,
	1548, 26436, -1000, 1940, -1000, 270, -226, 720, 30721, -1000,
	29038, 720, 674, 33665, -1000, 2058, -1000, -1000, 590, 315,
	-1000, -1000, 2049, 61196, 14360, 61196, 49556, 49556, -1000, 2307,
	26436, -1000, -1000, 39980, 36574, 61196, 49968, 2499, 71273, 36574,
	61196, 2109, -1000, -1000, -1000, 61196, -1000, 26436, -1000, 2498,
	1148, -15, -1000, -1000, -1000, -1000, -1000, -1000, 1803, 1845,
	923, 1647, 1286, -1000, 19678, 2344, -1000, -1000, -1000, 313,
	14360, -1000, 1768, 2286, 1033, -1000, 1620, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1317, 2284, -1000, 1775, 2283,
	1313, -1000, -1000, 812, 2276, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1551, -1000, -1000, 2395, -1000, -1000,
	1337, 2274, -212, -1000, -1000, 39980, 36986, 11, -1000, -1000,
	-36, -1000, 13078, 71060, -1000, -1000, -1000, 71060, 779, -1000,
	-1000, 2272, -1000, 71060, 772, -1000, -1000, 2266, -1000, -1000,
	-1000, 2640, -1000, 2639, 1769, 2637, 2636, 2635, -1000, 1335,
	1353, 2632, -1000, 2629, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 46636, 46218, 850, -1000, 1545, -1000, -1000, 45800, 794,
	1767, -1000, -1000, 1766, -1000, 860, -1000, 2628, 55774, 1946,
	794, 1765, -1000, -1000, -1000, -1000, -1000, 49556, -1000, 49556,
	-1000, 49556, -1000, 1177, -1000, 63668, -226, -1000, -1000, -1000,
	-1000, -1000, 2253, 2626, 2624, 2623, -1000, 61196, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 180, 2252, -1000,
	-1000, 180, 2242, -1000, 180, 2238, -1000, 173, 2237, -1000,
	-1000, 1610, 2235, -1000, -79, 2234, -1000, -1000, -79, 2228,
	-1000, 8, -1000, -1000, -1000, 891, -1000, 31139, 55356, 39980,
	743, 680, 588, 71060, -1000, 39980, 71060, -1000, 45800, -1000,
	54938, 45388, -1000, -1000, 1117, 1860, -1000, -1000, -1000, -1000,
	39980, 39980, -1000, 54520, -1000, 1570, 1256, 2398, 49556, -1000,
	-1000, -1000, 2406, 2108, -1000, 36162, 51204, -1000, 50792, -1000,
	50380, -1000, 49556, -1000, 49556, -1000, 2622, 2621, 2620, 2230,
	1373, 1372, 61196, -1000, -1000, 61196, -1000, 61196, -1000, -1000,
	-1000, 1800, -1000, -1000, -1000, -1000, 49556, -1000, -1000, -1000,
	-1000, -1000, -1000, 2106, -1000, 1322, -1000, 1114, -1000, -1000,
	183, -1000, -1000, -15, -1000, 63256, -1000, -1000, 2068, 1783,
	-1000, 61196, -1000, -1000, -1000, 2068, 1571, 1897, 24633, 1889,
	26436, 182, -1000, -1000, 182, 182, 19237, -1000, -1000, 71273,
	71273, 14360, 1089, 26436, 26436, 26436, 26436, 26436, 26436, 26436,
	26436, 26436, 26436, 26436, 26436, 26436, 26436, 26436, 26436, 26436,
	26436, 26436, 26436, 26436, 26436, 26436, 26436, 26436, 26436, 26436,
	26436, 26436, 26436, 26436, 26436, 26436, 26436, 26436, 1887, 26436,
	1075, 26436, 26436, 26436, 26436, 1912, -1000, -1000, 1500, 486,
	1516, -1000, 2527, 2527, 2527, 8297, 8297, 525, 2619, 668,
	-1000, 26436, -1000, -41, 26436, 14788, -1000, 2559, 1061, -1000,
	-1000, 435, 9263, 1668, -1000, 434, 15242, -1000, -1000, -1000,
	16124, 587, 24179, 26436, 824, 71060, 12652, 2110, 1988, -1000,
	2557, -1000, -1000, 2539, -1000, -1000, -1000, -1000, 2539, 1087,
	1086, 2556, -1000, 2539, 2539, 586, 762, 759, 756, 755,
	754, 26436, 26436, 26436, 26436, 26436, 26436, 26436, 26436, -1000,
	23738, 23284, 22830, 27759, 22376, 26436, 16565, 21922, 21468, 61196,
	14, 2497, 26436, 202, -1000, 69851, -1000, 202, 202, 585,
	4, 71060, 1866, 1866, 30305, 1850, 1469, 1469, 1469, -1000,
	583, 656, 44, 39, 36, -1000, -1000, 29, 19, 720,
	10080, 52452, 1481, 720, 720, 295, 292, 432, 28622, 1940,
	52452, -1000, -1000, 49556, 582, 14788, 14360, 1154, -10, 288,
	1899, 1898, 1893, -1000, 1214, -17, 743, 1071, -103, -1000,
	189, -18, -1000, 1073, -1000, -1000, -1000, -1000, 151, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 828, 580, 578, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 577, 1386, 576, 576,
	576, -1000, -1000, -1000, 322, 575, 321, 573, -1000, -1000,
	-1000, -1000, -1000, -1000, 2046, -36, 49968, 737, -27, 958,
	-15, -1000, 947, -1000, 1515, -1000, -1000, -1000, -1000, -1000,
	-1000, 1138, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2574,
	-1000, 2536, -1000, -1000, 2554, 12, -1000, -1000, 14360, -1000,
	-19, 1312, -1000, 41632, 2413, 2405, 2363, 1176, -1000, 1159,
	2449, 44552, 2478, 2486, 40, -1000, 2043, -1000, -1000, 740,
	1307, 1066, 44552, 1775, -1000, 71273, -1000, 1928, 2447, 1127,
	1131, 1127, 1127, 1125, -1000, 44552, 1064, 1408, 39980, -1000,
	1062, -1000, -25, 2476, 2483, 27, -1000, 2035, 1059, -1000,
	-1000, 49556, 14360, 714, 11, 36986, 61196, 284, -1000, 26436,
	-41, 26436, -41, -1000, -1000, 2222, -1000, -1000, -1000, 2617,
	1328, 1821, -1000, -1000, -1000, 559, 1757, 1775, 1750, -1000,
	-1000, 44970, 2028, 61196, 1909, -5, 49556, -1000, -1000, 1404,
	-1000, 2219, 2216, 607, 2616, -1000, 1544, 1746, -1000, -1000,
	-1000, 62844, 1098, 2215, 821, 136, 2496, 136, 34497, -1000,
	61196, -1000, 61196, -1000, -1000, -1000, 2615, -1000, 49556, -1000,
	-1000, 49556, -1000, 49556, -1000, 49556, -1000, 49556, 49556, -1000,
	61196, 39980, 39980, 39980, 209, 40808, -29, 431, -1000, 54108,
	61196, 881, 41220, 61196, -203, 743, 714, -1000, 714, -1000,
	49556, 2089, -1000, -1000, -1000, -1000, -1000, -1000, 2614, 2612,
	-1000, 787, -1000, -1000, 61196, -1000, 61196, -1000, -1000, 61196,
	-1000, 61196, -1000, 61196, -1000, -1000, -1000, -1000, -1000, 1194,
	-1000, 2079, -1000, 2073, -1000, 52, -1000, -1000, -1000, -1000,
	1697, 49556, 49556, 49556, -1000, 44552, -1000, -1000, 2068, -1000,
	-1000, -1000, -1000, -1000, 71060, -1000, 473, -1000, -1000, 71060,
	1283, 1913, -1000, 1913, 6, -1000, 69465, 1853, 49556, -1000,
	-1000, -1000, -1000, -1000, 739, 878, 878, 1007, 1007, 1007,
	1007, 2490, 3882, 3704, 3494, 4045, 4045, 4045, 4045, 4045,
	4045, 4045, 4045, 1637, 391, 391, 1637, 1637, 1637, 1637,
	1637, 391, 391, 391, 4045, 4045, 4045, 8297, 7799, 6006,
	26436, 26436, 1053, 1467, 486, 5178, 26436, 5504, 5504, 5504,
	5504, -1000, 1364, -1000, -1000, -1000, -1000, 2027, 558, 27759,
	27759, -1000, -1000, -1000, -1000, 15683, 26436, -1000, -1000, -1000,
	-1000, 21014, -1000, -1000, 69079, -243, 430, -148, -23, -1000,
	26436, 26436, 26436, 429, -1000, 418, -1000, -1000, 1040, -1000,
	1038, 1034, 1030, -1000, 540, 283, 26436, 61196, -1000, 66944,
	654, -137, -1000, -35, 1137, -1000, 26436, 282, -1000, 1456,
	539, 538, 417, -37, -1000, 413, 738, 735, 412, 411,
	410, 26436, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 70957, 66841, 66558, 66481, 8878, 66198, 66095, -39,
	409, -1000, 2026, -148, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 407, -1000, 406, -1000, 70674, -148, 405, 6026, -1000,
	27759, 27759, 27759, -1000, 403, -1000, 69568, -1000, 70597, 20573,
	20573, 20573, 402, 70314, 26436, -148, -43, -1000, -47, -1000,
	-1000, 537, -49, 821, 20119, 29470, 14360, -1000, 821, 821,
	26436, -1000, 26436, 1883, -1000, -1000, -1000, 1873, 1801, 1866,
	30305, -1000, -1000, -1000, -1000, 52452, 499, 720, -1000, -1000,
	-1000, -1000, -1000, 52452, -1000, 2534, 2103, -1000, -1000, -1000,
	61196, 452, -1000, 52452, 52452, 14360, 720, -1000, 399, 32831,
	-23, 279, -1000, -1000, 14360, 1900, 1900, 1900, -1000, -1000,
	2024, 61196, 2500, -1000, 1394, -1000, 71273, -1000, 664, 910,
	-1000, 2550, 536, -1000, 2539, 2539, 61196, 131, 19678, -1000,
	947, -1000, -1000, 1248, -1000, 1350, -1000, 1012, -1000, -1000,
	-1000, 19678, -1000, 1512, 61196, 61196, 49556, -1000, -1000, 1741,
	62432, 1736, 71273, 61196, -1000, -1000, 532, 528, 1852, 1847,
	61196, 61196, 62020, 61608, 61196, 1399, 26436, 1435, 1359, -41,
	-41, -1000, -1000, -41, 526, 1016, 49556, 49556, 49556, 1304,
	-1000, -1000, -1000, -1000, -1000, 49556, -1000, -1000, 2543, -1000,
	1127, -1000, -1000, -1000, 1127, 1775, 1301, 49556, 39980, 811,
	61196, 1422, -41, -41, -1000, -1000, -41, 524, 14360, 1326,
	-1000, 1952, -1000, -1000, -1000, 12226, 71060, -1000, 71060, -1000,
	61196, -1000, 837, 61196, 41220, 788, 2203, -1000, 1775, 2195,
	452, -1000, -1000, 34081, -36, 743, 39980, 49556, -5, 39980,
	39980, 39980, 2609, 523, 2608, -1000, 49556, 2186, 1542, 1722,
	2294, 702, 61196, 1479, -1000, 26436, 1347, -1000, 33249, 859,
	61196, 1265, 109, -1000, -1000, -1000, 41, 61196, -1000, 2607,
	-1000, -1000, 180, 180, 180, -1000, 173, 1610, -1000, -79,
	-79, -1000, -1000, 209, 743, -14, 522, -1000, 710, 708,
	31989, 39980, -55, -1000, -1000, -1000, -1000, -1000, 49556, 61196,
	669, 1933, 61196, -60, -1000, 276, -1000, 743, -1000, -1000,
	807, -1000, 1106, -1000, -1000, -1000, -36, -36, -1000, -1000,
	-1000, -1000, 1192, 1189, 61196, -1000, 14360, 61196, 49556, 14360,
	49556, -1000, -1000, -1000, -1000, -1000, 1283, -1000, 26436, -1000,
	-1000, -1000, 19237, -1000, -1000, -1000, 49556, -218, 26436, 26436,
	4985, 4822, 26436, 27759, 27759, -1000, 26436, 3682, -1000, -1000,
	-1000, -1000, -1000, 2021, 521, 26436, 71273, 4407, 4371, -1000,
	394, 65812, 1637, -1000, 26436, -1000, 387, 18796, -1000, 69928,
	-31, -62, -1000, 2570, 1780, 1409, 1309, 1196, 2542, 11800,
	-148, -64, -1000, -1000, 663, -1000, 2292, -1000, 26436, 70211,
	11374, -1000, 34913, 822, 1479, -1000, -1000, 2539, 723, -1000,
	-1000, -1000, 723, -1000, 68796, 71273, 71273, 26436, 26436, -1000,
	26436, 26436, 26436, -1000, -1000, 26436, -1000, -1000, 2019, 26436,
	-1000, 71273, 71273, 27759, 27759, 27759, 27759, 27759, 27759, 27759,
	27759, 27759, 27759, 27759, 27759, 27759, 27759, 27759, 27759, 27759,
	27759, 27759, 1806, 27759, 2525, 2525, 2525, -1000, 2037, 2019,
	26436, 26436, 71273, 379, 378, 374, -1000, 26436, -148, -1000,
	-1000, 209, -1000, 1985, -1000, -157, -1000, 1940, -1000, -1000,
	1985, 1985, -72, 71060, 30305, 30305, -1000, 520, 26436, 1863,
	-1000, 653, -1000, -78, -1000, 52452, -1000, 652, -241, -1000,
	707, -1000, -1000, -1000, -1000, 452, -1000, -1000, -1000, 273,
	52452, -1000, -82, -1000, 2495, 368, 14360, -1000, -1000, -1000,
	-1000, -1000, -1000, -41, -36, 1501, 2568, -1000, 2541, 660,
	651, 367, 2539, 366, 365, -36, 61196, -1000, -15, -1000,
	-1000, -1000, 26436, -1000, -1000, 2367, 1023, 1015, -1000, 2171,
	-1000, 1709, -1000, 865, -1000, 1266, -1000, 26436, 26436, 517,
	515, 1430, 2606, 2170, 1610, 2163, 1610, -1000, -1000, 746,
	-1000, 71060, 514, 513, -1000, -19, 1299, 798, -1000, -1000,
	26436, 26436, 53692, -1000, 2395, 2395, -1000, 1011, -1000, -1000,
	-1000, 1775, 1009, -1000, -1000, 1403, -1000, -1000, 795, -1000,
	-1000, 26436, -1000, -25, 1004, 743, 2018, -1000, 2605, 2604,
	2603, 364, -87, -26, 71273, 2494, 1567, 61196, 49556, 49556,
	2492, 726, -1000, 2534, -1000, -1000, -1000, -1000, 794, -1000,
	-1000, 2602, -1000, 880, 14360, 49556, 2159, 1815, 702, 40396,
	-1000, 794, 1897, 71060, -1000, 1265, 18342, 2369, -88, -1000,
	-1000, -1000, 821, 34497, 30305, 26436, 2601, -89, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 53280, 53280, 39980, 39980,
	39980, 743, 61196, 61196, 41220, 2600, 512, 61196, 61196, 509,
	-1000, 61196, 61196, 2599, -1000, -1000, 1507, 49556, -1000, -1000,
	787, -1000, -1000, 1423, 1579, 1423, 1494, 68719, -1000, 2385,
	14360, 2493, 5504, 26436, 26436, 351, 3698, 3607, 5504, 26436,
	26436, 71273, 9460, -95, 26436, 26436, -1000, 26436, 650, 71060,
	2565, 26436, 363, 362, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 361, -1000, -1000, -1000, -1000, -1000, 71060,
	26436, 110, -1000, -1000, -1000, 65316, -1000, 26436, 360, 358,
	-1000, -1000, -1000, 357, 355, 65735, 4335, 68436, 68333, 68050,
	71060, 2037, 71060, -1000, -1000, 838, 838, 1116, 1116, 1116,
	1116, 2525, 466, 503, 857, 433, 433, 433, 817, 834,
	834, 433, 433, 433, 2016, 1717, 507, 6047, -1000, -1000,
	71060, 71060, 352, -1000, -1000, -1000, -148, 350, 1981, 2446,
	-1000, 30305, 1981, 1981, -1000, -1000, 1801, 61196, 71060, 30305,
	-226, -1000, 2534, -1000, -1000, 2103, -1000, 10518, -1000, 14360,
	-1000, -1000, 32831, -1000, 506, -1000, 28, -1000, -1000, -1000,
	647, 2596, 659, -1000, 348, -1000, -1000, -36, 71060, 61196,
	61196, 61196, 2155, -1000, 3526, -1000, 67973, -102, -1000, 69465,
	26436, 61196, -1000, 1439, 1862, 934, -1000, 61196, -1000, 61196,
	-1000, -1000, 61196, 61196, 49556, 2144, -107, 71060, -44, -1000,
	706, -1000, -1000, 49556, 49556, 39980, 2122, -108, 14360, -1000,
	39980, -1000, -1000, -1000, 1929, -1000, 52864, 1375, -41, -1000,
	2589, 505, 1775, -41, -1000, 1492, -1000, 646, -1000, -1000,
	504, 61196, 1541, 502, 14360, 1825, 702, 40396, -1000, 1098,
	1265, -1000, -1000, -51, -1000, 519, -41, 1479, -1000, -71,
	71060, -1000, 705, -1000, -109, -1000, -1000, 337, -1000, 2333,
	2331, -1000, -1000, 26436, 501, 492, 61196, 2330, -1000, -1000,
	1824, -1000, -1000, -1000, -1000, 14360, 1271, -1000, -1000, -1000,
	-1000, 2385, 5504, 5504, 26436, 26436, 26436, 5504, 9460, -113,
	-1000, 5504, 5504, -148, -1000, -1000, 69928, -1000, -1000, -1000,
	71060, 10948, 1424, -1000, 67690, -1000, -1000, -1000, -1000, 26436,
	26436, -1000, -1000, -1000, -1000, -1000, 27759, 2009, 491, 71273,
	-1000, -1000, 816, 26436, 26436, 1940, 816, 816, -1000, -114,
	-1000, 720, -1000, -1000, -1000, 2534, 28, -1000, 2588, 14360,
	643, -1000, 2586, -1000, -1000, -1000, -1000, 61196, -1000, 61196,
	-1000, 14360, 61196, 2002, 1698, -1000, -1000, 1841, 487, 27759,
	49556, 642, 2006, 1426, 26436, -1000, -115, -119, 1691, -1000,
	-1000, 1674, 26436, -1000, 71273, 1610, 1610, -121, -123, -1000,
	26436, 1001, 61196, 17901, -1000, -1000, -1000, 26436, 998, -1000,
	-79, 1422, 1961, -1000, -1000, -1000, 1840, -1000, -1000, 1839,
	777, -1000, 41220, 788, -1000, -1000, 771, -1000, 26436, -1000,
	49556, 26436, 1539, -1000, 702, 40396, -1000, 2294, -1000, 2303,
	61196, 2360, -1000, 1897, 486, -1000, 743, 485, 483, -127,
	26436, 26436, -128, 482, -83, -1000, 776, 774, -1000, -1000,
	49556, 49556, -1000, 5504, 5504, 5504, -1000, 333, -1000, -1000,
	1479, 2440, -1000, 67587, 67304, 985, 27759, 71273, -132, -1000,
	61196, 71060, -148, -1000, -1000, -1000, 52452, 645, -1000, 2585,
	-1000, -1000, 1463, -1000, -1000, -1000, 61196, 1681, -1000, -1000,
	26436, 6047, 481, 26436, -1000, -1000, 1926, 2034, 1929, 480,
	-1000, -1000, -1000, -1000, 1325, -1000, -1000, 71060, 2412, -1000,
	-1000, 478, 476, 71060, 474, 699, 2000, -1000, 71060, 471,
	788, -1000, 1444, 1375, 470, -1000, -1000, 1911, 331, 2491,
	771, -1000, 2531, -1000, -143, 880, -147, 49556, 40396, -1000,
	1815, 1067, -152, 61196, 1265, -1000, -1000, 39980, 39980, 1426,
	-153, -158, -1000, 39980, 1824, -1000, 61196, -1000, 61196, -1000,
	-1000, -1000, 1625, 26436, -1000, -1000, 985, -159, -1000, -97,
	-1000, 2482, -1000, -1000, -1000, -1000, -1000, 2152, 67227, 1788,
	61196, 6096, 2032, -1000, -1000, 1422, 61196, 49556, 879, 14360,
	1423, 1423, 26436, 17460, 1434, 26436, -1000, 49556, 61196, -1000,
	2328, 1929, -41, -1000, -1000, 1426, 469, 1426, 468, -1000,
	1825, 1173, -1000, 821, -1000, -1000, -160, -166, 1929, 1426,
	-1000, -168, -1000, -170, -174, 330, 27318, 27318, 27318, -148,
	-1000, 61196, 467, 2135, -1000, 1522, 1478, 328, 892, -1000,
	-1000, 2006, -176, 452, -1000, 26436, -1000, -180, -1000, 858,
	-186, -1000, 842, -193, -1000, 1997, -1000, -195, 450, -201,
	-1000, -1000, -1000, 1422, 777, 1929, 26436, 1929, 26436, -1000,
	34497, -1000, 743, 743, 1422, 1929, 743, -1000, -1000, -1000,
	-1000, -1000, 28185, 1521, 1219, 69182, -1000, -1000, -1000, -1000,
	61196, -1000, 1532, 1523, 1186, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1788, 71060, -1000, 1423, 1960, -1000, 1423,
	1996, -1000, 1431, -1000, 61196, -1000, 61196, 788, -1000, 1422,
	-202, 1422, -207, -191, -1000, -1000, -1000, 1422, -1000, 2504,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2316, -1000, 914,
	1475, 1475, 1522, -1000, 449, -1000, 448, -1000, -209, -1000,
	-1000, 815, 1426, 815, 1426, -1000, -1000, 26877, -1000, 2513,
	-1000, -1000, 1819, -1000, 2006, 26436, 26436, 1573, -1000, 2584,
	1929, -1000, 1929, -1000, -1000, -1000, -1000, -1000, -230, -231,
	-1000, -1000, -1000, -1000, 1422, 1422, 1422, 997, 815, 815,
	-1000, 444, -1000, -1000, 26436, -232, 1422, -1000,
}
var sqlPgo = [...]int{

	0, 3267, 3266, 3265, 3263, 3262, 3261, 3260, 3257, 3256,
	3255, 3254, 3253, 3252, 3250, 3249, 3248, 3243, 3242, 3241,
	3240, 3237, 3235, 3233, 3231, 3230, 3226, 3225, 3223, 3222,
	3220, 3219, 3218, 3217, 3216, 3215, 3213, 3212, 3211, 3210,
	3204, 3202, 3200, 3198, 3196, 3195, 31, 3192, 3186, 3185,
	3184, 3181, 3180, 3178, 3176, 3175, 3173, 3170, 3167, 3166,
	3164, 3157, 3154, 3153, 35, 3150, 212, 3149, 3143, 3140,
	3139, 3138, 3136, 3135, 3131, 3129, 3128, 211, 3126, 129,
	3123, 3116, 3114, 3111, 3110, 210, 3109, 3108, 3102, 3099,
	3098, 3097, 3096, 3095, 3094, 171, 3090, 3079, 3077, 3076,
	3074, 3073, 3072, 3064, 3063, 3061, 182, 3060, 208, 3057,
	3056, 3055, 3054, 3053, 3052, 3050, 3049, 3043, 3041, 3040,
	3039, 3038, 3037, 3036, 3035, 3034, 3031, 3030, 3029, 3028,
	3016, 3014, 3002, 3001, 209, 142, 2998, 2995, 205, 201,
	2994, 2993, 89, 84, 79, 2991, 81, 135, 183, 6568,
	172, 2990, 2989, 2987, 2986, 2983, 72, 130, 132, 120,
	127, 122, 2981, 2980, 63, 53, 32, 27, 100, 2979,
	2974, 2973, 2439, 90, 2972, 2971, 199, 180, 2967, 1003,
	2966, 155, 193, 88, 99, 76, 2961, 117, 20, 2958,
	144, 102, 2956, 123, 59, 30, 6322, 4218, 2953, 110,
	214, 93, 112, 175, 159, 167, 164, 128, 87, 2950,
	187, 2943, 73, 151, 2940, 2933, 2932, 56, 140, 74,
	2931, 2, 9, 149, 11, 77, 17, 2930, 12, 2927,
	2926, 2922, 2921, 23, 147, 2919, 116, 66, 2917, 26,
	2916, 95, 160, 2915, 169, 2914, 86, 2911, 194, 150,
	141, 13, 165, 2910, 2909, 2907, 2906, 2905, 92, 19,
	91, 2904, 2903, 94, 179, 2899, 34, 125, 68, 106,
	203, 83, 163, 71, 168, 136, 176, 2896, 2895, 2894,
	143, 2893, 2892, 113, 158, 2891, 2890, 213, 33, 51,
	178, 55, 2889, 2887, 121, 2886, 148, 2885, 2884, 2883,
	204, 134, 162, 5, 67, 85, 25, 8, 177, 118,
	80, 70, 2882, 3481, 1068, 274, 2881, 107, 75, 38,
	96, 111, 198, 50, 2877, 2876, 350, 2875, 2874, 2873,
	2872, 138, 2871, 2870, 2869, 98, 37, 62, 2867, 2866,
	119, 57, 16, 432, 200, 65, 161, 146, 189, 2865,
	137, 2863, 40, 104, 2843, 153, 186, 233, 2840, 1031,
	109, 2839, 188, 2838, 2837, 2836, 2835, 452, 2831, 2830,
	924, 2828, 108, 2827, 2825, 145, 131, 166, 103, 28,
	2824, 61, 124, 2821, 152, 44, 2818, 356, 43, 0,
	6790, 5330, 6097, 2817, 886, 2810, 156, 97, 2809, 2808,
	2807, 2804, 2800, 54, 2798, 2797, 36, 2796, 15, 4,
	7, 14, 18, 782, 126, 2795, 2794, 69, 101, 114,
	2793, 202, 170, 2766, 2763, 2762, 64, 2760, 24, 2759,
	22, 2753, 2752, 29, 6, 2746, 2741, 184, 2737, 181,
	2736, 2732, 2508, 2723, 196, 2720, 105, 2719, 133, 197,
	2718, 2717, 2716, 2715, 192, 2712, 195, 2711, 10, 21,
	3, 2706, 2705, 2703, 157, 1, 2277, 2702, 2699, 58,
	154, 2698, 2697, 139,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 3, 3, 3,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 7, 7, 8, 8, 8, 34, 34,
	10, 10, 9, 9, 9, 11, 11, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 13, 13, 24, 24,
	14, 14, 26, 26, 15, 15, 27, 27, 444, 444,
	18, 29, 19, 30, 12, 446, 446, 446, 446, 22,
	20, 20, 31, 31, 145, 145, 145, 145, 17, 17,
	25, 25, 158, 158, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 443, 443, 160, 160, 159,
	155, 155, 447, 447, 161, 161, 161, 163, 163, 35,
	35, 93, 93, 93, 146, 86, 86, 86, 86, 86,
	86, 86, 86, 81, 81, 387, 387, 388, 388, 141,
	141, 142, 142, 142, 142, 143, 143, 144, 144, 144,
	49, 37, 37, 37, 37, 37, 37, 37, 38, 38,
	38, 38, 39, 39, 39, 39, 39, 39, 40, 40,
	40, 40, 40, 40, 47, 47, 47, 47, 135, 135,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 451,
	451, 451, 451, 451, 451, 451, 451, 451, 451, 451,
	451, 451, 451, 451, 451, 451, 451, 451, 451, 451,
	452, 452, 453, 453, 454, 454, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 61, 61, 235, 235, 211, 211, 62, 62, 62,
	63, 63, 64, 64, 51, 51, 439, 439, 249, 249,
	354, 354, 66, 66, 67, 67, 67, 67, 67, 67,
	68, 68, 68, 68, 68, 68, 68, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 75, 75, 75,
	76, 76, 76, 73, 73, 73, 71, 71, 71, 70,
	70, 70, 74, 74, 74, 72, 72, 72, 250, 250,
	77, 77, 77, 77, 77, 77, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 356,
	356, 78, 78, 78, 324, 324, 82, 82, 82, 281,
	281, 83, 83, 83, 83, 83, 84, 84, 84, 84,
	94, 94, 94, 94, 442, 442, 242, 242, 176, 176,
	176, 176, 89, 89, 89, 89, 90, 90, 90, 91,
	91, 140, 140, 100, 100, 100, 100, 100, 99, 99,
	99, 99, 99, 99, 41, 41, 41, 42, 42, 43,
	43, 44, 44, 45, 45, 46, 46, 46, 46, 46,
	102, 102, 448, 448, 104, 101, 101, 101, 103, 103,
	103, 103, 105, 106, 106, 106, 106, 106, 106, 107,
	107, 381, 381, 257, 257, 379, 379, 395, 395, 380,
	380, 215, 215, 215, 215, 215, 216, 216, 216, 386,
	386, 386, 386, 386, 386, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 125, 125, 125, 134, 134, 134,
	134, 134, 134, 134, 127, 127, 127, 117, 117, 109,
	109, 109, 109, 113, 113, 113, 113, 113, 110, 110,
	114, 114, 116, 116, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 111, 111, 111, 111, 120, 120, 120,
	120, 287, 287, 287, 119, 119, 339, 339, 130, 130,
	130, 130, 130, 130, 338, 338, 126, 126, 126, 126,
	129, 129, 129, 129, 271, 271, 123, 123, 123, 124,
	124, 124, 128, 128, 131, 131, 131, 131, 112, 112,
	112, 457, 457, 457, 132, 132, 122, 122, 133, 133,
	133, 133, 133, 133, 133, 133, 121, 121, 121, 445,
	445, 115, 440, 440, 437, 437, 437, 437, 437, 437,
	437, 438, 438, 441, 441, 87, 87, 87, 56, 56,
	458, 458, 458, 57, 57, 459, 459, 459, 456, 456,
	456, 456, 456, 456, 456, 456, 217, 217, 218, 218,
	305, 305, 305, 305, 305, 221, 221, 162, 162, 162,
	224, 225, 225, 222, 222, 223, 223, 223, 227, 227,
	226, 229, 229, 228, 304, 402, 402, 404, 404, 404,
	404, 404, 404, 404, 406, 406, 406, 406, 406, 406,
	406, 406, 406, 406, 400, 400, 400, 401, 396, 396,
	397, 397, 397, 397, 219, 219, 220, 220, 220, 398,
	399, 240, 240, 342, 403, 403, 405, 407, 460, 460,
	460, 460, 460, 460, 461, 461, 303, 303, 233, 233,
	408, 408, 408, 408, 409, 409, 409, 409, 409, 412,
	411, 410, 410, 410, 410, 410, 334, 334, 334, 60,
	60, 60, 268, 268, 267, 267, 269, 269, 269, 269,
	269, 269, 269, 269, 269, 269, 269, 269, 269, 269,
	137, 137, 58, 58, 58, 168, 168, 55, 55, 55,
	463, 463, 59, 59, 59, 464, 464, 65, 65, 65,
	65, 65, 65, 54, 54, 54, 54, 54, 465, 465,
	288, 288, 286, 286, 239, 239, 341, 180, 180, 156,
	156, 156, 21, 23, 23, 16, 16, 32, 32, 33,
	33, 28, 28, 449, 449, 450, 450, 88, 88, 92,
	92, 92, 98, 98, 136, 136, 136, 136, 136, 136,
	136, 36, 36, 36, 36, 48, 48, 48, 48, 96,
	467, 467, 467, 97, 97, 466, 466, 175, 175, 175,
	175, 177, 177, 300, 300, 301, 301, 468, 468, 302,
	302, 302, 302, 170, 169, 171, 171, 53, 53, 53,
	164, 164, 165, 165, 166, 166, 167, 167, 469, 469,
	85, 85, 85, 139, 139, 210, 210, 296, 296, 296,
	234, 234, 185, 185, 299, 299, 297, 297, 297, 297,
	266, 266, 266, 138, 138, 245, 245, 259, 259, 260,
	260, 351, 351, 261, 95, 95, 149, 149, 147, 147,
	147, 147, 147, 147, 470, 470, 148, 148, 148, 150,
	150, 150, 150, 150, 150, 150, 153, 153, 153, 153,
	154, 154, 154, 152, 152, 419, 419, 419, 421, 421,
	422, 418, 418, 420, 420, 462, 462, 270, 270, 270,
	231, 232, 230, 230, 237, 237, 236, 238, 238, 340,
	340, 340, 264, 264, 264, 264, 291, 291, 289, 289,
	290, 290, 292, 292, 293, 293, 293, 294, 294, 295,
	295, 263, 263, 320, 320, 151, 151, 151, 244, 244,
	244, 246, 246, 311, 311, 311, 311, 311, 311, 312,
	312, 310, 310, 310, 310, 343, 343, 343, 343, 343,
	343, 343, 343, 343, 344, 344, 247, 247, 345, 298,
	298, 435, 435, 435, 436, 436, 337, 337, 346, 346,
	346, 346, 346, 346, 335, 335, 336, 336, 352, 353,
	353, 274, 274, 274, 274, 272, 272, 275, 275, 275,
	275, 273, 273, 347, 347, 347, 347, 265, 265, 348,
	348, 348, 349, 306, 307, 307, 357, 357, 357, 357,
	357, 372, 243, 243, 243, 243, 243, 471, 471, 358,
	358, 358, 358, 358, 358, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 362, 362, 362,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 371, 371,
	371, 371, 371, 363, 363, 368, 368, 369, 369, 369,
	364, 365, 370, 370, 370, 370, 472, 472, 374, 374,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 360,
	360, 360, 367, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 282, 282, 283, 283,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 315, 315, 315, 315, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 413, 413, 413, 413, 413, 413,
	413, 413, 416, 416, 417, 417, 414, 414, 414, 414,
	414, 414, 414, 414, 414, 414, 414, 414, 414, 414,
	414, 414, 414, 414, 414, 414, 414, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 423, 423, 424, 424, 426,
	426, 427, 427, 428, 429, 429, 429, 430, 431, 431,
	425, 425, 432, 432, 432, 432, 433, 433, 434, 434,
	434, 434, 434, 326, 326, 327, 327, 333, 333, 333,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 178, 178, 178, 178,
	178, 255, 255, 253, 253, 253, 256, 256, 254, 254,
	252, 252, 251, 251, 323, 323, 321, 321, 325, 325,
	276, 276, 373, 373, 373, 373, 373, 373, 373, 277,
	277, 277, 285, 278, 278, 279, 279, 279, 279, 279,
	317, 318, 280, 280, 280, 319, 319, 328, 332, 332,
	331, 330, 330, 329, 329, 308, 308, 309, 309, 262,
	262, 473, 473, 258, 258, 350, 350, 350, 350, 213,
	213, 248, 248, 212, 212, 205, 205, 206, 206, 206,
	206, 241, 241, 375, 375, 375, 376, 377, 378, 322,
	195, 194, 182, 183, 193, 192, 191, 181, 184, 188,
	189, 190, 186, 187, 201, 200, 199, 197, 198, 355,
	207, 207, 208, 208, 208, 209, 209, 209, 209, 179,
	179, 202, 202, 203, 204, 204, 196, 196, 196, 172,
	172, 172, 173, 173, 174, 174, 385, 385, 383, 383,
	383, 384, 384, 384, 384, 382, 382, 382, 382, 382,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 391, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 394, 394,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 0, 1, 1, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 1, 3, 1, 1, 3, 4, 6,
	1, 3, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 4, 6, 4, 6,
	6, 9, 6, 9, 6, 5, 6, 5, 1, 1,
	5, 5, 6, 6, 4, 4, 4, 4, 3, 4,
	4, 7, 4, 7, 5, 3, 5, 7, 4, 12,
	4, 12, 1, 3, 5, 5, 2, 5, 3, 6,
	4, 6, 5, 6, 6, 4, 8, 3, 4, 3,
	6, 4, 3, 1, 3, 2, 1, 1, 3, 1,
	3, 2, 2, 0, 1, 1, 0, 2, 0, 7,
	2, 5, 6, 2, 1, 6, 4, 9, 7, 12,
	12, 12, 2, 7, 2, 1, 1, 1, 3, 3,
	0, 3, 1, 3, 1, 1, 3, 2, 5, 0,
	5, 1, 2, 1, 2, 1, 2, 2, 3, 3,
	3, 3, 3, 5, 3, 3, 5, 3, 3, 5,
	3, 3, 5, 3, 6, 6, 6, 3, 1, 1,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 3,
	3, 4, 3, 4, 7, 4, 4, 4, 3, 5,
	7, 4, 3, 3, 4, 3, 3, 3, 3, 3,
	2, 0, 1, 0, 1, 0, 3, 3, 3, 3,
	3, 6, 4, 4, 4, 3, 5, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 4, 1, 1, 2, 1,
	2, 7, 3, 2, 0, 1, 3, 3, 1, 0,
	1, 2, 2, 1, 6, 5, 1, 2, 1, 3,
	2, 0, 8, 3, 2, 2, 2, 2, 2, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 3, 5, 3, 3, 5, 3, 1, 3,
	2, 2, 5, 3, 6, 3, 1, 1, 2, 1,
	1, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 2, 1,
	3, 5, 7, 2, 3, 0, 3, 5, 2, 3,
	0, 2, 3, 2, 3, 2, 6, 4, 7, 2,
	6, 4, 7, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 2, 1, 2, 2, 3, 2, 4,
	3, 2, 2, 1, 2, 1, 3, 3, 1, 2,
	1, 2, 1, 2, 1, 1, 3, 5, 4, 6,
	4, 3, 0, 1, 3, 2, 4, 2, 4, 1,
	6, 3, 1, 1, 5, 3, 2, 6, 3, 3,
	4, 4, 3, 1, 3, 2, 1, 3, 1, 2,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 1,
	3, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 2, 3, 3, 1, 1, 1,
	1, 1, 2, 2, 5, 7, 3, 3, 3, 3,
	4, 4, 3, 4, 4, 3, 4, 4, 5, 3,
	3, 3, 4, 3, 4, 3, 5, 4, 5, 3,
	4, 5, 3, 4, 3, 4, 3, 3, 4, 4,
	5, 0, 1, 1, 3, 4, 1, 0, 5, 4,
	6, 4, 6, 4, 1, 0, 3, 4, 4, 5,
	7, 5, 3, 3, 2, 0, 4, 2, 3, 4,
	2, 3, 3, 3, 4, 3, 3, 3, 3, 4,
	3, 1, 1, 1, 2, 3, 2, 3, 6, 6,
	7, 9, 7, 9, 3, 4, 5, 5, 3, 1,
	1, 5, 2, 0, 1, 1, 1, 1, 3, 2,
	2, 2, 1, 2, 0, 3, 3, 2, 10, 13,
	0, 2, 3, 9, 12, 0, 2, 3, 1, 1,
	2, 2, 2, 2, 1, 0, 1, 0, 1, 3,
	1, 1, 1, 1, 3, 8, 0, 1, 1, 0,
	2, 1, 0, 1, 0, 9, 9, 3, 1, 3,
	7, 1, 3, 11, 3, 2, 0, 3, 1, 2,
	2, 3, 2, 6, 2, 1, 1, 2, 4, 2,
	5, 5, 5, 2, 8, 9, 6, 5, 3, 1,
	5, 8, 5, 11, 3, 0, 2, 3, 4, 1,
	5, 1, 3, 1, 2, 0, 1, 2, 0, 1,
	3, 3, 2, 2, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 5,
	8, 4, 1, 0, 1, 2, 2, 1, 2, 3,
	2, 2, 3, 2, 2, 2, 2, 2, 3, 1,
	4, 2, 4, 7, 3, 3, 0, 3, 6, 3,
	1, 1, 8, 7, 5, 0, 1, 6, 7, 6,
	5, 3, 4, 14, 17, 14, 17, 4, 0, 2,
	2, 0, 1, 0, 1, 3, 2, 2, 0, 1,
	1, 0, 6, 6, 8, 6, 8, 6, 8, 6,
	8, 6, 8, 1, 0, 2, 0, 2, 2, 3,
	3, 2, 2, 2, 1, 2, 1, 2, 1, 2,
	1, 3, 2, 3, 2, 2, 2, 2, 2, 2,
	1, 1, 0, 2, 2, 1, 0, 1, 3, 2,
	0, 2, 1, 1, 0, 1, 3, 1, 0, 1,
	1, 1, 1, 2, 3, 2, 2, 8, 11, 3,
	3, 0, 3, 0, 3, 0, 3, 0, 1, 0,
	6, 7, 3, 6, 3, 1, 3, 1, 4, 2,
	1, 3, 1, 3, 8, 5, 3, 4, 3, 0,
	2, 2, 0, 10, 3, 2, 0, 1, 3, 1,
	1, 3, 3, 5, 1, 1, 3, 3, 2, 3,
	4, 3, 4, 5, 0, 2, 2, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 8, 8, 8, 2,
	4, 4, 4, 2, 2, 2, 2, 3, 1, 3,
	6, 1, 0, 1, 0, 1, 0, 1, 1, 0,
	1, 5, 1, 0, 1, 0, 3, 1, 3, 2,
	4, 5, 2, 2, 1, 1, 1, 0, 2, 5,
	2, 3, 1, 1, 1, 3, 0, 1, 1, 1,
	1, 3, 0, 2, 0, 4, 2, 5, 3, 2,
	0, 1, 3, 3, 5, 1, 1, 1, 1, 1,
	3, 2, 4, 4, 0, 8, 4, 3, 4, 1,
	5, 3, 4, 5, 1, 5, 1, 3, 2, 0,
	3, 0, 2, 3, 1, 3, 2, 0, 3, 5,
	6, 4, 6, 4, 3, 2, 1, 0, 5, 1,
	0, 2, 2, 2, 1, 1, 0, 1, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 2, 1, 0, 2, 5, 7, 2,
	1, 1, 2, 4, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 2, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 5, 4, 1, 2, 1,
	4, 1, 1, 2, 1, 1, 1, 1, 1, 0,
	1, 2, 5, 1, 4, 2, 5, 1, 4, 3,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 1, 0, 1, 4,
	1, 3, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 5, 4, 6, 3, 5,
	4, 6, 4, 6, 5, 7, 3, 3, 3, 3,
	3, 4, 3, 2, 4, 2, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 6,
	7, 3, 4, 4, 1, 3, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 6, 2, 1, 5, 1, 1,
	1, 1, 2, 1, 5, 5, 3, 1, 1, 1,
	2, 2, 2, 4, 3, 5, 6, 8, 6, 5,
	4, 3, 4, 1, 1, 1, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 6, 6, 8, 8,
	6, 4, 6, 6, 6, 4, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 3, 4,
	3, 4, 3, 4, 4, 3, 6, 5, 5, 5,
	4, 4, 3, 4, 3, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 2, 2, 2, 0, 1, 4, 2, 2,
	2, 2, 2, 4, 1, 1, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	2, 2, 3, 1, 2, 3, 2, 3, 2, 3,
	1, 0, 1, 3, 1, 3, 3, 3, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 1, 2, 3, 0, 3, 3, 2, 2, 1,
	2, 2, 3, 2, 1, 1, 1, 5, 1, 2,
	4, 2, 0, 1, 0, 3, 5, 1, 0, 1,
	2, 1, 0, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 3, 1, 1, 1, 1, 5, 3,
	1, 1, 3, 1, 2, 2, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 7, 1, 7, 5, 3, 1,
	1, 1, 1, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 455, -79, -49, -47, -82, -83, -67,
	-81, -84, -78, -94, -98, -88, -100, -136, -3, -35,
	-37, -50, -66, -68, -77, -86, -85, -87, -89, -93,
	-92, -41, -95, -99, -108, -137, -138, -139, 81, 68,
	121, 103, 108, 128, 154, 284, 313, 323, 307, -103,
	-104, 342, -36, -48, -97, -96, -4, -10, 27, 39,
	-38, -39, -40, 53, -58, -55, -52, -61, -451, 83,
	-420, -69, -72, -74, -455, 113, 127, 171, 276, -90,
	-91, 309, 311, -43, -42, 122, -147, -149, -101, -102,
	-140, -109, -110, -111, -112, -113, -114, -115, -116, -117,
	-118, -119, -120, -121, -122, -123, -124, -125, -126, -127,
	-128, -129, -130, -131, -132, -133, 345, 392, 40, 354,
	69, 116, 317, 21, -5, -6, -7, -8, -9, -11,
	-23, -51, -53, -54, -56, -57, -65, -59, -60, -419,
	-70, -71, -73, -75, -76, 308, -150, -148, 452, 405,
	-13, -18, -19, -14, -15, -17, -20, -16, -24, -29,
	-30, -26, -27, -25, -28, -31, -32, -33, -34, -21,
	-22, -12, 423, 431, -153, -151, -152, -154, 330, 413,
	368, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	455, -197, -202, -203, -204, -196, -172, -391, -394, 4,
	-389, -392, 133, 179, 246, 21, 22, 23, 24, 25,
	27, 37, 38, 39, 40, 43, 45, 46, 49, 50,
	51, 52, 53, 54, 57, 62, 67, 68, 69, 70,
	71, 76, 73, 74, 75, 78, 80, 81, 82, 85,
	86, 94, 95, 96, 97, 98, 99, 103, 106, 105,
	108, 111, 112, 113, 115, 117, 118, 121, 122, 125,
	123, 374, 376, 124, 126, 127, 128, 129, 139, 140,
	141, 143, 144, 146, 148, 152, 153, 155, 159, 161,
	162, 163, 164, 170, 171, 173, 174, 180, 175, 181,
	185, 188, 187, 189, 190, 191, 182, 196, 200, 201,
	202, 204, 205, 208, 209, 210, 211, 214, 213, 216,
	219, 220, 223, 224, 227, 228, 230, 231, 234, 232,
	235, 233, 236, 239, 237, 238, 241, 242, 244, 243,
	168, 251, 252, 254, 255, 256, 271, 259, 260, 261,
	264, 267, 270, 272, 273, 274, 275, 276, 277, 279,
	280, 282, 284, 286, 288, 289, 290, 291, 292, 293,
	295, 296, 298, 299, 300, 301, 302, 307, 304, 305,
	306, 308, 309, 310, 311, 313, 315, 316, 317, 318,
	320, 322, 343, 344, 356, 323, 324, 325, 326, 327,
	328, 329, 333, 337, 334, 335, 336, 338, 331, 332,
	339, 340, 342, 345, 347, 349, 350, 353, 354, 355,
	357, 360, 361, 362, 358, 359, 352, 367, 365, 366,
	369, 370, 371, 372, 373, 375, 377, 386, 387, 389,
	392, 393, 394, 384, 396, 397, 400, 401, 402, 403,
	404, 409, 405, 407, 410, 411, 412, 418, 417, 424,
	425, 427, 428, 429, 32, 41, 42, 44, 47, 58,
	59, 60, 63, 100, 101, 120, 130, 131, 142, 156,
	158, 165, 166, 167, 186, 192, 194, 198, 217, 249,
	250, 265, 269, 281, 283, 294, 319, 348, 363, 379,
	380, 381, 382, 388, 390, 413, 414, 415, 419, 426,
	257, -190, 2, -172, -172, 284, 26, 2, 26, 280,
	332, 370, 372, 2, 195, 2, -442, -242, 2, 26,
	-176, -172, 83, 154, 330, -190, 2, -442, -242, 24,
	2, -172, 2, -177, 2, 323, -172, 455, 78, 224,
	62, 319, 339, -106, 387, -105, 379, 325, -107, -381,
	2, 239, -172, 455, 455, 455, 455, 2, 368, 274,
	417, 331, 406, 96, 291, 179, -437, 2, 4, -392,
	-389, -206, -205, 368, 96, -204, -196, 445, -203, 455,
	455, 455, 2, 201, 202, 290, 289, 339, 340, 455,
	455, 455, 2, 25, 56, 77, 80, 102, 129, 149,
	152, 262, -452, 231, 271, 288, 325, 338, 367, 377,
	389, -456, 355, 57, 406, -463, 394, 111, -286, 96,
	372, 370, 224, 153, 401, 315, 157, 399, 106, 185,
	404, 403, 455, 455, 25, 56, 65, 80, 111, 129,
	149, 152, -454, 271, 288, 322, 325, 338, 367, 377,
	394, 389, 2, 417, 331, 368, 179, 96, 406, 315,
	287, -79, 2, 452, 29, 342, -146, 368, 195, 2,
	-172, 201, 202, 2, 455, 455, -437, 2, 201, 202,
	2, 57, 327, 455, 455, 455, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 2,
	-134, 339, 355, 163, 39, 62, 26, 67, 97, 155,
	179, 180, 209, 77, 78, -287, -339, -338, 369, 326,
	332, 365, 387, 83, 407, 316, 429, -445, 123, 4,
	96, 239, 341, 379, 224, 38, 71, 373, 374, -462,
	2, 368, -466, 2, 387, 387, 2, -466, 2, -466,
	2, -175, 2, 387, 383, -467, 387, 426, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	-148, -150, -149, 455, 455, 455, 455, 455, -134, 339,
	2, 62, 26, -470, 147, -236, -237, 398, 193, 119,
	263, -147, -149, 2, -419, -379, 2, -313, -395, -315,
	443, 444, 438, 245, 430, -326, 102, 399, 257, -394,
	-316, -328, 120, 319, -256, 8, 9, 5, 6, 7,
	-179, -359, -322, -367, 391, 132, 248, -209, 457, 10,
	452, -416, -149, -327, 33, 158, 55, -383, -208, -361,
	-369, -365, -366, -471, 45, 51, 50, 377, 238, 333,
	334, 349, 335, 336, 43, 409, 175, 254, 256, 187,
	4, 194, -207, -196, -413, -414, -389, -390, 186, 192,
	188, 348, 189, 190, 191, 42, 294, 143, 144, 142,
	112, 101, 100, 250, 47, 46, 44, 414, -370, 98,
	379, 380, 381, 382, 204, 205, -172, -391, 65, 88,
	89, 87, 92, 91, 93, 90, 341, 406, 56, 32,
	165, 166, 198, 249, 167, 63, -415, 359, 84, 151,
	184, 169, 197, 199, 203, 218, 221, 240, 247, 266,
	268, 314, 346, -472, 415, 130, 131, 269, 281, 363,
	388, 390, 156, 217, 58, 59, -421, 295, -422, -190,
	-421, 455, 455, 456, 455, -230, -231, -232, 2, 26,
	109, 452, 2, -343, 2, 450, -347, -149, 212, -346,
	452, -344, -197, 258, -417, 320, -413, -414, -179, -196,
	-208, 4, -233, 452, 454, 96, 368, 66, 2, -281,
	452, -172, 26, -146, 257, 383, 456, -324, 452, 257,
	150, 260, -172, 2, 2, 343, 2, 452, -106, 60,
	387, -301, 2, -302, -169, -170, -171, -352, 200, 286,
	293, 432, 429, -379, -448, 150, 435, 383, -379, -257,
	454, 2, -347, 165, -197, 2, -194, -382, 4, -389,
	-392, -390, -393, 65, -391, 26, 28, 29, 30, 31,
	33, 34, 35, 36, 48, 55, 56, 61, 64, 66,
	77, 83, 87, 88, 90, 89, 91, 92, 93, 102,
	104, 107, 109, 110, 114, 116, 119, 132, 134, 147,
	149, 150, 154, 157, 160, 172, 183, 193, 195, 212,
	215, 222, 225, 226, 245, 248, 253, 257, 258, 262,
	263, 278, 285, 297, 312, 330, 341, 351, 364, 368,
	378, 383, 385, 391, 398, 399, 406, 408, 416, 420,
	421, 422, 423, -394, 2, -347, 165, 2, -199, 165,
	-347, -202, 2, -387, 165, -385, 10, -384, 5, 4,
	-389, -392, -390, 2, -181, -172, 2, -193, -382, 2,
	-212, 165, -197, -198, -202, 383, 456, -248, -205, -206,
	-241, -172, 454, -313, 2, -95, 2, -313, 165, 2,
	-95, 165, 2, -313, 165, 2, -95, 165, 2, 2,
	2, 389, 2, 80, 165, -172, 368, 95, 2, 306,
	-453, 322, 393, 417, 2, 2, 2, 2, 2, 2,
	2, 368, 331, -464, 295, -186, 2, -172, 147, -387,
	165, 2, -387, 165, 2, -200, -202, -200, 179, 196,
	-181, 165, 2, 372, 370, 372, 370, 150, 2, 195,
	2, 195, 2, -348, 2, -349, -197, 2, 2, 2,
	2, 2, 165, -172, 368, 95, 2, 211, 2, 2,
	2, 2, 2, 2, 2, 2, 2, -250, 165, 2,
	-197, -250, 165, 2, -250, 165, 2, -213, 165, 2,
	-212, -181, 165, 2, -388, 165, 2, -387, -388, 165,
	2, -356, 2, -355, -384, 413, -79, 452, 339, 452,
	-387, -197, -197, -313, -95, 150, -313, -95, 147, 2,
	96, 368, -134, 2, 147, 408, 2, 8, 2, -387,
	292, 139, 2, 343, 2, 62, -287, 429, 150, 2,
	-271, 2, 423, -440, 2, 257, 150, 2, 150, 2,
	150, 2, 150, 2, 150, 2, 289, 340, 202, 386,
	210, 124, 150, -271, 2, 150, 2, 150, 2, 5,
	2, 200, 286, 356, 2, -197, -457, 2, 368, 417,
	331, 2, 2, 73, 74, 150, 2, 150, 429, 2,
	-265, -347, -300, -301, -300, 383, -177, -470, -236, -237,
	-134, 343, 2, 2, -470, -264, -289, -290, 222, 134,
	253, -270, 26, 109, -270, -270, 49, 453, 453, 11,
	12, 64, 37, 443, 444, 445, 446, 145, 447, 448,
	441, 442, 440, 433, 434, 437, 206, 207, 79, 436,
	435, 72, 229, 321, 135, 136, 137, 138, 303, 176,
	177, 178, 14, 15, 16, 30, 262, 221, 430, 169,
	346, 438, 17, 18, 19, 197, 199, 247, 41, 172,
	-178, -214, -313, -313, -313, -313, -313, 268, 452, -262,
	-308, 450, -149, 452, 452, 452, 5, 452, 5, -378,
	8, -149, -313, -326, 453, -254, 452, -149, -326, -321,
	452, 319, 450, 452, -329, -313, 454, -423, 424, -363,
	452, 283, -362, 452, -362, -362, 418, -360, 452, 431,
	425, 452, -360, 452, 452, 147, 452, 452, 452, 452,
	452, 452, 452, 452, 452, 452, 452, 452, 452, 418,
	452, 452, 452, 452, 452, 452, 452, 452, 452, 456,
	-421, -233, 452, -258, -350, -313, 445, -258, -258, 257,
	-251, -313, 84, -274, 203, 240, 151, 218, 314, 184,
	-378, -80, -66, -77, -85, -95, -108, -138, -139, -310,
	457, -337, 431, -149, -344, -196, -149, -346, 452, -343,
	-337, 445, -197, 452, 150, 452, 454, 150, -241, -382,
	-181, -197, -207, -208, 108, -251, -387, -437, -241, -176,
	34, -323, -357, -358, -371, -359, -368, -364, -367, 299,
	300, 298, 302, 301, 45, 51, 50, 377, 238, 333,
	334, 349, 335, 336, 43, 409, 175, 254, 256, 187,
	4, 44, 414, -370, 194, 186, 192, 188, 348, 189,
	190, 191, 42, 294, 143, 144, 142, 112, 101, 100,
	250, 47, 46, 98, 379, 380, 381, 382, 204, 205,
	415, 359, 58, 59, -437, -241, 147, -381, -251, 34,
	-301, 2, -468, 456, 220, -216, 228, 244, 162, 258,
	427, 251, -386, 5, 4, -322, -334, 102, 224, -367,
	9, 444, -375, 8, 443, -380, -379, 86, 454, -382,
	-158, 304, -157, 23, 27, 113, 411, 125, -223, 181,
	274, 120, 352, 402, -444, -446, 324, 375, 376, 75,
	251, 304, 120, -267, -269, 34, 94, 242, 270, 52,
	173, 233, 234, 354, 419, 120, 304, 423, 120, -446,
	304, -446, -160, 352, 402, -444, -446, 324, 304, -159,
	-223, 120, 457, -387, -248, 456, 456, -382, 445, 120,
	120, 120, 120, 2, 2, 245, 2, 2, 2, 152,
	-456, -454, 2, 2, 2, -197, 165, -199, 165, 2,
	-202, 417, -235, 257, -439, -249, 368, -197, -168, -418,
	423, 245, 245, 34, 452, 2, -183, 165, 2, -173,
	-172, 179, -418, 245, -348, -210, -197, -210, 342, -190,
	34, -310, 120, 2, 2, 2, -172, -161, 456, 54,
	310, 120, -161, 120, -161, 120, -161, 456, 120, -161,
	120, 456, 120, 120, 453, 456, -356, -387, -144, 423,
	150, 83, 452, 452, -388, -439, -181, 2, -197, 2,
	368, 204, -387, -387, -381, 26, 344, 2, 289, 340,
	74, -197, 68, -441, 147, -438, 315, -437, -197, 96,
	-197, 96, -197, 96, -197, -197, 2, 2, 2, 147,
	2, 386, 2, 386, 2, -172, -172, -172, 220, -197,
	147, 368, 179, 368, -161, 456, -177, -470, -264, -381,
	-470, -290, -289, -292, -313, 26, -295, 141, 241, -313,
	-315, -148, -148, -148, -238, -340, -313, 285, 179, -372,
	-357, -357, -195, -382, 379, -313, -313, -313, -313, -313,
	-313, -313, -313, -313, -313, -313, -313, -313, -313, -313,
	-313, -313, -313, -313, -313, -313, -313, -313, -313, -313,
	-313, -313, -313, -313, -313, -313, -313, -313, -313, -313,
	221, 169, 346, 41, 172, -313, 383, -313, -313, -313,
	-313, 237, 245, 248, 391, 132, 400, 109, 251, -473,
	364, 36, -319, -149, -255, 452, -333, 31, 351, 26,
	-326, 452, 2, -308, -313, -309, -252, -251, -251, 453,
	416, 26, 109, 445, 2, 8, -282, -284, 428, 236,
	99, 164, 235, -283, 329, 453, 456, 34, 453, -313,
	-252, -325, -321, -251, -332, -331, 420, -382, 445, -424,
	140, 157, 8, -376, 8, -376, 379, 379, 8, -376,
	-376, 452, 453, 2, 453, 2, 453, 2, 453, 2,
	453, 2, -313, -313, -313, -313, -313, -313, -313, -251,
	-276, 2, -373, -251, 4, 428, 236, 99, 164, 235,
	329, -276, 2, -277, 2, -313, -251, -278, -314, -315,
	443, 444, 438, -326, -279, 2, -313, -252, -313, 48,
	215, 385, -280, -313, 150, -251, -251, 2, -251, 2,
	-422, 34, -251, -244, 456, 150, 34, 4, -244, -244,
	452, 453, 456, -275, 161, 232, 227, -275, -343, -274,
	203, -272, 266, -272, -272, -435, 452, 451, 455, 455,
	455, 455, 455, -337, -182, 450, 458, -382, -336, -335,
	34, -190, 264, -337, -337, 454, 453, -336, -197, 452,
	-251, -382, 357, 453, 454, 197, 197, 197, 320, 453,
	-144, 383, 423, -79, 259, 453, 456, -243, 33, 450,
	-284, 452, -374, 418, 452, 452, 150, -242, -448, 453,
	387, -302, -215, 293, 350, 305, 337, 366, 9, 8,
	8, 456, -382, 456, -449, 77, 383, 66, -304, 165,
	66, -396, -184, 77, -397, -172, 61, 399, 285, 149,
	-449, 77, -449, 77, 77, 342, 355, 49, -347, 37,
	37, 26, -95, 216, 150, 429, 368, 179, 383, -347,
	-269, -357, 94, 233, 234, 49, -377, -375, 444, -377,
	49, -377, -377, -377, 423, -199, -347, 383, 275, -387,
	383, 456, 37, 37, 26, -95, 216, 150, 383, -212,
	-182, -353, -352, -205, -172, 454, -313, -95, -313, -95,
	120, 2, -464, 211, 452, -219, 245, -268, -267, 245,
	-201, 2, -197, 150, -241, -354, 195, 456, -249, 275,
	120, 120, 452, 117, 291, 2, 257, 245, -183, 165,
	-164, 371, 120, -307, -306, 421, -296, -95, 452, 102,
	34, -296, -259, -260, -351, -261, -184, 452, -190, -172,
	2, -197, -250, -250, -250, -212, -213, -181, -387, -388,
	-388, -79, -355, 453, 453, -143, 261, -142, -172, 5,
	-146, 408, -218, -305, -304, -400, -401, -396, 221, 179,
	399, 196, 133, -234, -185, -184, -144, -352, -144, -353,
	-353, -197, 147, 2, 2, -271, -241, -241, -181, -181,
	-181, 339, 147, 147, 454, -271, 291, 96, 368, 274,
	179, -197, -212, -197, -347, -470, -293, -375, 452, -294,
	319, 320, 456, -156, 35, 107, 208, -197, 429, 118,
	-313, -313, 383, -473, 364, -319, 118, -313, 237, 248,
	391, 132, 400, 109, 251, 150, 452, -314, -314, 453,
	-253, -313, -313, 451, 460, 453, -237, 456, -236, -313,
	-251, -251, 453, 453, 383, 383, 383, 383, 452, 454,
	-251, -241, 451, 451, 456, 453, -330, -331, 114, -313,
	454, -429, 267, 452, 452, 453, 453, 456, 453, 429,
	429, 453, 453, 453, -313, 34, 456, 456, 456, 453,
	456, 456, 456, 453, 453, 150, 453, 453, -285, 278,
	453, 11, 12, 443, 444, 445, 446, 145, 447, 448,
	441, 442, 440, 433, 434, 435, 72, 229, 321, 14,
	15, 16, 197, 172, -314, -314, -314, 453, -317, -318,
	150, 147, 34, -280, -280, -280, 453, 150, -251, 453,
	453, 452, 453, -307, -350, -246, 2, -343, -192, -382,
	-307, -307, -251, -313, 203, 203, -273, 408, 257, -275,
	-343, -335, 453, -436, -378, -337, -336, -378, -312, -311,
	148, 35, 107, 243, 168, -190, -233, -336, -336, -382,
	-337, 453, -247, -345, -417, -237, 454, -382, -135, 5,
	248, -135, -135, 150, -241, 24, 279, -357, 450, 451,
	8, 8, 452, -376, -376, -241, 150, -379, -301, 397,
	70, 293, 379, -379, -157, 304, -184, -184, -197, 245,
	-304, 165, -163, 245, -357, -191, -172, 452, 452, 208,
	208, -184, -191, 165, -184, 165, -191, -191, -443, 293,
	252, -313, 223, 291, 246, -158, 304, -95, -95, -95,
	452, -448, 408, 108, -197, -212, -201, 304, -207, -377,
	-377, -267, 304, -199, -387, 423, -181, -159, -95, -95,
	-95, 452, -182, -160, 304, -141, 174, 445, -172, 417,
	-172, -217, -220, -218, -184, -458, 425, 423, 120, 120,
	-233, -211, -197, 450, -144, -387, -197, -387, -387, -387,
	2, 452, 2, -197, 120, 257, 245, -165, 115, -469,
	435, -181, -237, -313, -266, -299, 312, 257, -234, 413,
	-190, -266, -245, 456, 150, 435, 454, -234, 2, -161,
	-161, -161, -161, -161, -79, -144, 456, 452, 435, 435,
	452, -387, -387, 453, 456, -197, -183, 179, 179, -189,
	-173, 453, 456, 454, -144, -44, 423, 368, 339, 339,
	-172, -193, -181, -197, -194, -212, -294, -313, -340, -197,
	457, -313, -313, 118, 118, -313, -314, -314, -313, 118,
	150, 452, -313, -323, 30, 30, 453, 456, -309, -313,
	453, 416, -237, -237, 453, 5, 236, 164, 235, -283,
	235, -283, -283, 8, 445, -382, 453, -321, 116, -313,
	378, -382, 445, -430, -187, 452, -172, 421, -236, -376,
	-360, -360, 453, -372, -357, -313, -313, -313, -313, -313,
	-313, -317, -313, -372, -357, -314, -314, -314, -314, -314,
	-314, -314, -314, -314, -314, -314, -314, -314, -314, -314,
	-314, -314, -314, -314, 109, 245, 251, -314, -318, -317,
	-313, -313, -357, 453, 453, 453, -251, -79, -263, 157,
	-353, 456, -263, -263, 453, -343, -343, 452, -313, 203,
	451, 453, 456, -336, 451, 456, 459, 435, -233, 454,
	-335, 453, 456, -298, 34, 453, -382, -95, 260, 5,
	8, 450, 451, 453, -376, 453, 453, -241, -313, 383,
	383, 120, 245, 410, -402, -397, -313, -239, -341, -313,
	452, 452, -155, 113, 342, -450, 2, 120, -161, 120,
	-161, 427, 452, 452, 383, 423, -251, -313, -145, 102,
	-381, -446, -446, 383, 383, 275, 423, -251, 383, -144,
	150, 2, 2, 2, 453, 453, 456, -403, 34, 255,
	-172, -197, -199, 34, -62, 423, -352, -378, -168, 2,
	-288, 408, -182, -197, 120, -166, 214, -469, -385, -418,
	-291, -289, -266, -258, 246, 76, 453, -307, -260, -246,
	-313, 2, 453, -142, -143, -387, -387, -387, -144, -146,
	-146, -305, 2, 452, -183, -173, 452, -146, -185, 2,
	261, -197, -271, -225, -224, 274, 251, -225, 258, 453,
	-156, -182, -313, -313, 118, 30, 30, -313, -313, -323,
	453, -313, -313, -251, 451, 5, -313, 453, 453, 453,
	-313, 454, -431, -172, -313, 453, 453, 453, 453, 456,
	456, 453, 453, 453, 453, -318, 150, 109, 251, 452,
	453, 453, -320, 160, 49, -343, -320, -320, -273, -241,
	-343, -310, -378, -311, -182, 450, -382, -345, 452, 454,
	451, 2, 450, 453, -184, -184, -304, 120, -404, 77,
	-406, 64, 133, 83, 245, 248, 399, 285, 61, 102,
	297, 34, 453, 453, 456, -156, -239, -241, 245, 361,
	102, 245, 102, 95, 394, -184, -191, -241, -241, -197,
	126, 453, 456, 435, -201, -199, -387, 126, 453, -182,
	-388, -221, 182, -398, -184, -399, 285, -405, -407, 285,
	-95, 2, 452, -219, -268, -95, 261, 451, 452, -172,
	257, 452, -182, -167, 213, -469, -385, -164, -266, -297,
	452, 257, -95, -237, 435, 453, 453, 95, 95, -239,
	452, 452, -241, 95, -45, -46, 179, 77, 277, -194,
	368, 179, -156, -313, -313, -313, 453, -237, -382, 445,
	-425, 274, 453, -313, -313, -314, 150, 452, -323, -426,
	422, -313, -251, -426, -426, 453, -337, -378, 2, 450,
	2, -304, -191, -195, -188, -172, 133, 165, 248, 208,
	452, -314, -197, 452, 2, -460, 104, 183, -303, -461,
	82, 362, -341, 453, 453, 248, 248, -313, -357, -161,
	-161, 453, 453, -313, 383, -381, 81, -379, -313, 383,
	-222, -223, 172, -403, 208, 208, -459, 423, -217, -458,
	-63, -64, 384, -352, -239, -197, -239, 257, -469, -385,
	-165, 110, -241, 77, -291, -319, -144, 452, 452, 453,
	-239, -239, 453, 452, 456, 26, 452, 26, 452, -197,
	-212, 453, -237, 49, 453, 453, -314, -323, 453, -427,
	-428, -187, -336, 451, 2, -406, -188, 245, -313, -174,
	452, -313, 183, 105, 170, -221, 452, 297, -180, 64,
	452, 452, 452, 435, 150, 452, -458, 272, 452, 95,
	242, 453, 34, -64, 9, 453, -288, 453, -197, -385,
	-166, 403, 246, 453, -191, -266, -388, -388, -303, 453,
	453, -388, -46, -241, -241, -432, 291, 320, 159, -251,
	453, 456, 34, 120, 453, -408, 230, -172, 453, 105,
	170, -222, -241, -197, -447, 408, -195, -227, -226, -224,
	-229, -228, -224, -251, -379, 81, 272, -251, -197, -240,
	-342, -184, 95, -221, -95, -303, 452, -303, 452, -167,
	342, -306, 453, 453, -221, -303, 453, 453, 453, 453,
	-433, -434, 41, 396, 86, -313, -433, -433, -428, -430,
	133, -409, -412, -411, 257, 347, 151, 273, 453, 361,
	419, -460, 453, -233, -313, 453, 456, 413, 453, 456,
	413, 453, 150, 453, 452, 453, 456, -222, -459, -221,
	-239, -221, -239, -259, -144, -144, -222, -221, -144, -434,
	282, 146, 319, 282, 146, -188, -411, 257, -412, 257,
	403, 106, -408, -226, 172, -228, 150, 272, -241, -342,
	-458, -222, 453, -222, 453, -307, -222, 30, -410, 242,
	310, 54, 342, -410, -409, 452, 452, 453, -465, 421,
	-303, -465, -303, -434, 22, 248, 102, -460, -251, -251,
	-162, 54, 310, 2, -221, -221, 453, 453, -222, -222,
	-222, 383, -465, -465, 452, -251, 453, -222,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 24, 25, 356, 357,
	359, 360, 361, 363, 364, 366, 368, 370, 372, 373,
	375, 377, 378, 379, 380, 381, 383, 385, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 443,
	445, 0, 894, 896, 898, 900, 27, 28, 0, 0,
	181, 183, 185, 0, 210, 212, 214, 215, 217, -2,
	0, 310, 311, 313, 315, -2, -2, 0, 0, 432,
	434, 0, 0, 454, 455, 0, 984, -2, 448, 450,
	452, 515, 517, 519, 521, 523, 525, 527, 528, 530,
	532, 534, 536, 538, 540, 542, 544, 546, 548, 550,
	552, 554, 556, 558, 560, 562, -2, -2, -2, 0,
	-2, -2, -2, 912, 31, 33, 35, 37, 39, 41,
	60, 266, 267, 269, 271, 273, 276, 277, 279, 1023,
	317, 319, 321, 323, 325, 0, -2, 1035, 0, 0,
	43, 44, 45, 46, 47, 48, 49, 50, 67, 68,
	69, 70, 71, 72, 73, 74, 53, 55, 56, 62,
	63, 65, 0, 0, 999, 1001, 1003, 1005, -2, 0,
	0, 7, 9, 11, 13, 15, 17, 19, 21, 23,
	358, 362, 365, 367, 369, 371, 374, 376, 382, 384,
	386, 789, 1627, 1641, 1642, 1643, 1646, 1647, 1648, 1649,
	1650, 1651, 1982, 2062, 2063, 1670, 1671, 1672, 1673, 1674,
	1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684,
	1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694,
	1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704,
	1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714,
	1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724,
	1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734,
	1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744,
	1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754,
	1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764,
	1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774,
	1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784,
	1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794,
	1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804,
	1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814,
	1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824,
	1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834,
	1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844,
	1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854,
	1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864,
	1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874,
	1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884,
	1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894,
	1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904,
	1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914,
	1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924,
	1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934,
	1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944,
	1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954,
	1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964,
	0, 410, 408, 1621, 411, 1817, 413, 415, 304, 305,
	306, 307, 308, 309, 0, 164, 0, 425, 419, 424,
	426, 428, 429, 430, 431, 405, 403, 0, 425, 1673,
	423, 892, 893, 887, 888, 1850, 922, 444, -2, -2,
	-2, 1951, -2, 476, -2, 483, 1954, 1852, 486, 0,
	488, -2, 491, 895, 897, 899, 29, 30, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 150, -2, -2,
	-2, -2, 0, 0, 1708, 1597, 1643, 1600, 1595, 182,
	184, 186, 187, 0, 0, 0, 0, 0, 0, 211,
	213, 216, 218, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 243, 0, 0, 0, 0, 0, 0, 0,
	0, 845, 0, 0, 0, 0, 0, 0, 0, 0,
	698, 699, 0, 0, 704, 840, 841, 862, 0, 0,
	0, 0, 312, 314, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 316, 0, 0, 0, 0, 0, 0, 0,
	244, 350, 351, 0, 1024, 0, 0, 0, 0, 162,
	154, 0, 0, 687, 433, 435, 0, 153, 0, 0,
	891, 0, 0, 449, 451, 453, 516, 518, 520, 522,
	524, 526, 529, 531, 533, 535, 537, 539, 541, 543,
	545, 547, 549, 551, 553, 555, 557, 559, 561, 563,
	564, 0, 0, 0, 0, -2, -2, 0, -2, -2,
	0, 0, 0, 0, 0, 0, 0, 0, -2, -2,
	-2, 0, 0, 0, -2, -2, 0, 0, 0, 567,
	569, 570, 571, 0, 613, 616, 624, 669, 670, 0,
	831, 1025, 924, 902, 915, 924, 904, 905, 906, 907,
	908, 913, 914, 917, 0, 909, 910, 911, 32, 34,
	36, 38, 40, 42, 268, 270, 272, 274, 278, 280,
	-2, 997, 998, 318, 320, 322, 324, 326, 436, 0,
	438, 0, 568, 988, 0, -2, 0, 1029, 1029, 1029,
	0, 0, 998, 996, 0, 441, 442, 495, 496, 1260,
	0, 0, 0, 0, 0, 1495, 1344, 0, 497, -2,
	1375, 1377, 1930, 1951, 1494, 1379, 1380, 1381, 1382, 1383,
	0, 0, 1386, 0, 1388, 1389, 1390, 1391, 0, 1393,
	0, 1397, 1398, 1399, 0, 1935, 1574, 1639, -2, 1165,
	1166, 1167, 1168, 1169, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1635, 0, 1466, 1413, -2, 1660, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1717, -2, -2, -2, -2, -2, -2, -2, 1221, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1965, 1417,
	1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 0, 1919,
	1936, 1937, 1942, 1944, 1938, 1927, 1436, -2, 1966, 1967,
	1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977,
	1978, 1979, 1980, 1222, -2, 1931, 1932, 1947, 1948, 1953,
	1958, 1959, 1934, 1943, -2, -2, 1015, 1825, 1018, 789,
	1016, 1000, 1002, 0, 1004, 0, 0, 0, 1009, 1032,
	1030, 0, 1066, 1013, 1014, 1024, 1084, 1107, 0, 1089,
	0, 1107, 1133, 0, 1094, 1845, 1414, 1415, 0, 1643,
	1640, -2, 0, 0, 0, 0, 0, 0, 207, 406,
	0, 412, 414, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 921, 446, 447, 0, 471, 0, 475, 1926,
	-2, -2, 479, 925, 929, 930, 931, 932, 0, 0,
	0, 0, 0, 485, 0, 0, 472, 473, 489, 492,
	0, 51, 0, 1936, 1133, 52, 0, 1611, 1665, 1666,
	1667, 1668, 1669, 1965, 1981, 1983, 1984, 1985, 1986, 1987,
	1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997,
	1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
	2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017,
	2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027,
	2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037,
	2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047,
	2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057,
	2058, 2059, 2060, 2061, 54, 0, 1936, 57, 0, 1936,
	0, -2, 61, 0, 1936, 165, 166, 1656, 1657, 1661,
	1662, 1663, 1664, 64, 0, 1617, 66, 0, 1614, 75,
	0, 1936, 0, 1594, -2, 0, 0, 679, 1591, 1596,
	680, 1601, 0, 188, 189, 190, 191, 192, 1936, 194,
	195, 0, 197, 198, 1936, 200, 201, 0, 203, 219,
	220, 0, 222, 0, 1936, 0, 0, 0, 228, -2,
	245, 0, 242, 0, 232, 233, 235, 236, 237, 238,
	239, 0, 0, 0, 846, 284, 282, 1622, 0, -2,
	1936, 834, 837, 1936, 839, 851, 1625, 0, -2, 0,
	1022, 1936, 939, 700, 701, 702, 703, 0, 303, 0,
	952, 0, 954, 0, 974, 1139, 1084, 246, 247, 248,
	249, 250, 1936, 0, 0, 0, 255, 0, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 146, 1936, 329,
	348, 146, 1936, 332, 146, 1936, 335, 146, 1936, 338,
	1589, 146, 1936, 341, 342, 1936, 344, 167, 345, 1936,
	347, 0, -2, 399, 1629, -2, 353, 0, -2, 0,
	179, 0, 0, 685, 686, 0, 889, 890, 0, 456,
	0, 0, 565, 566, 0, 0, 576, 577, 578, 579,
	1823, 1733, 582, 0, 585, -2, 0, 0, 0, 589,
	590, 591, 0, 684, 593, 0, 0, 595, 0, 599,
	0, 602, 0, 604, 0, 606, -2, -2, -2, 0,
	0, 0, 0, 632, 633, 0, 638, 0, 641, 642,
	643, 0, 645, 646, 647, 648, 0, 650, 651, -2,
	-2, 655, 657, 0, 664, 0, 668, 0, 572, 573,
	146, 1137, 901, -2, 903, 0, 919, 991, -2, 0,
	437, 0, 440, 995, 989, 994, 1044, 1045, 0, 0,
	0, 0, 1027, 1028, 0, 0, 0, 986, 987, 0,
	0, 0, 0, 1500, 1501, 1502, 1503, 1504, 1505, 1508,
	1509, 1506, 1507, 1510, 1511, 0, 0, 0, 0, 0,
	1512, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1513, 1514, 1515, 0, 0, 1517, 0, 1519,
	0, 0, 0, 0, 0, 0, 1323, 1325, 1582, 0,
	0, 1516, 1265, 1266, 1267, 1302, 1303, 0, 0, 1376,
	1579, 1578, 1378, 0, 1531, 0, 1385, 0, 1257, 1392,
	1608, -2, 0, 1495, 1526, 0, 0, 1400, 1401, 1402,
	0, 0, 1531, 0, 0, 1573, 0, 1468, 0, 1201,
	0, 1202, 1203, 0, 1204, 1205, 1218, 1231, 0, 0,
	0, 0, 1235, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1223,
	0, 0, 0, 1554, -2, 0, 0, 0, 0, 0,
	1017, 0, 0, 1070, 1583, 1587, 1588, 1070, 1070, 0,
	0, 1532, 1130, 1130, 0, 0, 1126, 1126, 1126, 1124,
	1101, 0, 387, 389, 391, 393, 394, 395, 397, 1107,
	0, 1117, 0, 1107, 1107, 0, -2, 1089, 0, 0,
	1117, 1134, 1135, 0, 0, 0, 0, 0, 0, 1644,
	0, 0, 0, 1631, 0, 0, 179, 0, 417, 427,
	1024, 0, 1534, 1156, 1150, 1159, 1160, 1161, 1162, 1208,
	1209, 1210, 1211, 1212, 1170, 1171, 1172, 1173, 1174, 1175,
	1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185,
	1186, -2, 1219, 1221, 1242, 1190, 1191, 1192, 1193, 1194,
	1195, 1196, 1197, 1198, 1199, 1200, 1214, 0, 1189, 1189,
	1189, 1206, 1207, 1230, 1241, 1233, 1241, 1237, 1157, 1158,
	1224, 1225, 1226, 1227, 0, 421, 0, 0, 0, 0,
	-2, 481, 0, 927, 0, 933, 506, 507, 508, 935,
	936, 0, 484, 509, 510, 511, 512, 513, 514, 0,
	806, 0, 808, 1603, 0, 482, 499, 487, 0, 493,
	76, 884, 112, 0, 884, 884, 0, 0, 133, 0,
	0, 0, 0, 0, 0, 100, 108, 88, 89, 0,
	0, 0, 0, 58, 814, 0, 817, 0, 0, 0,
	0, 0, 0, 0, 829, 0, 0, 0, 0, 99,
	0, 94, 78, 0, 0, 0, 102, 110, 0, 137,
	139, 0, 0, 1120, 678, 0, 0, 1644, 1599, 0,
	0, 0, 0, 221, 223, 0, 225, 226, 227, 0,
	845, 0, 234, 231, 275, 765, 1936, 813, 1936, 811,
	1626, 0, 0, 0, 301, 296, 0, 298, 832, 0,
	1021, 0, 0, 0, 0, 852, 0, 1936, 857, 1613,
	1652, 1653, 941, 0, 1145, 0, 955, 0, 0, 1140,
	0, 1142, 0, 252, 253, 254, 0, 327, 0, 144,
	145, 0, 330, 0, 333, 0, 336, 0, 0, 339,
	0, 0, 0, 0, 1024, 0, 0, 0, 156, 0,
	0, 0, 0, 0, 179, 179, 1120, 458, 1120, 460,
	0, 0, 580, 581, 583, 584, 586, 587, -2, -2,
	665, 635, 634, 592, 0, 672, 1841, 682, 594, 1708,
	597, 1708, 600, 1708, 603, 605, 608, 627, 615, 0,
	619, 0, 621, 0, 623, 635, 636, 639, 644, 649,
	0, 0, 0, 0, 830, 0, 918, 992, 994, 439,
	990, 1042, 1043, 1048, 1052, 1053, 1056, 1059, 1060, 1050,
	1260, 1010, 1011, 1012, 1036, 1037, 871, 0, 2062, 1261,
	1151, 1262, 1263, 1610, 0, 1268, 1269, 1270, 1271, 1272,
	1273, 1274, 1275, 1276, 1277, -2, -2, -2, -2, -2,
	-2, -2, -2, 1286, 1287, 1288, 1289, 1290, 1291, 1292,
	1293, 1294, 1295, 1296, -2, -2, -2, 1300, 1301, -2,
	1518, 1520, 0, 1582, 0, -2, 0, -2, -2, -2,
	-2, 1320, 0, 1322, 1327, 1329, 1331, 0, 0, 0,
	0, 1581, 1341, 1565, 1566, 0, 0, 1497, 1498, 1499,
	1326, 0, 1345, 1580, 1577, 0, 0, 1530, 1035, 1404,
	0, 0, 0, 0, 1411, 0, 1609, 1256, 1243, 1244,
	1245, 1246, 1247, 1248, 1258, 1396, 1528, 0, 1527, 0,
	0, 0, 1538, 0, 1572, 1568, 0, 1632, 1638, 1476,
	0, 0, 0, 0, 1606, 0, 0, 0, 0, 0,
	0, 0, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444,
	1445, 1446, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1448, 0, 1541, -2, -2, -2, -2, -2, -2,
	-2, 0, 1450, 0, 1452, 1532, 1551, 0, 0, 1346,
	0, 0, 0, 1495, 0, 1455, 1532, 1559, 0, 0,
	0, 0, 0, 1532, 0, 1564, 0, 1462, 0, 1464,
	1019, 0, 0, 1145, 0, 0, 0, 1586, 1145, 1145,
	0, 1065, 0, 0, 1127, 1128, 1129, 0, 0, 1130,
	0, 1121, 1125, 1122, 1123, 0, 0, 1107, 388, 390,
	392, 396, 398, 1117, 1081, 0, 0, 1612, 1087, 1116,
	0, 789, 1106, 1117, 1117, 0, -2, 1091, 0, 0,
	1035, -2, 180, 788, 0, 0, 0, 0, 407, 409,
	0, 0, 0, 401, 0, 404, 0, 1146, 1149, 0,
	1163, 0, 0, -2, 0, 0, 0, 0, 0, 474,
	0, 926, 934, 0, 503, 0, 505, 0, 807, 1605,
	1604, 0, 494, 0, 0, 0, 0, 883, 116, 1936,
	0, 148, 0, 0, 759, 1618, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 90, 0, 0, 0, 0, 0, 0, 0,
	815, 816, 818, 824, 826, 0, 820, 1607, 0, 821,
	0, 823, 825, 827, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 91, 0, 0, 0, 0,
	1593, 170, 1119, 1592, 1602, 0, 193, 196, 199, 202,
	0, 229, 0, 0, 707, 690, 0, 809, 812, 0,
	789, 844, 1624, 0, 283, 179, 0, 0, 297, 0,
	0, 0, 0, 0, 0, 850, 0, 0, 0, 1936,
	943, 949, 0, 1035, 1144, 0, 972, 957, 0, 0,
	0, 972, 976, 977, 979, 980, 0, 0, 1141, 0,
	256, 349, 146, 146, 146, 1590, 146, 146, 168, 343,
	346, 352, 400, 1024, 179, 177, 1804, 175, 172, 174,
	0, 0, 0, 708, 710, 711, 712, 713, 0, 1653,
	0, 1762, 1653, 0, 960, 962, 151, 179, 295, 457,
	462, 574, 0, 610, 629, 588, 683, 681, 596, 598,
	601, 618, 0, 0, 0, 631, 0, 0, 0, 0,
	0, 666, 667, 671, 1138, 993, 0, 1054, 0, 1051,
	1057, 1058, 0, 1039, 869, 870, 0, 0, 0, 0,
	-2, -2, 0, 0, 0, 1342, 0, -2, 1321, 1324,
	1328, 1330, 1332, 0, 0, 0, 0, 0, 0, 1521,
	0, 1523, 1343, 1575, 1578, 1493, 0, 0, 1034, 1035,
	1035, 0, 1410, 0, 0, 0, 0, 0, 0, 0,
	1529, 0, 1536, 1537, 0, 1403, 0, 1569, 0, 0,
	0, 1412, 0, 0, 0, 1213, 1187, 0, 1241, 1239,
	1240, 1234, 1241, 1238, 0, 0, 0, 0, 0, 1431,
	0, 0, 0, 1435, 1447, 0, 1449, 1451, 0, 0,
	1453, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1349, 1350, 1351, 1454, 1557, 1558,
	0, 0, 0, 0, 0, 0, 1460, 0, 1563, 1461,
	1463, 1024, 1067, 1062, 1584, 1120, 1069, 1071, 1585, 1615,
	1062, 1062, 0, 1533, 0, 0, 1111, 0, 0, 0,
	1113, 0, 1102, 0, 1104, 1117, 1086, 0, 0, 1079,
	0, 1075, 1076, 1077, 1078, 789, 1115, 1088, 1092, 1632,
	0, 1136, 0, 1096, 1099, 0, 0, 1645, 204, 208,
	209, 205, 206, 0, 416, 0, 0, 1535, 0, 1152,
	0, 0, 0, 0, 0, 420, 0, 470, -2, 501,
	502, 504, 0, 500, 113, 884, 0, 0, 875, 0,
	118, 1936, 127, 0, 736, 0, 1616, 0, 0, 0,
	0, 886, 0, 1936, 146, 1936, 146, 129, 132, 0,
	136, 134, 0, 0, 727, 77, 884, 80, 84, 92,
	0, 0, 0, 98, 0, 0, 877, 0, 819, 822,
	828, 59, 0, 879, 873, 0, 872, 138, 82, 86,
	93, 0, 881, 79, 0, 179, 0, 1598, 0, 0,
	0, 0, 0, 706, 775, 0, 0, 0, 0, 0,
	0, 289, 285, 0, 294, 300, 299, 835, -2, 838,
	847, 0, 849, 861, 0, 0, 0, 945, 949, 0,
	948, 1022, 1047, 1143, 950, 972, 0, 0, 0, 959,
	956, 953, 1145, 0, 0, 0, 0, 0, 251, 328,
	331, 334, 337, 340, 354, 155, 0, 0, 0, 0,
	0, 179, 0, 0, 0, 0, 0, 1653, 1653, 0,
	1620, 0, 0, 0, 152, 459, 0, 0, 620, 622,
	635, 658, 659, 722, 0, 722, 0, 0, 1038, 871,
	0, 1264, 1305, 0, 0, -2, 0, 0, 1309, 0,
	0, 0, -2, 0, 0, 0, 1522, 1524, 0, 1577,
	1405, 0, 0, 0, 1409, 1387, 1249, 1250, 1251, 1252,
	1253, 1254, 1255, 0, 1394, 1395, 1496, 1539, 1567, 1571,
	0, 1633, 1637, 1474, 1475, 1479, 1623, 0, 0, 0,
	1232, 1236, 1416, 0, 0, 0, 0, 0, 0, 0,
	1540, 1550, 1552, 1347, 1348, 1352, 1353, 1354, 1355, 1356,
	1357, 1358, 1359, 1360, 1361, -2, -2, -2, 1365, 1366,
	1367, -2, -2, -2, 0, 0, 0, 1553, 1555, 1556,
	1560, 1561, 0, 1457, 1458, 1459, 1562, 0, 1064, 0,
	1068, 0, 1064, 1064, 1031, 1109, 0, 0, 1132, 0,
	1084, 1103, 0, 1093, 1082, 0, 1083, 0, 1114, 0,
	1090, 1095, 0, 1098, 0, 1405, -2, 163, 418, 402,
	0, 0, 1154, 1164, 0, 1216, 1220, 422, 1118, 0,
	0, 0, 0, 147, 734, 758, 0, 0, 864, 871,
	0, 0, 120, 0, 0, 0, 128, 0, 125, 0,
	131, 135, 0, 0, 0, 0, 0, 95, 96, 97,
	0, 101, 103, 0, 0, 0, 0, 0, 0, 149,
	0, 224, 843, 230, 716, 764, 0, 766, 0, 691,
	0, 765, 813, 0, 281, 0, 288, 0, 833, 848,
	0, 0, 0, 0, 0, 947, 949, 0, 940, 941,
	972, 1046, 951, 970, -2, 969, 0, 1035, 978, 975,
	981, 982, 0, 176, 0, 171, 173, 0, 158, 0,
	0, 709, 714, 0, 0, 0, 0, 0, 961, 963,
	0, 575, 630, 660, 721, 0, 0, 662, 1049, 1055,
	1040, 871, 1307, 1311, 0, 0, 0, 1313, -2, 0,
	1335, -2, -2, 1525, 1576, 1384, 1035, 1406, 1408, 1259,
	1570, 0, 1481, 1478, 0, 1465, 1188, 1426, 1427, 0,
	0, 1430, 1432, 1433, 1434, 1549, 0, 0, 0, 0,
	1456, 1020, 1470, 0, 0, 1072, 1470, 1470, 1110, 0,
	1112, 1107, 1105, 1080, 1073, 0, 1633, 1097, 0, 0,
	1147, 1153, 0, 1215, 114, 115, 117, 0, 735, 0,
	738, 0, 0, 0, 0, 745, 746, 0, 0, 0,
	0, 0, 778, 787, 0, 866, 0, 0, 0, 122,
	141, 0, 0, 885, 0, 146, 146, 0, 0, 876,
	0, 0, 0, 0, 878, 880, 874, 0, 0, 882,
	169, 724, 0, 767, 775, 769, 0, 774, 776, 0,
	695, 692, 707, 690, 810, 842, 0, 286, 0, 860,
	0, 0, 0, 937, 949, 0, 942, 943, 302, 0,
	0, 0, 958, 1047, 0, 178, 179, 0, 0, 0,
	0, 0, 0, 0, 461, 463, 0, 0, 469, 720,
	0, 0, 1041, 1315, -2, -2, 1336, 0, 1634, 1636,
	1035, 0, 1467, 0, 0, -2, 0, 0, 0, 1006,
	0, 1063, 1061, 1007, 1008, 1131, 1117, 0, 1100, 0,
	1155, 119, 0, 739, 740, 1619, 742, 0, 744, 747,
	0, 749, 1655, 0, 753, 760, 779, 0, 716, 0,
	784, 785, 865, 762, 0, 121, 123, 140, 868, 124,
	130, 0, 0, 81, 0, 0, 1702, 105, 83, 0,
	690, 723, 0, 768, 0, 777, 693, 0, 0, 0,
	287, 290, 0, 293, 0, 861, 0, 0, 0, 944,
	945, 0, 0, 0, 972, 983, 157, 0, 0, 787,
	0, 0, 757, 0, 0, 465, 0, 467, 0, 661,
	663, 1407, 1485, 0, 1428, 1429, -2, 0, 1373, 1469,
	1471, 0, 1085, 1074, 1148, 737, 741, 0, 0, 793,
	0, 0, 0, 782, 783, 724, 0, 0, 143, 0,
	0, 0, 0, 0, 0, 0, 688, 0, 0, 696,
	0, 716, 0, 291, 292, 787, 0, 787, 0, 946,
	947, 0, 965, 966, 968, 973, 0, 0, 716, 787,
	756, 0, 464, 0, 0, 0, 0, 0, 0, 1480,
	1374, 0, 0, 0, 748, 798, 0, 0, 0, 780,
	781, 778, 0, 789, 126, 0, 867, 0, 728, 0,
	0, 731, 0, 0, 106, 1702, 104, 0, 0, 0,
	771, 773, 697, 724, 695, 716, 0, 716, 0, 938,
	0, 967, 179, 179, 724, 716, 179, 466, 468, 1477,
	1482, 1486, -2, 1899, 1705, 0, 1483, 1484, 1472, 1473,
	0, 750, 794, 795, 0, 790, 791, 792, 1654, 751,
	752, 761, 786, 793, 142, 725, 0, 0, 726, 0,
	0, 109, 0, 111, 0, 770, 0, 690, 694, 724,
	0, 724, 0, 1145, 159, 160, 754, 724, 161, 0,
	1488, 1489, 1490, 1491, 1492, 743, 796, 0, 797, 0,
	0, 0, 798, 729, 0, 732, 0, 107, 0, 772,
	689, 858, 787, 858, 787, 964, 755, 0, 799, 0,
	802, 803, 0, 800, 778, 0, 0, 719, 853, 0,
	716, 855, 716, 1487, 801, 804, 805, 763, 0, 0,
	715, 717, 718, 859, 724, 724, 724, 0, 858, 858,
	730, 0, 854, 856, 0, 0, 724, 733,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 441, 3, 447, 442, 3,
	452, 453, 445, 443, 456, 444, 454, 446, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 460, 3,
	433, 435, 434, 437, 457, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 450, 3, 451, 448, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 458, 440, 459, 438,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 436, 57776, 439, 57777, 449, 57778, 455, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1053
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1058
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1062
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1063
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1064
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1065
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1066
		{
			return helpWith(sqllex, "GRANT")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1067
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1068
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1069
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1070
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1074
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1083
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1084
		{
			return helpWith(sqllex, "ALTER")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1087
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1088
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1089
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1090
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1091
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1092
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1146
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1147
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1158
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1173
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1177
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1181
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1192
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1204
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 66:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1223
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1256
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1260
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1264
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1270
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1274
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1280
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1289
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1300
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1304
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1310
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1318
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1328
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1332
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1342
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1353
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1360
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1372
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1379
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1387
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1392
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1396
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1401
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1407
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1415
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 101:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1424
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1436
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 103:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1444
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1455
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1459
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1463
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 107:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1467
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 108:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1473
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1478
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1489
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1493
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1499
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1503
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 114:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1510
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1515
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1520
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1525
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1530
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1535
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1540
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1545
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1550
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1555
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1560
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1569
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1581
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1591
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1598
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1601
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1608
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1617
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1626
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1631
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1638
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1646
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1647
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1651
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1655
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1661
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1669
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1673
		{
			sqlVAL.union.val = nil
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1679
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 143:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1683
		{
			sqlVAL.union.val = nil
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1690
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1694
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1698
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1704
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1708
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1734
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1737
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 151:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1760
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1764
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1767
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1771
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 155:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1808
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1813
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1817
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1823
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1828
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1833
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1838
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1842
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1858
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1861
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1865
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1869
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1877
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1881
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1887
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 170:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1891
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1897
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1901
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1905
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1909
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1915
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1919
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1925
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 178:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1929
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 179:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1933
		{
			sqlVAL.union.val = nil
		}
	case 180:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1939
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1952
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1953
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1954
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1955
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1965
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1973
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1975
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1978
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1988
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1997
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2005
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2007
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2011
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2014
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2024
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2033
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2041
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2043
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2047
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2050
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2054
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2058
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2062
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2077
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2083
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2088
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2100
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2101
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2103
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2104
		{
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2105
		{
			return helpWith(sqllex, "CREATE")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2108
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2109
		{
			return unimplemented(sqllex, "create cast")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2110
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2111
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2112
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2113
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2114
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 226:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2115
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2116
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2117
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2118
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2119
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2120
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2121
		{
			return unimplemented(sqllex, "create operator")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2122
		{
			return unimplemented(sqllex, "create publication")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2123
		{
			return unimplemented(sqllex, "create rule")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2124
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2125
		{
			return unimplemented(sqllex, "create server")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2126
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2127
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2128
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2131
		{
		}
	case 241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2132
		{
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2135
		{
		}
	case 243:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2136
		{
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2139
		{
		}
	case 245:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2140
		{
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2143
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2144
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2145
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2146
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2147
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2148
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 252:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2149
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2150
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2151
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2152
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2153
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2154
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2155
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2156
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2157
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2158
		{
			return unimplemented(sqllex, "drop server")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2159
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2160
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2161
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2162
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2166
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2167
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2168
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2169
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2171
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2172
		{
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2173
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2174
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2184
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2192
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2196
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 284:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2200
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2206
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2210
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2219
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2226
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2232
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2238
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2242
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2253
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().Value)
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2265
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2273
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2281
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2291
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2295
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2301
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2305
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2312
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 301:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2316
		{

			sqlVAL.union.val = nil
		}
	case 302:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2330
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2340
		{
			return helpWith(sqllex, "DELETE")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2347
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2350
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2351
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2352
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2353
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2354
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2363
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2364
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2365
		{
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2366
		{
			return helpWith(sqllex, "DROP")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2369
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2370
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2371
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2372
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2373
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2381
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2385
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2388
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2396
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2400
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2403
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2411
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2415
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2418
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2426
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2434
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2441
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2449
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2457
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2464
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2472
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2476
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2479
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2487
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2491
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2494
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2498
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2503
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2526
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2529
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2531
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2535
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2539
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2546
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2550
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2553
		{
			return helpWith(sqllex, "DELETE")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2555
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2556
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2557
		{
			return helpWith(sqllex, "INSERT")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2558
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2560
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2561
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2564
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2569
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2570
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2571
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2576
		{
			return helpWith(sqllex, "DELETE")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2577
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2578
		{
			return helpWith(sqllex, "INSERT")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2580
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2584
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2585
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2589
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2593
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 401:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2603
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2611
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2619
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2623
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 405:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2627
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2637
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2644
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2652
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2656
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 410:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2660
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2670
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2674
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2678
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2682
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2685
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2705
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2709
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2713
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2716
		{
			return helpWith(sqllex, "GRANT")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2736
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2740
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2744
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2747
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2752
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2756
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2766
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2770
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2784
		{
			return helpWith(sqllex, "RESET")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2785
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2793
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2797
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2800
		{
			return helpWith(sqllex, "RESET")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2808
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2811
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2822
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2825
		{
			return helpWith(sqllex, "USE")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2829
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2830
		{
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2831
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2832
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2836
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2837
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2838
		{
			return helpWith(sqllex, "USE")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2854
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2869
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2872
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2890
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2898
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2902
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2906
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2912
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2916
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2922
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2926
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2930
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2934
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2938
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2949
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2952
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 474:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2962
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2978
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2982
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2987
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3004
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3007
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3009
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3012
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3016
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3035
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3042
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3048
		{
			return unimplemented(sqllex, "set from current")
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3049
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3057
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3062
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3069
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3073
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3079
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3083
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3090
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3111
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3115
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3121
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3125
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3129
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3133
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3137
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3143
		{
			sqlVAL.union.val = tree.Low
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3147
		{
			sqlVAL.union.val = tree.Normal
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3151
		{
			sqlVAL.union.val = tree.High
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3162
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3166
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3170
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3175
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3179
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3192
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3193
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3194
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3195
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3196
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3197
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3199
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3200
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3201
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3202
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3203
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3204
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3205
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3206
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3207
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3208
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3209
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3210
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3211
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3212
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3213
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3214
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3215
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3217
		{
			return helpWith(sqllex, "SHOW")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3224
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3225
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3226
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3237
		{
			sqlVAL.str = "client_encoding"
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3240
		{
			sqlVAL.str = "timezone"
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3241
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3255
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3259
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3263
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3274
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3282
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3290
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3297
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3305
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3312
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3322
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3326
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3329
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3331
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3334
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3342
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3345
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3353
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3356
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 592:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3369
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3377
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3385
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3388
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3390
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3394
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3398
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3401
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3403
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3407
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3410
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3418
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3421
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3423
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3426
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3434
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3437
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3439
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3442
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 611:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3446
		{
			sqlVAL.union.val = true
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3448
		{
			sqlVAL.union.val = true
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3450
		{
			sqlVAL.union.val = false
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3458
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: sqlDollar[2].union.bool()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3461
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3464
		{
			sqlVAL.union.val = true
		}
	case 617:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3465
		{
			sqlVAL.union.val = false
		}
	case 618:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3474
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3477
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3479
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3482
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3484
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3488
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3491
		{
			sqlVAL.union.val = true
		}
	case 625:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3492
		{
			sqlVAL.union.val = false
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3500
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3503
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 628:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3505
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3508
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 630:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3516
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3526
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3536
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3539
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3542
		{
			sqlVAL.union.val = true
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3543
		{
			sqlVAL.union.val = false
		}
	case 636:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3550
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3554
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3557
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3564
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3568
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3571
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3578
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3582
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3590
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3595
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3600
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3604
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3612
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3616
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3620
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3633
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3636
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3644
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3647
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3651
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3655
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3659
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3667
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3675
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3682
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3689
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3693
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3704
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3709
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3712
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 671:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3720
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3727
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3732
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3852
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3856
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3860
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3899
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3903
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3908
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3912
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3921
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3928
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3932
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3944
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3953
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3956
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 688:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3992
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  sqlDollar[8].union.interleave(),
				Defs:        sqlDollar[6].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[9].union.partitionBy(),
			}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4004
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  sqlDollar[11].union.interleave(),
				Defs:        sqlDollar[9].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[12].union.partitionBy(),
			}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4017
		{
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4018
		{
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4019
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 693:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4023
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  nil,
				Defs:        sqlDollar[5].union.tblDefs(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:4034
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  nil,
				Defs:        sqlDollar[8].union.tblDefs(),
				AsSource:    sqlDollar[11].union.slct(),
			}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4046
		{
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4047
		{
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4048
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4062
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4063
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4064
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4065
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4066
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4067
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4068
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 705:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4069
		{
		}
	case 707:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4074
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4080
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4084
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4090
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4096
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4099
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 715:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4103
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4112
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4119
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4124
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 719:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4129
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4135
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4142
		{
			sqlVAL.str = ""
		}
	case 724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4149
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4155
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4162
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4169
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4175
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4179
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 730:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4185
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4195
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4199
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 733:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4205
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4219
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4230
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4234
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4240
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4244
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4248
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4252
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4256
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4260
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4264
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4282
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4286
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4290
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4294
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4298
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4302
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4306
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4316
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4320
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4324
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 754:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4331
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4341
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4353
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4363
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4375
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4380
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 760:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4386
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4392
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4403
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4413
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4427
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 765:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4431
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4437
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4447
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 768:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4452
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4465
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 770:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4471
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4482
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4486
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4492
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4498
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4502
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4508
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4514
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4519
		{
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4520
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4521
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4522
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4523
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4524
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 786:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4541
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 787:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4545
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4551
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4555
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4575
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4579
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4583
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4587
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4596
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4600
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4604
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4608
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4612
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4618
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4624
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4632
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4636
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4640
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4644
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4648
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4654
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4658
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4664
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 809:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4683
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4688
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4692
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 813:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4696
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4699
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4700
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4703
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4704
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4706
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4707
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4708
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4711
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4713
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4715
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4717
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4718
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4720
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4721
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4723
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4725
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4733
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4736
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 832:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4744
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4748
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4751
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4755
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4759
		{
			sqlVAL.union.val = nil
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4769
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4773
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4776
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4781
		{
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4782
		{
		}
	case 842:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4790
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4798
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 844:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4799
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 845:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4802
		{
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4803
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 847:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4809
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 848:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4811
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 849:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4813
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 850:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4815
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 851:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4817
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 852:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4819
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 853:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4835
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4849
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4864
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4878
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4892
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 858:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4895
		{
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4896
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4900
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4915
		{
			sqlVAL.union.val = false
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4921
		{
			sqlVAL.union.val = true
		}
	case 863:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4925
		{
			sqlVAL.union.val = false
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4931
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4935
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4944
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4955
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 868:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4956
		{
			sqlVAL.str = ""
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4960
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4964
		{
			sqlVAL.union.val = tree.Descending
		}
	case 871:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4968
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 872:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4974
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4981
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4985
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4991
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4997
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5005
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5011
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5019
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5025
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5033
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5037
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5042
		{
		}
	case 884:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5043
		{
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5046
		{
		}
	case 886:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5047
		{
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5055
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5058
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5068
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5077
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5080
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5088
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5091
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5095
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5096
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5097
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5113
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 902:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5116
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5118
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5121
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 905:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5131
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5134
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5136
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5139
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5143
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5148
		{
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5149
		{
		}
	case 912:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5150
		{
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5158
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5165
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5168
		{
		}
	case 916:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5169
		{
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5173
		{
			sqlVAL.str = ""
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5177
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5181
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 920:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5185
		{
			sqlVAL.str = ""
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5191
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5195
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5201
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5205
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5211
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5215
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5228
		{
		}
	case 928:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5230
		{
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5234
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5239
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5243
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5247
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5253
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5259
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 935:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5265
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5269
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 937:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5279
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5289
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5299
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5303
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 941:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5307
		{
			sqlVAL.str = ""
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5313
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 943:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5317
		{
			sqlVAL.str = ""
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5323
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 945:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5327
		{
			sqlVAL.str = ""
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5333
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 947:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5337
		{
			sqlVAL.str = ""
		}
	case 948:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5342
		{
		}
	case 949:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5343
		{
		}
	case 950:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5355
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 951:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5362
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5369
		{
			return helpWith(sqllex, "INSERT")
		}
	case 953:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5380
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5387
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 955:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5391
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5400
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5407
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5411
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5415
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5421
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5425
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5445
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 964:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5449
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5453
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5459
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 967:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5462
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5463
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 969:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5465
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 970:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5471
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 971:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5476
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 972:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5480
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 973:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5497
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5508
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 975:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5512
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 976:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5513
		{
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5517
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5521
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5534
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5537
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 983:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5541
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5584
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5590
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5594
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5609
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5613
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5617
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5621
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5625
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5629
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5634
		{
		}
	case 995:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5635
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 996:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5640
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5675
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5676
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5677
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5699
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5712
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5726
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5738
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5742
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5751
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5760
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5775
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5782
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5794
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5798
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5802
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5806
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5810
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5816
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5824
		{
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5825
		{
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5829
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5833
		{
			sqlVAL.union.val = nil
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5838
		{
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5839
		{
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5843
		{
			sqlVAL.union.val = true
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5847
		{
			sqlVAL.union.val = false
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5851
		{
			sqlVAL.union.val = false
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5857
		{
			sqlVAL.union.val = true
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5863
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5868
		{
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5869
		{
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5873
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5877
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5883
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5889
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5893
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5899
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5903
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5908
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5923
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5932
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5943
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5947
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5956
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5962
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5969
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5976
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5985
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5989
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5993
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5999
		{
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6000
		{
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6003
		{
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6004
		{
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6021
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6025
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6031
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6035
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6054
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6057
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6059
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6071
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6074
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6076
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6082
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6086
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6092
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6096
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6101
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6106
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6112
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6117
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6124
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6129
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6140
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6144
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6148
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6156
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6187
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6201
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6211
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6219
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6228
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6232
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6236
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6247
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6271
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6277
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6281
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6287
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6289
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6293
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6299
		{
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6301
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6304
		{
			sqlVAL.union.val = nil
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6305
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6306
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6310
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6314
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6320
		{
			sqlVAL.union.val = true
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6324
		{
			sqlVAL.union.val = false
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6344
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6348
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6352
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6356
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6360
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6364
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6370
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6374
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6381
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6387
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6394
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6400
		{
			sqlVAL.str = tree.AstFull
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6404
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6408
		{
			sqlVAL.str = tree.AstRight
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6412
		{
			sqlVAL.str = tree.AstInner
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6418
		{
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6419
		{
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6440
		{
			sqlVAL.str = tree.AstHash
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6444
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6448
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6452
		{
			sqlVAL.str = ""
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6465
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6469
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6474
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6475
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6476
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6477
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6481
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6486
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6500
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6504
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6510
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6518
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6528
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6535
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6547
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6560
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6568
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6569
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6577
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6583
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6590
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6591
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6593
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6601
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6602
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6613
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6614
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6631
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6635
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6639
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6643
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6647
		{
			sqlVAL.union.val = types.String
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6651
		{
			sqlVAL.union.val = types.Name
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6655
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6664
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6668
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6672
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6676
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6680
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6684
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6688
		{
			sqlVAL.union.val = types.INet
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6692
		{
			sqlVAL.union.val = types.Oid
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6696
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6700
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6704
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6735
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6743
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6751
		{
			sqlVAL.union.val = nil
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6758
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6762
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6766
		{
			sqlVAL.union.val = types.Int2
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6770
		{
			sqlVAL.union.val = types.Int2
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6774
		{
			sqlVAL.union.val = types.Int4
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6778
		{
			sqlVAL.union.val = types.Int
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6782
		{
			sqlVAL.union.val = types.Int
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6786
		{
			sqlVAL.union.val = types.Int
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6790
		{
			sqlVAL.union.val = types.Float4
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6794
		{
			sqlVAL.union.val = types.Float4
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6798
		{
			sqlVAL.union.val = types.Float
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6802
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6806
		{
			sqlVAL.union.val = types.Float
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6810
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6818
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6826
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6834
		{
			sqlVAL.union.val = types.Bool
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6838
		{
			sqlVAL.union.val = types.Bool
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6845
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6849
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6853
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6857
		{
			sqlVAL.union.val = types.RegType
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6861
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6867
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6880
		{
			sqlVAL.union.val = types.Float
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6886
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6892
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6900
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6904
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6908
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6914
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6926
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6932
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6936
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6940
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6944
		{
			sqlVAL.union.val = types.String
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6953
		{
			sqlVAL.union.val = true
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6954
		{
			sqlVAL.union.val = false
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6959
		{
			sqlVAL.union.val = types.Date
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6963
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = types.Time
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6968
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = types.MakeTime(prec)
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6975
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6976
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6978
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6986
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6998
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7002
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7011
		{
			sqlVAL.union.val = true
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7012
		{
			sqlVAL.union.val = false
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7013
		{
			sqlVAL.union.val = false
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7017
		{
			sqlVAL.union.val = types.Interval
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7023
		{
			sqlVAL.union.val = tree.Year
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7027
		{
			sqlVAL.union.val = tree.Month
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7031
		{
			sqlVAL.union.val = tree.Day
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7035
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7039
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7043
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7049
		{
			sqlVAL.union.val = tree.Month
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7053
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7057
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7061
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7065
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7069
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7073
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7080
		{
			sqlVAL.union.val = nil
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7086
		{
			sqlVAL.union.val = tree.Second
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7089
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7113
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7117
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7121
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7124
		{
			return unimplementedWithIssue(sqllex, 32005)
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7133
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7138
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7142
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7146
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7150
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7154
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7158
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7162
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7166
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7170
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7174
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7178
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7182
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7186
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7190
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7194
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7198
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7202
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7206
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7210
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7214
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7218
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7222
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7226
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7230
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7234
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7238
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7242
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7246
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7250
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7254
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7258
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7262
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7266
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7270
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7274
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7278
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7282
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7286
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7290
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7294
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7298
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7302
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7306
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7310
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7314
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7318
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7322
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7326
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7330
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7334
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7338
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7342
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7346
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7350
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7354
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7358
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7362
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7366
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7370
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7374
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7377
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7379
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7383
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7387
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7391
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7395
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7399
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7403
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7407
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7411
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7415
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7419
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7423
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7427
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7431
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7435
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7439
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7443
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7460
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7465
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7477
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7481
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7485
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7489
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7493
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7497
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7501
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7505
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7509
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7513
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7517
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7521
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7525
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7529
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7533
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7537
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7541
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7545
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7549
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7553
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7557
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7561
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7565
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7569
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7573
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7577
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7581
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7585
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7599
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7607
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7643
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7647
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7651
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7655
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7659
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7664
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7666
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7670
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7673
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7675
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7679
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7683
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7687
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7691
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7700
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7707
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7711
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7715
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7720
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7724
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7728
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7732
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7736
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7739
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7743
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7747
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7750
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7751
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7753
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7759
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7763
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7766
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7777
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7784
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7793
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7794
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7798
		{
			return unimplementedWithIssue(sqllex, 32563)
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7800
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7804
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7810
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7814
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7818
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7822
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7828
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7832
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7836
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7840
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7844
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7848
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7852
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7856
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7860
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7864
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7868
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7872
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7876
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7883
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7886
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7888
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7891
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7893
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7896
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7898
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7901
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7903
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7906
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7908
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7911
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7913
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7916
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7918
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7921
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7923
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7927
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7930
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7931
		{
			return unimplemented(sqllex, "treat")
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7933
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7937
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7941
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7945
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7949
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7952
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7954
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7957
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7962
		{
			return unimplemented(sqllex, "within group")
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7963
		{
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7967
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7971
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7978
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7982
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7988
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7992
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7998
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8006
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8010
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8014
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8021
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8041
		{
			sqlVAL.str = ""
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8047
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8051
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8062
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8069
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8076
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8083
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8089
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8102
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8130
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8134
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8138
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8142
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8149
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8165
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8169
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8176
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8188
		{
			sqlVAL.union.val = tree.Any
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8192
		{
			sqlVAL.union.val = tree.Some
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8196
		{
			sqlVAL.union.val = tree.All
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8201
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8202
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8203
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8204
		{
			sqlVAL.union.val = tree.Div
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8205
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8206
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8207
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8208
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8209
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8210
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8211
		{
			sqlVAL.union.val = tree.LT
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8212
		{
			sqlVAL.union.val = tree.GT
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8213
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8214
		{
			sqlVAL.union.val = tree.LE
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8215
		{
			sqlVAL.union.val = tree.GE
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8216
		{
			sqlVAL.union.val = tree.NE
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8220
		{
			sqlVAL.union.val = tree.Like
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8221
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8222
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8223
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8246
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8250
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8256
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8260
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8264
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8275
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8279
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8285
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8289
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8296
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8302
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8306
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8312
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8316
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8322
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8326
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8332
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8336
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8342
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8346
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8368
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8372
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8376
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8382
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8389
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8393
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8410
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8414
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8418
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8422
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8426
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8432
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8438
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8444
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8448
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8452
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8458
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8470
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8477
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8481
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8487
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8493
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8497
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8504
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8510
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8514
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8521
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8527
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8531
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8536
		{
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8537
		{
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8541
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8545
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8551
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8560
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8564
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8568
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8576
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8580
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8586
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8590
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8609
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8617
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8640
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8649
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8653
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8657
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8661
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8667
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8671
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8679
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8683
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8692
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8703
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8712
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8720
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8817
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8824
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1633:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8828
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1634:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8832
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1636:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8846
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1637:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8850
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8854
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8867
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8885
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8898
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1645:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8905
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1653:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8930
		{
			sqlVAL.str = ""
		}
	case 1654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8936
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1655:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8940
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
