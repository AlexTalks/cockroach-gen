// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:64

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:585
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const COMPLETE = lex.COMPLETE
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"COMPLETE",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9544

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	-2, 1043,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 68,
	180, 882,
	197, 882,
	212, 244,
	289, 244,
	297, 722,
	324, 244,
	333, 722,
	370, 722,
	393, 244,
	417, 722,
	-2, 0,
	-1, 74,
	212, 248,
	-2, 0,
	-1, 75,
	107, 1043,
	186, 1043,
	403, 1043,
	404, 1043,
	-2, 0,
	-1, 87,
	120, 1017,
	135, 1017,
	194, 1017,
	223, 1017,
	254, 1017,
	264, 1017,
	398, 1017,
	-2, 1004,
	-1, 117,
	125, 643,
	211, 643,
	291, 623,
	342, 623,
	386, 643,
	-2, 0,
	-1, 118,
	4, 1045,
	21, 1045,
	22, 1045,
	23, 1045,
	24, 1045,
	25, 1045,
	27, 1045,
	32, 1045,
	37, 1045,
	38, 1045,
	39, 1045,
	40, 1045,
	41, 1045,
	42, 1045,
	43, 1045,
	44, 1045,
	45, 1045,
	46, 1045,
	47, 1045,
	49, 1045,
	50, 1045,
	51, 1045,
	52, 1045,
	53, 1045,
	54, 1045,
	57, 1045,
	58, 1045,
	59, 1045,
	60, 1045,
	62, 1045,
	63, 1045,
	67, 1045,
	68, 1045,
	69, 1045,
	70, 1045,
	71, 1045,
	72, 1045,
	74, 1045,
	75, 1045,
	76, 1045,
	77, 1045,
	79, 1045,
	81, 1045,
	82, 1045,
	83, 1045,
	86, 1045,
	87, 1045,
	95, 1045,
	96, 1045,
	97, 1045,
	98, 1045,
	99, 1045,
	100, 1045,
	101, 1045,
	102, 1045,
	104, 1045,
	106, 1045,
	107, 1045,
	109, 1045,
	112, 1045,
	113, 1045,
	114, 1045,
	116, 1045,
	118, 1045,
	119, 1045,
	121, 1045,
	122, 1045,
	123, 1045,
	124, 1045,
	125, 1045,
	126, 1045,
	127, 1045,
	128, 1045,
	129, 1045,
	130, 1045,
	131, 1045,
	132, 1045,
	134, 1045,
	140, 1045,
	141, 1045,
	142, 1045,
	143, 1045,
	144, 1045,
	145, 1045,
	147, 1045,
	149, 1045,
	153, 1045,
	154, 1045,
	156, 1045,
	157, 1045,
	159, 1045,
	160, 1045,
	162, 1045,
	163, 1045,
	164, 1045,
	165, 1045,
	166, 1045,
	167, 1045,
	168, 1045,
	169, 1045,
	171, 1045,
	172, 1045,
	174, 1045,
	175, 1045,
	176, 1045,
	180, 1045,
	181, 1045,
	182, 1045,
	183, 1045,
	186, 1045,
	187, 1045,
	188, 1045,
	189, 1045,
	190, 1045,
	191, 1045,
	192, 1045,
	193, 1045,
	195, 1045,
	197, 1045,
	199, 1045,
	201, 1045,
	202, 1045,
	203, 1045,
	205, 1045,
	206, 1045,
	209, 1045,
	210, 1045,
	211, 1045,
	212, 1045,
	214, 1045,
	215, 1045,
	217, 1045,
	218, 1045,
	220, 1045,
	221, 1045,
	224, 1045,
	225, 1045,
	228, 1045,
	229, 1045,
	231, 1045,
	232, 1045,
	233, 1045,
	234, 1045,
	235, 1045,
	236, 1045,
	237, 1045,
	238, 1045,
	239, 1045,
	240, 1045,
	242, 1045,
	243, 1045,
	244, 1045,
	245, 1045,
	247, 1045,
	250, 1045,
	251, 1045,
	252, 1045,
	253, 1045,
	255, 1045,
	256, 1045,
	257, 1045,
	259, 1045,
	260, 1045,
	261, 1045,
	262, 1045,
	265, 1045,
	266, 1045,
	268, 1045,
	270, 1045,
	271, 1045,
	272, 1045,
	273, 1045,
	274, 1045,
	275, 1045,
	276, 1045,
	277, 1045,
	278, 1045,
	279, 1045,
	281, 1045,
	282, 1045,
	283, 1045,
	284, 1045,
	285, 1045,
	286, 1045,
	288, 1045,
	290, 1045,
	291, 1045,
	292, 1045,
	293, 1045,
	294, 1045,
	295, 1045,
	296, 1045,
	297, 1045,
	298, 1045,
	300, 1045,
	301, 1045,
	302, 1045,
	303, 1045,
	304, 1045,
	306, 1045,
	307, 1045,
	308, 1045,
	309, 1045,
	310, 1045,
	311, 1045,
	312, 1045,
	313, 1045,
	315, 1045,
	317, 1045,
	318, 1045,
	319, 1045,
	320, 1045,
	321, 1045,
	322, 1045,
	324, 1045,
	325, 1045,
	326, 1045,
	327, 1045,
	328, 1045,
	329, 1045,
	330, 1045,
	331, 1045,
	333, 1045,
	334, 1045,
	335, 1045,
	336, 1045,
	337, 1045,
	338, 1045,
	339, 1045,
	340, 1045,
	341, 1045,
	342, 1045,
	344, 1045,
	345, 1045,
	346, 1045,
	347, 1045,
	349, 1045,
	350, 1045,
	351, 1045,
	352, 1045,
	354, 1045,
	355, 1045,
	356, 1045,
	357, 1045,
	358, 1045,
	359, 1045,
	360, 1045,
	361, 1045,
	362, 1045,
	363, 1045,
	364, 1045,
	365, 1045,
	367, 1045,
	368, 1045,
	369, 1045,
	371, 1045,
	372, 1045,
	373, 1045,
	374, 1045,
	375, 1045,
	376, 1045,
	377, 1045,
	379, 1045,
	380, 1045,
	381, 1045,
	382, 1045,
	384, 1045,
	386, 1045,
	387, 1045,
	388, 1045,
	389, 1045,
	390, 1045,
	392, 1045,
	393, 1045,
	394, 1045,
	396, 1045,
	397, 1045,
	400, 1045,
	401, 1045,
	402, 1045,
	403, 1045,
	404, 1045,
	405, 1045,
	407, 1045,
	409, 1045,
	410, 1045,
	411, 1045,
	412, 1045,
	413, 1045,
	414, 1045,
	415, 1045,
	417, 1045,
	418, 1045,
	419, 1045,
	424, 1045,
	425, 1045,
	426, 1045,
	427, 1045,
	428, 1045,
	429, 1045,
	-2, 0,
	-1, 119,
	1, 935,
	201, 935,
	288, 935,
	295, 935,
	432, 935,
	455, 935,
	-2, 0,
	-1, 121,
	1, 935,
	455, 935,
	-2, 0,
	-1, 122,
	1, 935,
	455, 935,
	-2, 0,
	-1, 123,
	1, 939,
	455, 939,
	-2, 0,
	-1, 147,
	120, 1016,
	135, 1016,
	194, 1016,
	223, 1016,
	254, 1016,
	264, 1016,
	398, 1016,
	-2, 1013,
	-1, 179,
	4, 1052,
	5, 1052,
	6, 1052,
	7, 1052,
	8, 1052,
	9, 1052,
	10, 1052,
	21, 1052,
	22, 1052,
	23, 1052,
	24, 1052,
	25, 1052,
	27, 1052,
	32, 1052,
	33, 1052,
	37, 1052,
	38, 1052,
	39, 1052,
	40, 1052,
	41, 1052,
	42, 1052,
	43, 1052,
	44, 1052,
	45, 1052,
	46, 1052,
	47, 1052,
	49, 1052,
	50, 1052,
	51, 1052,
	52, 1052,
	53, 1052,
	54, 1052,
	55, 1052,
	56, 1052,
	57, 1052,
	58, 1052,
	59, 1052,
	60, 1052,
	62, 1052,
	63, 1052,
	65, 1052,
	67, 1052,
	68, 1052,
	69, 1052,
	70, 1052,
	71, 1052,
	72, 1052,
	74, 1052,
	75, 1052,
	76, 1052,
	77, 1052,
	79, 1052,
	81, 1052,
	82, 1052,
	83, 1052,
	85, 1052,
	86, 1052,
	87, 1052,
	88, 1052,
	89, 1052,
	90, 1052,
	91, 1052,
	92, 1052,
	93, 1052,
	94, 1052,
	95, 1052,
	96, 1052,
	97, 1052,
	98, 1052,
	99, 1052,
	100, 1052,
	101, 1052,
	102, 1052,
	103, 1052,
	104, 1052,
	106, 1052,
	107, 1052,
	109, 1052,
	112, 1052,
	113, 1052,
	114, 1052,
	116, 1052,
	118, 1052,
	119, 1052,
	121, 1052,
	122, 1052,
	123, 1052,
	124, 1052,
	125, 1052,
	126, 1052,
	127, 1052,
	128, 1052,
	129, 1052,
	130, 1052,
	131, 1052,
	132, 1052,
	133, 1052,
	134, 1052,
	140, 1052,
	141, 1052,
	142, 1052,
	143, 1052,
	144, 1052,
	145, 1052,
	147, 1052,
	149, 1052,
	152, 1052,
	153, 1052,
	154, 1052,
	156, 1052,
	157, 1052,
	159, 1052,
	160, 1052,
	162, 1052,
	163, 1052,
	164, 1052,
	165, 1052,
	166, 1052,
	167, 1052,
	168, 1052,
	169, 1052,
	170, 1052,
	171, 1052,
	172, 1052,
	174, 1052,
	175, 1052,
	176, 1052,
	180, 1052,
	181, 1052,
	182, 1052,
	183, 1052,
	185, 1052,
	186, 1052,
	187, 1052,
	188, 1052,
	189, 1052,
	190, 1052,
	191, 1052,
	192, 1052,
	193, 1052,
	195, 1052,
	197, 1052,
	198, 1052,
	199, 1052,
	200, 1052,
	201, 1052,
	202, 1052,
	203, 1052,
	204, 1052,
	205, 1052,
	206, 1052,
	209, 1052,
	210, 1052,
	211, 1052,
	212, 1052,
	214, 1052,
	215, 1052,
	217, 1052,
	218, 1052,
	219, 1052,
	220, 1052,
	221, 1052,
	222, 1052,
	224, 1052,
	225, 1052,
	228, 1052,
	229, 1052,
	231, 1052,
	232, 1052,
	233, 1052,
	234, 1052,
	235, 1052,
	236, 1052,
	237, 1052,
	238, 1052,
	239, 1052,
	240, 1052,
	241, 1052,
	242, 1052,
	243, 1052,
	244, 1052,
	245, 1052,
	246, 1052,
	247, 1052,
	248, 1052,
	249, 1052,
	250, 1052,
	251, 1052,
	252, 1052,
	253, 1052,
	255, 1052,
	256, 1052,
	257, 1052,
	260, 1052,
	261, 1052,
	262, 1052,
	265, 1052,
	266, 1052,
	267, 1052,
	268, 1052,
	269, 1052,
	270, 1052,
	271, 1052,
	272, 1052,
	273, 1052,
	274, 1052,
	275, 1052,
	276, 1052,
	277, 1052,
	278, 1052,
	279, 1052,
	281, 1052,
	282, 1052,
	283, 1052,
	284, 1052,
	285, 1052,
	286, 1052,
	288, 1052,
	290, 1052,
	291, 1052,
	292, 1052,
	293, 1052,
	294, 1052,
	295, 1052,
	296, 1052,
	297, 1052,
	298, 1052,
	300, 1052,
	301, 1052,
	302, 1052,
	303, 1052,
	304, 1052,
	306, 1052,
	307, 1052,
	308, 1052,
	309, 1052,
	310, 1052,
	311, 1052,
	312, 1052,
	313, 1052,
	315, 1052,
	316, 1052,
	317, 1052,
	318, 1052,
	319, 1052,
	320, 1052,
	321, 1052,
	322, 1052,
	324, 1052,
	325, 1052,
	326, 1052,
	327, 1052,
	328, 1052,
	329, 1052,
	330, 1052,
	331, 1052,
	333, 1052,
	334, 1052,
	335, 1052,
	336, 1052,
	337, 1052,
	338, 1052,
	339, 1052,
	340, 1052,
	341, 1052,
	342, 1052,
	343, 1052,
	344, 1052,
	345, 1052,
	346, 1052,
	347, 1052,
	348, 1052,
	349, 1052,
	350, 1052,
	351, 1052,
	352, 1052,
	354, 1052,
	355, 1052,
	356, 1052,
	357, 1052,
	358, 1052,
	359, 1052,
	360, 1052,
	361, 1052,
	362, 1052,
	363, 1052,
	364, 1052,
	365, 1052,
	367, 1052,
	368, 1052,
	369, 1052,
	371, 1052,
	372, 1052,
	373, 1052,
	374, 1052,
	375, 1052,
	376, 1052,
	377, 1052,
	379, 1052,
	380, 1052,
	381, 1052,
	382, 1052,
	384, 1052,
	386, 1052,
	387, 1052,
	388, 1052,
	389, 1052,
	390, 1052,
	391, 1052,
	392, 1052,
	393, 1052,
	394, 1052,
	396, 1052,
	397, 1052,
	399, 1052,
	400, 1052,
	401, 1052,
	402, 1052,
	403, 1052,
	404, 1052,
	405, 1052,
	406, 1052,
	407, 1052,
	409, 1052,
	410, 1052,
	411, 1052,
	412, 1052,
	413, 1052,
	414, 1052,
	415, 1052,
	417, 1052,
	418, 1052,
	419, 1052,
	424, 1052,
	425, 1052,
	426, 1052,
	427, 1052,
	428, 1052,
	429, 1052,
	430, 1052,
	438, 1052,
	443, 1052,
	444, 1052,
	445, 1052,
	452, 1052,
	457, 1052,
	-2, 0,
	-1, 547,
	151, 1720,
	383, 1720,
	435, 1720,
	454, 1720,
	-2, 0,
	-1, 548,
	151, 1797,
	383, 1797,
	435, 1797,
	454, 1797,
	-2, 0,
	-1, 549,
	151, 1709,
	383, 1709,
	435, 1709,
	454, 1709,
	-2, 0,
	-1, 551,
	151, 1885,
	383, 1885,
	435, 1885,
	454, 1885,
	-2, 0,
	-1, 553,
	151, 1912,
	383, 1912,
	435, 1912,
	454, 1912,
	-2, 0,
	-1, 560,
	151, 1807,
	383, 1807,
	435, 1807,
	454, 1807,
	-2, 495,
	-1, 577,
	454, 1668,
	456, 1668,
	-2, 691,
	-1, 578,
	454, 1670,
	456, 1670,
	-2, 692,
	-1, 579,
	454, 1669,
	456, 1669,
	-2, 693,
	-1, 580,
	456, 1615,
	-2, 694,
	-1, 727,
	291, 624,
	342, 624,
	-2, 0,
	-1, 728,
	291, 623,
	342, 623,
	-2, 575,
	-1, 731,
	1, 653,
	451, 653,
	453, 653,
	455, 653,
	-2, 0,
	-1, 732,
	1, 690,
	148, 690,
	451, 690,
	453, 690,
	455, 690,
	-2, 0,
	-1, 740,
	1, 627,
	451, 627,
	453, 627,
	455, 627,
	-2, 0,
	-1, 743,
	1, 653,
	451, 653,
	453, 653,
	455, 653,
	-2, 0,
	-1, 744,
	1, 655,
	451, 655,
	453, 655,
	455, 655,
	-2, 0,
	-1, 745,
	1, 658,
	451, 658,
	453, 658,
	455, 658,
	-2, 0,
	-1, 749,
	1, 672,
	451, 672,
	453, 672,
	455, 672,
	-2, 0,
	-1, 750,
	1, 674,
	451, 674,
	453, 674,
	455, 674,
	-2, 0,
	-1, 792,
	135, 1054,
	223, 1054,
	254, 1054,
	-2, 1013,
	-1, 807,
	135, 1053,
	223, 1053,
	254, 1053,
	-2, 1013,
	-1, 831,
	454, 1667,
	-2, 503,
	-1, 860,
	452, 1659,
	-2, 1650,
	-1, 866,
	5, 1189,
	-2, 1700,
	-1, 867,
	5, 1190,
	-2, 1704,
	-1, 868,
	5, 1191,
	-2, 1703,
	-1, 869,
	5, 1192,
	-2, 1910,
	-1, 870,
	5, 1193,
	-2, 1809,
	-1, 871,
	5, 1194,
	-2, 1877,
	-1, 872,
	5, 1195,
	-2, 1879,
	-1, 873,
	5, 1196,
	-2, 1890,
	-1, 874,
	5, 1197,
	-2, 1880,
	-1, 875,
	5, 1198,
	-2, 1881,
	-1, 876,
	5, 1199,
	-2, 1699,
	-1, 877,
	5, 1200,
	-2, 1925,
	-1, 878,
	5, 1201,
	-2, 1772,
	-1, 879,
	5, 1202,
	-2, 1817,
	-1, 880,
	5, 1203,
	-2, 1819,
	-1, 881,
	5, 1204,
	-2, 1776,
	-1, 882,
	5, 1205,
	452, 1677,
	-2, 1668,
	-1, 883,
	5, 1261,
	452, 1261,
	-2, 1960,
	-1, 888,
	452, 1678,
	-2, 1669,
	-1, 890,
	5, 1209,
	-2, 1958,
	-1, 891,
	5, 1210,
	-2, 1959,
	-1, 892,
	5, 1211,
	-2, 1775,
	-1, 893,
	5, 1212,
	-2, 1971,
	-1, 894,
	5, 1213,
	-2, 1777,
	-1, 895,
	5, 1214,
	-2, 1778,
	-1, 896,
	5, 1215,
	-2, 1779,
	-1, 897,
	5, 1216,
	-2, 1940,
	-1, 898,
	5, 1217,
	-2, 1969,
	-1, 899,
	5, 1218,
	-2, 1755,
	-1, 900,
	5, 1219,
	-2, 1756,
	-1, 901,
	5, 1233,
	-2, 1952,
	-1, 903,
	5, 1208,
	-2, 1948,
	-1, 904,
	5, 1208,
	-2, 1947,
	-1, 905,
	5, 1208,
	-2, 1964,
	-1, 906,
	5, 1225,
	-2, 1942,
	-1, 907,
	5, 1226,
	-2, 1701,
	-1, 908,
	5, 1236,
	-2, 1941,
	-1, 909,
	5, 1238,
	-2, 1980,
	-1, 911,
	5, 1249,
	-2, 1730,
	-1, 912,
	5, 1260,
	-2, 1973,
	-1, 913,
	5, 1252,
	-2, 1974,
	-1, 914,
	5, 1260,
	-2, 1975,
	-1, 915,
	5, 1256,
	-2, 1976,
	-1, 916,
	5, 1176,
	-2, 1785,
	-1, 917,
	5, 1177,
	-2, 1786,
	-1, 918,
	454, 1665,
	-2, 1649,
	-1, 919,
	452, 2000,
	-2, 1666,
	-1, 939,
	5, 1244,
	-2, 1900,
	-1, 956,
	5, 1243,
	-2, 1981,
	-1, 966,
	5, 1245,
	418, 1245,
	-2, 1943,
	-1, 967,
	5, 1246,
	418, 1246,
	-2, 1944,
	-1, 1003,
	452, 1677,
	-2, 1668,
	-1, 1031,
	151, 1912,
	383, 1912,
	435, 1912,
	454, 1912,
	-2, 0,
	-1, 1032,
	1, 483,
	455, 483,
	-2, 947,
	-1, 1152,
	306, 1646,
	445, 1646,
	-2, 1645,
	-1, 1175,
	457, 1646,
	-2, 1647,
	-1, 1210,
	297, 722,
	417, 722,
	-2, 243,
	-1, 1230,
	277, 1041,
	-2, 855,
	-1, 1239,
	258, 1672,
	-2, 0,
	-1, 1303,
	1, 358,
	451, 358,
	453, 358,
	455, 358,
	-2, 1015,
	-1, 1306,
	4, 1979,
	11, 1979,
	12, 1979,
	14, 1979,
	15, 1979,
	16, 1979,
	17, 1979,
	18, 1979,
	19, 1979,
	21, 1979,
	22, 1979,
	23, 1979,
	24, 1979,
	25, 1979,
	27, 1979,
	30, 1979,
	32, 1979,
	34, 1979,
	37, 1979,
	38, 1979,
	39, 1979,
	40, 1979,
	41, 1979,
	42, 1979,
	43, 1979,
	44, 1979,
	45, 1979,
	46, 1979,
	47, 1979,
	49, 1979,
	50, 1979,
	51, 1979,
	52, 1979,
	53, 1979,
	54, 1979,
	57, 1979,
	58, 1979,
	59, 1979,
	60, 1979,
	62, 1979,
	63, 1979,
	64, 1979,
	67, 1979,
	68, 1979,
	69, 1979,
	70, 1979,
	71, 1979,
	72, 1979,
	73, 1979,
	74, 1979,
	75, 1979,
	76, 1979,
	77, 1979,
	79, 1979,
	80, 1979,
	81, 1979,
	82, 1979,
	83, 1979,
	85, 1979,
	86, 1979,
	87, 1979,
	95, 1979,
	96, 1979,
	97, 1979,
	98, 1979,
	99, 1979,
	100, 1979,
	101, 1979,
	102, 1979,
	104, 1979,
	106, 1979,
	107, 1979,
	109, 1979,
	112, 1979,
	113, 1979,
	114, 1979,
	116, 1979,
	118, 1979,
	119, 1979,
	121, 1979,
	122, 1979,
	123, 1979,
	124, 1979,
	125, 1979,
	126, 1979,
	127, 1979,
	128, 1979,
	129, 1979,
	130, 1979,
	131, 1979,
	132, 1979,
	136, 1979,
	137, 1979,
	138, 1979,
	139, 1979,
	140, 1979,
	141, 1979,
	142, 1979,
	143, 1979,
	144, 1979,
	145, 1979,
	146, 1979,
	147, 1979,
	149, 1979,
	152, 1979,
	153, 1979,
	154, 1979,
	156, 1979,
	157, 1979,
	159, 1979,
	160, 1979,
	162, 1979,
	163, 1979,
	164, 1979,
	165, 1979,
	166, 1979,
	167, 1979,
	168, 1979,
	169, 1979,
	170, 1979,
	171, 1979,
	172, 1979,
	173, 1979,
	174, 1979,
	175, 1979,
	176, 1979,
	177, 1979,
	178, 1979,
	179, 1979,
	181, 1979,
	182, 1979,
	183, 1979,
	185, 1979,
	186, 1979,
	187, 1979,
	188, 1979,
	189, 1979,
	190, 1979,
	191, 1979,
	192, 1979,
	193, 1979,
	195, 1979,
	197, 1979,
	198, 1979,
	199, 1979,
	200, 1979,
	201, 1979,
	202, 1979,
	203, 1979,
	204, 1979,
	205, 1979,
	206, 1979,
	207, 1979,
	208, 1979,
	209, 1979,
	210, 1979,
	211, 1979,
	212, 1979,
	214, 1979,
	215, 1979,
	217, 1979,
	218, 1979,
	219, 1979,
	220, 1979,
	221, 1979,
	222, 1979,
	224, 1979,
	225, 1979,
	228, 1979,
	229, 1979,
	230, 1979,
	231, 1979,
	232, 1979,
	233, 1979,
	234, 1979,
	235, 1979,
	236, 1979,
	237, 1979,
	238, 1979,
	239, 1979,
	240, 1979,
	241, 1979,
	242, 1979,
	243, 1979,
	244, 1979,
	245, 1979,
	248, 1979,
	250, 1979,
	251, 1979,
	252, 1979,
	253, 1979,
	255, 1979,
	256, 1979,
	257, 1979,
	260, 1979,
	261, 1979,
	262, 1979,
	263, 1979,
	265, 1979,
	266, 1979,
	268, 1979,
	270, 1979,
	271, 1979,
	272, 1979,
	273, 1979,
	274, 1979,
	275, 1979,
	276, 1979,
	277, 1979,
	278, 1979,
	279, 1979,
	281, 1979,
	282, 1979,
	283, 1979,
	284, 1979,
	285, 1979,
	286, 1979,
	288, 1979,
	290, 1979,
	291, 1979,
	292, 1979,
	293, 1979,
	294, 1979,
	295, 1979,
	296, 1979,
	297, 1979,
	298, 1979,
	300, 1979,
	301, 1979,
	302, 1979,
	303, 1979,
	304, 1979,
	305, 1979,
	306, 1979,
	307, 1979,
	308, 1979,
	309, 1979,
	310, 1979,
	311, 1979,
	312, 1979,
	313, 1979,
	315, 1979,
	316, 1979,
	317, 1979,
	318, 1979,
	319, 1979,
	320, 1979,
	321, 1979,
	322, 1979,
	323, 1979,
	324, 1979,
	325, 1979,
	326, 1979,
	327, 1979,
	328, 1979,
	329, 1979,
	330, 1979,
	331, 1979,
	333, 1979,
	334, 1979,
	335, 1979,
	336, 1979,
	337, 1979,
	338, 1979,
	339, 1979,
	340, 1979,
	341, 1979,
	342, 1979,
	344, 1979,
	345, 1979,
	346, 1979,
	347, 1979,
	348, 1979,
	349, 1979,
	350, 1979,
	351, 1979,
	352, 1979,
	354, 1979,
	355, 1979,
	356, 1979,
	357, 1979,
	358, 1979,
	359, 1979,
	360, 1979,
	361, 1979,
	362, 1979,
	363, 1979,
	364, 1979,
	365, 1979,
	367, 1979,
	368, 1979,
	369, 1979,
	371, 1979,
	372, 1979,
	373, 1979,
	374, 1979,
	375, 1979,
	376, 1979,
	377, 1979,
	379, 1979,
	380, 1979,
	381, 1979,
	382, 1979,
	384, 1979,
	386, 1979,
	387, 1979,
	388, 1979,
	389, 1979,
	390, 1979,
	392, 1979,
	393, 1979,
	394, 1979,
	396, 1979,
	397, 1979,
	400, 1979,
	401, 1979,
	402, 1979,
	403, 1979,
	404, 1979,
	405, 1979,
	407, 1979,
	409, 1979,
	410, 1979,
	411, 1979,
	412, 1979,
	413, 1979,
	414, 1979,
	415, 1979,
	417, 1979,
	418, 1979,
	419, 1979,
	424, 1979,
	425, 1979,
	426, 1979,
	427, 1979,
	428, 1979,
	429, 1979,
	430, 1979,
	431, 1979,
	433, 1979,
	434, 1979,
	435, 1979,
	436, 1979,
	437, 1979,
	438, 1979,
	440, 1979,
	441, 1979,
	442, 1979,
	443, 1979,
	444, 1979,
	445, 1979,
	446, 1979,
	447, 1979,
	448, 1979,
	450, 1979,
	453, 1979,
	454, 1979,
	456, 1979,
	457, 1979,
	-2, 0,
	-1, 1309,
	151, 1885,
	383, 1885,
	435, 1885,
	454, 1885,
	-2, 0,
	-1, 1338,
	291, 624,
	342, 624,
	-2, 0,
	-1, 1361,
	1, 619,
	451, 619,
	453, 619,
	455, 619,
	-2, 0,
	-1, 1362,
	1, 644,
	451, 644,
	453, 644,
	455, 644,
	-2, 0,
	-1, 1363,
	1, 626,
	451, 626,
	453, 626,
	455, 626,
	-2, 0,
	-1, 1365,
	1, 630,
	451, 630,
	453, 630,
	455, 630,
	-2, 0,
	-1, 1390,
	1, 1932,
	451, 1932,
	453, 1932,
	454, 1932,
	455, 1932,
	-2, 670,
	-1, 1391,
	1, 1883,
	451, 1883,
	453, 1883,
	454, 1883,
	455, 1883,
	-2, 671,
	-1, 1404,
	1, 942,
	455, 942,
	-2, 947,
	-1, 1409,
	135, 1053,
	223, 1053,
	254, 1053,
	-2, 1013,
	-1, 1502,
	120, 1017,
	135, 1017,
	194, 1017,
	223, 1017,
	254, 1017,
	264, 1017,
	398, 1017,
	-2, 1417,
	-1, 1555,
	453, 1550,
	-2, 0,
	-1, 1597,
	120, 1017,
	135, 1017,
	194, 1017,
	223, 1017,
	254, 1017,
	264, 1017,
	398, 1017,
	-2, 1126,
	-1, 1651,
	452, 1248,
	-2, 1236,
	-1, 1690,
	1, 485,
	455, 485,
	-2, 947,
	-1, 1884,
	1, 621,
	451, 621,
	453, 621,
	455, 621,
	-2, 0,
	-1, 1885,
	1, 646,
	451, 646,
	453, 646,
	455, 646,
	-2, 0,
	-1, 1968,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	207, 0,
	208, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1297,
	-1, 1969,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	207, 0,
	208, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1298,
	-1, 1970,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	207, 0,
	208, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1299,
	-1, 1971,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	207, 0,
	208, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1300,
	-1, 1972,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	207, 0,
	208, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1301,
	-1, 1973,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	207, 0,
	208, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1302,
	-1, 1974,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	207, 0,
	208, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1303,
	-1, 1975,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	207, 0,
	208, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1304,
	-1, 1987,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	207, 0,
	208, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1316,
	-1, 1988,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	207, 0,
	208, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1317,
	-1, 1989,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	207, 0,
	208, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1318,
	-1, 1992,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	170, 0,
	173, 0,
	222, 0,
	348, 0,
	430, 0,
	438, 0,
	-2, 1323,
	-1, 1998,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	170, 0,
	173, 0,
	222, 0,
	348, 0,
	430, 0,
	438, 0,
	-2, 1327,
	-1, 2000,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	170, 0,
	173, 0,
	222, 0,
	348, 0,
	430, 0,
	438, 0,
	-2, 1335,
	-1, 2001,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	170, 0,
	173, 0,
	222, 0,
	348, 0,
	430, 0,
	438, 0,
	-2, 1336,
	-1, 2002,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	170, 0,
	173, 0,
	222, 0,
	348, 0,
	430, 0,
	438, 0,
	-2, 1337,
	-1, 2003,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	170, 0,
	173, 0,
	222, 0,
	348, 0,
	430, 0,
	438, 0,
	-2, 1338,
	-1, 2097,
	5, 1205,
	151, 1561,
	452, 1677,
	-2, 1668,
	-1, 2098,
	151, 1562,
	-2, 1936,
	-1, 2099,
	151, 1563,
	-2, 1806,
	-1, 2100,
	151, 1564,
	-2, 1731,
	-1, 2101,
	151, 1565,
	-2, 1766,
	-1, 2102,
	151, 1566,
	-2, 1804,
	-1, 2103,
	151, 1567,
	-2, 1876,
	-1, 2179,
	1, 1127,
	2, 1127,
	85, 1127,
	120, 1127,
	135, 1127,
	148, 1127,
	152, 1127,
	158, 1127,
	161, 1127,
	185, 1127,
	194, 1127,
	204, 1127,
	219, 1127,
	223, 1127,
	241, 1127,
	254, 1127,
	258, 1127,
	264, 1127,
	314, 1127,
	316, 1127,
	398, 1127,
	408, 1127,
	421, 1127,
	422, 1127,
	423, 1127,
	432, 1127,
	451, 1127,
	453, 1127,
	455, 1127,
	456, 1127,
	-2, 1126,
	-1, 2184,
	452, 1651,
	-2, 1663,
	-1, 2205,
	452, 1247,
	-2, 1237,
	-1, 2442,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	170, 0,
	173, 0,
	222, 0,
	348, 0,
	430, 0,
	438, 0,
	-2, 1325,
	-1, 2443,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	170, 0,
	173, 0,
	222, 0,
	348, 0,
	430, 0,
	438, 0,
	-2, 1329,
	-1, 2449,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	170, 0,
	173, 0,
	222, 0,
	348, 0,
	430, 0,
	438, 0,
	-2, 1331,
	-1, 2629,
	201, 947,
	288, 947,
	295, 947,
	432, 947,
	-2, 482,
	-1, 2720,
	277, 1041,
	-2, 855,
	-1, 2800,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	170, 0,
	173, 0,
	222, 0,
	348, 0,
	430, 0,
	438, 0,
	-2, 1333,
	-1, 2807,
	198, 0,
	200, 0,
	248, 0,
	-2, 1352,
	-1, 2870,
	14, 0,
	15, 0,
	16, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1381,
	-1, 2871,
	14, 0,
	15, 0,
	16, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1382,
	-1, 2872,
	14, 0,
	15, 0,
	16, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1383,
	-1, 2876,
	14, 0,
	15, 0,
	16, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1387,
	-1, 2877,
	14, 0,
	15, 0,
	16, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1388,
	-1, 2878,
	14, 0,
	15, 0,
	16, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1389,
	-1, 2921,
	452, 1652,
	-2, 1664,
	-1, 3008,
	454, 2082,
	-2, 990,
	-1, 3054,
	198, 0,
	200, 0,
	248, 0,
	-2, 1353,
	-1, 3057,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	170, 0,
	173, 0,
	222, 0,
	348, 0,
	430, 0,
	438, 0,
	-2, 1356,
	-1, 3058,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	170, 0,
	173, 0,
	222, 0,
	348, 0,
	430, 0,
	438, 0,
	-2, 1358,
	-1, 3213,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	170, 0,
	173, 0,
	222, 0,
	348, 0,
	430, 0,
	438, 0,
	-2, 1357,
	-1, 3214,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	170, 0,
	173, 0,
	222, 0,
	348, 0,
	430, 0,
	438, 0,
	-2, 1359,
	-1, 3224,
	198, 0,
	-2, 1390,
	-1, 3327,
	198, 0,
	-2, 1391,
	-1, 3443,
	41, 0,
	170, 0,
	222, 0,
	348, 0,
	430, 0,
	438, 0,
	-2, 1939,
}

const sqlPrivate = 57344

const sqlLast = 72655

var sqlAct = [...]int{

	888, 3254, 3529, 3279, 3442, 3257, 3452, 3421, 3157, 3519,
	2128, 3412, 3409, 2336, 1181, 2707, 3396, 3453, 3243, 3454,
	3286, 2345, 2838, 3441, 2337, 3040, 1004, 3331, 2170, 3181,
	1955, 3204, 1156, 2994, 3291, 2941, 2999, 3116, 1621, 211,
	2015, 211, 211, 817, 211, 211, 211, 211, 211, 2646,
	1417, 211, 2736, 2171, 2703, 3004, 1291, 2234, 2729, 579,
	2981, 2942, 3228, 2435, 2377, 1038, 845, 808, 558, 2333,
	1057, 2605, 2310, 2731, 2308, 2379, 1592, 211, 2313, 2591,
	1839, 579, 1149, 2578, 2551, 3039, 996, 1590, 675, 1500,
	2387, 1860, 2376, 1818, 2346, 1821, 3088, 2368, 1345, 2567,
	1810, 1600, 32, 1564, 1811, 2370, 2236, 4, 1952, 2550,
	2167, 2893, 2172, 2293, 2470, 1744, 1295, 1528, 3332, 816,
	140, 1510, 1948, 1735, 2431, 2028, 1168, 2066, 1769, 1773,
	884, 2311, 1762, 2386, 1720, 1722, 887, 1045, 2610, 1404,
	1565, 2174, 2058, 2269, 2012, 2146, 86, 1158, 805, 2125,
	2705, 1304, 1278, 1288, 1807, 1224, 2226, 2040, 2339, 1034,
	2380, 991, 526, 2093, 1574, 1165, 3280, 2029, 970, 2154,
	1418, 580, 988, 1491, 211, 211, 2046, 205, 1416, 575,
	147, 2136, 512, 670, 542, 552, 534, 204, 148, 2268,
	1806, 1302, 581, 1254, 1827, 140, 651, 1178, 620, 1523,
	1734, 844, 37, 529, 36, 993, 34, 1403, 537, 25,
	968, 23, 203, 21, 1422, 738, 2910, 1236, 2466, 2911,
	1861, 2338, 722, 1430, 1431, 1591, 1042, 2288, 1841, 1042,
	1841, 1841, 3557, 2795, 3548, 2145, 584, 2145, 2485, 3547,
	860, 2255, 2145, 2486, 3528, 3515, 587, 1778, 3130, 1433,
	2896, 1199, 3513, 2392, 3476, 3130, 2745, 3477, 584, 2746,
	685, 3474, 2043, 807, 2145, 812, 3472, 3469, 587, 2145,
	3470, 3466, 3463, 179, 3467, 1778, 1432, 3439, 3438, 3437,
	1778, 1778, 1853, 985, 1430, 1431, 2627, 1463, 1464, 1465,
	1473, 1474, 1475, 812, 3434, 3433, 813, 1853, 1853, 1430,
	1431, 3391, 3381, 1466, 2198, 3130, 1622, 2138, 1772, 3380,
	1433, 181, 3130, 2145, 1479, 971, 971, 3374, 999, 3368,
	1778, 793, 3130, 1016, 3392, 1433, 1298, 2044, 3366, 792,
	3329, 3130, 3312, 2198, 2194, 1778, 3309, 1432, 3271, 3130,
	3270, 1778, 179, 1778, 3263, 3262, 1452, 1778, 3130, 974,
	975, 3315, 1432, 1449, 180, 1853, 179, 3234, 1438, 3215,
	1778, 2896, 2198, 3202, 173, 3193, 1853, 1778, 2758, 800,
	910, 2137, 174, 2523, 2524, 3148, 2541, 2542, 2543, 3154,
	181, 3147, 2145, 3129, 2145, 972, 3130, 1021, 1778, 1460,
	1461, 1462, 3052, 149, 181, 2766, 1017, 3056, 2045, 2042,
	2198, 3016, 3010, 2283, 2774, 2774, 886, 2225, 1693, 1455,
	1456, 1457, 1458, 2979, 2916, 1198, 2980, 2917, 2906, 1438,
	2758, 2907, 1002, 180, 2899, 2831, 1501, 2145, 1778, 2819,
	1430, 1431, 2145, 173, 1438, 2538, 2773, 180, 2320, 2774,
	2434, 174, 1453, 1470, 1777, 2765, 1480, 173, 2766, 2223,
	1460, 1461, 1462, 1560, 1177, 174, 1433, 2145, 2165, 1347,
	2523, 2524, 149, 2747, 2164, 1460, 1461, 1462, 2523, 2524,
	2163, 1476, 2698, 1477, 2564, 1853, 149, 2145, 1430, 1431,
	1447, 1448, 2748, 1432, 2562, 2469, 1842, 2145, 1842, 1842,
	2415, 2561, 2162, 2047, 2145, 1468, 2515, 2498, 2487, 2145,
	2499, 2145, 2366, 1453, 1433, 1857, 2211, 1364, 2529, 2145,
	2197, 2192, 2186, 2198, 2145, 1778, 671, 211, 1453, 1713,
	2144, 1478, 2538, 2145, 1856, 2161, 3105, 1857, 179, 976,
	973, 1432, 799, 798, 797, 1454, 1467, 796, 795, 791,
	790, 57, 789, 673, 788, 211, 75, 2523, 2524, 787,
	786, 785, 211, 58, 784, 783, 782, 781, 780, 720,
	2544, 719, 718, 3067, 2745, 1438, 181, 62, 211, 1060,
	211, 211, 1161, 211, 1060, 211, 717, 716, 1459, 715,
	714, 179, 713, 211, 211, 712, 842, 711, 998, 710,
	2041, 1017, 2539, 709, 708, 2529, 1454, 1058, 68, 707,
	1044, 706, 1169, 2529, 1049, 705, 704, 703, 211, 180,
	702, 1454, 2137, 1438, 2203, 701, 700, 1501, 699, 181,
	698, 1471, 211, 697, 1161, 1161, 211, 211, 74, 211,
	1849, 1171, 1840, 1928, 696, 695, 694, 85, 684, 683,
	642, 211, 75, 82, 1460, 1461, 1462, 641, 149, 211,
	600, 2914, 1443, 1441, 1442, 1434, 1435, 1436, 1437, 1439,
	1440, 599, 180, 211, 211, 211, 211, 211, 1161, 1161,
	598, 590, 173, 1161, 589, 211, 1161, 211, 211, 2539,
	174, 588, 2529, 565, 564, 2540, 76, 2539, 563, 562,
	546, 211, 1017, 1032, 201, 200, 1186, 1453, 1191, 199,
	1197, 149, 198, 1469, 2084, 197, 1444, 1445, 1451, 1450,
	1446, 1472, 196, 1443, 1441, 1442, 1434, 1435, 1436, 1437,
	1439, 1440, 195, 2342, 1193, 194, 3077, 1161, 2775, 3076,
	1442, 1434, 1435, 1436, 1437, 1439, 1440, 1029, 1187, 193,
	1053, 192, 1146, 1151, 191, 190, 189, 188, 187, 211,
	179, 186, 185, 184, 1180, 183, 182, 2608, 2492, 2481,
	584, 2298, 211, 2326, 2187, 117, 2539, 1593, 1000, 2178,
	587, 2082, 2540, 1718, 2080, 1179, 1607, 211, 2078, 1319,
	2540, 1307, 1517, 1152, 1315, 1299, 1183, 1175, 181, 1429,
	1454, 1318, 77, 140, 1241, 2535, 2536, 2537, 815, 1051,
	1430, 1431, 2534, 2532, 2533, 2525, 2526, 2527, 2528, 2530,
	2531, 1512, 1006, 1863, 3459, 2769, 1282, 1285, 3440, 813,
	1305, 2076, 3362, 3322, 146, 80, 1433, 81, 1531, 2523,
	2524, 180, 1292, 3318, 1530, 3194, 3253, 179, 1237, 1237,
	3189, 173, 1374, 1365, 1238, 1531, 179, 3316, 3109, 174,
	3087, 1530, 3086, 1432, 3074, 1534, 1512, 3073, 674, 2540,
	1410, 117, 1434, 1435, 1436, 1437, 1439, 1440, 2523, 2524,
	149, 1783, 1529, 1815, 3072, 181, 3071, 3065, 1175, 3064,
	1862, 3063, 2978, 2930, 181, 2929, 2927, 2920, 1192, 2534,
	2532, 2533, 2525, 2526, 2527, 2528, 2530, 2531, 1154, 2533,
	2525, 2526, 2527, 2528, 2530, 2531, 118, 1409, 1441, 1442,
	1434, 1435, 1436, 1437, 1439, 1440, 2890, 2889, 180, 150,
	1499, 2888, 2815, 2811, 2603, 1366, 2558, 180, 173, 2549,
	2522, 2519, 2518, 2516, 1402, 1438, 174, 173, 2327, 2505,
	1513, 1408, 1511, 1781, 1339, 174, 1324, 2504, 2503, 2500,
	1230, 1233, 179, 2497, 1714, 2270, 1415, 149, 3555, 2523,
	2524, 1407, 2475, 2430, 2529, 2474, 672, 2200, 2467, 2367,
	211, 2179, 2051, 1429, 1428, 1405, 2534, 2532, 2533, 2525,
	2526, 2527, 2528, 2530, 2531, 984, 3527, 2024, 2523, 2524,
	181, 2541, 2542, 2543, 1571, 3526, 211, 793, 1562, 813,
	3475, 1005, 1311, 2529, 2840, 792, 211, 1060, 211, 211,
	211, 3429, 3427, 3359, 3356, 3353, 579, 211, 211, 3352,
	1609, 579, 211, 1616, 1411, 1425, 1426, 211, 3351, 3347,
	3341, 1618, 1533, 180, 3188, 1610, 1685, 3313, 843, 1688,
	3308, 2523, 2524, 173, 2541, 2542, 2543, 3307, 2539, 2018,
	2538, 174, 1060, 1331, 179, 3249, 3226, 3199, 3198, 3179,
	3051, 2621, 2584, 3176, 3170, 3104, 3085, 3030, 179, 3027,
	1601, 2957, 2341, 2956, 2945, 2944, 2902, 1581, 2806, 2776,
	1719, 2759, 1568, 1569, 2723, 2692, 1628, 2649, 2671, 1716,
	1586, 2649, 181, 2648, 2529, 1687, 2623, 2325, 2563, 2496,
	2495, 2480, 2458, 2538, 1525, 1526, 181, 140, 1430, 1431,
	1709, 971, 2307, 1535, 1532, 1524, 1521, 1430, 1431, 2207,
	2206, 2182, 2159, 2529, 2143, 2074, 1495, 999, 179, 999,
	1606, 1563, 1559, 1558, 1433, 180, 1557, 827, 1556, 813,
	1613, 2540, 1555, 1433, 1554, 173, 1553, 1552, 1551, 180,
	2545, 1549, 1548, 174, 1598, 2083, 1547, 1546, 1545, 173,
	1544, 1432, 1543, 1542, 1541, 1540, 181, 174, 1539, 1538,
	1432, 1690, 1537, 1611, 149, 2544, 2529, 1161, 211, 1514,
	1561, 1864, 1496, 1494, 1060, 1489, 1028, 1712, 149, 1019,
	1589, 1012, 1588, 584, 1587, 1617, 1595, 1585, 584, 1584,
	1684, 1583, 1544, 587, 3334, 3175, 3106, 2539, 587, 180,
	3060, 2926, 1779, 1704, 1703, 2909, 2905, 1713, 1710, 173,
	1728, 1619, 2081, 211, 211, 2079, 2484, 174, 2544, 2077,
	211, 1002, 2160, 1002, 1436, 1437, 1439, 1440, 3238, 1713,
	211, 1739, 3108, 2523, 2524, 1705, 1602, 2925, 149, 211,
	1614, 211, 1438, 211, 1513, 2619, 1492, 211, 1713, 3319,
	2539, 2525, 2526, 2527, 2528, 2530, 2531, 1048, 1713, 211,
	3354, 2732, 2075, 3317, 1544, 3192, 3149, 2912, 2761, 2760,
	2272, 1743, 3292, 1460, 1461, 1462, 3252, 1691, 1046, 1759,
	2989, 1816, 1761, 1042, 1593, 1766, 2955, 2674, 1400, 1042,
	2540, 1531, 2527, 2528, 2530, 2531, 1799, 1530, 2502, 1161,
	211, 1161, 1707, 1375, 211, 2501, 2043, 1161, 2440, 1047,
	1161, 211, 2257, 211, 211, 1043, 1699, 1519, 1861, 778,
	1042, 1346, 1033, 1161, 1161, 1161, 1453, 211, 1770, 1338,
	3287, 2709, 211, 2708, 1039, 1833, 1824, 1347, 1812, 1180,
	2970, 579, 211, 2540, 211, 584, 211, 3229, 211, 566,
	211, 2959, 2781, 1844, 2686, 587, 1846, 1498, 779, 1848,
	1179, 3530, 1765, 1851, 211, 1776, 1757, 211, 2338, 211,
	2842, 2044, 2059, 2490, 2201, 3460, 2205, 1550, 211, 1527,
	1653, 2525, 2526, 2527, 2528, 2530, 2531, 998, 1831, 998,
	3471, 2701, 1866, 1803, 1654, 1880, 1214, 211, 1793, 1792,
	2535, 2536, 2537, 211, 3468, 2741, 2937, 2534, 2532, 2533,
	2525, 2526, 2527, 2528, 2530, 2531, 1723, 3406, 2995, 1454,
	1724, 1040, 2374, 1060, 1708, 983, 1802, 3501, 1041, 3502,
	2631, 3461, 1826, 3373, 2238, 3140, 1868, 1829, 1202, 772,
	2212, 1328, 2045, 2042, 572, 813, 1305, 637, 1212, 1916,
	770, 1956, 1373, 2535, 2536, 2537, 3552, 3278, 2229, 1935,
	2534, 2532, 2533, 2525, 2526, 2527, 2528, 2530, 2531, 774,
	2227, 1932, 1927, 1914, 3273, 2972, 1039, 768, 1871, 821,
	765, 1736, 1723, 2229, 1700, 1029, 1724, 1628, 1628, 2968,
	1858, 2967, 759, 1774, 2620, 2227, 2030, 2031, 2934, 2933,
	2479, 1870, 1791, 632, 2478, 2477, 2476, 1725, 1060, 1732,
	1048, 2444, 2290, 2282, 2030, 2056, 1372, 1213, 584, 1727,
	1896, 1039, 2279, 2241, 2260, 811, 638, 574, 587, 2193,
	1737, 1738, 1999, 1406, 1176, 1440, 2060, 2047, 811, 1434,
	1435, 1436, 1437, 1439, 1440, 2633, 2070, 2069, 1930, 1957,
	2092, 211, 2096, 2096, 2109, 1933, 2030, 1733, 2334, 2129,
	2131, 1048, 1047, 1040, 2135, 1042, 806, 1000, 3210, 1000,
	1041, 2782, 762, 1725, 631, 1729, 2219, 2259, 1934, 1931,
	1321, 1929, 1060, 211, 1926, 1727, 2673, 1326, 1247, 3372,
	1246, 1925, 211, 793, 1266, 211, 793, 793, 1060, 810,
	1602, 1944, 1371, 2111, 1945, 1946, 1875, 2183, 1040, 1245,
	2185, 1244, 810, 1047, 1889, 1041, 3259, 1010, 1208, 2248,
	3431, 2247, 568, 1830, 2784, 2055, 2184, 1859, 3136, 2014,
	1225, 813, 2783, 1774, 2041, 2412, 1869, 1883, 2047, 2014,
	573, 1729, 1714, 1711, 813, 2180, 1413, 2068, 813, 1877,
	1878, 1879, 2072, 2073, 2026, 1337, 2191, 2166, 1027, 2825,
	2240, 2176, 2177, 2276, 1714, 2270, 1223, 2151, 1730, 812,
	2531, 2053, 2947, 2418, 1924, 1322, 3493, 211, 2059, 2738,
	570, 1009, 812, 1714, 2270, 2523, 2524, 524, 2541, 2542,
	2543, 1210, 971, 1714, 2270, 2022, 1340, 1890, 1225, 2667,
	2020, 2683, 999, 1222, 1723, 2678, 2104, 1042, 1724, 1060,
	2150, 519, 1007, 2120, 211, 1399, 1756, 567, 2195, 2133,
	1741, 630, 211, 629, 1347, 3501, 999, 1953, 1954, 1884,
	140, 2152, 1361, 211, 1730, 692, 813, 2224, 2156, 2157,
	2141, 2142, 1347, 640, 639, 1385, 211, 2538, 3348, 1161,
	633, 1598, 1042, 571, 2047, 2822, 2421, 2630, 3209, 1730,
	3542, 2739, 211, 1060, 569, 2636, 1161, 2258, 211, 211,
	669, 3134, 2239, 3457, 3522, 2958, 2202, 1370, 2230, 1841,
	1885, 2432, 2433, 1362, 1533, 2632, 1739, 1522, 3492, 2617,
	2695, 1653, 1653, 2969, 211, 1725, 211, 754, 2322, 211,
	2228, 2280, 1628, 809, 1726, 1730, 1002, 1727, 3508, 1573,
	2317, 3041, 3220, 3417, 211, 2210, 809, 2738, 2291, 804,
	2529, 211, 3206, 211, 766, 211, 2823, 2254, 2277, 2294,
	1002, 211, 3358, 1915, 211, 766, 211, 1488, 211, 2209,
	211, 211, 2213, 211, 1161, 1161, 1161, 1327, 1161, 2262,
	776, 2420, 211, 211, 775, 211, 211, 1913, 2287, 1525,
	1526, 3166, 767, 1729, 1923, 766, 211, 3389, 1265, 2417,
	1726, 2242, 2244, 2292, 2233, 2300, 1577, 2302, 2349, 211,
	211, 211, 2295, 1739, 211, 2455, 211, 1888, 3135, 211,
	755, 211, 1207, 211, 2250, 3458, 2358, 3260, 2405, 2050,
	2406, 2494, 2948, 591, 2539, 2261, 2155, 2331, 2453, 1580,
	2175, 812, 3174, 2388, 211, 211, 211, 211, 2278, 211,
	2340, 2047, 2340, 2391, 3205, 3491, 3036, 2294, 1575, 2294,
	2271, 2273, 2274, 2275, 2922, 2215, 1022, 2404, 2305, 1180,
	763, 2373, 211, 1578, 1382, 584, 2419, 2217, 1323, 2390,
	1745, 2393, 2394, 2321, 2364, 587, 1730, 3044, 1152, 2446,
	2296, 2362, 2363, 3520, 2351, 1576, 140, 520, 1749, 2013,
	3456, 2423, 998, 1349, 1175, 2395, 2401, 2396, 2344, 2218,
	1504, 1882, 2580, 2661, 1509, 1008, 2355, 1721, 2356, 1412,
	2357, 3455, 2216, 3500, 2359, 1305, 998, 2540, 1336, 2365,
	3387, 1026, 2410, 3498, 3297, 2375, 2416, 693, 2360, 3178,
	2727, 1746, 2329, 2450, 3167, 1325, 1760, 754, 3543, 521,
	1805, 918, 2021, 3207, 2451, 2660, 2663, 2456, 2447, 3388,
	1570, 1383, 3521, 756, 1020, 2472, 2473, 1842, 1015, 804,
	1579, 211, 2263, 511, 2983, 2403, 1421, 3083, 1625, 2665,
	2482, 3042, 1175, 1175, 2407, 2483, 2408, 522, 2409, 523,
	207, 1740, 514, 515, 3523, 530, 514, 530, 540, 545,
	2427, 1701, 561, 2429, 3265, 2281, 3264, 3247, 3537, 1996,
	207, 2424, 1730, 2611, 3338, 1420, 2879, 2936, 2728, 2468,
	1750, 2426, 1726, 1175, 2644, 2664, 2640, 1698, 679, 2330,
	2312, 1384, 207, 592, 593, 2309, 1653, 2535, 2536, 2537,
	755, 2821, 1825, 1768, 2534, 2532, 2533, 2525, 2526, 2527,
	2528, 2530, 2531, 1814, 1813, 1787, 3397, 1175, 2560, 3360,
	1060, 2445, 2579, 1767, 1488, 1920, 757, 1420, 2264, 1694,
	2565, 2147, 3000, 3182, 2574, 2572, 2573, 1940, 1577, 211,
	1751, 1752, 1000, 3139, 2306, 813, 1268, 211, 2571, 1747,
	3138, 1763, 3285, 1696, 211, 2593, 2452, 211, 211, 1060,
	2361, 3283, 758, 1419, 3248, 2454, 1000, 2651, 1060, 1697,
	2190, 1580, 1737, 1738, 211, 1876, 2650, 1748, 2904, 3084,
	2489, 2598, 595, 594, 2438, 514, 514, 2601, 2615, 211,
	2153, 2577, 1573, 207, 1421, 2576, 2609, 2149, 1994, 1764,
	2588, 1997, 2148, 2626, 1363, 1578, 2189, 211, 211, 211,
	2599, 2600, 2880, 211, 3536, 1419, 211, 2587, 2881, 1350,
	2569, 1253, 2188, 211, 211, 211, 211, 211, 2594, 2586,
	1251, 2607, 596, 597, 2628, 2582, 2602, 1941, 2589, 211,
	211, 211, 691, 756, 689, 1628, 2319, 2634, 211, 2606,
	1993, 2583, 2555, 2556, 2557, 999, 810, 1239, 2566, 1577,
	211, 1161, 1753, 211, 2637, 2638, 3361, 2265, 2266, 2592,
	999, 1060, 3343, 2653, 1240, 2657, 2658, 2641, 2581, 1060,
	2652, 1628, 2655, 682, 211, 3158, 2770, 211, 211, 2596,
	3255, 1823, 1580, 3137, 2697, 2597, 2676, 211, 3505, 999,
	1161, 211, 1579, 1161, 1161, 1161, 3281, 2609, 2613, 2614,
	211, 1575, 3245, 3089, 2624, 2625, 211, 2612, 3400, 2677,
	2712, 3344, 211, 2894, 211, 1754, 1578, 802, 2064, 754,
	1397, 211, 2629, 1379, 2668, 2669, 2063, 1377, 2670, 3507,
	1360, 2635, 2684, 1358, 3246, 2706, 757, 1356, 1576, 1354,
	1352, 804, 3473, 3355, 1161, 1161, 3225, 1344, 1342, 1002,
	1249, 3082, 211, 211, 2595, 2666, 211, 2689, 2690, 3256,
	1912, 2691, 1728, 1161, 1002, 2672, 1995, 2743, 2679, 2388,
	2974, 2693, 758, 3401, 2734, 2552, 3345, 803, 2388, 2682,
	2716, 3153, 2688, 2553, 2805, 2779, 211, 1728, 1060, 211,
	211, 1060, 211, 1002, 2694, 2517, 2457, 2262, 2316, 2289,
	2256, 2208, 1608, 1605, 1398, 1252, 2751, 2752, 2753, 211,
	2754, 2755, 755, 1579, 1250, 1316, 1169, 806, 2687, 1058,
	1770, 2414, 2413, 2398, 1922, 1893, 690, 1686, 1770, 2757,
	1536, 1320, 2680, 1229, 687, 688, 2681, 3451, 3146, 1625,
	1625, 764, 1175, 3394, 2756, 2740, 2768, 3113, 2790, 2833,
	2998, 2772, 1060, 2777, 2749, 2742, 140, 2953, 813, 1423,
	2951, 2789, 1802, 1060, 2935, 211, 2730, 2808, 2726, 1396,
	2711, 2733, 1378, 680, 681, 2618, 1376, 2710, 1614, 1359,
	2830, 2335, 1357, 2324, 2323, 2303, 1355, 1855, 1353, 1351,
	1854, 2836, 2778, 1852, 1850, 1628, 1343, 1341, 1847, 1248,
	1845, 1843, 1834, 1784, 1782, 1771, 1911, 1758, 1755, 2817,
	2818, 2645, 1742, 1731, 2786, 998, 3301, 2436, 1013, 1615,
	3502, 3423, 3201, 2791, 980, 3196, 3195, 2793, 2389, 1717,
	998, 1204, 3303, 2246, 3009, 2229, 1739, 2229, 2229, 1653,
	2891, 1394, 1395, 1424, 1628, 1628, 1023, 2227, 981, 2245,
	2243, 1886, 1910, 561, 2787, 756, 1909, 1891, 211, 998,
	1628, 1628, 2813, 769, 771, 1430, 1431, 3350, 3324, 207,
	3090, 207, 207, 211, 1166, 1653, 207, 2685, 2832, 1060,
	2267, 2843, 2249, 2839, 207, 1182, 2848, 1427, 2845, 525,
	2437, 1628, 2846, 2284, 2913, 2286, 2023, 2844, 211, 2253,
	2856, 2251, 2858, 2294, 1175, 2883, 2285, 2921, 3393, 1206,
	2252, 2908, 2931, 3363, 2987, 1504, 2717, 2982, 1432, 2719,
	2720, 2721, 2919, 1228, 2824, 2826, 2827, 207, 207, 2343,
	1166, 2884, 982, 1430, 1431, 536, 2134, 1689, 1620, 3518,
	2616, 2892, 207, 3535, 211, 2523, 2524, 3365, 2900, 2901,
	1264, 2895, 2960, 140, 2897, 2898, 801, 1330, 757, 1433,
	1430, 1431, 2116, 1329, 207, 207, 207, 207, 1166, 1501,
	2763, 2764, 2067, 2971, 2221, 2220, 561, 2924, 207, 207,
	211, 211, 211, 999, 999, 2915, 1432, 2828, 2221, 1774,
	2622, 2222, 679, 2071, 758, 1000, 2065, 1060, 211, 2038,
	1381, 3061, 1161, 1380, 2923, 2820, 2952, 1499, 2954, 1497,
	1000, 3544, 2964, 3335, 3239, 3237, 211, 3169, 3107, 3033,
	3026, 2928, 3015, 2939, 2993, 2977, 2976, 2975, 3011, 211,
	211, 1161, 1161, 1161, 3002, 211, 211, 211, 2950, 1000,
	211, 211, 2750, 1628, 211, 211, 2724, 1161, 2722, 2990,
	207, 2400, 2399, 211, 1625, 3005, 2353, 2328, 2973, 2304,
	3006, 2025, 1908, 207, 2986, 1907, 1060, 1906, 2262, 2965,
	2966, 1905, 1837, 2349, 3001, 2991, 1836, 1835, 545, 1817,
	1795, 1794, 1790, 1789, 1953, 2849, 1788, 1002, 1002, 1786,
	1785, 2992, 1414, 3059, 1393, 1392, 1277, 1276, 1275, 1653,
	1953, 2859, 2388, 1274, 1273, 1272, 1271, 2996, 3003, 1270,
	3012, 211, 3007, 1269, 1267, 3055, 3013, 1262, 2569, 1261,
	1260, 1259, 1258, 3023, 3024, 3022, 1221, 3018, 3046, 3025,
	1220, 2887, 3031, 3028, 3017, 3032, 3029, 1219, 1218, 1217,
	1216, 1215, 1209, 1628, 1203, 1201, 3043, 1200, 1653, 1653,
	1025, 1024, 3035, 999, 3038, 955, 865, 1692, 777, 624,
	761, 3258, 1387, 3034, 1653, 1653, 73, 1211, 611, 67,
	2949, 3405, 2659, 211, 1892, 1348, 3047, 1894, 2585, 2158,
	3386, 1943, 3068, 1060, 2493, 1060, 3330, 3095, 3219, 2062,
	1518, 69, 853, 938, 1802, 1653, 3165, 3164, 3114, 2938,
	2378, 3162, 3161, 820, 211, 211, 211, 1063, 1702, 859,
	1715, 3081, 2204, 3102, 2095, 1624, 211, 862, 1626, 864,
	863, 1627, 211, 1520, 211, 861, 1623, 211, 211, 211,
	3133, 3127, 2318, 2347, 1256, 742, 1706, 2019, 211, 211,
	1161, 3143, 3144, 1060, 2057, 1161, 2488, 1515, 833, 855,
	3132, 211, 2054, 998, 998, 3094, 1018, 1002, 3124, 3103,
	3099, 3110, 3111, 3097, 3092, 3093, 211, 3098, 3091, 1060,
	3112, 514, 1161, 3142, 2606, 832, 3096, 3131, 2590, 3141,
	2737, 2918, 3187, 2645, 1939, 2428, 1936, 627, 2520, 2039,
	1011, 2117, 207, 3100, 207, 2110, 2106, 207, 1401, 1490,
	3125, 211, 2348, 999, 3184, 1050, 836, 1182, 3159, 1166,
	207, 999, 1060, 2017, 2112, 3200, 3150, 207, 1182, 530,
	1506, 3151, 207, 1182, 999, 2462, 3160, 3186, 561, 3172,
	3171, 2744, 2604, 3197, 2199, 3420, 1947, 1804, 1060, 979,
	1058, 978, 977, 3185, 3183, 3411, 3408, 1653, 2704, 3191,
	1695, 2214, 1482, 3155, 2713, 3168, 849, 3019, 3020, 3021,
	3173, 3156, 1572, 1174, 2570, 2771, 3217, 1226, 3349, 1481,
	773, 3231, 3340, 1037, 1036, 1035, 1060, 2643, 3541, 3180,
	2946, 3211, 3208, 3190, 211, 178, 211, 175, 1060, 211,
	177, 2010, 176, 2962, 3227, 2696, 90, 211, 35, 16,
	3216, 116, 115, 114, 3217, 113, 112, 1002, 111, 110,
	109, 108, 107, 106, 2008, 1002, 1956, 105, 3242, 211,
	2116, 2116, 1628, 998, 104, 3232, 3233, 103, 1002, 102,
	101, 100, 99, 1000, 1000, 3241, 98, 211, 97, 96,
	95, 211, 94, 3120, 3235, 93, 3121, 1653, 3240, 211,
	92, 1802, 91, 557, 1161, 3284, 554, 3289, 49, 211,
	48, 3236, 3261, 3276, 89, 88, 15, 33, 13, 53,
	54, 12, 1867, 3302, 28, 29, 79, 1628, 78, 207,
	211, 211, 3294, 27, 3123, 3296, 3299, 3274, 14, 26,
	3282, 24, 3268, 3269, 10, 3288, 3126, 8, 2706, 7,
	211, 30, 1582, 3305, 3310, 3311, 211, 1625, 11, 145,
	3293, 144, 3005, 819, 3300, 72, 211, 3304, 143, 2004,
	71, 2116, 2116, 2116, 207, 207, 3298, 2005, 142, 141,
	2006, 207, 70, 2011, 3337, 3328, 3346, 3321, 22, 9,
	137, 1822, 3290, 1625, 2988, 66, 139, 138, 63, 3336,
	207, 136, 207, 135, 207, 64, 3306, 3323, 514, 3333,
	134, 133, 65, 1628, 3314, 3357, 3152, 132, 211, 1161,
	1838, 2523, 2524, 998, 211, 20, 5, 52, 1161, 1161,
	6, 998, 3203, 2780, 1161, 3379, 83, 84, 211, 31,
	211, 61, 60, 59, 998, 3364, 3122, 19, 51, 3367,
	18, 3370, 3384, 1000, 3385, 3390, 169, 3371, 168, 167,
	166, 561, 211, 161, 160, 679, 165, 3383, 211, 211,
	3402, 1060, 207, 3375, 1166, 207, 3293, 3376, 163, 211,
	211, 162, 3403, 164, 3414, 159, 131, 3418, 561, 171,
	170, 3424, 3426, 207, 3428, 157, 153, 3410, 3413, 1956,
	152, 3407, 207, 207, 156, 207, 3436, 207, 3435, 207,
	158, 207, 155, 211, 154, 151, 172, 130, 3415, 3432,
	56, 3430, 2007, 129, 3462, 1917, 128, 127, 1918, 126,
	1919, 2009, 3447, 3448, 125, 55, 3450, 3422, 17, 207,
	3449, 2, 1, 1175, 3377, 3378, 0, 0, 3478, 0,
	3382, 3464, 211, 0, 0, 3480, 2529, 3482, 545, 3487,
	0, 0, 0, 0, 561, 3488, 3479, 3267, 3490, 0,
	0, 0, 211, 3484, 0, 0, 1653, 0, 0, 0,
	0, 0, 0, 3481, 0, 3483, 3425, 0, 0, 0,
	3496, 0, 3499, 3497, 0, 0, 211, 0, 211, 0,
	3504, 3503, 3506, 1000, 3512, 3510, 3514, 0, 0, 2349,
	3509, 1000, 3517, 3410, 3511, 0, 3413, 1625, 3516, 0,
	0, 0, 2112, 2112, 1000, 0, 0, 0, 0, 0,
	3525, 1653, 3524, 0, 0, 0, 0, 3532, 0, 3531,
	2539, 3533, 0, 3534, 0, 3485, 3486, 3538, 0, 3489,
	0, 0, 0, 0, 0, 3422, 0, 3539, 3540, 0,
	3545, 3127, 3546, 0, 0, 0, 1625, 1625, 0, 3549,
	3550, 3551, 3553, 3554, 0, 0, 0, 0, 0, 0,
	0, 3558, 1625, 1625, 0, 0, 3556, 0, 3124, 0,
	0, 3117, 0, 0, 0, 0, 1430, 1431, 0, 0,
	0, 0, 0, 2116, 2116, 3115, 0, 0, 0, 0,
	0, 3119, 514, 1625, 0, 0, 0, 1653, 0, 0,
	0, 0, 1433, 2112, 2112, 2112, 0, 207, 0, 0,
	3125, 0, 0, 2540, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 514, 0, 2459, 2460, 0, 1432,
	0, 207, 0, 514, 0, 0, 207, 0, 1452, 0,
	0, 3118, 0, 0, 0, 0, 0, 0, 0, 819,
	0, 0, 0, 819, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
	2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116,
	2116, 2116, 0, 2116, 3050, 1184, 0, 1188, 0, 1194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1455, 1456, 1457, 1458, 0, 0, 0, 0, 0,
	0, 1438, 0, 0, 0, 0, 0, 0, 530, 0,
	0, 0, 0, 0, 0, 0, 0, 2546, 2547, 2548,
	0, 2532, 2533, 2525, 2526, 2527, 2528, 2530, 2531, 0,
	0, 0, 1460, 1461, 1462, 1625, 0, 0, 0, 0,
	0, 0, 0, 3120, 0, 2237, 3121, 0, 0, 0,
	0, 0, 0, 207, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1314, 207, 0, 0, 0, 0, 0,
	1317, 0, 0, 0, 0, 0, 0, 207, 0, 0,
	0, 0, 0, 0, 3123, 1453, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 0, 3126, 0, 0, 207,
	2297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1367, 207, 0, 1182, 0, 0,
	207, 0, 209, 0, 0, 1625, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1822, 0, 0, 0, 0,
	0, 0, 2237, 0, 514, 0, 2352, 0, 0, 0,
	1459, 0, 207, 0, 0, 207, 0, 207, 0, 207,
	0, 207, 207, 0, 1166, 0, 0, 0, 1454, 0,
	0, 0, 0, 2371, 679, 0, 2237, 2237, 0, 0,
	0, 0, 0, 0, 0, 0, 3122, 207, 0, 0,
	0, 0, 0, 0, 0, 1483, 1484, 1485, 1486, 1487,
	207, 1166, 207, 0, 0, 1182, 0, 1182, 0, 0,
	1166, 0, 1166, 0, 1166, 2112, 2112, 0, 0, 0,
	0, 0, 0, 0, 0, 1503, 0, 0, 0, 0,
	0, 1516, 0, 0, 0, 207, 207, 1166, 207, 0,
	207, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 831, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1443, 1441, 1442, 1434, 1435,
	1436, 1437, 1439, 1440, 0, 2112, 2112, 2112, 2112, 2112,
	2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
	2112, 2112, 2112, 2112, 0, 2112, 0, 0, 0, 0,
	0, 0, 2523, 2524, 0, 2541, 2542, 2543, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2801,
	2802, 2810, 0, 0, 0, 0, 0, 0, 1430, 1431,
	1566, 1566, 1566, 0, 1473, 1474, 1475, 0, 0, 0,
	0, 0, 1182, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1433, 0, 0, 0, 1479, 0,
	0, 0, 0, 0, 2538, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1432, 0, 0, 1625, 0, 0, 0, 0, 0,
	1452, 0, 0, 0, 0, 0, 0, 0, 819, 2860,
	2861, 2862, 2863, 2864, 2865, 2866, 2867, 2868, 2869, 2870,
	2871, 2872, 2873, 2874, 2875, 2876, 2877, 2878, 0, 2882,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 0, 0, 0, 0, 0, 0, 2529, 0, 1625,
	0, 0, 0, 0, 0, 207, 0, 0, 0, 0,
	514, 0, 0, 1455, 1456, 1457, 1458, 0, 514, 0,
	0, 0, 0, 1438, 0, 514, 0, 0, 514, 514,
	0, 0, 0, 0, 207, 0, 0, 0, 0, 0,
	2116, 0, 0, 0, 0, 1182, 0, 1470, 0, 2544,
	1480, 0, 0, 0, 1460, 1461, 1462, 0, 0, 0,
	1182, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2523, 2524, 0, 2541, 2542, 2543, 0, 0, 2237, 2237,
	207, 2539, 0, 2116, 2237, 1625, 0, 2647, 0, 2809,
	0, 0, 0, 0, 2237, 2647, 2237, 2647, 2647, 1468,
	0, 0, 0, 0, 0, 0, 0, 1453, 0, 0,
	207, 207, 207, 0, 1430, 1431, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 2538, 0, 1166, 0, 0, 0, 0, 0,
	1433, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2700, 0, 0, 2702, 2237,
	0, 0, 0, 0, 0, 0, 0, 1432, 207, 0,
	0, 0, 207, 0, 2540, 0, 1452, 0, 0, 0,
	0, 207, 1459, 2116, 0, 0, 0, 1166, 0, 0,
	0, 0, 0, 2237, 0, 514, 0, 0, 0, 0,
	1454, 0, 2237, 0, 0, 2529, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 831,
	0, 0, 2804, 831, 0, 1471, 0, 0, 0, 0,
	0, 1144, 0, 207, 1822, 0, 1144, 1822, 0, 1455,
	1456, 1457, 1458, 0, 0, 0, 0, 0, 0, 1438,
	0, 0, 0, 0, 0, 0, 0, 2544, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2785, 0, 0,
	1166, 207, 0, 207, 0, 0, 0, 0, 0, 0,
	1460, 1461, 1462, 0, 2535, 2536, 2537, 0, 0, 2539,
	207, 2534, 2532, 2533, 2525, 2526, 2527, 2528, 2530, 2531,
	0, 0, 0, 0, 0, 0, 0, 1469, 0, 0,
	0, 0, 0, 0, 0, 1472, 0, 1443, 1441, 1442,
	1434, 1435, 1436, 1437, 1439, 1440, 0, 0, 0, 0,
	0, 0, 1937, 1453, 1942, 0, 0, 0, 0, 0,
	1949, 0, 0, 0, 0, 0, 2841, 1958, 1959, 1960,
	1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970,
	1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980,
	1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990,
	1991, 1992, 2540, 1998, 0, 2000, 2001, 2002, 2003, 0,
	0, 0, 2112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2027, 0, 0, 1459, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1503, 0, 0, 0, 2052, 0, 1454, 0, 207, 207,
	0, 0, 0, 0, 0, 2112, 0, 0, 0, 514,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 514, 2085, 2086, 2087, 2088, 2089,
	2090, 2091, 0, 0, 0, 0, 2108, 0, 2119, 2121,
	2126, 0, 0, 0, 0, 0, 0, 0, 0, 1182,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2535, 2536, 2537, 0, 0, 0, 0, 2534,
	2532, 2533, 2525, 2526, 2527, 2528, 2530, 2531, 0, 0,
	0, 0, 0, 0, 0, 0, 3224, 0, 0, 0,
	0, 0, 0, 0, 0, 561, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2112, 0, 0, 0, 0,
	0, 0, 0, 1443, 1441, 1442, 1434, 1435, 1436, 1437,
	1439, 1440, 0, 0, 0, 0, 0, 0, 0, 3250,
	0, 2984, 207, 207, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	57, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 58, 0, 0, 0, 0, 2237, 207, 0,
	0, 0, 0, 0, 0, 0, 62, 0, 0, 0,
	2371, 2371, 0, 0, 0, 0, 679, 679, 2237, 0,
	0, 1822, 1822, 0, 0, 679, 2237, 0, 0, 0,
	0, 0, 0, 0, 207, 0, 0, 68, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3327,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 1144,
	0, 0, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 75, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3069, 0, 2299, 0, 2301, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 831, 0,
	0, 0, 0, 0, 1144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 0,
	0, 0, 0, 0, 1182, 0, 207, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 124, 0, 0, 2237, 2237, 2237, 57, 0,
	0, 0, 0, 0, 0, 0, 0, 1182, 0, 0,
	58, 119, 0, 2237, 0, 2647, 0, 0, 1182, 1182,
	207, 0, 0, 2196, 62, 0, 0, 0, 0, 207,
	207, 0, 0, 2411, 0, 0, 1430, 1431, 0, 39,
	121, 77, 2237, 0, 0, 0, 0, 919, 0, 0,
	0, 0, 0, 38, 0, 68, 1144, 3177, 0, 0,
	0, 0, 1433, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 80, 41, 81, 0, 0, 0,
	42, 0, 0, 0, 0, 74, 208, 0, 122, 1432,
	0, 0, 1182, 40, 85, 179, 0, 0, 1452, 75,
	82, 0, 0, 0, 0, 0, 208, 674, 0, 0,
	117, 0, 0, 0, 0, 0, 2442, 2443, 0, 0,
	0, 0, 2449, 0, 0, 0, 43, 0, 208, 0,
	0, 0, 0, 181, 0, 0, 0, 0, 0, 0,
	0, 2463, 2464, 76, 2799, 0, 0, 2052, 0, 0,
	0, 0, 0, 0, 0, 118, 2471, 0, 0, 0,
	0, 1455, 1456, 1457, 1458, 0, 0, 0, 150, 0,
	0, 1438, 0, 0, 0, 2237, 180, 2647, 0, 0,
	3244, 0, 2491, 0, 0, 0, 173, 0, 207, 0,
	0, 0, 0, 0, 174, 0, 0, 2506, 0, 0,
	0, 0, 1460, 1461, 1462, 0, 0, 0, 0, 0,
	561, 0, 0, 0, 0, 149, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3244, 0,
	0, 0, 2237, 0, 0, 0, 0, 0, 0, 0,
	207, 0, 0, 0, 0, 2126, 2126, 2126, 0, 77,
	1182, 0, 0, 0, 0, 1453, 0, 44, 0, 0,
	1566, 0, 2523, 2524, 0, 2541, 2542, 2543, 2575, 0,
	0, 207, 207, 0, 0, 0, 0, 0, 0, 0,
	47, 146, 80, 0, 81, 0, 45, 0, 0, 0,
	123, 2841, 0, 0, 0, 0, 46, 514, 0, 0,
	0, 0, 0, 179, 0, 1144, 0, 3244, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 117, 0,
	0, 0, 0, 0, 2538, 0, 0, 120, 0, 0,
	1459, 0, 0, 819, 0, 0, 0, 0, 0, 0,
	0, 181, 0, 0, 0, 0, 819, 0, 1454, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 0, 0, 118, 0, 2647, 0, 0, 0, 0,
	0, 2662, 0, 0, 0, 0, 150, 0, 0, 1182,
	0, 1182, 0, 0, 180, 0, 0, 0, 0, 0,
	1144, 0, 0, 0, 173, 0, 0, 2529, 0, 0,
	0, 0, 174, 3398, 0, 0, 0, 0, 0, 1182,
	207, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 2237, 0, 149, 0, 0, 3, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2544,
	0, 0, 0, 0, 2841, 0, 0, 0, 0, 0,
	0, 2735, 0, 0, 1144, 1443, 1441, 1442, 1434, 1435,
	1436, 1437, 1439, 1440, 0, 0, 0, 0, 0, 0,
	1144, 2539, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2237, 57, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 58, 0, 0, 0,
	0, 0, 0, 3244, 0, 0, 0, 0, 0, 0,
	62, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1182, 0, 2237,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 68, 0, 2792, 0, 0, 0, 1949, 0, 0,
	0, 0, 0, 2796, 2797, 0, 0, 2800, 0, 0,
	0, 2803, 0, 0, 2540, 0, 0, 0, 0, 0,
	2807, 74, 0, 0, 0, 0, 0, 0, 0, 2814,
	85, 1144, 2575, 0, 0, 75, 82, 0, 0, 0,
	0, 1430, 1431, 0, 1463, 1464, 1465, 1473, 1474, 1475,
	0, 0, 0, 2834, 0, 208, 1065, 208, 208, 1065,
	1466, 1065, 208, 0, 0, 0, 0, 1433, 0, 0,
	208, 1479, 2850, 2851, 0, 2852, 2853, 2854, 0, 76,
	2855, 0, 0, 0, 2857, 1144, 0, 0, 0, 0,
	0, 0, 0, 0, 1432, 0, 0, 0, 0, 0,
	0, 0, 0, 1452, 0, 0, 0, 0, 0, 0,
	1449, 1065, 1065, 208, 208, 2885, 2886, 0, 0, 0,
	1430, 1431, 0, 0, 2535, 2536, 2537, 0, 208, 0,
	0, 2534, 2532, 2533, 2525, 2526, 2527, 2528, 2530, 2531,
	0, 0, 0, 2903, 0, 0, 1433, 0, 0, 0,
	208, 208, 208, 208, 0, 1065, 1065, 0, 0, 0,
	1065, 0, 0, 1065, 208, 208, 1455, 1456, 1457, 1458,
	0, 0, 0, 1432, 0, 0, 1438, 0, 0, 0,
	0, 0, 1452, 0, 0, 77, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2932, 0, 0, 0,
	1470, 0, 0, 1480, 0, 0, 0, 1460, 1461, 1462,
	0, 2940, 2943, 0, 1065, 0, 0, 146, 80, 0,
	81, 0, 0, 0, 0, 0, 0, 0, 1476, 0,
	1477, 0, 0, 0, 0, 2961, 208, 1447, 1448, 179,
	0, 57, 0, 0, 0, 1455, 1456, 1457, 1458, 208,
	0, 674, 1468, 58, 117, 1438, 0, 0, 0, 0,
	1453, 0, 0, 0, 0, 885, 0, 62, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 181, 1478, 0,
	0, 0, 0, 0, 0, 0, 1460, 1461, 1462, 0,
	0, 0, 0, 1467, 0, 0, 0, 0, 68, 118,
	0, 1566, 0, 0, 206, 0, 0, 0, 0, 0,
	3014, 0, 150, 0, 0, 0, 0, 0, 0, 0,
	180, 0, 0, 0, 585, 0, 0, 0, 74, 0,
	173, 0, 0, 0, 0, 1459, 0, 85, 174, 1453,
	0, 0, 75, 82, 0, 0, 585, 0, 0, 0,
	0, 0, 0, 1454, 0, 0, 0, 0, 0, 149,
	0, 3048, 3049, 0, 0, 0, 0, 3053, 3054, 0,
	0, 0, 3057, 3058, 0, 0, 0, 0, 1471, 3062,
	0, 0, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3066, 0,
	0, 0, 0, 0, 0, 3070, 0, 0, 0, 0,
	0, 0, 0, 0, 1459, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1454, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1001, 0, 0,
	0, 0, 1144, 0, 0, 0, 0, 0, 0, 0,
	1469, 0, 0, 1444, 1445, 1451, 1450, 1446, 1472, 0,
	1443, 1441, 1442, 1434, 1435, 1436, 1437, 1439, 1440, 0,
	0, 0, 0, 208, 0, 212, 3075, 0, 0, 0,
	0, 1144, 77, 0, 1065, 0, 208, 208, 0, 0,
	1144, 0, 0, 208, 0, 0, 0, 2943, 208, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 831, 146, 80, 0, 81, 0, 0,
	0, 0, 0, 0, 0, 0, 831, 0, 0, 1065,
	0, 0, 0, 0, 578, 0, 179, 0, 0, 1443,
	1441, 1442, 1434, 1435, 1436, 1437, 1439, 1440, 674, 0,
	0, 117, 0, 0, 0, 0, 578, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 181, 0, 0, 0, 0, 0,
	2943, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1430, 1431, 0, 1144, 0, 0, 118, 0, 0, 0,
	0, 1144, 0, 3212, 3213, 3214, 0, 0, 0, 150,
	0, 0, 0, 0, 0, 0, 1433, 180, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 173, 3222, 3223,
	0, 0, 0, 0, 0, 174, 0, 0, 0, 0,
	0, 0, 3230, 1432, 0, 0, 0, 0, 0, 0,
	0, 0, 1452, 0, 1065, 208, 1308, 0, 0, 0,
	0, 1065, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2943, 0, 0, 0, 0, 0, 0,
	0, 3266, 0, 0, 0, 0, 0, 0, 2798, 3272,
	208, 208, 819, 0, 0, 0, 3277, 208, 0, 0,
	0, 0, 0, 0, 0, 1455, 1456, 1457, 1458, 0,
	1144, 0, 0, 1144, 0, 1438, 208, 0, 208, 2943,
	208, 0, 2943, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2943, 2943, 0, 0, 0, 1460, 1461, 1462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1144, 0, 1065, 0, 1065, 0,
	0, 0, 0, 0, 1065, 1144, 0, 1065, 208, 0,
	0, 208, 3339, 0, 0, 3342, 0, 0, 0, 1453,
	1065, 1065, 1065, 0, 0, 0, 0, 0, 0, 208,
	0, 0, 0, 206, 0, 206, 206, 0, 208, 208,
	206, 208, 0, 208, 0, 208, 0, 208, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 208, 0, 0, 0, 0,
	0, 0, 0, 1430, 1431, 0, 0, 0, 0, 0,
	0, 206, 206, 0, 1459, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 206, 0, 0, 1433,
	0, 0, 1454, 0, 0, 0, 0, 819, 0, 0,
	1065, 1144, 0, 0, 0, 0, 0, 0, 206, 206,
	206, 206, 0, 0, 0, 0, 1432, 0, 0, 0,
	0, 0, 206, 206, 0, 1452, 0, 0, 0, 0,
	3446, 3446, 3446, 0, 0, 0, 0, 0, 0, 1430,
	1431, 0, 0, 0, 0, 0, 0, 0, 0, 3465,
	0, 0, 0, 0, 0, 889, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1433, 0, 0, 0, 0,
	2943, 2448, 2943, 0, 0, 0, 0, 854, 87, 0,
	0, 0, 0, 0, 0, 1065, 3446, 0, 1455, 1456,
	1457, 1458, 1432, 0, 206, 0, 0, 0, 1438, 0,
	0, 1452, 0, 0, 0, 0, 0, 206, 0, 1443,
	1441, 1442, 1434, 1435, 1436, 1437, 1439, 1440, 0, 1144,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1460,
	1461, 1462, 0, 0, 1061, 0, 0, 1162, 0, 1061,
	0, 0, 0, 0, 0, 0, 0, 2441, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 1065,
	0, 3446, 0, 0, 1455, 1456, 1457, 1458, 0, 0,
	0, 0, 208, 0, 1438, 1065, 0, 0, 0, 0,
	0, 0, 1453, 0, 0, 0, 0, 0, 1144, 1162,
	1162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1460, 1461, 1462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 794, 0,
	0, 0, 0, 0, 0, 0, 0, 814, 0, 0,
	0, 0, 0, 1162, 1162, 0, 0, 0, 1162, 0,
	0, 1162, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1459, 1453, 989,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1065, 0, 0, 0,
	0, 0, 1162, 0, 0, 0, 0, 0, 0, 208,
	0, 0, 0, 0, 0, 1144, 0, 1144, 0, 0,
	208, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 1065, 0, 0, 0,
	0, 0, 0, 1459, 0, 0, 1596, 0, 1001, 208,
	1065, 206, 0, 1065, 0, 208, 0, 0, 0, 0,
	0, 1454, 0, 0, 206, 1596, 0, 0, 0, 0,
	0, 585, 0, 0, 0, 1144, 585, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1144, 1443, 1441, 1442, 1434, 1435, 1436, 1437, 1439,
	1440, 0, 0, 0, 0, 0, 0, 0, 208, 0,
	0, 208, 0, 208, 0, 208, 0, 208, 208, 0,
	0, 1065, 1065, 1065, 0, 1065, 0, 0, 0, 0,
	0, 0, 0, 0, 1144, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 208, 0, 208, 0,
	1144, 0, 0, 0, 0, 0, 0, 0, 1443, 1441,
	1442, 1434, 1435, 1436, 1437, 1439, 1440, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 208, 0, 208, 0, 208, 0, 1144, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1144, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	0, 0, 0, 585, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 831, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 206,
	0, 0, 1061, 0, 0, 206, 0, 0, 0, 0,
	0, 578, 0, 0, 0, 0, 578, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 206, 0, 206, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1061, 0, 0,
	0, 0, 0, 0, 1062, 0, 0, 1163, 0, 1062,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 661,
	0, 0, 0, 0, 0, 0, 206, 0, 0, 206,
	0, 87, 0, 87, 0, 87, 0, 0, 0, 1163,
	1163, 0, 643, 0, 0, 0, 0, 206, 0, 0,
	0, 0, 0, 0, 0, 0, 585, 206, 0, 206,
	0, 206, 0, 206, 0, 206, 0, 1065, 0, 0,
	0, 0, 0, 644, 0, 0, 0, 0, 0, 0,
	0, 0, 645, 1163, 1163, 0, 0, 0, 1163, 0,
	0, 1163, 0, 206, 0, 0, 0, 0, 646, 0,
	0, 0, 1162, 1144, 0, 0, 1065, 831, 0, 1061,
	814, 87, 0, 0, 666, 1065, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 647,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1163, 0, 0, 0, 0, 648, 0, 0,
	0, 0, 0, 0, 0, 0, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 649, 0, 0,
	650, 0, 994, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 208, 208, 208, 0,
	0, 0, 0, 0, 0, 208, 0, 665, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 208, 1065, 0,
	0, 202, 0, 0, 0, 0, 0, 0, 1065, 0,
	0, 0, 0, 0, 0, 0, 1065, 0, 0, 0,
	0, 0, 0, 0, 1162, 0, 1162, 0, 0, 0,
	0, 0, 1162, 0, 208, 1162, 0, 1065, 208, 0,
	1065, 1065, 1065, 0, 794, 0, 0, 208, 1162, 1162,
	1162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1493, 0, 0, 0, 578, 0, 0, 0,
	0, 1001, 0, 0, 0, 0, 0, 0, 0, 652,
	1502, 0, 0, 0, 1508, 0, 0, 0, 0, 0,
	0, 1065, 1065, 0, 0, 1001, 669, 653, 0, 208,
	206, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1065, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 668, 0, 0, 0, 0, 0,
	0, 654, 0, 0, 655, 1065, 0, 208, 1065, 208,
	663, 0, 0, 0, 0, 0, 0, 656, 1061, 0,
	0, 0, 0, 0, 0, 0, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 657, 664, 0, 0,
	0, 0, 0, 0, 658, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 660, 0, 0, 1065,
	0, 659, 0, 0, 0, 0, 0, 0, 0, 0,
	1065, 0, 1062, 667, 0, 87, 0, 0, 1594, 0,
	1597, 0, 0, 0, 662, 0, 0, 206, 0, 0,
	0, 0, 0, 1061, 0, 0, 0, 0, 206, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 206, 721, 0, 754, 0, 0, 1062, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 206, 0, 0,
	0, 0, 0, 585, 0, 0, 728, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 739, 726,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 206,
	0, 0, 0, 0, 206, 0, 0, 1061, 0, 0,
	0, 0, 727, 0, 0, 0, 0, 729, 0, 0,
	0, 760, 0, 1061, 0, 0, 1065, 0, 736, 737,
	0, 0, 0, 0, 748, 0, 206, 0, 0, 206,
	0, 206, 0, 206, 0, 206, 206, 755, 731, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 206, 0, 0, 753, 0, 0, 0, 0, 0,
	0, 0, 1163, 0, 206, 0, 206, 0, 0, 1062,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 732, 0, 0, 0,
	0, 0, 0, 0, 725, 0, 0, 0, 0, 206,
	206, 0, 206, 0, 206, 0, 0, 0, 208, 208,
	733, 734, 0, 0, 1061, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1065, 208, 0, 206, 0, 1065,
	0, 0, 741, 740, 0, 0, 0, 0, 0, 0,
	735, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1162, 759, 0, 0, 1065, 1065,
	1065, 0, 0, 0, 0, 0, 0, 0, 1061, 0,
	756, 1162, 0, 0, 1065, 0, 0, 0, 0, 0,
	208, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1065, 1163, 0, 1163, 0, 0, 0,
	0, 0, 1163, 0, 0, 1163, 730, 0, 0, 0,
	1055, 0, 0, 0, 0, 0, 814, 1173, 1163, 1163,
	1163, 0, 0, 0, 752, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 750, 1162,
	1162, 1162, 0, 1162, 0, 0, 0, 0, 744, 0,
	0, 0, 0, 0, 745, 0, 0, 0, 0, 0,
	0, 723, 0, 757, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1257, 0, 0, 0, 724, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 746, 0, 0,
	0, 743, 0, 0, 0, 1281, 1281, 1281, 1173, 758,
	1065, 0, 1065, 0, 1001, 0, 0, 747, 1062, 1312,
	1313, 0, 0, 0, 0, 0, 0, 0, 0, 1001,
	794, 0, 0, 794, 794, 0, 0, 749, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 208, 0, 1596, 751,
	0, 0, 0, 0, 0, 208, 208, 1065, 0, 0,
	1065, 0, 1065, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2016, 0,
	0, 1386, 0, 0, 0, 0, 1065, 0, 0, 1065,
	0, 0, 814, 1062, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1502, 0, 0, 0, 1502,
	1430, 1431, 0, 1463, 1464, 1465, 1473, 1474, 1475, 0,
	0, 0, 0, 0, 206, 206, 206, 0, 0, 1065,
	0, 0, 0, 1596, 0, 0, 1433, 0, 0, 0,
	1479, 0, 0, 0, 0, 206, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1065, 0, 0, 0, 0,
	0, 0, 0, 1432, 0, 0, 0, 1062, 0, 0,
	0, 0, 1452, 989, 0, 0, 0, 0, 0, 1449,
	0, 0, 206, 1062, 0, 0, 206, 0, 0, 0,
	0, 0, 0, 1065, 0, 206, 0, 1597, 0, 0,
	0, 0, 0, 0, 0, 1065, 0, 0, 0, 0,
	0, 0, 0, 0, 208, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 1061, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1455, 1456, 1457, 1458, 0,
	0, 0, 0, 0, 0, 1438, 0, 206, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1061, 0, 208, 0, 0, 1470,
	0, 1065, 1480, 1061, 0, 0, 1460, 1461, 1462, 0,
	0, 0, 0, 0, 0, 206, 0, 206, 0, 0,
	0, 0, 0, 0, 1062, 0, 0, 208, 208, 0,
	0, 0, 0, 0, 206, 0, 1447, 1448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1468, 0, 0, 0, 0, 0, 0, 1603, 1453,
	0, 0, 87, 0, 1163, 0, 0, 0, 0, 0,
	0, 1612, 0, 0, 0, 0, 0, 0, 1062, 0,
	0, 1163, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 1162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1061, 0, 0, 0,
	87, 0, 87, 0, 1061, 208, 1065, 0, 0, 0,
	0, 0, 0, 0, 0, 1065, 1065, 0, 0, 0,
	0, 1065, 0, 0, 1459, 1162, 0, 0, 1162, 1162,
	1162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1454, 0, 0, 87, 0, 87, 0, 1163,
	1163, 1163, 0, 1163, 0, 0, 208, 0, 1065, 0,
	0, 0, 1001, 1001, 0, 0, 208, 1471, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 1162,
	1162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1162, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1061, 0, 0, 1061, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1469,
	0, 0, 1444, 1445, 1451, 1450, 1446, 1472, 0, 1443,
	1441, 1442, 1434, 1435, 1436, 1437, 1439, 1440, 0, 0,
	0, 0, 0, 0, 0, 1797, 0, 0, 0, 0,
	0, 0, 1809, 0, 0, 0, 0, 1061, 0, 0,
	0, 0, 0, 0, 0, 0, 206, 206, 1061, 0,
	0, 1257, 0, 1828, 0, 1828, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 2016, 0, 0, 0, 1430,
	1431, 0, 1463, 1464, 1465, 1473, 1474, 1475, 0, 0,
	0, 0, 1001, 0, 0, 0, 1502, 0, 1466, 0,
	0, 0, 0, 0, 0, 1433, 0, 0, 0, 1479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 0,
	0, 0, 1432, 1809, 0, 0, 1873, 0, 0, 0,
	0, 1452, 0, 0, 0, 0, 0, 0, 1449, 0,
	0, 0, 0, 0, 1887, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1897, 0, 1899, 0, 1901, 0,
	1903, 0, 1904, 0, 1061, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1062, 0, 0, 0, 0,
	1921, 0, 0, 0, 1455, 1456, 1457, 1458, 0, 0,
	0, 0, 0, 0, 1438, 0, 989, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 989, 0, 0, 1062, 0, 0, 0, 1470, 0,
	0, 1480, 1001, 1062, 0, 1460, 1461, 1462, 0, 0,
	1001, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1596, 0, 0, 1476, 0, 1477, 0,
	0, 0, 0, 0, 0, 1447, 1448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1468, 0, 1061, 0, 0, 0, 0, 1162, 1453, 0,
	0, 0, 0, 0, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 206, 0, 1478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1162, 1162, 1162, 87,
	87, 1467, 0, 87, 0, 0, 1163, 0, 0, 0,
	0, 0, 1162, 0, 0, 0, 1062, 0, 0, 0,
	0, 0, 0, 0, 1062, 0, 0, 0, 0, 0,
	0, 1061, 87, 87, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 1459, 0, 1163, 0, 0, 1163, 1163,
	1163, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1454, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1471, 2181, 0, 814,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1163,
	1163, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 1163, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 206, 1062, 0, 0, 1062, 0, 1061, 0,
	1061, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1469, 0,
	0, 1444, 1445, 1451, 1450, 1446, 1472, 0, 1443, 1441,
	1442, 1434, 1435, 1436, 1437, 1439, 1440, 0, 0, 0,
	0, 3399, 0, 0, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1162, 0, 1062, 1061, 0,
	1162, 0, 0, 0, 0, 0, 0, 0, 1062, 0,
	0, 0, 0, 0, 0, 206, 206, 0, 0, 0,
	0, 0, 0, 0, 1061, 0, 0, 1162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1173, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1061, 0, 0,
	0, 0, 0, 0, 0, 0, 2315, 0, 0, 0,
	0, 1809, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1061, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2354, 989, 989, 1281, 0, 1281, 0,
	1281, 0, 1173, 1173, 1062, 0, 0, 0, 0, 0,
	0, 1061, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1061, 0, 0, 0, 0, 2397, 0,
	0, 0, 0, 0, 206, 0, 0, 0, 0, 0,
	0, 2402, 0, 1173, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1430, 1431, 0, 1463, 1464, 1465, 1473, 1474, 1475,
	0, 0, 0, 0, 0, 0, 2422, 1173, 0, 2425,
	1466, 0, 0, 0, 0, 0, 0, 1433, 0, 1162,
	0, 1479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2439, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1432, 0, 0, 0, 0, 0,
	0, 0, 1062, 1452, 0, 0, 0, 1163, 0, 0,
	1449, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1163, 1163, 1163, 0,
	0, 0, 0, 0, 989, 0, 0, 0, 0, 0,
	0, 0, 1163, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1455, 1456, 1457, 1458,
	0, 1062, 0, 0, 0, 0, 1438, 87, 0, 0,
	0, 0, 0, 0, 1162, 0, 0, 0, 0, 0,
	0, 0, 0, 1162, 1162, 0, 0, 0, 0, 1162,
	1470, 0, 0, 1480, 0, 0, 0, 1460, 1461, 1462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1476, 0,
	1477, 0, 0, 0, 0, 0, 1061, 1447, 1448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1468, 0, 0, 0, 0, 0, 0, 0,
	1453, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1062, 0,
	1062, 0, 0, 1467, 989, 0, 0, 0, 0, 0,
	0, 0, 989, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1459, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1163, 0, 0, 1062, 0,
	1163, 0, 0, 1454, 0, 0, 0, 0, 0, 0,
	0, 2639, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1062, 0, 0, 1163, 1471, 0,
	87, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 2675, 1173, 2315, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 1062, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1062, 0, 0, 0, 0, 0, 2714,
	0, 0, 0, 2718, 0, 0, 0, 0, 0, 0,
	1469, 0, 2725, 1444, 1445, 1451, 1450, 1446, 1472, 0,
	1443, 1441, 1442, 1434, 1435, 1436, 1437, 1439, 1440, 0,
	0, 1062, 0, 2511, 0, 0, 2512, 0, 0, 0,
	0, 0, 0, 1062, 0, 0, 0, 0, 1430, 1431,
	0, 1463, 1464, 1465, 1473, 1474, 1475, 0, 0, 0,
	0, 0, 0, 0, 2767, 0, 0, 1466, 0, 0,
	0, 0, 0, 0, 1433, 0, 0, 0, 1479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1432, 2788, 0, 1173, 0, 0, 0, 0, 1163,
	1452, 0, 0, 0, 0, 0, 0, 1449, 0, 0,
	0, 2794, 0, 0, 0, 1430, 1431, 0, 1463, 1464,
	1465, 1473, 1474, 1475, 0, 0, 0, 0, 0, 0,
	2016, 0, 0, 0, 1466, 0, 0, 0, 0, 0,
	0, 1433, 0, 0, 0, 1479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1455, 1456, 1457, 1458, 0, 1432, 0,
	0, 0, 0, 1438, 0, 0, 0, 1452, 0, 0,
	0, 0, 0, 0, 1449, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1470, 0, 0,
	1480, 0, 0, 0, 1460, 1461, 1462, 0, 0, 0,
	0, 0, 0, 0, 1163, 0, 0, 0, 0, 0,
	0, 0, 0, 1163, 1163, 1476, 0, 1477, 0, 1163,
	0, 0, 0, 0, 1447, 1448, 0, 0, 0, 0,
	1455, 1456, 1457, 1458, 0, 0, 0, 0, 0, 1468,
	1438, 0, 0, 0, 0, 0, 0, 1453, 0, 0,
	0, 0, 0, 0, 0, 0, 1062, 0, 0, 0,
	0, 0, 0, 0, 1470, 1478, 0, 1480, 0, 0,
	0, 1460, 1461, 1462, 0, 0, 0, 0, 0, 0,
	1467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 1476, 0, 1477, 0, 0, 0, 0, 0,
	0, 1447, 1448, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1468, 0, 0, 0,
	0, 0, 1459, 0, 1453, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1454, 0, 1478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1467, 0, 0,
	0, 0, 0, 0, 0, 1471, 0, 0, 0, 0,
	0, 0, 0, 2985, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2997, 0, 0, 0, 0, 0, 0, 0, 0, 1459,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1454, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1471, 0, 0, 3037, 0, 1469, 0, 0,
	1444, 1445, 1451, 1450, 1446, 1472, 0, 1443, 1441, 1442,
	1434, 1435, 1436, 1437, 1439, 1440, 0, 0, 0, 0,
	2048, 0, 0, 2049, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1430, 1431, 0, 1463, 1464, 1465, 1473, 1474, 1475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1466,
	0, 0, 0, 0, 0, 0, 1433, 0, 0, 0,
	1479, 0, 0, 0, 1469, 0, 0, 1444, 1445, 1451,
	1450, 1446, 1472, 0, 1443, 1441, 1442, 1434, 1435, 1436,
	1437, 1439, 1440, 1432, 0, 0, 0, 0, 0, 0,
	2812, 0, 1452, 0, 0, 0, 0, 1430, 1431, 1449,
	1463, 1464, 1465, 1473, 1474, 1475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1466, 0, 0, 0,
	0, 0, 0, 1433, 0, 0, 0, 1479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1432, 0, 0, 0, 0, 1455, 1456, 1457, 1458, 1452,
	0, 3145, 0, 0, 0, 1438, 1449, 0, 0, 0,
	2315, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1470,
	0, 0, 1480, 0, 0, 0, 1460, 1461, 1462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1476, 0, 1477,
	0, 0, 1455, 1456, 1457, 1458, 1447, 1448, 0, 0,
	0, 0, 1438, 0, 0, 0, 0, 0, 0, 0,
	0, 1468, 0, 0, 0, 0, 0, 0, 0, 1453,
	0, 0, 0, 0, 0, 0, 1470, 0, 0, 1480,
	0, 0, 0, 1460, 1461, 1462, 0, 1478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1467, 0, 1476, 0, 1477, 0, 0, 0,
	0, 0, 0, 1447, 1448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1468, 0,
	0, 0, 0, 0, 0, 0, 1453, 0, 0, 0,
	0, 0, 0, 0, 1459, 0, 0, 0, 0, 3251,
	0, 0, 0, 0, 1478, 0, 0, 0, 0, 0,
	0, 0, 1454, 0, 0, 0, 0, 0, 0, 1467,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1471, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3295, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1459, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1454,
	0, 0, 3320, 1173, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1469,
	0, 0, 1444, 1445, 1451, 1450, 1446, 1472, 0, 1443,
	1441, 1442, 1434, 1435, 1436, 1437, 1439, 1440, 0, 0,
	0, 0, 0, 0, 0, 2514, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3369, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1469, 0, 0, 1444,
	1445, 1451, 1450, 1446, 1472, 0, 1443, 1441, 1442, 1434,
	1435, 1436, 1437, 1439, 1440, 0, 0, 0, 0, 0,
	0, 0, 2513, 0, 0, 1059, 0, 0, 0, 0,
	0, 3404, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3419, 216, 217, 218, 219, 220, 1066, 221, 1067,
	1068, 1069, 1070, 465, 1071, 1072, 1073, 1074, 222, 223,
	224, 225, 466, 467, 226, 468, 227, 228, 469, 1075,
	229, 230, 231, 232, 233, 234, 1076, 1077, 235, 470,
	471, 472, 1078, 236, 473, 1079, 1064, 1080, 237, 238,
	239, 240, 241, 242, 0, 244, 245, 246, 243, 1081,
	247, 0, 248, 249, 250, 1082, 940, 251, 252, 1083,
	1084, 1086, 1085, 1087, 1088, 1089, 253, 254, 255, 256,
	257, 258, 474, 475, 1090, 259, 1091, 261, 260, 1092,
	262, 1093, 1094, 263, 264, 265, 1095, 266, 1096, 267,
	268, 1097, 476, 269, 270, 272, 274, 271, 275, 276,
	277, 278, 477, 478, 1098, 213, 1099, 0, 0, 0,
	0, 279, 280, 281, 479, 282, 283, 0, 284, 1100,
	285, 1101, 1102, 941, 286, 287, 1103, 288, 480, 1104,
	481, 289, 1105, 290, 291, 292, 293, 482, 483, 484,
	341, 943, 294, 295, 1106, 296, 297, 299, 0, 0,
	0, 214, 298, 300, 307, 1107, 942, 301, 485, 303,
	302, 304, 305, 306, 486, 1108, 487, 1109, 308, 944,
	488, 945, 309, 310, 311, 946, 312, 313, 0, 0,
	314, 315, 316, 317, 1110, 319, 318, 1111, 320, 489,
	947, 321, 322, 948, 1112, 323, 324, 1113, 1114, 325,
	326, 0, 327, 328, 330, 332, 329, 331, 333, 335,
	336, 334, 949, 337, 338, 340, 339, 1115, 215, 950,
	1116, 490, 491, 342, 343, 1117, 344, 345, 346, 1118,
	1119, 348, 349, 350, 1120, 1121, 351, 492, 951, 352,
	952, 493, 353, 347, 354, 355, 356, 357, 358, 359,
	360, 1122, 361, 362, 494, 363, 495, 364, 1123, 365,
	0, 366, 367, 368, 369, 370, 371, 496, 372, 373,
	1124, 374, 375, 376, 377, 378, 0, 380, 381, 382,
	379, 383, 384, 385, 386, 1125, 387, 953, 388, 389,
	390, 391, 497, 392, 0, 393, 397, 398, 399, 400,
	401, 402, 403, 1126, 410, 411, 404, 406, 407, 408,
	405, 409, 412, 413, 1127, 414, 394, 395, 415, 954,
	416, 498, 417, 418, 1128, 428, 419, 420, 421, 396,
	422, 426, 427, 423, 424, 425, 499, 1129, 430, 431,
	429, 1130, 432, 433, 434, 435, 436, 273, 437, 1131,
	500, 501, 502, 503, 1132, 444, 1133, 438, 439, 504,
	440, 505, 1134, 441, 442, 443, 0, 445, 446, 1135,
	1136, 447, 448, 449, 450, 451, 453, 1137, 454, 1138,
	452, 455, 456, 457, 506, 507, 508, 1139, 459, 458,
	509, 1140, 1141, 1142, 1143, 460, 461, 510, 462, 463,
	464, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1059, 0, 0, 0, 0, 0, 0,
	0, 2168, 0, 0, 0, 0, 0, 0, 0, 2169,
	216, 217, 218, 219, 220, 1066, 221, 1067, 1068, 1069,
	1070, 465, 1071, 1072, 1073, 1074, 222, 223, 224, 225,
	466, 467, 226, 468, 227, 228, 469, 1075, 229, 230,
	231, 232, 233, 234, 1076, 1077, 235, 470, 471, 472,
	1078, 236, 473, 1079, 1064, 1080, 237, 238, 239, 240,
	241, 242, 0, 244, 245, 246, 243, 1081, 247, 0,
	248, 249, 250, 1082, 940, 251, 252, 1083, 1084, 1086,
	1085, 1087, 1088, 1089, 253, 254, 255, 256, 257, 258,
	474, 475, 1090, 259, 1091, 261, 260, 1092, 262, 1093,
	1094, 263, 264, 265, 1095, 266, 1096, 267, 268, 1097,
	476, 269, 270, 272, 274, 271, 275, 276, 277, 278,
	477, 478, 1098, 213, 1099, 0, 0, 0, 0, 279,
	280, 281, 479, 282, 283, 0, 284, 1100, 285, 1101,
	1102, 941, 286, 287, 1103, 288, 480, 1104, 481, 289,
	1105, 290, 291, 292, 293, 482, 483, 484, 341, 943,
	294, 295, 1106, 296, 297, 299, 0, 0, 0, 214,
	298, 300, 307, 1107, 942, 301, 485, 303, 302, 304,
	305, 306, 486, 1108, 487, 1109, 308, 944, 488, 945,
	309, 310, 311, 946, 312, 313, 0, 0, 314, 315,
	316, 317, 1110, 319, 318, 1111, 320, 489, 947, 321,
	322, 948, 1112, 323, 324, 1113, 1114, 325, 326, 0,
	327, 328, 330, 332, 329, 331, 333, 335, 336, 334,
	949, 337, 338, 340, 339, 1115, 215, 950, 1116, 490,
	491, 342, 343, 1117, 344, 345, 346, 1118, 1119, 348,
	349, 350, 1120, 1121, 351, 492, 951, 352, 952, 493,
	353, 347, 354, 355, 356, 357, 358, 359, 360, 1122,
	361, 362, 494, 363, 495, 364, 1123, 365, 0, 366,
	367, 368, 369, 370, 371, 496, 372, 373, 1124, 374,
	375, 376, 377, 378, 0, 380, 381, 382, 379, 383,
	384, 385, 386, 1125, 387, 953, 388, 389, 390, 391,
	497, 392, 0, 393, 397, 398, 399, 400, 401, 402,
	403, 1126, 410, 411, 404, 406, 407, 408, 405, 409,
	412, 413, 1127, 414, 394, 395, 415, 954, 416, 498,
	417, 418, 1128, 428, 419, 420, 421, 396, 422, 426,
	427, 423, 424, 425, 499, 1129, 430, 431, 429, 1130,
	432, 433, 434, 435, 436, 273, 437, 1131, 500, 501,
	502, 503, 1132, 444, 1133, 438, 439, 504, 440, 505,
	1134, 441, 442, 443, 0, 445, 446, 1135, 1136, 447,
	448, 449, 450, 451, 453, 1137, 454, 1138, 452, 455,
	456, 457, 506, 507, 508, 1139, 459, 458, 509, 1140,
	1141, 1142, 1143, 460, 461, 510, 462, 463, 464, 0,
	0, 0, 0, 1059, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3101,
	216, 217, 218, 219, 220, 1066, 221, 1067, 1068, 1069,
	1070, 465, 1071, 1072, 1073, 1074, 222, 223, 224, 225,
	466, 467, 226, 468, 227, 228, 469, 1075, 229, 230,
	231, 232, 233, 234, 1076, 1077, 235, 470, 471, 472,
	1078, 236, 473, 1079, 1064, 1080, 237, 238, 239, 240,
	241, 242, 0, 244, 245, 246, 243, 1081, 247, 0,
	248, 249, 250, 1082, 940, 251, 252, 1083, 1084, 1086,
	1085, 1087, 1088, 1089, 253, 254, 255, 256, 257, 258,
	474, 475, 1090, 259, 1091, 261, 260, 1092, 262, 1093,
	1094, 263, 264, 265, 1095, 266, 1096, 267, 268, 1097,
	476, 269, 270, 272, 274, 271, 275, 276, 277, 278,
	477, 478, 1098, 213, 1099, 0, 0, 0, 0, 279,
	280, 281, 479, 282, 283, 0, 284, 1100, 285, 1101,
	1102, 941, 286, 287, 1103, 288, 480, 1104, 481, 289,
	1105, 290, 291, 292, 293, 482, 483, 484, 341, 943,
	294, 295, 1106, 296, 297, 299, 0, 0, 0, 214,
	298, 300, 307, 1107, 942, 301, 485, 303, 302, 304,
	305, 306, 486, 1108, 487, 1109, 308, 944, 488, 945,
	309, 310, 311, 946, 312, 313, 0, 0, 314, 315,
	316, 317, 1110, 319, 318, 1111, 320, 489, 947, 321,
	322, 948, 1112, 323, 324, 1113, 1114, 325, 326, 0,
	327, 328, 330, 332, 329, 331, 333, 335, 336, 334,
	949, 337, 338, 340, 339, 1115, 215, 950, 1116, 490,
	491, 342, 343, 1117, 344, 345, 346, 1118, 1119, 348,
	349, 350, 1120, 1121, 351, 492, 951, 352, 952, 493,
	353, 347, 354, 355, 356, 357, 358, 359, 360, 1122,
	361, 362, 494, 363, 495, 364, 1123, 365, 0, 366,
	367, 368, 369, 370, 371, 496, 372, 373, 1124, 374,
	375, 376, 377, 378, 0, 380, 381, 382, 379, 383,
	384, 385, 386, 1125, 387, 953, 388, 389, 390, 391,
	497, 392, 0, 393, 397, 398, 399, 400, 401, 402,
	403, 1126, 410, 411, 404, 406, 407, 408, 405, 409,
	412, 413, 1127, 414, 394, 395, 415, 954, 416, 498,
	417, 418, 1128, 428, 419, 420, 421, 396, 422, 426,
	427, 423, 424, 425, 499, 1129, 430, 431, 429, 1130,
	432, 433, 434, 435, 436, 273, 437, 1131, 500, 501,
	502, 503, 1132, 444, 1133, 438, 439, 504, 440, 505,
	1134, 441, 442, 443, 0, 445, 446, 1135, 1136, 447,
	448, 449, 450, 451, 453, 1137, 454, 1138, 452, 455,
	456, 457, 506, 507, 508, 1139, 459, 458, 509, 1140,
	1141, 1142, 1143, 460, 461, 510, 462, 463, 464, 1059,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3218, 0, 216, 217, 218, 219,
	220, 1066, 221, 1067, 1068, 1069, 1070, 465, 1071, 1072,
	1073, 1074, 222, 223, 224, 225, 466, 467, 226, 468,
	227, 228, 469, 1075, 229, 230, 231, 232, 233, 234,
	1076, 1077, 235, 470, 471, 472, 1078, 236, 473, 1079,
	1064, 1080, 237, 238, 239, 240, 241, 242, 0, 244,
	245, 246, 243, 1081, 247, 0, 248, 249, 250, 1082,
	940, 251, 252, 1083, 1084, 1086, 1085, 1087, 1088, 1089,
	253, 254, 255, 256, 257, 258, 474, 475, 1090, 259,
	1091, 261, 260, 1092, 262, 1093, 1094, 263, 264, 265,
	1095, 266, 1096, 267, 268, 1097, 476, 269, 270, 272,
	274, 271, 275, 276, 277, 278, 477, 478, 1098, 213,
	1099, 0, 0, 0, 0, 279, 280, 281, 479, 282,
	283, 0, 284, 1100, 285, 1101, 1102, 941, 286, 287,
	1103, 288, 480, 1104, 481, 289, 1105, 290, 291, 292,
	293, 482, 483, 484, 341, 943, 294, 295, 1106, 296,
	297, 299, 0, 0, 0, 214, 298, 300, 307, 1107,
	942, 301, 485, 303, 302, 304, 305, 306, 486, 1108,
	487, 1109, 308, 944, 488, 945, 309, 310, 311, 946,
	312, 313, 0, 0, 314, 315, 316, 317, 1110, 319,
	318, 1111, 320, 489, 947, 321, 322, 948, 1112, 323,
	324, 1113, 1114, 325, 326, 0, 327, 328, 330, 332,
	329, 331, 333, 335, 336, 334, 949, 337, 338, 340,
	339, 1115, 215, 950, 1116, 490, 491, 342, 343, 1117,
	344, 345, 346, 1118, 1119, 348, 349, 350, 1120, 1121,
	351, 492, 951, 352, 952, 493, 353, 347, 354, 355,
	356, 357, 358, 359, 360, 1122, 361, 362, 494, 363,
	495, 364, 1123, 365, 0, 366, 367, 368, 369, 370,
	371, 496, 372, 373, 1124, 374, 375, 376, 377, 378,
	0, 380, 381, 382, 379, 383, 384, 385, 386, 1125,
	387, 953, 388, 389, 390, 391, 497, 392, 0, 393,
	397, 398, 399, 400, 401, 402, 403, 1126, 410, 411,
	404, 406, 407, 408, 405, 409, 412, 413, 1127, 414,
	394, 395, 415, 954, 416, 498, 417, 418, 1128, 428,
	419, 420, 421, 396, 422, 426, 427, 423, 424, 425,
	499, 1129, 430, 431, 429, 1130, 432, 433, 434, 435,
	436, 273, 437, 1131, 500, 501, 502, 503, 1132, 444,
	1133, 438, 439, 504, 440, 505, 1134, 441, 442, 443,
	0, 445, 446, 1135, 1136, 447, 448, 449, 450, 451,
	453, 1137, 454, 1138, 452, 455, 456, 457, 506, 507,
	508, 1139, 459, 458, 509, 1140, 1141, 1142, 1143, 460,
	461, 510, 462, 463, 464, 1059, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2837, 0, 216, 217, 218, 219, 220, 1066, 221, 1067,
	1068, 1069, 1070, 465, 1071, 1072, 1073, 1074, 222, 223,
	224, 225, 466, 467, 226, 468, 227, 228, 469, 1075,
	229, 230, 231, 232, 233, 234, 1076, 1077, 235, 470,
	471, 472, 1078, 236, 473, 1079, 1064, 1080, 237, 238,
	239, 240, 241, 242, 0, 244, 245, 246, 243, 1081,
	247, 0, 248, 249, 250, 1082, 940, 251, 252, 1083,
	1084, 1086, 1085, 1087, 1088, 1089, 253, 254, 255, 256,
	257, 258, 474, 475, 1090, 259, 1091, 261, 260, 1092,
	262, 1093, 1094, 263, 264, 265, 1095, 266, 1096, 267,
	268, 1097, 476, 269, 270, 272, 274, 271, 275, 276,
	277, 278, 477, 478, 1098, 213, 1099, 0, 0, 0,
	0, 279, 280, 281, 479, 282, 283, 0, 284, 1100,
	285, 1101, 1102, 941, 286, 287, 1103, 288, 480, 1104,
	481, 289, 1105, 290, 291, 292, 293, 482, 483, 484,
	341, 943, 294, 295, 1106, 296, 297, 299, 0, 0,
	0, 214, 298, 300, 307, 1107, 942, 301, 485, 303,
	302, 304, 305, 306, 486, 1108, 487, 1109, 308, 944,
	488, 945, 309, 310, 311, 946, 312, 313, 0, 0,
	314, 315, 316, 317, 1110, 319, 318, 1111, 320, 489,
	947, 321, 322, 948, 1112, 323, 324, 1113, 1114, 325,
	326, 0, 327, 328, 330, 332, 329, 331, 333, 335,
	336, 334, 949, 337, 338, 340, 339, 1115, 215, 950,
	1116, 490, 491, 342, 343, 1117, 344, 345, 346, 1118,
	1119, 348, 349, 350, 1120, 1121, 351, 492, 951, 352,
	952, 493, 353, 347, 354, 355, 356, 357, 358, 359,
	360, 1122, 361, 362, 494, 363, 495, 364, 1123, 365,
	0, 366, 367, 368, 369, 370, 371, 496, 372, 373,
	1124, 374, 375, 376, 377, 378, 0, 380, 381, 382,
	379, 383, 384, 385, 386, 1125, 387, 953, 388, 389,
	390, 391, 497, 392, 0, 393, 397, 398, 399, 400,
	401, 402, 403, 1126, 410, 411, 404, 406, 407, 408,
	405, 409, 412, 413, 1127, 414, 394, 395, 415, 954,
	416, 498, 417, 418, 1128, 428, 419, 420, 421, 396,
	422, 426, 427, 423, 424, 425, 499, 1129, 430, 431,
	429, 1130, 432, 433, 434, 435, 436, 273, 437, 1131,
	500, 501, 502, 503, 1132, 444, 1133, 438, 439, 504,
	440, 505, 1134, 441, 442, 443, 0, 445, 446, 1135,
	1136, 447, 448, 449, 450, 451, 453, 1137, 454, 1138,
	452, 455, 456, 457, 506, 507, 508, 1139, 459, 458,
	509, 1140, 1141, 1142, 1143, 460, 461, 510, 462, 463,
	464, 1059, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2829, 0, 216, 217,
	218, 219, 220, 1066, 221, 1067, 1068, 1069, 1070, 465,
	1071, 1072, 1073, 1074, 222, 223, 224, 225, 466, 467,
	226, 468, 227, 228, 469, 1075, 229, 230, 231, 232,
	233, 234, 1076, 1077, 235, 470, 471, 472, 1078, 236,
	473, 1079, 1064, 1080, 237, 238, 239, 240, 241, 242,
	0, 244, 245, 246, 243, 1081, 247, 0, 248, 249,
	250, 1082, 940, 251, 252, 1083, 1084, 1086, 1085, 1087,
	1088, 1089, 253, 254, 255, 256, 257, 258, 474, 475,
	1090, 259, 1091, 261, 260, 1092, 262, 1093, 1094, 263,
	264, 265, 1095, 266, 1096, 267, 268, 1097, 476, 269,
	270, 272, 274, 271, 275, 276, 277, 278, 477, 478,
	1098, 213, 1099, 0, 0, 0, 0, 279, 280, 281,
	479, 282, 283, 0, 284, 1100, 285, 1101, 1102, 941,
	286, 287, 1103, 288, 480, 1104, 481, 289, 1105, 290,
	291, 292, 293, 482, 483, 484, 341, 943, 294, 295,
	1106, 296, 297, 299, 0, 0, 0, 214, 298, 300,
	307, 1107, 942, 301, 485, 303, 302, 304, 305, 306,
	486, 1108, 487, 1109, 308, 944, 488, 945, 309, 310,
	311, 946, 312, 313, 0, 0, 314, 315, 316, 317,
	1110, 319, 318, 1111, 320, 489, 947, 321, 322, 948,
	1112, 323, 324, 1113, 1114, 325, 326, 0, 327, 328,
	330, 332, 329, 331, 333, 335, 336, 334, 949, 337,
	338, 340, 339, 1115, 215, 950, 1116, 490, 491, 342,
	343, 1117, 344, 345, 346, 1118, 1119, 348, 349, 350,
	1120, 1121, 351, 492, 951, 352, 952, 493, 353, 347,
	354, 355, 356, 357, 358, 359, 360, 1122, 361, 362,
	494, 363, 495, 364, 1123, 365, 0, 366, 367, 368,
	369, 370, 371, 496, 372, 373, 1124, 374, 375, 376,
	377, 378, 0, 380, 381, 382, 379, 383, 384, 385,
	386, 1125, 387, 953, 388, 389, 390, 391, 497, 392,
	0, 393, 397, 398, 399, 400, 401, 402, 403, 1126,
	410, 411, 404, 406, 407, 408, 405, 409, 412, 413,
	1127, 414, 394, 395, 415, 954, 416, 498, 417, 418,
	1128, 428, 419, 420, 421, 396, 422, 426, 427, 423,
	424, 425, 499, 1129, 430, 431, 429, 1130, 432, 433,
	434, 435, 436, 273, 437, 1131, 500, 501, 502, 503,
	1132, 444, 1133, 438, 439, 504, 440, 505, 1134, 441,
	442, 443, 0, 445, 446, 1135, 1136, 447, 448, 449,
	450, 451, 453, 1137, 454, 1138, 452, 455, 456, 457,
	506, 507, 508, 1139, 459, 458, 509, 1140, 1141, 1142,
	1143, 460, 461, 510, 462, 463, 464, 1059, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2699, 0, 216, 217, 218, 219, 220, 1066,
	221, 1067, 1068, 1069, 1070, 465, 1071, 1072, 1073, 1074,
	222, 223, 224, 225, 466, 467, 226, 468, 227, 228,
	469, 1075, 229, 230, 231, 232, 233, 234, 1076, 1077,
	235, 470, 471, 472, 1078, 236, 473, 1079, 1064, 1080,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 1081, 247, 0, 248, 249, 250, 1082, 940, 251,
	252, 1083, 1084, 1086, 1085, 1087, 1088, 1089, 253, 254,
	255, 256, 257, 258, 474, 475, 1090, 259, 1091, 261,
	260, 1092, 262, 1093, 1094, 263, 264, 265, 1095, 266,
	1096, 267, 268, 1097, 476, 269, 270, 272, 274, 271,
	275, 276, 277, 278, 477, 478, 1098, 213, 1099, 0,
	0, 0, 0, 279, 280, 281, 479, 282, 283, 0,
	284, 1100, 285, 1101, 1102, 941, 286, 287, 1103, 288,
	480, 1104, 481, 289, 1105, 290, 291, 292, 293, 482,
	483, 484, 341, 943, 294, 295, 1106, 296, 297, 299,
	0, 0, 0, 214, 298, 300, 307, 1107, 942, 301,
	485, 303, 302, 304, 305, 306, 486, 1108, 487, 1109,
	308, 944, 488, 945, 309, 310, 311, 946, 312, 313,
	0, 0, 314, 315, 316, 317, 1110, 319, 318, 1111,
	320, 489, 947, 321, 322, 948, 1112, 323, 324, 1113,
	1114, 325, 326, 0, 327, 328, 330, 332, 329, 331,
	333, 335, 336, 334, 949, 337, 338, 340, 339, 1115,
	215, 950, 1116, 490, 491, 342, 343, 1117, 344, 345,
	346, 1118, 1119, 348, 349, 350, 1120, 1121, 351, 492,
	951, 352, 952, 493, 353, 347, 354, 355, 356, 357,
	358, 359, 360, 1122, 361, 362, 494, 363, 495, 364,
	1123, 365, 0, 366, 367, 368, 369, 370, 371, 496,
	372, 373, 1124, 374, 375, 376, 377, 378, 0, 380,
	381, 382, 379, 383, 384, 385, 386, 1125, 387, 953,
	388, 389, 390, 391, 497, 392, 0, 393, 397, 398,
	399, 400, 401, 402, 403, 1126, 410, 411, 404, 406,
	407, 408, 405, 409, 412, 413, 1127, 414, 394, 395,
	415, 954, 416, 498, 417, 418, 1128, 428, 419, 420,
	421, 396, 422, 426, 427, 423, 424, 425, 499, 1129,
	430, 431, 429, 1130, 432, 433, 434, 435, 436, 273,
	437, 1131, 500, 501, 502, 503, 1132, 444, 1133, 438,
	439, 504, 440, 505, 1134, 441, 442, 443, 0, 445,
	446, 1135, 1136, 447, 448, 449, 450, 451, 453, 1137,
	454, 1138, 452, 455, 456, 457, 506, 507, 508, 1139,
	459, 458, 509, 1140, 1141, 1142, 1143, 460, 461, 510,
	462, 463, 464, 1059, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2061, 0,
	216, 217, 218, 219, 220, 1066, 221, 1067, 1068, 1069,
	1070, 465, 1071, 1072, 1073, 1074, 222, 223, 224, 225,
	466, 467, 226, 468, 227, 228, 469, 1075, 229, 230,
	231, 232, 233, 234, 1076, 1077, 235, 470, 471, 472,
	1078, 236, 473, 1079, 1064, 1080, 237, 238, 239, 240,
	241, 242, 0, 244, 245, 246, 243, 1081, 247, 0,
	248, 249, 250, 1082, 940, 251, 252, 1083, 1084, 1086,
	1085, 1087, 1088, 1089, 253, 254, 255, 256, 257, 258,
	474, 475, 1090, 259, 1091, 261, 260, 1092, 262, 1093,
	1094, 263, 264, 265, 1095, 266, 1096, 267, 268, 1097,
	476, 269, 270, 272, 274, 271, 275, 276, 277, 278,
	477, 478, 1098, 213, 1099, 0, 0, 0, 0, 279,
	280, 281, 479, 282, 283, 0, 284, 1100, 285, 1101,
	1102, 941, 286, 287, 1103, 288, 480, 1104, 481, 289,
	1105, 290, 291, 292, 293, 482, 483, 484, 341, 943,
	294, 295, 1106, 296, 297, 299, 0, 0, 0, 214,
	298, 300, 307, 1107, 942, 301, 485, 303, 302, 304,
	305, 306, 486, 1108, 487, 1109, 308, 944, 488, 945,
	309, 310, 311, 946, 312, 313, 0, 0, 314, 315,
	316, 317, 1110, 319, 318, 1111, 320, 489, 947, 321,
	322, 948, 1112, 323, 324, 1113, 1114, 325, 326, 0,
	327, 328, 330, 332, 329, 331, 333, 335, 336, 334,
	949, 337, 338, 340, 339, 1115, 215, 950, 1116, 490,
	491, 342, 343, 1117, 344, 345, 346, 1118, 1119, 348,
	349, 350, 1120, 1121, 351, 492, 951, 352, 952, 493,
	353, 347, 354, 355, 356, 357, 358, 359, 360, 1122,
	361, 362, 494, 363, 495, 364, 1123, 365, 0, 366,
	367, 368, 369, 370, 371, 496, 372, 373, 1124, 374,
	375, 376, 377, 378, 0, 380, 381, 382, 379, 383,
	384, 385, 386, 1125, 387, 953, 388, 389, 390, 391,
	497, 392, 0, 393, 397, 398, 399, 400, 401, 402,
	403, 1126, 410, 411, 404, 406, 407, 408, 405, 409,
	412, 413, 1127, 414, 394, 395, 415, 954, 416, 498,
	417, 418, 1128, 428, 419, 420, 421, 396, 422, 426,
	427, 423, 424, 425, 499, 1129, 430, 431, 429, 1130,
	432, 433, 434, 435, 436, 273, 437, 1131, 500, 501,
	502, 503, 1132, 444, 1133, 438, 439, 504, 440, 505,
	1134, 441, 442, 443, 0, 445, 446, 1135, 1136, 447,
	448, 449, 450, 451, 453, 1137, 454, 1138, 452, 455,
	456, 457, 506, 507, 508, 1139, 459, 458, 509, 1140,
	1141, 1142, 1143, 460, 461, 510, 462, 463, 464, 1167,
	0, 1059, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1780, 0, 0, 0, 216, 217,
	218, 219, 220, 1066, 221, 1067, 1068, 1069, 1070, 465,
	1071, 1072, 1073, 1074, 222, 223, 224, 225, 466, 467,
	226, 468, 227, 228, 469, 1075, 229, 230, 231, 232,
	233, 234, 1076, 1077, 235, 470, 471, 472, 1078, 236,
	473, 1079, 1064, 1080, 237, 238, 239, 240, 241, 242,
	0, 244, 245, 246, 243, 1081, 247, 0, 248, 249,
	250, 1082, 940, 251, 252, 1083, 1084, 1086, 1085, 1087,
	1088, 1089, 253, 254, 255, 256, 257, 258, 474, 475,
	1090, 259, 1091, 261, 260, 1092, 262, 1093, 1094, 263,
	264, 265, 1095, 266, 1096, 267, 268, 1097, 476, 269,
	270, 272, 274, 271, 275, 276, 277, 278, 477, 478,
	1098, 213, 1099, 0, 0, 0, 0, 279, 280, 281,
	479, 282, 283, 0, 284, 1100, 285, 1101, 1102, 941,
	286, 287, 1103, 288, 480, 1104, 481, 289, 1105, 290,
	291, 292, 293, 482, 483, 484, 341, 943, 294, 295,
	1106, 296, 297, 299, 0, 0, 0, 214, 298, 300,
	307, 1107, 942, 301, 485, 303, 302, 304, 305, 306,
	486, 1108, 487, 1109, 308, 944, 488, 945, 309, 310,
	311, 946, 312, 313, 0, 0, 314, 315, 316, 317,
	1110, 319, 318, 1111, 320, 489, 947, 321, 322, 948,
	1112, 323, 324, 1113, 1114, 325, 326, 0, 327, 328,
	330, 332, 329, 331, 333, 335, 336, 334, 949, 337,
	338, 340, 339, 1115, 215, 950, 1116, 490, 491, 342,
	343, 1117, 344, 345, 346, 1118, 1119, 348, 349, 350,
	1120, 1121, 351, 492, 951, 352, 952, 493, 353, 347,
	354, 355, 356, 357, 358, 359, 360, 1122, 361, 362,
	494, 363, 495, 364, 1123, 365, 0, 366, 367, 368,
	369, 370, 371, 496, 372, 373, 1124, 374, 375, 376,
	377, 378, 0, 380, 381, 382, 379, 383, 384, 385,
	386, 1125, 387, 953, 388, 389, 390, 391, 497, 392,
	0, 393, 397, 398, 399, 400, 401, 402, 403, 1126,
	410, 411, 404, 406, 407, 408, 405, 409, 412, 413,
	1127, 414, 394, 395, 415, 954, 416, 498, 417, 418,
	1128, 428, 419, 420, 421, 396, 422, 426, 427, 423,
	424, 425, 499, 1129, 430, 431, 429, 1130, 432, 433,
	434, 435, 436, 273, 437, 1131, 500, 501, 502, 503,
	1132, 444, 1133, 438, 439, 504, 440, 505, 1134, 441,
	442, 443, 0, 445, 446, 1135, 1136, 447, 448, 449,
	450, 451, 453, 1137, 454, 1138, 452, 455, 456, 457,
	506, 507, 508, 1139, 459, 458, 509, 1140, 1141, 1142,
	1143, 460, 461, 510, 462, 463, 464, 1056, 0, 1059,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 1066, 221, 1067, 1068, 1069, 1070, 465, 1071, 1072,
	1073, 1074, 222, 223, 224, 225, 466, 467, 226, 468,
	227, 228, 469, 1075, 229, 230, 231, 232, 233, 234,
	1076, 1077, 235, 470, 471, 472, 1078, 236, 473, 1079,
	1064, 1080, 237, 238, 239, 240, 241, 242, 0, 244,
	245, 246, 243, 1081, 247, 0, 248, 249, 250, 1082,
	940, 251, 252, 1083, 1084, 1086, 1085, 1087, 1088, 1089,
	253, 254, 255, 256, 257, 258, 474, 475, 1090, 259,
	1091, 261, 260, 1092, 262, 1093, 1094, 263, 264, 265,
	1095, 266, 1096, 267, 268, 1097, 476, 269, 270, 272,
	274, 271, 275, 276, 277, 278, 477, 478, 1098, 213,
	1099, 0, 0, 0, 0, 279, 280, 281, 479, 282,
	283, 0, 284, 1100, 285, 1101, 1102, 941, 286, 287,
	1103, 288, 480, 1104, 481, 289, 1105, 290, 291, 292,
	293, 482, 483, 484, 341, 943, 294, 295, 1106, 296,
	297, 299, 0, 0, 0, 214, 298, 300, 307, 1107,
	942, 301, 485, 303, 302, 304, 305, 306, 486, 1108,
	487, 1109, 308, 944, 488, 945, 309, 310, 311, 946,
	312, 313, 0, 0, 314, 315, 316, 317, 1110, 319,
	318, 1111, 320, 489, 947, 321, 322, 948, 1112, 323,
	324, 1113, 1114, 325, 326, 0, 327, 328, 330, 332,
	329, 331, 333, 335, 336, 334, 949, 337, 338, 340,
	339, 1115, 215, 950, 1116, 490, 491, 342, 343, 1117,
	344, 345, 346, 1118, 1119, 348, 349, 350, 1120, 1121,
	351, 492, 951, 352, 952, 493, 353, 347, 354, 355,
	356, 357, 358, 359, 360, 1122, 361, 362, 494, 363,
	495, 364, 1123, 365, 0, 366, 367, 368, 369, 370,
	371, 496, 372, 373, 1124, 374, 375, 376, 377, 378,
	0, 380, 381, 382, 379, 383, 384, 385, 386, 1125,
	387, 953, 388, 389, 390, 391, 497, 392, 0, 393,
	397, 398, 399, 400, 401, 402, 403, 1126, 410, 411,
	404, 406, 407, 408, 405, 409, 412, 413, 1127, 414,
	394, 395, 415, 954, 416, 498, 417, 418, 1128, 428,
	419, 420, 421, 396, 422, 426, 427, 423, 424, 425,
	499, 1129, 430, 431, 429, 1130, 432, 433, 434, 435,
	436, 273, 437, 1131, 500, 501, 502, 503, 1132, 444,
	1133, 438, 439, 504, 440, 505, 1134, 441, 442, 443,
	0, 445, 446, 1135, 1136, 447, 448, 449, 450, 451,
	453, 1137, 454, 1138, 452, 455, 456, 457, 506, 507,
	508, 1139, 459, 458, 509, 1140, 1141, 1142, 1143, 460,
	461, 510, 462, 463, 464, 1059, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 1066, 221, 1067,
	1068, 1069, 1070, 465, 1071, 1072, 1073, 1074, 222, 223,
	224, 225, 466, 467, 226, 468, 227, 228, 469, 1075,
	229, 230, 231, 232, 233, 234, 1076, 1077, 235, 470,
	471, 472, 1078, 236, 473, 1079, 1064, 1080, 237, 238,
	239, 240, 241, 242, 0, 244, 245, 246, 243, 1081,
	247, 0, 248, 249, 250, 1082, 940, 251, 252, 1083,
	1084, 1086, 1085, 1087, 1088, 1089, 253, 254, 255, 256,
	257, 258, 474, 475, 1090, 259, 1091, 261, 260, 1092,
	262, 1093, 1094, 263, 264, 265, 1095, 266, 1096, 267,
	268, 1097, 476, 269, 270, 272, 274, 271, 275, 276,
	277, 278, 477, 478, 1098, 213, 1099, 0, 0, 0,
	0, 279, 280, 281, 479, 282, 283, 0, 284, 1100,
	285, 1101, 1102, 941, 286, 287, 1103, 288, 480, 1104,
	481, 289, 1105, 290, 291, 292, 293, 482, 483, 484,
	341, 943, 294, 295, 1106, 296, 297, 299, 0, 0,
	0, 214, 298, 300, 307, 1107, 942, 301, 485, 303,
	302, 304, 305, 306, 486, 1108, 487, 1109, 308, 944,
	488, 945, 309, 310, 311, 946, 312, 313, 0, 0,
	314, 315, 316, 317, 1110, 319, 318, 1111, 320, 489,
	947, 321, 322, 948, 1112, 323, 324, 1113, 1114, 325,
	326, 0, 327, 328, 330, 332, 329, 331, 333, 335,
	336, 334, 949, 337, 338, 340, 339, 1115, 215, 950,
	1116, 490, 491, 342, 343, 1117, 344, 345, 346, 1118,
	1119, 348, 349, 350, 1120, 1121, 351, 492, 951, 352,
	952, 493, 353, 347, 354, 355, 356, 357, 358, 359,
	360, 1122, 361, 362, 494, 363, 495, 364, 1123, 365,
	0, 366, 367, 368, 369, 370, 371, 496, 372, 373,
	1124, 374, 375, 376, 377, 378, 0, 380, 381, 382,
	379, 383, 384, 385, 386, 1125, 387, 953, 388, 389,
	390, 391, 497, 392, 0, 393, 397, 398, 399, 400,
	401, 402, 403, 1126, 410, 411, 404, 406, 407, 408,
	405, 409, 412, 413, 1127, 414, 394, 395, 415, 954,
	416, 498, 417, 418, 1128, 428, 419, 420, 421, 396,
	422, 426, 427, 423, 424, 425, 499, 1129, 430, 431,
	429, 1130, 432, 433, 434, 435, 436, 273, 437, 1131,
	500, 501, 502, 503, 1132, 444, 1133, 438, 439, 504,
	440, 505, 1134, 441, 442, 443, 0, 445, 446, 1135,
	1136, 447, 448, 449, 450, 451, 453, 1137, 454, 1138,
	452, 455, 456, 457, 506, 507, 508, 1139, 459, 458,
	509, 1140, 1141, 1142, 1143, 460, 461, 510, 462, 463,
	464, 2037, 0, 882, 839, 840, 841, 837, 838, 851,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 2034, 221, 0, 0, 0,
	0, 931, 856, 0, 0, 0, 222, 223, 224, 225,
	466, 897, 876, 908, 866, 907, 906, 0, 229, 868,
	867, 232, 233, 234, 858, 930, 235, 966, 967, 472,
	0, 236, 937, 0, 920, 0, 237, 238, 239, 240,
	241, 242, 0, 244, 245, 246, 243, 0, 247, 0,
	248, 249, 250, 0, 940, 251, 252, 923, 921, 922,
	927, 925, 924, 926, 253, 254, 255, 256, 911, 258,
	904, 903, 828, 259, 0, 261, 260, 0, 262, 2035,
	0, 263, 902, 265, 0, 266, 0, 267, 268, 0,
	834, 269, 270, 272, 274, 271, 275, 276, 277, 278,
	957, 958, 847, 213, 0, 0, 0, 0, 0, 279,
	280, 281, 901, 899, 900, 0, 284, 0, 285, 0,
	0, 941, 286, 287, 0, 288, 964, 0, 857, 289,
	0, 290, 291, 292, 293, 932, 933, 936, 341, 943,
	294, 295, 0, 296, 297, 878, 0, 0, 0, 214,
	298, 300, 307, 0, 942, 301, 890, 881, 892, 894,
	895, 896, 891, 0, 883, 0, 308, 944, 934, 945,
	309, 310, 311, 946, 916, 917, 0, 0, 314, 315,
	316, 317, 0, 319, 318, 0, 320, 965, 947, 321,
	322, 948, 0, 323, 324, 0, 0, 325, 326, 0,
	327, 328, 330, 332, 329, 331, 333, 335, 870, 334,
	949, 337, 338, 340, 339, 825, 215, 950, 848, 935,
	905, 342, 343, 0, 879, 345, 880, 0, 0, 348,
	349, 350, 0, 0, 351, 492, 951, 352, 952, 959,
	353, 347, 354, 355, 356, 357, 358, 359, 360, 0,
	361, 362, 960, 363, 495, 364, 0, 365, 0, 366,
	367, 368, 369, 370, 371, 898, 372, 373, 0, 374,
	375, 376, 377, 378, 0, 380, 381, 382, 379, 383,
	384, 385, 386, 0, 387, 953, 388, 389, 390, 391,
	835, 392, 0, 393, 397, 398, 399, 400, 401, 402,
	403, 0, 410, 411, 871, 872, 874, 875, 405, 409,
	412, 413, 928, 414, 394, 395, 415, 954, 416, 893,
	873, 418, 0, 428, 419, 420, 421, 396, 422, 426,
	939, 423, 424, 425, 961, 0, 430, 431, 429, 0,
	432, 433, 434, 435, 436, 273, 869, 0, 912, 913,
	914, 915, 0, 444, 0, 438, 439, 962, 440, 963,
	846, 441, 442, 443, 0, 445, 446, 0, 829, 447,
	448, 449, 450, 451, 453, 929, 454, 0, 877, 455,
	456, 457, 506, 909, 956, 2033, 459, 458, 509, 0,
	0, 0, 0, 460, 461, 510, 462, 463, 464, 826,
	0, 0, 0, 0, 0, 0, 0, 824, 0, 0,
	0, 0, 822, 823, 2036, 0, 0, 0, 0, 0,
	0, 852, 2032, 0, 0, 815, 850, 882, 839, 840,
	841, 837, 838, 851, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 931, 856, 0, 0, 0,
	222, 223, 224, 225, 466, 897, 876, 908, 866, 907,
	906, 0, 229, 868, 867, 232, 233, 234, 858, 930,
	235, 966, 967, 472, 0, 236, 937, 0, 920, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 0, 247, 0, 248, 249, 250, 0, 940, 251,
	252, 923, 921, 922, 927, 925, 924, 926, 253, 254,
	255, 256, 911, 258, 904, 903, 828, 259, 0, 261,
	260, 0, 262, 0, 0, 263, 902, 265, 0, 266,
	0, 267, 268, 0, 834, 269, 270, 272, 274, 271,
	275, 276, 277, 278, 957, 958, 847, 213, 0, 0,
	0, 0, 0, 279, 280, 281, 901, 899, 900, 0,
	284, 0, 285, 0, 0, 941, 286, 287, 0, 288,
	964, 0, 857, 289, 0, 290, 291, 292, 293, 932,
	933, 936, 341, 943, 294, 295, 0, 296, 297, 878,
	0, 0, 0, 214, 298, 300, 307, 0, 942, 301,
	890, 881, 892, 894, 895, 896, 891, 0, 883, 0,
	308, 944, 934, 945, 309, 310, 311, 946, 916, 917,
	0, 0, 314, 315, 316, 317, 0, 319, 318, 0,
	320, 965, 947, 321, 322, 948, 0, 323, 324, 0,
	0, 325, 326, 0, 327, 328, 330, 332, 329, 331,
	333, 335, 870, 334, 949, 337, 338, 340, 339, 825,
	215, 950, 848, 935, 905, 342, 343, 0, 879, 345,
	880, 0, 0, 348, 349, 350, 0, 0, 351, 492,
	951, 352, 952, 959, 353, 347, 354, 355, 356, 357,
	358, 359, 360, 0, 361, 362, 960, 363, 495, 364,
	0, 365, 0, 366, 367, 368, 369, 370, 371, 898,
	372, 373, 0, 374, 375, 376, 377, 378, 0, 380,
	381, 382, 379, 383, 384, 385, 386, 0, 387, 953,
	388, 389, 390, 391, 835, 392, 0, 393, 397, 398,
	399, 400, 401, 402, 403, 179, 410, 411, 871, 872,
	874, 875, 405, 409, 412, 413, 928, 414, 394, 395,
	415, 954, 416, 893, 873, 418, 0, 428, 419, 420,
	421, 396, 422, 426, 939, 423, 424, 425, 961, 0,
	430, 431, 429, 181, 432, 433, 434, 435, 436, 273,
	869, 0, 912, 913, 914, 915, 0, 444, 0, 438,
	439, 962, 440, 963, 846, 441, 442, 443, 0, 445,
	446, 0, 829, 447, 448, 449, 450, 451, 453, 929,
	454, 0, 877, 455, 456, 457, 1306, 909, 956, 0,
	459, 458, 509, 0, 0, 0, 173, 460, 461, 510,
	462, 463, 464, 826, 174, 0, 0, 0, 0, 0,
	0, 824, 0, 0, 0, 0, 822, 823, 882, 839,
	840, 841, 837, 838, 851, 1507, 1505, 0, 0, 0,
	850, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 931, 856, 0, 0,
	0, 222, 223, 224, 225, 466, 897, 876, 908, 866,
	907, 906, 0, 229, 868, 867, 232, 233, 234, 858,
	930, 235, 966, 967, 472, 0, 236, 937, 0, 920,
	0, 237, 238, 239, 240, 241, 242, 0, 244, 245,
	246, 243, 0, 247, 0, 248, 249, 250, 0, 940,
	251, 252, 923, 921, 922, 927, 925, 924, 926, 253,
	254, 255, 256, 911, 258, 904, 903, 828, 259, 0,
	261, 260, 0, 262, 0, 0, 263, 902, 265, 0,
	266, 0, 267, 268, 0, 834, 269, 270, 272, 274,
	271, 275, 276, 277, 278, 957, 958, 847, 213, 0,
	0, 0, 0, 0, 279, 280, 281, 901, 899, 900,
	0, 284, 0, 285, 0, 0, 941, 286, 287, 0,
	288, 964, 0, 857, 289, 0, 290, 291, 292, 293,
	932, 933, 936, 341, 943, 294, 295, 0, 296, 297,
	878, 0, 0, 0, 214, 298, 300, 307, 0, 942,
	301, 890, 881, 892, 894, 895, 896, 891, 0, 883,
	0, 308, 944, 934, 945, 309, 310, 311, 946, 916,
	917, 0, 0, 314, 315, 316, 317, 0, 319, 318,
	0, 320, 965, 947, 321, 322, 948, 0, 323, 324,
	0, 0, 325, 326, 0, 327, 328, 330, 332, 329,
	331, 333, 335, 870, 334, 949, 337, 338, 340, 339,
	825, 215, 950, 848, 935, 905, 342, 343, 0, 879,
	345, 880, 0, 0, 348, 349, 350, 0, 0, 351,
	492, 951, 352, 952, 959, 353, 347, 354, 355, 356,
	357, 358, 359, 360, 0, 361, 362, 960, 363, 495,
	364, 0, 365, 0, 366, 367, 368, 369, 370, 371,
	898, 372, 373, 0, 374, 375, 376, 377, 378, 0,
	380, 381, 382, 379, 383, 384, 385, 386, 0, 387,
	953, 388, 389, 390, 391, 835, 392, 0, 393, 397,
	398, 399, 400, 401, 402, 403, 179, 410, 411, 871,
	872, 874, 875, 405, 409, 412, 413, 928, 414, 394,
	395, 415, 954, 416, 893, 873, 418, 0, 428, 419,
	420, 421, 396, 422, 426, 939, 423, 424, 425, 961,
	0, 430, 431, 429, 181, 432, 433, 434, 435, 436,
	273, 869, 0, 912, 913, 914, 915, 0, 444, 0,
	438, 439, 962, 440, 963, 846, 441, 442, 443, 0,
	445, 446, 0, 829, 447, 448, 449, 450, 451, 453,
	929, 454, 0, 877, 455, 456, 457, 1306, 909, 956,
	0, 459, 458, 509, 0, 0, 0, 173, 460, 461,
	510, 462, 463, 464, 826, 174, 0, 0, 0, 0,
	0, 0, 824, 0, 0, 0, 0, 822, 823, 882,
	839, 840, 841, 837, 838, 851, 1507, 2461, 0, 0,
	0, 850, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 931, 856, 0,
	0, 0, 222, 223, 224, 225, 466, 897, 876, 908,
	866, 907, 906, 0, 229, 868, 867, 232, 233, 234,
	858, 930, 235, 966, 967, 472, 0, 236, 937, 0,
	920, 0, 237, 238, 239, 240, 241, 242, 0, 244,
	245, 246, 243, 0, 247, 0, 248, 249, 250, 0,
	940, 251, 252, 923, 921, 922, 927, 925, 924, 926,
	253, 254, 255, 256, 911, 258, 904, 903, 828, 259,
	0, 261, 260, 0, 262, 0, 0, 263, 902, 265,
	0, 266, 0, 267, 268, 0, 834, 269, 270, 272,
	274, 271, 275, 276, 277, 278, 957, 958, 847, 213,
	0, 0, 0, 0, 0, 279, 280, 281, 901, 899,
	900, 0, 284, 0, 285, 0, 0, 941, 286, 287,
	0, 288, 964, 0, 857, 289, 0, 290, 291, 292,
	293, 932, 933, 936, 341, 943, 294, 295, 0, 296,
	297, 878, 0, 0, 0, 214, 298, 300, 307, 0,
	942, 301, 890, 881, 892, 894, 895, 896, 891, 0,
	883, 0, 308, 944, 934, 945, 309, 310, 311, 946,
	916, 917, 0, 0, 314, 315, 316, 317, 0, 319,
	318, 0, 320, 965, 947, 321, 322, 948, 0, 323,
	324, 0, 0, 325, 326, 0, 327, 328, 330, 332,
	329, 331, 333, 335, 870, 334, 949, 337, 338, 340,
	339, 825, 215, 950, 848, 935, 905, 342, 343, 0,
	879, 345, 880, 0, 0, 348, 349, 350, 0, 0,
	351, 492, 951, 352, 952, 959, 353, 347, 354, 355,
	356, 357, 358, 359, 360, 0, 361, 362, 960, 363,
	495, 364, 0, 365, 0, 366, 367, 368, 369, 370,
	371, 898, 372, 373, 0, 374, 375, 376, 377, 378,
	0, 380, 381, 382, 379, 383, 384, 385, 386, 0,
	387, 953, 388, 389, 390, 391, 835, 392, 0, 393,
	397, 398, 399, 400, 401, 402, 403, 179, 410, 411,
	871, 872, 874, 875, 405, 409, 412, 413, 928, 414,
	394, 395, 415, 954, 416, 893, 873, 418, 0, 428,
	419, 420, 421, 396, 422, 426, 939, 423, 424, 425,
	961, 0, 430, 431, 429, 181, 432, 433, 434, 435,
	436, 273, 869, 0, 912, 913, 914, 915, 0, 444,
	0, 438, 439, 962, 440, 963, 846, 441, 442, 443,
	0, 445, 446, 0, 829, 447, 448, 449, 450, 451,
	453, 929, 454, 0, 877, 455, 456, 457, 1306, 909,
	956, 0, 459, 458, 509, 0, 0, 0, 173, 460,
	461, 510, 462, 463, 464, 826, 174, 0, 0, 0,
	0, 0, 0, 824, 0, 0, 0, 0, 822, 823,
	882, 839, 840, 841, 837, 838, 851, 1507, 1505, 0,
	0, 0, 850, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 931, 856,
	0, 0, 0, 222, 223, 224, 225, 466, 897, 876,
	908, 866, 907, 906, 2122, 229, 868, 867, 232, 233,
	234, 858, 930, 235, 966, 967, 472, 0, 236, 937,
	0, 920, 0, 237, 238, 239, 240, 241, 242, 0,
	244, 245, 246, 243, 0, 247, 0, 248, 249, 250,
	0, 940, 251, 252, 923, 921, 922, 927, 925, 924,
	926, 253, 254, 255, 256, 911, 258, 904, 903, 828,
	259, 0, 261, 260, 0, 262, 0, 0, 263, 902,
	265, 0, 266, 0, 267, 268, 0, 834, 269, 270,
	272, 274, 271, 275, 276, 277, 278, 957, 958, 847,
	213, 0, 0, 0, 0, 0, 279, 280, 281, 901,
	899, 900, 0, 284, 0, 285, 0, 2127, 941, 286,
	287, 0, 288, 964, 0, 857, 289, 0, 290, 291,
	292, 293, 932, 933, 936, 341, 943, 294, 295, 0,
	296, 297, 878, 0, 0, 0, 214, 298, 300, 307,
	0, 942, 301, 890, 881, 892, 894, 895, 896, 891,
	0, 883, 0, 308, 944, 934, 945, 309, 310, 311,
	946, 916, 917, 0, 0, 314, 315, 316, 317, 0,
	319, 318, 2123, 320, 965, 947, 321, 322, 948, 0,
	323, 324, 0, 0, 325, 326, 0, 327, 328, 330,
	332, 329, 331, 333, 335, 870, 334, 949, 337, 338,
	340, 339, 825, 215, 950, 848, 935, 905, 342, 343,
	0, 879, 345, 880, 0, 0, 348, 349, 350, 0,
	0, 351, 492, 951, 352, 952, 959, 353, 347, 354,
	355, 356, 357, 358, 359, 360, 0, 361, 362, 960,
	363, 495, 364, 0, 365, 0, 366, 367, 368, 369,
	370, 371, 898, 372, 373, 0, 374, 375, 376, 377,
	378, 0, 380, 381, 382, 379, 383, 384, 385, 386,
	0, 387, 953, 388, 389, 390, 391, 835, 392, 0,
	393, 397, 398, 399, 400, 401, 402, 403, 0, 410,
	411, 871, 872, 874, 875, 405, 409, 412, 413, 928,
	414, 394, 395, 415, 954, 416, 893, 873, 418, 0,
	428, 419, 420, 421, 396, 422, 426, 939, 423, 424,
	425, 961, 0, 430, 431, 429, 0, 432, 433, 434,
	435, 436, 273, 869, 0, 912, 913, 914, 915, 0,
	444, 2124, 438, 439, 962, 440, 963, 846, 441, 442,
	443, 0, 445, 446, 0, 829, 447, 448, 449, 450,
	451, 453, 929, 454, 0, 877, 455, 456, 457, 506,
	909, 956, 0, 459, 458, 509, 0, 0, 0, 0,
	460, 461, 510, 462, 463, 464, 826, 0, 0, 0,
	0, 0, 0, 0, 824, 0, 0, 0, 0, 822,
	823, 0, 0, 0, 0, 0, 0, 0, 852, 0,
	0, 0, 1369, 850, 882, 839, 840, 841, 837, 838,
	851, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 931, 856, 0, 0, 0, 222, 223, 224,
	225, 466, 897, 876, 908, 866, 907, 906, 0, 229,
	868, 867, 232, 233, 234, 858, 930, 235, 966, 967,
	472, 0, 236, 937, 0, 920, 0, 237, 238, 239,
	240, 241, 242, 0, 244, 245, 246, 243, 0, 247,
	0, 248, 249, 250, 0, 940, 251, 252, 923, 921,
	922, 927, 925, 924, 926, 253, 254, 255, 256, 911,
	258, 904, 903, 828, 259, 0, 261, 260, 0, 262,
	0, 0, 263, 902, 265, 0, 266, 0, 267, 268,
	0, 834, 269, 270, 272, 274, 271, 275, 276, 277,
	278, 957, 958, 847, 213, 0, 0, 0, 0, 0,
	279, 280, 281, 901, 899, 900, 0, 284, 0, 285,
	0, 0, 941, 286, 287, 0, 288, 964, 0, 857,
	289, 0, 290, 291, 292, 293, 932, 933, 936, 341,
	943, 294, 295, 0, 296, 297, 878, 0, 0, 0,
	214, 298, 300, 307, 0, 942, 301, 890, 881, 892,
	894, 895, 896, 891, 0, 883, 0, 308, 944, 934,
	945, 309, 310, 311, 946, 916, 917, 0, 0, 314,
	315, 316, 317, 0, 319, 318, 0, 320, 965, 947,
	321, 322, 948, 0, 323, 324, 0, 0, 325, 326,
	0, 327, 328, 330, 332, 329, 331, 333, 335, 870,
	334, 949, 337, 338, 340, 339, 825, 215, 950, 848,
	935, 905, 342, 343, 0, 879, 345, 880, 0, 0,
	348, 349, 350, 0, 0, 351, 492, 951, 352, 952,
	959, 353, 347, 354, 355, 356, 357, 358, 359, 360,
	0, 361, 362, 960, 363, 495, 364, 0, 365, 0,
	366, 367, 368, 369, 370, 371, 898, 372, 373, 0,
	374, 375, 376, 377, 378, 0, 380, 381, 382, 379,
	383, 384, 385, 386, 0, 387, 953, 388, 389, 390,
	391, 835, 392, 0, 393, 397, 398, 399, 400, 401,
	402, 403, 0, 410, 411, 871, 872, 874, 875, 405,
	409, 412, 413, 928, 414, 394, 395, 415, 954, 416,
	893, 873, 418, 0, 428, 419, 420, 421, 396, 422,
	426, 939, 423, 424, 425, 961, 0, 430, 431, 429,
	0, 432, 433, 434, 435, 436, 273, 869, 0, 912,
	913, 914, 915, 0, 444, 0, 438, 439, 962, 440,
	963, 846, 441, 442, 443, 0, 445, 446, 0, 829,
	447, 448, 449, 450, 451, 453, 929, 454, 0, 877,
	455, 456, 457, 506, 909, 956, 0, 459, 458, 509,
	1368, 0, 0, 0, 460, 461, 510, 462, 463, 464,
	826, 0, 0, 0, 0, 0, 0, 0, 824, 0,
	0, 0, 0, 822, 823, 0, 0, 0, 0, 0,
	0, 0, 852, 0, 0, 0, 818, 850, 882, 839,
	840, 841, 837, 838, 851, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 931, 856, 0, 0,
	0, 222, 223, 224, 225, 466, 897, 876, 908, 866,
	907, 906, 0, 229, 868, 867, 232, 233, 234, 858,
	930, 235, 966, 967, 472, 0, 236, 937, 0, 920,
	0, 237, 238, 239, 240, 241, 242, 0, 244, 245,
	246, 243, 0, 247, 0, 248, 249, 250, 0, 940,
	251, 252, 923, 921, 922, 927, 925, 924, 926, 253,
	254, 255, 256, 911, 258, 904, 903, 828, 259, 0,
	261, 260, 0, 262, 0, 0, 263, 902, 265, 0,
	266, 0, 267, 268, 0, 834, 269, 270, 272, 274,
	271, 275, 276, 277, 278, 957, 958, 847, 213, 0,
	0, 0, 0, 0, 279, 280, 281, 901, 899, 900,
	0, 284, 0, 285, 0, 0, 941, 286, 287, 0,
	288, 964, 0, 857, 289, 0, 290, 291, 292, 293,
	932, 933, 936, 341, 943, 294, 295, 0, 296, 297,
	878, 0, 0, 0, 214, 298, 300, 307, 0, 942,
	301, 890, 881, 892, 894, 895, 896, 891, 0, 883,
	0, 308, 944, 934, 945, 309, 310, 311, 946, 916,
	917, 0, 0, 314, 315, 316, 317, 0, 319, 318,
	0, 320, 965, 947, 321, 322, 948, 0, 323, 324,
	0, 0, 325, 326, 0, 327, 328, 330, 332, 329,
	331, 333, 335, 870, 334, 949, 337, 338, 340, 339,
	825, 215, 950, 848, 935, 905, 342, 343, 0, 879,
	345, 880, 830, 0, 348, 349, 350, 0, 0, 351,
	492, 951, 352, 952, 959, 353, 347, 354, 355, 356,
	357, 358, 359, 360, 0, 361, 362, 960, 363, 495,
	364, 0, 365, 0, 366, 367, 368, 369, 370, 371,
	898, 372, 373, 0, 374, 375, 376, 377, 378, 0,
	380, 381, 382, 379, 383, 384, 385, 386, 0, 387,
	953, 388, 389, 390, 391, 835, 392, 0, 393, 397,
	398, 399, 400, 401, 402, 403, 0, 410, 411, 871,
	872, 874, 875, 405, 409, 412, 413, 928, 414, 394,
	395, 415, 954, 416, 893, 873, 418, 0, 428, 419,
	420, 421, 396, 422, 426, 939, 423, 424, 425, 961,
	0, 430, 431, 429, 0, 432, 433, 434, 435, 436,
	273, 869, 0, 912, 913, 914, 915, 0, 444, 0,
	438, 439, 962, 440, 963, 846, 441, 442, 443, 0,
	445, 446, 0, 829, 447, 448, 449, 450, 451, 453,
	929, 454, 0, 877, 455, 456, 457, 506, 909, 956,
	0, 459, 458, 509, 0, 0, 0, 0, 460, 461,
	510, 462, 463, 464, 826, 0, 0, 0, 0, 0,
	0, 0, 824, 0, 0, 0, 0, 822, 823, 882,
	839, 840, 841, 837, 838, 851, 852, 0, 0, 0,
	0, 850, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 931, 856, 0,
	0, 0, 222, 223, 224, 225, 466, 897, 876, 908,
	866, 907, 906, 0, 229, 868, 867, 232, 233, 234,
	858, 930, 235, 966, 967, 472, 0, 236, 937, 0,
	920, 0, 237, 238, 239, 240, 241, 242, 0, 244,
	245, 246, 243, 0, 247, 0, 248, 3416, 250, 0,
	940, 251, 252, 923, 921, 922, 927, 925, 924, 926,
	253, 254, 255, 256, 911, 258, 904, 903, 828, 259,
	0, 261, 260, 0, 262, 0, 0, 263, 902, 265,
	0, 266, 0, 267, 268, 0, 834, 269, 270, 272,
	274, 271, 275, 276, 277, 278, 957, 958, 847, 213,
	0, 0, 0, 0, 0, 279, 280, 281, 901, 899,
	900, 0, 284, 0, 285, 0, 0, 941, 286, 287,
	0, 288, 964, 0, 857, 289, 0, 290, 291, 292,
	293, 932, 933, 936, 341, 943, 294, 295, 0, 296,
	297, 878, 0, 0, 0, 214, 298, 300, 307, 0,
	942, 301, 890, 881, 892, 894, 895, 896, 891, 0,
	883, 0, 308, 944, 934, 945, 309, 310, 311, 946,
	916, 917, 0, 0, 314, 315, 316, 317, 0, 319,
	318, 0, 320, 965, 947, 321, 322, 948, 0, 323,
	324, 0, 0, 325, 326, 0, 327, 328, 330, 332,
	329, 331, 333, 335, 870, 334, 949, 337, 338, 340,
	339, 825, 215, 950, 848, 935, 905, 342, 343, 0,
	879, 345, 880, 830, 0, 348, 349, 350, 0, 0,
	351, 492, 951, 352, 952, 959, 353, 347, 354, 355,
	356, 357, 358, 359, 360, 0, 361, 362, 960, 363,
	495, 364, 0, 365, 0, 366, 367, 368, 369, 370,
	371, 898, 372, 373, 0, 374, 375, 376, 377, 378,
	0, 380, 381, 382, 379, 383, 384, 385, 386, 0,
	387, 953, 388, 389, 390, 391, 835, 392, 0, 393,
	397, 398, 399, 400, 401, 402, 403, 0, 410, 411,
	871, 872, 874, 875, 405, 409, 412, 413, 928, 414,
	394, 395, 415, 954, 416, 893, 873, 418, 0, 428,
	419, 420, 421, 396, 422, 426, 939, 423, 424, 425,
	961, 0, 430, 431, 429, 0, 432, 433, 434, 435,
	436, 273, 869, 0, 912, 913, 914, 915, 0, 444,
	0, 438, 439, 962, 440, 963, 846, 441, 442, 443,
	0, 445, 446, 0, 829, 447, 448, 449, 450, 451,
	453, 929, 454, 0, 877, 455, 456, 457, 506, 909,
	956, 0, 459, 458, 509, 0, 0, 0, 0, 460,
	461, 510, 462, 463, 464, 826, 0, 0, 0, 0,
	0, 0, 0, 824, 0, 0, 0, 0, 822, 823,
	882, 839, 840, 841, 837, 838, 851, 852, 0, 0,
	0, 0, 850, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 931, 856,
	0, 0, 0, 222, 223, 224, 225, 466, 897, 876,
	908, 866, 907, 906, 0, 229, 868, 867, 232, 233,
	234, 858, 930, 235, 966, 967, 472, 0, 236, 937,
	0, 920, 0, 237, 238, 239, 240, 241, 242, 0,
	244, 245, 246, 243, 0, 247, 0, 248, 3275, 250,
	0, 940, 251, 252, 923, 921, 922, 927, 925, 924,
	926, 253, 254, 255, 256, 911, 258, 904, 903, 828,
	259, 0, 261, 260, 0, 262, 0, 0, 263, 902,
	265, 0, 266, 0, 267, 268, 0, 834, 269, 270,
	272, 274, 271, 275, 276, 277, 278, 957, 958, 847,
	213, 0, 0, 0, 0, 0, 279, 280, 281, 901,
	899, 900, 0, 284, 0, 285, 0, 0, 941, 286,
	287, 0, 288, 964, 0, 857, 289, 0, 290, 291,
	292, 293, 932, 933, 936, 341, 943, 294, 295, 0,
	296, 297, 878, 0, 0, 0, 214, 298, 300, 307,
	0, 942, 301, 890, 881, 892, 894, 895, 896, 891,
	0, 883, 0, 308, 944, 934, 945, 309, 310, 311,
	946, 916, 917, 0, 0, 314, 315, 316, 317, 0,
	319, 318, 0, 320, 965, 947, 321, 322, 948, 0,
	323, 324, 0, 0, 325, 326, 0, 327, 328, 330,
	332, 329, 331, 333, 335, 870, 334, 949, 337, 338,
	340, 339, 825, 215, 950, 848, 935, 905, 342, 343,
	0, 879, 345, 880, 830, 0, 348, 349, 350, 0,
	0, 351, 492, 951, 352, 952, 959, 353, 347, 354,
	355, 356, 357, 358, 359, 360, 0, 361, 362, 960,
	363, 495, 364, 0, 365, 0, 366, 367, 368, 369,
	370, 371, 898, 372, 373, 0, 374, 375, 376, 377,
	378, 0, 380, 381, 382, 379, 383, 384, 385, 386,
	0, 387, 953, 388, 389, 390, 391, 835, 392, 0,
	393, 397, 398, 399, 400, 401, 402, 403, 0, 410,
	411, 871, 872, 874, 875, 405, 409, 412, 413, 928,
	414, 394, 395, 415, 954, 416, 893, 873, 418, 0,
	428, 419, 420, 421, 396, 422, 426, 939, 423, 424,
	425, 961, 0, 430, 431, 429, 0, 432, 433, 434,
	435, 436, 273, 869, 0, 912, 913, 914, 915, 0,
	444, 0, 438, 439, 962, 440, 963, 846, 441, 442,
	443, 0, 445, 446, 0, 829, 447, 448, 449, 450,
	451, 453, 929, 454, 0, 877, 455, 456, 457, 506,
	909, 956, 0, 459, 458, 509, 0, 0, 0, 0,
	460, 461, 510, 462, 463, 464, 826, 0, 0, 0,
	0, 0, 0, 0, 824, 0, 0, 0, 0, 822,
	823, 882, 839, 840, 841, 837, 838, 851, 852, 0,
	0, 0, 0, 850, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 931,
	856, 0, 0, 0, 222, 223, 224, 225, 466, 897,
	876, 908, 866, 907, 906, 0, 229, 868, 867, 232,
	233, 234, 858, 930, 235, 966, 967, 472, 0, 236,
	937, 0, 920, 0, 237, 238, 239, 240, 241, 242,
	0, 244, 245, 246, 243, 0, 247, 0, 248, 249,
	250, 0, 940, 251, 252, 923, 921, 922, 927, 925,
	924, 926, 253, 254, 255, 256, 911, 258, 904, 903,
	828, 259, 0, 261, 260, 0, 262, 0, 0, 263,
	902, 265, 0, 266, 0, 267, 268, 0, 834, 269,
	270, 272, 274, 271, 275, 276, 277, 278, 957, 958,
	847, 213, 0, 0, 0, 0, 0, 279, 280, 281,
	901, 899, 900, 0, 284, 0, 285, 0, 0, 941,
	286, 287, 0, 288, 964, 0, 857, 289, 0, 290,
	291, 292, 293, 932, 933, 936, 341, 943, 294, 295,
	0, 296, 297, 878, 0, 0, 0, 214, 298, 300,
	307, 0, 942, 301, 890, 881, 892, 894, 895, 896,
	891, 0, 883, 0, 308, 944, 934, 945, 309, 310,
	311, 946, 916, 917, 0, 0, 314, 315, 316, 317,
	0, 319, 318, 0, 320, 965, 947, 321, 322, 948,
	0, 323, 324, 0, 0, 325, 326, 0, 327, 328,
	330, 332, 329, 331, 333, 335, 870, 334, 949, 337,
	338, 340, 339, 825, 3008, 950, 848, 935, 905, 342,
	343, 0, 879, 345, 880, 0, 0, 348, 349, 350,
	0, 0, 351, 492, 951, 352, 952, 959, 353, 347,
	354, 355, 356, 357, 358, 359, 360, 0, 361, 362,
	960, 363, 495, 364, 0, 365, 0, 366, 367, 368,
	369, 370, 371, 898, 372, 373, 0, 374, 375, 376,
	377, 378, 0, 380, 381, 382, 379, 383, 384, 385,
	386, 0, 387, 953, 388, 389, 390, 391, 835, 392,
	0, 393, 397, 398, 399, 400, 401, 402, 403, 0,
	410, 411, 871, 872, 874, 875, 405, 409, 412, 413,
	928, 414, 394, 395, 415, 954, 416, 893, 873, 418,
	0, 428, 419, 420, 421, 396, 422, 426, 939, 423,
	424, 425, 961, 0, 430, 431, 429, 0, 432, 433,
	434, 435, 436, 273, 869, 0, 912, 913, 914, 915,
	0, 444, 0, 438, 439, 962, 440, 963, 846, 441,
	442, 443, 0, 445, 446, 0, 829, 447, 448, 449,
	450, 451, 453, 929, 454, 0, 877, 455, 456, 457,
	506, 909, 956, 0, 459, 458, 509, 0, 0, 0,
	0, 460, 461, 510, 462, 463, 464, 826, 0, 0,
	0, 0, 0, 0, 0, 824, 0, 0, 0, 0,
	822, 823, 1567, 0, 0, 0, 0, 0, 0, 852,
	0, 0, 0, 0, 850, 882, 839, 840, 841, 837,
	838, 851, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 931, 856, 0, 0, 0, 222, 223,
	224, 225, 466, 897, 876, 908, 866, 907, 906, 0,
	229, 868, 867, 232, 233, 234, 858, 930, 235, 966,
	967, 472, 0, 236, 937, 0, 920, 0, 237, 238,
	239, 240, 241, 242, 0, 244, 245, 246, 243, 0,
	247, 0, 248, 249, 250, 0, 940, 251, 252, 923,
	921, 922, 927, 925, 924, 926, 253, 254, 255, 256,
	911, 258, 904, 903, 828, 259, 0, 261, 260, 0,
	262, 0, 0, 263, 902, 265, 0, 266, 0, 267,
	268, 0, 834, 269, 270, 272, 274, 271, 275, 276,
	277, 278, 957, 958, 847, 213, 0, 0, 0, 0,
	0, 279, 280, 281, 901, 899, 900, 0, 284, 0,
	285, 0, 0, 941, 286, 287, 0, 288, 964, 0,
	857, 289, 0, 290, 291, 292, 293, 932, 933, 936,
	341, 943, 294, 295, 0, 296, 297, 878, 0, 0,
	0, 214, 298, 300, 307, 0, 942, 301, 890, 881,
	892, 894, 895, 896, 891, 0, 883, 0, 308, 944,
	934, 945, 309, 310, 311, 946, 916, 917, 0, 0,
	314, 315, 316, 317, 0, 319, 318, 0, 320, 965,
	947, 321, 322, 948, 0, 323, 324, 0, 0, 325,
	326, 0, 327, 328, 330, 332, 329, 331, 333, 335,
	870, 334, 949, 337, 338, 340, 339, 825, 215, 950,
	848, 935, 905, 342, 343, 0, 879, 345, 880, 0,
	0, 348, 349, 350, 0, 0, 351, 492, 951, 352,
	952, 959, 353, 347, 354, 355, 356, 357, 358, 359,
	360, 0, 361, 362, 960, 363, 495, 364, 0, 365,
	0, 366, 367, 368, 369, 370, 371, 898, 372, 373,
	0, 374, 375, 376, 377, 378, 0, 380, 381, 382,
	379, 383, 384, 385, 386, 0, 387, 953, 388, 389,
	390, 391, 835, 392, 0, 393, 397, 398, 399, 400,
	401, 402, 403, 0, 410, 411, 871, 872, 874, 875,
	405, 409, 412, 413, 928, 414, 394, 395, 415, 954,
	416, 893, 873, 418, 0, 428, 419, 420, 421, 396,
	422, 426, 939, 423, 424, 425, 961, 0, 430, 431,
	429, 0, 432, 433, 434, 435, 436, 273, 869, 0,
	912, 913, 914, 915, 0, 444, 0, 438, 439, 962,
	440, 963, 846, 441, 442, 443, 0, 445, 446, 0,
	829, 447, 448, 449, 450, 451, 453, 929, 454, 0,
	877, 455, 456, 457, 506, 909, 956, 2816, 459, 458,
	509, 0, 0, 0, 0, 460, 461, 510, 462, 463,
	464, 826, 0, 0, 0, 0, 0, 0, 0, 824,
	0, 0, 0, 0, 822, 823, 882, 839, 840, 841,
	837, 838, 851, 852, 0, 0, 0, 0, 850, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 931, 856, 0, 0, 0, 222,
	223, 224, 225, 466, 897, 876, 908, 866, 907, 906,
	0, 229, 868, 867, 232, 233, 234, 858, 930, 235,
	966, 967, 472, 0, 236, 937, 0, 920, 0, 237,
	238, 239, 240, 241, 242, 0, 244, 245, 246, 243,
	0, 247, 0, 248, 249, 250, 0, 940, 251, 252,
	923, 921, 922, 927, 925, 924, 926, 253, 254, 255,
	256, 911, 258, 904, 903, 828, 259, 0, 261, 260,
	0, 262, 0, 0, 263, 902, 265, 0, 266, 0,
	267, 268, 0, 834, 269, 270, 272, 274, 271, 275,
	276, 277, 278, 957, 958, 847, 213, 0, 0, 0,
	0, 0, 279, 280, 281, 901, 899, 900, 0, 284,
	0, 285, 0, 0, 941, 286, 287, 0, 288, 964,
	0, 857, 289, 0, 290, 291, 292, 293, 932, 933,
	936, 341, 943, 294, 295, 0, 296, 297, 878, 0,
	0, 0, 1951, 298, 300, 307, 0, 942, 301, 890,
	881, 892, 894, 895, 896, 891, 0, 883, 0, 308,
	944, 934, 945, 309, 310, 311, 946, 916, 917, 0,
	0, 314, 315, 316, 317, 0, 319, 318, 0, 320,
	965, 947, 321, 322, 948, 0, 323, 324, 0, 0,
	325, 326, 0, 327, 328, 330, 332, 329, 331, 333,
	335, 870, 334, 949, 337, 338, 340, 339, 825, 215,
	950, 848, 935, 905, 342, 343, 0, 879, 345, 880,
	0, 0, 348, 349, 350, 0, 0, 351, 492, 951,
	352, 952, 959, 353, 347, 354, 355, 356, 357, 358,
	359, 360, 0, 361, 362, 960, 363, 495, 364, 1950,
	365, 0, 366, 367, 368, 369, 370, 371, 898, 372,
	373, 0, 374, 375, 376, 377, 378, 0, 380, 381,
	382, 379, 383, 384, 385, 386, 0, 387, 953, 388,
	389, 390, 391, 835, 392, 0, 393, 397, 398, 399,
	400, 401, 402, 403, 0, 410, 411, 871, 872, 874,
	875, 405, 409, 412, 413, 928, 414, 394, 395, 415,
	954, 416, 893, 873, 418, 0, 428, 419, 420, 421,
	396, 422, 426, 939, 423, 424, 425, 961, 0, 430,
	431, 429, 0, 432, 433, 434, 435, 436, 273, 869,
	0, 912, 913, 914, 915, 0, 444, 0, 438, 439,
	962, 440, 963, 846, 441, 442, 443, 0, 445, 446,
	0, 829, 447, 448, 449, 450, 451, 453, 929, 454,
	0, 877, 455, 456, 457, 506, 909, 956, 0, 459,
	458, 509, 0, 0, 0, 0, 460, 461, 510, 462,
	463, 464, 826, 0, 0, 0, 0, 0, 0, 0,
	824, 0, 0, 0, 0, 822, 823, 882, 839, 840,
	841, 837, 838, 851, 852, 0, 0, 0, 0, 850,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 931, 856, 0, 0, 0,
	222, 223, 224, 225, 466, 897, 876, 908, 866, 907,
	906, 0, 229, 868, 867, 232, 233, 234, 858, 930,
	235, 966, 967, 472, 0, 236, 937, 0, 920, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 0, 247, 0, 248, 249, 250, 0, 940, 251,
	252, 923, 921, 922, 927, 925, 924, 926, 253, 254,
	255, 256, 911, 258, 904, 903, 828, 259, 0, 261,
	260, 0, 262, 0, 0, 263, 902, 265, 0, 266,
	0, 267, 268, 0, 834, 269, 270, 272, 274, 271,
	275, 276, 277, 278, 957, 958, 847, 213, 0, 0,
	0, 0, 0, 279, 280, 281, 901, 899, 900, 0,
	284, 0, 285, 0, 0, 941, 286, 287, 0, 288,
	964, 0, 857, 289, 0, 290, 291, 292, 293, 932,
	933, 936, 341, 943, 294, 295, 0, 296, 297, 878,
	0, 0, 0, 214, 298, 300, 307, 0, 942, 301,
	890, 881, 892, 894, 895, 896, 891, 0, 883, 0,
	308, 944, 934, 945, 309, 310, 311, 946, 916, 917,
	0, 0, 314, 315, 316, 317, 0, 319, 318, 0,
	320, 965, 947, 321, 322, 948, 0, 323, 324, 0,
	0, 325, 326, 0, 327, 328, 330, 332, 329, 331,
	333, 335, 870, 334, 949, 337, 338, 340, 339, 825,
	215, 950, 848, 935, 905, 342, 343, 0, 879, 345,
	880, 830, 0, 348, 349, 350, 0, 0, 351, 492,
	951, 352, 952, 959, 353, 347, 354, 355, 356, 357,
	358, 359, 360, 0, 361, 362, 960, 363, 495, 364,
	0, 365, 0, 366, 367, 368, 369, 370, 371, 898,
	372, 373, 0, 374, 375, 376, 377, 378, 0, 380,
	381, 382, 379, 383, 384, 385, 386, 0, 387, 953,
	388, 389, 390, 391, 835, 392, 0, 393, 397, 398,
	399, 400, 401, 402, 403, 0, 410, 411, 871, 872,
	874, 875, 405, 409, 412, 413, 928, 414, 394, 395,
	415, 954, 416, 893, 873, 418, 0, 428, 419, 420,
	421, 396, 422, 426, 939, 423, 424, 425, 961, 0,
	430, 431, 429, 0, 432, 433, 434, 435, 436, 273,
	869, 0, 912, 913, 914, 915, 0, 444, 0, 438,
	439, 962, 440, 963, 846, 441, 442, 443, 0, 445,
	446, 0, 829, 447, 448, 449, 450, 451, 453, 929,
	454, 0, 877, 455, 456, 457, 506, 909, 956, 0,
	459, 458, 509, 0, 0, 0, 0, 460, 461, 510,
	462, 463, 464, 826, 0, 0, 0, 0, 0, 0,
	0, 824, 0, 0, 0, 0, 822, 823, 882, 839,
	840, 841, 837, 838, 851, 852, 0, 0, 0, 0,
	850, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 931, 856, 0, 0,
	0, 222, 223, 224, 225, 466, 897, 876, 908, 866,
	907, 906, 0, 229, 868, 867, 232, 233, 234, 858,
	930, 235, 966, 967, 472, 0, 236, 937, 0, 920,
	0, 237, 238, 239, 240, 241, 242, 0, 244, 245,
	246, 243, 0, 247, 0, 248, 249, 250, 0, 940,
	251, 252, 923, 921, 922, 927, 925, 924, 926, 253,
	254, 255, 256, 911, 258, 904, 903, 828, 259, 0,
	261, 260, 0, 262, 0, 0, 263, 902, 265, 0,
	266, 0, 267, 268, 0, 834, 269, 270, 272, 274,
	271, 275, 276, 277, 278, 957, 958, 847, 213, 0,
	0, 0, 0, 0, 279, 280, 281, 901, 899, 900,
	0, 284, 0, 285, 0, 0, 941, 286, 287, 0,
	288, 964, 0, 857, 289, 0, 290, 291, 292, 293,
	932, 933, 936, 341, 943, 294, 295, 0, 296, 297,
	878, 0, 0, 0, 214, 298, 300, 307, 0, 942,
	301, 890, 881, 892, 894, 895, 896, 891, 0, 883,
	0, 308, 944, 934, 945, 309, 310, 311, 946, 916,
	917, 0, 0, 314, 315, 316, 317, 0, 319, 318,
	0, 320, 965, 947, 321, 322, 948, 0, 323, 324,
	0, 0, 325, 326, 0, 327, 328, 330, 332, 329,
	331, 333, 335, 870, 334, 949, 337, 338, 340, 339,
	825, 215, 950, 848, 935, 905, 342, 343, 0, 879,
	345, 880, 0, 0, 348, 349, 350, 0, 0, 351,
	492, 951, 352, 952, 959, 353, 347, 354, 355, 356,
	357, 358, 359, 360, 0, 361, 362, 960, 363, 495,
	364, 0, 365, 0, 366, 367, 368, 369, 370, 371,
	898, 372, 373, 0, 374, 375, 376, 377, 378, 0,
	380, 381, 382, 379, 383, 384, 385, 386, 0, 387,
	953, 388, 389, 390, 391, 835, 392, 0, 393, 397,
	398, 399, 400, 401, 402, 403, 0, 410, 411, 871,
	872, 874, 875, 405, 409, 412, 413, 928, 414, 394,
	395, 415, 954, 416, 893, 873, 418, 0, 428, 419,
	420, 421, 396, 422, 426, 939, 423, 424, 425, 961,
	0, 430, 431, 429, 0, 432, 433, 434, 435, 436,
	273, 869, 0, 912, 913, 914, 915, 0, 444, 0,
	438, 439, 962, 440, 963, 846, 441, 442, 443, 0,
	445, 446, 0, 829, 447, 448, 449, 450, 451, 453,
	929, 454, 0, 877, 455, 456, 457, 506, 909, 956,
	0, 459, 458, 509, 0, 0, 0, 0, 460, 461,
	510, 462, 463, 464, 826, 0, 0, 0, 0, 0,
	0, 0, 824, 0, 0, 0, 0, 822, 823, 1567,
	0, 0, 0, 0, 0, 0, 852, 0, 0, 0,
	0, 850, 882, 839, 840, 841, 837, 838, 851, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	931, 856, 0, 0, 0, 222, 223, 224, 225, 466,
	897, 876, 908, 866, 907, 906, 0, 229, 868, 867,
	232, 233, 234, 858, 930, 235, 966, 967, 472, 0,
	236, 937, 0, 920, 0, 237, 238, 239, 240, 241,
	242, 0, 244, 245, 246, 243, 0, 247, 0, 248,
	249, 250, 0, 940, 251, 252, 923, 921, 922, 927,
	925, 924, 926, 253, 254, 255, 256, 911, 258, 904,
	903, 828, 259, 0, 261, 260, 0, 262, 0, 0,
	263, 902, 265, 0, 266, 0, 267, 268, 0, 834,
	269, 270, 272, 274, 271, 275, 276, 277, 278, 957,
	958, 847, 213, 0, 0, 0, 0, 0, 279, 280,
	281, 901, 899, 900, 0, 284, 0, 285, 0, 2127,
	941, 286, 287, 0, 288, 964, 0, 857, 289, 0,
	290, 291, 292, 293, 932, 933, 936, 341, 943, 294,
	295, 0, 296, 297, 878, 0, 0, 0, 214, 298,
	300, 307, 0, 942, 301, 890, 881, 892, 894, 895,
	896, 891, 0, 883, 0, 308, 944, 934, 945, 309,
	310, 311, 946, 916, 917, 0, 0, 314, 315, 316,
	317, 0, 319, 318, 0, 320, 965, 947, 321, 322,
	948, 0, 323, 324, 0, 0, 325, 326, 0, 327,
	328, 330, 332, 329, 331, 333, 335, 870, 334, 949,
	337, 338, 340, 339, 825, 215, 950, 848, 935, 905,
	342, 343, 0, 879, 345, 880, 0, 0, 348, 349,
	350, 0, 0, 351, 492, 951, 352, 952, 959, 353,
	347, 354, 355, 356, 357, 358, 359, 360, 0, 361,
	362, 960, 363, 495, 364, 0, 365, 0, 366, 367,
	368, 369, 370, 371, 898, 372, 373, 0, 374, 375,
	376, 377, 378, 0, 380, 381, 382, 379, 383, 384,
	385, 386, 0, 387, 953, 388, 389, 390, 391, 835,
	392, 0, 393, 397, 398, 399, 400, 401, 402, 403,
	0, 410, 411, 871, 872, 874, 875, 405, 409, 412,
	413, 928, 414, 394, 395, 415, 954, 416, 893, 873,
	418, 0, 428, 419, 420, 421, 396, 422, 426, 939,
	423, 424, 425, 961, 0, 430, 431, 429, 0, 432,
	433, 434, 435, 436, 273, 869, 0, 912, 913, 914,
	915, 0, 444, 0, 438, 439, 962, 440, 963, 846,
	441, 442, 443, 0, 445, 446, 0, 829, 447, 448,
	449, 450, 451, 453, 929, 454, 0, 877, 455, 456,
	457, 506, 909, 956, 0, 459, 458, 509, 0, 0,
	0, 0, 460, 461, 510, 462, 463, 464, 826, 0,
	0, 0, 0, 0, 0, 0, 824, 0, 0, 0,
	0, 822, 823, 882, 839, 840, 841, 837, 838, 851,
	852, 0, 0, 0, 0, 850, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 931, 856, 0, 0, 0, 222, 223, 224, 225,
	466, 897, 876, 908, 866, 907, 906, 0, 229, 868,
	867, 232, 233, 234, 858, 930, 235, 966, 967, 472,
	0, 236, 937, 0, 920, 0, 237, 238, 239, 240,
	241, 242, 0, 244, 245, 246, 243, 0, 247, 0,
	248, 249, 250, 0, 940, 251, 252, 923, 921, 922,
	927, 925, 924, 926, 253, 254, 255, 256, 911, 258,
	904, 903, 828, 259, 0, 261, 260, 0, 262, 0,
	0, 263, 902, 265, 0, 266, 0, 267, 268, 0,
	834, 269, 270, 272, 274, 271, 275, 276, 277, 278,
	957, 958, 847, 213, 0, 0, 0, 0, 0, 279,
	280, 281, 901, 899, 900, 0, 284, 0, 285, 0,
	0, 941, 286, 287, 0, 288, 964, 0, 857, 289,
	0, 290, 291, 292, 293, 932, 933, 936, 341, 943,
	294, 295, 0, 296, 297, 878, 0, 0, 0, 214,
	298, 300, 307, 0, 942, 301, 890, 881, 892, 894,
	895, 896, 891, 0, 883, 0, 308, 944, 934, 945,
	309, 310, 311, 946, 916, 917, 0, 0, 314, 315,
	316, 317, 0, 319, 318, 0, 320, 965, 947, 321,
	322, 948, 0, 323, 324, 0, 0, 325, 326, 0,
	327, 328, 330, 332, 329, 331, 333, 335, 870, 334,
	949, 337, 338, 340, 339, 825, 215, 950, 848, 935,
	905, 342, 343, 0, 879, 345, 880, 0, 0, 348,
	349, 350, 0, 0, 351, 492, 951, 352, 952, 959,
	353, 347, 354, 355, 356, 357, 358, 359, 360, 0,
	361, 362, 960, 363, 495, 364, 0, 365, 0, 366,
	367, 368, 369, 370, 371, 898, 372, 373, 0, 374,
	375, 376, 377, 378, 0, 380, 381, 382, 379, 383,
	384, 385, 386, 0, 387, 953, 388, 389, 390, 391,
	835, 392, 0, 393, 397, 398, 399, 400, 401, 402,
	403, 0, 410, 411, 871, 872, 874, 875, 405, 409,
	412, 413, 928, 414, 394, 395, 415, 954, 416, 893,
	873, 418, 0, 428, 419, 420, 421, 396, 422, 426,
	939, 423, 424, 425, 961, 0, 430, 431, 429, 0,
	432, 433, 434, 435, 436, 273, 869, 0, 912, 913,
	914, 915, 0, 444, 0, 438, 439, 962, 440, 963,
	846, 441, 442, 443, 0, 445, 446, 0, 829, 447,
	448, 449, 450, 451, 453, 929, 454, 0, 877, 455,
	456, 457, 506, 909, 956, 0, 459, 458, 509, 0,
	0, 0, 0, 460, 461, 510, 462, 463, 464, 826,
	0, 0, 0, 0, 0, 0, 0, 824, 0, 0,
	0, 0, 822, 823, 0, 0, 0, 0, 0, 0,
	0, 852, 1505, 0, 0, 2132, 850, 882, 839, 840,
	841, 837, 838, 851, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 931, 856, 0, 0, 0,
	222, 223, 224, 225, 466, 897, 876, 908, 866, 907,
	906, 0, 229, 868, 867, 232, 233, 234, 858, 930,
	235, 966, 967, 472, 0, 236, 937, 0, 920, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 0, 247, 0, 248, 249, 250, 0, 940, 251,
	252, 923, 921, 922, 927, 925, 924, 926, 253, 254,
	255, 256, 911, 258, 904, 903, 828, 259, 0, 261,
	260, 0, 262, 0, 0, 263, 902, 265, 0, 266,
	0, 267, 268, 0, 834, 269, 270, 272, 274, 271,
	275, 276, 277, 278, 957, 958, 847, 213, 0, 0,
	0, 0, 0, 279, 280, 281, 901, 899, 900, 0,
	284, 0, 285, 0, 0, 941, 286, 287, 0, 288,
	964, 0, 857, 289, 0, 290, 291, 292, 293, 932,
	933, 936, 341, 943, 294, 295, 0, 296, 297, 878,
	0, 0, 0, 214, 298, 300, 307, 0, 942, 301,
	890, 881, 892, 894, 895, 896, 891, 0, 883, 0,
	308, 944, 934, 945, 309, 310, 311, 946, 916, 917,
	0, 0, 314, 315, 316, 317, 0, 319, 318, 0,
	320, 965, 947, 321, 322, 948, 0, 323, 324, 0,
	0, 325, 326, 0, 327, 328, 330, 332, 329, 331,
	333, 335, 870, 334, 949, 337, 338, 340, 339, 825,
	215, 950, 848, 935, 905, 342, 343, 0, 879, 345,
	880, 0, 0, 348, 349, 350, 0, 0, 351, 492,
	951, 352, 952, 959, 353, 347, 354, 355, 356, 357,
	358, 359, 360, 0, 361, 362, 960, 363, 495, 364,
	0, 365, 0, 366, 367, 368, 369, 370, 371, 898,
	372, 373, 0, 374, 375, 376, 377, 378, 0, 380,
	381, 382, 379, 383, 384, 385, 386, 0, 387, 953,
	388, 389, 390, 391, 835, 392, 0, 393, 397, 398,
	399, 400, 401, 402, 403, 0, 410, 411, 871, 872,
	874, 875, 405, 409, 412, 413, 928, 414, 394, 395,
	415, 954, 416, 893, 873, 418, 0, 428, 419, 420,
	421, 396, 422, 426, 939, 423, 424, 425, 961, 0,
	430, 431, 429, 0, 432, 433, 434, 435, 436, 273,
	869, 0, 912, 913, 914, 915, 0, 444, 0, 438,
	439, 962, 440, 963, 846, 441, 442, 443, 0, 445,
	446, 0, 829, 447, 448, 449, 450, 451, 453, 929,
	454, 0, 877, 455, 456, 457, 506, 909, 956, 0,
	459, 458, 509, 0, 0, 0, 0, 460, 461, 510,
	462, 463, 464, 826, 0, 0, 0, 0, 0, 0,
	0, 824, 0, 0, 0, 0, 822, 823, 0, 0,
	0, 0, 0, 0, 0, 852, 0, 0, 0, 2130,
	850, 882, 839, 840, 841, 837, 838, 851, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 931,
	856, 0, 0, 0, 222, 223, 224, 225, 466, 897,
	876, 908, 866, 907, 906, 0, 229, 868, 867, 232,
	233, 234, 858, 930, 235, 966, 967, 472, 0, 236,
	937, 0, 920, 0, 237, 238, 239, 240, 241, 242,
	0, 244, 245, 246, 243, 0, 247, 0, 248, 249,
	250, 0, 940, 251, 252, 923, 921, 922, 927, 925,
	924, 926, 253, 254, 255, 256, 911, 258, 904, 903,
	828, 259, 0, 261, 260, 0, 262, 0, 0, 263,
	902, 265, 0, 266, 0, 267, 268, 0, 834, 269,
	270, 272, 274, 271, 275, 276, 277, 278, 957, 958,
	847, 213, 0, 0, 0, 0, 0, 279, 280, 281,
	901, 899, 900, 0, 284, 0, 285, 0, 0, 941,
	286, 287, 0, 288, 964, 0, 857, 289, 0, 290,
	291, 292, 293, 932, 933, 936, 341, 943, 294, 295,
	0, 296, 297, 878, 0, 0, 0, 214, 298, 300,
	307, 0, 942, 301, 890, 881, 892, 894, 895, 896,
	891, 0, 883, 0, 308, 944, 934, 945, 309, 310,
	311, 946, 916, 917, 0, 0, 314, 315, 316, 317,
	0, 319, 318, 0, 320, 965, 947, 321, 322, 948,
	0, 323, 324, 0, 0, 325, 326, 0, 327, 328,
	330, 332, 329, 331, 333, 335, 870, 334, 949, 337,
	338, 340, 339, 825, 215, 950, 848, 935, 905, 342,
	343, 0, 879, 345, 880, 0, 0, 348, 349, 350,
	0, 0, 351, 492, 951, 352, 952, 959, 353, 347,
	354, 355, 356, 357, 358, 359, 360, 0, 361, 362,
	960, 363, 495, 364, 0, 365, 0, 366, 367, 368,
	369, 370, 371, 898, 372, 373, 0, 374, 375, 376,
	377, 378, 0, 380, 381, 382, 379, 383, 384, 385,
	386, 0, 387, 953, 388, 389, 390, 391, 835, 392,
	0, 393, 397, 398, 399, 400, 401, 402, 403, 0,
	410, 411, 871, 872, 874, 875, 405, 409, 412, 413,
	928, 414, 394, 395, 415, 954, 416, 893, 873, 418,
	0, 428, 419, 420, 421, 396, 422, 426, 939, 423,
	424, 425, 961, 0, 430, 431, 429, 0, 432, 433,
	434, 435, 436, 273, 869, 0, 912, 913, 914, 915,
	0, 444, 0, 438, 439, 962, 440, 963, 846, 441,
	442, 443, 0, 445, 446, 0, 829, 447, 448, 449,
	450, 451, 453, 929, 454, 0, 877, 455, 456, 457,
	506, 909, 956, 0, 459, 458, 509, 0, 0, 0,
	0, 460, 461, 510, 462, 463, 464, 826, 0, 0,
	0, 0, 0, 0, 0, 824, 0, 0, 0, 0,
	822, 823, 0, 0, 0, 0, 0, 0, 0, 852,
	0, 0, 0, 2118, 850, 882, 839, 840, 841, 837,
	838, 851, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 931, 856, 0, 0, 0, 222, 223,
	224, 225, 466, 897, 876, 908, 866, 907, 906, 0,
	229, 868, 867, 232, 233, 234, 858, 930, 235, 966,
	967, 472, 0, 236, 937, 0, 920, 0, 237, 238,
	239, 240, 241, 242, 0, 244, 245, 246, 243, 0,
	247, 0, 248, 249, 250, 0, 940, 251, 252, 923,
	921, 922, 927, 925, 924, 926, 253, 254, 255, 256,
	911, 258, 904, 903, 828, 259, 0, 261, 260, 0,
	262, 0, 0, 263, 902, 265, 0, 266, 0, 267,
	268, 0, 834, 269, 270, 272, 274, 271, 275, 276,
	277, 278, 957, 958, 847, 213, 0, 0, 0, 0,
	0, 279, 280, 281, 901, 899, 900, 0, 284, 0,
	285, 0, 0, 941, 286, 287, 0, 288, 964, 0,
	857, 289, 0, 290, 291, 292, 293, 932, 933, 936,
	341, 943, 294, 295, 0, 296, 297, 878, 0, 0,
	0, 214, 298, 300, 307, 0, 942, 301, 890, 881,
	892, 894, 895, 896, 891, 0, 883, 0, 308, 944,
	934, 945, 309, 310, 311, 946, 916, 917, 0, 0,
	314, 315, 316, 317, 0, 319, 318, 0, 320, 965,
	947, 321, 322, 948, 0, 323, 324, 0, 0, 325,
	326, 0, 327, 328, 330, 332, 329, 331, 333, 335,
	870, 334, 949, 337, 338, 340, 339, 825, 215, 950,
	848, 935, 905, 342, 343, 0, 879, 345, 880, 0,
	0, 348, 349, 350, 0, 0, 351, 492, 951, 352,
	952, 959, 353, 347, 354, 355, 356, 357, 358, 359,
	360, 0, 361, 362, 960, 363, 495, 364, 0, 365,
	0, 366, 367, 368, 369, 370, 371, 898, 372, 373,
	0, 374, 375, 376, 377, 378, 0, 380, 381, 382,
	379, 383, 384, 385, 386, 0, 387, 953, 388, 389,
	390, 391, 835, 392, 0, 393, 397, 398, 399, 400,
	401, 402, 403, 0, 410, 411, 871, 872, 874, 875,
	405, 409, 412, 413, 928, 414, 394, 395, 415, 954,
	416, 893, 873, 418, 0, 428, 419, 420, 421, 396,
	422, 426, 939, 423, 424, 425, 961, 0, 430, 431,
	429, 0, 432, 433, 434, 435, 436, 273, 869, 0,
	912, 913, 914, 915, 0, 444, 0, 438, 439, 962,
	440, 963, 846, 441, 442, 443, 0, 445, 446, 0,
	829, 447, 448, 449, 450, 451, 453, 929, 454, 0,
	877, 455, 456, 457, 506, 909, 956, 0, 459, 458,
	509, 0, 0, 0, 0, 460, 461, 510, 462, 463,
	464, 826, 0, 0, 0, 0, 0, 0, 0, 824,
	0, 0, 0, 0, 822, 823, 0, 0, 0, 0,
	0, 0, 0, 852, 0, 0, 0, 2107, 850, 882,
	839, 840, 841, 837, 838, 851, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 931, 856, 0,
	0, 0, 222, 223, 224, 225, 466, 897, 876, 908,
	866, 907, 906, 0, 229, 868, 867, 232, 233, 234,
	858, 930, 235, 966, 967, 472, 0, 236, 937, 0,
	920, 0, 237, 238, 239, 240, 241, 242, 0, 244,
	245, 246, 243, 0, 247, 0, 248, 249, 250, 0,
	940, 251, 252, 923, 921, 922, 927, 925, 924, 926,
	253, 254, 255, 256, 911, 258, 904, 903, 828, 259,
	0, 261, 260, 0, 262, 0, 0, 263, 902, 265,
	0, 266, 0, 267, 268, 0, 834, 269, 270, 272,
	274, 271, 275, 276, 277, 278, 957, 958, 847, 213,
	0, 0, 0, 0, 0, 279, 280, 281, 901, 899,
	900, 0, 284, 0, 285, 0, 0, 941, 286, 287,
	0, 288, 964, 0, 857, 289, 0, 290, 291, 292,
	293, 932, 933, 936, 341, 943, 294, 295, 0, 296,
	297, 878, 0, 0, 0, 214, 298, 300, 307, 0,
	942, 301, 890, 881, 892, 894, 895, 896, 891, 0,
	883, 0, 308, 944, 934, 945, 309, 310, 311, 946,
	916, 917, 0, 0, 314, 315, 316, 317, 0, 319,
	318, 0, 320, 965, 947, 321, 322, 948, 0, 323,
	324, 0, 0, 325, 326, 0, 327, 328, 330, 332,
	329, 331, 333, 335, 870, 334, 949, 337, 338, 340,
	339, 825, 215, 950, 848, 935, 905, 342, 343, 0,
	879, 345, 880, 0, 0, 348, 349, 350, 0, 0,
	351, 492, 951, 352, 952, 959, 353, 347, 354, 355,
	356, 357, 358, 359, 360, 0, 361, 362, 960, 363,
	495, 364, 0, 365, 0, 366, 367, 368, 369, 370,
	371, 898, 372, 373, 0, 374, 375, 376, 377, 378,
	0, 380, 381, 382, 379, 383, 384, 385, 386, 0,
	387, 953, 388, 389, 390, 391, 835, 392, 0, 393,
	397, 398, 399, 400, 401, 402, 403, 0, 410, 411,
	871, 872, 874, 875, 405, 409, 412, 413, 928, 414,
	394, 395, 415, 954, 416, 893, 873, 418, 0, 428,
	419, 420, 421, 396, 422, 426, 939, 423, 424, 425,
	961, 0, 430, 431, 429, 0, 432, 433, 434, 435,
	436, 273, 869, 0, 912, 913, 914, 915, 0, 444,
	0, 438, 439, 962, 440, 963, 846, 441, 442, 443,
	0, 445, 446, 0, 829, 447, 448, 449, 450, 451,
	453, 929, 454, 0, 877, 455, 456, 457, 506, 909,
	956, 0, 459, 458, 509, 0, 0, 0, 0, 460,
	461, 510, 462, 463, 464, 826, 0, 0, 0, 0,
	0, 0, 0, 824, 0, 0, 0, 0, 822, 823,
	0, 0, 0, 0, 0, 0, 0, 852, 0, 0,
	0, 2105, 850, 2097, 839, 840, 841, 837, 838, 851,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 931, 856, 0, 0, 0, 222, 223, 224, 225,
	466, 897, 876, 908, 866, 907, 906, 0, 229, 868,
	867, 232, 233, 234, 858, 930, 235, 966, 967, 472,
	0, 236, 937, 0, 920, 0, 237, 238, 239, 240,
	241, 242, 0, 244, 245, 246, 243, 0, 247, 0,
	248, 249, 250, 0, 940, 251, 252, 923, 921, 922,
	927, 925, 924, 926, 253, 254, 255, 256, 911, 2100,
	904, 903, 828, 259, 0, 261, 260, 0, 262, 0,
	0, 263, 902, 265, 0, 266, 0, 267, 268, 0,
	834, 269, 270, 272, 274, 271, 275, 276, 277, 278,
	957, 958, 847, 213, 0, 0, 0, 0, 0, 279,
	280, 281, 901, 899, 900, 0, 284, 0, 285, 0,
	0, 941, 286, 287, 0, 288, 964, 0, 857, 289,
	0, 290, 291, 292, 2101, 932, 933, 936, 341, 943,
	294, 295, 0, 296, 297, 878, 0, 0, 0, 214,
	298, 300, 307, 0, 942, 301, 890, 881, 892, 894,
	895, 896, 891, 0, 883, 0, 308, 944, 934, 945,
	309, 310, 311, 946, 916, 917, 0, 0, 314, 315,
	316, 317, 0, 319, 318, 0, 320, 965, 947, 321,
	322, 948, 0, 323, 324, 0, 0, 325, 326, 0,
	327, 328, 330, 332, 329, 2102, 2099, 335, 870, 334,
	949, 337, 338, 340, 339, 825, 215, 950, 848, 935,
	905, 342, 343, 0, 879, 345, 880, 0, 0, 348,
	349, 350, 0, 0, 351, 492, 951, 352, 952, 959,
	353, 347, 354, 355, 356, 357, 358, 359, 360, 0,
	361, 362, 960, 363, 495, 364, 0, 365, 0, 366,
	367, 368, 369, 370, 371, 898, 372, 373, 0, 374,
	375, 376, 377, 378, 0, 380, 381, 382, 379, 383,
	384, 385, 386, 0, 387, 953, 388, 389, 390, 391,
	835, 392, 0, 393, 397, 398, 399, 400, 401, 402,
	2103, 0, 410, 411, 871, 872, 874, 875, 405, 409,
	412, 413, 928, 414, 394, 395, 415, 954, 416, 893,
	873, 418, 0, 428, 419, 420, 421, 396, 422, 426,
	939, 423, 424, 425, 961, 0, 430, 431, 429, 0,
	432, 433, 434, 435, 436, 273, 869, 0, 912, 913,
	914, 915, 0, 444, 0, 438, 439, 962, 440, 963,
	846, 441, 442, 443, 0, 445, 446, 0, 829, 447,
	448, 449, 450, 451, 453, 929, 454, 0, 877, 455,
	456, 457, 506, 909, 956, 0, 459, 458, 509, 0,
	0, 0, 0, 460, 461, 510, 462, 2098, 464, 826,
	0, 0, 0, 0, 0, 0, 0, 824, 0, 0,
	0, 0, 822, 823, 0, 0, 0, 0, 0, 0,
	0, 852, 0, 0, 0, 2094, 850, 2097, 839, 840,
	841, 837, 838, 851, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 931, 856, 0, 0, 0,
	222, 223, 224, 225, 466, 897, 876, 908, 866, 907,
	906, 0, 229, 868, 867, 232, 233, 234, 858, 930,
	235, 966, 967, 472, 0, 236, 937, 0, 920, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 0, 247, 0, 248, 249, 250, 0, 940, 251,
	252, 923, 921, 922, 927, 925, 924, 926, 253, 254,
	255, 256, 911, 2100, 904, 903, 828, 259, 0, 261,
	260, 0, 262, 0, 0, 263, 902, 265, 0, 266,
	0, 267, 268, 0, 834, 269, 270, 272, 274, 271,
	275, 276, 277, 278, 957, 958, 847, 213, 0, 0,
	0, 0, 0, 279, 280, 281, 901, 899, 900, 0,
	284, 0, 285, 0, 0, 941, 286, 287, 0, 288,
	964, 0, 857, 289, 0, 290, 291, 292, 2101, 932,
	933, 936, 341, 943, 294, 295, 0, 296, 297, 878,
	0, 0, 0, 214, 298, 300, 307, 0, 942, 301,
	890, 881, 892, 894, 895, 896, 891, 0, 883, 0,
	308, 944, 934, 945, 309, 310, 311, 946, 916, 917,
	0, 0, 314, 315, 316, 317, 0, 319, 318, 0,
	320, 965, 947, 321, 322, 948, 0, 323, 324, 0,
	0, 325, 326, 0, 327, 328, 330, 332, 329, 2102,
	2099, 335, 870, 334, 949, 337, 338, 340, 339, 825,
	215, 950, 848, 935, 905, 342, 343, 0, 879, 345,
	880, 0, 0, 348, 349, 350, 0, 0, 351, 492,
	951, 352, 952, 959, 353, 347, 354, 355, 356, 357,
	358, 359, 360, 0, 361, 362, 960, 363, 495, 364,
	0, 365, 0, 366, 367, 368, 369, 370, 371, 898,
	372, 373, 0, 374, 375, 376, 377, 378, 0, 380,
	381, 382, 379, 383, 384, 385, 386, 0, 387, 953,
	388, 389, 390, 391, 835, 392, 0, 393, 397, 398,
	399, 400, 401, 402, 2103, 0, 410, 411, 871, 872,
	874, 875, 405, 409, 412, 413, 928, 414, 394, 395,
	415, 954, 416, 893, 873, 418, 0, 428, 419, 420,
	421, 396, 422, 426, 939, 423, 424, 425, 961, 0,
	430, 431, 429, 0, 432, 433, 434, 435, 436, 273,
	869, 0, 912, 913, 914, 915, 0, 444, 0, 438,
	439, 962, 440, 963, 846, 441, 442, 443, 0, 445,
	446, 0, 829, 447, 448, 449, 450, 451, 453, 929,
	454, 0, 877, 455, 456, 457, 506, 909, 956, 0,
	459, 458, 509, 0, 0, 0, 0, 460, 461, 510,
	462, 2098, 464, 826, 0, 0, 0, 0, 0, 0,
	0, 824, 0, 0, 0, 0, 822, 823, 882, 839,
	840, 841, 837, 838, 851, 852, 0, 0, 0, 0,
	850, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 931, 856, 0, 0,
	0, 222, 223, 224, 225, 466, 897, 876, 908, 866,
	907, 906, 0, 229, 868, 867, 232, 233, 234, 858,
	930, 235, 966, 967, 472, 0, 236, 937, 0, 920,
	0, 237, 238, 239, 240, 241, 242, 0, 244, 245,
	246, 243, 0, 247, 0, 248, 249, 250, 0, 940,
	251, 252, 923, 921, 922, 927, 925, 924, 926, 253,
	254, 255, 256, 911, 258, 904, 903, 828, 259, 0,
	261, 260, 0, 262, 0, 0, 263, 902, 265, 0,
	266, 0, 267, 268, 0, 834, 269, 270, 272, 274,
	271, 275, 276, 277, 278, 957, 958, 847, 213, 0,
	0, 0, 0, 0, 279, 280, 281, 901, 899, 900,
	0, 284, 0, 285, 0, 0, 941, 286, 287, 0,
	288, 964, 0, 857, 289, 0, 290, 291, 292, 293,
	932, 933, 936, 341, 943, 294, 295, 0, 296, 297,
	878, 0, 0, 0, 214, 298, 300, 307, 0, 942,
	301, 890, 881, 892, 894, 895, 896, 891, 0, 883,
	0, 308, 944, 934, 945, 309, 310, 311, 946, 916,
	917, 0, 0, 314, 315, 316, 317, 0, 319, 318,
	0, 320, 965, 947, 321, 322, 948, 0, 323, 324,
	0, 0, 325, 326, 0, 327, 328, 330, 332, 329,
	331, 333, 335, 870, 334, 949, 337, 338, 340, 339,
	825, 215, 950, 848, 935, 905, 342, 343, 0, 879,
	345, 880, 0, 0, 348, 349, 350, 0, 0, 351,
	492, 951, 352, 952, 959, 353, 347, 354, 355, 356,
	357, 358, 359, 360, 0, 361, 362, 960, 363, 495,
	364, 0, 365, 0, 366, 367, 368, 369, 370, 371,
	898, 372, 373, 0, 374, 375, 376, 377, 378, 0,
	380, 381, 382, 379, 383, 384, 385, 386, 0, 387,
	953, 388, 389, 390, 391, 835, 392, 0, 393, 397,
	398, 399, 400, 401, 402, 403, 0, 410, 411, 871,
	872, 874, 875, 405, 409, 412, 413, 928, 414, 394,
	395, 415, 954, 416, 893, 873, 418, 0, 428, 419,
	420, 421, 396, 422, 426, 939, 423, 424, 425, 961,
	0, 430, 431, 429, 0, 432, 433, 434, 435, 436,
	273, 869, 0, 912, 913, 914, 915, 0, 444, 0,
	438, 439, 962, 440, 963, 846, 441, 442, 443, 0,
	445, 446, 0, 829, 447, 448, 449, 450, 451, 453,
	929, 454, 0, 877, 455, 456, 457, 506, 909, 956,
	0, 459, 458, 509, 0, 0, 0, 0, 460, 461,
	510, 462, 463, 464, 826, 0, 0, 0, 0, 0,
	0, 0, 824, 0, 0, 0, 0, 822, 823, 0,
	0, 0, 0, 0, 1513, 0, 852, 0, 0, 0,
	0, 850, 882, 839, 840, 841, 837, 838, 851, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 1938, 221, 0, 0, 0, 0,
	931, 856, 0, 0, 0, 222, 223, 224, 225, 466,
	897, 876, 908, 866, 907, 906, 0, 229, 868, 867,
	232, 233, 234, 858, 930, 235, 966, 967, 472, 0,
	236, 937, 0, 920, 0, 237, 238, 239, 240, 241,
	242, 0, 244, 245, 246, 243, 0, 247, 0, 248,
	249, 250, 0, 940, 251, 252, 923, 921, 922, 927,
	925, 924, 926, 253, 254, 255, 256, 911, 258, 904,
	903, 828, 259, 0, 261, 260, 0, 262, 0, 0,
	263, 902, 265, 0, 266, 0, 267, 268, 0, 834,
	269, 270, 272, 274, 271, 275, 276, 277, 278, 957,
	958, 847, 213, 0, 0, 0, 0, 0, 279, 280,
	281, 901, 899, 900, 0, 284, 0, 285, 0, 0,
	941, 286, 287, 0, 288, 964, 0, 857, 289, 0,
	290, 291, 292, 293, 932, 933, 936, 341, 943, 294,
	295, 0, 296, 297, 878, 0, 0, 0, 214, 298,
	300, 307, 0, 942, 301, 890, 881, 892, 894, 895,
	896, 891, 0, 883, 0, 308, 944, 934, 945, 309,
	310, 311, 946, 916, 917, 0, 0, 314, 315, 316,
	317, 0, 319, 318, 0, 320, 965, 947, 321, 322,
	948, 0, 323, 324, 0, 0, 325, 326, 0, 327,
	328, 330, 332, 329, 331, 333, 335, 870, 334, 949,
	337, 338, 340, 339, 825, 215, 950, 848, 935, 905,
	342, 343, 0, 879, 345, 880, 0, 0, 348, 349,
	350, 0, 0, 351, 492, 951, 352, 952, 959, 353,
	347, 354, 355, 356, 357, 358, 359, 360, 0, 361,
	362, 960, 363, 495, 364, 0, 365, 0, 366, 367,
	368, 369, 370, 371, 898, 372, 373, 0, 374, 375,
	376, 377, 378, 0, 380, 381, 382, 379, 383, 384,
	385, 386, 0, 387, 953, 388, 389, 390, 391, 835,
	392, 0, 393, 397, 398, 399, 400, 401, 402, 403,
	0, 410, 411, 871, 872, 874, 875, 405, 409, 412,
	413, 928, 414, 394, 395, 415, 954, 416, 893, 873,
	418, 0, 428, 419, 420, 421, 396, 422, 426, 939,
	423, 424, 425, 961, 0, 430, 431, 429, 0, 432,
	433, 434, 435, 436, 273, 869, 0, 912, 913, 914,
	915, 0, 444, 0, 438, 439, 962, 440, 963, 846,
	441, 442, 443, 0, 445, 446, 0, 829, 447, 448,
	449, 450, 451, 453, 929, 454, 0, 877, 455, 456,
	457, 506, 909, 956, 0, 459, 458, 509, 0, 0,
	0, 0, 460, 461, 510, 462, 463, 464, 826, 0,
	0, 0, 0, 0, 0, 0, 824, 0, 0, 0,
	0, 822, 823, 0, 0, 0, 0, 0, 0, 0,
	852, 0, 0, 0, 1196, 850, 882, 839, 840, 841,
	837, 838, 851, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 931, 856, 0, 0, 0, 222,
	223, 224, 225, 466, 897, 876, 908, 866, 907, 906,
	0, 229, 868, 867, 232, 233, 234, 858, 930, 235,
	966, 967, 472, 0, 236, 937, 0, 920, 0, 237,
	238, 239, 240, 241, 242, 0, 244, 245, 246, 243,
	0, 247, 0, 248, 249, 250, 0, 940, 251, 252,
	923, 921, 922, 927, 925, 924, 926, 253, 254, 255,
	256, 911, 258, 904, 903, 828, 259, 0, 261, 260,
	0, 262, 0, 0, 263, 902, 265, 0, 266, 0,
	267, 268, 0, 834, 269, 270, 272, 274, 271, 275,
	276, 277, 278, 957, 958, 847, 213, 0, 0, 0,
	0, 0, 279, 280, 281, 901, 899, 900, 0, 284,
	0, 285, 0, 0, 941, 286, 287, 0, 288, 964,
	0, 857, 289, 0, 290, 291, 292, 293, 1195, 933,
	936, 341, 943, 294, 295, 0, 296, 297, 878, 0,
	0, 0, 214, 298, 300, 307, 0, 942, 301, 890,
	881, 892, 894, 895, 896, 891, 0, 883, 0, 308,
	944, 934, 945, 309, 310, 311, 946, 916, 917, 0,
	0, 314, 315, 316, 317, 0, 319, 318, 0, 320,
	965, 947, 321, 322, 948, 0, 323, 324, 0, 0,
	325, 326, 0, 327, 328, 330, 332, 329, 331, 333,
	335, 870, 334, 949, 337, 338, 340, 339, 825, 215,
	950, 848, 935, 905, 342, 343, 0, 879, 345, 880,
	0, 0, 348, 349, 350, 0, 0, 351, 492, 951,
	352, 952, 959, 353, 347, 354, 355, 356, 357, 358,
	359, 360, 0, 361, 362, 960, 363, 495, 364, 0,
	365, 0, 366, 367, 368, 369, 370, 371, 898, 372,
	373, 0, 374, 375, 376, 377, 378, 0, 380, 381,
	382, 379, 383, 384, 385, 386, 0, 387, 953, 388,
	389, 390, 391, 835, 392, 0, 393, 397, 398, 399,
	400, 401, 402, 403, 0, 410, 411, 871, 872, 874,
	875, 405, 409, 412, 413, 928, 414, 394, 395, 415,
	954, 416, 893, 873, 418, 0, 428, 419, 420, 421,
	396, 422, 426, 939, 423, 424, 425, 961, 0, 430,
	431, 429, 0, 432, 433, 434, 435, 436, 273, 869,
	0, 912, 913, 914, 915, 0, 444, 0, 438, 439,
	962, 440, 963, 846, 441, 442, 443, 0, 445, 446,
	0, 829, 447, 448, 449, 450, 451, 453, 929, 454,
	0, 877, 455, 456, 457, 506, 909, 956, 0, 459,
	458, 509, 0, 0, 0, 0, 460, 461, 510, 462,
	463, 464, 826, 0, 0, 0, 0, 0, 0, 0,
	824, 0, 0, 0, 0, 822, 823, 0, 0, 0,
	0, 0, 0, 0, 852, 0, 0, 0, 1190, 850,
	882, 839, 840, 841, 837, 838, 851, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 931, 856,
	0, 0, 0, 222, 223, 224, 225, 466, 897, 876,
	908, 866, 907, 906, 0, 229, 868, 867, 232, 233,
	234, 858, 930, 235, 966, 967, 472, 0, 236, 937,
	0, 920, 0, 237, 238, 239, 240, 241, 242, 0,
	244, 245, 246, 243, 0, 247, 0, 248, 249, 250,
	0, 940, 251, 252, 923, 921, 922, 927, 925, 924,
	926, 253, 254, 255, 256, 911, 258, 904, 903, 828,
	259, 0, 261, 260, 0, 262, 0, 0, 263, 902,
	265, 0, 266, 0, 267, 268, 0, 834, 269, 270,
	272, 274, 271, 275, 276, 277, 278, 957, 958, 847,
	213, 0, 0, 0, 0, 0, 279, 280, 281, 901,
	899, 900, 0, 284, 0, 285, 0, 0, 941, 286,
	287, 0, 288, 964, 0, 857, 289, 0, 290, 291,
	292, 293, 1189, 933, 936, 341, 943, 294, 295, 0,
	296, 297, 878, 0, 0, 0, 214, 298, 300, 307,
	0, 942, 301, 890, 881, 892, 894, 895, 896, 891,
	0, 883, 0, 308, 944, 934, 945, 309, 310, 311,
	946, 916, 917, 0, 0, 314, 315, 316, 317, 0,
	319, 318, 0, 320, 965, 947, 321, 322, 948, 0,
	323, 324, 0, 0, 325, 326, 0, 327, 328, 330,
	332, 329, 331, 333, 335, 870, 334, 949, 337, 338,
	340, 339, 825, 215, 950, 848, 935, 905, 342, 343,
	0, 879, 345, 880, 0, 0, 348, 349, 350, 0,
	0, 351, 492, 951, 352, 952, 959, 353, 347, 354,
	355, 356, 357, 358, 359, 360, 0, 361, 362, 960,
	363, 495, 364, 0, 365, 0, 366, 367, 368, 369,
	370, 371, 898, 372, 373, 0, 374, 375, 376, 377,
	378, 0, 380, 381, 382, 379, 383, 384, 385, 386,
	0, 387, 953, 388, 389, 390, 391, 835, 392, 0,
	393, 397, 398, 399, 400, 401, 402, 403, 0, 410,
	411, 871, 872, 874, 875, 405, 409, 412, 413, 928,
	414, 394, 395, 415, 954, 416, 893, 873, 418, 0,
	428, 419, 420, 421, 396, 422, 426, 939, 423, 424,
	425, 961, 0, 430, 431, 429, 0, 432, 433, 434,
	435, 436, 273, 869, 0, 912, 913, 914, 915, 0,
	444, 0, 438, 439, 962, 440, 963, 846, 441, 442,
	443, 0, 445, 446, 0, 829, 447, 448, 449, 450,
	451, 453, 929, 454, 0, 877, 455, 456, 457, 506,
	909, 956, 0, 459, 458, 509, 0, 0, 0, 0,
	460, 461, 510, 462, 463, 464, 826, 0, 0, 0,
	0, 0, 0, 0, 824, 0, 0, 0, 0, 822,
	823, 0, 0, 0, 0, 0, 0, 0, 852, 0,
	0, 0, 1185, 850, 882, 839, 840, 841, 837, 838,
	851, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 931, 856, 0, 0, 0, 222, 223, 224,
	225, 466, 897, 876, 908, 866, 907, 906, 0, 229,
	868, 867, 232, 233, 234, 858, 930, 235, 966, 967,
	472, 0, 236, 937, 0, 920, 0, 237, 238, 239,
	240, 241, 242, 0, 244, 245, 246, 243, 0, 247,
	0, 248, 249, 250, 0, 940, 251, 252, 923, 921,
	922, 927, 925, 924, 926, 253, 254, 255, 256, 911,
	258, 904, 903, 828, 259, 0, 261, 260, 0, 262,
	0, 0, 263, 902, 265, 0, 266, 0, 267, 268,
	0, 834, 269, 270, 272, 274, 271, 275, 276, 277,
	278, 957, 958, 847, 213, 0, 0, 0, 0, 0,
	279, 280, 281, 901, 899, 900, 0, 284, 0, 285,
	0, 0, 941, 286, 287, 0, 288, 964, 0, 857,
	289, 0, 290, 291, 292, 293, 932, 933, 936, 341,
	943, 294, 295, 0, 296, 297, 878, 0, 0, 0,
	214, 298, 300, 307, 0, 942, 301, 890, 881, 892,
	894, 895, 896, 891, 0, 883, 0, 308, 944, 934,
	945, 309, 310, 311, 946, 916, 917, 0, 0, 314,
	315, 316, 317, 0, 319, 318, 0, 320, 965, 947,
	321, 322, 948, 0, 323, 324, 0, 0, 325, 326,
	0, 327, 328, 330, 332, 329, 331, 333, 335, 870,
	334, 949, 337, 338, 340, 339, 825, 215, 950, 848,
	935, 905, 342, 343, 0, 879, 345, 880, 0, 0,
	348, 349, 350, 0, 0, 351, 492, 951, 352, 952,
	959, 353, 347, 354, 355, 356, 357, 358, 359, 360,
	0, 361, 362, 960, 363, 495, 364, 0, 365, 0,
	366, 367, 368, 369, 370, 371, 898, 372, 373, 0,
	374, 375, 376, 377, 378, 0, 380, 381, 382, 379,
	383, 384, 385, 386, 0, 387, 953, 388, 389, 390,
	391, 835, 392, 0, 393, 397, 398, 399, 400, 401,
	402, 403, 0, 410, 411, 871, 872, 874, 875, 405,
	409, 412, 413, 928, 414, 394, 395, 415, 954, 416,
	893, 873, 418, 0, 428, 419, 420, 421, 396, 422,
	426, 939, 423, 424, 425, 961, 0, 430, 431, 429,
	0, 432, 433, 434, 435, 436, 273, 869, 0, 912,
	913, 914, 915, 0, 444, 0, 438, 439, 962, 440,
	963, 846, 441, 442, 443, 0, 445, 446, 0, 829,
	447, 448, 449, 450, 451, 453, 929, 454, 0, 877,
	455, 456, 457, 506, 909, 956, 0, 459, 458, 509,
	0, 0, 0, 0, 460, 461, 510, 462, 463, 464,
	826, 0, 0, 0, 0, 0, 0, 0, 824, 0,
	0, 0, 0, 822, 823, 882, 839, 840, 841, 837,
	838, 851, 852, 0, 0, 0, 0, 850, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 931, 856, 0, 0, 0, 222, 223,
	224, 225, 466, 897, 876, 908, 866, 907, 906, 0,
	229, 868, 867, 232, 233, 234, 858, 930, 235, 966,
	967, 472, 0, 236, 937, 0, 920, 0, 237, 238,
	239, 240, 241, 242, 0, 244, 245, 246, 243, 0,
	247, 0, 248, 249, 250, 0, 940, 251, 252, 923,
	921, 922, 927, 925, 924, 926, 253, 254, 255, 256,
	911, 258, 904, 903, 828, 259, 0, 261, 260, 0,
	262, 0, 0, 263, 902, 265, 0, 266, 0, 267,
	268, 0, 834, 269, 270, 272, 274, 271, 275, 276,
	277, 278, 957, 958, 847, 213, 0, 0, 0, 0,
	0, 279, 280, 281, 901, 899, 900, 0, 284, 0,
	285, 0, 0, 941, 286, 287, 0, 288, 964, 0,
	857, 289, 0, 290, 291, 292, 293, 932, 933, 936,
	341, 943, 294, 295, 0, 296, 297, 878, 0, 0,
	0, 214, 298, 300, 307, 0, 942, 301, 890, 881,
	892, 894, 895, 896, 891, 0, 883, 0, 308, 944,
	934, 945, 309, 310, 311, 946, 916, 917, 0, 0,
	314, 315, 316, 317, 0, 319, 318, 0, 320, 965,
	947, 321, 322, 948, 0, 323, 324, 0, 0, 325,
	326, 0, 327, 328, 330, 332, 329, 331, 333, 335,
	870, 334, 949, 337, 338, 340, 339, 825, 215, 950,
	848, 935, 905, 342, 343, 0, 879, 345, 880, 0,
	0, 348, 349, 350, 0, 0, 351, 492, 951, 352,
	952, 959, 353, 347, 354, 355, 356, 357, 358, 359,
	360, 0, 361, 362, 960, 363, 495, 364, 0, 365,
	0, 366, 367, 368, 369, 370, 371, 898, 372, 373,
	0, 374, 375, 376, 377, 378, 0, 380, 381, 382,
	379, 383, 384, 385, 386, 0, 387, 953, 388, 389,
	390, 391, 835, 392, 0, 393, 397, 398, 399, 400,
	401, 402, 403, 0, 410, 411, 871, 872, 874, 875,
	405, 409, 412, 413, 928, 414, 394, 395, 415, 954,
	416, 893, 873, 418, 0, 428, 419, 420, 421, 396,
	422, 426, 939, 423, 424, 425, 961, 0, 430, 431,
	429, 0, 432, 433, 434, 435, 436, 273, 869, 0,
	912, 913, 914, 915, 0, 444, 0, 438, 439, 962,
	440, 963, 846, 441, 442, 443, 0, 445, 446, 0,
	829, 447, 448, 449, 450, 451, 453, 929, 454, 0,
	877, 455, 456, 457, 506, 909, 956, 0, 459, 458,
	509, 0, 0, 0, 0, 460, 461, 510, 462, 463,
	464, 826, 0, 0, 0, 0, 0, 0, 0, 824,
	0, 0, 0, 0, 822, 823, 882, 839, 840, 841,
	837, 838, 851, 852, 0, 0, 0, 0, 850, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 931, 856, 0, 0, 0, 222,
	223, 224, 225, 466, 897, 876, 908, 866, 907, 906,
	0, 229, 868, 867, 232, 233, 234, 858, 930, 235,
	966, 967, 472, 0, 236, 937, 0, 920, 0, 237,
	238, 239, 240, 241, 242, 0, 244, 245, 246, 243,
	0, 247, 0, 248, 249, 250, 0, 940, 251, 3445,
	923, 921, 922, 927, 925, 924, 926, 253, 254, 255,
	256, 911, 258, 904, 903, 828, 259, 0, 261, 260,
	0, 262, 0, 0, 263, 902, 265, 0, 266, 0,
	267, 268, 0, 834, 269, 270, 272, 274, 271, 275,
	276, 277, 278, 957, 958, 847, 213, 0, 0, 0,
	0, 0, 279, 280, 281, 901, 899, 900, 0, 284,
	0, 285, 0, 0, 941, 286, 287, 0, 288, 964,
	0, 857, 289, 0, 290, 291, 292, 293, 932, 933,
	936, 341, 943, 294, 295, 0, 296, 297, 878, 0,
	0, 0, 214, 298, 300, 307, 0, 942, 301, 890,
	881, 892, 894, 895, 896, 891, 0, 883, 0, 308,
	944, 934, 945, 309, 310, 311, 946, 916, 917, 0,
	0, 314, 315, 316, 317, 0, 319, 318, 0, 320,
	965, 947, 321, 322, 948, 0, 323, 324, 0, 0,
	325, 326, 0, 327, 328, 330, 332, 329, 331, 333,
	335, 870, 334, 949, 337, 338, 340, 339, 825, 215,
	950, 848, 935, 905, 342, 343, 0, 879, 345, 880,
	0, 0, 348, 349, 350, 0, 0, 351, 492, 951,
	352, 952, 959, 353, 347, 354, 355, 356, 357, 358,
	359, 360, 0, 361, 362, 960, 363, 495, 364, 0,
	365, 0, 366, 367, 368, 369, 370, 371, 898, 372,
	373, 0, 374, 375, 376, 377, 378, 0, 380, 381,
	382, 379, 383, 384, 385, 386, 0, 387, 953, 388,
	389, 390, 391, 835, 392, 0, 393, 397, 398, 399,
	400, 401, 402, 403, 0, 410, 411, 871, 872, 874,
	875, 405, 409, 412, 413, 928, 414, 394, 395, 415,
	954, 416, 893, 873, 418, 0, 428, 419, 420, 421,
	396, 422, 426, 939, 423, 424, 425, 961, 0, 430,
	431, 429, 0, 432, 433, 434, 435, 436, 273, 869,
	0, 912, 913, 914, 915, 0, 444, 0, 438, 439,
	962, 440, 963, 846, 441, 442, 443, 0, 3444, 446,
	0, 829, 447, 448, 449, 450, 451, 453, 929, 454,
	0, 877, 455, 456, 457, 506, 909, 956, 0, 459,
	458, 509, 0, 0, 0, 0, 460, 461, 510, 462,
	463, 464, 826, 0, 0, 0, 0, 0, 0, 0,
	824, 0, 0, 0, 0, 822, 823, 882, 839, 840,
	841, 837, 838, 851, 852, 0, 0, 0, 0, 850,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 931, 856, 0, 0, 0,
	222, 223, 224, 225, 3443, 897, 876, 908, 866, 907,
	906, 0, 229, 868, 867, 232, 233, 234, 858, 930,
	235, 966, 967, 472, 0, 236, 937, 0, 920, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 0, 247, 0, 248, 249, 250, 0, 940, 251,
	3445, 923, 921, 922, 927, 925, 924, 926, 253, 254,
	255, 256, 911, 258, 904, 903, 828, 259, 0, 261,
	260, 0, 262, 0, 0, 263, 902, 265, 0, 266,
	0, 267, 268, 0, 834, 269, 270, 272, 274, 271,
	275, 276, 277, 278, 957, 958, 847, 213, 0, 0,
	0, 0, 0, 279, 280, 281, 901, 899, 900, 0,
	284, 0, 285, 0, 0, 941, 286, 287, 0, 288,
	964, 0, 857, 289, 0, 290, 291, 292, 293, 932,
	933, 936, 341, 943, 294, 295, 0, 296, 297, 878,
	0, 0, 0, 214, 298, 300, 307, 0, 942, 301,
	890, 881, 892, 894, 895, 896, 891, 0, 883, 0,
	308, 944, 934, 945, 309, 310, 311, 946, 916, 917,
	0, 0, 314, 315, 316, 317, 0, 319, 318, 0,
	320, 965, 947, 321, 322, 948, 0, 323, 324, 0,
	0, 325, 326, 0, 327, 328, 330, 332, 329, 331,
	333, 335, 870, 334, 949, 337, 338, 340, 339, 825,
	215, 950, 848, 935, 905, 342, 343, 0, 879, 345,
	880, 0, 0, 348, 349, 350, 0, 0, 351, 492,
	951, 352, 952, 959, 353, 347, 354, 355, 356, 357,
	358, 359, 360, 0, 361, 362, 960, 363, 495, 364,
	0, 365, 0, 366, 367, 368, 369, 370, 371, 898,
	372, 373, 0, 374, 375, 376, 377, 378, 0, 380,
	381, 382, 379, 383, 384, 385, 386, 0, 387, 953,
	388, 389, 390, 391, 835, 392, 0, 393, 397, 398,
	399, 400, 401, 402, 403, 0, 410, 411, 871, 872,
	874, 875, 405, 409, 412, 413, 928, 414, 394, 395,
	415, 954, 416, 893, 873, 418, 0, 428, 419, 420,
	421, 396, 422, 426, 939, 423, 424, 425, 961, 0,
	430, 431, 429, 0, 432, 433, 434, 435, 436, 273,
	869, 0, 912, 913, 914, 915, 0, 444, 0, 438,
	439, 962, 440, 963, 846, 441, 442, 443, 0, 3444,
	446, 0, 829, 447, 448, 449, 450, 451, 453, 929,
	454, 0, 877, 455, 456, 457, 506, 909, 956, 0,
	459, 458, 509, 0, 0, 0, 0, 460, 461, 510,
	462, 463, 464, 826, 0, 0, 0, 0, 0, 0,
	0, 824, 0, 0, 0, 0, 822, 823, 882, 839,
	840, 841, 837, 838, 851, 852, 0, 0, 0, 0,
	850, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 931, 856, 0, 0,
	0, 222, 223, 224, 225, 466, 897, 876, 908, 866,
	907, 906, 0, 229, 868, 867, 232, 233, 234, 858,
	930, 235, 966, 967, 472, 0, 236, 937, 0, 920,
	0, 237, 238, 239, 240, 241, 242, 0, 244, 245,
	246, 243, 0, 247, 0, 248, 249, 250, 0, 940,
	251, 252, 923, 921, 922, 927, 925, 924, 926, 253,
	254, 255, 256, 911, 258, 904, 903, 0, 259, 0,
	261, 260, 0, 262, 0, 0, 263, 902, 265, 0,
	266, 0, 267, 268, 0, 834, 269, 270, 272, 274,
	271, 275, 276, 277, 278, 957, 958, 847, 213, 0,
	0, 0, 0, 0, 279, 280, 281, 901, 899, 900,
	0, 284, 0, 285, 0, 0, 941, 286, 287, 0,
	288, 964, 0, 857, 289, 0, 290, 291, 292, 293,
	932, 933, 936, 341, 943, 294, 295, 0, 296, 297,
	878, 0, 0, 0, 214, 298, 300, 307, 0, 942,
	301, 890, 881, 892, 894, 895, 896, 891, 0, 883,
	0, 308, 944, 934, 945, 309, 310, 311, 946, 916,
	917, 0, 0, 314, 315, 316, 317, 0, 319, 318,
	0, 320, 965, 947, 321, 322, 948, 0, 323, 324,
	0, 0, 325, 326, 0, 327, 328, 330, 332, 329,
	331, 333, 335, 870, 334, 949, 337, 338, 340, 339,
	0, 215, 950, 848, 935, 905, 342, 343, 0, 879,
	345, 880, 0, 0, 348, 349, 350, 0, 0, 351,
	492, 951, 352, 952, 959, 353, 347, 354, 355, 356,
	357, 358, 359, 360, 0, 361, 362, 960, 363, 495,
	364, 0, 365, 0, 366, 367, 368, 369, 370, 371,
	898, 372, 373, 0, 374, 375, 376, 377, 378, 0,
	380, 381, 382, 379, 383, 384, 385, 386, 0, 387,
	953, 388, 389, 390, 391, 835, 392, 0, 393, 397,
	398, 399, 400, 401, 402, 403, 0, 410, 411, 871,
	872, 874, 875, 405, 409, 412, 413, 928, 414, 394,
	395, 415, 954, 416, 893, 873, 418, 0, 428, 419,
	420, 421, 396, 422, 426, 939, 423, 424, 425, 961,
	0, 430, 431, 429, 0, 432, 433, 434, 435, 436,
	273, 869, 0, 912, 913, 914, 915, 0, 444, 0,
	438, 439, 962, 440, 963, 846, 441, 442, 443, 0,
	445, 446, 0, 0, 447, 448, 449, 450, 451, 453,
	929, 454, 0, 877, 455, 456, 457, 506, 909, 956,
	0, 459, 458, 509, 0, 0, 0, 0, 460, 461,
	510, 462, 463, 464, 882, 839, 840, 841, 837, 838,
	851, 0, 2115, 0, 0, 0, 0, 2113, 2114, 0,
	0, 216, 217, 218, 219, 220, 852, 221, 0, 0,
	0, 850, 931, 856, 0, 0, 0, 222, 223, 224,
	225, 0, 897, 876, 908, 866, 907, 906, 0, 229,
	868, 867, 232, 233, 234, 858, 930, 235, 966, 967,
	472, 0, 236, 937, 0, 920, 0, 237, 238, 239,
	240, 241, 242, 0, 244, 245, 246, 243, 0, 247,
	0, 248, 249, 250, 0, 940, 251, 3445, 923, 921,
	922, 927, 925, 924, 926, 253, 254, 255, 256, 911,
	258, 904, 903, 828, 259, 0, 261, 260, 0, 262,
	0, 0, 263, 902, 265, 0, 266, 0, 267, 268,
	0, 834, 269, 270, 272, 274, 271, 275, 276, 277,
	278, 957, 958, 847, 213, 0, 0, 0, 0, 0,
	279, 280, 281, 901, 899, 900, 0, 284, 0, 285,
	0, 0, 941, 286, 287, 0, 288, 964, 0, 857,
	289, 0, 290, 291, 292, 293, 932, 933, 936, 341,
	0, 294, 295, 0, 296, 297, 878, 0, 0, 0,
	214, 298, 300, 307, 0, 942, 301, 890, 881, 892,
	894, 895, 896, 891, 0, 883, 0, 308, 0, 934,
	0, 309, 310, 311, 946, 916, 917, 0, 0, 314,
	315, 316, 317, 0, 319, 318, 0, 320, 965, 947,
	321, 322, 0, 0, 323, 324, 0, 0, 325, 326,
	0, 327, 328, 330, 332, 329, 331, 333, 335, 870,
	334, 949, 337, 338, 340, 339, 825, 215, 0, 848,
	935, 905, 342, 343, 0, 879, 345, 880, 0, 0,
	348, 349, 350, 0, 0, 351, 492, 951, 352, 952,
	959, 353, 347, 354, 355, 356, 357, 358, 359, 360,
	0, 361, 362, 960, 363, 495, 364, 0, 365, 0,
	366, 367, 368, 369, 370, 371, 898, 372, 373, 0,
	374, 375, 376, 377, 378, 0, 380, 381, 382, 379,
	383, 384, 385, 386, 0, 387, 953, 388, 389, 390,
	391, 835, 392, 0, 393, 397, 398, 399, 400, 401,
	402, 403, 0, 410, 411, 871, 872, 874, 875, 405,
	409, 412, 413, 928, 414, 394, 395, 415, 0, 416,
	893, 873, 418, 0, 428, 419, 420, 421, 396, 422,
	426, 939, 423, 424, 425, 961, 0, 430, 431, 429,
	0, 432, 433, 434, 435, 436, 273, 869, 0, 912,
	913, 914, 915, 0, 444, 0, 438, 439, 962, 440,
	963, 846, 441, 442, 443, 0, 3444, 446, 0, 829,
	447, 448, 449, 450, 451, 453, 929, 454, 0, 877,
	455, 456, 457, 506, 909, 956, 0, 459, 458, 509,
	0, 0, 0, 0, 460, 461, 510, 462, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 815,
	0, 1003, 0, 822, 823, 0, 0, 0, 0, 0,
	0, 0, 852, 0, 0, 0, 0, 850, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 931,
	0, 0, 0, 0, 222, 223, 224, 225, 466, 467,
	226, 468, 227, 228, 469, 0, 229, 230, 231, 232,
	233, 234, 0, 930, 235, 470, 471, 472, 0, 236,
	937, 0, 920, 0, 237, 238, 239, 240, 241, 242,
	0, 244, 245, 246, 243, 0, 247, 0, 248, 249,
	250, 0, 940, 251, 252, 923, 921, 922, 927, 925,
	924, 926, 253, 254, 255, 256, 257, 258, 474, 475,
	0, 259, 0, 261, 260, 0, 262, 0, 0, 263,
	264, 265, 0, 266, 0, 267, 268, 0, 476, 269,
	270, 272, 274, 271, 275, 276, 277, 278, 957, 958,
	0, 213, 0, 0, 0, 0, 0, 279, 280, 281,
	479, 282, 283, 0, 284, 0, 285, 0, 0, 941,
	286, 287, 0, 288, 964, 0, 481, 289, 0, 290,
	291, 292, 293, 932, 933, 936, 341, 943, 294, 295,
	0, 296, 297, 299, 0, 0, 0, 214, 298, 300,
	307, 0, 942, 301, 485, 303, 302, 304, 305, 306,
	486, 0, 487, 0, 308, 944, 934, 945, 309, 310,
	311, 946, 312, 313, 0, 0, 314, 315, 316, 317,
	990, 319, 318, 0, 320, 965, 947, 321, 322, 948,
	0, 323, 324, 0, 0, 325, 326, 0, 327, 328,
	330, 332, 329, 331, 333, 335, 336, 334, 949, 337,
	338, 340, 339, 0, 215, 950, 0, 935, 491, 342,
	343, 0, 344, 345, 346, 0, 995, 348, 349, 350,
	0, 0, 351, 492, 951, 352, 952, 959, 353, 347,
	354, 355, 356, 357, 358, 359, 360, 0, 361, 362,
	960, 363, 495, 364, 0, 365, 0, 366, 367, 368,
	369, 370, 371, 496, 372, 373, 0, 374, 375, 376,
	377, 378, 0, 380, 381, 382, 379, 383, 384, 385,
	386, 0, 387, 953, 388, 389, 390, 391, 497, 997,
	0, 393, 397, 398, 399, 400, 401, 402, 403, 179,
	410, 411, 404, 406, 407, 408, 405, 409, 412, 413,
	928, 414, 394, 395, 415, 954, 416, 498, 417, 418,
	0, 428, 419, 420, 421, 396, 422, 426, 427, 423,
	424, 425, 961, 0, 430, 431, 429, 181, 432, 433,
	434, 435, 436, 273, 437, 0, 500, 501, 502, 503,
	0, 444, 0, 438, 439, 962, 440, 963, 0, 441,
	442, 443, 0, 445, 446, 0, 0, 447, 448, 449,
	450, 451, 453, 929, 454, 0, 452, 455, 456, 457,
	1306, 507, 508, 0, 459, 458, 509, 1003, 0, 0,
	173, 460, 461, 510, 462, 463, 464, 0, 174, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 931, 0, 987, 0, 1599,
	222, 223, 224, 225, 466, 467, 226, 468, 227, 228,
	469, 0, 229, 230, 231, 232, 233, 234, 0, 930,
	235, 470, 471, 472, 0, 236, 937, 0, 920, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 0, 247, 0, 248, 249, 250, 0, 940, 251,
	252, 923, 921, 922, 927, 925, 924, 926, 253, 254,
	255, 256, 257, 258, 474, 475, 0, 259, 0, 261,
	260, 0, 262, 0, 0, 263, 264, 265, 0, 266,
	0, 267, 268, 0, 476, 269, 270, 272, 274, 271,
	275, 276, 277, 278, 957, 958, 0, 213, 0, 0,
	0, 0, 0, 279, 280, 281, 479, 282, 283, 0,
	284, 0, 285, 0, 0, 941, 286, 287, 0, 288,
	964, 0, 481, 289, 0, 290, 291, 292, 293, 932,
	933, 936, 341, 943, 294, 295, 0, 296, 297, 299,
	0, 0, 0, 214, 298, 300, 307, 0, 942, 301,
	485, 303, 302, 304, 305, 306, 486, 0, 487, 0,
	308, 944, 934, 945, 309, 310, 311, 946, 312, 313,
	0, 0, 314, 315, 316, 317, 990, 319, 318, 0,
	320, 965, 947, 321, 322, 948, 0, 323, 324, 0,
	0, 325, 326, 0, 327, 328, 330, 332, 329, 331,
	333, 335, 336, 334, 949, 337, 338, 340, 339, 0,
	215, 950, 0, 935, 491, 342, 343, 0, 344, 345,
	346, 0, 995, 348, 349, 350, 0, 0, 351, 492,
	951, 352, 952, 959, 353, 347, 354, 355, 356, 357,
	358, 359, 360, 0, 361, 362, 960, 363, 495, 364,
	0, 365, 0, 366, 367, 368, 369, 370, 371, 496,
	372, 373, 0, 374, 375, 376, 377, 378, 0, 380,
	381, 382, 379, 383, 384, 385, 386, 0, 387, 953,
	388, 389, 390, 391, 497, 997, 0, 393, 397, 398,
	399, 400, 401, 402, 403, 179, 410, 411, 404, 406,
	407, 408, 405, 409, 412, 413, 928, 414, 394, 395,
	415, 954, 416, 498, 417, 418, 0, 428, 419, 420,
	421, 396, 422, 426, 427, 423, 424, 425, 961, 0,
	430, 431, 429, 181, 432, 433, 434, 435, 436, 273,
	437, 0, 500, 501, 502, 503, 0, 444, 0, 438,
	439, 962, 440, 963, 0, 441, 442, 443, 0, 445,
	446, 0, 0, 447, 448, 449, 450, 451, 453, 929,
	454, 0, 452, 455, 456, 457, 1306, 507, 508, 0,
	459, 458, 509, 0, 0, 0, 173, 460, 461, 510,
	462, 463, 464, 0, 174, 0, 0, 2568, 0, 1003,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 987, 0, 1599, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 931, 0, 0,
	0, 0, 222, 223, 224, 225, 466, 467, 226, 468,
	227, 228, 469, 0, 229, 230, 231, 232, 233, 234,
	0, 930, 235, 470, 471, 472, 0, 236, 937, 0,
	920, 0, 237, 238, 239, 240, 241, 242, 0, 244,
	245, 246, 243, 0, 247, 0, 248, 249, 250, 0,
	940, 251, 252, 923, 921, 922, 927, 925, 924, 926,
	253, 254, 255, 256, 257, 258, 474, 475, 0, 259,
	0, 261, 260, 0, 262, 0, 0, 263, 264, 265,
	0, 266, 0, 267, 268, 0, 476, 269, 270, 272,
	274, 271, 275, 276, 277, 278, 957, 958, 0, 213,
	0, 0, 0, 0, 0, 279, 280, 281, 479, 282,
	283, 0, 284, 0, 285, 0, 0, 941, 286, 287,
	0, 288, 964, 0, 481, 289, 0, 290, 291, 292,
	293, 932, 933, 936, 341, 943, 294, 295, 0, 296,
	297, 299, 0, 0, 0, 214, 298, 300, 307, 0,
	942, 301, 485, 303, 302, 304, 305, 306, 486, 0,
	487, 0, 308, 944, 934, 945, 309, 310, 311, 946,
	312, 313, 0, 0, 314, 315, 316, 317, 990, 319,
	318, 0, 320, 965, 947, 321, 322, 948, 0, 323,
	324, 0, 0, 325, 326, 0, 327, 328, 330, 332,
	329, 331, 333, 335, 336, 334, 949, 337, 338, 340,
	339, 0, 215, 950, 0, 935, 491, 342, 343, 0,
	344, 345, 346, 0, 995, 348, 349, 350, 0, 0,
	351, 492, 951, 352, 952, 959, 353, 347, 354, 355,
	356, 357, 358, 359, 360, 0, 361, 362, 960, 363,
	495, 364, 0, 365, 0, 366, 367, 368, 369, 370,
	371, 496, 372, 373, 0, 374, 375, 376, 377, 378,
	0, 380, 381, 382, 379, 383, 384, 385, 386, 0,
	387, 953, 388, 389, 390, 391, 497, 997, 0, 393,
	397, 398, 399, 400, 401, 402, 403, 0, 410, 411,
	404, 406, 407, 408, 405, 409, 412, 413, 928, 414,
	394, 395, 415, 954, 416, 498, 417, 418, 0, 428,
	419, 420, 421, 396, 422, 426, 427, 423, 424, 425,
	961, 0, 430, 431, 429, 0, 432, 433, 434, 435,
	436, 273, 437, 0, 500, 501, 502, 503, 0, 444,
	0, 438, 439, 962, 440, 963, 0, 441, 442, 443,
	0, 445, 446, 0, 0, 447, 448, 449, 450, 451,
	453, 929, 454, 0, 452, 455, 456, 457, 506, 507,
	508, 0, 459, 458, 509, 0, 986, 0, 1003, 460,
	461, 510, 462, 463, 464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 987, 931, 992, 0, 0,
	0, 222, 223, 224, 225, 466, 467, 226, 468, 227,
	228, 469, 0, 229, 230, 231, 232, 233, 234, 0,
	930, 235, 470, 471, 472, 0, 236, 937, 0, 920,
	0, 237, 238, 239, 240, 241, 242, 0, 244, 245,
	246, 243, 0, 247, 0, 248, 249, 250, 0, 940,
	251, 252, 923, 921, 922, 927, 925, 924, 926, 253,
	254, 255, 256, 257, 258, 474, 475, 0, 259, 0,
	261, 260, 0, 262, 0, 0, 263, 264, 265, 0,
	266, 0, 267, 268, 0, 476, 269, 270, 272, 274,
	271, 275, 276, 277, 278, 957, 958, 0, 213, 0,
	0, 0, 0, 0, 279, 280, 281, 479, 282, 283,
	0, 284, 0, 285, 0, 0, 941, 286, 287, 0,
	288, 964, 0, 481, 289, 0, 290, 291, 292, 293,
	932, 933, 936, 341, 943, 294, 295, 0, 296, 297,
	299, 0, 0, 0, 214, 298, 300, 307, 0, 942,
	301, 485, 303, 302, 304, 305, 306, 486, 0, 487,
	0, 308, 944, 934, 945, 309, 310, 311, 946, 312,
	313, 0, 0, 314, 315, 316, 317, 990, 319, 318,
	0, 320, 965, 947, 321, 322, 948, 0, 323, 324,
	0, 0, 325, 326, 0, 327, 328, 330, 332, 329,
	331, 333, 335, 336, 334, 949, 337, 338, 340, 339,
	0, 215, 950, 0, 935, 491, 342, 343, 0, 344,
	345, 346, 0, 995, 348, 349, 350, 0, 0, 351,
	492, 951, 352, 952, 959, 353, 347, 354, 355, 356,
	357, 358, 359, 360, 0, 361, 362, 960, 363, 495,
	364, 0, 365, 0, 366, 367, 368, 369, 370, 371,
	496, 372, 373, 0, 374, 375, 376, 377, 378, 0,
	380, 381, 382, 379, 383, 384, 385, 386, 0, 387,
	953, 388, 389, 390, 391, 497, 997, 0, 393, 397,
	398, 399, 400, 401, 402, 403, 0, 410, 411, 404,
	406, 407, 408, 405, 409, 412, 413, 928, 414, 394,
	395, 415, 954, 416, 498, 417, 418, 0, 428, 419,
	420, 421, 396, 422, 426, 427, 423, 424, 425, 961,
	0, 430, 431, 429, 0, 432, 433, 434, 435, 436,
	273, 437, 0, 500, 501, 502, 503, 0, 444, 0,
	438, 439, 962, 440, 963, 0, 441, 442, 443, 0,
	445, 446, 0, 0, 447, 448, 449, 450, 451, 453,
	929, 454, 0, 452, 455, 456, 457, 506, 507, 508,
	0, 459, 458, 509, 1003, 0, 0, 0, 460, 461,
	510, 462, 463, 464, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 931, 0, 987, 0, 992, 222, 223, 224,
	225, 466, 467, 226, 468, 227, 228, 469, 0, 229,
	230, 231, 232, 233, 234, 0, 930, 235, 470, 471,
	472, 0, 236, 937, 0, 920, 0, 237, 238, 239,
	240, 241, 242, 0, 244, 245, 246, 243, 0, 247,
	0, 248, 249, 250, 0, 940, 251, 252, 923, 921,
	922, 927, 925, 924, 926, 253, 254, 255, 256, 257,
	258, 474, 475, 0, 259, 0, 261, 260, 0, 262,
	0, 0, 263, 264, 265, 0, 266, 0, 267, 268,
	0, 476, 269, 270, 272, 274, 271, 275, 276, 277,
	278, 957, 958, 0, 213, 0, 0, 0, 0, 0,
	279, 280, 281, 479, 282, 283, 0, 284, 0, 285,
	0, 0, 941, 286, 287, 0, 288, 964, 0, 481,
	289, 0, 290, 291, 292, 293, 932, 933, 936, 341,
	943, 294, 295, 0, 296, 297, 299, 0, 0, 0,
	214, 298, 300, 307, 0, 942, 301, 485, 303, 302,
	304, 305, 306, 486, 0, 487, 0, 308, 944, 934,
	945, 309, 310, 311, 946, 312, 313, 0, 0, 314,
	315, 316, 317, 990, 319, 318, 0, 320, 965, 947,
	321, 322, 948, 0, 323, 324, 0, 0, 325, 326,
	0, 327, 328, 330, 332, 329, 331, 333, 335, 336,
	334, 949, 337, 338, 340, 339, 0, 215, 950, 0,
	935, 491, 342, 343, 0, 344, 345, 346, 0, 995,
	348, 349, 350, 0, 0, 351, 492, 951, 352, 952,
	959, 353, 347, 354, 355, 356, 357, 358, 359, 360,
	0, 361, 362, 960, 363, 495, 364, 0, 365, 0,
	366, 367, 368, 369, 370, 371, 496, 372, 373, 0,
	374, 375, 376, 377, 378, 0, 380, 381, 382, 379,
	383, 384, 385, 386, 0, 387, 953, 388, 389, 390,
	391, 497, 997, 0, 393, 397, 398, 399, 400, 401,
	402, 403, 0, 410, 411, 404, 406, 407, 408, 405,
	409, 412, 413, 928, 414, 394, 395, 415, 954, 416,
	498, 417, 418, 0, 428, 419, 420, 421, 396, 422,
	426, 427, 423, 424, 425, 961, 0, 430, 431, 429,
	0, 432, 433, 434, 435, 436, 273, 437, 0, 500,
	501, 502, 503, 0, 444, 0, 438, 439, 962, 440,
	963, 0, 441, 442, 443, 0, 445, 446, 0, 0,
	447, 448, 449, 450, 451, 453, 929, 454, 0, 452,
	455, 456, 457, 506, 507, 508, 0, 459, 458, 509,
	1003, 0, 0, 0, 460, 461, 510, 462, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 931, 0,
	987, 0, 992, 222, 223, 224, 225, 466, 467, 226,
	468, 227, 228, 469, 0, 229, 230, 231, 232, 233,
	234, 0, 930, 235, 470, 471, 472, 0, 236, 937,
	0, 920, 0, 237, 238, 239, 240, 241, 242, 0,
	244, 245, 246, 243, 0, 247, 0, 248, 249, 250,
	0, 940, 251, 252, 923, 921, 922, 927, 925, 924,
	926, 253, 254, 255, 256, 257, 258, 474, 475, 0,
	259, 0, 261, 260, 0, 262, 0, 0, 263, 264,
	265, 0, 266, 0, 267, 268, 0, 476, 269, 270,
	272, 274, 271, 275, 276, 277, 278, 957, 958, 0,
	213, 0, 0, 0, 0, 0, 279, 280, 281, 479,
	282, 283, 0, 284, 0, 285, 0, 0, 941, 286,
	287, 0, 288, 964, 0, 481, 289, 0, 290, 291,
	292, 293, 932, 933, 936, 341, 943, 294, 295, 0,
	296, 297, 299, 0, 0, 0, 214, 298, 300, 307,
	0, 942, 301, 485, 303, 302, 304, 305, 306, 486,
	0, 487, 0, 308, 944, 934, 945, 309, 310, 311,
	946, 312, 313, 0, 0, 314, 315, 316, 317, 0,
	319, 318, 0, 320, 965, 947, 321, 322, 948, 0,
	323, 324, 0, 0, 325, 326, 0, 327, 328, 330,
	332, 329, 331, 333, 335, 336, 334, 949, 337, 338,
	340, 339, 0, 215, 950, 0, 935, 491, 342, 343,
	0, 344, 345, 346, 0, 0, 348, 349, 350, 0,
	0, 351, 492, 951, 352, 952, 959, 353, 347, 354,
	355, 356, 357, 358, 359, 360, 0, 361, 362, 960,
	363, 495, 364, 0, 365, 0, 366, 367, 368, 369,
	370, 371, 496, 372, 373, 0, 374, 375, 376, 377,
	378, 0, 380, 381, 382, 379, 383, 384, 385, 386,
	0, 387, 953, 388, 389, 390, 391, 497, 997, 0,
	393, 397, 398, 399, 400, 401, 402, 403, 0, 410,
	411, 404, 406, 407, 408, 405, 409, 412, 413, 928,
	414, 394, 395, 415, 954, 416, 498, 417, 418, 0,
	428, 419, 420, 421, 396, 422, 426, 427, 423, 424,
	425, 961, 0, 430, 431, 429, 0, 432, 433, 434,
	435, 436, 273, 437, 0, 500, 501, 502, 503, 0,
	444, 0, 438, 439, 962, 440, 963, 0, 441, 442,
	443, 0, 445, 446, 0, 0, 447, 448, 449, 450,
	451, 453, 929, 454, 0, 452, 455, 456, 457, 506,
	507, 508, 0, 459, 458, 509, 815, 0, 1160, 0,
	460, 461, 510, 462, 463, 464, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 465, 0, 1494, 0,
	0, 222, 223, 224, 225, 466, 467, 226, 468, 227,
	228, 469, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 470, 471, 472, 0, 236, 473, 0, 1064,
	0, 237, 238, 239, 240, 241, 242, 0, 244, 245,
	246, 243, 0, 247, 0, 248, 249, 250, 0, 940,
	251, 252, 0, 0, 0, 0, 0, 0, 0, 253,
	254, 255, 256, 257, 258, 474, 475, 0, 259, 0,
	261, 260, 0, 262, 0, 0, 263, 264, 265, 0,
	266, 0, 267, 268, 0, 476, 269, 270, 272, 274,
	271, 275, 276, 277, 278, 477, 478, 0, 213, 0,
	0, 0, 0, 0, 279, 280, 281, 479, 282, 283,
	0, 284, 0, 285, 0, 0, 941, 286, 287, 0,
	288, 480, 0, 481, 289, 0, 290, 291, 292, 293,
	482, 483, 484, 341, 943, 294, 295, 0, 296, 297,
	299, 0, 0, 0, 0, 298, 300, 307, 0, 942,
	301, 485, 303, 302, 304, 305, 306, 486, 0, 487,
	0, 308, 944, 488, 945, 309, 310, 311, 946, 312,
	313, 0, 0, 314, 315, 316, 317, 0, 319, 318,
	0, 320, 489, 947, 321, 322, 948, 0, 323, 324,
	0, 0, 325, 326, 0, 327, 328, 330, 332, 329,
	331, 333, 335, 336, 334, 949, 337, 338, 340, 339,
	0, 0, 950, 0, 490, 491, 342, 343, 0, 344,
	345, 346, 0, 0, 348, 349, 350, 0, 0, 351,
	492, 951, 352, 952, 493, 353, 347, 354, 355, 356,
	357, 358, 359, 360, 0, 361, 362, 494, 363, 495,
	364, 0, 365, 0, 366, 367, 368, 369, 370, 371,
	496, 372, 373, 0, 374, 375, 376, 377, 378, 0,
	380, 381, 382, 379, 383, 384, 385, 386, 0, 387,
	953, 388, 389, 390, 391, 497, 392, 0, 393, 397,
	398, 399, 400, 401, 402, 403, 179, 410, 411, 404,
	406, 407, 408, 405, 409, 412, 413, 0, 414, 394,
	395, 415, 954, 416, 498, 417, 418, 0, 428, 419,
	420, 421, 396, 422, 426, 427, 423, 424, 425, 499,
	0, 430, 431, 429, 181, 432, 433, 434, 435, 436,
	273, 437, 0, 500, 501, 502, 503, 0, 444, 0,
	438, 439, 504, 440, 505, 0, 441, 442, 443, 0,
	445, 446, 0, 0, 447, 448, 449, 450, 451, 453,
	0, 454, 0, 452, 455, 456, 457, 1306, 507, 508,
	0, 459, 458, 509, 1303, 0, 1160, 173, 460, 461,
	510, 462, 463, 464, 0, 174, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 465, 0, 149, 0, 0, 222,
	223, 224, 225, 466, 467, 226, 468, 227, 228, 469,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	470, 471, 472, 0, 236, 473, 0, 1064, 0, 237,
	238, 239, 240, 241, 242, 0, 244, 245, 246, 243,
	0, 247, 0, 248, 249, 250, 0, 940, 251, 252,
	0, 0, 0, 0, 0, 0, 0, 253, 254, 255,
	256, 257, 258, 474, 475, 0, 259, 0, 261, 260,
	0, 262, 0, 0, 263, 264, 265, 0, 266, 0,
	267, 268, 0, 476, 269, 270, 272, 274, 271, 275,
	276, 277, 278, 477, 478, 0, 213, 0, 0, 0,
	0, 0, 279, 280, 281, 479, 282, 283, 0, 284,
	0, 285, 0, 0, 941, 286, 287, 0, 288, 480,
	0, 481, 289, 0, 290, 291, 292, 293, 482, 483,
	484, 341, 943, 294, 295, 0, 296, 297, 299, 0,
	0, 0, 0, 298, 300, 307, 0, 942, 301, 485,
	303, 302, 304, 305, 306, 486, 0, 487, 0, 308,
	944, 488, 945, 309, 310, 311, 946, 312, 313, 0,
	0, 314, 315, 316, 317, 0, 319, 318, 0, 320,
	489, 947, 321, 322, 948, 0, 323, 324, 0, 0,
	325, 326, 0, 327, 328, 330, 332, 329, 331, 333,
	335, 336, 334, 949, 337, 338, 340, 339, 0, 0,
	950, 0, 490, 491, 342, 343, 0, 344, 345, 346,
	0, 0, 348, 349, 350, 0, 0, 351, 492, 951,
	352, 952, 493, 353, 347, 354, 355, 356, 357, 358,
	359, 360, 0, 361, 362, 494, 363, 495, 364, 0,
	365, 0, 366, 367, 368, 369, 370, 371, 496, 372,
	373, 0, 374, 375, 376, 377, 378, 0, 380, 381,
	382, 379, 383, 384, 385, 386, 0, 387, 953, 388,
	389, 390, 391, 497, 392, 0, 393, 397, 398, 399,
	400, 401, 402, 403, 179, 410, 411, 404, 406, 407,
	408, 405, 409, 412, 413, 0, 414, 394, 395, 415,
	954, 416, 498, 417, 418, 0, 428, 419, 420, 421,
	396, 422, 426, 427, 423, 424, 425, 499, 0, 430,
	431, 429, 181, 432, 433, 434, 435, 436, 273, 437,
	0, 500, 501, 502, 503, 0, 444, 0, 438, 439,
	504, 440, 505, 0, 441, 442, 443, 0, 445, 446,
	0, 0, 447, 448, 449, 450, 451, 453, 0, 454,
	0, 452, 455, 456, 457, 1306, 507, 508, 0, 459,
	458, 509, 0, 0, 0, 173, 460, 461, 510, 462,
	463, 464, 0, 174, 0, 0, 0, 0, 1160, 1159,
	0, 0, 0, 0, 1157, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 149, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 465, 0, 0, 0,
	0, 222, 223, 224, 225, 466, 467, 226, 468, 227,
	228, 469, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 470, 471, 472, 0, 236, 473, 0, 1064,
	0, 237, 238, 239, 240, 241, 242, 0, 244, 245,
	246, 243, 0, 247, 0, 248, 249, 250, 0, 940,
	251, 252, 0, 0, 0, 0, 0, 0, 0, 253,
	254, 255, 256, 257, 258, 474, 475, 0, 259, 0,
	261, 260, 0, 262, 0, 0, 263, 264, 265, 0,
	266, 0, 267, 268, 0, 476, 269, 270, 272, 274,
	271, 275, 276, 277, 278, 477, 478, 0, 213, 0,
	0, 0, 0, 0, 279, 280, 281, 479, 282, 283,
	0, 284, 0, 285, 0, 0, 941, 286, 287, 0,
	288, 480, 0, 481, 289, 0, 290, 291, 292, 293,
	482, 483, 484, 341, 943, 294, 295, 0, 296, 297,
	299, 0, 0, 0, 0, 298, 300, 307, 0, 942,
	301, 485, 303, 302, 304, 305, 306, 486, 0, 487,
	0, 308, 944, 488, 945, 309, 310, 311, 946, 312,
	313, 0, 0, 314, 315, 316, 317, 0, 319, 318,
	0, 320, 489, 947, 321, 322, 948, 0, 323, 324,
	0, 0, 325, 326, 0, 327, 328, 330, 332, 329,
	331, 333, 335, 336, 334, 949, 337, 338, 340, 339,
	0, 0, 950, 0, 490, 491, 342, 343, 0, 344,
	345, 346, 0, 0, 348, 349, 350, 0, 0, 351,
	492, 951, 352, 952, 493, 353, 347, 354, 355, 356,
	357, 358, 359, 360, 0, 361, 362, 494, 363, 495,
	364, 0, 365, 0, 366, 367, 368, 369, 370, 371,
	496, 372, 373, 0, 374, 375, 376, 377, 378, 0,
	380, 381, 382, 379, 383, 384, 385, 386, 0, 387,
	953, 388, 389, 390, 391, 497, 392, 0, 393, 397,
	398, 399, 400, 401, 402, 403, 0, 410, 411, 404,
	406, 407, 408, 405, 409, 412, 413, 0, 414, 394,
	395, 415, 954, 416, 498, 417, 418, 0, 428, 419,
	420, 421, 396, 422, 426, 427, 423, 424, 425, 499,
	0, 430, 431, 429, 0, 432, 433, 434, 435, 436,
	273, 437, 0, 500, 501, 502, 503, 0, 444, 0,
	438, 439, 504, 440, 505, 0, 441, 442, 443, 0,
	445, 446, 0, 0, 447, 448, 449, 450, 451, 453,
	0, 454, 0, 452, 455, 456, 457, 506, 507, 508,
	0, 459, 458, 509, 0, 0, 0, 0, 460, 461,
	510, 462, 463, 464, 1160, 1159, 0, 0, 0, 0,
	1157, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 1775, 221, 0, 0,
	0, 0, 465, 0, 0, 0, 0, 222, 223, 224,
	225, 466, 467, 226, 468, 227, 228, 469, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 470, 471,
	472, 0, 236, 473, 0, 1064, 0, 237, 238, 239,
	240, 241, 242, 0, 244, 245, 246, 243, 0, 247,
	0, 248, 249, 250, 0, 940, 251, 252, 0, 0,
	0, 0, 0, 0, 0, 253, 254, 255, 256, 257,
	258, 474, 475, 0, 259, 0, 261, 260, 0, 262,
	0, 0, 263, 264, 265, 0, 266, 0, 267, 268,
	0, 476, 269, 270, 272, 274, 271, 275, 276, 277,
	278, 477, 478, 0, 213, 0, 0, 0, 0, 0,
	279, 280, 281, 479, 282, 283, 0, 284, 0, 285,
	0, 0, 941, 286, 287, 0, 288, 480, 0, 481,
	289, 0, 290, 291, 292, 293, 482, 483, 484, 341,
	943, 294, 295, 0, 296, 297, 299, 0, 0, 0,
	0, 298, 300, 307, 0, 942, 301, 485, 303, 302,
	304, 305, 306, 486, 0, 487, 0, 308, 944, 488,
	945, 309, 310, 311, 946, 312, 313, 0, 0, 314,
	315, 316, 317, 0, 319, 318, 0, 320, 489, 947,
	321, 322, 948, 0, 323, 324, 0, 0, 325, 326,
	0, 327, 328, 330, 332, 329, 331, 333, 335, 336,
	334, 949, 337, 338, 340, 339, 0, 0, 950, 0,
	490, 491, 342, 343, 0, 344, 345, 346, 0, 0,
	348, 349, 350, 0, 0, 351, 492, 951, 352, 952,
	493, 353, 347, 354, 355, 356, 357, 358, 359, 360,
	0, 361, 362, 494, 363, 495, 364, 0, 365, 0,
	366, 367, 368, 369, 370, 371, 496, 372, 373, 0,
	374, 375, 376, 377, 378, 0, 380, 381, 382, 379,
	383, 384, 385, 386, 0, 387, 953, 388, 389, 390,
	391, 497, 392, 0, 393, 397, 398, 399, 400, 401,
	402, 403, 0, 410, 411, 404, 406, 407, 408, 405,
	409, 412, 413, 0, 414, 394, 395, 415, 954, 416,
	498, 417, 418, 0, 428, 419, 420, 421, 396, 422,
	426, 427, 423, 424, 425, 499, 0, 430, 431, 429,
	0, 432, 433, 434, 435, 436, 273, 437, 0, 500,
	501, 502, 503, 0, 444, 0, 438, 439, 504, 440,
	505, 0, 441, 442, 443, 0, 445, 446, 0, 0,
	447, 448, 449, 450, 451, 453, 0, 454, 0, 452,
	455, 456, 457, 506, 507, 508, 0, 459, 458, 509,
	0, 0, 0, 0, 460, 461, 510, 462, 463, 464,
	1160, 1159, 0, 0, 0, 0, 1157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 2762, 221, 0, 0, 0, 0, 465, 0,
	0, 0, 0, 222, 223, 224, 225, 466, 467, 226,
	468, 227, 228, 469, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 470, 471, 472, 0, 236, 473,
	0, 1064, 0, 237, 238, 239, 240, 241, 242, 0,
	244, 245, 246, 243, 0, 247, 0, 248, 249, 250,
	0, 940, 251, 252, 0, 0, 0, 0, 0, 0,
	0, 253, 254, 255, 256, 257, 258, 474, 475, 0,
	259, 0, 261, 260, 0, 262, 0, 0, 263, 264,
	265, 0, 266, 0, 267, 268, 0, 476, 269, 270,
	272, 274, 271, 275, 276, 277, 278, 477, 478, 0,
	213, 0, 0, 0, 0, 0, 279, 280, 281, 479,
	282, 283, 0, 284, 0, 285, 0, 0, 941, 286,
	287, 0, 288, 480, 0, 481, 289, 0, 290, 291,
	292, 293, 482, 483, 484, 341, 943, 294, 295, 0,
	296, 297, 299, 0, 0, 0, 0, 298, 300, 307,
	0, 942, 301, 485, 303, 302, 304, 305, 306, 486,
	0, 487, 0, 308, 944, 488, 945, 309, 310, 311,
	946, 312, 313, 0, 0, 314, 315, 316, 317, 0,
	319, 318, 0, 320, 489, 947, 321, 322, 948, 0,
	323, 324, 0, 0, 325, 326, 0, 327, 328, 330,
	332, 329, 331, 333, 335, 336, 334, 949, 337, 338,
	340, 339, 0, 0, 950, 0, 490, 491, 342, 343,
	0, 344, 345, 346, 0, 0, 348, 349, 350, 0,
	0, 351, 492, 951, 352, 952, 493, 353, 347, 354,
	355, 356, 357, 358, 359, 360, 0, 361, 362, 494,
	363, 495, 364, 0, 365, 0, 366, 367, 368, 369,
	370, 371, 496, 372, 373, 0, 374, 375, 376, 377,
	378, 0, 380, 381, 382, 379, 383, 384, 385, 386,
	0, 387, 953, 388, 389, 390, 391, 497, 392, 0,
	393, 397, 398, 399, 400, 401, 402, 403, 0, 410,
	411, 404, 406, 407, 408, 405, 409, 412, 413, 0,
	414, 394, 395, 415, 954, 416, 498, 417, 418, 0,
	428, 419, 420, 421, 396, 422, 426, 427, 423, 424,
	425, 499, 0, 430, 431, 429, 0, 432, 433, 434,
	435, 436, 273, 437, 0, 500, 501, 502, 503, 0,
	444, 0, 438, 439, 504, 440, 505, 0, 441, 442,
	443, 0, 445, 446, 0, 0, 447, 448, 449, 450,
	451, 453, 0, 454, 0, 452, 455, 456, 457, 506,
	507, 508, 0, 459, 458, 509, 1003, 0, 0, 0,
	460, 461, 510, 462, 463, 464, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 931, 0, 0, 0, 1310, 222,
	223, 224, 225, 466, 467, 226, 468, 227, 228, 469,
	0, 229, 230, 231, 232, 233, 234, 0, 930, 235,
	470, 471, 472, 0, 236, 937, 0, 920, 0, 237,
	238, 239, 240, 241, 242, 0, 244, 245, 246, 243,
	0, 247, 0, 248, 249, 250, 0, 940, 251, 252,
	923, 921, 922, 927, 925, 924, 926, 253, 254, 255,
	256, 257, 258, 474, 475, 0, 259, 0, 261, 260,
	0, 262, 0, 0, 263, 264, 265, 0, 266, 0,
	267, 268, 0, 476, 269, 270, 272, 274, 271, 275,
	276, 277, 278, 957, 958, 0, 213, 0, 0, 0,
	0, 0, 279, 280, 281, 479, 282, 283, 0, 284,
	0, 285, 0, 0, 941, 286, 287, 0, 288, 964,
	0, 481, 289, 0, 290, 291, 292, 293, 932, 933,
	936, 341, 943, 294, 295, 0, 296, 297, 299, 0,
	0, 0, 214, 298, 300, 307, 0, 942, 301, 485,
	303, 302, 304, 305, 306, 486, 0, 487, 0, 308,
	944, 934, 945, 309, 310, 311, 946, 312, 313, 0,
	0, 314, 315, 316, 317, 0, 319, 318, 0, 320,
	965, 947, 321, 322, 948, 0, 323, 324, 0, 0,
	325, 326, 0, 327, 328, 330, 332, 329, 331, 333,
	335, 336, 334, 949, 337, 338, 340, 339, 0, 215,
	950, 0, 935, 491, 342, 343, 0, 344, 345, 346,
	0, 0, 348, 349, 350, 0, 0, 351, 492, 951,
	352, 952, 959, 353, 347, 354, 355, 356, 357, 358,
	359, 360, 0, 361, 362, 960, 363, 495, 364, 0,
	365, 0, 366, 367, 368, 369, 370, 371, 496, 372,
	373, 0, 374, 375, 376, 377, 378, 0, 380, 381,
	382, 379, 383, 384, 385, 386, 0, 387, 953, 388,
	389, 390, 391, 497, 392, 0, 393, 397, 398, 399,
	400, 401, 402, 403, 0, 410, 411, 404, 406, 407,
	408, 405, 409, 412, 413, 928, 414, 394, 395, 415,
	954, 416, 498, 417, 418, 0, 428, 419, 420, 421,
	396, 422, 426, 427, 423, 424, 425, 961, 0, 430,
	431, 429, 0, 432, 433, 434, 435, 436, 273, 437,
	0, 500, 501, 502, 503, 0, 444, 0, 438, 439,
	962, 440, 963, 0, 441, 442, 443, 0, 445, 446,
	0, 0, 447, 448, 449, 450, 451, 453, 929, 454,
	0, 452, 455, 456, 457, 506, 507, 508, 0, 459,
	458, 509, 815, 0, 210, 0, 460, 461, 510, 462,
	463, 464, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 465, 0, 0, 0, 0, 222, 223, 224,
	225, 466, 467, 226, 468, 227, 228, 469, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 470, 471,
	472, 0, 236, 473, 0, 0, 0, 237, 238, 239,
	240, 241, 242, 0, 244, 245, 246, 243, 0, 247,
	0, 248, 249, 250, 0, 0, 251, 252, 0, 0,
	0, 0, 0, 0, 0, 253, 254, 255, 256, 257,
	258, 474, 475, 0, 259, 0, 261, 260, 0, 262,
	0, 0, 263, 264, 265, 0, 266, 0, 267, 268,
	0, 476, 269, 270, 272, 274, 271, 275, 276, 277,
	278, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 281, 479, 282, 283, 0, 284, 0, 285,
	0, 0, 0, 286, 287, 0, 288, 480, 0, 481,
	289, 0, 290, 291, 292, 293, 482, 483, 484, 341,
	0, 294, 295, 0, 296, 297, 299, 0, 0, 0,
	0, 298, 300, 307, 0, 0, 301, 485, 303, 302,
	304, 305, 306, 486, 0, 487, 0, 308, 0, 488,
	0, 309, 310, 311, 0, 312, 313, 0, 0, 314,
	315, 316, 317, 0, 319, 318, 0, 320, 489, 0,
	321, 322, 0, 0, 323, 324, 0, 0, 325, 326,
	0, 327, 328, 330, 332, 329, 331, 333, 335, 336,
	334, 0, 337, 338, 340, 339, 0, 0, 0, 0,
	490, 491, 342, 343, 0, 344, 345, 346, 0, 0,
	348, 349, 350, 0, 0, 351, 492, 0, 352, 0,
	493, 353, 347, 354, 355, 356, 357, 358, 359, 360,
	0, 361, 362, 494, 363, 495, 364, 0, 365, 0,
	366, 367, 368, 369, 370, 371, 496, 372, 373, 0,
	374, 375, 376, 377, 378, 0, 380, 381, 382, 379,
	383, 384, 385, 386, 0, 387, 0, 388, 389, 390,
	391, 497, 392, 0, 393, 397, 398, 399, 400, 401,
	402, 403, 179, 410, 411, 404, 406, 407, 408, 405,
	409, 412, 413, 0, 414, 394, 395, 415, 0, 416,
	498, 417, 418, 0, 428, 419, 420, 421, 396, 422,
	426, 427, 423, 424, 425, 499, 0, 430, 431, 429,
	181, 432, 433, 434, 435, 436, 273, 437, 0, 500,
	501, 502, 503, 0, 444, 0, 438, 439, 504, 440,
	505, 0, 441, 442, 443, 0, 445, 446, 0, 0,
	447, 448, 449, 450, 451, 453, 0, 454, 0, 452,
	455, 456, 457, 1306, 507, 508, 0, 459, 458, 509,
	210, 0, 0, 173, 460, 461, 510, 462, 463, 464,
	0, 174, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 465, 0,
	0, 0, 149, 222, 223, 224, 225, 466, 467, 226,
	468, 227, 228, 469, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 470, 471, 472, 0, 236, 473,
	0, 0, 0, 237, 238, 239, 240, 241, 242, 0,
	244, 245, 246, 243, 0, 247, 0, 248, 249, 250,
	0, 0, 251, 252, 0, 0, 0, 0, 0, 0,
	0, 253, 254, 255, 256, 257, 258, 474, 475, 0,
	259, 0, 261, 260, 0, 262, 0, 0, 263, 264,
	265, 0, 266, 0, 267, 268, 0, 476, 269, 270,
	272, 274, 271, 275, 276, 277, 278, 477, 478, 0,
	213, 0, 0, 0, 0, 0, 279, 280, 281, 479,
	282, 283, 0, 284, 0, 285, 0, 0, 0, 286,
	287, 0, 288, 480, 0, 481, 289, 0, 290, 291,
	292, 293, 482, 483, 484, 341, 0, 294, 295, 0,
	296, 297, 299, 0, 0, 0, 214, 298, 300, 307,
	0, 0, 301, 485, 303, 302, 304, 305, 306, 486,
	0, 487, 0, 308, 0, 488, 0, 309, 310, 311,
	0, 312, 313, 0, 0, 314, 315, 316, 317, 0,
	319, 318, 0, 320, 489, 0, 321, 322, 0, 0,
	323, 324, 0, 0, 325, 326, 0, 327, 328, 330,
	332, 329, 331, 333, 335, 336, 334, 0, 337, 338,
	340, 339, 0, 215, 0, 0, 490, 491, 342, 343,
	0, 344, 345, 346, 0, 0, 348, 349, 350, 0,
	0, 351, 492, 0, 352, 0, 493, 353, 347, 354,
	355, 356, 357, 358, 359, 360, 0, 361, 362, 494,
	363, 495, 364, 0, 365, 0, 366, 367, 368, 369,
	370, 371, 496, 372, 373, 0, 374, 375, 376, 377,
	378, 0, 380, 381, 382, 379, 383, 384, 385, 386,
	0, 387, 0, 388, 389, 390, 391, 497, 392, 0,
	393, 397, 398, 399, 400, 401, 402, 403, 0, 410,
	411, 404, 406, 407, 408, 405, 409, 412, 413, 0,
	414, 394, 395, 415, 0, 416, 498, 417, 418, 0,
	428, 419, 420, 421, 396, 422, 426, 427, 423, 424,
	425, 499, 0, 430, 431, 429, 0, 432, 433, 434,
	435, 436, 273, 437, 0, 500, 501, 502, 503, 0,
	444, 0, 438, 439, 504, 440, 505, 0, 441, 442,
	443, 0, 445, 446, 0, 0, 447, 448, 449, 450,
	451, 453, 0, 454, 0, 452, 455, 456, 457, 506,
	507, 508, 0, 459, 458, 509, 210, 0, 0, 0,
	460, 461, 510, 462, 463, 464, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 465, 0, 0, 0, 1604, 222,
	223, 224, 225, 466, 467, 226, 468, 227, 228, 469,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	470, 471, 472, 0, 236, 473, 0, 0, 0, 237,
	238, 239, 240, 241, 242, 0, 244, 245, 246, 243,
	0, 247, 0, 248, 249, 250, 0, 0, 251, 252,
	0, 0, 0, 0, 0, 0, 0, 253, 254, 255,
	256, 257, 258, 474, 475, 0, 259, 0, 261, 260,
	0, 262, 0, 0, 263, 264, 265, 0, 266, 0,
	267, 268, 0, 476, 269, 270, 272, 274, 271, 275,
	276, 277, 278, 477, 478, 0, 213, 0, 0, 0,
	0, 0, 279, 280, 281, 479, 282, 283, 0, 284,
	0, 285, 0, 0, 0, 286, 287, 0, 288, 480,
	0, 481, 289, 0, 290, 291, 292, 293, 482, 483,
	484, 341, 0, 294, 295, 0, 296, 297, 299, 0,
	0, 0, 214, 298, 300, 307, 0, 0, 301, 485,
	303, 302, 304, 305, 306, 486, 0, 487, 0, 308,
	0, 488, 0, 309, 310, 311, 0, 312, 313, 0,
	0, 314, 315, 316, 317, 0, 319, 318, 0, 320,
	489, 0, 321, 322, 0, 0, 323, 324, 0, 0,
	325, 326, 0, 327, 328, 330, 332, 329, 331, 333,
	335, 336, 334, 0, 337, 338, 340, 339, 0, 215,
	0, 0, 490, 491, 342, 343, 0, 344, 345, 346,
	0, 0, 348, 349, 350, 0, 0, 351, 492, 0,
	352, 0, 493, 353, 347, 354, 355, 356, 357, 358,
	359, 360, 0, 361, 362, 494, 363, 495, 364, 0,
	365, 0, 366, 367, 368, 369, 370, 371, 496, 372,
	373, 0, 374, 375, 376, 377, 378, 0, 380, 381,
	382, 379, 383, 384, 385, 386, 0, 387, 0, 388,
	389, 390, 391, 497, 392, 0, 393, 397, 398, 399,
	400, 401, 402, 403, 0, 410, 411, 404, 406, 407,
	408, 405, 409, 412, 413, 0, 414, 394, 395, 415,
	0, 416, 498, 417, 418, 0, 428, 419, 420, 421,
	396, 422, 426, 427, 423, 424, 425, 499, 0, 430,
	431, 429, 0, 432, 433, 434, 435, 436, 273, 437,
	0, 500, 501, 502, 503, 0, 444, 0, 438, 439,
	504, 440, 505, 0, 441, 442, 443, 0, 445, 446,
	0, 0, 447, 448, 449, 450, 451, 453, 0, 454,
	0, 452, 455, 456, 457, 506, 507, 508, 0, 459,
	458, 509, 210, 0, 0, 0, 460, 461, 510, 462,
	463, 464, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	465, 0, 2715, 0, 0, 222, 223, 224, 225, 466,
	467, 226, 468, 227, 228, 469, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 470, 471, 472, 0,
	236, 473, 0, 0, 0, 237, 238, 239, 240, 241,
	242, 0, 244, 245, 246, 243, 0, 247, 0, 248,
	249, 250, 0, 0, 251, 252, 0, 0, 0, 0,
	0, 0, 0, 253, 254, 255, 256, 257, 258, 474,
	475, 0, 259, 0, 261, 260, 0, 262, 0, 0,
	263, 264, 265, 0, 266, 0, 267, 268, 0, 476,
	269, 270, 272, 274, 271, 275, 276, 277, 278, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 279, 280,
	281, 479, 282, 283, 0, 284, 0, 285, 0, 0,
	0, 286, 287, 0, 288, 480, 0, 481, 289, 0,
	290, 291, 292, 293, 482, 483, 484, 341, 0, 294,
	295, 0, 296, 297, 299, 0, 0, 0, 0, 298,
	300, 307, 0, 0, 301, 485, 303, 302, 304, 305,
	306, 486, 0, 487, 0, 308, 0, 488, 0, 309,
	310, 311, 0, 312, 313, 0, 0, 314, 315, 316,
	317, 0, 319, 318, 0, 320, 489, 0, 321, 322,
	0, 0, 323, 324, 0, 0, 325, 326, 0, 327,
	328, 330, 332, 329, 331, 333, 335, 336, 334, 0,
	337, 338, 340, 339, 0, 0, 0, 0, 490, 491,
	342, 343, 0, 344, 345, 346, 0, 0, 348, 349,
	350, 0, 0, 351, 492, 0, 352, 0, 493, 353,
	347, 354, 355, 356, 357, 358, 359, 360, 0, 361,
	362, 494, 363, 495, 364, 0, 365, 0, 366, 367,
	368, 369, 370, 371, 496, 372, 373, 0, 374, 375,
	376, 377, 378, 0, 380, 381, 382, 379, 383, 384,
	385, 386, 0, 387, 0, 388, 389, 390, 391, 497,
	392, 0, 393, 397, 398, 399, 400, 401, 402, 403,
	0, 410, 411, 404, 406, 407, 408, 405, 409, 412,
	413, 0, 414, 394, 395, 415, 0, 416, 498, 417,
	418, 0, 428, 419, 420, 421, 396, 422, 426, 427,
	423, 424, 425, 499, 0, 430, 431, 429, 0, 432,
	433, 434, 435, 436, 273, 437, 0, 500, 501, 502,
	503, 0, 444, 0, 438, 439, 504, 440, 505, 0,
	441, 442, 443, 0, 445, 446, 0, 0, 447, 448,
	449, 450, 451, 453, 0, 454, 0, 452, 455, 456,
	457, 506, 507, 508, 0, 459, 458, 509, 210, 0,
	0, 0, 460, 461, 510, 462, 463, 464, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 465, 0, 0, 0,
	2350, 222, 223, 224, 225, 466, 467, 226, 468, 227,
	228, 469, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 470, 471, 472, 0, 236, 473, 0, 0,
	0, 237, 238, 239, 240, 241, 242, 0, 244, 245,
	246, 243, 0, 247, 0, 248, 249, 250, 0, 0,
	251, 252, 0, 0, 0, 0, 0, 0, 0, 253,
	254, 255, 256, 257, 258, 474, 475, 0, 259, 0,
	261, 260, 0, 262, 0, 0, 263, 264, 265, 0,
	266, 0, 267, 268, 0, 476, 269, 270, 272, 274,
	271, 275, 276, 277, 278, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 279, 280, 281, 479, 282, 283,
	0, 284, 0, 285, 0, 0, 0, 286, 287, 0,
	288, 480, 0, 481, 289, 0, 290, 291, 292, 293,
	482, 483, 484, 341, 0, 294, 295, 0, 296, 297,
	299, 0, 0, 0, 0, 298, 300, 307, 0, 0,
	301, 485, 303, 302, 304, 305, 306, 486, 0, 487,
	0, 308, 0, 488, 0, 309, 310, 311, 0, 312,
	313, 0, 0, 314, 315, 316, 317, 0, 319, 318,
	0, 320, 489, 0, 321, 322, 0, 0, 323, 324,
	0, 0, 325, 326, 0, 327, 328, 330, 332, 329,
	331, 333, 335, 336, 334, 0, 337, 338, 340, 339,
	0, 0, 0, 0, 490, 491, 342, 343, 0, 344,
	345, 346, 0, 0, 348, 349, 350, 0, 0, 351,
	492, 0, 352, 0, 493, 353, 347, 354, 355, 356,
	357, 358, 359, 360, 0, 361, 362, 494, 363, 495,
	364, 0, 365, 0, 366, 367, 368, 369, 370, 371,
	496, 372, 373, 0, 374, 375, 376, 377, 378, 0,
	380, 381, 382, 379, 383, 384, 385, 386, 0, 387,
	0, 388, 389, 390, 391, 497, 392, 0, 393, 397,
	398, 399, 400, 401, 402, 403, 0, 410, 411, 404,
	406, 407, 408, 405, 409, 412, 413, 0, 414, 394,
	395, 415, 0, 416, 498, 417, 418, 0, 428, 419,
	420, 421, 396, 422, 426, 427, 423, 424, 425, 499,
	0, 430, 431, 429, 0, 432, 433, 434, 435, 436,
	273, 437, 0, 500, 501, 502, 503, 0, 444, 0,
	438, 439, 504, 440, 505, 0, 441, 442, 443, 0,
	445, 446, 0, 0, 447, 448, 449, 450, 451, 453,
	0, 454, 0, 452, 455, 456, 457, 506, 507, 508,
	0, 459, 458, 509, 210, 0, 0, 0, 460, 461,
	510, 462, 463, 464, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 465, 0, 0, 0, 2840, 222, 223, 224,
	225, 466, 467, 226, 468, 227, 228, 469, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 470, 471,
	472, 0, 236, 473, 0, 0, 0, 237, 238, 239,
	240, 241, 242, 0, 244, 245, 246, 243, 0, 247,
	0, 248, 249, 250, 0, 0, 251, 252, 0, 0,
	0, 0, 0, 0, 0, 253, 254, 255, 256, 257,
	258, 474, 475, 0, 259, 0, 261, 260, 0, 262,
	0, 0, 263, 264, 265, 0, 266, 0, 267, 268,
	0, 476, 269, 270, 272, 274, 271, 275, 276, 277,
	278, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 281, 479, 282, 283, 0, 284, 0, 285,
	0, 0, 0, 286, 287, 0, 288, 480, 0, 481,
	289, 0, 290, 291, 292, 293, 482, 483, 484, 341,
	0, 294, 295, 0, 296, 297, 299, 0, 0, 0,
	0, 298, 300, 307, 0, 0, 301, 485, 303, 302,
	304, 305, 306, 486, 0, 487, 0, 308, 0, 488,
	0, 309, 310, 311, 0, 312, 313, 0, 0, 314,
	315, 316, 317, 0, 319, 318, 0, 320, 489, 0,
	321, 322, 0, 0, 323, 324, 0, 0, 325, 326,
	0, 327, 328, 330, 332, 329, 331, 333, 335, 336,
	334, 0, 337, 338, 340, 339, 0, 0, 0, 0,
	490, 491, 342, 343, 0, 344, 345, 346, 0, 0,
	348, 349, 350, 0, 0, 351, 492, 0, 352, 0,
	493, 353, 347, 354, 355, 356, 357, 358, 359, 360,
	0, 361, 362, 494, 363, 495, 364, 0, 365, 0,
	366, 367, 368, 369, 370, 371, 496, 372, 373, 0,
	374, 375, 376, 377, 378, 0, 380, 381, 382, 379,
	383, 384, 385, 386, 0, 387, 0, 388, 389, 390,
	391, 497, 392, 0, 393, 397, 398, 399, 400, 401,
	402, 403, 0, 410, 411, 404, 406, 407, 408, 405,
	409, 412, 413, 0, 414, 394, 395, 415, 0, 416,
	498, 417, 418, 0, 428, 419, 420, 421, 396, 422,
	426, 427, 423, 424, 425, 499, 0, 430, 431, 429,
	0, 432, 433, 434, 435, 436, 273, 437, 0, 500,
	501, 502, 503, 0, 444, 0, 438, 439, 504, 440,
	505, 0, 441, 442, 443, 0, 445, 446, 0, 0,
	447, 448, 449, 450, 451, 453, 0, 454, 0, 452,
	455, 456, 457, 506, 507, 508, 0, 459, 458, 509,
	686, 0, 577, 0, 460, 461, 510, 462, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	465, 0, 1865, 0, 0, 222, 223, 224, 225, 466,
	467, 226, 468, 227, 228, 469, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 470, 471, 472, 0,
	236, 473, 0, 0, 0, 237, 238, 239, 240, 241,
	242, 0, 244, 245, 246, 243, 0, 247, 0, 248,
	249, 250, 0, 0, 251, 252, 0, 0, 0, 0,
	0, 0, 0, 253, 254, 583, 256, 257, 258, 474,
	475, 0, 259, 0, 261, 260, 0, 262, 0, 0,
	263, 264, 265, 0, 266, 0, 267, 268, 0, 476,
	269, 270, 272, 274, 271, 275, 276, 277, 278, 477,
	478, 0, 213, 0, 0, 0, 0, 0, 279, 280,
	281, 479, 282, 283, 0, 284, 0, 285, 0, 0,
	0, 286, 287, 0, 288, 480, 0, 481, 289, 0,
	290, 291, 292, 293, 482, 483, 484, 341, 0, 294,
	295, 0, 296, 297, 299, 0, 0, 0, 214, 298,
	300, 307, 0, 0, 301, 485, 303, 302, 304, 305,
	306, 486, 0, 487, 0, 308, 0, 488, 0, 309,
	310, 311, 0, 312, 313, 0, 0, 314, 315, 316,
	317, 0, 319, 318, 0, 320, 489, 0, 321, 322,
	0, 0, 323, 324, 0, 0, 325, 326, 0, 327,
	328, 330, 332, 329, 331, 333, 335, 336, 334, 0,
	337, 338, 340, 339, 0, 215, 0, 0, 490, 491,
	342, 343, 0, 344, 345, 346, 0, 0, 348, 349,
	350, 0, 0, 351, 492, 0, 352, 0, 493, 353,
	347, 354, 355, 356, 357, 358, 359, 360, 0, 361,
	362, 494, 363, 495, 364, 0, 365, 0, 366, 367,
	368, 369, 370, 371, 496, 372, 373, 0, 374, 375,
	376, 377, 378, 0, 380, 381, 382, 379, 383, 384,
	385, 386, 0, 387, 0, 388, 389, 390, 391, 497,
	392, 0, 393, 397, 398, 399, 400, 401, 402, 403,
	0, 410, 411, 404, 406, 407, 408, 405, 409, 412,
	413, 0, 414, 394, 395, 415, 0, 416, 498, 417,
	418, 0, 428, 419, 420, 421, 396, 422, 426, 427,
	423, 424, 425, 499, 0, 430, 431, 429, 582, 432,
	433, 434, 435, 436, 273, 437, 0, 500, 501, 502,
	503, 0, 444, 0, 438, 439, 504, 440, 505, 0,
	441, 442, 443, 0, 445, 446, 0, 0, 447, 448,
	449, 450, 451, 453, 0, 454, 0, 452, 455, 456,
	457, 506, 507, 508, 0, 459, 458, 509, 0, 576,
	0, 577, 460, 461, 510, 462, 463, 464, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 586, 221, 0, 0, 0, 0, 465,
	0, 0, 0, 0, 222, 223, 224, 225, 466, 467,
	226, 468, 227, 228, 469, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 470, 471, 472, 0, 236,
	473, 0, 0, 0, 237, 238, 239, 240, 241, 242,
	0, 244, 245, 246, 243, 0, 247, 0, 248, 249,
	250, 0, 0, 251, 252, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 583, 256, 257, 258, 474, 475,
	0, 259, 0, 261, 260, 0, 262, 0, 0, 263,
	264, 265, 0, 266, 0, 267, 268, 0, 476, 269,
	270, 272, 274, 271, 275, 276, 277, 278, 477, 478,
	0, 213, 0, 0, 0, 0, 0, 279, 280, 281,
	479, 282, 283, 0, 284, 0, 285, 0, 0, 0,
	286, 287, 0, 288, 480, 0, 481, 289, 0, 290,
	291, 292, 293, 482, 483, 484, 341, 0, 294, 295,
	0, 296, 297, 299, 0, 0, 0, 214, 298, 300,
	307, 0, 0, 301, 485, 303, 302, 304, 305, 306,
	486, 0, 487, 0, 308, 0, 488, 0, 309, 310,
	311, 0, 312, 313, 0, 0, 314, 315, 316, 317,
	0, 319, 318, 0, 320, 489, 0, 321, 322, 0,
	0, 323, 324, 0, 0, 325, 326, 0, 327, 328,
	330, 332, 329, 331, 333, 335, 336, 334, 0, 337,
	338, 340, 339, 0, 215, 0, 0, 490, 491, 342,
	343, 0, 344, 345, 346, 0, 0, 348, 349, 350,
	0, 0, 351, 492, 0, 352, 0, 493, 353, 347,
	354, 355, 356, 357, 358, 359, 360, 0, 361, 362,
	494, 363, 495, 364, 0, 365, 0, 366, 367, 368,
	369, 370, 371, 496, 372, 373, 0, 374, 375, 376,
	377, 378, 0, 380, 381, 382, 379, 383, 384, 385,
	386, 0, 387, 0, 388, 389, 390, 391, 497, 392,
	0, 393, 397, 398, 399, 400, 401, 402, 403, 0,
	410, 411, 404, 406, 407, 408, 405, 409, 412, 413,
	0, 414, 394, 395, 415, 0, 416, 498, 417, 418,
	0, 428, 419, 420, 421, 396, 422, 426, 427, 423,
	424, 425, 499, 0, 430, 431, 429, 582, 432, 433,
	434, 435, 436, 273, 437, 0, 500, 501, 502, 503,
	0, 444, 0, 438, 439, 504, 440, 505, 0, 441,
	442, 443, 0, 445, 446, 0, 0, 447, 448, 449,
	450, 451, 453, 0, 454, 0, 452, 455, 456, 457,
	506, 507, 508, 577, 459, 458, 509, 0, 0, 0,
	0, 460, 461, 510, 462, 463, 464, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 465, 586, 0, 0, 0, 222, 223, 224, 225,
	466, 467, 226, 468, 227, 228, 469, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 470, 471, 472,
	0, 236, 473, 0, 0, 0, 237, 238, 239, 240,
	241, 242, 0, 244, 245, 246, 243, 0, 247, 0,
	248, 249, 250, 0, 0, 251, 252, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 583, 256, 257, 258,
	474, 475, 0, 259, 0, 261, 260, 0, 262, 0,
	0, 263, 264, 265, 0, 266, 0, 267, 268, 0,
	476, 269, 270, 272, 274, 271, 275, 276, 277, 278,
	477, 478, 0, 213, 0, 0, 0, 0, 0, 279,
	280, 281, 479, 282, 283, 0, 284, 0, 285, 0,
	0, 0, 286, 287, 0, 288, 480, 0, 481, 289,
	0, 290, 291, 292, 293, 482, 483, 484, 341, 0,
	294, 295, 0, 296, 297, 299, 0, 0, 0, 214,
	298, 300, 307, 0, 0, 301, 485, 303, 302, 304,
	305, 306, 486, 0, 487, 0, 308, 0, 488, 0,
	309, 310, 311, 0, 312, 313, 0, 0, 314, 315,
	316, 317, 0, 319, 318, 0, 320, 489, 0, 321,
	322, 0, 0, 323, 324, 0, 0, 325, 326, 0,
	327, 328, 330, 332, 329, 331, 333, 335, 336, 334,
	0, 337, 338, 340, 339, 0, 215, 0, 0, 490,
	491, 342, 343, 0, 344, 345, 346, 0, 0, 348,
	349, 350, 0, 0, 351, 492, 0, 352, 0, 493,
	353, 347, 354, 355, 356, 357, 358, 359, 360, 0,
	361, 362, 494, 363, 495, 364, 0, 365, 0, 366,
	367, 368, 369, 370, 371, 496, 372, 373, 0, 374,
	375, 376, 377, 378, 0, 380, 381, 382, 379, 383,
	384, 385, 386, 0, 387, 0, 1895, 389, 390, 391,
	497, 392, 0, 393, 397, 398, 399, 400, 401, 402,
	403, 0, 410, 411, 404, 406, 407, 408, 405, 409,
	412, 413, 0, 414, 394, 395, 415, 0, 416, 498,
	417, 418, 0, 428, 419, 420, 421, 396, 422, 426,
	427, 423, 424, 425, 499, 0, 430, 431, 429, 582,
	432, 433, 434, 435, 436, 273, 437, 0, 500, 501,
	502, 503, 0, 444, 0, 438, 439, 504, 440, 505,
	0, 441, 442, 443, 0, 445, 446, 0, 0, 447,
	448, 449, 450, 451, 453, 0, 454, 0, 452, 455,
	456, 457, 506, 507, 508, 577, 459, 458, 509, 0,
	0, 0, 0, 460, 461, 510, 462, 463, 464, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 465, 586, 0, 0, 0, 222, 223,
	224, 225, 466, 467, 226, 468, 227, 228, 469, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 470,
	471, 472, 0, 236, 473, 0, 0, 0, 237, 238,
	239, 240, 241, 242, 0, 244, 245, 246, 243, 0,
	247, 0, 248, 249, 250, 0, 0, 251, 252, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 583, 256,
	257, 258, 474, 475, 0, 259, 0, 261, 260, 0,
	262, 0, 0, 263, 264, 265, 0, 266, 0, 267,
	268, 0, 476, 269, 270, 272, 274, 271, 275, 276,
	277, 278, 477, 478, 0, 213, 0, 0, 0, 0,
	0, 279, 280, 281, 479, 282, 283, 0, 284, 0,
	285, 0, 0, 0, 286, 287, 0, 288, 480, 0,
	481, 289, 0, 290, 291, 292, 293, 482, 483, 484,
	341, 0, 294, 295, 0, 296, 297, 299, 0, 0,
	0, 214, 298, 300, 307, 0, 0, 301, 485, 303,
	302, 304, 305, 306, 486, 0, 487, 0, 308, 0,
	488, 0, 309, 310, 311, 0, 312, 313, 0, 0,
	314, 315, 316, 317, 0, 319, 318, 0, 320, 489,
	0, 321, 322, 0, 0, 323, 324, 0, 0, 325,
	326, 0, 327, 328, 330, 332, 329, 331, 333, 335,
	336, 334, 0, 337, 338, 340, 339, 0, 215, 0,
	0, 490, 491, 342, 343, 0, 344, 345, 346, 0,
	0, 348, 349, 350, 0, 0, 351, 492, 0, 352,
	0, 493, 353, 347, 354, 355, 356, 357, 358, 359,
	360, 0, 361, 362, 494, 363, 495, 364, 0, 365,
	0, 366, 367, 368, 369, 370, 371, 496, 372, 373,
	0, 374, 375, 376, 377, 378, 0, 380, 381, 382,
	379, 383, 384, 385, 386, 0, 387, 0, 388, 389,
	390, 391, 497, 392, 0, 393, 397, 398, 399, 400,
	401, 402, 403, 0, 410, 411, 404, 406, 407, 408,
	405, 409, 412, 413, 0, 414, 394, 395, 415, 0,
	416, 498, 417, 418, 0, 428, 419, 420, 421, 396,
	422, 426, 427, 423, 424, 425, 499, 0, 430, 431,
	429, 582, 432, 433, 434, 435, 436, 273, 437, 0,
	500, 501, 502, 503, 0, 444, 0, 438, 439, 504,
	440, 505, 0, 441, 442, 443, 0, 445, 446, 0,
	0, 447, 448, 449, 450, 451, 453, 0, 454, 0,
	452, 455, 456, 457, 506, 507, 508, 210, 459, 458,
	509, 0, 0, 0, 0, 460, 461, 510, 462, 463,
	464, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 465, 586, 0, 0, 0,
	222, 223, 224, 225, 466, 467, 226, 468, 227, 228,
	469, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 470, 471, 472, 0, 236, 473, 0, 0, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 0, 247, 0, 248, 249, 250, 0, 0, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 474, 475, 0, 259, 0, 261,
	260, 0, 262, 0, 0, 263, 264, 265, 0, 266,
	0, 267, 268, 0, 476, 269, 270, 272, 274, 271,
	275, 276, 277, 278, 477, 478, 0, 213, 0, 0,
	0, 0, 0, 279, 280, 281, 479, 282, 283, 0,
	284, 0, 285, 0, 0, 0, 286, 287, 0, 288,
	480, 0, 481, 289, 0, 290, 291, 292, 293, 482,
	483, 484, 341, 0, 294, 295, 0, 296, 297, 299,
	0, 0, 0, 214, 298, 300, 307, 0, 0, 301,
	485, 303, 302, 304, 305, 306, 486, 0, 487, 0,
	308, 0, 488, 0, 309, 310, 311, 0, 312, 313,
	0, 0, 314, 315, 316, 317, 0, 319, 318, 0,
	320, 489, 0, 321, 322, 0, 0, 323, 324, 0,
	0, 325, 326, 0, 327, 328, 330, 332, 329, 331,
	333, 335, 336, 334, 0, 337, 338, 340, 339, 0,
	215, 0, 0, 490, 491, 342, 343, 0, 344, 345,
	346, 0, 0, 348, 349, 350, 0, 0, 351, 492,
	0, 352, 0, 493, 353, 347, 354, 355, 356, 357,
	358, 359, 360, 0, 361, 362, 494, 363, 495, 364,
	0, 365, 0, 366, 367, 368, 369, 370, 371, 496,
	372, 373, 0, 374, 375, 376, 377, 378, 0, 380,
	381, 382, 379, 383, 384, 385, 386, 0, 387, 0,
	388, 389, 390, 391, 497, 392, 0, 393, 397, 398,
	399, 400, 401, 402, 403, 0, 410, 411, 404, 406,
	407, 408, 405, 409, 412, 413, 0, 414, 394, 395,
	415, 0, 416, 498, 417, 418, 0, 428, 419, 420,
	421, 396, 422, 426, 427, 423, 424, 425, 499, 0,
	430, 431, 429, 0, 432, 433, 434, 435, 436, 273,
	437, 0, 500, 501, 502, 503, 0, 444, 0, 438,
	439, 504, 440, 505, 0, 441, 442, 443, 0, 445,
	446, 0, 0, 447, 448, 449, 450, 451, 453, 0,
	454, 0, 452, 455, 456, 457, 506, 507, 508, 0,
	459, 458, 509, 0, 0, 0, 0, 460, 461, 510,
	462, 463, 464, 1335, 0, 1160, 1159, 0, 0, 0,
	0, 1157, 0, 0, 0, 0, 0, 0, 586, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 465, 0, 0, 0, 0, 222, 223,
	224, 225, 466, 467, 226, 468, 227, 228, 469, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 470,
	471, 472, 0, 236, 473, 0, 1064, 0, 237, 238,
	239, 240, 241, 242, 0, 244, 245, 246, 243, 0,
	247, 0, 248, 249, 250, 0, 940, 251, 252, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 474, 475, 0, 259, 0, 261, 260, 0,
	262, 0, 0, 263, 264, 265, 0, 266, 0, 267,
	268, 0, 476, 269, 270, 272, 274, 271, 275, 276,
	277, 278, 477, 478, 0, 213, 0, 0, 0, 0,
	0, 1334, 280, 281, 479, 282, 283, 0, 284, 0,
	285, 0, 0, 941, 286, 287, 0, 288, 480, 0,
	481, 289, 0, 290, 291, 292, 293, 482, 483, 484,
	341, 943, 294, 295, 0, 296, 297, 299, 0, 0,
	0, 0, 298, 300, 307, 0, 942, 301, 485, 303,
	302, 304, 305, 306, 486, 0, 487, 0, 308, 944,
	488, 945, 309, 310, 311, 946, 312, 313, 0, 0,
	314, 315, 316, 317, 0, 319, 318, 0, 320, 489,
	947, 321, 322, 948, 0, 323, 324, 0, 0, 325,
	326, 0, 327, 328, 330, 332, 329, 331, 333, 335,
	336, 334, 949, 337, 338, 340, 339, 0, 0, 950,
	0, 490, 491, 342, 343, 0, 344, 345, 346, 0,
	0, 348, 349, 350, 0, 0, 351, 492, 951, 352,
	952, 493, 353, 347, 354, 355, 356, 357, 358, 359,
	360, 0, 361, 362, 494, 363, 495, 364, 0, 365,
	0, 366, 367, 368, 369, 1333, 371, 496, 372, 373,
	0, 374, 375, 376, 377, 378, 0, 380, 381, 382,
	379, 383, 384, 385, 386, 0, 387, 953, 388, 389,
	390, 391, 497, 392, 0, 393, 397, 398, 399, 1332,
	401, 402, 403, 0, 410, 411, 404, 406, 407, 408,
	405, 409, 412, 413, 0, 414, 394, 395, 415, 954,
	416, 498, 417, 418, 0, 428, 419, 420, 421, 396,
	422, 426, 427, 423, 424, 425, 499, 0, 430, 431,
	429, 0, 432, 433, 434, 435, 436, 273, 437, 0,
	500, 501, 502, 503, 0, 444, 0, 438, 439, 504,
	440, 505, 0, 441, 442, 443, 0, 445, 446, 0,
	0, 447, 448, 449, 450, 451, 453, 0, 454, 0,
	452, 455, 456, 457, 506, 507, 508, 0, 459, 458,
	509, 0, 0, 0, 0, 460, 461, 510, 462, 463,
	464, 1301, 0, 1160, 1159, 0, 0, 0, 0, 1157,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 465, 0, 0, 0, 0, 222, 223, 224, 225,
	466, 467, 226, 468, 227, 228, 469, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 470, 471, 472,
	0, 236, 473, 0, 1064, 0, 237, 238, 239, 240,
	241, 242, 0, 244, 245, 246, 243, 0, 247, 0,
	248, 249, 250, 0, 940, 251, 252, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	474, 475, 0, 259, 0, 261, 260, 0, 262, 0,
	0, 263, 264, 265, 0, 266, 0, 267, 268, 0,
	476, 269, 270, 272, 274, 271, 275, 276, 277, 278,
	477, 478, 0, 213, 0, 0, 0, 0, 0, 279,
	280, 281, 479, 282, 283, 0, 284, 0, 285, 0,
	0, 941, 286, 287, 0, 288, 480, 0, 481, 289,
	0, 290, 291, 292, 293, 1300, 483, 484, 341, 943,
	294, 295, 0, 296, 297, 299, 0, 0, 0, 0,
	298, 300, 307, 0, 942, 301, 485, 303, 302, 304,
	305, 306, 486, 0, 487, 0, 308, 944, 488, 945,
	309, 310, 311, 946, 312, 313, 0, 0, 314, 315,
	316, 317, 0, 319, 318, 0, 320, 489, 947, 321,
	322, 948, 0, 323, 324, 0, 0, 325, 326, 0,
	327, 328, 330, 332, 329, 331, 333, 335, 336, 334,
	949, 337, 338, 340, 339, 0, 0, 950, 0, 490,
	491, 342, 343, 0, 344, 345, 346, 0, 0, 348,
	349, 350, 0, 0, 351, 492, 951, 352, 952, 493,
	353, 347, 354, 355, 356, 357, 358, 359, 360, 0,
	361, 362, 494, 363, 495, 364, 0, 365, 0, 366,
	367, 368, 369, 370, 371, 496, 372, 373, 0, 374,
	375, 376, 377, 378, 0, 380, 381, 382, 379, 383,
	384, 385, 386, 0, 387, 953, 388, 389, 390, 391,
	497, 392, 0, 393, 397, 398, 399, 400, 401, 402,
	403, 0, 410, 411, 404, 406, 407, 408, 405, 409,
	412, 413, 0, 414, 394, 395, 415, 954, 416, 498,
	417, 418, 0, 428, 419, 420, 421, 396, 422, 426,
	427, 423, 424, 425, 499, 0, 430, 431, 429, 0,
	432, 433, 434, 435, 436, 273, 437, 0, 500, 501,
	502, 503, 0, 444, 0, 438, 439, 504, 440, 505,
	0, 441, 442, 443, 0, 445, 446, 0, 0, 447,
	448, 449, 450, 451, 453, 0, 454, 0, 452, 455,
	456, 457, 506, 507, 508, 0, 459, 458, 509, 0,
	0, 0, 0, 460, 461, 510, 462, 463, 464, 1297,
	0, 1160, 1159, 0, 0, 0, 0, 1157, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 465,
	0, 0, 0, 0, 222, 223, 224, 225, 466, 467,
	226, 468, 227, 228, 469, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 470, 471, 472, 0, 236,
	473, 0, 1064, 0, 237, 238, 239, 240, 241, 242,
	0, 244, 245, 246, 243, 0, 247, 0, 248, 249,
	250, 0, 940, 251, 252, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 474, 475,
	0, 259, 0, 261, 260, 0, 262, 0, 0, 263,
	264, 265, 0, 266, 0, 267, 268, 0, 476, 269,
	270, 272, 274, 271, 275, 276, 277, 278, 477, 478,
	0, 213, 0, 0, 0, 0, 0, 279, 280, 281,
	479, 282, 283, 0, 284, 0, 285, 0, 0, 941,
	286, 287, 0, 288, 480, 0, 481, 289, 0, 290,
	291, 292, 293, 1296, 483, 484, 341, 943, 294, 295,
	0, 296, 297, 299, 0, 0, 0, 0, 298, 300,
	307, 0, 942, 301, 485, 303, 302, 304, 305, 306,
	486, 0, 487, 0, 308, 944, 488, 945, 309, 310,
	311, 946, 312, 313, 0, 0, 314, 315, 316, 317,
	0, 319, 318, 0, 320, 489, 947, 321, 322, 948,
	0, 323, 324, 0, 0, 325, 326, 0, 327, 328,
	330, 332, 329, 331, 333, 335, 336, 334, 949, 337,
	338, 340, 339, 0, 0, 950, 0, 490, 491, 342,
	343, 0, 344, 345, 346, 0, 0, 348, 349, 350,
	0, 0, 351, 492, 951, 352, 952, 493, 353, 347,
	354, 355, 356, 357, 358, 359, 360, 0, 361, 362,
	494, 363, 495, 364, 0, 365, 0, 366, 367, 368,
	369, 370, 371, 496, 372, 373, 0, 374, 375, 376,
	377, 378, 0, 380, 381, 382, 379, 383, 384, 385,
	386, 0, 387, 953, 388, 389, 390, 391, 497, 392,
	0, 393, 397, 398, 399, 400, 401, 402, 403, 0,
	410, 411, 404, 406, 407, 408, 405, 409, 412, 413,
	0, 414, 394, 395, 415, 954, 416, 498, 417, 418,
	0, 428, 419, 420, 421, 396, 422, 426, 427, 423,
	424, 425, 499, 0, 430, 431, 429, 0, 432, 433,
	434, 435, 436, 273, 437, 0, 500, 501, 502, 503,
	0, 444, 0, 438, 439, 504, 440, 505, 0, 441,
	442, 443, 0, 445, 446, 0, 0, 447, 448, 449,
	450, 451, 453, 0, 454, 0, 452, 455, 456, 457,
	506, 507, 508, 0, 459, 458, 509, 0, 0, 0,
	0, 460, 461, 510, 462, 463, 464, 1235, 0, 1160,
	1159, 0, 0, 0, 0, 1157, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 465, 0, 0,
	0, 0, 222, 223, 224, 225, 466, 467, 226, 468,
	227, 228, 469, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 470, 471, 472, 0, 236, 473, 0,
	1064, 0, 237, 238, 239, 240, 241, 242, 0, 244,
	245, 246, 243, 0, 247, 0, 248, 249, 250, 0,
	940, 251, 252, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 474, 475, 0, 259,
	0, 261, 260, 0, 262, 0, 0, 263, 264, 265,
	0, 266, 0, 267, 268, 0, 476, 269, 270, 272,
	274, 271, 275, 276, 277, 278, 477, 478, 0, 213,
	0, 0, 0, 0, 0, 279, 280, 281, 479, 282,
	283, 0, 284, 0, 285, 0, 0, 941, 286, 287,
	0, 288, 480, 0, 481, 289, 0, 290, 291, 292,
	293, 1234, 483, 484, 341, 943, 294, 295, 0, 296,
	297, 299, 0, 0, 0, 0, 298, 300, 307, 0,
	942, 301, 485, 303, 302, 304, 305, 306, 486, 0,
	487, 0, 308, 944, 488, 945, 309, 310, 311, 946,
	312, 313, 0, 0, 314, 315, 316, 317, 0, 319,
	318, 0, 320, 489, 947, 321, 322, 948, 0, 323,
	324, 0, 0, 325, 326, 0, 327, 328, 330, 332,
	329, 331, 333, 335, 336, 334, 949, 337, 338, 340,
	339, 0, 0, 950, 0, 490, 491, 342, 343, 0,
	344, 345, 346, 0, 0, 348, 349, 350, 0, 0,
	351, 492, 951, 352, 952, 493, 353, 347, 354, 355,
	356, 357, 358, 359, 360, 0, 361, 362, 494, 363,
	495, 364, 0, 365, 0, 366, 367, 368, 369, 370,
	371, 496, 372, 373, 0, 374, 375, 376, 377, 378,
	0, 380, 381, 382, 379, 383, 384, 385, 386, 0,
	387, 953, 388, 389, 390, 391, 497, 392, 0, 393,
	397, 398, 399, 400, 401, 402, 403, 0, 410, 411,
	404, 406, 407, 408, 405, 409, 412, 413, 0, 414,
	394, 395, 415, 954, 416, 498, 417, 418, 0, 428,
	419, 420, 421, 396, 422, 426, 427, 423, 424, 425,
	499, 0, 430, 431, 429, 0, 432, 433, 434, 435,
	436, 273, 437, 0, 500, 501, 502, 503, 0, 444,
	0, 438, 439, 504, 440, 505, 0, 441, 442, 443,
	0, 445, 446, 0, 0, 447, 448, 449, 450, 451,
	453, 0, 454, 0, 452, 455, 456, 457, 506, 507,
	508, 0, 459, 458, 509, 0, 0, 0, 0, 460,
	461, 510, 462, 463, 464, 1232, 0, 1160, 1159, 0,
	0, 0, 0, 1157, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 465, 0, 0, 0, 0,
	222, 223, 224, 225, 466, 467, 226, 468, 227, 228,
	469, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 470, 471, 472, 0, 236, 473, 0, 1064, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 0, 247, 0, 248, 249, 250, 0, 940, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 474, 475, 0, 259, 0, 261,
	260, 0, 262, 0, 0, 263, 264, 265, 0, 266,
	0, 267, 268, 0, 476, 269, 270, 272, 274, 271,
	275, 276, 277, 278, 477, 478, 0, 213, 0, 0,
	0, 0, 0, 279, 280, 281, 479, 282, 283, 0,
	284, 0, 285, 0, 0, 941, 286, 287, 0, 288,
	480, 0, 481, 289, 0, 290, 291, 292, 293, 1231,
	483, 484, 341, 943, 294, 295, 0, 296, 297, 299,
	0, 0, 0, 0, 298, 300, 307, 0, 942, 301,
	485, 303, 302, 304, 305, 306, 486, 0, 487, 0,
	308, 944, 488, 945, 309, 310, 311, 946, 312, 313,
	0, 0, 314, 315, 316, 317, 0, 319, 318, 0,
	320, 489, 947, 321, 322, 948, 0, 323, 324, 0,
	0, 325, 326, 0, 327, 328, 330, 332, 329, 331,
	333, 335, 336, 334, 949, 337, 338, 340, 339, 0,
	0, 950, 0, 490, 491, 342, 343, 0, 344, 345,
	346, 0, 0, 348, 349, 350, 0, 0, 351, 492,
	951, 352, 952, 493, 353, 347, 354, 355, 356, 357,
	358, 359, 360, 0, 361, 362, 494, 363, 495, 364,
	0, 365, 0, 366, 367, 368, 369, 370, 371, 496,
	372, 373, 0, 374, 375, 376, 377, 378, 0, 380,
	381, 382, 379, 383, 384, 385, 386, 0, 387, 953,
	388, 389, 390, 391, 497, 392, 0, 393, 397, 398,
	399, 400, 401, 402, 403, 0, 410, 411, 404, 406,
	407, 408, 405, 409, 412, 413, 0, 414, 394, 395,
	415, 954, 416, 498, 417, 418, 0, 428, 419, 420,
	421, 396, 422, 426, 427, 423, 424, 425, 499, 0,
	430, 431, 429, 0, 432, 433, 434, 435, 436, 273,
	437, 0, 500, 501, 502, 503, 0, 444, 0, 438,
	439, 504, 440, 505, 0, 441, 442, 443, 0, 445,
	446, 0, 0, 447, 448, 449, 450, 451, 453, 0,
	454, 0, 452, 455, 456, 457, 506, 507, 508, 0,
	459, 458, 509, 0, 0, 0, 0, 460, 461, 510,
	462, 463, 464, 1153, 0, 1160, 1159, 0, 0, 0,
	0, 1157, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 465, 0, 0, 0, 0, 222, 223,
	224, 225, 466, 467, 226, 468, 227, 228, 469, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 470,
	471, 472, 0, 236, 473, 0, 1064, 0, 237, 238,
	239, 240, 241, 242, 0, 244, 245, 246, 243, 0,
	247, 0, 248, 249, 250, 0, 940, 251, 252, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 474, 475, 0, 259, 0, 261, 260, 0,
	262, 0, 0, 263, 264, 265, 0, 266, 0, 267,
	268, 0, 476, 269, 270, 272, 274, 271, 275, 276,
	277, 278, 477, 478, 0, 213, 0, 0, 0, 0,
	0, 279, 280, 281, 479, 282, 283, 0, 284, 0,
	285, 0, 0, 941, 286, 287, 0, 288, 480, 0,
	481, 289, 0, 290, 291, 292, 293, 1155, 483, 484,
	341, 943, 294, 295, 0, 296, 297, 299, 0, 0,
	0, 0, 298, 300, 307, 0, 942, 301, 485, 303,
	302, 304, 305, 306, 486, 0, 487, 0, 308, 944,
	488, 945, 309, 310, 311, 946, 312, 313, 0, 0,
	314, 315, 316, 317, 0, 319, 318, 0, 320, 489,
	947, 321, 322, 948, 0, 323, 324, 0, 0, 325,
	326, 0, 327, 328, 330, 332, 329, 331, 333, 335,
	336, 334, 949, 337, 338, 340, 339, 0, 0, 950,
	0, 490, 491, 342, 343, 0, 344, 345, 346, 0,
	0, 348, 349, 350, 0, 0, 351, 492, 951, 352,
	952, 493, 353, 347, 354, 355, 356, 357, 358, 359,
	360, 0, 361, 362, 494, 363, 495, 364, 0, 365,
	0, 366, 367, 368, 369, 370, 371, 496, 372, 373,
	0, 374, 375, 376, 377, 378, 0, 380, 381, 382,
	379, 383, 384, 385, 386, 0, 387, 953, 388, 389,
	390, 391, 497, 392, 0, 393, 397, 398, 399, 400,
	401, 402, 403, 0, 410, 411, 404, 406, 407, 408,
	405, 409, 412, 413, 0, 414, 394, 395, 415, 954,
	416, 498, 417, 418, 0, 428, 419, 420, 421, 396,
	422, 426, 427, 423, 424, 425, 499, 0, 430, 431,
	429, 0, 432, 433, 434, 435, 436, 273, 437, 0,
	500, 501, 502, 503, 0, 444, 0, 438, 439, 504,
	440, 505, 0, 441, 442, 443, 0, 445, 446, 0,
	0, 447, 448, 449, 450, 451, 453, 0, 454, 0,
	452, 455, 456, 457, 506, 507, 508, 0, 459, 458,
	509, 0, 0, 0, 0, 460, 461, 510, 462, 463,
	464, 1160, 1159, 0, 0, 0, 0, 1157, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 465,
	0, 0, 0, 0, 222, 223, 224, 225, 466, 467,
	226, 468, 227, 228, 469, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 470, 471, 472, 0, 236,
	473, 0, 1064, 0, 237, 238, 239, 240, 241, 242,
	0, 244, 245, 246, 243, 0, 247, 0, 248, 249,
	250, 0, 940, 251, 252, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 474, 475,
	0, 259, 0, 261, 260, 0, 262, 0, 0, 263,
	264, 265, 0, 266, 0, 267, 268, 0, 476, 269,
	270, 272, 274, 271, 275, 276, 277, 278, 477, 478,
	0, 213, 0, 0, 0, 0, 0, 279, 280, 281,
	479, 282, 283, 0, 284, 0, 285, 0, 0, 941,
	286, 287, 0, 288, 480, 0, 481, 289, 0, 290,
	291, 292, 293, 482, 483, 484, 341, 943, 294, 295,
	0, 296, 297, 299, 0, 0, 0, 0, 298, 300,
	307, 0, 942, 301, 485, 303, 302, 304, 305, 306,
	486, 0, 487, 0, 308, 944, 488, 945, 309, 310,
	311, 946, 312, 313, 0, 0, 314, 315, 316, 317,
	0, 319, 318, 0, 320, 489, 947, 321, 322, 948,
	0, 323, 324, 0, 0, 325, 326, 0, 327, 328,
	330, 332, 329, 331, 333, 335, 336, 334, 949, 337,
	338, 340, 339, 0, 0, 950, 0, 490, 491, 342,
	343, 0, 344, 345, 346, 0, 0, 348, 349, 350,
	0, 0, 351, 492, 951, 352, 952, 493, 353, 347,
	354, 355, 356, 357, 358, 359, 360, 0, 361, 362,
	494, 363, 495, 364, 0, 365, 0, 366, 367, 368,
	369, 370, 371, 496, 372, 373, 0, 374, 375, 376,
	377, 378, 0, 380, 381, 382, 379, 383, 384, 385,
	386, 0, 387, 953, 388, 389, 390, 391, 497, 392,
	0, 393, 397, 398, 399, 400, 401, 402, 403, 0,
	410, 411, 404, 406, 407, 408, 405, 409, 412, 413,
	0, 414, 394, 395, 415, 954, 416, 498, 417, 418,
	0, 428, 419, 420, 421, 396, 422, 426, 427, 423,
	424, 425, 499, 0, 430, 431, 429, 0, 432, 433,
	434, 435, 436, 273, 437, 0, 500, 501, 502, 503,
	0, 444, 0, 438, 439, 504, 440, 505, 0, 441,
	442, 443, 0, 445, 446, 0, 0, 447, 448, 449,
	450, 451, 453, 0, 454, 0, 452, 455, 456, 457,
	506, 507, 508, 0, 459, 458, 509, 1160, 1159, 0,
	0, 460, 461, 510, 462, 463, 464, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 465, 0, 0, 0, 0,
	222, 223, 224, 225, 466, 467, 226, 468, 227, 228,
	469, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 470, 471, 472, 0, 236, 473, 0, 1064, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 0, 247, 0, 248, 249, 250, 0, 940, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 474, 475, 0, 259, 0, 261,
	260, 0, 262, 0, 0, 263, 264, 265, 0, 266,
	0, 267, 268, 0, 476, 269, 270, 272, 274, 271,
	275, 276, 277, 278, 477, 478, 0, 213, 0, 0,
	0, 0, 0, 279, 280, 281, 479, 282, 283, 0,
	284, 0, 285, 0, 0, 941, 286, 287, 0, 288,
	480, 0, 481, 289, 0, 290, 291, 292, 293, 482,
	483, 484, 341, 943, 294, 295, 0, 296, 297, 299,
	0, 0, 0, 0, 298, 300, 307, 0, 942, 301,
	485, 303, 302, 304, 305, 306, 486, 0, 487, 0,
	308, 944, 488, 945, 309, 310, 311, 946, 312, 313,
	0, 0, 314, 315, 316, 317, 0, 319, 318, 0,
	320, 489, 947, 321, 322, 948, 0, 323, 324, 0,
	0, 325, 326, 0, 327, 328, 330, 332, 329, 331,
	333, 335, 336, 334, 949, 337, 338, 340, 339, 0,
	0, 950, 0, 490, 491, 342, 343, 0, 344, 345,
	346, 0, 0, 348, 349, 350, 0, 0, 351, 492,
	951, 352, 952, 493, 353, 347, 354, 355, 356, 357,
	358, 359, 360, 0, 361, 362, 494, 363, 495, 364,
	0, 365, 0, 366, 367, 368, 369, 370, 371, 496,
	372, 373, 0, 374, 375, 376, 377, 378, 0, 380,
	381, 382, 379, 383, 384, 385, 386, 0, 387, 953,
	388, 389, 390, 391, 497, 392, 0, 393, 397, 398,
	399, 400, 401, 402, 403, 0, 410, 411, 404, 406,
	407, 408, 405, 409, 412, 413, 0, 414, 394, 395,
	415, 954, 416, 498, 417, 418, 0, 428, 419, 420,
	421, 396, 422, 426, 427, 423, 424, 425, 499, 0,
	430, 431, 429, 0, 432, 433, 434, 435, 436, 273,
	437, 0, 500, 501, 502, 503, 0, 444, 0, 438,
	439, 504, 440, 505, 0, 441, 442, 443, 0, 445,
	446, 0, 0, 447, 448, 449, 450, 451, 453, 0,
	454, 0, 452, 455, 456, 457, 506, 507, 508, 1160,
	459, 458, 509, 0, 0, 0, 0, 460, 461, 510,
	462, 463, 464, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 465, 0, 0,
	0, 0, 222, 223, 224, 225, 466, 467, 226, 468,
	227, 228, 469, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 470, 471, 472, 0, 236, 473, 0,
	1064, 0, 237, 238, 239, 240, 241, 242, 0, 244,
	245, 246, 243, 0, 247, 0, 248, 249, 250, 0,
	940, 251, 252, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 474, 475, 0, 259,
	0, 261, 260, 0, 262, 0, 0, 263, 264, 265,
	0, 266, 0, 267, 268, 0, 476, 269, 270, 272,
	274, 271, 275, 276, 277, 278, 477, 478, 0, 213,
	0, 0, 0, 0, 0, 279, 280, 281, 479, 282,
	283, 0, 284, 0, 285, 0, 0, 941, 286, 287,
	0, 288, 480, 0, 481, 289, 0, 290, 291, 292,
	293, 482, 483, 484, 341, 943, 294, 295, 0, 296,
	297, 299, 0, 0, 0, 0, 298, 300, 307, 0,
	942, 301, 485, 303, 302, 304, 305, 306, 486, 0,
	487, 0, 308, 944, 488, 945, 309, 310, 311, 946,
	312, 313, 0, 0, 314, 315, 316, 317, 0, 319,
	318, 0, 320, 489, 947, 321, 322, 948, 0, 323,
	324, 0, 0, 325, 326, 0, 327, 328, 330, 332,
	329, 331, 333, 335, 336, 334, 949, 337, 338, 340,
	339, 0, 0, 950, 0, 490, 491, 342, 343, 0,
	344, 345, 346, 0, 0, 348, 349, 350, 0, 0,
	351, 492, 951, 352, 952, 493, 353, 347, 354, 355,
	356, 357, 358, 359, 360, 0, 361, 362, 494, 363,
	495, 364, 0, 365, 0, 366, 367, 368, 369, 370,
	371, 496, 372, 373, 0, 374, 375, 376, 377, 378,
	0, 380, 381, 382, 379, 383, 384, 385, 386, 0,
	387, 953, 388, 389, 390, 391, 497, 392, 0, 393,
	397, 398, 399, 400, 401, 402, 403, 0, 410, 411,
	404, 406, 407, 408, 405, 409, 412, 413, 0, 414,
	394, 395, 415, 954, 416, 498, 417, 418, 0, 428,
	419, 420, 421, 396, 422, 426, 427, 423, 424, 425,
	499, 0, 430, 431, 429, 0, 432, 433, 434, 435,
	436, 273, 437, 0, 500, 501, 502, 503, 0, 444,
	0, 438, 439, 504, 440, 505, 0, 441, 442, 443,
	0, 445, 446, 0, 0, 447, 448, 449, 450, 451,
	453, 0, 454, 0, 452, 455, 456, 457, 506, 507,
	508, 210, 459, 458, 509, 0, 0, 0, 0, 460,
	461, 510, 462, 463, 464, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 465,
	0, 0, 0, 0, 222, 223, 224, 225, 466, 467,
	226, 468, 227, 228, 469, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 470, 471, 472, 2238, 236,
	473, 0, 0, 0, 237, 238, 239, 240, 241, 242,
	0, 244, 245, 246, 243, 2235, 247, 0, 248, 249,
	250, 0, 0, 251, 252, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 474, 475,
	0, 259, 0, 261, 260, 0, 262, 0, 0, 263,
	264, 265, 0, 266, 0, 267, 268, 0, 476, 269,
	270, 272, 274, 271, 275, 276, 277, 278, 477, 478,
	0, 2385, 0, 0, 0, 0, 0, 279, 280, 281,
	479, 282, 283, 0, 284, 0, 285, 2241, 0, 0,
	286, 287, 0, 288, 480, 0, 481, 289, 0, 290,
	291, 292, 293, 482, 483, 484, 341, 0, 294, 295,
	0, 296, 297, 299, 0, 0, 0, 2382, 298, 300,
	307, 0, 0, 301, 485, 303, 302, 304, 305, 306,
	486, 0, 487, 0, 2384, 0, 488, 0, 309, 310,
	311, 0, 312, 313, 0, 0, 314, 315, 316, 317,
	0, 319, 318, 0, 320, 489, 0, 321, 322, 2381,
	0, 323, 324, 0, 0, 325, 326, 0, 327, 328,
	330, 332, 329, 331, 333, 335, 336, 334, 0, 337,
	338, 340, 339, 0, 0, 0, 0, 490, 491, 342,
	343, 0, 344, 345, 346, 0, 0, 348, 349, 350,
	0, 0, 351, 492, 0, 352, 0, 493, 353, 347,
	354, 355, 356, 357, 358, 359, 360, 0, 361, 362,
	494, 363, 495, 364, 2240, 365, 0, 366, 367, 368,
	369, 370, 371, 496, 372, 373, 0, 374, 375, 376,
	377, 378, 0, 380, 381, 382, 379, 383, 384, 385,
	386, 0, 387, 0, 388, 389, 390, 391, 497, 392,
	0, 393, 397, 398, 399, 400, 401, 402, 403, 0,
	410, 411, 404, 406, 407, 408, 405, 409, 412, 413,
	0, 414, 394, 395, 415, 0, 416, 498, 417, 418,
	0, 428, 419, 420, 421, 396, 422, 426, 427, 423,
	424, 425, 499, 0, 430, 431, 429, 0, 432, 433,
	434, 435, 436, 273, 437, 0, 500, 501, 502, 503,
	0, 444, 0, 438, 439, 504, 440, 505, 0, 441,
	442, 443, 0, 445, 446, 0, 2383, 447, 448, 449,
	450, 451, 453, 0, 454, 0, 452, 455, 456, 457,
	506, 507, 508, 210, 459, 458, 509, 0, 0, 0,
	0, 460, 461, 510, 462, 463, 464, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 465, 0, 0, 0, 0, 222, 223, 224, 225,
	466, 467, 226, 468, 227, 228, 469, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 470, 471, 472,
	2238, 236, 473, 0, 0, 2232, 237, 238, 239, 240,
	241, 242, 0, 244, 245, 246, 243, 2235, 247, 0,
	248, 249, 250, 0, 0, 251, 252, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	474, 475, 0, 259, 0, 261, 260, 0, 262, 0,
	0, 263, 264, 265, 0, 266, 0, 267, 268, 0,
	476, 269, 270, 272, 274, 271, 275, 276, 277, 278,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 279,
	280, 281, 479, 282, 283, 0, 284, 0, 285, 2241,
	0, 0, 286, 287, 0, 288, 480, 0, 481, 289,
	0, 290, 291, 292, 293, 2231, 483, 484, 341, 0,
	294, 295, 0, 296, 297, 299, 0, 0, 0, 0,
	298, 300, 307, 0, 0, 301, 485, 303, 302, 304,
	305, 306, 486, 0, 487, 0, 308, 0, 488, 0,
	309, 310, 311, 0, 312, 313, 0, 0, 314, 315,
	316, 317, 0, 319, 318, 0, 320, 489, 0, 321,
	322, 0, 0, 323, 324, 0, 0, 325, 326, 0,
	327, 328, 330, 332, 329, 331, 333, 335, 336, 334,
	0, 337, 338, 340, 339, 0, 0, 0, 0, 490,
	491, 342, 343, 0, 344, 345, 346, 0, 0, 348,
	349, 350, 0, 0, 351, 492, 0, 352, 0, 493,
	353, 347, 354, 355, 356, 357, 358, 359, 360, 0,
	361, 362, 494, 363, 495, 364, 2240, 365, 0, 366,
	367, 368, 369, 370, 371, 496, 372, 373, 0, 374,
	375, 376, 377, 378, 0, 380, 381, 382, 379, 383,
	384, 385, 386, 0, 387, 0, 388, 389, 390, 391,
	497, 392, 0, 393, 397, 398, 399, 400, 401, 402,
	403, 0, 410, 411, 404, 406, 407, 408, 405, 409,
	412, 413, 0, 414, 394, 395, 415, 0, 416, 498,
	417, 418, 0, 428, 419, 420, 421, 396, 422, 426,
	427, 423, 424, 425, 499, 0, 430, 431, 429, 0,
	432, 433, 434, 435, 436, 273, 437, 0, 500, 501,
	502, 503, 0, 444, 0, 438, 439, 504, 440, 505,
	0, 441, 442, 443, 0, 445, 446, 0, 2239, 447,
	448, 449, 450, 451, 453, 0, 454, 0, 452, 455,
	456, 457, 506, 507, 508, 0, 459, 458, 509, 1388,
	0, 210, 0, 460, 461, 510, 462, 463, 464, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 465,
	0, 0, 0, 0, 222, 223, 224, 225, 466, 467,
	226, 468, 227, 228, 469, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 470, 471, 472, 0, 236,
	473, 0, 0, 0, 237, 238, 239, 240, 241, 242,
	0, 244, 245, 246, 243, 0, 247, 0, 248, 249,
	250, 0, 0, 251, 252, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 474, 475,
	0, 259, 0, 261, 260, 0, 262, 0, 0, 263,
	264, 265, 0, 266, 0, 267, 268, 0, 476, 269,
	270, 272, 274, 271, 275, 276, 277, 278, 477, 478,
	0, 213, 0, 0, 0, 0, 0, 279, 280, 281,
	479, 282, 283, 0, 284, 0, 285, 0, 0, 0,
	286, 287, 0, 288, 480, 0, 481, 289, 0, 290,
	291, 292, 293, 482, 483, 484, 341, 0, 294, 295,
	0, 296, 297, 299, 0, 0, 0, 214, 298, 300,
	307, 0, 0, 301, 485, 303, 302, 304, 305, 306,
	486, 0, 487, 0, 308, 0, 488, 0, 309, 310,
	311, 0, 312, 313, 0, 0, 314, 315, 316, 317,
	0, 319, 318, 0, 320, 489, 0, 321, 322, 0,
	0, 323, 324, 0, 0, 325, 326, 0, 327, 328,
	330, 332, 329, 331, 333, 335, 336, 334, 0, 337,
	338, 340, 339, 0, 215, 0, 0, 490, 491, 342,
	343, 0, 344, 345, 346, 0, 0, 348, 349, 350,
	0, 0, 351, 492, 0, 352, 0, 493, 353, 347,
	354, 355, 356, 357, 358, 359, 360, 0, 361, 362,
	494, 363, 495, 364, 0, 365, 0, 366, 367, 368,
	369, 370, 371, 496, 372, 373, 0, 374, 375, 376,
	377, 378, 0, 380, 381, 382, 379, 383, 384, 385,
	386, 0, 387, 0, 388, 389, 390, 391, 497, 392,
	0, 393, 397, 398, 399, 400, 401, 402, 403, 0,
	1391, 411, 404, 406, 407, 408, 405, 409, 412, 413,
	0, 414, 394, 395, 415, 0, 416, 498, 417, 418,
	0, 428, 419, 420, 421, 396, 422, 426, 427, 423,
	424, 425, 499, 0, 430, 431, 429, 1389, 432, 433,
	434, 435, 436, 273, 437, 0, 500, 501, 502, 503,
	0, 444, 0, 438, 439, 504, 440, 505, 0, 441,
	442, 443, 0, 445, 446, 0, 0, 447, 448, 449,
	450, 451, 453, 0, 454, 0, 452, 455, 456, 457,
	506, 507, 508, 0, 1390, 458, 509, 1148, 0, 210,
	0, 460, 461, 510, 462, 463, 464, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 465, 0, 0,
	0, 0, 222, 223, 224, 225, 466, 467, 226, 468,
	227, 228, 469, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 470, 471, 472, 0, 236, 473, 0,
	0, 0, 237, 238, 239, 240, 241, 242, 0, 244,
	245, 246, 243, 0, 247, 0, 248, 249, 250, 0,
	0, 251, 252, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 474, 475, 0, 259,
	0, 261, 260, 0, 262, 0, 0, 263, 264, 265,
	0, 266, 0, 267, 268, 0, 476, 269, 270, 272,
	274, 271, 275, 276, 277, 278, 477, 478, 0, 213,
	0, 0, 0, 0, 0, 279, 280, 281, 479, 282,
	283, 0, 284, 0, 285, 0, 0, 0, 286, 287,
	0, 288, 480, 0, 481, 289, 0, 290, 291, 292,
	293, 1150, 483, 484, 341, 0, 294, 295, 0, 296,
	297, 299, 0, 0, 0, 214, 298, 300, 307, 0,
	0, 301, 485, 303, 302, 304, 305, 306, 486, 0,
	487, 0, 308, 0, 488, 0, 309, 310, 311, 0,
	312, 313, 0, 0, 314, 315, 316, 317, 0, 319,
	318, 0, 320, 489, 0, 321, 322, 0, 0, 323,
	324, 0, 0, 325, 326, 0, 327, 328, 330, 332,
	329, 331, 333, 335, 336, 334, 0, 337, 338, 340,
	339, 0, 215, 0, 0, 490, 491, 342, 343, 0,
	344, 345, 346, 0, 995, 348, 349, 350, 0, 0,
	351, 492, 0, 352, 0, 493, 353, 347, 354, 355,
	356, 357, 358, 359, 360, 0, 361, 362, 494, 363,
	495, 364, 0, 365, 0, 366, 367, 368, 369, 370,
	371, 496, 372, 373, 0, 374, 375, 376, 377, 378,
	0, 380, 381, 382, 379, 383, 384, 385, 386, 0,
	387, 0, 388, 389, 390, 391, 497, 392, 0, 393,
	397, 398, 399, 400, 401, 402, 403, 0, 410, 411,
	404, 406, 407, 408, 405, 409, 412, 413, 0, 414,
	394, 395, 415, 0, 416, 498, 417, 418, 0, 428,
	419, 420, 421, 396, 422, 426, 427, 423, 424, 425,
	499, 0, 430, 431, 429, 0, 432, 433, 434, 435,
	436, 273, 437, 0, 500, 501, 502, 503, 0, 444,
	0, 438, 439, 504, 440, 505, 0, 441, 442, 443,
	0, 445, 446, 0, 0, 447, 448, 449, 450, 451,
	453, 0, 454, 0, 452, 455, 456, 457, 506, 507,
	508, 0, 459, 458, 509, 1145, 0, 210, 0, 460,
	461, 510, 462, 463, 464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 465, 0, 0, 0, 0,
	222, 223, 224, 225, 466, 467, 226, 468, 227, 228,
	469, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 470, 471, 472, 0, 236, 473, 0, 0, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 0, 247, 0, 248, 249, 250, 0, 0, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 474, 475, 0, 259, 0, 261,
	260, 0, 262, 0, 0, 263, 264, 265, 0, 266,
	0, 267, 268, 0, 476, 269, 270, 272, 274, 271,
	275, 276, 277, 278, 477, 478, 0, 213, 0, 0,
	0, 0, 0, 279, 280, 281, 479, 282, 283, 0,
	284, 0, 285, 0, 0, 0, 286, 287, 0, 288,
	480, 0, 481, 289, 0, 290, 291, 292, 293, 1147,
	483, 484, 341, 0, 294, 295, 0, 296, 297, 299,
	0, 0, 0, 214, 298, 300, 307, 0, 0, 301,
	485, 303, 302, 304, 305, 306, 486, 0, 487, 0,
	308, 0, 488, 0, 309, 310, 311, 0, 312, 313,
	0, 0, 314, 315, 316, 317, 0, 319, 318, 0,
	320, 489, 0, 321, 322, 0, 0, 323, 324, 0,
	0, 325, 326, 0, 327, 328, 330, 332, 329, 331,
	333, 335, 336, 334, 0, 337, 338, 340, 339, 0,
	215, 0, 0, 490, 491, 342, 343, 0, 344, 345,
	346, 0, 995, 348, 349, 350, 0, 0, 351, 492,
	0, 352, 0, 493, 353, 347, 354, 355, 356, 357,
	358, 359, 360, 0, 361, 362, 494, 363, 495, 364,
	0, 365, 0, 366, 367, 368, 369, 370, 371, 496,
	372, 373, 0, 374, 375, 376, 377, 378, 0, 380,
	381, 382, 379, 383, 384, 385, 386, 0, 387, 0,
	388, 389, 390, 391, 497, 392, 0, 393, 397, 398,
	399, 400, 401, 402, 403, 0, 410, 411, 404, 406,
	407, 408, 405, 409, 412, 413, 0, 414, 394, 395,
	415, 0, 416, 498, 417, 418, 0, 428, 419, 420,
	421, 396, 422, 426, 427, 423, 424, 425, 499, 0,
	430, 431, 429, 0, 432, 433, 434, 435, 436, 273,
	437, 0, 500, 501, 502, 503, 0, 444, 0, 438,
	439, 504, 440, 505, 0, 441, 442, 443, 0, 445,
	446, 0, 0, 447, 448, 449, 450, 451, 453, 0,
	454, 0, 452, 455, 456, 457, 506, 507, 508, 0,
	459, 458, 509, 1052, 0, 210, 0, 460, 461, 510,
	462, 463, 464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 465, 0, 0, 0, 0, 222, 223,
	224, 225, 466, 467, 226, 468, 227, 228, 469, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 470,
	471, 472, 0, 236, 473, 0, 0, 0, 237, 238,
	239, 240, 241, 242, 0, 244, 245, 246, 243, 0,
	247, 0, 248, 249, 250, 0, 0, 251, 252, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 474, 475, 0, 259, 0, 261, 260, 0,
	262, 0, 0, 263, 264, 265, 0, 266, 0, 267,
	268, 0, 476, 269, 270, 272, 274, 271, 275, 276,
	277, 278, 477, 478, 0, 213, 0, 0, 0, 0,
	0, 279, 280, 281, 479, 282, 283, 0, 284, 0,
	285, 0, 0, 0, 286, 287, 0, 288, 480, 0,
	481, 289, 0, 290, 291, 292, 293, 1054, 483, 484,
	341, 0, 294, 295, 0, 296, 297, 299, 0, 0,
	0, 214, 298, 300, 307, 0, 0, 301, 485, 303,
	302, 304, 305, 306, 486, 0, 487, 0, 308, 0,
	488, 0, 309, 310, 311, 0, 312, 313, 0, 0,
	314, 315, 316, 317, 0, 319, 318, 0, 320, 489,
	0, 321, 322, 0, 0, 323, 324, 0, 0, 325,
	326, 0, 327, 328, 330, 332, 329, 331, 333, 335,
	336, 334, 0, 337, 338, 340, 339, 0, 215, 0,
	0, 490, 491, 342, 343, 0, 344, 345, 346, 0,
	995, 348, 349, 350, 0, 0, 351, 492, 0, 352,
	0, 493, 353, 347, 354, 355, 356, 357, 358, 359,
	360, 0, 361, 362, 494, 363, 495, 364, 0, 365,
	0, 366, 367, 368, 369, 370, 371, 496, 372, 373,
	0, 374, 375, 376, 377, 378, 0, 380, 381, 382,
	379, 383, 384, 385, 386, 0, 387, 0, 388, 389,
	390, 391, 497, 392, 0, 393, 397, 398, 399, 400,
	401, 402, 403, 0, 410, 411, 404, 406, 407, 408,
	405, 409, 412, 413, 0, 414, 394, 395, 415, 0,
	416, 498, 417, 418, 0, 428, 419, 420, 421, 396,
	422, 426, 427, 423, 424, 425, 499, 0, 430, 431,
	429, 0, 432, 433, 434, 435, 436, 273, 437, 0,
	500, 501, 502, 503, 0, 444, 0, 438, 439, 504,
	440, 505, 0, 441, 442, 443, 0, 445, 446, 0,
	0, 447, 448, 449, 450, 451, 453, 0, 454, 0,
	452, 455, 456, 457, 506, 507, 508, 0, 459, 458,
	509, 539, 0, 210, 0, 460, 461, 510, 462, 463,
	464, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 538, 220, 528, 221, 0, 0, 0,
	0, 465, 0, 0, 0, 0, 222, 223, 224, 225,
	466, 467, 226, 468, 227, 228, 469, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 470, 471, 472,
	0, 236, 473, 0, 0, 0, 237, 238, 239, 240,
	241, 242, 0, 244, 245, 246, 243, 0, 247, 0,
	248, 249, 250, 531, 0, 251, 252, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	474, 475, 0, 259, 0, 261, 260, 0, 262, 0,
	0, 263, 264, 265, 0, 266, 0, 267, 268, 0,
	476, 269, 270, 272, 274, 271, 275, 276, 277, 278,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 279,
	280, 281, 479, 282, 283, 0, 284, 0, 285, 0,
	0, 0, 286, 287, 532, 288, 480, 0, 481, 289,
	0, 290, 291, 292, 293, 482, 483, 484, 341, 0,
	294, 295, 0, 296, 297, 299, 0, 0, 0, 0,
	298, 300, 307, 0, 0, 301, 485, 303, 302, 304,
	305, 306, 486, 0, 487, 0, 308, 0, 488, 0,
	309, 310, 311, 0, 312, 313, 0, 0, 314, 315,
	316, 317, 0, 319, 318, 0, 320, 489, 0, 321,
	322, 0, 0, 323, 324, 0, 0, 325, 326, 0,
	327, 328, 330, 332, 329, 331, 333, 335, 336, 334,
	0, 337, 338, 340, 339, 0, 0, 0, 0, 490,
	491, 342, 343, 0, 344, 345, 346, 0, 0, 348,
	349, 350, 0, 0, 351, 492, 0, 352, 0, 493,
	353, 347, 354, 355, 356, 357, 358, 359, 360, 0,
	361, 362, 494, 363, 495, 364, 0, 365, 0, 366,
	367, 368, 369, 370, 371, 496, 372, 373, 0, 374,
	375, 376, 377, 378, 0, 380, 381, 382, 379, 383,
	384, 385, 386, 0, 387, 0, 388, 389, 390, 391,
	497, 392, 0, 393, 397, 398, 399, 400, 401, 402,
	403, 533, 410, 411, 404, 406, 407, 408, 405, 409,
	412, 413, 0, 414, 394, 395, 415, 0, 416, 498,
	417, 418, 0, 428, 419, 420, 421, 396, 422, 426,
	427, 423, 424, 425, 499, 0, 430, 431, 429, 0,
	432, 433, 434, 435, 436, 273, 437, 0, 500, 501,
	502, 503, 0, 444, 0, 438, 439, 504, 440, 505,
	0, 441, 442, 443, 0, 445, 446, 0, 0, 447,
	448, 449, 450, 451, 453, 0, 454, 0, 452, 455,
	456, 457, 506, 507, 508, 0, 459, 458, 509, 527,
	0, 210, 0, 460, 461, 510, 462, 463, 464, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 528, 221, 0, 0, 0, 0, 465,
	0, 0, 0, 0, 222, 223, 224, 225, 466, 467,
	226, 468, 227, 228, 469, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 470, 471, 472, 0, 236,
	473, 0, 0, 0, 237, 238, 239, 240, 241, 242,
	0, 244, 245, 246, 243, 0, 247, 0, 248, 249,
	250, 531, 0, 251, 252, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 474, 475,
	0, 259, 0, 261, 260, 0, 262, 0, 0, 263,
	264, 265, 0, 266, 0, 267, 268, 0, 476, 269,
	270, 272, 274, 271, 275, 276, 277, 278, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 279, 280, 281,
	479, 282, 283, 0, 284, 0, 285, 0, 0, 0,
	286, 287, 532, 288, 480, 0, 481, 289, 0, 290,
	291, 292, 293, 482, 483, 484, 341, 0, 294, 295,
	0, 296, 297, 299, 0, 0, 0, 0, 298, 300,
	307, 0, 0, 301, 485, 303, 302, 304, 305, 306,
	486, 0, 487, 0, 308, 0, 488, 0, 309, 310,
	311, 0, 312, 313, 0, 0, 314, 315, 316, 317,
	0, 319, 318, 0, 320, 489, 0, 321, 322, 0,
	0, 323, 324, 0, 0, 325, 326, 0, 327, 328,
	330, 332, 329, 331, 333, 335, 336, 334, 0, 337,
	338, 340, 339, 0, 0, 0, 0, 490, 491, 342,
	343, 0, 344, 345, 346, 0, 0, 348, 349, 350,
	0, 0, 351, 492, 0, 352, 0, 493, 353, 347,
	354, 355, 356, 357, 358, 359, 360, 0, 361, 362,
	494, 363, 495, 364, 0, 365, 0, 366, 367, 368,
	369, 370, 371, 496, 372, 373, 0, 374, 375, 376,
	377, 378, 0, 380, 381, 382, 379, 383, 384, 385,
	386, 0, 387, 0, 388, 389, 390, 391, 497, 392,
	0, 393, 397, 398, 399, 400, 401, 402, 403, 533,
	410, 411, 404, 406, 407, 408, 405, 409, 412, 413,
	0, 414, 394, 395, 415, 0, 416, 498, 417, 418,
	0, 428, 419, 420, 421, 396, 422, 426, 427, 423,
	424, 425, 499, 0, 430, 431, 429, 0, 432, 433,
	434, 435, 436, 273, 437, 0, 500, 501, 502, 503,
	0, 444, 0, 438, 439, 504, 440, 505, 0, 441,
	442, 443, 0, 445, 446, 0, 0, 447, 448, 449,
	450, 451, 453, 0, 454, 0, 452, 455, 456, 457,
	506, 507, 508, 210, 459, 458, 509, 0, 0, 0,
	0, 460, 461, 510, 462, 463, 464, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 465, 0, 0, 0, 0, 222, 223, 224, 225,
	466, 467, 226, 468, 227, 228, 469, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 470, 471, 472,
	0, 236, 473, 0, 0, 0, 237, 238, 239, 240,
	241, 242, 0, 244, 245, 246, 243, 0, 247, 0,
	248, 249, 250, 0, 0, 251, 252, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	474, 475, 0, 259, 0, 261, 260, 0, 262, 0,
	0, 263, 264, 265, 0, 266, 0, 267, 268, 0,
	476, 269, 270, 272, 274, 271, 275, 276, 277, 278,
	477, 478, 0, 213, 0, 0, 0, 0, 0, 279,
	280, 281, 479, 282, 283, 0, 284, 0, 285, 0,
	0, 0, 286, 287, 0, 288, 480, 0, 481, 289,
	0, 290, 291, 292, 293, 482, 483, 484, 341, 0,
	294, 295, 0, 296, 297, 299, 0, 0, 0, 214,
	298, 300, 307, 0, 0, 301, 485, 303, 302, 304,
	305, 306, 486, 0, 487, 0, 308, 0, 488, 0,
	309, 310, 311, 0, 312, 313, 0, 0, 314, 315,
	316, 317, 0, 319, 318, 0, 320, 489, 0, 321,
	322, 0, 0, 323, 324, 0, 0, 325, 326, 0,
	327, 328, 330, 332, 329, 331, 333, 335, 336, 334,
	0, 337, 338, 340, 339, 0, 215, 0, 0, 490,
	491, 342, 343, 0, 344, 345, 346, 0, 995, 348,
	349, 350, 0, 0, 351, 492, 0, 352, 0, 493,
	353, 347, 354, 355, 356, 357, 358, 359, 360, 0,
	361, 362, 494, 363, 495, 364, 0, 365, 0, 366,
	367, 368, 369, 370, 371, 496, 372, 373, 0, 374,
	375, 376, 377, 378, 0, 380, 381, 382, 379, 383,
	384, 385, 386, 0, 387, 0, 388, 389, 390, 391,
	497, 392, 0, 393, 397, 398, 399, 400, 401, 402,
	403, 0, 410, 411, 404, 406, 407, 408, 405, 409,
	412, 413, 0, 414, 394, 395, 415, 0, 416, 498,
	417, 418, 0, 428, 419, 420, 421, 396, 422, 426,
	427, 423, 424, 425, 499, 0, 430, 431, 429, 0,
	432, 433, 434, 435, 436, 273, 437, 0, 500, 501,
	502, 503, 0, 444, 0, 438, 439, 504, 440, 505,
	0, 441, 442, 443, 0, 445, 446, 0, 0, 447,
	448, 449, 450, 451, 453, 0, 454, 0, 452, 455,
	456, 457, 506, 507, 508, 0, 459, 458, 509, 2314,
	0, 210, 0, 460, 461, 510, 462, 463, 464, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 465,
	0, 0, 0, 0, 222, 223, 224, 225, 466, 467,
	226, 468, 227, 228, 469, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 470, 471, 472, 0, 236,
	473, 0, 0, 0, 237, 238, 239, 240, 241, 242,
	0, 244, 245, 246, 243, 0, 247, 0, 248, 249,
	250, 0, 0, 251, 252, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 474, 475,
	0, 259, 0, 261, 260, 0, 262, 0, 0, 263,
	264, 265, 0, 266, 0, 267, 268, 0, 476, 269,
	270, 272, 274, 271, 275, 276, 277, 278, 477, 478,
	0, 213, 0, 0, 0, 0, 0, 279, 280, 281,
	479, 282, 283, 0, 284, 0, 285, 0, 0, 0,
	286, 287, 0, 288, 480, 0, 481, 289, 0, 290,
	291, 292, 293, 482, 483, 484, 341, 0, 294, 295,
	0, 296, 297, 299, 0, 0, 0, 214, 298, 300,
	307, 0, 0, 301, 485, 303, 302, 304, 305, 306,
	486, 0, 487, 0, 308, 0, 488, 0, 309, 310,
	311, 0, 312, 313, 0, 0, 314, 315, 316, 317,
	0, 319, 318, 0, 320, 489, 0, 321, 322, 0,
	0, 323, 324, 0, 0, 325, 326, 0, 327, 328,
	330, 332, 329, 331, 333, 335, 336, 334, 0, 337,
	338, 340, 339, 0, 215, 0, 0, 490, 491, 342,
	343, 0, 344, 345, 346, 0, 0, 348, 349, 350,
	0, 0, 351, 492, 0, 352, 0, 493, 353, 347,
	354, 355, 356, 357, 358, 359, 360, 0, 361, 362,
	494, 363, 495, 364, 0, 365, 0, 366, 367, 368,
	369, 370, 371, 496, 372, 373, 0, 374, 375, 376,
	377, 378, 0, 380, 381, 382, 379, 383, 384, 385,
	386, 0, 387, 0, 388, 389, 390, 391, 497, 392,
	0, 393, 397, 398, 399, 400, 401, 402, 403, 0,
	410, 411, 404, 406, 407, 408, 405, 409, 412, 413,
	0, 414, 394, 395, 415, 0, 416, 498, 417, 418,
	0, 428, 419, 420, 421, 396, 422, 426, 427, 423,
	424, 425, 499, 0, 430, 431, 429, 0, 432, 433,
	434, 435, 436, 273, 437, 0, 500, 501, 502, 503,
	0, 444, 0, 438, 439, 504, 440, 505, 0, 441,
	442, 443, 0, 445, 446, 0, 0, 447, 448, 449,
	450, 451, 453, 0, 454, 0, 452, 455, 456, 457,
	506, 507, 508, 0, 459, 458, 509, 1874, 0, 210,
	0, 460, 461, 510, 462, 463, 464, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 465, 0, 0,
	0, 0, 222, 223, 224, 225, 466, 467, 226, 468,
	227, 228, 469, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 470, 471, 472, 0, 236, 473, 0,
	0, 0, 237, 238, 239, 240, 241, 242, 0, 244,
	245, 246, 243, 0, 247, 0, 248, 249, 250, 0,
	0, 251, 252, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 474, 475, 0, 259,
	0, 261, 260, 0, 262, 0, 0, 263, 264, 265,
	0, 266, 0, 267, 268, 0, 476, 269, 270, 272,
	274, 271, 275, 276, 277, 278, 477, 478, 0, 213,
	0, 0, 0, 0, 0, 279, 280, 281, 479, 282,
	283, 0, 284, 0, 285, 0, 0, 0, 286, 287,
	0, 288, 480, 0, 481, 289, 0, 290, 291, 292,
	293, 482, 483, 484, 341, 0, 294, 295, 0, 296,
	297, 299, 0, 0, 0, 214, 298, 300, 307, 0,
	0, 301, 485, 303, 302, 304, 305, 306, 486, 0,
	487, 0, 308, 0, 488, 0, 309, 310, 311, 0,
	312, 313, 0, 0, 314, 315, 316, 317, 0, 319,
	318, 0, 320, 489, 0, 321, 322, 0, 0, 323,
	324, 0, 0, 325, 326, 0, 327, 328, 330, 332,
	329, 331, 333, 335, 336, 334, 0, 337, 338, 340,
	339, 0, 215, 0, 0, 490, 491, 342, 343, 0,
	344, 345, 346, 0, 0, 348, 349, 350, 0, 0,
	351, 492, 0, 352, 0, 493, 353, 347, 354, 355,
	356, 357, 358, 359, 360, 0, 361, 362, 494, 363,
	495, 364, 0, 365, 0, 366, 367, 368, 369, 370,
	371, 496, 372, 373, 0, 374, 375, 376, 377, 378,
	0, 380, 381, 382, 379, 383, 384, 385, 386, 0,
	387, 0, 388, 389, 390, 391, 497, 392, 0, 393,
	397, 398, 399, 400, 401, 402, 403, 0, 410, 411,
	404, 406, 407, 408, 405, 409, 412, 413, 0, 414,
	394, 395, 415, 0, 416, 498, 417, 418, 0, 428,
	419, 420, 421, 396, 422, 426, 427, 423, 424, 425,
	499, 0, 430, 431, 429, 0, 432, 433, 434, 435,
	436, 273, 437, 0, 500, 501, 502, 503, 0, 444,
	0, 438, 439, 504, 440, 505, 0, 441, 442, 443,
	0, 445, 446, 0, 0, 447, 448, 449, 450, 451,
	453, 0, 454, 0, 452, 455, 456, 457, 506, 507,
	508, 210, 459, 458, 509, 0, 0, 0, 0, 460,
	461, 510, 462, 463, 464, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 465,
	0, 0, 0, 0, 222, 223, 224, 225, 466, 467,
	226, 468, 227, 228, 469, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 470, 471, 472, 0, 236,
	473, 0, 0, 0, 237, 238, 239, 240, 241, 242,
	0, 244, 245, 246, 243, 0, 247, 0, 248, 249,
	250, 0, 0, 251, 252, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 474, 475,
	0, 259, 0, 261, 260, 0, 262, 0, 0, 263,
	264, 265, 0, 266, 0, 267, 268, 0, 476, 269,
	270, 272, 274, 271, 275, 276, 277, 278, 477, 478,
	0, 213, 0, 0, 0, 0, 0, 279, 280, 281,
	479, 282, 283, 0, 284, 0, 285, 0, 0, 0,
	286, 287, 0, 288, 480, 0, 481, 289, 0, 290,
	291, 292, 293, 482, 483, 484, 341, 0, 294, 295,
	0, 296, 297, 299, 0, 0, 0, 214, 298, 300,
	307, 0, 0, 301, 485, 303, 302, 304, 305, 306,
	486, 0, 487, 0, 308, 0, 488, 0, 309, 310,
	311, 0, 312, 313, 0, 0, 314, 315, 316, 317,
	0, 319, 318, 0, 320, 489, 0, 321, 322, 0,
	0, 323, 324, 0, 0, 325, 326, 0, 327, 328,
	330, 332, 329, 331, 333, 335, 336, 334, 0, 337,
	338, 340, 339, 0, 215, 0, 0, 490, 491, 342,
	343, 0, 344, 345, 346, 0, 0, 348, 349, 350,
	0, 0, 351, 492, 0, 352, 0, 493, 353, 347,
	354, 355, 356, 357, 358, 359, 360, 0, 361, 362,
	494, 363, 495, 364, 0, 365, 0, 366, 367, 368,
	369, 370, 371, 496, 372, 373, 0, 374, 375, 376,
	377, 378, 0, 380, 381, 382, 379, 383, 384, 385,
	386, 0, 387, 0, 388, 389, 390, 391, 497, 392,
	0, 393, 397, 398, 399, 400, 401, 402, 403, 0,
	410, 411, 404, 406, 407, 408, 405, 409, 412, 413,
	0, 414, 394, 395, 415, 0, 416, 498, 417, 418,
	0, 428, 419, 420, 421, 396, 422, 426, 427, 423,
	424, 425, 499, 0, 430, 431, 429, 1808, 432, 433,
	434, 435, 436, 273, 437, 0, 500, 501, 502, 503,
	0, 444, 0, 438, 439, 504, 440, 505, 0, 441,
	442, 443, 0, 445, 446, 0, 0, 447, 448, 449,
	450, 451, 453, 0, 454, 0, 452, 455, 456, 457,
	506, 507, 508, 0, 459, 458, 509, 1801, 0, 210,
	0, 460, 461, 510, 462, 463, 464, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 465, 0, 0,
	0, 0, 222, 223, 224, 225, 466, 467, 226, 468,
	227, 228, 469, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 470, 471, 472, 0, 236, 473, 0,
	0, 0, 237, 238, 239, 240, 241, 242, 0, 244,
	245, 246, 243, 0, 247, 0, 248, 249, 250, 0,
	0, 251, 252, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 474, 475, 0, 259,
	0, 261, 260, 0, 262, 0, 0, 263, 264, 265,
	0, 266, 0, 267, 268, 0, 476, 269, 270, 272,
	274, 271, 275, 276, 277, 278, 477, 478, 0, 213,
	0, 0, 0, 0, 0, 279, 280, 281, 479, 282,
	283, 0, 284, 0, 285, 0, 0, 0, 286, 287,
	0, 288, 480, 0, 481, 289, 0, 290, 291, 292,
	293, 1800, 483, 484, 341, 0, 294, 295, 0, 296,
	297, 299, 0, 0, 0, 214, 298, 300, 307, 0,
	0, 301, 485, 303, 302, 304, 305, 306, 486, 0,
	487, 0, 308, 0, 488, 0, 309, 310, 311, 0,
	312, 313, 0, 0, 314, 315, 316, 317, 0, 319,
	318, 0, 320, 489, 0, 321, 322, 0, 0, 323,
	324, 0, 0, 325, 326, 0, 327, 328, 330, 332,
	329, 331, 333, 335, 336, 334, 0, 337, 338, 340,
	339, 0, 215, 0, 0, 490, 491, 342, 343, 0,
	344, 345, 346, 0, 0, 348, 349, 350, 0, 0,
	351, 492, 0, 352, 0, 493, 353, 347, 354, 355,
	356, 357, 358, 359, 360, 0, 361, 362, 494, 363,
	495, 364, 0, 365, 0, 366, 367, 368, 369, 370,
	371, 496, 372, 373, 0, 374, 375, 376, 377, 378,
	0, 380, 381, 382, 379, 383, 384, 385, 386, 0,
	387, 0, 388, 389, 390, 391, 497, 392, 0, 393,
	397, 398, 399, 400, 401, 402, 403, 0, 410, 411,
	404, 406, 407, 408, 405, 409, 412, 413, 0, 414,
	394, 395, 415, 0, 416, 498, 417, 418, 0, 428,
	419, 420, 421, 396, 422, 426, 427, 423, 424, 425,
	499, 0, 430, 431, 429, 0, 432, 433, 434, 435,
	436, 273, 437, 0, 500, 501, 502, 503, 0, 444,
	0, 438, 439, 504, 440, 505, 0, 441, 442, 443,
	0, 445, 446, 0, 0, 447, 448, 449, 450, 451,
	453, 0, 454, 0, 452, 455, 456, 457, 506, 507,
	508, 0, 459, 458, 509, 1796, 0, 210, 0, 460,
	461, 510, 462, 463, 464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 465, 0, 0, 0, 0,
	222, 223, 224, 225, 466, 467, 226, 468, 227, 228,
	469, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 470, 471, 472, 0, 236, 473, 0, 0, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 0, 247, 0, 248, 249, 250, 0, 0, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 474, 475, 0, 259, 0, 261,
	260, 0, 262, 0, 0, 263, 264, 265, 0, 266,
	0, 267, 268, 0, 476, 269, 270, 272, 274, 271,
	275, 276, 277, 278, 477, 478, 0, 213, 0, 0,
	0, 0, 0, 279, 280, 281, 479, 282, 283, 0,
	284, 0, 285, 0, 0, 0, 286, 287, 0, 288,
	480, 0, 481, 289, 0, 290, 291, 292, 293, 1798,
	483, 484, 341, 0, 294, 295, 0, 296, 297, 299,
	0, 0, 0, 214, 298, 300, 307, 0, 0, 301,
	485, 303, 302, 304, 305, 306, 486, 0, 487, 0,
	308, 0, 488, 0, 309, 310, 311, 0, 312, 313,
	0, 0, 314, 315, 316, 317, 0, 319, 318, 0,
	320, 489, 0, 321, 322, 0, 0, 323, 324, 0,
	0, 325, 326, 0, 327, 328, 330, 332, 329, 331,
	333, 335, 336, 334, 0, 337, 338, 340, 339, 0,
	215, 0, 0, 490, 491, 342, 343, 0, 344, 345,
	346, 0, 0, 348, 349, 350, 0, 0, 351, 492,
	0, 352, 0, 493, 353, 347, 354, 355, 356, 357,
	358, 359, 360, 0, 361, 362, 494, 363, 495, 364,
	0, 365, 0, 366, 367, 368, 369, 370, 371, 496,
	372, 373, 0, 374, 375, 376, 377, 378, 0, 380,
	381, 382, 379, 383, 384, 385, 386, 0, 387, 0,
	388, 389, 390, 391, 497, 392, 0, 393, 397, 398,
	399, 400, 401, 402, 403, 0, 410, 411, 404, 406,
	407, 408, 405, 409, 412, 413, 0, 414, 394, 395,
	415, 0, 416, 498, 417, 418, 0, 428, 419, 420,
	421, 396, 422, 426, 427, 423, 424, 425, 499, 0,
	430, 431, 429, 0, 432, 433, 434, 435, 436, 273,
	437, 0, 500, 501, 502, 503, 0, 444, 0, 438,
	439, 504, 440, 505, 0, 441, 442, 443, 0, 445,
	446, 0, 0, 447, 448, 449, 450, 451, 453, 0,
	454, 0, 452, 455, 456, 457, 506, 507, 508, 0,
	459, 458, 509, 1290, 0, 210, 0, 460, 461, 510,
	462, 463, 464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 465, 0, 0, 0, 0, 222, 223,
	224, 225, 466, 467, 226, 468, 227, 228, 469, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 470,
	471, 472, 0, 236, 473, 0, 0, 0, 237, 238,
	239, 240, 241, 242, 0, 244, 245, 246, 243, 0,
	247, 0, 248, 249, 250, 0, 0, 251, 252, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 474, 475, 0, 259, 0, 261, 260, 0,
	262, 0, 0, 263, 264, 265, 0, 266, 0, 267,
	268, 0, 476, 269, 270, 272, 274, 271, 275, 276,
	277, 278, 477, 478, 0, 213, 0, 0, 0, 0,
	0, 279, 280, 281, 479, 282, 283, 0, 284, 0,
	285, 0, 0, 0, 286, 287, 0, 288, 480, 0,
	481, 289, 0, 290, 291, 292, 293, 1289, 483, 484,
	341, 0, 294, 295, 0, 296, 297, 299, 0, 0,
	0, 214, 298, 300, 307, 0, 0, 301, 485, 303,
	302, 304, 305, 306, 486, 0, 487, 0, 308, 0,
	488, 0, 309, 310, 311, 0, 312, 313, 0, 0,
	314, 315, 316, 317, 0, 319, 318, 0, 320, 489,
	0, 321, 322, 0, 0, 323, 324, 0, 0, 325,
	326, 0, 327, 328, 330, 332, 329, 331, 333, 335,
	336, 334, 0, 337, 338, 340, 339, 0, 215, 0,
	0, 490, 491, 342, 343, 0, 344, 345, 346, 0,
	0, 348, 349, 350, 0, 0, 351, 492, 0, 352,
	0, 493, 353, 347, 354, 355, 356, 357, 358, 359,
	360, 0, 361, 362, 494, 363, 495, 364, 0, 365,
	0, 366, 367, 368, 369, 370, 371, 496, 372, 373,
	0, 374, 375, 376, 377, 378, 0, 380, 381, 382,
	379, 383, 384, 385, 386, 0, 387, 0, 388, 389,
	390, 391, 497, 392, 0, 393, 397, 398, 399, 400,
	401, 402, 403, 0, 410, 411, 404, 406, 407, 408,
	405, 409, 412, 413, 0, 414, 394, 395, 415, 0,
	416, 498, 417, 418, 0, 428, 419, 420, 421, 396,
	422, 426, 427, 423, 424, 425, 499, 0, 430, 431,
	429, 0, 432, 433, 434, 435, 436, 273, 437, 0,
	500, 501, 502, 503, 0, 444, 0, 438, 439, 504,
	440, 505, 0, 441, 442, 443, 0, 445, 446, 0,
	0, 447, 448, 449, 450, 451, 453, 0, 454, 0,
	452, 455, 456, 457, 506, 507, 508, 0, 459, 458,
	509, 1287, 0, 210, 0, 460, 461, 510, 462, 463,
	464, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 465, 0, 0, 0, 0, 222, 223, 224, 225,
	466, 467, 226, 468, 227, 228, 469, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 470, 471, 472,
	0, 236, 473, 0, 0, 0, 237, 238, 239, 240,
	241, 242, 0, 244, 245, 246, 243, 0, 247, 0,
	248, 249, 250, 0, 0, 251, 252, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	474, 475, 0, 259, 0, 261, 260, 0, 262, 0,
	0, 263, 264, 265, 0, 266, 0, 267, 268, 0,
	476, 269, 270, 272, 274, 271, 275, 276, 277, 278,
	477, 478, 0, 213, 0, 0, 0, 0, 0, 279,
	280, 281, 479, 282, 283, 0, 284, 0, 285, 0,
	0, 0, 286, 287, 0, 288, 480, 0, 481, 289,
	0, 290, 291, 292, 293, 1286, 483, 484, 341, 0,
	294, 295, 0, 296, 297, 299, 0, 0, 0, 214,
	298, 300, 307, 0, 0, 301, 485, 303, 302, 304,
	305, 306, 486, 0, 487, 0, 308, 0, 488, 0,
	309, 310, 311, 0, 312, 313, 0, 0, 314, 315,
	316, 317, 0, 319, 318, 0, 320, 489, 0, 321,
	322, 0, 0, 323, 324, 0, 0, 325, 326, 0,
	327, 328, 330, 332, 329, 331, 333, 335, 336, 334,
	0, 337, 338, 340, 339, 0, 215, 0, 0, 490,
	491, 342, 343, 0, 344, 345, 346, 0, 0, 348,
	349, 350, 0, 0, 351, 492, 0, 352, 0, 493,
	353, 347, 354, 355, 356, 357, 358, 359, 360, 0,
	361, 362, 494, 363, 495, 364, 0, 365, 0, 366,
	367, 368, 369, 370, 371, 496, 372, 373, 0, 374,
	375, 376, 377, 378, 0, 380, 381, 382, 379, 383,
	384, 385, 386, 0, 387, 0, 388, 389, 390, 391,
	497, 392, 0, 393, 397, 398, 399, 400, 401, 402,
	403, 0, 410, 411, 404, 406, 407, 408, 405, 409,
	412, 413, 0, 414, 394, 395, 415, 0, 416, 498,
	417, 418, 0, 428, 419, 420, 421, 396, 422, 426,
	427, 423, 424, 425, 499, 0, 430, 431, 429, 0,
	432, 433, 434, 435, 436, 273, 437, 0, 500, 501,
	502, 503, 0, 444, 0, 438, 439, 504, 440, 505,
	0, 441, 442, 443, 0, 445, 446, 0, 0, 447,
	448, 449, 450, 451, 453, 0, 454, 0, 452, 455,
	456, 457, 506, 507, 508, 0, 459, 458, 509, 1284,
	0, 210, 0, 460, 461, 510, 462, 463, 464, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 465,
	0, 0, 0, 0, 222, 223, 224, 225, 466, 467,
	226, 468, 227, 228, 469, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 470, 471, 472, 0, 236,
	473, 0, 0, 0, 237, 238, 239, 240, 241, 242,
	0, 244, 245, 246, 243, 0, 247, 0, 248, 249,
	250, 0, 0, 251, 252, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 474, 475,
	0, 259, 0, 261, 260, 0, 262, 0, 0, 263,
	264, 265, 0, 266, 0, 267, 268, 0, 476, 269,
	270, 272, 274, 271, 275, 276, 277, 278, 477, 478,
	0, 213, 0, 0, 0, 0, 0, 279, 280, 281,
	479, 282, 283, 0, 284, 0, 285, 0, 0, 0,
	286, 287, 0, 288, 480, 0, 481, 289, 0, 290,
	291, 292, 293, 1283, 483, 484, 341, 0, 294, 295,
	0, 296, 297, 299, 0, 0, 0, 214, 298, 300,
	307, 0, 0, 301, 485, 303, 302, 304, 305, 306,
	486, 0, 487, 0, 308, 0, 488, 0, 309, 310,
	311, 0, 312, 313, 0, 0, 314, 315, 316, 317,
	0, 319, 318, 0, 320, 489, 0, 321, 322, 0,
	0, 323, 324, 0, 0, 325, 326, 0, 327, 328,
	330, 332, 329, 331, 333, 335, 336, 334, 0, 337,
	338, 340, 339, 0, 215, 0, 0, 490, 491, 342,
	343, 0, 344, 345, 346, 0, 0, 348, 349, 350,
	0, 0, 351, 492, 0, 352, 0, 493, 353, 347,
	354, 355, 356, 357, 358, 359, 360, 0, 361, 362,
	494, 363, 495, 364, 0, 365, 0, 366, 367, 368,
	369, 370, 371, 496, 372, 373, 0, 374, 375, 376,
	377, 378, 0, 380, 381, 382, 379, 383, 384, 385,
	386, 0, 387, 0, 388, 389, 390, 391, 497, 392,
	0, 393, 397, 398, 399, 400, 401, 402, 403, 0,
	410, 411, 404, 406, 407, 408, 405, 409, 412, 413,
	0, 414, 394, 395, 415, 0, 416, 498, 417, 418,
	0, 428, 419, 420, 421, 396, 422, 426, 427, 423,
	424, 425, 499, 0, 430, 431, 429, 0, 432, 433,
	434, 435, 436, 273, 437, 0, 500, 501, 502, 503,
	0, 444, 0, 438, 439, 504, 440, 505, 0, 441,
	442, 443, 0, 445, 446, 0, 0, 447, 448, 449,
	450, 451, 453, 0, 454, 0, 452, 455, 456, 457,
	506, 507, 508, 0, 459, 458, 509, 1280, 0, 210,
	0, 460, 461, 510, 462, 463, 464, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 465, 0, 0,
	0, 0, 222, 223, 224, 225, 466, 467, 226, 468,
	227, 228, 469, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 470, 471, 472, 0, 236, 473, 0,
	0, 0, 237, 238, 239, 240, 241, 242, 0, 244,
	245, 246, 243, 0, 247, 0, 248, 249, 250, 0,
	0, 251, 252, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 474, 475, 0, 259,
	0, 261, 260, 0, 262, 0, 0, 263, 264, 265,
	0, 266, 0, 267, 268, 0, 476, 269, 270, 272,
	274, 271, 275, 276, 277, 278, 477, 478, 0, 213,
	0, 0, 0, 0, 0, 279, 280, 281, 479, 282,
	283, 0, 284, 0, 285, 0, 0, 0, 286, 287,
	0, 288, 480, 0, 481, 289, 0, 290, 291, 292,
	293, 1279, 483, 484, 341, 0, 294, 295, 0, 296,
	297, 299, 0, 0, 0, 214, 298, 300, 307, 0,
	0, 301, 485, 303, 302, 304, 305, 306, 486, 0,
	487, 0, 308, 0, 488, 0, 309, 310, 311, 0,
	312, 313, 0, 0, 314, 315, 316, 317, 0, 319,
	318, 0, 320, 489, 0, 321, 322, 0, 0, 323,
	324, 0, 0, 325, 326, 0, 327, 328, 330, 332,
	329, 331, 333, 335, 336, 334, 0, 337, 338, 340,
	339, 0, 215, 0, 0, 490, 491, 342, 343, 0,
	344, 345, 346, 0, 0, 348, 349, 350, 0, 0,
	351, 492, 0, 352, 0, 493, 353, 347, 354, 355,
	356, 357, 358, 359, 360, 0, 361, 362, 494, 363,
	495, 364, 0, 365, 0, 366, 367, 368, 369, 370,
	371, 496, 372, 373, 0, 374, 375, 376, 377, 378,
	0, 380, 381, 382, 379, 383, 384, 385, 386, 0,
	387, 0, 388, 389, 390, 391, 497, 392, 0, 393,
	397, 398, 399, 400, 401, 402, 403, 0, 410, 411,
	404, 406, 407, 408, 405, 409, 412, 413, 0, 414,
	394, 395, 415, 0, 416, 498, 417, 418, 0, 428,
	419, 420, 421, 396, 422, 426, 427, 423, 424, 425,
	499, 0, 430, 431, 429, 0, 432, 433, 434, 435,
	436, 273, 437, 0, 500, 501, 502, 503, 0, 444,
	0, 438, 439, 504, 440, 505, 0, 441, 442, 443,
	0, 445, 446, 0, 0, 447, 448, 449, 450, 451,
	453, 0, 454, 0, 452, 455, 456, 457, 506, 507,
	508, 0, 459, 458, 509, 1255, 0, 210, 0, 460,
	461, 510, 462, 463, 464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 465, 0, 0, 0, 0,
	222, 223, 224, 225, 466, 467, 226, 468, 227, 228,
	469, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 470, 471, 472, 0, 236, 473, 0, 0, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 0, 247, 0, 248, 249, 250, 0, 0, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 474, 475, 0, 259, 0, 261,
	260, 0, 262, 0, 0, 263, 264, 265, 0, 266,
	0, 267, 268, 0, 476, 269, 270, 272, 274, 271,
	275, 276, 277, 278, 477, 478, 0, 213, 0, 0,
	0, 0, 0, 279, 280, 281, 479, 282, 283, 0,
	284, 0, 285, 0, 0, 0, 286, 287, 0, 288,
	480, 0, 481, 289, 0, 290, 291, 292, 293, 482,
	483, 484, 341, 0, 294, 295, 0, 296, 297, 299,
	0, 0, 0, 214, 298, 300, 307, 0, 0, 301,
	485, 303, 302, 304, 305, 306, 486, 0, 487, 0,
	308, 0, 488, 0, 309, 310, 311, 0, 312, 313,
	0, 0, 314, 315, 316, 317, 0, 319, 318, 0,
	320, 489, 0, 321, 322, 0, 0, 323, 324, 0,
	0, 325, 326, 0, 327, 328, 330, 332, 329, 331,
	333, 335, 336, 334, 0, 337, 338, 340, 339, 0,
	215, 0, 0, 490, 491, 342, 343, 0, 344, 345,
	346, 0, 0, 348, 349, 350, 0, 0, 351, 492,
	0, 352, 0, 493, 353, 347, 354, 355, 356, 357,
	358, 359, 360, 0, 361, 362, 494, 363, 495, 364,
	0, 365, 0, 366, 367, 368, 369, 370, 371, 496,
	372, 373, 0, 374, 375, 376, 377, 378, 0, 380,
	381, 382, 379, 383, 384, 385, 386, 0, 387, 0,
	388, 389, 390, 391, 497, 392, 0, 393, 397, 398,
	399, 400, 401, 402, 403, 0, 410, 411, 404, 406,
	407, 408, 405, 409, 412, 413, 0, 414, 394, 395,
	415, 0, 416, 498, 417, 418, 0, 428, 419, 420,
	421, 396, 422, 426, 427, 423, 424, 425, 499, 0,
	430, 431, 429, 0, 432, 433, 434, 435, 436, 273,
	437, 0, 500, 501, 502, 503, 0, 444, 0, 438,
	439, 504, 440, 505, 0, 441, 442, 443, 0, 445,
	446, 0, 0, 447, 448, 449, 450, 451, 453, 0,
	454, 0, 452, 455, 456, 457, 506, 507, 508, 0,
	459, 458, 509, 1170, 0, 210, 0, 460, 461, 510,
	462, 463, 464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 465, 0, 0, 0, 0, 222, 223,
	224, 225, 466, 467, 226, 468, 227, 228, 469, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 470,
	471, 472, 0, 236, 473, 0, 0, 0, 237, 238,
	239, 240, 241, 242, 0, 244, 245, 246, 243, 0,
	247, 0, 248, 249, 250, 0, 0, 251, 252, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 474, 475, 0, 259, 0, 261, 260, 0,
	262, 0, 0, 263, 264, 265, 0, 266, 0, 267,
	268, 0, 476, 269, 270, 272, 274, 271, 275, 276,
	277, 278, 477, 478, 0, 213, 0, 0, 0, 0,
	0, 279, 280, 281, 479, 282, 283, 0, 284, 0,
	285, 0, 0, 0, 286, 287, 0, 288, 480, 0,
	481, 289, 0, 290, 291, 292, 293, 1172, 483, 484,
	341, 0, 294, 295, 0, 296, 297, 299, 0, 0,
	0, 214, 298, 300, 307, 0, 0, 301, 485, 303,
	302, 304, 305, 306, 486, 0, 487, 0, 308, 0,
	488, 0, 309, 310, 311, 0, 312, 313, 0, 0,
	314, 315, 316, 317, 0, 319, 318, 0, 320, 489,
	0, 321, 322, 0, 0, 323, 324, 0, 0, 325,
	326, 0, 327, 328, 330, 332, 329, 331, 333, 335,
	336, 334, 0, 337, 338, 340, 339, 0, 215, 0,
	0, 490, 491, 342, 343, 0, 344, 345, 346, 0,
	0, 348, 349, 350, 0, 0, 351, 492, 0, 352,
	0, 493, 353, 347, 354, 355, 356, 357, 358, 359,
	360, 0, 361, 362, 494, 363, 495, 364, 0, 365,
	0, 366, 367, 368, 369, 370, 371, 496, 372, 373,
	0, 374, 375, 376, 377, 378, 0, 380, 381, 382,
	379, 383, 384, 385, 386, 0, 387, 0, 388, 389,
	390, 391, 497, 392, 0, 393, 397, 398, 399, 400,
	401, 402, 403, 0, 410, 411, 404, 406, 407, 408,
	405, 409, 412, 413, 0, 414, 394, 395, 415, 0,
	416, 498, 417, 418, 0, 428, 419, 420, 421, 396,
	422, 426, 427, 423, 424, 425, 499, 0, 430, 431,
	429, 0, 432, 433, 434, 435, 436, 273, 437, 0,
	500, 501, 502, 503, 0, 444, 0, 438, 439, 504,
	440, 505, 0, 441, 442, 443, 0, 445, 446, 0,
	0, 447, 448, 449, 450, 451, 453, 0, 454, 0,
	452, 455, 456, 457, 506, 507, 508, 210, 459, 458,
	509, 0, 0, 0, 0, 460, 461, 510, 462, 463,
	464, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 465, 0, 0, 0, 0,
	222, 223, 224, 225, 466, 467, 226, 468, 227, 228,
	469, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 470, 471, 472, 0, 236, 473, 0, 0, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 0, 247, 0, 248, 249, 250, 0, 0, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 474, 475, 0, 259, 0, 261,
	260, 0, 262, 0, 0, 263, 264, 265, 0, 266,
	0, 267, 268, 0, 476, 269, 270, 272, 274, 271,
	275, 276, 277, 278, 477, 478, 0, 213, 0, 0,
	0, 0, 0, 279, 280, 281, 479, 282, 283, 0,
	284, 0, 285, 0, 0, 0, 286, 287, 0, 288,
	480, 0, 481, 289, 0, 290, 291, 292, 293, 482,
	483, 484, 341, 0, 294, 295, 0, 296, 297, 299,
	0, 0, 0, 214, 298, 300, 307, 0, 0, 301,
	485, 303, 302, 304, 305, 306, 486, 0, 487, 0,
	308, 0, 488, 0, 309, 310, 311, 0, 312, 313,
	0, 0, 314, 315, 316, 317, 0, 319, 318, 0,
	320, 489, 0, 321, 322, 0, 0, 323, 324, 0,
	0, 325, 326, 0, 327, 328, 330, 332, 329, 331,
	333, 335, 336, 334, 0, 337, 338, 340, 339, 0,
	215, 0, 0, 490, 491, 342, 343, 0, 344, 345,
	346, 0, 0, 348, 349, 350, 0, 0, 351, 492,
	0, 352, 0, 493, 353, 347, 354, 355, 356, 357,
	358, 359, 360, 0, 361, 362, 494, 363, 495, 364,
	0, 365, 0, 366, 367, 368, 369, 370, 371, 496,
	372, 373, 0, 374, 375, 376, 377, 378, 0, 380,
	381, 382, 379, 383, 384, 385, 386, 0, 387, 0,
	388, 389, 390, 391, 497, 392, 0, 393, 397, 398,
	399, 400, 401, 402, 403, 0, 410, 411, 404, 406,
	407, 408, 405, 409, 412, 413, 0, 414, 394, 395,
	415, 0, 416, 498, 417, 418, 0, 428, 419, 420,
	421, 396, 422, 426, 427, 423, 424, 425, 499, 0,
	430, 431, 429, 0, 432, 433, 434, 435, 436, 273,
	437, 0, 500, 501, 502, 503, 0, 444, 0, 438,
	439, 504, 440, 505, 0, 441, 442, 443, 0, 445,
	446, 0, 0, 447, 448, 449, 450, 451, 453, 0,
	454, 0, 452, 455, 456, 457, 506, 507, 508, 210,
	459, 458, 509, 0, 0, 0, 0, 460, 461, 510,
	462, 463, 464, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 465, 0, 0,
	0, 0, 222, 223, 224, 225, 466, 467, 226, 468,
	227, 228, 469, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 470, 471, 472, 0, 236, 473, 0,
	0, 0, 237, 238, 239, 240, 241, 242, 0, 244,
	245, 246, 243, 0, 247, 0, 248, 249, 250, 531,
	0, 251, 252, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 474, 475, 0, 259,
	0, 261, 260, 0, 262, 0, 0, 263, 264, 265,
	0, 266, 0, 267, 268, 0, 476, 269, 270, 272,
	274, 271, 275, 276, 277, 278, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 479, 282,
	283, 0, 284, 0, 285, 0, 0, 0, 286, 287,
	532, 288, 480, 0, 481, 289, 0, 290, 291, 292,
	293, 482, 483, 484, 341, 0, 294, 295, 0, 296,
	297, 299, 0, 0, 0, 0, 298, 300, 307, 0,
	0, 301, 485, 303, 302, 304, 305, 306, 486, 0,
	487, 0, 308, 0, 488, 0, 309, 310, 311, 0,
	312, 313, 0, 0, 314, 315, 316, 317, 0, 319,
	318, 0, 320, 489, 0, 321, 322, 0, 0, 323,
	324, 0, 0, 325, 326, 0, 327, 328, 330, 332,
	329, 331, 333, 335, 336, 334, 0, 337, 338, 340,
	339, 0, 0, 0, 0, 490, 491, 342, 343, 0,
	344, 345, 346, 0, 0, 348, 349, 350, 0, 0,
	351, 492, 0, 352, 0, 493, 353, 347, 354, 355,
	356, 357, 358, 359, 360, 0, 361, 362, 494, 363,
	495, 364, 0, 365, 0, 366, 367, 368, 369, 370,
	371, 496, 372, 373, 0, 374, 375, 376, 377, 378,
	0, 380, 381, 382, 379, 383, 384, 385, 386, 0,
	387, 0, 388, 389, 390, 391, 497, 392, 0, 393,
	397, 398, 399, 400, 401, 402, 403, 533, 410, 411,
	404, 406, 407, 408, 405, 409, 412, 413, 0, 414,
	394, 395, 415, 0, 416, 498, 417, 418, 0, 428,
	419, 420, 421, 396, 422, 426, 427, 423, 424, 425,
	499, 0, 430, 431, 429, 0, 432, 433, 434, 435,
	436, 273, 437, 0, 500, 501, 502, 503, 0, 444,
	0, 438, 439, 504, 440, 505, 0, 441, 442, 443,
	0, 445, 446, 0, 0, 447, 448, 449, 450, 451,
	453, 0, 454, 0, 452, 455, 456, 457, 506, 507,
	508, 210, 459, 458, 509, 0, 0, 0, 0, 460,
	461, 510, 462, 463, 464, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 465,
	0, 0, 0, 0, 222, 223, 224, 225, 466, 467,
	226, 468, 227, 228, 469, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 470, 471, 472, 0, 236,
	473, 0, 0, 0, 237, 238, 239, 240, 241, 242,
	0, 244, 245, 246, 243, 0, 247, 0, 248, 249,
	250, 0, 0, 251, 252, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 1902, 256, 257, 258, 474, 475,
	0, 259, 0, 261, 260, 0, 262, 0, 0, 263,
	264, 265, 0, 266, 0, 267, 268, 0, 476, 269,
	270, 272, 274, 271, 275, 276, 277, 278, 477, 478,
	0, 213, 0, 0, 0, 0, 0, 279, 280, 281,
	479, 282, 283, 0, 284, 0, 285, 0, 0, 0,
	286, 287, 0, 288, 480, 0, 481, 289, 0, 290,
	291, 292, 293, 482, 483, 484, 341, 0, 294, 295,
	0, 296, 297, 299, 0, 0, 0, 214, 298, 300,
	307, 0, 0, 301, 485, 303, 302, 304, 305, 306,
	486, 0, 487, 0, 308, 0, 488, 0, 309, 310,
	311, 0, 312, 313, 0, 0, 314, 315, 316, 317,
	0, 319, 318, 0, 320, 489, 0, 321, 322, 0,
	0, 323, 324, 0, 0, 325, 326, 0, 327, 328,
	330, 332, 329, 331, 333, 335, 336, 334, 0, 337,
	338, 340, 339, 0, 215, 0, 0, 490, 491, 342,
	343, 0, 344, 345, 346, 0, 0, 348, 349, 350,
	0, 0, 351, 492, 0, 352, 0, 493, 353, 347,
	354, 355, 356, 357, 358, 359, 360, 0, 361, 362,
	494, 363, 495, 364, 0, 365, 0, 366, 367, 368,
	369, 370, 371, 496, 372, 373, 0, 374, 375, 376,
	377, 378, 0, 380, 381, 382, 379, 383, 384, 385,
	386, 0, 387, 0, 388, 389, 390, 391, 497, 392,
	0, 393, 397, 398, 399, 400, 401, 402, 403, 0,
	410, 411, 404, 406, 407, 408, 405, 409, 412, 413,
	0, 414, 394, 395, 415, 0, 416, 498, 417, 418,
	0, 428, 419, 420, 421, 396, 422, 426, 427, 423,
	424, 425, 499, 0, 430, 431, 429, 0, 432, 433,
	434, 435, 436, 273, 437, 0, 500, 501, 502, 503,
	0, 444, 0, 438, 439, 504, 440, 505, 0, 441,
	442, 443, 0, 445, 446, 0, 0, 447, 448, 449,
	450, 451, 453, 0, 454, 0, 452, 455, 456, 457,
	506, 507, 508, 210, 459, 458, 509, 0, 0, 0,
	0, 460, 461, 510, 462, 463, 464, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 465, 0, 0, 0, 0, 222, 223, 224, 225,
	466, 467, 226, 468, 227, 228, 469, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 470, 471, 472,
	0, 236, 473, 0, 0, 0, 237, 238, 239, 240,
	241, 242, 0, 244, 245, 246, 243, 0, 247, 0,
	248, 249, 250, 0, 0, 251, 252, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 1900, 256, 257, 258,
	474, 475, 0, 259, 0, 261, 260, 0, 262, 0,
	0, 263, 264, 265, 0, 266, 0, 267, 268, 0,
	476, 269, 270, 272, 274, 271, 275, 276, 277, 278,
	477, 478, 0, 213, 0, 0, 0, 0, 0, 279,
	280, 281, 479, 282, 283, 0, 284, 0, 285, 0,
	0, 0, 286, 287, 0, 288, 480, 0, 481, 289,
	0, 290, 291, 292, 293, 482, 483, 484, 341, 0,
	294, 295, 0, 296, 297, 299, 0, 0, 0, 214,
	298, 300, 307, 0, 0, 301, 485, 303, 302, 304,
	305, 306, 486, 0, 487, 0, 308, 0, 488, 0,
	309, 310, 311, 0, 312, 313, 0, 0, 314, 315,
	316, 317, 0, 319, 318, 0, 320, 489, 0, 321,
	322, 0, 0, 323, 324, 0, 0, 325, 326, 0,
	327, 328, 330, 332, 329, 331, 333, 335, 336, 334,
	0, 337, 338, 340, 339, 0, 215, 0, 0, 490,
	491, 342, 343, 0, 344, 345, 346, 0, 0, 348,
	349, 350, 0, 0, 351, 492, 0, 352, 0, 493,
	353, 347, 354, 355, 356, 357, 358, 359, 360, 0,
	361, 362, 494, 363, 495, 364, 0, 365, 0, 366,
	367, 368, 369, 370, 371, 496, 372, 373, 0, 374,
	375, 376, 377, 378, 0, 380, 381, 382, 379, 383,
	384, 385, 386, 0, 387, 0, 388, 389, 390, 391,
	497, 392, 0, 393, 397, 398, 399, 400, 401, 402,
	403, 0, 410, 411, 404, 406, 407, 408, 405, 409,
	412, 413, 0, 414, 394, 395, 415, 0, 416, 498,
	417, 418, 0, 428, 419, 420, 421, 396, 422, 426,
	427, 423, 424, 425, 499, 0, 430, 431, 429, 0,
	432, 433, 434, 435, 436, 273, 437, 0, 500, 501,
	502, 503, 0, 444, 0, 438, 439, 504, 440, 505,
	0, 441, 442, 443, 0, 445, 446, 0, 0, 447,
	448, 449, 450, 451, 453, 0, 454, 0, 452, 455,
	456, 457, 506, 507, 508, 210, 459, 458, 509, 0,
	0, 0, 0, 460, 461, 510, 462, 463, 464, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 465, 0, 0, 0, 0, 222, 223,
	224, 225, 466, 467, 226, 468, 227, 228, 469, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 470,
	471, 472, 0, 236, 473, 0, 0, 0, 237, 238,
	239, 240, 241, 242, 0, 244, 245, 246, 243, 0,
	247, 0, 248, 249, 250, 0, 0, 251, 252, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 1898, 256,
	257, 258, 474, 475, 0, 259, 0, 261, 260, 0,
	262, 0, 0, 263, 264, 265, 0, 266, 0, 267,
	268, 0, 476, 269, 270, 272, 274, 271, 275, 276,
	277, 278, 477, 478, 0, 213, 0, 0, 0, 0,
	0, 279, 280, 281, 479, 282, 283, 0, 284, 0,
	285, 0, 0, 0, 286, 287, 0, 288, 480, 0,
	481, 289, 0, 290, 291, 292, 293, 482, 483, 484,
	341, 0, 294, 295, 0, 296, 297, 299, 0, 0,
	0, 214, 298, 300, 307, 0, 0, 301, 485, 303,
	302, 304, 305, 306, 486, 0, 487, 0, 308, 0,
	488, 0, 309, 310, 311, 0, 312, 313, 0, 0,
	314, 315, 316, 317, 0, 319, 318, 0, 320, 489,
	0, 321, 322, 0, 0, 323, 324, 0, 0, 325,
	326, 0, 327, 328, 330, 332, 329, 331, 333, 335,
	336, 334, 0, 337, 338, 340, 339, 0, 215, 0,
	0, 490, 491, 342, 343, 0, 344, 345, 346, 0,
	0, 348, 349, 350, 0, 0, 351, 492, 0, 352,
	0, 493, 353, 347, 354, 355, 356, 357, 358, 359,
	360, 0, 361, 362, 494, 363, 495, 364, 0, 365,
	0, 366, 367, 368, 369, 370, 371, 496, 372, 373,
	0, 374, 375, 376, 377, 378, 0, 380, 381, 382,
	379, 383, 384, 385, 386, 0, 387, 0, 388, 389,
	390, 391, 497, 392, 0, 393, 397, 398, 399, 400,
	401, 402, 403, 0, 410, 411, 404, 406, 407, 408,
	405, 409, 412, 413, 0, 414, 394, 395, 415, 0,
	416, 498, 417, 418, 0, 428, 419, 420, 421, 396,
	422, 426, 427, 423, 424, 425, 499, 0, 430, 431,
	429, 0, 432, 433, 434, 435, 436, 273, 437, 0,
	500, 501, 502, 503, 0, 444, 0, 438, 439, 504,
	440, 505, 0, 441, 442, 443, 0, 445, 446, 0,
	0, 447, 448, 449, 450, 451, 453, 0, 454, 0,
	452, 455, 456, 457, 506, 507, 508, 0, 459, 458,
	509, 678, 0, 210, 0, 460, 461, 510, 462, 463,
	464, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 465, 0, 0, 0, 0, 222, 223, 224, 225,
	466, 467, 226, 468, 227, 228, 469, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 470, 471, 472,
	0, 236, 473, 0, 0, 0, 237, 238, 239, 240,
	241, 242, 0, 244, 245, 246, 243, 0, 247, 0,
	248, 249, 250, 0, 0, 251, 252, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	474, 475, 0, 259, 0, 261, 260, 0, 262, 0,
	0, 263, 264, 265, 0, 266, 0, 267, 268, 0,
	476, 269, 270, 272, 274, 271, 275, 276, 277, 278,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 279,
	280, 281, 479, 282, 283, 0, 284, 0, 285, 0,
	0, 0, 286, 287, 0, 288, 480, 0, 481, 289,
	0, 290, 291, 292, 293, 482, 483, 484, 341, 0,
	294, 295, 0, 296, 297, 299, 0, 0, 0, 0,
	298, 300, 307, 0, 0, 301, 485, 303, 302, 304,
	305, 306, 486, 0, 487, 677, 308, 0, 488, 0,
	309, 310, 311, 0, 312, 313, 0, 0, 314, 315,
	316, 317, 0, 319, 318, 0, 320, 489, 0, 321,
	322, 0, 0, 323, 324, 0, 0, 325, 326, 0,
	327, 328, 330, 332, 329, 331, 333, 335, 336, 334,
	0, 337, 338, 340, 339, 0, 0, 0, 0, 490,
	491, 342, 343, 0, 344, 345, 346, 0, 0, 348,
	349, 350, 0, 0, 351, 492, 0, 352, 0, 493,
	353, 347, 354, 355, 356, 357, 358, 359, 360, 0,
	361, 362, 494, 363, 495, 364, 0, 365, 0, 366,
	367, 368, 369, 370, 371, 496, 372, 373, 0, 374,
	375, 376, 377, 378, 0, 380, 381, 382, 379, 383,
	384, 385, 386, 0, 387, 0, 388, 389, 390, 391,
	497, 392, 0, 393, 397, 398, 399, 400, 401, 402,
	403, 0, 410, 411, 404, 406, 407, 408, 405, 409,
	412, 413, 0, 414, 394, 395, 415, 0, 416, 498,
	417, 418, 0, 428, 419, 420, 421, 396, 422, 426,
	427, 423, 424, 425, 499, 0, 430, 431, 429, 676,
	432, 433, 434, 435, 436, 273, 437, 0, 500, 501,
	502, 503, 0, 444, 0, 438, 439, 504, 440, 505,
	0, 441, 442, 443, 0, 445, 446, 0, 0, 447,
	448, 449, 450, 451, 453, 0, 454, 0, 452, 455,
	456, 457, 506, 507, 508, 210, 459, 458, 509, 0,
	0, 0, 0, 460, 461, 510, 462, 463, 464, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 465, 0, 0, 0, 0, 222, 223,
	224, 225, 466, 467, 226, 468, 227, 228, 469, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 470,
	471, 472, 0, 236, 473, 0, 0, 0, 237, 238,
	239, 240, 241, 242, 0, 244, 245, 246, 243, 0,
	247, 0, 248, 249, 250, 0, 0, 251, 252, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 474, 475, 0, 259, 0, 261, 260, 0,
	262, 0, 0, 263, 264, 265, 0, 266, 0, 267,
	268, 0, 476, 269, 270, 272, 274, 271, 275, 276,
	277, 278, 477, 478, 0, 2385, 0, 0, 0, 0,
	0, 279, 280, 281, 479, 282, 283, 0, 284, 0,
	285, 0, 0, 0, 286, 287, 0, 288, 480, 0,
	481, 289, 0, 290, 291, 292, 293, 482, 483, 484,
	341, 0, 294, 295, 0, 296, 297, 299, 0, 0,
	0, 0, 298, 300, 307, 0, 0, 301, 485, 303,
	302, 304, 305, 306, 486, 0, 487, 0, 308, 0,
	488, 0, 309, 310, 311, 0, 312, 313, 0, 0,
	314, 315, 316, 317, 0, 319, 318, 0, 320, 489,
	0, 321, 322, 0, 0, 323, 324, 0, 0, 325,
	326, 0, 327, 328, 330, 332, 329, 331, 333, 335,
	336, 334, 0, 337, 338, 340, 339, 0, 0, 0,
	0, 490, 491, 342, 343, 0, 344, 345, 346, 0,
	0, 348, 349, 350, 0, 0, 351, 492, 0, 352,
	0, 493, 353, 347, 354, 355, 356, 357, 358, 359,
	360, 0, 361, 362, 494, 363, 495, 364, 3163, 365,
	0, 366, 367, 368, 369, 370, 371, 496, 372, 373,
	0, 374, 375, 376, 377, 378, 0, 380, 381, 382,
	379, 383, 384, 385, 386, 0, 387, 0, 388, 389,
	390, 391, 497, 392, 0, 393, 397, 398, 399, 400,
	401, 402, 403, 0, 410, 411, 404, 406, 407, 408,
	405, 409, 412, 413, 0, 414, 394, 395, 415, 0,
	416, 498, 417, 418, 0, 428, 419, 420, 421, 396,
	422, 426, 427, 423, 424, 425, 499, 0, 430, 431,
	429, 0, 432, 433, 434, 435, 436, 273, 437, 0,
	500, 501, 502, 503, 0, 444, 0, 438, 439, 504,
	440, 505, 0, 441, 442, 443, 0, 445, 446, 0,
	0, 447, 448, 449, 450, 451, 453, 0, 454, 0,
	452, 455, 456, 457, 506, 507, 508, 0, 459, 458,
	509, 518, 0, 210, 0, 460, 461, 510, 462, 463,
	464, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 517, 221, 0, 0, 0,
	0, 465, 0, 0, 0, 0, 222, 223, 224, 225,
	466, 467, 226, 468, 227, 228, 469, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 470, 471, 472,
	0, 236, 473, 0, 0, 0, 237, 238, 239, 240,
	241, 242, 0, 244, 245, 246, 243, 0, 247, 0,
	248, 249, 250, 0, 0, 251, 252, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	474, 475, 0, 259, 0, 261, 260, 0, 262, 0,
	0, 263, 264, 265, 0, 266, 0, 267, 268, 0,
	476, 269, 270, 272, 274, 271, 275, 276, 277, 278,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 279,
	280, 281, 479, 282, 283, 0, 284, 0, 285, 0,
	0, 0, 286, 287, 0, 288, 480, 0, 481, 289,
	0, 290, 291, 292, 293, 482, 483, 484, 341, 0,
	294, 295, 0, 296, 297, 299, 0, 0, 0, 0,
	298, 300, 307, 0, 0, 301, 485, 303, 302, 304,
	305, 306, 486, 0, 487, 0, 308, 0, 488, 0,
	309, 310, 311, 0, 312, 313, 0, 0, 314, 315,
	316, 317, 0, 319, 318, 0, 320, 489, 0, 321,
	322, 0, 0, 323, 324, 0, 0, 325, 326, 0,
	327, 328, 330, 332, 329, 331, 333, 335, 336, 334,
	0, 337, 338, 340, 339, 0, 0, 0, 0, 490,
	491, 342, 343, 0, 344, 345, 346, 0, 0, 348,
	349, 350, 0, 0, 351, 492, 0, 352, 0, 493,
	353, 347, 354, 355, 356, 357, 358, 359, 360, 0,
	361, 362, 494, 363, 495, 516, 0, 365, 0, 366,
	367, 368, 369, 370, 371, 496, 372, 373, 0, 374,
	375, 376, 377, 378, 0, 380, 381, 382, 379, 383,
	384, 385, 386, 0, 387, 0, 388, 389, 390, 391,
	497, 392, 0, 393, 397, 398, 399, 400, 401, 402,
	403, 0, 410, 411, 404, 406, 407, 408, 405, 409,
	412, 413, 0, 414, 394, 395, 415, 0, 416, 498,
	417, 418, 0, 428, 419, 420, 421, 396, 422, 426,
	427, 423, 424, 425, 499, 0, 430, 431, 429, 0,
	432, 433, 434, 435, 436, 273, 437, 0, 500, 501,
	502, 503, 0, 444, 0, 438, 439, 504, 440, 505,
	0, 441, 442, 443, 0, 445, 446, 0, 0, 447,
	448, 449, 450, 451, 453, 0, 454, 0, 452, 455,
	456, 457, 506, 507, 508, 210, 459, 458, 509, 0,
	0, 0, 0, 460, 461, 510, 462, 463, 464, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 465, 0, 2173, 0, 0, 222, 223,
	224, 225, 466, 467, 226, 468, 227, 228, 469, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 470,
	471, 472, 0, 236, 473, 0, 0, 0, 237, 238,
	239, 240, 241, 242, 0, 244, 245, 246, 243, 0,
	247, 0, 248, 249, 250, 0, 0, 251, 252, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 474, 475, 0, 259, 0, 261, 260, 0,
	262, 0, 0, 263, 264, 265, 0, 266, 0, 267,
	268, 0, 476, 269, 270, 272, 274, 271, 275, 276,
	277, 278, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 279, 280, 281, 479, 282, 283, 0, 284, 0,
	285, 0, 0, 0, 286, 287, 0, 288, 480, 0,
	481, 289, 0, 290, 291, 292, 293, 482, 483, 484,
	341, 0, 294, 295, 0, 296, 297, 299, 0, 0,
	0, 0, 298, 300, 307, 0, 0, 301, 485, 303,
	302, 304, 305, 306, 486, 0, 487, 0, 308, 0,
	488, 0, 309, 310, 311, 0, 312, 313, 0, 0,
	314, 315, 316, 317, 0, 319, 318, 0, 320, 489,
	0, 321, 322, 0, 0, 323, 324, 0, 0, 325,
	326, 0, 327, 328, 330, 332, 329, 331, 333, 335,
	336, 334, 0, 337, 338, 340, 339, 0, 0, 0,
	0, 490, 491, 342, 343, 0, 344, 345, 346, 0,
	0, 348, 349, 350, 0, 0, 351, 492, 0, 352,
	0, 493, 353, 347, 354, 355, 356, 357, 358, 359,
	360, 0, 361, 362, 494, 363, 495, 364, 0, 365,
	0, 366, 367, 368, 369, 370, 371, 496, 372, 373,
	0, 374, 375, 376, 377, 378, 0, 380, 381, 382,
	379, 383, 384, 385, 386, 0, 387, 0, 388, 389,
	390, 391, 497, 392, 0, 393, 397, 398, 399, 400,
	401, 402, 403, 0, 410, 411, 404, 406, 407, 408,
	405, 409, 412, 413, 0, 414, 394, 395, 415, 0,
	416, 498, 417, 418, 0, 428, 419, 420, 421, 396,
	422, 426, 427, 423, 424, 425, 499, 0, 430, 431,
	429, 0, 432, 433, 434, 435, 436, 273, 437, 0,
	500, 501, 502, 503, 0, 444, 0, 438, 439, 504,
	440, 505, 0, 441, 442, 443, 0, 445, 446, 0,
	0, 447, 448, 449, 450, 451, 453, 0, 454, 0,
	452, 455, 456, 457, 506, 507, 508, 0, 459, 458,
	509, 210, 2372, 0, 0, 460, 461, 510, 462, 463,
	464, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 465,
	0, 0, 0, 0, 222, 223, 224, 225, 466, 467,
	226, 468, 227, 228, 469, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 470, 471, 472, 0, 236,
	473, 0, 0, 0, 237, 238, 239, 240, 241, 242,
	0, 244, 245, 246, 243, 0, 247, 0, 248, 249,
	250, 0, 0, 251, 252, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 474, 475,
	0, 259, 0, 261, 260, 0, 262, 0, 0, 263,
	264, 265, 0, 266, 0, 267, 268, 0, 476, 269,
	270, 272, 274, 271, 275, 276, 277, 278, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 279, 280, 281,
	479, 282, 283, 0, 284, 0, 285, 0, 0, 0,
	286, 287, 0, 288, 480, 0, 481, 289, 0, 290,
	291, 292, 293, 482, 483, 484, 341, 0, 294, 295,
	0, 296, 297, 299, 0, 0, 0, 0, 298, 300,
	307, 0, 0, 301, 485, 303, 302, 304, 305, 306,
	486, 0, 487, 0, 308, 0, 488, 0, 309, 310,
	311, 0, 312, 313, 0, 0, 314, 315, 316, 317,
	0, 319, 318, 0, 320, 489, 0, 321, 322, 0,
	0, 323, 324, 0, 0, 325, 326, 0, 327, 328,
	330, 332, 329, 331, 333, 335, 336, 334, 0, 337,
	338, 340, 339, 0, 0, 0, 0, 490, 491, 342,
	343, 0, 344, 345, 346, 0, 0, 348, 349, 350,
	0, 0, 351, 492, 0, 352, 0, 493, 353, 347,
	354, 355, 356, 357, 358, 359, 360, 0, 361, 362,
	494, 363, 495, 364, 0, 365, 0, 366, 367, 368,
	369, 370, 371, 496, 372, 373, 0, 374, 375, 376,
	377, 378, 0, 380, 381, 382, 379, 383, 384, 385,
	386, 0, 387, 0, 388, 389, 390, 391, 497, 392,
	0, 393, 397, 398, 399, 400, 401, 402, 403, 0,
	410, 411, 404, 406, 407, 408, 405, 409, 412, 413,
	0, 414, 394, 395, 415, 0, 416, 498, 417, 418,
	0, 428, 419, 420, 421, 396, 422, 426, 427, 423,
	424, 425, 499, 0, 430, 431, 429, 0, 432, 433,
	434, 435, 436, 273, 437, 0, 500, 501, 502, 503,
	0, 444, 0, 438, 439, 504, 440, 505, 0, 441,
	442, 443, 0, 445, 446, 0, 0, 447, 448, 449,
	450, 451, 453, 0, 454, 0, 452, 455, 456, 457,
	506, 507, 508, 210, 459, 458, 509, 0, 0, 0,
	0, 460, 461, 510, 462, 463, 464, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 465, 0, 0, 0, 0, 222, 223, 224, 225,
	466, 467, 226, 468, 227, 228, 469, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 470, 471, 472,
	0, 236, 473, 0, 0, 0, 237, 238, 239, 240,
	241, 242, 0, 244, 245, 246, 243, 0, 247, 0,
	248, 249, 250, 0, 0, 251, 252, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	474, 475, 2963, 259, 0, 261, 260, 0, 262, 0,
	0, 263, 264, 265, 0, 266, 0, 267, 268, 0,
	476, 269, 270, 272, 274, 271, 275, 276, 277, 278,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 279,
	280, 281, 479, 282, 283, 0, 284, 0, 285, 0,
	0, 0, 286, 287, 0, 288, 480, 0, 481, 289,
	0, 290, 291, 292, 293, 482, 483, 484, 341, 0,
	294, 295, 0, 296, 297, 299, 0, 0, 0, 0,
	298, 300, 307, 0, 0, 301, 485, 303, 302, 304,
	305, 306, 486, 0, 487, 0, 308, 0, 488, 0,
	309, 310, 311, 0, 312, 313, 0, 0, 314, 315,
	316, 317, 0, 319, 318, 0, 320, 489, 0, 321,
	322, 0, 0, 323, 324, 0, 0, 325, 326, 0,
	327, 328, 330, 332, 329, 331, 333, 335, 336, 334,
	0, 337, 338, 340, 339, 0, 0, 0, 0, 490,
	491, 342, 343, 0, 344, 345, 346, 0, 0, 348,
	349, 350, 0, 0, 351, 492, 0, 352, 0, 493,
	353, 347, 354, 355, 356, 357, 358, 359, 360, 0,
	361, 362, 494, 363, 495, 364, 0, 365, 0, 366,
	367, 368, 369, 370, 371, 496, 372, 373, 0, 374,
	375, 376, 377, 378, 0, 380, 381, 382, 379, 383,
	384, 385, 386, 0, 387, 0, 388, 389, 390, 391,
	497, 392, 0, 393, 397, 398, 399, 400, 401, 402,
	403, 0, 410, 411, 404, 406, 407, 408, 405, 409,
	412, 413, 0, 414, 394, 395, 415, 0, 416, 498,
	417, 418, 0, 428, 419, 420, 421, 396, 422, 426,
	427, 423, 424, 425, 499, 0, 430, 431, 429, 0,
	432, 433, 434, 435, 436, 273, 437, 0, 500, 501,
	502, 503, 0, 444, 0, 438, 439, 504, 440, 505,
	0, 441, 442, 443, 0, 445, 446, 0, 0, 447,
	448, 449, 450, 451, 453, 0, 454, 0, 452, 455,
	456, 457, 506, 507, 508, 0, 459, 458, 509, 210,
	2372, 0, 0, 460, 461, 510, 462, 463, 464, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 465, 0, 0,
	0, 0, 222, 223, 224, 225, 466, 467, 226, 468,
	227, 228, 469, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 470, 471, 472, 0, 236, 473, 0,
	0, 0, 237, 238, 239, 240, 241, 242, 0, 244,
	245, 246, 243, 0, 247, 0, 248, 249, 250, 0,
	0, 251, 252, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 474, 475, 0, 259,
	0, 261, 260, 0, 262, 0, 0, 263, 264, 265,
	0, 266, 0, 267, 268, 0, 476, 269, 270, 272,
	274, 271, 275, 276, 277, 278, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 479, 282,
	283, 0, 284, 0, 285, 0, 0, 0, 286, 287,
	0, 288, 480, 0, 481, 289, 0, 290, 291, 292,
	293, 482, 483, 484, 341, 0, 294, 295, 0, 296,
	297, 299, 0, 0, 0, 0, 298, 300, 307, 0,
	0, 301, 485, 303, 302, 304, 305, 306, 486, 0,
	487, 0, 308, 0, 488, 0, 309, 310, 311, 0,
	312, 313, 0, 0, 314, 315, 316, 317, 0, 319,
	318, 0, 320, 489, 0, 321, 322, 0, 0, 323,
	324, 0, 0, 325, 326, 0, 327, 328, 330, 332,
	329, 331, 333, 335, 336, 334, 0, 337, 338, 340,
	339, 0, 0, 0, 0, 490, 491, 342, 343, 0,
	344, 345, 346, 0, 0, 348, 349, 2369, 0, 0,
	351, 492, 0, 352, 0, 493, 353, 347, 354, 355,
	356, 357, 358, 359, 360, 0, 361, 362, 494, 363,
	495, 364, 0, 365, 0, 366, 367, 368, 369, 370,
	371, 496, 372, 373, 0, 374, 375, 376, 377, 378,
	0, 380, 381, 382, 379, 383, 384, 385, 386, 0,
	387, 0, 388, 389, 390, 391, 497, 392, 0, 393,
	397, 398, 399, 400, 401, 402, 403, 0, 410, 411,
	404, 406, 407, 408, 405, 409, 412, 413, 0, 414,
	394, 395, 415, 0, 416, 498, 417, 418, 0, 428,
	419, 420, 421, 396, 422, 426, 427, 423, 424, 425,
	499, 0, 430, 431, 429, 0, 432, 433, 434, 435,
	436, 273, 437, 0, 500, 501, 502, 503, 0, 444,
	0, 438, 439, 504, 440, 505, 0, 441, 442, 443,
	0, 445, 446, 0, 0, 447, 448, 449, 450, 451,
	453, 0, 454, 0, 452, 455, 456, 457, 506, 507,
	508, 210, 459, 458, 509, 0, 0, 0, 0, 460,
	461, 510, 462, 463, 464, 0, 0, 0, 216, 217,
	218, 219, 220, 1881, 221, 0, 0, 0, 0, 465,
	0, 0, 0, 0, 222, 223, 224, 225, 466, 467,
	226, 468, 227, 228, 469, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 470, 471, 472, 0, 236,
	473, 0, 0, 0, 237, 238, 239, 240, 241, 242,
	0, 244, 245, 246, 243, 0, 247, 0, 248, 249,
	250, 0, 0, 251, 252, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 474, 475,
	0, 259, 0, 261, 260, 0, 262, 0, 0, 263,
	264, 265, 0, 266, 0, 267, 268, 0, 476, 269,
	270, 272, 274, 271, 275, 276, 277, 278, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 279, 280, 281,
	479, 282, 283, 0, 284, 0, 285, 0, 0, 0,
	286, 287, 0, 288, 480, 0, 481, 289, 0, 290,
	291, 292, 293, 482, 483, 484, 341, 0, 294, 295,
	0, 296, 297, 299, 0, 0, 0, 0, 298, 300,
	307, 0, 0, 301, 485, 303, 302, 304, 305, 306,
	486, 0, 487, 0, 308, 0, 488, 0, 309, 310,
	311, 0, 312, 313, 0, 0, 314, 315, 316, 317,
	0, 319, 318, 0, 320, 489, 0, 321, 322, 0,
	0, 323, 324, 0, 0, 325, 326, 0, 327, 328,
	330, 332, 329, 331, 333, 335, 336, 334, 0, 337,
	338, 340, 339, 0, 0, 0, 0, 490, 491, 342,
	343, 0, 344, 345, 346, 0, 0, 348, 349, 350,
	0, 0, 351, 492, 0, 352, 0, 493, 353, 347,
	354, 355, 356, 357, 358, 359, 360, 0, 361, 362,
	494, 363, 495, 364, 0, 365, 0, 366, 367, 368,
	369, 370, 371, 496, 372, 373, 0, 374, 375, 376,
	377, 378, 0, 380, 381, 382, 379, 383, 384, 385,
	386, 0, 387, 0, 388, 389, 390, 391, 497, 392,
	0, 393, 397, 398, 399, 400, 401, 402, 403, 0,
	410, 411, 404, 406, 407, 408, 405, 409, 412, 413,
	0, 414, 394, 395, 415, 0, 416, 498, 417, 418,
	0, 428, 419, 420, 421, 396, 422, 426, 427, 423,
	424, 425, 499, 0, 430, 431, 429, 0, 432, 433,
	434, 435, 436, 273, 437, 0, 500, 501, 502, 503,
	0, 444, 0, 438, 439, 504, 440, 505, 0, 441,
	442, 443, 0, 445, 446, 0, 0, 447, 448, 449,
	450, 451, 453, 0, 454, 0, 452, 455, 456, 457,
	506, 507, 508, 0, 459, 458, 509, 1872, 0, 210,
	0, 460, 461, 510, 462, 463, 464, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 465, 0, 0,
	0, 0, 222, 223, 224, 225, 466, 467, 226, 468,
	227, 228, 469, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 470, 471, 472, 0, 236, 473, 0,
	0, 0, 237, 238, 239, 240, 241, 242, 0, 244,
	245, 246, 243, 0, 247, 0, 248, 249, 250, 0,
	0, 251, 252, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 474, 475, 0, 259,
	0, 261, 260, 0, 262, 0, 0, 263, 264, 265,
	0, 266, 0, 267, 268, 0, 476, 269, 270, 272,
	274, 271, 275, 276, 277, 278, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 479, 282,
	283, 0, 284, 0, 285, 0, 0, 0, 286, 287,
	0, 288, 480, 0, 481, 289, 0, 290, 291, 292,
	293, 482, 483, 484, 341, 0, 294, 295, 0, 296,
	297, 299, 0, 0, 0, 0, 298, 300, 307, 0,
	0, 301, 485, 303, 302, 304, 305, 306, 486, 0,
	487, 0, 308, 0, 488, 0, 309, 310, 311, 0,
	312, 313, 0, 0, 314, 315, 316, 317, 0, 319,
	318, 0, 320, 489, 0, 321, 322, 0, 0, 323,
	324, 0, 0, 325, 326, 0, 327, 328, 330, 332,
	329, 331, 333, 335, 336, 334, 0, 337, 338, 340,
	339, 0, 0, 0, 0, 490, 491, 342, 343, 0,
	344, 345, 346, 0, 0, 348, 349, 350, 0, 0,
	351, 492, 0, 352, 0, 493, 353, 347, 354, 355,
	356, 357, 358, 359, 360, 0, 361, 362, 494, 363,
	495, 364, 0, 365, 0, 366, 367, 368, 369, 370,
	371, 496, 372, 373, 0, 374, 375, 376, 377, 378,
	0, 380, 381, 382, 379, 383, 384, 385, 386, 0,
	387, 0, 388, 389, 390, 391, 497, 392, 0, 393,
	397, 398, 399, 400, 401, 402, 403, 0, 410, 411,
	404, 406, 407, 408, 405, 409, 412, 413, 0, 414,
	394, 395, 415, 0, 416, 498, 417, 418, 0, 428,
	419, 420, 421, 396, 422, 426, 427, 423, 424, 425,
	499, 0, 430, 431, 429, 0, 432, 433, 434, 435,
	436, 273, 437, 0, 500, 501, 502, 503, 0, 444,
	0, 438, 439, 504, 440, 505, 0, 441, 442, 443,
	0, 445, 446, 0, 0, 447, 448, 449, 450, 451,
	453, 0, 454, 0, 452, 455, 456, 457, 506, 507,
	508, 0, 459, 458, 509, 559, 0, 210, 0, 460,
	461, 510, 462, 463, 464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 465, 0, 0, 0, 0,
	222, 223, 224, 225, 466, 467, 226, 468, 227, 228,
	469, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 470, 471, 1030, 0, 236, 473, 0, 0, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 0, 247, 0, 248, 249, 250, 0, 0, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 474, 475, 0, 259, 0, 261,
	260, 0, 262, 0, 0, 263, 264, 265, 0, 266,
	0, 267, 268, 0, 476, 269, 270, 272, 274, 271,
	275, 276, 277, 278, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 479, 282, 283, 0,
	284, 0, 285, 0, 0, 0, 286, 287, 0, 288,
	480, 0, 481, 289, 0, 290, 291, 292, 293, 482,
	483, 484, 341, 0, 294, 295, 0, 296, 297, 299,
	0, 0, 0, 0, 298, 300, 307, 0, 0, 301,
	485, 303, 302, 304, 305, 306, 486, 0, 487, 0,
	308, 0, 488, 0, 309, 310, 311, 0, 312, 313,
	0, 0, 314, 315, 316, 317, 0, 319, 318, 0,
	320, 489, 0, 321, 322, 0, 0, 323, 324, 0,
	0, 325, 326, 0, 327, 328, 330, 332, 329, 331,
	333, 335, 336, 560, 0, 337, 338, 340, 339, 0,
	0, 0, 0, 490, 491, 342, 343, 0, 344, 345,
	346, 0, 0, 348, 349, 350, 0, 0, 351, 492,
	0, 352, 0, 493, 353, 347, 354, 355, 356, 357,
	358, 359, 360, 0, 361, 362, 494, 363, 495, 364,
	0, 365, 0, 366, 367, 368, 369, 370, 371, 496,
	372, 373, 0, 374, 375, 376, 377, 378, 0, 380,
	381, 382, 379, 383, 384, 385, 386, 0, 387, 0,
	388, 389, 390, 391, 497, 392, 0, 393, 397, 398,
	556, 400, 401, 402, 403, 0, 410, 411, 404, 406,
	407, 408, 405, 409, 412, 413, 0, 414, 394, 395,
	415, 0, 416, 498, 417, 418, 0, 428, 419, 420,
	421, 396, 422, 426, 427, 423, 424, 425, 499, 0,
	430, 431, 429, 0, 432, 433, 434, 435, 436, 273,
	437, 0, 555, 501, 502, 503, 0, 444, 0, 438,
	439, 504, 440, 505, 0, 441, 442, 443, 0, 445,
	446, 0, 0, 447, 448, 449, 450, 451, 453, 0,
	454, 0, 452, 455, 456, 457, 506, 507, 508, 0,
	459, 458, 509, 1820, 0, 210, 0, 460, 461, 510,
	462, 463, 464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 465, 0, 0, 0, 0, 222, 223,
	224, 225, 466, 467, 226, 468, 227, 228, 469, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 470,
	471, 472, 0, 236, 473, 0, 0, 0, 237, 238,
	239, 240, 241, 242, 0, 244, 245, 246, 243, 0,
	247, 0, 248, 249, 250, 0, 0, 251, 252, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 474, 475, 0, 259, 0, 261, 260, 0,
	262, 0, 0, 263, 264, 265, 0, 266, 0, 267,
	268, 0, 476, 269, 270, 272, 274, 271, 275, 276,
	277, 278, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 279, 280, 281, 479, 282, 283, 0, 284, 0,
	285, 0, 0, 0, 286, 287, 0, 288, 480, 0,
	481, 289, 0, 290, 291, 292, 293, 1819, 483, 484,
	341, 0, 294, 295, 0, 296, 297, 299, 0, 0,
	0, 0, 298, 300, 307, 0, 0, 301, 485, 303,
	302, 304, 305, 306, 486, 0, 487, 0, 308, 0,
	488, 0, 309, 310, 311, 0, 312, 313, 0, 0,
	314, 315, 316, 317, 0, 319, 318, 0, 320, 489,
	0, 321, 322, 0, 0, 323, 324, 0, 0, 325,
	326, 0, 327, 328, 330, 332, 329, 331, 333, 335,
	336, 334, 0, 337, 338, 340, 339, 0, 0, 0,
	0, 490, 491, 342, 343, 0, 344, 345, 346, 0,
	0, 348, 349, 350, 0, 0, 351, 492, 0, 352,
	0, 493, 353, 347, 354, 355, 356, 357, 358, 359,
	360, 0, 361, 362, 494, 363, 495, 364, 0, 365,
	0, 366, 367, 368, 369, 370, 371, 496, 372, 373,
	0, 374, 375, 376, 377, 378, 0, 380, 381, 382,
	379, 383, 384, 385, 386, 0, 387, 0, 388, 389,
	390, 391, 497, 392, 0, 393, 397, 398, 399, 400,
	401, 402, 403, 0, 410, 411, 404, 406, 407, 408,
	405, 409, 412, 413, 0, 414, 394, 395, 415, 0,
	416, 498, 417, 418, 0, 428, 419, 420, 421, 396,
	422, 426, 427, 423, 424, 425, 499, 0, 430, 431,
	429, 0, 432, 433, 434, 435, 436, 273, 437, 0,
	500, 501, 502, 503, 0, 444, 0, 438, 439, 504,
	440, 505, 0, 441, 442, 443, 0, 445, 446, 0,
	0, 447, 448, 449, 450, 451, 453, 0, 454, 0,
	452, 455, 456, 457, 506, 507, 508, 0, 459, 458,
	509, 559, 0, 210, 0, 460, 461, 510, 462, 463,
	464, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 465, 0, 0, 0, 0, 222, 223, 224, 225,
	466, 467, 226, 468, 227, 228, 469, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 470, 471, 472,
	0, 549, 473, 0, 0, 0, 237, 238, 239, 240,
	241, 242, 0, 244, 245, 246, 243, 0, 247, 0,
	248, 249, 250, 0, 0, 251, 252, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	474, 475, 0, 259, 0, 261, 260, 0, 262, 0,
	0, 263, 264, 265, 0, 266, 0, 267, 268, 0,
	476, 269, 270, 272, 274, 271, 275, 276, 277, 278,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 279,
	280, 281, 479, 282, 283, 0, 284, 0, 285, 0,
	0, 0, 286, 287, 0, 288, 480, 0, 481, 289,
	0, 290, 291, 292, 293, 482, 483, 484, 341, 0,
	294, 295, 0, 296, 297, 299, 0, 0, 0, 0,
	298, 300, 307, 0, 0, 301, 485, 303, 302, 304,
	305, 306, 486, 0, 487, 0, 308, 0, 488, 0,
	309, 310, 311, 0, 312, 313, 0, 0, 314, 315,
	316, 317, 0, 319, 318, 0, 320, 489, 0, 321,
	322, 0, 0, 323, 324, 0, 0, 325, 326, 0,
	327, 328, 330, 332, 329, 331, 333, 335, 336, 560,
	0, 337, 338, 340, 339, 0, 0, 0, 0, 490,
	491, 342, 343, 0, 344, 345, 346, 0, 0, 348,
	349, 350, 0, 0, 351, 492, 0, 352, 0, 493,
	353, 347, 354, 355, 356, 357, 358, 359, 360, 0,
	361, 362, 494, 363, 495, 364, 0, 365, 0, 366,
	367, 368, 369, 370, 371, 496, 372, 373, 0, 374,
	375, 376, 377, 378, 0, 380, 381, 382, 379, 383,
	384, 385, 386, 0, 387, 0, 388, 389, 390, 391,
	497, 392, 0, 393, 397, 398, 556, 400, 401, 402,
	403, 0, 410, 411, 404, 406, 407, 408, 405, 409,
	1309, 413, 0, 414, 394, 395, 415, 0, 416, 498,
	417, 418, 0, 428, 419, 420, 421, 396, 422, 426,
	427, 423, 424, 425, 499, 0, 430, 431, 429, 0,
	432, 433, 434, 435, 436, 273, 437, 0, 555, 501,
	502, 503, 0, 444, 0, 438, 439, 504, 440, 505,
	0, 441, 442, 443, 0, 445, 446, 0, 0, 447,
	448, 449, 450, 451, 453, 0, 454, 0, 452, 455,
	456, 457, 506, 507, 508, 0, 459, 458, 509, 1294,
	0, 210, 0, 460, 461, 510, 462, 463, 464, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 465,
	0, 0, 0, 0, 222, 223, 224, 225, 466, 467,
	226, 468, 227, 228, 469, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 470, 471, 472, 0, 236,
	473, 0, 0, 0, 237, 238, 239, 240, 241, 242,
	0, 244, 245, 246, 243, 0, 247, 0, 248, 249,
	250, 0, 0, 251, 252, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 474, 475,
	0, 259, 0, 261, 260, 0, 262, 0, 0, 263,
	264, 265, 0, 266, 0, 267, 268, 0, 476, 269,
	270, 272, 274, 271, 275, 276, 277, 278, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 279, 280, 281,
	479, 282, 283, 0, 284, 0, 285, 0, 0, 0,
	286, 287, 0, 288, 480, 0, 481, 289, 0, 290,
	291, 292, 293, 1293, 483, 484, 341, 0, 294, 295,
	0, 296, 297, 299, 0, 0, 0, 0, 298, 300,
	307, 0, 0, 301, 485, 303, 302, 304, 305, 306,
	486, 0, 487, 0, 308, 0, 488, 0, 309, 310,
	311, 0, 312, 313, 0, 0, 314, 315, 316, 317,
	0, 319, 318, 0, 320, 489, 0, 321, 322, 0,
	0, 323, 324, 0, 0, 325, 326, 0, 327, 328,
	330, 332, 329, 331, 333, 335, 336, 334, 0, 337,
	338, 340, 339, 0, 0, 0, 0, 490, 491, 342,
	343, 0, 344, 345, 346, 0, 0, 348, 349, 350,
	0, 0, 351, 492, 0, 352, 0, 493, 353, 347,
	354, 355, 356, 357, 358, 359, 360, 0, 361, 362,
	494, 363, 495, 364, 0, 365, 0, 366, 367, 368,
	369, 370, 371, 496, 372, 373, 0, 374, 375, 376,
	377, 378, 0, 380, 381, 382, 379, 383, 384, 385,
	386, 0, 387, 0, 388, 389, 390, 391, 497, 392,
	0, 393, 397, 398, 399, 400, 401, 402, 403, 0,
	410, 411, 404, 406, 407, 408, 405, 409, 412, 413,
	0, 414, 394, 395, 415, 0, 416, 498, 417, 418,
	0, 428, 419, 420, 421, 396, 422, 426, 427, 423,
	424, 425, 499, 0, 430, 431, 429, 0, 432, 433,
	434, 435, 436, 273, 437, 0, 500, 501, 502, 503,
	0, 444, 0, 438, 439, 504, 440, 505, 0, 441,
	442, 443, 0, 445, 446, 0, 0, 447, 448, 449,
	450, 451, 453, 0, 454, 0, 452, 455, 456, 457,
	506, 507, 508, 0, 459, 458, 509, 1243, 0, 210,
	0, 460, 461, 510, 462, 463, 464, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 465, 0, 0,
	0, 0, 222, 223, 224, 225, 466, 467, 226, 468,
	227, 228, 469, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 470, 471, 472, 0, 236, 473, 0,
	0, 0, 237, 238, 239, 240, 241, 242, 0, 244,
	245, 246, 243, 0, 247, 0, 248, 249, 250, 0,
	0, 251, 252, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 474, 475, 0, 259,
	0, 261, 260, 0, 262, 0, 0, 263, 264, 265,
	0, 266, 0, 267, 268, 0, 476, 269, 270, 272,
	274, 271, 275, 276, 277, 278, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 479, 282,
	283, 0, 284, 0, 285, 0, 0, 0, 286, 287,
	0, 288, 480, 0, 481, 289, 0, 290, 291, 292,
	293, 1242, 483, 484, 341, 0, 294, 295, 0, 296,
	297, 299, 0, 0, 0, 0, 298, 300, 307, 0,
	0, 301, 485, 303, 302, 304, 305, 306, 486, 0,
	487, 0, 308, 0, 488, 0, 309, 310, 311, 0,
	312, 313, 0, 0, 314, 315, 316, 317, 0, 319,
	318, 0, 320, 489, 0, 321, 322, 0, 0, 323,
	324, 0, 0, 325, 326, 0, 327, 328, 330, 332,
	329, 331, 333, 335, 336, 334, 0, 337, 338, 340,
	339, 0, 0, 0, 0, 490, 491, 342, 343, 0,
	344, 345, 346, 0, 0, 348, 349, 350, 0, 0,
	351, 492, 0, 352, 0, 493, 353, 347, 354, 355,
	356, 357, 358, 359, 360, 0, 361, 362, 494, 363,
	495, 364, 0, 365, 0, 366, 367, 368, 369, 370,
	371, 496, 372, 373, 0, 374, 375, 376, 377, 378,
	0, 380, 381, 382, 379, 383, 384, 385, 386, 0,
	387, 0, 388, 389, 390, 391, 497, 392, 0, 393,
	397, 398, 399, 400, 401, 402, 403, 0, 410, 411,
	404, 406, 407, 408, 405, 409, 412, 413, 0, 414,
	394, 395, 415, 0, 416, 498, 417, 418, 0, 428,
	419, 420, 421, 396, 422, 426, 427, 423, 424, 425,
	499, 0, 430, 431, 429, 0, 432, 433, 434, 435,
	436, 273, 437, 0, 500, 501, 502, 503, 0, 444,
	0, 438, 439, 504, 440, 505, 0, 441, 442, 443,
	0, 445, 446, 0, 0, 447, 448, 449, 450, 451,
	453, 0, 454, 0, 452, 455, 456, 457, 506, 507,
	508, 0, 459, 458, 509, 1227, 0, 210, 0, 460,
	461, 510, 462, 463, 464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 465, 0, 0, 0, 0,
	222, 223, 224, 225, 466, 467, 226, 468, 227, 228,
	469, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 470, 471, 472, 0, 236, 473, 0, 0, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 0, 247, 0, 248, 249, 250, 0, 0, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 474, 475, 0, 259, 0, 261,
	260, 0, 262, 0, 0, 263, 264, 265, 0, 266,
	0, 267, 268, 0, 476, 269, 270, 272, 274, 271,
	275, 276, 277, 278, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 479, 282, 283, 0,
	284, 0, 285, 0, 0, 0, 286, 287, 0, 288,
	480, 0, 481, 289, 0, 290, 291, 292, 293, 482,
	483, 484, 341, 0, 294, 295, 0, 296, 297, 299,
	0, 0, 0, 0, 298, 300, 307, 0, 0, 301,
	485, 303, 302, 304, 305, 306, 486, 0, 487, 0,
	308, 0, 488, 0, 309, 310, 311, 0, 312, 313,
	0, 0, 314, 315, 316, 317, 0, 319, 318, 0,
	320, 489, 0, 321, 322, 0, 0, 323, 324, 0,
	0, 325, 326, 0, 327, 328, 330, 332, 329, 331,
	333, 335, 336, 334, 0, 337, 338, 340, 339, 0,
	0, 0, 0, 490, 491, 342, 343, 0, 344, 345,
	346, 0, 0, 348, 349, 350, 0, 0, 351, 492,
	0, 352, 0, 493, 353, 347, 354, 355, 356, 357,
	358, 359, 360, 0, 361, 362, 494, 363, 495, 364,
	0, 365, 0, 366, 367, 368, 369, 370, 371, 496,
	372, 373, 0, 374, 375, 376, 377, 378, 0, 380,
	381, 382, 379, 383, 384, 385, 386, 0, 387, 0,
	388, 389, 390, 391, 497, 392, 0, 393, 397, 398,
	399, 400, 401, 402, 403, 0, 410, 411, 404, 406,
	407, 408, 405, 409, 412, 413, 0, 414, 394, 395,
	415, 0, 416, 498, 417, 418, 0, 428, 419, 420,
	421, 396, 422, 426, 427, 423, 424, 425, 499, 0,
	430, 431, 429, 0, 432, 433, 434, 435, 436, 273,
	437, 0, 500, 501, 502, 503, 0, 444, 0, 438,
	439, 504, 440, 505, 0, 441, 442, 443, 0, 445,
	446, 0, 0, 447, 448, 449, 450, 451, 453, 0,
	454, 0, 452, 455, 456, 457, 506, 507, 508, 0,
	459, 458, 509, 1164, 0, 210, 0, 460, 461, 510,
	462, 463, 464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 465, 0, 0, 0, 0, 222, 223,
	224, 225, 466, 467, 226, 468, 227, 228, 469, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 470,
	471, 472, 0, 236, 473, 0, 0, 0, 237, 238,
	239, 240, 241, 242, 0, 244, 245, 246, 243, 0,
	247, 0, 248, 249, 250, 0, 0, 251, 252, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 474, 475, 0, 259, 0, 261, 260, 0,
	262, 0, 0, 263, 264, 265, 0, 266, 0, 267,
	268, 0, 476, 269, 270, 272, 274, 271, 275, 276,
	277, 278, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 279, 280, 281, 479, 282, 283, 0, 284, 0,
	285, 0, 0, 0, 286, 287, 0, 288, 480, 0,
	481, 289, 0, 290, 291, 292, 293, 482, 483, 484,
	341, 0, 294, 295, 0, 296, 297, 299, 0, 0,
	0, 0, 298, 300, 307, 0, 0, 301, 485, 303,
	302, 304, 305, 306, 486, 0, 487, 0, 308, 0,
	488, 0, 309, 310, 311, 0, 312, 313, 0, 0,
	314, 315, 316, 317, 0, 319, 318, 0, 320, 489,
	0, 321, 322, 0, 0, 323, 324, 0, 0, 325,
	326, 0, 327, 328, 330, 332, 329, 331, 333, 335,
	336, 334, 0, 337, 338, 340, 339, 0, 0, 0,
	0, 490, 491, 342, 343, 0, 344, 345, 346, 0,
	0, 348, 349, 350, 0, 0, 351, 492, 0, 352,
	0, 493, 353, 347, 354, 355, 356, 357, 358, 359,
	360, 0, 361, 362, 494, 363, 495, 364, 0, 365,
	0, 366, 367, 368, 369, 370, 371, 496, 372, 373,
	0, 374, 375, 376, 377, 378, 0, 380, 381, 382,
	379, 383, 384, 385, 386, 0, 387, 0, 388, 389,
	390, 391, 497, 392, 0, 393, 397, 398, 399, 400,
	401, 402, 403, 0, 410, 411, 404, 406, 407, 408,
	405, 409, 412, 413, 0, 414, 394, 395, 415, 0,
	416, 498, 417, 418, 0, 428, 419, 420, 421, 396,
	422, 426, 427, 423, 424, 425, 499, 0, 430, 431,
	429, 0, 432, 433, 434, 435, 436, 273, 437, 0,
	500, 501, 502, 503, 0, 444, 0, 438, 439, 504,
	440, 505, 0, 441, 442, 443, 0, 445, 446, 0,
	0, 447, 448, 449, 450, 451, 453, 0, 454, 0,
	452, 455, 456, 457, 506, 507, 508, 0, 459, 458,
	509, 559, 0, 210, 0, 460, 461, 510, 462, 463,
	464, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 465, 0, 0, 0, 0, 222, 223, 224, 225,
	466, 467, 226, 468, 227, 228, 469, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 470, 471, 1030,
	0, 236, 473, 0, 0, 0, 237, 238, 239, 240,
	241, 242, 0, 244, 245, 246, 243, 0, 247, 0,
	248, 249, 250, 0, 0, 251, 252, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	474, 475, 0, 259, 0, 261, 260, 0, 262, 0,
	0, 263, 264, 265, 0, 266, 0, 267, 268, 0,
	476, 269, 270, 272, 274, 271, 275, 276, 277, 278,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 279,
	280, 281, 479, 282, 283, 0, 284, 0, 285, 0,
	0, 0, 286, 287, 0, 288, 480, 0, 481, 289,
	0, 290, 291, 292, 293, 482, 483, 484, 341, 0,
	294, 295, 0, 296, 297, 299, 0, 0, 0, 0,
	298, 300, 307, 0, 0, 301, 485, 303, 302, 304,
	305, 306, 486, 0, 487, 0, 308, 0, 488, 0,
	309, 310, 311, 0, 312, 313, 0, 0, 314, 315,
	316, 317, 0, 319, 318, 0, 320, 489, 0, 321,
	322, 0, 0, 323, 324, 0, 0, 325, 326, 0,
	327, 328, 330, 332, 329, 331, 333, 335, 336, 560,
	0, 337, 338, 340, 339, 0, 0, 0, 0, 490,
	491, 342, 343, 0, 344, 345, 346, 0, 0, 348,
	349, 350, 0, 0, 351, 492, 0, 352, 0, 493,
	353, 347, 354, 355, 356, 357, 358, 359, 360, 0,
	361, 362, 494, 363, 495, 364, 0, 365, 0, 366,
	367, 368, 369, 370, 371, 496, 372, 373, 0, 374,
	375, 376, 377, 378, 0, 380, 381, 382, 379, 383,
	384, 385, 386, 0, 387, 0, 388, 389, 390, 391,
	497, 392, 0, 393, 397, 398, 556, 400, 401, 402,
	403, 0, 410, 411, 404, 406, 407, 408, 405, 409,
	412, 413, 0, 414, 394, 395, 415, 0, 416, 498,
	417, 418, 0, 428, 419, 420, 421, 396, 422, 426,
	427, 423, 424, 425, 499, 0, 430, 431, 429, 0,
	432, 433, 434, 435, 436, 273, 437, 0, 555, 501,
	502, 503, 0, 444, 0, 438, 1031, 504, 440, 505,
	0, 441, 442, 443, 0, 445, 446, 0, 0, 447,
	448, 449, 450, 451, 453, 0, 454, 0, 452, 455,
	456, 457, 506, 507, 508, 210, 459, 458, 509, 0,
	0, 0, 0, 460, 461, 510, 462, 463, 464, 0,
	0, 0, 216, 217, 218, 219, 220, 1014, 221, 0,
	0, 0, 0, 465, 0, 0, 0, 0, 222, 223,
	224, 225, 466, 467, 226, 468, 227, 228, 469, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 470,
	471, 472, 0, 236, 473, 0, 0, 0, 237, 238,
	239, 240, 241, 242, 0, 244, 245, 246, 243, 0,
	247, 0, 248, 249, 250, 0, 0, 251, 252, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 474, 475, 0, 259, 0, 261, 260, 0,
	262, 0, 0, 263, 264, 265, 0, 266, 0, 267,
	268, 0, 476, 269, 270, 272, 274, 271, 275, 276,
	277, 278, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 279, 280, 281, 479, 282, 283, 0, 284, 0,
	285, 0, 0, 0, 286, 287, 0, 288, 480, 0,
	481, 289, 0, 290, 291, 292, 293, 482, 483, 484,
	341, 0, 294, 295, 0, 296, 297, 299, 0, 0,
	0, 0, 298, 300, 307, 0, 0, 301, 485, 303,
	302, 304, 305, 306, 486, 0, 487, 0, 308, 0,
	488, 0, 309, 310, 311, 0, 312, 313, 0, 0,
	314, 315, 316, 317, 0, 319, 318, 0, 320, 489,
	0, 321, 322, 0, 0, 323, 324, 0, 0, 325,
	326, 0, 327, 328, 330, 332, 329, 331, 333, 335,
	336, 334, 0, 337, 338, 340, 339, 0, 0, 0,
	0, 490, 491, 342, 343, 0, 344, 345, 346, 0,
	0, 348, 349, 350, 0, 0, 351, 492, 0, 352,
	0, 493, 353, 347, 354, 355, 356, 357, 358, 359,
	360, 0, 361, 362, 494, 363, 495, 364, 0, 365,
	0, 366, 367, 368, 369, 370, 371, 496, 372, 373,
	0, 374, 375, 376, 377, 378, 0, 380, 381, 382,
	379, 383, 384, 385, 386, 0, 387, 0, 388, 389,
	390, 391, 497, 392, 0, 393, 397, 398, 399, 400,
	401, 402, 403, 0, 410, 411, 404, 406, 407, 408,
	405, 409, 412, 413, 0, 414, 394, 395, 415, 0,
	416, 498, 417, 418, 0, 428, 419, 420, 421, 396,
	422, 426, 427, 423, 424, 425, 499, 0, 430, 431,
	429, 0, 432, 433, 434, 435, 436, 273, 437, 0,
	500, 501, 502, 503, 0, 444, 0, 438, 439, 504,
	440, 505, 0, 441, 442, 443, 0, 445, 446, 0,
	0, 447, 448, 449, 450, 451, 453, 0, 454, 0,
	452, 455, 456, 457, 506, 507, 508, 0, 459, 458,
	509, 559, 0, 210, 0, 460, 461, 510, 462, 463,
	464, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 465, 0, 0, 0, 0, 222, 223, 224, 225,
	466, 467, 226, 468, 227, 228, 469, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 470, 471, 472,
	0, 549, 473, 0, 0, 0, 237, 238, 239, 240,
	241, 242, 0, 244, 245, 246, 243, 0, 547, 0,
	248, 249, 250, 0, 0, 251, 252, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	474, 475, 0, 259, 0, 261, 260, 0, 262, 0,
	0, 263, 264, 265, 0, 266, 0, 267, 268, 0,
	476, 269, 270, 272, 274, 271, 275, 276, 277, 278,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 279,
	280, 281, 479, 282, 283, 0, 284, 0, 285, 0,
	0, 0, 286, 287, 0, 288, 480, 0, 481, 289,
	0, 290, 291, 292, 293, 482, 483, 484, 341, 0,
	294, 295, 0, 296, 297, 299, 0, 0, 0, 0,
	298, 300, 307, 0, 0, 301, 485, 303, 302, 304,
	305, 306, 486, 0, 487, 0, 308, 0, 488, 0,
	309, 310, 311, 0, 312, 313, 0, 0, 314, 315,
	316, 317, 0, 319, 318, 0, 320, 489, 0, 321,
	322, 0, 0, 323, 548, 0, 0, 325, 326, 0,
	327, 328, 330, 332, 329, 331, 333, 335, 336, 560,
	0, 337, 338, 340, 339, 0, 0, 0, 0, 490,
	491, 342, 343, 0, 344, 345, 346, 0, 0, 348,
	349, 350, 0, 0, 351, 492, 0, 352, 0, 493,
	353, 347, 354, 355, 356, 357, 358, 359, 360, 0,
	361, 362, 494, 363, 495, 364, 0, 365, 0, 366,
	367, 368, 369, 370, 371, 496, 372, 373, 0, 374,
	375, 376, 377, 378, 0, 380, 381, 382, 379, 383,
	384, 385, 386, 0, 387, 0, 388, 389, 390, 391,
	550, 392, 0, 393, 397, 398, 556, 400, 401, 402,
	403, 0, 410, 411, 404, 406, 407, 408, 405, 409,
	551, 413, 0, 414, 394, 395, 415, 0, 416, 498,
	417, 418, 0, 428, 419, 420, 421, 396, 422, 426,
	427, 423, 424, 425, 499, 0, 430, 431, 429, 0,
	432, 433, 434, 435, 436, 273, 437, 0, 555, 501,
	502, 503, 0, 444, 0, 438, 553, 504, 440, 505,
	0, 441, 442, 443, 0, 445, 446, 0, 0, 447,
	448, 449, 450, 451, 453, 0, 454, 0, 452, 455,
	456, 457, 506, 507, 508, 0, 459, 458, 509, 543,
	0, 210, 0, 460, 461, 510, 462, 463, 464, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 465,
	0, 0, 0, 0, 222, 223, 224, 225, 466, 467,
	226, 468, 227, 228, 469, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 470, 471, 472, 0, 236,
	473, 0, 0, 0, 237, 238, 239, 240, 241, 242,
	0, 244, 245, 246, 243, 0, 247, 0, 248, 249,
	250, 0, 0, 251, 252, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 474, 475,
	0, 259, 0, 261, 260, 0, 262, 0, 0, 263,
	264, 265, 0, 266, 0, 267, 268, 0, 476, 269,
	270, 272, 274, 271, 275, 276, 277, 278, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 279, 280, 281,
	479, 282, 283, 0, 284, 0, 285, 0, 0, 0,
	286, 287, 0, 288, 480, 0, 481, 289, 0, 290,
	291, 292, 293, 482, 483, 484, 341, 0, 294, 295,
	0, 296, 297, 299, 0, 0, 0, 0, 298, 300,
	307, 0, 0, 301, 485, 303, 302, 304, 305, 306,
	486, 0, 487, 0, 308, 0, 488, 0, 309, 310,
	311, 0, 312, 313, 0, 0, 314, 315, 316, 317,
	0, 319, 318, 0, 320, 489, 0, 321, 322, 0,
	0, 323, 324, 0, 0, 325, 326, 0, 327, 328,
	330, 332, 329, 331, 333, 335, 336, 334, 0, 337,
	338, 340, 339, 0, 0, 0, 0, 490, 491, 342,
	343, 0, 344, 345, 346, 0, 0, 348, 349, 350,
	0, 0, 351, 492, 0, 352, 0, 493, 353, 347,
	354, 355, 356, 357, 358, 359, 360, 0, 361, 362,
	494, 363, 495, 364, 0, 365, 0, 366, 367, 368,
	369, 370, 371, 496, 372, 373, 0, 374, 375, 376,
	377, 378, 0, 380, 381, 382, 379, 383, 384, 385,
	386, 0, 387, 0, 388, 389, 390, 391, 497, 392,
	0, 393, 544, 398, 399, 400, 401, 402, 403, 0,
	410, 411, 404, 406, 407, 408, 405, 409, 412, 413,
	0, 414, 394, 395, 415, 0, 416, 498, 417, 418,
	0, 428, 419, 420, 421, 396, 422, 426, 427, 423,
	424, 425, 499, 0, 430, 431, 429, 0, 432, 433,
	434, 435, 436, 273, 437, 0, 500, 501, 502, 503,
	0, 444, 0, 438, 439, 504, 440, 505, 0, 441,
	442, 443, 0, 445, 446, 0, 0, 447, 448, 449,
	450, 451, 453, 0, 454, 0, 452, 455, 456, 457,
	506, 507, 508, 0, 459, 458, 509, 541, 0, 210,
	0, 460, 461, 510, 462, 463, 464, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 465, 0, 0,
	0, 0, 222, 223, 224, 225, 466, 467, 226, 468,
	227, 228, 469, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 470, 471, 472, 0, 236, 473, 0,
	0, 0, 237, 238, 239, 240, 241, 242, 0, 244,
	245, 246, 243, 0, 247, 0, 248, 249, 250, 0,
	0, 251, 252, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 474, 475, 0, 259,
	0, 261, 260, 0, 262, 0, 0, 263, 264, 265,
	0, 266, 0, 267, 268, 0, 476, 269, 270, 272,
	274, 271, 275, 276, 277, 278, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 479, 282,
	283, 0, 284, 0, 285, 0, 0, 0, 286, 287,
	0, 288, 480, 0, 481, 289, 0, 290, 291, 292,
	293, 482, 483, 484, 341, 0, 294, 295, 0, 296,
	297, 299, 0, 0, 0, 0, 298, 300, 307, 0,
	0, 301, 485, 303, 302, 304, 305, 306, 486, 0,
	487, 0, 308, 0, 488, 0, 309, 310, 311, 0,
	312, 313, 0, 0, 314, 315, 316, 317, 0, 319,
	318, 0, 320, 489, 0, 321, 322, 0, 0, 323,
	324, 0, 0, 325, 326, 0, 327, 328, 330, 332,
	329, 331, 333, 335, 336, 334, 0, 337, 338, 340,
	339, 0, 0, 0, 0, 490, 491, 342, 343, 0,
	344, 345, 346, 0, 0, 348, 349, 350, 0, 0,
	351, 492, 0, 352, 0, 493, 353, 347, 354, 355,
	356, 357, 358, 359, 360, 0, 361, 362, 494, 363,
	495, 364, 0, 365, 0, 366, 367, 368, 369, 370,
	371, 496, 372, 373, 0, 374, 375, 376, 377, 378,
	0, 380, 381, 382, 379, 383, 384, 385, 386, 0,
	387, 0, 388, 389, 390, 391, 497, 392, 0, 393,
	397, 398, 399, 400, 401, 402, 403, 0, 410, 411,
	404, 406, 407, 408, 405, 409, 412, 413, 0, 414,
	394, 395, 415, 0, 416, 498, 417, 418, 0, 428,
	419, 420, 421, 396, 422, 426, 427, 423, 424, 425,
	499, 0, 430, 431, 429, 0, 432, 433, 434, 435,
	436, 273, 437, 0, 500, 501, 502, 503, 0, 444,
	0, 438, 439, 504, 440, 505, 0, 441, 442, 443,
	0, 445, 446, 0, 0, 447, 448, 449, 450, 451,
	453, 0, 454, 0, 452, 455, 456, 457, 506, 507,
	508, 0, 459, 458, 509, 535, 0, 210, 0, 460,
	461, 510, 462, 463, 464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 465, 0, 0, 0, 0,
	222, 223, 224, 225, 466, 467, 226, 468, 227, 228,
	469, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 470, 471, 472, 0, 236, 473, 0, 0, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 0, 247, 0, 248, 249, 250, 0, 0, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 474, 475, 0, 259, 0, 261,
	260, 0, 262, 0, 0, 263, 264, 265, 0, 266,
	0, 267, 268, 0, 476, 269, 270, 272, 274, 271,
	275, 276, 277, 278, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 479, 282, 283, 0,
	284, 0, 285, 0, 0, 0, 286, 287, 0, 288,
	480, 0, 481, 289, 0, 290, 291, 292, 293, 482,
	483, 484, 341, 0, 294, 295, 0, 296, 297, 299,
	0, 0, 0, 0, 298, 300, 307, 0, 0, 301,
	485, 303, 302, 304, 305, 306, 486, 0, 487, 0,
	308, 0, 488, 0, 309, 310, 311, 0, 312, 313,
	0, 0, 314, 315, 316, 317, 0, 319, 318, 0,
	320, 489, 0, 321, 322, 0, 0, 323, 324, 0,
	0, 325, 326, 0, 327, 328, 330, 332, 329, 331,
	333, 335, 336, 334, 0, 337, 338, 340, 339, 0,
	0, 0, 0, 490, 491, 342, 343, 0, 344, 345,
	346, 0, 0, 348, 349, 350, 0, 0, 351, 492,
	0, 352, 0, 493, 353, 347, 354, 355, 356, 357,
	358, 359, 360, 0, 361, 362, 494, 363, 495, 364,
	0, 365, 0, 366, 367, 368, 369, 370, 371, 496,
	372, 373, 0, 374, 375, 376, 377, 378, 0, 380,
	381, 382, 379, 383, 384, 385, 386, 0, 387, 0,
	388, 389, 390, 391, 497, 392, 0, 393, 397, 398,
	399, 400, 401, 402, 403, 0, 410, 411, 404, 406,
	407, 408, 405, 409, 412, 413, 0, 414, 394, 395,
	415, 0, 416, 498, 417, 418, 0, 428, 419, 420,
	421, 396, 422, 426, 427, 423, 424, 425, 499, 0,
	430, 431, 429, 0, 432, 433, 434, 435, 436, 273,
	437, 0, 500, 501, 502, 503, 0, 444, 0, 438,
	439, 504, 440, 505, 0, 441, 442, 443, 0, 445,
	446, 0, 0, 447, 448, 449, 450, 451, 453, 0,
	454, 0, 452, 455, 456, 457, 506, 507, 508, 0,
	459, 458, 509, 513, 0, 210, 0, 460, 461, 510,
	462, 463, 464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 465, 0, 0, 0, 0, 222, 223,
	224, 225, 466, 467, 226, 468, 227, 228, 469, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 470,
	471, 472, 0, 236, 473, 0, 0, 0, 237, 238,
	239, 240, 241, 242, 0, 244, 245, 246, 243, 0,
	247, 0, 248, 249, 250, 0, 0, 251, 252, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 474, 475, 0, 259, 0, 261, 260, 0,
	262, 0, 0, 263, 264, 265, 0, 266, 0, 267,
	268, 0, 476, 269, 270, 272, 274, 271, 275, 276,
	277, 278, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 279, 280, 281, 479, 282, 283, 0, 284, 0,
	285, 0, 0, 0, 286, 287, 0, 288, 480, 0,
	481, 289, 0, 290, 291, 292, 293, 482, 483, 484,
	341, 0, 294, 295, 0, 296, 297, 299, 0, 0,
	0, 0, 298, 300, 307, 0, 0, 301, 485, 303,
	302, 304, 305, 306, 486, 0, 487, 0, 308, 0,
	488, 0, 309, 310, 311, 0, 312, 313, 0, 0,
	314, 315, 316, 317, 0, 319, 318, 0, 320, 489,
	0, 321, 322, 0, 0, 323, 324, 0, 0, 325,
	326, 0, 327, 328, 330, 332, 329, 331, 333, 335,
	336, 334, 0, 337, 338, 340, 339, 0, 0, 0,
	0, 490, 491, 342, 343, 0, 344, 345, 346, 0,
	0, 348, 349, 350, 0, 0, 351, 492, 0, 352,
	0, 493, 353, 347, 354, 355, 356, 357, 358, 359,
	360, 0, 361, 362, 494, 363, 495, 364, 0, 365,
	0, 366, 367, 368, 369, 370, 371, 496, 372, 373,
	0, 374, 375, 376, 377, 378, 0, 380, 381, 382,
	379, 383, 384, 385, 386, 0, 387, 0, 388, 389,
	390, 391, 497, 392, 0, 393, 397, 398, 399, 400,
	401, 402, 403, 0, 410, 411, 404, 406, 407, 408,
	405, 409, 412, 413, 0, 414, 394, 395, 415, 0,
	416, 498, 417, 418, 0, 428, 419, 420, 421, 396,
	422, 426, 427, 423, 424, 425, 499, 0, 430, 431,
	429, 0, 432, 433, 434, 435, 436, 273, 437, 0,
	500, 501, 502, 503, 0, 444, 0, 438, 439, 504,
	440, 505, 0, 441, 442, 443, 0, 445, 446, 0,
	0, 447, 448, 449, 450, 451, 453, 0, 454, 0,
	452, 455, 456, 457, 506, 507, 508, 210, 459, 458,
	509, 0, 0, 0, 0, 460, 461, 510, 462, 463,
	464, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 465, 0, 0, 0, 0,
	222, 223, 224, 225, 466, 467, 226, 468, 227, 228,
	469, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 470, 471, 472, 0, 236, 473, 0, 0, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 0, 247, 0, 248, 249, 250, 0, 0, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 474, 475, 0, 259, 0, 261,
	260, 0, 262, 0, 0, 263, 264, 265, 0, 266,
	0, 267, 268, 0, 476, 269, 270, 272, 274, 271,
	275, 276, 277, 278, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 479, 282, 283, 0,
	284, 0, 285, 0, 0, 0, 286, 287, 0, 288,
	480, 0, 481, 289, 0, 290, 291, 292, 293, 482,
	483, 484, 341, 0, 294, 295, 0, 296, 297, 299,
	0, 0, 0, 0, 298, 300, 307, 0, 0, 301,
	485, 303, 302, 304, 305, 306, 486, 0, 487, 0,
	308, 0, 488, 0, 309, 310, 311, 0, 312, 313,
	0, 0, 314, 315, 316, 317, 0, 319, 318, 0,
	320, 489, 0, 321, 322, 0, 0, 323, 324, 0,
	0, 325, 326, 0, 327, 328, 330, 332, 329, 331,
	333, 335, 336, 334, 0, 337, 338, 340, 339, 0,
	0, 0, 0, 490, 491, 342, 343, 0, 344, 345,
	346, 0, 0, 348, 349, 350, 0, 0, 351, 492,
	0, 352, 0, 493, 353, 347, 354, 355, 356, 357,
	358, 359, 360, 0, 361, 362, 494, 363, 495, 364,
	0, 365, 0, 366, 367, 368, 369, 370, 371, 496,
	372, 373, 0, 374, 375, 376, 377, 378, 0, 380,
	381, 382, 379, 383, 384, 385, 386, 0, 387, 0,
	388, 389, 390, 391, 497, 392, 0, 393, 397, 398,
	399, 400, 401, 402, 403, 0, 410, 411, 404, 406,
	407, 408, 405, 409, 412, 413, 0, 414, 394, 395,
	415, 0, 416, 498, 417, 418, 0, 428, 419, 420,
	421, 396, 422, 426, 427, 423, 424, 425, 499, 0,
	430, 431, 429, 0, 432, 433, 434, 435, 436, 273,
	437, 0, 500, 501, 502, 503, 0, 444, 0, 438,
	439, 504, 440, 505, 0, 441, 442, 443, 0, 445,
	446, 0, 0, 447, 448, 449, 450, 451, 453, 0,
	454, 0, 452, 455, 456, 457, 506, 507, 508, 210,
	459, 458, 509, 0, 0, 0, 0, 460, 461, 510,
	462, 463, 464, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 465, 0, 0,
	0, 0, 222, 223, 224, 225, 466, 467, 226, 468,
	227, 228, 469, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 470, 471, 472, 0, 236, 473, 0,
	0, 0, 237, 238, 239, 240, 241, 242, 0, 244,
	245, 246, 243, 0, 247, 0, 248, 249, 250, 0,
	0, 251, 252, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 474, 475, 0, 259,
	0, 261, 260, 0, 262, 0, 0, 263, 264, 265,
	0, 266, 0, 267, 268, 0, 476, 269, 270, 272,
	274, 271, 275, 276, 277, 278, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 479, 282,
	283, 0, 284, 0, 285, 0, 0, 0, 286, 287,
	0, 288, 480, 0, 481, 289, 0, 290, 291, 292,
	293, 2656, 483, 484, 341, 0, 294, 295, 0, 296,
	297, 299, 0, 0, 0, 0, 298, 300, 307, 0,
	0, 301, 485, 303, 302, 304, 305, 306, 486, 0,
	487, 0, 308, 0, 488, 0, 309, 310, 311, 0,
	312, 313, 0, 0, 314, 315, 316, 317, 0, 319,
	318, 0, 320, 489, 0, 321, 322, 0, 0, 323,
	324, 0, 0, 325, 326, 0, 327, 328, 330, 332,
	329, 331, 333, 335, 336, 334, 0, 337, 338, 340,
	339, 0, 0, 0, 0, 490, 491, 342, 343, 0,
	344, 345, 346, 0, 0, 348, 349, 350, 0, 0,
	351, 492, 0, 352, 0, 493, 353, 347, 354, 355,
	356, 357, 358, 359, 360, 0, 361, 362, 494, 363,
	495, 364, 0, 365, 0, 366, 367, 368, 369, 370,
	371, 496, 372, 373, 0, 374, 375, 376, 377, 378,
	0, 380, 381, 382, 379, 383, 384, 385, 386, 0,
	387, 0, 388, 389, 390, 391, 497, 392, 0, 393,
	397, 398, 399, 400, 401, 402, 403, 0, 410, 411,
	404, 406, 407, 408, 405, 409, 412, 413, 0, 414,
	394, 395, 415, 0, 416, 498, 417, 418, 0, 428,
	419, 420, 421, 396, 422, 426, 427, 423, 424, 425,
	499, 0, 430, 431, 429, 0, 432, 433, 434, 435,
	436, 273, 437, 0, 500, 501, 502, 503, 0, 444,
	0, 438, 439, 504, 440, 505, 0, 441, 442, 443,
	0, 445, 446, 0, 0, 447, 448, 449, 450, 451,
	453, 0, 454, 0, 452, 455, 456, 457, 506, 507,
	508, 210, 459, 458, 509, 0, 0, 0, 0, 460,
	461, 510, 462, 463, 464, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 465,
	0, 0, 0, 0, 222, 223, 224, 225, 466, 467,
	226, 468, 227, 228, 469, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 470, 471, 472, 0, 236,
	473, 0, 0, 0, 237, 238, 239, 240, 241, 242,
	0, 244, 245, 246, 243, 0, 247, 0, 248, 249,
	250, 0, 0, 251, 252, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 474, 475,
	0, 259, 0, 261, 260, 0, 262, 0, 0, 263,
	264, 265, 0, 266, 0, 267, 268, 0, 476, 269,
	270, 272, 274, 271, 275, 276, 277, 278, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 279, 280, 281,
	479, 282, 283, 0, 284, 0, 285, 0, 0, 0,
	286, 287, 0, 288, 480, 0, 481, 289, 0, 290,
	291, 292, 293, 2654, 483, 484, 341, 0, 294, 295,
	0, 296, 297, 299, 0, 0, 0, 0, 298, 300,
	307, 0, 0, 301, 485, 303, 302, 304, 305, 306,
	486, 0, 487, 0, 308, 0, 488, 0, 309, 310,
	311, 0, 312, 313, 0, 0, 314, 315, 316, 317,
	0, 319, 318, 0, 320, 489, 0, 321, 322, 0,
	0, 323, 324, 0, 0, 325, 326, 0, 327, 328,
	330, 332, 329, 331, 333, 335, 336, 334, 0, 337,
	338, 340, 339, 0, 0, 0, 0, 490, 491, 342,
	343, 0, 344, 345, 346, 0, 0, 348, 349, 350,
	0, 0, 351, 492, 0, 352, 0, 493, 353, 347,
	354, 355, 356, 357, 358, 359, 360, 0, 361, 362,
	494, 363, 495, 364, 0, 365, 0, 366, 367, 368,
	369, 370, 371, 496, 372, 373, 0, 374, 375, 376,
	377, 378, 0, 380, 381, 382, 379, 383, 384, 385,
	386, 0, 387, 0, 388, 389, 390, 391, 497, 392,
	0, 393, 397, 398, 399, 400, 401, 402, 403, 0,
	410, 411, 404, 406, 407, 408, 405, 409, 412, 413,
	0, 414, 394, 395, 415, 0, 416, 498, 417, 418,
	0, 428, 419, 420, 421, 396, 422, 426, 427, 423,
	424, 425, 499, 0, 430, 431, 429, 0, 432, 433,
	434, 435, 436, 273, 437, 0, 500, 501, 502, 503,
	0, 444, 0, 438, 439, 504, 440, 505, 0, 441,
	442, 443, 0, 445, 446, 0, 0, 447, 448, 449,
	450, 451, 453, 0, 454, 0, 452, 455, 456, 457,
	506, 507, 508, 210, 459, 458, 509, 0, 0, 0,
	0, 460, 461, 510, 462, 463, 464, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 465, 0, 0, 0, 0, 222, 223, 224, 225,
	466, 467, 226, 468, 227, 228, 469, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 470, 471, 472,
	0, 236, 473, 0, 0, 0, 237, 238, 239, 240,
	241, 242, 0, 244, 245, 246, 243, 0, 247, 0,
	248, 249, 250, 0, 0, 251, 252, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	474, 475, 0, 259, 0, 261, 260, 0, 262, 0,
	0, 263, 264, 265, 0, 266, 0, 267, 268, 0,
	476, 269, 270, 272, 274, 271, 275, 276, 277, 278,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 279,
	280, 281, 479, 282, 283, 0, 284, 0, 285, 0,
	0, 0, 286, 287, 0, 288, 480, 0, 481, 289,
	0, 290, 291, 292, 293, 2642, 483, 484, 341, 0,
	294, 295, 0, 296, 297, 299, 0, 0, 0, 0,
	298, 300, 307, 0, 0, 301, 485, 303, 302, 304,
	305, 306, 486, 0, 487, 0, 308, 0, 488, 0,
	309, 310, 311, 0, 312, 313, 0, 0, 314, 315,
	316, 317, 0, 319, 318, 0, 320, 489, 0, 321,
	322, 0, 0, 323, 324, 0, 0, 325, 326, 0,
	327, 328, 330, 332, 329, 331, 333, 335, 336, 334,
	0, 337, 338, 340, 339, 0, 0, 0, 0, 490,
	491, 342, 343, 0, 344, 345, 346, 0, 0, 348,
	349, 350, 0, 0, 351, 492, 0, 352, 0, 493,
	353, 347, 354, 355, 356, 357, 358, 359, 360, 0,
	361, 362, 494, 363, 495, 364, 0, 365, 0, 366,
	367, 368, 369, 370, 371, 496, 372, 373, 0, 374,
	375, 376, 377, 378, 0, 380, 381, 382, 379, 383,
	384, 385, 386, 0, 387, 0, 388, 389, 390, 391,
	497, 392, 0, 393, 397, 398, 399, 400, 401, 402,
	403, 0, 410, 411, 404, 406, 407, 408, 405, 409,
	412, 413, 0, 414, 394, 395, 415, 0, 416, 498,
	417, 418, 0, 428, 419, 420, 421, 396, 422, 426,
	427, 423, 424, 425, 499, 0, 430, 431, 429, 0,
	432, 433, 434, 435, 436, 273, 437, 0, 500, 501,
	502, 503, 0, 444, 0, 438, 439, 504, 440, 505,
	0, 441, 442, 443, 0, 445, 446, 0, 0, 447,
	448, 449, 450, 451, 453, 0, 454, 0, 452, 455,
	456, 457, 506, 507, 508, 210, 459, 458, 509, 0,
	0, 0, 0, 460, 461, 510, 462, 463, 464, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 465, 0, 0, 0, 0, 222, 223,
	224, 225, 466, 467, 226, 468, 227, 228, 469, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 470,
	471, 472, 0, 236, 473, 0, 0, 0, 237, 238,
	239, 240, 241, 242, 0, 244, 245, 246, 243, 0,
	247, 0, 248, 249, 250, 0, 0, 251, 252, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 474, 475, 0, 259, 0, 261, 260, 0,
	262, 0, 0, 263, 264, 265, 0, 266, 0, 267,
	268, 0, 476, 269, 270, 272, 274, 271, 275, 276,
	277, 278, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 279, 280, 281, 479, 282, 283, 0, 284, 0,
	285, 0, 0, 0, 286, 287, 0, 288, 480, 0,
	481, 289, 0, 290, 291, 292, 293, 2332, 483, 484,
	341, 0, 294, 295, 0, 296, 297, 299, 0, 0,
	0, 0, 298, 300, 307, 0, 0, 301, 485, 303,
	302, 304, 305, 306, 486, 0, 487, 0, 308, 0,
	488, 0, 309, 310, 311, 0, 312, 313, 0, 0,
	314, 315, 316, 317, 0, 319, 318, 0, 320, 489,
	0, 321, 322, 0, 0, 323, 324, 0, 0, 325,
	326, 0, 327, 328, 330, 332, 329, 331, 333, 335,
	336, 334, 0, 337, 338, 340, 339, 0, 0, 0,
	0, 490, 491, 342, 343, 0, 344, 345, 346, 0,
	0, 348, 349, 350, 0, 0, 351, 492, 0, 352,
	0, 493, 353, 347, 354, 355, 356, 357, 358, 359,
	360, 0, 361, 362, 494, 363, 495, 364, 0, 365,
	0, 366, 367, 368, 369, 370, 371, 496, 372, 373,
	0, 374, 375, 376, 377, 378, 0, 380, 381, 382,
	379, 383, 384, 385, 386, 0, 387, 0, 388, 389,
	390, 391, 497, 392, 0, 393, 397, 398, 399, 400,
	401, 402, 403, 0, 410, 411, 404, 406, 407, 408,
	405, 409, 412, 413, 0, 414, 394, 395, 415, 0,
	416, 498, 417, 418, 0, 428, 419, 420, 421, 396,
	422, 426, 427, 423, 424, 425, 499, 0, 430, 431,
	429, 0, 432, 433, 434, 435, 436, 273, 437, 0,
	500, 501, 502, 503, 0, 444, 0, 438, 439, 504,
	440, 505, 0, 441, 442, 443, 0, 445, 446, 0,
	0, 447, 448, 449, 450, 451, 453, 0, 454, 0,
	452, 455, 456, 457, 506, 507, 508, 210, 459, 458,
	509, 0, 0, 0, 0, 460, 461, 510, 462, 463,
	464, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 465, 0, 0, 0, 0,
	222, 223, 224, 225, 466, 467, 226, 468, 227, 228,
	469, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 470, 471, 472, 0, 236, 473, 0, 0, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 0, 247, 0, 248, 249, 250, 0, 0, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 474, 475, 0, 259, 0, 261,
	260, 0, 262, 0, 0, 263, 264, 265, 0, 266,
	0, 267, 268, 0, 476, 269, 270, 272, 274, 271,
	275, 276, 277, 278, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 479, 282, 283, 0,
	284, 0, 285, 0, 0, 0, 286, 287, 0, 288,
	480, 0, 481, 289, 0, 290, 291, 292, 293, 482,
	483, 484, 341, 0, 294, 295, 0, 296, 297, 299,
	0, 0, 0, 0, 298, 300, 307, 0, 0, 301,
	485, 303, 302, 304, 305, 306, 486, 0, 487, 0,
	308, 0, 488, 0, 309, 310, 311, 0, 312, 313,
	0, 0, 314, 315, 316, 317, 0, 319, 318, 0,
	320, 489, 0, 321, 322, 0, 0, 323, 324, 0,
	0, 325, 326, 0, 327, 328, 330, 332, 329, 331,
	333, 335, 336, 334, 0, 337, 338, 340, 339, 0,
	0, 0, 0, 490, 491, 342, 343, 0, 344, 345,
	346, 0, 0, 348, 349, 350, 0, 0, 351, 492,
	0, 352, 0, 493, 353, 347, 354, 355, 356, 357,
	358, 359, 360, 0, 361, 362, 494, 363, 495, 364,
	0, 365, 0, 366, 367, 368, 369, 370, 371, 496,
	372, 373, 0, 374, 375, 376, 377, 378, 0, 380,
	381, 382, 379, 383, 384, 385, 386, 0, 387, 0,
	388, 389, 390, 391, 497, 392, 0, 393, 544, 398,
	399, 400, 401, 402, 403, 0, 410, 411, 404, 406,
	407, 408, 405, 409, 412, 413, 0, 414, 394, 395,
	415, 0, 416, 498, 417, 418, 0, 428, 419, 420,
	421, 396, 422, 426, 427, 423, 424, 425, 499, 0,
	430, 431, 429, 0, 432, 433, 434, 435, 436, 273,
	437, 0, 500, 501, 502, 503, 0, 444, 0, 438,
	439, 504, 440, 505, 0, 441, 442, 443, 0, 445,
	446, 0, 0, 447, 448, 449, 450, 451, 453, 0,
	454, 0, 452, 455, 456, 457, 506, 507, 508, 210,
	459, 458, 509, 0, 0, 0, 0, 460, 461, 510,
	462, 463, 464, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 465, 0, 1832,
	0, 0, 222, 223, 224, 225, 466, 467, 226, 468,
	227, 228, 469, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 470, 471, 472, 0, 236, 473, 0,
	0, 0, 237, 238, 239, 240, 241, 242, 0, 244,
	245, 246, 243, 0, 247, 0, 248, 249, 250, 0,
	0, 251, 252, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 474, 475, 0, 259,
	0, 261, 260, 0, 262, 0, 0, 263, 264, 265,
	0, 266, 0, 267, 268, 0, 476, 269, 270, 272,
	274, 271, 275, 276, 277, 278, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 479, 282,
	283, 0, 284, 0, 285, 0, 0, 0, 286, 287,
	0, 288, 480, 0, 481, 289, 0, 290, 291, 292,
	293, 482, 483, 484, 341, 0, 294, 295, 0, 296,
	297, 299, 0, 0, 0, 0, 298, 300, 307, 0,
	0, 301, 485, 303, 302, 304, 305, 306, 486, 0,
	487, 0, 308, 0, 488, 0, 309, 310, 311, 0,
	312, 313, 0, 0, 314, 315, 316, 317, 0, 319,
	318, 0, 320, 489, 0, 321, 322, 0, 0, 323,
	324, 0, 0, 325, 326, 0, 327, 328, 330, 332,
	329, 331, 333, 335, 336, 334, 0, 337, 338, 340,
	339, 0, 0, 0, 0, 490, 491, 342, 343, 0,
	344, 345, 346, 0, 0, 348, 349, 350, 0, 0,
	351, 492, 0, 352, 0, 493, 353, 347, 354, 355,
	356, 357, 358, 359, 360, 0, 361, 362, 494, 363,
	495, 364, 0, 365, 0, 366, 367, 368, 369, 370,
	371, 496, 372, 373, 0, 374, 375, 376, 377, 378,
	0, 380, 381, 382, 379, 383, 384, 385, 386, 0,
	387, 0, 388, 389, 390, 391, 497, 392, 0, 393,
	397, 398, 399, 400, 401, 402, 403, 0, 410, 411,
	404, 406, 407, 408, 405, 409, 412, 413, 0, 0,
	394, 395, 415, 0, 416, 498, 417, 418, 0, 428,
	419, 420, 421, 396, 422, 426, 427, 423, 424, 425,
	499, 0, 430, 431, 429, 0, 432, 433, 434, 435,
	436, 273, 437, 0, 500, 501, 502, 503, 0, 444,
	0, 438, 439, 504, 440, 505, 0, 441, 442, 443,
	0, 445, 446, 0, 0, 447, 448, 449, 450, 451,
	453, 0, 454, 0, 452, 455, 456, 457, 506, 507,
	508, 210, 459, 458, 509, 0, 0, 0, 0, 460,
	461, 510, 462, 463, 464, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 465,
	0, 0, 0, 0, 222, 223, 224, 225, 466, 467,
	226, 468, 227, 228, 469, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 470, 471, 472, 0, 236,
	473, 0, 0, 0, 237, 238, 239, 240, 241, 242,
	0, 244, 245, 246, 243, 0, 247, 0, 248, 249,
	250, 0, 0, 251, 252, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 474, 475,
	0, 259, 0, 261, 260, 0, 262, 0, 0, 263,
	264, 265, 0, 266, 0, 267, 268, 0, 476, 269,
	270, 272, 274, 271, 275, 276, 277, 278, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 279, 280, 281,
	479, 282, 283, 0, 284, 0, 285, 0, 0, 0,
	286, 287, 0, 288, 480, 0, 481, 289, 0, 290,
	291, 292, 293, 1263, 483, 484, 341, 0, 294, 295,
	0, 296, 297, 299, 0, 0, 0, 0, 298, 300,
	307, 0, 0, 301, 485, 303, 302, 304, 305, 306,
	486, 0, 487, 0, 308, 0, 488, 0, 309, 310,
	311, 0, 312, 313, 0, 0, 314, 315, 316, 317,
	0, 319, 318, 0, 320, 489, 0, 321, 322, 0,
	0, 323, 324, 0, 0, 325, 326, 0, 327, 328,
	330, 332, 329, 331, 333, 335, 336, 334, 0, 337,
	338, 340, 339, 0, 0, 0, 0, 490, 491, 342,
	343, 0, 344, 345, 346, 0, 0, 348, 349, 350,
	0, 0, 351, 492, 0, 352, 0, 493, 353, 347,
	354, 355, 356, 357, 358, 359, 360, 0, 361, 362,
	494, 363, 495, 364, 0, 365, 0, 366, 367, 368,
	369, 370, 371, 496, 372, 373, 0, 374, 375, 376,
	377, 378, 0, 380, 381, 382, 379, 383, 384, 385,
	386, 0, 387, 0, 388, 389, 390, 391, 497, 392,
	0, 393, 397, 398, 399, 400, 401, 402, 403, 0,
	410, 411, 404, 406, 407, 408, 405, 409, 412, 413,
	0, 414, 394, 395, 415, 0, 416, 498, 417, 418,
	0, 428, 419, 420, 421, 396, 422, 426, 427, 423,
	424, 425, 499, 0, 430, 431, 429, 0, 432, 433,
	434, 435, 436, 273, 437, 0, 500, 501, 502, 503,
	0, 444, 0, 438, 439, 504, 440, 505, 0, 441,
	442, 443, 0, 445, 446, 0, 0, 447, 448, 449,
	450, 451, 453, 0, 454, 0, 452, 455, 456, 457,
	506, 507, 508, 210, 459, 458, 509, 0, 0, 0,
	0, 460, 461, 510, 462, 463, 464, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 465, 0, 0, 0, 0, 222, 223, 224, 225,
	466, 467, 226, 468, 227, 228, 469, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 470, 471, 472,
	0, 236, 473, 0, 0, 0, 237, 238, 239, 240,
	241, 242, 0, 244, 245, 246, 243, 0, 247, 0,
	248, 249, 250, 0, 0, 251, 252, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	474, 475, 0, 259, 0, 261, 260, 0, 262, 0,
	0, 263, 264, 265, 0, 266, 0, 267, 268, 0,
	476, 269, 270, 272, 274, 271, 275, 276, 277, 278,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 279,
	280, 281, 479, 282, 283, 0, 284, 0, 285, 0,
	0, 0, 286, 287, 0, 288, 480, 0, 481, 289,
	0, 290, 291, 292, 293, 1205, 483, 484, 341, 0,
	294, 295, 0, 296, 297, 299, 0, 0, 0, 0,
	298, 300, 307, 0, 0, 301, 485, 303, 302, 304,
	305, 306, 486, 0, 487, 0, 308, 0, 488, 0,
	309, 310, 311, 0, 312, 313, 0, 0, 314, 315,
	316, 317, 0, 319, 318, 0, 320, 489, 0, 321,
	322, 0, 0, 323, 324, 0, 0, 325, 326, 0,
	327, 328, 330, 332, 329, 331, 333, 335, 336, 334,
	0, 337, 338, 340, 339, 0, 0, 0, 0, 490,
	491, 342, 343, 0, 344, 345, 346, 0, 0, 348,
	349, 350, 0, 0, 351, 492, 0, 352, 0, 493,
	353, 347, 354, 355, 356, 357, 358, 359, 360, 0,
	361, 362, 494, 363, 495, 364, 0, 365, 0, 366,
	367, 368, 369, 370, 371, 496, 372, 373, 0, 374,
	375, 376, 377, 378, 0, 380, 381, 382, 379, 383,
	384, 385, 386, 0, 387, 0, 388, 389, 390, 391,
	497, 392, 0, 393, 397, 398, 399, 400, 401, 402,
	403, 0, 410, 411, 404, 406, 407, 408, 405, 409,
	412, 413, 0, 414, 394, 395, 415, 0, 416, 498,
	417, 418, 0, 428, 419, 420, 421, 396, 422, 426,
	427, 423, 424, 425, 499, 0, 430, 431, 429, 0,
	432, 433, 434, 435, 436, 273, 437, 0, 500, 501,
	502, 503, 0, 444, 0, 438, 439, 504, 440, 505,
	0, 441, 442, 443, 0, 445, 446, 0, 0, 447,
	448, 449, 450, 451, 453, 0, 454, 0, 452, 455,
	456, 457, 506, 507, 508, 210, 459, 458, 509, 0,
	0, 0, 0, 460, 461, 510, 462, 463, 464, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 465, 0, 0, 0, 0, 222, 223,
	224, 225, 466, 467, 226, 468, 227, 228, 469, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 470,
	471, 472, 0, 236, 473, 0, 0, 0, 237, 238,
	239, 240, 241, 242, 0, 244, 245, 246, 243, 0,
	247, 0, 248, 249, 250, 0, 0, 251, 252, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 474, 475, 0, 259, 0, 261, 260, 0,
	262, 0, 0, 263, 264, 265, 0, 266, 0, 267,
	268, 0, 476, 269, 270, 272, 274, 271, 275, 276,
	277, 278, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 279, 280, 281, 479, 282, 283, 0, 284, 0,
	285, 0, 0, 0, 286, 287, 0, 288, 480, 0,
	481, 289, 0, 290, 291, 292, 293, 482, 483, 484,
	341, 0, 294, 295, 0, 296, 297, 299, 0, 0,
	0, 0, 298, 300, 307, 0, 0, 301, 485, 303,
	302, 304, 305, 306, 486, 0, 487, 0, 308, 0,
	488, 0, 309, 310, 311, 0, 312, 313, 0, 0,
	314, 315, 316, 317, 0, 319, 318, 0, 320, 489,
	0, 321, 322, 0, 0, 323, 324, 0, 0, 325,
	326, 0, 327, 328, 330, 332, 329, 331, 333, 335,
	336, 334, 0, 337, 338, 340, 339, 0, 0, 0,
	0, 490, 491, 342, 343, 0, 344, 345, 346, 0,
	0, 348, 349, 350, 0, 0, 351, 492, 0, 352,
	0, 493, 353, 347, 354, 355, 356, 357, 358, 359,
	360, 0, 361, 362, 494, 363, 495, 364, 0, 365,
	0, 366, 367, 368, 369, 370, 371, 496, 969, 373,
	0, 374, 375, 376, 377, 378, 0, 380, 381, 382,
	379, 383, 384, 385, 386, 0, 387, 0, 388, 389,
	390, 391, 497, 392, 0, 393, 397, 398, 399, 400,
	401, 402, 403, 0, 410, 411, 404, 406, 407, 408,
	405, 409, 412, 413, 0, 414, 394, 395, 415, 0,
	416, 498, 417, 418, 0, 428, 419, 420, 421, 396,
	422, 426, 427, 423, 424, 425, 499, 0, 430, 431,
	429, 0, 432, 433, 434, 435, 436, 273, 437, 0,
	500, 501, 502, 503, 0, 444, 0, 438, 439, 504,
	440, 505, 0, 441, 442, 443, 0, 445, 446, 0,
	0, 447, 448, 449, 450, 451, 453, 0, 454, 0,
	452, 455, 456, 457, 506, 507, 508, 210, 459, 458,
	509, 0, 0, 0, 0, 460, 461, 510, 462, 463,
	464, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 465, 0, 0, 0, 0,
	222, 223, 224, 225, 466, 467, 226, 468, 227, 228,
	469, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 470, 471, 472, 0, 236, 473, 0, 0, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 0, 247, 0, 248, 249, 250, 0, 0, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 474, 475, 0, 259, 0, 261,
	260, 0, 262, 0, 0, 263, 264, 265, 0, 266,
	0, 267, 268, 0, 476, 269, 270, 272, 274, 271,
	275, 276, 277, 278, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 479, 282, 283, 0,
	284, 0, 285, 0, 0, 0, 286, 287, 0, 288,
	480, 0, 481, 0, 0, 290, 291, 292, 293, 482,
	483, 484, 341, 0, 294, 295, 0, 296, 297, 299,
	0, 0, 0, 0, 298, 300, 307, 0, 0, 301,
	485, 303, 302, 304, 305, 306, 486, 0, 487, 0,
	308, 0, 488, 0, 309, 310, 311, 0, 312, 313,
	0, 0, 314, 315, 316, 317, 0, 319, 318, 0,
	320, 489, 0, 321, 322, 0, 0, 323, 324, 0,
	0, 325, 326, 0, 327, 328, 330, 332, 329, 331,
	333, 335, 336, 334, 0, 337, 338, 340, 339, 0,
	0, 0, 0, 490, 491, 342, 343, 0, 344, 345,
	346, 0, 0, 348, 349, 350, 0, 0, 351, 492,
	0, 352, 0, 493, 353, 347, 354, 355, 0, 357,
	358, 359, 360, 0, 361, 362, 494, 363, 495, 364,
	0, 365, 0, 366, 367, 368, 0, 370, 371, 496,
	372, 373, 0, 374, 375, 376, 377, 378, 0, 380,
	381, 382, 379, 383, 384, 385, 386, 0, 387, 0,
	388, 389, 390, 391, 497, 0, 0, 393, 397, 398,
	399, 400, 401, 402, 403, 0, 410, 411, 404, 406,
	407, 408, 405, 409, 412, 413, 0, 414, 394, 395,
	415, 0, 416, 498, 417, 418, 0, 428, 419, 420,
	421, 396, 422, 426, 427, 423, 424, 425, 499, 0,
	430, 431, 429, 0, 432, 433, 434, 435, 436, 273,
	437, 0, 500, 501, 502, 503, 0, 444, 0, 438,
	439, 504, 440, 505, 0, 441, 442, 443, 0, 445,
	446, 0, 0, 447, 448, 449, 450, 451, 453, 0,
	454, 0, 452, 455, 456, 457, 506, 507, 508, 0,
	459, 458, 509, 0, 0, 0, 0, 460, 461, 510,
	462, 463, 464, 1430, 1431, 0, 1463, 1464, 1465, 1473,
	1474, 1475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1466, 0, 0, 0, 0, 0, 0, 1433,
	0, 0, 0, 1479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1432, 0, 0, 0,
	0, 0, 0, 0, 0, 1452, 0, 0, 0, 0,
	1430, 1431, 1449, 1463, 1464, 1465, 1473, 1474, 1475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1466,
	0, 0, 0, 0, 0, 0, 1433, 0, 0, 0,
	1479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1432, 0, 0, 0, 0, 1455, 1456,
	1457, 1458, 1452, 0, 0, 0, 0, 0, 1438, 1449,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1470, 0, 0, 1480, 0, 0, 0, 1460,
	1461, 1462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1476, 0, 1477, 0, 0, 1455, 1456, 1457, 1458, 1447,
	1448, 0, 0, 0, 0, 1438, 0, 0, 0, 0,
	0, 0, 0, 0, 1468, 0, 0, 0, 0, 0,
	0, 0, 1453, 0, 0, 0, 0, 0, 0, 1470,
	0, 0, 1480, 0, 0, 0, 1460, 1461, 1462, 0,
	1478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1467, 0, 1476, 0, 1477,
	0, 0, 0, 0, 0, 0, 1447, 1448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1468, 0, 0, 0, 0, 0, 0, 0, 1453,
	0, 0, 0, 0, 0, 0, 0, 1459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1478, 0, 0,
	0, 0, 0, 0, 0, 1454, 0, 0, 0, 0,
	0, 0, 1467, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1430, 1431, 0, 1463, 1464, 1465, 1473, 1474, 1475, 0,
	0, 0, 0, 0, 1459, 0, 0, 0, 0, 1466,
	0, 0, 0, 0, 0, 0, 1433, 0, 0, 0,
	1479, 0, 1454, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1432, 0, 0, 0, 1471, 0, 0,
	0, 0, 1452, 0, 0, 0, 0, 0, 0, 1449,
	0, 0, 1469, 0, 0, 1444, 1445, 1451, 1450, 1446,
	1472, 0, 1443, 1441, 1442, 1434, 1435, 1436, 1437, 1439,
	1440, 0, 0, 0, 0, 0, 0, 0, 2510, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1455, 1456, 1457, 1458, 0,
	0, 0, 0, 0, 0, 1438, 0, 0, 0, 1469,
	0, 0, 1444, 1445, 1451, 1450, 1446, 1472, 0, 1443,
	1441, 1442, 1434, 1435, 1436, 1437, 1439, 1440, 0, 1470,
	0, 0, 1480, 0, 0, 2509, 1460, 1461, 1462, 0,
	0, 0, 0, 0, 0, 0, 1430, 1431, 0, 1463,
	1464, 1465, 1473, 1474, 1475, 0, 0, 1476, 0, 1477,
	0, 0, 0, 0, 0, 1466, 1447, 1448, 0, 0,
	0, 0, 1433, 0, 0, 0, 1479, 0, 0, 0,
	0, 1468, 0, 0, 0, 0, 0, 0, 0, 1453,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1432,
	0, 0, 0, 0, 0, 0, 0, 1478, 1452, 0,
	0, 0, 0, 0, 0, 1449, 0, 0, 0, 0,
	0, 0, 1467, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1459, 0, 0, 0, 0, 0,
	0, 1455, 1456, 1457, 1458, 0, 0, 0, 0, 0,
	0, 1438, 1454, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1470, 0, 1471, 1480, 0,
	0, 0, 1460, 1461, 1462, 0, 0, 0, 0, 0,
	0, 0, 1430, 1431, 0, 1463, 1464, 1465, 1473, 1474,
	1475, 0, 0, 1476, 0, 1477, 0, 0, 0, 0,
	0, 1466, 1447, 1448, 0, 0, 0, 0, 1433, 0,
	0, 0, 1479, 0, 0, 0, 0, 1468, 0, 0,
	0, 0, 0, 0, 0, 1453, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1432, 0, 0, 0, 0,
	0, 0, 0, 1478, 1452, 0, 0, 0, 0, 1469,
	0, 1449, 1444, 1445, 1451, 1450, 1446, 1472, 1467, 1443,
	1441, 1442, 1434, 1435, 1436, 1437, 1439, 1440, 0, 0,
	0, 0, 0, 0, 0, 2508, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1459, 0, 0, 0, 0, 0, 0, 1455, 1456, 1457,
	1458, 0, 0, 0, 0, 0, 0, 1438, 1454, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1470, 0, 1471, 1480, 0, 0, 0, 1460, 1461,
	1462, 0, 0, 0, 0, 0, 0, 0, 1430, 1431,
	0, 1463, 1464, 1465, 1473, 1474, 1475, 0, 0, 1476,
	0, 1477, 0, 0, 0, 0, 0, 1466, 1447, 1448,
	0, 0, 0, 0, 1433, 0, 0, 0, 1479, 0,
	0, 0, 0, 1468, 0, 0, 0, 0, 0, 0,
	0, 1453, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1432, 0, 0, 0, 0, 0, 0, 0, 1478,
	1452, 0, 0, 0, 0, 1469, 0, 1449, 1444, 1445,
	1451, 1450, 1446, 1472, 1467, 1443, 1441, 1442, 1434, 1435,
	1436, 1437, 1439, 1440, 0, 0, 0, 0, 0, 0,
	0, 2049, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1430, 1431, 0, 1463, 1464, 1465, 1473, 1474, 1475,
	0, 0, 0, 0, 0, 0, 1459, 0, 0, 0,
	1466, 0, 0, 1455, 1456, 1457, 1458, 1433, 0, 0,
	0, 1479, 0, 1438, 1454, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1432, 0, 0, 1470, 0, 1471,
	1480, 0, 0, 1452, 1460, 1461, 1462, 0, 0, 0,
	1449, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1476, 0, 1477, 0, 0,
	0, 0, 0, 0, 1447, 1448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1468,
	0, 0, 0, 0, 0, 0, 0, 1453, 0, 0,
	0, 0, 0, 0, 0, 0, 1455, 1456, 1457, 1458,
	0, 0, 0, 0, 0, 1478, 1438, 0, 0, 0,
	0, 1469, 0, 0, 1444, 1445, 1451, 1450, 1446, 1472,
	1467, 1443, 1441, 1442, 1434, 1435, 1436, 1437, 1439, 1440,
	1470, 0, 0, 1480, 3395, 0, 0, 1460, 1461, 1462,
	0, 0, 0, 0, 0, 0, 0, 1430, 1431, 0,
	1463, 1464, 1465, 1473, 1474, 1475, 0, 0, 1476, 0,
	1477, 0, 1459, 0, 0, 0, 1466, 1447, 1448, 0,
	0, 0, 0, 1433, 0, 0, 0, 1479, 0, 0,
	1454, 0, 1468, 0, 0, 0, 0, 0, 0, 0,
	1453, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1432, 0, 0, 0, 0, 1471, 0, 0, 1478, 1452,
	0, 0, 0, 0, 0, 0, 1449, 0, 0, 0,
	0, 0, 0, 1467, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1459, 0, 0, 0, 0,
	0, 0, 1455, 1456, 1457, 1458, 0, 0, 0, 0,
	0, 0, 1438, 1454, 0, 0, 0, 1469, 0, 0,
	1444, 1445, 1451, 1450, 1446, 1472, 0, 1443, 1441, 1442,
	1434, 1435, 1436, 1437, 1439, 1440, 1470, 0, 1471, 1480,
	3326, 0, 0, 1460, 1461, 1462, 0, 0, 0, 0,
	0, 0, 0, 1430, 1431, 0, 1463, 1464, 1465, 1473,
	1474, 1475, 0, 0, 1476, 0, 1477, 0, 0, 0,
	0, 0, 1466, 1447, 1448, 0, 0, 0, 0, 1433,
	0, 0, 0, 1479, 0, 0, 0, 0, 1468, 0,
	0, 0, 0, 0, 0, 0, 1453, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1432, 0, 0, 0,
	0, 0, 0, 0, 1478, 1452, 0, 0, 0, 0,
	1469, 0, 1449, 1444, 1445, 1451, 1450, 1446, 1472, 1467,
	1443, 1441, 1442, 1434, 1435, 1436, 1437, 1439, 1440, 0,
	0, 0, 0, 3325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1430, 1431, 0, 1463,
	1464, 1465, 1473, 1474, 1475, 0, 0, 0, 0, 0,
	0, 1459, 0, 0, 0, 1466, 0, 0, 1455, 1456,
	1457, 1458, 1433, 0, 0, 0, 1479, 0, 1438, 1454,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1432,
	0, 0, 1470, 0, 1471, 1480, 0, 0, 1452, 1460,
	1461, 1462, 0, 0, 0, 1449, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1476, 0, 1477, 0, 0, 0, 0, 0, 0, 1447,
	1448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1468, 0, 0, 0, 0, 0,
	0, 0, 1453, 0, 0, 0, 0, 0, 0, 0,
	0, 1455, 1456, 1457, 1458, 0, 0, 0, 0, 0,
	1478, 1438, 0, 0, 0, 0, 1469, 0, 0, 1444,
	1445, 1451, 1450, 1446, 1472, 1467, 1443, 1441, 1442, 1434,
	1435, 1436, 1437, 1439, 1440, 1470, 0, 0, 1480, 3221,
	0, 0, 1460, 1461, 1462, 0, 0, 0, 0, 0,
	0, 0, 1430, 1431, 0, 1463, 1464, 1465, 1473, 1474,
	1475, 0, 0, 1476, 0, 1477, 0, 1459, 0, 0,
	0, 1466, 1447, 1448, 0, 0, 0, 0, 1433, 0,
	0, 0, 1479, 0, 0, 1454, 0, 1468, 0, 0,
	0, 0, 0, 0, 0, 1453, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1432, 0, 0, 0, 0,
	1471, 0, 0, 1478, 1452, 0, 0, 0, 0, 0,
	0, 1449, 0, 0, 0, 0, 0, 0, 1467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1459, 0, 0, 0, 0, 0, 0, 1455, 1456, 1457,
	1458, 0, 0, 0, 0, 0, 0, 1438, 1454, 0,
	0, 0, 1469, 0, 0, 1444, 1445, 1451, 1450, 1446,
	1472, 0, 1443, 1441, 1442, 1434, 1435, 1436, 1437, 1439,
	1440, 1470, 0, 1471, 1480, 3128, 0, 0, 1460, 1461,
	1462, 0, 0, 0, 0, 0, 0, 0, 1430, 1431,
	0, 1463, 1464, 1465, 1473, 1474, 1475, 0, 0, 1476,
	0, 1477, 0, 0, 0, 0, 0, 1466, 1447, 1448,
	0, 0, 0, 0, 1433, 0, 0, 0, 1479, 0,
	0, 0, 0, 1468, 0, 0, 0, 0, 0, 0,
	0, 1453, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1432, 0, 0, 0, 0, 0, 0, 0, 1478,
	1452, 0, 0, 0, 0, 1469, 0, 1449, 1444, 1445,
	1451, 1450, 1446, 1472, 1467, 1443, 1441, 1442, 1434, 1435,
	1436, 1437, 1439, 1440, 0, 0, 0, 0, 3080, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1430, 1431, 0, 1463, 1464, 1465, 1473, 1474, 1475,
	0, 0, 0, 0, 0, 0, 1459, 0, 0, 0,
	1466, 0, 0, 1455, 1456, 1457, 1458, 1433, 0, 0,
	0, 1479, 0, 1438, 1454, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1432, 0, 0, 1470, 0, 1471,
	1480, 0, 0, 1452, 1460, 1461, 1462, 0, 0, 0,
	1449, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1476, 0, 1477, 0, 0,
	0, 0, 0, 0, 1447, 1448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1468,
	0, 0, 0, 0, 0, 0, 0, 1453, 0, 0,
	0, 0, 0, 0, 0, 0, 1455, 1456, 1457, 1458,
	0, 0, 0, 0, 0, 1478, 1438, 0, 0, 0,
	0, 1469, 0, 0, 1444, 1445, 1451, 1450, 1446, 1472,
	1467, 1443, 1441, 1442, 1434, 1435, 1436, 1437, 1439, 1440,
	1470, 0, 0, 1480, 3079, 0, 0, 1460, 1461, 1462,
	0, 0, 0, 0, 0, 0, 0, 1430, 1431, 0,
	1463, 1464, 1465, 1473, 1474, 1475, 0, 0, 1476, 0,
	1477, 0, 1459, 0, 0, 0, 1466, 1447, 1448, 0,
	0, 0, 0, 1433, 0, 0, 0, 1479, 0, 0,
	1454, 0, 1468, 0, 0, 0, 0, 0, 0, 0,
	1453, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1432, 0, 0, 0, 0, 1471, 0, 0, 1478, 1452,
	0, 0, 0, 0, 0, 0, 1449, 0, 0, 0,
	0, 0, 0, 1467, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1459, 0, 0, 0, 0,
	0, 0, 1455, 1456, 1457, 1458, 0, 0, 0, 0,
	0, 0, 1438, 1454, 0, 0, 0, 1469, 0, 0,
	1444, 1445, 1451, 1450, 1446, 1472, 0, 1443, 1441, 1442,
	1434, 1435, 1436, 1437, 1439, 1440, 1470, 0, 1471, 1480,
	3078, 0, 0, 1460, 1461, 1462, 0, 0, 0, 0,
	0, 0, 0, 1430, 1431, 0, 1463, 1464, 1465, 1473,
	1474, 1475, 0, 0, 1476, 0, 1477, 0, 0, 0,
	0, 0, 1466, 1447, 1448, 0, 0, 0, 0, 1433,
	0, 0, 0, 1479, 0, 0, 0, 0, 1468, 0,
	0, 0, 0, 0, 0, 0, 1453, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1432, 0, 0, 0,
	0, 0, 0, 0, 1478, 1452, 0, 0, 0, 0,
	1469, 0, 1449, 1444, 1445, 1451, 1450, 1446, 1472, 1467,
	1443, 1441, 1442, 1434, 1435, 1436, 1437, 1439, 1440, 0,
	0, 0, 0, 3045, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1459, 0, 0, 0, 0, 0, 0, 1455, 1456,
	1457, 1458, 0, 0, 0, 0, 0, 0, 1438, 1454,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1470, 0, 1471, 1480, 0, 0, 0, 1460,
	1461, 1462, 0, 0, 0, 0, 0, 0, 0, 1430,
	1431, 0, 1463, 1464, 1465, 1473, 1474, 1475, 0, 0,
	1476, 0, 1477, 0, 0, 0, 0, 0, 1466, 1447,
	1448, 0, 0, 2436, 0, 1433, 0, 0, 0, 1479,
	0, 0, 0, 0, 1468, 0, 0, 0, 0, 0,
	0, 0, 1453, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1432, 0, 0, 0, 0, 0, 0, 0,
	1478, 1452, 0, 0, 0, 0, 1469, 0, 1449, 1444,
	1445, 1451, 1450, 1446, 1472, 1467, 1443, 1441, 1442, 1434,
	1435, 1436, 1437, 1439, 1440, 0, 0, 0, 0, 2847,
	0, 0, 0, 0, 0, 0, 2437, 0, 0, 0,
	0, 0, 1430, 1431, 0, 1463, 1464, 1465, 1473, 1474,
	1475, 0, 0, 0, 0, 0, 0, 1459, 0, 0,
	0, 1466, 0, 0, 1455, 1456, 1457, 1458, 1433, 0,
	0, 0, 1479, 0, 1438, 1454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1432, 0, 0, 1470, 0,
	1471, 1480, 0, 0, 1452, 1460, 1461, 1462, 0, 0,
	0, 1449, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1476, 0, 1477, 0,
	0, 0, 0, 0, 0, 1447, 1448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1468, 0, 0, 0, 0, 0, 0, 0, 1453, 0,
	0, 0, 0, 0, 0, 0, 0, 1455, 1456, 1457,
	1458, 0, 0, 0, 0, 0, 1478, 1438, 3495, 0,
	0, 0, 1469, 0, 0, 1444, 1445, 1451, 1450, 1446,
	1472, 1467, 1443, 1441, 1442, 1434, 1435, 1436, 1437, 1439,
	1440, 1470, 0, 2465, 1480, 0, 0, 0, 1460, 1461,
	1462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1476,
	0, 1477, 0, 1459, 0, 0, 0, 0, 1447, 1448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1454, 0, 1468, 0, 0, 0, 0, 0, 0,
	0, 1453, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1471, 0, 0, 1478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3494, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1459, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1454, 0, 0, 0, 1469, 0,
	0, 1444, 1445, 1451, 1450, 1446, 1472, 0, 1443, 1441,
	1442, 1434, 1435, 1436, 1437, 1439, 1440, 1430, 1431, 1471,
	1463, 1464, 1465, 1473, 1474, 1475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1466, 0, 0, 0,
	0, 0, 0, 1433, 0, 0, 0, 1479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1432, 0, 0, 0, 0, 0, 0, 0, 0, 1452,
	0, 0, 0, 0, 0, 0, 1449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1469, 0, 0, 1444, 1445, 1451, 1450, 1446, 1472,
	0, 1443, 1441, 1442, 1434, 1435, 1436, 1437, 1439, 1440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1455, 1456, 1457, 1458, 0, 0, 0, 0,
	0, 0, 1438, 0, 2553, 0, 0, 2552, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1470, 0, 0, 1480,
	0, 0, 0, 1460, 1461, 1462, 2140, 0, 0, 0,
	0, 0, 0, 1430, 1431, 0, 1463, 1464, 1465, 1473,
	1474, 1475, 0, 0, 1476, 0, 1477, 0, 0, 0,
	0, 0, 1466, 1447, 1448, 0, 2139, 0, 0, 1433,
	0, 0, 0, 1479, 0, 0, 0, 0, 1468, 0,
	0, 0, 0, 0, 0, 0, 1453, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1432, 0, 0, 0,
	0, 0, 0, 0, 1478, 1452, 0, 0, 0, 0,
	0, 0, 1449, 0, 0, 0, 0, 0, 0, 1467,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1430, 1431, 0, 1463,
	1464, 1465, 1473, 1474, 1475, 0, 0, 0, 0, 0,
	0, 1459, 0, 0, 0, 1466, 0, 0, 1455, 1456,
	1457, 1458, 1433, 0, 0, 0, 1479, 0, 1438, 1454,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1432,
	0, 0, 1470, 0, 1471, 1480, 0, 0, 1452, 1460,
	1461, 1462, 0, 0, 0, 1449, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1476, 0, 1477, 0, 0, 0, 0, 0, 0, 1447,
	1448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1468, 0, 0, 0, 0, 0,
	0, 0, 1453, 0, 0, 0, 0, 0, 0, 0,
	0, 1455, 1456, 1457, 1458, 0, 0, 0, 0, 0,
	1478, 1438, 0, 0, 0, 0, 1469, 0, 0, 1444,
	1445, 1451, 1450, 1446, 1472, 1467, 1443, 1441, 1442, 1434,
	1435, 1436, 1437, 1439, 1440, 1470, 0, 0, 1480, 0,
	0, 0, 1460, 1461, 1462, 0, 0, 0, 0, 0,
	0, 0, 1430, 1431, 0, 1463, 1464, 1465, 1473, 1474,
	1475, 0, 0, 1476, 0, 1477, 0, 1459, 0, 0,
	0, 1466, 1447, 1448, 0, 0, 0, 0, 1433, 0,
	0, 0, 1479, 0, 0, 1454, 0, 1468, 0, 0,
	0, 0, 0, 0, 0, 1453, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1432, 0, 0, 0, 0,
	1471, 0, 0, 1478, 1452, 0, 0, 0, 0, 0,
	0, 1449, 0, 0, 0, 0, 0, 0, 1467, 812,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1459, 0, 0, 0, 0, 0, 0, 1455, 1456, 1457,
	1458, 0, 0, 0, 0, 0, 0, 1438, 1454, 0,
	0, 0, 1469, 0, 0, 1444, 1445, 1451, 1450, 1446,
	1472, 0, 1443, 1441, 1442, 1434, 1435, 1436, 1437, 1439,
	1440, 1470, 0, 1471, 1480, 0, 0, 0, 1460, 1461,
	1462, 0, 0, 0, 0, 0, 0, 0, 1430, 1431,
	0, 1463, 1464, 1465, 1473, 1474, 1475, 0, 0, 1476,
	0, 1477, 0, 0, 0, 0, 0, 1466, 1447, 1448,
	0, 0, 0, 0, 1433, 0, 0, 0, 1479, 0,
	0, 0, 0, 1468, 0, 0, 0, 0, 0, 0,
	0, 1453, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1432, 0, 0, 0, 0, 0, 0, 0, 1478,
	1452, 0, 0, 0, 0, 1469, 0, 1449, 1444, 1445,
	1451, 1450, 1446, 1472, 1467, 1443, 1441, 1442, 1434, 1435,
	1436, 1437, 1439, 1440, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1459, 0, 0, 0,
	0, 0, 0, 1455, 1456, 1457, 1458, 0, 0, 0,
	0, 0, 0, 1438, 1454, 0, 0, 0, 2559, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1470, 0, 1471,
	1480, 0, 0, 0, 1460, 1461, 1462, 0, 0, 0,
	0, 0, 0, 0, 1430, 1431, 0, 1463, 1464, 1465,
	1473, 1474, 1475, 0, 0, 1476, 0, 1477, 0, 2835,
	0, 0, 0, 1466, 1447, 1448, 0, 2554, 0, 0,
	1433, 0, 0, 0, 1479, 0, 0, 0, 0, 1468,
	0, 0, 0, 0, 0, 0, 0, 1453, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1432, 0, 0,
	0, 0, 0, 0, 0, 1478, 1452, 0, 0, 0,
	0, 1469, 0, 1449, 1444, 1445, 1451, 1450, 1446, 1472,
	1467, 1443, 1441, 1442, 1434, 1435, 1436, 1437, 1439, 1440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1430, 1431, 0,
	1463, 1464, 1465, 1473, 1474, 1475, 0, 0, 0, 0,
	0, 0, 1459, 0, 0, 0, 1466, 0, 0, 1455,
	1456, 1457, 1458, 1433, 0, 0, 0, 1479, 0, 1438,
	1454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1432, 0, 0, 1470, 0, 1471, 1480, 0, 0, 1452,
	1460, 1461, 1462, 0, 0, 0, 1449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1476, 0, 1477, 0, 0, 0, 0, 0, 0,
	1447, 1448, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1468, 0, 0, 0, 0,
	0, 0, 0, 1453, 0, 0, 0, 0, 0, 0,
	0, 0, 1455, 1456, 1457, 1458, 0, 0, 0, 0,
	0, 1478, 1438, 0, 0, 0, 0, 1469, 0, 0,
	1444, 1445, 1451, 1450, 1446, 1472, 1467, 1443, 1441, 1442,
	1434, 1435, 1436, 1437, 1439, 1440, 1470, 0, 0, 1480,
	0, 0, 0, 1460, 1461, 1462, 0, 0, 0, 0,
	0, 0, 0, 1430, 1431, 0, 1463, 1464, 1465, 1473,
	1474, 1475, 0, 0, 1476, 0, 1477, 0, 1459, 0,
	0, 0, 1466, 1447, 1448, 0, 2507, 0, 0, 1433,
	0, 0, 0, 1479, 0, 0, 1454, 0, 1468, 0,
	0, 0, 0, 0, 0, 0, 1453, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1432, 0, 0, 0,
	0, 1471, 0, 0, 1478, 1452, 0, 0, 0, 0,
	0, 0, 1449, 0, 0, 0, 0, 0, 0, 1467,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1459, 0, 0, 0, 0, 0, 0, 1455, 1456,
	1457, 1458, 0, 0, 0, 0, 0, 0, 1438, 1454,
	0, 0, 0, 1469, 0, 0, 1444, 1445, 1451, 1450,
	1446, 1472, 0, 1443, 1441, 1442, 1434, 1435, 1436, 1437,
	1439, 1440, 1470, 0, 1471, 1480, 0, 0, 0, 1460,
	1461, 1462, 0, 0, 0, 0, 0, 0, 0, 1430,
	1431, 0, 1463, 1464, 1465, 1473, 1474, 1475, 0, 0,
	1476, 0, 1477, 0, 0, 0, 0, 0, 1466, 1447,
	1448, 0, 0, 0, 0, 1433, 0, 0, 0, 1479,
	0, 0, 0, 0, 1468, 0, 0, 0, 0, 0,
	0, 0, 1453, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1432, 0, 0, 0, 0, 0, 0, 0,
	1478, 1452, 0, 0, 0, 0, 1469, 0, 1449, 1444,
	1445, 1451, 1450, 1446, 1472, 1467, 1443, 1441, 1442, 1434,
	1435, 1436, 1437, 1439, 1440, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1430, 1431, 0, 1463, 1464, 1465, 1473, 1474,
	1475, 0, 0, 0, 0, 0, 0, 1459, 0, 0,
	0, 1466, 0, 0, 1455, 1456, 1457, 1458, 1433, 0,
	0, 0, 1479, 0, 1438, 1454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1432, 0, 0, 1470, 0,
	1471, 1480, 0, 0, 1452, 1460, 1461, 1462, 0, 0,
	0, 1449, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1476, 0, 1477, 0,
	0, 0, 0, 0, 0, 1447, 1448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1468, 0, 0, 0, 0, 0, 0, 0, 1453, 0,
	0, 0, 0, 0, 0, 0, 0, 1455, 1456, 1457,
	1458, 0, 0, 0, 0, 0, 1478, 1438, 0, 0,
	0, 0, 1469, 0, 0, 1444, 1445, 1451, 1450, 1446,
	1472, 1467, 1443, 1441, 1442, 1434, 1435, 1436, 1437, 1439,
	1440, 1470, 0, 0, 1480, 0, 0, 0, 1460, 1461,
	1462, 0, 0, 0, 0, 0, 0, 0, 1430, 1431,
	0, 1463, 1464, 1465, 1473, 1474, 1475, 0, 0, 1476,
	0, 1477, 0, 1459, 0, 0, 0, 0, 1447, 1448,
	0, 0, 0, 0, 1433, 0, 0, 0, 1479, 0,
	0, 1454, 0, 1468, 0, 0, 0, 0, 0, 0,
	0, 1453, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1432, 0, 0, 0, 0, 1471, 0, 0, 1478,
	1452, 0, 0, 0, 0, 0, 0, 1449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1459, 0, 0, 0,
	0, 0, 0, 1455, 1456, 1457, 1458, 0, 0, 0,
	0, 0, 0, 1438, 1454, 0, 0, 0, 1469, 0,
	0, 1444, 1445, 1451, 1450, 1446, 1472, 0, 1443, 1441,
	1442, 1434, 1435, 1436, 1437, 1439, 1440, 1470, 0, 1471,
	1480, 0, 0, 0, 1460, 1461, 1462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1476, 0, 1477, 0, 0,
	0, 0, 0, 0, 1447, 1448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1468,
	0, 0, 0, 0, 0, 0, 0, 1453, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1478, 0, 0, 0, 0,
	0, 1469, 0, 0, 1444, 1445, 1451, 1450, 1446, 1472,
	0, 1443, 1441, 1442, 1434, 1435, 1436, 1437, 1439, 1440,
	0, 0, 0, 0, 0, 1650, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	601, 0, 1459, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1662, 1644, 1651, 1634, 1672, 1671, 0,
	1454, 1636, 1635, 602, 0, 0, 0, 0, 0, 1682,
	1683, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1471, 0, 0, 0, 0,
	0, 0, 0, 0, 603, 622, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1673, 0, 1669, 1668, 0, 0, 604, 0, 0, 605,
	0, 0, 0, 0, 1667, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 628, 0, 0, 0, 0,
	0, 606, 0, 0, 0, 0, 0, 0, 0, 0,
	626, 0, 0, 0, 1666, 1664, 1665, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1469, 607, 0,
	1444, 1445, 1451, 1450, 1446, 1472, 0, 1443, 1441, 1442,
	1434, 1435, 1436, 1437, 1439, 1440, 0, 1646, 608, 0,
	0, 609, 632, 0, 0, 0, 635, 0, 1655, 1649,
	1657, 1659, 1660, 1661, 1656, 0, 1654, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1678, 1679, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1638, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1670, 631, 0, 0, 1647, 0, 1648, 0,
	612, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 610, 0, 0, 0, 0, 0, 1663, 0, 0,
	613, 1631, 1629, 1630, 1633, 1632, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1639, 1640, 1642, 1643,
	0, 0, 0, 0, 0, 634, 0, 0, 0, 0,
	0, 1658, 1641, 0, 0, 615, 0, 0, 0, 0,
	0, 0, 1681, 0, 0, 0, 0, 0, 616, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1637, 0,
	1674, 1675, 1676, 1677, 0, 621, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 617, 0, 0,
	630, 0, 629, 0, 0, 618, 0, 0, 0, 0,
	1645, 0, 0, 0, 0, 1652, 1680, 619, 0, 0,
	0, 0, 625, 0, 0, 0, 0, 636, 0, 633,
	0, 0, 0, 0, 623,
}
var sqlPact = [...]int{

	4941, -1000, -1000, -1000, -1000, -1000, -1000, 301, 300, 298,
	297, 296, 293, 292, 291, -1000, -1000, -1000, 290, -1000,
	-1000, 289, -1000, 286, 284, 270, 267, -1000, 257, 250,
	247, -1000, -1000, -1000, -1000, 244, 240, 239, 51373, 1795,
	62601, 54269, 1695, 45957, 62183, 45539, 61765, 61347, 235, -1000,
	60929, 234, 233, 229, -1000, -1000, 228, 1357, 37567, 226,
	219, 216, 1911, 215, 206, -1000, 195, -1000, 72248, 1350,
	-1000, 192, 185, -1000, 7107, 514, 53439, 2301, 184, 183,
	37148, 2262, 2260, -1000, -1000, 1688, -1000, -1000, 181, 180,
	179, 168, 165, 163, 161, 160, 155, -1000, 152, 151,
	150, 146, 144, 139, 138, 134, 132, 130, 127, 125,
	124, 122, 121, 107, 106, 104, -1000, 7550, 1580, 1488,
	1485, 1458, 1447, 1477, 942, 103, 102, 101, 100, 99,
	96, -1000, -1000, 95, 94, 89, 87, -1000, 85, 84,
	196, 83, 82, 79, 78, 77, 2345, 2299, 1415, 796,
	17994, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 66721, 63013, 75, -106, 74, -1000, 2552,
	983, 30864, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 549, -1000, -1000, -1000, 358, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1625, 739, -1000, -1000, -1000, 60511, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1790, -60, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 737, -1000, 1786, 236, 1685, -1000,
	-1000, -1000, -1000, -1000, 63013, -1000, -1000, 2879, 2878, 1666,
	734, 60099, -1000, 1330, -1000, 896, 20653, -1000, 1137, -1000,
	20653, 345, -1000, -1000, -1000, -1000, -1000, 45121, 14455, 44703,
	44285, 41371, 59681, 14027, 50961, 1161, -1000, -1000, -1000, -1000,
	-1000, -2, 38803, 63013, -1000, 332, -1000, -1000, -1000, -1000,
	-1000, -1000, 26970, 736, 26516, 722, 26062, 249, -1000, -1000,
	-1000, -1000, 2875, 2873, 1059, 2872, 2480, 66309, 1532, 2870,
	1393, 1134, 989, 2869, 2868, 2867, 2866, 2865, 2858, 2854,
	1343, 59263, 2315, 40943, 40515, 51373, 51373, 2097, 58845, -1000,
	-1000, 1247, 1226, -1000, -1000, -1000, -1000, 2378, 2248, 2239,
	50543, -1000, -1000, 2850, 2849, 2848, 2847, 2845, 65897, 1508,
	2842, 1954, 2841, 2837, 2834, 2833, 2832, 2831, 2826, 2825,
	2824, -1000, 50125, 49707, 49289, 48871, 58427, 40087, 39659, -1000,
	-1000, -1000, 32532, 5744, 58009, 33816, 51373, 51373, -1000, -1000,
	27411, -59, -1000, -1000, -1000, 2294, -1000, 27411, -59, -1000,
	63013, -1000, 2313, 1588, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2023, 1449, 2685, 39231, 1663, 1277, 2376,
	2375, 1329, 1981, 2368, 2367, 2365, 2361, 2358, 1451, 2021,
	505, 17540, 1401, 1311, 2355, 2351, 2728, 1753, 43867, 2823,
	2822, 2497, 2348, 2283, -1000, -1000, -1000, -1000, 1296, -1000,
	-1000, 46369, -1000, -1000, 1143, -1000, -1000, 1143, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1160, 65073, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1428, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1803, -1000, 1654, -1000, -1000, 2820, 2299, 1960, 2463,
	2463, 2463, 2568, 521, 520, -1000, 196, -1000, -1000, 71668,
	-1000, -1000, 27411, 27411, 27411, 27411, 27411, 1578, -1000, 733,
	-1000, -1000, 806, -1000, 731, 674, -1000, -1000, -1000, -1000,
	-1000, -1000, 730, 2734, -1000, 915, -1000, -1000, -1000, -1000,
	2691, -1000, 16645, -1000, -1000, -1000, 490, 727, 27411, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 328, 903, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 664, 1512, 663, 663, 663, -1000, -1000, 971, -1000,
	-1000, -1000, 420, 662, 403, 661, -1000, -1000, -1000, -1000,
	2312, 720, 717, -1000, 716, 713, 712, -1000, -1000, -1000,
	711, 710, 708, 706, 705, 704, 700, 699, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 969, -1000, 696, 695, 694,
	692, 690, 686, 684, 681, 680, -1000, -1000, -3, 63013,
	-1000, 549, -3, -1000, -1000, 679, -1000, 21094, 21094, 21094,
	-1000, -1000, 1782, 27411, -1000, 2127, -1000, 418, -232, 863,
	31696, -1000, 30013, 863, 801, 35066, -1000, 2282, -1000, -1000,
	678, 322, -1000, -1000, 2281, 63013, 14881, 63013, 51373, 51373,
	-1000, 2440, 27411, -1000, -1000, 38391, 63013, 51785, 2634, 72221,
	38391, 63013, 2309, -1000, -1000, -1000, 63013, -1000, 27411, -1000,
	2633, 1285, -48, -1000, -1000, -1000, -1000, -1000, -1000, 1928,
	1944, 1067, 1829, 1209, -1000, 20653, 2472, -1000, -1000, -1000,
	319, 14881, -1000, 1691, 2422, 1165, -1000, 1819, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1424, 2421, -1000, 1926,
	2417, 1420, -1000, -1000, 953, 2416, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1720, -1000, -1000, 2490, -1000,
	-1000, 1817, 2414, -149, -1000, -1000, 32964, 38803, -12, -1000,
	-1000, -68, -1000, 13599, 71668, -1000, -1000, -1000, 71668, 822,
	-1000, -1000, 2413, -1000, 71668, 750, -1000, -1000, 2412, -1000,
	-1000, -1000, 2818, -1000, 2817, 1889, 2814, 2811, 2810, -1000,
	1359, 1491, 2809, -1000, 2808, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 48453, 48035, 986, -1000, 1772, -1000, -1000, 47617,
	925, 1888, -1000, -1000, 1887, -1000, 839, -1000, 2807, 57591,
	2131, 925, 1876, -1000, -1000, -1000, -1000, -1000, 51373, -1000,
	51373, -1000, 51373, -1000, 1289, -1000, 65485, -232, -1000, -1000,
	-1000, -1000, -1000, 2411, 2805, 2804, 2800, -1000, 63013, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 176, 2410,
	-1000, -1000, 176, 2409, -1000, 176, 2407, -1000, 174, 2403,
	-1000, -1000, 1735, 2402, -1000, -101, 2399, -1000, -1000, -101,
	2396, -1000, 71, -1000, -1000, -1000, 983, -1000, 32114, 57173,
	41797, 905, 729, 36730, 71668, -1000, 32964, 71668, -1000, 41797,
	47617, -1000, 56755, 47205, -1000, -1000, 1246, 1990, -1000, -1000,
	-1000, -1000, 41797, 41797, 41797, -1000, 56337, -1000, 1645, 1448,
	2506, 51373, -1000, 1527, -1000, -1000, -1000, 2519, 2307, -1000,
	37979, 53021, -1000, 52609, -1000, 52197, -1000, 51373, -1000, 51373,
	-1000, 2799, 2795, 2793, -1000, 2790, 2514, 71668, 2510, -1000,
	2388, 1481, 1457, 63013, -1000, -1000, 63013, -1000, 63013, -1000,
	-1000, -1000, 1924, -1000, -1000, -1000, -1000, 51373, -1000, -1000,
	-1000, -1000, -1000, -1000, 2306, -1000, 1504, -1000, 1224, -1000,
	-1000, 177, -1000, -1000, -48, -1000, 65073, -1000, -1000, 2299,
	1960, -1000, 63013, -1000, -1000, -1000, 2299, 1802, 2012, 25608,
	2015, 27411, 196, -1000, -1000, 196, 196, 20212, -1000, -1000,
	72221, 72221, 14881, 1180, 27411, 27411, 27411, 27411, 27411, 27411,
	27411, 27411, 27411, 27411, 27411, 27411, 27411, 27411, 27411, 27411,
	27411, 27411, 27411, 27411, 27411, 27411, 27411, 27411, 27411, 27411,
	27411, 27411, 27411, 27411, 27411, 27411, 27411, 27411, 27411, 2048,
	27411, 1159, 27411, 27411, 27411, 27411, 3011, -1000, -1000, 1613,
	597, 1679, -1000, 2679, 2679, 2679, 71947, 71947, 535, 2789,
	806, -1000, 27411, -1000, -59, 27411, 15309, -1000, 2721, 1216,
	-1000, -1000, 520, 9617, 1875, -1000, 519, 15763, -1000, -1000,
	-1000, 16645, 674, 25154, 27411, 962, 71668, 13173, 2215, 2190,
	-1000, 2718, -1000, -1000, 2694, -1000, -1000, -1000, -1000, 2694,
	1178, 1177, 2715, -1000, 2694, 2694, 673, 819, 776, 772,
	769, 702, 27411, 27411, 27411, 27411, 27411, 27411, 27411, 27411,
	-1000, 24713, 24259, 23805, 28734, 23351, 27411, 17086, 22897, 22443,
	63013, -3, 2632, 27411, 156, -1000, 70582, -1000, 156, 156,
	672, 67, 71668, 1989, 1989, 31280, 2006, 1649, 1649, 1649,
	-1000, 670, 781, 70, 37, 15, -1000, -1000, 9, 3,
	863, 10601, 54681, 1655, 863, 863, 315, 336, 518, 29597,
	2127, 54681, -1000, -1000, 51373, 669, 15309, 14881, 1261, 59,
	310, 2044, 2028, 1992, -1000, 1344, 58, 1156, -89, -1000,
	4733, 57, -1000, 934, -1000, -1000, -1000, -1000, 162, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 968, 668, 667, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 664, 1512, 663, 663,
	663, -1000, -1000, -1000, 420, 662, 403, 661, -1000, -1000,
	-1000, -1000, -1000, -1000, 2280, -68, 51785, 884, 53, 1063,
	-48, -1000, 1143, -1000, 1650, -1000, -1000, -1000, -1000, -1000,
	-1000, 1218, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2732,
	-1000, 2696, -1000, -1000, 2713, -7, -1000, -1000, 14881, -1000,
	-49, 1427, -1000, 43449, 2502, 2501, 2485, 1287, -1000, 1272,
	2563, 46369, 2594, 2603, 24, -1000, 2279, -1000, -1000, 893,
	1407, 1151, 46369, 1926, -1000, 72221, -1000, 2053, 2561, 1260,
	1231, 1260, 1260, 1250, -1000, 46369, 1149, 1534, 41797, -1000,
	1140, -1000, -53, 2586, 2599, 10, -1000, 2278, 1139, -1000,
	-1000, 51373, 14881, 861, -1000, 41797, -12, 38803, 63013, 307,
	-1000, 27411, -59, 27411, -59, -1000, -1000, 2394, -1000, -1000,
	-1000, 2787, 1411, 1952, -1000, -1000, -1000, 660, 1869, 1926,
	1864, -1000, -1000, 46787, 2277, 63013, 2070, -18, 51373, -1000,
	-1000, 1531, -1000, 2393, 2392, 645, 2785, -1000, 1764, 1863,
	-1000, -1000, -1000, 64661, 1195, 2390, 957, 620, 2625, 620,
	35898, -1000, 63013, -1000, 63013, -1000, -1000, -1000, 2784, -1000,
	51373, -1000, -1000, 51373, -1000, 51373, -1000, 51373, -1000, 51373,
	51373, -1000, 63013, 41797, 41797, 41797, 5437, 42625, 49, 516,
	-1000, 55925, 63013, 1024, 43037, 63013, 2462, -203, -1000, 905,
	905, 861, -1000, 861, -1000, 51373, 2305, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2780, 2779, -1000, 924, 51373, 63013,
	51373, -1000, -1000, 63013, -1000, 63013, -1000, -1000, 63013, -1000,
	63013, -1000, 63013, -1000, -1000, -1000, -1000, -1000, -1000, -59,
	27411, 1304, -1000, 2304, -1000, 2303, -1000, 36, -1000, -1000,
	-1000, -1000, 1586, 51373, 51373, 63013, 51373, -1000, 46369, -1000,
	-1000, 2299, -1000, -1000, -1000, -1000, -1000, 71668, -1000, 511,
	-1000, -1000, 71668, 1470, 2082, -1000, 2082, -16, -1000, 69968,
	1995, 51373, -1000, -1000, -1000, -1000, -1000, 889, 789, 789,
	1097, 1097, 1097, 1097, 2652, 288, 1106, 467, 4057, 4057,
	4057, 4057, 4057, 4057, 4057, 4057, 212, 419, 419, 212,
	212, 212, 212, 212, 419, 419, 419, 4057, 4057, 4057,
	71947, 71771, 6478, 27411, 27411, 1138, 1603, 597, 6402, 27411,
	5639, 5639, 5639, 5639, -1000, 1785, -1000, -1000, -1000, -1000,
	2275, 650, 28734, 28734, -1000, -1000, -1000, -1000, 16204, 27411,
	-1000, -1000, -1000, -1000, 21989, -1000, -1000, 69792, -242, 515,
	-143, 29, -1000, 27411, 27411, 27411, 512, -1000, 509, -1000,
	-1000, 1133, -1000, 1132, 1131, 1127, -1000, 649, 305, 27411,
	63013, -1000, 68075, 775, -213, -1000, 45, 1268, -1000, 27411,
	304, -1000, 1643, 648, 647, 500, 44, -1000, 496, 886,
	879, 495, 494, 486, 27411, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 71492, 67899, 67619, 67552, 9160,
	10146, 10079, 43, 480, -1000, 2274, -143, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 479, -1000, 478, -1000, 71316, -143,
	477, 977, -1000, 28734, 28734, 28734, -1000, 476, -1000, 70406,
	-1000, 71213, 21548, 21548, 21548, 473, 71037, 27411, -143, 38,
	-1000, 31, -1000, -1000, 646, 21, 957, 21094, 30445, 14881,
	-1000, 957, 957, 27411, -1000, 27411, 2011, -1000, -1000, -1000,
	2007, 1734, 1989, 31280, -1000, -1000, -1000, -1000, 54681, 609,
	863, -1000, -1000, -1000, -1000, -1000, 54681, -1000, 2691, 2140,
	-1000, -1000, -1000, 63013, 549, -1000, 54681, 54681, 14881, 863,
	-1000, 471, 34232, 29, 303, -1000, -1000, 14881, 2088, 2088,
	2088, -1000, -1000, 63013, 2646, -1000, 1518, -1000, 72221, -1000,
	805, 1053, -1000, 2712, 644, -1000, 2694, 2694, 63013, 135,
	20653, -1000, 1143, -1000, -1000, 1370, -1000, 1500, -1000, 1176,
	-1000, -1000, -1000, 20653, -1000, 1469, 63013, 63013, 51373, -1000,
	-1000, 1860, 64249, 1858, 72221, 63013, -1000, -1000, 641, 639,
	1987, 1978, 63013, 63013, 63837, 63425, 63013, 1740, 27411, 1812,
	1403, -59, -59, -1000, -1000, -59, 636, 1188, 51373, 51373,
	51373, 1409, -1000, -1000, -1000, -1000, -1000, 51373, -1000, -1000,
	2710, -1000, 1260, -1000, -1000, -1000, 1260, 1926, 1405, 51373,
	41797, 941, 63013, 1540, -59, -59, -1000, -1000, -59, 633,
	14881, 1494, -1000, 2139, -1000, 19, -1000, -1000, 12747, 71668,
	-1000, 71668, -1000, 63013, -1000, 984, 63013, 43037, 918, 2386,
	-1000, 1926, 2379, 549, -1000, -1000, 35482, -68, 905, 41797,
	51373, -18, 41797, 41797, 41797, 2776, 632, 2774, -1000, 51373,
	2377, 1762, 1852, 2380, 836, 63013, 1657, -1000, 27411, 1513,
	-1000, 34650, 1002, 63013, 1375, 108, -1000, -1000, -1000, 28,
	63013, -1000, 2770, -1000, -1000, 176, 176, 176, -1000, 174,
	1735, -1000, -101, -101, -1000, -1000, 5437, 905, -36, 629,
	-1000, 844, 843, 33390, 41797, -8, -1000, -1000, -1000, -1000,
	-1000, 51373, 63013, 635, 2126, 63013, -17, -1000, 274, 627,
	-1000, 905, 32964, 2264, -1000, -1000, 939, -1000, 1211, -1000,
	-1000, -1000, -1000, -1000, -1000, -68, -68, -1000, -1000, -1000,
	-1000, 71668, -1000, 1301, 1293, 63013, -1000, 14881, 63013, 51373,
	14881, 51373, -1000, -1000, -1000, -1000, -1000, -1000, 1470, -1000,
	27411, -1000, -1000, -1000, 20212, -1000, -1000, -1000, 51373, -224,
	27411, 27411, 6119, 4995, 27411, 28734, 28734, -1000, 27411, 4283,
	-1000, -1000, -1000, -1000, -1000, 2263, 626, 27411, 72221, 4239,
	4031, -1000, 470, 9694, 212, -1000, 27411, -1000, 469, 19771,
	-1000, 70685, 1, -24, -1000, 2730, 1884, 1600, 1433, 1317,
	2709, 12321, -143, -28, -1000, -1000, 804, -1000, 2362, -1000,
	27411, 70861, 11895, -1000, 36314, 959, 1657, -1000, -1000, 2694,
	876, -1000, -1000, -1000, 876, -1000, 69616, 72221, 72221, 27411,
	27411, -1000, 27411, 27411, 27411, -1000, -1000, 27411, -1000, -1000,
	2254, 27411, -1000, 72221, 72221, 28734, 28734, 28734, 28734, 28734,
	28734, 28734, 28734, 28734, 28734, 28734, 28734, 28734, 28734, 28734,
	28734, 28734, 28734, 28734, 1986, 28734, 2664, 2664, 2664, -1000,
	2265, 2254, 27411, 27411, 72221, 468, 464, 463, -1000, 27411,
	-143, -1000, -1000, 5437, -1000, 2185, -1000, -206, -1000, 2127,
	-1000, -1000, 2185, 2185, -29, 71668, 31280, 31280, -1000, 624,
	27411, 1994, -1000, 765, -1000, -35, -1000, 54681, -1000, 764,
	-240, -1000, 842, -1000, -1000, -1000, -1000, 549, -1000, -1000,
	-1000, 197, 54681, -1000, -39, -1000, 2618, 434, 14881, -1000,
	-1000, -1000, -1000, -1000, -1000, -68, 1683, 2729, -1000, 2699,
	797, 760, 433, 2694, 432, 430, -68, 63013, -1000, -48,
	-1000, -1000, -1000, 27411, -1000, -1000, 2499, 1126, 1125, -1000,
	2373, -1000, 1851, -1000, 1006, -1000, 1383, -1000, 27411, 27411,
	623, 622, 1568, 2766, 2369, 1735, 2366, 1735, -1000, -1000,
	869, -1000, 71668, 621, 619, -1000, -49, 1402, 938, -1000,
	-1000, 27411, 27411, 55509, -1000, 2490, 2490, -1000, 1118, -1000,
	-1000, -1000, 1926, 1116, -1000, -1000, 1526, -1000, -1000, 927,
	-1000, -1000, 27411, -1000, -53, 1102, 905, 2249, -1000, -1000,
	2755, 2754, 2753, 429, -40, -61, 72221, 2613, 1798, 63013,
	51373, 51373, 2610, 867, -1000, 2691, -1000, -1000, -1000, -1000,
	925, -1000, -1000, 2752, -1000, 1020, 14881, 51373, 2359, 1937,
	836, 42213, -1000, 925, 2012, 71668, -1000, 1375, 19317, 2487,
	-51, -1000, -1000, -1000, 957, 35898, 31280, 27411, 2750, -52,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 55097, 55097,
	41797, 41797, 41797, 905, 63013, 63013, 43037, 2748, 617, 63013,
	63013, 615, -1000, 63013, 63013, 2747, 41797, -1000, -1000, -59,
	-1000, 1674, 51373, -1000, -1000, 924, -1000, -1000, 1546, 1809,
	1546, 1708, 69440, -1000, 2512, 14881, 2584, 5639, 27411, 27411,
	3565, 1030, 362, 5639, 27411, 27411, 72221, 8029, -56, 27411,
	27411, -1000, 27411, 759, 71668, 2726, 27411, 428, 426, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 424, -1000,
	-1000, -1000, -1000, -1000, 71668, 27411, 109, -1000, -1000, -1000,
	67133, -1000, 27411, 423, 421, -1000, -1000, -1000, 404, 401,
	5560, 273, 69337, 69161, 68985, 71668, 2265, 71668, -1000, -1000,
	857, 857, 1232, 1232, 1232, 1232, 2664, 457, 818, 3290,
	449, 449, 449, 536, 948, 948, 449, 449, 449, 2230,
	1947, 614, 5221, -1000, -1000, 71668, 71668, 399, -1000, -1000,
	-1000, -143, 397, 2172, 2551, -1000, 31280, 2172, 2172, -1000,
	-1000, 1734, 63013, 71668, 31280, -232, -1000, 2691, -1000, -1000,
	2140, -1000, 11039, -1000, 14881, -1000, -1000, 34232, -1000, 613,
	-1000, 72, -1000, -1000, 755, 2746, 792, -1000, 395, -1000,
	-1000, -68, 71668, 63013, 63013, 63013, 2356, -1000, 3507, -1000,
	68882, -70, -1000, 69968, 27411, 63013, -1000, 1535, 2067, 1051,
	-1000, 63013, -1000, 63013, -1000, -1000, 63013, 63013, 51373, 2341,
	-72, 71668, -81, -1000, 841, -1000, -1000, 51373, 51373, 41797,
	2284, -74, 14881, -1000, 41797, -1000, -1000, -1000, 2122, -1000,
	53851, 1737, -59, -1000, 2745, 612, 1926, -59, -1000, 1660,
	-1000, 754, -1000, -1000, 611, 63013, 1761, 607, 14881, 1939,
	836, 42213, -1000, 1195, 1375, -1000, -1000, -85, -1000, 582,
	-59, 1657, -1000, -95, 71668, -1000, 840, -1000, -88, -1000,
	-1000, 382, -1000, 2460, 2459, -1000, -1000, 27411, 606, 605,
	63013, 2456, -1000, -1000, -90, -1000, 1754, -1000, -1000, -1000,
	-1000, 14881, 1398, -1000, -1000, -1000, -1000, 2512, 5639, 5639,
	27411, 27411, 27411, 5639, 8029, -94, -1000, 5639, 5639, -143,
	-1000, -1000, 70685, -1000, -1000, -1000, 71668, 11469, 1547, -1000,
	68706, -1000, -1000, -1000, -1000, 27411, 27411, -1000, -1000, -1000,
	-1000, -1000, 28734, 2225, 604, 72221, -1000, -1000, 935, 27411,
	27411, 2127, 935, 935, -1000, -96, -1000, 863, -1000, -1000,
	-1000, 2691, 72, -1000, 2743, 14881, 788, -1000, 2742, -1000,
	-1000, -1000, -1000, 63013, -1000, 63013, -1000, 14881, 63013, 2198,
	1838, -1000, -1000, 1975, 603, 28734, 51373, 834, 2205, 1543,
	27411, -1000, -108, -109, 1837, -1000, -1000, 1835, 27411, -1000,
	72221, 1735, 1735, -113, -115, -1000, 27411, 1101, 63013, 18876,
	-1000, -1000, -1000, 27411, 1084, -1000, -101, 1540, 2153, -1000,
	-1000, -1000, -1000, 1972, -1000, -1000, 63013, 1963, 917, -1000,
	43037, 918, -1000, -1000, 898, -1000, 27411, -1000, 51373, 27411,
	1756, -1000, 836, 42213, -1000, 2380, -1000, 2435, 63013, 2484,
	-1000, 2012, 597, -1000, 905, 595, 588, -117, 27411, 27411,
	-121, 585, 905, -105, -1000, 821, 807, -1000, -1000, 51373,
	51373, -1000, 5639, 5639, 5639, -1000, 370, -1000, -1000, 1657,
	2549, -1000, 68530, 68427, 1684, 28734, 72221, -123, -1000, 63013,
	71668, -143, -1000, -1000, -1000, 54681, 753, -1000, 2741, -1000,
	-1000, 2927, -1000, -1000, -1000, 63013, 1848, -1000, -1000, 27411,
	5221, 578, 27411, -1000, -1000, 2108, 2235, 2122, 577, -1000,
	-1000, -1000, -1000, 1459, -1000, -1000, 71668, 2533, -1000, -1000,
	576, 567, 71668, 563, 835, 2222, -1000, 71668, 562, 918,
	-1000, 1569, 1737, 561, -1000, -1000, -1000, 2043, 369, 2609,
	898, -1000, 2668, -1000, -125, 1020, -134, 51373, 42213, -1000,
	1937, 1196, -136, 63013, 1375, -1000, -1000, 41797, 41797, 1543,
	-144, -151, -1000, 41797, -1000, 1754, -1000, 63013, -1000, 63013,
	-1000, -1000, -1000, 1717, 27411, -1000, -1000, 1684, -152, -1000,
	-132, -1000, 2604, -1000, -1000, -1000, -1000, -1000, 2352, 68251,
	1905, 63013, 8518, 2232, -1000, -1000, 1540, 63013, 51373, 1019,
	14881, 1546, 1546, 27411, 18435, 1550, 27411, -1000, 51373, 63013,
	-1000, 2455, 2122, -59, -1000, -1000, 1543, 560, 1543, 559,
	-1000, 1939, 1286, -1000, 957, -1000, -1000, -158, -159, 2122,
	1543, -1000, -174, -1000, -175, -176, 365, 28293, 28293, 28293,
	-143, -1000, 63013, 552, 2333, -1000, 1743, 1631, 361, 1022,
	-1000, -1000, 2205, -181, 549, -1000, 27411, -1000, -182, -1000,
	1001, -186, -1000, 987, -187, -1000, 2221, -1000, -192, 548,
	-199, -1000, -1000, -1000, 1540, 917, 2122, 27411, 2122, 27411,
	-1000, 35898, -1000, 905, 905, 1540, 2122, 905, -1000, -1000,
	-1000, -1000, -1000, 29160, 1651, 1365, 70071, -1000, -1000, -1000,
	-1000, 63013, -1000, 1755, 1745, 1332, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1905, 71668, -1000, 1546, 2145, -1000,
	1546, 2208, -1000, 1545, -1000, 63013, -1000, 63013, 918, -1000,
	1540, -201, 1540, -208, -200, -1000, -1000, -1000, 1540, -1000,
	2639, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2443, -1000,
	1034, 1730, 1730, 1743, -1000, 543, -1000, 534, -1000, -209,
	-1000, -1000, 950, 1543, 950, 1543, -1000, -1000, 27852, -1000,
	2651, -1000, -1000, 1985, -1000, 2205, 27411, 27411, 1716, -1000,
	2739, 2122, -1000, 2122, -1000, -1000, -1000, -1000, -1000, -214,
	-219, -1000, -1000, -1000, -1000, 1540, 1540, 1540, 1083, 950,
	950, -1000, 506, -1000, -1000, 27411, -221, 1540, -1000,
}
var sqlPgo = [...]int{

	0, 3422, 3421, 3418, 3415, 3414, 3409, 3407, 3406, 3403,
	3400, 3397, 3396, 3395, 3394, 3392, 3390, 3384, 3380, 3376,
	3375, 3370, 3369, 3366, 3365, 3363, 3361, 3358, 3346, 3344,
	3343, 3340, 3339, 3338, 3336, 3330, 3328, 3327, 3323, 3322,
	3321, 3319, 3317, 3316, 3313, 3312, 31, 3310, 3307, 3306,
	3305, 3297, 3292, 3291, 3290, 3285, 3283, 3281, 3278, 3277,
	3276, 3275, 3274, 3272, 34, 3270, 213, 3269, 3268, 3262,
	3259, 3258, 3250, 3248, 3245, 3241, 3239, 211, 3238, 107,
	3232, 3231, 3229, 3227, 3224, 209, 3221, 3219, 3218, 3213,
	3208, 3206, 3205, 3204, 129, 3202, 3201, 102, 3200, 3199,
	3198, 3197, 3196, 3195, 3194, 3190, 3188, 3186, 185, 3183,
	206, 3182, 3180, 3175, 3172, 3170, 3169, 3168, 3166, 3162,
	3161, 3160, 3159, 3157, 3154, 3147, 3143, 3142, 3141, 3140,
	3139, 3138, 3136, 3135, 3133, 3132, 3131, 222, 138, 3129,
	3128, 204, 202, 3126, 3125, 105, 97, 91, 3123, 88,
	146, 188, 6527, 180, 3122, 3120, 3117, 3115, 3110, 63,
	135, 134, 128, 132, 80, 3108, 3107, 69, 58, 36,
	29, 100, 3105, 3104, 3103, 2031, 95, 3102, 3100, 203,
	184, 3099, 586, 3098, 165, 110, 93, 57, 90, 3097,
	118, 18, 3095, 141, 49, 3094, 126, 70, 30, 5795,
	7262, 3093, 82, 217, 78, 212, 187, 177, 192, 171,
	130, 240, 3086, 194, 3084, 56, 153, 3082, 3081, 3080,
	54, 150, 74, 3078, 8, 3, 166, 25, 85, 12,
	3076, 11, 3075, 3072, 3071, 3069, 26, 133, 3067, 114,
	67, 3066, 35, 3065, 14, 162, 3064, 181, 99, 3062,
	3061, 197, 154, 152, 10, 167, 3055, 3050, 3043, 3036,
	3035, 103, 21, 94, 3032, 3029, 111, 178, 3028, 52,
	131, 72, 115, 214, 98, 169, 83, 164, 145, 163,
	3026, 3025, 3021, 149, 3020, 3019, 176, 157, 3018, 3017,
	215, 33, 50, 170, 55, 3016, 3015, 124, 3014, 158,
	3012, 3011, 3010, 207, 139, 159, 5, 64, 92, 24,
	13, 173, 125, 87, 79, 3008, 3092, 1613, 1489, 3005,
	109, 84, 40, 96, 121, 201, 38, 2986, 2982, 1137,
	2979, 2978, 2977, 2976, 142, 2974, 2967, 2966, 112, 53,
	76, 2965, 122, 61, 7, 101, 205, 71, 161, 172,
	193, 2964, 140, 2963, 65, 113, 2962, 151, 191, 306,
	2956, 1038, 117, 2955, 199, 2953, 2951, 2950, 2949, 66,
	2948, 2947, 370, 2945, 108, 2944, 2942, 143, 127, 189,
	89, 43, 2940, 68, 28, 2939, 147, 32, 2938, 326,
	116, 0, 6505, 5017, 6015, 2937, 3842, 2933, 160, 106,
	2932, 2931, 2930, 75, 2929, 60, 2928, 2927, 37, 2926,
	16, 6, 9, 19, 17, 406, 136, 2923, 2922, 86,
	104, 119, 2921, 210, 168, 2920, 2919, 2918, 62, 2916,
	27, 2914, 22, 2912, 2910, 23, 4, 2909, 2908, 179,
	2907, 190, 2905, 2904, 2619, 2902, 200, 123, 2901, 137,
	156, 2900, 2899, 2898, 2897, 196, 2896, 198, 2892, 15,
	20, 1, 2891, 2890, 2889, 155, 2, 2471, 2888, 2887,
	73, 148, 2886, 2885, 144,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 3, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 7, 7, 8, 8, 8, 34, 34, 10, 10,
	9, 9, 9, 11, 11, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 13, 13, 24, 24, 14, 14,
	26, 26, 15, 15, 27, 27, 446, 446, 18, 29,
	19, 30, 12, 447, 447, 447, 447, 22, 20, 20,
	31, 31, 148, 148, 148, 148, 17, 17, 25, 25,
	161, 161, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 445, 445, 163, 163, 162, 158, 158,
	448, 448, 164, 164, 164, 166, 166, 35, 35, 93,
	93, 93, 94, 94, 95, 95, 149, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 81, 81, 389, 389,
	390, 390, 144, 144, 145, 145, 145, 145, 146, 146,
	147, 147, 147, 49, 37, 37, 37, 37, 37, 37,
	37, 38, 38, 38, 38, 39, 39, 39, 39, 39,
	39, 40, 40, 40, 40, 40, 40, 47, 47, 47,
	47, 138, 138, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 452, 452, 452, 452, 452, 452, 452, 452,
	452, 452, 452, 452, 452, 452, 452, 452, 452, 452,
	452, 452, 452, 453, 453, 454, 454, 455, 455, 456,
	456, 456, 456, 456, 456, 456, 456, 456, 456, 456,
	456, 456, 456, 456, 456, 456, 456, 456, 456, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 61, 61, 238, 238, 214, 214,
	62, 62, 62, 63, 63, 64, 64, 51, 51, 441,
	441, 252, 252, 356, 356, 66, 66, 67, 67, 67,
	67, 67, 67, 68, 68, 68, 68, 68, 68, 68,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	75, 75, 75, 76, 76, 76, 73, 73, 73, 71,
	71, 71, 70, 70, 70, 74, 74, 74, 72, 72,
	72, 253, 253, 77, 77, 77, 77, 77, 77, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 358, 358, 78, 78, 78, 327,
	327, 82, 82, 82, 284, 284, 83, 83, 83, 83,
	83, 84, 84, 84, 84, 96, 96, 96, 96, 444,
	444, 245, 245, 179, 179, 179, 179, 89, 89, 89,
	89, 90, 90, 90, 91, 91, 143, 143, 102, 102,
	102, 102, 102, 101, 101, 101, 101, 101, 101, 41,
	41, 41, 42, 42, 43, 43, 44, 44, 45, 45,
	46, 46, 46, 46, 46, 104, 104, 449, 449, 106,
	103, 103, 103, 105, 105, 105, 105, 107, 108, 108,
	108, 108, 108, 108, 109, 109, 383, 383, 260, 260,
	381, 381, 397, 397, 382, 382, 218, 218, 218, 218,
	218, 219, 219, 219, 388, 388, 388, 388, 388, 388,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 128, 128, 128, 137, 137, 137, 137, 137, 137,
	137, 130, 130, 130, 119, 119, 111, 111, 111, 111,
	111, 115, 115, 115, 115, 115, 112, 112, 121, 121,
	121, 121, 116, 116, 118, 118, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 113, 113, 113, 113, 123,
	123, 123, 123, 290, 290, 290, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 133, 133, 133, 133,
	133, 133, 341, 341, 129, 129, 129, 129, 132, 132,
	132, 132, 274, 274, 126, 126, 126, 127, 127, 127,
	131, 131, 134, 134, 134, 134, 114, 114, 114, 458,
	458, 458, 135, 135, 125, 125, 136, 136, 136, 136,
	136, 136, 136, 136, 124, 124, 124, 124, 117, 442,
	442, 439, 439, 439, 439, 439, 439, 439, 440, 440,
	443, 443, 87, 87, 87, 56, 56, 459, 459, 459,
	57, 57, 460, 460, 460, 457, 457, 457, 457, 457,
	457, 457, 457, 220, 220, 221, 221, 308, 308, 308,
	308, 308, 224, 224, 165, 165, 165, 227, 228, 228,
	225, 225, 226, 226, 226, 230, 230, 229, 232, 232,
	231, 307, 404, 404, 406, 406, 406, 406, 406, 406,
	406, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 402, 402, 402, 403, 398, 398, 399, 399, 399,
	399, 222, 222, 223, 223, 223, 223, 400, 401, 243,
	243, 344, 405, 405, 407, 407, 409, 461, 461, 461,
	461, 461, 461, 462, 462, 306, 306, 236, 236, 410,
	410, 410, 410, 411, 411, 411, 411, 411, 414, 413,
	412, 412, 412, 412, 412, 337, 337, 337, 60, 60,
	60, 271, 271, 270, 270, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 140,
	140, 58, 58, 58, 171, 171, 55, 55, 55, 464,
	464, 59, 59, 59, 465, 465, 65, 65, 65, 65,
	65, 65, 54, 54, 54, 54, 54, 466, 466, 291,
	291, 289, 289, 242, 242, 343, 183, 183, 159, 159,
	159, 21, 23, 23, 16, 16, 32, 32, 33, 33,
	28, 28, 450, 450, 451, 451, 88, 88, 92, 92,
	92, 100, 100, 139, 139, 139, 139, 139, 139, 139,
	36, 36, 36, 36, 48, 48, 48, 48, 98, 468,
	468, 468, 99, 99, 467, 467, 178, 178, 178, 178,
	180, 180, 303, 303, 304, 304, 469, 469, 305, 305,
	305, 305, 173, 172, 174, 174, 53, 53, 53, 167,
	167, 168, 168, 169, 169, 170, 170, 470, 470, 85,
	85, 85, 142, 142, 213, 213, 299, 299, 299, 237,
	237, 188, 188, 302, 302, 300, 300, 300, 300, 269,
	269, 269, 141, 141, 250, 250, 262, 262, 263, 263,
	353, 353, 264, 97, 97, 152, 152, 150, 150, 150,
	150, 150, 150, 471, 471, 151, 151, 151, 153, 153,
	153, 153, 153, 153, 153, 156, 156, 156, 156, 157,
	157, 157, 155, 155, 421, 421, 421, 423, 423, 424,
	420, 420, 422, 422, 463, 463, 273, 273, 273, 234,
	235, 233, 233, 240, 240, 239, 241, 241, 342, 342,
	342, 267, 267, 267, 267, 294, 294, 292, 292, 293,
	293, 295, 295, 296, 296, 296, 297, 297, 298, 298,
	266, 266, 323, 323, 154, 154, 154, 247, 247, 247,
	248, 248, 314, 314, 314, 314, 314, 314, 315, 315,
	313, 313, 313, 313, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 346, 346, 249, 249, 347, 301, 301,
	437, 437, 437, 438, 438, 340, 340, 348, 348, 348,
	348, 348, 348, 338, 338, 339, 339, 354, 355, 355,
	277, 277, 277, 277, 275, 275, 278, 278, 278, 278,
	276, 276, 349, 349, 349, 349, 268, 268, 350, 350,
	350, 351, 309, 310, 310, 359, 359, 359, 359, 359,
	374, 246, 246, 246, 246, 246, 472, 472, 360, 360,
	360, 360, 360, 360, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 364, 364, 364, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 373, 373, 373,
	373, 373, 365, 365, 370, 370, 371, 371, 371, 366,
	367, 372, 372, 372, 372, 473, 473, 376, 376, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 362, 362,
	362, 369, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 285, 285, 286, 286, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 318, 318, 318, 318, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 415, 415, 415, 415, 415, 415, 415,
	415, 418, 418, 419, 419, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 425, 425, 426, 426, 428, 428,
	429, 429, 430, 431, 431, 431, 432, 433, 433, 427,
	427, 434, 434, 434, 434, 435, 435, 436, 436, 436,
	436, 436, 329, 329, 330, 330, 336, 336, 336, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 181, 181, 181, 181, 181,
	258, 258, 256, 256, 256, 259, 259, 257, 257, 255,
	255, 254, 254, 326, 326, 324, 324, 328, 328, 279,
	279, 375, 375, 375, 375, 375, 375, 375, 280, 280,
	280, 288, 281, 281, 282, 282, 282, 282, 282, 320,
	321, 283, 283, 283, 322, 322, 331, 335, 335, 334,
	333, 333, 332, 332, 311, 311, 312, 312, 265, 265,
	474, 474, 261, 261, 352, 352, 352, 352, 216, 216,
	251, 251, 215, 215, 208, 208, 209, 209, 209, 209,
	244, 244, 377, 377, 377, 378, 379, 380, 325, 198,
	197, 185, 186, 196, 195, 194, 184, 187, 191, 192,
	193, 189, 190, 204, 203, 202, 200, 201, 357, 210,
	210, 211, 211, 211, 212, 212, 212, 212, 182, 182,
	205, 205, 206, 207, 207, 199, 199, 199, 175, 175,
	175, 176, 176, 177, 177, 387, 387, 385, 385, 385,
	386, 386, 386, 386, 384, 384, 384, 384, 384, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 393, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 396, 396,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 1, 3, 1, 1, 3, 4, 6, 1, 3,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 4, 6, 4, 6, 6, 9,
	6, 9, 6, 5, 6, 5, 1, 1, 5, 5,
	6, 6, 4, 4, 4, 4, 3, 4, 4, 7,
	4, 7, 5, 3, 5, 7, 4, 12, 4, 12,
	1, 3, 5, 5, 2, 5, 3, 6, 4, 6,
	5, 6, 6, 4, 8, 3, 4, 3, 6, 4,
	3, 1, 3, 2, 1, 1, 3, 1, 3, 2,
	2, 0, 1, 1, 0, 2, 0, 7, 2, 5,
	6, 2, 1, 3, 1, 3, 1, 6, 4, 9,
	7, 12, 12, 12, 9, 2, 7, 2, 1, 1,
	1, 3, 3, 0, 3, 1, 3, 1, 1, 3,
	2, 5, 0, 5, 1, 2, 1, 2, 1, 2,
	2, 3, 3, 3, 3, 3, 5, 3, 3, 5,
	3, 3, 5, 3, 3, 5, 3, 6, 6, 6,
	3, 1, 1, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 3, 3, 4, 3, 4, 7, 4, 4,
	4, 3, 5, 7, 4, 3, 3, 4, 3, 3,
	3, 3, 3, 2, 0, 1, 0, 1, 0, 3,
	3, 3, 3, 3, 6, 4, 4, 4, 3, 5,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 4, 1,
	1, 2, 1, 2, 7, 3, 2, 0, 1, 3,
	3, 1, 0, 1, 2, 2, 1, 6, 5, 1,
	2, 1, 3, 2, 0, 8, 3, 2, 2, 2,
	2, 2, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 3, 5, 3, 3, 5,
	3, 1, 3, 2, 2, 5, 3, 6, 3, 1,
	1, 2, 1, 1, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 2, 1, 2, 1, 3, 5, 7, 2, 3,
	0, 3, 5, 2, 3, 0, 2, 3, 2, 3,
	2, 6, 4, 7, 2, 6, 4, 7, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 2, 1,
	2, 2, 3, 2, 4, 3, 2, 2, 1, 2,
	1, 3, 3, 1, 2, 1, 2, 1, 2, 1,
	1, 3, 5, 4, 6, 4, 3, 0, 1, 3,
	2, 4, 2, 4, 1, 6, 3, 1, 1, 5,
	3, 2, 6, 3, 3, 4, 4, 3, 1, 3,
	2, 1, 3, 1, 2, 1, 1, 2, 2, 3,
	1, 1, 1, 1, 1, 3, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 2, 3, 3, 1, 1, 1, 1, 1, 2,
	2, 5, 7, 3, 3, 3, 3, 4, 4, 4,
	3, 4, 4, 3, 4, 4, 5, 3, 5, 5,
	5, 3, 3, 3, 4, 3, 4, 3, 5, 4,
	5, 3, 4, 5, 3, 4, 3, 4, 3, 3,
	4, 4, 5, 0, 1, 1, 3, 2, 4, 3,
	3, 5, 4, 3, 5, 3, 5, 4, 6, 4,
	6, 4, 1, 0, 3, 4, 4, 5, 7, 5,
	3, 3, 2, 0, 4, 2, 3, 4, 2, 3,
	3, 3, 4, 3, 3, 3, 3, 4, 3, 1,
	1, 1, 2, 3, 2, 3, 6, 6, 7, 9,
	7, 9, 3, 4, 5, 5, 5, 3, 5, 2,
	0, 1, 1, 1, 1, 3, 2, 2, 2, 1,
	2, 0, 3, 3, 2, 10, 13, 0, 2, 3,
	9, 12, 0, 2, 3, 1, 1, 2, 2, 2,
	2, 1, 0, 1, 0, 1, 3, 1, 1, 1,
	1, 3, 8, 0, 1, 1, 0, 2, 1, 0,
	1, 0, 9, 9, 3, 1, 3, 7, 1, 3,
	11, 3, 2, 0, 3, 1, 2, 2, 3, 2,
	6, 2, 1, 1, 2, 4, 2, 5, 5, 5,
	2, 8, 9, 6, 5, 3, 1, 5, 8, 5,
	11, 3, 0, 2, 4, 3, 3, 1, 5, 1,
	3, 1, 2, 0, 1, 2, 2, 0, 1, 3,
	3, 2, 2, 1, 1, 4, 0, 3, 0, 2,
	2, 2, 0, 1, 1, 2, 2, 0, 3, 3,
	2, 1, 1, 2, 2, 1, 2, 1, 5, 8,
	4, 1, 0, 1, 2, 2, 1, 2, 3, 2,
	2, 3, 2, 2, 2, 2, 2, 3, 1, 4,
	2, 4, 7, 3, 3, 0, 3, 6, 3, 1,
	1, 8, 7, 5, 0, 1, 6, 7, 6, 5,
	3, 4, 14, 17, 14, 17, 4, 0, 2, 2,
	0, 1, 0, 1, 3, 2, 2, 0, 1, 1,
	0, 6, 6, 8, 6, 8, 6, 8, 6, 8,
	6, 8, 1, 0, 2, 0, 2, 2, 3, 3,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	3, 2, 3, 2, 2, 2, 2, 2, 2, 1,
	1, 0, 2, 2, 1, 0, 1, 3, 2, 0,
	2, 1, 1, 0, 1, 3, 1, 0, 1, 1,
	1, 1, 2, 3, 2, 2, 8, 11, 3, 3,
	0, 3, 0, 3, 0, 3, 0, 1, 0, 6,
	7, 3, 6, 3, 1, 3, 1, 4, 2, 1,
	3, 1, 3, 8, 5, 3, 4, 3, 0, 2,
	2, 0, 10, 3, 2, 0, 1, 3, 1, 1,
	3, 3, 5, 1, 1, 3, 3, 2, 3, 4,
	3, 4, 5, 0, 2, 2, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 8, 8, 8, 2, 4,
	4, 4, 2, 2, 2, 2, 3, 1, 3, 6,
	1, 0, 1, 0, 1, 0, 1, 1, 0, 1,
	5, 1, 0, 1, 0, 3, 1, 3, 2, 4,
	5, 2, 2, 1, 1, 1, 0, 2, 5, 2,
	3, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	3, 0, 2, 0, 4, 2, 5, 3, 2, 0,
	1, 3, 3, 5, 1, 1, 1, 1, 1, 3,
	2, 4, 4, 0, 8, 4, 3, 4, 1, 5,
	3, 4, 5, 1, 5, 1, 3, 2, 0, 3,
	0, 2, 3, 1, 3, 2, 0, 3, 5, 6,
	4, 6, 4, 3, 2, 1, 0, 5, 1, 0,
	2, 2, 2, 1, 1, 0, 1, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 2, 1, 0, 2, 5, 7, 2, 1,
	1, 2, 4, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 2, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 5, 4, 1, 2, 1, 4,
	1, 1, 2, 1, 1, 1, 1, 1, 0, 1,
	2, 5, 1, 4, 2, 5, 1, 4, 3, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 1, 0, 1, 4, 1,
	3, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 5, 4, 6, 3, 5, 4,
	6, 4, 6, 5, 7, 3, 3, 3, 3, 3,
	4, 3, 2, 4, 2, 3, 3, 4, 3, 4,
	3, 4, 5, 6, 6, 7, 6, 7, 6, 7,
	3, 4, 4, 1, 3, 1, 3, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 6, 2, 1, 5, 1, 1, 1,
	1, 2, 1, 5, 5, 3, 1, 1, 1, 2,
	2, 2, 4, 3, 5, 6, 8, 6, 5, 4,
	3, 4, 1, 1, 1, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 6, 6, 8, 8, 6,
	4, 6, 6, 6, 4, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 3, 4, 3,
	4, 3, 4, 4, 3, 6, 5, 5, 5, 4,
	4, 3, 4, 3, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 2, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 1, 1, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	2, 3, 1, 2, 3, 2, 3, 2, 3, 1,
	0, 1, 3, 1, 3, 3, 3, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	1, 2, 3, 0, 3, 3, 2, 2, 1, 2,
	2, 3, 2, 1, 1, 1, 5, 1, 2, 4,
	2, 0, 1, 0, 3, 5, 1, 0, 1, 2,
	1, 0, 1, 3, 3, 2, 1, 1, 1, 3,
	1, 3, 3, 1, 1, 1, 1, 5, 3, 1,
	1, 3, 1, 2, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 7, 1, 7, 5, 3, 1, 1,
	1, 1, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 455, -79, -49, -47, -82, -83, -67,
	-84, -78, -96, -100, -88, -102, -139, -3, -35, -37,
	-50, -66, -68, -77, -86, -85, -87, -89, -93, -92,
	-81, -41, -97, -101, -110, -140, -141, -142, 82, 68,
	122, 104, 109, 155, 286, 315, 325, 309, -105, -106,
	344, -36, -48, -99, -98, -4, -10, 27, 39, -38,
	-39, -40, 53, -58, -55, -52, -61, -452, 84, -422,
	-69, -72, -74, -456, 114, 128, 172, 278, -90, -91,
	311, 313, 129, -43, -42, 123, -150, -152, -103, -104,
	-143, -111, -112, -113, -114, -115, -116, -117, -118, -119,
	-120, -121, -122, -123, -124, -125, -126, -127, -128, -129,
	-130, -131, -132, -133, -134, -135, -136, 347, 392, 40,
	356, 69, 117, 319, 21, -5, -6, -7, -8, -9,
	-11, -23, -51, -53, -54, -56, -57, -65, -59, -60,
	-421, -70, -71, -73, -75, -76, 310, -153, -151, 452,
	405, -13, -18, -19, -14, -15, -17, -20, -16, -24,
	-29, -30, -26, -27, -25, -28, -31, -32, -33, -34,
	-21, -22, -12, 423, 431, -156, -154, -155, -157, 332,
	413, 370, 455, 455, 455, 455, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	455, 455, -200, -205, -206, -207, -199, -175, -393, -396,
	4, -391, -394, 134, 180, 247, 21, 22, 23, 24,
	25, 27, 37, 38, 39, 40, 43, 45, 46, 49,
	50, 51, 52, 53, 54, 57, 62, 67, 68, 69,
	70, 71, 72, 77, 74, 75, 76, 79, 81, 82,
	83, 86, 87, 95, 96, 97, 98, 99, 100, 104,
	107, 106, 109, 112, 113, 114, 116, 118, 119, 122,
	123, 126, 124, 376, 125, 127, 128, 129, 130, 140,
	141, 142, 144, 145, 147, 149, 153, 154, 156, 160,
	162, 163, 164, 165, 171, 172, 174, 175, 181, 176,
	182, 186, 189, 188, 190, 191, 192, 183, 197, 201,
	202, 203, 205, 206, 209, 210, 211, 212, 215, 214,
	217, 220, 221, 224, 225, 228, 229, 231, 232, 235,
	233, 236, 234, 237, 240, 238, 239, 242, 243, 245,
	244, 169, 252, 253, 255, 256, 257, 272, 260, 261,
	262, 265, 268, 271, 273, 274, 275, 276, 277, 278,
	279, 281, 282, 284, 286, 288, 290, 291, 292, 293,
	294, 295, 297, 298, 300, 301, 302, 303, 304, 309,
	306, 307, 308, 310, 311, 312, 313, 315, 317, 318,
	319, 320, 322, 324, 345, 346, 358, 325, 326, 327,
	328, 329, 330, 331, 335, 339, 336, 337, 338, 340,
	333, 334, 341, 342, 344, 347, 349, 351, 352, 355,
	356, 357, 359, 362, 363, 364, 360, 361, 354, 369,
	367, 368, 371, 372, 373, 374, 375, 377, 386, 387,
	389, 392, 393, 394, 384, 396, 397, 400, 401, 402,
	403, 404, 409, 405, 407, 410, 411, 412, 418, 417,
	424, 425, 427, 428, 429, 32, 41, 42, 44, 47,
	58, 59, 60, 63, 101, 102, 121, 131, 132, 143,
	157, 159, 166, 167, 168, 187, 193, 195, 199, 218,
	250, 251, 266, 270, 283, 285, 296, 321, 350, 365,
	379, 380, 381, 382, 388, 390, 413, 414, 415, 419,
	426, 258, -193, 2, -175, -175, 286, 26, 2, 26,
	282, 334, 372, 374, 2, -444, -245, 2, 26, -179,
	-175, 84, 155, 332, -193, 2, -444, -245, 24, 2,
	-175, 2, -180, 2, 325, -175, 455, 79, 225, 62,
	321, 341, -108, 387, -107, 379, 327, -109, -383, 2,
	240, -175, 455, 455, 455, 455, 2, 370, 275, 417,
	333, 406, 97, 293, 180, -439, 2, 4, -394, -391,
	-209, -208, 370, 97, -207, -199, 445, -206, 455, 455,
	455, 2, 202, 203, 292, 291, 341, 342, 455, 455,
	455, 2, 25, 56, 78, 81, 103, 130, 150, 153,
	263, -453, 232, 272, 290, 327, 340, 369, 377, 389,
	-457, 357, 57, 406, -464, 394, 112, -289, 97, 374,
	372, 225, 154, 401, 317, 158, 399, 107, 186, 404,
	403, 455, 455, 25, 56, 65, 81, 112, 130, 150,
	153, -455, 272, 290, 324, 327, 340, 369, 377, 394,
	389, 2, 417, 333, 370, 180, 97, 406, 317, 289,
	-79, 2, 452, 29, 344, -149, 370, 196, 2, -175,
	202, 203, 2, 455, 455, -439, 2, 202, 203, 2,
	196, 2, 57, 329, 455, 455, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	455, 2, -137, 341, 357, 164, 39, 62, 26, 67,
	276, 98, 156, 180, 181, 210, 78, 79, -290, 38,
	203, 202, -341, 371, 328, 334, 367, 387, 84, 407,
	318, 429, 294, 124, 4, 97, 240, 343, 379, 225,
	71, -463, 2, 370, -467, 2, 387, 387, 2, -467,
	2, -467, 2, -178, 2, 387, 383, -468, 387, 426,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	455, 455, -151, -153, -152, 455, 455, 455, 455, 455,
	-137, 341, 2, 62, 26, -471, 148, -239, -240, 398,
	194, 120, 264, -150, -152, 2, -421, -381, 2, -316,
	-397, -318, 443, 444, 438, 246, 430, -329, 103, 399,
	258, -396, -319, -331, 121, 321, -259, 8, 9, 5,
	6, 7, -182, -361, -325, -369, 391, 133, 249, -212,
	457, 10, 452, -418, -152, -330, 33, 159, 55, -385,
	-211, -363, -371, -367, -368, -472, 45, 51, 50, 377,
	239, 335, 336, 351, 337, 338, 43, 409, 176, 255,
	257, 188, 4, 195, -210, -199, -415, -416, -391, -392,
	187, 193, 189, 350, 190, 191, 192, 42, 296, 144,
	145, 143, 113, 102, 101, 251, 47, 46, 44, 414,
	-372, 99, 379, 380, 381, 382, 205, 206, -175, -393,
	65, 89, 90, 88, 93, 92, 94, 91, 343, 406,
	56, 32, 166, 167, 199, 250, 168, 63, -417, 361,
	85, 152, 185, 170, 198, 200, 204, 219, 222, 241,
	248, 267, 269, 316, 348, -473, 415, 131, 132, 270,
	283, 365, 388, 390, 157, 218, 58, 59, -423, 297,
	-424, -193, -423, 455, 455, 456, 455, -233, -234, -235,
	2, 26, 110, 452, 2, -345, 2, 450, -349, -152,
	213, -348, 452, -346, -200, 259, -419, 322, -415, -416,
	-182, -199, -211, 4, -236, 452, 454, 97, 370, 66,
	2, -284, 452, -175, 26, 258, 383, 456, -327, 452,
	258, 151, 261, -175, 2, 2, 345, 2, 452, -108,
	60, 387, -304, 2, -305, -172, -173, -174, -354, 201,
	288, 295, 432, 429, -381, -449, 151, 435, 383, -381,
	-260, 454, 2, -349, 166, -200, 2, -197, -384, 4,
	-391, -394, -392, -395, 65, -393, 26, 28, 29, 30,
	31, 33, 34, 35, 36, 48, 55, 56, 61, 64,
	66, 78, 84, 88, 89, 91, 90, 92, 93, 94,
	103, 105, 108, 110, 111, 115, 117, 120, 133, 135,
	148, 150, 151, 155, 158, 161, 173, 184, 194, 196,
	213, 216, 223, 226, 227, 246, 249, 254, 258, 259,
	263, 264, 280, 287, 299, 314, 332, 343, 353, 366,
	370, 378, 383, 385, 391, 398, 399, 406, 408, 416,
	420, 421, 422, 423, -396, 2, -349, 166, 2, -202,
	166, -349, -205, 2, -389, 166, -387, 10, -386, 5,
	4, -391, -394, -392, 2, -184, -175, 2, -196, -384,
	2, -215, 166, -200, -201, -205, 383, 456, -251, -208,
	-209, -244, -175, 454, -316, 2, -97, 2, -316, 166,
	2, -97, 166, 2, -316, 166, 2, -97, 166, 2,
	2, 2, 389, 2, 81, 166, -175, 370, 96, 2,
	308, -454, 324, 393, 417, 2, 2, 2, 2, 2,
	2, 2, 370, 333, -465, 297, -189, 2, -175, 148,
	-389, 166, 2, -389, 166, 2, -203, -205, -203, 180,
	197, -184, 166, 2, 374, 372, 374, 372, 151, 2,
	196, 2, 196, 2, -350, 2, -351, -200, 2, 2,
	2, 2, 2, 166, -175, 370, 96, 2, 212, 2,
	2, 2, 2, 2, 2, 2, 2, 2, -253, 166,
	2, -200, -253, 166, 2, -253, 166, 2, -216, 166,
	2, -215, -184, 166, 2, -390, 166, 2, -389, -390,
	166, 2, -358, 2, -357, -386, 413, -79, 452, 341,
	452, -389, -200, -200, -316, -97, 151, -316, -97, -149,
	148, 2, 97, 370, -137, 2, 148, 408, 2, 8,
	2, -389, 328, 294, 140, 2, 345, 2, 62, -290,
	429, 151, 2, 151, 2, -274, 2, 423, -442, 2,
	258, 151, 2, 151, 2, 151, 2, 151, 2, 151,
	2, 291, 342, 203, 2, -97, 420, -316, 420, 2,
	386, 211, 125, 151, -274, 2, 151, 2, 151, 2,
	5, 2, 201, 288, 358, 2, -200, -458, 2, 370,
	417, 333, 2, 2, 74, 75, 151, 2, 151, 429,
	2, -268, -349, -303, -304, -303, 383, -180, -471, -239,
	-240, -137, 345, 2, 2, -471, -267, -292, -293, 223,
	135, 254, -273, 26, 110, -273, -273, 49, 453, 453,
	11, 12, 64, 37, 443, 444, 445, 446, 146, 447,
	448, 441, 442, 440, 433, 434, 437, 207, 208, 80,
	436, 435, 73, 230, 323, 136, 137, 138, 139, 305,
	177, 178, 179, 14, 15, 16, 30, 263, 222, 430,
	170, 348, 438, 17, 18, 19, 198, 200, 248, 41,
	173, -181, -217, -316, -316, -316, -316, -316, 269, 452,
	-265, -311, 450, -152, 452, 452, 452, 5, 452, 5,
	-380, 8, -152, -316, -329, 453, -257, 452, -152, -329,
	-324, 452, 321, 450, 452, -332, -316, 454, -425, 424,
	-365, 452, 285, -364, 452, -364, -364, 418, -362, 452,
	431, 425, 452, -362, 452, 452, 148, 452, 452, 452,
	452, 452, 452, 452, 452, 452, 452, 452, 452, 452,
	418, 452, 452, 452, 452, 452, 452, 452, 452, 452,
	456, -423, -236, 452, -261, -352, -316, 445, -261, -261,
	258, -254, -316, 85, -277, 204, 241, 152, 219, 316,
	185, -380, -80, -66, -77, -85, -97, -110, -141, -142,
	-313, 457, -340, 431, -152, -346, -199, -152, -348, 452,
	-345, -340, 445, -200, 452, 151, 452, 454, 151, -244,
	-384, -184, -200, -210, -211, 109, -254, -439, -244, -179,
	34, -326, -359, -360, -373, -361, -370, -366, -369, 301,
	302, 300, 304, 303, 45, 51, 50, 377, 239, 335,
	336, 351, 337, 338, 43, 409, 176, 255, 257, 188,
	4, 44, 414, -372, 195, 187, 193, 189, 350, 190,
	191, 192, 42, 296, 144, 145, 143, 113, 102, 101,
	251, 47, 46, 99, 379, 380, 381, 382, 205, 206,
	415, 361, 58, 59, -439, -244, 148, -383, -254, 34,
	-304, 2, -469, 456, 221, -219, 229, 245, 163, 259,
	427, 252, -388, 5, 4, -325, -337, 103, 225, -369,
	9, 444, -377, 8, 443, -382, -381, 87, 454, -384,
	-161, 306, -160, 23, 27, 114, 411, 126, -226, 182,
	275, 121, 354, 402, -446, -447, 326, 375, 376, 76,
	252, 306, 121, -270, -272, 34, 95, 243, 271, 52,
	174, 234, 235, 356, 419, 121, 306, 423, 121, -447,
	306, -447, -163, 354, 402, -446, -447, 326, 306, -162,
	-226, 121, 457, -94, -389, 452, -251, 456, 456, -384,
	445, 121, 121, 121, 121, 2, 2, 246, 2, 2,
	2, 153, -457, -455, 2, 2, 2, -200, 166, -202,
	166, 2, -205, 417, -238, 258, -441, -252, 370, -200,
	-171, -420, 423, 246, 246, 34, 452, 2, -186, 166,
	2, -176, -175, 180, -420, 246, -350, -213, -200, -213,
	344, -193, 34, -313, 121, 2, 2, 2, -175, -164,
	456, 54, 312, 121, -164, 121, -164, 121, -164, 456,
	121, -164, 121, 456, 121, 121, 453, 456, -358, -389,
	-147, 423, 151, 84, 452, 452, -149, -95, -94, -389,
	-441, -184, 2, -200, 2, 370, 205, -389, -389, -389,
	-383, 26, 346, 2, 291, 342, 75, -200, 370, 97,
	180, 68, -443, 148, -440, 317, -439, -200, 97, -200,
	97, -200, 97, -200, -200, 2, 2, 2, 2, 72,
	72, 148, 2, 386, 2, 386, 2, -175, -175, -175,
	221, -200, 148, 370, 180, 97, 370, -164, 456, -180,
	-471, -267, -383, -471, -293, -292, -295, -316, 26, -298,
	142, 242, -316, -318, -151, -151, -151, -241, -342, -316,
	287, 180, -374, -359, -359, -198, -384, 379, -316, -316,
	-316, -316, -316, -316, -316, -316, -316, -316, -316, -316,
	-316, -316, -316, -316, -316, -316, -316, -316, -316, -316,
	-316, -316, -316, -316, -316, -316, -316, -316, -316, -316,
	-316, -316, -316, 222, 170, 348, 41, 173, -316, 383,
	-316, -316, -316, -316, 238, 246, 249, 391, 133, 400,
	110, 252, -474, 366, 36, -322, -152, -258, 452, -336,
	31, 353, 26, -329, 452, 2, -311, -316, -312, -255,
	-254, -254, 453, 416, 26, 110, 445, 2, 8, -285,
	-287, 428, 237, 100, 165, 236, -286, 331, 453, 456,
	34, 453, -316, -255, -328, -324, -254, -335, -334, 420,
	-384, 445, -426, 141, 158, 8, -378, 8, -378, 379,
	379, 8, -378, -378, 452, 453, 2, 453, 2, 453,
	2, 453, 2, 453, 2, -316, -316, -316, -316, -316,
	-316, -316, -254, -279, 2, -375, -254, 4, 428, 237,
	100, 165, 236, 331, -279, 2, -280, 2, -316, -254,
	-281, -317, -318, 443, 444, 438, -329, -282, 2, -316,
	-255, -316, 48, 216, 385, -283, -316, 151, -254, -254,
	2, -254, 2, -424, 34, -254, -247, 456, 151, 34,
	4, -247, -247, 452, 453, 456, -278, 162, 233, 228,
	-278, -345, -277, 204, -275, 267, -275, -275, -437, 452,
	451, 455, 455, 455, 455, 455, -340, -185, 450, 458,
	-384, -339, -338, 34, -193, 265, -340, -340, 454, 453,
	-339, -200, 452, -254, -384, 359, 453, 454, 198, 198,
	198, 322, 453, 383, 423, -79, 260, 453, 456, -246,
	33, 450, -287, 452, -376, 418, 452, 452, 151, -245,
	-449, 453, 387, -305, -218, 295, 352, 307, 339, 368,
	9, 8, 8, 456, -384, 456, -450, 78, 383, 66,
	-307, 166, 66, -398, -187, 78, -399, -175, 61, 399,
	287, 150, -450, 78, -450, 78, 78, 344, 357, 49,
	-349, 37, 37, 26, -97, 217, 151, 429, 370, 180,
	383, -349, -272, -359, 95, 234, 235, 49, -379, -377,
	444, -379, 49, -379, -379, -379, 423, -202, -349, 383,
	277, -389, 383, 456, 37, 37, 26, -97, 217, 151,
	383, -215, -185, -355, -354, -390, -208, -175, 454, -316,
	-97, -316, -97, 121, 2, -465, 212, 452, -222, 246,
	-271, -270, 246, -204, 2, -200, 151, -244, -356, 196,
	456, -252, 277, 121, 121, 452, 118, 293, 2, 258,
	246, -186, 166, -167, 373, 121, -310, -309, 421, -299,
	-97, 452, 103, 34, -299, -262, -263, -353, -264, -187,
	452, -193, -175, 2, -200, -253, -253, -253, -215, -216,
	-184, -389, -390, -390, -79, -357, 453, 453, -146, 262,
	-145, -175, 5, -149, 408, -221, -308, -307, -402, -403,
	-398, 222, 180, 399, 197, 134, -237, -188, -187, 96,
	-147, -354, 456, -147, -147, -355, -355, -200, 148, 2,
	2, -274, -200, -184, -215, -244, -244, -184, -184, -184,
	-97, -316, 341, 148, 148, 454, -274, 293, 97, 370,
	275, 180, -200, -215, -184, -200, -349, -471, -296, -377,
	452, -297, 321, 322, 456, -159, 35, 108, 209, -200,
	429, 119, -316, -316, 383, -474, 366, -322, 119, -316,
	238, 249, 391, 133, 400, 110, 252, 151, 452, -317,
	-317, 453, -256, -316, -316, 451, 460, 453, -240, 456,
	-239, -316, -254, -254, 453, 453, 383, 383, 383, 383,
	452, 454, -254, -244, 451, 451, 456, 453, -333, -334,
	115, -316, 454, -431, 268, 452, 452, 453, 453, 456,
	453, 429, 429, 453, 453, 453, -316, 34, 456, 456,
	456, 453, 456, 456, 456, 453, 453, 151, 453, 453,
	-288, 280, 453, 11, 12, 443, 444, 445, 446, 146,
	447, 448, 441, 442, 440, 433, 434, 435, 73, 230,
	323, 14, 15, 16, 198, 173, -317, -317, -317, 453,
	-320, -321, 151, 148, 34, -283, -283, -283, 453, 151,
	-254, 453, 453, 452, 453, -310, -352, -248, 2, -345,
	-195, -384, -310, -310, -254, -316, 204, 204, -276, 408,
	258, -278, -345, -338, 453, -438, -380, -340, -339, -380,
	-315, -314, 149, 35, 108, 244, 169, -193, -236, -339,
	-339, -384, -340, 453, -249, -347, -419, -240, 454, -384,
	-138, 5, 249, -138, -138, -244, 24, 281, -359, 450,
	451, 8, 8, 452, -378, -378, -244, 151, -381, -304,
	397, 70, 295, 379, -381, -160, 306, -187, -187, -200,
	246, -307, 166, -166, 246, -359, -194, -175, 452, 452,
	209, 209, -187, -194, 166, -187, 166, -194, -194, -445,
	295, 253, -316, 224, 293, 247, -161, 306, -97, -97,
	-97, 452, -449, 408, 109, -200, -215, -204, 306, -210,
	-379, -379, -270, 306, -202, -389, 423, -184, -162, -97,
	-97, -97, 452, -185, -163, 306, -144, 175, 453, 445,
	-175, 417, -175, -220, -223, -221, -187, -459, 425, 423,
	121, 121, -236, -214, -200, 450, -147, -389, -200, -389,
	-389, -389, 2, 452, 2, -200, 121, 258, 246, -168,
	116, -470, 435, -184, -240, -316, -269, -302, 314, 258,
	-237, 413, -193, -269, -250, 456, 151, 435, 454, -237,
	2, -164, -164, -164, -164, -164, -79, -147, 456, 452,
	435, 435, 452, -389, -389, 453, 456, -200, -186, 180,
	180, -192, -176, 453, 456, 454, 452, -147, -94, 151,
	-44, 423, 370, 341, 341, -175, -196, -184, -200, -197,
	-215, -297, -316, -342, -200, 457, -316, -316, 119, 119,
	-316, -317, -317, -316, 119, 151, 452, -316, -326, 30,
	30, 453, 456, -312, -316, 453, 416, -240, -240, 453,
	5, 237, 165, 236, -286, 236, -286, -286, 8, 445,
	-384, 453, -324, 117, -316, 378, -384, 445, -432, -190,
	452, -175, 421, -239, -378, -362, -362, 453, -374, -359,
	-316, -316, -316, -316, -316, -316, -320, -316, -374, -359,
	-317, -317, -317, -317, -317, -317, -317, -317, -317, -317,
	-317, -317, -317, -317, -317, -317, -317, -317, -317, 110,
	246, 252, -317, -321, -320, -316, -316, -359, 453, 453,
	453, -254, -79, -266, 158, -355, 456, -266, -266, 453,
	-345, -345, 452, -316, 204, 451, 453, 456, -339, 451,
	456, 459, 435, -236, 454, -338, 453, 456, -301, 34,
	453, -384, 261, 5, 8, 450, 451, 453, -378, 453,
	453, -244, -316, 383, 383, 121, 246, 410, -404, -399,
	-316, -242, -343, -316, 452, 452, -158, 114, 344, -451,
	2, 121, -164, 121, -164, 427, 452, 452, 383, 423,
	-254, -316, -148, 103, -383, -447, -447, 383, 383, 277,
	423, -254, 383, -147, 151, 2, 2, 2, 453, 453,
	456, -405, 34, 256, -175, -200, -202, 34, -62, 423,
	-354, -380, -171, 2, -291, 408, -185, -200, 121, -169,
	215, -470, -387, -420, -294, -292, -269, -261, 247, 77,
	453, -310, -263, -248, -316, 2, 453, -145, -146, -389,
	-389, -389, -147, -149, -149, -308, 2, 452, -186, -176,
	452, -149, -188, 2, -390, -97, 262, -200, -274, -228,
	-227, 275, 252, -228, 259, 453, -159, -185, -316, -316,
	119, 30, 30, -316, -316, -326, 453, -316, -316, -254,
	451, 5, -316, 453, 453, 453, -316, 454, -433, -175,
	-316, 453, 453, 453, 453, 456, 456, 453, 453, 453,
	453, -321, 151, 110, 252, 452, 453, 453, -323, 161,
	49, -345, -323, -323, -276, -244, -345, -313, -380, -314,
	-185, 450, -384, -347, 452, 454, 451, 2, 450, 453,
	-187, -187, -307, 121, -406, 78, -408, 64, 134, 84,
	246, 249, 399, 287, 61, 103, 299, 34, 453, 453,
	456, -159, -242, -244, 246, 363, 103, 246, 103, 96,
	394, -187, -194, -244, -244, -200, 127, 453, 456, 435,
	-204, -202, -389, 127, 453, -185, -390, -224, 183, -187,
	-403, -400, -401, 287, -407, -409, 134, 287, -97, 2,
	452, -222, -271, -97, 262, 451, 452, -175, 258, 452,
	-185, -170, 214, -470, -387, -167, -269, -300, 452, 258,
	-97, -240, 435, 453, 453, 96, 96, -242, 452, 452,
	-244, 96, 453, -45, -46, 180, 78, 279, -197, 370,
	180, -159, -316, -316, -316, 453, -240, -384, 445, -427,
	275, 453, -316, -316, -317, 151, 452, -326, -428, 422,
	-316, -254, -428, -428, 453, -340, -380, 2, 450, 2,
	-307, -194, -198, -191, -175, 134, 166, 249, 209, 452,
	-317, -200, 452, 2, -461, 105, 184, -306, -462, 83,
	364, -343, 453, 453, 249, 249, -316, -359, -164, -164,
	453, 453, -316, 383, -383, 82, -381, -316, 383, -225,
	-226, 173, -405, 209, -191, 209, -460, 423, -220, -459,
	-63, -64, 384, -354, -242, -200, -242, 258, -470, -387,
	-168, 111, -244, 78, -294, -322, -147, 452, 452, 453,
	-242, -242, 453, 452, -147, 456, 26, 452, 26, 452,
	-200, -215, 453, -240, 49, 453, 453, -317, -326, 453,
	-429, -430, -190, -339, 451, 2, -408, -191, 246, -316,
	-177, 452, -316, 184, 106, 171, -224, 452, 299, -183,
	64, 452, 452, 452, 435, 151, 452, -459, 273, 452,
	96, 243, 453, 34, -64, 9, 453, -291, 453, -200,
	-387, -169, 403, 247, 453, -194, -269, -390, -390, -306,
	453, 453, -390, -46, -244, -244, -434, 293, 322, 160,
	-254, 453, 456, 34, 121, 453, -410, 231, -175, 453,
	106, 171, -225, -244, -200, -448, 408, -198, -230, -229,
	-227, -232, -231, -227, -254, -381, 82, 273, -254, -200,
	-243, -344, -187, 96, -224, -97, -306, 452, -306, 452,
	-170, 344, -309, 453, 453, -224, -306, 453, 453, 453,
	453, -435, -436, 41, 396, 87, -316, -435, -435, -430,
	-432, 134, -411, -414, -413, 258, 349, 152, 274, 453,
	363, 419, -461, 453, -236, -316, 453, 456, 413, 453,
	456, 413, 453, 151, 453, 452, 453, 456, -225, -460,
	-224, -242, -224, -242, -262, -147, -147, -225, -224, -147,
	-436, 284, 147, 321, 284, 147, -191, -413, 258, -414,
	258, 403, 107, -410, -229, 173, -231, 151, 273, -244,
	-344, -459, -225, 453, -225, 453, -310, -225, 30, -412,
	243, 312, 54, 344, -412, -411, 452, 452, 453, -466,
	421, -306, -466, -306, -436, 22, 249, 103, -461, -254,
	-254, -165, 54, 312, 2, -224, -224, 453, 453, -225,
	-225, -225, 383, -466, -466, 452, -254, 453, -225,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 359, 360, 362,
	363, 364, 366, 367, 369, 371, 373, 375, 376, 378,
	380, 382, 383, 384, 385, 386, 388, 390, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 448, 450,
	0, 913, 915, 917, 919, 25, 26, 0, 0, 184,
	186, 188, 0, 213, 215, 217, 218, 220, -2, 0,
	313, 314, 316, 318, -2, -2, 0, 0, 437, 439,
	0, 0, 0, 459, 460, 0, 1003, -2, 453, 455,
	457, 520, 522, 524, 526, 528, 530, 532, 533, 535,
	537, 539, 541, 543, 545, 547, 549, 551, 553, 555,
	557, 559, 561, 563, 565, 567, 569, -2, -2, -2,
	0, -2, -2, -2, 931, 29, 31, 33, 35, 37,
	39, 58, 269, 270, 272, 274, 276, 279, 280, 282,
	1042, 320, 322, 324, 326, 328, 0, -2, 1054, 0,
	0, 41, 42, 43, 44, 45, 46, 47, 48, 65,
	66, 67, 68, 69, 70, 71, 72, 51, 53, 54,
	60, 61, 63, 0, 0, 1018, 1020, 1022, 1024, -2,
	0, 0, 7, 9, 11, 13, 15, 17, 19, 21,
	361, 365, 368, 370, 372, 374, 377, 379, 381, 387,
	389, 391, 808, 1646, 1660, 1661, 1662, 1665, 1666, 1667,
	1668, 1669, 1670, 2001, 2081, 2082, 1689, 1690, 1691, 1692,
	1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702,
	1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712,
	1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722,
	1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732,
	1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742,
	1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752,
	1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762,
	1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772,
	1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782,
	1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792,
	1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802,
	1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812,
	1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822,
	1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832,
	1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842,
	1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852,
	1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862,
	1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872,
	1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882,
	1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892,
	1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902,
	1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912,
	1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922,
	1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932,
	1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942,
	1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952,
	1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962,
	1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972,
	1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982,
	1983, 0, 415, 413, 1640, 416, 1837, 418, 420, 307,
	308, 309, 310, 311, 312, 0, 430, 424, 429, 431,
	433, 434, 435, 436, 410, 408, 0, 430, 1692, 428,
	911, 912, 906, 907, 1870, 941, 449, -2, -2, -2,
	1970, -2, 481, -2, 488, 1973, 1872, 491, 0, 493,
	-2, 496, 914, 916, 918, 27, 28, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 148, -2, -2, -2,
	-2, 0, 0, 1728, 1616, 1662, 1619, 1614, 185, 187,
	189, 190, 0, 0, 0, 0, 0, 0, 214, 216,
	219, 221, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 0, 0, 0, 0, 0, 0,
	864, 0, 0, 0, 0, 0, 0, 0, 0, 715,
	716, 0, 0, 721, 859, 860, 881, 0, 0, 0,
	0, 315, 317, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 319, 0, 0, 0, 0, 0, 0, 0, 247,
	353, 354, 0, 1043, 0, 0, 0, 0, 165, 156,
	0, 0, 704, 438, 440, 0, 151, 0, 0, 910,
	0, 167, 0, 0, 454, 456, 458, 521, 523, 525,
	527, 529, 531, 534, 536, 538, 540, 542, 544, 546,
	548, 550, 552, 554, 556, 558, 560, 562, 564, 566,
	568, 570, 571, 0, 0, 0, 0, -2, -2, 0,
	0, -2, -2, 0, 0, 0, 0, 0, 0, 0,
	-2, 0, 0, -2, -2, -2, 0, 0, 0, -2,
	-2, 0, 0, 0, 574, 576, 577, 578, 0, 625,
	642, 0, 850, 1044, 943, 921, 934, 943, 923, 924,
	925, 926, 927, 932, 933, 936, 0, 928, 929, 930,
	30, 32, 34, 36, 38, 40, 271, 273, 275, 277,
	281, 283, -2, 1016, 1017, 321, 323, 325, 327, 329,
	441, 0, 443, 0, 575, 1007, 0, -2, 0, 1048,
	1048, 1048, 0, 0, 1017, 1015, 0, 446, 447, 500,
	501, 1279, 0, 0, 0, 0, 0, 1514, 1363, 0,
	502, -2, 1394, 1396, 1949, 1970, 1513, 1398, 1399, 1400,
	1401, 1402, 0, 0, 1405, 0, 1407, 1408, 1409, 1410,
	0, 1412, 0, 1416, 1417, 1418, 0, 1954, 1593, 1658,
	-2, 1184, 1185, 1186, 1187, 1188, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1654, 0, 1485, 1432, -2, 1679,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1737, -2, -2, -2, -2, -2, -2, -2,
	1240, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1984, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444,
	0, 1938, 1955, 1956, 1961, 1963, 1957, 1946, 1455, -2,
	1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994,
	1995, 1996, 1997, 1998, 1999, 1241, -2, 1950, 1951, 1966,
	1967, 1972, 1977, 1978, 1953, 1962, -2, -2, 1034, 1845,
	1037, 808, 1035, 1019, 1021, 0, 1023, 0, 0, 0,
	1028, 1051, 1049, 0, 1085, 1032, 1033, 1043, 1103, 1126,
	0, 1108, 0, 1126, 1152, 0, 1113, 1865, 1433, 1434,
	0, 1662, 1659, -2, 0, 0, 0, 0, 0, 0,
	210, 411, 0, 417, 419, 0, 0, 0, 0, 0,
	0, 0, 0, 940, 451, 452, 0, 476, 0, 480,
	1945, -2, -2, 484, 944, 948, 949, 950, 951, 0,
	0, 0, 0, 0, 490, 0, 0, 477, 478, 494,
	497, 0, 49, 0, 1955, 1152, 50, 0, 1630, 1684,
	1685, 1686, 1687, 1688, 1984, 2000, 2002, 2003, 2004, 2005,
	2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015,
	2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025,
	2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035,
	2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045,
	2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055,
	2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065,
	2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075,
	2076, 2077, 2078, 2079, 2080, 52, 0, 1955, 55, 0,
	1955, 0, -2, 59, 0, 1955, 168, 169, 1675, 1676,
	1680, 1681, 1682, 1683, 62, 0, 1636, 64, 0, 1633,
	73, 0, 1955, 0, 1613, -2, 0, 0, 696, 1610,
	1615, 697, 1620, 0, 191, 192, 193, 194, 195, 1955,
	197, 198, 0, 200, 201, 1955, 203, 204, 0, 206,
	222, 223, 0, 225, 0, 1955, 0, 0, 0, 231,
	-2, 248, 0, 245, 0, 235, 236, 238, 239, 240,
	241, 242, 0, 0, 0, 865, 287, 285, 1641, 0,
	-2, 1955, 853, 856, 1955, 858, 870, 1644, 0, -2,
	0, 1041, 1955, 958, 717, 718, 719, 720, 0, 306,
	0, 971, 0, 973, 0, 993, 1158, 1103, 249, 250,
	251, 252, 253, 1955, 0, 0, 0, 258, 0, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 144, 1955,
	332, 351, 144, 1955, 335, 144, 1955, 338, 144, 1955,
	341, 1608, 144, 1955, 344, 345, 1955, 347, 170, 348,
	1955, 350, 0, -2, 404, 1648, -2, 356, 0, -2,
	0, 182, 0, 0, 702, 703, 0, 908, 909, 0,
	0, 461, 0, 0, 572, 573, 0, 0, 583, 584,
	585, 586, 1873, 1843, 1752, 590, 0, 593, -2, 0,
	0, 0, 597, 0, 601, 602, 603, 0, 701, 605,
	0, 0, 607, 0, 611, 0, 614, 0, 616, 0,
	618, -2, -2, -2, 629, -2, 0, 633, 0, 635,
	0, 0, 0, 0, 650, 651, 0, 656, 0, 659,
	660, 661, 0, 663, 664, 665, 666, 0, 668, 669,
	-2, -2, 673, 675, 0, 682, 0, 687, 0, 579,
	580, 144, 1156, 920, -2, 922, 0, 938, 1010, -2,
	0, 442, 0, 445, 1014, 1008, 1013, 1063, 1064, 0,
	0, 0, 0, 1046, 1047, 0, 0, 0, 1005, 1006,
	0, 0, 0, 0, 1519, 1520, 1521, 1522, 1523, 1524,
	1527, 1528, 1525, 1526, 1529, 1530, 0, 0, 0, 0,
	0, 1531, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1532, 1533, 1534, 0, 0, 1536, 0,
	1538, 0, 0, 0, 0, 0, 0, 1342, 1344, 1601,
	0, 0, 1535, 1284, 1285, 1286, 1321, 1322, 0, 0,
	1395, 1598, 1597, 1397, 0, 1550, 0, 1404, 0, 1276,
	1411, 1627, -2, 0, 1514, 1545, 0, 0, 1419, 1420,
	1421, 0, 0, 1550, 0, 0, 1592, 0, 1487, 0,
	1220, 0, 1221, 1222, 0, 1223, 1224, 1237, 1250, 0,
	0, 0, 0, 1254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1242, 0, 0, 0, 1573, -2, 0, 0, 0, 0,
	0, 1036, 0, 0, 1089, 1602, 1606, 1607, 1089, 1089,
	0, 0, 1551, 1149, 1149, 0, 0, 1145, 1145, 1145,
	1143, 1120, 0, 392, 394, 396, 398, 399, 400, 402,
	1126, 0, 1136, 0, 1126, 1126, 0, -2, 1108, 0,
	0, 1136, 1153, 1154, 0, 0, 0, 0, 0, 0,
	1663, 0, 0, 0, 1650, 0, 0, 0, 422, 432,
	1043, 0, 1553, 1175, 1169, 1178, 1179, 1180, 1181, 1227,
	1228, 1229, 1230, 1231, 1189, 1190, 1191, 1192, 1193, 1194,
	1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204,
	1205, -2, 1238, 1240, 1261, 1209, 1210, 1211, 1212, 1213,
	1214, 1215, 1216, 1217, 1218, 1219, 1233, 0, 1208, 1208,
	1208, 1225, 1226, 1249, 1260, 1252, 1260, 1256, 1176, 1177,
	1243, 1244, 1245, 1246, 0, 426, 0, 0, 0, 0,
	-2, 486, 0, 946, 0, 952, 511, 512, 513, 954,
	955, 0, 489, 514, 515, 516, 517, 518, 519, 0,
	825, 0, 827, 1622, 0, 487, 504, 492, 0, 498,
	74, 903, 110, 0, 903, 903, 0, 0, 131, 0,
	0, 0, 0, 0, 0, 98, 106, 86, 87, 0,
	0, 0, 0, 56, 833, 0, 836, 0, 0, 0,
	0, 0, 0, 0, 848, 0, 0, 0, 0, 97,
	0, 92, 76, 0, 0, 0, 100, 108, 0, 135,
	137, 0, 0, 1139, 152, 0, 695, 0, 0, 1663,
	1618, 0, 0, 0, 0, 224, 226, 0, 228, 229,
	230, 0, 864, 0, 237, 234, 278, 782, 1955, 832,
	1955, 830, 1645, 0, 0, 0, 304, 299, 0, 301,
	851, 0, 1040, 0, 0, 0, 0, 871, 0, 1955,
	876, 1632, 1671, 1672, 960, 0, 1164, 0, 974, 0,
	0, 1159, 0, 1161, 0, 255, 256, 257, 0, 330,
	0, 142, 143, 0, 333, 0, 336, 0, 339, 0,
	0, 342, 0, 0, 0, 0, 1043, 0, 0, 0,
	158, 0, 0, 0, 0, 0, 0, 182, 154, 182,
	182, 1139, 463, 1139, 465, 0, 0, 587, 588, 589,
	591, 592, 594, 595, -2, -2, 683, 653, 0, 0,
	0, 652, 604, 0, 689, 1861, 699, 606, 1728, 609,
	1728, 612, 1728, 615, 617, 620, 645, 628, 632, 0,
	0, 0, 637, 0, 639, 0, 641, 653, 654, 657,
	662, 667, 0, 0, 0, 0, 0, 849, 0, 937,
	1011, 1013, 444, 1009, 1061, 1062, 1067, 1071, 1072, 1075,
	1078, 1079, 1069, 1279, 1029, 1030, 1031, 1055, 1056, 890,
	0, 2081, 1280, 1170, 1281, 1282, 1629, 0, 1287, 1288,
	1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, -2, -2,
	-2, -2, -2, -2, -2, -2, 1305, 1306, 1307, 1308,
	1309, 1310, 1311, 1312, 1313, 1314, 1315, -2, -2, -2,
	1319, 1320, -2, 1537, 1539, 0, 1601, 0, -2, 0,
	-2, -2, -2, -2, 1339, 0, 1341, 1346, 1348, 1350,
	0, 0, 0, 0, 1600, 1360, 1584, 1585, 0, 0,
	1516, 1517, 1518, 1345, 0, 1364, 1599, 1596, 0, 0,
	1549, 1054, 1423, 0, 0, 0, 0, 1430, 0, 1628,
	1275, 1262, 1263, 1264, 1265, 1266, 1267, 1277, 1415, 1547,
	0, 1546, 0, 0, 0, 1557, 0, 1591, 1587, 0,
	1651, 1657, 1495, 0, 0, 0, 0, 1625, 0, 0,
	0, 0, 0, 0, 0, 1456, 1457, 1458, 1459, 1460,
	1461, 1462, 1463, 1464, 1465, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1467, 0, 1560, -2, -2, -2,
	-2, -2, -2, -2, 0, 1469, 0, 1471, 1551, 1570,
	0, 0, 1365, 0, 0, 0, 1514, 0, 1474, 1551,
	1578, 0, 0, 0, 0, 0, 1551, 0, 1583, 0,
	1481, 0, 1483, 1038, 0, 0, 1164, 0, 0, 0,
	1605, 1164, 1164, 0, 1084, 0, 0, 1146, 1147, 1148,
	0, 0, 1149, 0, 1140, 1144, 1141, 1142, 0, 0,
	1126, 393, 395, 397, 401, 403, 1136, 1100, 0, 0,
	1631, 1106, 1135, 0, 808, 1125, 1136, 1136, 0, -2,
	1110, 0, 0, 1054, -2, 183, 807, 0, 0, 0,
	0, 412, 414, 0, 0, 406, 0, 409, 0, 1165,
	1168, 0, 1182, 0, 0, -2, 0, 0, 0, 0,
	0, 479, 0, 945, 953, 0, 508, 0, 510, 0,
	826, 1624, 1623, 0, 499, 0, 0, 0, 0, 902,
	114, 1955, 0, 146, 0, 0, 776, 1637, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 88, 0, 0, 0, 0, 0,
	0, 0, 834, 835, 837, 843, 845, 0, 839, 1626,
	0, 840, 0, 842, 844, 846, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 89, 0, 0,
	0, 0, 1612, 173, 1138, 0, 1611, 1621, 0, 196,
	199, 202, 205, 0, 232, 0, 0, 724, 707, 0,
	828, 831, 0, 808, 863, 1643, 0, 286, 182, 0,
	0, 300, 0, 0, 0, 0, 0, 0, 869, 0,
	0, 0, 1955, 962, 968, 0, 1054, 1163, 0, 991,
	976, 0, 0, 0, 991, 995, 996, 998, 999, 0,
	0, 1160, 0, 259, 352, 144, 144, 144, 1609, 144,
	144, 171, 346, 349, 355, 405, 1043, 182, 180, 1823,
	178, 175, 177, 0, 0, 0, 725, 727, 728, 729,
	730, 0, 1672, 0, 1781, 1672, 0, 979, 981, 0,
	149, 182, 0, 0, 298, 462, 467, 581, 0, 622,
	647, 596, 598, 599, 600, 700, 698, 608, 610, 613,
	631, 634, 636, 0, 0, 0, 649, 0, 0, 0,
	0, 0, 684, 685, 686, 688, 1157, 1012, 0, 1073,
	0, 1070, 1076, 1077, 0, 1058, 888, 889, 0, 0,
	0, 0, -2, -2, 0, 0, 0, 1361, 0, -2,
	1340, 1343, 1347, 1349, 1351, 0, 0, 0, 0, 0,
	0, 1540, 0, 1542, 1362, 1594, 1597, 1512, 0, 0,
	1053, 1054, 1054, 0, 1429, 0, 0, 0, 0, 0,
	0, 0, 1548, 0, 1555, 1556, 0, 1422, 0, 1588,
	0, 0, 0, 1431, 0, 0, 0, 1232, 1206, 0,
	1260, 1258, 1259, 1253, 1260, 1257, 0, 0, 0, 0,
	0, 1450, 0, 0, 0, 1454, 1466, 0, 1468, 1470,
	0, 0, 1472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1368, 1369, 1370, 1473,
	1576, 1577, 0, 0, 0, 0, 0, 0, 1479, 0,
	1582, 1480, 1482, 1043, 1086, 1081, 1603, 1139, 1088, 1090,
	1604, 1634, 1081, 1081, 0, 1552, 0, 0, 1130, 0,
	0, 0, 1132, 0, 1121, 0, 1123, 1136, 1105, 0,
	0, 1098, 0, 1094, 1095, 1096, 1097, 808, 1134, 1107,
	1111, 1651, 0, 1155, 0, 1115, 1118, 0, 0, 1664,
	207, 211, 212, 208, 209, 421, 0, 0, 1554, 0,
	1171, 0, 0, 0, 0, 0, 425, 0, 475, -2,
	506, 507, 509, 0, 505, 111, 903, 0, 0, 894,
	0, 116, 1955, 125, 0, 753, 0, 1635, 0, 0,
	0, 0, 905, 0, 1955, 144, 1955, 144, 127, 130,
	0, 134, 132, 0, 0, 744, 75, 903, 78, 82,
	90, 0, 0, 0, 96, 0, 0, 896, 0, 838,
	841, 847, 57, 0, 898, 892, 0, 891, 136, 80,
	84, 91, 0, 900, 77, 0, 182, 0, 153, 1617,
	0, 0, 0, 0, 0, 723, 793, 0, 0, 0,
	0, 0, 0, 292, 288, 0, 297, 303, 302, 854,
	-2, 857, 866, 0, 868, 880, 0, 0, 0, 964,
	968, 0, 967, 1041, 1066, 1162, 969, 991, 0, 0,
	0, 978, 975, 972, 1164, 0, 0, 0, 0, 0,
	254, 331, 334, 337, 340, 343, 357, 157, 0, 0,
	0, 0, 0, 182, 0, 0, 0, 0, 0, 1672,
	1672, 0, 1639, 0, 0, 0, 0, 150, 155, 0,
	464, 0, 0, 638, 640, 653, 676, 677, 739, 0,
	739, 0, 0, 1057, 890, 0, 1283, 1324, 0, 0,
	-2, 0, 0, 1328, 0, 0, 0, -2, 0, 0,
	0, 1541, 1543, 0, 1596, 1424, 0, 0, 0, 1428,
	1406, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 0, 1413,
	1414, 1515, 1558, 1586, 1590, 0, 1652, 1656, 1493, 1494,
	1498, 1642, 0, 0, 0, 1251, 1255, 1435, 0, 0,
	0, 0, 0, 0, 0, 1559, 1569, 1571, 1366, 1367,
	1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380,
	-2, -2, -2, 1384, 1385, 1386, -2, -2, -2, 0,
	0, 0, 1572, 1574, 1575, 1579, 1580, 0, 1476, 1477,
	1478, 1581, 0, 1083, 0, 1087, 0, 1083, 1083, 1050,
	1128, 0, 0, 1151, 0, 1103, 1122, 0, 1112, 1101,
	0, 1102, 0, 1133, 0, 1109, 1114, 0, 1117, 0,
	1424, -2, 423, 407, 0, 0, 1173, 1183, 0, 1235,
	1239, 427, 1137, 0, 0, 0, 0, 145, 751, 775,
	0, 0, 883, 890, 0, 0, 118, 0, 0, 0,
	126, 0, 123, 0, 129, 133, 0, 0, 0, 0,
	0, 93, 94, 95, 0, 99, 101, 0, 0, 0,
	0, 0, 0, 147, 0, 227, 862, 233, 733, 781,
	0, 783, 0, 708, 0, 782, 832, 0, 284, 0,
	291, 0, 852, 867, 0, 0, 0, 0, 0, 966,
	968, 0, 959, 960, 991, 1065, 970, 989, -2, 988,
	0, 1054, 997, 994, 1000, 1001, 0, 179, 0, 174,
	176, 0, 160, 0, 0, 726, 731, 0, 0, 0,
	0, 0, 980, 982, 0, 166, 0, 582, 648, 678,
	738, 0, 0, 680, 1068, 1074, 1059, 890, 1326, 1330,
	0, 0, 0, 1332, -2, 0, 1354, -2, -2, 1544,
	1595, 1403, 1054, 1425, 1427, 1278, 1589, 0, 1500, 1497,
	0, 1484, 1207, 1445, 1446, 0, 0, 1449, 1451, 1452,
	1453, 1568, 0, 0, 0, 0, 1475, 1039, 1489, 0,
	0, 1091, 1489, 1489, 1129, 0, 1131, 1126, 1124, 1099,
	1092, 0, 1652, 1116, 0, 0, 1166, 1172, 0, 1234,
	112, 113, 115, 0, 752, 0, 755, 0, 0, 0,
	0, 762, 763, 0, 0, 0, 0, 0, 797, 806,
	0, 885, 0, 0, 0, 120, 139, 0, 0, 904,
	0, 144, 144, 0, 0, 895, 0, 0, 0, 0,
	897, 899, 893, 0, 0, 901, 172, 741, 0, 793,
	785, 786, 787, 0, 792, 794, 0, 0, 712, 709,
	724, 707, 829, 861, 0, 289, 0, 879, 0, 0,
	0, 956, 968, 0, 961, 962, 305, 0, 0, 0,
	977, 1066, 0, 181, 182, 0, 0, 0, 0, 0,
	0, 0, 182, 466, 468, 0, 0, 474, 737, 0,
	0, 1060, 1334, -2, -2, 1355, 0, 1653, 1655, 1054,
	0, 1486, 0, 0, -2, 0, 0, 0, 1025, 0,
	1082, 1080, 1026, 1027, 1150, 1136, 0, 1119, 0, 1174,
	117, 0, 756, 757, 1638, 759, 0, 761, 764, 0,
	766, 1674, 0, 770, 777, 798, 0, 733, 0, 803,
	804, 884, 779, 0, 119, 121, 138, 887, 122, 128,
	0, 0, 79, 0, 0, 1722, 103, 81, 0, 707,
	740, 0, 784, 0, 795, 796, 710, 0, 0, 0,
	290, 293, 0, 296, 0, 880, 0, 0, 0, 963,
	964, 0, 0, 0, 991, 1002, 159, 0, 0, 806,
	0, 0, 774, 0, 164, 0, 470, 0, 472, 0,
	679, 681, 1426, 1504, 0, 1447, 1448, -2, 0, 1392,
	1488, 1490, 0, 1104, 1093, 1167, 754, 758, 0, 0,
	812, 0, 0, 0, 801, 802, 741, 0, 0, 141,
	0, 0, 0, 0, 0, 0, 0, 705, 0, 0,
	713, 0, 733, 0, 294, 295, 806, 0, 806, 0,
	965, 966, 0, 984, 985, 987, 992, 0, 0, 733,
	806, 773, 0, 469, 0, 0, 0, 0, 0, 0,
	1499, 1393, 0, 0, 0, 765, 817, 0, 0, 0,
	799, 800, 797, 0, 808, 124, 0, 886, 0, 745,
	0, 0, 748, 0, 0, 104, 1722, 102, 0, 0,
	0, 789, 791, 714, 741, 712, 733, 0, 733, 0,
	957, 0, 986, 182, 182, 741, 733, 182, 471, 473,
	1496, 1501, 1505, -2, 1918, 1725, 0, 1502, 1503, 1491,
	1492, 0, 767, 813, 814, 0, 809, 810, 811, 1673,
	768, 769, 778, 805, 812, 140, 742, 0, 0, 743,
	0, 0, 107, 0, 109, 0, 788, 0, 707, 711,
	741, 0, 741, 0, 1164, 161, 162, 771, 741, 163,
	0, 1507, 1508, 1509, 1510, 1511, 760, 815, 0, 816,
	0, 0, 0, 817, 746, 0, 749, 0, 105, 0,
	790, 706, 877, 806, 877, 806, 983, 772, 0, 818,
	0, 821, 822, 0, 819, 797, 0, 0, 736, 872,
	0, 733, 874, 733, 1506, 820, 823, 824, 780, 0,
	0, 732, 734, 735, 878, 741, 741, 741, 0, 877,
	877, 747, 0, 873, 875, 0, 0, 741, 750,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 441, 3, 447, 442, 3,
	452, 453, 445, 443, 456, 444, 454, 446, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 460, 3,
	433, 435, 434, 437, 457, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 450, 3, 451, 448, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 458, 440, 459, 438,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 436, 57776, 439, 57777, 449, 57778, 455, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1062
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1067
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1071
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1072
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1073
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1074
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1075
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1076
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1077
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1078
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1082
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1091
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1092
		{
			return helpWith(sqllex, "ALTER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1095
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1096
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1097
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1098
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1099
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1100
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1154
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1155
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1166
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1181
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1185
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1189
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1200
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1212
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1231
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1264
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1268
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1272
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1278
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1282
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1288
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1297
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1308
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1312
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1318
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1326
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1336
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1340
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1350
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1361
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1368
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1380
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1387
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1395
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1400
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1404
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1409
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1415
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1423
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 99:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1432
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1444
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 101:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1452
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1463
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1467
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1471
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 105:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1475
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1481
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1486
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1497
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1501
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1507
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1511
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 112:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1518
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1523
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1528
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1533
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1538
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1543
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1548
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1553
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1558
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1563
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1568
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1577
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1589
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1599
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1606
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1609
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1616
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1625
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1634
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1639
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1646
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1654
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1655
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1659
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1663
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1669
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1677
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1681
		{
			sqlVAL.union.val = nil
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1687
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 141:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1691
		{
			sqlVAL.union.val = nil
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1698
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1702
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 144:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1706
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1712
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1716
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 147:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1742
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1745
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 149:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1768
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1772
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1775
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1779
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1783
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1789
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1793
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1799
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1836
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1841
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1845
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1851
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1856
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1861
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1866
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1871
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1875
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1891
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1894
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1898
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1902
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1910
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1914
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1920
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1924
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1930
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1934
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1938
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1942
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1948
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1952
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1958
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1962
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1966
		{
			sqlVAL.union.val = nil
		}
	case 183:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1972
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1985
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1986
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1987
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1988
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1998
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2006
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2008
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2011
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2021
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2030
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2038
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2040
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2044
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2047
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2057
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2066
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2074
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2076
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2080
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2083
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2087
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2091
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2095
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2110
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2116
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2121
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2133
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2134
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2136
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2137
		{
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2138
		{
			return helpWith(sqllex, "CREATE")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2141
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2142
		{
			return unimplemented(sqllex, "create cast")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2143
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2144
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2145
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2146
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 228:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2147
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 229:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2148
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2149
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2150
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2151
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2152
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2153
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2154
		{
			return unimplemented(sqllex, "create operator")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2155
		{
			return unimplemented(sqllex, "create publication")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2156
		{
			return unimplemented(sqllex, "create rule")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2157
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2158
		{
			return unimplemented(sqllex, "create server")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2159
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2160
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2161
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2164
		{
		}
	case 244:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2165
		{
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2168
		{
		}
	case 246:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2169
		{
		}
	case 247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2172
		{
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2173
		{
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2176
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2177
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2178
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2179
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2180
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2181
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 255:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2182
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 256:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2183
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2184
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2185
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2186
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2187
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2188
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2189
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2190
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2191
		{
			return unimplemented(sqllex, "drop server")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2192
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2193
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2194
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2195
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2199
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2200
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2201
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2202
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2204
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2205
		{
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2206
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2207
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2217
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2225
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2229
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 287:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2233
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2239
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2243
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2252
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2259
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2265
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2271
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2275
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2286
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2298
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2306
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2314
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2324
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2328
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2334
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2338
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2345
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 304:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2349
		{

			sqlVAL.union.val = nil
		}
	case 305:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2363
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2373
		{
			return helpWith(sqllex, "DELETE")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2380
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2383
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2384
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2385
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2386
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2387
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2396
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2397
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2398
		{
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2399
		{
			return helpWith(sqllex, "DROP")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2402
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2403
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2404
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2405
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2406
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2414
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2418
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2421
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2429
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2433
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2436
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2444
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2448
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2451
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2459
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2467
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2474
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2482
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2490
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2497
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2505
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2509
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2512
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2520
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2524
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2527
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2531
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2536
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2559
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2562
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2564
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2568
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2572
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2579
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2583
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2586
		{
			return helpWith(sqllex, "DELETE")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2588
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2589
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2590
		{
			return helpWith(sqllex, "INSERT")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2591
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2593
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2594
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2595
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2598
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2603
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2604
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2605
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2610
		{
			return helpWith(sqllex, "DELETE")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2611
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2612
		{
			return helpWith(sqllex, "INSERT")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2614
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2618
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2619
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2623
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2627
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 406:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2637
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2645
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2653
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2657
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 410:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2661
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2671
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2678
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2686
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2690
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 415:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2694
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2704
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2708
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2712
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2716
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2719
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2739
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2743
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2747
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2750
		{
			return helpWith(sqllex, "GRANT")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2770
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2774
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2778
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2781
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2786
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2790
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2800
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2804
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2818
		{
			return helpWith(sqllex, "RESET")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2819
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2827
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2831
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2834
		{
			return helpWith(sqllex, "RESET")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2842
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2845
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2856
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2859
		{
			return helpWith(sqllex, "USE")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2863
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2864
		{
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2865
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2866
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2870
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2871
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2872
		{
			return helpWith(sqllex, "USE")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2888
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2903
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2906
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2924
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2932
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2936
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 467:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2940
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2946
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2950
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2956
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2960
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2964
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2968
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2972
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2983
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2986
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 479:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2996
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3012
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3016
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 482:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3021
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3038
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3041
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3043
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3046
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3050
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3069
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3076
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3082
		{
			return unimplemented(sqllex, "set from current")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3083
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3091
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3096
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3103
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3107
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3113
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3117
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3124
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3145
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3149
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3155
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3159
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3163
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3167
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3171
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3177
		{
			sqlVAL.union.val = tree.Low
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3181
		{
			sqlVAL.union.val = tree.Normal
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3185
		{
			sqlVAL.union.val = tree.High
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3196
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3200
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3204
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3209
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3213
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3226
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3227
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3228
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3229
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3230
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3231
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3233
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3234
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3235
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3236
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3237
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3238
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3239
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3240
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3241
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3242
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3243
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3244
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3245
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3246
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3247
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3248
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3249
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3250
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3252
		{
			return helpWith(sqllex, "SHOW")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3259
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3260
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3261
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3272
		{
			sqlVAL.str = "client_encoding"
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3275
		{
			sqlVAL.str = "timezone"
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3276
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3290
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3294
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3298
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3309
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3317
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3325
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3332
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
			}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3340
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3348
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3355
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3365
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3369
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3372
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3374
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3377
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3385
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3388
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3396
		{
			sqlVAL.union.val = &tree.ShowPartitions{Object: sqlDollar[5].union.unresolvedObjectName().String(), IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3400
		{
			sqlVAL.union.val = &tree.ShowPartitions{Object: sqlDollar[5].str, IsDB: true}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3404
		{
			sqlVAL.union.val = &tree.ShowPartitions{Object: sqlDollar[5].union.newTableIndexName().String(), IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3407
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3415
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3418
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3431
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3439
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3447
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3450
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3452
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3456
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3460
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3463
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3465
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3469
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3472
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3480
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3483
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 617:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3485
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3488
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3496
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3499
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3501
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3504
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3508
		{
			sqlVAL.union.val = true
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3510
		{
			sqlVAL.union.val = true
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3512
		{
			sqlVAL.union.val = false
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3522
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: true}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3526
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: false}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3529
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3530
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3532
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3536
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[5].union.slct(), Block: true}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3539
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3541
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3549
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				Block: true,
			}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3557
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 636:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3566
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3569
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 638:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3571
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3574
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 640:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3576
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3580
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3583
		{
			sqlVAL.union.val = true
		}
	case 643:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3584
		{
			sqlVAL.union.val = false
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3592
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3595
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3597
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3600
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 648:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3608
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3618
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3628
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3631
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3634
		{
			sqlVAL.union.val = true
		}
	case 653:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3635
		{
			sqlVAL.union.val = false
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3642
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3646
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3649
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3656
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3660
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3663
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3670
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3674
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3682
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3687
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3692
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3696
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3704
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3708
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3712
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3725
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3728
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3736
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3739
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3743
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3747
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3751
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3759
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3767
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3774
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3781
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3785
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3796
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3801
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3805
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: sqlDollar[5].str}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3808
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 688:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3812
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3819
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 690:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3824
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3944
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3948
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3952
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3991
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3995
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4000
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4004
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4013
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4020
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 701:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4024
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4036
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4045
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4048
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 705:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4084
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  sqlDollar[8].union.interleave(),
				Defs:        sqlDollar[6].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[9].union.partitionBy(),
			}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4096
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  sqlDollar[11].union.interleave(),
				Defs:        sqlDollar[9].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[12].union.partitionBy(),
			}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4109
		{
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4110
		{
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4111
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 710:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4115
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  nil,
				Defs:        sqlDollar[5].union.tblDefs(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:4126
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  nil,
				Defs:        sqlDollar[8].union.tblDefs(),
				AsSource:    sqlDollar[11].union.slct(),
			}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4138
		{
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4139
		{
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4140
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4154
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4155
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4156
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4157
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4158
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4159
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4160
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4161
		{
		}
	case 724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4166
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4172
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4176
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4182
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4188
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4191
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 732:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4195
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4204
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4211
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4216
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4221
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4227
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 739:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4234
		{
			sqlVAL.str = ""
		}
	case 741:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4241
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 742:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4247
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4254
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4261
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4267
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4271
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 747:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4277
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4287
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4291
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 750:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4297
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4311
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4322
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 753:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4326
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4332
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4336
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4340
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4344
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4348
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4352
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4356
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4374
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4378
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4382
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4386
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4390
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4394
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4398
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4408
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4412
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4416
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 771:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4423
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4433
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4445
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4455
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4467
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4472
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 777:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4478
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4484
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4495
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4505
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4519
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 782:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4523
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4529
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4539
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4550
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4554
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4561
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 788:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4567
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4578
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4582
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4588
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4594
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4598
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4604
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4608
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4614
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4619
		{
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4620
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4621
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4622
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4623
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4624
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 805:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4641
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4645
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4651
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 808:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4655
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4675
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4679
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4683
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 812:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4687
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4696
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4700
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4704
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4708
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4712
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4718
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4724
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4732
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4736
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4740
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4744
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4748
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4754
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4758
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4764
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 828:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4783
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4788
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4792
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 832:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4796
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4799
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4800
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4803
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4804
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4806
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4807
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4808
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4811
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4813
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4815
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4817
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4818
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4820
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4821
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4823
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4825
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4833
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4836
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 851:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4844
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4848
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4851
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 854:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4855
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 855:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4859
		{
			sqlVAL.union.val = nil
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4869
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4873
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4876
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4881
		{
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4882
		{
		}
	case 861:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4890
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4898
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 863:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4899
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 864:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4902
		{
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4903
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 866:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4909
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 867:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4911
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 868:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4913
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 869:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4915
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4917
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 871:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4919
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 872:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4935
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4949
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4964
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4978
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4992
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 877:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4995
		{
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4996
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5000
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5015
		{
			sqlVAL.union.val = false
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5021
		{
			sqlVAL.union.val = true
		}
	case 882:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5025
		{
			sqlVAL.union.val = false
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5031
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5035
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5044
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5055
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 887:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5056
		{
			sqlVAL.str = ""
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5060
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5064
		{
			sqlVAL.union.val = tree.Descending
		}
	case 890:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5068
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 891:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5074
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5081
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5085
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5091
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5097
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5105
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5111
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5119
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5125
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5133
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5137
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5142
		{
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5143
		{
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5146
		{
		}
	case 905:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5147
		{
		}
	case 906:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5155
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5158
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5168
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5177
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5180
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 911:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5188
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5191
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5195
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5196
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5197
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5213
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5216
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5218
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 923:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5221
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5231
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5234
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 926:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5236
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5239
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5243
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5248
		{
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5249
		{
		}
	case 931:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5250
		{
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5258
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5265
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5268
		{
		}
	case 935:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5269
		{
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5273
		{
			sqlVAL.str = ""
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5277
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5281
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 939:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5285
		{
			sqlVAL.str = ""
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5291
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 941:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5295
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5301
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5305
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5311
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5315
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 946:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5328
		{
		}
	case 947:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5330
		{
		}
	case 948:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5334
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5339
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5343
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5347
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5353
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5359
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5365
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5369
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 956:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5379
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5389
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5399
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5403
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 960:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5407
		{
			sqlVAL.str = ""
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5413
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 962:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5417
		{
			sqlVAL.str = ""
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5423
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 964:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5427
		{
			sqlVAL.str = ""
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5433
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 966:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5437
		{
			sqlVAL.str = ""
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5442
		{
		}
	case 968:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5443
		{
		}
	case 969:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5455
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 970:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5462
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5469
		{
			return helpWith(sqllex, "INSERT")
		}
	case 972:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5480
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5487
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5491
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5500
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5507
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5511
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5515
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5521
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5525
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5545
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 983:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5549
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5553
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5559
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 986:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5562
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5563
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 988:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5565
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5571
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 990:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5576
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 991:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5580
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 992:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5597
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5609
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5612
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 995:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5615
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5621
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5625
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5638
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5641
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5645
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5688
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5694
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5698
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5713
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5717
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5721
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5725
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5729
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5733
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5738
		{
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5739
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5744
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5779
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5780
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5781
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5803
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5816
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5830
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5842
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5846
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5855
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5864
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5879
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5886
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5898
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5902
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5906
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5910
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5914
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5920
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5928
		{
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5929
		{
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5933
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5937
		{
			sqlVAL.union.val = nil
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5942
		{
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5943
		{
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5947
		{
			sqlVAL.union.val = true
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5951
		{
			sqlVAL.union.val = false
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5955
		{
			sqlVAL.union.val = false
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5961
		{
			sqlVAL.union.val = true
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5967
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5972
		{
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5973
		{
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5977
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5981
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5987
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5993
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5997
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6003
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6007
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6012
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6027
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6036
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6047
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6051
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6060
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6066
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6073
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6080
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6089
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6093
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6097
		{
			sqlVAL.union.val = tree.NewNumVal(constant.MakeInt64(1), "", false)
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6103
		{
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6104
		{
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6107
		{
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6108
		{
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6125
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6129
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6135
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6139
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6158
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6161
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6163
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6175
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6178
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6180
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6186
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6190
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6196
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6200
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6205
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6210
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6216
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6221
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6228
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6233
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6244
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6248
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6252
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6260
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6291
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6305
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6315
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6323
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6332
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6336
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6340
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6351
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6375
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6381
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6385
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6391
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6393
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6397
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6403
		{
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6405
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6408
		{
			sqlVAL.union.val = nil
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6409
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6410
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6414
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6418
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6424
		{
			sqlVAL.union.val = true
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6428
		{
			sqlVAL.union.val = false
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6448
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6452
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6456
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6460
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6464
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6468
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6474
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6478
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6485
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6491
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6498
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6504
		{
			sqlVAL.str = tree.AstFull
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6508
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6512
		{
			sqlVAL.str = tree.AstRight
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6516
		{
			sqlVAL.str = tree.AstInner
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6522
		{
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6523
		{
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6544
		{
			sqlVAL.str = tree.AstHash
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6548
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6552
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6556
		{
			sqlVAL.str = ""
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6569
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6573
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6578
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6579
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6580
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6581
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6585
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6590
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6604
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6608
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6614
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6622
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6632
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6639
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6651
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6664
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6672
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6673
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6681
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6687
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6694
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6695
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6697
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6705
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6706
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6717
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6718
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6735
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6739
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6743
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6747
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6751
		{
			sqlVAL.union.val = types.String
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6755
		{
			sqlVAL.union.val = types.Name
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6759
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6768
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6772
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6776
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6780
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6784
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6788
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6792
		{
			sqlVAL.union.val = types.INet
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6796
		{
			sqlVAL.union.val = types.Oid
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6800
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6804
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6808
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6839
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6847
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6855
		{
			sqlVAL.union.val = nil
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6862
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6866
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6870
		{
			sqlVAL.union.val = types.Int2
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6874
		{
			sqlVAL.union.val = types.Int2
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6878
		{
			sqlVAL.union.val = types.Int4
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6882
		{
			sqlVAL.union.val = types.Int
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6886
		{
			sqlVAL.union.val = types.Int
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6890
		{
			sqlVAL.union.val = types.Int
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6894
		{
			sqlVAL.union.val = types.Float4
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6898
		{
			sqlVAL.union.val = types.Float4
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6902
		{
			sqlVAL.union.val = types.Float
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6906
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6910
		{
			sqlVAL.union.val = types.Float
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6914
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6922
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6930
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6938
		{
			sqlVAL.union.val = types.Bool
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6942
		{
			sqlVAL.union.val = types.Bool
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6949
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6953
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6957
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6961
		{
			sqlVAL.union.val = types.RegType
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6965
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6971
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6984
		{
			sqlVAL.union.val = types.Float
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6990
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6996
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7004
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7008
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7012
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7018
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7030
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7036
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7040
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7044
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7048
		{
			sqlVAL.union.val = types.String
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7057
		{
			sqlVAL.union.val = true
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7058
		{
			sqlVAL.union.val = false
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7063
		{
			sqlVAL.union.val = types.Date
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7067
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = types.Time
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7072
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = types.MakeTime(prec)
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7079
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7080
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7082
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7090
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7102
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7106
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7115
		{
			sqlVAL.union.val = true
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7116
		{
			sqlVAL.union.val = false
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7117
		{
			sqlVAL.union.val = false
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7121
		{
			sqlVAL.union.val = types.Interval
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7127
		{
			sqlVAL.union.val = tree.Year
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7131
		{
			sqlVAL.union.val = tree.Month
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7135
		{
			sqlVAL.union.val = tree.Day
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7139
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7143
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7147
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7153
		{
			sqlVAL.union.val = tree.Month
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7157
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7161
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7165
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7169
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7173
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7177
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7184
		{
			sqlVAL.union.val = nil
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7190
		{
			sqlVAL.union.val = tree.Second
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7193
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7217
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7221
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7225
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7229
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7240
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7245
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7249
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7253
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7257
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7261
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7265
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7269
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7273
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7277
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7281
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7285
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7289
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7293
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7297
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7301
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7305
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7309
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7313
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7317
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7321
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7325
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7329
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7333
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7337
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7341
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7345
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7349
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7353
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7357
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7361
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7365
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7369
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7373
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7377
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7381
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7385
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7389
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7393
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7397
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7401
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7405
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7409
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7413
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7417
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7421
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7425
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7429
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7433
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7437
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7441
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7445
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7449
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7453
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7457
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7461
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7465
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7469
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7473
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7477
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7481
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7484
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7486
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7490
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7494
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7498
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7502
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7506
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7510
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7514
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7518
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7522
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7526
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7530
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7534
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7538
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7542
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7546
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7550
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7567
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7572
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7584
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7588
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7592
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7596
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7600
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7604
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7608
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7612
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7616
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7620
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7624
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7628
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7632
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7636
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7640
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7644
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7648
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7652
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7656
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7660
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7664
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7668
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7672
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7676
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7680
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7684
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7688
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7692
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7706
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7714
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7750
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7754
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7758
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7762
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7766
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7771
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7773
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7777
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7780
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7782
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7786
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7790
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7794
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7798
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7807
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7814
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7818
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7822
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7827
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7831
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7835
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7839
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7843
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7846
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7850
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7854
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7857
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7858
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7860
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7866
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7870
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7873
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7884
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7891
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7900
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7901
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7906
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7910
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7914
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7920
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7924
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7928
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7932
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7938
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7942
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7946
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7950
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7954
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7958
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7962
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7966
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7970
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7974
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7978
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7982
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7986
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7993
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7996
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7998
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8001
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8003
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8006
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8008
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8011
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8013
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8016
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8018
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8021
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8023
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8026
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8028
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8031
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8033
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8037
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8040
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8041
		{
			return unimplemented(sqllex, "treat")
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8043
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8047
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8051
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8055
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8059
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8062
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8064
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8067
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8072
		{
			return unimplemented(sqllex, "within group")
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8073
		{
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8077
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8081
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8088
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8092
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8098
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8102
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8108
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8116
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8120
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8124
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8131
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8151
		{
			sqlVAL.str = ""
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8157
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8161
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8172
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8179
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8186
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8193
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8199
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8212
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8240
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8244
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8248
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8252
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8259
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8275
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8279
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8286
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8298
		{
			sqlVAL.union.val = tree.Any
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8302
		{
			sqlVAL.union.val = tree.Some
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8306
		{
			sqlVAL.union.val = tree.All
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8311
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8312
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8313
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8314
		{
			sqlVAL.union.val = tree.Div
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8315
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8316
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8317
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8318
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8319
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8320
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8321
		{
			sqlVAL.union.val = tree.LT
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8322
		{
			sqlVAL.union.val = tree.GT
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8323
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8324
		{
			sqlVAL.union.val = tree.LE
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8325
		{
			sqlVAL.union.val = tree.GE
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8326
		{
			sqlVAL.union.val = tree.NE
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8330
		{
			sqlVAL.union.val = tree.Like
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8331
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8332
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8333
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8356
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8360
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8366
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8370
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8374
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8385
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8389
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8395
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8399
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8406
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8412
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8416
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8422
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8426
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8432
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8436
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8442
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8446
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8452
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8456
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8478
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8482
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8486
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8492
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8499
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8503
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8520
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8524
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8528
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8532
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8536
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8542
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8548
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8554
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8558
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8562
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8568
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8580
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8587
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8591
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8597
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8603
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8607
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8614
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8620
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8624
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8631
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8637
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8641
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8646
		{
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8647
		{
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8651
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8655
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8661
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8670
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8674
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8678
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8686
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8690
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8696
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8700
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8719
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8727
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8750
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8759
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8763
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8767
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8771
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8777
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8781
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8789
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8793
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8802
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8813
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8822
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8830
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8927
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8934
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8938
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1653:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8942
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1655:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8956
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1656:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8960
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8964
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8977
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8995
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9008
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1664:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9015
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9040
		{
			sqlVAL.str = ""
		}
	case 1673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9046
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1674:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9050
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
