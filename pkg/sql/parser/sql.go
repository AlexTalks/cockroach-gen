// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/cockroachdb/errors"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:65

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) persistenceType() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) forLocked() tree.ForLocked {
	return u.val.(tree.ForLocked)
}
func (u *sqlSymUnion) lockingStrength() tree.LockingStrength {
	return u.val.(tree.LockingStrength)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) windowFrameExclusion() tree.WindowFrameExclusion {
	return u.val.(tree.WindowFrameExclusion)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) nullsOrder() tree.NullsOrder {
	return u.val.(tree.NullsOrder)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) intervalTypeMetadata() types.IntervalTypeMetadata {
	return u.val.(types.IntervalTypeMetadata)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:601
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const AND_AND = lex.AND_AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTHORIZATION = lex.AUTHORIZATION
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const COMPLETE = lex.COMPLETE
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXCLUDE = lex.EXCLUDE
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LAST = lex.LAST
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOCKED = lex.LOCKED
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NONE = lex.NONE
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NOWAIT = lex.NOWAIT
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OTHERS = lex.OTHERS
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLIC = lex.PUBLIC
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHARE = lex.SHARE
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SKIP = lex.SKIP
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIES = lex.TIES
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"AND_AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTHORIZATION",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"COMPLETE",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXCLUDE",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LAST",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCKED",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NONE",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NOWAIT",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OTHERS",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLIC",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SKIP",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIES",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"CONTAINED_BY",
	"'?'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"'@'",
	"','",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9942

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	-2, 1076,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 68,
	182, 905,
	199, 905,
	214, 251,
	297, 251,
	306, 738,
	333, 251,
	342, 738,
	381, 738,
	405, 251,
	429, 738,
	-2, 0,
	-1, 74,
	214, 255,
	-2, 0,
	-1, 75,
	109, 1076,
	188, 1076,
	415, 1076,
	416, 1076,
	-2, 0,
	-1, 87,
	122, 1050,
	138, 1050,
	196, 1050,
	226, 1050,
	261, 1050,
	271, 1050,
	410, 1050,
	-2, 1028,
	-1, 118,
	128, 661,
	213, 661,
	300, 641,
	351, 641,
	398, 661,
	-2, 0,
	-1, 119,
	4, 1078,
	21, 1078,
	22, 1078,
	23, 1078,
	24, 1078,
	25, 1078,
	27, 1078,
	33, 1078,
	38, 1078,
	39, 1078,
	40, 1078,
	41, 1078,
	42, 1078,
	43, 1078,
	44, 1078,
	45, 1078,
	46, 1078,
	47, 1078,
	48, 1078,
	49, 1078,
	51, 1078,
	52, 1078,
	53, 1078,
	54, 1078,
	55, 1078,
	56, 1078,
	59, 1078,
	60, 1078,
	61, 1078,
	62, 1078,
	64, 1078,
	65, 1078,
	69, 1078,
	70, 1078,
	71, 1078,
	72, 1078,
	73, 1078,
	74, 1078,
	76, 1078,
	77, 1078,
	78, 1078,
	79, 1078,
	81, 1078,
	83, 1078,
	84, 1078,
	85, 1078,
	88, 1078,
	89, 1078,
	97, 1078,
	98, 1078,
	99, 1078,
	100, 1078,
	101, 1078,
	102, 1078,
	103, 1078,
	104, 1078,
	106, 1078,
	108, 1078,
	109, 1078,
	111, 1078,
	114, 1078,
	115, 1078,
	116, 1078,
	118, 1078,
	120, 1078,
	121, 1078,
	123, 1078,
	124, 1078,
	125, 1078,
	126, 1078,
	127, 1078,
	128, 1078,
	129, 1078,
	130, 1078,
	131, 1078,
	132, 1078,
	133, 1078,
	134, 1078,
	135, 1078,
	137, 1078,
	143, 1078,
	144, 1078,
	145, 1078,
	146, 1078,
	147, 1078,
	148, 1078,
	150, 1078,
	152, 1078,
	156, 1078,
	157, 1078,
	159, 1078,
	160, 1078,
	162, 1078,
	163, 1078,
	165, 1078,
	166, 1078,
	167, 1078,
	168, 1078,
	169, 1078,
	170, 1078,
	171, 1078,
	172, 1078,
	174, 1078,
	175, 1078,
	177, 1078,
	178, 1078,
	179, 1078,
	182, 1078,
	183, 1078,
	184, 1078,
	185, 1078,
	188, 1078,
	189, 1078,
	190, 1078,
	191, 1078,
	192, 1078,
	193, 1078,
	194, 1078,
	195, 1078,
	197, 1078,
	199, 1078,
	201, 1078,
	203, 1078,
	204, 1078,
	205, 1078,
	207, 1078,
	208, 1078,
	211, 1078,
	212, 1078,
	213, 1078,
	214, 1078,
	215, 1078,
	217, 1078,
	218, 1078,
	220, 1078,
	221, 1078,
	223, 1078,
	224, 1078,
	227, 1078,
	228, 1078,
	231, 1078,
	232, 1078,
	233, 1078,
	235, 1078,
	236, 1078,
	237, 1078,
	238, 1078,
	239, 1078,
	240, 1078,
	241, 1078,
	242, 1078,
	243, 1078,
	244, 1078,
	246, 1078,
	247, 1078,
	248, 1078,
	250, 1078,
	252, 1078,
	254, 1078,
	256, 1078,
	257, 1078,
	258, 1078,
	259, 1078,
	260, 1078,
	262, 1078,
	263, 1078,
	264, 1078,
	266, 1078,
	267, 1078,
	268, 1078,
	269, 1078,
	272, 1078,
	273, 1078,
	274, 1078,
	276, 1078,
	278, 1078,
	279, 1078,
	280, 1078,
	281, 1078,
	282, 1078,
	283, 1078,
	284, 1078,
	285, 1078,
	286, 1078,
	287, 1078,
	289, 1078,
	290, 1078,
	291, 1078,
	292, 1078,
	293, 1078,
	294, 1078,
	296, 1078,
	298, 1078,
	299, 1078,
	300, 1078,
	301, 1078,
	302, 1078,
	303, 1078,
	304, 1078,
	305, 1078,
	306, 1078,
	307, 1078,
	309, 1078,
	310, 1078,
	311, 1078,
	312, 1078,
	313, 1078,
	315, 1078,
	316, 1078,
	317, 1078,
	318, 1078,
	319, 1078,
	320, 1078,
	321, 1078,
	322, 1078,
	324, 1078,
	326, 1078,
	327, 1078,
	328, 1078,
	329, 1078,
	330, 1078,
	331, 1078,
	333, 1078,
	334, 1078,
	335, 1078,
	336, 1078,
	337, 1078,
	338, 1078,
	339, 1078,
	340, 1078,
	342, 1078,
	343, 1078,
	344, 1078,
	345, 1078,
	346, 1078,
	347, 1078,
	348, 1078,
	349, 1078,
	350, 1078,
	351, 1078,
	353, 1078,
	354, 1078,
	355, 1078,
	356, 1078,
	357, 1078,
	359, 1078,
	360, 1078,
	361, 1078,
	362, 1078,
	363, 1078,
	365, 1078,
	366, 1078,
	367, 1078,
	368, 1078,
	369, 1078,
	370, 1078,
	371, 1078,
	372, 1078,
	373, 1078,
	374, 1078,
	375, 1078,
	376, 1078,
	378, 1078,
	379, 1078,
	380, 1078,
	382, 1078,
	383, 1078,
	384, 1078,
	385, 1078,
	386, 1078,
	387, 1078,
	388, 1078,
	390, 1078,
	391, 1078,
	392, 1078,
	393, 1078,
	394, 1078,
	396, 1078,
	398, 1078,
	399, 1078,
	400, 1078,
	401, 1078,
	402, 1078,
	404, 1078,
	405, 1078,
	406, 1078,
	408, 1078,
	409, 1078,
	412, 1078,
	413, 1078,
	414, 1078,
	415, 1078,
	416, 1078,
	417, 1078,
	419, 1078,
	421, 1078,
	422, 1078,
	423, 1078,
	424, 1078,
	425, 1078,
	426, 1078,
	427, 1078,
	429, 1078,
	430, 1078,
	431, 1078,
	436, 1078,
	437, 1078,
	438, 1078,
	439, 1078,
	440, 1078,
	441, 1078,
	-2, 0,
	-1, 120,
	1, 958,
	203, 958,
	296, 958,
	304, 958,
	444, 958,
	467, 958,
	-2, 0,
	-1, 122,
	1, 958,
	467, 958,
	-2, 0,
	-1, 123,
	1, 958,
	467, 958,
	-2, 0,
	-1, 124,
	1, 962,
	467, 962,
	-2, 0,
	-1, 149,
	122, 1049,
	138, 1049,
	196, 1049,
	226, 1049,
	261, 1049,
	271, 1049,
	410, 1049,
	-2, 1037,
	-1, 182,
	4, 1085,
	5, 1085,
	6, 1085,
	7, 1085,
	8, 1085,
	9, 1085,
	10, 1085,
	21, 1085,
	22, 1085,
	23, 1085,
	24, 1085,
	25, 1085,
	27, 1085,
	33, 1085,
	34, 1085,
	38, 1085,
	39, 1085,
	40, 1085,
	41, 1085,
	42, 1085,
	43, 1085,
	44, 1085,
	45, 1085,
	46, 1085,
	47, 1085,
	48, 1085,
	49, 1085,
	51, 1085,
	52, 1085,
	53, 1085,
	54, 1085,
	55, 1085,
	56, 1085,
	57, 1085,
	58, 1085,
	59, 1085,
	60, 1085,
	61, 1085,
	62, 1085,
	64, 1085,
	65, 1085,
	67, 1085,
	69, 1085,
	70, 1085,
	71, 1085,
	72, 1085,
	73, 1085,
	74, 1085,
	76, 1085,
	77, 1085,
	78, 1085,
	79, 1085,
	81, 1085,
	83, 1085,
	84, 1085,
	85, 1085,
	87, 1085,
	88, 1085,
	89, 1085,
	90, 1085,
	91, 1085,
	92, 1085,
	93, 1085,
	94, 1085,
	95, 1085,
	96, 1085,
	97, 1085,
	98, 1085,
	99, 1085,
	100, 1085,
	101, 1085,
	102, 1085,
	103, 1085,
	104, 1085,
	105, 1085,
	106, 1085,
	108, 1085,
	109, 1085,
	111, 1085,
	114, 1085,
	115, 1085,
	116, 1085,
	118, 1085,
	120, 1085,
	121, 1085,
	123, 1085,
	124, 1085,
	125, 1085,
	126, 1085,
	127, 1085,
	128, 1085,
	129, 1085,
	130, 1085,
	131, 1085,
	132, 1085,
	133, 1085,
	134, 1085,
	135, 1085,
	136, 1085,
	137, 1085,
	143, 1085,
	144, 1085,
	145, 1085,
	146, 1085,
	147, 1085,
	148, 1085,
	150, 1085,
	152, 1085,
	155, 1085,
	156, 1085,
	157, 1085,
	159, 1085,
	160, 1085,
	162, 1085,
	163, 1085,
	165, 1085,
	166, 1085,
	167, 1085,
	168, 1085,
	169, 1085,
	170, 1085,
	171, 1085,
	172, 1085,
	173, 1085,
	174, 1085,
	175, 1085,
	177, 1085,
	178, 1085,
	179, 1085,
	182, 1085,
	183, 1085,
	184, 1085,
	185, 1085,
	187, 1085,
	188, 1085,
	189, 1085,
	190, 1085,
	191, 1085,
	192, 1085,
	193, 1085,
	194, 1085,
	195, 1085,
	197, 1085,
	199, 1085,
	200, 1085,
	201, 1085,
	202, 1085,
	203, 1085,
	204, 1085,
	205, 1085,
	206, 1085,
	207, 1085,
	208, 1085,
	211, 1085,
	212, 1085,
	213, 1085,
	214, 1085,
	215, 1085,
	217, 1085,
	218, 1085,
	220, 1085,
	221, 1085,
	222, 1085,
	223, 1085,
	224, 1085,
	225, 1085,
	227, 1085,
	228, 1085,
	231, 1085,
	232, 1085,
	233, 1085,
	235, 1085,
	236, 1085,
	237, 1085,
	238, 1085,
	239, 1085,
	240, 1085,
	241, 1085,
	242, 1085,
	243, 1085,
	244, 1085,
	245, 1085,
	246, 1085,
	247, 1085,
	248, 1085,
	249, 1085,
	250, 1085,
	251, 1085,
	252, 1085,
	253, 1085,
	254, 1085,
	255, 1085,
	256, 1085,
	257, 1085,
	258, 1085,
	259, 1085,
	260, 1085,
	262, 1085,
	263, 1085,
	264, 1085,
	267, 1085,
	268, 1085,
	269, 1085,
	272, 1085,
	273, 1085,
	274, 1085,
	275, 1085,
	276, 1085,
	277, 1085,
	278, 1085,
	279, 1085,
	280, 1085,
	281, 1085,
	282, 1085,
	283, 1085,
	284, 1085,
	285, 1085,
	286, 1085,
	287, 1085,
	289, 1085,
	290, 1085,
	291, 1085,
	292, 1085,
	293, 1085,
	294, 1085,
	296, 1085,
	298, 1085,
	299, 1085,
	300, 1085,
	301, 1085,
	302, 1085,
	303, 1085,
	304, 1085,
	305, 1085,
	306, 1085,
	307, 1085,
	309, 1085,
	310, 1085,
	311, 1085,
	312, 1085,
	313, 1085,
	315, 1085,
	316, 1085,
	317, 1085,
	318, 1085,
	319, 1085,
	320, 1085,
	321, 1085,
	322, 1085,
	324, 1085,
	325, 1085,
	326, 1085,
	327, 1085,
	328, 1085,
	329, 1085,
	330, 1085,
	331, 1085,
	333, 1085,
	334, 1085,
	335, 1085,
	336, 1085,
	337, 1085,
	338, 1085,
	339, 1085,
	340, 1085,
	342, 1085,
	343, 1085,
	344, 1085,
	345, 1085,
	346, 1085,
	347, 1085,
	348, 1085,
	349, 1085,
	350, 1085,
	351, 1085,
	352, 1085,
	353, 1085,
	354, 1085,
	355, 1085,
	356, 1085,
	357, 1085,
	358, 1085,
	359, 1085,
	360, 1085,
	361, 1085,
	362, 1085,
	363, 1085,
	365, 1085,
	366, 1085,
	367, 1085,
	368, 1085,
	369, 1085,
	370, 1085,
	371, 1085,
	372, 1085,
	373, 1085,
	374, 1085,
	375, 1085,
	376, 1085,
	378, 1085,
	379, 1085,
	380, 1085,
	382, 1085,
	383, 1085,
	384, 1085,
	385, 1085,
	386, 1085,
	387, 1085,
	388, 1085,
	390, 1085,
	391, 1085,
	392, 1085,
	393, 1085,
	394, 1085,
	396, 1085,
	398, 1085,
	399, 1085,
	400, 1085,
	401, 1085,
	402, 1085,
	403, 1085,
	404, 1085,
	405, 1085,
	406, 1085,
	408, 1085,
	409, 1085,
	411, 1085,
	412, 1085,
	413, 1085,
	414, 1085,
	415, 1085,
	416, 1085,
	417, 1085,
	418, 1085,
	419, 1085,
	421, 1085,
	422, 1085,
	423, 1085,
	424, 1085,
	425, 1085,
	426, 1085,
	427, 1085,
	429, 1085,
	430, 1085,
	431, 1085,
	436, 1085,
	437, 1085,
	438, 1085,
	439, 1085,
	440, 1085,
	441, 1085,
	442, 1085,
	448, 1085,
	455, 1085,
	456, 1085,
	457, 1085,
	464, 1085,
	468, 1085,
	-2, 0,
	-1, 561,
	154, 1766,
	395, 1766,
	447, 1766,
	466, 1766,
	-2, 0,
	-1, 562,
	154, 1845,
	395, 1845,
	447, 1845,
	466, 1845,
	-2, 0,
	-1, 563,
	154, 1755,
	395, 1755,
	447, 1755,
	466, 1755,
	-2, 0,
	-1, 565,
	154, 1938,
	395, 1938,
	447, 1938,
	466, 1938,
	-2, 0,
	-1, 567,
	154, 1968,
	395, 1968,
	447, 1968,
	466, 1968,
	-2, 0,
	-1, 574,
	154, 1856,
	395, 1856,
	447, 1856,
	466, 1856,
	-2, 508,
	-1, 592,
	466, 1713,
	469, 1713,
	-2, 712,
	-1, 593,
	466, 1715,
	469, 1715,
	-2, 713,
	-1, 594,
	466, 1714,
	469, 1714,
	-2, 714,
	-1, 595,
	469, 1659,
	-2, 715,
	-1, 638,
	429, 887,
	-2, 739,
	-1, 744,
	300, 642,
	351, 642,
	-2, 0,
	-1, 745,
	300, 641,
	351, 641,
	-2, 589,
	-1, 749,
	1, 671,
	463, 671,
	465, 671,
	467, 671,
	-2, 0,
	-1, 750,
	1, 711,
	151, 711,
	463, 711,
	465, 711,
	467, 711,
	-2, 0,
	-1, 758,
	1, 645,
	463, 645,
	465, 645,
	467, 645,
	-2, 0,
	-1, 761,
	1, 671,
	463, 671,
	465, 671,
	467, 671,
	-2, 0,
	-1, 762,
	1, 673,
	463, 673,
	465, 673,
	467, 673,
	-2, 0,
	-1, 763,
	1, 676,
	463, 676,
	465, 676,
	467, 676,
	-2, 0,
	-1, 767,
	1, 690,
	463, 690,
	465, 690,
	467, 690,
	-2, 0,
	-1, 768,
	1, 692,
	463, 692,
	465, 692,
	467, 692,
	-2, 0,
	-1, 812,
	138, 1087,
	226, 1087,
	261, 1087,
	-2, 1037,
	-1, 828,
	138, 1086,
	226, 1086,
	261, 1086,
	-2, 1037,
	-1, 852,
	466, 1712,
	-2, 516,
	-1, 880,
	464, 1704,
	-2, 1695,
	-1, 886,
	5, 1224,
	-2, 1746,
	-1, 887,
	5, 1225,
	-2, 1750,
	-1, 888,
	5, 1226,
	-2, 1749,
	-1, 889,
	5, 1227,
	-2, 1965,
	-1, 890,
	5, 1228,
	-2, 1858,
	-1, 891,
	5, 1229,
	-2, 1930,
	-1, 892,
	5, 1230,
	-2, 1932,
	-1, 893,
	5, 1231,
	-2, 1945,
	-1, 894,
	5, 1232,
	-2, 1933,
	-1, 895,
	5, 1233,
	-2, 1934,
	-1, 896,
	5, 1234,
	-2, 1745,
	-1, 897,
	5, 1235,
	-2, 1981,
	-1, 898,
	5, 1236,
	-2, 1819,
	-1, 899,
	5, 1237,
	-2, 1868,
	-1, 900,
	5, 1238,
	-2, 1870,
	-1, 901,
	5, 1239,
	-2, 1823,
	-1, 902,
	5, 1240,
	464, 1722,
	-2, 1713,
	-1, 908,
	464, 1723,
	-2, 1714,
	-1, 910,
	5, 1244,
	-2, 2014,
	-1, 911,
	5, 1245,
	-2, 2015,
	-1, 912,
	5, 1246,
	-2, 1822,
	-1, 913,
	5, 1247,
	-2, 2027,
	-1, 914,
	5, 1248,
	-2, 1824,
	-1, 915,
	5, 1249,
	-2, 1825,
	-1, 916,
	5, 1250,
	-2, 1826,
	-1, 917,
	5, 1251,
	-2, 1996,
	-1, 918,
	5, 1252,
	-2, 2025,
	-1, 919,
	5, 1253,
	-2, 1802,
	-1, 920,
	5, 1254,
	-2, 1803,
	-1, 921,
	5, 1268,
	-2, 2008,
	-1, 923,
	5, 1243,
	-2, 2004,
	-1, 924,
	5, 1243,
	-2, 2003,
	-1, 925,
	5, 1243,
	-2, 2020,
	-1, 926,
	5, 1260,
	-2, 1998,
	-1, 927,
	5, 1261,
	-2, 1747,
	-1, 928,
	5, 1271,
	-2, 1997,
	-1, 929,
	5, 1273,
	-2, 2036,
	-1, 931,
	5, 1284,
	-2, 1776,
	-1, 932,
	5, 1295,
	-2, 2029,
	-1, 933,
	5, 1287,
	-2, 2030,
	-1, 934,
	5, 1295,
	-2, 2031,
	-1, 935,
	5, 1291,
	-2, 2032,
	-1, 936,
	5, 1212,
	-2, 1832,
	-1, 937,
	5, 1213,
	-2, 1833,
	-1, 938,
	466, 1710,
	-2, 1694,
	-1, 939,
	464, 2057,
	-2, 1711,
	-1, 959,
	5, 1279,
	-2, 1956,
	-1, 977,
	5, 1278,
	-2, 2037,
	-1, 987,
	5, 1280,
	430, 1280,
	-2, 1999,
	-1, 988,
	5, 1281,
	430, 1281,
	-2, 2000,
	-1, 1025,
	464, 1722,
	-2, 1713,
	-1, 1053,
	154, 1968,
	395, 1968,
	447, 1968,
	466, 1968,
	-2, 0,
	-1, 1056,
	1, 494,
	467, 494,
	-2, 970,
	-1, 1176,
	315, 1691,
	457, 1691,
	-2, 1690,
	-1, 1199,
	468, 1691,
	-2, 1692,
	-1, 1237,
	306, 738,
	429, 738,
	-2, 250,
	-1, 1257,
	285, 1074,
	-2, 878,
	-1, 1266,
	265, 1717,
	-2, 0,
	-1, 1332,
	1, 369,
	463, 369,
	465, 369,
	467, 369,
	-2, 1048,
	-1, 1335,
	4, 2035,
	11, 2035,
	12, 2035,
	14, 2035,
	15, 2035,
	16, 2035,
	17, 2035,
	18, 2035,
	19, 2035,
	21, 2035,
	22, 2035,
	23, 2035,
	24, 2035,
	25, 2035,
	27, 2035,
	30, 2035,
	31, 2035,
	33, 2035,
	35, 2035,
	38, 2035,
	39, 2035,
	40, 2035,
	41, 2035,
	42, 2035,
	43, 2035,
	44, 2035,
	45, 2035,
	46, 2035,
	47, 2035,
	48, 2035,
	49, 2035,
	51, 2035,
	52, 2035,
	53, 2035,
	54, 2035,
	55, 2035,
	56, 2035,
	59, 2035,
	60, 2035,
	61, 2035,
	62, 2035,
	64, 2035,
	65, 2035,
	66, 2035,
	69, 2035,
	70, 2035,
	71, 2035,
	72, 2035,
	73, 2035,
	74, 2035,
	75, 2035,
	76, 2035,
	77, 2035,
	78, 2035,
	79, 2035,
	81, 2035,
	82, 2035,
	83, 2035,
	84, 2035,
	85, 2035,
	87, 2035,
	88, 2035,
	89, 2035,
	97, 2035,
	98, 2035,
	99, 2035,
	100, 2035,
	101, 2035,
	102, 2035,
	103, 2035,
	104, 2035,
	106, 2035,
	108, 2035,
	109, 2035,
	111, 2035,
	114, 2035,
	115, 2035,
	116, 2035,
	118, 2035,
	120, 2035,
	121, 2035,
	123, 2035,
	124, 2035,
	125, 2035,
	126, 2035,
	127, 2035,
	128, 2035,
	129, 2035,
	130, 2035,
	131, 2035,
	132, 2035,
	133, 2035,
	134, 2035,
	135, 2035,
	139, 2035,
	140, 2035,
	141, 2035,
	142, 2035,
	143, 2035,
	144, 2035,
	145, 2035,
	146, 2035,
	147, 2035,
	148, 2035,
	149, 2035,
	150, 2035,
	152, 2035,
	155, 2035,
	156, 2035,
	157, 2035,
	159, 2035,
	160, 2035,
	162, 2035,
	163, 2035,
	165, 2035,
	166, 2035,
	167, 2035,
	168, 2035,
	169, 2035,
	170, 2035,
	171, 2035,
	172, 2035,
	173, 2035,
	174, 2035,
	175, 2035,
	176, 2035,
	177, 2035,
	178, 2035,
	179, 2035,
	180, 2035,
	181, 2035,
	183, 2035,
	184, 2035,
	185, 2035,
	187, 2035,
	188, 2035,
	189, 2035,
	190, 2035,
	191, 2035,
	192, 2035,
	193, 2035,
	194, 2035,
	195, 2035,
	197, 2035,
	199, 2035,
	200, 2035,
	201, 2035,
	202, 2035,
	203, 2035,
	204, 2035,
	205, 2035,
	206, 2035,
	207, 2035,
	208, 2035,
	209, 2035,
	210, 2035,
	211, 2035,
	212, 2035,
	213, 2035,
	214, 2035,
	215, 2035,
	217, 2035,
	218, 2035,
	220, 2035,
	221, 2035,
	222, 2035,
	223, 2035,
	224, 2035,
	225, 2035,
	227, 2035,
	228, 2035,
	231, 2035,
	232, 2035,
	233, 2035,
	234, 2035,
	235, 2035,
	236, 2035,
	237, 2035,
	238, 2035,
	239, 2035,
	240, 2035,
	241, 2035,
	242, 2035,
	243, 2035,
	244, 2035,
	245, 2035,
	246, 2035,
	247, 2035,
	248, 2035,
	250, 2035,
	253, 2035,
	254, 2035,
	256, 2035,
	257, 2035,
	258, 2035,
	259, 2035,
	260, 2035,
	262, 2035,
	263, 2035,
	264, 2035,
	267, 2035,
	268, 2035,
	269, 2035,
	270, 2035,
	272, 2035,
	273, 2035,
	274, 2035,
	276, 2035,
	278, 2035,
	279, 2035,
	280, 2035,
	281, 2035,
	282, 2035,
	283, 2035,
	284, 2035,
	285, 2035,
	286, 2035,
	287, 2035,
	289, 2035,
	290, 2035,
	291, 2035,
	292, 2035,
	293, 2035,
	294, 2035,
	296, 2035,
	298, 2035,
	299, 2035,
	300, 2035,
	301, 2035,
	302, 2035,
	303, 2035,
	304, 2035,
	305, 2035,
	306, 2035,
	307, 2035,
	309, 2035,
	310, 2035,
	311, 2035,
	312, 2035,
	313, 2035,
	314, 2035,
	315, 2035,
	316, 2035,
	317, 2035,
	318, 2035,
	319, 2035,
	320, 2035,
	321, 2035,
	322, 2035,
	324, 2035,
	325, 2035,
	326, 2035,
	327, 2035,
	328, 2035,
	329, 2035,
	330, 2035,
	331, 2035,
	332, 2035,
	333, 2035,
	334, 2035,
	335, 2035,
	336, 2035,
	337, 2035,
	338, 2035,
	339, 2035,
	340, 2035,
	342, 2035,
	343, 2035,
	344, 2035,
	345, 2035,
	346, 2035,
	347, 2035,
	348, 2035,
	349, 2035,
	350, 2035,
	351, 2035,
	353, 2035,
	354, 2035,
	355, 2035,
	356, 2035,
	357, 2035,
	358, 2035,
	359, 2035,
	360, 2035,
	361, 2035,
	362, 2035,
	363, 2035,
	365, 2035,
	366, 2035,
	367, 2035,
	368, 2035,
	369, 2035,
	370, 2035,
	371, 2035,
	372, 2035,
	373, 2035,
	374, 2035,
	375, 2035,
	376, 2035,
	378, 2035,
	379, 2035,
	380, 2035,
	382, 2035,
	383, 2035,
	384, 2035,
	385, 2035,
	386, 2035,
	387, 2035,
	388, 2035,
	390, 2035,
	391, 2035,
	392, 2035,
	393, 2035,
	394, 2035,
	396, 2035,
	398, 2035,
	399, 2035,
	400, 2035,
	401, 2035,
	402, 2035,
	404, 2035,
	405, 2035,
	406, 2035,
	408, 2035,
	409, 2035,
	412, 2035,
	413, 2035,
	414, 2035,
	415, 2035,
	416, 2035,
	417, 2035,
	419, 2035,
	421, 2035,
	422, 2035,
	423, 2035,
	424, 2035,
	425, 2035,
	426, 2035,
	427, 2035,
	429, 2035,
	430, 2035,
	431, 2035,
	436, 2035,
	437, 2035,
	438, 2035,
	439, 2035,
	440, 2035,
	441, 2035,
	442, 2035,
	443, 2035,
	445, 2035,
	446, 2035,
	447, 2035,
	448, 2035,
	449, 2035,
	450, 2035,
	452, 2035,
	453, 2035,
	454, 2035,
	455, 2035,
	456, 2035,
	457, 2035,
	458, 2035,
	459, 2035,
	460, 2035,
	462, 2035,
	465, 2035,
	466, 2035,
	468, 2035,
	469, 2035,
	-2, 0,
	-1, 1340,
	154, 1938,
	395, 1938,
	447, 1938,
	466, 1938,
	-2, 0,
	-1, 1370,
	300, 642,
	351, 642,
	-2, 0,
	-1, 1394,
	1, 637,
	463, 637,
	465, 637,
	467, 637,
	-2, 0,
	-1, 1395,
	1, 662,
	463, 662,
	465, 662,
	467, 662,
	-2, 0,
	-1, 1396,
	1, 644,
	463, 644,
	465, 644,
	467, 644,
	-2, 0,
	-1, 1398,
	1, 648,
	463, 648,
	465, 648,
	467, 648,
	-2, 0,
	-1, 1423,
	1, 1988,
	463, 1988,
	465, 1988,
	466, 1988,
	467, 1988,
	-2, 688,
	-1, 1424,
	1, 1935,
	463, 1935,
	465, 1935,
	466, 1935,
	467, 1935,
	-2, 689,
	-1, 1439,
	1, 965,
	467, 965,
	-2, 970,
	-1, 1444,
	138, 1086,
	226, 1086,
	261, 1086,
	-2, 1037,
	-1, 1540,
	122, 1050,
	138, 1050,
	196, 1050,
	226, 1050,
	261, 1050,
	271, 1050,
	410, 1050,
	-2, 1453,
	-1, 1595,
	465, 1593,
	-2, 0,
	-1, 1629,
	122, 1050,
	138, 1050,
	196, 1050,
	226, 1050,
	261, 1050,
	271, 1050,
	410, 1050,
	-2, 1162,
	-1, 1688,
	464, 1283,
	-2, 1271,
	-1, 1732,
	1, 496,
	467, 496,
	-2, 970,
	-1, 1933,
	1, 639,
	463, 639,
	465, 639,
	467, 639,
	-2, 0,
	-1, 1934,
	1, 664,
	463, 664,
	465, 664,
	467, 664,
	-2, 0,
	-1, 2026,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1334,
	-1, 2027,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1335,
	-1, 2028,
	82, 0,
	209, 0,
	210, 0,
	449, 0,
	450, 0,
	-2, 1336,
	-1, 2029,
	82, 0,
	209, 0,
	210, 0,
	449, 0,
	450, 0,
	-2, 1337,
	-1, 2030,
	82, 0,
	209, 0,
	210, 0,
	449, 0,
	450, 0,
	-2, 1338,
	-1, 2031,
	82, 0,
	209, 0,
	210, 0,
	449, 0,
	450, 0,
	-2, 1339,
	-1, 2032,
	82, 0,
	209, 0,
	210, 0,
	449, 0,
	450, 0,
	-2, 1340,
	-1, 2033,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1341,
	-1, 2045,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1353,
	-1, 2046,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1354,
	-1, 2047,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1355,
	-1, 2050,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1360,
	-1, 2056,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1364,
	-1, 2058,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1372,
	-1, 2059,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1373,
	-1, 2060,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1374,
	-1, 2061,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1375,
	-1, 2157,
	5, 1240,
	154, 1604,
	464, 1722,
	-2, 1713,
	-1, 2158,
	154, 1605,
	-2, 1992,
	-1, 2159,
	154, 1606,
	-2, 1855,
	-1, 2160,
	154, 1607,
	-2, 1777,
	-1, 2161,
	154, 1608,
	-2, 1813,
	-1, 2162,
	154, 1609,
	-2, 1853,
	-1, 2163,
	154, 1610,
	-2, 1929,
	-1, 2164,
	154, 1611,
	-2, 1437,
	-1, 2233,
	1, 1163,
	2, 1163,
	87, 1163,
	122, 1163,
	138, 1163,
	151, 1163,
	155, 1163,
	161, 1163,
	164, 1163,
	187, 1163,
	196, 1163,
	206, 1163,
	222, 1163,
	226, 1163,
	245, 1163,
	261, 1163,
	265, 1163,
	271, 1163,
	323, 1163,
	325, 1163,
	410, 1163,
	420, 1163,
	433, 1163,
	434, 1163,
	435, 1163,
	444, 1163,
	463, 1163,
	465, 1163,
	467, 1163,
	469, 1163,
	-2, 1162,
	-1, 2246,
	464, 1696,
	-2, 1708,
	-1, 2266,
	464, 1282,
	-2, 1272,
	-1, 2514,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1362,
	-1, 2515,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1366,
	-1, 2521,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1368,
	-1, 2708,
	203, 970,
	296, 970,
	304, 970,
	444, 970,
	-2, 493,
	-1, 2802,
	285, 1074,
	-2, 878,
	-1, 2891,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1370,
	-1, 2898,
	200, 0,
	202, 0,
	253, 0,
	-2, 1389,
	-1, 2961,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1418,
	-1, 2962,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1419,
	-1, 2963,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1420,
	-1, 2967,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1424,
	-1, 2968,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1425,
	-1, 2969,
	14, 0,
	15, 0,
	16, 0,
	445, 0,
	446, 0,
	447, 0,
	-2, 1426,
	-1, 3013,
	464, 1697,
	-2, 1709,
	-1, 3102,
	466, 2139,
	-2, 1014,
	-1, 3153,
	200, 0,
	202, 0,
	253, 0,
	-2, 1390,
	-1, 3156,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1393,
	-1, 3157,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1395,
	-1, 3317,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1394,
	-1, 3318,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1396,
	-1, 3328,
	200, 0,
	-2, 1427,
	-1, 3437,
	200, 0,
	-2, 1428,
	-1, 3556,
	43, 0,
	173, 0,
	225, 0,
	358, 0,
	442, 0,
	448, 0,
	-2, 1995,
}

const sqlPrivate = 57344

const sqlLast = 79019

var sqlAct = [...]int{

	908, 3357, 3650, 3386, 3565, 3555, 3360, 3640, 2789, 2639,
	2189, 3258, 3534, 3566, 3522, 3508, 3567, 3135, 3525, 3346,
	3393, 2409, 2929, 3554, 3603, 3441, 2640, 1026, 3282, 3033,
	2725, 2013, 1324, 3094, 838, 3398, 3089, 3306, 3214, 214,
	1062, 214, 214, 2785, 214, 214, 214, 214, 214, 1663,
	2073, 214, 2818, 3287, 2442, 2381, 1457, 1180, 829, 594,
	2883, 1208, 3332, 3034, 2811, 3076, 1909, 930, 1081, 2813,
	1780, 572, 2223, 1320, 2398, 2384, 2373, 214, 1635, 2444,
	2356, 594, 2507, 1018, 2662, 2682, 2654, 2297, 3187, 692,
	2452, 2625, 3134, 2441, 1173, 2643, 1604, 2433, 2410, 1378,
	2435, 1867, 1857, 1864, 1856, 2299, 2984, 2624, 1789, 2226,
	2010, 2542, 1568, 2086, 3442, 1548, 2006, 2115, 2503, 2645,
	1192, 1200, 1664, 837, 142, 2451, 2382, 1807, 2225, 1814,
	904, 2357, 2332, 1069, 1767, 1189, 864, 4, 1765, 1605,
	2207, 1439, 880, 2106, 1818, 2070, 2333, 2403, 1182, 2787,
	2688, 1333, 1255, 1848, 825, 1009, 540, 1317, 1012, 2109,
	3387, 1563, 1058, 2289, 208, 2215, 2228, 991, 2445, 2197,
	1614, 1624, 2153, 595, 2117, 2087, 596, 214, 214, 1531,
	1458, 1456, 2186, 1847, 556, 1307, 590, 207, 1008, 149,
	566, 1621, 1873, 667, 1281, 638, 150, 1205, 1779, 142,
	865, 37, 551, 1331, 543, 36, 34, 526, 1014, 989,
	1438, 548, 25, 686, 1887, 23, 21, 756, 1462, 2538,
	206, 1263, 2998, 599, 2999, 1889, 1889, 2641, 2597, 2598,
	739, 1889, 3680, 32, 3671, 3670, 2206, 3649, 2206, 2206,
	3632, 1824, 833, 3630, 3228, 599, 602, 3228, 3589, 3587,
	3585, 833, 3590, 2206, 2206, 1470, 1471, 3582, 2828, 2706,
	3579, 3583, 828, 2827, 3580, 3576, 3552, 702, 602, 1824,
	1824, 2206, 3551, 3550, 3547, 1501, 1824, 1901, 1901, 3546,
	3520, 3503, 1473, 1901, 3228, 2261, 3497, 3496, 2199, 3491,
	2206, 2206, 2612, 3228, 3490, 3484, 3478, 3476, 3228, 1824,
	3228, 3228, 3439, 3420, 1006, 3417, 2261, 1824, 687, 3228,
	1472, 3376, 3375, 3367, 3366, 1824, 1824, 1824, 3228, 1492,
	1043, 3338, 3319, 2551, 1327, 1824, 2261, 1024, 3504, 2552,
	1038, 3423, 813, 57, 690, 689, 86, 3304, 3295, 812,
	2988, 1901, 2841, 992, 992, 1470, 1471, 58, 3256, 3246,
	3227, 3155, 2206, 2206, 3228, 2261, 3110, 1066, 3104, 3074,
	2857, 62, 2857, 3075, 3008, 1501, 2603, 3006, 3009, 2991,
	2913, 3007, 1473, 2206, 1824, 2198, 2910, 2856, 2257, 820,
	2206, 2857, 2988, 1495, 1496, 1497, 1498, 993, 1901, 1066,
	2848, 2638, 68, 1478, 2849, 2206, 3247, 2636, 2635, 1824,
	1472, 2206, 2206, 1539, 1039, 2849, 2589, 2597, 2598, 1492,
	2206, 2570, 1824, 2553, 2456, 2571, 1489, 2206, 995, 2431,
	996, 2347, 74, 1905, 1500, 1502, 2430, 2359, 2288, 1738,
	1905, 1901, 85, 2597, 2598, 2274, 1784, 75, 82, 2206,
	2206, 2260, 2255, 2248, 2205, 2261, 2206, 1824, 2206, 2541,
	1904, 2613, 2841, 2379, 1905, 3149, 2506, 1888, 1823, 2286,
	1397, 1600, 1204, 3061, 1226, 2886, 2866, 1622, 1817, 2112,
	182, 1758, 1380, 1495, 1496, 1497, 1498, 2242, 1493, 2241,
	2240, 76, 2829, 1478, 2239, 2238, 997, 994, 834, 819,
	1890, 1890, 818, 182, 817, 816, 1890, 815, 1470, 1471,
	811, 2830, 3203, 2483, 1539, 810, 809, 808, 807, 806,
	184, 2597, 2598, 805, 1500, 1502, 804, 803, 1501, 802,
	801, 800, 799, 737, 736, 1473, 75, 735, 734, 733,
	732, 214, 731, 184, 730, 2113, 729, 728, 727, 726,
	725, 724, 723, 1487, 1488, 2603, 1220, 722, 721, 2614,
	720, 719, 1214, 1472, 183, 718, 717, 716, 1499, 214,
	715, 714, 713, 712, 176, 711, 214, 701, 1493, 700,
	658, 2603, 177, 2827, 1039, 657, 1494, 183, 615, 614,
	613, 605, 214, 1084, 214, 214, 1185, 214, 1084, 214,
	1185, 604, 77, 151, 603, 579, 3572, 578, 214, 214,
	577, 3553, 576, 2198, 560, 1068, 204, 2114, 2111, 1073,
	203, 202, 201, 200, 199, 198, 151, 197, 196, 2144,
	195, 194, 193, 214, 192, 148, 80, 191, 81, 190,
	2613, 1225, 189, 3472, 188, 1039, 1478, 214, 1897, 1888,
	1185, 1185, 214, 214, 1981, 214, 187, 182, 1499, 2603,
	186, 185, 3166, 3002, 2858, 1082, 2613, 214, 2685, 691,
	1193, 2564, 1195, 118, 2547, 214, 1494, 1500, 1502, 2608,
	2606, 2607, 2599, 2600, 2601, 2602, 2604, 2605, 2391, 214,
	214, 214, 214, 214, 1185, 1185, 2363, 184, 2249, 1185,
	2232, 1912, 214, 1185, 214, 214, 1483, 1481, 1482, 1474,
	1475, 1476, 1477, 1479, 1480, 1571, 1571, 2116, 214, 1056,
	119, 1570, 1570, 1219, 2136, 1763, 1625, 1328, 2134, 1648,
	1557, 1493, 1210, 152, 1075, 1028, 3432, 3356, 2614, 3426,
	3296, 183, 1574, 1569, 2613, 3291, 182, 1077, 1469, 1170,
	1175, 176, 3207, 3186, 1185, 3424, 836, 3185, 3173, 177,
	3172, 3171, 118, 3170, 2614, 3165, 1051, 3163, 3162, 1911,
	1550, 3073, 599, 3022, 3021, 3020, 3012, 214, 2981, 2980,
	688, 1207, 2979, 2906, 1206, 2902, 184, 2680, 2852, 2632,
	1268, 214, 2623, 1490, 1486, 602, 1483, 1481, 1482, 1474,
	1475, 1476, 1477, 1479, 1480, 2596, 214, 1350, 2593, 182,
	2592, 2590, 2577, 182, 2576, 1176, 2575, 2110, 2572, 1199,
	2569, 2563, 2406, 142, 142, 2546, 2539, 2432, 1321, 1494,
	183, 2233, 1555, 1005, 2099, 1469, 3059, 1336, 1338, 1861,
	176, 2270, 2614, 1468, 1550, 1829, 3678, 1334, 177, 184,
	3648, 3647, 1213, 184, 1218, 1284, 1224, 3588, 2608, 2606,
	2607, 2599, 2600, 2601, 2602, 2604, 2605, 1027, 1827, 151,
	2392, 1407, 1264, 1264, 1265, 1311, 1314, 2931, 3542, 2597,
	2598, 1445, 2615, 2616, 2617, 2606, 2607, 2599, 2600, 2601,
	2602, 2604, 2605, 183, 3540, 182, 3443, 183, 3151, 3469,
	1399, 182, 1551, 176, 1549, 3466, 3463, 176, 3462, 3461,
	3456, 177, 1199, 3450, 3421, 177, 3416, 3415, 2076, 3372,
	1178, 3352, 3330, 3314, 1201, 3313, 3301, 3300, 1759, 2334,
	3280, 3277, 151, 3271, 1444, 184, 151, 2502, 3202, 3184,
	3124, 184, 1346, 2612, 3290, 3121, 1437, 3050, 2352, 1349,
	1481, 1482, 1474, 1475, 1476, 1477, 1479, 1480, 3049, 1538,
	3037, 2700, 3036, 2319, 2607, 2599, 2600, 2601, 2602, 2604,
	2605, 2677, 2994, 1371, 1257, 1260, 2897, 1443, 2082, 183,
	2859, 1355, 2842, 2805, 2774, 183, 2751, 2597, 2598, 176,
	1442, 2728, 2727, 1455, 2701, 176, 2637, 177, 2568, 2567,
	2562, 214, 1398, 177, 2530, 2372, 1575, 1440, 1572, 1564,
	1561, 2268, 2267, 2244, 2237, 2204, 2132, 2603, 151, 1470,
	1471, 1535, 1647, 1603, 151, 1611, 1599, 1342, 214, 1598,
	1602, 1597, 2390, 1596, 1595, 834, 1594, 813, 214, 1084,
	214, 214, 214, 214, 812, 1593, 1473, 1592, 594, 214,
	214, 907, 1591, 594, 214, 1658, 1589, 1573, 182, 214,
	1465, 1466, 1446, 1588, 1587, 1185, 1470, 1471, 2618, 182,
	2728, 1730, 1586, 1585, 1472, 1584, 1583, 1582, 1362, 1913,
	1581, 1580, 1579, 1578, 182, 1577, 1084, 1552, 1536, 1534,
	1529, 3274, 2143, 1473, 1050, 182, 1565, 1566, 184, 1650,
	1041, 1034, 2613, 3204, 3159, 3018, 1608, 1609, 3005, 184,
	1660, 1651, 2997, 2550, 1761, 1727, 1656, 2597, 2598, 1690,
	2235, 1472, 1735, 3341, 184, 2603, 2263, 3206, 1470, 1471,
	1729, 3017, 1551, 2597, 2598, 184, 2698, 1532, 1643, 1784,
	3249, 2754, 183, 1632, 2597, 2598, 1749, 1748, 1070, 142,
	1758, 1755, 176, 183, 1072, 1473, 3464, 1478, 1764, 1758,
	177, 2814, 3294, 176, 1024, 3248, 1024, 992, 183, 1066,
	3000, 177, 1654, 1625, 2844, 1652, 1435, 3427, 176, 183,
	1758, 2405, 1630, 1472, 1655, 1584, 177, 2135, 1666, 176,
	1370, 2133, 151, 3425, 1758, 2843, 1633, 177, 3399, 3355,
	2614, 2574, 2573, 1571, 1063, 1732, 1071, 151, 1584, 1570,
	1601, 1623, 599, 1185, 1185, 214, 3082, 599, 151, 834,
	2512, 1084, 1733, 2336, 1757, 1066, 2321, 1642, 1057, 1067,
	1627, 1641, 1640, 3048, 1659, 602, 1021, 1744, 1638, 1726,
	602, 1637, 1636, 1559, 1910, 1820, 1066, 1752, 1773, 3394,
	797, 1819, 1380, 1858, 1661, 2603, 2791, 1408, 2790, 1639,
	214, 3065, 1379, 1199, 214, 214, 1478, 2112, 1862, 3052,
	1804, 2864, 2768, 1806, 1802, 3333, 1811, 214, 1750, 3651,
	2597, 2598, 2603, 2615, 2616, 2617, 214, 2641, 214, 798,
	214, 1556, 2933, 1825, 214, 1004, 3573, 1064, 2107, 3150,
	2266, 1590, 1567, 2783, 1855, 1065, 1241, 2556, 214, 3584,
	1788, 3581, 2823, 2609, 2610, 2611, 3029, 3518, 3090, 3043,
	2608, 2606, 2607, 2599, 2600, 2601, 2602, 2604, 2605, 2439,
	2402, 3483, 1359, 2113, 3618, 1821, 2499, 3619, 2710, 1754,
	2613, 3238, 848, 1239, 2612, 653, 1454, 1229, 1185, 2275,
	1185, 214, 1185, 3574, 778, 214, 791, 3675, 1185, 1851,
	834, 1185, 214, 3385, 214, 214, 1815, 3378, 1405, 842,
	1753, 1967, 3067, 3063, 1185, 1185, 1185, 3062, 214, 599,
	1965, 1870, 1452, 832, 3026, 214, 789, 3025, 1207, 1072,
	2561, 1206, 2560, 793, 594, 214, 1781, 214, 2301, 214,
	2559, 214, 602, 214, 1810, 2114, 2111, 2558, 2516, 1406,
	1745, 2354, 1822, 2346, 2343, 1240, 2699, 214, 2603, 787,
	214, 784, 214, 1063, 654, 1072, 1777, 2324, 2292, 1063,
	832, 214, 2256, 2601, 2602, 2604, 2605, 2057, 2614, 2292,
	2290, 1071, 1839, 1838, 1915, 1066, 1441, 1782, 1783, 1929,
	2753, 2290, 214, 1404, 1203, 1784, 2712, 831, 214, 827,
	1878, 214, 2128, 1474, 1475, 1476, 1477, 1479, 1480, 2618,
	2399, 2127, 2015, 2282, 1284, 1778, 1875, 1071, 1875, 1917,
	1872, 1357, 1876, 1084, 3312, 1854, 1880, 1881, 2304, 2323,
	1790, 1453, 1975, 1274, 3482, 1273, 1334, 1352, 1334, 1920,
	1978, 2865, 1295, 2613, 831, 2116, 1837, 2072, 781, 1794,
	212, 1272, 1979, 1271, 2172, 1480, 1064, 1940, 1643, 1235,
	1924, 906, 1064, 3362, 1065, 1994, 1249, 2247, 2312, 1985,
	1065, 2072, 833, 1988, 1991, 3544, 1892, 1448, 1201, 1894,
	1031, 1051, 1896, 3039, 2311, 1919, 1899, 1877, 1690, 1690,
	1451, 1906, 1791, 1907, 2264, 2014, 2088, 2089, 599, 2871,
	2870, 2599, 2600, 2601, 2602, 2604, 2605, 1372, 1084, 2480,
	2116, 1029, 2088, 2104, 1476, 1477, 1479, 1480, 1368, 833,
	1947, 602, 2605, 1977, 1049, 863, 2340, 1256, 2599, 2600,
	2601, 2602, 2604, 2605, 1353, 3250, 2080, 1759, 1756, 709,
	1941, 2614, 2078, 2011, 2012, 2110, 1759, 2334, 1937, 1983,
	2152, 214, 2156, 2156, 2170, 1434, 2088, 1666, 1666, 2190,
	2192, 1992, 2107, 1254, 2196, 3234, 2527, 1759, 2334, 1932,
	2303, 2254, 1795, 1084, 3655, 214, 1982, 1984, 1403, 1987,
	2119, 1759, 2334, 3618, 214, 2278, 1989, 2486, 1993, 3608,
	2525, 656, 655, 3501, 1032, 3140, 214, 2280, 1933, 1084,
	1775, 1980, 813, 852, 1066, 813, 813, 3139, 2245, 2002,
	1066, 830, 2003, 2004, 1418, 2709, 1908, 2103, 2821, 3635,
	2820, 1394, 1201, 3311, 834, 1918, 834, 1237, 2322, 2281,
	1380, 1974, 1813, 1796, 1797, 1380, 1784, 3570, 1926, 1927,
	1928, 2922, 1792, 2765, 2279, 3665, 1020, 1889, 1775, 1934,
	2504, 2505, 1812, 2220, 2609, 2610, 2611, 2759, 830, 3457,
	2084, 2608, 2606, 2607, 2599, 2600, 2601, 2602, 2604, 2605,
	2489, 2246, 1395, 649, 1793, 648, 2820, 2101, 538, 214,
	2777, 1801, 1808, 2919, 1786, 2212, 2302, 1185, 1256, 2125,
	1358, 3636, 2711, 785, 2126, 3051, 2522, 2129, 1562, 2130,
	2131, 1632, 533, 1782, 1783, 2211, 2291, 1966, 1024, 2523,
	1022, 3232, 2234, 2528, 1084, 2165, 1964, 992, 2194, 214,
	3040, 2181, 1976, 785, 1024, 1294, 795, 214, 2202, 2203,
	794, 1809, 3499, 685, 2217, 2218, 142, 2213, 214, 1939,
	1630, 2116, 1234, 2219, 1735, 2224, 3607, 1617, 2230, 2231,
	2258, 214, 606, 3363, 1185, 2920, 786, 2292, 785, 2696,
	2741, 3500, 1798, 2743, 3571, 3625, 3267, 214, 1084, 2306,
	3308, 2488, 3064, 2293, 214, 214, 2387, 3638, 2344, 1620,
	1775, 1573, 3136, 3530, 3324, 3468, 2287, 2518, 2745, 1528,
	2485, 3656, 580, 1030, 2098, 2566, 2216, 214, 2214, 2229,
	214, 2269, 833, 1768, 2740, 3014, 214, 1769, 1690, 3273,
	3130, 2071, 1819, 2273, 1618, 1415, 1354, 3643, 710, 1044,
	214, 834, 3141, 1565, 1566, 3568, 1799, 782, 214, 1447,
	214, 3617, 834, 214, 3233, 2272, 834, 3615, 2744, 214,
	2355, 3569, 214, 1382, 214, 2341, 214, 2326, 214, 214,
	2276, 214, 1185, 1185, 1185, 2116, 1185, 2524, 2376, 3404,
	3279, 214, 214, 2327, 214, 214, 2526, 2809, 2394, 2487,
	1367, 1369, 3307, 1805, 2079, 214, 1048, 1666, 2335, 2337,
	2338, 2339, 2314, 2305, 2308, 2426, 2427, 2296, 3606, 586,
	214, 214, 214, 2325, 3078, 214, 1770, 214, 938, 1846,
	214, 1936, 214, 1610, 214, 1042, 2342, 1819, 1416, 1772,
	3666, 1819, 1890, 1819, 2054, 2413, 2360, 1619, 834, 1037,
	3637, 2422, 1931, 2396, 3268, 214, 214, 214, 214, 214,
	214, 525, 214, 1461, 3137, 2457, 2458, 210, 599, 528,
	529, 2370, 544, 528, 544, 554, 559, 1207, 2884, 575,
	2361, 2438, 2453, 2380, 607, 608, 2470, 210, 2471, 1785,
	214, 602, 1746, 2318, 1774, 2468, 534, 1450, 3660, 2970,
	3369, 1176, 588, 3368, 2408, 696, 3182, 3309, 142, 210,
	1613, 1417, 3350, 2689, 2307, 3447, 2424, 1199, 2465, 3028,
	2810, 2723, 2428, 2719, 2351, 2395, 2415, 1460, 2472, 2491,
	2474, 2493, 2476, 1021, 1334, 1021, 2423, 2429, 3641, 2383,
	1998, 2455, 2365, 2440, 2367, 2459, 1768, 2460, 2484, 535,
	1769, 852, 2374, 1871, 1860, 852, 2467, 2419, 822, 2420,
	773, 2421, 1859, 1168, 1833, 2473, 1528, 2475, 1168, 2477,
	1743, 3470, 2918, 2328, 2052, 3509, 2498, 2055, 1617, 214,
	610, 609, 824, 2544, 2545, 1460, 2519, 2404, 2548, 536,
	2404, 537, 2208, 1775, 2494, 3095, 773, 1971, 1199, 1199,
	1739, 3283, 3237, 582, 1613, 528, 528, 3143, 2345, 3236,
	1620, 2068, 3642, 210, 2371, 1459, 1297, 2496, 824, 2497,
	823, 3392, 587, 3390, 2501, 2747, 2051, 3351, 2540, 1615,
	611, 612, 2733, 2730, 2996, 2066, 1383, 1741, 2971, 1770,
	2549, 1999, 1199, 2729, 3644, 1618, 2972, 1356, 3659, 773,
	1461, 2510, 1772, 3183, 1742, 774, 1990, 1925, 2653, 2210,
	706, 2652, 584, 1396, 2209, 2253, 2252, 2251, 1616, 699,
	2250, 824, 1617, 1459, 2478, 2378, 1199, 3144, 1199, 2634,
	2517, 1084, 1266, 1280, 831, 1542, 3358, 3452, 2656, 1547,
	3259, 774, 2648, 2649, 1278, 2650, 2853, 1869, 708, 1267,
	214, 581, 2358, 3622, 1620, 214, 2425, 1774, 214, 3388,
	3348, 214, 214, 1084, 2329, 2330, 3512, 214, 3188, 2985,
	3471, 2123, 3624, 1615, 3586, 3465, 3453, 2627, 3329, 2555,
	1084, 3181, 2626, 1771, 2896, 2862, 2670, 214, 585, 1618,
	2779, 2062, 3349, 2591, 774, 2529, 1432, 1430, 1619, 583,
	2063, 2375, 214, 2647, 2064, 3235, 2353, 1412, 2069, 2053,
	1410, 2320, 1616, 2690, 2271, 3359, 1649, 1646, 1433, 1393,
	214, 214, 214, 1347, 1391, 2879, 214, 2878, 1389, 214,
	2660, 827, 3513, 1963, 2684, 2673, 214, 214, 2707, 214,
	214, 214, 3454, 1387, 2686, 2482, 2679, 2481, 2694, 1385,
	775, 2713, 2687, 214, 214, 214, 1775, 2462, 2683, 1690,
	1973, 1944, 214, 2705, 2658, 1728, 1576, 2732, 2642, 1351,
	2737, 2738, 1024, 1377, 214, 1185, 2676, 214, 2659, 1253,
	2720, 2122, 1375, 2668, 2657, 1084, 775, 1024, 2715, 2671,
	2672, 1276, 1619, 2655, 1084, 1690, 2629, 2630, 2631, 214,
	3564, 3255, 214, 214, 3245, 3506, 214, 2716, 2717, 1185,
	214, 3211, 704, 705, 2697, 2664, 783, 1024, 1185, 1185,
	1185, 697, 698, 2731, 2669, 214, 2735, 2756, 1666, 1279,
	2758, 214, 2691, 2692, 2693, 2674, 214, 2675, 214, 775,
	1277, 2816, 2800, 834, 707, 214, 3604, 2708, 1431, 1429,
	2724, 3093, 2065, 2714, 2778, 2812, 821, 3046, 776, 1411,
	3044, 2067, 1409, 1768, 1666, 2775, 2687, 1769, 2766, 1185,
	1185, 1392, 2702, 2703, 2796, 2704, 1390, 214, 214, 1773,
	1388, 214, 1962, 2746, 3027, 2752, 2808, 1185, 2799, 2665,
	2788, 2825, 2761, 2792, 776, 1386, 1771, 777, 2764, 2762,
	2400, 1384, 2389, 2763, 1655, 1773, 2388, 2770, 2368, 1035,
	1903, 1902, 2769, 2776, 214, 1900, 1084, 214, 214, 1084,
	214, 2326, 2780, 2453, 1898, 1376, 1895, 1893, 2817, 2840,
	1891, 2663, 2453, 777, 1374, 1882, 1830, 1045, 1815, 788,
	790, 214, 1828, 1275, 575, 1816, 1815, 776, 1803, 1800,
	1787, 2667, 2860, 1020, 1776, 1020, 1770, 2915, 3409, 1168,
	210, 2822, 210, 210, 2508, 1190, 2815, 210, 1001, 1772,
	2831, 1657, 3619, 3536, 1199, 1024, 210, 1209, 1084, 2748,
	2749, 2851, 2855, 2750, 142, 142, 777, 2876, 1193, 1463,
	3303, 1082, 1002, 2877, 1854, 1084, 3298, 214, 2838, 2839,
	852, 1233, 3297, 2867, 2824, 2868, 1168, 2869, 2861, 2454,
	2899, 1762, 2771, 2772, 1231, 1252, 2773, 1022, 2292, 1022,
	210, 210, 3411, 1190, 1774, 2292, 2310, 2666, 1690, 1784,
	2290, 3103, 2908, 2909, 3225, 210, 2873, 2309, 2509, 1935,
	1427, 1428, 1961, 1293, 1960, 1942, 3239, 3459, 1373, 2880,
	2912, 3434, 2874, 2882, 3189, 2331, 2313, 210, 210, 210,
	210, 1190, 3222, 1467, 2833, 2834, 2835, 2927, 2836, 2837,
	575, 539, 210, 210, 2982, 1464, 1470, 1471, 1003, 1690,
	1690, 2350, 2904, 1736, 2348, 2315, 696, 1021, 2317, 3505,
	3639, 3473, 3086, 2349, 3077, 1690, 1690, 1666, 2914, 2767,
	2316, 1470, 1471, 1021, 3223, 214, 214, 2921, 2923, 2924,
	2934, 2930, 3011, 2407, 1819, 2936, 1084, 550, 2195, 2937,
	1731, 1662, 2939, 1775, 2695, 3658, 1690, 3001, 1473, 2597,
	2598, 1472, 2947, 2797, 2011, 2940, 3475, 214, 2949, 1539,
	1199, 1168, 2801, 2802, 2803, 210, 2974, 2118, 1666, 1666,
	2011, 2950, 1470, 1471, 1361, 1766, 1472, 2284, 2283, 210,
	1360, 3016, 2284, 2975, 1666, 1666, 2285, 2925, 2124, 3160,
	1414, 3015, 834, 1413, 559, 2926, 2935, 1537, 3667, 3444,
	3382, 2978, 3342, 3340, 214, 2989, 2990, 3270, 3013, 3205,
	3127, 142, 3053, 2846, 2847, 1666, 3120, 3109, 3023, 3088,
	3072, 3071, 2992, 2993, 3070, 2983, 3042, 2832, 2806, 2804,
	1185, 1201, 2464, 2463, 3003, 3066, 2417, 2393, 2987, 2369,
	2083, 1959, 214, 214, 1958, 1024, 1024, 1957, 1956, 1885,
	214, 1884, 1883, 1863, 3004, 1841, 1840, 1836, 1835, 1084,
	214, 1834, 3068, 1832, 1185, 1831, 1426, 1425, 1306, 1305,
	3218, 2001, 1304, 1303, 3219, 3057, 3058, 3060, 214, 1302,
	1301, 3031, 1300, 1771, 3083, 1299, 3105, 1298, 1296, 1291,
	1290, 1289, 214, 214, 1185, 1185, 1185, 3069, 214, 214,
	214, 1288, 1287, 214, 214, 1248, 1690, 214, 214, 1247,
	1185, 2081, 1246, 1245, 3221, 1244, 214, 1084, 1243, 1242,
	1236, 3097, 3100, 2326, 3084, 3099, 3019, 3224, 1542, 1230,
	1228, 1227, 3096, 1047, 1046, 976, 885, 1084, 1737, 3091,
	796, 640, 3128, 780, 3085, 3361, 1420, 73, 1238, 626,
	67, 3041, 635, 3517, 2739, 1943, 1381, 3087, 1945, 2678,
	2236, 2724, 3498, 3116, 3158, 2413, 3167, 3101, 3098, 2565,
	3440, 3323, 2121, 1558, 3107, 1666, 3106, 2177, 69, 873,
	958, 3266, 214, 3265, 3212, 3030, 2443, 3117, 3118, 528,
	3112, 3263, 3111, 3119, 3262, 2453, 3125, 3154, 3126, 841,
	3045, 1087, 3047, 1747, 2173, 3123, 3122, 879, 1760, 2265,
	210, 2155, 210, 1670, 882, 1690, 210, 3146, 3145, 1667,
	3138, 1024, 3133, 1168, 1669, 884, 1209, 883, 1190, 210,
	3220, 210, 1668, 1560, 881, 1665, 210, 1209, 544, 2377,
	3225, 210, 1209, 2411, 1283, 214, 760, 575, 1751, 2077,
	2105, 1084, 2554, 1084, 1553, 854, 875, 2102, 1040, 853,
	2661, 2819, 3010, 3289, 1997, 2500, 643, 2594, 3222, 2108,
	1854, 3215, 1033, 2178, 2171, 2167, 214, 214, 214, 2401,
	1436, 1530, 2412, 1074, 1666, 3213, 857, 2075, 214, 3180,
	1544, 3217, 2534, 1449, 2826, 214, 2681, 214, 2262, 3533,
	214, 214, 214, 2005, 1845, 1000, 3194, 999, 1168, 998,
	3223, 3524, 1084, 214, 214, 1185, 3230, 3521, 1084, 2786,
	1740, 2277, 1522, 2793, 869, 3199, 214, 3241, 3191, 3192,
	3193, 3197, 3210, 3196, 1198, 2646, 3200, 2854, 1250, 3458,
	1521, 214, 3216, 2683, 1084, 3201, 3129, 1185, 792, 3231,
	3449, 1061, 1060, 1059, 2722, 3664, 3038, 181, 3190, 1986,
	826, 3242, 3243, 3208, 3209, 178, 3195, 180, 3229, 179,
	3055, 90, 35, 1168, 16, 214, 117, 1020, 116, 115,
	114, 1024, 3240, 113, 112, 111, 110, 1084, 3252, 1024,
	109, 3275, 108, 1020, 107, 106, 105, 104, 3257, 1168,
	103, 3299, 1024, 210, 3285, 3261, 3288, 3272, 3253, 102,
	101, 100, 99, 3260, 3293, 3284, 98, 1084, 3113, 3114,
	3115, 97, 96, 3286, 3281, 95, 94, 93, 92, 91,
	571, 568, 49, 48, 89, 88, 3302, 15, 33, 13,
	53, 1022, 54, 12, 1916, 28, 29, 79, 210, 78,
	3335, 27, 210, 210, 1084, 3310, 3218, 1022, 14, 1082,
	3219, 26, 214, 24, 214, 1868, 1084, 214, 10, 8,
	3320, 7, 30, 1634, 210, 214, 210, 11, 210, 3315,
	147, 146, 528, 72, 3331, 145, 71, 144, 143, 3321,
	70, 1021, 22, 9, 3344, 139, 1886, 3345, 214, 3397,
	3221, 3081, 1690, 66, 3336, 3337, 1021, 141, 140, 63,
	138, 137, 64, 3224, 1168, 136, 3343, 135, 214, 65,
	134, 20, 214, 5, 52, 6, 3321, 3339, 3305, 2863,
	214, 3396, 83, 3381, 1854, 1185, 1021, 3391, 2014, 575,
	3365, 214, 3364, 696, 84, 31, 61, 60, 59, 19,
	210, 51, 1190, 210, 18, 171, 1690, 3401, 170, 169,
	3403, 3269, 214, 214, 3400, 3395, 575, 168, 1168, 3379,
	3276, 1666, 3383, 210, 3430, 3431, 3389, 163, 162, 167,
	3418, 3419, 210, 210, 214, 210, 165, 210, 3292, 210,
	3408, 210, 3406, 164, 166, 3413, 161, 3412, 133, 214,
	3288, 3407, 3410, 3405, 173, 1968, 172, 175, 1969, 2788,
	1970, 3371, 159, 3414, 155, 154, 3220, 158, 3446, 210,
	160, 3422, 3455, 157, 156, 1666, 153, 174, 132, 131,
	3438, 56, 3433, 3445, 130, 129, 3429, 128, 127, 3254,
	559, 126, 55, 17, 2, 3467, 575, 1, 1690, 210,
	0, 0, 3460, 2177, 2177, 214, 1185, 0, 0, 0,
	0, 0, 214, 0, 0, 0, 1185, 1185, 0, 0,
	0, 0, 1185, 0, 3489, 0, 214, 0, 214, 0,
	2173, 2173, 0, 3474, 0, 0, 0, 0, 3400, 3477,
	0, 3481, 3485, 0, 1021, 3502, 0, 0, 3487, 3488,
	0, 214, 0, 0, 3492, 3373, 3374, 214, 214, 3514,
	1084, 3493, 0, 3480, 0, 3486, 0, 1666, 0, 214,
	214, 0, 0, 0, 3527, 0, 0, 3531, 0, 3523,
	3526, 0, 0, 3539, 3537, 3541, 0, 3494, 0, 3495,
	0, 3519, 0, 0, 0, 0, 0, 3549, 0, 3528,
	0, 3548, 0, 0, 0, 214, 0, 2177, 2177, 2177,
	3543, 3545, 0, 0, 0, 0, 3575, 0, 3515, 0,
	0, 0, 0, 0, 3560, 3561, 0, 0, 3563, 0,
	3562, 0, 2014, 1199, 2173, 2173, 2173, 0, 0, 0,
	0, 3591, 0, 0, 3577, 214, 0, 0, 0, 528,
	0, 3593, 3600, 3595, 0, 0, 0, 3535, 0, 3592,
	0, 3601, 3605, 0, 210, 214, 3597, 0, 0, 0,
	3594, 0, 3596, 528, 0, 2531, 2532, 0, 0, 0,
	210, 3616, 528, 3614, 3613, 3611, 3612, 0, 0, 214,
	0, 214, 0, 3620, 210, 3621, 0, 3629, 3523, 3631,
	3628, 3526, 3623, 3627, 0, 3634, 1612, 3633, 0, 0,
	0, 0, 0, 3598, 3599, 0, 0, 3602, 0, 0,
	0, 0, 0, 0, 0, 3646, 0, 3645, 0, 0,
	0, 0, 2413, 0, 3653, 0, 0, 3652, 0, 3654,
	0, 0, 0, 0, 0, 3657, 0, 0, 3661, 0,
	3626, 0, 0, 0, 0, 0, 0, 0, 3662, 3663,
	0, 0, 0, 0, 3668, 0, 3669, 0, 0, 0,
	0, 0, 3672, 3673, 3674, 3676, 3677, 544, 3535, 2620,
	2621, 2622, 0, 0, 3681, 0, 0, 0, 0, 3679,
	0, 0, 0, 0, 1021, 1021, 0, 0, 0, 0,
	0, 1168, 0, 0, 0, 0, 0, 3538, 0, 0,
	0, 1020, 0, 0, 0, 0, 0, 2300, 0, 0,
	0, 0, 0, 0, 0, 210, 1020, 0, 0, 0,
	0, 0, 0, 1168, 0, 0, 210, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 210,
	1168, 0, 0, 0, 0, 0, 1020, 0, 0, 840,
	0, 0, 0, 0, 0, 210, 0, 0, 0, 0,
	0, 0, 210, 2362, 852, 1022, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 852, 0, 0,
	1022, 0, 0, 0, 0, 1209, 0, 0, 210, 0,
	0, 0, 0, 0, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1868, 0,
	1022, 0, 0, 0, 0, 0, 2300, 0, 528, 0,
	0, 2416, 0, 0, 0, 0, 0, 210, 0, 0,
	210, 0, 210, 0, 210, 0, 210, 210, 0, 1190,
	2177, 2177, 0, 0, 0, 1168, 0, 0, 0, 2436,
	696, 0, 2300, 2300, 1168, 0, 0, 0, 0, 0,
	1021, 0, 0, 210, 0, 0, 0, 2173, 2173, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 210, 1190,
	210, 0, 0, 1209, 0, 1209, 0, 0, 1190, 0,
	1190, 0, 1190, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1020, 0, 0, 0, 0, 0,
	0, 0, 0, 210, 210, 210, 210, 1190, 210, 0,
	210, 0, 2177, 2177, 2177, 2177, 2177, 2177, 2177, 2177,
	2177, 2177, 2177, 2177, 2177, 2177, 2177, 2177, 2177, 2177,
	2177, 0, 2177, 0, 0, 0, 0, 0, 210, 2173,
	2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
	2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 1022, 2173,
	0, 0, 57, 0, 0, 0, 1168, 0, 0, 1168,
	0, 0, 0, 57, 0, 0, 58, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 58, 0, 0,
	62, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 62, 2892, 2893, 0, 0, 0, 0, 0, 0,
	1021, 0, 0, 0, 0, 0, 0, 0, 1021, 0,
	0, 68, 0, 0, 0, 0, 0, 1209, 1168, 0,
	0, 1021, 68, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1168, 0, 0, 0, 0,
	0, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 74, 0, 0, 0, 75, 82, 0, 0,
	0, 0, 85, 0, 0, 0, 0, 75, 82, 0,
	0, 0, 0, 0, 2951, 2952, 2953, 2954, 2955, 2956,
	2957, 2958, 2959, 2960, 2961, 2962, 2963, 2964, 2965, 2966,
	2967, 2968, 2969, 0, 2973, 0, 0, 0, 0, 0,
	76, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 0, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 210, 1020, 1020, 0, 0, 528, 0,
	0, 0, 0, 528, 0, 0, 528, 840, 0, 528,
	528, 840, 0, 0, 0, 528, 1168, 0, 0, 0,
	0, 0, 0, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1209, 0, 0, 0, 0,
	0, 0, 0, 0, 1211, 0, 1215, 0, 1221, 0,
	1209, 0, 2259, 0, 0, 0, 0, 0, 1022, 1022,
	0, 0, 0, 0, 0, 0, 0, 0, 2300, 2300,
	210, 77, 0, 0, 2300, 0, 0, 2726, 0, 0,
	0, 0, 77, 0, 2300, 2726, 0, 2300, 2726, 2726,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 210, 210, 210, 148, 80, 0, 81, 0, 0,
	0, 0, 0, 0, 0, 148, 80, 0, 81, 0,
	0, 0, 210, 0, 0, 1190, 182, 0, 0, 0,
	0, 0, 0, 0, 1345, 0, 0, 182, 691, 1168,
	0, 1348, 118, 0, 0, 0, 0, 2782, 0, 691,
	2784, 2300, 0, 118, 210, 0, 0, 0, 210, 0,
	0, 0, 0, 0, 0, 0, 184, 0, 0, 0,
	1020, 0, 0, 210, 0, 0, 0, 184, 0, 1190,
	0, 210, 0, 0, 2300, 0, 528, 0, 0, 119,
	0, 0, 0, 2300, 0, 0, 1400, 1168, 0, 0,
	119, 0, 152, 1470, 1471, 0, 0, 0, 0, 0,
	183, 0, 0, 152, 0, 0, 0, 1168, 0, 0,
	176, 183, 0, 1501, 0, 210, 1868, 0, 177, 1868,
	1473, 176, 0, 0, 1022, 0, 0, 0, 0, 177,
	0, 0, 0, 0, 0, 0, 0, 1470, 1471, 151,
	1503, 1504, 1505, 1513, 1514, 1515, 0, 0, 1472, 0,
	151, 0, 2872, 0, 0, 1190, 210, 1501, 210, 0,
	0, 0, 0, 0, 1473, 0, 0, 0, 0, 1519,
	1523, 1524, 1525, 1526, 1527, 0, 0, 0, 0, 210,
	0, 0, 0, 0, 0, 2597, 2598, 0, 2615, 2616,
	2617, 0, 1472, 0, 0, 0, 0, 0, 0, 1541,
	0, 1492, 0, 0, 2901, 1554, 0, 0, 1489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1020, 1168, 0, 1168, 1470, 1471, 0, 0, 1020, 0,
	0, 1478, 0, 0, 2177, 2932, 0, 0, 0, 0,
	0, 1020, 0, 0, 1501, 0, 0, 0, 0, 2612,
	0, 1473, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2173, 1500, 1502, 0, 1495, 1496, 1497, 1498, 0,
	0, 0, 0, 0, 0, 1478, 2177, 0, 0, 1472,
	0, 0, 1168, 0, 1022, 0, 0, 0, 1168, 0,
	0, 0, 1022, 0, 0, 0, 0, 0, 0, 1510,
	0, 0, 1520, 2173, 0, 1022, 1500, 1502, 0, 0,
	0, 0, 0, 0, 1168, 0, 1493, 0, 0, 0,
	0, 210, 210, 2603, 0, 1606, 1606, 1606, 2597, 2598,
	0, 2615, 2616, 2617, 0, 1487, 1488, 0, 0, 0,
	0, 0, 0, 528, 528, 0, 0, 0, 0, 0,
	0, 1508, 0, 0, 0, 0, 0, 1168, 0, 0,
	1493, 0, 1478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2618, 1209, 0, 0, 0, 0,
	0, 0, 2177, 0, 0, 0, 0, 1168, 0, 0,
	0, 0, 2612, 1500, 1502, 0, 840, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3328, 0, 2613, 2173,
	0, 0, 0, 0, 1494, 0, 0, 0, 0, 1470,
	1471, 0, 575, 0, 1168, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1168, 0, 0, 1501,
	1499, 0, 0, 0, 0, 0, 1473, 1493, 3353, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1494, 0,
	3079, 210, 0, 0, 0, 0, 2603, 0, 210, 852,
	0, 0, 0, 0, 1472, 0, 0, 0, 210, 0,
	0, 0, 0, 1492, 1511, 0, 0, 0, 0, 0,
	1489, 0, 0, 0, 0, 0, 2300, 210, 0, 0,
	0, 0, 0, 0, 0, 0, 2614, 0, 0, 0,
	2436, 2436, 0, 0, 0, 0, 696, 696, 2300, 0,
	0, 1868, 1868, 0, 0, 696, 2300, 0, 0, 2895,
	0, 0, 0, 0, 210, 0, 1482, 1474, 1475, 1476,
	1477, 1479, 1480, 0, 0, 1494, 0, 1495, 1496, 1497,
	1498, 2613, 0, 0, 3437, 0, 0, 1478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1509, 0,
	0, 1484, 1485, 1491, 1512, 1490, 1486, 0, 1483, 1481,
	1482, 1474, 1475, 1476, 1477, 1479, 1480, 0, 1500, 1502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3168, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1487, 1488, 2609,
	2610, 2611, 0, 0, 0, 0, 2608, 2606, 2607, 2599,
	2600, 2601, 2602, 2604, 2605, 0, 0, 0, 0, 0,
	0, 0, 1493, 0, 0, 0, 0, 0, 0, 2614,
	0, 0, 0, 0, 0, 0, 0, 210, 0, 0,
	0, 0, 0, 1209, 0, 210, 0, 0, 1474, 1475,
	1476, 1477, 1479, 1480, 0, 0, 0, 0, 210, 0,
	1168, 0, 0, 0, 0, 852, 0, 0, 0, 0,
	0, 0, 0, 0, 2300, 2300, 2300, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1209, 0, 0, 0,
	0, 0, 0, 2300, 0, 2726, 0, 0, 1209, 1209,
	210, 0, 1499, 0, 0, 0, 0, 0, 0, 0,
	0, 210, 210, 0, 0, 0, 0, 0, 0, 0,
	1494, 0, 0, 0, 2300, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3278,
	0, 0, 2609, 2610, 2611, 0, 0, 0, 0, 2608,
	2606, 2607, 2599, 2600, 2601, 2602, 2604, 2605, 0, 0,
	0, 0, 0, 0, 0, 0, 1996, 0, 2000, 0,
	0, 0, 0, 1209, 2007, 0, 0, 0, 0, 0,
	0, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024,
	2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034,
	2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044,
	2045, 2046, 2047, 2048, 2049, 2050, 0, 2056, 0, 2058,
	2059, 2060, 2061, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1490, 1486, 2085,
	1483, 1481, 1482, 1474, 1475, 1476, 1477, 1479, 1480, 0,
	0, 0, 1541, 0, 0, 0, 2100, 0, 0, 0,
	2300, 0, 2726, 0, 0, 3347, 0, 0, 0, 0,
	0, 0, 0, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2138, 2141, 0, 2145,
	2146, 2147, 2148, 2149, 2150, 2151, 575, 0, 0, 0,
	2169, 0, 2180, 2182, 2187, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3347, 0, 0, 0,
	2300, 0, 0, 0, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	210, 210, 0, 939, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2932, 0, 57, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3347, 58, 0,
	0, 0, 211, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 62, 1470, 1471, 0, 1503, 1504, 1505, 1513,
	1514, 1515, 211, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1506, 1501, 0, 0, 0, 0, 0, 0,
	1473, 0, 0, 68, 211, 1519, 0, 0, 0, 0,
	0, 0, 0, 210, 0, 0, 0, 0, 0, 0,
	2726, 0, 0, 0, 0, 0, 0, 0, 1472, 0,
	0, 0, 0, 74, 1209, 0, 1209, 1492, 0, 0,
	0, 0, 0, 85, 1489, 0, 0, 0, 75, 82,
	0, 0, 0, 0, 1470, 1471, 0, 0, 0, 3510,
	1513, 1514, 1515, 0, 0, 1209, 210, 0, 0, 0,
	0, 0, 0, 0, 1501, 0, 0, 210, 2300, 0,
	0, 1473, 0, 0, 0, 0, 1519, 0, 0, 0,
	0, 0, 76, 0, 2364, 0, 2366, 0, 0, 0,
	0, 1495, 1496, 1497, 1498, 0, 0, 0, 0, 1472,
	0, 1478, 0, 2932, 0, 0, 0, 0, 1492, 0,
	0, 0, 0, 0, 0, 1489, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1510, 0, 0, 1520, 0,
	0, 0, 1500, 1502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2300, 0, 0, 0, 0, 0, 0,
	0, 0, 1516, 0, 1517, 0, 0, 0, 0, 0,
	0, 1487, 1488, 3347, 0, 0, 0, 0, 0, 0,
	0, 0, 1495, 1496, 1497, 1498, 0, 1508, 0, 0,
	0, 0, 1478, 0, 0, 0, 1493, 1209, 0, 2300,
	0, 0, 0, 77, 905, 0, 0, 1470, 1471, 0,
	0, 0, 0, 0, 0, 1518, 1510, 0, 0, 1520,
	0, 0, 0, 1500, 1502, 0, 0, 1501, 2479, 0,
	0, 0, 1507, 0, 1473, 0, 148, 80, 0, 81,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 1487, 1488, 0, 0, 0, 0, 182, 0,
	0, 0, 1472, 600, 0, 0, 0, 0, 1508, 0,
	691, 1492, 0, 0, 118, 0, 1499, 1493, 1489, 0,
	0, 0, 0, 0, 0, 600, 0, 0, 0, 0,
	0, 0, 0, 0, 1494, 0, 0, 0, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2890, 2514, 2515,
	1511, 119, 0, 0, 2521, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 152, 1495, 1496, 1497, 1498, 0,
	0, 0, 183, 2535, 2536, 1478, 0, 0, 0, 2100,
	0, 0, 176, 0, 0, 0, 0, 1499, 2543, 0,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2557, 1494, 1500, 1502, 0, 0,
	0, 1339, 0, 0, 0, 0, 0, 0, 0, 1023,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2578,
	0, 1511, 0, 0, 1509, 1487, 1488, 1484, 1485, 1491,
	1512, 1490, 1486, 0, 1483, 1481, 1482, 1474, 1475, 1476,
	1477, 1479, 1480, 0, 0, 0, 0, 3176, 0, 0,
	1493, 3175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2187, 2187, 2187, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1606, 0, 0, 0, 0,
	0, 0, 0, 2651, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1509, 0, 0, 0, 0,
	0, 1512, 1490, 1486, 0, 1483, 1481, 1482, 1474, 1475,
	1476, 1477, 1479, 1480, 0, 211, 1089, 211, 211, 1089,
	1499, 1089, 211, 1089, 0, 0, 0, 0, 0, 0,
	0, 211, 0, 0, 0, 0, 0, 0, 1494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	840, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 840, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1089, 1089, 211, 211, 1470, 1471, 0,
	1503, 1504, 1505, 1513, 1514, 1515, 0, 0, 0, 2742,
	211, 0, 0, 0, 0, 0, 1506, 1501, 0, 0,
	0, 0, 0, 0, 1473, 0, 0, 0, 0, 1519,
	0, 0, 211, 211, 211, 211, 0, 1089, 1089, 0,
	2597, 2598, 1089, 2615, 2616, 2617, 1089, 211, 211, 0,
	0, 0, 1472, 0, 0, 0, 0, 0, 0, 2900,
	0, 1492, 0, 0, 0, 0, 0, 0, 1489, 0,
	0, 0, 0, 0, 0, 1490, 1486, 0, 1483, 1481,
	1482, 1474, 1475, 1476, 1477, 1479, 1480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1089, 0, 0,
	0, 0, 1470, 1471, 2612, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	211, 0, 1501, 0, 0, 1495, 1496, 1497, 1498, 1473,
	0, 0, 0, 0, 211, 1478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1472, 0, 1510,
	0, 0, 1520, 0, 0, 0, 1500, 1502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2603, 0,
	0, 0, 0, 0, 0, 0, 1516, 0, 1517, 0,
	0, 0, 0, 0, 0, 1487, 1488, 0, 0, 2881,
	0, 0, 0, 2007, 0, 0, 0, 0, 0, 2887,
	2888, 1508, 0, 2891, 0, 0, 209, 2894, 209, 209,
	1493, 0, 0, 209, 0, 0, 2898, 0, 0, 2618,
	0, 0, 600, 0, 0, 2905, 0, 0, 2651, 1518,
	1478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2916, 0, 0, 1507, 0, 0, 0,
	0, 0, 0, 2613, 0, 0, 0, 0, 0, 0,
	0, 1500, 1502, 0, 0, 0, 209, 209, 0, 0,
	2941, 2942, 0, 2943, 2944, 2945, 0, 0, 2946, 0,
	0, 209, 2948, 0, 0, 0, 0, 0, 0, 0,
	1499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 209, 209, 209, 0, 1494, 0,
	0, 0, 0, 2976, 2977, 1493, 0, 0, 209, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 2986, 0,
	0, 0, 0, 0, 1511, 0, 0, 0, 0, 0,
	0, 0, 0, 2995, 0, 0, 0, 0, 0, 0,
	0, 2614, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 211, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1089, 0, 211, 211, 211, 0, 0, 0,
	0, 211, 0, 0, 0, 0, 211, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 1089, 3024,
	0, 0, 0, 0, 0, 209, 0, 0, 215, 0,
	0, 0, 0, 1494, 3032, 3035, 0, 0, 1509, 1089,
	0, 1484, 1485, 1491, 1512, 1490, 1486, 0, 1483, 1481,
	1482, 1474, 1475, 1476, 1477, 1479, 1480, 0, 0, 3054,
	0, 2585, 0, 0, 0, 2586, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2609, 2610, 2611, 593, 0, 0,
	0, 2608, 2606, 2607, 2599, 2600, 2601, 2602, 2604, 2605,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 593,
	0, 0, 0, 0, 677, 0, 0, 0, 0, 0,
	0, 0, 1470, 1471, 0, 0, 0, 1606, 0, 0,
	0, 0, 0, 0, 0, 0, 3108, 659, 0, 0,
	0, 0, 1501, 0, 0, 0, 0, 0, 0, 1473,
	0, 0, 0, 1483, 1481, 1482, 1474, 1475, 1476, 1477,
	1479, 1480, 0, 0, 0, 0, 1089, 1089, 211, 0,
	660, 0, 0, 0, 1089, 0, 0, 1472, 0, 661,
	0, 0, 0, 0, 0, 0, 1492, 0, 0, 0,
	0, 0, 0, 1489, 0, 662, 3147, 3148, 0, 0,
	0, 0, 3152, 3153, 0, 0, 0, 3156, 3157, 0,
	0, 682, 0, 211, 3161, 0, 0, 211, 211, 0,
	0, 0, 0, 0, 3164, 0, 663, 0, 0, 0,
	0, 0, 2889, 0, 0, 0, 0, 0, 0, 211,
	3169, 211, 0, 211, 0, 664, 0, 0, 0, 0,
	1495, 1496, 1497, 1498, 0, 0, 1628, 0, 1023, 0,
	1478, 0, 209, 0, 0, 665, 0, 0, 666, 0,
	0, 0, 0, 0, 0, 209, 1628, 209, 0, 0,
	0, 0, 600, 0, 0, 0, 0, 600, 0, 0,
	0, 1500, 1502, 0, 681, 909, 0, 0, 0, 0,
	0, 1089, 0, 1089, 0, 1089, 0, 0, 0, 0,
	0, 1089, 0, 0, 1089, 211, 0, 0, 211, 0,
	1487, 1488, 0, 0, 0, 0, 0, 1089, 1089, 1089,
	0, 0, 0, 0, 0, 0, 0, 0, 211, 0,
	0, 0, 0, 3035, 0, 1493, 0, 211, 211, 0,
	211, 0, 211, 0, 211, 0, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 0, 0, 0, 0,
	57, 0, 0, 0, 211, 0, 0, 0, 0, 0,
	0, 0, 668, 0, 58, 120, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 62, 685,
	0, 669, 0, 0, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 39, 122, 1499, 0, 0, 3035, 0,
	0, 0, 0, 0, 0, 0, 1089, 38, 684, 68,
	0, 0, 0, 1494, 0, 670, 0, 0, 671, 600,
	0, 0, 0, 0, 679, 0, 3316, 3317, 3318, 41,
	0, 672, 0, 0, 42, 0, 0, 0, 0, 74,
	0, 0, 123, 0, 0, 0, 0, 0, 40, 85,
	0, 3326, 3327, 0, 75, 82, 0, 0, 0, 0,
	0, 0, 673, 680, 209, 3334, 0, 0, 209, 209,
	674, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 43, 0, 676, 0, 0, 0, 0, 675, 0,
	209, 1089, 209, 0, 209, 0, 0, 0, 76, 0,
	683, 0, 0, 0, 0, 3035, 0, 0, 0, 0,
	0, 678, 0, 3370, 0, 0, 0, 0, 0, 0,
	0, 0, 3377, 0, 0, 840, 0, 0, 0, 0,
	1490, 1486, 3384, 1483, 1481, 1482, 1474, 1475, 1476, 1477,
	1479, 1480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3035, 0, 1089, 3035, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 0, 0, 209,
	0, 0, 0, 0, 0, 0, 0, 3035, 3035, 211,
	0, 1085, 1089, 0, 1186, 0, 1085, 0, 1186, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 600, 209,
	0, 209, 0, 209, 0, 209, 0, 209, 0, 77,
	0, 0, 0, 0, 0, 0, 0, 44, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3448,
	0, 0, 3451, 0, 0, 209, 0, 0, 1186, 1186,
	0, 47, 148, 80, 0, 81, 0, 45, 0, 3035,
	0, 124, 0, 0, 0, 0, 0, 46, 0, 0,
	57, 0, 0, 0, 182, 209, 0, 0, 0, 0,
	1089, 0, 0, 0, 58, 0, 50, 0, 0, 0,
	118, 0, 1186, 1186, 0, 0, 0, 1186, 62, 0,
	121, 1186, 0, 0, 0, 0, 0, 1089, 0, 0,
	0, 0, 0, 0, 184, 0, 0, 0, 0, 0,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	0, 211, 0, 0, 0, 0, 0, 119, 0, 0,
	0, 0, 0, 0, 211, 0, 0, 1089, 0, 0,
	152, 840, 1186, 0, 0, 0, 0, 0, 183, 74,
	211, 1089, 0, 0, 0, 0, 0, 211, 176, 85,
	0, 0, 0, 0, 75, 82, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3559, 3559, 3559, 0,
	0, 0, 0, 211, 0, 0, 0, 151, 0, 211,
	3, 0, 0, 0, 0, 3578, 0, 0, 0, 0,
	0, 1470, 1471, 0, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 0, 0, 0, 0, 3035, 0, 3035,
	0, 1501, 211, 0, 0, 211, 0, 211, 1473, 211,
	1023, 211, 211, 3559, 0, 1089, 1089, 1089, 0, 1089,
	0, 0, 0, 0, 0, 0, 1023, 0, 1086, 0,
	0, 1187, 0, 1086, 0, 1187, 1472, 0, 211, 0,
	209, 0, 0, 0, 0, 1492, 0, 0, 0, 0,
	0, 0, 1489, 211, 0, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1187, 1187, 0, 211, 211,
	211, 211, 0, 211, 0, 211, 3559, 0, 0, 77,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1495,
	1496, 1497, 1498, 0, 0, 0, 0, 0, 0, 1478,
	0, 0, 0, 211, 0, 0, 0, 0, 0, 1187,
	1187, 0, 148, 80, 1187, 81, 0, 0, 1187, 0,
	0, 1470, 1471, 0, 1503, 1504, 1505, 1513, 1514, 1515,
	1500, 1502, 0, 0, 182, 0, 0, 0, 0, 0,
	1506, 1501, 0, 0, 0, 0, 691, 0, 1473, 0,
	118, 209, 0, 1519, 0, 0, 0, 0, 0, 1487,
	1488, 0, 209, 0, 0, 0, 0, 0, 0, 1187,
	0, 0, 0, 0, 184, 209, 1472, 0, 0, 0,
	0, 0, 0, 0, 1493, 1492, 0, 1085, 0, 0,
	0, 209, 1489, 0, 0, 0, 593, 119, 600, 0,
	0, 593, 0, 0, 0, 0, 0, 0, 0, 0,
	152, 0, 0, 1186, 0, 0, 0, 0, 183, 0,
	0, 0, 0, 0, 209, 0, 0, 0, 176, 0,
	209, 0, 0, 0, 1085, 0, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1495,
	1496, 1497, 1498, 0, 0, 0, 0, 1337, 0, 1478,
	0, 0, 0, 209, 1499, 0, 209, 0, 209, 0,
	209, 0, 209, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 1494, 1510, 0, 0, 1520, 0, 0, 0,
	1500, 1502, 0, 0, 1089, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1516, 0, 1517, 0, 209, 0, 209, 0, 0, 1487,
	1488, 0, 0, 0, 0, 0, 1089, 0, 0, 0,
	0, 0, 0, 0, 0, 1508, 0, 0, 0, 0,
	0, 0, 0, 1089, 1493, 0, 0, 0, 0, 209,
	209, 209, 209, 0, 209, 0, 209, 0, 0, 0,
	0, 1186, 1186, 1518, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1507, 0, 0, 0, 209, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1490,
	1486, 0, 1483, 1481, 1482, 1474, 1475, 1476, 1477, 1479,
	1480, 0, 0, 0, 0, 0, 211, 211, 211, 0,
	0, 0, 0, 0, 1499, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 211, 1089, 0,
	0, 0, 1494, 0, 0, 0, 0, 0, 1089, 0,
	0, 0, 0, 0, 1086, 0, 0, 1089, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1511, 211,
	0, 0, 1089, 211, 0, 0, 0, 0, 0, 0,
	1187, 1089, 1089, 1089, 0, 0, 0, 0, 211, 0,
	0, 0, 0, 0, 0, 0, 1186, 0, 1186, 0,
	1186, 1086, 874, 87, 0, 0, 1186, 0, 0, 1186,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1186, 1186, 1186, 0, 0, 0, 0, 0,
	0, 0, 1089, 1089, 0, 0, 0, 0, 0, 0,
	211, 0, 593, 0, 0, 0, 0, 0, 0, 0,
	1089, 0, 1509, 0, 0, 1484, 1485, 1491, 1512, 1490,
	1486, 0, 1483, 1481, 1482, 1474, 1475, 1476, 1477, 1479,
	1480, 0, 0, 0, 1023, 3511, 0, 0, 87, 1089,
	0, 211, 1089, 211, 0, 0, 0, 0, 0, 1023,
	0, 0, 0, 0, 0, 2597, 2598, 0, 2615, 2616,
	2617, 0, 0, 0, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1628,
	0, 0, 0, 0, 0, 0, 0, 0, 1187, 1187,
	0, 1085, 0, 0, 0, 0, 1086, 0, 0, 0,
	0, 1089, 0, 0, 0, 814, 0, 0, 0, 0,
	0, 0, 0, 0, 835, 0, 0, 0, 1089, 2612,
	0, 0, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1470, 1471, 1010, 1503, 1504,
	1505, 1513, 1514, 1515, 0, 0, 0, 209, 209, 209,
	0, 0, 0, 0, 1506, 1501, 1628, 0, 0, 0,
	0, 0, 1473, 0, 0, 0, 1085, 1519, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2603, 2597, 2598, 0, 2615, 2616, 2617,
	1472, 0, 0, 0, 0, 0, 0, 0, 0, 1492,
	209, 0, 0, 0, 209, 0, 1489, 0, 0, 0,
	2619, 0, 0, 1187, 0, 1187, 0, 1187, 0, 209,
	0, 0, 0, 1187, 0, 0, 1187, 1023, 0, 1089,
	0, 1085, 0, 0, 2618, 0, 0, 0, 0, 1187,
	1187, 1187, 0, 0, 0, 0, 0, 0, 2612, 0,
	1016, 0, 0, 0, 0, 0, 0, 1085, 0, 0,
	0, 0, 0, 1495, 1496, 1497, 1498, 0, 2613, 0,
	0, 209, 0, 1478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	0, 0, 0, 0, 0, 0, 0, 1510, 0, 0,
	1520, 0, 0, 0, 1500, 1502, 0, 0, 0, 0,
	0, 0, 209, 0, 209, 0, 0, 0, 0, 0,
	0, 0, 2603, 1089, 1516, 0, 1517, 0, 0, 0,
	0, 0, 0, 1487, 1488, 209, 211, 0, 0, 0,
	0, 0, 0, 211, 0, 1186, 0, 0, 1086, 1508,
	0, 0, 1089, 211, 0, 0, 0, 1089, 1493, 0,
	0, 0, 0, 0, 0, 0, 2614, 0, 0, 0,
	0, 0, 1085, 2618, 0, 0, 0, 1518, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1089, 1089, 1089,
	0, 0, 0, 0, 1507, 0, 0, 0, 0, 0,
	0, 0, 0, 1089, 0, 0, 0, 2613, 0, 211,
	1089, 0, 1186, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1085, 0, 0, 0,
	1089, 0, 0, 1086, 0, 0, 0, 0, 1499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1023, 1023, 2609,
	2610, 2611, 1511, 0, 0, 0, 2608, 2606, 2607, 2599,
	2600, 2601, 2602, 2604, 2605, 0, 0, 0, 1086, 0,
	0, 0, 0, 0, 0, 2614, 0, 0, 0, 0,
	1186, 1186, 1186, 0, 1186, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1086, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1089, 0, 1089, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 87, 0, 87, 1509, 0, 0, 1484,
	1485, 1491, 1512, 1490, 1486, 0, 1483, 1481, 1482, 1474,
	1475, 1476, 1477, 1479, 1480, 0, 0, 0, 0, 2096,
	0, 0, 0, 2097, 0, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1089, 211, 211, 1089, 0,
	0, 1089, 1187, 0, 0, 0, 0, 209, 2609, 2610,
	2611, 0, 0, 0, 209, 2608, 2606, 2607, 2599, 2600,
	2601, 2602, 2604, 2605, 209, 0, 0, 1089, 0, 1086,
	1089, 835, 87, 87, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 1023, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1187,
	1089, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 1086, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1089, 87, 0, 0, 0, 0, 1470, 1471, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1501, 0, 0, 0,
	0, 0, 0, 1473, 0, 0, 0, 1089, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1089,
	0, 0, 0, 0, 0, 0, 0, 0, 211, 0,
	0, 1472, 0, 0, 0, 0, 0, 1187, 1187, 1187,
	1492, 1187, 0, 0, 0, 0, 0, 1489, 0, 0,
	814, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1533, 1085,
	0, 0, 0, 1023, 0, 0, 0, 0, 0, 0,
	0, 1023, 0, 211, 0, 1540, 2520, 0, 1089, 1546,
	0, 0, 1079, 0, 1628, 0, 0, 0, 0, 1197,
	0, 1085, 0, 0, 1495, 1496, 1497, 1498, 0, 0,
	0, 0, 0, 0, 1478, 211, 211, 0, 1085, 0,
	0, 0, 0, 0, 1470, 1471, 0, 1503, 1504, 1505,
	1513, 1514, 1515, 0, 0, 0, 209, 0, 0, 0,
	0, 0, 0, 1506, 1501, 1500, 1502, 209, 209, 0,
	0, 1473, 0, 0, 0, 0, 1519, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1285, 0, 0,
	0, 0, 0, 0, 1487, 1488, 0, 0, 0, 1472,
	0, 0, 0, 0, 0, 0, 0, 0, 1492, 1310,
	1310, 1310, 1197, 0, 0, 1489, 0, 0, 0, 1493,
	0, 0, 0, 0, 1343, 1344, 0, 0, 211, 1089,
	0, 0, 0, 1186, 0, 0, 0, 0, 0, 1089,
	1089, 0, 0, 1085, 1626, 1089, 1629, 0, 87, 0,
	0, 0, 1085, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1186, 0, 0,
	0, 0, 1495, 1496, 1497, 1498, 1186, 1186, 1186, 0,
	0, 211, 1478, 1089, 0, 0, 0, 0, 0, 0,
	0, 0, 211, 0, 0, 0, 0, 1419, 0, 1499,
	0, 0, 0, 0, 0, 0, 1510, 0, 0, 1520,
	0, 0, 0, 1500, 1502, 0, 0, 1494, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1186, 1186, 209,
	0, 0, 0, 1516, 0, 1517, 0, 0, 0, 0,
	0, 0, 1487, 1488, 0, 1186, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1086, 0, 1508, 0,
	0, 0, 0, 0, 0, 0, 0, 1493, 0, 0,
	0, 0, 0, 0, 1085, 0, 0, 1085, 0, 0,
	0, 0, 0, 0, 209, 0, 1518, 0, 1086, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1507, 0, 1086, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1490, 1486, 1085, 1483, 1481, 1482,
	1474, 1475, 1476, 1477, 1479, 1480, 0, 1499, 0, 0,
	0, 0, 0, 1085, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1494, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1511, 0, 0, 0, 0, 0, 0, 0, 0,
	1187, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	1086, 0, 0, 0, 0, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1187, 0, 0, 0, 0, 0,
	0, 0, 0, 1187, 1187, 1187, 0, 0, 1644, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1653, 209, 1197, 0, 0, 0, 0, 0, 0,
	835, 0, 835, 209, 1085, 1509, 0, 0, 1484, 1485,
	1491, 1512, 1490, 1486, 0, 1483, 1481, 1482, 1474, 1475,
	1476, 1477, 1479, 1480, 1187, 1187, 0, 0, 0, 0,
	0, 0, 3174, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1187, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1086, 0, 0, 1086, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1186, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1470, 1471, 0, 1503, 1504,
	1505, 1513, 1514, 1515, 0, 814, 0, 1085, 814, 814,
	0, 0, 1186, 1086, 1506, 1501, 0, 0, 0, 0,
	0, 0, 1473, 0, 0, 0, 0, 1519, 0, 0,
	1086, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1186, 1186, 1186, 0, 0, 0, 0, 0,
	1472, 0, 0, 0, 0, 0, 0, 0, 1186, 1492,
	0, 0, 0, 2074, 0, 1085, 1489, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 835, 0, 0,
	0, 0, 0, 0, 0, 1085, 0, 0, 1540, 0,
	1843, 0, 1540, 0, 1850, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1285, 0, 1874, 0,
	1874, 0, 0, 1495, 1496, 1497, 1498, 0, 0, 0,
	0, 0, 0, 1478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1086, 0, 0, 0, 0, 0, 1510, 1010, 0,
	1520, 0, 0, 0, 1500, 1502, 0, 0, 0, 0,
	0, 0, 0, 0, 1629, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1516, 0, 1517, 0, 0, 0,
	0, 0, 1850, 1487, 1488, 1922, 0, 0, 0, 1085,
	0, 1085, 0, 0, 0, 87, 0, 0, 0, 1508,
	0, 0, 0, 0, 0, 1938, 0, 0, 1493, 0,
	0, 0, 0, 0, 0, 1948, 0, 1950, 0, 1952,
	0, 1954, 0, 1955, 0, 0, 0, 1518, 0, 0,
	0, 0, 0, 0, 0, 1187, 0, 0, 0, 0,
	0, 0, 0, 0, 1507, 0, 0, 0, 0, 0,
	1085, 1972, 0, 1186, 0, 0, 1085, 0, 0, 0,
	0, 0, 0, 0, 1086, 0, 0, 0, 0, 1187,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1310, 1085, 0, 0, 1186, 0, 0, 1499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1187,
	1187, 1187, 0, 0, 0, 0, 1494, 0, 0, 0,
	0, 0, 87, 0, 0, 1187, 0, 0, 0, 0,
	0, 0, 1086, 0, 0, 1085, 0, 0, 0, 0,
	0, 0, 1511, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1086, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1085, 0, 0, 0, 0,
	0, 87, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1085, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1085, 0, 87, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 1509, 0, 0, 1484,
	1485, 1491, 1512, 1490, 1486, 0, 1483, 1481, 1482, 1474,
	1475, 1476, 1477, 1479, 1480, 0, 0, 87, 0, 0,
	0, 0, 0, 2903, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1086, 0, 1086, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1186, 0, 0, 2243, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1086, 0, 0,
	1187, 0, 0, 1086, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1470, 1471, 0, 1503,
	1504, 1505, 1513, 1514, 1515, 0, 0, 0, 0, 1086,
	0, 0, 1187, 0, 0, 1506, 1501, 0, 0, 0,
	0, 0, 0, 1473, 0, 0, 0, 0, 1519, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2074, 0,
	0, 1472, 1086, 0, 1186, 0, 0, 0, 0, 0,
	1492, 0, 0, 0, 1186, 1186, 0, 1489, 0, 1540,
	1186, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1086, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1197, 1085, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 1495, 1496, 1497, 1498, 0, 0,
	0, 1086, 0, 0, 1478, 0, 0, 0, 0, 0,
	1850, 0, 0, 0, 0, 0, 2386, 0, 0, 1470,
	1471, 0, 1503, 1504, 1505, 1513, 1514, 1515, 1510, 0,
	0, 1520, 0, 0, 0, 1500, 1502, 0, 1506, 1501,
	0, 0, 0, 0, 0, 0, 1473, 0, 0, 2418,
	0, 1519, 1310, 0, 1310, 1516, 1310, 1517, 1197, 1197,
	0, 0, 1010, 0, 1487, 1488, 0, 0, 0, 0,
	1187, 0, 0, 0, 1472, 0, 0, 1010, 0, 0,
	1508, 0, 0, 1492, 0, 2461, 0, 0, 0, 1493,
	1489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2466, 0, 2469, 0, 0, 0, 0, 0, 1518, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1507, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2490, 1197, 2492, 1197, 0,
	2495, 0, 0, 0, 0, 0, 0, 1495, 1496, 1497,
	1498, 0, 0, 0, 0, 0, 0, 1478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1499,
	2511, 0, 0, 0, 0, 0, 0, 0, 87, 87,
	0, 1510, 87, 0, 1520, 0, 0, 1494, 1500, 1502,
	0, 1187, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1187, 1187, 0, 0, 0, 0, 1187, 1516, 0,
	1517, 87, 87, 1511, 0, 87, 0, 1487, 1488, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1508, 0, 0, 0, 0, 0, 0,
	0, 0, 1493, 0, 0, 1086, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1518, 0, 0, 0, 1010, 0, 0, 835, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 87, 0, 0, 1509, 0, 0,
	1484, 1485, 1491, 1512, 1490, 1486, 0, 1483, 1481, 1482,
	1474, 1475, 1476, 1477, 1479, 1480, 0, 0, 0, 0,
	0, 0, 1499, 0, 2588, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1494, 0, 0, 1470, 1471, 0, 1503, 1504, 1505, 1513,
	1514, 1515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1506, 1501, 0, 0, 1511, 0, 0, 0,
	1473, 0, 0, 0, 0, 1519, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1472, 0,
	0, 0, 0, 0, 0, 0, 0, 1492, 0, 0,
	0, 0, 0, 0, 1489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1509, 0, 2718, 1484, 1485, 1491, 1512, 1490, 1486, 0,
	1483, 1481, 1482, 1474, 1475, 1476, 1477, 1479, 1480, 0,
	0, 1495, 1496, 1497, 1498, 0, 0, 2587, 0, 0,
	0, 1478, 0, 2755, 2757, 2386, 0, 0, 0, 0,
	1470, 1471, 0, 1503, 1504, 1505, 1513, 1514, 1515, 0,
	87, 0, 0, 0, 0, 1510, 0, 0, 1520, 1506,
	1501, 0, 1500, 1502, 0, 1010, 1010, 1473, 0, 0,
	0, 0, 1519, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1516, 0, 1517, 0, 2794, 0, 0, 0,
	2798, 1487, 1488, 0, 0, 1472, 0, 0, 0, 0,
	0, 0, 0, 0, 1492, 2807, 0, 1508, 0, 0,
	0, 1489, 0, 0, 0, 0, 1493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1518, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1507, 0, 0, 0, 0, 2850, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1495, 1496,
	1497, 1498, 0, 0, 0, 0, 0, 0, 1478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1499, 0, 2875, 0,
	1197, 0, 1510, 0, 0, 1520, 0, 0, 0, 1500,
	1502, 0, 0, 0, 1494, 0, 0, 0, 0, 0,
	0, 2885, 0, 0, 0, 0, 0, 0, 0, 1516,
	0, 1517, 0, 0, 0, 0, 0, 0, 1487, 1488,
	1511, 1010, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1508, 0, 0, 0, 0, 0,
	0, 0, 0, 1493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 1518, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1507,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1509, 0, 0, 1484, 1485, 1491,
	1512, 1490, 1486, 0, 1483, 1481, 1482, 1474, 1475, 1476,
	1477, 1479, 1480, 1499, 0, 0, 0, 0, 0, 0,
	0, 2584, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1494, 0, 1470, 1471, 0, 1503, 1504, 1505, 1513,
	1514, 1515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1506, 1501, 0, 0, 0, 1511, 0, 0,
	1473, 0, 0, 0, 0, 1519, 0, 0, 0, 0,
	0, 1010, 0, 0, 0, 0, 0, 0, 0, 1010,
	0, 0, 0, 0, 0, 0, 0, 0, 1472, 0,
	0, 0, 0, 0, 0, 0, 0, 1492, 0, 0,
	0, 0, 0, 0, 1489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1509, 0, 0, 1484, 1485, 1491, 1512, 1490, 1486,
	0, 1483, 1481, 1482, 1474, 1475, 1476, 1477, 1479, 1480,
	87, 1495, 1496, 1497, 1498, 0, 0, 0, 2583, 87,
	0, 1478, 0, 3080, 0, 0, 0, 0, 0, 0,
	1470, 1471, 0, 0, 0, 0, 0, 87, 0, 0,
	3092, 0, 0, 0, 0, 1510, 0, 0, 1520, 0,
	1501, 0, 1500, 1502, 0, 0, 0, 1473, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1516, 0, 1517, 0, 0, 0, 0, 0,
	0, 1487, 1488, 0, 0, 1472, 0, 0, 0, 0,
	0, 0, 0, 0, 1492, 0, 3131, 1508, 0, 0,
	0, 1489, 0, 0, 0, 0, 1493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1518, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2513, 0, 1507, 0, 0, 0, 1470, 1471, 0, 1503,
	1504, 1505, 1513, 1514, 1515, 0, 0, 0, 1495, 1496,
	1497, 1498, 0, 0, 0, 1506, 1501, 0, 1478, 0,
	0, 0, 0, 1473, 0, 0, 0, 0, 1519, 0,
	0, 0, 0, 0, 0, 0, 1499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1500,
	1502, 1472, 0, 0, 1494, 0, 0, 0, 0, 0,
	1492, 0, 0, 0, 0, 0, 0, 1489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2074, 1487, 1488,
	1511, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1495, 1496, 1497, 1498, 0, 0,
	0, 0, 3244, 0, 1478, 0, 0, 0, 0, 0,
	0, 0, 0, 2386, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1510, 0,
	0, 1520, 0, 0, 1509, 1500, 1502, 1484, 1485, 1491,
	1512, 1490, 1486, 0, 1483, 1481, 1482, 1474, 1475, 1476,
	1477, 1479, 1480, 1499, 0, 1516, 0, 1517, 0, 0,
	0, 2582, 0, 0, 1487, 1488, 0, 0, 0, 0,
	0, 1494, 0, 0, 0, 0, 0, 0, 0, 0,
	1508, 0, 0, 0, 0, 0, 0, 0, 0, 1493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1518, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1507, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1499,
	0, 0, 0, 0, 0, 3354, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1494, 1490, 1486,
	0, 1483, 1481, 1482, 1474, 1475, 1476, 1477, 1479, 1480,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1511, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3402, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3428, 1197, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1509, 0, 0,
	1484, 1485, 1491, 1512, 1490, 1486, 0, 1483, 1481, 1482,
	1474, 1475, 1476, 1477, 1479, 1480, 0, 0, 0, 0,
	0, 0, 0, 0, 2097, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3516, 219,
	220, 221, 222, 223, 1090, 224, 1091, 1092, 1093, 3532,
	1094, 479, 1095, 1096, 1097, 1098, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 1099, 233,
	234, 235, 236, 237, 238, 1100, 1101, 239, 484, 485,
	486, 1102, 240, 487, 1103, 1088, 1104, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 1105, 251,
	0, 252, 253, 254, 1106, 960, 255, 256, 1107, 1108,
	1110, 1109, 1111, 1112, 1113, 257, 258, 259, 260, 261,
	262, 488, 489, 1114, 263, 1115, 265, 264, 1116, 266,
	1117, 1118, 267, 268, 269, 1119, 270, 1120, 271, 272,
	1121, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 1122, 216, 1123, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 1124,
	290, 1125, 1126, 961, 291, 292, 1127, 293, 494, 1128,
	495, 294, 1129, 295, 296, 297, 298, 496, 497, 498,
	350, 963, 299, 300, 1130, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 1131, 962, 306, 499, 308, 307,
	309, 310, 311, 500, 1132, 501, 1133, 313, 964, 502,
	965, 314, 315, 316, 966, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 1134, 325, 324, 1135, 326, 503,
	967, 327, 328, 968, 1136, 329, 330, 1137, 1138, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 969, 344, 345, 347, 970, 346, 1139,
	218, 971, 348, 1140, 504, 349, 505, 351, 352, 1141,
	353, 354, 355, 1142, 1143, 357, 358, 359, 1144, 1145,
	360, 361, 506, 972, 362, 973, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 1146, 371, 372, 508,
	373, 509, 374, 1147, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 1148, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 1149, 398, 974, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 1150,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	1151, 425, 405, 406, 426, 427, 975, 428, 429, 512,
	430, 431, 1152, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 1153, 443, 444, 442, 1154,
	445, 446, 447, 448, 449, 278, 450, 1155, 451, 514,
	515, 516, 517, 1156, 458, 1157, 452, 453, 518, 454,
	519, 1158, 455, 456, 457, 0, 459, 460, 1159, 1160,
	461, 462, 463, 464, 465, 467, 1161, 468, 1162, 466,
	469, 470, 471, 520, 521, 522, 1163, 473, 472, 523,
	1164, 1165, 1166, 1167, 474, 475, 524, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 0, 0,
	2221, 0, 0, 0, 0, 0, 0, 0, 2222, 219,
	220, 221, 222, 223, 1090, 224, 1091, 1092, 1093, 0,
	1094, 479, 1095, 1096, 1097, 1098, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 1099, 233,
	234, 235, 236, 237, 238, 1100, 1101, 239, 484, 485,
	486, 1102, 240, 487, 1103, 1088, 1104, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 1105, 251,
	0, 252, 253, 254, 1106, 960, 255, 256, 1107, 1108,
	1110, 1109, 1111, 1112, 1113, 257, 258, 259, 260, 261,
	262, 488, 489, 1114, 263, 1115, 265, 264, 1116, 266,
	1117, 1118, 267, 268, 269, 1119, 270, 1120, 271, 272,
	1121, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 1122, 216, 1123, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 1124,
	290, 1125, 1126, 961, 291, 292, 1127, 293, 494, 1128,
	495, 294, 1129, 295, 296, 297, 298, 496, 497, 498,
	350, 963, 299, 300, 1130, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 1131, 962, 306, 499, 308, 307,
	309, 310, 311, 500, 1132, 501, 1133, 313, 964, 502,
	965, 314, 315, 316, 966, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 1134, 325, 324, 1135, 326, 503,
	967, 327, 328, 968, 1136, 329, 330, 1137, 1138, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 969, 344, 345, 347, 970, 346, 1139,
	218, 971, 348, 1140, 504, 349, 505, 351, 352, 1141,
	353, 354, 355, 1142, 1143, 357, 358, 359, 1144, 1145,
	360, 361, 506, 972, 362, 973, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 1146, 371, 372, 508,
	373, 509, 374, 1147, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 1148, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 1149, 398, 974, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 1150,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	1151, 425, 405, 406, 426, 427, 975, 428, 429, 512,
	430, 431, 1152, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 1153, 443, 444, 442, 1154,
	445, 446, 447, 448, 449, 278, 450, 1155, 451, 514,
	515, 516, 517, 1156, 458, 1157, 452, 453, 518, 454,
	519, 1158, 455, 456, 457, 0, 459, 460, 1159, 1160,
	461, 462, 463, 464, 465, 467, 1161, 468, 1162, 466,
	469, 470, 471, 520, 521, 522, 1163, 473, 472, 523,
	1164, 1165, 1166, 1167, 474, 475, 524, 476, 477, 478,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3198, 219, 220, 221, 222, 223, 1090, 224, 1091, 1092,
	1093, 0, 1094, 479, 1095, 1096, 1097, 1098, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	1099, 233, 234, 235, 236, 237, 238, 1100, 1101, 239,
	484, 485, 486, 1102, 240, 487, 1103, 1088, 1104, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	1105, 251, 0, 252, 253, 254, 1106, 960, 255, 256,
	1107, 1108, 1110, 1109, 1111, 1112, 1113, 257, 258, 259,
	260, 261, 262, 488, 489, 1114, 263, 1115, 265, 264,
	1116, 266, 1117, 1118, 267, 268, 269, 1119, 270, 1120,
	271, 272, 1121, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 1122, 216, 1123, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 1124, 290, 1125, 1126, 961, 291, 292, 1127, 293,
	494, 1128, 495, 294, 1129, 295, 296, 297, 298, 496,
	497, 498, 350, 963, 299, 300, 1130, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 1131, 962, 306, 499,
	308, 307, 309, 310, 311, 500, 1132, 501, 1133, 313,
	964, 502, 965, 314, 315, 316, 966, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 1134, 325, 324, 1135,
	326, 503, 967, 327, 328, 968, 1136, 329, 330, 1137,
	1138, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 969, 344, 345, 347, 970,
	346, 1139, 218, 971, 348, 1140, 504, 349, 505, 351,
	352, 1141, 353, 354, 355, 1142, 1143, 357, 358, 359,
	1144, 1145, 360, 361, 506, 972, 362, 973, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 1146, 371,
	372, 508, 373, 509, 374, 1147, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 1148, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 1149, 398, 974, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 1150, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 1151, 425, 405, 406, 426, 427, 975, 428,
	429, 512, 430, 431, 1152, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 1153, 443, 444,
	442, 1154, 445, 446, 447, 448, 449, 278, 450, 1155,
	451, 514, 515, 516, 517, 1156, 458, 1157, 452, 453,
	518, 454, 519, 1158, 455, 456, 457, 0, 459, 460,
	1159, 1160, 461, 462, 463, 464, 465, 467, 1161, 468,
	1162, 466, 469, 470, 471, 520, 521, 522, 1163, 473,
	472, 523, 1164, 1165, 1166, 1167, 474, 475, 524, 476,
	477, 478, 1083, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3322, 0, 219,
	220, 221, 222, 223, 1090, 224, 1091, 1092, 1093, 0,
	1094, 479, 1095, 1096, 1097, 1098, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 1099, 233,
	234, 235, 236, 237, 238, 1100, 1101, 239, 484, 485,
	486, 1102, 240, 487, 1103, 1088, 1104, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 1105, 251,
	0, 252, 253, 254, 1106, 960, 255, 256, 1107, 1108,
	1110, 1109, 1111, 1112, 1113, 257, 258, 259, 260, 261,
	262, 488, 489, 1114, 263, 1115, 265, 264, 1116, 266,
	1117, 1118, 267, 268, 269, 1119, 270, 1120, 271, 272,
	1121, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 1122, 216, 1123, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 1124,
	290, 1125, 1126, 961, 291, 292, 1127, 293, 494, 1128,
	495, 294, 1129, 295, 296, 297, 298, 496, 497, 498,
	350, 963, 299, 300, 1130, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 1131, 962, 306, 499, 308, 307,
	309, 310, 311, 500, 1132, 501, 1133, 313, 964, 502,
	965, 314, 315, 316, 966, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 1134, 325, 324, 1135, 326, 503,
	967, 327, 328, 968, 1136, 329, 330, 1137, 1138, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 969, 344, 345, 347, 970, 346, 1139,
	218, 971, 348, 1140, 504, 349, 505, 351, 352, 1141,
	353, 354, 355, 1142, 1143, 357, 358, 359, 1144, 1145,
	360, 361, 506, 972, 362, 973, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 1146, 371, 372, 508,
	373, 509, 374, 1147, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 1148, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 1149, 398, 974, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 1150,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	1151, 425, 405, 406, 426, 427, 975, 428, 429, 512,
	430, 431, 1152, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 1153, 443, 444, 442, 1154,
	445, 446, 447, 448, 449, 278, 450, 1155, 451, 514,
	515, 516, 517, 1156, 458, 1157, 452, 453, 518, 454,
	519, 1158, 455, 456, 457, 0, 459, 460, 1159, 1160,
	461, 462, 463, 464, 465, 467, 1161, 468, 1162, 466,
	469, 470, 471, 520, 521, 522, 1163, 473, 472, 523,
	1164, 1165, 1166, 1167, 474, 475, 524, 476, 477, 478,
	1083, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3251, 0, 219, 220, 221,
	222, 223, 1090, 224, 1091, 1092, 1093, 0, 1094, 479,
	1095, 1096, 1097, 1098, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 1099, 233, 234, 235,
	236, 237, 238, 1100, 1101, 239, 484, 485, 486, 1102,
	240, 487, 1103, 1088, 1104, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 1105, 251, 0, 252,
	253, 254, 1106, 960, 255, 256, 1107, 1108, 1110, 1109,
	1111, 1112, 1113, 257, 258, 259, 260, 261, 262, 488,
	489, 1114, 263, 1115, 265, 264, 1116, 266, 1117, 1118,
	267, 268, 269, 1119, 270, 1120, 271, 272, 1121, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 1122, 216, 1123, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 1124, 290, 1125,
	1126, 961, 291, 292, 1127, 293, 494, 1128, 495, 294,
	1129, 295, 296, 297, 298, 496, 497, 498, 350, 963,
	299, 300, 1130, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 1131, 962, 306, 499, 308, 307, 309, 310,
	311, 500, 1132, 501, 1133, 313, 964, 502, 965, 314,
	315, 316, 966, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 1134, 325, 324, 1135, 326, 503, 967, 327,
	328, 968, 1136, 329, 330, 1137, 1138, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 969, 344, 345, 347, 970, 346, 1139, 218, 971,
	348, 1140, 504, 349, 505, 351, 352, 1141, 353, 354,
	355, 1142, 1143, 357, 358, 359, 1144, 1145, 360, 361,
	506, 972, 362, 973, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 1146, 371, 372, 508, 373, 509,
	374, 1147, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 1148, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 1149,
	398, 974, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 1150, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 1151, 425,
	405, 406, 426, 427, 975, 428, 429, 512, 430, 431,
	1152, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 1153, 443, 444, 442, 1154, 445, 446,
	447, 448, 449, 278, 450, 1155, 451, 514, 515, 516,
	517, 1156, 458, 1157, 452, 453, 518, 454, 519, 1158,
	455, 456, 457, 0, 459, 460, 1159, 1160, 461, 462,
	463, 464, 465, 467, 1161, 468, 1162, 466, 469, 470,
	471, 520, 521, 522, 1163, 473, 472, 523, 1164, 1165,
	1166, 1167, 474, 475, 524, 476, 477, 478, 1083, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3132, 0, 219, 220, 221, 222, 223,
	1090, 224, 1091, 1092, 1093, 0, 1094, 479, 1095, 1096,
	1097, 1098, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 1099, 233, 234, 235, 236, 237,
	238, 1100, 1101, 239, 484, 485, 486, 1102, 240, 487,
	1103, 1088, 1104, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 1105, 251, 0, 252, 253, 254,
	1106, 960, 255, 256, 1107, 1108, 1110, 1109, 1111, 1112,
	1113, 257, 258, 259, 260, 261, 262, 488, 489, 1114,
	263, 1115, 265, 264, 1116, 266, 1117, 1118, 267, 268,
	269, 1119, 270, 1120, 271, 272, 1121, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	1122, 216, 1123, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 1124, 290, 1125, 1126, 961,
	291, 292, 1127, 293, 494, 1128, 495, 294, 1129, 295,
	296, 297, 298, 496, 497, 498, 350, 963, 299, 300,
	1130, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	1131, 962, 306, 499, 308, 307, 309, 310, 311, 500,
	1132, 501, 1133, 313, 964, 502, 965, 314, 315, 316,
	966, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	1134, 325, 324, 1135, 326, 503, 967, 327, 328, 968,
	1136, 329, 330, 1137, 1138, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 969,
	344, 345, 347, 970, 346, 1139, 218, 971, 348, 1140,
	504, 349, 505, 351, 352, 1141, 353, 354, 355, 1142,
	1143, 357, 358, 359, 1144, 1145, 360, 361, 506, 972,
	362, 973, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 1146, 371, 372, 508, 373, 509, 374, 1147,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 1148, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 1149, 398, 974,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 1150, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 1151, 425, 405, 406,
	426, 427, 975, 428, 429, 512, 430, 431, 1152, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 1153, 443, 444, 442, 1154, 445, 446, 447, 448,
	449, 278, 450, 1155, 451, 514, 515, 516, 517, 1156,
	458, 1157, 452, 453, 518, 454, 519, 1158, 455, 456,
	457, 0, 459, 460, 1159, 1160, 461, 462, 463, 464,
	465, 467, 1161, 468, 1162, 466, 469, 470, 471, 520,
	521, 522, 1163, 473, 472, 523, 1164, 1165, 1166, 1167,
	474, 475, 524, 476, 477, 478, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2928, 0, 219, 220, 221, 222, 223, 1090, 224,
	1091, 1092, 1093, 0, 1094, 479, 1095, 1096, 1097, 1098,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 1099, 233, 234, 235, 236, 237, 238, 1100,
	1101, 239, 484, 485, 486, 1102, 240, 487, 1103, 1088,
	1104, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 1105, 251, 0, 252, 253, 254, 1106, 960,
	255, 256, 1107, 1108, 1110, 1109, 1111, 1112, 1113, 257,
	258, 259, 260, 261, 262, 488, 489, 1114, 263, 1115,
	265, 264, 1116, 266, 1117, 1118, 267, 268, 269, 1119,
	270, 1120, 271, 272, 1121, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 1122, 216,
	1123, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 1124, 290, 1125, 1126, 961, 291, 292,
	1127, 293, 494, 1128, 495, 294, 1129, 295, 296, 297,
	298, 496, 497, 498, 350, 963, 299, 300, 1130, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 1131, 962,
	306, 499, 308, 307, 309, 310, 311, 500, 1132, 501,
	1133, 313, 964, 502, 965, 314, 315, 316, 966, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 1134, 325,
	324, 1135, 326, 503, 967, 327, 328, 968, 1136, 329,
	330, 1137, 1138, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 969, 344, 345,
	347, 970, 346, 1139, 218, 971, 348, 1140, 504, 349,
	505, 351, 352, 1141, 353, 354, 355, 1142, 1143, 357,
	358, 359, 1144, 1145, 360, 361, 506, 972, 362, 973,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	1146, 371, 372, 508, 373, 509, 374, 1147, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	1148, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 1149, 398, 974, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 1150, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 1151, 425, 405, 406, 426, 427,
	975, 428, 429, 512, 430, 431, 1152, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 1153,
	443, 444, 442, 1154, 445, 446, 447, 448, 449, 278,
	450, 1155, 451, 514, 515, 516, 517, 1156, 458, 1157,
	452, 453, 518, 454, 519, 1158, 455, 456, 457, 0,
	459, 460, 1159, 1160, 461, 462, 463, 464, 465, 467,
	1161, 468, 1162, 466, 469, 470, 471, 520, 521, 522,
	1163, 473, 472, 523, 1164, 1165, 1166, 1167, 474, 475,
	524, 476, 477, 478, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2911,
	0, 219, 220, 221, 222, 223, 1090, 224, 1091, 1092,
	1093, 0, 1094, 479, 1095, 1096, 1097, 1098, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	1099, 233, 234, 235, 236, 237, 238, 1100, 1101, 239,
	484, 485, 486, 1102, 240, 487, 1103, 1088, 1104, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	1105, 251, 0, 252, 253, 254, 1106, 960, 255, 256,
	1107, 1108, 1110, 1109, 1111, 1112, 1113, 257, 258, 259,
	260, 261, 262, 488, 489, 1114, 263, 1115, 265, 264,
	1116, 266, 1117, 1118, 267, 268, 269, 1119, 270, 1120,
	271, 272, 1121, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 1122, 216, 1123, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 1124, 290, 1125, 1126, 961, 291, 292, 1127, 293,
	494, 1128, 495, 294, 1129, 295, 296, 297, 298, 496,
	497, 498, 350, 963, 299, 300, 1130, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 1131, 962, 306, 499,
	308, 307, 309, 310, 311, 500, 1132, 501, 1133, 313,
	964, 502, 965, 314, 315, 316, 966, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 1134, 325, 324, 1135,
	326, 503, 967, 327, 328, 968, 1136, 329, 330, 1137,
	1138, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 969, 344, 345, 347, 970,
	346, 1139, 218, 971, 348, 1140, 504, 349, 505, 351,
	352, 1141, 353, 354, 355, 1142, 1143, 357, 358, 359,
	1144, 1145, 360, 361, 506, 972, 362, 973, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 1146, 371,
	372, 508, 373, 509, 374, 1147, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 1148, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 1149, 398, 974, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 1150, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 1151, 425, 405, 406, 426, 427, 975, 428,
	429, 512, 430, 431, 1152, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 1153, 443, 444,
	442, 1154, 445, 446, 447, 448, 449, 278, 450, 1155,
	451, 514, 515, 516, 517, 1156, 458, 1157, 452, 453,
	518, 454, 519, 1158, 455, 456, 457, 0, 459, 460,
	1159, 1160, 461, 462, 463, 464, 465, 467, 1161, 468,
	1162, 466, 469, 470, 471, 520, 521, 522, 1163, 473,
	472, 523, 1164, 1165, 1166, 1167, 474, 475, 524, 476,
	477, 478, 1083, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2781, 0, 219,
	220, 221, 222, 223, 1090, 224, 1091, 1092, 1093, 0,
	1094, 479, 1095, 1096, 1097, 1098, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 1099, 233,
	234, 235, 236, 237, 238, 1100, 1101, 239, 484, 485,
	486, 1102, 240, 487, 1103, 1088, 1104, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 1105, 251,
	0, 252, 253, 254, 1106, 960, 255, 256, 1107, 1108,
	1110, 1109, 1111, 1112, 1113, 257, 258, 259, 260, 261,
	262, 488, 489, 1114, 263, 1115, 265, 264, 1116, 266,
	1117, 1118, 267, 268, 269, 1119, 270, 1120, 271, 272,
	1121, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 1122, 216, 1123, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 1124,
	290, 1125, 1126, 961, 291, 292, 1127, 293, 494, 1128,
	495, 294, 1129, 295, 296, 297, 298, 496, 497, 498,
	350, 963, 299, 300, 1130, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 1131, 962, 306, 499, 308, 307,
	309, 310, 311, 500, 1132, 501, 1133, 313, 964, 502,
	965, 314, 315, 316, 966, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 1134, 325, 324, 1135, 326, 503,
	967, 327, 328, 968, 1136, 329, 330, 1137, 1138, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 969, 344, 345, 347, 970, 346, 1139,
	218, 971, 348, 1140, 504, 349, 505, 351, 352, 1141,
	353, 354, 355, 1142, 1143, 357, 358, 359, 1144, 1145,
	360, 361, 506, 972, 362, 973, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 1146, 371, 372, 508,
	373, 509, 374, 1147, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 1148, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 1149, 398, 974, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 1150,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	1151, 425, 405, 406, 426, 427, 975, 428, 429, 512,
	430, 431, 1152, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 1153, 443, 444, 442, 1154,
	445, 446, 447, 448, 449, 278, 450, 1155, 451, 514,
	515, 516, 517, 1156, 458, 1157, 452, 453, 518, 454,
	519, 1158, 455, 456, 457, 0, 459, 460, 1159, 1160,
	461, 462, 463, 464, 465, 467, 1161, 468, 1162, 466,
	469, 470, 471, 520, 521, 522, 1163, 473, 472, 523,
	1164, 1165, 1166, 1167, 474, 475, 524, 476, 477, 478,
	1083, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2120, 0, 219, 220, 221,
	222, 223, 1090, 224, 1091, 1092, 1093, 0, 1094, 479,
	1095, 1096, 1097, 1098, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 1099, 233, 234, 235,
	236, 237, 238, 1100, 1101, 239, 484, 485, 486, 1102,
	240, 487, 1103, 1088, 1104, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 1105, 251, 0, 252,
	253, 254, 1106, 960, 255, 256, 1107, 1108, 1110, 1109,
	1111, 1112, 1113, 257, 258, 259, 260, 261, 262, 488,
	489, 1114, 263, 1115, 265, 264, 1116, 266, 1117, 1118,
	267, 268, 269, 1119, 270, 1120, 271, 272, 1121, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 1122, 216, 1123, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 1124, 290, 1125,
	1126, 961, 291, 292, 1127, 293, 494, 1128, 495, 294,
	1129, 295, 296, 297, 298, 496, 497, 498, 350, 963,
	299, 300, 1130, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 1131, 962, 306, 499, 308, 307, 309, 310,
	311, 500, 1132, 501, 1133, 313, 964, 502, 965, 314,
	315, 316, 966, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 1134, 325, 324, 1135, 326, 503, 967, 327,
	328, 968, 1136, 329, 330, 1137, 1138, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 969, 344, 345, 347, 970, 346, 1139, 218, 971,
	348, 1140, 504, 349, 505, 351, 352, 1141, 353, 354,
	355, 1142, 1143, 357, 358, 359, 1144, 1145, 360, 361,
	506, 972, 362, 973, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 1146, 371, 372, 508, 373, 509,
	374, 1147, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 1148, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 1149,
	398, 974, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 1150, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 1151, 425,
	405, 406, 426, 427, 975, 428, 429, 512, 430, 431,
	1152, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 1153, 443, 444, 442, 1154, 445, 446,
	447, 448, 449, 278, 450, 1155, 451, 514, 515, 516,
	517, 1156, 458, 1157, 452, 453, 518, 454, 519, 1158,
	455, 456, 457, 0, 459, 460, 1159, 1160, 461, 462,
	463, 464, 465, 467, 1161, 468, 1162, 466, 469, 470,
	471, 520, 521, 522, 1163, 473, 472, 523, 1164, 1165,
	1166, 1167, 474, 475, 524, 476, 477, 478, 1191, 0,
	1083, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1826, 0, 0, 0, 219, 220, 221,
	222, 223, 1090, 224, 1091, 1092, 1093, 0, 1094, 479,
	1095, 1096, 1097, 1098, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 1099, 233, 234, 235,
	236, 237, 238, 1100, 1101, 239, 484, 485, 486, 1102,
	240, 487, 1103, 1088, 1104, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 1105, 251, 0, 252,
	253, 254, 1106, 960, 255, 256, 1107, 1108, 1110, 1109,
	1111, 1112, 1113, 257, 258, 259, 260, 261, 262, 488,
	489, 1114, 263, 1115, 265, 264, 1116, 266, 1117, 1118,
	267, 268, 269, 1119, 270, 1120, 271, 272, 1121, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 1122, 216, 1123, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 1124, 290, 1125,
	1126, 961, 291, 292, 1127, 293, 494, 1128, 495, 294,
	1129, 295, 296, 297, 298, 496, 497, 498, 350, 963,
	299, 300, 1130, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 1131, 962, 306, 499, 308, 307, 309, 310,
	311, 500, 1132, 501, 1133, 313, 964, 502, 965, 314,
	315, 316, 966, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 1134, 325, 324, 1135, 326, 503, 967, 327,
	328, 968, 1136, 329, 330, 1137, 1138, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 969, 344, 345, 347, 970, 346, 1139, 218, 971,
	348, 1140, 504, 349, 505, 351, 352, 1141, 353, 354,
	355, 1142, 1143, 357, 358, 359, 1144, 1145, 360, 361,
	506, 972, 362, 973, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 1146, 371, 372, 508, 373, 509,
	374, 1147, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 1148, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 1149,
	398, 974, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 1150, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 1151, 425,
	405, 406, 426, 427, 975, 428, 429, 512, 430, 431,
	1152, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 1153, 443, 444, 442, 1154, 445, 446,
	447, 448, 449, 278, 450, 1155, 451, 514, 515, 516,
	517, 1156, 458, 1157, 452, 453, 518, 454, 519, 1158,
	455, 456, 457, 0, 459, 460, 1159, 1160, 461, 462,
	463, 464, 465, 467, 1161, 468, 1162, 466, 469, 470,
	471, 520, 521, 522, 1163, 473, 472, 523, 1164, 1165,
	1166, 1167, 474, 475, 524, 476, 477, 478, 1080, 0,
	1083, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 1090, 224, 1091, 1092, 1093, 0, 1094, 479,
	1095, 1096, 1097, 1098, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 1099, 233, 234, 235,
	236, 237, 238, 1100, 1101, 239, 484, 485, 486, 1102,
	240, 487, 1103, 1088, 1104, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 1105, 251, 0, 252,
	253, 254, 1106, 960, 255, 256, 1107, 1108, 1110, 1109,
	1111, 1112, 1113, 257, 258, 259, 260, 261, 262, 488,
	489, 1114, 263, 1115, 265, 264, 1116, 266, 1117, 1118,
	267, 268, 269, 1119, 270, 1120, 271, 272, 1121, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 1122, 216, 1123, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 1124, 290, 1125,
	1126, 961, 291, 292, 1127, 293, 494, 1128, 495, 294,
	1129, 295, 296, 297, 298, 496, 497, 498, 350, 963,
	299, 300, 1130, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 1131, 962, 306, 499, 308, 307, 309, 310,
	311, 500, 1132, 501, 1133, 313, 964, 502, 965, 314,
	315, 316, 966, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 1134, 325, 324, 1135, 326, 503, 967, 327,
	328, 968, 1136, 329, 330, 1137, 1138, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 969, 344, 345, 347, 970, 346, 1139, 218, 971,
	348, 1140, 504, 349, 505, 351, 352, 1141, 353, 354,
	355, 1142, 1143, 357, 358, 359, 1144, 1145, 360, 361,
	506, 972, 362, 973, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 1146, 371, 372, 508, 373, 509,
	374, 1147, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 1148, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 1149,
	398, 974, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 1150, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 1151, 425,
	405, 406, 426, 427, 975, 428, 429, 512, 430, 431,
	1152, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 1153, 443, 444, 442, 1154, 445, 446,
	447, 448, 449, 278, 450, 1155, 451, 514, 515, 516,
	517, 1156, 458, 1157, 452, 453, 518, 454, 519, 1158,
	455, 456, 457, 0, 459, 460, 1159, 1160, 461, 462,
	463, 464, 465, 467, 1161, 468, 1162, 466, 469, 470,
	471, 520, 521, 522, 1163, 473, 472, 523, 1164, 1165,
	1166, 1167, 474, 475, 524, 476, 477, 478, 1083, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	1090, 224, 1091, 1092, 1093, 0, 1094, 479, 1095, 1096,
	1097, 1098, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 1099, 233, 234, 235, 236, 237,
	238, 1100, 1101, 239, 484, 485, 486, 1102, 240, 487,
	1103, 1088, 1104, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 1105, 251, 0, 252, 253, 254,
	1106, 960, 255, 256, 1107, 1108, 1110, 1109, 1111, 1112,
	1113, 257, 258, 259, 260, 261, 262, 488, 489, 1114,
	263, 1115, 265, 264, 1116, 266, 1117, 1118, 267, 268,
	269, 1119, 270, 1120, 271, 272, 1121, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	1122, 216, 1123, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 1124, 290, 1125, 1126, 961,
	291, 292, 1127, 293, 494, 1128, 495, 294, 1129, 295,
	296, 297, 298, 496, 497, 498, 350, 963, 299, 300,
	1130, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	1131, 962, 306, 499, 308, 307, 309, 310, 311, 500,
	1132, 501, 1133, 313, 964, 502, 965, 314, 315, 316,
	966, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	1134, 325, 324, 1135, 326, 503, 967, 327, 328, 968,
	1136, 329, 330, 1137, 1138, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 969,
	344, 345, 347, 970, 346, 1139, 218, 971, 348, 1140,
	504, 349, 505, 351, 352, 1141, 353, 354, 355, 1142,
	1143, 357, 358, 359, 1144, 1145, 360, 361, 506, 972,
	362, 973, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 1146, 371, 372, 508, 373, 509, 374, 1147,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 1148, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 1149, 398, 974,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 1150, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 1151, 425, 405, 406,
	426, 427, 975, 428, 429, 512, 430, 431, 1152, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 1153, 443, 444, 442, 1154, 445, 446, 447, 448,
	449, 278, 450, 1155, 451, 514, 515, 516, 517, 1156,
	458, 1157, 452, 453, 518, 454, 519, 1158, 455, 456,
	457, 0, 459, 460, 1159, 1160, 461, 462, 463, 464,
	465, 467, 1161, 468, 1162, 466, 469, 470, 471, 520,
	521, 522, 1163, 473, 472, 523, 1164, 1165, 1166, 1167,
	474, 475, 524, 476, 477, 478, 2095, 0, 902, 860,
	861, 862, 858, 859, 871, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	2092, 224, 0, 0, 0, 0, 0, 951, 876, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 917, 896,
	928, 886, 927, 926, 0, 233, 888, 887, 236, 237,
	238, 878, 950, 239, 987, 988, 486, 0, 240, 957,
	0, 940, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 960, 255, 256, 943, 941, 942, 947, 945, 944,
	946, 257, 258, 259, 260, 931, 262, 924, 923, 849,
	263, 0, 265, 264, 0, 266, 2093, 0, 267, 922,
	269, 0, 270, 0, 271, 272, 0, 273, 855, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 978, 979,
	867, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	921, 919, 920, 0, 289, 0, 290, 0, 0, 961,
	291, 292, 0, 293, 985, 0, 877, 294, 0, 295,
	296, 297, 298, 952, 953, 956, 350, 963, 299, 300,
	0, 301, 302, 898, 0, 0, 217, 303, 305, 312,
	0, 962, 306, 910, 901, 912, 914, 915, 916, 911,
	0, 903, 0, 313, 964, 954, 965, 314, 315, 316,
	966, 936, 937, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 986, 967, 327, 328, 968,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 890, 341, 969,
	344, 345, 347, 970, 346, 846, 218, 971, 348, 868,
	955, 349, 925, 351, 352, 0, 899, 354, 900, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 972,
	362, 973, 980, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 981, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 918,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 974,
	399, 400, 401, 402, 856, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 891, 892,
	894, 895, 416, 422, 423, 424, 948, 425, 405, 406,
	426, 427, 975, 428, 429, 913, 893, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 959, 437, 438, 439,
	982, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 889, 0, 451, 932, 933, 934, 935, 0,
	458, 0, 452, 453, 983, 454, 984, 866, 455, 456,
	457, 0, 459, 460, 0, 850, 461, 462, 463, 464,
	465, 467, 949, 468, 0, 897, 469, 470, 471, 520,
	929, 977, 2091, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 847, 0, 0, 0,
	0, 0, 845, 0, 0, 0, 0, 0, 0, 843,
	844, 2094, 0, 0, 0, 0, 0, 0, 872, 2090,
	0, 836, 870, 902, 860, 861, 862, 858, 859, 871,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 951, 876, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 917, 896, 928, 886, 927, 926, 0,
	233, 888, 887, 236, 237, 238, 878, 950, 239, 987,
	988, 486, 0, 240, 957, 0, 940, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 960, 255, 256, 943,
	941, 942, 947, 945, 944, 946, 257, 258, 259, 260,
	931, 262, 924, 923, 849, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 922, 269, 0, 270, 0, 271,
	272, 0, 273, 855, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 978, 979, 867, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 921, 919, 920, 0, 289,
	0, 290, 0, 0, 961, 291, 292, 0, 293, 985,
	0, 877, 294, 0, 295, 296, 297, 298, 952, 953,
	956, 350, 963, 299, 300, 0, 301, 302, 898, 0,
	0, 217, 303, 305, 312, 0, 962, 306, 910, 901,
	912, 914, 915, 916, 911, 0, 903, 0, 313, 964,
	954, 965, 314, 315, 316, 966, 936, 937, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	986, 967, 327, 328, 968, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 890, 341, 969, 344, 345, 347, 970, 346,
	846, 218, 971, 348, 868, 955, 349, 925, 351, 352,
	0, 899, 354, 900, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 972, 362, 973, 980, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	981, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 918, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 974, 399, 400, 401, 402, 856,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	182, 420, 421, 891, 892, 894, 895, 416, 422, 423,
	424, 948, 425, 405, 406, 426, 427, 975, 428, 429,
	913, 893, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 959, 437, 438, 439, 982, 0, 443, 444, 442,
	184, 445, 446, 447, 448, 449, 278, 889, 0, 451,
	932, 933, 934, 935, 0, 458, 0, 452, 453, 983,
	454, 984, 866, 455, 456, 457, 0, 459, 460, 0,
	850, 461, 462, 463, 464, 465, 467, 949, 468, 0,
	897, 469, 470, 471, 1335, 929, 977, 0, 473, 472,
	523, 0, 0, 0, 176, 474, 475, 524, 476, 477,
	478, 847, 177, 0, 0, 0, 0, 845, 0, 0,
	0, 0, 0, 0, 843, 844, 902, 860, 861, 862,
	858, 859, 871, 1545, 1543, 0, 0, 870, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 951, 876, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 917, 896, 928, 886,
	927, 926, 0, 233, 888, 887, 236, 237, 238, 878,
	950, 239, 987, 988, 486, 0, 240, 957, 0, 940,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 943, 941, 942, 947, 945, 944, 946, 257,
	258, 259, 260, 931, 262, 924, 923, 849, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 922, 269, 0,
	270, 0, 271, 272, 0, 273, 855, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 978, 979, 867, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 921, 919,
	920, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 985, 0, 877, 294, 0, 295, 296, 297,
	298, 952, 953, 956, 350, 963, 299, 300, 0, 301,
	302, 898, 0, 0, 217, 303, 305, 312, 0, 962,
	306, 910, 901, 912, 914, 915, 916, 911, 0, 903,
	0, 313, 964, 954, 965, 314, 315, 316, 966, 936,
	937, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 986, 967, 327, 328, 968, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 890, 341, 969, 344, 345,
	347, 970, 346, 846, 218, 971, 348, 868, 955, 349,
	925, 351, 352, 0, 899, 354, 900, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	980, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 981, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 918, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 856, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 182, 420, 421, 891, 892, 894, 895,
	416, 422, 423, 424, 948, 425, 405, 406, 426, 427,
	975, 428, 429, 913, 893, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 959, 437, 438, 439, 982, 0,
	443, 444, 442, 184, 445, 446, 447, 448, 449, 278,
	889, 0, 451, 932, 933, 934, 935, 0, 458, 0,
	452, 453, 983, 454, 984, 866, 455, 456, 457, 0,
	459, 460, 0, 850, 461, 462, 463, 464, 465, 467,
	949, 468, 0, 897, 469, 470, 471, 1335, 929, 977,
	0, 473, 472, 523, 0, 0, 0, 176, 474, 475,
	524, 476, 477, 478, 847, 177, 0, 0, 0, 0,
	845, 0, 0, 0, 0, 0, 0, 843, 844, 902,
	860, 861, 862, 858, 859, 871, 1545, 2533, 0, 0,
	870, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 951, 876,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 917,
	896, 928, 886, 927, 926, 0, 233, 888, 887, 236,
	237, 238, 878, 950, 239, 987, 988, 486, 0, 240,
	957, 0, 940, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 960, 255, 256, 943, 941, 942, 947, 945,
	944, 946, 257, 258, 259, 260, 931, 262, 924, 923,
	849, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	922, 269, 0, 270, 0, 271, 272, 0, 273, 855,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 978,
	979, 867, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 921, 919, 920, 0, 289, 0, 290, 0, 0,
	961, 291, 292, 0, 293, 985, 0, 877, 294, 0,
	295, 296, 297, 298, 952, 953, 956, 350, 963, 299,
	300, 0, 301, 302, 898, 0, 0, 217, 303, 305,
	312, 0, 962, 306, 910, 901, 912, 914, 915, 916,
	911, 0, 903, 0, 313, 964, 954, 965, 314, 315,
	316, 966, 936, 937, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 986, 967, 327, 328,
	968, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 890, 341,
	969, 344, 345, 347, 970, 346, 846, 218, 971, 348,
	868, 955, 349, 925, 351, 352, 0, 899, 354, 900,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	972, 362, 973, 980, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 981, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	918, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	974, 399, 400, 401, 402, 856, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 182, 420, 421, 891,
	892, 894, 895, 416, 422, 423, 424, 948, 425, 405,
	406, 426, 427, 975, 428, 429, 913, 893, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 959, 437, 438,
	439, 982, 0, 443, 444, 442, 184, 445, 446, 447,
	448, 449, 278, 889, 0, 451, 932, 933, 934, 935,
	0, 458, 0, 452, 453, 983, 454, 984, 866, 455,
	456, 457, 0, 459, 460, 0, 850, 461, 462, 463,
	464, 465, 467, 949, 468, 0, 897, 469, 470, 471,
	1335, 929, 977, 0, 473, 472, 523, 0, 0, 0,
	176, 474, 475, 524, 476, 477, 478, 847, 177, 0,
	0, 0, 0, 845, 0, 0, 0, 0, 0, 0,
	843, 844, 902, 860, 861, 862, 858, 859, 871, 1545,
	1543, 0, 0, 870, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 951, 876, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 917, 896, 928, 886, 927, 926, 2183, 233,
	888, 887, 236, 237, 238, 878, 950, 239, 987, 988,
	486, 0, 240, 957, 0, 940, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 960, 255, 256, 943, 941,
	942, 947, 945, 944, 946, 257, 258, 259, 260, 931,
	262, 924, 923, 849, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 922, 269, 0, 270, 0, 271, 272,
	0, 273, 855, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 978, 979, 867, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 921, 919, 920, 0, 289, 0,
	290, 0, 2188, 961, 291, 292, 0, 293, 985, 0,
	877, 294, 0, 295, 296, 297, 298, 952, 953, 956,
	350, 963, 299, 300, 0, 301, 302, 898, 0, 0,
	217, 303, 305, 312, 0, 962, 306, 910, 901, 912,
	914, 915, 916, 911, 0, 903, 0, 313, 964, 954,
	965, 314, 315, 316, 966, 936, 937, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 2184, 326, 986,
	967, 327, 328, 968, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 890, 341, 969, 344, 345, 347, 970, 346, 846,
	218, 971, 348, 868, 955, 349, 925, 351, 352, 0,
	899, 354, 900, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 972, 362, 973, 980, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 981,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 918, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 974, 399, 400, 401, 402, 856, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 891, 892, 894, 895, 416, 422, 423, 424,
	948, 425, 405, 406, 426, 427, 975, 428, 429, 913,
	893, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	959, 437, 438, 439, 982, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 889, 0, 451, 932,
	933, 934, 935, 0, 458, 2185, 452, 453, 983, 454,
	984, 866, 455, 456, 457, 0, 459, 460, 0, 850,
	461, 462, 463, 464, 465, 467, 949, 468, 0, 897,
	469, 470, 471, 520, 929, 977, 0, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	847, 0, 0, 0, 0, 0, 845, 0, 0, 0,
	0, 0, 0, 843, 844, 0, 0, 0, 0, 0,
	0, 0, 872, 0, 0, 2142, 870, 902, 860, 861,
	862, 858, 859, 871, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 951, 876, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 917, 896, 928,
	886, 927, 926, 0, 233, 888, 887, 236, 237, 238,
	878, 950, 239, 987, 988, 486, 0, 240, 957, 0,
	940, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	960, 255, 256, 943, 941, 942, 947, 945, 944, 946,
	257, 258, 259, 260, 931, 262, 924, 923, 849, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 922, 269,
	0, 270, 0, 271, 272, 0, 273, 855, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 978, 979, 867,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 921,
	919, 920, 0, 289, 0, 290, 0, 0, 961, 291,
	292, 0, 293, 985, 0, 877, 294, 0, 295, 296,
	297, 298, 952, 953, 956, 350, 963, 299, 300, 0,
	301, 302, 898, 0, 0, 217, 303, 305, 312, 0,
	962, 306, 910, 901, 912, 914, 915, 916, 911, 0,
	903, 0, 313, 964, 954, 965, 314, 315, 316, 966,
	936, 937, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 986, 967, 327, 328, 968, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 890, 341, 969, 344,
	345, 347, 970, 346, 846, 218, 971, 348, 868, 955,
	349, 925, 351, 352, 0, 899, 354, 900, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 972, 362,
	973, 980, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 981, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 918, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 974, 399,
	400, 401, 402, 856, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 891, 892, 894,
	895, 416, 422, 423, 424, 948, 425, 405, 406, 426,
	427, 975, 428, 429, 913, 893, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 959, 437, 438, 439, 982,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 889, 0, 451, 932, 933, 934, 935, 0, 458,
	0, 452, 453, 983, 454, 984, 866, 455, 456, 457,
	0, 459, 460, 0, 850, 461, 462, 463, 464, 465,
	467, 949, 468, 0, 897, 469, 470, 471, 520, 929,
	977, 0, 473, 472, 523, 0, 0, 0, 0, 474,
	475, 524, 476, 477, 478, 847, 0, 0, 0, 0,
	0, 845, 0, 0, 0, 0, 0, 0, 843, 844,
	0, 0, 0, 0, 0, 0, 0, 872, 2140, 0,
	2139, 870, 902, 860, 861, 862, 858, 859, 871, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 951, 876, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 917, 896, 928, 886, 927, 926, 0, 233,
	888, 887, 236, 237, 238, 878, 950, 239, 987, 988,
	486, 0, 240, 957, 0, 940, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 960, 255, 256, 943, 941,
	942, 947, 945, 944, 946, 257, 258, 259, 260, 931,
	262, 924, 923, 849, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 922, 269, 0, 270, 0, 271, 272,
	0, 273, 855, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 978, 979, 867, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 921, 919, 920, 0, 289, 0,
	290, 0, 0, 961, 291, 292, 0, 293, 985, 0,
	877, 294, 0, 295, 296, 297, 298, 952, 953, 956,
	350, 963, 299, 300, 0, 301, 302, 898, 0, 0,
	217, 303, 305, 312, 0, 962, 306, 910, 901, 912,
	914, 915, 916, 911, 0, 903, 0, 313, 964, 954,
	965, 314, 315, 316, 966, 936, 937, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 986,
	967, 327, 328, 968, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 890, 341, 969, 344, 345, 347, 970, 346, 846,
	218, 971, 348, 868, 955, 349, 925, 351, 352, 0,
	899, 354, 900, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 972, 362, 973, 980, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 981,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 918, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 974, 399, 400, 401, 402, 856, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 891, 892, 894, 895, 416, 422, 423, 424,
	948, 425, 405, 406, 426, 427, 975, 428, 429, 913,
	893, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	959, 437, 438, 439, 982, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 889, 0, 451, 932,
	933, 934, 935, 0, 458, 0, 452, 453, 983, 454,
	984, 866, 455, 456, 457, 0, 459, 460, 0, 850,
	461, 462, 463, 464, 465, 467, 949, 468, 0, 897,
	469, 470, 471, 520, 929, 977, 0, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	847, 0, 0, 0, 0, 0, 845, 0, 0, 0,
	0, 0, 0, 843, 844, 0, 0, 0, 0, 0,
	0, 0, 872, 2137, 0, 1402, 870, 902, 860, 861,
	862, 858, 859, 871, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 951, 876, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 917, 896, 928,
	886, 927, 926, 0, 233, 888, 887, 236, 237, 238,
	878, 950, 239, 987, 988, 486, 0, 240, 957, 0,
	940, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	960, 255, 256, 943, 941, 942, 947, 945, 944, 946,
	257, 258, 259, 260, 931, 262, 924, 923, 849, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 922, 269,
	0, 270, 0, 271, 272, 0, 273, 855, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 978, 979, 867,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 921,
	919, 920, 0, 289, 0, 290, 0, 0, 961, 291,
	292, 0, 293, 985, 0, 877, 294, 0, 295, 296,
	297, 298, 952, 953, 956, 350, 963, 299, 300, 0,
	301, 302, 898, 0, 0, 217, 303, 305, 312, 0,
	962, 306, 910, 901, 912, 914, 915, 916, 911, 0,
	903, 0, 313, 964, 954, 965, 314, 315, 316, 966,
	936, 937, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 986, 967, 327, 328, 968, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 890, 341, 969, 344,
	345, 347, 970, 346, 846, 218, 971, 348, 868, 955,
	349, 925, 351, 352, 0, 899, 354, 900, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 972, 362,
	973, 980, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 981, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 918, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 974, 399,
	400, 401, 402, 856, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 891, 892, 894,
	895, 416, 422, 423, 424, 948, 425, 405, 406, 426,
	427, 975, 428, 429, 913, 893, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 959, 437, 438, 439, 982,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 889, 0, 451, 932, 933, 934, 935, 0, 458,
	0, 452, 453, 983, 454, 984, 866, 455, 456, 457,
	0, 459, 460, 0, 850, 461, 462, 463, 464, 465,
	467, 949, 468, 0, 897, 469, 470, 471, 520, 929,
	977, 0, 473, 472, 523, 1401, 0, 0, 0, 474,
	475, 524, 476, 477, 478, 847, 0, 0, 0, 0,
	0, 845, 0, 0, 0, 0, 0, 0, 843, 844,
	0, 0, 0, 0, 0, 0, 0, 872, 0, 0,
	839, 870, 902, 860, 861, 862, 858, 859, 871, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 951, 876, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 917, 896, 928, 886, 927, 926, 0, 233,
	888, 887, 236, 237, 238, 878, 950, 239, 987, 988,
	486, 0, 240, 957, 0, 940, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 960, 255, 256, 943, 941,
	942, 947, 945, 944, 946, 257, 258, 259, 260, 931,
	262, 924, 923, 849, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 922, 269, 0, 270, 0, 271, 272,
	0, 273, 855, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 978, 979, 867, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 921, 919, 920, 0, 289, 0,
	290, 0, 0, 961, 291, 292, 0, 293, 985, 0,
	877, 294, 0, 295, 296, 297, 298, 952, 953, 956,
	350, 963, 299, 300, 0, 301, 302, 898, 0, 0,
	217, 303, 305, 312, 0, 962, 306, 910, 901, 912,
	914, 915, 916, 911, 0, 903, 0, 313, 964, 954,
	965, 314, 315, 316, 966, 936, 937, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 986,
	967, 327, 328, 968, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 890, 341, 969, 344, 345, 347, 970, 346, 846,
	218, 971, 348, 868, 955, 349, 925, 351, 352, 0,
	899, 354, 900, 851, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 972, 362, 973, 980, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 981,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 918, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 974, 399, 400, 401, 402, 856, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 891, 892, 894, 895, 416, 422, 423, 424,
	948, 425, 405, 406, 426, 427, 975, 428, 429, 913,
	893, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	959, 437, 438, 439, 982, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 889, 0, 451, 932,
	933, 934, 935, 0, 458, 0, 452, 453, 983, 454,
	984, 866, 455, 456, 457, 0, 459, 460, 0, 850,
	461, 462, 463, 464, 465, 467, 949, 468, 0, 897,
	469, 470, 471, 520, 929, 977, 0, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	847, 0, 0, 0, 0, 0, 845, 0, 0, 0,
	0, 0, 0, 843, 844, 902, 860, 861, 862, 858,
	859, 871, 872, 0, 0, 0, 870, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 951, 876, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 917, 896, 928, 886, 927,
	926, 0, 233, 888, 887, 236, 237, 238, 878, 950,
	239, 987, 988, 486, 0, 240, 957, 0, 940, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 3529, 254, 0, 960, 255,
	256, 943, 941, 942, 947, 945, 944, 946, 257, 258,
	259, 260, 931, 262, 924, 923, 849, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 922, 269, 0, 270,
	0, 271, 272, 0, 273, 855, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 978, 979, 867, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 921, 919, 920,
	0, 289, 0, 290, 0, 0, 961, 291, 292, 0,
	293, 985, 0, 877, 294, 0, 295, 296, 297, 298,
	952, 953, 956, 350, 963, 299, 300, 0, 301, 302,
	898, 0, 0, 217, 303, 305, 312, 0, 962, 306,
	910, 901, 912, 914, 915, 916, 911, 0, 903, 0,
	313, 964, 954, 965, 314, 315, 316, 966, 936, 937,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 986, 967, 327, 328, 968, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 890, 341, 969, 344, 345, 347,
	970, 346, 846, 218, 971, 348, 868, 955, 349, 925,
	351, 352, 0, 899, 354, 900, 851, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 972, 362, 973, 980,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 981, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 918, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 974, 399, 400, 401,
	402, 856, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 891, 892, 894, 895, 416,
	422, 423, 424, 948, 425, 405, 406, 426, 427, 975,
	428, 429, 913, 893, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 959, 437, 438, 439, 982, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 889,
	0, 451, 932, 933, 934, 935, 0, 458, 0, 452,
	453, 983, 454, 984, 866, 455, 456, 457, 0, 459,
	460, 0, 850, 461, 462, 463, 464, 465, 467, 949,
	468, 0, 897, 469, 470, 471, 520, 929, 977, 0,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 847, 0, 0, 0, 0, 0, 845,
	0, 0, 0, 0, 0, 0, 843, 844, 902, 860,
	861, 862, 858, 859, 871, 872, 0, 0, 0, 870,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 951, 876, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 917, 896,
	928, 886, 927, 926, 0, 233, 888, 887, 236, 237,
	238, 878, 950, 239, 987, 988, 486, 0, 240, 957,
	0, 940, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 3380, 254,
	0, 960, 255, 256, 943, 941, 942, 947, 945, 944,
	946, 257, 258, 259, 260, 931, 262, 924, 923, 849,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 922,
	269, 0, 270, 0, 271, 272, 0, 273, 855, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 978, 979,
	867, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	921, 919, 920, 0, 289, 0, 290, 0, 0, 961,
	291, 292, 0, 293, 985, 0, 877, 294, 0, 295,
	296, 297, 298, 952, 953, 956, 350, 963, 299, 300,
	0, 301, 302, 898, 0, 0, 217, 303, 305, 312,
	0, 962, 306, 910, 901, 912, 914, 915, 916, 911,
	0, 903, 0, 313, 964, 954, 965, 314, 315, 316,
	966, 936, 937, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 986, 967, 327, 328, 968,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 890, 341, 969,
	344, 345, 347, 970, 346, 846, 218, 971, 348, 868,
	955, 349, 925, 351, 352, 0, 899, 354, 900, 851,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 972,
	362, 973, 980, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 981, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 918,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 974,
	399, 400, 401, 402, 856, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 891, 892,
	894, 895, 416, 422, 423, 424, 948, 425, 405, 406,
	426, 427, 975, 428, 429, 913, 893, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 959, 437, 438, 439,
	982, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 889, 0, 451, 932, 933, 934, 935, 0,
	458, 0, 452, 453, 983, 454, 984, 866, 455, 456,
	457, 0, 459, 460, 0, 850, 461, 462, 463, 464,
	465, 467, 949, 468, 0, 897, 469, 470, 471, 520,
	929, 977, 0, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 847, 0, 0, 0,
	0, 0, 845, 0, 0, 0, 0, 0, 0, 843,
	844, 902, 860, 861, 862, 858, 859, 871, 872, 0,
	0, 0, 870, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	951, 876, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 917, 896, 928, 886, 927, 926, 0, 233, 888,
	887, 236, 237, 238, 878, 950, 239, 987, 988, 486,
	0, 240, 957, 0, 940, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 256, 943, 941, 942,
	947, 945, 944, 946, 257, 258, 259, 260, 931, 262,
	924, 923, 849, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 922, 269, 0, 270, 0, 271, 272, 0,
	273, 855, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 978, 979, 867, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 921, 919, 920, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 985, 0, 877,
	294, 0, 295, 296, 297, 298, 952, 953, 956, 350,
	963, 299, 300, 0, 301, 302, 898, 0, 0, 217,
	303, 305, 312, 0, 962, 306, 910, 901, 912, 914,
	915, 916, 911, 0, 903, 0, 313, 964, 954, 965,
	314, 315, 316, 966, 936, 937, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 986, 967,
	327, 328, 968, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	890, 341, 969, 344, 345, 347, 970, 346, 846, 3102,
	971, 348, 868, 955, 349, 925, 351, 352, 0, 899,
	354, 900, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 980, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 981, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 918, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 856, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 891, 892, 894, 895, 416, 422, 423, 424, 948,
	425, 405, 406, 426, 427, 975, 428, 429, 913, 893,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 959,
	437, 438, 439, 982, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 889, 0, 451, 932, 933,
	934, 935, 0, 458, 0, 452, 453, 983, 454, 984,
	866, 455, 456, 457, 0, 459, 460, 0, 850, 461,
	462, 463, 464, 465, 467, 949, 468, 0, 897, 469,
	470, 471, 520, 929, 977, 0, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 847,
	0, 0, 0, 0, 0, 845, 0, 0, 0, 0,
	0, 0, 843, 844, 1607, 0, 0, 0, 0, 0,
	0, 872, 0, 0, 0, 870, 902, 860, 861, 862,
	858, 859, 871, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 951, 876, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 917, 896, 928, 886,
	927, 926, 0, 233, 888, 887, 236, 237, 238, 878,
	950, 239, 987, 988, 486, 0, 240, 957, 0, 940,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 943, 941, 942, 947, 945, 944, 946, 257,
	258, 259, 260, 931, 262, 924, 923, 849, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 922, 269, 0,
	270, 0, 271, 272, 0, 273, 855, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 978, 979, 867, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 921, 919,
	920, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 985, 0, 877, 294, 0, 295, 296, 297,
	298, 952, 953, 956, 350, 963, 299, 300, 0, 301,
	302, 898, 0, 0, 217, 303, 305, 312, 0, 962,
	306, 910, 901, 912, 914, 915, 916, 911, 0, 903,
	0, 313, 964, 954, 965, 314, 315, 316, 966, 936,
	937, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 986, 967, 327, 328, 968, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 890, 341, 969, 344, 345,
	347, 970, 346, 846, 218, 971, 348, 868, 955, 349,
	925, 351, 352, 0, 899, 354, 900, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	980, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 981, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 918, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 856, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 891, 892, 894, 895,
	416, 422, 423, 424, 948, 425, 405, 406, 426, 427,
	975, 428, 429, 913, 893, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 959, 437, 438, 439, 982, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	889, 0, 451, 932, 933, 934, 935, 0, 458, 0,
	452, 453, 983, 454, 984, 866, 455, 456, 457, 0,
	459, 460, 0, 850, 461, 462, 463, 464, 465, 467,
	949, 468, 0, 897, 469, 470, 471, 520, 929, 977,
	2907, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 847, 0, 0, 0, 0, 0,
	845, 0, 0, 0, 0, 0, 0, 843, 844, 902,
	860, 861, 862, 858, 859, 871, 872, 0, 0, 0,
	870, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 951, 876,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 917,
	896, 928, 886, 927, 926, 0, 233, 888, 887, 236,
	237, 238, 878, 950, 239, 987, 988, 486, 0, 240,
	957, 0, 940, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 960, 255, 256, 943, 941, 942, 947, 945,
	944, 946, 257, 258, 259, 260, 931, 262, 924, 923,
	849, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	922, 269, 0, 270, 0, 271, 272, 0, 273, 855,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 978,
	979, 867, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 921, 919, 920, 0, 289, 0, 290, 0, 0,
	961, 291, 292, 0, 293, 985, 0, 877, 294, 0,
	295, 296, 297, 298, 952, 953, 956, 350, 963, 299,
	300, 0, 301, 302, 898, 0, 0, 2009, 303, 305,
	312, 0, 962, 306, 910, 901, 912, 914, 915, 916,
	911, 0, 903, 0, 313, 964, 954, 965, 314, 315,
	316, 966, 936, 937, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 986, 967, 327, 328,
	968, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 890, 341,
	969, 344, 345, 347, 970, 346, 846, 218, 971, 348,
	868, 955, 349, 925, 351, 352, 0, 899, 354, 900,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	972, 362, 973, 980, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 981, 373, 509, 374,
	2008, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	918, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	974, 399, 400, 401, 402, 856, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 891,
	892, 894, 895, 416, 422, 423, 424, 948, 425, 405,
	406, 426, 427, 975, 428, 429, 913, 893, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 959, 437, 438,
	439, 982, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 889, 0, 451, 932, 933, 934, 935,
	0, 458, 0, 452, 453, 983, 454, 984, 866, 455,
	456, 457, 0, 459, 460, 0, 850, 461, 462, 463,
	464, 465, 467, 949, 468, 0, 897, 469, 470, 471,
	520, 929, 977, 0, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 847, 0, 0,
	0, 0, 0, 845, 0, 0, 0, 0, 0, 0,
	843, 844, 902, 860, 861, 862, 858, 859, 871, 872,
	0, 0, 0, 870, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 951, 876, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 917, 896, 928, 886, 927, 926, 0, 233,
	888, 887, 236, 237, 238, 878, 950, 239, 987, 988,
	486, 0, 240, 957, 0, 940, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 960, 255, 256, 943, 941,
	942, 947, 945, 944, 946, 257, 258, 259, 260, 931,
	262, 924, 923, 849, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 922, 269, 0, 270, 0, 271, 272,
	0, 273, 855, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 978, 979, 867, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 921, 919, 920, 0, 289, 0,
	290, 0, 0, 961, 291, 292, 0, 293, 985, 0,
	877, 294, 0, 295, 296, 297, 298, 952, 953, 956,
	350, 963, 299, 300, 0, 301, 302, 898, 0, 0,
	217, 303, 305, 312, 0, 962, 306, 910, 901, 912,
	914, 915, 916, 911, 0, 903, 0, 313, 964, 954,
	965, 314, 315, 316, 966, 936, 937, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 986,
	967, 327, 328, 968, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 890, 341, 969, 344, 345, 347, 970, 346, 846,
	218, 971, 348, 868, 955, 349, 925, 351, 352, 0,
	899, 354, 900, 851, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 972, 362, 973, 980, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 981,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 918, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 974, 399, 400, 401, 402, 856, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 891, 892, 894, 895, 416, 422, 423, 424,
	948, 425, 405, 406, 426, 427, 975, 428, 429, 913,
	893, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	959, 437, 438, 439, 982, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 889, 0, 451, 932,
	933, 934, 935, 0, 458, 0, 452, 453, 983, 454,
	984, 866, 455, 456, 457, 0, 459, 460, 0, 850,
	461, 462, 463, 464, 465, 467, 949, 468, 0, 897,
	469, 470, 471, 520, 929, 977, 0, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	847, 0, 0, 0, 0, 0, 845, 0, 0, 0,
	0, 0, 0, 843, 844, 902, 860, 861, 862, 858,
	859, 871, 872, 0, 0, 0, 870, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 951, 876, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 917, 896, 928, 886, 927,
	926, 0, 233, 888, 887, 236, 237, 238, 878, 950,
	239, 987, 988, 486, 0, 240, 957, 0, 940, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 960, 255,
	256, 943, 941, 942, 947, 945, 944, 946, 257, 258,
	259, 260, 931, 262, 924, 923, 849, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 922, 269, 0, 270,
	0, 271, 272, 0, 273, 855, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 978, 979, 867, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 921, 919, 920,
	0, 289, 0, 290, 0, 0, 961, 291, 292, 0,
	293, 985, 0, 877, 294, 0, 295, 296, 297, 298,
	952, 953, 956, 350, 963, 299, 300, 0, 301, 302,
	898, 0, 0, 217, 303, 305, 312, 0, 962, 306,
	910, 901, 912, 914, 915, 916, 911, 0, 903, 0,
	313, 964, 954, 965, 314, 315, 316, 966, 936, 937,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 986, 967, 327, 328, 968, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 890, 341, 969, 344, 345, 347,
	970, 346, 846, 218, 971, 348, 868, 955, 349, 925,
	351, 352, 0, 899, 354, 900, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 972, 362, 973, 980,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 981, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 918, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 974, 399, 400, 401,
	402, 856, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 891, 892, 894, 895, 416,
	422, 423, 424, 948, 425, 405, 406, 426, 427, 975,
	428, 429, 913, 893, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 959, 437, 438, 439, 982, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 889,
	0, 451, 932, 933, 934, 935, 0, 458, 0, 452,
	453, 983, 454, 984, 866, 455, 456, 457, 0, 459,
	460, 0, 850, 461, 462, 463, 464, 465, 467, 949,
	468, 0, 897, 469, 470, 471, 520, 929, 977, 0,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 847, 0, 0, 0, 0, 0, 845,
	0, 0, 0, 0, 0, 0, 843, 844, 1607, 0,
	0, 0, 0, 0, 0, 872, 0, 0, 0, 870,
	902, 860, 861, 862, 858, 859, 871, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 951,
	876, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	917, 896, 928, 886, 927, 926, 0, 233, 888, 887,
	236, 237, 238, 878, 950, 239, 987, 988, 486, 0,
	240, 957, 0, 940, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 960, 255, 256, 943, 941, 942, 947,
	945, 944, 946, 257, 258, 259, 260, 931, 262, 924,
	923, 849, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 922, 269, 0, 270, 0, 271, 272, 0, 273,
	855, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	978, 979, 867, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 921, 919, 920, 0, 289, 0, 290, 0,
	2188, 961, 291, 292, 0, 293, 985, 0, 877, 294,
	0, 295, 296, 297, 298, 952, 953, 956, 350, 963,
	299, 300, 0, 301, 302, 898, 0, 0, 217, 303,
	305, 312, 0, 962, 306, 910, 901, 912, 914, 915,
	916, 911, 0, 903, 0, 313, 964, 954, 965, 314,
	315, 316, 966, 936, 937, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 986, 967, 327,
	328, 968, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 890,
	341, 969, 344, 345, 347, 970, 346, 846, 218, 971,
	348, 868, 955, 349, 925, 351, 352, 0, 899, 354,
	900, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 972, 362, 973, 980, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 981, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 918, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 974, 399, 400, 401, 402, 856, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	891, 892, 894, 895, 416, 422, 423, 424, 948, 425,
	405, 406, 426, 427, 975, 428, 429, 913, 893, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 959, 437,
	438, 439, 982, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 889, 0, 451, 932, 933, 934,
	935, 0, 458, 0, 452, 453, 983, 454, 984, 866,
	455, 456, 457, 0, 459, 460, 0, 850, 461, 462,
	463, 464, 465, 467, 949, 468, 0, 897, 469, 470,
	471, 520, 929, 977, 0, 473, 472, 523, 0, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 847, 0,
	0, 0, 0, 0, 845, 0, 0, 0, 0, 0,
	0, 843, 844, 902, 860, 861, 862, 858, 859, 871,
	872, 0, 0, 0, 870, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 951, 876, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 917, 896, 928, 886, 927, 926, 0,
	233, 888, 887, 236, 237, 238, 878, 950, 239, 987,
	988, 486, 0, 240, 957, 0, 940, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 960, 255, 256, 943,
	941, 942, 947, 945, 944, 946, 257, 258, 259, 260,
	931, 262, 924, 923, 849, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 922, 269, 0, 270, 0, 271,
	272, 0, 273, 855, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 978, 979, 867, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 921, 919, 920, 0, 289,
	0, 290, 0, 0, 961, 291, 292, 0, 293, 985,
	0, 877, 294, 0, 295, 296, 297, 298, 952, 953,
	956, 350, 963, 299, 300, 0, 301, 302, 898, 0,
	0, 217, 303, 305, 312, 0, 962, 306, 910, 901,
	912, 914, 915, 916, 911, 0, 903, 0, 313, 964,
	954, 965, 314, 315, 316, 966, 936, 937, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	986, 967, 327, 328, 968, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 890, 341, 969, 344, 345, 347, 970, 346,
	846, 218, 971, 348, 868, 955, 349, 925, 351, 352,
	0, 899, 354, 900, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 972, 362, 973, 980, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	981, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 918, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 974, 399, 400, 401, 402, 856,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 891, 892, 894, 895, 416, 422, 423,
	424, 948, 425, 405, 406, 426, 427, 975, 428, 429,
	913, 893, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 959, 437, 438, 439, 982, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 889, 0, 451,
	932, 933, 934, 935, 0, 458, 0, 452, 453, 983,
	454, 984, 866, 455, 456, 457, 0, 459, 460, 0,
	850, 461, 462, 463, 464, 465, 467, 949, 468, 0,
	897, 469, 470, 471, 520, 929, 977, 0, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 847, 0, 0, 0, 0, 0, 845, 0, 0,
	0, 0, 0, 0, 843, 844, 0, 0, 0, 0,
	0, 0, 0, 872, 1543, 0, 2193, 870, 902, 860,
	861, 862, 858, 859, 871, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 951, 876, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 917, 896,
	928, 886, 927, 926, 0, 233, 888, 887, 236, 237,
	238, 878, 950, 239, 987, 988, 486, 0, 240, 957,
	0, 940, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 960, 255, 256, 943, 941, 942, 947, 945, 944,
	946, 257, 258, 259, 260, 931, 262, 924, 923, 849,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 922,
	269, 0, 270, 0, 271, 272, 0, 273, 855, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 978, 979,
	867, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	921, 919, 920, 0, 289, 0, 290, 0, 0, 961,
	291, 292, 0, 293, 985, 0, 877, 294, 0, 295,
	296, 297, 298, 952, 953, 956, 350, 963, 299, 300,
	0, 301, 302, 898, 0, 0, 217, 303, 305, 312,
	0, 962, 306, 910, 901, 912, 914, 915, 916, 911,
	0, 903, 0, 313, 964, 954, 965, 314, 315, 316,
	966, 936, 937, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 986, 967, 327, 328, 968,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 890, 341, 969,
	344, 345, 347, 970, 346, 846, 218, 971, 348, 868,
	955, 349, 925, 351, 352, 0, 899, 354, 900, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 972,
	362, 973, 980, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 981, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 918,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 974,
	399, 400, 401, 402, 856, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 891, 892,
	894, 895, 416, 422, 423, 424, 948, 425, 405, 406,
	426, 427, 975, 428, 429, 913, 893, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 959, 437, 438, 439,
	982, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 889, 0, 451, 932, 933, 934, 935, 0,
	458, 0, 452, 453, 983, 454, 984, 866, 455, 456,
	457, 0, 459, 460, 0, 850, 461, 462, 463, 464,
	465, 467, 949, 468, 0, 897, 469, 470, 471, 520,
	929, 977, 0, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 847, 0, 0, 0,
	0, 0, 845, 0, 0, 0, 0, 0, 0, 843,
	844, 0, 0, 0, 0, 0, 0, 0, 872, 0,
	0, 2191, 870, 902, 860, 861, 862, 858, 859, 871,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 951, 876, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 917, 896, 928, 886, 927, 926, 0,
	233, 888, 887, 236, 237, 238, 878, 950, 239, 987,
	988, 486, 0, 240, 957, 0, 940, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 960, 255, 256, 943,
	941, 942, 947, 945, 944, 946, 257, 258, 259, 260,
	931, 262, 924, 923, 849, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 922, 269, 0, 270, 0, 271,
	272, 0, 273, 855, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 978, 979, 867, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 921, 919, 920, 0, 289,
	0, 290, 0, 0, 961, 291, 292, 0, 293, 985,
	0, 877, 294, 0, 295, 296, 297, 298, 952, 953,
	956, 350, 963, 299, 300, 0, 301, 302, 898, 0,
	0, 217, 303, 305, 312, 0, 962, 306, 910, 901,
	912, 914, 915, 916, 911, 0, 903, 0, 313, 964,
	954, 965, 314, 315, 316, 966, 936, 937, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	986, 967, 327, 328, 968, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 890, 341, 969, 344, 345, 347, 970, 346,
	846, 218, 971, 348, 868, 955, 349, 925, 351, 352,
	0, 899, 354, 900, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 972, 362, 973, 980, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	981, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 918, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 974, 399, 400, 401, 402, 856,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 891, 892, 894, 895, 416, 422, 423,
	424, 948, 425, 405, 406, 426, 427, 975, 428, 429,
	913, 893, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 959, 437, 438, 439, 982, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 889, 0, 451,
	932, 933, 934, 935, 0, 458, 0, 452, 453, 983,
	454, 984, 866, 455, 456, 457, 0, 459, 460, 0,
	850, 461, 462, 463, 464, 465, 467, 949, 468, 0,
	897, 469, 470, 471, 520, 929, 977, 0, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 847, 0, 0, 0, 0, 0, 845, 0, 0,
	0, 0, 0, 0, 843, 844, 0, 0, 0, 0,
	0, 0, 0, 872, 0, 0, 2179, 870, 902, 860,
	861, 862, 858, 859, 871, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 951, 876, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 917, 896,
	928, 886, 927, 926, 0, 233, 888, 887, 236, 237,
	238, 878, 950, 239, 987, 988, 486, 0, 240, 957,
	0, 940, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 960, 255, 256, 943, 941, 942, 947, 945, 944,
	946, 257, 258, 259, 260, 931, 262, 924, 923, 849,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 922,
	269, 0, 270, 0, 271, 272, 0, 273, 855, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 978, 979,
	867, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	921, 919, 920, 0, 289, 0, 290, 0, 0, 961,
	291, 292, 0, 293, 985, 0, 877, 294, 0, 295,
	296, 297, 298, 952, 953, 956, 350, 963, 299, 300,
	0, 301, 302, 898, 0, 0, 217, 303, 305, 312,
	0, 962, 306, 910, 901, 912, 914, 915, 916, 911,
	0, 903, 0, 313, 964, 954, 965, 314, 315, 316,
	966, 936, 937, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 986, 967, 327, 328, 968,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 890, 341, 969,
	344, 345, 347, 970, 346, 846, 218, 971, 348, 868,
	955, 349, 925, 351, 352, 0, 899, 354, 900, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 972,
	362, 973, 980, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 981, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 918,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 974,
	399, 400, 401, 402, 856, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 891, 892,
	894, 895, 416, 422, 423, 424, 948, 425, 405, 406,
	426, 427, 975, 428, 429, 913, 893, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 959, 437, 438, 439,
	982, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 889, 0, 451, 932, 933, 934, 935, 0,
	458, 0, 452, 453, 983, 454, 984, 866, 455, 456,
	457, 0, 459, 460, 0, 850, 461, 462, 463, 464,
	465, 467, 949, 468, 0, 897, 469, 470, 471, 520,
	929, 977, 0, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 847, 0, 0, 0,
	0, 0, 845, 0, 0, 0, 0, 0, 0, 843,
	844, 0, 0, 0, 0, 0, 0, 0, 872, 0,
	0, 2168, 870, 902, 860, 861, 862, 858, 859, 871,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 951, 876, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 917, 896, 928, 886, 927, 926, 0,
	233, 888, 887, 236, 237, 238, 878, 950, 239, 987,
	988, 486, 0, 240, 957, 0, 940, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 960, 255, 256, 943,
	941, 942, 947, 945, 944, 946, 257, 258, 259, 260,
	931, 262, 924, 923, 849, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 922, 269, 0, 270, 0, 271,
	272, 0, 273, 855, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 978, 979, 867, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 921, 919, 920, 0, 289,
	0, 290, 0, 0, 961, 291, 292, 0, 293, 985,
	0, 877, 294, 0, 295, 296, 297, 298, 952, 953,
	956, 350, 963, 299, 300, 0, 301, 302, 898, 0,
	0, 217, 303, 305, 312, 0, 962, 306, 910, 901,
	912, 914, 915, 916, 911, 0, 903, 0, 313, 964,
	954, 965, 314, 315, 316, 966, 936, 937, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	986, 967, 327, 328, 968, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 890, 341, 969, 344, 345, 347, 970, 346,
	846, 218, 971, 348, 868, 955, 349, 925, 351, 352,
	0, 899, 354, 900, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 972, 362, 973, 980, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	981, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 918, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 974, 399, 400, 401, 402, 856,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 891, 892, 894, 895, 416, 422, 423,
	424, 948, 425, 405, 406, 426, 427, 975, 428, 429,
	913, 893, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 959, 437, 438, 439, 982, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 889, 0, 451,
	932, 933, 934, 935, 0, 458, 0, 452, 453, 983,
	454, 984, 866, 455, 456, 457, 0, 459, 460, 0,
	850, 461, 462, 463, 464, 465, 467, 949, 468, 0,
	897, 469, 470, 471, 520, 929, 977, 0, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 847, 0, 0, 0, 0, 0, 845, 0, 0,
	0, 0, 0, 0, 843, 844, 0, 0, 0, 0,
	0, 0, 0, 872, 0, 0, 2166, 870, 2157, 2164,
	861, 862, 858, 859, 871, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 951, 876, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 917, 896,
	928, 886, 927, 926, 0, 233, 888, 887, 236, 237,
	238, 878, 950, 239, 987, 988, 486, 0, 240, 957,
	0, 940, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 960, 255, 256, 943, 941, 942, 947, 945, 944,
	946, 257, 258, 259, 260, 931, 2160, 924, 923, 849,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 922,
	269, 0, 270, 0, 271, 272, 0, 273, 855, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 978, 979,
	867, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	921, 919, 920, 0, 289, 0, 290, 0, 0, 961,
	291, 292, 0, 293, 985, 0, 877, 294, 0, 295,
	296, 297, 2161, 952, 953, 956, 350, 963, 299, 300,
	0, 301, 302, 898, 0, 0, 217, 303, 305, 312,
	0, 962, 306, 910, 901, 912, 914, 915, 916, 911,
	0, 903, 0, 313, 964, 954, 965, 314, 315, 316,
	966, 936, 937, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 986, 967, 327, 328, 968,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 2162, 2159, 342, 890, 341, 969,
	344, 345, 347, 970, 346, 846, 218, 971, 348, 868,
	955, 349, 925, 351, 352, 0, 899, 354, 900, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 972,
	362, 973, 980, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 981, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 918,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 974,
	399, 400, 401, 402, 856, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 2163, 0, 420, 421, 891, 892,
	894, 895, 416, 422, 423, 424, 948, 425, 405, 406,
	426, 427, 975, 428, 429, 913, 893, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 959, 437, 438, 439,
	982, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 889, 0, 451, 932, 933, 934, 935, 0,
	458, 0, 452, 453, 983, 454, 984, 866, 455, 456,
	457, 0, 459, 460, 0, 850, 461, 462, 463, 464,
	465, 467, 949, 468, 0, 897, 469, 470, 471, 520,
	929, 977, 0, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 2158, 478, 847, 0, 0, 0,
	0, 0, 845, 0, 0, 0, 0, 0, 0, 843,
	844, 0, 0, 0, 0, 0, 0, 0, 872, 0,
	0, 2154, 870, 2157, 2164, 861, 862, 858, 859, 871,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 951, 876, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 917, 896, 928, 886, 927, 926, 0,
	233, 888, 887, 236, 237, 238, 878, 950, 239, 987,
	988, 486, 0, 240, 957, 0, 940, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 960, 255, 256, 943,
	941, 942, 947, 945, 944, 946, 257, 258, 259, 260,
	931, 2160, 924, 923, 849, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 922, 269, 0, 270, 0, 271,
	272, 0, 273, 855, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 978, 979, 867, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 921, 919, 920, 0, 289,
	0, 290, 0, 0, 961, 291, 292, 0, 293, 985,
	0, 877, 294, 0, 295, 296, 297, 2161, 952, 953,
	956, 350, 963, 299, 300, 0, 301, 302, 898, 0,
	0, 217, 303, 305, 312, 0, 962, 306, 910, 901,
	912, 914, 915, 916, 911, 0, 903, 0, 313, 964,
	954, 965, 314, 315, 316, 966, 936, 937, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	986, 967, 327, 328, 968, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 2162,
	2159, 342, 890, 341, 969, 344, 345, 347, 970, 346,
	846, 218, 971, 348, 868, 955, 349, 925, 351, 352,
	0, 899, 354, 900, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 972, 362, 973, 980, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	981, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 918, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 974, 399, 400, 401, 402, 856,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 2163,
	0, 420, 421, 891, 892, 894, 895, 416, 422, 423,
	424, 948, 425, 405, 406, 426, 427, 975, 428, 429,
	913, 893, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 959, 437, 438, 439, 982, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 889, 0, 451,
	932, 933, 934, 935, 0, 458, 0, 452, 453, 983,
	454, 984, 866, 455, 456, 457, 0, 459, 460, 0,
	850, 461, 462, 463, 464, 465, 467, 949, 468, 0,
	897, 469, 470, 471, 520, 929, 977, 0, 473, 472,
	523, 0, 0, 0, 0, 474, 475, 524, 476, 2158,
	478, 847, 0, 0, 0, 0, 0, 845, 0, 0,
	0, 0, 0, 0, 843, 844, 902, 860, 861, 862,
	858, 859, 871, 872, 0, 0, 0, 870, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 951, 876, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 917, 896, 928, 886,
	927, 926, 0, 233, 888, 887, 236, 237, 238, 878,
	950, 239, 987, 988, 486, 0, 240, 957, 0, 940,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 943, 941, 942, 947, 945, 944, 946, 257,
	258, 259, 260, 931, 262, 924, 923, 849, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 922, 269, 0,
	270, 0, 271, 272, 0, 273, 855, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 978, 979, 867, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 921, 919,
	920, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 985, 0, 877, 294, 0, 295, 296, 297,
	298, 952, 953, 956, 350, 963, 299, 300, 0, 301,
	302, 898, 0, 0, 217, 303, 305, 312, 0, 962,
	306, 910, 901, 912, 914, 915, 916, 911, 0, 903,
	0, 313, 964, 954, 965, 314, 315, 316, 966, 936,
	937, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 986, 967, 327, 328, 968, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 890, 341, 969, 344, 345,
	347, 970, 346, 846, 218, 971, 348, 868, 955, 349,
	925, 351, 352, 0, 899, 354, 900, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	980, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 981, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 918, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 856, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 891, 892, 894, 895,
	416, 422, 423, 424, 948, 425, 405, 406, 426, 427,
	975, 428, 429, 913, 893, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 959, 437, 438, 439, 982, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	889, 0, 451, 932, 933, 934, 935, 0, 458, 0,
	452, 453, 983, 454, 984, 866, 455, 456, 457, 0,
	459, 460, 0, 850, 461, 462, 463, 464, 465, 467,
	949, 468, 0, 897, 469, 470, 471, 520, 929, 977,
	0, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 847, 0, 0, 0, 0, 0,
	845, 0, 0, 0, 0, 0, 0, 843, 844, 0,
	0, 0, 0, 0, 1551, 0, 872, 0, 0, 0,
	870, 902, 860, 861, 862, 858, 859, 871, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 1995, 224, 0, 0, 0, 0, 0,
	951, 876, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 917, 896, 928, 886, 927, 926, 0, 233, 888,
	887, 236, 237, 238, 878, 950, 239, 987, 988, 486,
	0, 240, 957, 0, 940, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 256, 943, 941, 942,
	947, 945, 944, 946, 257, 258, 259, 260, 931, 262,
	924, 923, 849, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 922, 269, 0, 270, 0, 271, 272, 0,
	273, 855, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 978, 979, 867, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 921, 919, 920, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 985, 0, 877,
	294, 0, 295, 296, 297, 298, 952, 953, 956, 350,
	963, 299, 300, 0, 301, 302, 898, 0, 0, 217,
	303, 305, 312, 0, 962, 306, 910, 901, 912, 914,
	915, 916, 911, 0, 903, 0, 313, 964, 954, 965,
	314, 315, 316, 966, 936, 937, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 986, 967,
	327, 328, 968, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	890, 341, 969, 344, 345, 347, 970, 346, 846, 218,
	971, 348, 868, 955, 349, 925, 351, 352, 0, 899,
	354, 900, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 980, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 981, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 918, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 856, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 891, 892, 894, 895, 416, 422, 423, 424, 948,
	425, 405, 406, 426, 427, 975, 428, 429, 913, 893,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 959,
	437, 438, 439, 982, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 889, 0, 451, 932, 933,
	934, 935, 0, 458, 0, 452, 453, 983, 454, 984,
	866, 455, 456, 457, 0, 459, 460, 0, 850, 461,
	462, 463, 464, 465, 467, 949, 468, 0, 897, 469,
	470, 471, 520, 929, 977, 0, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 847,
	0, 0, 0, 0, 0, 845, 0, 0, 0, 0,
	0, 0, 843, 844, 0, 0, 0, 0, 0, 0,
	0, 872, 0, 0, 1223, 870, 902, 860, 861, 862,
	858, 859, 871, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 951, 876, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 917, 896, 928, 886,
	927, 926, 0, 233, 888, 887, 236, 237, 238, 878,
	950, 239, 987, 988, 486, 0, 240, 957, 0, 940,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 943, 941, 942, 947, 945, 944, 946, 257,
	258, 259, 260, 931, 262, 924, 923, 849, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 922, 269, 0,
	270, 0, 271, 272, 0, 273, 855, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 978, 979, 867, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 921, 919,
	920, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 985, 0, 877, 294, 0, 295, 296, 297,
	298, 1222, 953, 956, 350, 963, 299, 300, 0, 301,
	302, 898, 0, 0, 217, 303, 305, 312, 0, 962,
	306, 910, 901, 912, 914, 915, 916, 911, 0, 903,
	0, 313, 964, 954, 965, 314, 315, 316, 966, 936,
	937, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 986, 967, 327, 328, 968, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 890, 341, 969, 344, 345,
	347, 970, 346, 846, 218, 971, 348, 868, 955, 349,
	925, 351, 352, 0, 899, 354, 900, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	980, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 981, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 918, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 856, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 891, 892, 894, 895,
	416, 422, 423, 424, 948, 425, 405, 406, 426, 427,
	975, 428, 429, 913, 893, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 959, 437, 438, 439, 982, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	889, 0, 451, 932, 933, 934, 935, 0, 458, 0,
	452, 453, 983, 454, 984, 866, 455, 456, 457, 0,
	459, 460, 0, 850, 461, 462, 463, 464, 465, 467,
	949, 468, 0, 897, 469, 470, 471, 520, 929, 977,
	0, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 847, 0, 0, 0, 0, 0,
	845, 0, 0, 0, 0, 0, 0, 843, 844, 0,
	0, 0, 0, 0, 0, 0, 872, 0, 0, 1217,
	870, 902, 860, 861, 862, 858, 859, 871, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	951, 876, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 917, 896, 928, 886, 927, 926, 0, 233, 888,
	887, 236, 237, 238, 878, 950, 239, 987, 988, 486,
	0, 240, 957, 0, 940, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 256, 943, 941, 942,
	947, 945, 944, 946, 257, 258, 259, 260, 931, 262,
	924, 923, 849, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 922, 269, 0, 270, 0, 271, 272, 0,
	273, 855, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 978, 979, 867, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 921, 919, 920, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 985, 0, 877,
	294, 0, 295, 296, 297, 298, 1216, 953, 956, 350,
	963, 299, 300, 0, 301, 302, 898, 0, 0, 217,
	303, 305, 312, 0, 962, 306, 910, 901, 912, 914,
	915, 916, 911, 0, 903, 0, 313, 964, 954, 965,
	314, 315, 316, 966, 936, 937, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 986, 967,
	327, 328, 968, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	890, 341, 969, 344, 345, 347, 970, 346, 846, 218,
	971, 348, 868, 955, 349, 925, 351, 352, 0, 899,
	354, 900, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 980, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 981, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 918, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 856, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 891, 892, 894, 895, 416, 422, 423, 424, 948,
	425, 405, 406, 426, 427, 975, 428, 429, 913, 893,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 959,
	437, 438, 439, 982, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 889, 0, 451, 932, 933,
	934, 935, 0, 458, 0, 452, 453, 983, 454, 984,
	866, 455, 456, 457, 0, 459, 460, 0, 850, 461,
	462, 463, 464, 465, 467, 949, 468, 0, 897, 469,
	470, 471, 520, 929, 977, 0, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 847,
	0, 0, 0, 0, 0, 845, 0, 0, 0, 0,
	0, 0, 843, 844, 0, 0, 0, 0, 0, 0,
	0, 872, 0, 0, 1212, 870, 902, 860, 861, 862,
	858, 859, 871, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 951, 876, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 917, 896, 928, 886,
	927, 926, 0, 233, 888, 887, 236, 237, 238, 878,
	950, 239, 987, 988, 486, 0, 240, 957, 0, 940,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 943, 941, 942, 947, 945, 944, 946, 257,
	258, 259, 260, 931, 262, 924, 923, 849, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 922, 269, 0,
	270, 0, 271, 272, 0, 273, 855, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 978, 979, 867, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 921, 919,
	920, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 985, 0, 877, 294, 0, 295, 296, 297,
	298, 952, 953, 956, 350, 963, 299, 300, 0, 301,
	302, 898, 0, 0, 217, 303, 305, 312, 0, 962,
	306, 910, 901, 912, 914, 915, 916, 911, 0, 903,
	0, 313, 964, 954, 965, 314, 315, 316, 966, 936,
	937, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 986, 967, 327, 328, 968, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 890, 341, 969, 344, 345,
	347, 970, 346, 846, 218, 971, 348, 868, 955, 349,
	925, 351, 352, 0, 899, 354, 900, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	980, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 981, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 918, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 856, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 891, 892, 894, 895,
	416, 422, 423, 424, 948, 425, 405, 406, 426, 427,
	975, 428, 429, 913, 893, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 959, 437, 438, 439, 982, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	889, 0, 451, 932, 933, 934, 935, 0, 458, 0,
	452, 453, 983, 454, 984, 866, 455, 456, 457, 0,
	459, 460, 0, 850, 461, 462, 463, 464, 465, 467,
	949, 468, 0, 897, 469, 470, 471, 520, 929, 977,
	0, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 847, 0, 0, 0, 0, 0,
	845, 0, 0, 0, 0, 0, 0, 843, 844, 902,
	860, 861, 862, 858, 859, 871, 872, 0, 0, 0,
	870, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 951, 876,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 917,
	896, 928, 886, 927, 926, 0, 233, 888, 887, 236,
	237, 238, 878, 950, 239, 987, 988, 486, 0, 240,
	957, 0, 940, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 960, 255, 256, 943, 941, 942, 947, 945,
	944, 946, 257, 258, 259, 260, 931, 262, 924, 923,
	849, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	922, 269, 0, 270, 0, 271, 272, 0, 273, 855,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 978,
	979, 867, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 921, 919, 920, 0, 289, 0, 290, 0, 0,
	961, 291, 292, 0, 293, 985, 0, 877, 294, 0,
	295, 296, 297, 298, 952, 953, 956, 350, 963, 299,
	300, 0, 301, 302, 898, 0, 0, 217, 303, 305,
	312, 0, 962, 306, 910, 901, 912, 914, 915, 916,
	911, 0, 903, 0, 313, 964, 954, 965, 314, 315,
	316, 966, 936, 937, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 986, 967, 327, 328,
	968, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 890, 341,
	969, 344, 345, 347, 970, 346, 846, 218, 971, 348,
	868, 955, 349, 925, 351, 352, 0, 899, 354, 900,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	972, 362, 973, 980, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 981, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	918, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	974, 399, 400, 401, 402, 856, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 891,
	892, 894, 895, 416, 422, 423, 424, 948, 425, 405,
	406, 426, 427, 975, 428, 429, 913, 893, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 959, 437, 438,
	439, 982, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 889, 0, 451, 932, 933, 934, 935,
	0, 458, 0, 452, 453, 983, 454, 984, 866, 455,
	456, 457, 0, 459, 460, 0, 850, 461, 462, 463,
	464, 465, 467, 949, 468, 0, 897, 469, 470, 471,
	520, 929, 977, 0, 473, 472, 523, 0, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 847, 0, 0,
	0, 0, 0, 845, 0, 0, 0, 0, 0, 0,
	843, 844, 902, 860, 861, 862, 858, 859, 871, 872,
	0, 0, 0, 870, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 951, 876, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 917, 896, 928, 886, 927, 926, 0, 233,
	888, 887, 236, 237, 238, 878, 950, 239, 987, 988,
	486, 0, 240, 957, 0, 940, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 960, 255, 3558, 943, 941,
	942, 947, 945, 944, 946, 257, 258, 259, 260, 931,
	262, 924, 923, 849, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 922, 269, 0, 270, 0, 271, 272,
	0, 273, 855, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 978, 979, 867, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 921, 919, 920, 0, 289, 0,
	290, 0, 0, 961, 291, 292, 0, 293, 985, 0,
	877, 294, 0, 295, 296, 297, 298, 952, 953, 956,
	350, 963, 299, 300, 0, 301, 302, 898, 0, 0,
	217, 303, 305, 312, 0, 962, 306, 910, 901, 912,
	914, 915, 916, 911, 0, 903, 0, 313, 964, 954,
	965, 314, 315, 316, 966, 936, 937, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 986,
	967, 327, 328, 968, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 890, 341, 969, 344, 345, 347, 970, 346, 846,
	218, 971, 348, 868, 955, 349, 925, 351, 352, 0,
	899, 354, 900, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 972, 362, 973, 980, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 981,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 918, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 974, 399, 400, 401, 402, 856, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 891, 892, 894, 895, 416, 422, 423, 424,
	948, 425, 405, 406, 426, 427, 975, 428, 429, 913,
	893, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	959, 437, 438, 439, 982, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 889, 0, 451, 932,
	933, 934, 935, 0, 458, 0, 452, 453, 983, 454,
	984, 866, 455, 456, 457, 0, 3557, 460, 0, 850,
	461, 462, 463, 464, 465, 467, 949, 468, 0, 897,
	469, 470, 471, 520, 929, 977, 0, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	847, 0, 0, 0, 0, 0, 845, 0, 0, 0,
	0, 0, 0, 843, 844, 902, 860, 861, 862, 858,
	859, 871, 872, 0, 0, 0, 870, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 951, 876, 0, 0, 0, 225,
	227, 226, 228, 229, 3556, 917, 896, 928, 886, 927,
	926, 0, 233, 888, 887, 236, 237, 238, 878, 950,
	239, 987, 988, 486, 0, 240, 957, 0, 940, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 960, 255,
	3558, 943, 941, 942, 947, 945, 944, 946, 257, 258,
	259, 260, 931, 262, 924, 923, 849, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 922, 269, 0, 270,
	0, 271, 272, 0, 273, 855, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 978, 979, 867, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 921, 919, 920,
	0, 289, 0, 290, 0, 0, 961, 291, 292, 0,
	293, 985, 0, 877, 294, 0, 295, 296, 297, 298,
	952, 953, 956, 350, 963, 299, 300, 0, 301, 302,
	898, 0, 0, 217, 303, 305, 312, 0, 962, 306,
	910, 901, 912, 914, 915, 916, 911, 0, 903, 0,
	313, 964, 954, 965, 314, 315, 316, 966, 936, 937,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 986, 967, 327, 328, 968, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 890, 341, 969, 344, 345, 347,
	970, 346, 846, 218, 971, 348, 868, 955, 349, 925,
	351, 352, 0, 899, 354, 900, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 972, 362, 973, 980,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 981, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 918, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 974, 399, 400, 401,
	402, 856, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 891, 892, 894, 895, 416,
	422, 423, 424, 948, 425, 405, 406, 426, 427, 975,
	428, 429, 913, 893, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 959, 437, 438, 439, 982, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 889,
	0, 451, 932, 933, 934, 935, 0, 458, 0, 452,
	453, 983, 454, 984, 866, 455, 456, 457, 0, 3557,
	460, 0, 850, 461, 462, 463, 464, 465, 467, 949,
	468, 0, 897, 469, 470, 471, 520, 929, 977, 0,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 847, 0, 0, 0, 0, 0, 845,
	0, 0, 0, 0, 0, 0, 843, 844, 902, 860,
	861, 862, 858, 859, 871, 872, 0, 0, 0, 870,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 951, 876, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 917, 896,
	928, 886, 927, 926, 0, 233, 888, 887, 236, 237,
	238, 878, 950, 239, 987, 988, 486, 0, 240, 957,
	0, 940, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 960, 255, 256, 943, 941, 942, 947, 945, 944,
	946, 257, 258, 259, 260, 931, 262, 924, 923, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 922,
	269, 0, 270, 0, 271, 272, 0, 273, 855, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 978, 979,
	867, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	921, 919, 920, 0, 289, 0, 290, 0, 0, 961,
	291, 292, 0, 293, 985, 0, 877, 294, 0, 295,
	296, 297, 298, 952, 953, 956, 350, 963, 299, 300,
	0, 301, 302, 898, 0, 0, 217, 303, 305, 312,
	0, 962, 306, 910, 901, 912, 914, 915, 916, 911,
	0, 903, 0, 313, 964, 954, 965, 314, 315, 316,
	966, 936, 937, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 986, 967, 327, 328, 968,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 890, 341, 969,
	344, 345, 347, 970, 346, 0, 218, 971, 348, 868,
	955, 349, 925, 351, 352, 0, 899, 354, 900, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 972,
	362, 973, 980, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 981, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 918,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 974,
	399, 400, 401, 402, 856, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 891, 892,
	894, 895, 416, 422, 423, 424, 948, 425, 405, 406,
	426, 427, 975, 428, 429, 913, 893, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 959, 437, 438, 439,
	982, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 889, 0, 451, 932, 933, 934, 935, 0,
	458, 0, 452, 453, 983, 454, 984, 866, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 949, 468, 0, 897, 469, 470, 471, 520,
	929, 977, 0, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 2176, 0, 0, 0, 0, 0, 0, 2174,
	2175, 902, 860, 861, 862, 858, 859, 871, 872, 0,
	0, 0, 870, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	951, 876, 0, 0, 0, 225, 227, 226, 228, 229,
	0, 917, 896, 928, 886, 927, 926, 0, 233, 888,
	887, 236, 237, 238, 878, 950, 239, 987, 988, 486,
	0, 240, 957, 0, 940, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 3558, 943, 941, 942,
	947, 945, 944, 946, 257, 258, 259, 260, 931, 262,
	924, 923, 849, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 922, 269, 0, 270, 0, 271, 272, 0,
	273, 855, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 978, 979, 867, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 921, 919, 920, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 985, 0, 877,
	294, 0, 295, 296, 297, 298, 952, 953, 956, 350,
	0, 299, 300, 0, 301, 302, 898, 0, 0, 217,
	303, 305, 312, 0, 962, 306, 910, 901, 912, 914,
	915, 916, 911, 0, 903, 0, 313, 0, 954, 0,
	314, 315, 316, 966, 936, 937, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 986, 967,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	890, 341, 969, 344, 345, 347, 970, 346, 846, 218,
	0, 348, 868, 955, 349, 925, 351, 352, 0, 899,
	354, 900, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 980, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 981, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 918, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 856, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 891, 892, 894, 895, 416, 422, 423, 424, 948,
	425, 405, 406, 426, 427, 0, 428, 429, 913, 893,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 959,
	437, 438, 439, 982, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 889, 0, 451, 932, 933,
	934, 935, 0, 458, 0, 452, 453, 983, 454, 984,
	866, 455, 456, 457, 0, 3557, 460, 0, 850, 461,
	462, 463, 464, 465, 467, 949, 468, 0, 897, 469,
	470, 471, 520, 929, 977, 0, 473, 472, 523, 0,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 836, 0, 1025,
	0, 0, 843, 844, 0, 0, 0, 0, 0, 0,
	0, 872, 0, 0, 0, 870, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 951, 0,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 950, 239, 484, 485, 486, 0, 240,
	957, 0, 940, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 960, 255, 256, 943, 941, 942, 947, 945,
	944, 946, 257, 258, 259, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 978,
	979, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	961, 291, 292, 0, 293, 985, 0, 495, 294, 0,
	295, 296, 297, 298, 952, 953, 956, 350, 963, 299,
	300, 0, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 0, 962, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 964, 954, 965, 314, 315,
	316, 966, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 1011, 325, 324, 0, 326, 986, 967, 327, 328,
	968, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	969, 344, 345, 347, 970, 346, 0, 218, 971, 348,
	0, 955, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 1017, 357, 358, 359, 0, 0, 360, 361, 506,
	972, 362, 973, 980, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 981, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	974, 399, 400, 401, 402, 511, 1019, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 182, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 948, 425, 405,
	406, 426, 427, 975, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 982, 0, 443, 444, 442, 184, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 983, 454, 984, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 949, 468, 0, 466, 469, 470, 471,
	1335, 521, 522, 0, 473, 472, 523, 1025, 0, 0,
	176, 474, 475, 524, 476, 477, 478, 0, 177, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 951, 1015, 0, 1631,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 950, 239, 484, 485, 486, 0, 240, 957, 0,
	940, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	960, 255, 256, 943, 941, 942, 947, 945, 944, 946,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 978, 979, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 961, 291,
	292, 0, 293, 985, 0, 495, 294, 0, 295, 296,
	297, 298, 952, 953, 956, 350, 963, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	962, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 964, 954, 965, 314, 315, 316, 966,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 1011,
	325, 324, 0, 326, 986, 967, 327, 328, 968, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 969, 344,
	345, 347, 970, 346, 0, 218, 971, 348, 0, 955,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 1017,
	357, 358, 359, 0, 0, 360, 361, 506, 972, 362,
	973, 980, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 981, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 974, 399,
	400, 401, 402, 511, 1019, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 182, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 948, 425, 405, 406, 426,
	427, 975, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 982,
	0, 443, 444, 442, 184, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 983, 454, 984, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 949, 468, 0, 466, 469, 470, 471, 1335, 521,
	522, 0, 473, 472, 523, 2644, 0, 1025, 176, 474,
	475, 524, 476, 477, 478, 0, 177, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 1015, 951, 1631, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 950, 239, 484, 485, 486, 0, 240, 957, 0,
	940, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	960, 255, 256, 943, 941, 942, 947, 945, 944, 946,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 978, 979, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 961, 291,
	292, 0, 293, 985, 0, 495, 294, 0, 295, 296,
	297, 298, 952, 953, 956, 350, 963, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	962, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 964, 954, 965, 314, 315, 316, 966,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 1011,
	325, 324, 0, 326, 986, 967, 327, 328, 968, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 969, 344,
	345, 347, 970, 346, 0, 218, 971, 348, 0, 955,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 1017,
	357, 358, 359, 0, 0, 360, 361, 506, 972, 362,
	973, 980, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 981, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 974, 399,
	400, 401, 402, 511, 1019, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 948, 425, 405, 406, 426,
	427, 975, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 982,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 983, 454, 984, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 949, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 0, 473, 472, 523, 1007, 0, 1025, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 1015, 951, 1013, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 950, 239, 484, 485, 486, 0, 240, 957, 0,
	940, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	960, 255, 256, 943, 941, 942, 947, 945, 944, 946,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 978, 979, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 961, 291,
	292, 0, 293, 985, 0, 495, 294, 0, 295, 296,
	297, 298, 952, 953, 956, 350, 963, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	962, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 964, 954, 965, 314, 315, 316, 966,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 1011,
	325, 324, 0, 326, 986, 967, 327, 328, 968, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 969, 344,
	345, 347, 970, 346, 0, 218, 971, 348, 0, 955,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 1017,
	357, 358, 359, 0, 0, 360, 361, 506, 972, 362,
	973, 980, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 981, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 974, 399,
	400, 401, 402, 511, 1019, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 948, 425, 405, 406, 426,
	427, 975, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 982,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 983, 454, 984, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 949, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 0, 473, 472, 523, 1025, 0, 0, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 951, 1015, 0, 1013, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 950,
	239, 484, 485, 486, 0, 240, 957, 0, 940, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 960, 255,
	256, 943, 941, 942, 947, 945, 944, 946, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 978, 979, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 961, 291, 292, 0,
	293, 985, 0, 495, 294, 0, 295, 296, 297, 298,
	952, 953, 956, 350, 963, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 962, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 964, 954, 965, 314, 315, 316, 966, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 1011, 325, 324,
	0, 326, 986, 967, 327, 328, 968, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 969, 344, 345, 347,
	970, 346, 0, 218, 971, 348, 0, 955, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 1017, 357, 358,
	359, 0, 0, 360, 361, 506, 972, 362, 973, 980,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 981, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 974, 399, 400, 401,
	402, 511, 1019, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 948, 425, 405, 406, 426, 427, 975,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 982, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 983, 454, 984, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 949,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 1025, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 951, 1015, 0, 1013, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 950, 239, 484,
	485, 486, 0, 240, 957, 0, 940, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 960, 255, 256, 943,
	941, 942, 947, 945, 944, 946, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 978, 979, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 961, 291, 292, 0, 293, 985,
	0, 495, 294, 0, 295, 296, 297, 298, 952, 953,
	956, 350, 963, 299, 300, 0, 301, 302, 304, 0,
	0, 217, 303, 305, 312, 0, 962, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 964,
	954, 965, 314, 315, 316, 966, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	986, 967, 327, 328, 968, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 969, 344, 345, 347, 970, 346,
	0, 218, 971, 348, 0, 955, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 972, 362, 973, 980, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	981, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 974, 399, 400, 401, 402, 511,
	1019, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 948, 425, 405, 406, 426, 427, 975, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 982, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 983,
	454, 984, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 949, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 836, 0, 1184, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 1534, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 1088, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 960, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 961, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 963, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 962, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 964,
	502, 965, 314, 315, 316, 966, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 967, 327, 328, 968, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 969, 344, 345, 347, 970, 346,
	0, 0, 971, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 972, 362, 973, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 974, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	182, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 975, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	184, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 1335, 521, 522, 0, 473, 472,
	523, 1332, 0, 1184, 176, 474, 475, 524, 476, 477,
	478, 0, 177, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 151, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 1088, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 960, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 961, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 963, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 962, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 964,
	502, 965, 314, 315, 316, 966, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 967, 327, 328, 968, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 969, 344, 345, 347, 970, 346,
	0, 0, 971, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 972, 362, 973, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 974, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	182, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 975, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	184, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 1335, 521, 522, 0, 473, 472,
	523, 0, 0, 0, 176, 474, 475, 524, 476, 477,
	478, 0, 177, 0, 0, 0, 0, 1184, 1183, 0,
	0, 0, 0, 1181, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 151, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	1088, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	960, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 961, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 496, 497, 498, 350, 963, 299, 300, 0,
	301, 302, 304, 0, 0, 0, 303, 305, 312, 0,
	962, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 964, 502, 965, 314, 315, 316, 966,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 967, 327, 328, 968, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 969, 344,
	345, 347, 970, 346, 0, 0, 971, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 972, 362,
	973, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 974, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 975, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 0, 473, 472, 523, 0, 0, 0, 0, 474,
	475, 524, 476, 477, 478, 1184, 1183, 0, 0, 0,
	0, 1181, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 1202, 224, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 1088, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 960, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 961, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 963, 299, 300, 0, 301, 302,
	304, 0, 0, 0, 303, 305, 312, 0, 962, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 964, 502, 965, 314, 315, 316, 966, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 967, 327, 328, 968, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 969, 344, 345, 347,
	970, 346, 0, 0, 971, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 972, 362, 973, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 974, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 975,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 0, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 1184, 1183, 0, 0, 0, 0, 1181,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 2845, 224, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 1088, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 960, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 216, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 961, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 963, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 962, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 964,
	502, 965, 314, 315, 316, 966, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 967, 327, 328, 968, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 969, 344, 345, 347, 970, 346,
	0, 0, 971, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 972, 362, 973, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 974, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 975, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 1025, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	951, 0, 0, 1341, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 950, 239, 484, 485, 486,
	0, 240, 957, 0, 940, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 960, 255, 256, 943, 941, 942,
	947, 945, 944, 946, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 978, 979, 0, 216, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 961, 291, 292, 0, 293, 985, 0, 495,
	294, 0, 295, 296, 297, 298, 952, 953, 956, 350,
	963, 299, 300, 0, 301, 302, 304, 0, 0, 217,
	303, 305, 312, 0, 962, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 964, 954, 965,
	314, 315, 316, 966, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 986, 967,
	327, 328, 968, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 969, 344, 345, 347, 970, 346, 0, 218,
	971, 348, 0, 955, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 972, 362, 973, 980, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 981, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 974, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 948,
	425, 405, 406, 426, 427, 975, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 982, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 983, 454, 984,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 949, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 0, 473, 472, 523, 836,
	0, 213, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 0,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 182, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 184, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 1335, 521, 522, 0, 473, 472, 523, 213,
	0, 0, 176, 474, 475, 524, 476, 477, 478, 0,
	177, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 479, 0,
	0, 151, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 240,
	487, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 496, 497, 498, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 0, 0, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 0, 502, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 0, 346, 0, 218, 0, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	0, 362, 0, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 425, 405,
	406, 426, 427, 0, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 0, 473, 472, 523, 1282, 0, 213,
	0, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 479, 1645,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 240,
	487, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 496, 497, 498, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 0, 0, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 0, 502, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 0, 346, 0, 218, 0, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	0, 362, 0, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 425, 405,
	406, 426, 427, 0, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 0, 473, 472, 523, 213, 0, 0,
	0, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 219, 220, 221, 222, 223, 0,
	224, 0, 0, 0, 0, 0, 479, 1286, 0, 0,
	0, 225, 227, 226, 228, 229, 480, 481, 230, 482,
	231, 232, 483, 0, 233, 234, 235, 236, 237, 238,
	0, 0, 239, 484, 485, 486, 0, 240, 487, 0,
	0, 0, 241, 242, 243, 244, 245, 246, 0, 248,
	249, 250, 247, 0, 251, 0, 252, 253, 254, 0,
	0, 255, 256, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 259, 260, 261, 262, 488, 489, 0, 263,
	0, 265, 264, 0, 266, 0, 0, 267, 268, 269,
	0, 270, 0, 271, 272, 0, 273, 490, 274, 275,
	277, 279, 276, 280, 281, 282, 283, 491, 492, 0,
	216, 0, 0, 0, 0, 0, 284, 285, 286, 493,
	287, 288, 0, 289, 0, 290, 0, 0, 0, 291,
	292, 0, 293, 494, 0, 495, 294, 0, 295, 296,
	297, 298, 496, 497, 498, 350, 0, 299, 300, 0,
	301, 302, 304, 0, 0, 217, 303, 305, 312, 0,
	0, 306, 499, 308, 307, 309, 310, 311, 500, 0,
	501, 0, 313, 0, 502, 0, 314, 315, 316, 0,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	325, 324, 0, 326, 503, 0, 327, 328, 0, 0,
	329, 330, 0, 0, 331, 332, 333, 0, 334, 335,
	337, 339, 336, 338, 340, 342, 343, 341, 0, 344,
	345, 347, 0, 346, 0, 218, 0, 348, 0, 504,
	349, 505, 351, 352, 0, 353, 354, 355, 0, 0,
	357, 358, 359, 0, 0, 360, 361, 506, 0, 362,
	0, 507, 363, 356, 364, 365, 366, 367, 368, 369,
	370, 0, 371, 372, 508, 373, 509, 374, 0, 375,
	0, 376, 377, 378, 379, 380, 381, 382, 510, 383,
	384, 0, 385, 386, 387, 388, 389, 0, 391, 392,
	393, 390, 394, 395, 396, 397, 0, 398, 0, 399,
	400, 401, 402, 511, 403, 0, 404, 408, 409, 410,
	411, 412, 413, 414, 0, 420, 421, 415, 417, 418,
	419, 416, 422, 423, 424, 0, 425, 405, 406, 426,
	427, 0, 428, 429, 512, 430, 431, 0, 432, 433,
	434, 435, 407, 436, 440, 441, 437, 438, 439, 513,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	278, 450, 0, 451, 514, 515, 516, 517, 0, 458,
	0, 452, 453, 518, 454, 519, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 520, 521,
	522, 0, 473, 472, 523, 213, 0, 0, 0, 474,
	475, 524, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 219, 220, 221, 222, 223, 0, 224, 0,
	0, 0, 0, 0, 479, 2795, 0, 0, 0, 225,
	227, 226, 228, 229, 480, 481, 230, 482, 231, 232,
	483, 0, 233, 234, 235, 236, 237, 238, 0, 0,
	239, 484, 485, 486, 0, 240, 487, 0, 0, 0,
	241, 242, 243, 244, 245, 246, 0, 248, 249, 250,
	247, 0, 251, 0, 252, 253, 254, 0, 0, 255,
	256, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	259, 260, 261, 262, 488, 489, 0, 263, 0, 265,
	264, 0, 266, 0, 0, 267, 268, 269, 0, 270,
	0, 271, 272, 0, 273, 490, 274, 275, 277, 279,
	276, 280, 281, 282, 283, 491, 492, 0, 216, 0,
	0, 0, 0, 0, 284, 285, 286, 493, 287, 288,
	0, 289, 0, 290, 0, 0, 0, 291, 292, 0,
	293, 494, 0, 495, 294, 0, 295, 296, 297, 298,
	496, 497, 498, 350, 0, 299, 300, 0, 301, 302,
	304, 0, 0, 217, 303, 305, 312, 0, 0, 306,
	499, 308, 307, 309, 310, 311, 500, 0, 501, 0,
	313, 0, 502, 0, 314, 315, 316, 0, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 325, 324,
	0, 326, 503, 0, 327, 328, 0, 0, 329, 330,
	0, 0, 331, 332, 333, 0, 334, 335, 337, 339,
	336, 338, 340, 342, 343, 341, 0, 344, 345, 347,
	0, 346, 0, 218, 0, 348, 0, 504, 349, 505,
	351, 352, 0, 353, 354, 355, 0, 0, 357, 358,
	359, 0, 0, 360, 361, 506, 0, 362, 0, 507,
	363, 356, 364, 365, 366, 367, 368, 369, 370, 0,
	371, 372, 508, 373, 509, 374, 0, 375, 0, 376,
	377, 378, 379, 380, 381, 382, 510, 383, 384, 0,
	385, 386, 387, 388, 389, 0, 391, 392, 393, 390,
	394, 395, 396, 397, 0, 398, 0, 399, 400, 401,
	402, 511, 403, 0, 404, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 415, 417, 418, 419, 416,
	422, 423, 424, 0, 425, 405, 406, 426, 427, 0,
	428, 429, 512, 430, 431, 0, 432, 433, 434, 435,
	407, 436, 440, 441, 437, 438, 439, 513, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 278, 450,
	0, 451, 514, 515, 516, 517, 0, 458, 0, 452,
	453, 518, 454, 519, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 520, 521, 522, 0,
	473, 472, 523, 213, 0, 0, 0, 474, 475, 524,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	219, 220, 221, 222, 223, 0, 224, 0, 0, 0,
	0, 0, 479, 1286, 0, 0, 0, 225, 227, 226,
	228, 229, 480, 481, 230, 482, 231, 232, 483, 0,
	233, 234, 235, 236, 237, 238, 0, 0, 239, 484,
	485, 486, 0, 240, 487, 0, 0, 0, 241, 242,
	243, 244, 245, 246, 0, 248, 249, 250, 247, 0,
	251, 0, 252, 253, 254, 0, 0, 255, 256, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 259, 260,
	261, 262, 488, 489, 0, 263, 0, 265, 264, 0,
	266, 0, 0, 267, 268, 269, 0, 270, 0, 271,
	272, 0, 273, 490, 274, 275, 277, 279, 276, 280,
	281, 282, 283, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 286, 493, 287, 288, 0, 289,
	0, 290, 0, 0, 0, 291, 292, 0, 293, 494,
	0, 495, 294, 0, 295, 296, 297, 298, 496, 497,
	498, 350, 0, 299, 300, 0, 301, 302, 304, 0,
	0, 0, 303, 305, 312, 0, 0, 306, 499, 308,
	307, 309, 310, 311, 500, 0, 501, 0, 313, 0,
	502, 0, 314, 315, 316, 0, 317, 318, 0, 0,
	319, 320, 321, 322, 323, 0, 325, 324, 0, 326,
	503, 0, 327, 328, 0, 0, 329, 330, 0, 0,
	331, 332, 333, 0, 334, 335, 337, 339, 336, 338,
	340, 342, 343, 341, 0, 344, 345, 347, 0, 346,
	0, 0, 0, 348, 0, 504, 349, 505, 351, 352,
	0, 353, 354, 355, 0, 0, 357, 358, 359, 0,
	0, 360, 361, 506, 0, 362, 0, 507, 363, 356,
	364, 365, 366, 367, 368, 369, 370, 0, 371, 372,
	508, 373, 509, 374, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 510, 383, 384, 0, 385, 386,
	387, 388, 389, 0, 391, 392, 393, 390, 394, 395,
	396, 397, 0, 398, 0, 399, 400, 401, 402, 511,
	403, 0, 404, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	424, 0, 425, 405, 406, 426, 427, 0, 428, 429,
	512, 430, 431, 0, 432, 433, 434, 435, 407, 436,
	440, 441, 437, 438, 439, 513, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 278, 450, 0, 451,
	514, 515, 516, 517, 0, 458, 0, 452, 453, 518,
	454, 519, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 520, 521, 522, 0, 473, 472,
	523, 213, 0, 0, 0, 474, 475, 524, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 219, 220,
	221, 222, 223, 0, 224, 0, 0, 0, 0, 0,
	479, 0, 0, 2414, 0, 225, 227, 226, 228, 229,
	480, 481, 230, 482, 231, 232, 483, 0, 233, 234,
	235, 236, 237, 238, 0, 0, 239, 484, 485, 486,
	0, 240, 487, 0, 0, 0, 241, 242, 243, 244,
	245, 246, 0, 248, 249, 250, 247, 0, 251, 0,
	252, 253, 254, 0, 0, 255, 256, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 262,
	488, 489, 0, 263, 0, 265, 264, 0, 266, 0,
	0, 267, 268, 269, 0, 270, 0, 271, 272, 0,
	273, 490, 274, 275, 277, 279, 276, 280, 281, 282,
	283, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 286, 493, 287, 288, 0, 289, 0, 290,
	0, 0, 0, 291, 292, 0, 293, 494, 0, 495,
	294, 0, 295, 296, 297, 298, 496, 497, 498, 350,
	0, 299, 300, 0, 301, 302, 304, 0, 0, 0,
	303, 305, 312, 0, 0, 306, 499, 308, 307, 309,
	310, 311, 500, 0, 501, 0, 313, 0, 502, 0,
	314, 315, 316, 0, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 325, 324, 0, 326, 503, 0,
	327, 328, 0, 0, 329, 330, 0, 0, 331, 332,
	333, 0, 334, 335, 337, 339, 336, 338, 340, 342,
	343, 341, 0, 344, 345, 347, 0, 346, 0, 0,
	0, 348, 0, 504, 349, 505, 351, 352, 0, 353,
	354, 355, 0, 0, 357, 358, 359, 0, 0, 360,
	361, 506, 0, 362, 0, 507, 363, 356, 364, 365,
	366, 367, 368, 369, 370, 0, 371, 372, 508, 373,
	509, 374, 0, 375, 0, 376, 377, 378, 379, 380,
	381, 382, 510, 383, 384, 0, 385, 386, 387, 388,
	389, 0, 391, 392, 393, 390, 394, 395, 396, 397,
	0, 398, 0, 399, 400, 401, 402, 511, 403, 0,
	404, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 415, 417, 418, 419, 416, 422, 423, 424, 0,
	425, 405, 406, 426, 427, 0, 428, 429, 512, 430,
	431, 0, 432, 433, 434, 435, 407, 436, 440, 441,
	437, 438, 439, 513, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 278, 450, 0, 451, 514, 515,
	516, 517, 0, 458, 0, 452, 453, 518, 454, 519,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 520, 521, 522, 0, 473, 472, 523, 213,
	0, 0, 0, 474, 475, 524, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 479, 0,
	0, 2931, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 240,
	487, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 259, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 496, 497, 498, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 0, 303, 305,
	312, 0, 0, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 0, 502, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 0, 346, 0, 0, 0, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	0, 362, 0, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 425, 405,
	406, 426, 427, 0, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	0, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 0, 473, 472, 523, 591, 0, 592,
	0, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 220, 221, 222,
	223, 0, 224, 0, 0, 0, 0, 0, 479, 1914,
	0, 0, 0, 225, 227, 226, 228, 229, 480, 481,
	230, 482, 231, 232, 483, 0, 233, 234, 235, 236,
	237, 238, 0, 0, 239, 484, 485, 486, 0, 240,
	487, 0, 0, 0, 241, 242, 243, 244, 245, 246,
	0, 248, 249, 250, 247, 0, 251, 0, 252, 253,
	254, 0, 0, 255, 256, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 598, 260, 261, 262, 488, 489,
	0, 263, 0, 265, 264, 0, 266, 0, 0, 267,
	268, 269, 0, 270, 0, 271, 272, 0, 273, 490,
	274, 275, 277, 279, 276, 280, 281, 282, 283, 491,
	492, 0, 216, 0, 0, 0, 0, 0, 284, 285,
	286, 493, 287, 288, 0, 289, 0, 290, 0, 0,
	0, 291, 292, 0, 293, 494, 0, 495, 294, 0,
	295, 296, 297, 298, 496, 497, 498, 350, 0, 299,
	300, 0, 301, 302, 304, 0, 0, 217, 303, 305,
	312, 0, 0, 306, 499, 308, 307, 309, 310, 311,
	500, 0, 501, 0, 313, 0, 502, 0, 314, 315,
	316, 0, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 325, 324, 0, 326, 503, 0, 327, 328,
	0, 0, 329, 330, 0, 0, 331, 332, 333, 0,
	334, 335, 337, 339, 336, 338, 340, 342, 343, 341,
	0, 344, 345, 347, 0, 346, 0, 218, 0, 348,
	0, 504, 349, 505, 351, 352, 0, 353, 354, 355,
	0, 0, 357, 358, 359, 0, 0, 360, 361, 506,
	0, 362, 0, 507, 363, 356, 364, 365, 366, 367,
	368, 369, 370, 0, 371, 372, 508, 373, 509, 374,
	0, 375, 0, 376, 377, 378, 379, 380, 381, 382,
	510, 383, 384, 0, 385, 386, 387, 388, 389, 0,
	391, 392, 393, 390, 394, 395, 396, 397, 0, 398,
	0, 399, 400, 401, 402, 511, 403, 0, 404, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 415,
	417, 418, 419, 416, 422, 423, 424, 0, 425, 405,
	406, 426, 427, 0, 428, 429, 512, 430, 431, 0,
	432, 433, 434, 435, 407, 436, 440, 441, 437, 438,
	439, 513, 0, 443, 444, 442, 597, 445, 446, 447,
	448, 449, 278, 450, 0, 451, 514, 515, 516, 517,
	589, 458, 0, 452, 453, 518, 454, 519, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	520, 521, 522, 0, 473, 472, 523, 0, 703, 0,
	592, 474, 475, 524, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 601, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 598, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 218, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 597, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 592, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 601, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 598, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 496, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 218, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	1946, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 597, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 0, 473, 472, 523, 592, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 601, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 598, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 496, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 218, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 597, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 1366, 0, 1184, 1183, 0, 0,
	0, 0, 1181, 0, 0, 0, 0, 0, 0, 601,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 1088,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 216,
	0, 0, 0, 0, 0, 1365, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 496, 497, 498, 350, 963, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 962,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 964, 502, 965, 314, 315, 316, 966, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 967, 327, 328, 968, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 969, 344, 345,
	347, 970, 346, 0, 0, 971, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 1364, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 1363,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	975, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 1330, 0, 1184, 1183, 0, 0,
	0, 0, 1181, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 1088,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 1329, 497, 498, 350, 963, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 962,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 964, 502, 965, 314, 315, 316, 966, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 967, 327, 328, 968, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 969, 344, 345,
	347, 970, 346, 0, 0, 971, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	975, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 1326, 0, 1184, 1183, 0, 0,
	0, 0, 1181, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 1088,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 1325, 497, 498, 350, 963, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 962,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 964, 502, 965, 314, 315, 316, 966, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 967, 327, 328, 968, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 969, 344, 345,
	347, 970, 346, 0, 0, 971, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	975, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 1262, 0, 1184, 1183, 0, 0,
	0, 0, 1181, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 1088,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 1261, 497, 498, 350, 963, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 962,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 964, 502, 965, 314, 315, 316, 966, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 967, 327, 328, 968, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 969, 344, 345,
	347, 970, 346, 0, 0, 971, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	975, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 1259, 0, 1184, 1183, 0, 0,
	0, 0, 1181, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 1088,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 1258, 497, 498, 350, 963, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 962,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 964, 502, 965, 314, 315, 316, 966, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 967, 327, 328, 968, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 969, 344, 345,
	347, 970, 346, 0, 0, 971, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	975, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 1177, 0, 1184, 1183, 0, 0,
	0, 0, 1181, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 1088,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 1179, 497, 498, 350, 963, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 962,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 964, 502, 965, 314, 315, 316, 966, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 967, 327, 328, 968, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 969, 344, 345,
	347, 970, 346, 0, 0, 971, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	975, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 1184, 1183, 0, 0, 0, 0,
	1181, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 1088, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 960, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 961, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 963, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 962, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	964, 502, 965, 314, 315, 316, 966, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 967, 327, 328, 968, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 969, 344, 345, 347, 970,
	346, 0, 0, 971, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 972, 362, 973, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 974, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 975, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 213, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 496, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 218, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 0, 473, 472, 523, 1184, 1183, 0, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 601, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 1088,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 960,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 1734, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 961, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 496, 497, 498, 350, 963, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 962,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 964, 502, 965, 314, 315, 316, 966, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 967, 327, 328, 968, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 969, 344, 345,
	347, 970, 346, 0, 0, 971, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 972, 362, 973,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 974, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	975, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 1184, 1183, 0, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 1088, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 960, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 961, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 963, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 962, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	964, 502, 965, 314, 315, 316, 966, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 967, 327, 328, 968, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 969, 344, 345, 347, 970,
	346, 0, 0, 971, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 972, 362, 973, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 974, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 975, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 1184, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 1088, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 960, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 961,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 496, 497, 498, 350, 963, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 962, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 964, 502, 965, 314, 315, 316,
	966, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 967, 327, 328, 968,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 969,
	344, 345, 347, 970, 346, 0, 0, 971, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 972,
	362, 973, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 974,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 975, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 213, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 2301, 240, 487, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 2298, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 2450, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 2304, 0, 0, 291, 292, 0, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 496, 497, 498,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	2447, 303, 305, 312, 0, 0, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 2449, 0, 502,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	0, 327, 328, 2446, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 0, 346, 0,
	0, 0, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 0, 362, 0, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 374, 2303, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 425, 405, 406, 426, 427, 0, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 2448,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 213, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 2301, 240, 487, 0, 0,
	2295, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 2298, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 2304, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 2294, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 0, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 2303, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 2302, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 1421, 0, 213, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 496, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 218, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 1424, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 1422, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 1423, 472, 523, 1172, 0, 213, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 1174, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 218, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 1017, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 1169, 0, 213, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 1171, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 218, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 1017, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 1076, 0, 213, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 216,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 1078, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 217, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 218, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 1017, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 553, 0, 213, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 552, 223, 542, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 545, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	546, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 496, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 0, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 547, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	0, 473, 472, 523, 541, 0, 213, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 542, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 545, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	546, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 496, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 0, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 547, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	213, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 2760, 346, 0, 218, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 213, 473, 472, 523, 0, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 218, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 1017, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 0, 473,
	472, 523, 2385, 0, 213, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 218, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 0, 473,
	472, 523, 1923, 0, 213, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 218, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 213, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 496, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 218, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 1849, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 0, 473, 472, 523, 1853, 0, 213, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 1852, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 218, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 0, 473, 472, 523, 1842, 0, 213, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 1844, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 218, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 0, 473, 472, 523, 1319, 0, 213, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 1318, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 218, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 0, 473, 472, 523, 1316, 0, 213, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 1315, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 218, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 0, 473, 472, 523, 1313, 0, 213, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 1312, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 218, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 0, 473, 472, 523, 1309, 0, 213, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 1308, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 218, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 0, 473, 472, 523, 1194, 0, 213, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 1196, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 218, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 213, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 0, 240, 487, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 216, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 496, 497, 498,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	217, 303, 305, 312, 0, 0, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 0, 502,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 0, 346, 0,
	218, 0, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 0, 362, 0, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 425, 405, 406, 426, 427, 0, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 213, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 545, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	546, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 496, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 0, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 547, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	213, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 1953, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 216, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 217, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 218, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 213, 473, 472, 523, 0, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 1951,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 216, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 217, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 218, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 213, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 1949, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 216, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 496, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 217, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 218, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 0, 473, 472, 523, 695, 0, 213, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 496, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 694, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 0, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 693, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 213, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 0, 240, 487, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 2450, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 496, 497, 498,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 0, 502,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 0, 346, 0,
	0, 0, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 0, 362, 0, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 374, 3264, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 425, 405, 406, 426, 427, 0, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 0, 473, 472, 523,
	532, 0, 213, 0, 474, 475, 524, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	220, 221, 222, 223, 531, 224, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 0, 240, 487, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 0, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 496, 497, 498,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 0, 502,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 0, 346, 0,
	0, 0, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 0, 362, 0, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 530, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 425, 405, 406, 426, 427, 0, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 0, 473, 472, 523,
	213, 2437, 0, 0, 474, 475, 524, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 213, 473, 472, 523, 0, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 3056, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 0, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 213, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 2227,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 496, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 0, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 0, 473, 472, 523, 213, 2437, 0, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 496, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 0, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 2434, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	213, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 219, 220, 221,
	222, 223, 1930, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 1921, 0,
	213, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 573, 0,
	213, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 1054, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 1052, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	574, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 570, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 1055, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 569, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 1866, 0,
	213, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 1865, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 573, 0,
	213, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	563, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	574, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 570, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 1340, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 569, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 1323, 0,
	213, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 1322, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 1270, 0,
	213, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 1269, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 1251, 0,
	213, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 1188, 0,
	213, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 0, 473, 472, 523, 573, 0,
	213, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 1054, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 1052, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 496, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	574, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 570, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 1055, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 569, 515, 516,
	517, 0, 458, 0, 452, 1053, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 213, 473, 472, 523, 0, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 219, 220, 221, 222, 223, 1036, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 0, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 0, 473,
	472, 523, 573, 0, 213, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 563, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 561, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 562, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 574, 0, 344, 345, 347, 0,
	346, 0, 0, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	564, 403, 0, 404, 408, 409, 570, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	565, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 569, 515, 516, 517, 0, 458, 0, 452, 567,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 0, 473,
	472, 523, 557, 0, 213, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 0, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 558, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 0, 473,
	472, 523, 555, 0, 213, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 0, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 0, 473,
	472, 523, 549, 0, 213, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 0, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 0, 473,
	472, 523, 527, 0, 213, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 0, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 213, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 496, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 0, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 213, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 0, 240, 487, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 0, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 2736, 497, 498,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 0, 502,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 0, 346, 0,
	0, 0, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 0, 362, 0, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 425, 405, 406, 426, 427, 0, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 213, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 2734, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 0, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	213, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 2721, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 213, 473, 472, 523, 0, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 2397,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 0, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 383, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 213, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 294, 0, 295,
	296, 297, 298, 496, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 0, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 366, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 380, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 403, 0, 404, 558, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 213, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 0, 0, 0, 219,
	220, 221, 222, 223, 0, 224, 0, 0, 0, 0,
	0, 479, 0, 1879, 0, 0, 225, 227, 226, 228,
	229, 480, 481, 230, 482, 231, 232, 483, 0, 233,
	234, 235, 236, 237, 238, 0, 0, 239, 484, 485,
	486, 0, 240, 487, 0, 0, 0, 241, 242, 243,
	244, 245, 246, 0, 248, 249, 250, 247, 0, 251,
	0, 252, 253, 254, 0, 0, 255, 256, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 259, 260, 261,
	262, 488, 489, 0, 263, 0, 265, 264, 0, 266,
	0, 0, 267, 268, 269, 0, 270, 0, 271, 272,
	0, 273, 490, 274, 275, 277, 279, 276, 280, 281,
	282, 283, 491, 492, 0, 0, 0, 0, 0, 0,
	0, 284, 285, 286, 493, 287, 288, 0, 289, 0,
	290, 0, 0, 0, 291, 292, 0, 293, 494, 0,
	495, 294, 0, 295, 296, 297, 298, 496, 497, 498,
	350, 0, 299, 300, 0, 301, 302, 304, 0, 0,
	0, 303, 305, 312, 0, 0, 306, 499, 308, 307,
	309, 310, 311, 500, 0, 501, 0, 313, 0, 502,
	0, 314, 315, 316, 0, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 325, 324, 0, 326, 503,
	0, 327, 328, 0, 0, 329, 330, 0, 0, 331,
	332, 333, 0, 334, 335, 337, 339, 336, 338, 340,
	342, 343, 341, 0, 344, 345, 347, 0, 346, 0,
	0, 0, 348, 0, 504, 349, 505, 351, 352, 0,
	353, 354, 355, 0, 0, 357, 358, 359, 0, 0,
	360, 361, 506, 0, 362, 0, 507, 363, 356, 364,
	365, 366, 367, 368, 369, 370, 0, 371, 372, 508,
	373, 509, 374, 0, 375, 0, 376, 377, 378, 379,
	380, 381, 382, 510, 383, 384, 0, 385, 386, 387,
	388, 389, 0, 391, 392, 393, 390, 394, 395, 396,
	397, 0, 398, 0, 399, 400, 401, 402, 511, 403,
	0, 404, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 424,
	0, 0, 405, 406, 426, 427, 0, 428, 429, 512,
	430, 431, 0, 432, 433, 434, 435, 407, 436, 440,
	441, 437, 438, 439, 513, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 278, 450, 0, 451, 514,
	515, 516, 517, 0, 458, 0, 452, 453, 518, 454,
	519, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 464, 465, 467, 0, 468, 0, 466,
	469, 470, 471, 520, 521, 522, 213, 473, 472, 523,
	0, 0, 0, 0, 474, 475, 524, 476, 477, 478,
	0, 0, 0, 219, 220, 221, 222, 223, 0, 224,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	225, 227, 226, 228, 229, 480, 481, 230, 482, 231,
	232, 483, 0, 233, 234, 235, 236, 237, 238, 0,
	0, 239, 484, 485, 486, 0, 240, 487, 0, 0,
	0, 241, 242, 243, 244, 245, 246, 0, 248, 249,
	250, 247, 0, 251, 0, 252, 253, 254, 0, 0,
	255, 256, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 259, 260, 261, 262, 488, 489, 0, 263, 0,
	265, 264, 0, 266, 0, 0, 267, 268, 269, 0,
	270, 0, 271, 272, 0, 273, 490, 274, 275, 277,
	279, 276, 280, 281, 282, 283, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 284, 285, 286, 493, 287,
	288, 0, 289, 0, 290, 0, 0, 0, 291, 292,
	0, 293, 494, 0, 495, 294, 0, 295, 296, 297,
	298, 1292, 497, 498, 350, 0, 299, 300, 0, 301,
	302, 304, 0, 0, 0, 303, 305, 312, 0, 0,
	306, 499, 308, 307, 309, 310, 311, 500, 0, 501,
	0, 313, 0, 502, 0, 314, 315, 316, 0, 317,
	318, 0, 0, 319, 320, 321, 322, 323, 0, 325,
	324, 0, 326, 503, 0, 327, 328, 0, 0, 329,
	330, 0, 0, 331, 332, 333, 0, 334, 335, 337,
	339, 336, 338, 340, 342, 343, 341, 0, 344, 345,
	347, 0, 346, 0, 0, 0, 348, 0, 504, 349,
	505, 351, 352, 0, 353, 354, 355, 0, 0, 357,
	358, 359, 0, 0, 360, 361, 506, 0, 362, 0,
	507, 363, 356, 364, 365, 366, 367, 368, 369, 370,
	0, 371, 372, 508, 373, 509, 374, 0, 375, 0,
	376, 377, 378, 379, 380, 381, 382, 510, 383, 384,
	0, 385, 386, 387, 388, 389, 0, 391, 392, 393,
	390, 394, 395, 396, 397, 0, 398, 0, 399, 400,
	401, 402, 511, 403, 0, 404, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 424, 0, 425, 405, 406, 426, 427,
	0, 428, 429, 512, 430, 431, 0, 432, 433, 434,
	435, 407, 436, 440, 441, 437, 438, 439, 513, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 278,
	450, 0, 451, 514, 515, 516, 517, 0, 458, 0,
	452, 453, 518, 454, 519, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 464, 465, 467,
	0, 468, 0, 466, 469, 470, 471, 520, 521, 522,
	213, 473, 472, 523, 0, 0, 0, 0, 474, 475,
	524, 476, 477, 478, 0, 0, 0, 219, 220, 221,
	222, 223, 0, 224, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 225, 227, 226, 228, 229, 480,
	481, 230, 482, 231, 232, 483, 0, 233, 234, 235,
	236, 237, 238, 0, 0, 239, 484, 485, 486, 0,
	240, 487, 0, 0, 0, 241, 242, 243, 244, 245,
	246, 0, 248, 249, 250, 247, 0, 251, 0, 252,
	253, 254, 0, 0, 255, 256, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 259, 260, 261, 262, 488,
	489, 0, 263, 0, 265, 264, 0, 266, 0, 0,
	267, 268, 269, 0, 270, 0, 271, 272, 0, 273,
	490, 274, 275, 277, 279, 276, 280, 281, 282, 283,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 284,
	285, 286, 493, 287, 288, 0, 289, 0, 290, 0,
	0, 0, 291, 292, 0, 293, 494, 0, 495, 294,
	0, 295, 296, 297, 298, 1232, 497, 498, 350, 0,
	299, 300, 0, 301, 302, 304, 0, 0, 0, 303,
	305, 312, 0, 0, 306, 499, 308, 307, 309, 310,
	311, 500, 0, 501, 0, 313, 0, 502, 0, 314,
	315, 316, 0, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 325, 324, 0, 326, 503, 0, 327,
	328, 0, 0, 329, 330, 0, 0, 331, 332, 333,
	0, 334, 335, 337, 339, 336, 338, 340, 342, 343,
	341, 0, 344, 345, 347, 0, 346, 0, 0, 0,
	348, 0, 504, 349, 505, 351, 352, 0, 353, 354,
	355, 0, 0, 357, 358, 359, 0, 0, 360, 361,
	506, 0, 362, 0, 507, 363, 356, 364, 365, 366,
	367, 368, 369, 370, 0, 371, 372, 508, 373, 509,
	374, 0, 375, 0, 376, 377, 378, 379, 380, 381,
	382, 510, 383, 384, 0, 385, 386, 387, 388, 389,
	0, 391, 392, 393, 390, 394, 395, 396, 397, 0,
	398, 0, 399, 400, 401, 402, 511, 403, 0, 404,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 424, 0, 425,
	405, 406, 426, 427, 0, 428, 429, 512, 430, 431,
	0, 432, 433, 434, 435, 407, 436, 440, 441, 437,
	438, 439, 513, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 278, 450, 0, 451, 514, 515, 516,
	517, 0, 458, 0, 452, 453, 518, 454, 519, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 464, 465, 467, 0, 468, 0, 466, 469, 470,
	471, 520, 521, 522, 213, 473, 472, 523, 0, 0,
	0, 0, 474, 475, 524, 476, 477, 478, 0, 0,
	0, 219, 220, 221, 222, 223, 0, 224, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 225, 227,
	226, 228, 229, 480, 481, 230, 482, 231, 232, 483,
	0, 233, 234, 235, 236, 237, 238, 0, 0, 239,
	484, 485, 486, 0, 240, 487, 0, 0, 0, 241,
	242, 243, 244, 245, 246, 0, 248, 249, 250, 247,
	0, 251, 0, 252, 253, 254, 0, 0, 255, 256,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 259,
	260, 261, 262, 488, 489, 0, 263, 0, 265, 264,
	0, 266, 0, 0, 267, 268, 269, 0, 270, 0,
	271, 272, 0, 273, 490, 274, 275, 277, 279, 276,
	280, 281, 282, 283, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 284, 285, 286, 493, 287, 288, 0,
	289, 0, 290, 0, 0, 0, 291, 292, 0, 293,
	494, 0, 495, 294, 0, 295, 296, 297, 298, 496,
	497, 498, 350, 0, 299, 300, 0, 301, 302, 304,
	0, 0, 0, 303, 305, 312, 0, 0, 306, 499,
	308, 307, 309, 310, 311, 500, 0, 501, 0, 313,
	0, 502, 0, 314, 315, 316, 0, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 325, 324, 0,
	326, 503, 0, 327, 328, 0, 0, 329, 330, 0,
	0, 331, 332, 333, 0, 334, 335, 337, 339, 336,
	338, 340, 342, 343, 341, 0, 344, 345, 347, 0,
	346, 0, 0, 0, 348, 0, 504, 349, 505, 351,
	352, 0, 353, 354, 355, 0, 0, 357, 358, 359,
	0, 0, 360, 361, 506, 0, 362, 0, 507, 363,
	356, 364, 365, 366, 367, 368, 369, 370, 0, 371,
	372, 508, 373, 509, 374, 0, 375, 0, 376, 377,
	378, 379, 380, 381, 382, 510, 990, 384, 0, 385,
	386, 387, 388, 389, 0, 391, 392, 393, 390, 394,
	395, 396, 397, 0, 398, 0, 399, 400, 401, 402,
	511, 403, 0, 404, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 424, 0, 425, 405, 406, 426, 427, 0, 428,
	429, 512, 430, 431, 0, 432, 433, 434, 435, 407,
	436, 440, 441, 437, 438, 439, 513, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 278, 450, 0,
	451, 514, 515, 516, 517, 0, 458, 0, 452, 453,
	518, 454, 519, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 464, 465, 467, 0, 468,
	0, 466, 469, 470, 471, 520, 521, 522, 213, 473,
	472, 523, 0, 0, 0, 0, 474, 475, 524, 476,
	477, 478, 0, 0, 0, 219, 220, 221, 222, 223,
	0, 224, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 225, 227, 226, 228, 229, 480, 481, 230,
	482, 231, 232, 483, 0, 233, 234, 235, 236, 237,
	238, 0, 0, 239, 484, 485, 486, 0, 240, 487,
	0, 0, 0, 241, 242, 243, 244, 245, 246, 0,
	248, 249, 250, 247, 0, 251, 0, 252, 253, 254,
	0, 0, 255, 256, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 259, 260, 261, 262, 488, 489, 0,
	263, 0, 265, 264, 0, 266, 0, 0, 267, 268,
	269, 0, 270, 0, 271, 272, 0, 273, 490, 274,
	275, 277, 279, 276, 280, 281, 282, 283, 491, 492,
	0, 0, 0, 0, 0, 0, 0, 284, 285, 286,
	493, 287, 288, 0, 289, 0, 290, 0, 0, 0,
	291, 292, 0, 293, 494, 0, 495, 0, 0, 295,
	296, 297, 298, 496, 497, 498, 350, 0, 299, 300,
	0, 301, 302, 304, 0, 0, 0, 303, 305, 312,
	0, 0, 306, 499, 308, 307, 309, 310, 311, 500,
	0, 501, 0, 313, 0, 502, 0, 314, 315, 316,
	0, 317, 318, 0, 0, 319, 320, 321, 322, 323,
	0, 325, 324, 0, 326, 503, 0, 327, 328, 0,
	0, 329, 330, 0, 0, 331, 332, 333, 0, 334,
	335, 337, 339, 336, 338, 340, 342, 343, 341, 0,
	344, 345, 347, 0, 346, 0, 0, 0, 348, 0,
	504, 349, 505, 351, 352, 0, 353, 354, 355, 0,
	0, 357, 358, 359, 0, 0, 360, 361, 506, 0,
	362, 0, 507, 363, 356, 364, 365, 0, 367, 368,
	369, 370, 0, 371, 372, 508, 373, 509, 374, 0,
	375, 0, 376, 377, 378, 379, 0, 381, 382, 510,
	383, 384, 0, 385, 386, 387, 388, 389, 0, 391,
	392, 393, 390, 394, 395, 396, 397, 0, 398, 0,
	399, 400, 401, 402, 511, 0, 0, 404, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 424, 0, 425, 405, 406,
	426, 427, 0, 428, 429, 512, 430, 431, 0, 432,
	433, 434, 435, 407, 436, 440, 441, 437, 438, 439,
	513, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 278, 450, 0, 451, 514, 515, 516, 517, 0,
	458, 0, 452, 453, 518, 454, 519, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 464,
	465, 467, 0, 468, 0, 466, 469, 470, 471, 520,
	521, 522, 0, 473, 472, 523, 0, 0, 0, 0,
	474, 475, 524, 476, 477, 478, 1470, 1471, 0, 1503,
	1504, 1505, 1513, 1514, 1515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1506, 1501, 0, 0, 0,
	0, 0, 0, 1473, 0, 0, 0, 0, 1519, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1470, 1471, 0, 1503, 1504, 1505, 1513, 1514,
	1515, 1472, 0, 0, 0, 0, 0, 0, 0, 0,
	1492, 1506, 1501, 0, 0, 0, 0, 1489, 0, 1473,
	0, 0, 0, 0, 1519, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1472, 0, 0,
	0, 0, 0, 0, 0, 0, 1492, 0, 0, 0,
	0, 0, 0, 1489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1495, 1496, 1497, 1498, 0, 0,
	0, 0, 0, 0, 1478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1510, 0,
	0, 1520, 0, 0, 0, 1500, 1502, 0, 0, 0,
	1495, 1496, 1497, 1498, 0, 0, 0, 0, 0, 0,
	1478, 0, 0, 0, 0, 1516, 0, 1517, 0, 0,
	0, 0, 0, 0, 1487, 1488, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 0, 1520, 0, 0,
	1508, 1500, 1502, 0, 0, 0, 0, 0, 0, 1493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1516, 0, 1517, 0, 0, 0, 0, 1518, 0,
	1487, 1488, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1507, 1508, 0, 0, 0,
	0, 0, 0, 0, 0, 1493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1499,
	0, 1507, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1494, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1470, 1471, 0, 1503, 1504, 1505, 1513, 1514, 1515, 0,
	0, 0, 0, 1511, 0, 1499, 0, 0, 0, 1506,
	1501, 0, 0, 0, 0, 0, 0, 1473, 0, 0,
	0, 0, 1519, 1494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1472, 0, 0, 0, 1511,
	0, 0, 0, 0, 1492, 0, 0, 0, 0, 0,
	0, 1489, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1509, 0, 0,
	1484, 1485, 1491, 1512, 1490, 1486, 0, 1483, 1481, 1482,
	1474, 1475, 1476, 1477, 1479, 1480, 0, 0, 0, 0,
	3507, 0, 0, 0, 0, 0, 0, 0, 1495, 1496,
	1497, 1498, 0, 0, 0, 0, 0, 0, 1478, 0,
	0, 0, 0, 1509, 0, 0, 1484, 1485, 1491, 1512,
	1490, 1486, 0, 1483, 1481, 1482, 1474, 1475, 1476, 1477,
	1479, 1480, 1510, 0, 0, 1520, 3436, 0, 0, 1500,
	1502, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1516,
	0, 1517, 0, 0, 0, 0, 0, 0, 1487, 1488,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1508, 0, 0, 0, 0, 0,
	0, 0, 0, 1493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1518, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1507,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1470, 1471,
	0, 1503, 1504, 1505, 1513, 1514, 1515, 0, 0, 0,
	0, 0, 0, 1499, 0, 0, 0, 1506, 1501, 0,
	0, 0, 0, 0, 0, 1473, 0, 0, 0, 0,
	1519, 1494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1470, 1471, 0, 1503, 1504, 1505,
	1513, 1514, 1515, 1472, 0, 0, 0, 1511, 0, 0,
	0, 0, 1492, 1506, 1501, 0, 0, 0, 0, 1489,
	0, 1473, 0, 0, 0, 0, 1519, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1472,
	0, 0, 0, 0, 0, 0, 0, 0, 1492, 0,
	0, 0, 0, 0, 0, 1489, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1495, 1496, 1497, 1498,
	0, 0, 0, 0, 0, 0, 1478, 0, 0, 0,
	0, 1509, 0, 0, 1484, 1485, 1491, 1512, 1490, 1486,
	0, 1483, 1481, 1482, 1474, 1475, 1476, 1477, 1479, 1480,
	1510, 0, 0, 1520, 3435, 0, 0, 1500, 1502, 0,
	0, 0, 1495, 1496, 1497, 1498, 0, 0, 0, 0,
	0, 0, 1478, 0, 0, 0, 0, 1516, 0, 1517,
	0, 0, 0, 0, 0, 0, 1487, 1488, 0, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 0, 1520,
	0, 0, 1508, 1500, 1502, 0, 0, 0, 0, 0,
	0, 1493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1516, 0, 1517, 0, 0, 0, 0,
	1518, 0, 1487, 1488, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1507, 1508, 0,
	0, 0, 0, 0, 0, 0, 0, 1493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1518, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1499, 0, 1507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1494,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1470, 1471, 0, 1503, 1504, 1505, 1513, 1514,
	1515, 0, 0, 0, 0, 1511, 0, 1499, 0, 0,
	0, 1506, 1501, 0, 0, 0, 0, 0, 0, 1473,
	0, 0, 0, 0, 1519, 1494, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1472, 0, 0,
	0, 1511, 0, 0, 0, 0, 1492, 0, 0, 0,
	0, 0, 0, 1489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1509,
	0, 0, 1484, 1485, 1491, 1512, 1490, 1486, 0, 1483,
	1481, 1482, 1474, 1475, 1476, 1477, 1479, 1480, 0, 0,
	0, 0, 3325, 0, 0, 0, 0, 0, 0, 0,
	1495, 1496, 1497, 1498, 0, 0, 0, 0, 0, 0,
	1478, 0, 0, 0, 0, 1509, 0, 0, 1484, 1485,
	1491, 1512, 1490, 1486, 0, 1483, 1481, 1482, 1474, 1475,
	1476, 1477, 1479, 1480, 1510, 0, 0, 1520, 3226, 0,
	0, 1500, 1502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1516, 0, 1517, 0, 0, 0, 0, 0, 0,
	1487, 1488, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1508, 0, 0, 0,
	0, 0, 0, 0, 0, 1493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1507, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1470, 1471, 0, 1503, 1504, 1505, 1513, 1514, 1515, 0,
	0, 0, 0, 0, 0, 1499, 0, 0, 0, 1506,
	1501, 0, 0, 0, 0, 0, 0, 1473, 0, 0,
	0, 0, 1519, 1494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1470, 1471, 0, 1503,
	1504, 1505, 1513, 1514, 1515, 1472, 0, 0, 0, 1511,
	0, 0, 0, 0, 1492, 1506, 1501, 0, 0, 0,
	0, 1489, 0, 1473, 0, 0, 0, 0, 1519, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1472, 0, 0, 0, 0, 0, 0, 0, 0,
	1492, 0, 0, 0, 0, 0, 0, 1489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1495, 1496,
	1497, 1498, 0, 0, 0, 0, 0, 0, 1478, 0,
	0, 0, 0, 1509, 0, 0, 1484, 1485, 1491, 1512,
	1490, 1486, 0, 1483, 1481, 1482, 1474, 1475, 1476, 1477,
	1479, 1480, 1510, 0, 0, 1520, 3179, 0, 0, 1500,
	1502, 0, 0, 0, 1495, 1496, 1497, 1498, 0, 0,
	0, 0, 0, 0, 1478, 0, 0, 0, 0, 1516,
	0, 1517, 0, 0, 0, 0, 0, 0, 1487, 1488,
	0, 0, 0, 0, 0, 0, 0, 0, 1510, 0,
	0, 1520, 0, 0, 1508, 1500, 1502, 0, 0, 0,
	0, 0, 0, 1493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1516, 0, 1517, 0, 0,
	0, 0, 1518, 0, 1487, 1488, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1507,
	1508, 0, 0, 0, 0, 0, 0, 0, 0, 1493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1518, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1499, 0, 1507, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1470, 1471, 0, 1503, 1504, 1505,
	1513, 1514, 1515, 0, 0, 0, 0, 1511, 0, 1499,
	0, 0, 0, 1506, 1501, 0, 0, 0, 0, 0,
	0, 1473, 0, 0, 0, 0, 1519, 1494, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1472,
	0, 0, 0, 1511, 0, 0, 0, 0, 1492, 0,
	0, 0, 0, 0, 0, 1489, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1509, 0, 0, 1484, 1485, 1491, 1512, 1490, 1486,
	0, 1483, 1481, 1482, 1474, 1475, 1476, 1477, 1479, 1480,
	0, 0, 0, 0, 3178, 0, 0, 0, 0, 0,
	0, 0, 1495, 1496, 1497, 1498, 0, 0, 0, 0,
	0, 0, 1478, 0, 0, 0, 0, 1509, 0, 0,
	1484, 1485, 1491, 1512, 1490, 1486, 0, 1483, 1481, 1482,
	1474, 1475, 1476, 1477, 1479, 1480, 1510, 0, 0, 1520,
	3177, 0, 0, 1500, 1502, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1516, 0, 1517, 0, 0, 0, 0,
	0, 0, 1487, 1488, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1508, 0,
	0, 0, 0, 0, 0, 0, 0, 1493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1518, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1470, 1471, 0, 1503, 1504, 1505, 1513, 1514,
	1515, 0, 0, 0, 0, 0, 0, 1499, 0, 0,
	0, 1506, 1501, 0, 0, 0, 0, 0, 0, 1473,
	0, 0, 0, 0, 1519, 1494, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1470, 1471,
	0, 1503, 1504, 1505, 1513, 1514, 1515, 1472, 0, 0,
	0, 1511, 0, 0, 0, 0, 1492, 1506, 1501, 0,
	0, 0, 0, 1489, 0, 1473, 0, 0, 0, 0,
	1519, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1472, 0, 0, 0, 0, 0, 0,
	0, 0, 1492, 0, 0, 0, 0, 0, 0, 1489,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1495, 1496, 1497, 1498, 0, 0, 0, 0, 0, 0,
	1478, 0, 0, 0, 0, 1509, 0, 0, 1484, 1485,
	1491, 1512, 1490, 1486, 0, 1483, 1481, 1482, 1474, 1475,
	1476, 1477, 1479, 1480, 1510, 0, 0, 1520, 3142, 0,
	0, 1500, 1502, 0, 0, 0, 1495, 1496, 1497, 1498,
	0, 0, 0, 0, 0, 0, 1478, 0, 0, 0,
	0, 1516, 0, 1517, 0, 0, 0, 0, 0, 0,
	1487, 1488, 0, 0, 0, 0, 0, 0, 0, 0,
	1510, 0, 0, 1520, 0, 0, 1508, 1500, 1502, 0,
	0, 0, 0, 0, 0, 1493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1516, 0, 1517,
	0, 0, 0, 0, 1518, 0, 1487, 1488, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1507, 1508, 0, 0, 0, 0, 0, 0, 0,
	0, 1493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1518, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1499, 0, 1507, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1470, 1471, 0, 1503,
	1504, 1505, 1513, 1514, 1515, 0, 0, 0, 0, 1511,
	0, 1499, 0, 0, 0, 1506, 1501, 0, 0, 0,
	0, 0, 0, 1473, 0, 0, 0, 0, 1519, 1494,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1472, 0, 0, 0, 1511, 0, 0, 0, 0,
	1492, 0, 0, 0, 0, 0, 0, 1489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1509, 0, 0, 1484, 1485, 1491, 1512,
	1490, 1486, 0, 1483, 1481, 1482, 1474, 1475, 1476, 1477,
	1479, 1480, 0, 0, 0, 0, 2938, 0, 0, 0,
	0, 0, 0, 0, 1495, 1496, 1497, 1498, 0, 0,
	0, 0, 0, 0, 1478, 0, 0, 0, 0, 1509,
	0, 0, 1484, 1485, 1491, 1512, 1490, 1486, 0, 1483,
	1481, 1482, 1474, 1475, 1476, 1477, 1479, 1480, 1510, 0,
	0, 1520, 2580, 0, 0, 1500, 1502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1516, 0, 1517, 0, 0,
	0, 0, 0, 0, 1487, 1488, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1508, 0, 0, 0, 0, 0, 0, 0, 0, 1493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1518, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1507, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1470, 1471, 0, 1503, 1504, 1505,
	1513, 1514, 1515, 0, 0, 0, 0, 0, 0, 1499,
	0, 0, 0, 1506, 1501, 0, 0, 0, 0, 0,
	0, 1473, 0, 0, 0, 0, 1519, 1494, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1470, 1471, 0, 1503, 1504, 1505, 1513, 1514, 1515, 1472,
	0, 0, 0, 1511, 0, 0, 0, 0, 1492, 1506,
	1501, 0, 0, 0, 0, 1489, 0, 1473, 0, 0,
	0, 0, 1519, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1472, 0, 0, 0, 0,
	0, 0, 0, 0, 1492, 0, 0, 0, 0, 0,
	0, 1489, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1495, 1496, 1497, 1498, 0, 0, 0, 0,
	0, 0, 1478, 0, 0, 0, 0, 1509, 0, 0,
	1484, 1485, 1491, 1512, 1490, 1486, 0, 1483, 1481, 1482,
	1474, 1475, 1476, 1477, 1479, 1480, 1510, 0, 0, 1520,
	2579, 0, 0, 1500, 1502, 0, 0, 0, 1495, 1496,
	1497, 1498, 0, 0, 0, 0, 0, 0, 1478, 3610,
	0, 0, 0, 1516, 0, 1517, 0, 0, 0, 0,
	0, 0, 1487, 1488, 0, 0, 0, 0, 0, 0,
	0, 0, 1510, 0, 0, 1520, 0, 0, 1508, 1500,
	1502, 0, 0, 0, 0, 0, 0, 1493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1516,
	0, 1517, 0, 0, 0, 0, 1518, 0, 1487, 1488,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1507, 1508, 0, 0, 0, 0, 0,
	0, 0, 0, 1493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1518, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1499, 0, 1507,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1494, 0, 0, 0, 0,
	0, 3609, 0, 0, 0, 0, 0, 0, 1470, 1471,
	0, 1503, 1504, 1505, 1513, 1514, 1515, 0, 0, 0,
	0, 1511, 0, 1499, 0, 0, 0, 1506, 1501, 0,
	0, 0, 0, 2508, 0, 1473, 0, 0, 0, 0,
	1519, 1494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1472, 0, 0, 0, 1511, 0, 0,
	0, 0, 1492, 0, 0, 0, 0, 0, 0, 1489,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1509, 0, 2509, 1484, 1485,
	1491, 1512, 1490, 1486, 0, 1483, 1481, 1482, 1474, 1475,
	1476, 1477, 1479, 1480, 0, 0, 2537, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1495, 1496, 1497, 1498,
	0, 0, 0, 0, 0, 0, 1478, 0, 0, 0,
	0, 1509, 0, 0, 1484, 1485, 1491, 1512, 1490, 1486,
	0, 1483, 1481, 1482, 1474, 1475, 1476, 1477, 1479, 1480,
	1510, 0, 0, 1520, 0, 0, 0, 1500, 1502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1516, 0, 1517,
	0, 0, 0, 0, 0, 0, 1487, 1488, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1508, 0, 0, 0, 0, 0, 0, 0,
	0, 1493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1518, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1507, 0, 0,
	0, 1470, 1471, 0, 1503, 1504, 1505, 1513, 1514, 1515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1506, 1501, 0, 0, 0, 0, 0, 0, 1473, 0,
	0, 0, 0, 1519, 0, 0, 0, 0, 0, 0,
	0, 1499, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1472, 0, 0, 1494,
	0, 0, 0, 0, 0, 1492, 0, 0, 0, 0,
	0, 0, 1489, 0, 0, 0, 2201, 0, 0, 0,
	0, 0, 0, 1470, 1471, 1511, 1503, 1504, 1505, 1513,
	1514, 1515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1506, 1501, 0, 0, 0, 2200, 0, 0,
	1473, 0, 0, 0, 0, 1519, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1495,
	1496, 1497, 1498, 0, 0, 0, 0, 0, 1472, 1478,
	0, 2627, 0, 0, 2626, 0, 0, 1492, 0, 0,
	0, 0, 0, 0, 1489, 0, 0, 0, 0, 0,
	0, 0, 0, 1510, 0, 0, 1520, 0, 0, 1509,
	1500, 1502, 1484, 1485, 1491, 1512, 1490, 1486, 0, 1483,
	1481, 1482, 1474, 1475, 1476, 1477, 1479, 1480, 0, 0,
	1516, 0, 1517, 0, 0, 0, 0, 0, 0, 1487,
	1488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1495, 1496, 1497, 1498, 1508, 0, 0, 0, 0,
	0, 1478, 0, 0, 1493, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1518, 0, 1510, 0, 0, 1520, 0,
	0, 0, 1500, 1502, 0, 0, 0, 0, 0, 0,
	1507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1516, 0, 1517, 0, 0, 0, 0, 0,
	0, 1487, 1488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1508, 0, 0,
	0, 0, 0, 0, 1499, 0, 1493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1494, 0, 0, 1518, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1507, 0, 0, 0, 1470, 1471, 1511, 1503,
	1504, 1505, 1513, 1514, 1515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1506, 1501, 0, 0, 0,
	0, 0, 0, 1473, 0, 0, 0, 0, 1519, 0,
	0, 0, 0, 0, 0, 0, 1499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1472, 0, 0, 1494, 0, 0, 0, 0, 0,
	1492, 0, 0, 0, 0, 0, 0, 1489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1511, 0, 1509, 0, 0, 1484, 1485, 1491, 1512, 1490,
	1486, 0, 1483, 1481, 1482, 1474, 1475, 1476, 1477, 1479,
	1480, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1495, 1496, 1497, 1498, 0, 0,
	0, 0, 0, 0, 1478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1510, 0,
	0, 1520, 0, 0, 1509, 1500, 1502, 1484, 1485, 1491,
	1512, 1490, 1486, 0, 1483, 1481, 1482, 1474, 1475, 1476,
	1477, 1479, 1480, 0, 0, 1516, 0, 1517, 0, 0,
	0, 0, 0, 0, 1487, 1488, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1508, 0, 0, 0, 0, 0, 0, 0, 0, 1493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1518, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1507, 833, 0, 0, 1470,
	1471, 0, 1503, 1504, 1505, 1513, 1514, 1515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1506, 1501,
	0, 0, 0, 0, 0, 0, 1473, 0, 0, 0,
	0, 1519, 0, 0, 0, 0, 0, 0, 0, 1499,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1472, 0, 0, 1494, 0, 0,
	0, 0, 0, 1492, 0, 0, 0, 0, 0, 0,
	1489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1470, 1471, 1511, 1503, 1504, 1505, 1513, 1514, 1515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1506, 1501, 0, 0, 0, 0, 0, 0, 1473, 0,
	0, 0, 0, 1519, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1495, 1496, 1497,
	1498, 0, 0, 0, 0, 0, 1472, 1478, 0, 0,
	0, 0, 0, 0, 0, 1492, 0, 0, 0, 0,
	0, 0, 1489, 0, 0, 0, 0, 0, 0, 0,
	0, 1510, 0, 0, 1520, 0, 0, 1509, 1500, 1502,
	1484, 1485, 1491, 1512, 1490, 1486, 0, 1483, 1481, 1482,
	1474, 1475, 1476, 1477, 1479, 1480, 0, 0, 1516, 0,
	1517, 0, 0, 0, 0, 0, 0, 1487, 1488, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1495,
	1496, 1497, 1498, 1508, 0, 0, 0, 0, 0, 1478,
	0, 0, 1493, 0, 2633, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1518, 0, 1510, 0, 0, 1520, 0, 0, 0,
	1500, 1502, 0, 0, 0, 0, 0, 0, 1507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1516, 0, 1517, 0, 0, 0, 0, 0, 0, 1487,
	1488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1508, 0, 0, 0, 0,
	0, 0, 1499, 0, 1493, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1494, 0, 0, 1518, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1507, 0, 0, 0, 1470, 1471, 1511, 1503, 1504, 1505,
	1513, 1514, 1515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1506, 1501, 0, 0, 0, 2628, 0,
	0, 1473, 0, 0, 0, 0, 1519, 2917, 0, 0,
	0, 0, 0, 0, 1499, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1472,
	0, 0, 1494, 0, 0, 0, 0, 0, 1492, 0,
	0, 0, 0, 0, 0, 1489, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1511, 0,
	1509, 0, 0, 1484, 1485, 1491, 1512, 1490, 1486, 0,
	1483, 1481, 1482, 1474, 1475, 1476, 1477, 1479, 1480, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1495, 1496, 1497, 1498, 0, 0, 0, 0,
	0, 0, 1478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 0, 1520,
	0, 0, 1509, 1500, 1502, 1484, 1485, 1491, 1512, 1490,
	1486, 0, 1483, 1481, 1482, 1474, 1475, 1476, 1477, 1479,
	1480, 0, 0, 1516, 0, 1517, 0, 0, 0, 0,
	0, 0, 1487, 1488, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1508, 0,
	0, 0, 0, 0, 0, 0, 0, 1493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1518, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1507, 0, 0, 0, 1470, 1471, 0,
	1503, 1504, 1505, 1513, 1514, 1515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1506, 1501, 0, 0,
	0, 0, 0, 0, 1473, 0, 0, 0, 0, 1519,
	0, 0, 0, 0, 0, 0, 0, 1499, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1472, 0, 0, 1494, 0, 0, 0, 0,
	0, 1492, 0, 0, 0, 0, 0, 0, 1489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1470,
	1471, 1511, 1503, 1504, 1505, 1513, 1514, 1515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1506, 1501,
	0, 0, 0, 2581, 0, 0, 1473, 0, 0, 0,
	0, 1519, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1495, 1496, 1497, 1498, 0,
	0, 0, 0, 0, 1472, 1478, 0, 0, 0, 0,
	0, 0, 0, 1492, 0, 0, 0, 0, 0, 0,
	1489, 0, 0, 0, 0, 0, 0, 0, 0, 1510,
	0, 0, 1520, 0, 0, 1509, 1500, 1502, 1484, 1485,
	1491, 1512, 1490, 1486, 0, 1483, 1481, 1482, 1474, 1475,
	1476, 1477, 1479, 1480, 0, 0, 1516, 0, 1517, 0,
	0, 0, 0, 0, 0, 1487, 1488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1495, 1496, 1497,
	1498, 1508, 0, 0, 0, 0, 0, 1478, 0, 0,
	1493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1518,
	0, 1510, 0, 0, 1520, 0, 0, 0, 1500, 1502,
	0, 0, 0, 0, 0, 0, 1507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1516, 0,
	1517, 0, 0, 0, 2595, 0, 0, 1487, 1488, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1508, 0, 0, 0, 0, 0, 0,
	1499, 0, 1493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1494, 0,
	0, 1518, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1507, 0,
	0, 0, 1470, 1471, 1511, 1503, 1504, 1505, 1513, 1514,
	1515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1506, 1501, 0, 0, 0, 0, 0, 0, 1473,
	0, 0, 0, 0, 1519, 0, 0, 0, 0, 0,
	0, 0, 1499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1472, 0, 0,
	1494, 0, 0, 0, 0, 0, 1492, 0, 0, 0,
	0, 0, 0, 1489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1511, 0, 1509, 0,
	0, 1484, 1485, 1491, 1512, 1490, 1486, 0, 1483, 1481,
	1482, 1474, 1475, 1476, 1477, 1479, 1480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1495, 1496, 1497, 1498, 0, 0, 0, 0, 0, 0,
	1478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 0, 1520, 0, 0,
	1509, 1500, 1502, 1484, 1485, 1491, 1512, 1490, 1486, 0,
	1483, 1481, 1482, 1474, 1475, 1476, 1477, 1479, 1480, 0,
	0, 1516, 0, 1517, 0, 0, 0, 0, 0, 0,
	1487, 1488, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1508, 0, 0, 0,
	0, 0, 0, 0, 0, 1493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1507, 0, 0, 0, 1470, 1471, 0, 1503, 1504,
	1505, 1513, 1514, 1515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1506, 1501, 0, 0, 0, 0,
	0, 0, 1473, 0, 0, 0, 0, 1519, 0, 0,
	0, 0, 0, 0, 0, 1499, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1472, 0, 0, 1494, 0, 0, 0, 0, 0, 1492,
	0, 0, 0, 0, 0, 0, 1489, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1470, 1471, 1511,
	1503, 1504, 1505, 1513, 1514, 1515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1501, 0, 0,
	0, 0, 0, 0, 1473, 0, 0, 0, 0, 1519,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1495, 1496, 1497, 1498, 0, 0, 0,
	0, 0, 1472, 1478, 0, 0, 0, 0, 0, 0,
	0, 1492, 0, 0, 0, 0, 0, 0, 1489, 0,
	0, 0, 0, 0, 0, 0, 0, 1510, 0, 0,
	1520, 0, 0, 1509, 1500, 1502, 1484, 1485, 1491, 1512,
	1490, 1486, 0, 1483, 1481, 1482, 1474, 1475, 1476, 1477,
	1479, 1480, 0, 0, 1516, 0, 1517, 0, 0, 0,
	0, 0, 0, 1487, 1488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1495, 1496, 1497, 1498, 1508,
	0, 0, 0, 0, 0, 1478, 0, 0, 1493, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1518, 0, 1510,
	0, 0, 1520, 0, 0, 0, 1500, 1502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1516, 0, 1517, 0,
	0, 0, 0, 0, 0, 1487, 1488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1508, 0, 0, 0, 0, 0, 0, 1499, 0,
	1493, 0, 0, 1687, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1494, 0, 0, 1518,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1511, 1704, 1681, 1688, 1671, 1714, 1713, 0,
	0, 1673, 1672, 0, 0, 0, 0, 0, 0, 1724,
	1725, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1494, 0,
	1715, 0, 1711, 1710, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1709, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1511, 0, 1509, 0, 0, 1484,
	1485, 1491, 1512, 1490, 1486, 0, 1483, 1481, 1482, 1474,
	1475, 1476, 1477, 1479, 1480, 1708, 1706, 1707, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1683, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1697, 1686,
	1699, 1701, 1702, 1703, 1698, 0, 1691, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1720, 1721, 1509, 0,
	0, 1484, 1485, 1491, 1512, 1490, 1486, 0, 1483, 1481,
	1482, 1474, 1475, 1476, 1477, 1479, 1480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1675, 0, 0, 0, 0, 0, 0, 0,
	0, 738, 0, 773, 0, 0, 0, 1712, 0, 0,
	0, 1684, 0, 1685, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 745, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 757,
	743, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1705, 0, 0, 0, 1694, 1692,
	1693, 1696, 1695, 744, 0, 0, 0, 0, 747, 0,
	0, 0, 779, 0, 0, 0, 0, 0, 0, 754,
	755, 0, 616, 0, 0, 766, 0, 0, 0, 0,
	0, 0, 0, 1676, 1677, 1679, 1680, 0, 774, 749,
	0, 0, 0, 0, 0, 617, 0, 0, 0, 0,
	1700, 1678, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1723, 0, 0, 0, 0, 772, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1674, 618, 637,
	1716, 1717, 1718, 1719, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 750, 0,
	619, 0, 0, 620, 0, 0, 742, 0, 0, 0,
	1682, 0, 0, 0, 0, 1689, 1722, 0, 0, 644,
	0, 751, 752, 0, 0, 621, 0, 0, 0, 0,
	0, 0, 0, 0, 642, 0, 0, 0, 0, 0,
	0, 0, 0, 759, 758, 0, 0, 0, 0, 0,
	0, 753, 0, 622, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 778, 0, 0,
	0, 0, 0, 623, 0, 0, 624, 646, 0, 0,
	0, 651, 0, 775, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 748, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 746, 0, 0,
	0, 770, 771, 0, 0, 0, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 768, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 762, 0, 0, 0,
	0, 0, 763, 0, 0, 0, 0, 0, 0, 740,
	625, 776, 0, 0, 0, 0, 0, 0, 0, 0,
	628, 0, 0, 0, 0, 0, 0, 741, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 764, 0, 629,
	0, 761, 0, 0, 0, 0, 0, 0, 0, 0,
	777, 0, 0, 0, 0, 0, 0, 0, 765, 0,
	0, 0, 0, 0, 0, 0, 650, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 630, 0, 767, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 631,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	769, 0, 0, 0, 0, 0, 0, 0, 636, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	632, 0, 0, 649, 0, 648, 0, 0, 633, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 634, 0, 0, 0, 0, 641, 0, 0, 0,
	0, 652, 0, 647, 0, 0, 0, 0, 639,
}
var sqlPact = [...]int{

	6653, -1000, -1000, -1000, -1000, -1000, -1000, 184, 183, 179,
	167, 165, 162, 160, 157, -1000, -1000, -1000, 155, -1000,
	-1000, 154, -1000, 153, 151, 150, 148, -1000, 147, 146,
	145, -1000, -1000, -1000, -1000, 144, 143, 139, 56398, 1716,
	67950, 59378, 1726, 50832, 67520, 50402, 67090, 66660, 137, -1000,
	66230, 135, 133, 130, -1000, -1000, 128, 1840, 41335, 127,
	124, 114, 1800, 113, 112, -1000, 111, -1000, 78600, 1226,
	-1000, 108, 103, -1000, 6412, 306, 58524, 2187, 102, 100,
	41766, 2178, 2216, -1000, -1000, 1530, -1000, -1000, 98, 96,
	95, 94, 93, 90, 89, 88, 84, -1000, 83, 81,
	80, 75, 74, 73, 72, -1000, 71, 70, 69, 67,
	65, 63, 62, 61, 60, 57, 56, -1000, 78519, 1496,
	1409, 1407, 1374, 1344, 1381, 841, 55, 54, 53, 52,
	50, 49, 46, -1000, -1000, 42, 41, 40, 39, -1000,
	38, 33, 152, 30, 28, 27, 25, 22, 2076, 2150,
	1251, 744, 20808, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 72190, 68374, 20, -49,
	19, -1000, 2536, 821, 34013, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 393, -1000, -1000, -1000, 259,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1462, 627, -1000, -1000, -1000,
	65800, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1704,
	-65, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 626, -1000,
	1690, 166, 1601, -1000, -1000, -1000, -1000, -1000, 68374, -1000,
	-1000, 2882, 2881, 1572, 620, 65376, -1000, 1216, -1000, 778,
	23538, -1000, 984, -1000, 23538, 258, -1000, -1000, -1000, -1000,
	-1000, 49972, 16246, 49542, 49112, 45262, 64946, 15806, 55974, 36173,
	1049, -1000, -1000, -1000, -1000, -1000, -7, 46124, 68374, -1000,
	256, -1000, -1000, -1000, -1000, -1000, -1000, 30012, 550, 29547,
	544, 29082, 462, -1000, -1000, -1000, -1000, 2879, 2878, 936,
	2877, 2501, 71766, 1411, 2868, 1360, 1000, 867, 2867, 2866,
	2863, 2861, 2860, 2857, 2853, 1135, 64516, 2198, 1271, 44822,
	44382, 56398, 56398, 2020, 64086, 1118, 1100, -1000, -1000, -1000,
	-1000, -1000, -1000, 2359, 2212, 2201, 38765, -1000, -1000, 2850,
	2849, 2839, 2838, 2837, 71342, 1394, 2836, 1922, 2835, 2833,
	2830, 2828, 2827, 2821, 2820, 2817, 2816, -1000, 55544, 55114,
	54684, 54254, 63656, 43942, 43502, -1000, -1000, -1000, 35729, 6963,
	5257, 63226, 37049, 56398, 56398, -1000, -1000, 30465, 129, -1000,
	-1000, -1000, 2139, -1000, 30465, 129, -1000, 68374, -1000, 2188,
	1485, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2165, 1320, 2722, 43062, 1566, 1116, 2554, 2350, 2341, 1250,
	1891, 2317, 2311, 2296, 2292, 2287, 1371, 1978, 458, 20343,
	1230, 1245, 2278, 2275, 2738, 1662, 48682, 2815, 2814, 2534,
	2265, 2264, 2134, -1000, -1000, -1000, -1000, 1164, -1000, -1000,
	51680, -1000, -1000, 991, -1000, -1000, 991, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1041, 70494, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1298, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2112, -1000, 1525, -1000, -1000, 1758, 1125, 2150, 1909,
	2533, 2533, 2533, 2582, 368, 360, -1000, 152, -1000, -1000,
	77691, -1000, -1000, 30465, 30465, 30465, 30465, 30465, 1562, -1000,
	616, -1000, -1000, 665, -1000, 615, 547, -1000, -1000, -1000,
	-1000, -1000, -1000, 614, 2742, -1000, -1000, -1000, -1000, -1000,
	2701, -1000, 18495, -1000, -1000, -1000, 430, 613, 30465, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 817, -1000, 254, 797, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 536, 1455, 535, 535, 535, -1000, -1000, 862, -1000,
	-1000, -1000, 269, 534, 268, 532, -1000, -1000, -1000, -1000,
	2185, 611, 609, -1000, 608, 607, 606, -1000, -1000, -1000,
	603, 602, 601, 599, 598, 590, 589, 582, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 861, -1000, 578, 573,
	571, 562, 560, 559, 557, 555, 552, -1000, -1000, -8,
	68374, -1000, 393, -8, -1000, -1000, 549, -1000, 23991, 23991,
	23991, -1000, -1000, 1688, 30465, -1000, 2037, -1000, -1, -1,
	720, 34869, -1000, 33153, 720, 395, 671, 38335, -1000, 2133,
	-1000, -1000, 548, 253, -1000, -1000, 2132, 68374, 16684, 68374,
	56398, 56398, 56398, 2430, 30465, -1000, -1000, 42622, 68374, 56822,
	2656, 78269, 42622, 68374, 2184, -1000, -1000, -1000, 68374, -1000,
	30465, -1000, 2655, 1210, 46552, 2614, -40, -1000, -1000, -1000,
	-1000, -1000, -1000, 1896, 1924, 961, 1753, 1132, -1000, 23538,
	2492, -1000, -1000, -1000, 249, 16684, -1000, 2410, 2400, 1051,
	-1000, 1750, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1419, 2396, -1000, 1445, 2395, 1416, -1000, -1000, 829, 2394,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1608,
	-1000, -1000, 2521, -1000, -1000, 1367, 2391, 0, -1000, -1000,
	715, -1000, 45700, 36173, 46124, -11, -1000, -1000, -70, -1000,
	15366, 77691, -1000, -1000, -1000, 77691, 734, -1000, -1000, 2388,
	-1000, 77691, 711, -1000, -1000, 2382, -1000, -1000, -1000, 2813,
	-1000, 2811, 1833, 2809, 2806, 2805, -1000, 1340, 1486, 2804,
	-1000, 2803, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 53824,
	1684, -1000, -1000, 52964, 53394, 865, -1000, 808, 1831, -1000,
	-1000, 1823, -1000, 794, -1000, 2801, 62796, 2035, 808, 1822,
	-1000, -1000, -1000, -1000, -1000, 39621, -1000, 39621, -1000, 39621,
	-1000, 1184, -1000, 70918, -1, -1, 2701, -1000, -1000, -1000,
	-1000, -1000, 2381, 2800, 2799, 2797, -1000, 68374, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 170, 2376, -1000,
	-1000, 170, 2373, -1000, 170, 2372, -1000, 169, 2370, -1000,
	-1000, 1641, 2361, -1000, -81, 2357, -1000, -1000, -81, 2356,
	-1000, -15, -1000, -1000, -1000, 821, -1000, 35299, -1000, 35299,
	62366, 45700, 799, 605, 40905, 77691, -1000, 36173, 77691, -1000,
	45700, 52964, -1000, 61936, 52540, -1000, -1000, 1129, 1970, -1000,
	-1000, -1000, -1000, 45700, 45700, 45700, -1000, 61506, -1000, -1000,
	1617, 1348, 2532, 1596, 56398, -1000, 1408, -1000, -1000, -1000,
	2545, 2180, -1000, 42194, 58094, -1000, 57670, -1000, 57246, -1000,
	56398, -1000, 56398, -1000, 2796, 2795, 2792, -1000, 2789, 2540,
	77691, 2538, -1000, 2301, 1368, 1359, 68374, -1000, -1000, 68374,
	-1000, 68374, -1000, -1000, -1000, 1893, -1000, -1000, -1000, -1000,
	56398, -1000, -1000, -1000, -1000, -1000, -1000, 2179, -1000, 1300,
	-1000, 1391, -1000, 1121, -1000, -1000, 175, -1000, -1000, -40,
	-1000, 70494, -1000, -1000, 2150, 1909, -1000, 68374, -1000, 1269,
	56398, -1000, 1965, -1000, 1168, -1000, 2150, 1722, 1967, 28617,
	1915, 30465, 152, -1000, -1000, 152, 152, 23085, -1000, -1000,
	78269, 78269, 16684, 1071, 30465, 30465, 30465, 30465, 30465, 30465,
	30465, 30465, 30465, 30465, 30465, 30465, 30465, 30465, 30465, 30465,
	30465, 30465, 30465, 30465, 30465, 30465, 30465, 30465, 30465, 30465,
	30465, 30465, 30465, 30465, 30465, 30465, 30465, 30465, 30465, 1921,
	30465, 1032, 30465, 30465, 30465, 30465, 2019, -1000, -1000, 1484,
	444, 1560, -1000, 2711, 2711, 2711, 78036, 78036, 504, 2788,
	665, -1000, 30465, -1000, 129, 30465, 17124, -1000, -1000, -1000,
	360, 7844, 1809, -1000, 359, 17589, -1000, -1000, -1000, 18495,
	547, 28152, 30465, 856, 77691, 1155, 2709, 14928, 2207, 2080,
	-1000, 2730, -1000, -1000, 2709, -1000, -1000, -1000, -1000, 2709,
	1070, 1061, 2709, -1000, 2709, 2709, 542, 716, 712, 19878,
	19413, 617, 30465, 30465, 30465, 30465, 30465, 30465, 30465, 30465,
	-1000, 27699, 27234, 26769, 31824, 26304, 30465, 18948, 25839, 25374,
	68374, -8, 2653, 30465, 134, -1000, 76212, -1000, 134, 134,
	541, -21, 77691, 1947, 1947, 34441, 1642, 1571, 1571, 1571,
	-1000, 720, 11408, 720, 60654, 1577, 720, 720, 224, 273,
	356, 32725, 2037, 60654, 647, 540, 18, 17, 13, -1000,
	-1000, 12, 10, -1000, -1000, 56398, 539, 17124, 16684, 1147,
	-22, 222, 1990, 1987, 1986, -1000, 1985, 1290, -23, 1027,
	-57, -1000, 3955, -24, -1000, 1082, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 860, 538,
	537, 367, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 536, 1455,
	535, 535, 535, -1000, -1000, -1000, 269, 534, 268, 532,
	-1000, -1000, -1000, -1000, -1000, -1000, 2130, -70, 56822, 749,
	-30, 940, -40, -1000, -1000, -1000, 46552, 991, -1000, 1331,
	-1000, -1000, -1000, -1000, -1000, -1000, 1084, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 817, -1000, 2719, -1000, -1000, 2728,
	-10, -1000, -1000, 16684, -1000, -41, 1361, -1000, 48252, 1739,
	2527, 2516, 1181, -1000, 1150, 2575, 51680, 2617, 2632, 733,
	-1000, 2127, -1000, -1000, 775, 1297, 1022, 51680, 1445, -1000,
	78269, -1000, 1996, 2574, 1176, 1162, 1176, 1176, 1141, -1000,
	51680, 1009, 1543, 45700, -1000, 1008, -1000, -48, 2616, 2625,
	718, -1000, 2122, 1006, -1000, -1000, 56398, 16684, 2044, -1000,
	-38, 715, -11, 46124, 68374, 220, -1000, 30465, 129, 30465,
	129, -1000, -1000, 2354, -1000, -1000, -1000, 2787, 1432, 1920,
	-1000, -1000, -1000, 531, 1821, 2117, 68374, 1997, -16, 56398,
	-1000, 1445, 1808, -1000, -1000, 52110, -1000, 1541, -1000, 2352,
	2348, 558, 2785, -1000, 1653, 1794, -1000, -1000, -1000, 70070,
	1076, 2346, 900, 707, 2648, -1000, 707, 40049, -1000, 68374,
	-1000, -1000, 68374, -1000, -1000, -1000, 2784, -1000, 56398, -1000,
	-1000, 56398, -1000, 56398, -1000, 56398, -1000, 56398, 56398, -1000,
	68374, 45700, 45700, 45700, 3966, 47404, -39, -46, 352, -1000,
	61082, 68374, 899, 47828, 68374, 2481, -55, -1000, 799, 799,
	715, -1000, 715, -1000, 56398, 2176, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2781, 2780, -1000, -1000, -1000, 807, 56398,
	68374, 56398, -1000, -1000, 68374, -1000, 68374, -1000, 807, 68374,
	807, 68374, 807, 68374, -1000, -1000, -1000, -1000, -1000, -1000,
	129, 30465, 1209, -1000, 2166, -1000, 2164, -1000, 37, -1000,
	-1000, -1000, -1000, 1538, 56398, 56398, 56398, 56398, 68374, 56398,
	-1000, 51680, -1000, -1000, 2150, -1000, -1000, 1865, -1000, -12,
	911, -1000, -1000, -1000, -1000, -1000, 77691, 463, -1000, -1000,
	77691, 1370, 2008, -1000, 2008, -13, -1000, 75867, 1960, 56398,
	-1000, -1000, -1000, -1000, -1000, 769, 1107, 1107, 1045, 1045,
	1045, 1045, 2660, 4362, 4493, 487, 5383, 5383, 244, 244,
	244, 244, 244, 5383, 6001, 998, 998, 6001, 6001, 6001,
	6001, 6001, 998, 998, 998, 5383, 5383, 5383, 78036, 77954,
	10759, 30465, 30465, 1003, 1460, 444, 8425, 30465, 7120, 7120,
	7120, 7120, -1000, 1504, -1000, -1000, -1000, -1000, 2111, 530,
	31824, 31824, -1000, -1000, -1000, -1000, 18042, 30465, -1000, -1000,
	-1000, -1000, 24909, -1000, -1000, 75533, -253, 351, -198, -20,
	-1000, 30465, 30465, 30465, 350, -1000, 198, 30465, 68374, -1000,
	10875, 640, -140, -1000, -52, 1180, -1000, 30465, -1000, -1000,
	1002, -1000, 995, 987, 985, -1000, 526, 346, -1000, 195,
	-1000, 1569, 525, 524, 345, -54, 343, 751, 750, 341,
	339, 337, 30465, -1000, -1000, -1000, -1000, -1000, 75245, -1000,
	-1000, 74957, -1000, -1000, -1000, 77428, 10612, 10289, 10142, 5896,
	9818, 9665, -59, 336, -1000, 2109, -198, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 335, -1000, 333, -1000, 77346,
	-198, 330, 7754, -1000, 31824, 31824, 31824, -1000, 317, -1000,
	76130, -1000, 77083, 24456, 24456, 24456, 314, 76820, 30465, -198,
	-67, -1000, -68, -1000, -1000, 522, -74, 844, 23991, 33583,
	16684, -1000, 844, 844, 30465, -1000, 30465, 1975, -1000, -1000,
	-1000, 1972, 1943, 1947, 34441, -1000, -1000, -1000, -1000, 60654,
	-1000, 2701, 2349, -1000, 60654, -1000, -1000, 68374, 393, -1000,
	60654, 60654, 16684, 720, -1000, 720, 60654, 496, -1000, -1000,
	-1000, -1000, -1000, 312, 37477, -20, 192, 799, -1000, 16684,
	2028, 2028, 2028, 2028, -1000, -1000, 68374, 2670, -1000, 1520,
	-1000, 78269, -1000, 664, 943, 520, -1000, 2709, 2709, -1000,
	2709, 68374, 105, 23538, -1000, 991, -1000, -1000, 1256, -1000,
	1438, -1000, 1055, -1000, -1000, -1000, 23538, -1000, 2043, 68374,
	68374, 56398, -1000, -1000, 1792, 69646, 1790, 78269, 68374, -1000,
	-1000, 518, 517, 1952, 1942, 68374, 68374, 1941, 69222, 68798,
	68374, 1550, 30465, 1586, 1830, 129, 129, -1000, -1000, 129,
	512, 1020, 56398, 56398, 56398, 1392, -1000, -1000, -1000, -1000,
	-1000, 51256, -1000, -1000, 2724, -1000, 1176, -1000, -1000, -1000,
	1176, 1445, 1378, 56398, 45700, 827, 68374, 1547, 129, 129,
	-1000, -1000, 129, 510, 16684, 1415, -1000, 799, 2106, -1000,
	2044, -1000, -1000, 14490, 77691, -1000, 77691, -1000, 68374, -1000,
	864, 68374, 47828, 811, 2339, 39193, -70, 799, 45700, 56398,
	-16, -1000, 1445, 2334, 393, -1000, -1000, 45700, 45700, 45700,
	2777, 509, 2776, -1000, 56398, 2332, 1652, 1789, 2307, 704,
	68374, 844, 34441, 1403, -1000, 37907, 877, 68374, 1347, 104,
	-1000, -1000, -1000, 35, 68374, -1000, 2775, -1000, -1000, 170,
	170, 170, -1000, 169, 1641, -1000, -81, -81, -1000, -1000,
	3966, 3966, 799, -17, 508, -1000, 738, 717, 36611, 45700,
	-75, -1000, -1000, -1000, -1000, -1000, 56398, 68374, 596, 2034,
	68374, -88, -1000, 188, 506, 799, 36173, 2101, -1000, -1000,
	826, -1000, 1110, -1000, -1000, -1000, -1000, -1000, -1000, -2,
	-70, -70, -1000, 807, -1000, 807, -1000, 807, -1000, 77691,
	-1000, 1200, 1199, 68374, -1000, 16684, 68374, 56398, 16684, 56398,
	2146, 2144, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1370, -1000, 30465, -1000, -1000, -1000, 23085, 1741, -1000, -1000,
	56398, -3, 30465, 30465, 6411, 5536, 30465, 31824, 31824, -1000,
	30465, 4688, -1000, -1000, -1000, -1000, -1000, 2100, 502, 30465,
	78269, 5939, 4454, -1000, 310, 9114, 6001, -1000, 30465, -1000,
	308, 22632, -1000, 76475, -29, -89, -1000, 14052, -198, -95,
	-1000, -1000, 660, -1000, 2408, -1000, 30465, 76738, 1851, 1565,
	1451, 1220, 2709, 2740, 13614, -1000, 40477, 849, 1581, -1000,
	-1000, 2709, 756, -1000, -1000, -1000, 756, -1000, 74911, -1000,
	-1000, 78269, 78269, 30465, 30465, -1000, 30465, 30465, 30465, -1000,
	-1000, 30465, -1000, -1000, 2098, 30465, -1000, 78269, 78269, 31824,
	31824, 31824, 31824, 31824, 31824, 31824, 31824, 31824, 31824, 31824,
	31824, 31824, 31824, 31824, 31824, 31824, 31824, 31824, 1907, 31824,
	2688, 2688, 2688, -1000, 2096, 2098, 30465, 30465, 78269, 307,
	304, 303, -1000, 30465, -198, -1000, -1000, 3966, -1000, 2078,
	-1000, 30465, -1000, -87, -1000, 2037, -1000, -1000, 2078, 2078,
	-96, 77691, 34441, 34441, -1000, 498, 30465, 1948, -1000, -1000,
	639, -247, -1000, 713, -1000, -1000, -1000, -1000, -1000, 393,
	-1000, -1000, -1000, 187, 60654, 60654, 635, -1000, -98, -1000,
	-1000, -101, -1000, 2647, 301, 16684, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -70, 1587, 2736, -1000, 2723, 659,
	632, 2709, 300, 299, 298, -70, 68374, -1000, -40, -1000,
	-1000, -1000, 30465, -1000, -1000, 2520, 982, 979, -1000, 2330,
	-1000, 1788, -1000, 884, -1000, 1325, -1000, 30465, 30465, 488,
	486, 1417, 2774, 889, 2306, 1641, 2303, 1641, -1000, -1000,
	784, -1000, 77691, 484, 473, -1000, -41, 1350, 824, -1000,
	-1000, 30465, 30465, 60230, -1000, 358, 2521, -5, -1000, 972,
	-1000, -1000, -1000, -1000, 1445, 968, -1000, -1000, 1537, -1000,
	-1000, 816, -1000, -1000, 30465, -1000, -48, 967, -1000, 45700,
	799, -1000, 2772, 2769, 2768, 296, -106, -64, 78269, 2629,
	1681, 68374, 56398, 771, -1000, 2701, -1000, -1000, -1000, 56398,
	2627, -1000, 808, -1000, -1000, 2767, -1000, 888, 16684, 56398,
	2297, 1897, 704, 46980, -1000, 808, 1581, -129, -1000, 1347,
	22167, 2522, -107, -1000, -1000, -1000, 844, 40049, 34441, 30465,
	2765, -109, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 59806, 59806, 45700, 45700, 45700, 799, 68374, 68374, 47828,
	2764, 471, 68374, 68374, 466, -1000, 68374, 68374, 2758, 45700,
	-1000, -1000, 129, -1000, 1591, 56398, 13176, -1000, -1000, -1000,
	-1000, -1000, 807, -1000, -1000, 1549, 1725, 1549, 1327, 1315,
	1606, 74623, -1000, -1000, 1982, 2498, 16684, 2635, 7120, 30465,
	30465, 334, 1259, 858, 7120, 30465, 30465, 78269, 4406, -114,
	30465, 30465, -1000, 30465, 631, 77691, 2734, 30465, 293, 292,
	-1000, -1000, -1000, -1000, -1000, -1000, 77691, 30465, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 290, -1000, 186, -1000, -1000,
	-1000, 72614, -1000, 30465, 288, 286, -1000, -1000, -1000, 285,
	283, 8573, 5302, 74335, 74289, 74001, 77691, 2096, 77691, -1000,
	-1000, 966, 966, 1112, 1112, 1112, 1112, 2688, 500, 1096,
	422, 217, 217, 217, 396, 1123, 1123, 217, 217, 217,
	2097, 1914, 465, 7893, -1000, -1000, 77691, 77691, 282, -1000,
	-1000, -1000, -198, 278, 2074, 2573, 77691, -1000, 34441, 2074,
	2074, -1000, -1000, 1943, 68374, 77691, 34441, -1000, 2349, -1000,
	11858, -1000, 16684, -1000, -1000, -1000, -1000, 2701, -1000, 37477,
	-1000, 464, -1000, 36, -1000, -1000, 630, 2757, 655, 277,
	-1000, -1000, -1000, -70, 77691, 68374, 68374, 68374, 2257, -1000,
	2955, -1000, 73713, -115, -1000, 75867, 30465, 68374, -1000, 1510,
	2024, 925, -1000, 2547, 68374, -1000, 68374, -1000, -1000, 68374,
	68374, 56398, 2244, -116, 77691, -73, -1000, 708, -1000, 1128,
	-1000, 12738, 56398, 56398, 45700, 2241, -117, 16684, -81, -1000,
	-1000, -1000, -1000, 2025, -1000, 58948, 1679, 129, -1000, 2755,
	459, -1000, 1590, -1000, 618, 1445, 129, -1000, -1000, 457,
	68374, 1645, 456, 16684, 1904, 704, 46980, -1000, 1076, 1967,
	-1000, -94, -1000, 470, 129, 1581, -1000, -129, 77691, -1000,
	705, -1000, -127, -1000, -1000, 265, -1000, 2474, 2468, -1000,
	-1000, 30465, 453, 452, 68374, 2462, -1000, -1000, -128, -1000,
	1740, -1000, -1000, -1000, -1000, -1000, 16684, 1292, -1000, 451,
	449, -1000, -1000, -1000, -1000, -1000, 2498, 7120, 7120, 30465,
	30465, 30465, 7120, 4406, -143, -1000, 7120, 7120, -198, -1000,
	-1000, 76475, -1000, -1000, 77691, -1000, 12300, 1551, -1000, 73667,
	-1000, -1000, -1000, -1000, 30465, 30465, -1000, -1000, -1000, -1000,
	-1000, 31824, 2094, 448, 78269, -1000, -1000, 831, 30465, 30465,
	2037, 831, 831, -1000, -144, -1000, -1000, -1000, 2701, 36,
	-1000, -1000, 2751, 16684, 651, -1000, 2750, -1000, -1000, -1000,
	-1000, 68374, -1000, 68374, -1000, 16684, 68374, 2093, 1777, -1000,
	-1000, 1936, 447, 31824, 56398, 725, 2099, 1428, 30465, 1741,
	-151, -152, 1768, -1000, -1000, 1765, 30465, -1000, 78269, 445,
	1641, 1641, -153, -154, -1000, 30465, 962, 68374, 21714, -1000,
	2748, 2521, -1000, -1000, -1000, 30465, 958, -1000, 1547, 2053,
	-1000, -1000, -1000, -1000, 1932, -1000, -1000, 68374, 1930, 804,
	-1000, 47828, 811, 792, -1000, -1000, -1000, 30465, -1000, 56398,
	30465, 1644, -1000, 704, 46980, -1000, 2307, 1347, -1000, 2415,
	68374, 2512, -1000, 1967, 444, -1000, 799, 443, 442, -160,
	30465, 30465, -162, 440, 799, -138, -1000, 719, 703, -1000,
	-1000, 56398, 56398, 30465, 30465, -1000, 7120, 7120, 7120, -1000,
	261, -1000, -1000, 1581, 2570, -1000, 73379, 73091, 4597, 31824,
	78269, -163, -1000, 68374, 77691, -198, -1000, -1000, -1000, 423,
	-1000, 2747, -1000, -1000, 2569, -1000, -1000, -1000, 68374, 1784,
	-1000, -1000, 30465, 7893, 439, 30465, -1000, -1000, 2021, 2138,
	2025, 436, -1000, -1000, -1000, -1000, -1000, 1401, -1000, -1000,
	77691, 2551, 30465, -1000, -1000, 435, 434, 77691, 432, 699,
	2091, -1000, -1000, -1000, 77691, 431, 811, -1000, 1554, 1679,
	425, -1000, -1000, -1000, 1993, 168, 2626, 792, -1000, 2697,
	-1000, -168, 888, -169, 56398, 46980, -1000, 1897, -1000, 1069,
	-170, 68374, 1347, -1000, -1000, 45700, 45700, 1428, -171, -176,
	-1000, 45700, -1000, 1740, -1000, 68374, -1000, 68374, -1000, -1000,
	-178, -179, -1000, 1480, 30465, -1000, -1000, 4597, -184, -1000,
	-141, -1000, 2624, -1000, -1000, -1000, -1000, 2251, 73045, 1860,
	68374, 7280, 2128, -1000, -1000, 1547, 68374, 56398, 887, 16684,
	-185, 1549, 1549, 30465, 21261, 1552, 30465, -1000, 56398, 68374,
	-1000, 2445, 2025, 129, -1000, -1000, 1428, 420, 1428, 404,
	-1000, 1904, 1172, -1000, 844, -1000, -1000, -186, -191, 2025,
	1428, -1000, -192, -1000, -193, -199, -1000, -1000, 136, 31371,
	31371, 31371, -198, -1000, 68374, 403, 2233, -1000, 1610, 1532,
	131, 912, -1000, -1000, 2099, -200, 393, -1000, 30465, -1000,
	-1000, -205, -1000, 876, -208, -1000, 874, -215, -1000, 2090,
	-1000, -216, 383, -217, -1000, -1000, -1000, 1547, 804, 2025,
	30465, 2025, 30465, -1000, 40049, -1000, 799, 799, 1547, 2025,
	799, -1000, -1000, -1000, 2293, -1000, 32277, 1646, 1309, 75579,
	2293, 2293, -1000, -1000, 68374, -1000, 1622, 1616, 1218, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1860, 77691, -1000,
	1549, 2047, -1000, 1549, 2088, -1000, 1534, -1000, 68374, -1000,
	68374, 811, -1000, 1547, -222, 1547, -225, -206, -1000, -1000,
	-1000, 1547, -1000, -1000, 1580, 2630, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2433, -1000, 909, 1811, 1811,
	1610, -1000, 377, -1000, 376, -1000, -228, -1000, -1000, 836,
	1428, 836, 1428, -1000, -1000, 1294, -1000, -1000, 1568, 30918,
	-1000, 2673, -1000, -1000, 1913, -1000, 2099, 30465, 30465, 1639,
	-1000, 2746, 2025, -1000, 2025, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -230, -231, -1000, -1000, -1000, -1000, 1547, 1547,
	1547, 952, 836, 836, -1000, 372, -1000, -1000, 30465, -233,
	1547, -1000,
}
var sqlPgo = [...]int{

	0, 3397, 3394, 3393, 3392, 3391, 3388, 3387, 3385, 3384,
	3381, 3379, 3378, 3377, 3376, 3374, 3373, 3370, 3367, 3365,
	3364, 3362, 3357, 3356, 3354, 3348, 3346, 3344, 3343, 3336,
	3329, 3328, 3327, 3317, 3309, 3308, 3305, 3304, 3301, 3299,
	3298, 3297, 3296, 3295, 3294, 3282, 3279, 3278, 37, 3275,
	3274, 3273, 3271, 3270, 3269, 3267, 3265, 3262, 3261, 3260,
	3259, 3258, 3257, 3253, 3251, 3249, 35, 3245, 216, 3243,
	3242, 3240, 3238, 3237, 3236, 3235, 3233, 3231, 3230, 215,
	3227, 137, 3223, 3222, 3221, 3219, 3218, 212, 3213, 3211,
	3208, 3201, 3199, 3197, 3196, 3195, 121, 3194, 3193, 233,
	3192, 3190, 3189, 3188, 3187, 3185, 3184, 3183, 3182, 3181,
	190, 3180, 206, 3179, 3178, 3177, 3176, 3175, 3172, 3171,
	3166, 3162, 3161, 3160, 3159, 3150, 3147, 3146, 3145, 3144,
	3142, 3140, 3136, 3135, 3134, 3133, 3130, 3129, 3128, 3126,
	230, 150, 3124, 3122, 205, 201, 3121, 131, 100, 97,
	66, 3120, 89, 336, 196, 7672, 189, 3119, 3117, 3115,
	154, 3110, 3109, 3107, 3106, 82, 60, 134, 138, 129,
	127, 214, 3105, 3104, 74, 64, 33, 28, 104, 3103,
	3102, 3101, 1948, 101, 3100, 3098, 204, 184, 3090, 1575,
	3089, 135, 80, 103, 87, 90, 3088, 114, 19, 3087,
	166, 30, 3085, 120, 68, 31, 5544, 7970, 3084, 94,
	221, 75, 220, 187, 164, 176, 173, 130, 142, 3074,
	192, 3073, 73, 157, 3072, 3071, 3070, 43, 149, 76,
	3069, 11, 3, 160, 17, 92, 14, 3067, 18, 3061,
	3059, 3057, 3055, 27, 125, 3054, 111, 58, 3053, 29,
	3049, 61, 156, 3048, 169, 95, 3046, 3044, 197, 153,
	185, 3043, 10, 175, 3042, 3040, 3037, 3036, 3033, 96,
	21, 98, 3032, 3031, 106, 181, 3030, 52, 3029, 126,
	55, 108, 218, 99, 165, 86, 170, 140, 172, 3025,
	3024, 3023, 182, 3022, 3019, 159, 117, 3017, 3016, 217,
	36, 56, 180, 53, 3015, 118, 3014, 147, 3013, 3012,
	3011, 210, 141, 162, 6, 54, 93, 26, 9, 179,
	113, 191, 84, 3010, 3606, 1504, 1359, 3009, 107, 91,
	50, 88, 115, 200, 49, 3008, 3007, 1332, 3006, 3005,
	3004, 3002, 143, 3000, 2999, 2998, 109, 128, 171, 2996,
	116, 63, 12, 119, 188, 208, 85, 158, 155, 194,
	2994, 139, 2993, 40, 144, 2989, 151, 203, 122, 2985,
	136, 112, 2984, 161, 2983, 2982, 2977, 2975, 2974, 2969,
	2964, 67, 2963, 110, 2961, 2959, 146, 174, 132, 78,
	34, 2958, 71, 72, 2957, 148, 57, 2953, 324, 32,
	0, 6595, 5263, 6328, 2951, 1500, 2949, 168, 105, 2944,
	2941, 2936, 79, 2935, 65, 2934, 2933, 38, 2931, 15,
	4, 7, 16, 13, 1511, 1041, 2930, 2929, 83, 102,
	123, 2928, 209, 167, 2923, 2922, 2921, 62, 2920, 25,
	2919, 22, 2916, 2912, 23, 5, 24, 2910, 2909, 186,
	2908, 183, 2906, 2905, 2641, 2904, 198, 70, 2903, 195,
	2902, 133, 163, 2901, 2900, 2899, 2898, 193, 2897, 2896,
	8, 20, 1, 2895, 2893, 2891, 152, 2, 2386, 2890,
	2888, 69, 2886, 2885, 145,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 3, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 12, 12, 7, 7, 8, 8, 8, 36,
	36, 10, 10, 9, 9, 9, 11, 11, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 14, 14, 26,
	26, 15, 15, 28, 28, 16, 16, 29, 29, 456,
	456, 19, 31, 20, 32, 13, 457, 457, 457, 457,
	24, 21, 33, 22, 22, 22, 22, 22, 151, 151,
	151, 151, 18, 18, 27, 27, 168, 168, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	455, 455, 170, 170, 169, 164, 164, 458, 458, 171,
	171, 171, 173, 173, 37, 37, 37, 95, 95, 96,
	96, 97, 97, 152, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 83, 83, 398, 398, 399, 399, 147,
	147, 148, 148, 148, 148, 149, 149, 150, 150, 150,
	51, 39, 39, 39, 39, 39, 39, 39, 40, 40,
	40, 40, 41, 41, 41, 41, 41, 41, 42, 42,
	42, 42, 42, 42, 49, 49, 49, 49, 141, 141,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 464,
	464, 464, 464, 464, 464, 464, 464, 464, 464, 464,
	464, 464, 464, 464, 464, 464, 464, 464, 464, 464,
	465, 465, 466, 466, 467, 467, 468, 468, 468, 468,
	468, 468, 468, 468, 468, 468, 468, 468, 468, 468,
	468, 468, 468, 468, 468, 468, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 63, 63, 245, 245, 221, 221, 64, 64, 64,
	65, 65, 66, 66, 53, 53, 451, 451, 259, 259,
	365, 365, 68, 68, 278, 278, 69, 69, 69, 69,
	69, 69, 70, 70, 70, 70, 70, 70, 70, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 77,
	77, 77, 78, 78, 78, 75, 75, 75, 73, 73,
	73, 72, 72, 72, 76, 76, 76, 74, 74, 74,
	260, 260, 79, 79, 79, 79, 79, 79, 79, 79,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 367, 367, 80, 80, 80,
	335, 335, 84, 84, 84, 293, 293, 85, 85, 85,
	85, 85, 86, 86, 86, 86, 98, 98, 98, 98,
	454, 454, 252, 252, 186, 186, 186, 186, 91, 91,
	91, 91, 92, 92, 92, 93, 93, 146, 146, 104,
	104, 104, 104, 104, 103, 103, 103, 103, 103, 103,
	43, 43, 43, 44, 44, 45, 45, 46, 46, 47,
	47, 48, 48, 48, 48, 48, 106, 106, 461, 461,
	108, 105, 105, 105, 107, 107, 107, 107, 109, 110,
	110, 110, 110, 110, 110, 110, 110, 111, 111, 392,
	392, 268, 268, 390, 390, 406, 406, 391, 391, 225,
	225, 225, 225, 225, 226, 226, 226, 397, 397, 397,
	397, 397, 397, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 131, 131, 131, 140, 140,
	140, 140, 140, 140, 140, 133, 133, 133, 121, 121,
	113, 113, 113, 113, 113, 117, 117, 117, 117, 117,
	117, 117, 117, 114, 114, 123, 123, 123, 123, 123,
	118, 118, 120, 120, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 115, 115, 115, 115, 125, 125, 125,
	125, 299, 299, 299, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 136, 136, 136, 136, 136, 136,
	349, 349, 132, 132, 132, 132, 135, 135, 135, 135,
	283, 283, 129, 129, 129, 130, 130, 130, 134, 134,
	137, 137, 137, 137, 116, 116, 116, 469, 469, 469,
	138, 138, 128, 128, 139, 139, 139, 139, 139, 139,
	139, 139, 127, 127, 127, 126, 126, 126, 126, 119,
	452, 452, 449, 449, 449, 449, 449, 449, 449, 450,
	450, 453, 453, 89, 89, 89, 58, 58, 470, 470,
	470, 59, 59, 471, 471, 471, 459, 459, 459, 460,
	460, 460, 460, 460, 460, 227, 227, 228, 228, 316,
	316, 316, 316, 316, 231, 231, 172, 172, 172, 234,
	235, 235, 232, 232, 233, 233, 233, 237, 237, 236,
	239, 239, 238, 315, 413, 413, 415, 415, 415, 415,
	415, 415, 415, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 411, 411, 411, 412, 407, 407, 408,
	408, 408, 408, 229, 229, 230, 230, 230, 230, 409,
	410, 250, 250, 352, 414, 414, 416, 416, 418, 472,
	472, 472, 472, 472, 472, 473, 473, 314, 314, 243,
	243, 419, 419, 419, 419, 420, 420, 420, 420, 420,
	423, 422, 421, 421, 421, 421, 421, 345, 345, 345,
	62, 62, 62, 280, 280, 279, 279, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 143, 143, 60, 60, 60, 178, 178, 57,
	57, 57, 475, 475, 61, 61, 61, 476, 476, 67,
	67, 67, 67, 67, 67, 56, 56, 56, 56, 56,
	477, 477, 300, 300, 298, 298, 249, 249, 351, 190,
	190, 165, 165, 165, 23, 25, 25, 17, 17, 34,
	34, 35, 35, 30, 30, 462, 462, 463, 463, 90,
	90, 94, 94, 94, 102, 102, 142, 142, 142, 142,
	142, 142, 142, 38, 38, 38, 38, 50, 50, 50,
	50, 100, 479, 479, 479, 101, 101, 478, 478, 185,
	185, 185, 185, 187, 187, 311, 311, 312, 312, 480,
	480, 313, 313, 313, 313, 180, 179, 181, 181, 55,
	55, 55, 174, 174, 175, 175, 176, 176, 177, 177,
	481, 481, 87, 87, 87, 145, 145, 220, 220, 220,
	307, 307, 307, 244, 244, 195, 195, 310, 310, 308,
	308, 308, 308, 277, 277, 277, 144, 144, 257, 257,
	270, 270, 271, 271, 362, 362, 272, 99, 99, 155,
	155, 153, 153, 153, 153, 153, 153, 160, 160, 261,
	261, 161, 161, 161, 161, 162, 162, 162, 154, 154,
	154, 156, 156, 156, 156, 156, 156, 156, 159, 159,
	159, 159, 163, 163, 163, 158, 158, 430, 430, 430,
	432, 432, 433, 429, 429, 431, 431, 474, 474, 282,
	282, 282, 241, 242, 240, 240, 247, 247, 246, 248,
	248, 350, 350, 350, 166, 166, 166, 275, 275, 275,
	275, 303, 303, 301, 301, 301, 302, 302, 304, 304,
	304, 305, 305, 306, 306, 274, 274, 331, 331, 157,
	157, 157, 254, 254, 254, 255, 255, 322, 322, 322,
	322, 322, 322, 323, 323, 321, 321, 321, 321, 353,
	353, 353, 353, 353, 353, 353, 353, 353, 354, 355,
	355, 256, 256, 356, 309, 309, 447, 447, 447, 448,
	448, 348, 348, 357, 357, 357, 357, 357, 357, 346,
	346, 347, 347, 363, 364, 364, 286, 286, 286, 286,
	284, 284, 287, 287, 287, 287, 285, 285, 358, 358,
	358, 358, 276, 276, 359, 359, 359, 359, 360, 317,
	318, 318, 368, 368, 368, 368, 383, 253, 253, 253,
	253, 253, 482, 482, 369, 369, 369, 369, 369, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 373, 373, 373, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 382, 382, 382, 382, 382, 374, 374, 379,
	379, 380, 380, 380, 375, 376, 381, 381, 381, 381,
	483, 483, 385, 385, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 371, 371, 371, 378, 378, 378, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 294, 294, 296, 296, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 326, 326, 326, 326, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 424,
	424, 424, 424, 424, 424, 424, 424, 427, 427, 428,
	428, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 434, 434, 435, 435, 437, 437, 438, 438,
	439, 440, 440, 440, 441, 442, 442, 436, 436, 443,
	443, 443, 443, 444, 444, 445, 445, 445, 445, 445,
	446, 446, 446, 446, 446, 337, 337, 338, 338, 344,
	344, 344, 224, 224, 224, 224, 224, 224, 224, 224,
	224, 224, 224, 224, 224, 224, 224, 224, 188, 188,
	188, 188, 188, 266, 266, 264, 264, 264, 267, 267,
	265, 265, 263, 263, 262, 262, 334, 334, 332, 332,
	336, 336, 288, 288, 384, 384, 384, 384, 384, 384,
	384, 384, 289, 289, 289, 297, 290, 290, 291, 291,
	291, 291, 291, 328, 329, 292, 292, 292, 330, 330,
	339, 343, 343, 342, 341, 341, 340, 340, 319, 319,
	320, 320, 273, 273, 484, 484, 269, 269, 361, 361,
	361, 361, 223, 223, 258, 258, 222, 222, 215, 215,
	216, 216, 216, 216, 251, 251, 386, 386, 386, 387,
	388, 389, 333, 333, 205, 204, 192, 193, 203, 202,
	201, 191, 194, 198, 199, 200, 196, 197, 211, 210,
	209, 207, 208, 366, 217, 217, 218, 218, 218, 219,
	219, 219, 219, 189, 189, 212, 212, 213, 214, 214,
	206, 206, 206, 182, 182, 182, 183, 183, 184, 184,
	396, 396, 394, 394, 394, 395, 395, 395, 395, 393,
	393, 393, 393, 393, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 402, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 405, 405,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 1, 3, 4,
	6, 1, 3, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 4, 6, 4,
	6, 6, 9, 6, 9, 6, 5, 6, 5, 1,
	1, 5, 5, 6, 6, 4, 4, 4, 4, 3,
	4, 4, 4, 7, 7, 9, 8, 9, 5, 3,
	5, 7, 4, 12, 4, 12, 1, 3, 5, 5,
	2, 5, 3, 6, 4, 6, 5, 6, 6, 4,
	8, 3, 4, 8, 3, 6, 4, 3, 1, 3,
	2, 1, 1, 3, 1, 3, 2, 2, 0, 1,
	1, 0, 2, 0, 6, 7, 2, 6, 2, 1,
	3, 1, 3, 1, 6, 4, 9, 7, 12, 12,
	12, 9, 2, 7, 2, 1, 1, 1, 3, 3,
	0, 3, 1, 3, 1, 1, 3, 2, 5, 0,
	6, 1, 2, 1, 2, 1, 2, 2, 3, 3,
	3, 3, 3, 5, 3, 3, 5, 3, 3, 5,
	3, 3, 5, 3, 6, 6, 6, 6, 1, 1,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 3,
	3, 4, 3, 4, 7, 4, 4, 4, 3, 5,
	7, 4, 3, 3, 4, 3, 3, 3, 3, 3,
	2, 0, 1, 0, 1, 0, 3, 3, 3, 3,
	3, 6, 4, 4, 4, 3, 5, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 4, 1, 1, 2, 1,
	2, 7, 3, 2, 0, 1, 3, 3, 1, 0,
	1, 2, 2, 1, 6, 5, 1, 2, 1, 3,
	2, 0, 9, 3, 2, 0, 2, 2, 2, 2,
	2, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 4,
	6, 3, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 3, 5, 3, 3, 5, 3,
	1, 3, 2, 2, 5, 3, 3, 6, 6, 3,
	1, 1, 2, 1, 1, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 2, 1, 2, 1, 3, 5, 7, 2,
	3, 0, 3, 5, 2, 3, 0, 2, 3, 2,
	3, 2, 6, 4, 7, 2, 6, 4, 7, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 2,
	1, 2, 2, 3, 2, 4, 3, 2, 2, 1,
	2, 1, 3, 3, 1, 2, 1, 2, 1, 2,
	1, 1, 3, 5, 4, 6, 4, 3, 0, 1,
	3, 2, 4, 2, 4, 1, 6, 3, 1, 1,
	5, 3, 2, 6, 3, 3, 4, 4, 3, 1,
	3, 2, 3, 3, 1, 3, 1, 2, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 1, 3, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 1, 1,
	1, 1, 1, 2, 2, 5, 7, 3, 3, 3,
	3, 4, 4, 4, 3, 4, 4, 3, 4, 4,
	3, 4, 4, 5, 3, 5, 5, 5, 7, 3,
	3, 3, 4, 3, 5, 3, 6, 5, 6, 3,
	5, 6, 3, 4, 3, 4, 3, 3, 4, 4,
	5, 0, 1, 1, 3, 2, 4, 3, 3, 5,
	4, 3, 5, 3, 5, 4, 6, 4, 6, 4,
	1, 0, 3, 4, 4, 5, 7, 5, 3, 3,
	2, 0, 4, 2, 3, 4, 2, 3, 3, 3,
	4, 3, 3, 3, 3, 4, 3, 1, 1, 1,
	2, 3, 2, 3, 6, 6, 7, 9, 7, 9,
	3, 4, 10, 10, 3, 5, 5, 5, 3, 5,
	2, 0, 1, 1, 1, 1, 3, 2, 2, 2,
	1, 2, 0, 3, 3, 2, 10, 13, 0, 2,
	3, 9, 12, 0, 2, 3, 1, 1, 0, 1,
	2, 2, 2, 2, 1, 1, 0, 1, 3, 1,
	1, 1, 1, 3, 8, 0, 1, 1, 0, 2,
	1, 0, 1, 0, 9, 9, 3, 1, 3, 7,
	1, 3, 11, 3, 2, 0, 3, 1, 2, 2,
	3, 2, 6, 2, 1, 1, 2, 4, 2, 5,
	5, 5, 2, 8, 9, 6, 5, 3, 1, 5,
	8, 5, 11, 3, 0, 2, 4, 3, 3, 1,
	5, 1, 3, 1, 2, 0, 1, 2, 2, 0,
	1, 3, 3, 2, 2, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	5, 8, 4, 1, 0, 1, 2, 2, 1, 2,
	3, 3, 2, 2, 3, 2, 2, 2, 2, 2,
	3, 1, 4, 2, 4, 7, 3, 3, 0, 3,
	6, 3, 1, 1, 8, 7, 5, 0, 1, 6,
	7, 6, 5, 3, 4, 14, 17, 14, 17, 4,
	0, 2, 2, 0, 1, 0, 1, 3, 3, 2,
	0, 1, 1, 0, 6, 6, 8, 6, 8, 6,
	8, 6, 8, 6, 8, 1, 0, 2, 0, 2,
	2, 3, 3, 2, 2, 2, 1, 2, 1, 2,
	1, 2, 1, 3, 2, 3, 2, 2, 2, 2,
	2, 2, 1, 1, 0, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 0, 1, 3, 1,
	0, 1, 1, 1, 1, 2, 3, 2, 2, 8,
	11, 3, 3, 0, 3, 0, 3, 0, 3, 0,
	1, 0, 6, 7, 3, 6, 3, 1, 3, 1,
	1, 4, 2, 1, 3, 1, 3, 8, 5, 3,
	4, 3, 0, 2, 2, 0, 10, 3, 2, 0,
	1, 3, 1, 1, 3, 3, 5, 1, 1, 3,
	3, 2, 3, 4, 3, 4, 5, 0, 3, 0,
	2, 2, 4, 2, 3, 0, 2, 1, 2, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 8, 8,
	8, 2, 4, 4, 4, 2, 2, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 5, 1, 0, 1, 0, 3, 1,
	3, 3, 4, 5, 2, 2, 0, 2, 2, 1,
	1, 1, 0, 2, 2, 5, 2, 3, 1, 3,
	0, 1, 1, 1, 1, 3, 0, 2, 0, 4,
	2, 5, 3, 2, 0, 1, 3, 3, 5, 1,
	1, 1, 1, 1, 3, 2, 4, 4, 0, 4,
	4, 3, 4, 1, 5, 3, 4, 5, 5, 1,
	5, 1, 3, 2, 0, 3, 0, 2, 3, 1,
	3, 2, 0, 3, 5, 6, 4, 6, 4, 3,
	2, 1, 0, 5, 1, 0, 2, 2, 2, 1,
	1, 0, 1, 1, 1, 0, 4, 2, 1, 2,
	2, 4, 1, 3, 1, 2, 3, 2, 2, 2,
	1, 0, 2, 5, 7, 2, 1, 2, 4, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 5,
	4, 1, 2, 1, 4, 1, 1, 2, 1, 1,
	1, 1, 1, 0, 1, 2, 5, 1, 4, 2,
	5, 1, 4, 3, 3, 0, 1, 2, 4, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 1, 0, 1, 4, 1, 3, 3, 3,
	5, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 5, 4, 6, 3, 5, 4, 6, 4, 6,
	5, 7, 3, 3, 3, 3, 3, 4, 3, 2,
	4, 2, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 4,
	1, 3, 1, 3, 3, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 6, 6,
	7, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	6, 2, 1, 1, 1, 1, 1, 2, 1, 5,
	5, 3, 1, 1, 1, 2, 2, 2, 4, 3,
	5, 6, 8, 6, 5, 4, 3, 4, 1, 1,
	1, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 6, 6, 8, 8, 6, 4, 6, 6, 6,
	4, 1, 3, 3, 3, 3, 3, 4, 3, 3,
	4, 3, 3, 3, 4, 3, 4, 3, 4, 3,
	4, 4, 3, 6, 5, 5, 5, 4, 4, 3,
	4, 3, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 3,
	3, 3, 0, 1, 4, 2, 2, 2, 2, 2,
	3, 2, 2, 3, 0, 4, 1, 1, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 2, 3, 1, 2, 3, 2, 3,
	2, 3, 1, 0, 1, 3, 1, 3, 3, 3,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 1, 2, 3, 0, 3, 3,
	2, 2, 1, 2, 2, 3, 2, 1, 1, 1,
	5, 1, 2, 4, 2, 0, 1, 0, 3, 5,
	1, 0, 1, 2, 1, 0, 1, 3, 3, 2,
	1, 1, 1, 3, 1, 3, 3, 1, 1, 1,
	1, 5, 3, 1, 1, 3, 1, 2, 2, 1,
	1, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 7, 1,
	7, 5, 3, 1, 1, 1, 1, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 467, -81, -51, -49, -84, -85, -69,
	-86, -80, -98, -102, -90, -104, -142, -3, -37, -39,
	-52, -68, -70, -79, -88, -87, -89, -91, -95, -94,
	-83, -43, -99, -103, -112, -143, -144, -145, 84, 70,
	125, 106, 111, 158, 294, 324, 334, 318, -107, -108,
	353, -38, -50, -101, -100, -4, -10, 27, 41, -40,
	-41, -42, 55, -60, -57, -54, -63, -464, 86, -431,
	-71, -74, -76, -468, 116, 131, 175, 286, -92, -93,
	320, 322, 132, -45, -44, 126, -153, -155, -105, -106,
	-146, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, -127, -128, -129, -130, -131,
	-132, -133, -134, -135, -136, -137, -138, -139, 357, 404,
	42, 367, 71, 119, 328, 21, -5, -6, -7, -8,
	-9, -11, -12, -25, -53, -55, -56, -58, -59, -67,
	-61, -62, -430, -72, -73, -75, -77, -78, 319, -156,
	-154, 464, 417, -14, -19, -20, -15, -16, -18, -21,
	-17, -26, -31, -32, -28, -29, -27, -30, -33, -34,
	-35, -36, -23, -24, -13, -22, 435, 443, -159, -157,
	-158, -163, 341, 425, 381, 467, 467, 467, 467, 467,
	467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
	467, 467, 467, 467, 467, -207, -212, -213, -214, -206,
	-182, -402, -405, 4, -400, -403, 137, 182, 252, 21,
	22, 23, 24, 25, 27, 38, 40, 39, 41, 42,
	45, 47, 48, 51, 52, 53, 54, 55, 56, 59,
	64, 69, 70, 71, 72, 73, 74, 79, 76, 77,
	78, 81, 83, 84, 85, 88, 89, 97, 98, 99,
	100, 101, 102, 106, 109, 108, 111, 114, 115, 116,
	118, 120, 121, 123, 125, 126, 129, 127, 387, 128,
	130, 131, 132, 133, 143, 144, 145, 147, 148, 150,
	152, 156, 157, 159, 163, 165, 166, 167, 168, 174,
	175, 177, 178, 183, 179, 184, 188, 191, 190, 192,
	193, 194, 185, 199, 203, 204, 205, 207, 208, 211,
	212, 213, 214, 215, 218, 217, 220, 223, 224, 227,
	228, 231, 232, 233, 235, 236, 239, 237, 240, 238,
	241, 244, 242, 243, 246, 247, 250, 248, 254, 257,
	172, 259, 260, 262, 263, 264, 280, 267, 268, 269,
	272, 273, 276, 279, 281, 282, 283, 284, 285, 286,
	287, 289, 290, 292, 294, 296, 298, 299, 300, 301,
	302, 303, 304, 306, 307, 309, 310, 311, 312, 313,
	318, 315, 316, 317, 319, 320, 321, 322, 324, 326,
	327, 328, 329, 331, 333, 354, 355, 369, 334, 335,
	336, 337, 338, 339, 340, 344, 348, 345, 346, 347,
	342, 343, 349, 350, 351, 353, 356, 357, 359, 360,
	362, 363, 365, 366, 367, 368, 370, 373, 374, 375,
	371, 372, 380, 378, 379, 382, 383, 384, 385, 386,
	388, 390, 398, 399, 401, 404, 405, 406, 396, 408,
	409, 412, 413, 414, 415, 416, 421, 417, 419, 422,
	423, 424, 430, 429, 436, 437, 439, 440, 441, 33,
	43, 44, 46, 49, 60, 61, 62, 65, 103, 104,
	124, 134, 135, 146, 160, 162, 169, 170, 171, 189,
	195, 197, 201, 221, 256, 258, 274, 278, 291, 293,
	305, 330, 361, 376, 391, 392, 393, 394, 400, 402,
	425, 426, 427, 431, 438, 265, -200, 2, -182, -182,
	294, 26, 2, 26, 290, 343, 383, 385, 2, -454,
	-252, 2, 26, -186, -182, 86, 158, 341, -200, 2,
	-454, -252, 24, 2, -182, 2, -187, 2, 334, -182,
	467, 81, 228, 64, 330, 350, -110, 399, -109, 391,
	336, -111, -392, 2, 244, -182, 467, 467, 467, 467,
	2, 381, 283, 429, 342, 418, 99, 302, 182, 395,
	-449, 2, 4, -403, -400, -216, -215, 381, 99, -214,
	-206, 457, -213, 467, 467, 467, 2, 204, 205, 301,
	300, 350, 351, 467, 467, 467, 2, 25, 58, 80,
	83, 105, 133, 153, 156, 270, -465, 236, 280, 299,
	336, 349, 380, 388, 401, -460, 368, 59, -459, 418,
	-475, 406, 114, -298, 99, 228, 157, 413, 385, 383,
	326, 161, 411, 109, 188, 416, 415, 467, 467, 25,
	58, 67, 83, 114, 133, 153, 156, -467, 280, 299,
	333, 336, 349, 380, 388, 406, 401, 2, 429, 342,
	381, 182, 99, 418, 326, 297, -81, 2, 464, 29,
	28, 353, -152, 381, 198, 2, -182, 204, 205, 2,
	467, 467, -449, 2, 204, 205, 2, 198, 2, 59,
	338, 467, 467, 467, 467, 467, 467, 467, 467, 467,
	467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
	467, 467, 467, 467, 467, 467, 467, 467, 2, -140,
	350, 368, 167, 41, 64, 26, 298, 69, 284, 100,
	159, 182, 183, 212, 80, 81, -299, 40, 205, 204,
	-349, 382, 337, 343, 378, 399, 86, 419, 327, 441,
	302, 303, 127, 4, 99, 244, 352, 391, 228, 73,
	-474, 2, 381, -478, 2, 399, 399, 2, -478, 2,
	-478, 2, -185, 2, 399, 395, -479, 399, 438, 467,
	467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
	467, 467, -154, -156, -155, 467, 467, 467, 467, 467,
	-140, 350, 2, 64, 26, -160, -161, 151, -246, -247,
	410, 196, 122, 271, -153, -155, 2, -430, -390, 2,
	-324, -406, -326, 455, 456, 448, 251, 442, -337, 105,
	411, 265, -405, -327, -339, 124, 330, -267, 8, 9,
	5, 6, 7, -189, -370, -333, 403, 136, 255, -219,
	468, 10, 464, -427, -155, -338, 34, 162, 57, -394,
	-218, -372, -380, -376, -377, -482, 47, 53, 52, 388,
	243, 344, 345, 362, 346, 347, 45, 421, 179, 262,
	264, 190, 4, 197, -217, -206, -424, -425, -400, -401,
	189, 195, 191, 361, 192, 193, 194, 44, 305, 147,
	148, 146, 115, 104, 103, 258, 49, 48, 46, 426,
	-381, 101, 391, 392, 393, 394, 207, 208, -182, -402,
	67, 91, 92, 90, 95, 94, 96, 93, 352, 418,
	58, 33, 169, 170, 201, 256, 171, 65, -426, 372,
	87, 155, 187, 173, 200, 202, 206, 222, 225, 245,
	249, 253, 275, 277, 325, 358, -483, 427, 134, 135,
	278, 291, 376, 400, 402, 160, 221, 60, 61, -432,
	306, -433, -200, -432, 467, 467, 469, 467, -240, -241,
	-242, 2, 26, 112, 464, 2, -353, 2, -354, -358,
	-155, 216, -357, 464, -355, 462, -207, 266, -428, 331,
	-424, -425, -189, -206, -218, 4, -243, 464, 466, 99,
	381, 68, 182, -293, 464, -182, 26, 265, 395, 469,
	-335, 464, 265, 154, 268, -182, 2, 2, 354, 2,
	464, -110, 62, 399, 39, 350, -312, 2, -313, -179,
	-180, -181, -363, 203, 296, 304, 444, 441, -390, -461,
	154, 447, 395, -390, -268, 466, 2, -358, 169, -207,
	2, -204, -393, 4, -400, -403, -401, -404, 67, -402,
	26, 28, 29, 30, 32, 34, 35, 36, 37, 50,
	57, 58, 63, 66, 68, 80, 86, 90, 91, 93,
	92, 94, 95, 96, 105, 107, 110, 112, 113, 117,
	119, 122, 136, 138, 151, 153, 154, 158, 161, 164,
	176, 186, 196, 198, 216, 219, 226, 229, 230, 251,
	255, 261, 265, 266, 270, 271, 288, 295, 308, 323,
	341, 352, 364, 377, 381, 389, 395, 397, 403, 410,
	411, 418, 420, 428, 432, 433, 434, 435, -405, 2,
	-358, 169, 2, -209, 169, -358, -212, 2, -398, 169,
	-396, 10, -395, 5, 4, -400, -403, -401, 2, -191,
	-182, 2, -203, -393, 2, -222, 169, -207, -208, -212,
	-96, -398, 464, 395, 469, -258, -215, -216, -251, -182,
	466, -324, 2, -99, 2, -324, 169, 2, -99, 169,
	2, -324, 169, 2, -99, 169, 2, 2, 2, 401,
	2, 83, 169, -182, 381, 98, 2, 317, -466, 333,
	405, 429, 2, 2, 2, 2, 2, 2, 2, 381,
	-196, 2, -182, 151, 342, -476, 306, -398, 169, 2,
	-398, 169, 2, -210, -212, -210, 182, 199, -191, 169,
	2, 385, 383, 385, 383, 154, 2, 198, 2, 198,
	2, -359, 2, -360, -354, -207, 462, 2, 2, 2,
	2, 2, 169, -182, 381, 98, 2, 214, 2, 2,
	2, 2, 2, 2, 2, 2, 2, -260, 169, 2,
	-207, -260, 169, 2, -260, 169, 2, -223, 169, 2,
	-222, -191, 169, 2, -399, 169, 2, -398, -399, 169,
	2, -367, 2, -366, -395, 425, -81, 464, -81, 464,
	350, 464, -398, -207, -207, -324, -99, 154, -324, -99,
	-152, 151, 2, 99, 381, -140, 2, 151, 420, 2,
	8, 2, -398, 337, 303, 143, 2, 354, 2, 355,
	64, -299, 441, 64, 154, 2, 154, 2, -283, 2,
	435, -452, 2, 265, 154, 2, 154, 2, 154, 2,
	154, 2, 154, 2, 300, 351, 205, 2, -99, 432,
	-324, 432, 2, 398, 213, 128, 154, -283, 2, 154,
	2, 154, 2, 5, 2, 203, 296, 369, 2, -207,
	-469, 2, 381, 429, 342, 2, 2, 76, 77, 154,
	2, 154, 2, 154, 441, 2, -276, -358, -311, -312,
	-311, 395, -187, -160, -246, -247, -140, 354, 2, -261,
	259, 415, 247, 356, 211, -160, -275, -301, -302, 226,
	138, 261, -282, 26, 112, -282, -282, 51, 465, 465,
	11, 12, 66, 38, 455, 456, 457, 458, 149, 459,
	460, 453, 454, 452, 445, 446, 450, 209, 210, 82,
	449, 447, 75, 234, 332, 139, 140, 141, 142, 314,
	180, 31, 181, 14, 15, 16, 30, 270, 225, 442,
	173, 358, 448, 17, 18, 19, 200, 202, 253, 43,
	176, -188, -224, -324, -324, -324, -324, -324, 277, 464,
	-273, -319, 462, -155, 464, 464, 464, 5, -389, 8,
	-155, -324, -337, 465, -265, 464, -155, -337, -332, 464,
	330, 462, 464, -340, -324, 5, 464, 466, -434, 436,
	-374, 464, 293, -373, 464, -373, -373, 430, -371, 464,
	443, 437, 464, -371, 464, 464, 151, 464, 464, 464,
	464, 464, 464, 464, 464, 464, 464, 464, 464, 464,
	430, 464, 464, 464, 464, 464, 464, 464, 464, 464,
	469, -432, -243, 464, -269, -361, -324, 457, -269, -269,
	265, -262, -324, 87, -286, 206, 245, 155, 222, 325,
	187, -321, 468, -321, -348, 443, -155, -355, -206, -155,
	-357, 464, -353, -348, -82, -389, -68, -79, -87, -99,
	-112, -144, -145, 457, -207, 464, 154, 464, 466, 154,
	-251, -393, -191, -207, -217, -218, -222, 111, -262, -449,
	-251, -186, 35, -334, -368, -369, -370, -379, -375, -378,
	-382, 47, 53, 52, 388, 243, 344, 345, 362, 346,
	347, 45, 421, 179, 262, 264, 190, 4, 46, 426,
	-381, 197, 310, 311, 309, 313, 312, 189, 195, 191,
	361, 192, 193, 194, 44, 305, 147, 148, 146, 115,
	104, 103, 258, 49, 48, 101, 391, 392, 393, 394,
	207, 208, 427, 372, 60, 61, -449, -251, 151, -392,
	-262, 35, -312, 2, 105, -396, 39, -480, 469, 224,
	-226, 233, 250, 166, 266, 439, 259, -397, 5, 4,
	-333, -345, 105, 228, 197, 9, 456, -386, 8, 455,
	-391, -390, 89, 466, -393, -168, 315, -167, 23, 27,
	116, 423, 129, -233, 184, 283, 124, 365, 414, -456,
	-457, 335, 386, 387, 78, 259, 315, 124, -279, -281,
	35, 97, 247, 279, 54, 177, 238, 239, 367, 431,
	124, 315, 435, 124, -457, 315, -457, -170, 365, 414,
	-456, -457, 335, 315, -169, -233, 124, 468, -364, -363,
	-399, -96, -258, 469, 469, -393, 457, 124, 124, 124,
	124, 2, 2, 251, 2, 2, 2, 156, -459, -467,
	2, 2, 2, -207, 169, -245, 265, -451, -259, 381,
	-207, -209, 169, 2, -212, 429, -178, -429, 435, 251,
	251, 35, 464, 2, -193, 169, 2, -183, -182, 182,
	-429, 251, -359, -220, -207, -354, -220, 353, -200, 35,
	-321, -321, 124, 2, 2, 2, -182, -171, 469, 56,
	321, 124, -171, 124, -171, 124, -171, 469, 124, -171,
	124, 469, 124, 124, 465, 469, -367, -367, -398, -150,
	435, 154, 86, 464, 464, -152, -97, -96, -398, -451,
	-191, 2, -207, 2, 381, 207, -398, -398, -398, -392,
	26, 355, 2, 300, 351, 77, 355, 2, -207, 381,
	99, 182, 70, -453, 151, -450, 326, -449, -207, 99,
	-207, 99, -207, 99, -207, -207, 2, 2, 2, 2,
	74, 74, 151, 2, 398, 2, 398, 2, -182, -182,
	-182, 224, -207, 151, 381, 182, 381, 182, 99, 381,
	-171, 469, -187, -160, -275, -392, -162, 360, 254, -260,
	211, 356, -160, -302, -301, 26, -324, -306, 145, 246,
	-324, -326, -154, -154, -154, -248, -350, -324, 295, 182,
	-383, -368, -368, -205, -393, 391, -324, -324, -324, -324,
	-324, -324, -324, -324, -324, -324, -324, -324, -324, -324,
	-324, -324, -324, -324, -324, -324, -324, -324, -324, -324,
	-324, -324, -324, -324, -324, -324, -324, -324, -324, -324,
	-324, 225, 173, 358, 43, 176, -324, 395, -324, -324,
	-324, -324, 242, 251, 255, 403, 136, 412, 112, 259,
	-484, 377, 37, -330, -155, -266, 464, -344, 32, 364,
	26, -337, 464, 2, -319, -324, -320, -263, -262, -262,
	465, 428, 26, 112, 457, 2, 465, 469, 35, 465,
	-324, -263, -336, -332, -262, -343, -342, 432, -294, -295,
	440, 241, 102, 168, 240, -296, 340, -387, 8, -393,
	457, -435, 144, 161, 8, -387, -387, 391, 391, -387,
	-387, -387, 464, 465, 2, 465, 2, 465, -324, 2,
	465, -324, 2, 465, 2, -324, -324, -324, -324, -324,
	-324, -324, -262, -288, 2, -384, -262, 4, 440, 241,
	102, 168, 240, 340, 5, -288, 2, -289, 2, -324,
	-262, -290, -325, -326, 455, 456, 448, -337, -291, 2,
	-324, -263, -324, 50, 219, 397, -292, -324, 154, -262,
	-262, 2, -262, 2, -433, 35, -262, -254, 469, 154,
	35, 4, -254, -254, 464, 465, 469, -287, 165, 237,
	232, -287, -353, -286, 206, -284, 275, -284, -284, -348,
	-192, 462, 470, -393, -348, -347, -346, 35, -200, 272,
	-348, -348, 466, 465, -347, 463, -447, 464, 467, 467,
	467, 467, 467, -207, 464, -262, -393, 370, 465, 466,
	200, 200, 200, 200, 331, 465, 395, 435, -81, 267,
	465, 469, -253, 34, 462, -385, 430, 464, 464, -295,
	464, 154, -252, -461, 465, 399, -313, -225, 304, 363,
	316, 348, 379, 9, 8, 8, 469, -393, 469, -462,
	80, 395, 68, -315, 169, 68, -407, -194, 80, -408,
	-182, 63, 411, 295, 153, -462, 80, 295, -462, 80,
	80, 353, 368, 51, -358, 38, 38, 26, -99, 220,
	154, 441, 381, 182, 395, -358, -281, -368, 97, 238,
	239, 51, -388, -386, 456, -388, 51, -388, -388, -388,
	435, -209, -358, 395, 285, -398, 395, 469, 38, 38,
	26, -99, 220, 154, 395, -222, -192, -147, 178, 465,
	-364, -215, -182, 466, -324, -99, -324, -99, 124, 2,
	-476, 214, 464, -229, 251, 154, -251, -365, 198, 469,
	-259, -280, -279, 251, -211, 2, -207, 285, 124, 124,
	464, 120, 302, 2, 265, 251, -193, 169, -174, 384,
	124, -278, 420, -307, -99, 464, 105, 35, -307, -270,
	-271, -362, -272, -194, 464, -200, -182, 2, -207, -260,
	-260, -260, -222, -223, -191, -398, -399, -399, -81, -366,
	465, 465, 465, -149, 269, -148, -182, 5, -152, 420,
	-228, -316, -315, -411, -412, -407, 225, 182, 411, 199,
	137, -244, -195, -194, 98, -364, 469, -150, -150, -364,
	-364, -207, 151, 2, 2, -283, -207, -191, -222, -207,
	-251, -251, -283, -191, -283, -191, -283, -191, -99, -324,
	350, 151, 151, 466, -283, 302, 99, 381, 283, 182,
	-207, -222, -207, -222, -191, -207, -358, -160, 231, 415,
	-304, -386, 464, -305, 330, 331, 469, -165, 36, 110,
	211, -207, 441, 121, -324, -324, 395, -484, 377, -330,
	121, -324, 242, 255, 403, 136, 412, 112, 259, 154,
	464, -325, -325, 465, -264, -324, -324, 463, 472, 465,
	-247, 469, -246, -324, -262, -262, 465, 466, -262, -251,
	463, 463, 469, 465, -341, -342, 117, -324, 395, 395,
	395, 395, 464, 465, 466, -440, 276, 464, 464, 465,
	465, 469, 465, 441, 441, 465, 465, 465, -324, 465,
	465, 35, 469, 469, 469, 465, 469, 469, 469, 465,
	465, 154, 465, 465, -297, 288, 465, 11, 12, 455,
	456, 457, 458, 149, 459, 460, 453, 454, 452, 445,
	446, 447, 75, 234, 332, 14, 15, 16, 200, 176,
	-325, -325, -325, 465, -328, -329, 154, 151, 35, -292,
	-292, -292, 465, 154, -262, 465, 465, 464, 465, -318,
	-317, 433, -361, -255, 2, -353, -202, -393, -318, -318,
	-262, -324, 206, 206, -285, 420, 265, -287, -353, -347,
	-389, -323, -322, 152, 36, 110, 248, 172, -347, -200,
	-243, -347, -347, -393, -348, -348, -346, 465, -448, -389,
	465, -256, -356, -428, -247, 466, -150, -393, -141, 5,
	255, -141, -141, -141, -251, 24, 289, -368, 462, 463,
	8, 464, -387, -387, -387, -251, 154, -390, -312, 409,
	72, 304, 391, -390, -167, 315, -194, -194, -207, 251,
	-315, 169, -173, 251, -368, -201, -182, 464, 464, 211,
	211, -194, -201, 211, 169, -194, 169, -201, -201, -455,
	304, 260, -324, 227, 302, 252, -168, 315, -99, -99,
	-99, 464, -461, 420, 111, -207, -222, -207, -211, 315,
	249, -217, -388, -388, -279, 315, -209, -398, 435, -191,
	-169, -99, -99, -99, 464, -192, -170, 315, -150, 154,
	-147, 457, -182, 429, -182, -227, -230, -228, -194, -470,
	437, 435, 124, -221, -207, 462, -150, -398, -207, 124,
	-243, -398, -398, -398, 2, 464, 2, -207, 124, 265,
	251, -175, 118, -481, 447, -191, -318, -255, -277, -310,
	323, 265, -244, 425, -200, -277, -257, 469, 154, 447,
	466, -244, 2, -171, -171, -171, -171, -171, -81, -81,
	-150, 469, 464, 447, 447, 464, -398, -398, 465, 469,
	-207, -193, 182, 182, -199, -183, 465, 469, 466, 464,
	-150, -96, 154, -46, 435, 381, 468, -283, -283, -283,
	350, 350, -182, -203, -191, -207, -204, -222, 151, 151,
	-305, -324, -350, -166, 257, -207, 468, -324, -324, 121,
	121, -324, -325, -325, -324, 121, 154, 464, -324, -334,
	30, 30, 465, 469, -320, -324, 465, 428, -247, -247,
	465, 457, -393, 465, -332, 119, -324, 389, 241, 168,
	240, -296, 240, -296, -296, -387, 5, -393, 457, -441,
	-197, 464, -182, 433, -246, -387, -371, -371, 465, -383,
	-368, -324, -324, -324, -324, -324, -324, -328, -324, -383,
	-368, -325, -325, -325, -325, -325, -325, -325, -325, -325,
	-325, -325, -325, -325, -325, -325, -325, -325, -325, -325,
	112, 251, 259, -325, -329, -328, -324, -324, -368, 465,
	465, 465, -262, -81, -274, 161, -324, -364, 469, -274,
	-274, 465, -353, -353, 464, -324, 206, 463, 469, 471,
	447, -243, 466, -346, -347, 463, 465, 469, 465, 469,
	-309, 35, 465, -393, 268, 5, 8, 462, 463, -387,
	465, 465, 465, -251, -324, 395, 395, 124, 251, 422,
	-413, -408, -324, -249, -351, -324, 464, 464, -164, 116,
	353, -463, 2, 420, 124, -171, 124, -171, 439, 464,
	464, 395, 435, -262, -324, -151, 105, -392, -457, 468,
	-457, 468, 395, 395, 285, 435, -262, 395, -399, -150,
	2, 2, 2, 465, 465, 469, -414, 35, 263, -182,
	-207, -64, 435, -363, -389, -209, 35, -178, 2, -300,
	420, -192, -207, 124, -176, 218, -481, -396, -429, -247,
	-277, -269, 252, 79, 465, -318, -271, -255, -324, 2,
	465, -148, -149, -398, -398, -398, -150, -152, -152, -316,
	2, 464, -193, -183, 464, -152, -195, 2, -399, -99,
	269, -207, 457, -283, -235, -234, 283, 259, -235, 330,
	330, 266, 465, 145, 215, -165, -192, -324, -324, 121,
	30, 30, -324, -324, -334, 465, -324, -324, -262, 463,
	5, -324, 465, 465, -324, 465, 466, -442, -182, -324,
	465, 465, 465, 465, 469, 469, 465, 465, 465, 465,
	-329, 154, 112, 259, 464, 465, 465, -331, 164, 51,
	-353, -331, -331, -285, -251, -353, -322, -192, 462, -393,
	-389, -356, 464, 466, 463, 2, 462, 465, -194, -194,
	-315, 124, -415, 80, -417, 66, 137, 86, 251, 255,
	411, 295, 63, 105, 308, 35, 465, 465, 469, -165,
	-249, -251, 251, 374, 105, 251, 105, 98, 406, 69,
	-194, -201, -251, -251, -207, 130, 465, 469, 447, 2,
	457, 457, -211, -209, -398, 130, 465, -192, -231, 185,
	-194, -412, -409, -410, 295, -416, -418, 137, 295, -99,
	2, 464, -229, 269, 463, -280, -99, 464, -182, 265,
	464, -192, -177, 217, -481, -396, -174, -303, -301, -308,
	464, 265, -99, -247, 447, 465, 465, 98, 98, -249,
	464, 464, -251, 98, 465, -47, -48, 182, 80, 287,
	-204, 381, 182, 464, 464, -165, -324, -324, -324, 465,
	-247, -393, 457, -436, 283, 465, -324, -324, -325, 154,
	464, -334, -437, 434, -324, -262, -437, -437, 465, -389,
	2, 462, 2, -315, -201, -205, -198, -182, 137, 169,
	255, 211, 464, -325, -207, 464, 2, -472, 107, 186,
	-314, -473, 85, 375, -351, -166, 465, 465, 255, 255,
	-324, -368, 464, -171, -171, 465, 465, -324, 395, -392,
	84, -390, 2, -457, -324, 395, -232, -233, 176, -414,
	211, -198, 211, -471, 435, -227, -470, -65, -66, 396,
	-363, -249, -207, -249, 265, -481, -396, -175, -277, 113,
	-251, 80, -303, -330, -150, 464, 464, 465, -249, -249,
	465, 464, -150, 469, 26, 464, 26, 464, -207, -222,
	-262, -262, 465, -247, 51, 465, 465, -325, -334, 465,
	-438, -439, -197, 463, 2, -417, -198, 251, -324, -184,
	464, -324, 186, 108, 174, -231, 464, 308, -190, 66,
	-249, 464, 464, 464, 447, 154, 464, -470, 281, 464,
	98, 247, 465, 35, -66, 9, 465, -300, 465, -207,
	-396, -176, 415, 252, 465, -201, -277, -399, -399, -314,
	465, 465, -399, -48, -251, -251, 465, 465, -443, 302,
	331, 163, -262, 465, 469, 35, 124, 465, -419, 235,
	-182, 465, 108, 174, -232, -251, -207, -458, 420, -205,
	465, -237, -236, -234, -239, -238, -234, -262, -390, 84,
	281, -262, -207, -250, -352, -194, 98, -231, -99, -314,
	464, -314, 464, -177, 353, -317, 465, 465, -231, -314,
	465, 465, 465, 465, -444, -445, 43, 408, 89, -324,
	-444, -444, -439, -441, 137, -420, -423, -422, 265, 359,
	155, 282, 465, 374, 431, -472, 465, -243, -324, 465,
	469, 425, 465, 469, 425, 465, 154, 465, 464, 465,
	469, -232, -471, -231, -249, -231, -249, -270, -150, -150,
	-232, -231, -150, -446, 123, -445, 292, 150, 330, 292,
	150, -446, -446, -198, -422, 265, -423, 265, 415, 109,
	-419, -236, 176, -238, 154, 281, -251, -352, -470, -232,
	465, -232, 465, -318, -232, 89, 161, 390, 247, 30,
	-421, 247, 321, 56, 353, -421, -420, 464, 464, 465,
	-477, 433, -314, -477, -314, 330, 273, -445, 22, 255,
	105, -472, -262, -262, -172, 56, 321, 2, -231, -231,
	465, 465, -232, -232, -232, 395, -477, -477, 464, -262,
	465, -232,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 370, 371, 373,
	374, 375, 377, 378, 380, 382, 384, 386, 387, 389,
	391, 393, 394, 395, 396, 397, 399, 401, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 459, 461,
	0, 936, 938, 940, 942, 25, 26, 0, 0, 191,
	193, 195, 0, 220, 222, 224, 225, 227, -2, 0,
	322, 323, 325, 327, -2, -2, 0, 0, 448, 450,
	0, 0, 0, 470, 471, 0, 1027, -2, 464, 466,
	468, 533, 535, 537, 539, 541, 543, 545, 546, 548,
	550, 552, 554, 556, 558, 560, 561, 563, 565, 567,
	569, 571, 573, 575, 577, 579, 581, 583, -2, -2,
	-2, 0, -2, -2, -2, 954, 29, 31, 33, 35,
	37, 39, 41, 61, 276, 277, 279, 281, 283, 286,
	287, 289, 1075, 329, 331, 333, 335, 337, 0, -2,
	1087, 0, 0, 43, 44, 45, 46, 47, 48, 49,
	50, 68, 69, 70, 71, 72, 73, 74, 75, 54,
	56, 57, 63, 64, 66, 52, 0, 0, 1051, 1053,
	1055, 1057, -2, 0, 0, 7, 9, 11, 13, 15,
	17, 19, 21, 372, 376, 379, 381, 383, 385, 388,
	390, 392, 398, 400, 402, 830, 1691, 1705, 1706, 1707,
	1710, 1711, 1712, 1713, 1714, 1715, 2058, 2138, 2139, 1734,
	1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744,
	1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754,
	1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764,
	1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774,
	1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784,
	1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794,
	1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804,
	1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814,
	1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824,
	1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834,
	1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844,
	1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854,
	1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864,
	1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874,
	1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884,
	1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894,
	1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904,
	1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914,
	1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924,
	1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934,
	1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944,
	1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954,
	1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964,
	1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974,
	1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984,
	1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994,
	1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
	2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014,
	2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024,
	2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034,
	2035, 2036, 2037, 2038, 2039, 0, 426, 424, 1685, 427,
	1889, 429, 431, 316, 317, 318, 319, 320, 321, 0,
	441, 435, 440, 442, 444, 445, 446, 447, 421, 419,
	0, 441, 1737, 439, 934, 935, 929, 930, 1923, 964,
	460, -2, -2, -2, 2026, -2, 492, -2, 499, 2029,
	1925, 504, 0, 506, -2, 509, 937, 939, 941, 27,
	28, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 156, -2, -2, -2, -2, 0, 0, 1774, 1660,
	1707, 1663, 1658, 192, 194, 196, 197, 0, 0, 0,
	0, 0, 0, 221, 223, 226, 228, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 253, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, -2, 0,
	0, 0, 0, 0, 0, 0, 0, 744, 736, 737,
	882, 883, 904, 0, 0, 0, 0, 324, 326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 328, 0, 0,
	0, 0, 0, 0, 0, 254, 362, 363, 0, 1076,
	1076, 0, 0, 0, 0, 172, 163, 0, 0, 725,
	449, 451, 0, 158, 0, 0, 933, 0, 174, 0,
	0, 465, 467, 469, 534, 536, 538, 540, 542, 544,
	547, 549, 551, 553, 555, 557, 559, 562, 564, 566,
	568, 570, 572, 574, 576, 578, 580, 582, 584, 585,
	0, 0, 0, 0, -2, -2, 0, 0, 0, -2,
	-2, 0, 0, 0, 0, 0, 0, 0, -2, 0,
	0, -2, -2, -2, 0, 0, 0, -2, -2, 0,
	0, 0, 0, 588, 590, 591, 592, 0, 643, 660,
	0, 873, 1077, 966, 944, 957, 966, 946, 947, 948,
	949, 950, 955, 956, 959, 0, 951, 952, 953, 30,
	32, 34, 36, 38, 40, 42, 278, 280, 282, 284,
	288, 290, -2, 1049, 1050, 330, 332, 334, 336, 338,
	452, 0, 454, 0, 589, 1031, 1039, 0, -2, 0,
	1081, 1081, 1081, 0, 0, 1050, 1048, 0, 457, 458,
	513, 514, 1316, 0, 0, 0, 0, 0, 1557, 1400,
	0, 515, -2, 1431, 1433, 2005, 2026, 1556, 1435, 1436,
	1437, 1438, 1439, 0, 0, 1442, 1443, 1444, 1445, 1446,
	0, 1448, 0, 1452, 1453, 1454, 0, 2010, 1637, 1703,
	-2, 1219, 1220, 1221, 1222, 1223, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 2016, 1699, 0, 1523, 1468, -2, 1724,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1783, -2, -2, -2, -2, -2, -2, -2,
	1275, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	2040, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480,
	0, 1994, 2011, 2012, 2017, 2019, 2013, 2002, 1491, -2,
	2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050,
	2051, 2052, 2053, 2054, 2055, 2056, 1276, -2, 2006, 2007,
	2022, 2023, 2028, 2033, 2034, 2009, 2018, -2, -2, 1067,
	1898, 1070, 830, 1068, 1052, 1054, 0, 1056, 0, 0,
	0, 1061, 1084, 1082, 0, 1120, 1065, 1066, 1138, 1138,
	1162, 0, 1143, 0, 1162, 1076, 1188, 0, 1149, 1918,
	1469, 1470, 0, 1707, 1704, -2, 0, 0, 0, 0,
	0, 0, 0, 422, 0, 428, 430, 0, 0, 0,
	0, 0, 0, 0, 0, 963, 462, 463, 0, 487,
	0, 491, 2001, -2, 1742, 1938, -2, 495, 967, 971,
	972, 973, 974, 0, 0, 0, 0, 0, 501, 0,
	0, 488, 489, 507, 510, 0, 51, 0, 2011, 1188,
	53, 0, 1675, 1729, 1730, 1731, 1732, 1733, 2040, 2057,
	2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068,
	2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078,
	2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088,
	2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098,
	2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108,
	2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118,
	2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128,
	2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 55,
	0, 2011, 58, 0, 2011, 0, -2, 62, 0, 2011,
	175, 176, 1720, 1721, 1725, 1726, 1727, 1728, 65, 0,
	1681, 67, 0, 1678, 76, 0, 2011, 0, 1657, -2,
	1175, 159, 0, 0, 0, 717, 1654, 1659, 718, 1664,
	0, 198, 199, 200, 201, 202, 2011, 204, 205, 0,
	207, 208, 2011, 210, 211, 0, 213, 229, 230, 0,
	232, 0, 2011, 0, 0, 0, 238, -2, 255, 0,
	252, 0, 242, 243, 245, 246, 247, 248, 249, 0,
	294, 292, 1686, 0, 0, 0, 888, -2, 2011, 876,
	879, 2011, 881, 893, 1689, 0, -2, 0, 1074, 2011,
	981, 740, 741, 742, 743, 0, 313, 0, 994, 0,
	996, 0, 1017, 1194, 1138, 1138, 0, 256, 257, 258,
	259, 260, 2011, 0, 0, 0, 265, 0, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 151, 2011, 341,
	360, 151, 2011, 344, 151, 2011, 347, 151, 2011, 350,
	1652, 151, 2011, 353, 354, 2011, 356, 177, 357, 2011,
	359, 0, -2, 415, 1693, -2, 365, 0, 366, 0,
	-2, 0, 189, 0, 0, 723, 724, 0, 931, 932,
	0, 0, 472, 0, 0, 586, 587, 0, 0, 597,
	598, 599, 600, 1926, 1896, 1799, 604, 0, 607, 610,
	-2, 0, 0, 0, 0, 614, 0, 619, 620, 621,
	0, 722, 623, 0, 0, 625, 0, 629, 0, 632,
	0, 634, 0, 636, -2, -2, -2, 647, -2, 0,
	651, 0, 653, 0, 0, 0, 0, 668, 669, 0,
	674, 0, 677, 678, 679, 0, 681, 682, 683, 684,
	0, 686, 687, -2, -2, 691, 693, 0, 700, 0,
	704, 0, 708, 0, 593, 594, 151, 1192, 943, -2,
	945, 0, 961, 1034, -2, 0, 453, 0, 456, 1045,
	0, 1041, 0, 1043, 0, 1032, 1037, 1099, 1100, 0,
	0, 0, 0, 1079, 1080, 0, 0, 0, 1029, 1030,
	0, 0, 0, 0, 1562, 1563, 1564, 1565, 1566, 1567,
	1570, 1571, 1568, 1569, 1572, 1573, 0, 0, 0, 0,
	0, 1574, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1575, 1576, 1577, 0, 0, 1579, 0,
	1581, 0, 0, 0, 0, 0, 0, 1379, 1381, 1645,
	0, 0, 1578, 1321, 1322, 1323, 1358, 1359, 0, 0,
	1432, 1642, 1641, 1434, 0, 1593, 0, 1441, 1447, 1671,
	-2, 0, 1557, 1588, 0, 0, 1455, 1456, 1457, 0,
	0, 1593, 0, 0, 1636, 1313, 0, 0, 1525, 0,
	1255, 0, 1256, 1257, 0, 1258, 1259, 1272, 1285, 0,
	0, 0, 0, 1289, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1277, 0, 0, 0, 1617, -2, 0, 0, 0, 0,
	0, 1069, 0, 0, 1124, 1646, 1650, 1651, 1124, 1124,
	0, 0, 1594, 1185, 1185, 0, 0, 1181, 1181, 1181,
	1179, 1162, 0, 1162, 1172, 0, 1162, 1162, 0, -2,
	1143, 0, 0, 1172, 0, 1156, 403, 405, 407, 409,
	410, 411, 413, 1189, 1190, 0, 0, 0, 0, 0,
	0, 1708, 0, 0, 0, 1695, 0, 0, 0, 0,
	433, 443, 1076, 0, 1596, 1211, 1214, 1215, 1216, 1217,
	1218, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232,
	1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, -2, 1273,
	1275, 1296, 1262, 1263, 1264, 1265, 1266, 1244, 1245, 1246,
	1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1268, 0,
	1243, 1243, 1243, 1260, 1261, 1284, 1295, 1287, 1295, 1291,
	1212, 1213, 1278, 1279, 1280, 1281, 0, 437, 0, 0,
	0, 0, -2, 497, 502, 503, 0, 0, 969, 0,
	975, 524, 525, 526, 977, 978, 0, 500, 527, 528,
	529, 530, 531, 532, 0, 847, 0, 849, 1666, 0,
	498, 517, 505, 0, 511, 77, 926, 116, 0, 926,
	926, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	101, 112, 89, 90, 0, 0, 0, 0, 59, 855,
	0, 858, 0, 0, 0, 0, 0, 0, 0, 871,
	0, 0, 0, 0, 100, 0, 95, 79, 0, 0,
	0, 102, 114, 0, 142, 144, 0, 0, 180, 1174,
	0, 1175, 716, 0, 0, 1708, 1662, 0, 0, 0,
	0, 231, 233, 0, 235, 236, 237, 0, 887, 0,
	244, 241, 285, 804, 2011, 0, 0, 311, 306, 0,
	308, 854, 2011, 852, 1690, 0, 874, 0, 1073, 0,
	0, 0, 0, 894, 0, 2011, 899, 1677, 1716, 1717,
	983, 0, 315, 0, 997, 999, 0, 0, 1195, 0,
	1197, 1198, 0, 262, 263, 264, 0, 339, 0, 149,
	150, 0, 342, 0, 345, 0, 348, 0, 0, 351,
	0, 0, 0, 0, 1076, 0, 0, 0, 0, 165,
	0, 0, 0, 0, 0, 0, 1175, 161, 189, 189,
	1175, 474, 1175, 476, 0, 0, 601, 602, 603, 605,
	606, 608, 609, -2, -2, 701, 611, 612, 671, 0,
	0, 0, 670, 622, 0, 710, 1914, 720, 671, 1774,
	671, 1774, 671, 1774, 633, 635, 638, 663, 646, 650,
	0, 0, 0, 655, 0, 657, 0, 659, 671, 672,
	675, 680, 685, 0, 0, 0, 0, 0, 0, 0,
	872, 0, 960, 1035, 1037, 455, 1038, 0, 1047, 1040,
	0, 1044, 1033, 1097, 1098, 1103, 1104, 1110, 1113, 1114,
	1106, 1316, 1062, 1063, 1064, 1088, 1089, 913, 0, 2138,
	1317, 1206, 1318, 1319, 1674, 0, 1324, 1325, 1326, 1327,
	1328, 1329, 1330, 1331, 1332, 1333, -2, -2, -2, -2,
	-2, -2, -2, -2, 1342, 1343, 1344, 1345, 1346, 1347,
	1348, 1349, 1350, 1351, 1352, -2, -2, -2, 1356, 1357,
	-2, 1580, 1582, 0, 1645, 0, -2, 0, -2, -2,
	-2, -2, 1376, 0, 1378, 1383, 1385, 1387, 0, 0,
	0, 0, 1644, 1397, 1628, 1629, 0, 0, 1559, 1560,
	1561, 1382, 0, 1401, 1643, 1640, 0, 0, 1592, 1087,
	1459, 0, 0, 0, 0, 1466, 1451, 1590, 0, 1589,
	0, 0, 0, 1600, 0, 1635, 1631, 0, 1672, 1312,
	1299, 1300, 1301, 1302, 1303, 1304, 1314, 0, 1669, 1696,
	1702, 1533, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1492, 1493, 1494, 1495, 1496, 0, 1498,
	1499, 0, 1501, 1502, 1503, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1505, 0, 1603, -2, -2, -2,
	-2, -2, -2, -2, -2, 0, 1507, 0, 1509, 1594,
	1614, 0, 0, 1402, 0, 0, 0, 1557, 0, 1512,
	1594, 1622, 0, 0, 0, 0, 0, 1594, 0, 1627,
	0, 1519, 0, 1521, 1071, 0, 0, 1201, 0, 0,
	0, 1649, 1201, 1201, 0, 1119, 0, 0, 1182, 1183,
	1184, 0, 0, 1185, 0, 1176, 1180, 1177, 1178, 1172,
	1135, 0, 0, 1676, 1172, 1141, 1171, 0, 830, 1161,
	1172, 1172, 0, -2, 1145, 1162, 0, 0, 404, 406,
	408, 412, 414, 0, 0, 1087, -2, 189, 829, 0,
	0, 0, 0, 0, 423, 425, 0, 0, 417, 0,
	420, 0, 1202, 1205, 0, 0, -2, 0, 0, 1297,
	0, 0, 0, 0, 490, 0, 968, 976, 0, 521,
	0, 523, 0, 848, 1668, 1667, 0, 512, 0, 0,
	0, 0, 925, 120, 2011, 0, 153, 0, 0, 798,
	1682, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 91, 0,
	0, 0, 0, 0, 0, 0, 856, 857, 859, 866,
	868, 0, 862, 1670, 0, 863, 0, 865, 867, 869,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 92, 0, 0, 0, 0, 1656, 189, 0, 160,
	180, 1655, 1665, 0, 203, 206, 209, 212, 0, 239,
	0, 0, 746, 728, 0, 0, 293, 189, 0, 0,
	307, 850, 853, 0, 830, 886, 1688, 0, 0, 0,
	0, 0, 0, 892, 0, 0, 0, 2011, 985, 991,
	0, 1201, 0, 1015, 1000, 0, 0, 0, 1015, 1019,
	1020, 1022, 1023, 0, 0, 1196, 0, 266, 361, 151,
	151, 151, 1653, 151, 151, 178, 355, 358, 364, 416,
	1076, 1076, 189, 187, 1874, 185, 182, 184, 0, 0,
	0, 747, 749, 750, 751, 752, 0, 1717, 0, 1828,
	1717, 0, 1003, 1005, 0, 189, 0, 0, 305, 473,
	478, 595, 0, 640, 665, 613, 615, 616, 617, 0,
	721, 719, 624, 671, 627, 671, 630, 671, 649, 652,
	654, 0, 0, 0, 667, 0, 0, 0, 0, 0,
	0, 0, 705, 706, 707, 709, 1193, 1036, 1046, 1042,
	0, 1108, 0, 1107, 1111, 1112, 0, 1096, 911, 912,
	0, 0, 0, 0, -2, -2, 0, 0, 0, 1398,
	0, -2, 1377, 1380, 1384, 1386, 1388, 0, 0, 0,
	0, 0, 0, 1583, 0, 1585, 1399, 1638, 1641, 1555,
	0, 0, 1086, 1087, 1087, 0, 1465, 0, 1591, 0,
	1598, 1599, 0, 1458, 0, 1632, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1467, 0, 0, 0, 1267,
	1241, 0, 1295, 1293, 1294, 1288, 1295, 1292, 0, 1497,
	1500, 0, 0, 0, 0, 1486, 0, 0, 0, 1490,
	1504, 0, 1506, 1508, 0, 0, 1510, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1405, 1406, 1407, 1511, 1620, 1621, 0, 0, 0, 0,
	0, 0, 1517, 0, 1626, 1518, 1520, 1076, 1121, 1116,
	1200, 0, 1647, 1175, 1123, 1125, 1648, 1679, 1116, 1116,
	0, 1595, 0, 0, 1166, 0, 0, 0, 1168, 1139,
	0, 0, 1133, 0, 1129, 1130, 1131, 1132, 1140, 830,
	1170, 1142, 1146, 1696, 0, 1172, 0, 1157, 0, 1159,
	1191, 0, 1151, 1154, 0, 0, 190, 1709, 214, 218,
	219, 215, 216, 217, 432, 0, 0, 1597, 0, 1207,
	0, 0, 0, 0, 0, 436, 0, 486, -2, 519,
	520, 522, 0, 518, 117, 926, 0, 0, 917, 0,
	122, 2011, 131, 0, 775, 0, 1680, 0, 0, 0,
	0, 928, 0, 0, 2011, 151, 2011, 151, 134, 137,
	0, 141, 139, 0, 0, 766, 78, 926, 81, 85,
	93, 0, 0, 0, 99, 0, 0, 0, 919, 0,
	860, 861, 864, 870, 60, 0, 921, 915, 0, 914,
	143, 83, 87, 94, 0, 923, 80, 0, 154, 0,
	189, 1661, 0, 0, 0, 0, 0, 745, 815, 0,
	0, 0, 0, 299, 295, 0, 304, 310, 309, 0,
	0, 877, -2, 880, 889, 0, 891, 903, 0, 0,
	0, 987, 991, 0, 990, 1074, 1087, 314, 992, 1015,
	0, 0, 0, 1002, 998, 995, 1201, 0, 0, 0,
	0, 0, 261, 340, 343, 346, 349, 352, 367, 368,
	164, 0, 0, 0, 0, 0, 189, 0, 0, 0,
	0, 0, 1717, 1717, 0, 1684, 0, 0, 0, 0,
	157, 162, 0, 475, 0, 0, 0, 626, 628, 631,
	656, 658, 671, 694, 695, 761, 0, 761, 0, 0,
	0, 0, 1090, 1091, 0, 913, 0, 1320, 1361, 0,
	0, -2, 0, 0, 1365, 0, 0, 0, -2, 0,
	0, 0, 1584, 1586, 0, 1640, 1460, 0, 0, 0,
	1464, 1449, 1450, 1558, 1601, 1630, 1634, 0, 1305, 1306,
	1307, 1308, 1309, 1310, 1311, 0, 1673, 1697, 1701, 1531,
	1532, 1536, 1687, 0, 0, 0, 1286, 1290, 1471, 0,
	0, 0, 0, 0, 0, 0, 1602, 1613, 1615, 1403,
	1404, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416,
	1417, -2, -2, -2, 1421, 1422, 1423, -2, -2, -2,
	0, 0, 0, 1616, 1618, 1619, 1623, 1624, 0, 1514,
	1515, 1516, 1625, 0, 1118, 0, 1199, 1122, 0, 1118,
	1118, 1083, 1164, 0, 0, 1187, 0, 1136, 0, 1137,
	0, 1169, 0, 1144, 1147, 1148, 1158, 0, 1150, 0,
	1153, 0, 1460, -2, 434, 418, 0, 0, 1209, 0,
	1270, 1274, 1298, 438, 1173, 0, 0, 0, 0, 152,
	773, 797, 0, 0, 906, 913, 0, 0, 124, 0,
	0, 0, 132, 0, 0, 129, 0, 136, 140, 0,
	0, 0, 0, 0, 96, 97, 98, 0, 103, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 179, 155,
	234, 885, 240, 755, 803, 0, 805, 0, 729, 0,
	804, 291, 0, 298, 0, 854, 0, 875, 890, 0,
	0, 0, 0, 0, 989, 991, 0, 982, 983, 1102,
	993, 1013, -2, 1012, 0, 1087, 1021, 1018, 1024, 1025,
	0, 186, 0, 181, 183, 0, 167, 0, 0, 748,
	753, 0, 0, 0, 0, 0, 1004, 1006, 0, 173,
	0, 596, 618, 666, 696, 760, 0, 0, 698, 0,
	0, 1105, 1109, 1094, 1095, 1092, 913, 1363, 1367, 0,
	0, 0, 1369, -2, 0, 1391, -2, -2, 1587, 1639,
	1440, 1087, 1461, 1463, 1633, 1315, 0, 1538, 1535, 0,
	1522, 1242, 1481, 1482, 0, 0, 1485, 1487, 1488, 1489,
	1612, 0, 0, 0, 0, 1513, 1072, 1527, 0, 0,
	1126, 1527, 1527, 1165, 0, 1167, 1134, 1127, 0, 1697,
	1160, 1152, 0, 0, 1203, 1208, 0, 1269, 118, 119,
	121, 0, 774, 0, 777, 0, 0, 0, 0, 784,
	785, 0, 0, 0, 0, 0, 819, 828, 0, 1096,
	0, 0, 0, 126, 146, 0, 0, 927, 0, 0,
	151, 151, 0, 0, 918, 0, 0, 0, 0, 106,
	0, 0, 920, 922, 916, 0, 0, 924, 763, 0,
	815, 807, 808, 809, 0, 814, 816, 0, 0, 733,
	730, 746, 728, 0, 296, 851, 884, 0, 902, 0,
	0, 0, 979, 991, 0, 984, 985, 1015, 1101, 0,
	0, 0, 1001, 1102, 0, 188, 189, 0, 0, 0,
	0, 0, 0, 0, 189, 477, 479, 0, 0, 485,
	759, 0, 0, 0, 0, 1093, 1371, -2, -2, 1392,
	0, 1698, 1700, 1087, 0, 1524, 0, 0, -2, 0,
	0, 0, 1058, 0, 1117, 1115, 1059, 1060, 1186, 0,
	1155, 0, 1210, 123, 0, 778, 779, 1683, 781, 0,
	783, 786, 0, 788, 1719, 0, 792, 799, 820, 0,
	755, 0, 825, 826, 907, 908, 801, 0, 125, 127,
	145, 910, 0, 128, 135, 0, 0, 82, 0, 0,
	1768, 109, 107, 105, 84, 0, 728, 762, 0, 806,
	0, 817, 818, 731, 0, 0, 0, 297, 300, 0,
	303, 0, 903, 0, 0, 0, 986, 987, 312, 0,
	0, 0, 1015, 1026, 166, 0, 0, 828, 0, 0,
	796, 0, 171, 0, 481, 0, 483, 0, 697, 699,
	0, 0, 1462, 1542, 0, 1483, 1484, -2, 0, 1429,
	1526, 1528, 0, 1128, 1204, 776, 780, 0, 0, 834,
	0, 0, 0, 823, 824, 763, 0, 0, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 726, 0, 0,
	734, 0, 755, 0, 301, 302, 828, 0, 828, 0,
	988, 989, 0, 1008, 1009, 1011, 1016, 0, 0, 755,
	828, 795, 0, 480, 0, 0, 702, 703, 0, 0,
	0, 0, 1537, 1430, 0, 0, 0, 787, 839, 0,
	0, 0, 821, 822, 819, 0, 830, 130, 0, 909,
	133, 0, 767, 0, 0, 770, 0, 0, 110, 1768,
	108, 0, 0, 0, 811, 813, 735, 763, 733, 755,
	0, 755, 0, 980, 0, 1010, 189, 189, 763, 755,
	189, 482, 484, 1534, 1554, 1543, -2, 1974, 1771, 0,
	1554, 1554, 1529, 1530, 0, 789, 835, 836, 0, 831,
	832, 833, 1718, 790, 791, 800, 827, 834, 147, 764,
	0, 0, 765, 0, 0, 113, 0, 115, 0, 810,
	0, 728, 732, 763, 0, 763, 0, 1201, 168, 169,
	793, 763, 170, 1539, 0, 0, 1545, 1546, 1547, 1548,
	1549, 1540, 1541, 782, 837, 0, 838, 0, 0, 0,
	839, 768, 0, 771, 0, 111, 0, 812, 727, 900,
	828, 900, 828, 1007, 794, 0, 1551, 1552, 0, 0,
	840, 0, 843, 844, 0, 841, 819, 0, 0, 758,
	895, 0, 755, 897, 755, 1550, 1553, 1544, 842, 845,
	846, 802, 0, 0, 754, 756, 757, 901, 763, 763,
	763, 0, 900, 900, 769, 0, 896, 898, 0, 0,
	763, 772,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 453, 3, 459, 454, 3,
	464, 465, 457, 455, 469, 456, 466, 458, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 472, 3,
	445, 447, 446, 450, 468, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 462, 3, 463, 460, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 470, 452, 471, 448,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 449, 57788, 451, 57789, 461,
	57790, 467, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1092
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1097
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1101
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1102
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1103
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1104
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1105
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1106
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1107
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1108
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1112
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1121
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1122
		{
			return helpWith(sqllex, "ALTER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1125
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1126
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1127
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1128
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1129
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1130
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1131
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1185
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1211
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1222
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1237
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1241
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1245
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1256
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1268
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1287
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1319
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1323
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1327
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1333
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1337
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1343
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1352
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1363
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1367
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1373
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1381
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1391
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1395
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1405
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1416
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1423
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1435
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1442
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1450
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1455
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1459
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1464
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1470
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1478
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1489
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 103:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1499
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 104:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1509
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 105:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1518
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[9].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			s.AllIndexes = true
			sqlVAL.union.val = s
		}
	case 106:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1529
		{
			err := errors.New("index name should not be specified in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION ... OF INDEX")
			return setErr(sqllex, err)
		}
	case 107:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1535
		{
			err := errors.New("index wildcard unsupported in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION <partition> OF INDEX <tablename>@*")
			return setErr(sqllex, err)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1543
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1547
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1551
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1555
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1561
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1566
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1577
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1581
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1587
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1591
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1598
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1603
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1608
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1613
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1618
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1623
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1628
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1633
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1638
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1643
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1648
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1657
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1669
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1679
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1686
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1690
		{
			sqlVAL.union.val = &tree.AlterTableAlterPrimaryKey{
				Columns: sqlDollar[7].union.idxElems(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1696
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1703
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1712
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1721
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1726
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1733
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1741
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1742
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1746
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1750
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1756
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1764
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1768
		{
			sqlVAL.union.val = nil
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1774
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1778
		{
			sqlVAL.union.val = nil
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1785
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1789
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1793
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1799
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1803
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 154:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1829
		{
			sqlVAL.union.val = &tree.Backup{DescriptorCoverage: tree.AllDescriptors, To: sqlDollar[3].union.partitionedBackup(), IncrementalFrom: sqlDollar[5].union.exprs(), AsOf: sqlDollar[4].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1833
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1836
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1859
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1862
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1866
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1870
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1876
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1880
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1886
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 164:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1923
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1928
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1932
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1938
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1943
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1948
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1953
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1958
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1962
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1978
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1981
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1985
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1989
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1997
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2001
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2007
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 180:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2011
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2017
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2021
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2025
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2029
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2035
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2039
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2045
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 188:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2049
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2053
		{
			sqlVAL.union.val = nil
		}
	case 190:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2059
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2073
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2074
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2075
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2076
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2086
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2094
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2096
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2099
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2109
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2118
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2126
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2128
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2132
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2135
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2145
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2154
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2162
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2164
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2168
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2171
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2175
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2179
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2183
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2196
		{
			sqlVAL.union.val = &tree.CommentOnIndex{Index: sqlDollar[4].union.tableIndexName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2202
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2207
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2219
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2220
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2222
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2223
		{
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2224
		{
			return helpWith(sqllex, "CREATE")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2227
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2228
		{
			return unimplemented(sqllex, "create cast")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2229
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2230
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2231
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2232
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2233
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2234
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2235
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2236
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2237
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2238
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2239
		{
			return unimplementedWithIssue(sqllex, 41649)
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2240
		{
			return unimplemented(sqllex, "create operator")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2241
		{
			return unimplemented(sqllex, "create publication")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2242
		{
			return unimplemented(sqllex, "create rule")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2243
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2244
		{
			return unimplemented(sqllex, "create server")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2245
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2246
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2247
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2250
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2251
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2254
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2255
		{
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2258
		{
		}
	case 255:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2259
		{
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2262
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2263
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2264
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2265
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2266
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2267
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2268
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2269
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2270
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2271
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2272
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2273
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2274
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2275
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2276
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2277
		{
			return unimplemented(sqllex, "drop server")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2278
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2279
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2280
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2281
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2285
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2286
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2287
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2288
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2290
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2291
		{
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2292
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2293
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2303
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2311
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2315
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2319
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2325
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2329
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2338
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2345
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2351
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2357
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2361
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2372
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2384
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2392
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2400
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2410
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2414
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2420
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2424
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2431
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2435
		{

			sqlVAL.union.val = nil
		}
	case 312:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2449
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[6].union.expr()),
				OrderBy:   sqlDollar[7].union.orderBy(),
				Limit:     sqlDollar[8].union.limit(),
				Returning: sqlDollar[9].union.retClause(),
			}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2459
		{
			return helpWith(sqllex, "DELETE")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2462
		{
			return unimplementedWithIssueDetail(sqllex, 40963, "delete using")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2463
		{
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2471
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2474
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2475
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2476
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2477
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2478
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2487
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2488
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2489
		{
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2490
		{
			return helpWith(sqllex, "DROP")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2493
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2494
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2495
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2496
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2497
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2505
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2509
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2512
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2520
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2524
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2527
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2535
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2539
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2542
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2550
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2558
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2565
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2573
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2581
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2588
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2596
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2600
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2603
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2611
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2615
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2618
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2622
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2627
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2650
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2653
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2655
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2659
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", "ANALYZE"}, Statement: sqlDollar[3].union.stmt()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2663
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", "ANALYZE"}, Statement: sqlDollar[3].union.stmt()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2667
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), "ANALYZE"), Statement: sqlDollar[6].union.stmt()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2671
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), "ANALYZE"), Statement: sqlDollar[6].union.stmt()}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2678
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2682
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2685
		{
			return helpWith(sqllex, "DELETE")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2687
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2688
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2689
		{
			return helpWith(sqllex, "INSERT")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2690
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2692
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2693
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2694
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2697
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2702
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2703
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2704
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2709
		{
			return helpWith(sqllex, "DELETE")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2710
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2711
		{
			return helpWith(sqllex, "INSERT")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2713
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2717
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2718
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2722
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2726
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2736
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2744
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2752
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2756
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 421:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2760
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2770
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2777
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2785
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2789
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 426:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2793
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2803
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2807
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2811
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2815
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2818
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2838
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2842
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2846
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2849
		{
			return helpWith(sqllex, "GRANT")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2869
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2873
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2877
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2880
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2885
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2889
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2899
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2903
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2917
		{
			return helpWith(sqllex, "RESET")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2918
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2926
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2930
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2933
		{
			return helpWith(sqllex, "RESET")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2941
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2944
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2955
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2958
		{
			return helpWith(sqllex, "USE")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2962
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2963
		{
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2964
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2965
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2969
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2970
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2971
		{
			return helpWith(sqllex, "USE")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2987
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 473:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3002
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3005
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3023
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3031
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3035
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3039
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3045
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3049
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3055
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3059
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3063
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3067
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3071
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3082
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3085
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3095
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3111
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3115
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3120
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3137
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3140
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3142
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3145
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3149
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3168
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3175
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3180
		{

			sqlVAL.union.val = &tree.SetSessionAuthorizationDefault{}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3185
		{
			return unimplementedWithIssue(sqllex, 40283)
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3190
		{
			return unimplemented(sqllex, "set from current")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3191
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3199
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3204
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3211
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3215
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3221
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3225
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3232
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3253
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3257
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3263
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3267
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3271
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3275
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3279
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3285
		{
			sqlVAL.union.val = tree.Low
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3289
		{
			sqlVAL.union.val = tree.Normal
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3293
		{
			sqlVAL.union.val = tree.High
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3304
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3308
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3312
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3317
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3321
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3334
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3335
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3336
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3337
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3338
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3339
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3341
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3342
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3343
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3344
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3345
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3346
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3347
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3349
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3350
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3351
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3352
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3353
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3354
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3355
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3356
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3357
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3358
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3359
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3361
		{
			return helpWith(sqllex, "SHOW")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3368
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3369
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3370
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3381
		{
			sqlVAL.str = "client_encoding"
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3384
		{
			sqlVAL.str = "timezone"
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3385
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3399
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3403
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3407
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3418
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3426
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3434
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3441
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
			}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3449
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3457
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3464
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3474
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3478
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3481
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3483
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3486
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3488
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3492
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3495
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 613:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3503
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3506
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3514
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3518
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsDB: true, Database: tree.Name(sqlDollar[5].str)}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3522
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3526
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3529
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3537
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3540
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3553
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3561
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 624:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3569
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3572
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 626:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3574
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3578
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3582
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3585
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 630:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3587
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3591
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3594
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3602
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3605
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3607
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3610
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3618
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3621
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3623
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3626
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3630
		{
			sqlVAL.union.val = true
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3632
		{
			sqlVAL.union.val = true
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3634
		{
			sqlVAL.union.val = false
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3644
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: true}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3648
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: false}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3651
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3652
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3654
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3658
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[5].union.slct(), Block: true}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3661
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3663
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3671
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				Block: true,
			}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3679
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3688
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3691
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3693
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3696
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3698
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3702
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3705
		{
			sqlVAL.union.val = true
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3706
		{
			sqlVAL.union.val = false
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3714
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3717
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3719
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3722
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3730
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3740
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3750
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3753
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3756
		{
			sqlVAL.union.val = true
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3757
		{
			sqlVAL.union.val = false
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3764
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3768
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3771
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3778
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3782
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3785
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3792
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3796
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3804
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3809
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3814
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3818
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3826
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3830
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3834
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3847
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3850
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3858
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3861
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3865
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3869
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3873
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3881
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3889
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3896
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3903
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3907
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3918
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: tree.TableIndexName{Table: name},
			}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3926
		{
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: sqlDollar[5].union.tableIndexName(),
			}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3932
		{
			return helpWith(sqllex, "SHOW RANGE")
		}
	case 705:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3941
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3946
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3950
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: tree.Name(sqlDollar[5].str)}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3953
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3957
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3964
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3969
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4089
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4093
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4097
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4136
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4140
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4145
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4149
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4158
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4165
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4169
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4181
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4190
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4193
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 726:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4229
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  sqlDollar[8].union.interleave(),
				Defs:        sqlDollar[6].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[9].union.partitionBy(),
				Temporary:   sqlDollar[2].union.persistenceType(),
			}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4242
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  sqlDollar[11].union.interleave(),
				Defs:        sqlDollar[9].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[12].union.partitionBy(),
				Temporary:   sqlDollar[2].union.persistenceType(),
			}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4256
		{
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4257
		{
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4258
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4262
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  nil,
				Defs:        sqlDollar[5].union.tblDefs(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:4273
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  nil,
				Defs:        sqlDollar[8].union.tblDefs(),
				AsSource:    sqlDollar[11].union.slct(),
			}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4285
		{
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4286
		{
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4287
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4305
		{
			sqlVAL.union.val = true
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4306
		{
			sqlVAL.union.val = true
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4307
		{
			sqlVAL.union.val = false
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4311
		{
			sqlVAL.union.val = true
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4312
		{
			sqlVAL.union.val = true
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4313
		{
			sqlVAL.union.val = true
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4314
		{
			sqlVAL.union.val = true
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4315
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4320
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4326
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4330
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4336
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4342
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4345
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 754:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4349
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4358
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4365
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4370
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4375
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4381
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4388
		{
			sqlVAL.str = ""
		}
	case 763:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4395
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 764:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4401
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4408
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4415
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4421
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4425
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 769:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4431
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4441
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4445
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 772:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4451
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4465
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4476
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4480
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4486
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4490
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4494
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4498
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4502
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4506
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4510
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4528
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4532
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4536
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4540
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4544
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4548
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4552
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4562
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4566
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4570
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 793:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4577
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4587
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4599
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4609
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4621
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4626
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 799:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4632
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4638
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4649
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4659
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4673
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 804:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4677
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4683
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4693
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4704
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4708
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4715
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4721
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4732
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4736
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4742
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4748
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 815:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4752
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4758
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4762
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4768
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4773
		{
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4774
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4775
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4776
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4777
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4778
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 827:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4795
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 828:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4799
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4805
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 830:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4809
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4829
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4833
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4837
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 834:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4841
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4850
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4854
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4858
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4862
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4866
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4872
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4878
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4886
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4890
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4894
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4898
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4902
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4908
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4912
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4918
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 850:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4937
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name:      name,
				Temporary: sqlDollar[2].union.persistenceType(),
				Options:   sqlDollar[5].union.seqOpts(),
			}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4946
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name: name, Options: sqlDollar[8].union.seqOpts(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: true,
			}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4954
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 854:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4958
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4961
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4962
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4965
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4966
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4968
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4969
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: nil}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4970
		{
			varName, err := sqlDollar[3].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[3].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: columnItem}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4980
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4983
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4985
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4987
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4989
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4990
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4992
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4993
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4995
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4997
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5005
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5008
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 874:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5016
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5020
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5023
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5027
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 878:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5031
		{
			sqlVAL.union.val = nil
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5041
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5045
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5048
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5053
		{
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5054
		{
		}
	case 884:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5062
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
				Temporary:   sqlDollar[2].union.persistenceType(),
			}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5071
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 886:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5072
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 887:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5075
		{
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5076
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 889:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5082
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 890:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5084
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 891:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5086
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 892:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5088
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5090
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 894:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5092
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 895:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5108
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5122
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5137
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5151
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5165
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 900:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5168
		{
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5169
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 902:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5173
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5188
		{
			sqlVAL.union.val = false
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5194
		{
			sqlVAL.union.val = true
		}
	case 905:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5198
		{
			sqlVAL.union.val = false
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5204
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5208
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5217
		{

			e := sqlDollar[1].union.expr()
			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: dir, NullsOrder: nullsOrder}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5239
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 910:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5240
		{
			sqlVAL.str = ""
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5244
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5248
		{
			sqlVAL.union.val = tree.Descending
		}
	case 913:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5252
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 914:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5258
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5265
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5269
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5275
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5281
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5289
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5295
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5303
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5309
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5317
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5321
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5326
		{
		}
	case 926:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5327
		{
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5330
		{
		}
	case 928:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5331
		{
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5339
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5342
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5352
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5361
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5364
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5372
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5375
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5379
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5380
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5381
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5397
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5400
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5402
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5405
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5415
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5418
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5420
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5423
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5427
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5432
		{
		}
	case 953:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5433
		{
		}
	case 954:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5434
		{
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5442
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5449
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5452
		{
		}
	case 958:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5453
		{
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5457
		{
			sqlVAL.str = ""
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5461
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5465
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 962:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5469
		{
			sqlVAL.str = ""
		}
	case 963:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5475
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5479
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5485
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5489
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5495
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5499
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 969:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5512
		{
		}
	case 970:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5514
		{
		}
	case 971:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5518
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5523
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5527
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5531
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5537
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5543
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5549
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5553
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 979:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5563
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5573
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5583
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5587
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 983:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5591
		{
			sqlVAL.str = ""
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5597
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 985:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5601
		{
			sqlVAL.str = ""
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5607
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 987:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5611
		{
			sqlVAL.str = ""
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5617
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 989:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5621
		{
			sqlVAL.str = ""
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5626
		{
		}
	case 991:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5627
		{
		}
	case 992:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5639
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 993:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5646
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5653
		{
			return helpWith(sqllex, "INSERT")
		}
	case 995:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5664
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5671
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5675
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5684
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5689
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5695
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5699
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5703
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5709
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5713
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5733
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5737
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5741
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5747
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5750
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5751
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5753
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5759
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5764
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5768
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5785
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5797
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5800
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5803
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5809
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5813
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5826
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5829
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5833
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5876
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5882
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5886
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5901
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), ForLocked: sqlDollar[2].union.forLocked()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5905
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), ForLocked: sqlDollar[3].union.forLocked()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5909
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), ForLocked: sqlDollar[4].union.forLocked()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5913
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), ForLocked: sqlDollar[3].union.forLocked()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5917
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), ForLocked: sqlDollar[4].union.forLocked()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5921
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), ForLocked: sqlDollar[5].union.forLocked()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5926
		{
			sqlVAL.union.val = tree.ForLocked{}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5928
		{
			sqlVAL.union.val = tree.ForLocked{Strength: sqlDollar[1].union.lockingStrength(), Targets: sqlDollar[2].union.tableNames()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5933
		{
			sqlVAL.union.val = tree.TableNames{}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5934
		{
			sqlVAL.union.val = sqlDollar[2].union.tableNames()
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5937
		{
			sqlVAL.union.val = tree.ForUpdate
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5938
		{
			sqlVAL.union.val = tree.ForNoKeyUpdate
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5939
		{
			sqlVAL.union.val = tree.ForShare
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5940
		{
			sqlVAL.union.val = tree.ForKeyShare
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5943
		{
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5945
		{
			return unimplementedWithIssue(sqllex, 40476)
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5946
		{
			return unimplementedWithIssue(sqllex, 40476)
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5951
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5986
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5987
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5988
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6010
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6023
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6037
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6049
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6053
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6062
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6071
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6086
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6093
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6105
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6109
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6114
		{
			sqlVAL.union.val = &tree.With{Recursive: true, CTEList: sqlDollar[3].union.ctes()}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6120
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6124
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6130
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6138
		{
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6139
		{
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6143
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6147
		{
			sqlVAL.union.val = nil
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6152
		{
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6153
		{
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6157
		{
			sqlVAL.union.val = true
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6161
		{
			sqlVAL.union.val = false
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6165
		{
			sqlVAL.union.val = false
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6171
		{
			sqlVAL.union.val = true
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6177
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6182
		{
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6183
		{
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6187
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6191
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6197
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6203
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6207
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6213
		{

			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			sqlVAL.union.val = &tree.Order{
				OrderType:  tree.OrderByColumn,
				Expr:       sqlDollar[1].union.expr(),
				Direction:  dir,
				NullsOrder: nullsOrder,
			}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6234
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6239
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6251
		{
			sqlVAL.union.val = tree.NullsFirst
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6255
		{
			sqlVAL.union.val = tree.NullsLast
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6259
		{
			sqlVAL.union.val = tree.DefaultNullsOrder
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6268
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6277
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
				sqlVAL.union.val.(*tree.Limit).LimitAll = sqlDollar[2].union.limit().LimitAll
			}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6289
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6293
		{
			sqlVAL.union.val = &tree.Limit{LimitAll: true}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6297
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6306
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6312
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6319
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6328
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6332
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6336
		{
			sqlVAL.union.val = tree.NewNumVal(constant.MakeInt64(1), "", false)
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6342
		{
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6343
		{
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6346
		{
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6347
		{
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6364
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6368
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6374
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6378
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6397
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6400
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6402
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6414
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6417
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6419
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6425
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6429
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6435
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6439
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6444
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6449
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6455
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6460
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6467
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6472
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6483
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6487
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6491
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6499
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6530
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6540
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6550
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6558
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6567
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6571
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6575
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6586
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6610
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6616
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
				Columns: sqlDollar[3].union.tableRefCols(),
				As:      sqlDollar[4].union.aliasClause(),
			}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6627
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6631
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6637
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6639
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6643
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6649
		{
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6651
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6654
		{
			sqlVAL.union.val = nil
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6655
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6656
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6660
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6664
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6670
		{
			sqlVAL.union.val = true
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6674
		{
			sqlVAL.union.val = false
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6694
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6698
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6702
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6706
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6710
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6714
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6720
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6724
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6731
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6737
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6744
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6750
		{
			sqlVAL.str = tree.AstFull
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6754
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6758
		{
			sqlVAL.str = tree.AstRight
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6762
		{
			sqlVAL.str = tree.AstInner
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6768
		{
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6769
		{
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6790
		{
			sqlVAL.str = tree.AstHash
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6794
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6798
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6802
		{
			sqlVAL.str = ""
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6815
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6819
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6824
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6825
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6826
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6827
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6831
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6836
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6850
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6854
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6860
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6866
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6876
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6886
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6893
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6905
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6918
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6926
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6927
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6937
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6944
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6945
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6947
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6955
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6956
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6984
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6988
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6992
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6996
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7000
		{
			sqlVAL.union.val = types.String
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7004
		{
			sqlVAL.union.val = types.Name
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7008
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7017
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7021
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7025
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7029
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7033
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7037
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7041
		{
			sqlVAL.union.val = types.INet
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7045
		{
			sqlVAL.union.val = types.Oid
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7049
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7053
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7057
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7088
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7096
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7104
		{
			sqlVAL.union.val = nil
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7111
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7115
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7119
		{
			sqlVAL.union.val = types.Int2
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7123
		{
			sqlVAL.union.val = types.Int2
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7127
		{
			sqlVAL.union.val = types.Int4
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7131
		{
			sqlVAL.union.val = types.Int
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7135
		{
			sqlVAL.union.val = types.Int
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7139
		{
			sqlVAL.union.val = types.Int
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7143
		{
			sqlVAL.union.val = types.Float4
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7147
		{
			sqlVAL.union.val = types.Float4
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7151
		{
			sqlVAL.union.val = types.Float
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7155
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7159
		{
			sqlVAL.union.val = types.Float
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7163
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7171
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7179
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7187
		{
			sqlVAL.union.val = types.Bool
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7191
		{
			sqlVAL.union.val = types.Bool
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7198
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7202
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7206
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7210
		{
			sqlVAL.union.val = types.RegType
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7214
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7220
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7233
		{
			sqlVAL.union.val = types.Float
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7239
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7245
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7253
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7257
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7261
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7267
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7279
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7285
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7289
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7293
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7297
		{
			sqlVAL.union.val = types.String
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7306
		{
			sqlVAL.union.val = true
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7307
		{
			sqlVAL.union.val = false
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7312
		{
			sqlVAL.union.val = types.Date
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7316
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimeTZ
			} else {
				sqlVAL.union.val = types.Time
			}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7324
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimeTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTime(prec)
			}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7336
		{
			sqlVAL.union.val = types.TimeTZ
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7338
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimeTZ(prec)
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7347
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7355
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7368
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7372
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7382
		{
			sqlVAL.union.val = true
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7383
		{
			sqlVAL.union.val = false
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7384
		{
			sqlVAL.union.val = false
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7388
		{
			sqlVAL.union.val = types.Interval
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7392
		{
			sqlVAL.union.val = types.MakeInterval(sqlDollar[2].union.intervalTypeMetadata())
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7396
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeInterval(types.IntervalTypeMetadata{Precision: prec, PrecisionIsSet: true})
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7407
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_YEAR,
				},
			}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7415
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_MONTH,
				},
			}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7423
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_DAY,
				},
			}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7431
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_HOUR,
				},
			}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7439
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7447
		{
			sqlVAL.union.val = sqlDollar[1].union.intervalTypeMetadata()
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7453
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_YEAR,
					DurationType:     types.IntervalDurationType_MONTH,
				},
			}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7462
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_DAY,
					DurationType:     types.IntervalDurationType_HOUR,
				},
			}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7471
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_DAY,
					DurationType:     types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7480
		{
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_DAY
			sqlVAL.union.val = ret
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7486
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_HOUR,
					DurationType:     types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7495
		{
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_HOUR
			sqlVAL.union.val = ret
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7501
		{
			sqlVAL.union.val = sqlDollar[3].union.intervalTypeMetadata()
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_MINUTE
			sqlVAL.union.val = ret
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7511
		{
			sqlVAL.union.val = nil
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7517
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_SECOND,
				},
			}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7525
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_SECOND,
				},
				PrecisionIsSet: true,
				Precision:      prec,
			}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7562
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7566
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7570
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7574
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7585
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7590
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7594
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7598
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7602
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7606
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7610
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7614
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7618
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7622
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7626
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7630
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7634
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7638
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7642
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7646
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7650
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7654
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7658
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7662
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7666
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7670
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7674
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7678
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7682
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7686
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7690
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7694
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7698
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7702
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7706
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Overlaps, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7710
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7714
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7718
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7722
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7726
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7730
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7734
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7738
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7742
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7746
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7750
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7754
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7758
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7762
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7766
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7770
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7774
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7778
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7782
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7786
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7790
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7794
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7798
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7802
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7806
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7810
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7814
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7818
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7822
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7826
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7829
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7831
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7835
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7839
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7843
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7847
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7851
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7855
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7859
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7863
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7867
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7871
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7875
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7879
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7883
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7887
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7891
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7895
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7912
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7917
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7929
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7933
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7937
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7941
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7945
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7949
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7953
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7957
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7961
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7965
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7969
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7973
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7977
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7981
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7985
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7989
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7993
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7997
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8001
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8005
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8009
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8013
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8017
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8021
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8025
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8029
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8033
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8037
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8051
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8059
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8095
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8099
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8103
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8107
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8111
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8116
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8118
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8122
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8126
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8130
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8134
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8138
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8142
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8151
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8158
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8162
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8166
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8171
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8175
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8179
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8183
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8187
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8190
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8194
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8198
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8201
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8202
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8204
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8210
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8214
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8217
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8228
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8235
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8244
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8245
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8250
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8254
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8258
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8264
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8268
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8272
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8276
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8282
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8286
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8290
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8294
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8298
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8302
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8306
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8310
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8314
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8318
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8322
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8326
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8330
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8337
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8340
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8342
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8345
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8347
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8351
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8354
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8356
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8360
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8363
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8365
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8368
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8370
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8373
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8375
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8378
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8380
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8383
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8385
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8389
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8392
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8393
		{
			return unimplemented(sqllex, "treat")
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8395
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8399
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8403
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8407
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8411
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8414
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8416
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8419
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8424
		{
			return unimplemented(sqllex, "within group")
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8425
		{
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8429
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8433
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8440
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8444
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8450
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8454
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8460
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8468
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8472
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8476
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8483
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8503
		{
			sqlVAL.str = ""
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8509
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8513
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8519
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.RANGE,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8527
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.ROWS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8535
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.GROUPS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8543
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8549
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8562
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8590
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8594
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8598
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8602
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8609
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8618
		{
			sqlVAL.union.val = tree.ExcludeCurrentRow
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8622
		{
			sqlVAL.union.val = tree.ExcludeGroup
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8626
		{
			sqlVAL.union.val = tree.ExcludeTies
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8630
		{

			sqlVAL.union.val = tree.NoExclusion
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8635
		{
			sqlVAL.union.val = tree.NoExclusion
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8648
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8652
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8659
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8671
		{
			sqlVAL.union.val = tree.Any
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8675
		{
			sqlVAL.union.val = tree.Some
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8679
		{
			sqlVAL.union.val = tree.All
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8684
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8685
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8686
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8687
		{
			sqlVAL.union.val = tree.Div
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8688
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8689
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8690
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8691
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8692
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8693
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8694
		{
			sqlVAL.union.val = tree.LT
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8695
		{
			sqlVAL.union.val = tree.GT
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8696
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8697
		{
			sqlVAL.union.val = tree.LE
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8698
		{
			sqlVAL.union.val = tree.GE
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8699
		{
			sqlVAL.union.val = tree.NE
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8703
		{
			sqlVAL.union.val = tree.Like
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8704
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8705
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8706
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8729
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8733
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8739
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8743
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8747
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8758
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8762
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8768
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8772
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8779
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8785
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8789
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8795
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8799
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8805
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8809
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8815
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8819
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8825
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8829
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8852
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8856
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8860
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8866
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8873
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8877
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8894
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8898
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8902
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8906
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8910
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8916
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8922
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8928
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8932
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8936
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8942
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1630:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8954
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8961
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8965
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8971
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8977
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8981
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8988
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8994
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8998
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9005
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9011
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9015
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9020
		{
		}
	case 1645:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9021
		{
		}
	case 1646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9025
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9029
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9035
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9044
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9048
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9052
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9060
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9064
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9070
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9074
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9093
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9101
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9124
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9133
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1661:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9137
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9141
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9145
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9151
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9155
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9163
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9167
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9176
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9187
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9196
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9204
		{
			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithTypeMetadata(sqlDollar[2].str, sqlDollar[3].union.intervalTypeMetadata())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1673:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9216
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			d, err := tree.ParseDIntervalWithTypeMetadata(sqlDollar[5].str, types.IntervalTypeMetadata{
				Precision:      prec,
				PrecisionIsSet: true,
			})
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9313
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9320
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1697:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9324
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1698:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9328
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1700:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9342
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9346
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9350
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9363
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9381
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9394
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1709:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9401
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9426
		{
			sqlVAL.str = ""
		}
	case 1718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9432
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1719:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9436
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
