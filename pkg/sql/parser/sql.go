// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24

import (
	"fmt"
	"strings"

	"go/constant"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:65

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:580
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9199

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 26,
	-2, 984,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 69,
	177, 823,
	194, 823,
	209, 231,
	285, 231,
	293, 679,
	320, 231,
	329, 679,
	366, 679,
	391, 231,
	414, 679,
	-2, 0,
	-1, 75,
	209, 235,
	-2, 0,
	-1, 76,
	106, 984,
	183, 984,
	400, 984,
	401, 984,
	-2, 0,
	-1, 87,
	119, 958,
	133, 958,
	191, 958,
	220, 958,
	251, 958,
	261, 958,
	396, 958,
	-2, 945,
	-1, 116,
	124, 600,
	200, 592,
	208, 600,
	287, 586,
	338, 586,
	384, 600,
	-2, 0,
	-1, 117,
	4, 986,
	21, 986,
	22, 986,
	23, 986,
	24, 986,
	25, 986,
	27, 986,
	32, 986,
	37, 986,
	38, 986,
	39, 986,
	40, 986,
	41, 986,
	42, 986,
	43, 986,
	44, 986,
	45, 986,
	46, 986,
	47, 986,
	49, 986,
	50, 986,
	51, 986,
	52, 986,
	53, 986,
	54, 986,
	57, 986,
	58, 986,
	59, 986,
	60, 986,
	62, 986,
	63, 986,
	67, 986,
	68, 986,
	69, 986,
	70, 986,
	71, 986,
	73, 986,
	74, 986,
	75, 986,
	76, 986,
	78, 986,
	80, 986,
	81, 986,
	82, 986,
	85, 986,
	86, 986,
	94, 986,
	95, 986,
	96, 986,
	97, 986,
	98, 986,
	99, 986,
	100, 986,
	101, 986,
	103, 986,
	105, 986,
	106, 986,
	108, 986,
	111, 986,
	112, 986,
	113, 986,
	115, 986,
	117, 986,
	118, 986,
	120, 986,
	121, 986,
	122, 986,
	123, 986,
	124, 986,
	125, 986,
	126, 986,
	127, 986,
	128, 986,
	129, 986,
	130, 986,
	132, 986,
	138, 986,
	139, 986,
	140, 986,
	141, 986,
	142, 986,
	143, 986,
	145, 986,
	147, 986,
	151, 986,
	152, 986,
	154, 986,
	155, 986,
	157, 986,
	158, 986,
	160, 986,
	161, 986,
	162, 986,
	163, 986,
	164, 986,
	165, 986,
	166, 986,
	168, 986,
	169, 986,
	171, 986,
	172, 986,
	173, 986,
	177, 986,
	178, 986,
	179, 986,
	180, 986,
	183, 986,
	184, 986,
	185, 986,
	186, 986,
	187, 986,
	188, 986,
	189, 986,
	190, 986,
	192, 986,
	194, 986,
	196, 986,
	198, 986,
	199, 986,
	200, 986,
	202, 986,
	203, 986,
	206, 986,
	207, 986,
	208, 986,
	209, 986,
	211, 986,
	212, 986,
	214, 986,
	215, 986,
	217, 986,
	218, 986,
	221, 986,
	222, 986,
	225, 986,
	226, 986,
	228, 986,
	229, 986,
	230, 986,
	231, 986,
	232, 986,
	233, 986,
	234, 986,
	235, 986,
	236, 986,
	237, 986,
	239, 986,
	240, 986,
	241, 986,
	242, 986,
	244, 986,
	247, 986,
	248, 986,
	249, 986,
	250, 986,
	252, 986,
	253, 986,
	254, 986,
	256, 986,
	257, 986,
	258, 986,
	259, 986,
	262, 986,
	263, 986,
	265, 986,
	267, 986,
	268, 986,
	269, 986,
	270, 986,
	271, 986,
	272, 986,
	273, 986,
	274, 986,
	275, 986,
	277, 986,
	278, 986,
	279, 986,
	280, 986,
	281, 986,
	282, 986,
	284, 986,
	286, 986,
	287, 986,
	288, 986,
	289, 986,
	290, 986,
	291, 986,
	292, 986,
	293, 986,
	294, 986,
	296, 986,
	297, 986,
	298, 986,
	299, 986,
	300, 986,
	302, 986,
	303, 986,
	304, 986,
	305, 986,
	306, 986,
	307, 986,
	308, 986,
	309, 986,
	311, 986,
	313, 986,
	314, 986,
	315, 986,
	316, 986,
	317, 986,
	318, 986,
	320, 986,
	321, 986,
	322, 986,
	323, 986,
	324, 986,
	325, 986,
	326, 986,
	327, 986,
	329, 986,
	330, 986,
	331, 986,
	332, 986,
	333, 986,
	334, 986,
	335, 986,
	336, 986,
	337, 986,
	338, 986,
	340, 986,
	341, 986,
	342, 986,
	343, 986,
	345, 986,
	346, 986,
	347, 986,
	348, 986,
	350, 986,
	351, 986,
	352, 986,
	353, 986,
	354, 986,
	355, 986,
	356, 986,
	357, 986,
	358, 986,
	359, 986,
	360, 986,
	361, 986,
	363, 986,
	364, 986,
	365, 986,
	367, 986,
	368, 986,
	369, 986,
	370, 986,
	371, 986,
	372, 986,
	373, 986,
	374, 986,
	375, 986,
	377, 986,
	378, 986,
	379, 986,
	380, 986,
	382, 986,
	384, 986,
	385, 986,
	386, 986,
	387, 986,
	388, 986,
	390, 986,
	391, 986,
	392, 986,
	394, 986,
	395, 986,
	398, 986,
	399, 986,
	400, 986,
	401, 986,
	402, 986,
	404, 986,
	406, 986,
	407, 986,
	408, 986,
	409, 986,
	410, 986,
	411, 986,
	412, 986,
	414, 986,
	415, 986,
	416, 986,
	421, 986,
	422, 986,
	423, 986,
	424, 986,
	425, 986,
	426, 986,
	-2, 0,
	-1, 118,
	1, 876,
	198, 876,
	284, 876,
	291, 876,
	429, 876,
	452, 876,
	-2, 0,
	-1, 120,
	1, 876,
	452, 876,
	-2, 0,
	-1, 121,
	1, 876,
	452, 876,
	-2, 0,
	-1, 122,
	1, 880,
	452, 880,
	-2, 0,
	-1, 146,
	119, 957,
	133, 957,
	191, 957,
	220, 957,
	251, 957,
	261, 957,
	396, 957,
	-2, 954,
	-1, 176,
	4, 993,
	5, 993,
	6, 993,
	7, 993,
	8, 993,
	9, 993,
	10, 993,
	21, 993,
	22, 993,
	23, 993,
	24, 993,
	25, 993,
	27, 993,
	32, 993,
	33, 993,
	37, 993,
	38, 993,
	39, 993,
	40, 993,
	41, 993,
	42, 993,
	43, 993,
	44, 993,
	45, 993,
	46, 993,
	47, 993,
	49, 993,
	50, 993,
	51, 993,
	52, 993,
	53, 993,
	54, 993,
	55, 993,
	56, 993,
	57, 993,
	58, 993,
	59, 993,
	60, 993,
	62, 993,
	63, 993,
	65, 993,
	67, 993,
	68, 993,
	69, 993,
	70, 993,
	71, 993,
	73, 993,
	74, 993,
	75, 993,
	76, 993,
	78, 993,
	80, 993,
	81, 993,
	82, 993,
	84, 993,
	85, 993,
	86, 993,
	87, 993,
	88, 993,
	89, 993,
	90, 993,
	91, 993,
	92, 993,
	93, 993,
	94, 993,
	95, 993,
	96, 993,
	97, 993,
	98, 993,
	99, 993,
	100, 993,
	101, 993,
	102, 993,
	103, 993,
	105, 993,
	106, 993,
	108, 993,
	111, 993,
	112, 993,
	113, 993,
	115, 993,
	117, 993,
	118, 993,
	120, 993,
	121, 993,
	122, 993,
	123, 993,
	124, 993,
	125, 993,
	126, 993,
	127, 993,
	128, 993,
	129, 993,
	130, 993,
	131, 993,
	132, 993,
	138, 993,
	139, 993,
	140, 993,
	141, 993,
	142, 993,
	143, 993,
	145, 993,
	147, 993,
	150, 993,
	151, 993,
	152, 993,
	154, 993,
	155, 993,
	157, 993,
	158, 993,
	160, 993,
	161, 993,
	162, 993,
	163, 993,
	164, 993,
	165, 993,
	166, 993,
	167, 993,
	168, 993,
	169, 993,
	171, 993,
	172, 993,
	173, 993,
	177, 993,
	178, 993,
	179, 993,
	180, 993,
	182, 993,
	183, 993,
	184, 993,
	185, 993,
	186, 993,
	187, 993,
	188, 993,
	189, 993,
	190, 993,
	192, 993,
	194, 993,
	195, 993,
	196, 993,
	197, 993,
	198, 993,
	199, 993,
	200, 993,
	201, 993,
	202, 993,
	203, 993,
	206, 993,
	207, 993,
	208, 993,
	209, 993,
	211, 993,
	212, 993,
	214, 993,
	215, 993,
	216, 993,
	217, 993,
	218, 993,
	219, 993,
	221, 993,
	222, 993,
	225, 993,
	226, 993,
	228, 993,
	229, 993,
	230, 993,
	231, 993,
	232, 993,
	233, 993,
	234, 993,
	235, 993,
	236, 993,
	237, 993,
	238, 993,
	239, 993,
	240, 993,
	241, 993,
	242, 993,
	243, 993,
	244, 993,
	245, 993,
	246, 993,
	247, 993,
	248, 993,
	249, 993,
	250, 993,
	252, 993,
	253, 993,
	254, 993,
	257, 993,
	258, 993,
	259, 993,
	262, 993,
	263, 993,
	264, 993,
	265, 993,
	266, 993,
	267, 993,
	268, 993,
	269, 993,
	270, 993,
	271, 993,
	272, 993,
	273, 993,
	274, 993,
	275, 993,
	277, 993,
	278, 993,
	279, 993,
	280, 993,
	281, 993,
	282, 993,
	284, 993,
	286, 993,
	287, 993,
	288, 993,
	289, 993,
	290, 993,
	291, 993,
	292, 993,
	293, 993,
	294, 993,
	296, 993,
	297, 993,
	298, 993,
	299, 993,
	300, 993,
	302, 993,
	303, 993,
	304, 993,
	305, 993,
	306, 993,
	307, 993,
	308, 993,
	309, 993,
	311, 993,
	312, 993,
	313, 993,
	314, 993,
	315, 993,
	316, 993,
	317, 993,
	318, 993,
	320, 993,
	321, 993,
	322, 993,
	323, 993,
	324, 993,
	325, 993,
	326, 993,
	327, 993,
	329, 993,
	330, 993,
	331, 993,
	332, 993,
	333, 993,
	334, 993,
	335, 993,
	336, 993,
	337, 993,
	338, 993,
	339, 993,
	340, 993,
	341, 993,
	342, 993,
	343, 993,
	344, 993,
	345, 993,
	346, 993,
	347, 993,
	348, 993,
	350, 993,
	351, 993,
	352, 993,
	353, 993,
	354, 993,
	355, 993,
	356, 993,
	357, 993,
	358, 993,
	359, 993,
	360, 993,
	361, 993,
	363, 993,
	364, 993,
	365, 993,
	367, 993,
	368, 993,
	369, 993,
	370, 993,
	371, 993,
	372, 993,
	373, 993,
	374, 993,
	375, 993,
	377, 993,
	378, 993,
	379, 993,
	380, 993,
	382, 993,
	384, 993,
	385, 993,
	386, 993,
	387, 993,
	388, 993,
	389, 993,
	390, 993,
	391, 993,
	392, 993,
	394, 993,
	395, 993,
	397, 993,
	398, 993,
	399, 993,
	400, 993,
	401, 993,
	402, 993,
	403, 993,
	404, 993,
	406, 993,
	407, 993,
	408, 993,
	409, 993,
	410, 993,
	411, 993,
	412, 993,
	414, 993,
	415, 993,
	416, 993,
	421, 993,
	422, 993,
	423, 993,
	424, 993,
	425, 993,
	426, 993,
	427, 993,
	435, 993,
	440, 993,
	441, 993,
	442, 993,
	449, 993,
	454, 993,
	-2, 0,
	-1, 543,
	149, 1660,
	381, 1660,
	432, 1660,
	451, 1660,
	-2, 0,
	-1, 544,
	149, 1737,
	381, 1737,
	432, 1737,
	451, 1737,
	-2, 0,
	-1, 545,
	149, 1650,
	381, 1650,
	432, 1650,
	451, 1650,
	-2, 0,
	-1, 547,
	149, 1823,
	381, 1823,
	432, 1823,
	451, 1823,
	-2, 0,
	-1, 549,
	149, 1851,
	381, 1851,
	432, 1851,
	451, 1851,
	-2, 0,
	-1, 556,
	149, 1747,
	381, 1747,
	432, 1747,
	451, 1747,
	-2, 468,
	-1, 573,
	451, 1609,
	453, 1609,
	-2, 648,
	-1, 574,
	451, 1611,
	453, 1611,
	-2, 649,
	-1, 575,
	451, 1610,
	453, 1610,
	-2, 650,
	-1, 576,
	453, 1557,
	-2, 651,
	-1, 719,
	287, 587,
	338, 587,
	-2, 0,
	-1, 720,
	287, 586,
	338, 586,
	-2, 546,
	-1, 722,
	1, 568,
	448, 568,
	450, 568,
	452, 568,
	-2, 0,
	-1, 723,
	1, 647,
	146, 647,
	448, 647,
	450, 647,
	452, 647,
	-2, 0,
	-1, 732,
	1, 610,
	448, 610,
	450, 610,
	452, 610,
	-2, 0,
	-1, 733,
	1, 612,
	448, 612,
	450, 612,
	452, 612,
	-2, 0,
	-1, 734,
	1, 615,
	448, 615,
	450, 615,
	452, 615,
	-2, 0,
	-1, 738,
	1, 629,
	448, 629,
	450, 629,
	452, 629,
	-2, 0,
	-1, 739,
	1, 631,
	448, 631,
	450, 631,
	452, 631,
	-2, 0,
	-1, 784,
	133, 997,
	220, 997,
	251, 997,
	-2, 954,
	-1, 799,
	133, 996,
	220, 996,
	251, 996,
	-2, 954,
	-1, 823,
	451, 1608,
	-2, 476,
	-1, 852,
	449, 1600,
	-2, 1591,
	-1, 858,
	5, 1131,
	-2, 1641,
	-1, 859,
	5, 1132,
	-2, 1645,
	-1, 860,
	5, 1133,
	-2, 1644,
	-1, 861,
	5, 1134,
	-2, 1849,
	-1, 862,
	5, 1135,
	-2, 1749,
	-1, 863,
	5, 1136,
	-2, 1815,
	-1, 864,
	5, 1137,
	-2, 1817,
	-1, 865,
	5, 1138,
	-2, 1828,
	-1, 866,
	5, 1139,
	-2, 1818,
	-1, 867,
	5, 1140,
	-2, 1819,
	-1, 868,
	5, 1141,
	-2, 1640,
	-1, 869,
	5, 1142,
	-2, 1863,
	-1, 870,
	5, 1143,
	-2, 1712,
	-1, 871,
	5, 1144,
	-2, 1756,
	-1, 872,
	5, 1145,
	-2, 1758,
	-1, 873,
	5, 1146,
	-2, 1716,
	-1, 874,
	5, 1147,
	449, 1618,
	-2, 1609,
	-1, 875,
	5, 1203,
	449, 1203,
	-2, 1898,
	-1, 880,
	449, 1619,
	-2, 1610,
	-1, 882,
	5, 1151,
	-2, 1896,
	-1, 883,
	5, 1152,
	-2, 1897,
	-1, 884,
	5, 1153,
	-2, 1715,
	-1, 885,
	5, 1154,
	-2, 1909,
	-1, 886,
	5, 1155,
	-2, 1717,
	-1, 887,
	5, 1156,
	-2, 1718,
	-1, 888,
	5, 1157,
	-2, 1719,
	-1, 889,
	5, 1158,
	-2, 1878,
	-1, 890,
	5, 1159,
	-2, 1907,
	-1, 891,
	5, 1160,
	-2, 1695,
	-1, 892,
	5, 1161,
	-2, 1696,
	-1, 893,
	5, 1175,
	-2, 1890,
	-1, 895,
	5, 1150,
	-2, 1886,
	-1, 896,
	5, 1150,
	-2, 1885,
	-1, 897,
	5, 1150,
	-2, 1902,
	-1, 898,
	5, 1167,
	-2, 1880,
	-1, 899,
	5, 1168,
	-2, 1642,
	-1, 900,
	5, 1178,
	-2, 1879,
	-1, 901,
	5, 1180,
	-2, 1918,
	-1, 903,
	5, 1191,
	-2, 1670,
	-1, 904,
	5, 1202,
	-2, 1911,
	-1, 905,
	5, 1194,
	-2, 1912,
	-1, 906,
	5, 1202,
	-2, 1913,
	-1, 907,
	5, 1198,
	-2, 1914,
	-1, 908,
	5, 1118,
	-2, 1725,
	-1, 909,
	5, 1119,
	-2, 1726,
	-1, 910,
	451, 1606,
	-2, 1590,
	-1, 911,
	449, 1938,
	-2, 1607,
	-1, 931,
	5, 1186,
	-2, 1838,
	-1, 948,
	5, 1185,
	-2, 1919,
	-1, 958,
	5, 1187,
	415, 1187,
	-2, 1881,
	-1, 959,
	5, 1188,
	415, 1188,
	-2, 1882,
	-1, 995,
	449, 1618,
	-2, 1609,
	-1, 1024,
	149, 1851,
	381, 1851,
	432, 1851,
	451, 1851,
	-2, 0,
	-1, 1025,
	1, 456,
	452, 456,
	-2, 888,
	-1, 1145,
	302, 1587,
	442, 1587,
	-2, 1586,
	-1, 1168,
	454, 1587,
	-2, 1588,
	-1, 1203,
	293, 679,
	414, 679,
	-2, 230,
	-1, 1223,
	273, 982,
	-2, 796,
	-1, 1232,
	255, 1613,
	-2, 0,
	-1, 1296,
	1, 345,
	448, 345,
	450, 345,
	452, 345,
	-2, 956,
	-1, 1299,
	4, 1917,
	11, 1917,
	12, 1917,
	14, 1917,
	15, 1917,
	16, 1917,
	17, 1917,
	18, 1917,
	19, 1917,
	21, 1917,
	22, 1917,
	23, 1917,
	24, 1917,
	25, 1917,
	27, 1917,
	30, 1917,
	32, 1917,
	34, 1917,
	37, 1917,
	38, 1917,
	39, 1917,
	40, 1917,
	41, 1917,
	42, 1917,
	43, 1917,
	44, 1917,
	45, 1917,
	46, 1917,
	47, 1917,
	49, 1917,
	50, 1917,
	51, 1917,
	52, 1917,
	53, 1917,
	54, 1917,
	57, 1917,
	58, 1917,
	59, 1917,
	60, 1917,
	62, 1917,
	63, 1917,
	64, 1917,
	67, 1917,
	68, 1917,
	69, 1917,
	70, 1917,
	71, 1917,
	72, 1917,
	73, 1917,
	74, 1917,
	75, 1917,
	76, 1917,
	78, 1917,
	79, 1917,
	80, 1917,
	81, 1917,
	82, 1917,
	84, 1917,
	85, 1917,
	86, 1917,
	94, 1917,
	95, 1917,
	96, 1917,
	97, 1917,
	98, 1917,
	99, 1917,
	100, 1917,
	101, 1917,
	103, 1917,
	105, 1917,
	106, 1917,
	108, 1917,
	111, 1917,
	112, 1917,
	113, 1917,
	115, 1917,
	117, 1917,
	118, 1917,
	120, 1917,
	121, 1917,
	122, 1917,
	123, 1917,
	124, 1917,
	125, 1917,
	126, 1917,
	127, 1917,
	128, 1917,
	129, 1917,
	130, 1917,
	134, 1917,
	135, 1917,
	136, 1917,
	137, 1917,
	138, 1917,
	139, 1917,
	140, 1917,
	141, 1917,
	142, 1917,
	143, 1917,
	144, 1917,
	145, 1917,
	147, 1917,
	150, 1917,
	151, 1917,
	152, 1917,
	154, 1917,
	155, 1917,
	157, 1917,
	158, 1917,
	160, 1917,
	161, 1917,
	162, 1917,
	163, 1917,
	164, 1917,
	165, 1917,
	166, 1917,
	167, 1917,
	168, 1917,
	169, 1917,
	170, 1917,
	171, 1917,
	172, 1917,
	173, 1917,
	174, 1917,
	175, 1917,
	176, 1917,
	178, 1917,
	179, 1917,
	180, 1917,
	182, 1917,
	183, 1917,
	184, 1917,
	185, 1917,
	186, 1917,
	187, 1917,
	188, 1917,
	189, 1917,
	190, 1917,
	192, 1917,
	194, 1917,
	195, 1917,
	196, 1917,
	197, 1917,
	198, 1917,
	199, 1917,
	200, 1917,
	201, 1917,
	202, 1917,
	203, 1917,
	204, 1917,
	205, 1917,
	206, 1917,
	207, 1917,
	208, 1917,
	209, 1917,
	211, 1917,
	212, 1917,
	214, 1917,
	215, 1917,
	216, 1917,
	217, 1917,
	218, 1917,
	219, 1917,
	221, 1917,
	222, 1917,
	225, 1917,
	226, 1917,
	227, 1917,
	228, 1917,
	229, 1917,
	230, 1917,
	231, 1917,
	232, 1917,
	233, 1917,
	234, 1917,
	235, 1917,
	236, 1917,
	237, 1917,
	238, 1917,
	239, 1917,
	240, 1917,
	241, 1917,
	242, 1917,
	245, 1917,
	247, 1917,
	248, 1917,
	249, 1917,
	250, 1917,
	252, 1917,
	253, 1917,
	254, 1917,
	257, 1917,
	258, 1917,
	259, 1917,
	260, 1917,
	262, 1917,
	263, 1917,
	265, 1917,
	267, 1917,
	268, 1917,
	269, 1917,
	270, 1917,
	271, 1917,
	272, 1917,
	273, 1917,
	274, 1917,
	275, 1917,
	277, 1917,
	278, 1917,
	279, 1917,
	280, 1917,
	281, 1917,
	282, 1917,
	284, 1917,
	286, 1917,
	287, 1917,
	288, 1917,
	289, 1917,
	290, 1917,
	291, 1917,
	292, 1917,
	293, 1917,
	294, 1917,
	296, 1917,
	297, 1917,
	298, 1917,
	299, 1917,
	300, 1917,
	301, 1917,
	302, 1917,
	303, 1917,
	304, 1917,
	305, 1917,
	306, 1917,
	307, 1917,
	308, 1917,
	309, 1917,
	311, 1917,
	312, 1917,
	313, 1917,
	314, 1917,
	315, 1917,
	316, 1917,
	317, 1917,
	318, 1917,
	319, 1917,
	320, 1917,
	321, 1917,
	322, 1917,
	323, 1917,
	324, 1917,
	325, 1917,
	326, 1917,
	327, 1917,
	329, 1917,
	330, 1917,
	331, 1917,
	332, 1917,
	333, 1917,
	334, 1917,
	335, 1917,
	336, 1917,
	337, 1917,
	338, 1917,
	340, 1917,
	341, 1917,
	342, 1917,
	343, 1917,
	344, 1917,
	345, 1917,
	346, 1917,
	347, 1917,
	348, 1917,
	350, 1917,
	351, 1917,
	352, 1917,
	353, 1917,
	354, 1917,
	355, 1917,
	356, 1917,
	357, 1917,
	358, 1917,
	359, 1917,
	360, 1917,
	361, 1917,
	363, 1917,
	364, 1917,
	365, 1917,
	367, 1917,
	368, 1917,
	369, 1917,
	370, 1917,
	371, 1917,
	372, 1917,
	373, 1917,
	374, 1917,
	375, 1917,
	377, 1917,
	378, 1917,
	379, 1917,
	380, 1917,
	382, 1917,
	384, 1917,
	385, 1917,
	386, 1917,
	387, 1917,
	388, 1917,
	390, 1917,
	391, 1917,
	392, 1917,
	394, 1917,
	395, 1917,
	398, 1917,
	399, 1917,
	400, 1917,
	401, 1917,
	402, 1917,
	404, 1917,
	406, 1917,
	407, 1917,
	408, 1917,
	409, 1917,
	410, 1917,
	411, 1917,
	412, 1917,
	414, 1917,
	415, 1917,
	416, 1917,
	421, 1917,
	422, 1917,
	423, 1917,
	424, 1917,
	425, 1917,
	426, 1917,
	427, 1917,
	428, 1917,
	430, 1917,
	431, 1917,
	432, 1917,
	433, 1917,
	434, 1917,
	435, 1917,
	437, 1917,
	438, 1917,
	439, 1917,
	440, 1917,
	441, 1917,
	442, 1917,
	443, 1917,
	444, 1917,
	445, 1917,
	447, 1917,
	450, 1917,
	451, 1917,
	453, 1917,
	454, 1917,
	-2, 0,
	-1, 1302,
	149, 1823,
	381, 1823,
	432, 1823,
	451, 1823,
	-2, 0,
	-1, 1328,
	287, 587,
	338, 587,
	-2, 0,
	-1, 1347,
	1, 582,
	448, 582,
	450, 582,
	452, 582,
	-2, 0,
	-1, 1348,
	1, 601,
	448, 601,
	450, 601,
	452, 601,
	-2, 0,
	-1, 1349,
	1, 589,
	448, 589,
	450, 589,
	452, 589,
	-2, 0,
	-1, 1371,
	1, 1870,
	448, 1870,
	450, 1870,
	451, 1870,
	452, 1870,
	-2, 627,
	-1, 1372,
	1, 1821,
	448, 1821,
	450, 1821,
	451, 1821,
	452, 1821,
	-2, 628,
	-1, 1385,
	1, 883,
	452, 883,
	-2, 888,
	-1, 1390,
	133, 996,
	220, 996,
	251, 996,
	-2, 954,
	-1, 1483,
	119, 958,
	133, 958,
	191, 958,
	220, 958,
	251, 958,
	261, 958,
	396, 958,
	-2, 1359,
	-1, 1536,
	450, 1492,
	-2, 0,
	-1, 1571,
	119, 958,
	133, 958,
	191, 958,
	220, 958,
	251, 958,
	261, 958,
	396, 958,
	-2, 1068,
	-1, 1626,
	449, 1190,
	-2, 1178,
	-1, 1665,
	1, 458,
	452, 458,
	-2, 888,
	-1, 1850,
	1, 584,
	448, 584,
	450, 584,
	452, 584,
	-2, 0,
	-1, 1851,
	1, 603,
	448, 603,
	450, 603,
	452, 603,
	-2, 0,
	-1, 1924,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	204, 0,
	205, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1239,
	-1, 1925,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	204, 0,
	205, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1240,
	-1, 1926,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	204, 0,
	205, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1241,
	-1, 1927,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	204, 0,
	205, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1242,
	-1, 1928,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	204, 0,
	205, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1243,
	-1, 1929,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	204, 0,
	205, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1244,
	-1, 1930,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	204, 0,
	205, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1245,
	-1, 1931,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	204, 0,
	205, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1246,
	-1, 1943,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	204, 0,
	205, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1258,
	-1, 1944,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	204, 0,
	205, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1259,
	-1, 1945,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	204, 0,
	205, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1260,
	-1, 1948,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1265,
	-1, 1954,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1269,
	-1, 1956,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1277,
	-1, 1957,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1278,
	-1, 1958,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1279,
	-1, 1959,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1280,
	-1, 2052,
	5, 1147,
	149, 1503,
	449, 1618,
	-2, 1609,
	-1, 2053,
	149, 1504,
	-2, 1874,
	-1, 2054,
	149, 1505,
	-2, 1746,
	-1, 2055,
	149, 1506,
	-2, 1671,
	-1, 2056,
	149, 1507,
	-2, 1706,
	-1, 2057,
	149, 1508,
	-2, 1744,
	-1, 2058,
	149, 1509,
	-2, 1814,
	-1, 2129,
	1, 1069,
	84, 1069,
	119, 1069,
	133, 1069,
	146, 1069,
	150, 1069,
	156, 1069,
	159, 1069,
	182, 1069,
	191, 1069,
	201, 1069,
	216, 1069,
	220, 1069,
	238, 1069,
	251, 1069,
	255, 1069,
	261, 1069,
	310, 1069,
	312, 1069,
	396, 1069,
	405, 1069,
	418, 1069,
	419, 1069,
	420, 1069,
	429, 1069,
	448, 1069,
	450, 1069,
	452, 1069,
	453, 1069,
	-2, 1068,
	-1, 2134,
	449, 1592,
	-2, 1604,
	-1, 2156,
	449, 1189,
	-2, 1179,
	-1, 2371,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1267,
	-1, 2372,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1271,
	-1, 2378,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1273,
	-1, 2558,
	198, 888,
	284, 888,
	291, 888,
	429, 888,
	-2, 455,
	-1, 2630,
	450, 1562,
	453, 1562,
	-2, 1578,
	-1, 2644,
	273, 982,
	-2, 796,
	-1, 2721,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1275,
	-1, 2728,
	195, 0,
	197, 0,
	245, 0,
	-2, 1294,
	-1, 2791,
	14, 0,
	15, 0,
	16, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1323,
	-1, 2792,
	14, 0,
	15, 0,
	16, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1324,
	-1, 2793,
	14, 0,
	15, 0,
	16, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1325,
	-1, 2797,
	14, 0,
	15, 0,
	16, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1329,
	-1, 2798,
	14, 0,
	15, 0,
	16, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1330,
	-1, 2799,
	14, 0,
	15, 0,
	16, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1331,
	-1, 2842,
	449, 1593,
	-2, 1605,
	-1, 2924,
	451, 2020,
	-2, 931,
	-1, 2966,
	195, 0,
	197, 0,
	245, 0,
	-2, 1295,
	-1, 2969,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1298,
	-1, 2970,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1300,
	-1, 3114,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1299,
	-1, 3115,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1301,
	-1, 3125,
	195, 0,
	-2, 1332,
	-1, 3219,
	195, 0,
	-2, 1333,
	-1, 3329,
	41, 0,
	167, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1877,
}

const sqlPrivate = 57344

const sqlLast = 69666

var sqlAct = [...]int{

	880, 3411, 3155, 3158, 3401, 3338, 3328, 3302, 2281, 3178,
	3068, 3300, 3299, 3339, 3286, 3340, 2631, 996, 3144, 2759,
	2083, 3223, 3327, 2290, 3181, 2282, 3083, 2120, 2575, 2863,
	809, 1583, 2661, 1911, 2915, 3186, 3029, 3106, 2910, 208,
	1596, 208, 208, 2399, 1971, 208, 208, 208, 208, 208,
	1398, 2653, 208, 2920, 2628, 2655, 1149, 554, 2864, 1831,
	575, 3129, 800, 2278, 1288, 1597, 1050, 2185, 2364, 2397,
	2666, 2258, 2121, 2255, 2322, 1142, 1031, 1566, 208, 1564,
	2321, 988, 575, 2533, 2520, 2507, 671, 2315, 2480, 2313,
	2496, 1782, 2117, 2291, 3001, 1709, 1545, 1781, 2122, 1354,
	4, 2187, 2814, 2239, 2479, 1908, 808, 139, 3224, 1491,
	1718, 1789, 1574, 2002, 1792, 1984, 1509, 1904, 2360, 1481,
	1161, 1742, 1284, 2665, 837, 876, 1736, 86, 3179, 2256,
	1038, 1810, 2124, 1695, 1158, 1697, 2014, 1546, 1968, 2101,
	1291, 797, 1385, 2538, 2217, 980, 2629, 1151, 1297, 200,
	1281, 2284, 1778, 2177, 1217, 1504, 32, 1996, 576, 2109,
	577, 2080, 2325, 1027, 1271, 202, 983, 1555, 522, 962,
	2048, 208, 208, 506, 2216, 1985, 201, 666, 530, 1399,
	1472, 2091, 1397, 139, 146, 538, 571, 548, 1777, 1295,
	1798, 799, 1247, 647, 1171, 616, 1708, 836, 147, 525,
	985, 960, 1403, 714, 1384, 2831, 729, 1229, 2832, 1832,
	2395, 1812, 1565, 1812, 1812, 533, 3439, 2283, 1035, 2100,
	1411, 1412, 804, 2716, 852, 580, 1454, 1455, 1456, 3430,
	3429, 1999, 2100, 2100, 2234, 3410, 583, 3397, 1749, 176,
	3043, 3395, 1824, 2204, 3043, 3360, 1414, 580, 2100, 804,
	1460, 2673, 2672, 3358, 1411, 1412, 2100, 3355, 583, 3352,
	3356, 3349, 3353, 3325, 1749, 2100, 1749, 3324, 680, 3321,
	1749, 3320, 1824, 1413, 1824, 3281, 805, 178, 2149, 3272,
	1414, 1433, 3043, 2287, 3271, 3265, 3259, 3043, 1749, 3043,
	3257, 977, 2556, 3043, 3221, 2000, 3207, 2149, 3204, 1749,
	3282, 3043, 3172, 963, 963, 1749, 3171, 1413, 3164, 1749,
	3163, 1749, 3135, 3043, 3116, 1749, 3097, 2149, 1035, 2685,
	3065, 177, 3059, 2100, 785, 2100, 3042, 2968, 2093, 3043,
	2149, 170, 813, 2934, 2926, 2414, 2927, 2927, 784, 171,
	2415, 3208, 2817, 1436, 1437, 1438, 1439, 2837, 176, 792,
	2838, 2827, 2820, 1419, 2828, 2100, 2752, 176, 2692, 1749,
	148, 2693, 1014, 1745, 2493, 2001, 1998, 2100, 1824, 2491,
	1411, 1412, 2100, 964, 2490, 2444, 1451, 2100, 2100, 1461,
	2145, 2817, 1009, 1441, 1442, 1443, 178, 1419, 2427, 2452,
	2453, 2428, 966, 967, 2416, 178, 1414, 2100, 2311, 2162,
	2092, 1828, 2100, 994, 2148, 2142, 2136, 2149, 2100, 1749,
	3060, 1749, 2099, 1749, 2100, 2100, 2693, 1441, 1442, 1443,
	2231, 1827, 2176, 1413, 1828, 1668, 667, 2685, 1449, 2265,
	177, 2363, 1748, 2174, 1541, 1170, 1434, 2674, 968, 177,
	170, 2398, 1180, 1356, 965, 1411, 1412, 902, 171, 170,
	791, 58, 790, 669, 1010, 789, 2675, 171, 788, 2003,
	787, 783, 782, 59, 781, 1813, 780, 1813, 1813, 148,
	1434, 1414, 2039, 779, 2345, 3345, 778, 63, 148, 777,
	776, 2037, 775, 2452, 2453, 774, 2470, 2471, 2472, 773,
	1688, 772, 712, 176, 711, 710, 709, 708, 1413, 707,
	706, 705, 2964, 1419, 704, 703, 702, 69, 701, 176,
	1440, 208, 700, 699, 698, 697, 807, 696, 695, 694,
	208, 693, 2458, 692, 691, 690, 689, 688, 1435, 1192,
	687, 178, 1186, 1441, 1442, 1443, 679, 75, 678, 638,
	637, 208, 596, 595, 2467, 594, 85, 178, 208, 586,
	76, 585, 584, 1452, 3018, 2672, 561, 1997, 560, 559,
	558, 542, 1435, 1482, 208, 1053, 208, 208, 1154, 208,
	1053, 208, 835, 198, 197, 177, 196, 195, 1419, 208,
	208, 2154, 58, 1037, 3326, 194, 1434, 1042, 193, 192,
	191, 177, 1051, 77, 59, 2980, 1010, 1162, 190, 2452,
	2453, 170, 189, 188, 208, 2468, 1007, 187, 63, 171,
	1820, 1174, 1811, 1884, 148, 186, 2458, 2928, 208, 185,
	1154, 1154, 208, 208, 184, 208, 183, 182, 181, 180,
	2286, 2835, 2092, 1493, 179, 2536, 1450, 208, 69, 2421,
	2410, 1482, 2452, 2453, 1453, 208, 1424, 1422, 1423, 1415,
	1416, 1417, 1418, 1420, 1421, 2271, 2243, 2137, 1567, 208,
	208, 208, 208, 208, 1154, 1154, 1010, 2473, 75, 1154,
	2128, 208, 1154, 208, 1411, 1412, 2035, 85, 1435, 1693,
	1410, 76, 1423, 1415, 1416, 1417, 1418, 1420, 1421, 1581,
	1512, 1191, 1025, 1164, 1185, 1512, 1511, 2469, 78, 2468,
	1414, 1511, 1498, 1176, 2033, 2031, 1044, 998, 1147, 1046,
	3253, 1139, 1144, 1834, 3214, 3211, 1145, 1515, 3209, 1154,
	1168, 3098, 1510, 2696, 77, 3154, 3022, 1413, 3000, 1292,
	145, 81, 2458, 82, 2999, 1022, 3091, 1173, 208, 1172,
	2987, 2986, 2985, 2984, 580, 2978, 1179, 2977, 1184, 2976,
	1190, 2975, 176, 2897, 208, 583, 2852, 2851, 2849, 1234,
	1223, 1226, 2841, 1494, 670, 1492, 976, 116, 176, 208,
	1300, 1230, 1230, 2811, 2810, 2458, 139, 2809, 2736, 1833,
	2732, 2531, 2487, 2478, 2451, 2448, 2447, 2445, 2434, 2433,
	178, 2469, 2432, 2429, 2426, 2404, 805, 1285, 2403, 1415,
	1416, 1417, 1418, 1420, 1421, 2396, 178, 1419, 2312, 1786,
	2129, 1168, 1304, 2007, 117, 2468, 1298, 2462, 2454, 2455,
	2456, 2457, 2459, 2460, 1275, 1278, 149, 2272, 1390, 78,
	1231, 1410, 1480, 1307, 177, 2452, 2453, 1441, 1442, 1443,
	1310, 1493, 176, 1409, 170, 3437, 3409, 1391, 3408, 3361,
	177, 1754, 171, 1752, 997, 176, 2761, 3316, 176, 1322,
	170, 145, 81, 3314, 82, 3248, 3245, 3244, 171, 3243,
	3239, 3233, 3203, 668, 1415, 1416, 1417, 1418, 1420, 1421,
	178, 3202, 1974, 176, 3150, 3127, 3103, 3102, 3081, 148,
	1434, 3078, 3072, 178, 3017, 670, 178, 2998, 116, 1383,
	2948, 2945, 2464, 2465, 2466, 2879, 2878, 2469, 2867, 2463,
	2461, 2462, 2454, 2455, 2456, 2457, 2459, 2460, 2866, 1315,
	2038, 178, 1689, 2218, 177, 2823, 1389, 1329, 2550, 2036,
	3090, 2359, 2727, 2686, 170, 2647, 2618, 177, 2599, 2578,
	177, 1396, 171, 2577, 2552, 117, 2492, 170, 2425, 2424,
	170, 2409, 2387, 2252, 1388, 171, 1516, 149, 171, 1411,
	1412, 1513, 208, 148, 1386, 177, 1411, 1412, 2458, 1505,
	1502, 879, 805, 1980, 2158, 170, 148, 2157, 2132, 148,
	2114, 1543, 1435, 171, 2098, 1414, 2029, 2270, 208, 1476,
	1580, 1544, 1414, 785, 1540, 2578, 1552, 1392, 208, 1053,
	208, 208, 208, 1539, 148, 1406, 1407, 784, 1154, 575,
	208, 208, 1413, 1538, 575, 208, 1537, 1536, 1535, 1413,
	208, 1534, 1533, 1514, 1532, 1590, 1584, 819, 2454, 2455,
	2456, 2457, 2459, 2460, 1530, 1529, 1528, 1688, 1527, 1526,
	1525, 1593, 1663, 1524, 1523, 1053, 1660, 1522, 1521, 1520,
	1519, 1518, 1506, 1507, 1495, 2452, 2453, 1679, 1678, 1477,
	1475, 1688, 1685, 1575, 1470, 1021, 1012, 1549, 1550, 1691,
	58, 1004, 1694, 2456, 2457, 2459, 2460, 1662, 2220, 1835,
	1563, 2151, 59, 2513, 3226, 3077, 139, 3019, 2972, 2848,
	2830, 2826, 1419, 2413, 963, 2115, 63, 3139, 3021, 1562,
	1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421, 2847,
	2452, 2453, 805, 1494, 2548, 1473, 1688, 1576, 3246, 1039,
	2656, 1567, 2602, 1666, 2034, 1041, 69, 1587, 3096, 1713,
	1688, 3061, 2833, 2688, 1585, 2905, 2066, 1603, 3212, 2687,
	3187, 3210, 58, 1026, 1035, 1035, 1328, 1381, 1591, 2877,
	991, 1572, 2032, 2030, 59, 1682, 75, 1832, 1512, 770,
	2431, 1684, 1500, 1542, 1511, 85, 1032, 1665, 63, 76,
	1154, 208, 3153, 2430, 580, 1703, 1040, 1053, 878, 580,
	1525, 1687, 1525, 1569, 3412, 583, 2369, 1035, 2458, 2206,
	583, 1036, 3182, 1356, 1674, 1592, 1355, 771, 69, 2633,
	1659, 2632, 1783, 2702, 1750, 2613, 1731, 994, 3130, 994,
	1594, 2283, 77, 975, 2763, 2419, 208, 208, 2015, 2156,
	3346, 1531, 1508, 208, 1787, 2626, 1588, 1774, 75, 1207,
	3357, 3354, 2668, 208, 1680, 2859, 3296, 85, 2911, 2319,
	3385, 76, 208, 3384, 208, 1629, 208, 3264, 3053, 1205,
	208, 1195, 1033, 2163, 1733, 2560, 1872, 1735, 766, 1034,
	1739, 764, 208, 1870, 2454, 2455, 2456, 2457, 2459, 2460,
	762, 2468, 1717, 3434, 1319, 1683, 1479, 3347, 760, 2180,
	1352, 1999, 757, 3177, 77, 2189, 3173, 2891, 2888, 2887,
	2178, 2856, 1770, 1743, 2855, 803, 2180, 2408, 803, 2407,
	2147, 633, 1154, 208, 1154, 2406, 748, 2178, 2405, 1154,
	1746, 2373, 208, 2236, 208, 208, 2230, 78, 2227, 1032,
	1206, 2208, 798, 2144, 1154, 1154, 1795, 208, 1955, 1173,
	1804, 1172, 208, 1387, 1169, 2562, 580, 575, 208, 1032,
	208, 2025, 208, 1353, 208, 2000, 208, 583, 2024, 145,
	81, 1041, 82, 1913, 208, 2279, 3111, 990, 208, 754,
	208, 1738, 1675, 2469, 1351, 1747, 1773, 802, 2549, 208,
	802, 176, 2192, 1836, 1002, 2703, 1710, 1698, 634, 1312,
	1881, 1699, 1802, 670, 1846, 1240, 116, 1239, 208, 78,
	1417, 1418, 1420, 1421, 208, 1041, 1259, 1035, 1764, 1763,
	1421, 2384, 1040, 3263, 1707, 1033, 1238, 1815, 1237, 178,
	1817, 834, 1034, 1819, 1053, 2001, 1998, 1822, 1317, 2601,
	2170, 145, 81, 2382, 82, 1033, 1201, 1711, 1712, 805,
	743, 2207, 1034, 117, 1797, 1882, 1800, 804, 1001, 2348,
	804, 1912, 1842, 176, 1830, 149, 1040, 2135, 1838, 1298,
	1891, 1888, 796, 177, 3318, 670, 1970, 1698, 116, 2199,
	1628, 1699, 1366, 170, 1844, 1845, 1970, 1700, 999, 1689,
	2218, 171, 2198, 1313, 1762, 628, 3160, 1909, 1910, 1702,
	1849, 178, 2461, 2462, 2454, 2455, 2456, 2457, 2459, 2460,
	1022, 1829, 148, 1689, 1686, 2152, 1576, 1986, 1987, 1053,
	1837, 2869, 580, 3343, 1801, 117, 1394, 2191, 1698, 2003,
	1330, 1327, 1699, 583, 1883, 1986, 2012, 149, 2015, 2743,
	2351, 2705, 744, 1858, 1020, 177, 2016, 2379, 2224, 2704,
	1850, 3049, 1886, 1704, 3384, 170, 1603, 1603, 2380, 1889,
	1350, 2385, 208, 171, 2460, 627, 2342, 1700, 1689, 2218,
	1035, 2047, 2003, 2051, 2051, 2064, 1554, 1986, 3279, 1702,
	2084, 2086, 1689, 2218, 148, 2090, 1053, 208, 1347, 1880,
	1035, 1380, 801, 1885, 1887, 801, 208, 562, 1890, 208,
	2559, 1851, 1053, 685, 2746, 1600, 3376, 1218, 785, 2744,
	992, 785, 785, 2141, 2880, 636, 635, 2663, 1700, 2361,
	2362, 2133, 1900, 805, 2011, 1901, 1902, 1997, 1203, 2134,
	1702, 2179, 1713, 1704, 1356, 2350, 805, 2610, 2605, 1348,
	805, 2190, 1558, 1216, 3344, 2022, 1705, 1730, 1978, 2664,
	2023, 1715, 2347, 1976, 3424, 2027, 2028, 768, 1871, 2452,
	2453, 767, 2116, 3240, 758, 1869, 2126, 2127, 2130, 1812,
	1705, 2143, 1982, 758, 1561, 1218, 2596, 1966, 1363, 2561,
	1215, 759, 208, 745, 1704, 758, 665, 1258, 1503, 2106,
	2009, 568, 3047, 1556, 963, 3375, 3108, 1318, 2003, 1964,
	2621, 2381, 2546, 2003, 2663, 2889, 2267, 2228, 1559, 3277,
	2383, 626, 518, 625, 1053, 2105, 2146, 1200, 3342, 208,
	2467, 805, 139, 1705, 2059, 2954, 1705, 208, 3121, 2349,
	1557, 2088, 2075, 3391, 2590, 3307, 513, 208, 3278, 2111,
	2112, 2175, 629, 755, 1316, 2107, 743, 2509, 2870, 1719,
	208, 2096, 2097, 1154, 1469, 1899, 2565, 3404, 1000, 3250,
	1572, 2592, 2006, 1314, 1364, 208, 1053, 1723, 796, 208,
	208, 2423, 570, 2110, 3161, 2589, 2125, 1705, 804, 3076,
	2949, 2153, 1701, 2844, 2594, 746, 1015, 2956, 1514, 3341,
	3383, 1335, 2458, 2181, 3381, 208, 3107, 208, 1713, 3192,
	208, 994, 2375, 1960, 1560, 2211, 2253, 1696, 3048, 1720,
	3080, 1961, 1969, 2161, 1962, 208, 2651, 1967, 994, 2274,
	1506, 1507, 208, 747, 208, 2225, 208, 1776, 2262, 2593,
	3374, 794, 208, 743, 1365, 208, 1551, 208, 744, 208,
	1848, 208, 208, 2240, 208, 1154, 1154, 1154, 2210, 1154,
	2160, 2164, 1013, 208, 208, 796, 208, 1008, 2238, 1734,
	1952, 505, 1701, 208, 1603, 1393, 2899, 564, 1402, 2955,
	1326, 686, 2201, 2193, 2195, 2468, 208, 2996, 208, 1628,
	1628, 2184, 2209, 1019, 569, 2203, 1724, 2237, 2067, 2294,
	1714, 795, 1485, 2229, 3109, 2226, 1490, 2508, 1676, 1145,
	2539, 208, 208, 208, 3419, 208, 3166, 2340, 3425, 2341,
	2307, 2308, 3040, 1701, 1168, 2233, 2331, 2333, 3165, 2219,
	2221, 2222, 2223, 1813, 566, 744, 2276, 1173, 208, 2241,
	2245, 3148, 2247, 2332, 580, 2240, 3230, 2240, 2250, 3037,
	2318, 1401, 2858, 3402, 1554, 583, 1725, 1726, 2309, 1673,
	2652, 3052, 2266, 1896, 139, 1721, 2296, 1963, 3051, 2573,
	2800, 563, 2334, 2303, 2335, 2522, 1965, 2469, 1558, 2166,
	2569, 1977, 2289, 2275, 991, 2285, 991, 2285, 2305, 745,
	3038, 2168, 2257, 1722, 2254, 2306, 1950, 1796, 514, 1953,
	1168, 1168, 2304, 2346, 1469, 1705, 1298, 2310, 567, 2300,
	1561, 2301, 2320, 2302, 1600, 1600, 1785, 1784, 1758, 565,
	1558, 3403, 3251, 2169, 1671, 2742, 2212, 2997, 2376, 2108,
	3287, 1401, 1877, 910, 2353, 1741, 2167, 208, 1400, 1669,
	1672, 2401, 2402, 2916, 1559, 3084, 2251, 2523, 1949, 2102,
	515, 1261, 1561, 3405, 1336, 1740, 2411, 3149, 3418, 2356,
	2355, 1168, 1897, 2580, 2579, 2367, 1843, 1349, 2412, 1402,
	2358, 1556, 204, 2825, 508, 509, 745, 1727, 526, 508,
	526, 536, 541, 1737, 2506, 557, 1559, 2521, 516, 2140,
	517, 746, 684, 204, 2505, 2463, 2461, 2462, 2454, 2455,
	2456, 2457, 2459, 2460, 2801, 677, 1711, 1712, 1557, 3050,
	2802, 674, 2139, 2138, 2104, 204, 2264, 802, 1400, 2103,
	1232, 2374, 3156, 3235, 1246, 1053, 3069, 1244, 2697, 747,
	2494, 3033, 805, 2489, 3034, 2501, 2502, 1233, 520, 1794,
	1560, 1728, 2623, 3388, 208, 3180, 3002, 208, 3290, 2503,
	3236, 2540, 2500, 3146, 208, 2815, 2020, 208, 208, 1053,
	3390, 3359, 1378, 2213, 2214, 1360, 3247, 3252, 1053, 1358,
	2482, 3036, 2526, 1951, 1346, 208, 793, 3126, 746, 2995,
	2418, 2524, 1560, 3039, 2893, 3147, 2529, 1344, 2481, 2726,
	208, 990, 1342, 990, 1340, 2537, 1338, 1628, 1332, 3157,
	1242, 2543, 2446, 2386, 508, 508, 2544, 2261, 208, 208,
	208, 3291, 204, 3237, 208, 2235, 747, 208, 2205, 2517,
	2159, 2555, 2557, 2516, 208, 208, 208, 208, 208, 2527,
	2528, 1582, 1579, 2535, 1379, 2563, 2498, 2530, 208, 208,
	1308, 798, 2512, 2344, 2534, 2547, 208, 2343, 1868, 2019,
	2337, 2511, 1879, 2582, 1855, 2586, 2587, 1661, 208, 1154,
	2495, 208, 1517, 1311, 2515, 1222, 3337, 1053, 2518, 2484,
	2485, 2486, 3284, 3026, 1053, 2566, 2567, 2510, 2914, 208,
	2654, 2574, 208, 208, 2875, 3035, 2525, 2754, 2570, 682,
	683, 2581, 208, 2584, 756, 1154, 208, 2873, 1154, 1154,
	1154, 2537, 675, 676, 1603, 208, 2636, 2553, 2554, 1377,
	2604, 208, 1359, 2541, 2542, 1245, 1357, 208, 1243, 208,
	2857, 1345, 1600, 2650, 206, 587, 208, 2635, 2634, 519,
	2280, 2067, 2067, 2611, 1343, 1703, 2558, 2269, 2268, 1341,
	1603, 1339, 2564, 1337, 2248, 1331, 1826, 1241, 994, 1154,
	1154, 1825, 2670, 2640, 1823, 2659, 1821, 208, 208, 2619,
	1703, 208, 1818, 994, 1816, 2595, 3196, 2600, 1814, 1805,
	1755, 2606, 1753, 1744, 2658, 1732, 208, 1729, 1053, 208,
	208, 1053, 208, 2615, 2667, 2609, 1716, 994, 1706, 2597,
	1743, 2598, 1867, 2667, 2620, 2614, 1743, 2210, 208, 2612,
	1404, 2365, 2684, 972, 1589, 1162, 3385, 1773, 1051, 3310,
	3100, 3099, 1692, 1197, 3198, 761, 763, 2180, 2197, 2616,
	2925, 2617, 2700, 2180, 992, 2607, 992, 973, 2178, 2608,
	1713, 2067, 2067, 2067, 2196, 2641, 1375, 1376, 2643, 2644,
	2645, 1053, 2683, 1852, 805, 2657, 2180, 2710, 139, 2676,
	1874, 2669, 1053, 3242, 208, 1411, 1412, 2194, 2729, 1411,
	1412, 3216, 2678, 2679, 2680, 3003, 2681, 2682, 2751, 2695,
	1588, 2215, 2200, 2366, 823, 2699, 1408, 521, 2232, 2757,
	2202, 1414, 3256, 1405, 3283, 3254, 2903, 2898, 2840, 2690,
	2691, 2288, 2089, 1664, 1595, 3400, 2545, 3417, 2707, 2764,
	2738, 2739, 2740, 1321, 2711, 1482, 2712, 2846, 1413, 1320,
	974, 2714, 1413, 2708, 2452, 2453, 1411, 1412, 2172, 2171,
	2749, 2172, 588, 589, 532, 2551, 2173, 1979, 2026, 2021,
	1994, 1168, 1909, 2770, 1362, 2973, 2845, 1361, 2741, 2812,
	1480, 2734, 1603, 1478, 1005, 3426, 1485, 208, 1909, 2780,
	2745, 2747, 2748, 674, 3227, 2753, 3140, 3138, 991, 3094,
	3071, 208, 2760, 3020, 2944, 2933, 2909, 1053, 2896, 2895,
	2894, 2872, 2769, 2834, 1016, 991, 2766, 2677, 2765, 2808,
	2767, 557, 2648, 2646, 2777, 2339, 2338, 208, 2779, 2298,
	2273, 1603, 1603, 2071, 2842, 2249, 1981, 204, 2804, 204,
	204, 1866, 1159, 2240, 204, 1865, 1864, 1603, 1603, 1808,
	591, 590, 204, 1175, 1807, 2805, 1806, 1788, 2853, 2829,
	1766, 1765, 1761, 2813, 1760, 1759, 1757, 1628, 1756, 139,
	2816, 1395, 208, 1374, 2818, 2819, 1373, 1199, 1603, 1333,
	1270, 1269, 1268, 1267, 1266, 1265, 1264, 1263, 2821, 2822,
	2881, 1221, 1262, 1260, 1255, 204, 204, 1254, 1159, 2836,
	592, 593, 1253, 1628, 208, 208, 208, 1252, 1251, 2890,
	204, 1214, 1213, 1212, 1211, 1210, 1209, 1208, 1257, 1202,
	1196, 1053, 208, 1194, 1193, 1018, 1154, 1017, 947, 2885,
	857, 1667, 204, 204, 204, 204, 1159, 769, 620, 753,
	3159, 1368, 2850, 208, 557, 74, 204, 2861, 1204, 607,
	2929, 68, 2892, 2871, 3295, 741, 208, 208, 1154, 1154,
	1154, 2588, 208, 208, 208, 2922, 1854, 208, 208, 2886,
	2843, 1334, 1856, 2514, 208, 2113, 3276, 2067, 2067, 2921,
	2917, 2902, 2918, 2981, 2906, 2422, 2874, 1053, 2876, 3222,
	2210, 2953, 1600, 3120, 2018, 1499, 70, 845, 930, 3027,
	994, 994, 2860, 2324, 2323, 990, 812, 1056, 1677, 851,
	2294, 204, 2908, 2912, 1690, 2155, 2050, 1599, 854, 2919,
	2940, 1601, 990, 856, 2971, 855, 1602, 204, 1600, 2907,
	2923, 1501, 208, 853, 2931, 1598, 2930, 2263, 2967, 2292,
	1249, 730, 541, 2935, 2943, 731, 2936, 1681, 2941, 2942,
	1975, 2013, 2417, 1496, 2958, 1773, 2498, 2067, 2067, 2067,
	2067, 2067, 2067, 2067, 2067, 2067, 2067, 2067, 2067, 2067,
	2067, 2067, 2067, 2067, 2067, 2067, 2951, 2067, 2946, 2959,
	825, 847, 2947, 2010, 1011, 824, 2519, 2662, 2839, 3089,
	1895, 2357, 1892, 623, 208, 2449, 1995, 1003, 2937, 2938,
	2939, 2072, 2065, 2061, 1053, 1628, 1053, 1382, 1471, 2293,
	1043, 828, 1973, 1487, 2391, 2532, 2671, 823, 2150, 1903,
	1775, 823, 1603, 971, 970, 3008, 208, 208, 208, 1137,
	969, 3301, 3298, 3015, 1137, 2952, 2994, 1670, 208, 2165,
	1463, 2637, 841, 1167, 208, 2499, 208, 2698, 1219, 208,
	208, 208, 3241, 1462, 1628, 1628, 765, 3232, 208, 208,
	1154, 1030, 1053, 1029, 1154, 1028, 3045, 2572, 994, 3046,
	1628, 1628, 3423, 986, 3055, 2868, 3010, 175, 3007, 172,
	3056, 3057, 208, 3005, 3006, 1053, 3012, 174, 1154, 3073,
	2534, 173, 3016, 3023, 3024, 2883, 3013, 2622, 208, 90,
	3004, 1628, 3025, 37, 3044, 36, 35, 17, 3009, 115,
	114, 3054, 199, 113, 112, 111, 110, 109, 3011, 208,
	108, 107, 106, 3088, 105, 1053, 104, 103, 3067, 3062,
	1600, 102, 101, 100, 3063, 508, 99, 98, 992, 97,
	96, 95, 3085, 2659, 3086, 3101, 3074, 94, 93, 92,
	3104, 1053, 1051, 3087, 3066, 992, 204, 91, 204, 34,
	553, 204, 3095, 550, 50, 2667, 2071, 2071, 3093, 49,
	89, 1175, 88, 1159, 204, 16, 33, 3082, 3118, 1600,
	1600, 14, 204, 1175, 526, 54, 55, 204, 1175, 1053,
	13, 3110, 29, 557, 3132, 1600, 1600, 208, 3112, 208,
	3064, 1053, 208, 30, 80, 79, 28, 15, 1773, 3128,
	208, 27, 994, 25, 3117, 26, 3118, 11, 8, 7,
	994, 10, 12, 24, 144, 3070, 1600, 3142, 1912, 143,
	3075, 208, 73, 994, 3143, 991, 142, 3133, 3134, 72,
	141, 140, 71, 208, 23, 9, 22, 136, 3185, 2904,
	991, 208, 67, 3092, 138, 137, 1154, 64, 3136, 135,
	3184, 208, 3176, 134, 65, 133, 2071, 2071, 2071, 132,
	66, 3141, 3162, 131, 991, 2388, 2389, 21, 3189, 5,
	53, 3191, 208, 6, 3105, 2701, 83, 84, 3174, 3168,
	31, 62, 3197, 1603, 61, 60, 20, 3183, 52, 19,
	166, 208, 3205, 3206, 3137, 165, 164, 208, 163, 3195,
	3193, 3200, 3194, 159, 158, 162, 2921, 208, 160, 3199,
	161, 157, 130, 3188, 168, 167, 155, 152, 3201, 151,
	154, 156, 153, 150, 2659, 3229, 169, 129, 3220, 3238,
	57, 128, 127, 126, 204, 1628, 125, 124, 1603, 3228,
	56, 18, 2, 3215, 1, 0, 3169, 3170, 0, 0,
	0, 0, 0, 208, 1154, 3249, 0, 0, 0, 208,
	0, 0, 0, 1154, 1154, 2475, 2476, 2477, 3270, 3225,
	0, 208, 0, 208, 0, 0, 0, 0, 0, 204,
	204, 3255, 0, 0, 0, 0, 204, 3266, 0, 3258,
	3262, 0, 3267, 0, 208, 0, 1793, 3280, 0, 0,
	208, 208, 3274, 1053, 3275, 204, 3273, 204, 3292, 204,
	3261, 208, 1603, 508, 0, 0, 3303, 0, 0, 0,
	0, 3313, 3188, 3315, 3311, 1809, 3304, 3268, 3269, 3308,
	1912, 3293, 990, 0, 0, 3323, 3297, 3305, 0, 0,
	0, 3322, 0, 208, 0, 0, 0, 990, 0, 3317,
	0, 3319, 0, 1137, 0, 3348, 0, 0, 0, 0,
	1600, 3333, 3334, 3336, 3335, 0, 557, 0, 0, 0,
	0, 990, 3350, 0, 0, 204, 0, 1159, 204, 208,
	0, 3362, 0, 0, 3364, 0, 3366, 0, 2067, 0,
	557, 0, 3371, 823, 3372, 204, 3373, 3363, 208, 1137,
	204, 204, 3368, 204, 3365, 204, 3367, 204, 0, 204,
	0, 0, 0, 0, 3382, 3380, 3379, 1873, 0, 0,
	0, 1875, 208, 1876, 3389, 3386, 3387, 0, 3303, 0,
	0, 2067, 204, 0, 3394, 0, 3396, 3398, 0, 3393,
	3369, 3370, 3399, 0, 0, 0, 2294, 0, 0, 0,
	3406, 541, 3407, 3392, 0, 0, 0, 557, 3414, 3413,
	0, 3415, 2071, 2071, 0, 0, 0, 3416, 0, 0,
	3420, 3312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3427, 0, 3428, 0, 0, 3421,
	3422, 0, 0, 3435, 3436, 0, 0, 3431, 3432, 3433,
	0, 0, 0, 0, 0, 0, 1628, 0, 0, 3440,
	0, 0, 0, 0, 0, 0, 0, 0, 3438, 2067,
	0, 0, 0, 0, 0, 0, 0, 1048, 0, 0,
	0, 1137, 0, 0, 1166, 0, 0, 991, 991, 0,
	0, 0, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
	2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
	2071, 1628, 2071, 0, 0, 992, 1411, 1412, 0, 0,
	0, 2722, 2723, 0, 0, 0, 0, 0, 0, 0,
	992, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1414, 0, 0, 0, 0, 0, 0, 0,
	1250, 0, 0, 0, 992, 508, 0, 0, 0, 2452,
	2453, 0, 2470, 2471, 2472, 0, 0, 0, 0, 1413,
	204, 0, 1274, 1274, 1274, 1166, 0, 1433, 0, 0,
	508, 1600, 0, 0, 0, 1628, 1305, 204, 0, 508,
	0, 0, 204, 0, 0, 0, 0, 0, 0, 0,
	0, 2781, 2782, 2783, 2784, 2785, 2786, 2787, 2788, 2789,
	2790, 2791, 2792, 2793, 2794, 2795, 2796, 2797, 2798, 2799,
	2467, 2803, 0, 2962, 0, 0, 2452, 2453, 0, 2470,
	2471, 2472, 0, 0, 0, 0, 1600, 0, 0, 1436,
	1437, 1438, 1439, 0, 0, 2963, 0, 0, 0, 1419,
	0, 1367, 2452, 2453, 0, 991, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 526, 3040, 0, 0, 1441,
	1442, 1443, 0, 0, 0, 0, 0, 2467, 0, 0,
	0, 0, 2458, 0, 990, 990, 0, 0, 0, 0,
	0, 0, 0, 3037, 0, 0, 3030, 0, 0, 0,
	1600, 0, 2188, 0, 0, 0, 0, 0, 1137, 3028,
	204, 0, 0, 0, 0, 3032, 0, 0, 0, 0,
	204, 0, 1434, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 3038, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 2458,
	0, 0, 204, 2242, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3031, 2468, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2458, 0, 0, 204, 0,
	1175, 0, 0, 204, 0, 0, 0, 0, 0, 991,
	0, 0, 0, 1137, 0, 0, 1440, 991, 1793, 0,
	2473, 0, 0, 0, 0, 2188, 0, 508, 0, 2297,
	991, 0, 0, 0, 1435, 204, 0, 0, 204, 0,
	204, 0, 204, 0, 204, 204, 0, 1159, 0, 0,
	0, 0, 2468, 0, 0, 0, 2316, 674, 0, 2188,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	0, 0, 990, 0, 0, 0, 0, 2469, 2468, 1175,
	1137, 1175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3033, 1137, 0, 3034, 0,
	0, 0, 0, 0, 204, 204, 204, 0, 204, 0,
	0, 1577, 0, 0, 0, 1411, 1412, 0, 1444, 1445,
	1446, 1454, 1455, 1456, 1586, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 1447, 3036, 0, 992, 992, 0,
	0, 1414, 0, 0, 2469, 1460, 0, 3039, 0, 0,
	0, 0, 1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420,
	1421, 0, 0, 0, 0, 0, 0, 0, 1413, 0,
	2469, 1553, 0, 0, 0, 0, 1433, 0, 0, 0,
	0, 0, 0, 1430, 0, 0, 0, 0, 2464, 2465,
	2466, 0, 0, 0, 0, 2463, 2461, 2462, 2454, 2455,
	2456, 2457, 2459, 2460, 0, 0, 0, 0, 1137, 0,
	0, 0, 0, 0, 0, 0, 990, 0, 0, 0,
	0, 0, 0, 0, 990, 0, 0, 0, 0, 0,
	1175, 0, 0, 0, 0, 0, 0, 990, 1436, 1437,
	1438, 1439, 0, 2071, 0, 0, 0, 0, 1419, 3035,
	0, 0, 0, 0, 0, 2464, 2465, 2466, 0, 0,
	1137, 0, 2463, 2461, 2462, 2454, 2455, 2456, 2457, 2459,
	2460, 1451, 0, 0, 1461, 0, 0, 0, 1441, 1442,
	1443, 1411, 1412, 0, 0, 58, 2071, 0, 2463, 2461,
	2462, 2454, 2455, 2456, 2457, 2459, 2460, 59, 0, 1457,
	0, 1458, 0, 0, 0, 992, 0, 1414, 1428, 1429,
	0, 63, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 811, 0, 1449, 0, 0, 0, 0, 0, 0,
	0, 1434, 204, 0, 1413, 0, 0, 508, 0, 1768,
	508, 69, 0, 0, 0, 0, 1780, 508, 0, 1459,
	508, 508, 3125, 0, 0, 0, 204, 0, 0, 0,
	0, 0, 0, 0, 1448, 1250, 0, 1799, 1175, 1799,
	0, 75, 0, 0, 2071, 0, 0, 0, 0, 0,
	85, 0, 0, 1175, 76, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3151, 0, 0, 0, 0,
	0, 2188, 2188, 204, 0, 1440, 0, 2188, 0, 0,
	2576, 0, 0, 0, 1419, 0, 0, 2188, 2576, 2188,
	2576, 2576, 0, 1435, 0, 0, 0, 77, 0, 0,
	0, 204, 204, 0, 0, 1780, 0, 0, 1840, 0,
	0, 0, 0, 0, 1441, 1442, 1443, 0, 1452, 992,
	0, 204, 0, 0, 1159, 1853, 0, 992, 0, 0,
	0, 1859, 0, 1860, 0, 1861, 0, 1862, 0, 1863,
	992, 0, 2625, 0, 0, 2627, 2630, 0, 0, 0,
	0, 0, 0, 3219, 0, 204, 0, 0, 0, 204,
	0, 0, 1878, 0, 0, 0, 0, 1434, 204, 0,
	0, 0, 0, 0, 1159, 0, 0, 0, 0, 0,
	2188, 0, 508, 0, 0, 0, 0, 0, 0, 2188,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1450, 78, 0, 1425, 1426, 1432, 1431, 1427, 1453,
	0, 1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421,
	204, 1793, 0, 0, 1793, 0, 0, 2988, 0, 0,
	0, 0, 0, 0, 145, 81, 0, 82, 0, 2706,
	0, 0, 1159, 204, 0, 204, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 0, 0, 1435,
	0, 204, 0, 0, 0, 0, 0, 0, 670, 0,
	0, 116, 0, 0, 0, 0, 0, 0, 0, 1137,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1137, 0, 0, 0, 2762, 117, 0,
	0, 0, 1137, 0, 0, 0, 0, 0, 0, 0,
	149, 0, 0, 0, 0, 0, 0, 0, 177, 0,
	0, 0, 0, 0, 0, 0, 823, 0, 170, 0,
	0, 0, 0, 0, 0, 0, 171, 0, 0, 823,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2131, 0, 0, 0, 0, 1301, 1422, 1423,
	1415, 1416, 1417, 1418, 1420, 1421, 0, 0, 0, 0,
	0, 0, 0, 0, 811, 0, 0, 0, 811, 204,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	508, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1137, 0, 0, 508, 0, 0, 0, 1137, 0,
	1177, 0, 1181, 0, 1187, 0, 0, 1411, 1412, 0,
	1444, 1445, 1446, 1454, 1455, 1456, 0, 0, 0, 0,
	1175, 0, 0, 0, 0, 0, 1447, 0, 0, 0,
	0, 0, 0, 1414, 0, 0, 0, 1460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1413, 0, 0, 0, 0, 557, 0, 0, 1433, 0,
	0, 0, 0, 0, 0, 1430, 0, 0, 0, 0,
	2452, 2453, 0, 2470, 2471, 2472, 0, 1306, 0, 0,
	0, 0, 0, 0, 1309, 0, 0, 2900, 204, 204,
	0, 0, 1137, 0, 0, 1137, 0, 0, 1166, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1436, 1437, 1438, 1439, 0, 0, 2188, 204, 2260, 0,
	1419, 2467, 0, 1780, 0, 0, 0, 0, 0, 2316,
	2316, 0, 0, 0, 0, 674, 674, 2188, 0, 0,
	1793, 1793, 0, 1451, 0, 1137, 1461, 204, 0, 0,
	1441, 1442, 1443, 0, 0, 2299, 1137, 0, 1274, 0,
	1274, 0, 1274, 0, 1166, 1166, 0, 0, 0, 0,
	0, 1457, 0, 1458, 0, 0, 0, 0, 0, 0,
	1428, 1429, 0, 0, 0, 0, 2336, 0, 0, 0,
	0, 0, 0, 2458, 0, 1449, 0, 0, 0, 0,
	0, 0, 0, 1434, 0, 2982, 1464, 1465, 1466, 1467,
	1468, 0, 0, 0, 0, 0, 0, 0, 0, 2474,
	0, 1459, 0, 0, 2352, 1166, 2354, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1484, 0, 0, 0,
	0, 0, 1497, 0, 2473, 0, 0, 0, 0, 0,
	0, 2368, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 0, 0, 1175, 0, 204,
	0, 1137, 0, 0, 0, 0, 2468, 1440, 0, 0,
	0, 0, 204, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1435, 0, 0, 0, 2188,
	2188, 2188, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1175, 0, 0, 0, 0, 0, 2188, 0, 2576,
	1452, 0, 1175, 1175, 204, 0, 0, 0, 0, 0,
	0, 204, 204, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3079, 0, 0, 0, 0,
	0, 1547, 1547, 1547, 0, 0, 0, 0, 2469, 0,
	0, 2188, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1137, 0, 0, 0, 0,
	0, 0, 1175, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1450, 0, 0, 1425, 1426, 1432, 1431,
	1427, 1453, 0, 1424, 1422, 1423, 1415, 1416, 1417, 1418,
	1420, 1421, 0, 1411, 1412, 0, 0, 0, 0, 0,
	811, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1414,
	0, 1137, 0, 0, 0, 0, 0, 0, 0, 1411,
	1412, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2188, 0, 2576, 0, 0, 3145, 1413, 0, 0, 2464,
	2465, 2466, 0, 204, 1433, 1414, 2463, 2461, 2462, 2454,
	2455, 2456, 2457, 2459, 2460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 557, 0, 0, 0, 0, 0,
	0, 0, 1413, 0, 0, 0, 2630, 0, 0, 0,
	1433, 0, 0, 2568, 204, 0, 0, 0, 0, 0,
	2725, 0, 0, 0, 1175, 0, 2452, 2453, 0, 2470,
	2471, 2472, 0, 0, 0, 0, 1436, 1437, 1438, 1439,
	0, 2603, 2260, 0, 0, 204, 1419, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2720, 0, 1137, 0,
	1137, 0, 0, 0, 2762, 0, 0, 0, 0, 0,
	508, 0, 1436, 1437, 1438, 1439, 1441, 1442, 1443, 0,
	3145, 0, 1419, 0, 0, 0, 0, 2467, 0, 0,
	0, 0, 0, 0, 0, 2638, 0, 0, 0, 2642,
	0, 0, 0, 0, 0, 0, 0, 0, 2649, 0,
	0, 0, 1441, 1442, 1443, 0, 1137, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 1434,
	0, 0, 2576, 0, 0, 0, 0, 0, 0, 1137,
	0, 0, 0, 0, 1175, 0, 1175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2458,
	2694, 0, 0, 0, 0, 1434, 0, 3288, 0, 0,
	0, 0, 0, 1175, 204, 0, 0, 0, 0, 1137,
	0, 911, 0, 2709, 204, 1166, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2715, 0, 1440, 0, 1137, 0, 0, 0, 0,
	2473, 0, 0, 0, 0, 0, 2762, 0, 0, 0,
	205, 1435, 0, 0, 0, 0, 0, 0, 1411, 1412,
	0, 1444, 1445, 1446, 1454, 1455, 1456, 0, 0, 1440,
	0, 205, 2468, 1137, 0, 0, 0, 1447, 0, 0,
	0, 0, 2188, 0, 1414, 1137, 0, 1435, 1460, 0,
	0, 0, 0, 205, 0, 0, 0, 0, 0, 0,
	0, 3145, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1413, 1893, 0, 1898, 0, 823, 0, 0, 1433,
	1905, 0, 0, 0, 0, 1175, 1430, 1914, 1915, 1916,
	1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926,
	1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936,
	1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946,
	1947, 1948, 0, 1954, 2469, 1956, 1957, 1958, 1959, 1424,
	1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421, 0, 0,
	0, 1436, 1437, 1438, 1439, 1983, 0, 0, 0, 0,
	0, 1419, 0, 0, 0, 0, 0, 0, 0, 0,
	1484, 0, 0, 0, 2008, 1424, 1422, 1423, 1415, 1416,
	1417, 1418, 1420, 1421, 1451, 0, 0, 1461, 0, 0,
	0, 1441, 1442, 1443, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2040, 2041, 2042, 2043, 2044,
	2045, 2046, 1457, 0, 1458, 0, 2063, 0, 2074, 2076,
	2081, 1428, 1429, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1449, 0, 0, 0,
	0, 0, 0, 0, 1434, 2464, 2465, 2466, 0, 0,
	0, 0, 2463, 2461, 2462, 2454, 2455, 2456, 2457, 2459,
	2460, 0, 1459, 0, 0, 0, 0, 1137, 2901, 0,
	0, 823, 0, 0, 0, 0, 0, 1448, 0, 0,
	0, 0, 0, 0, 0, 2913, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1440, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 1435, 2950, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1411, 1412, 0, 1444, 1445, 1446, 1454, 1455, 1456,
	0, 0, 0, 0, 0, 0, 0, 574, 0, 0,
	1447, 0, 0, 0, 0, 0, 0, 1414, 0, 0,
	0, 1460, 0, 0, 0, 0, 0, 0, 0, 574,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1413, 0, 0, 0, 0, 0,
	0, 0, 1433, 0, 2244, 0, 2246, 0, 0, 1430,
	0, 0, 0, 0, 1450, 0, 0, 1425, 1426, 1432,
	1431, 1427, 1453, 0, 1424, 1422, 1423, 1415, 1416, 1417,
	1418, 1420, 1421, 0, 0, 0, 0, 2990, 0, 0,
	2989, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2452, 2453, 0, 2470, 2471, 2472, 0, 0, 0, 0,
	0, 0, 0, 0, 1436, 1437, 1438, 1439, 0, 2731,
	0, 0, 0, 0, 1419, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3058, 0, 0, 0, 0, 0,
	0, 2260, 0, 0, 0, 0, 0, 1451, 0, 0,
	1461, 0, 0, 0, 1441, 1442, 1443, 0, 0, 0,
	0, 2467, 0, 0, 0, 205, 1058, 205, 205, 1058,
	0, 1058, 205, 0, 0, 1457, 0, 1458, 0, 0,
	205, 0, 0, 0, 1428, 1429, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1449,
	0, 0, 0, 0, 0, 0, 0, 1434, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1058, 1058, 205, 205, 1459, 0, 0, 0, 0,
	0, 0, 0, 2458, 0, 0, 0, 0, 205, 0,
	1448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2371, 2372, 123, 0, 0, 0, 2378, 0, 58,
	205, 205, 205, 205, 0, 1058, 1058, 0, 0, 0,
	1058, 59, 118, 1058, 205, 0, 2392, 2393, 0, 0,
	0, 1440, 2008, 0, 2473, 63, 0, 0, 0, 0,
	0, 2400, 0, 3152, 0, 0, 0, 0, 0, 1435,
	39, 120, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 38, 0, 69, 2468, 2420, 0, 0,
	1058, 0, 0, 0, 1452, 0, 0, 0, 0, 0,
	0, 2435, 0, 0, 3190, 41, 0, 0, 0, 205,
	42, 0, 0, 0, 0, 75, 0, 0, 121, 0,
	0, 0, 0, 40, 85, 205, 0, 0, 76, 43,
	0, 0, 0, 0, 0, 3213, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2081,
	2081, 2081, 0, 0, 0, 44, 0, 0, 0, 0,
	0, 0, 0, 0, 1547, 0, 0, 0, 0, 0,
	0, 77, 2504, 0, 0, 0, 0, 1450, 2469, 0,
	1425, 1426, 1432, 1431, 1427, 1453, 0, 1424, 1422, 1423,
	1415, 1416, 1417, 1418, 1420, 1421, 0, 0, 0, 0,
	2440, 0, 0, 2441, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3260, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 811, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 811, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3294, 0, 0, 0, 0, 0,
	0, 2591, 0, 0, 3309, 0, 78, 0, 0, 0,
	0, 0, 1054, 0, 45, 1155, 0, 1054, 0, 2464,
	2465, 2466, 0, 0, 0, 0, 2463, 2461, 2462, 2454,
	2455, 2456, 2457, 2459, 2460, 0, 0, 48, 145, 81,
	0, 82, 0, 46, 0, 0, 0, 122, 0, 0,
	0, 0, 0, 47, 0, 0, 0, 0, 0, 0,
	176, 0, 0, 0, 0, 0, 0, 1155, 1155, 0,
	0, 0, 51, 0, 0, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 119, 2660, 0, 0, 0, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 0,
	1058, 0, 205, 205, 0, 0, 0, 0, 0, 1058,
	205, 1155, 1155, 0, 0, 205, 1155, 0, 0, 1155,
	0, 0, 117, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 149, 0, 0, 0, 0, 0,
	0, 0, 177, 0, 0, 0, 1058, 0, 0, 0,
	0, 0, 170, 0, 0, 0, 0, 0, 0, 0,
	171, 2713, 0, 0, 0, 1905, 1155, 0, 0, 0,
	0, 2717, 2718, 0, 0, 2721, 0, 0, 0, 2724,
	0, 148, 0, 0, 3, 0, 0, 0, 2728, 0,
	0, 0, 0, 0, 0, 0, 0, 2735, 0, 0,
	2504, 0, 0, 0, 0, 0, 0, 0, 1411, 1412,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2755, 0, 0, 0, 0, 0, 0, 1411, 1412,
	0, 0, 0, 0, 1414, 0, 0, 0, 0, 0,
	2771, 2772, 0, 2773, 2774, 2775, 0, 0, 2776, 0,
	0, 0, 2778, 0, 1414, 0, 0, 0, 0, 0,
	0, 1413, 0, 0, 0, 0, 0, 0, 0, 1433,
	0, 1058, 205, 0, 0, 0, 0, 0, 1058, 0,
	0, 1413, 0, 2806, 2807, 0, 0, 0, 0, 1433,
	0, 0, 0, 0, 0, 1411, 1412, 0, 1444, 1445,
	1446, 1454, 1455, 1456, 0, 0, 0, 0, 0, 0,
	0, 2824, 0, 0, 1447, 2719, 0, 205, 205, 0,
	0, 1414, 0, 0, 205, 1460, 0, 0, 0, 0,
	0, 1436, 1437, 1438, 1439, 877, 0, 0, 0, 0,
	0, 1419, 0, 205, 0, 205, 0, 205, 1413, 0,
	0, 1436, 1437, 1438, 1439, 0, 1433, 0, 0, 0,
	0, 1419, 0, 1430, 2854, 0, 0, 0, 0, 0,
	0, 1441, 1442, 1443, 203, 0, 0, 0, 0, 2862,
	2865, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1441, 1442, 1443, 0, 581, 0, 0, 0, 0,
	0, 0, 2882, 1058, 0, 1058, 0, 0, 0, 0,
	1058, 0, 0, 205, 0, 0, 205, 581, 1436, 1437,
	1438, 1439, 0, 0, 1434, 1058, 1058, 0, 1419, 0,
	0, 0, 0, 205, 0, 0, 0, 0, 205, 205,
	0, 205, 0, 205, 1434, 205, 1054, 205, 0, 0,
	0, 1451, 0, 0, 1461, 1155, 574, 0, 1441, 1442,
	1443, 574, 0, 0, 0, 1547, 0, 0, 0, 0,
	205, 0, 0, 0, 0, 0, 2932, 0, 0, 1457,
	0, 1458, 0, 0, 0, 0, 0, 0, 1428, 1429,
	0, 0, 1054, 0, 0, 0, 0, 0, 1440, 0,
	0, 0, 0, 1449, 0, 0, 0, 0, 0, 0,
	0, 1434, 0, 0, 993, 1058, 1435, 0, 1440, 0,
	0, 2960, 2961, 0, 0, 0, 0, 2965, 2966, 1459,
	0, 0, 2969, 2970, 0, 0, 1435, 0, 0, 2974,
	0, 0, 0, 0, 1448, 0, 0, 0, 0, 0,
	0, 0, 846, 87, 0, 0, 0, 0, 2979, 0,
	0, 0, 0, 0, 0, 2983, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1440, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1058, 0, 0, 1435, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1155, 0, 0,
	0, 0, 0, 0, 1054, 0, 0, 0, 1452, 87,
	0, 0, 0, 0, 1424, 1422, 1423, 1415, 1416, 1417,
	1418, 1420, 1421, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1424, 1422, 1423, 1415, 1416, 1417,
	1418, 1420, 1421, 881, 0, 0, 0, 1058, 2865, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 0, 0, 1058, 0, 0, 0, 0, 0, 0,
	0, 0, 786, 0, 0, 0, 0, 0, 0, 0,
	0, 806, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1450, 0, 0, 1425, 1426, 1432, 1431, 1427, 1453,
	0, 1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421,
	0, 981, 1411, 1412, 2004, 0, 0, 2005, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2865, 0, 1155,
	0, 1155, 0, 0, 0, 0, 1155, 0, 1414, 0,
	0, 0, 0, 0, 3113, 3114, 3115, 0, 0, 0,
	0, 1155, 1155, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 574, 1413, 0, 0, 0, 0,
	3123, 3124, 0, 1433, 0, 1058, 0, 0, 0, 0,
	0, 0, 0, 0, 3131, 0, 0, 0, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 205, 0,
	0, 2452, 2453, 0, 2470, 2471, 2472, 0, 0, 0,
	0, 205, 0, 0, 1058, 0, 0, 0, 0, 2377,
	2730, 0, 0, 0, 0, 2865, 205, 1058, 0, 0,
	205, 0, 0, 3167, 0, 1436, 1437, 1438, 1439, 0,
	0, 1054, 0, 811, 0, 1419, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 0, 0, 0,
	2865, 205, 2467, 2865, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1441, 1442, 1443, 0, 203,
	0, 203, 203, 0, 2865, 2865, 203, 0, 0, 0,
	0, 0, 0, 205, 581, 0, 205, 0, 205, 0,
	205, 0, 205, 205, 0, 0, 1058, 1058, 1058, 0,
	1058, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 0, 1054, 0, 1434, 0,
	0, 0, 3231, 0, 2458, 3234, 0, 203, 203, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 205, 205, 0, 205, 0, 0, 0,
	0, 0, 0, 0, 203, 203, 203, 203, 0, 0,
	0, 0, 0, 0, 0, 2473, 0, 0, 203, 205,
	0, 0, 0, 1054, 0, 0, 0, 0, 0, 0,
	0, 0, 1440, 0, 0, 0, 0, 0, 0, 1054,
	0, 0, 0, 0, 0, 0, 0, 2468, 0, 0,
	1435, 0, 0, 0, 0, 0, 0, 0, 811, 0,
	0, 0, 1411, 1412, 0, 1444, 1445, 1446, 1454, 1455,
	1456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 0, 1414, 3332,
	3332, 3332, 1460, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 0, 0, 0, 0, 0, 3351, 0,
	0, 0, 0, 0, 0, 1413, 0, 0, 0, 0,
	0, 0, 0, 1433, 0, 0, 2865, 0, 2865, 0,
	1430, 0, 0, 0, 0, 0, 0, 0, 0, 2469,
	0, 3332, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1054, 87, 0, 87, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1424, 1422,
	1423, 1415, 1416, 1417, 1418, 1420, 1421, 0, 0, 0,
	0, 0, 0, 0, 0, 1436, 1437, 1438, 1439, 0,
	1155, 0, 0, 0, 0, 1419, 0, 0, 0, 0,
	0, 0, 0, 1054, 0, 0, 1058, 0, 0, 0,
	0, 0, 3332, 0, 0, 0, 0, 0, 1451, 0,
	0, 1461, 0, 0, 0, 1441, 1442, 1443, 0, 0,
	0, 806, 87, 0, 0, 0, 0, 0, 1055, 87,
	1058, 1156, 0, 1055, 0, 0, 87, 0, 0, 1058,
	2464, 2465, 2466, 0, 0, 1428, 1429, 2463, 2461, 2462,
	2454, 2455, 2456, 2457, 2459, 2460, 0, 0, 0, 0,
	1449, 0, 0, 0, 0, 0, 0, 0, 1434, 0,
	0, 0, 1155, 1155, 1155, 0, 1155, 0, 0, 0,
	0, 205, 0, 1156, 1156, 0, 0, 0, 0, 0,
	0, 0, 0, 1411, 1412, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	205, 0, 0, 0, 0, 0, 0, 205, 1570, 1414,
	993, 0, 0, 203, 0, 0, 0, 1156, 1156, 205,
	1058, 0, 1156, 0, 0, 1156, 203, 1570, 1058, 0,
	0, 0, 1440, 0, 581, 1058, 1413, 0, 0, 581,
	0, 0, 0, 0, 1433, 0, 0, 0, 0, 0,
	1435, 786, 0, 205, 0, 0, 1058, 205, 0, 1058,
	1058, 1058, 0, 0, 0, 0, 205, 0, 0, 1474,
	0, 0, 1156, 0, 0, 1452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1483, 0, 0,
	2370, 1489, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1436, 1437, 1438, 1439,
	1058, 1058, 0, 0, 0, 0, 1419, 0, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1058,
	0, 205, 1058, 205, 0, 0, 1441, 1442, 1443, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1450, 205,
	0, 1425, 1426, 1432, 1431, 1427, 1453, 0, 1424, 1422,
	1423, 1415, 1416, 1417, 1418, 1420, 1421, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 581, 0, 0, 1434,
	0, 0, 1058, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1058, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 1568, 0, 1571, 713, 0,
	743, 0, 1054, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 203, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 720, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 749, 718, 1054, 203, 0, 203,
	0, 203, 0, 1440, 0, 1054, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 719, 0,
	0, 1435, 0, 721, 0, 0, 0, 750, 0, 0,
	0, 0, 0, 727, 728, 0, 0, 0, 0, 737,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 744, 722, 0, 0, 0, 0, 1058, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	203, 0, 0, 0, 0, 0, 0, 0, 0, 742,
	0, 0, 1055, 0, 0, 0, 0, 203, 0, 0,
	0, 1156, 581, 203, 0, 203, 1155, 203, 0, 203,
	0, 203, 0, 0, 1054, 0, 0, 0, 0, 0,
	723, 1054, 0, 0, 0, 0, 0, 0, 717, 0,
	0, 0, 0, 0, 203, 0, 0, 0, 1055, 0,
	0, 0, 1155, 724, 725, 1155, 1155, 1155, 0, 1424,
	1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 205, 0, 0,
	0, 0, 0, 726, 0, 0, 0, 0, 0, 0,
	0, 0, 1058, 205, 0, 0, 0, 1058, 748, 0,
	0, 0, 0, 0, 0, 0, 1155, 1155, 0, 0,
	0, 0, 0, 745, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1058,
	1058, 1058, 0, 0, 0, 1054, 0, 0, 1054, 0,
	0, 0, 0, 0, 0, 205, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1058, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1156, 0, 0, 0, 0, 0, 0,
	1055, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	739, 0, 0, 0, 806, 0, 0, 0, 1054, 0,
	733, 0, 0, 0, 0, 0, 734, 0, 0, 1054,
	0, 0, 0, 715, 0, 746, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 716,
	0, 0, 993, 0, 0, 0, 0, 0, 0, 735,
	0, 0, 0, 732, 0, 0, 0, 751, 752, 993,
	0, 0, 0, 747, 203, 0, 0, 0, 0, 0,
	0, 736, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1058, 0, 1058, 0, 0,
	738, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 657, 786, 0, 0, 786,
	786, 0, 740, 0, 0, 1156, 0, 1156, 0, 0,
	0, 0, 1156, 0, 0, 0, 0, 0, 639, 0,
	0, 0, 205, 0, 1054, 0, 0, 1156, 1156, 205,
	205, 1058, 0, 1058, 0, 1058, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 640,
	0, 0, 0, 0, 1972, 0, 1058, 0, 641, 1058,
	0, 0, 0, 0, 0, 0, 0, 0, 806, 0,
	0, 0, 0, 642, 0, 0, 0, 0, 0, 0,
	0, 1483, 203, 0, 0, 1483, 0, 0, 0, 662,
	0, 0, 203, 0, 0, 0, 1058, 0, 0, 0,
	0, 0, 0, 0, 643, 203, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1055, 0, 0,
	203, 644, 1058, 0, 581, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1054, 0,
	0, 645, 0, 1155, 646, 0, 0, 0, 0, 981,
	203, 0, 0, 0, 0, 203, 0, 0, 0, 0,
	1058, 0, 0, 0, 0, 0, 1571, 0, 0, 0,
	661, 0, 1058, 0, 0, 1155, 1155, 1155, 0, 0,
	0, 205, 0, 0, 0, 0, 0, 203, 87, 0,
	203, 0, 203, 0, 203, 0, 203, 203, 0, 0,
	0, 0, 1055, 0, 1054, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 205, 0, 0, 0, 0, 1058, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 205, 0, 0, 203, 203, 203, 0,
	203, 0, 648, 0, 0, 0, 0, 0, 0, 1055,
	0, 0, 0, 0, 0, 0, 0, 0, 665, 649,
	0, 0, 0, 203, 0, 1055, 0, 0, 0, 1411,
	1412, 0, 1444, 1445, 1446, 1454, 1455, 1456, 0, 0,
	0, 87, 0, 0, 0, 0, 664, 0, 1447, 0,
	0, 0, 0, 650, 0, 1414, 651, 0, 0, 1460,
	0, 1054, 659, 1054, 0, 0, 0, 0, 0, 652,
	0, 87, 0, 0, 205, 1058, 0, 0, 0, 0,
	0, 0, 1413, 0, 1058, 1058, 87, 0, 87, 0,
	1433, 0, 0, 0, 0, 0, 0, 1430, 653, 660,
	0, 0, 0, 0, 0, 0, 0, 0, 654, 0,
	0, 0, 0, 0, 0, 0, 0, 1155, 0, 1054,
	656, 1155, 205, 0, 1058, 655, 0, 0, 0, 0,
	0, 87, 205, 87, 0, 0, 663, 1055, 0, 0,
	0, 0, 1054, 0, 0, 1155, 0, 658, 0, 0,
	0, 0, 1436, 1437, 1438, 1439, 0, 0, 0, 0,
	87, 0, 1419, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1156, 0, 0, 0,
	0, 0, 1054, 0, 0, 1451, 0, 0, 1461, 1055,
	0, 0, 1441, 1442, 1443, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1054, 993,
	0, 0, 0, 1457, 0, 1458, 0, 0, 0, 0,
	0, 0, 1428, 1429, 993, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1449, 0, 0,
	0, 0, 0, 0, 0, 1434, 1054, 0, 1570, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1054, 0,
	0, 0, 0, 1459, 0, 0, 0, 0, 1156, 1156,
	1156, 0, 1156, 0, 0, 0, 0, 0, 1448, 0,
	0, 0, 0, 0, 0, 0, 1972, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1483, 0, 0,
	0, 0, 0, 1155, 0, 0, 0, 0, 0, 1440,
	0, 0, 0, 203, 203, 0, 0, 0, 0, 0,
	0, 1570, 0, 0, 0, 0, 0, 1435, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 203, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1155, 0, 0, 0, 0, 981, 0, 0, 0,
	1155, 1155, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 981, 203, 0, 0, 1450, 0, 0, 1425, 1426,
	1432, 1431, 1427, 1453, 0, 1424, 1422, 1423, 1415, 1416,
	1417, 1418, 1420, 1421, 0, 203, 0, 203, 0, 0,
	1054, 2733, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 0, 0, 0,
	1411, 1412, 0, 1444, 1445, 1446, 1454, 1455, 1456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1447,
	0, 0, 0, 0, 0, 0, 1414, 0, 0, 0,
	1460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 87, 1055, 0,
	0, 0, 0, 1413, 0, 0, 0, 0, 0, 0,
	0, 1433, 0, 0, 0, 0, 0, 0, 1430, 0,
	0, 0, 0, 0, 0, 87, 0, 87, 0, 0,
	0, 0, 1055, 0, 0, 0, 0, 0, 0, 0,
	0, 1055, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1436, 1437, 1438, 1439, 0, 0, 806,
	0, 993, 993, 1419, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 1451, 0, 0, 1461,
	0, 0, 0, 1441, 1442, 1443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1156, 0, 1457, 0, 1458, 0, 0, 0,
	1055, 0, 0, 1428, 1429, 0, 0, 1055, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1449, 0,
	0, 0, 0, 0, 0, 0, 1434, 0, 1156, 0,
	0, 1156, 1156, 1156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1459, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 203, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1156, 1156, 0, 0, 0, 203, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1440, 0, 0, 0, 0, 0, 0, 0, 0, 993,
	0, 1055, 0, 0, 1055, 0, 0, 0, 1435, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 1452, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 981, 981,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1055, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1055, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1450, 0, 0, 1425,
	1426, 1432, 1431, 1427, 1453, 0, 1424, 1422, 1423, 1415,
	1416, 1417, 1418, 1420, 1421, 0, 0, 0, 0, 0,
	0, 0, 2443, 993, 0, 0, 0, 0, 0, 0,
	0, 993, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1570, 1411, 1412, 0, 1444, 1445,
	1446, 1454, 1455, 1456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1447, 0, 0, 0, 0, 0,
	1055, 1414, 0, 0, 0, 1460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	0, 0, 0, 203, 203, 0, 981, 0, 1413, 0,
	0, 0, 0, 0, 0, 0, 1433, 0, 0, 0,
	0, 1411, 1412, 1430, 1444, 1445, 1446, 1454, 1455, 1456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1447, 0, 0, 0, 0, 0, 0, 1414, 0, 0,
	0, 1460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1413, 0, 0, 0, 1436, 1437,
	1438, 1439, 1433, 0, 0, 0, 0, 0, 1419, 1430,
	0, 0, 0, 0, 1055, 0, 0, 0, 0, 1156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1451, 0, 0, 1461, 0, 0, 0, 1441, 1442,
	1443, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1156, 1156, 1156, 0, 0, 0, 0, 0, 1457,
	0, 1458, 0, 0, 1436, 1437, 1438, 1439, 1428, 1429,
	981, 0, 0, 0, 1419, 203, 0, 0, 981, 0,
	1055, 0, 0, 1449, 0, 0, 0, 0, 0, 0,
	0, 1434, 0, 0, 0, 0, 0, 1451, 0, 0,
	1461, 0, 0, 0, 1441, 1442, 1443, 0, 0, 1459,
	0, 0, 0, 0, 0, 0, 203, 0, 597, 0,
	0, 0, 0, 0, 1448, 1457, 0, 1458, 0, 0,
	0, 0, 0, 0, 1428, 1429, 0, 0, 0, 0,
	0, 598, 0, 0, 0, 0, 0, 203, 0, 1449,
	0, 87, 0, 0, 0, 0, 87, 1434, 0, 0,
	0, 0, 0, 0, 0, 1440, 0, 0, 0, 0,
	0, 0, 599, 618, 0, 1459, 0, 0, 0, 87,
	0, 0, 0, 1435, 0, 0, 0, 0, 0, 0,
	1448, 0, 0, 600, 0, 0, 601, 1055, 0, 1055,
	0, 0, 0, 0, 0, 0, 0, 0, 1452, 0,
	0, 0, 624, 0, 0, 0, 0, 0, 602, 0,
	0, 0, 0, 0, 0, 0, 0, 622, 203, 0,
	0, 1440, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 603, 0, 0, 0, 0, 1435,
	0, 0, 0, 1156, 0, 1055, 0, 1156, 0, 0,
	0, 0, 0, 0, 604, 0, 0, 605, 628, 0,
	0, 0, 631, 0, 1452, 0, 203, 0, 1055, 0,
	0, 1156, 0, 0, 0, 0, 203, 0, 0, 0,
	0, 1450, 0, 0, 1425, 1426, 1432, 1431, 1427, 1453,
	0, 1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421,
	0, 0, 0, 0, 0, 0, 0, 2442, 1055, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 0, 0, 0, 1055, 608, 0, 0, 0, 1972,
	0, 0, 0, 0, 0, 0, 0, 1450, 0, 0,
	1425, 1426, 1432, 1431, 1427, 1453, 0, 1424, 1422, 1423,
	1415, 1416, 1417, 1418, 1420, 1421, 606, 0, 0, 0,
	0, 0, 1055, 2439, 0, 609, 0, 0, 0, 0,
	0, 0, 0, 0, 1055, 0, 0, 0, 0, 0,
	0, 0, 610, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 630,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 611,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1156,
	0, 0, 612, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 617,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 613, 0, 0, 626, 0, 625, 0, 0, 0,
	0, 614, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 615, 0, 0, 0, 87, 621, 0,
	0, 0, 0, 632, 0, 629, 0, 0, 0, 619,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1156, 0, 0,
	0, 0, 0, 0, 0, 0, 1156, 1156, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1052, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1055, 213, 214, 215,
	216, 217, 1059, 218, 1060, 1061, 1062, 1063, 459, 1064,
	1065, 1066, 1067, 219, 220, 221, 222, 460, 461, 223,
	462, 224, 225, 463, 1068, 226, 227, 228, 229, 230,
	231, 1069, 1070, 232, 464, 465, 466, 1071, 233, 467,
	1072, 1057, 1073, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 1074, 243, 0, 244, 245, 246, 1075,
	932, 247, 248, 1076, 1077, 1079, 1078, 1080, 1081, 1082,
	249, 250, 251, 252, 253, 254, 468, 469, 1083, 255,
	1084, 257, 256, 1085, 258, 1086, 1087, 259, 260, 261,
	1088, 262, 1089, 263, 264, 1090, 470, 265, 266, 268,
	271, 267, 272, 273, 274, 471, 472, 1091, 210, 1092,
	0, 0, 0, 0, 275, 276, 277, 473, 278, 279,
	0, 280, 1093, 281, 1094, 1095, 933, 282, 283, 1096,
	284, 474, 1097, 475, 285, 1098, 286, 287, 288, 289,
	476, 477, 478, 935, 290, 291, 1099, 292, 293, 295,
	0, 0, 0, 211, 294, 296, 303, 1100, 934, 297,
	479, 299, 298, 300, 301, 302, 480, 1101, 481, 1102,
	304, 936, 482, 937, 305, 306, 307, 938, 308, 309,
	0, 0, 310, 311, 312, 313, 1103, 315, 314, 1104,
	316, 483, 939, 317, 318, 940, 1105, 319, 320, 1106,
	1107, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 332, 330, 941, 333, 334, 336, 335, 1108,
	212, 942, 1109, 484, 485, 337, 338, 1110, 339, 340,
	341, 1111, 1112, 343, 344, 345, 1113, 1114, 346, 486,
	943, 347, 944, 487, 348, 342, 349, 350, 351, 352,
	353, 354, 1115, 355, 356, 488, 357, 489, 358, 1116,
	359, 0, 360, 361, 362, 363, 364, 365, 490, 366,
	367, 1117, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 1118, 381, 945, 382,
	383, 384, 385, 491, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 1119, 404, 405, 398, 400, 401,
	402, 399, 403, 406, 407, 1120, 408, 388, 389, 409,
	946, 410, 492, 411, 412, 1121, 422, 413, 414, 415,
	390, 416, 420, 421, 417, 418, 419, 493, 1122, 424,
	425, 423, 1123, 426, 427, 428, 429, 430, 269, 431,
	270, 432, 1124, 494, 495, 496, 497, 1125, 439, 1126,
	433, 434, 498, 435, 499, 1127, 436, 437, 438, 0,
	440, 441, 1128, 1129, 442, 443, 444, 445, 447, 1130,
	448, 1131, 446, 449, 450, 451, 500, 501, 502, 1132,
	453, 452, 503, 1133, 1134, 1135, 1136, 454, 455, 504,
	456, 457, 458, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1052, 0, 0, 0, 0,
	0, 0, 0, 2118, 0, 0, 0, 0, 0, 0,
	0, 2119, 213, 214, 215, 216, 217, 1059, 218, 1060,
	1061, 1062, 1063, 459, 1064, 1065, 1066, 1067, 219, 220,
	221, 222, 460, 461, 223, 462, 224, 225, 463, 1068,
	226, 227, 228, 229, 230, 231, 1069, 1070, 232, 464,
	465, 466, 1071, 233, 467, 1072, 1057, 1073, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 1074, 243,
	0, 244, 245, 246, 1075, 932, 247, 248, 1076, 1077,
	1079, 1078, 1080, 1081, 1082, 249, 250, 251, 252, 253,
	254, 468, 469, 1083, 255, 1084, 257, 256, 1085, 258,
	1086, 1087, 259, 260, 261, 1088, 262, 1089, 263, 264,
	1090, 470, 265, 266, 268, 271, 267, 272, 273, 274,
	471, 472, 1091, 210, 1092, 0, 0, 0, 0, 275,
	276, 277, 473, 278, 279, 0, 280, 1093, 281, 1094,
	1095, 933, 282, 283, 1096, 284, 474, 1097, 475, 285,
	1098, 286, 287, 288, 289, 476, 477, 478, 935, 290,
	291, 1099, 292, 293, 295, 0, 0, 0, 211, 294,
	296, 303, 1100, 934, 297, 479, 299, 298, 300, 301,
	302, 480, 1101, 481, 1102, 304, 936, 482, 937, 305,
	306, 307, 938, 308, 309, 0, 0, 310, 311, 312,
	313, 1103, 315, 314, 1104, 316, 483, 939, 317, 318,
	940, 1105, 319, 320, 1106, 1107, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 941,
	333, 334, 336, 335, 1108, 212, 942, 1109, 484, 485,
	337, 338, 1110, 339, 340, 341, 1111, 1112, 343, 344,
	345, 1113, 1114, 346, 486, 943, 347, 944, 487, 348,
	342, 349, 350, 351, 352, 353, 354, 1115, 355, 356,
	488, 357, 489, 358, 1116, 359, 0, 360, 361, 362,
	363, 364, 365, 490, 366, 367, 1117, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 1118, 381, 945, 382, 383, 384, 385, 491, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 1119,
	404, 405, 398, 400, 401, 402, 399, 403, 406, 407,
	1120, 408, 388, 389, 409, 946, 410, 492, 411, 412,
	1121, 422, 413, 414, 415, 390, 416, 420, 421, 417,
	418, 419, 493, 1122, 424, 425, 423, 1123, 426, 427,
	428, 429, 430, 269, 431, 270, 432, 1124, 494, 495,
	496, 497, 1125, 439, 1126, 433, 434, 498, 435, 499,
	1127, 436, 437, 438, 0, 440, 441, 1128, 1129, 442,
	443, 444, 445, 447, 1130, 448, 1131, 446, 449, 450,
	451, 500, 501, 502, 1132, 453, 452, 503, 1133, 1134,
	1135, 1136, 454, 455, 504, 456, 457, 458, 0, 0,
	0, 0, 1052, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3014, 213,
	214, 215, 216, 217, 1059, 218, 1060, 1061, 1062, 1063,
	459, 1064, 1065, 1066, 1067, 219, 220, 221, 222, 460,
	461, 223, 462, 224, 225, 463, 1068, 226, 227, 228,
	229, 230, 231, 1069, 1070, 232, 464, 465, 466, 1071,
	233, 467, 1072, 1057, 1073, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 1074, 243, 0, 244, 245,
	246, 1075, 932, 247, 248, 1076, 1077, 1079, 1078, 1080,
	1081, 1082, 249, 250, 251, 252, 253, 254, 468, 469,
	1083, 255, 1084, 257, 256, 1085, 258, 1086, 1087, 259,
	260, 261, 1088, 262, 1089, 263, 264, 1090, 470, 265,
	266, 268, 271, 267, 272, 273, 274, 471, 472, 1091,
	210, 1092, 0, 0, 0, 0, 275, 276, 277, 473,
	278, 279, 0, 280, 1093, 281, 1094, 1095, 933, 282,
	283, 1096, 284, 474, 1097, 475, 285, 1098, 286, 287,
	288, 289, 476, 477, 478, 935, 290, 291, 1099, 292,
	293, 295, 0, 0, 0, 211, 294, 296, 303, 1100,
	934, 297, 479, 299, 298, 300, 301, 302, 480, 1101,
	481, 1102, 304, 936, 482, 937, 305, 306, 307, 938,
	308, 309, 0, 0, 310, 311, 312, 313, 1103, 315,
	314, 1104, 316, 483, 939, 317, 318, 940, 1105, 319,
	320, 1106, 1107, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 332, 330, 941, 333, 334, 336,
	335, 1108, 212, 942, 1109, 484, 485, 337, 338, 1110,
	339, 340, 341, 1111, 1112, 343, 344, 345, 1113, 1114,
	346, 486, 943, 347, 944, 487, 348, 342, 349, 350,
	351, 352, 353, 354, 1115, 355, 356, 488, 357, 489,
	358, 1116, 359, 0, 360, 361, 362, 363, 364, 365,
	490, 366, 367, 1117, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 1118, 381,
	945, 382, 383, 384, 385, 491, 386, 0, 387, 391,
	392, 393, 394, 395, 396, 397, 1119, 404, 405, 398,
	400, 401, 402, 399, 403, 406, 407, 1120, 408, 388,
	389, 409, 946, 410, 492, 411, 412, 1121, 422, 413,
	414, 415, 390, 416, 420, 421, 417, 418, 419, 493,
	1122, 424, 425, 423, 1123, 426, 427, 428, 429, 430,
	269, 431, 270, 432, 1124, 494, 495, 496, 497, 1125,
	439, 1126, 433, 434, 498, 435, 499, 1127, 436, 437,
	438, 0, 440, 441, 1128, 1129, 442, 443, 444, 445,
	447, 1130, 448, 1131, 446, 449, 450, 451, 500, 501,
	502, 1132, 453, 452, 503, 1133, 1134, 1135, 1136, 454,
	455, 504, 456, 457, 458, 1052, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3119, 0, 213, 214, 215, 216, 217, 1059, 218, 1060,
	1061, 1062, 1063, 459, 1064, 1065, 1066, 1067, 219, 220,
	221, 222, 460, 461, 223, 462, 224, 225, 463, 1068,
	226, 227, 228, 229, 230, 231, 1069, 1070, 232, 464,
	465, 466, 1071, 233, 467, 1072, 1057, 1073, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 1074, 243,
	0, 244, 245, 246, 1075, 932, 247, 248, 1076, 1077,
	1079, 1078, 1080, 1081, 1082, 249, 250, 251, 252, 253,
	254, 468, 469, 1083, 255, 1084, 257, 256, 1085, 258,
	1086, 1087, 259, 260, 261, 1088, 262, 1089, 263, 264,
	1090, 470, 265, 266, 268, 271, 267, 272, 273, 274,
	471, 472, 1091, 210, 1092, 0, 0, 0, 0, 275,
	276, 277, 473, 278, 279, 0, 280, 1093, 281, 1094,
	1095, 933, 282, 283, 1096, 284, 474, 1097, 475, 285,
	1098, 286, 287, 288, 289, 476, 477, 478, 935, 290,
	291, 1099, 292, 293, 295, 0, 0, 0, 211, 294,
	296, 303, 1100, 934, 297, 479, 299, 298, 300, 301,
	302, 480, 1101, 481, 1102, 304, 936, 482, 937, 305,
	306, 307, 938, 308, 309, 0, 0, 310, 311, 312,
	313, 1103, 315, 314, 1104, 316, 483, 939, 317, 318,
	940, 1105, 319, 320, 1106, 1107, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 941,
	333, 334, 336, 335, 1108, 212, 942, 1109, 484, 485,
	337, 338, 1110, 339, 340, 341, 1111, 1112, 343, 344,
	345, 1113, 1114, 346, 486, 943, 347, 944, 487, 348,
	342, 349, 350, 351, 352, 353, 354, 1115, 355, 356,
	488, 357, 489, 358, 1116, 359, 0, 360, 361, 362,
	363, 364, 365, 490, 366, 367, 1117, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 1118, 381, 945, 382, 383, 384, 385, 491, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 1119,
	404, 405, 398, 400, 401, 402, 399, 403, 406, 407,
	1120, 408, 388, 389, 409, 946, 410, 492, 411, 412,
	1121, 422, 413, 414, 415, 390, 416, 420, 421, 417,
	418, 419, 493, 1122, 424, 425, 423, 1123, 426, 427,
	428, 429, 430, 269, 431, 270, 432, 1124, 494, 495,
	496, 497, 1125, 439, 1126, 433, 434, 498, 435, 499,
	1127, 436, 437, 438, 0, 440, 441, 1128, 1129, 442,
	443, 444, 445, 447, 1130, 448, 1131, 446, 449, 450,
	451, 500, 501, 502, 1132, 453, 452, 503, 1133, 1134,
	1135, 1136, 454, 455, 504, 456, 457, 458, 1052, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2758, 0, 213, 214, 215, 216, 217,
	1059, 218, 1060, 1061, 1062, 1063, 459, 1064, 1065, 1066,
	1067, 219, 220, 221, 222, 460, 461, 223, 462, 224,
	225, 463, 1068, 226, 227, 228, 229, 230, 231, 1069,
	1070, 232, 464, 465, 466, 1071, 233, 467, 1072, 1057,
	1073, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 1074, 243, 0, 244, 245, 246, 1075, 932, 247,
	248, 1076, 1077, 1079, 1078, 1080, 1081, 1082, 249, 250,
	251, 252, 253, 254, 468, 469, 1083, 255, 1084, 257,
	256, 1085, 258, 1086, 1087, 259, 260, 261, 1088, 262,
	1089, 263, 264, 1090, 470, 265, 266, 268, 271, 267,
	272, 273, 274, 471, 472, 1091, 210, 1092, 0, 0,
	0, 0, 275, 276, 277, 473, 278, 279, 0, 280,
	1093, 281, 1094, 1095, 933, 282, 283, 1096, 284, 474,
	1097, 475, 285, 1098, 286, 287, 288, 289, 476, 477,
	478, 935, 290, 291, 1099, 292, 293, 295, 0, 0,
	0, 211, 294, 296, 303, 1100, 934, 297, 479, 299,
	298, 300, 301, 302, 480, 1101, 481, 1102, 304, 936,
	482, 937, 305, 306, 307, 938, 308, 309, 0, 0,
	310, 311, 312, 313, 1103, 315, 314, 1104, 316, 483,
	939, 317, 318, 940, 1105, 319, 320, 1106, 1107, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	332, 330, 941, 333, 334, 336, 335, 1108, 212, 942,
	1109, 484, 485, 337, 338, 1110, 339, 340, 341, 1111,
	1112, 343, 344, 345, 1113, 1114, 346, 486, 943, 347,
	944, 487, 348, 342, 349, 350, 351, 352, 353, 354,
	1115, 355, 356, 488, 357, 489, 358, 1116, 359, 0,
	360, 361, 362, 363, 364, 365, 490, 366, 367, 1117,
	368, 369, 370, 371, 372, 0, 374, 375, 376, 373,
	377, 378, 379, 380, 1118, 381, 945, 382, 383, 384,
	385, 491, 386, 0, 387, 391, 392, 393, 394, 395,
	396, 397, 1119, 404, 405, 398, 400, 401, 402, 399,
	403, 406, 407, 1120, 408, 388, 389, 409, 946, 410,
	492, 411, 412, 1121, 422, 413, 414, 415, 390, 416,
	420, 421, 417, 418, 419, 493, 1122, 424, 425, 423,
	1123, 426, 427, 428, 429, 430, 269, 431, 270, 432,
	1124, 494, 495, 496, 497, 1125, 439, 1126, 433, 434,
	498, 435, 499, 1127, 436, 437, 438, 0, 440, 441,
	1128, 1129, 442, 443, 444, 445, 447, 1130, 448, 1131,
	446, 449, 450, 451, 500, 501, 502, 1132, 453, 452,
	503, 1133, 1134, 1135, 1136, 454, 455, 504, 456, 457,
	458, 1052, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2750, 0, 213, 214,
	215, 216, 217, 1059, 218, 1060, 1061, 1062, 1063, 459,
	1064, 1065, 1066, 1067, 219, 220, 221, 222, 460, 461,
	223, 462, 224, 225, 463, 1068, 226, 227, 228, 229,
	230, 231, 1069, 1070, 232, 464, 465, 466, 1071, 233,
	467, 1072, 1057, 1073, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 1074, 243, 0, 244, 245, 246,
	1075, 932, 247, 248, 1076, 1077, 1079, 1078, 1080, 1081,
	1082, 249, 250, 251, 252, 253, 254, 468, 469, 1083,
	255, 1084, 257, 256, 1085, 258, 1086, 1087, 259, 260,
	261, 1088, 262, 1089, 263, 264, 1090, 470, 265, 266,
	268, 271, 267, 272, 273, 274, 471, 472, 1091, 210,
	1092, 0, 0, 0, 0, 275, 276, 277, 473, 278,
	279, 0, 280, 1093, 281, 1094, 1095, 933, 282, 283,
	1096, 284, 474, 1097, 475, 285, 1098, 286, 287, 288,
	289, 476, 477, 478, 935, 290, 291, 1099, 292, 293,
	295, 0, 0, 0, 211, 294, 296, 303, 1100, 934,
	297, 479, 299, 298, 300, 301, 302, 480, 1101, 481,
	1102, 304, 936, 482, 937, 305, 306, 307, 938, 308,
	309, 0, 0, 310, 311, 312, 313, 1103, 315, 314,
	1104, 316, 483, 939, 317, 318, 940, 1105, 319, 320,
	1106, 1107, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 941, 333, 334, 336, 335,
	1108, 212, 942, 1109, 484, 485, 337, 338, 1110, 339,
	340, 341, 1111, 1112, 343, 344, 345, 1113, 1114, 346,
	486, 943, 347, 944, 487, 348, 342, 349, 350, 351,
	352, 353, 354, 1115, 355, 356, 488, 357, 489, 358,
	1116, 359, 0, 360, 361, 362, 363, 364, 365, 490,
	366, 367, 1117, 368, 369, 370, 371, 372, 0, 374,
	375, 376, 373, 377, 378, 379, 380, 1118, 381, 945,
	382, 383, 384, 385, 491, 386, 0, 387, 391, 392,
	393, 394, 395, 396, 397, 1119, 404, 405, 398, 400,
	401, 402, 399, 403, 406, 407, 1120, 408, 388, 389,
	409, 946, 410, 492, 411, 412, 1121, 422, 413, 414,
	415, 390, 416, 420, 421, 417, 418, 419, 493, 1122,
	424, 425, 423, 1123, 426, 427, 428, 429, 430, 269,
	431, 270, 432, 1124, 494, 495, 496, 497, 1125, 439,
	1126, 433, 434, 498, 435, 499, 1127, 436, 437, 438,
	0, 440, 441, 1128, 1129, 442, 443, 444, 445, 447,
	1130, 448, 1131, 446, 449, 450, 451, 500, 501, 502,
	1132, 453, 452, 503, 1133, 1134, 1135, 1136, 454, 455,
	504, 456, 457, 458, 1052, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2624,
	0, 213, 214, 215, 216, 217, 1059, 218, 1060, 1061,
	1062, 1063, 459, 1064, 1065, 1066, 1067, 219, 220, 221,
	222, 460, 461, 223, 462, 224, 225, 463, 1068, 226,
	227, 228, 229, 230, 231, 1069, 1070, 232, 464, 465,
	466, 1071, 233, 467, 1072, 1057, 1073, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 1074, 243, 0,
	244, 245, 246, 1075, 932, 247, 248, 1076, 1077, 1079,
	1078, 1080, 1081, 1082, 249, 250, 251, 252, 253, 254,
	468, 469, 1083, 255, 1084, 257, 256, 1085, 258, 1086,
	1087, 259, 260, 261, 1088, 262, 1089, 263, 264, 1090,
	470, 265, 266, 268, 271, 267, 272, 273, 274, 471,
	472, 1091, 210, 1092, 0, 0, 0, 0, 275, 276,
	277, 473, 278, 279, 0, 280, 1093, 281, 1094, 1095,
	933, 282, 283, 1096, 284, 474, 1097, 475, 285, 1098,
	286, 287, 288, 289, 476, 477, 478, 935, 290, 291,
	1099, 292, 293, 295, 0, 0, 0, 211, 294, 296,
	303, 1100, 934, 297, 479, 299, 298, 300, 301, 302,
	480, 1101, 481, 1102, 304, 936, 482, 937, 305, 306,
	307, 938, 308, 309, 0, 0, 310, 311, 312, 313,
	1103, 315, 314, 1104, 316, 483, 939, 317, 318, 940,
	1105, 319, 320, 1106, 1107, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 332, 330, 941, 333,
	334, 336, 335, 1108, 212, 942, 1109, 484, 485, 337,
	338, 1110, 339, 340, 341, 1111, 1112, 343, 344, 345,
	1113, 1114, 346, 486, 943, 347, 944, 487, 348, 342,
	349, 350, 351, 352, 353, 354, 1115, 355, 356, 488,
	357, 489, 358, 1116, 359, 0, 360, 361, 362, 363,
	364, 365, 490, 366, 367, 1117, 368, 369, 370, 371,
	372, 0, 374, 375, 376, 373, 377, 378, 379, 380,
	1118, 381, 945, 382, 383, 384, 385, 491, 386, 0,
	387, 391, 392, 393, 394, 395, 396, 397, 1119, 404,
	405, 398, 400, 401, 402, 399, 403, 406, 407, 1120,
	408, 388, 389, 409, 946, 410, 492, 411, 412, 1121,
	422, 413, 414, 415, 390, 416, 420, 421, 417, 418,
	419, 493, 1122, 424, 425, 423, 1123, 426, 427, 428,
	429, 430, 269, 431, 270, 432, 1124, 494, 495, 496,
	497, 1125, 439, 1126, 433, 434, 498, 435, 499, 1127,
	436, 437, 438, 0, 440, 441, 1128, 1129, 442, 443,
	444, 445, 447, 1130, 448, 1131, 446, 449, 450, 451,
	500, 501, 502, 1132, 453, 452, 503, 1133, 1134, 1135,
	1136, 454, 455, 504, 456, 457, 458, 1052, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2017, 0, 213, 214, 215, 216, 217, 1059,
	218, 1060, 1061, 1062, 1063, 459, 1064, 1065, 1066, 1067,
	219, 220, 221, 222, 460, 461, 223, 462, 224, 225,
	463, 1068, 226, 227, 228, 229, 230, 231, 1069, 1070,
	232, 464, 465, 466, 1071, 233, 467, 1072, 1057, 1073,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	1074, 243, 0, 244, 245, 246, 1075, 932, 247, 248,
	1076, 1077, 1079, 1078, 1080, 1081, 1082, 249, 250, 251,
	252, 253, 254, 468, 469, 1083, 255, 1084, 257, 256,
	1085, 258, 1086, 1087, 259, 260, 261, 1088, 262, 1089,
	263, 264, 1090, 470, 265, 266, 268, 271, 267, 272,
	273, 274, 471, 472, 1091, 210, 1092, 0, 0, 0,
	0, 275, 276, 277, 473, 278, 279, 0, 280, 1093,
	281, 1094, 1095, 933, 282, 283, 1096, 284, 474, 1097,
	475, 285, 1098, 286, 287, 288, 289, 476, 477, 478,
	935, 290, 291, 1099, 292, 293, 295, 0, 0, 0,
	211, 294, 296, 303, 1100, 934, 297, 479, 299, 298,
	300, 301, 302, 480, 1101, 481, 1102, 304, 936, 482,
	937, 305, 306, 307, 938, 308, 309, 0, 0, 310,
	311, 312, 313, 1103, 315, 314, 1104, 316, 483, 939,
	317, 318, 940, 1105, 319, 320, 1106, 1107, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 941, 333, 334, 336, 335, 1108, 212, 942, 1109,
	484, 485, 337, 338, 1110, 339, 340, 341, 1111, 1112,
	343, 344, 345, 1113, 1114, 346, 486, 943, 347, 944,
	487, 348, 342, 349, 350, 351, 352, 353, 354, 1115,
	355, 356, 488, 357, 489, 358, 1116, 359, 0, 360,
	361, 362, 363, 364, 365, 490, 366, 367, 1117, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 1118, 381, 945, 382, 383, 384, 385,
	491, 386, 0, 387, 391, 392, 393, 394, 395, 396,
	397, 1119, 404, 405, 398, 400, 401, 402, 399, 403,
	406, 407, 1120, 408, 388, 389, 409, 946, 410, 492,
	411, 412, 1121, 422, 413, 414, 415, 390, 416, 420,
	421, 417, 418, 419, 493, 1122, 424, 425, 423, 1123,
	426, 427, 428, 429, 430, 269, 431, 270, 432, 1124,
	494, 495, 496, 497, 1125, 439, 1126, 433, 434, 498,
	435, 499, 1127, 436, 437, 438, 0, 440, 441, 1128,
	1129, 442, 443, 444, 445, 447, 1130, 448, 1131, 446,
	449, 450, 451, 500, 501, 502, 1132, 453, 452, 503,
	1133, 1134, 1135, 1136, 454, 455, 504, 456, 457, 458,
	1160, 0, 1052, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1751, 0, 0, 0, 213,
	214, 215, 216, 217, 1059, 218, 1060, 1061, 1062, 1063,
	459, 1064, 1065, 1066, 1067, 219, 220, 221, 222, 460,
	461, 223, 462, 224, 225, 463, 1068, 226, 227, 228,
	229, 230, 231, 1069, 1070, 232, 464, 465, 466, 1071,
	233, 467, 1072, 1057, 1073, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 1074, 243, 0, 244, 245,
	246, 1075, 932, 247, 248, 1076, 1077, 1079, 1078, 1080,
	1081, 1082, 249, 250, 251, 252, 253, 254, 468, 469,
	1083, 255, 1084, 257, 256, 1085, 258, 1086, 1087, 259,
	260, 261, 1088, 262, 1089, 263, 264, 1090, 470, 265,
	266, 268, 271, 267, 272, 273, 274, 471, 472, 1091,
	210, 1092, 0, 0, 0, 0, 275, 276, 277, 473,
	278, 279, 0, 280, 1093, 281, 1094, 1095, 933, 282,
	283, 1096, 284, 474, 1097, 475, 285, 1098, 286, 287,
	288, 289, 476, 477, 478, 935, 290, 291, 1099, 292,
	293, 295, 0, 0, 0, 211, 294, 296, 303, 1100,
	934, 297, 479, 299, 298, 300, 301, 302, 480, 1101,
	481, 1102, 304, 936, 482, 937, 305, 306, 307, 938,
	308, 309, 0, 0, 310, 311, 312, 313, 1103, 315,
	314, 1104, 316, 483, 939, 317, 318, 940, 1105, 319,
	320, 1106, 1107, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 332, 330, 941, 333, 334, 336,
	335, 1108, 212, 942, 1109, 484, 485, 337, 338, 1110,
	339, 340, 341, 1111, 1112, 343, 344, 345, 1113, 1114,
	346, 486, 943, 347, 944, 487, 348, 342, 349, 350,
	351, 352, 353, 354, 1115, 355, 356, 488, 357, 489,
	358, 1116, 359, 0, 360, 361, 362, 363, 364, 365,
	490, 366, 367, 1117, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 1118, 381,
	945, 382, 383, 384, 385, 491, 386, 0, 387, 391,
	392, 393, 394, 395, 396, 397, 1119, 404, 405, 398,
	400, 401, 402, 399, 403, 406, 407, 1120, 408, 388,
	389, 409, 946, 410, 492, 411, 412, 1121, 422, 413,
	414, 415, 390, 416, 420, 421, 417, 418, 419, 493,
	1122, 424, 425, 423, 1123, 426, 427, 428, 429, 430,
	269, 431, 270, 432, 1124, 494, 495, 496, 497, 1125,
	439, 1126, 433, 434, 498, 435, 499, 1127, 436, 437,
	438, 0, 440, 441, 1128, 1129, 442, 443, 444, 445,
	447, 1130, 448, 1131, 446, 449, 450, 451, 500, 501,
	502, 1132, 453, 452, 503, 1133, 1134, 1135, 1136, 454,
	455, 504, 456, 457, 458, 1049, 0, 1052, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 1059,
	218, 1060, 1061, 1062, 1063, 459, 1064, 1065, 1066, 1067,
	219, 220, 221, 222, 460, 461, 223, 462, 224, 225,
	463, 1068, 226, 227, 228, 229, 230, 231, 1069, 1070,
	232, 464, 465, 466, 1071, 233, 467, 1072, 1057, 1073,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	1074, 243, 0, 244, 245, 246, 1075, 932, 247, 248,
	1076, 1077, 1079, 1078, 1080, 1081, 1082, 249, 250, 251,
	252, 253, 254, 468, 469, 1083, 255, 1084, 257, 256,
	1085, 258, 1086, 1087, 259, 260, 261, 1088, 262, 1089,
	263, 264, 1090, 470, 265, 266, 268, 271, 267, 272,
	273, 274, 471, 472, 1091, 210, 1092, 0, 0, 0,
	0, 275, 276, 277, 473, 278, 279, 0, 280, 1093,
	281, 1094, 1095, 933, 282, 283, 1096, 284, 474, 1097,
	475, 285, 1098, 286, 287, 288, 289, 476, 477, 478,
	935, 290, 291, 1099, 292, 293, 295, 0, 0, 0,
	211, 294, 296, 303, 1100, 934, 297, 479, 299, 298,
	300, 301, 302, 480, 1101, 481, 1102, 304, 936, 482,
	937, 305, 306, 307, 938, 308, 309, 0, 0, 310,
	311, 312, 313, 1103, 315, 314, 1104, 316, 483, 939,
	317, 318, 940, 1105, 319, 320, 1106, 1107, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 941, 333, 334, 336, 335, 1108, 212, 942, 1109,
	484, 485, 337, 338, 1110, 339, 340, 341, 1111, 1112,
	343, 344, 345, 1113, 1114, 346, 486, 943, 347, 944,
	487, 348, 342, 349, 350, 351, 352, 353, 354, 1115,
	355, 356, 488, 357, 489, 358, 1116, 359, 0, 360,
	361, 362, 363, 364, 365, 490, 366, 367, 1117, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 1118, 381, 945, 382, 383, 384, 385,
	491, 386, 0, 387, 391, 392, 393, 394, 395, 396,
	397, 1119, 404, 405, 398, 400, 401, 402, 399, 403,
	406, 407, 1120, 408, 388, 389, 409, 946, 410, 492,
	411, 412, 1121, 422, 413, 414, 415, 390, 416, 420,
	421, 417, 418, 419, 493, 1122, 424, 425, 423, 1123,
	426, 427, 428, 429, 430, 269, 431, 270, 432, 1124,
	494, 495, 496, 497, 1125, 439, 1126, 433, 434, 498,
	435, 499, 1127, 436, 437, 438, 0, 440, 441, 1128,
	1129, 442, 443, 444, 445, 447, 1130, 448, 1131, 446,
	449, 450, 451, 500, 501, 502, 1132, 453, 452, 503,
	1133, 1134, 1135, 1136, 454, 455, 504, 456, 457, 458,
	1052, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 1059, 218, 1060, 1061, 1062, 1063, 459, 1064,
	1065, 1066, 1067, 219, 220, 221, 222, 460, 461, 223,
	462, 224, 225, 463, 1068, 226, 227, 228, 229, 230,
	231, 1069, 1070, 232, 464, 465, 466, 1071, 233, 467,
	1072, 1057, 1073, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 1074, 243, 0, 244, 245, 246, 1075,
	932, 247, 248, 1076, 1077, 1079, 1078, 1080, 1081, 1082,
	249, 250, 251, 252, 253, 254, 468, 469, 1083, 255,
	1084, 257, 256, 1085, 258, 1086, 1087, 259, 260, 261,
	1088, 262, 1089, 263, 264, 1090, 470, 265, 266, 268,
	271, 267, 272, 273, 274, 471, 472, 1091, 210, 1092,
	0, 0, 0, 0, 275, 276, 277, 473, 278, 279,
	0, 280, 1093, 281, 1094, 1095, 933, 282, 283, 1096,
	284, 474, 1097, 475, 285, 1098, 286, 287, 288, 289,
	476, 477, 478, 935, 290, 291, 1099, 292, 293, 295,
	0, 0, 0, 211, 294, 296, 303, 1100, 934, 297,
	479, 299, 298, 300, 301, 302, 480, 1101, 481, 1102,
	304, 936, 482, 937, 305, 306, 307, 938, 308, 309,
	0, 0, 310, 311, 312, 313, 1103, 315, 314, 1104,
	316, 483, 939, 317, 318, 940, 1105, 319, 320, 1106,
	1107, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 332, 330, 941, 333, 334, 336, 335, 1108,
	212, 942, 1109, 484, 485, 337, 338, 1110, 339, 340,
	341, 1111, 1112, 343, 344, 345, 1113, 1114, 346, 486,
	943, 347, 944, 487, 348, 342, 349, 350, 351, 352,
	353, 354, 1115, 355, 356, 488, 357, 489, 358, 1116,
	359, 0, 360, 361, 362, 363, 364, 365, 490, 366,
	367, 1117, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 1118, 381, 945, 382,
	383, 384, 385, 491, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 1119, 404, 405, 398, 400, 401,
	402, 399, 403, 406, 407, 1120, 408, 388, 389, 409,
	946, 410, 492, 411, 412, 1121, 422, 413, 414, 415,
	390, 416, 420, 421, 417, 418, 419, 493, 1122, 424,
	425, 423, 1123, 426, 427, 428, 429, 430, 269, 431,
	270, 432, 1124, 494, 495, 496, 497, 1125, 439, 1126,
	433, 434, 498, 435, 499, 1127, 436, 437, 438, 0,
	440, 441, 1128, 1129, 442, 443, 444, 445, 447, 1130,
	448, 1131, 446, 449, 450, 451, 500, 501, 502, 1132,
	453, 452, 503, 1133, 1134, 1135, 1136, 454, 455, 504,
	456, 457, 458, 1993, 0, 874, 831, 832, 833, 829,
	830, 843, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 1990, 218, 0,
	0, 0, 0, 923, 848, 0, 0, 0, 219, 220,
	221, 222, 460, 889, 868, 900, 858, 899, 898, 0,
	226, 860, 859, 229, 230, 231, 850, 922, 232, 958,
	959, 466, 0, 233, 929, 0, 912, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 932, 247, 248, 915, 913,
	914, 919, 917, 916, 918, 249, 250, 251, 252, 903,
	254, 896, 895, 820, 255, 0, 257, 256, 0, 258,
	1991, 0, 259, 894, 261, 0, 262, 0, 263, 264,
	0, 826, 265, 266, 268, 271, 267, 272, 273, 274,
	949, 950, 839, 210, 0, 0, 0, 0, 0, 275,
	276, 277, 893, 891, 892, 0, 280, 0, 281, 0,
	0, 933, 282, 283, 0, 284, 956, 0, 849, 285,
	0, 286, 287, 288, 289, 924, 925, 928, 935, 290,
	291, 0, 292, 293, 870, 0, 0, 0, 211, 294,
	296, 303, 0, 934, 297, 882, 873, 884, 886, 887,
	888, 883, 0, 875, 0, 304, 936, 926, 937, 305,
	306, 307, 938, 908, 909, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 957, 939, 317, 318,
	940, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 862, 330, 941,
	333, 334, 336, 335, 817, 212, 942, 840, 927, 897,
	337, 338, 0, 871, 340, 872, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 943, 347, 944, 951, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	952, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 890, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 945, 382, 383, 384, 385, 827, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 0,
	404, 405, 863, 864, 866, 867, 399, 403, 406, 407,
	920, 408, 388, 389, 409, 946, 410, 885, 865, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 931, 417,
	418, 419, 953, 0, 424, 425, 423, 0, 426, 427,
	428, 429, 430, 269, 431, 270, 861, 0, 904, 905,
	906, 907, 0, 439, 0, 433, 434, 954, 435, 955,
	838, 436, 437, 438, 0, 440, 441, 0, 821, 442,
	443, 444, 445, 447, 921, 448, 0, 869, 449, 450,
	451, 500, 901, 948, 1989, 453, 452, 503, 0, 0,
	0, 0, 454, 455, 504, 456, 457, 458, 818, 0,
	0, 0, 0, 0, 0, 0, 816, 0, 0, 0,
	0, 814, 815, 1992, 0, 0, 0, 0, 0, 0,
	844, 1988, 0, 0, 807, 842, 874, 831, 832, 833,
	829, 830, 843, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 923, 848, 0, 0, 0, 219,
	220, 221, 222, 460, 889, 868, 900, 858, 899, 898,
	0, 226, 860, 859, 229, 230, 231, 850, 922, 232,
	958, 959, 466, 0, 233, 929, 0, 912, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 932, 247, 248, 915,
	913, 914, 919, 917, 916, 918, 249, 250, 251, 252,
	903, 254, 896, 895, 820, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 894, 261, 0, 262, 0, 263,
	264, 0, 826, 265, 266, 268, 271, 267, 272, 273,
	274, 949, 950, 839, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 893, 891, 892, 0, 280, 0, 281,
	0, 0, 933, 282, 283, 0, 284, 956, 0, 849,
	285, 0, 286, 287, 288, 289, 924, 925, 928, 935,
	290, 291, 0, 292, 293, 870, 0, 0, 0, 211,
	294, 296, 303, 0, 934, 297, 882, 873, 884, 886,
	887, 888, 883, 0, 875, 0, 304, 936, 926, 937,
	305, 306, 307, 938, 908, 909, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 957, 939, 317,
	318, 940, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 862, 330,
	941, 333, 334, 336, 335, 817, 212, 942, 840, 927,
	897, 337, 338, 0, 871, 340, 872, 0, 0, 343,
	344, 345, 0, 0, 346, 486, 943, 347, 944, 951,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 952, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 890, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 945, 382, 383, 384, 385, 827,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	176, 404, 405, 863, 864, 866, 867, 399, 403, 406,
	407, 920, 408, 388, 389, 409, 946, 410, 885, 865,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 931,
	417, 418, 419, 953, 0, 424, 425, 423, 178, 426,
	427, 428, 429, 430, 269, 431, 270, 861, 0, 904,
	905, 906, 907, 0, 439, 0, 433, 434, 954, 435,
	955, 838, 436, 437, 438, 0, 440, 441, 0, 821,
	442, 443, 444, 445, 447, 921, 448, 0, 869, 449,
	450, 451, 1299, 901, 948, 0, 453, 452, 503, 0,
	0, 0, 170, 454, 455, 504, 456, 457, 458, 818,
	171, 0, 0, 0, 0, 0, 0, 816, 0, 0,
	0, 0, 814, 815, 874, 831, 832, 833, 829, 830,
	843, 1488, 1486, 0, 0, 0, 842, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 923, 848, 0, 0, 0, 219, 220, 221,
	222, 460, 889, 868, 900, 858, 899, 898, 0, 226,
	860, 859, 229, 230, 231, 850, 922, 232, 958, 959,
	466, 0, 233, 929, 0, 912, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 932, 247, 248, 915, 913, 914,
	919, 917, 916, 918, 249, 250, 251, 252, 903, 254,
	896, 895, 820, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 894, 261, 0, 262, 0, 263, 264, 0,
	826, 265, 266, 268, 271, 267, 272, 273, 274, 949,
	950, 839, 210, 0, 0, 0, 0, 0, 275, 276,
	277, 893, 891, 892, 0, 280, 0, 281, 0, 0,
	933, 282, 283, 0, 284, 956, 0, 849, 285, 0,
	286, 287, 288, 289, 924, 925, 928, 935, 290, 291,
	0, 292, 293, 870, 0, 0, 0, 211, 294, 296,
	303, 0, 934, 297, 882, 873, 884, 886, 887, 888,
	883, 0, 875, 0, 304, 936, 926, 937, 305, 306,
	307, 938, 908, 909, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 957, 939, 317, 318, 940,
	0, 319, 320, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 862, 330, 941, 333,
	334, 336, 335, 817, 212, 942, 840, 927, 897, 337,
	338, 0, 871, 340, 872, 0, 0, 343, 344, 345,
	0, 0, 346, 486, 943, 347, 944, 951, 348, 342,
	349, 350, 351, 352, 353, 354, 0, 355, 356, 952,
	357, 489, 358, 0, 359, 0, 360, 361, 362, 363,
	364, 365, 890, 366, 367, 0, 368, 369, 370, 371,
	372, 0, 374, 375, 376, 373, 377, 378, 379, 380,
	0, 381, 945, 382, 383, 384, 385, 827, 386, 0,
	387, 391, 392, 393, 394, 395, 396, 397, 176, 404,
	405, 863, 864, 866, 867, 399, 403, 406, 407, 920,
	408, 388, 389, 409, 946, 410, 885, 865, 412, 0,
	422, 413, 414, 415, 390, 416, 420, 931, 417, 418,
	419, 953, 0, 424, 425, 423, 178, 426, 427, 428,
	429, 430, 269, 431, 270, 861, 0, 904, 905, 906,
	907, 0, 439, 0, 433, 434, 954, 435, 955, 838,
	436, 437, 438, 0, 440, 441, 0, 821, 442, 443,
	444, 445, 447, 921, 448, 0, 869, 449, 450, 451,
	1299, 901, 948, 0, 453, 452, 503, 0, 0, 0,
	170, 454, 455, 504, 456, 457, 458, 818, 171, 0,
	0, 0, 0, 0, 0, 816, 0, 0, 0, 0,
	814, 815, 874, 831, 832, 833, 829, 830, 843, 1488,
	2390, 0, 0, 0, 842, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	923, 848, 0, 0, 0, 219, 220, 221, 222, 460,
	889, 868, 900, 858, 899, 898, 0, 226, 860, 859,
	229, 230, 231, 850, 922, 232, 958, 959, 466, 0,
	233, 929, 0, 912, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 932, 247, 248, 915, 913, 914, 919, 917,
	916, 918, 249, 250, 251, 252, 903, 254, 896, 895,
	820, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	894, 261, 0, 262, 0, 263, 264, 0, 826, 265,
	266, 268, 271, 267, 272, 273, 274, 949, 950, 839,
	210, 0, 0, 0, 0, 0, 275, 276, 277, 893,
	891, 892, 0, 280, 0, 281, 0, 0, 933, 282,
	283, 0, 284, 956, 0, 849, 285, 0, 286, 287,
	288, 289, 924, 925, 928, 935, 290, 291, 0, 292,
	293, 870, 0, 0, 0, 211, 294, 296, 303, 0,
	934, 297, 882, 873, 884, 886, 887, 888, 883, 0,
	875, 0, 304, 936, 926, 937, 305, 306, 307, 938,
	908, 909, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 957, 939, 317, 318, 940, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 862, 330, 941, 333, 334, 336,
	335, 817, 212, 942, 840, 927, 897, 337, 338, 0,
	871, 340, 872, 0, 0, 343, 344, 345, 0, 0,
	346, 486, 943, 347, 944, 951, 348, 342, 349, 350,
	351, 352, 353, 354, 0, 355, 356, 952, 357, 489,
	358, 0, 359, 0, 360, 361, 362, 363, 364, 365,
	890, 366, 367, 0, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 0, 381,
	945, 382, 383, 384, 385, 827, 386, 0, 387, 391,
	392, 393, 394, 395, 396, 397, 176, 404, 405, 863,
	864, 866, 867, 399, 403, 406, 407, 920, 408, 388,
	389, 409, 946, 410, 885, 865, 412, 0, 422, 413,
	414, 415, 390, 416, 420, 931, 417, 418, 419, 953,
	0, 424, 425, 423, 178, 426, 427, 428, 429, 430,
	269, 431, 270, 861, 0, 904, 905, 906, 907, 0,
	439, 0, 433, 434, 954, 435, 955, 838, 436, 437,
	438, 0, 440, 441, 0, 821, 442, 443, 444, 445,
	447, 921, 448, 0, 869, 449, 450, 451, 1299, 901,
	948, 0, 453, 452, 503, 0, 0, 0, 170, 454,
	455, 504, 456, 457, 458, 818, 171, 0, 0, 0,
	0, 0, 0, 816, 0, 0, 0, 0, 814, 815,
	874, 831, 832, 833, 829, 830, 843, 1488, 1486, 0,
	0, 0, 842, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 923, 848,
	0, 0, 0, 219, 220, 221, 222, 460, 889, 868,
	900, 858, 899, 898, 2077, 226, 860, 859, 229, 230,
	231, 850, 922, 232, 958, 959, 466, 0, 233, 929,
	0, 912, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	932, 247, 248, 915, 913, 914, 919, 917, 916, 918,
	249, 250, 251, 252, 903, 254, 896, 895, 820, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 894, 261,
	0, 262, 0, 263, 264, 0, 826, 265, 266, 268,
	271, 267, 272, 273, 274, 949, 950, 839, 210, 0,
	0, 0, 0, 0, 275, 276, 277, 893, 891, 892,
	0, 280, 0, 281, 0, 2082, 933, 282, 283, 0,
	284, 956, 0, 849, 285, 0, 286, 287, 288, 289,
	924, 925, 928, 935, 290, 291, 0, 292, 293, 870,
	0, 0, 0, 211, 294, 296, 303, 0, 934, 297,
	882, 873, 884, 886, 887, 888, 883, 0, 875, 0,
	304, 936, 926, 937, 305, 306, 307, 938, 908, 909,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 2078,
	316, 957, 939, 317, 318, 940, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 862, 330, 941, 333, 334, 336, 335, 817,
	212, 942, 840, 927, 897, 337, 338, 0, 871, 340,
	872, 0, 0, 343, 344, 345, 0, 0, 346, 486,
	943, 347, 944, 951, 348, 342, 349, 350, 351, 352,
	353, 354, 0, 355, 356, 952, 357, 489, 358, 0,
	359, 0, 360, 361, 362, 363, 364, 365, 890, 366,
	367, 0, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 0, 381, 945, 382,
	383, 384, 385, 827, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 0, 404, 405, 863, 864, 866,
	867, 399, 403, 406, 407, 920, 408, 388, 389, 409,
	946, 410, 885, 865, 412, 0, 422, 413, 414, 415,
	390, 416, 420, 931, 417, 418, 419, 953, 0, 424,
	425, 423, 0, 426, 427, 428, 429, 430, 269, 431,
	270, 861, 0, 904, 905, 906, 907, 0, 439, 2079,
	433, 434, 954, 435, 955, 838, 436, 437, 438, 0,
	440, 441, 0, 821, 442, 443, 444, 445, 447, 921,
	448, 0, 869, 449, 450, 451, 500, 901, 948, 0,
	453, 452, 503, 0, 0, 0, 0, 454, 455, 504,
	456, 457, 458, 818, 0, 0, 0, 0, 0, 0,
	0, 816, 0, 0, 0, 0, 814, 815, 0, 0,
	0, 0, 0, 0, 0, 844, 0, 0, 0, 810,
	842, 874, 831, 832, 833, 829, 830, 843, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 923,
	848, 0, 0, 0, 219, 220, 221, 222, 460, 889,
	868, 900, 858, 899, 898, 0, 226, 860, 859, 229,
	230, 231, 850, 922, 232, 958, 959, 466, 0, 233,
	929, 0, 912, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 932, 247, 248, 915, 913, 914, 919, 917, 916,
	918, 249, 250, 251, 252, 903, 254, 896, 895, 820,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 894,
	261, 0, 262, 0, 263, 264, 0, 826, 265, 266,
	268, 271, 267, 272, 273, 274, 949, 950, 839, 210,
	0, 0, 0, 0, 0, 275, 276, 277, 893, 891,
	892, 0, 280, 0, 281, 0, 0, 933, 282, 283,
	0, 284, 956, 0, 849, 285, 0, 286, 287, 288,
	289, 924, 925, 928, 935, 290, 291, 0, 292, 293,
	870, 0, 0, 0, 211, 294, 296, 303, 0, 934,
	297, 882, 873, 884, 886, 887, 888, 883, 0, 875,
	0, 304, 936, 926, 937, 305, 306, 307, 938, 908,
	909, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 957, 939, 317, 318, 940, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 862, 330, 941, 333, 334, 336, 335,
	817, 212, 942, 840, 927, 897, 337, 338, 0, 871,
	340, 872, 822, 0, 343, 344, 345, 0, 0, 346,
	486, 943, 347, 944, 951, 348, 342, 349, 350, 351,
	352, 353, 354, 0, 355, 356, 952, 357, 489, 358,
	0, 359, 0, 360, 361, 362, 363, 364, 365, 890,
	366, 367, 0, 368, 369, 370, 371, 372, 0, 374,
	375, 376, 373, 377, 378, 379, 380, 0, 381, 945,
	382, 383, 384, 385, 827, 386, 0, 387, 391, 392,
	393, 394, 395, 396, 397, 0, 404, 405, 863, 864,
	866, 867, 399, 403, 406, 407, 920, 408, 388, 389,
	409, 946, 410, 885, 865, 412, 0, 422, 413, 414,
	415, 390, 416, 420, 931, 417, 418, 419, 953, 0,
	424, 425, 423, 0, 426, 427, 428, 429, 430, 269,
	431, 270, 861, 0, 904, 905, 906, 907, 0, 439,
	0, 433, 434, 954, 435, 955, 838, 436, 437, 438,
	0, 440, 441, 0, 821, 442, 443, 444, 445, 447,
	921, 448, 0, 869, 449, 450, 451, 500, 901, 948,
	0, 453, 452, 503, 0, 0, 0, 0, 454, 455,
	504, 456, 457, 458, 818, 0, 0, 0, 0, 0,
	0, 0, 816, 0, 0, 0, 0, 814, 815, 874,
	831, 832, 833, 829, 830, 843, 844, 0, 0, 0,
	0, 842, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 923, 848, 0,
	0, 0, 219, 220, 221, 222, 460, 889, 868, 900,
	858, 899, 898, 0, 226, 860, 859, 229, 230, 231,
	850, 922, 232, 958, 959, 466, 0, 233, 929, 0,
	912, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 3306, 246, 0, 932,
	247, 248, 915, 913, 914, 919, 917, 916, 918, 249,
	250, 251, 252, 903, 254, 896, 895, 820, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 894, 261, 0,
	262, 0, 263, 264, 0, 826, 265, 266, 268, 271,
	267, 272, 273, 274, 949, 950, 839, 210, 0, 0,
	0, 0, 0, 275, 276, 277, 893, 891, 892, 0,
	280, 0, 281, 0, 0, 933, 282, 283, 0, 284,
	956, 0, 849, 285, 0, 286, 287, 288, 289, 924,
	925, 928, 935, 290, 291, 0, 292, 293, 870, 0,
	0, 0, 211, 294, 296, 303, 0, 934, 297, 882,
	873, 884, 886, 887, 888, 883, 0, 875, 0, 304,
	936, 926, 937, 305, 306, 307, 938, 908, 909, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	957, 939, 317, 318, 940, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 862, 330, 941, 333, 334, 336, 335, 817, 212,
	942, 840, 927, 897, 337, 338, 0, 871, 340, 872,
	822, 0, 343, 344, 345, 0, 0, 346, 486, 943,
	347, 944, 951, 348, 342, 349, 350, 351, 352, 353,
	354, 0, 355, 356, 952, 357, 489, 358, 0, 359,
	0, 360, 361, 362, 363, 364, 365, 890, 366, 367,
	0, 368, 369, 370, 371, 372, 0, 374, 375, 376,
	373, 377, 378, 379, 380, 0, 381, 945, 382, 383,
	384, 385, 827, 386, 0, 387, 391, 392, 393, 394,
	395, 396, 397, 0, 404, 405, 863, 864, 866, 867,
	399, 403, 406, 407, 920, 408, 388, 389, 409, 946,
	410, 885, 865, 412, 0, 422, 413, 414, 415, 390,
	416, 420, 931, 417, 418, 419, 953, 0, 424, 425,
	423, 0, 426, 427, 428, 429, 430, 269, 431, 270,
	861, 0, 904, 905, 906, 907, 0, 439, 0, 433,
	434, 954, 435, 955, 838, 436, 437, 438, 0, 440,
	441, 0, 821, 442, 443, 444, 445, 447, 921, 448,
	0, 869, 449, 450, 451, 500, 901, 948, 0, 453,
	452, 503, 0, 0, 0, 0, 454, 455, 504, 456,
	457, 458, 818, 0, 0, 0, 0, 0, 0, 0,
	816, 0, 0, 0, 0, 814, 815, 874, 831, 832,
	833, 829, 830, 843, 844, 0, 0, 0, 0, 842,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 923, 848, 0, 0, 0,
	219, 220, 221, 222, 460, 889, 868, 900, 858, 899,
	898, 0, 226, 860, 859, 229, 230, 231, 850, 922,
	232, 958, 959, 466, 0, 233, 929, 0, 912, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 3175, 246, 0, 932, 247, 248,
	915, 913, 914, 919, 917, 916, 918, 249, 250, 251,
	252, 903, 254, 896, 895, 820, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 894, 261, 0, 262, 0,
	263, 264, 0, 826, 265, 266, 268, 271, 267, 272,
	273, 274, 949, 950, 839, 210, 0, 0, 0, 0,
	0, 275, 276, 277, 893, 891, 892, 0, 280, 0,
	281, 0, 0, 933, 282, 283, 0, 284, 956, 0,
	849, 285, 0, 286, 287, 288, 289, 924, 925, 928,
	935, 290, 291, 0, 292, 293, 870, 0, 0, 0,
	211, 294, 296, 303, 0, 934, 297, 882, 873, 884,
	886, 887, 888, 883, 0, 875, 0, 304, 936, 926,
	937, 305, 306, 307, 938, 908, 909, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 957, 939,
	317, 318, 940, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 862,
	330, 941, 333, 334, 336, 335, 817, 212, 942, 840,
	927, 897, 337, 338, 0, 871, 340, 872, 822, 0,
	343, 344, 345, 0, 0, 346, 486, 943, 347, 944,
	951, 348, 342, 349, 350, 351, 352, 353, 354, 0,
	355, 356, 952, 357, 489, 358, 0, 359, 0, 360,
	361, 362, 363, 364, 365, 890, 366, 367, 0, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 0, 381, 945, 382, 383, 384, 385,
	827, 386, 0, 387, 391, 392, 393, 394, 395, 396,
	397, 0, 404, 405, 863, 864, 866, 867, 399, 403,
	406, 407, 920, 408, 388, 389, 409, 946, 410, 885,
	865, 412, 0, 422, 413, 414, 415, 390, 416, 420,
	931, 417, 418, 419, 953, 0, 424, 425, 423, 0,
	426, 427, 428, 429, 430, 269, 431, 270, 861, 0,
	904, 905, 906, 907, 0, 439, 0, 433, 434, 954,
	435, 955, 838, 436, 437, 438, 0, 440, 441, 0,
	821, 442, 443, 444, 445, 447, 921, 448, 0, 869,
	449, 450, 451, 500, 901, 948, 0, 453, 452, 503,
	0, 0, 0, 0, 454, 455, 504, 456, 457, 458,
	818, 0, 0, 0, 0, 0, 0, 0, 816, 0,
	0, 0, 0, 814, 815, 874, 831, 832, 833, 829,
	830, 843, 844, 0, 0, 0, 0, 842, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 923, 848, 0, 0, 0, 219, 220,
	221, 222, 460, 889, 868, 900, 858, 899, 898, 0,
	226, 860, 859, 229, 230, 231, 850, 922, 232, 958,
	959, 466, 0, 233, 929, 0, 912, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 932, 247, 248, 915, 913,
	914, 919, 917, 916, 918, 249, 250, 251, 252, 903,
	254, 896, 895, 820, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 894, 261, 0, 262, 0, 263, 264,
	0, 826, 265, 266, 268, 271, 267, 272, 273, 274,
	949, 950, 839, 210, 0, 0, 0, 0, 0, 275,
	276, 277, 893, 891, 892, 0, 280, 0, 281, 0,
	0, 933, 282, 283, 0, 284, 956, 0, 849, 285,
	0, 286, 287, 288, 289, 924, 925, 928, 935, 290,
	291, 0, 292, 293, 870, 0, 0, 0, 211, 294,
	296, 303, 0, 934, 297, 882, 873, 884, 886, 887,
	888, 883, 0, 875, 0, 304, 936, 926, 937, 305,
	306, 307, 938, 908, 909, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 957, 939, 317, 318,
	940, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 862, 330, 941,
	333, 334, 336, 335, 817, 2924, 942, 840, 927, 897,
	337, 338, 0, 871, 340, 872, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 943, 347, 944, 951, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	952, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 890, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 945, 382, 383, 384, 385, 827, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 0,
	404, 405, 863, 864, 866, 867, 399, 403, 406, 407,
	920, 408, 388, 389, 409, 946, 410, 885, 865, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 931, 417,
	418, 419, 953, 0, 424, 425, 423, 0, 426, 427,
	428, 429, 430, 269, 431, 270, 861, 0, 904, 905,
	906, 907, 0, 439, 0, 433, 434, 954, 435, 955,
	838, 436, 437, 438, 0, 440, 441, 0, 821, 442,
	443, 444, 445, 447, 921, 448, 0, 869, 449, 450,
	451, 500, 901, 948, 0, 453, 452, 503, 0, 0,
	0, 0, 454, 455, 504, 456, 457, 458, 818, 0,
	0, 0, 0, 0, 0, 0, 816, 0, 0, 0,
	0, 814, 815, 1548, 0, 0, 0, 0, 0, 0,
	844, 0, 0, 0, 0, 842, 874, 831, 832, 833,
	829, 830, 843, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 923, 848, 0, 0, 0, 219,
	220, 221, 222, 460, 889, 868, 900, 858, 899, 898,
	0, 226, 860, 859, 229, 230, 231, 850, 922, 232,
	958, 959, 466, 0, 233, 929, 0, 912, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 932, 247, 248, 915,
	913, 914, 919, 917, 916, 918, 249, 250, 251, 252,
	903, 254, 896, 895, 820, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 894, 261, 0, 262, 0, 263,
	264, 0, 826, 265, 266, 268, 271, 267, 272, 273,
	274, 949, 950, 839, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 893, 891, 892, 0, 280, 0, 281,
	0, 0, 933, 282, 283, 0, 284, 956, 0, 849,
	285, 0, 286, 287, 288, 289, 924, 925, 928, 935,
	290, 291, 0, 292, 293, 870, 0, 0, 0, 211,
	294, 296, 303, 0, 934, 297, 882, 873, 884, 886,
	887, 888, 883, 0, 875, 0, 304, 936, 926, 937,
	305, 306, 307, 938, 908, 909, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 957, 939, 317,
	318, 940, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 862, 330,
	941, 333, 334, 336, 335, 817, 212, 942, 840, 927,
	897, 337, 338, 0, 871, 340, 872, 0, 0, 343,
	344, 345, 0, 0, 346, 486, 943, 347, 944, 951,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 952, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 890, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 945, 382, 383, 384, 385, 827,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	0, 404, 405, 863, 864, 866, 867, 399, 403, 406,
	407, 920, 408, 388, 389, 409, 946, 410, 885, 865,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 931,
	417, 418, 419, 953, 0, 424, 425, 423, 0, 426,
	427, 428, 429, 430, 269, 431, 270, 861, 0, 904,
	905, 906, 907, 0, 439, 0, 433, 434, 954, 435,
	955, 838, 436, 437, 438, 0, 440, 441, 0, 821,
	442, 443, 444, 445, 447, 921, 448, 0, 869, 449,
	450, 451, 500, 901, 948, 2737, 453, 452, 503, 0,
	0, 0, 0, 454, 455, 504, 456, 457, 458, 818,
	0, 0, 0, 0, 0, 0, 0, 816, 0, 0,
	0, 0, 814, 815, 874, 831, 832, 833, 829, 830,
	843, 844, 0, 0, 0, 0, 842, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 923, 848, 0, 0, 0, 219, 220, 221,
	222, 460, 889, 868, 900, 858, 899, 898, 0, 226,
	860, 859, 229, 230, 231, 850, 922, 232, 958, 959,
	466, 0, 233, 929, 0, 912, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 932, 247, 248, 915, 913, 914,
	919, 917, 916, 918, 249, 250, 251, 252, 903, 254,
	896, 895, 820, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 894, 261, 0, 262, 0, 263, 264, 0,
	826, 265, 266, 268, 271, 267, 272, 273, 274, 949,
	950, 839, 210, 0, 0, 0, 0, 0, 275, 276,
	277, 893, 891, 892, 0, 280, 0, 281, 0, 0,
	933, 282, 283, 0, 284, 956, 0, 849, 285, 0,
	286, 287, 288, 289, 924, 925, 928, 935, 290, 291,
	0, 292, 293, 870, 0, 0, 0, 1907, 294, 296,
	303, 0, 934, 297, 882, 873, 884, 886, 887, 888,
	883, 0, 875, 0, 304, 936, 926, 937, 305, 306,
	307, 938, 908, 909, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 957, 939, 317, 318, 940,
	0, 319, 320, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 862, 330, 941, 333,
	334, 336, 335, 817, 212, 942, 840, 927, 897, 337,
	338, 0, 871, 340, 872, 0, 0, 343, 344, 345,
	0, 0, 346, 486, 943, 347, 944, 951, 348, 342,
	349, 350, 351, 352, 353, 354, 0, 355, 356, 952,
	357, 489, 358, 1906, 359, 0, 360, 361, 362, 363,
	364, 365, 890, 366, 367, 0, 368, 369, 370, 371,
	372, 0, 374, 375, 376, 373, 377, 378, 379, 380,
	0, 381, 945, 382, 383, 384, 385, 827, 386, 0,
	387, 391, 392, 393, 394, 395, 396, 397, 0, 404,
	405, 863, 864, 866, 867, 399, 403, 406, 407, 920,
	408, 388, 389, 409, 946, 410, 885, 865, 412, 0,
	422, 413, 414, 415, 390, 416, 420, 931, 417, 418,
	419, 953, 0, 424, 425, 423, 0, 426, 427, 428,
	429, 430, 269, 431, 270, 861, 0, 904, 905, 906,
	907, 0, 439, 0, 433, 434, 954, 435, 955, 838,
	436, 437, 438, 0, 440, 441, 0, 821, 442, 443,
	444, 445, 447, 921, 448, 0, 869, 449, 450, 451,
	500, 901, 948, 0, 453, 452, 503, 0, 0, 0,
	0, 454, 455, 504, 456, 457, 458, 818, 0, 0,
	0, 0, 0, 0, 0, 816, 0, 0, 0, 0,
	814, 815, 874, 831, 832, 833, 829, 830, 843, 844,
	0, 0, 0, 0, 842, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	923, 848, 0, 0, 0, 219, 220, 221, 222, 460,
	889, 868, 900, 858, 899, 898, 0, 226, 860, 859,
	229, 230, 231, 850, 922, 232, 958, 959, 466, 0,
	233, 929, 0, 912, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 932, 247, 248, 915, 913, 914, 919, 917,
	916, 918, 249, 250, 251, 252, 903, 254, 896, 895,
	820, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	894, 261, 0, 262, 0, 263, 264, 0, 826, 265,
	266, 268, 271, 267, 272, 273, 274, 949, 950, 839,
	210, 0, 0, 0, 0, 0, 275, 276, 277, 893,
	891, 892, 0, 280, 0, 281, 0, 0, 933, 282,
	283, 0, 284, 956, 0, 849, 285, 0, 286, 287,
	288, 289, 924, 925, 928, 935, 290, 291, 0, 292,
	293, 870, 0, 0, 0, 211, 294, 296, 303, 0,
	934, 297, 882, 873, 884, 886, 887, 888, 883, 0,
	875, 0, 304, 936, 926, 937, 305, 306, 307, 938,
	908, 909, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 957, 939, 317, 318, 940, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 862, 330, 941, 333, 334, 336,
	335, 817, 212, 942, 840, 927, 897, 337, 338, 0,
	871, 340, 872, 822, 0, 343, 344, 345, 0, 0,
	346, 486, 943, 347, 944, 951, 348, 342, 349, 350,
	351, 352, 353, 354, 0, 355, 356, 952, 357, 489,
	358, 0, 359, 0, 360, 361, 362, 363, 364, 365,
	890, 366, 367, 0, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 0, 381,
	945, 382, 383, 384, 385, 827, 386, 0, 387, 391,
	392, 393, 394, 395, 396, 397, 0, 404, 405, 863,
	864, 866, 867, 399, 403, 406, 407, 920, 408, 388,
	389, 409, 946, 410, 885, 865, 412, 0, 422, 413,
	414, 415, 390, 416, 420, 931, 417, 418, 419, 953,
	0, 424, 425, 423, 0, 426, 427, 428, 429, 430,
	269, 431, 270, 861, 0, 904, 905, 906, 907, 0,
	439, 0, 433, 434, 954, 435, 955, 838, 436, 437,
	438, 0, 440, 441, 0, 821, 442, 443, 444, 445,
	447, 921, 448, 0, 869, 449, 450, 451, 500, 901,
	948, 0, 453, 452, 503, 0, 0, 0, 0, 454,
	455, 504, 456, 457, 458, 818, 0, 0, 0, 0,
	0, 0, 0, 816, 0, 0, 0, 0, 814, 815,
	874, 831, 832, 833, 829, 830, 843, 844, 0, 0,
	0, 0, 842, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 923, 848,
	0, 0, 0, 219, 220, 221, 222, 460, 889, 868,
	900, 858, 899, 898, 0, 226, 860, 859, 229, 230,
	231, 850, 922, 232, 958, 959, 466, 0, 233, 929,
	0, 912, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	932, 247, 248, 915, 913, 914, 919, 917, 916, 918,
	249, 250, 251, 252, 903, 254, 896, 895, 820, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 894, 261,
	0, 262, 0, 263, 264, 0, 826, 265, 266, 268,
	271, 267, 272, 273, 274, 949, 950, 839, 210, 0,
	0, 0, 0, 0, 275, 276, 277, 893, 891, 892,
	0, 280, 0, 281, 0, 0, 933, 282, 283, 0,
	284, 956, 0, 849, 285, 0, 286, 287, 288, 289,
	924, 925, 928, 935, 290, 291, 0, 292, 293, 870,
	0, 0, 0, 211, 294, 296, 303, 0, 934, 297,
	882, 873, 884, 886, 887, 888, 883, 0, 875, 0,
	304, 936, 926, 937, 305, 306, 307, 938, 908, 909,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 957, 939, 317, 318, 940, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 862, 330, 941, 333, 334, 336, 335, 817,
	212, 942, 840, 927, 897, 337, 338, 0, 871, 340,
	872, 0, 0, 343, 344, 345, 0, 0, 346, 486,
	943, 347, 944, 951, 348, 342, 349, 350, 351, 352,
	353, 354, 0, 355, 356, 952, 357, 489, 358, 0,
	359, 0, 360, 361, 362, 363, 364, 365, 890, 366,
	367, 0, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 0, 381, 945, 382,
	383, 384, 385, 827, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 0, 404, 405, 863, 864, 866,
	867, 399, 403, 406, 407, 920, 408, 388, 389, 409,
	946, 410, 885, 865, 412, 0, 422, 413, 414, 415,
	390, 416, 420, 931, 417, 418, 419, 953, 0, 424,
	425, 423, 0, 426, 427, 428, 429, 430, 269, 431,
	270, 861, 0, 904, 905, 906, 907, 0, 439, 0,
	433, 434, 954, 435, 955, 838, 436, 437, 438, 0,
	440, 441, 0, 821, 442, 443, 444, 445, 447, 921,
	448, 0, 869, 449, 450, 451, 500, 901, 948, 0,
	453, 452, 503, 0, 0, 0, 0, 454, 455, 504,
	456, 457, 458, 818, 0, 0, 0, 0, 0, 0,
	0, 816, 0, 0, 0, 0, 814, 815, 1548, 0,
	0, 0, 0, 0, 0, 844, 0, 0, 0, 0,
	842, 874, 831, 832, 833, 829, 830, 843, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 923,
	848, 0, 0, 0, 219, 220, 221, 222, 460, 889,
	868, 900, 858, 899, 898, 0, 226, 860, 859, 229,
	230, 231, 850, 922, 232, 958, 959, 466, 0, 233,
	929, 0, 912, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 932, 247, 248, 915, 913, 914, 919, 917, 916,
	918, 249, 250, 251, 252, 903, 254, 896, 895, 820,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 894,
	261, 0, 262, 0, 263, 264, 0, 826, 265, 266,
	268, 271, 267, 272, 273, 274, 949, 950, 839, 210,
	0, 0, 0, 0, 0, 275, 276, 277, 893, 891,
	892, 0, 280, 0, 281, 0, 2082, 933, 282, 283,
	0, 284, 956, 0, 849, 285, 0, 286, 287, 288,
	289, 924, 925, 928, 935, 290, 291, 0, 292, 293,
	870, 0, 0, 0, 211, 294, 296, 303, 0, 934,
	297, 882, 873, 884, 886, 887, 888, 883, 0, 875,
	0, 304, 936, 926, 937, 305, 306, 307, 938, 908,
	909, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 957, 939, 317, 318, 940, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 862, 330, 941, 333, 334, 336, 335,
	817, 212, 942, 840, 927, 897, 337, 338, 0, 871,
	340, 872, 0, 0, 343, 344, 345, 0, 0, 346,
	486, 943, 347, 944, 951, 348, 342, 349, 350, 351,
	352, 353, 354, 0, 355, 356, 952, 357, 489, 358,
	0, 359, 0, 360, 361, 362, 363, 364, 365, 890,
	366, 367, 0, 368, 369, 370, 371, 372, 0, 374,
	375, 376, 373, 377, 378, 379, 380, 0, 381, 945,
	382, 383, 384, 385, 827, 386, 0, 387, 391, 392,
	393, 394, 395, 396, 397, 0, 404, 405, 863, 864,
	866, 867, 399, 403, 406, 407, 920, 408, 388, 389,
	409, 946, 410, 885, 865, 412, 0, 422, 413, 414,
	415, 390, 416, 420, 931, 417, 418, 419, 953, 0,
	424, 425, 423, 0, 426, 427, 428, 429, 430, 269,
	431, 270, 861, 0, 904, 905, 906, 907, 0, 439,
	0, 433, 434, 954, 435, 955, 838, 436, 437, 438,
	0, 440, 441, 0, 821, 442, 443, 444, 445, 447,
	921, 448, 0, 869, 449, 450, 451, 500, 901, 948,
	0, 453, 452, 503, 0, 0, 0, 0, 454, 455,
	504, 456, 457, 458, 818, 0, 0, 0, 0, 0,
	0, 0, 816, 0, 0, 0, 0, 814, 815, 874,
	831, 832, 833, 829, 830, 843, 844, 0, 0, 0,
	0, 842, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 923, 848, 0,
	0, 0, 219, 220, 221, 222, 460, 889, 868, 900,
	858, 899, 898, 0, 226, 860, 859, 229, 230, 231,
	850, 922, 232, 958, 959, 466, 0, 233, 929, 0,
	912, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 932,
	247, 248, 915, 913, 914, 919, 917, 916, 918, 249,
	250, 251, 252, 903, 254, 896, 895, 820, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 894, 261, 0,
	262, 0, 263, 264, 0, 826, 265, 266, 268, 271,
	267, 272, 273, 274, 949, 950, 839, 210, 0, 0,
	0, 0, 0, 275, 276, 277, 893, 891, 892, 0,
	280, 0, 281, 0, 0, 933, 282, 283, 0, 284,
	956, 0, 849, 285, 0, 286, 287, 288, 289, 924,
	925, 928, 935, 290, 291, 0, 292, 293, 870, 0,
	0, 0, 211, 294, 296, 303, 0, 934, 297, 882,
	873, 884, 886, 887, 888, 883, 0, 875, 0, 304,
	936, 926, 937, 305, 306, 307, 938, 908, 909, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	957, 939, 317, 318, 940, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 862, 330, 941, 333, 334, 336, 335, 817, 212,
	942, 840, 927, 897, 337, 338, 0, 871, 340, 872,
	0, 0, 343, 344, 345, 0, 0, 346, 486, 943,
	347, 944, 951, 348, 342, 349, 350, 351, 352, 353,
	354, 0, 355, 356, 952, 357, 489, 358, 0, 359,
	0, 360, 361, 362, 363, 364, 365, 890, 366, 367,
	0, 368, 369, 370, 371, 372, 0, 374, 375, 376,
	373, 377, 378, 379, 380, 0, 381, 945, 382, 383,
	384, 385, 827, 386, 0, 387, 391, 392, 393, 394,
	395, 396, 397, 0, 404, 405, 863, 864, 866, 867,
	399, 403, 406, 407, 920, 408, 388, 389, 409, 946,
	410, 885, 865, 412, 0, 422, 413, 414, 415, 390,
	416, 420, 931, 417, 418, 419, 953, 0, 424, 425,
	423, 0, 426, 427, 428, 429, 430, 269, 431, 270,
	861, 0, 904, 905, 906, 907, 0, 439, 0, 433,
	434, 954, 435, 955, 838, 436, 437, 438, 0, 440,
	441, 0, 821, 442, 443, 444, 445, 447, 921, 448,
	0, 869, 449, 450, 451, 500, 901, 948, 0, 453,
	452, 503, 0, 0, 0, 0, 454, 455, 504, 456,
	457, 458, 818, 0, 0, 0, 0, 0, 0, 0,
	816, 0, 0, 0, 0, 814, 815, 0, 0, 0,
	0, 0, 0, 0, 844, 1486, 0, 0, 2087, 842,
	874, 831, 832, 833, 829, 830, 843, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 923, 848,
	0, 0, 0, 219, 220, 221, 222, 460, 889, 868,
	900, 858, 899, 898, 0, 226, 860, 859, 229, 230,
	231, 850, 922, 232, 958, 959, 466, 0, 233, 929,
	0, 912, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	932, 247, 248, 915, 913, 914, 919, 917, 916, 918,
	249, 250, 251, 252, 903, 254, 896, 895, 820, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 894, 261,
	0, 262, 0, 263, 264, 0, 826, 265, 266, 268,
	271, 267, 272, 273, 274, 949, 950, 839, 210, 0,
	0, 0, 0, 0, 275, 276, 277, 893, 891, 892,
	0, 280, 0, 281, 0, 0, 933, 282, 283, 0,
	284, 956, 0, 849, 285, 0, 286, 287, 288, 289,
	924, 925, 928, 935, 290, 291, 0, 292, 293, 870,
	0, 0, 0, 211, 294, 296, 303, 0, 934, 297,
	882, 873, 884, 886, 887, 888, 883, 0, 875, 0,
	304, 936, 926, 937, 305, 306, 307, 938, 908, 909,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 957, 939, 317, 318, 940, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 862, 330, 941, 333, 334, 336, 335, 817,
	212, 942, 840, 927, 897, 337, 338, 0, 871, 340,
	872, 0, 0, 343, 344, 345, 0, 0, 346, 486,
	943, 347, 944, 951, 348, 342, 349, 350, 351, 352,
	353, 354, 0, 355, 356, 952, 357, 489, 358, 0,
	359, 0, 360, 361, 362, 363, 364, 365, 890, 366,
	367, 0, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 0, 381, 945, 382,
	383, 384, 385, 827, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 0, 404, 405, 863, 864, 866,
	867, 399, 403, 406, 407, 920, 408, 388, 389, 409,
	946, 410, 885, 865, 412, 0, 422, 413, 414, 415,
	390, 416, 420, 931, 417, 418, 419, 953, 0, 424,
	425, 423, 0, 426, 427, 428, 429, 430, 269, 431,
	270, 861, 0, 904, 905, 906, 907, 0, 439, 0,
	433, 434, 954, 435, 955, 838, 436, 437, 438, 0,
	440, 441, 0, 821, 442, 443, 444, 445, 447, 921,
	448, 0, 869, 449, 450, 451, 500, 901, 948, 0,
	453, 452, 503, 0, 0, 0, 0, 454, 455, 504,
	456, 457, 458, 818, 0, 0, 0, 0, 0, 0,
	0, 816, 0, 0, 0, 0, 814, 815, 0, 0,
	0, 0, 0, 0, 0, 844, 0, 0, 0, 2085,
	842, 874, 831, 832, 833, 829, 830, 843, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 923,
	848, 0, 0, 0, 219, 220, 221, 222, 460, 889,
	868, 900, 858, 899, 898, 0, 226, 860, 859, 229,
	230, 231, 850, 922, 232, 958, 959, 466, 0, 233,
	929, 0, 912, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 932, 247, 248, 915, 913, 914, 919, 917, 916,
	918, 249, 250, 251, 252, 903, 254, 896, 895, 820,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 894,
	261, 0, 262, 0, 263, 264, 0, 826, 265, 266,
	268, 271, 267, 272, 273, 274, 949, 950, 839, 210,
	0, 0, 0, 0, 0, 275, 276, 277, 893, 891,
	892, 0, 280, 0, 281, 0, 0, 933, 282, 283,
	0, 284, 956, 0, 849, 285, 0, 286, 287, 288,
	289, 924, 925, 928, 935, 290, 291, 0, 292, 293,
	870, 0, 0, 0, 211, 294, 296, 303, 0, 934,
	297, 882, 873, 884, 886, 887, 888, 883, 0, 875,
	0, 304, 936, 926, 937, 305, 306, 307, 938, 908,
	909, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 957, 939, 317, 318, 940, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 862, 330, 941, 333, 334, 336, 335,
	817, 212, 942, 840, 927, 897, 337, 338, 0, 871,
	340, 872, 0, 0, 343, 344, 345, 0, 0, 346,
	486, 943, 347, 944, 951, 348, 342, 349, 350, 351,
	352, 353, 354, 0, 355, 356, 952, 357, 489, 358,
	0, 359, 0, 360, 361, 362, 363, 364, 365, 890,
	366, 367, 0, 368, 369, 370, 371, 372, 0, 374,
	375, 376, 373, 377, 378, 379, 380, 0, 381, 945,
	382, 383, 384, 385, 827, 386, 0, 387, 391, 392,
	393, 394, 395, 396, 397, 0, 404, 405, 863, 864,
	866, 867, 399, 403, 406, 407, 920, 408, 388, 389,
	409, 946, 410, 885, 865, 412, 0, 422, 413, 414,
	415, 390, 416, 420, 931, 417, 418, 419, 953, 0,
	424, 425, 423, 0, 426, 427, 428, 429, 430, 269,
	431, 270, 861, 0, 904, 905, 906, 907, 0, 439,
	0, 433, 434, 954, 435, 955, 838, 436, 437, 438,
	0, 440, 441, 0, 821, 442, 443, 444, 445, 447,
	921, 448, 0, 869, 449, 450, 451, 500, 901, 948,
	0, 453, 452, 503, 0, 0, 0, 0, 454, 455,
	504, 456, 457, 458, 818, 0, 0, 0, 0, 0,
	0, 0, 816, 0, 0, 0, 0, 814, 815, 0,
	0, 0, 0, 0, 0, 0, 844, 0, 0, 0,
	2073, 842, 874, 831, 832, 833, 829, 830, 843, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	923, 848, 0, 0, 0, 219, 220, 221, 222, 460,
	889, 868, 900, 858, 899, 898, 0, 226, 860, 859,
	229, 230, 231, 850, 922, 232, 958, 959, 466, 0,
	233, 929, 0, 912, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 932, 247, 248, 915, 913, 914, 919, 917,
	916, 918, 249, 250, 251, 252, 903, 254, 896, 895,
	820, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	894, 261, 0, 262, 0, 263, 264, 0, 826, 265,
	266, 268, 271, 267, 272, 273, 274, 949, 950, 839,
	210, 0, 0, 0, 0, 0, 275, 276, 277, 893,
	891, 892, 0, 280, 0, 281, 0, 0, 933, 282,
	283, 0, 284, 956, 0, 849, 285, 0, 286, 287,
	288, 289, 924, 925, 928, 935, 290, 291, 0, 292,
	293, 870, 0, 0, 0, 211, 294, 296, 303, 0,
	934, 297, 882, 873, 884, 886, 887, 888, 883, 0,
	875, 0, 304, 936, 926, 937, 305, 306, 307, 938,
	908, 909, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 957, 939, 317, 318, 940, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 862, 330, 941, 333, 334, 336,
	335, 817, 212, 942, 840, 927, 897, 337, 338, 0,
	871, 340, 872, 0, 0, 343, 344, 345, 0, 0,
	346, 486, 943, 347, 944, 951, 348, 342, 349, 350,
	351, 352, 353, 354, 0, 355, 356, 952, 357, 489,
	358, 0, 359, 0, 360, 361, 362, 363, 364, 365,
	890, 366, 367, 0, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 0, 381,
	945, 382, 383, 384, 385, 827, 386, 0, 387, 391,
	392, 393, 394, 395, 396, 397, 0, 404, 405, 863,
	864, 866, 867, 399, 403, 406, 407, 920, 408, 388,
	389, 409, 946, 410, 885, 865, 412, 0, 422, 413,
	414, 415, 390, 416, 420, 931, 417, 418, 419, 953,
	0, 424, 425, 423, 0, 426, 427, 428, 429, 430,
	269, 431, 270, 861, 0, 904, 905, 906, 907, 0,
	439, 0, 433, 434, 954, 435, 955, 838, 436, 437,
	438, 0, 440, 441, 0, 821, 442, 443, 444, 445,
	447, 921, 448, 0, 869, 449, 450, 451, 500, 901,
	948, 0, 453, 452, 503, 0, 0, 0, 0, 454,
	455, 504, 456, 457, 458, 818, 0, 0, 0, 0,
	0, 0, 0, 816, 0, 0, 0, 0, 814, 815,
	0, 0, 0, 0, 0, 0, 0, 844, 0, 0,
	0, 2062, 842, 874, 831, 832, 833, 829, 830, 843,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 923, 848, 0, 0, 0, 219, 220, 221, 222,
	460, 889, 868, 900, 858, 899, 898, 0, 226, 860,
	859, 229, 230, 231, 850, 922, 232, 958, 959, 466,
	0, 233, 929, 0, 912, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 932, 247, 248, 915, 913, 914, 919,
	917, 916, 918, 249, 250, 251, 252, 903, 254, 896,
	895, 820, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 894, 261, 0, 262, 0, 263, 264, 0, 826,
	265, 266, 268, 271, 267, 272, 273, 274, 949, 950,
	839, 210, 0, 0, 0, 0, 0, 275, 276, 277,
	893, 891, 892, 0, 280, 0, 281, 0, 0, 933,
	282, 283, 0, 284, 956, 0, 849, 285, 0, 286,
	287, 288, 289, 924, 925, 928, 935, 290, 291, 0,
	292, 293, 870, 0, 0, 0, 211, 294, 296, 303,
	0, 934, 297, 882, 873, 884, 886, 887, 888, 883,
	0, 875, 0, 304, 936, 926, 937, 305, 306, 307,
	938, 908, 909, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 957, 939, 317, 318, 940, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 862, 330, 941, 333, 334,
	336, 335, 817, 212, 942, 840, 927, 897, 337, 338,
	0, 871, 340, 872, 0, 0, 343, 344, 345, 0,
	0, 346, 486, 943, 347, 944, 951, 348, 342, 349,
	350, 351, 352, 353, 354, 0, 355, 356, 952, 357,
	489, 358, 0, 359, 0, 360, 361, 362, 363, 364,
	365, 890, 366, 367, 0, 368, 369, 370, 371, 372,
	0, 374, 375, 376, 373, 377, 378, 379, 380, 0,
	381, 945, 382, 383, 384, 385, 827, 386, 0, 387,
	391, 392, 393, 394, 395, 396, 397, 0, 404, 405,
	863, 864, 866, 867, 399, 403, 406, 407, 920, 408,
	388, 389, 409, 946, 410, 885, 865, 412, 0, 422,
	413, 414, 415, 390, 416, 420, 931, 417, 418, 419,
	953, 0, 424, 425, 423, 0, 426, 427, 428, 429,
	430, 269, 431, 270, 861, 0, 904, 905, 906, 907,
	0, 439, 0, 433, 434, 954, 435, 955, 838, 436,
	437, 438, 0, 440, 441, 0, 821, 442, 443, 444,
	445, 447, 921, 448, 0, 869, 449, 450, 451, 500,
	901, 948, 0, 453, 452, 503, 0, 0, 0, 0,
	454, 455, 504, 456, 457, 458, 818, 0, 0, 0,
	0, 0, 0, 0, 816, 0, 0, 0, 0, 814,
	815, 0, 0, 0, 0, 0, 0, 0, 844, 0,
	0, 0, 2060, 842, 2052, 831, 832, 833, 829, 830,
	843, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 923, 848, 0, 0, 0, 219, 220, 221,
	222, 460, 889, 868, 900, 858, 899, 898, 0, 226,
	860, 859, 229, 230, 231, 850, 922, 232, 958, 959,
	466, 0, 233, 929, 0, 912, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 932, 247, 248, 915, 913, 914,
	919, 917, 916, 918, 249, 250, 251, 252, 903, 2055,
	896, 895, 820, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 894, 261, 0, 262, 0, 263, 264, 0,
	826, 265, 266, 268, 271, 267, 272, 273, 274, 949,
	950, 839, 210, 0, 0, 0, 0, 0, 275, 276,
	277, 893, 891, 892, 0, 280, 0, 281, 0, 0,
	933, 282, 283, 0, 284, 956, 0, 849, 285, 0,
	286, 287, 288, 2056, 924, 925, 928, 935, 290, 291,
	0, 292, 293, 870, 0, 0, 0, 211, 294, 296,
	303, 0, 934, 297, 882, 873, 884, 886, 887, 888,
	883, 0, 875, 0, 304, 936, 926, 937, 305, 306,
	307, 938, 908, 909, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 957, 939, 317, 318, 940,
	0, 319, 320, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 2057, 2054, 331, 862, 330, 941, 333,
	334, 336, 335, 817, 212, 942, 840, 927, 897, 337,
	338, 0, 871, 340, 872, 0, 0, 343, 344, 345,
	0, 0, 346, 486, 943, 347, 944, 951, 348, 342,
	349, 350, 351, 352, 353, 354, 0, 355, 356, 952,
	357, 489, 358, 0, 359, 0, 360, 361, 362, 363,
	364, 365, 890, 366, 367, 0, 368, 369, 370, 371,
	372, 0, 374, 375, 376, 373, 377, 378, 379, 380,
	0, 381, 945, 382, 383, 384, 385, 827, 386, 0,
	387, 391, 392, 393, 394, 395, 396, 2058, 0, 404,
	405, 863, 864, 866, 867, 399, 403, 406, 407, 920,
	408, 388, 389, 409, 946, 410, 885, 865, 412, 0,
	422, 413, 414, 415, 390, 416, 420, 931, 417, 418,
	419, 953, 0, 424, 425, 423, 0, 426, 427, 428,
	429, 430, 269, 431, 270, 861, 0, 904, 905, 906,
	907, 0, 439, 0, 433, 434, 954, 435, 955, 838,
	436, 437, 438, 0, 440, 441, 0, 821, 442, 443,
	444, 445, 447, 921, 448, 0, 869, 449, 450, 451,
	500, 901, 948, 0, 453, 452, 503, 0, 0, 0,
	0, 454, 455, 504, 456, 2053, 458, 818, 0, 0,
	0, 0, 0, 0, 0, 816, 0, 0, 0, 0,
	814, 815, 0, 0, 0, 0, 0, 0, 0, 844,
	0, 0, 0, 2049, 842, 2052, 831, 832, 833, 829,
	830, 843, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 923, 848, 0, 0, 0, 219, 220,
	221, 222, 460, 889, 868, 900, 858, 899, 898, 0,
	226, 860, 859, 229, 230, 231, 850, 922, 232, 958,
	959, 466, 0, 233, 929, 0, 912, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 932, 247, 248, 915, 913,
	914, 919, 917, 916, 918, 249, 250, 251, 252, 903,
	2055, 896, 895, 820, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 894, 261, 0, 262, 0, 263, 264,
	0, 826, 265, 266, 268, 271, 267, 272, 273, 274,
	949, 950, 839, 210, 0, 0, 0, 0, 0, 275,
	276, 277, 893, 891, 892, 0, 280, 0, 281, 0,
	0, 933, 282, 283, 0, 284, 956, 0, 849, 285,
	0, 286, 287, 288, 2056, 924, 925, 928, 935, 290,
	291, 0, 292, 293, 870, 0, 0, 0, 211, 294,
	296, 303, 0, 934, 297, 882, 873, 884, 886, 887,
	888, 883, 0, 875, 0, 304, 936, 926, 937, 305,
	306, 307, 938, 908, 909, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 957, 939, 317, 318,
	940, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 2057, 2054, 331, 862, 330, 941,
	333, 334, 336, 335, 817, 212, 942, 840, 927, 897,
	337, 338, 0, 871, 340, 872, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 943, 347, 944, 951, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	952, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 890, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 945, 382, 383, 384, 385, 827, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 2058, 0,
	404, 405, 863, 864, 866, 867, 399, 403, 406, 407,
	920, 408, 388, 389, 409, 946, 410, 885, 865, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 931, 417,
	418, 419, 953, 0, 424, 425, 423, 0, 426, 427,
	428, 429, 430, 269, 431, 270, 861, 0, 904, 905,
	906, 907, 0, 439, 0, 433, 434, 954, 435, 955,
	838, 436, 437, 438, 0, 440, 441, 0, 821, 442,
	443, 444, 445, 447, 921, 448, 0, 869, 449, 450,
	451, 500, 901, 948, 0, 453, 452, 503, 0, 0,
	0, 0, 454, 455, 504, 456, 2053, 458, 818, 0,
	0, 0, 0, 0, 0, 0, 816, 0, 0, 0,
	0, 814, 815, 874, 831, 832, 833, 829, 830, 843,
	844, 0, 0, 0, 0, 842, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 923, 848, 0, 0, 0, 219, 220, 221, 222,
	460, 889, 868, 900, 858, 899, 898, 0, 226, 860,
	859, 229, 230, 231, 850, 922, 232, 958, 959, 466,
	0, 233, 929, 0, 912, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 932, 247, 248, 915, 913, 914, 919,
	917, 916, 918, 249, 250, 251, 252, 903, 254, 896,
	895, 820, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 894, 261, 0, 262, 0, 263, 264, 0, 826,
	265, 266, 268, 271, 267, 272, 273, 274, 949, 950,
	839, 210, 0, 0, 0, 0, 0, 275, 276, 277,
	893, 891, 892, 0, 280, 0, 281, 0, 0, 933,
	282, 283, 0, 284, 956, 0, 849, 285, 0, 286,
	287, 288, 289, 924, 925, 928, 935, 290, 291, 0,
	292, 293, 870, 0, 0, 0, 211, 294, 296, 303,
	0, 934, 297, 882, 873, 884, 886, 887, 888, 883,
	0, 875, 0, 304, 936, 926, 937, 305, 306, 307,
	938, 908, 909, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 957, 939, 317, 318, 940, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 862, 330, 941, 333, 334,
	336, 335, 817, 212, 942, 840, 927, 897, 337, 338,
	0, 871, 340, 872, 0, 0, 343, 344, 345, 0,
	0, 346, 486, 943, 347, 944, 951, 348, 342, 349,
	350, 351, 352, 353, 354, 0, 355, 356, 952, 357,
	489, 358, 0, 359, 0, 360, 361, 362, 363, 364,
	365, 890, 366, 367, 0, 368, 369, 370, 371, 372,
	0, 374, 375, 376, 373, 377, 378, 379, 380, 0,
	381, 945, 382, 383, 384, 385, 827, 386, 0, 387,
	391, 392, 393, 394, 395, 396, 397, 0, 404, 405,
	863, 864, 866, 867, 399, 403, 406, 407, 920, 408,
	388, 389, 409, 946, 410, 885, 865, 412, 0, 422,
	413, 414, 415, 390, 416, 420, 931, 417, 418, 419,
	953, 0, 424, 425, 423, 0, 426, 427, 428, 429,
	430, 269, 431, 270, 861, 0, 904, 905, 906, 907,
	0, 439, 0, 433, 434, 954, 435, 955, 838, 436,
	437, 438, 0, 440, 441, 0, 821, 442, 443, 444,
	445, 447, 921, 448, 0, 869, 449, 450, 451, 500,
	901, 948, 0, 453, 452, 503, 0, 0, 0, 0,
	454, 455, 504, 456, 457, 458, 818, 0, 0, 0,
	0, 0, 0, 0, 816, 0, 0, 0, 0, 814,
	815, 0, 0, 0, 0, 0, 1494, 0, 844, 0,
	0, 0, 0, 842, 874, 831, 832, 833, 829, 830,
	843, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 1894, 218, 0, 0,
	0, 0, 923, 848, 0, 0, 0, 219, 220, 221,
	222, 460, 889, 868, 900, 858, 899, 898, 0, 226,
	860, 859, 229, 230, 231, 850, 922, 232, 958, 959,
	466, 0, 233, 929, 0, 912, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 932, 247, 248, 915, 913, 914,
	919, 917, 916, 918, 249, 250, 251, 252, 903, 254,
	896, 895, 820, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 894, 261, 0, 262, 0, 263, 264, 0,
	826, 265, 266, 268, 271, 267, 272, 273, 274, 949,
	950, 839, 210, 0, 0, 0, 0, 0, 275, 276,
	277, 893, 891, 892, 0, 280, 0, 281, 0, 0,
	933, 282, 283, 0, 284, 956, 0, 849, 285, 0,
	286, 287, 288, 289, 924, 925, 928, 935, 290, 291,
	0, 292, 293, 870, 0, 0, 0, 211, 294, 296,
	303, 0, 934, 297, 882, 873, 884, 886, 887, 888,
	883, 0, 875, 0, 304, 936, 926, 937, 305, 306,
	307, 938, 908, 909, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 957, 939, 317, 318, 940,
	0, 319, 320, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 862, 330, 941, 333,
	334, 336, 335, 817, 212, 942, 840, 927, 897, 337,
	338, 0, 871, 340, 872, 0, 0, 343, 344, 345,
	0, 0, 346, 486, 943, 347, 944, 951, 348, 342,
	349, 350, 351, 352, 353, 354, 0, 355, 356, 952,
	357, 489, 358, 0, 359, 0, 360, 361, 362, 363,
	364, 365, 890, 366, 367, 0, 368, 369, 370, 371,
	372, 0, 374, 375, 376, 373, 377, 378, 379, 380,
	0, 381, 945, 382, 383, 384, 385, 827, 386, 0,
	387, 391, 392, 393, 394, 395, 396, 397, 0, 404,
	405, 863, 864, 866, 867, 399, 403, 406, 407, 920,
	408, 388, 389, 409, 946, 410, 885, 865, 412, 0,
	422, 413, 414, 415, 390, 416, 420, 931, 417, 418,
	419, 953, 0, 424, 425, 423, 0, 426, 427, 428,
	429, 430, 269, 431, 270, 861, 0, 904, 905, 906,
	907, 0, 439, 0, 433, 434, 954, 435, 955, 838,
	436, 437, 438, 0, 440, 441, 0, 821, 442, 443,
	444, 445, 447, 921, 448, 0, 869, 449, 450, 451,
	500, 901, 948, 0, 453, 452, 503, 0, 0, 0,
	0, 454, 455, 504, 456, 457, 458, 818, 0, 0,
	0, 0, 0, 0, 0, 816, 0, 0, 0, 0,
	814, 815, 0, 0, 0, 0, 0, 0, 0, 844,
	0, 0, 0, 1189, 842, 874, 831, 832, 833, 829,
	830, 843, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 923, 848, 0, 0, 0, 219, 220,
	221, 222, 460, 889, 868, 900, 858, 899, 898, 0,
	226, 860, 859, 229, 230, 231, 850, 922, 232, 958,
	959, 466, 0, 233, 929, 0, 912, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 932, 247, 248, 915, 913,
	914, 919, 917, 916, 918, 249, 250, 251, 252, 903,
	254, 896, 895, 820, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 894, 261, 0, 262, 0, 263, 264,
	0, 826, 265, 266, 268, 271, 267, 272, 273, 274,
	949, 950, 839, 210, 0, 0, 0, 0, 0, 275,
	276, 277, 893, 891, 892, 0, 280, 0, 281, 0,
	0, 933, 282, 283, 0, 284, 956, 0, 849, 285,
	0, 286, 287, 288, 289, 1188, 925, 928, 935, 290,
	291, 0, 292, 293, 870, 0, 0, 0, 211, 294,
	296, 303, 0, 934, 297, 882, 873, 884, 886, 887,
	888, 883, 0, 875, 0, 304, 936, 926, 937, 305,
	306, 307, 938, 908, 909, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 957, 939, 317, 318,
	940, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 862, 330, 941,
	333, 334, 336, 335, 817, 212, 942, 840, 927, 897,
	337, 338, 0, 871, 340, 872, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 943, 347, 944, 951, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	952, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 890, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 945, 382, 383, 384, 385, 827, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 0,
	404, 405, 863, 864, 866, 867, 399, 403, 406, 407,
	920, 408, 388, 389, 409, 946, 410, 885, 865, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 931, 417,
	418, 419, 953, 0, 424, 425, 423, 0, 426, 427,
	428, 429, 430, 269, 431, 270, 861, 0, 904, 905,
	906, 907, 0, 439, 0, 433, 434, 954, 435, 955,
	838, 436, 437, 438, 0, 440, 441, 0, 821, 442,
	443, 444, 445, 447, 921, 448, 0, 869, 449, 450,
	451, 500, 901, 948, 0, 453, 452, 503, 0, 0,
	0, 0, 454, 455, 504, 456, 457, 458, 818, 0,
	0, 0, 0, 0, 0, 0, 816, 0, 0, 0,
	0, 814, 815, 0, 0, 0, 0, 0, 0, 0,
	844, 0, 0, 0, 1183, 842, 874, 831, 832, 833,
	829, 830, 843, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 923, 848, 0, 0, 0, 219,
	220, 221, 222, 460, 889, 868, 900, 858, 899, 898,
	0, 226, 860, 859, 229, 230, 231, 850, 922, 232,
	958, 959, 466, 0, 233, 929, 0, 912, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 932, 247, 248, 915,
	913, 914, 919, 917, 916, 918, 249, 250, 251, 252,
	903, 254, 896, 895, 820, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 894, 261, 0, 262, 0, 263,
	264, 0, 826, 265, 266, 268, 271, 267, 272, 273,
	274, 949, 950, 839, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 893, 891, 892, 0, 280, 0, 281,
	0, 0, 933, 282, 283, 0, 284, 956, 0, 849,
	285, 0, 286, 287, 288, 289, 1182, 925, 928, 935,
	290, 291, 0, 292, 293, 870, 0, 0, 0, 211,
	294, 296, 303, 0, 934, 297, 882, 873, 884, 886,
	887, 888, 883, 0, 875, 0, 304, 936, 926, 937,
	305, 306, 307, 938, 908, 909, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 957, 939, 317,
	318, 940, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 862, 330,
	941, 333, 334, 336, 335, 817, 212, 942, 840, 927,
	897, 337, 338, 0, 871, 340, 872, 0, 0, 343,
	344, 345, 0, 0, 346, 486, 943, 347, 944, 951,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 952, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 890, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 945, 382, 383, 384, 385, 827,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	0, 404, 405, 863, 864, 866, 867, 399, 403, 406,
	407, 920, 408, 388, 389, 409, 946, 410, 885, 865,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 931,
	417, 418, 419, 953, 0, 424, 425, 423, 0, 426,
	427, 428, 429, 430, 269, 431, 270, 861, 0, 904,
	905, 906, 907, 0, 439, 0, 433, 434, 954, 435,
	955, 838, 436, 437, 438, 0, 440, 441, 0, 821,
	442, 443, 444, 445, 447, 921, 448, 0, 869, 449,
	450, 451, 500, 901, 948, 0, 453, 452, 503, 0,
	0, 0, 0, 454, 455, 504, 456, 457, 458, 818,
	0, 0, 0, 0, 0, 0, 0, 816, 0, 0,
	0, 0, 814, 815, 0, 0, 0, 0, 0, 0,
	0, 844, 0, 0, 0, 1178, 842, 874, 831, 832,
	833, 829, 830, 843, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 923, 848, 0, 0, 0,
	219, 220, 221, 222, 460, 889, 868, 900, 858, 899,
	898, 0, 226, 860, 859, 229, 230, 231, 850, 922,
	232, 958, 959, 466, 0, 233, 929, 0, 912, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 932, 247, 248,
	915, 913, 914, 919, 917, 916, 918, 249, 250, 251,
	252, 903, 254, 896, 895, 820, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 894, 261, 0, 262, 0,
	263, 264, 0, 826, 265, 266, 268, 271, 267, 272,
	273, 274, 949, 950, 839, 210, 0, 0, 0, 0,
	0, 275, 276, 277, 893, 891, 892, 0, 280, 0,
	281, 0, 0, 933, 282, 283, 0, 284, 956, 0,
	849, 285, 0, 286, 287, 288, 289, 924, 925, 928,
	935, 290, 291, 0, 292, 293, 870, 0, 0, 0,
	211, 294, 296, 303, 0, 934, 297, 882, 873, 884,
	886, 887, 888, 883, 0, 875, 0, 304, 936, 926,
	937, 305, 306, 307, 938, 908, 909, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 957, 939,
	317, 318, 940, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 862,
	330, 941, 333, 334, 336, 335, 817, 212, 942, 840,
	927, 897, 337, 338, 0, 871, 340, 872, 0, 0,
	343, 344, 345, 0, 0, 346, 486, 943, 347, 944,
	951, 348, 342, 349, 350, 351, 352, 353, 354, 0,
	355, 356, 952, 357, 489, 358, 0, 359, 0, 360,
	361, 362, 363, 364, 365, 890, 366, 367, 0, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 0, 381, 945, 382, 383, 384, 385,
	827, 386, 0, 387, 391, 392, 393, 394, 395, 396,
	397, 0, 404, 405, 863, 864, 866, 867, 399, 403,
	406, 407, 920, 408, 388, 389, 409, 946, 410, 885,
	865, 412, 0, 422, 413, 414, 415, 390, 416, 420,
	931, 417, 418, 419, 953, 0, 424, 425, 423, 0,
	426, 427, 428, 429, 430, 269, 431, 270, 861, 0,
	904, 905, 906, 907, 0, 439, 0, 433, 434, 954,
	435, 955, 838, 436, 437, 438, 0, 440, 441, 0,
	821, 442, 443, 444, 445, 447, 921, 448, 0, 869,
	449, 450, 451, 500, 901, 948, 0, 453, 452, 503,
	0, 0, 0, 0, 454, 455, 504, 456, 457, 458,
	818, 0, 0, 0, 0, 0, 0, 0, 816, 0,
	0, 0, 0, 814, 815, 874, 831, 832, 833, 829,
	830, 843, 844, 0, 0, 0, 0, 842, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 923, 848, 0, 0, 0, 219, 220,
	221, 222, 460, 889, 868, 900, 858, 899, 898, 0,
	226, 860, 859, 229, 230, 231, 850, 922, 232, 958,
	959, 466, 0, 233, 929, 0, 912, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 932, 247, 248, 915, 913,
	914, 919, 917, 916, 918, 249, 250, 251, 252, 903,
	254, 896, 895, 820, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 894, 261, 0, 262, 0, 263, 264,
	0, 826, 265, 266, 268, 271, 267, 272, 273, 274,
	949, 950, 839, 210, 0, 0, 0, 0, 0, 275,
	276, 277, 893, 891, 892, 0, 280, 0, 281, 0,
	0, 933, 282, 283, 0, 284, 956, 0, 849, 285,
	0, 286, 287, 288, 289, 924, 925, 928, 935, 290,
	291, 0, 292, 293, 870, 0, 0, 0, 211, 294,
	296, 303, 0, 934, 297, 882, 873, 884, 886, 887,
	888, 883, 0, 875, 0, 304, 936, 926, 937, 305,
	306, 307, 938, 908, 909, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 957, 939, 317, 318,
	940, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 862, 330, 941,
	333, 334, 336, 335, 817, 212, 942, 840, 927, 897,
	337, 338, 0, 871, 340, 872, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 943, 347, 944, 951, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	952, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 890, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 945, 382, 383, 384, 385, 827, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 0,
	404, 405, 863, 864, 866, 867, 399, 403, 406, 407,
	920, 408, 388, 389, 409, 946, 410, 885, 865, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 931, 417,
	418, 419, 953, 0, 424, 425, 423, 0, 426, 427,
	428, 429, 430, 269, 431, 270, 861, 0, 904, 905,
	906, 907, 0, 439, 0, 433, 434, 954, 435, 955,
	838, 436, 437, 438, 0, 440, 441, 0, 821, 442,
	443, 444, 445, 447, 921, 448, 0, 869, 449, 450,
	451, 500, 901, 948, 0, 453, 452, 503, 0, 0,
	0, 0, 454, 455, 504, 456, 457, 458, 818, 0,
	0, 0, 0, 0, 0, 0, 816, 0, 0, 0,
	0, 814, 815, 874, 831, 832, 833, 829, 830, 843,
	844, 0, 0, 0, 0, 842, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 923, 848, 0, 0, 0, 219, 220, 221, 222,
	460, 889, 868, 900, 858, 899, 898, 0, 226, 860,
	859, 229, 230, 231, 850, 922, 232, 958, 959, 466,
	0, 233, 929, 0, 912, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 932, 247, 3331, 915, 913, 914, 919,
	917, 916, 918, 249, 250, 251, 252, 903, 254, 896,
	895, 820, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 894, 261, 0, 262, 0, 263, 264, 0, 826,
	265, 266, 268, 271, 267, 272, 273, 274, 949, 950,
	839, 210, 0, 0, 0, 0, 0, 275, 276, 277,
	893, 891, 892, 0, 280, 0, 281, 0, 0, 933,
	282, 283, 0, 284, 956, 0, 849, 285, 0, 286,
	287, 288, 289, 924, 925, 928, 935, 290, 291, 0,
	292, 293, 870, 0, 0, 0, 211, 294, 296, 303,
	0, 934, 297, 882, 873, 884, 886, 887, 888, 883,
	0, 875, 0, 304, 936, 926, 937, 305, 306, 307,
	938, 908, 909, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 957, 939, 317, 318, 940, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 862, 330, 941, 333, 334,
	336, 335, 817, 212, 942, 840, 927, 897, 337, 338,
	0, 871, 340, 872, 0, 0, 343, 344, 345, 0,
	0, 346, 486, 943, 347, 944, 951, 348, 342, 349,
	350, 351, 352, 353, 354, 0, 355, 356, 952, 357,
	489, 358, 0, 359, 0, 360, 361, 362, 363, 364,
	365, 890, 366, 367, 0, 368, 369, 370, 371, 372,
	0, 374, 375, 376, 373, 377, 378, 379, 380, 0,
	381, 945, 382, 383, 384, 385, 827, 386, 0, 387,
	391, 392, 393, 394, 395, 396, 397, 0, 404, 405,
	863, 864, 866, 867, 399, 403, 406, 407, 920, 408,
	388, 389, 409, 946, 410, 885, 865, 412, 0, 422,
	413, 414, 415, 390, 416, 420, 931, 417, 418, 419,
	953, 0, 424, 425, 423, 0, 426, 427, 428, 429,
	430, 269, 431, 270, 861, 0, 904, 905, 906, 907,
	0, 439, 0, 433, 434, 954, 435, 955, 838, 436,
	437, 438, 0, 3330, 441, 0, 821, 442, 443, 444,
	445, 447, 921, 448, 0, 869, 449, 450, 451, 500,
	901, 948, 0, 453, 452, 503, 0, 0, 0, 0,
	454, 455, 504, 456, 457, 458, 818, 0, 0, 0,
	0, 0, 0, 0, 816, 0, 0, 0, 0, 814,
	815, 874, 831, 832, 833, 829, 830, 843, 844, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 923,
	848, 0, 0, 0, 219, 220, 221, 222, 3329, 889,
	868, 900, 858, 899, 898, 0, 226, 860, 859, 229,
	230, 231, 850, 922, 232, 958, 959, 466, 0, 233,
	929, 0, 912, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 932, 247, 3331, 915, 913, 914, 919, 917, 916,
	918, 249, 250, 251, 252, 903, 254, 896, 895, 820,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 894,
	261, 0, 262, 0, 263, 264, 0, 826, 265, 266,
	268, 271, 267, 272, 273, 274, 949, 950, 839, 210,
	0, 0, 0, 0, 0, 275, 276, 277, 893, 891,
	892, 0, 280, 0, 281, 0, 0, 933, 282, 283,
	0, 284, 956, 0, 849, 285, 0, 286, 287, 288,
	289, 924, 925, 928, 935, 290, 291, 0, 292, 293,
	870, 0, 0, 0, 211, 294, 296, 303, 0, 934,
	297, 882, 873, 884, 886, 887, 888, 883, 0, 875,
	0, 304, 936, 926, 937, 305, 306, 307, 938, 908,
	909, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 957, 939, 317, 318, 940, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 862, 330, 941, 333, 334, 336, 335,
	817, 212, 942, 840, 927, 897, 337, 338, 0, 871,
	340, 872, 0, 0, 343, 344, 345, 0, 0, 346,
	486, 943, 347, 944, 951, 348, 342, 349, 350, 351,
	352, 353, 354, 0, 355, 356, 952, 357, 489, 358,
	0, 359, 0, 360, 361, 362, 363, 364, 365, 890,
	366, 367, 0, 368, 369, 370, 371, 372, 0, 374,
	375, 376, 373, 377, 378, 379, 380, 0, 381, 945,
	382, 383, 384, 385, 827, 386, 0, 387, 391, 392,
	393, 394, 395, 396, 397, 0, 404, 405, 863, 864,
	866, 867, 399, 403, 406, 407, 920, 408, 388, 389,
	409, 946, 410, 885, 865, 412, 0, 422, 413, 414,
	415, 390, 416, 420, 931, 417, 418, 419, 953, 0,
	424, 425, 423, 0, 426, 427, 428, 429, 430, 269,
	431, 270, 861, 0, 904, 905, 906, 907, 0, 439,
	0, 433, 434, 954, 435, 955, 838, 436, 437, 438,
	0, 3330, 441, 0, 821, 442, 443, 444, 445, 447,
	921, 448, 0, 869, 449, 450, 451, 500, 901, 948,
	0, 453, 452, 503, 0, 0, 0, 0, 454, 455,
	504, 456, 457, 458, 818, 0, 0, 0, 0, 0,
	0, 0, 816, 0, 0, 0, 0, 814, 815, 874,
	831, 832, 833, 829, 830, 843, 844, 0, 0, 0,
	0, 842, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 923, 848, 0,
	0, 0, 219, 220, 221, 222, 460, 889, 868, 900,
	858, 899, 898, 0, 226, 860, 859, 229, 230, 231,
	850, 922, 232, 958, 959, 466, 0, 233, 929, 0,
	912, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 932,
	247, 248, 915, 913, 914, 919, 917, 916, 918, 249,
	250, 251, 252, 903, 254, 896, 895, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 894, 261, 0,
	262, 0, 263, 264, 0, 826, 265, 266, 268, 271,
	267, 272, 273, 274, 949, 950, 839, 210, 0, 0,
	0, 0, 0, 275, 276, 277, 893, 891, 892, 0,
	280, 0, 281, 0, 0, 933, 282, 283, 0, 284,
	956, 0, 849, 285, 0, 286, 287, 288, 289, 924,
	925, 928, 935, 290, 291, 0, 292, 293, 870, 0,
	0, 0, 211, 294, 296, 303, 0, 934, 297, 882,
	873, 884, 886, 887, 888, 883, 0, 875, 0, 304,
	936, 926, 937, 305, 306, 307, 938, 908, 909, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	957, 939, 317, 318, 940, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 862, 330, 941, 333, 334, 336, 335, 0, 212,
	942, 840, 927, 897, 337, 338, 0, 871, 340, 872,
	0, 0, 343, 344, 345, 0, 0, 346, 486, 943,
	347, 944, 951, 348, 342, 349, 350, 351, 352, 353,
	354, 0, 355, 356, 952, 357, 489, 358, 0, 359,
	0, 360, 361, 362, 363, 364, 365, 890, 366, 367,
	0, 368, 369, 370, 371, 372, 0, 374, 375, 376,
	373, 377, 378, 379, 380, 0, 381, 945, 382, 383,
	384, 385, 827, 386, 0, 387, 391, 392, 393, 394,
	395, 396, 397, 0, 404, 405, 863, 864, 866, 867,
	399, 403, 406, 407, 920, 408, 388, 389, 409, 946,
	410, 885, 865, 412, 0, 422, 413, 414, 415, 390,
	416, 420, 931, 417, 418, 419, 953, 0, 424, 425,
	423, 0, 426, 427, 428, 429, 430, 269, 431, 270,
	861, 0, 904, 905, 906, 907, 0, 439, 0, 433,
	434, 954, 435, 955, 838, 436, 437, 438, 0, 440,
	441, 0, 0, 442, 443, 444, 445, 447, 921, 448,
	0, 869, 449, 450, 451, 500, 901, 948, 0, 453,
	452, 503, 0, 0, 0, 0, 454, 455, 504, 456,
	457, 458, 874, 831, 832, 833, 829, 830, 843, 0,
	2070, 0, 0, 0, 0, 2068, 2069, 0, 0, 213,
	214, 215, 216, 217, 844, 218, 0, 0, 0, 842,
	923, 848, 0, 0, 0, 219, 220, 221, 222, 0,
	889, 868, 900, 858, 899, 898, 0, 226, 860, 859,
	229, 230, 231, 850, 922, 232, 958, 959, 466, 0,
	233, 929, 0, 912, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 932, 247, 3331, 915, 913, 914, 919, 917,
	916, 918, 249, 250, 251, 252, 903, 254, 896, 895,
	820, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	894, 261, 0, 262, 0, 263, 264, 0, 826, 265,
	266, 268, 271, 267, 272, 273, 274, 949, 950, 839,
	210, 0, 0, 0, 0, 0, 275, 276, 277, 893,
	891, 892, 0, 280, 0, 281, 0, 0, 933, 282,
	283, 0, 284, 956, 0, 849, 285, 0, 286, 287,
	288, 289, 924, 925, 928, 0, 290, 291, 0, 292,
	293, 870, 0, 0, 0, 211, 294, 296, 303, 0,
	934, 297, 882, 873, 884, 886, 887, 888, 883, 0,
	875, 0, 304, 0, 926, 0, 305, 306, 307, 938,
	908, 909, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 957, 939, 317, 318, 0, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 862, 330, 941, 333, 334, 336,
	335, 817, 212, 0, 840, 927, 897, 337, 338, 0,
	871, 340, 872, 0, 0, 343, 344, 345, 0, 0,
	346, 486, 943, 347, 944, 951, 348, 342, 349, 350,
	351, 352, 353, 354, 0, 355, 356, 952, 357, 489,
	358, 0, 359, 0, 360, 361, 362, 363, 364, 365,
	890, 366, 367, 0, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 0, 381,
	945, 382, 383, 384, 385, 827, 386, 0, 387, 391,
	392, 393, 394, 395, 396, 397, 0, 404, 405, 863,
	864, 866, 867, 399, 403, 406, 407, 920, 408, 388,
	389, 409, 0, 410, 885, 865, 412, 0, 422, 413,
	414, 415, 390, 416, 420, 931, 417, 418, 419, 953,
	0, 424, 425, 423, 0, 426, 427, 428, 429, 430,
	269, 431, 270, 861, 0, 904, 905, 906, 907, 0,
	439, 0, 433, 434, 954, 435, 955, 838, 436, 437,
	438, 0, 3330, 441, 0, 821, 442, 443, 444, 445,
	447, 921, 448, 0, 869, 449, 450, 451, 500, 901,
	948, 0, 453, 452, 503, 0, 0, 0, 0, 454,
	455, 504, 456, 457, 458, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 807, 0, 995, 0, 814, 815,
	0, 0, 0, 0, 0, 0, 0, 844, 0, 0,
	0, 0, 842, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 923, 0, 0, 0, 0, 219,
	220, 221, 222, 460, 461, 223, 462, 224, 225, 463,
	0, 226, 227, 228, 229, 230, 231, 0, 922, 232,
	464, 465, 466, 0, 233, 929, 0, 912, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 932, 247, 248, 915,
	913, 914, 919, 917, 916, 918, 249, 250, 251, 252,
	253, 254, 468, 469, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 470, 265, 266, 268, 271, 267, 272, 273,
	274, 949, 950, 0, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 473, 278, 279, 0, 280, 0, 281,
	0, 0, 933, 282, 283, 0, 284, 956, 0, 475,
	285, 0, 286, 287, 288, 289, 924, 925, 928, 935,
	290, 291, 0, 292, 293, 295, 0, 0, 0, 211,
	294, 296, 303, 0, 934, 297, 479, 299, 298, 300,
	301, 302, 480, 0, 481, 0, 304, 936, 926, 937,
	305, 306, 307, 938, 308, 309, 0, 0, 310, 311,
	312, 313, 982, 315, 314, 0, 316, 957, 939, 317,
	318, 940, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 332, 330,
	941, 333, 334, 336, 335, 0, 212, 942, 0, 927,
	485, 337, 338, 0, 339, 340, 341, 0, 987, 343,
	344, 345, 0, 0, 346, 486, 943, 347, 944, 951,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 952, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 490, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 945, 382, 383, 384, 385, 491,
	989, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	176, 404, 405, 398, 400, 401, 402, 399, 403, 406,
	407, 920, 408, 388, 389, 409, 946, 410, 492, 411,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 421,
	417, 418, 419, 953, 0, 424, 425, 423, 178, 426,
	427, 428, 429, 430, 269, 431, 270, 432, 0, 494,
	495, 496, 497, 0, 439, 0, 433, 434, 954, 435,
	955, 0, 436, 437, 438, 0, 440, 441, 0, 0,
	442, 443, 444, 445, 447, 921, 448, 0, 446, 449,
	450, 451, 1299, 501, 502, 0, 453, 452, 503, 995,
	0, 0, 170, 454, 455, 504, 456, 457, 458, 0,
	171, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 923, 0, 979,
	0, 1573, 219, 220, 221, 222, 460, 461, 223, 462,
	224, 225, 463, 0, 226, 227, 228, 229, 230, 231,
	0, 922, 232, 464, 465, 466, 0, 233, 929, 0,
	912, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 932,
	247, 248, 915, 913, 914, 919, 917, 916, 918, 249,
	250, 251, 252, 253, 254, 468, 469, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 470, 265, 266, 268, 271,
	267, 272, 273, 274, 949, 950, 0, 210, 0, 0,
	0, 0, 0, 275, 276, 277, 473, 278, 279, 0,
	280, 0, 281, 0, 0, 933, 282, 283, 0, 284,
	956, 0, 475, 285, 0, 286, 287, 288, 289, 924,
	925, 928, 935, 290, 291, 0, 292, 293, 295, 0,
	0, 0, 211, 294, 296, 303, 0, 934, 297, 479,
	299, 298, 300, 301, 302, 480, 0, 481, 0, 304,
	936, 926, 937, 305, 306, 307, 938, 308, 309, 0,
	0, 310, 311, 312, 313, 982, 315, 314, 0, 316,
	957, 939, 317, 318, 940, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 332, 330, 941, 333, 334, 336, 335, 0, 212,
	942, 0, 927, 485, 337, 338, 0, 339, 340, 341,
	0, 987, 343, 344, 345, 0, 0, 346, 486, 943,
	347, 944, 951, 348, 342, 349, 350, 351, 352, 353,
	354, 0, 355, 356, 952, 357, 489, 358, 0, 359,
	0, 360, 361, 362, 363, 364, 365, 490, 366, 367,
	0, 368, 369, 370, 371, 372, 0, 374, 375, 376,
	373, 377, 378, 379, 380, 0, 381, 945, 382, 383,
	384, 385, 491, 989, 0, 387, 391, 392, 393, 394,
	395, 396, 397, 176, 404, 405, 398, 400, 401, 402,
	399, 403, 406, 407, 920, 408, 388, 389, 409, 946,
	410, 492, 411, 412, 0, 422, 413, 414, 415, 390,
	416, 420, 421, 417, 418, 419, 953, 0, 424, 425,
	423, 178, 426, 427, 428, 429, 430, 269, 431, 270,
	432, 0, 494, 495, 496, 497, 0, 439, 0, 433,
	434, 954, 435, 955, 0, 436, 437, 438, 0, 440,
	441, 0, 0, 442, 443, 444, 445, 447, 921, 448,
	0, 446, 449, 450, 451, 1299, 501, 502, 0, 453,
	452, 503, 0, 0, 0, 170, 454, 455, 504, 456,
	457, 458, 0, 171, 0, 0, 2497, 0, 995, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 979, 0, 1573, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 923, 0, 0, 0,
	0, 219, 220, 221, 222, 460, 461, 223, 462, 224,
	225, 463, 0, 226, 227, 228, 229, 230, 231, 0,
	922, 232, 464, 465, 466, 0, 233, 929, 0, 912,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 932, 247,
	248, 915, 913, 914, 919, 917, 916, 918, 249, 250,
	251, 252, 253, 254, 468, 469, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 470, 265, 266, 268, 271, 267,
	272, 273, 274, 949, 950, 0, 210, 0, 0, 0,
	0, 0, 275, 276, 277, 473, 278, 279, 0, 280,
	0, 281, 0, 0, 933, 282, 283, 0, 284, 956,
	0, 475, 285, 0, 286, 287, 288, 289, 924, 925,
	928, 935, 290, 291, 0, 292, 293, 295, 0, 0,
	0, 211, 294, 296, 303, 0, 934, 297, 479, 299,
	298, 300, 301, 302, 480, 0, 481, 0, 304, 936,
	926, 937, 305, 306, 307, 938, 308, 309, 0, 0,
	310, 311, 312, 313, 982, 315, 314, 0, 316, 957,
	939, 317, 318, 940, 0, 319, 320, 0, 0, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	332, 330, 941, 333, 334, 336, 335, 0, 212, 942,
	0, 927, 485, 337, 338, 0, 339, 340, 341, 0,
	987, 343, 344, 345, 0, 0, 346, 486, 943, 347,
	944, 951, 348, 342, 349, 350, 351, 352, 353, 354,
	0, 355, 356, 952, 357, 489, 358, 0, 359, 0,
	360, 361, 362, 363, 364, 365, 490, 366, 367, 0,
	368, 369, 370, 371, 372, 0, 374, 375, 376, 373,
	377, 378, 379, 380, 0, 381, 945, 382, 383, 384,
	385, 491, 989, 0, 387, 391, 392, 393, 394, 395,
	396, 397, 0, 404, 405, 398, 400, 401, 402, 399,
	403, 406, 407, 920, 408, 388, 389, 409, 946, 410,
	492, 411, 412, 0, 422, 413, 414, 415, 390, 416,
	420, 421, 417, 418, 419, 953, 0, 424, 425, 423,
	0, 426, 427, 428, 429, 430, 269, 431, 270, 432,
	0, 494, 495, 496, 497, 0, 439, 0, 433, 434,
	954, 435, 955, 0, 436, 437, 438, 0, 440, 441,
	0, 0, 442, 443, 444, 445, 447, 921, 448, 0,
	446, 449, 450, 451, 500, 501, 502, 0, 453, 452,
	503, 0, 978, 0, 995, 454, 455, 504, 456, 457,
	458, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 979, 923, 984, 0, 0, 0, 219, 220, 221,
	222, 460, 461, 223, 462, 224, 225, 463, 0, 226,
	227, 228, 229, 230, 231, 0, 922, 232, 464, 465,
	466, 0, 233, 929, 0, 912, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 932, 247, 248, 915, 913, 914,
	919, 917, 916, 918, 249, 250, 251, 252, 253, 254,
	468, 469, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	470, 265, 266, 268, 271, 267, 272, 273, 274, 949,
	950, 0, 210, 0, 0, 0, 0, 0, 275, 276,
	277, 473, 278, 279, 0, 280, 0, 281, 0, 0,
	933, 282, 283, 0, 284, 956, 0, 475, 285, 0,
	286, 287, 288, 289, 924, 925, 928, 935, 290, 291,
	0, 292, 293, 295, 0, 0, 0, 211, 294, 296,
	303, 0, 934, 297, 479, 299, 298, 300, 301, 302,
	480, 0, 481, 0, 304, 936, 926, 937, 305, 306,
	307, 938, 308, 309, 0, 0, 310, 311, 312, 313,
	982, 315, 314, 0, 316, 957, 939, 317, 318, 940,
	0, 319, 320, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 332, 330, 941, 333,
	334, 336, 335, 0, 212, 942, 0, 927, 485, 337,
	338, 0, 339, 340, 341, 0, 987, 343, 344, 345,
	0, 0, 346, 486, 943, 347, 944, 951, 348, 342,
	349, 350, 351, 352, 353, 354, 0, 355, 356, 952,
	357, 489, 358, 0, 359, 0, 360, 361, 362, 363,
	364, 365, 490, 366, 367, 0, 368, 369, 370, 371,
	372, 0, 374, 375, 376, 373, 377, 378, 379, 380,
	0, 381, 945, 382, 383, 384, 385, 491, 989, 0,
	387, 391, 392, 393, 394, 395, 396, 397, 0, 404,
	405, 398, 400, 401, 402, 399, 403, 406, 407, 920,
	408, 388, 389, 409, 946, 410, 492, 411, 412, 0,
	422, 413, 414, 415, 390, 416, 420, 421, 417, 418,
	419, 953, 0, 424, 425, 423, 0, 426, 427, 428,
	429, 430, 269, 431, 270, 432, 0, 494, 495, 496,
	497, 0, 439, 0, 433, 434, 954, 435, 955, 0,
	436, 437, 438, 0, 440, 441, 0, 0, 442, 443,
	444, 445, 447, 921, 448, 0, 446, 449, 450, 451,
	500, 501, 502, 0, 453, 452, 503, 995, 0, 0,
	0, 454, 455, 504, 456, 457, 458, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 923, 0, 979, 0, 984,
	219, 220, 221, 222, 460, 461, 223, 462, 224, 225,
	463, 0, 226, 227, 228, 229, 230, 231, 0, 922,
	232, 464, 465, 466, 0, 233, 929, 0, 912, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 932, 247, 248,
	915, 913, 914, 919, 917, 916, 918, 249, 250, 251,
	252, 253, 254, 468, 469, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 470, 265, 266, 268, 271, 267, 272,
	273, 274, 949, 950, 0, 210, 0, 0, 0, 0,
	0, 275, 276, 277, 473, 278, 279, 0, 280, 0,
	281, 0, 0, 933, 282, 283, 0, 284, 956, 0,
	475, 285, 0, 286, 287, 288, 289, 924, 925, 928,
	935, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	211, 294, 296, 303, 0, 934, 297, 479, 299, 298,
	300, 301, 302, 480, 0, 481, 0, 304, 936, 926,
	937, 305, 306, 307, 938, 308, 309, 0, 0, 310,
	311, 312, 313, 982, 315, 314, 0, 316, 957, 939,
	317, 318, 940, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 941, 333, 334, 336, 335, 0, 212, 942, 0,
	927, 485, 337, 338, 0, 339, 340, 341, 0, 987,
	343, 344, 345, 0, 0, 346, 486, 943, 347, 944,
	951, 348, 342, 349, 350, 351, 352, 353, 354, 0,
	355, 356, 952, 357, 489, 358, 0, 359, 0, 360,
	361, 362, 363, 364, 365, 490, 366, 367, 0, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 0, 381, 945, 382, 383, 384, 385,
	491, 989, 0, 387, 391, 392, 393, 394, 395, 396,
	397, 0, 404, 405, 398, 400, 401, 402, 399, 403,
	406, 407, 920, 408, 388, 389, 409, 946, 410, 492,
	411, 412, 0, 422, 413, 414, 415, 390, 416, 420,
	421, 417, 418, 419, 953, 0, 424, 425, 423, 0,
	426, 427, 428, 429, 430, 269, 431, 270, 432, 0,
	494, 495, 496, 497, 0, 439, 0, 433, 434, 954,
	435, 955, 0, 436, 437, 438, 0, 440, 441, 0,
	0, 442, 443, 444, 445, 447, 921, 448, 0, 446,
	449, 450, 451, 500, 501, 502, 0, 453, 452, 503,
	995, 0, 0, 0, 454, 455, 504, 456, 457, 458,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 923, 0,
	979, 0, 984, 219, 220, 221, 222, 460, 461, 223,
	462, 224, 225, 463, 0, 226, 227, 228, 229, 230,
	231, 0, 922, 232, 464, 465, 466, 0, 233, 929,
	0, 912, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	932, 247, 248, 915, 913, 914, 919, 917, 916, 918,
	249, 250, 251, 252, 253, 254, 468, 469, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 470, 265, 266, 268,
	271, 267, 272, 273, 274, 949, 950, 0, 210, 0,
	0, 0, 0, 0, 275, 276, 277, 473, 278, 279,
	0, 280, 0, 281, 0, 0, 933, 282, 283, 0,
	284, 956, 0, 475, 285, 0, 286, 287, 288, 289,
	924, 925, 928, 935, 290, 291, 0, 292, 293, 295,
	0, 0, 0, 211, 294, 296, 303, 0, 934, 297,
	479, 299, 298, 300, 301, 302, 480, 0, 481, 0,
	304, 936, 926, 937, 305, 306, 307, 938, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 957, 939, 317, 318, 940, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 332, 330, 941, 333, 334, 336, 335, 0,
	212, 942, 0, 927, 485, 337, 338, 0, 339, 340,
	341, 0, 0, 343, 344, 345, 0, 0, 346, 486,
	943, 347, 944, 951, 348, 342, 349, 350, 351, 352,
	353, 354, 0, 355, 356, 952, 357, 489, 358, 0,
	359, 0, 360, 361, 362, 363, 364, 365, 490, 366,
	367, 0, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 0, 381, 945, 382,
	383, 384, 385, 491, 989, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 0, 404, 405, 398, 400, 401,
	402, 399, 403, 406, 407, 920, 408, 388, 389, 409,
	946, 410, 492, 411, 412, 0, 422, 413, 414, 415,
	390, 416, 420, 421, 417, 418, 419, 953, 0, 424,
	425, 423, 0, 426, 427, 428, 429, 430, 269, 431,
	270, 432, 0, 494, 495, 496, 497, 0, 439, 0,
	433, 434, 954, 435, 955, 0, 436, 437, 438, 0,
	440, 441, 0, 0, 442, 443, 444, 445, 447, 921,
	448, 0, 446, 449, 450, 451, 500, 501, 502, 0,
	453, 452, 503, 807, 0, 1153, 0, 454, 455, 504,
	456, 457, 458, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 459, 0, 1475, 0, 0, 219, 220,
	221, 222, 460, 461, 223, 462, 224, 225, 463, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 464,
	465, 466, 0, 233, 467, 0, 1057, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 932, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 468, 469, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 470, 265, 266, 268, 271, 267, 272, 273, 274,
	471, 472, 0, 210, 0, 0, 0, 0, 0, 275,
	276, 277, 473, 278, 279, 0, 280, 0, 281, 0,
	0, 933, 282, 283, 0, 284, 474, 0, 475, 285,
	0, 286, 287, 288, 289, 476, 477, 478, 935, 290,
	291, 0, 292, 293, 295, 0, 0, 0, 0, 294,
	296, 303, 0, 934, 297, 479, 299, 298, 300, 301,
	302, 480, 0, 481, 0, 304, 936, 482, 937, 305,
	306, 307, 938, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 483, 939, 317, 318,
	940, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 941,
	333, 334, 336, 335, 0, 0, 942, 0, 484, 485,
	337, 338, 0, 339, 340, 341, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 943, 347, 944, 487, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	488, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 490, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 945, 382, 383, 384, 385, 491, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 176,
	404, 405, 398, 400, 401, 402, 399, 403, 406, 407,
	0, 408, 388, 389, 409, 946, 410, 492, 411, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 421, 417,
	418, 419, 493, 0, 424, 425, 423, 178, 426, 427,
	428, 429, 430, 269, 431, 270, 432, 0, 494, 495,
	496, 497, 0, 439, 0, 433, 434, 498, 435, 499,
	0, 436, 437, 438, 0, 440, 441, 0, 0, 442,
	443, 444, 445, 447, 0, 448, 0, 446, 449, 450,
	451, 1299, 501, 502, 0, 453, 452, 503, 1296, 0,
	1153, 170, 454, 455, 504, 456, 457, 458, 0, 171,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 459, 0,
	148, 0, 0, 219, 220, 221, 222, 460, 461, 223,
	462, 224, 225, 463, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 464, 465, 466, 0, 233, 467,
	0, 1057, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	932, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 468, 469, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 470, 265, 266, 268,
	271, 267, 272, 273, 274, 471, 472, 0, 210, 0,
	0, 0, 0, 0, 275, 276, 277, 473, 278, 279,
	0, 280, 0, 281, 0, 0, 933, 282, 283, 0,
	284, 474, 0, 475, 285, 0, 286, 287, 288, 289,
	476, 477, 478, 935, 290, 291, 0, 292, 293, 295,
	0, 0, 0, 0, 294, 296, 303, 0, 934, 297,
	479, 299, 298, 300, 301, 302, 480, 0, 481, 0,
	304, 936, 482, 937, 305, 306, 307, 938, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 483, 939, 317, 318, 940, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 332, 330, 941, 333, 334, 336, 335, 0,
	0, 942, 0, 484, 485, 337, 338, 0, 339, 340,
	341, 0, 0, 343, 344, 345, 0, 0, 346, 486,
	943, 347, 944, 487, 348, 342, 349, 350, 351, 352,
	353, 354, 0, 355, 356, 488, 357, 489, 358, 0,
	359, 0, 360, 361, 362, 363, 364, 365, 490, 366,
	367, 0, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 0, 381, 945, 382,
	383, 384, 385, 491, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 176, 404, 405, 398, 400, 401,
	402, 399, 403, 406, 407, 0, 408, 388, 389, 409,
	946, 410, 492, 411, 412, 0, 422, 413, 414, 415,
	390, 416, 420, 421, 417, 418, 419, 493, 0, 424,
	425, 423, 178, 426, 427, 428, 429, 430, 269, 431,
	270, 432, 0, 494, 495, 496, 497, 0, 439, 0,
	433, 434, 498, 435, 499, 0, 436, 437, 438, 0,
	440, 441, 0, 0, 442, 443, 444, 445, 447, 0,
	448, 0, 446, 449, 450, 451, 1299, 501, 502, 0,
	453, 452, 503, 0, 0, 0, 170, 454, 455, 504,
	456, 457, 458, 0, 171, 0, 0, 0, 0, 1153,
	1152, 0, 0, 0, 0, 1150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 148, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 459, 0, 0,
	0, 0, 219, 220, 221, 222, 460, 461, 223, 462,
	224, 225, 463, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 464, 465, 466, 0, 233, 467, 0,
	1057, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 932,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 468, 469, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 470, 265, 266, 268, 271,
	267, 272, 273, 274, 471, 472, 0, 210, 0, 0,
	0, 0, 0, 275, 276, 277, 473, 278, 279, 0,
	280, 0, 281, 0, 0, 933, 282, 283, 0, 284,
	474, 0, 475, 285, 0, 286, 287, 288, 289, 476,
	477, 478, 935, 290, 291, 0, 292, 293, 295, 0,
	0, 0, 0, 294, 296, 303, 0, 934, 297, 479,
	299, 298, 300, 301, 302, 480, 0, 481, 0, 304,
	936, 482, 937, 305, 306, 307, 938, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	483, 939, 317, 318, 940, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 332, 330, 941, 333, 334, 336, 335, 0, 0,
	942, 0, 484, 485, 337, 338, 0, 339, 340, 341,
	0, 0, 343, 344, 345, 0, 0, 346, 486, 943,
	347, 944, 487, 348, 342, 349, 350, 351, 352, 353,
	354, 0, 355, 356, 488, 357, 489, 358, 0, 359,
	0, 360, 361, 362, 363, 364, 365, 490, 366, 367,
	0, 368, 369, 370, 371, 372, 0, 374, 375, 376,
	373, 377, 378, 379, 380, 0, 381, 945, 382, 383,
	384, 385, 491, 386, 0, 387, 391, 392, 393, 394,
	395, 396, 397, 0, 404, 405, 398, 400, 401, 402,
	399, 403, 406, 407, 0, 408, 388, 389, 409, 946,
	410, 492, 411, 412, 0, 422, 413, 414, 415, 390,
	416, 420, 421, 417, 418, 419, 493, 0, 424, 425,
	423, 0, 426, 427, 428, 429, 430, 269, 431, 270,
	432, 0, 494, 495, 496, 497, 0, 439, 0, 433,
	434, 498, 435, 499, 0, 436, 437, 438, 0, 440,
	441, 0, 0, 442, 443, 444, 445, 447, 0, 448,
	0, 446, 449, 450, 451, 500, 501, 502, 0, 453,
	452, 503, 0, 0, 0, 0, 454, 455, 504, 456,
	457, 458, 1153, 1152, 0, 0, 0, 0, 1150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 2689, 218, 0, 0, 0, 0,
	459, 0, 0, 0, 0, 219, 220, 221, 222, 460,
	461, 223, 462, 224, 225, 463, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 464, 465, 466, 0,
	233, 467, 0, 1057, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 932, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 468, 469,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 470, 265,
	266, 268, 271, 267, 272, 273, 274, 471, 472, 0,
	210, 0, 0, 0, 0, 0, 275, 276, 277, 473,
	278, 279, 0, 280, 0, 281, 0, 0, 933, 282,
	283, 0, 284, 474, 0, 475, 285, 0, 286, 287,
	288, 289, 476, 477, 478, 935, 290, 291, 0, 292,
	293, 295, 0, 0, 0, 0, 294, 296, 303, 0,
	934, 297, 479, 299, 298, 300, 301, 302, 480, 0,
	481, 0, 304, 936, 482, 937, 305, 306, 307, 938,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 483, 939, 317, 318, 940, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 332, 330, 941, 333, 334, 336,
	335, 0, 0, 942, 0, 484, 485, 337, 338, 0,
	339, 340, 341, 0, 0, 343, 344, 345, 0, 0,
	346, 486, 943, 347, 944, 487, 348, 342, 349, 350,
	351, 352, 353, 354, 0, 355, 356, 488, 357, 489,
	358, 0, 359, 0, 360, 361, 362, 363, 364, 365,
	490, 366, 367, 0, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 0, 381,
	945, 382, 383, 384, 385, 491, 386, 0, 387, 391,
	392, 393, 394, 395, 396, 397, 0, 404, 405, 398,
	400, 401, 402, 399, 403, 406, 407, 0, 408, 388,
	389, 409, 946, 410, 492, 411, 412, 0, 422, 413,
	414, 415, 390, 416, 420, 421, 417, 418, 419, 493,
	0, 424, 425, 423, 0, 426, 427, 428, 429, 430,
	269, 431, 270, 432, 0, 494, 495, 496, 497, 0,
	439, 0, 433, 434, 498, 435, 499, 0, 436, 437,
	438, 0, 440, 441, 0, 0, 442, 443, 444, 445,
	447, 0, 448, 0, 446, 449, 450, 451, 500, 501,
	502, 0, 453, 452, 503, 995, 0, 0, 0, 454,
	455, 504, 456, 457, 458, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 923, 0, 0, 0, 1303, 219, 220,
	221, 222, 460, 461, 223, 462, 224, 225, 463, 0,
	226, 227, 228, 229, 230, 231, 0, 922, 232, 464,
	465, 466, 0, 233, 929, 0, 912, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 932, 247, 248, 915, 913,
	914, 919, 917, 916, 918, 249, 250, 251, 252, 253,
	254, 468, 469, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 470, 265, 266, 268, 271, 267, 272, 273, 274,
	949, 950, 0, 210, 0, 0, 0, 0, 0, 275,
	276, 277, 473, 278, 279, 0, 280, 0, 281, 0,
	0, 933, 282, 283, 0, 284, 956, 0, 475, 285,
	0, 286, 287, 288, 289, 924, 925, 928, 935, 290,
	291, 0, 292, 293, 295, 0, 0, 0, 211, 294,
	296, 303, 0, 934, 297, 479, 299, 298, 300, 301,
	302, 480, 0, 481, 0, 304, 936, 926, 937, 305,
	306, 307, 938, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 957, 939, 317, 318,
	940, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 941,
	333, 334, 336, 335, 0, 212, 942, 0, 927, 485,
	337, 338, 0, 339, 340, 341, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 943, 347, 944, 951, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	952, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 490, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 945, 382, 383, 384, 385, 491, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 0,
	404, 405, 398, 400, 401, 402, 399, 403, 406, 407,
	920, 408, 388, 389, 409, 946, 410, 492, 411, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 421, 417,
	418, 419, 953, 0, 424, 425, 423, 0, 426, 427,
	428, 429, 430, 269, 431, 270, 432, 0, 494, 495,
	496, 497, 0, 439, 0, 433, 434, 954, 435, 955,
	0, 436, 437, 438, 0, 440, 441, 0, 0, 442,
	443, 444, 445, 447, 921, 448, 0, 446, 449, 450,
	451, 500, 501, 502, 0, 453, 452, 503, 807, 0,
	207, 0, 454, 455, 504, 456, 457, 458, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 459, 0,
	0, 0, 0, 219, 220, 221, 222, 460, 461, 223,
	462, 224, 225, 463, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 464, 465, 466, 0, 233, 467,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 468, 469, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 470, 265, 266, 268,
	271, 267, 272, 273, 274, 471, 472, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 473, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 474, 0, 475, 285, 0, 286, 287, 288, 289,
	476, 477, 478, 0, 290, 291, 0, 292, 293, 295,
	0, 0, 0, 0, 294, 296, 303, 0, 0, 297,
	479, 299, 298, 300, 301, 302, 480, 0, 481, 0,
	304, 0, 482, 0, 305, 306, 307, 0, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 483, 0, 317, 318, 0, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 332, 330, 0, 333, 334, 336, 335, 0,
	0, 0, 0, 484, 485, 337, 338, 0, 339, 340,
	341, 0, 0, 343, 344, 345, 0, 0, 346, 486,
	0, 347, 0, 487, 348, 342, 349, 350, 351, 352,
	353, 354, 0, 355, 356, 488, 357, 489, 358, 0,
	359, 0, 360, 361, 362, 363, 364, 365, 490, 366,
	367, 0, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 0, 381, 0, 382,
	383, 384, 385, 491, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 176, 404, 405, 398, 400, 401,
	402, 399, 403, 406, 407, 0, 408, 388, 389, 409,
	0, 410, 492, 411, 412, 0, 422, 413, 414, 415,
	390, 416, 420, 421, 417, 418, 419, 493, 0, 424,
	425, 423, 178, 426, 427, 428, 429, 430, 269, 431,
	270, 432, 0, 494, 495, 496, 497, 0, 439, 0,
	433, 434, 498, 435, 499, 0, 436, 437, 438, 0,
	440, 441, 0, 0, 442, 443, 444, 445, 447, 0,
	448, 0, 446, 449, 450, 451, 1299, 501, 502, 0,
	453, 452, 503, 207, 0, 0, 170, 454, 455, 504,
	456, 457, 458, 0, 171, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 459, 0, 0, 0, 148, 219, 220, 221, 222,
	460, 461, 223, 462, 224, 225, 463, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 464, 465, 466,
	0, 233, 467, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 468,
	469, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 470,
	265, 266, 268, 271, 267, 272, 273, 274, 471, 472,
	0, 210, 0, 0, 0, 0, 0, 275, 276, 277,
	473, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 474, 0, 475, 285, 0, 286,
	287, 288, 289, 476, 477, 478, 0, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 211, 294, 296, 303,
	0, 0, 297, 479, 299, 298, 300, 301, 302, 480,
	0, 481, 0, 304, 0, 482, 0, 305, 306, 307,
	0, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 483, 0, 317, 318, 0, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 0, 333, 334,
	336, 335, 0, 212, 0, 0, 484, 485, 337, 338,
	0, 339, 340, 341, 0, 0, 343, 344, 345, 0,
	0, 346, 486, 0, 347, 0, 487, 348, 342, 349,
	350, 351, 352, 353, 354, 0, 355, 356, 488, 357,
	489, 358, 0, 359, 0, 360, 361, 362, 363, 364,
	365, 490, 366, 367, 0, 368, 369, 370, 371, 372,
	0, 374, 375, 376, 373, 377, 378, 379, 380, 0,
	381, 0, 382, 383, 384, 385, 491, 386, 0, 387,
	391, 392, 393, 394, 395, 396, 397, 0, 404, 405,
	398, 400, 401, 402, 399, 403, 406, 407, 0, 408,
	388, 389, 409, 0, 410, 492, 411, 412, 0, 422,
	413, 414, 415, 390, 416, 420, 421, 417, 418, 419,
	493, 0, 424, 425, 423, 0, 426, 427, 428, 429,
	430, 269, 431, 270, 432, 0, 494, 495, 496, 497,
	0, 439, 0, 433, 434, 498, 435, 499, 0, 436,
	437, 438, 0, 440, 441, 0, 0, 442, 443, 444,
	445, 447, 0, 448, 0, 446, 449, 450, 451, 500,
	501, 502, 0, 453, 452, 503, 207, 0, 0, 0,
	454, 455, 504, 456, 457, 458, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 459, 0, 0, 0, 1578, 219,
	220, 221, 222, 460, 461, 223, 462, 224, 225, 463,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	464, 465, 466, 0, 233, 467, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 468, 469, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 470, 265, 266, 268, 271, 267, 272, 273,
	274, 471, 472, 0, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 473, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 474, 0, 475,
	285, 0, 286, 287, 288, 289, 476, 477, 478, 0,
	290, 291, 0, 292, 293, 295, 0, 0, 0, 211,
	294, 296, 303, 0, 0, 297, 479, 299, 298, 300,
	301, 302, 480, 0, 481, 0, 304, 0, 482, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 483, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 332, 330,
	0, 333, 334, 336, 335, 0, 212, 0, 0, 484,
	485, 337, 338, 0, 339, 340, 341, 0, 0, 343,
	344, 345, 0, 0, 346, 486, 0, 347, 0, 487,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 488, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 490, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 0, 382, 383, 384, 385, 491,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	0, 404, 405, 398, 400, 401, 402, 399, 403, 406,
	407, 0, 408, 388, 389, 409, 0, 410, 492, 411,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 421,
	417, 418, 419, 493, 0, 424, 425, 423, 0, 426,
	427, 428, 429, 430, 269, 431, 270, 432, 0, 494,
	495, 496, 497, 0, 439, 0, 433, 434, 498, 435,
	499, 0, 436, 437, 438, 0, 440, 441, 0, 0,
	442, 443, 444, 445, 447, 0, 448, 0, 446, 449,
	450, 451, 500, 501, 502, 0, 453, 452, 503, 207,
	0, 0, 0, 454, 455, 504, 456, 457, 458, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 459, 0, 2639,
	0, 0, 219, 220, 221, 222, 460, 461, 223, 462,
	224, 225, 463, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 464, 465, 466, 0, 233, 467, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 468, 469, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 470, 265, 266, 268, 271,
	267, 272, 273, 274, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 473, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	474, 0, 475, 285, 0, 286, 287, 288, 289, 476,
	477, 478, 0, 290, 291, 0, 292, 293, 295, 0,
	0, 0, 0, 294, 296, 303, 0, 0, 297, 479,
	299, 298, 300, 301, 302, 480, 0, 481, 0, 304,
	0, 482, 0, 305, 306, 307, 0, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	483, 0, 317, 318, 0, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 332, 330, 0, 333, 334, 336, 335, 0, 0,
	0, 0, 484, 485, 337, 338, 0, 339, 340, 341,
	0, 0, 343, 344, 345, 0, 0, 346, 486, 0,
	347, 0, 487, 348, 342, 349, 350, 351, 352, 353,
	354, 0, 355, 356, 488, 357, 489, 358, 0, 359,
	0, 360, 361, 362, 363, 364, 365, 490, 366, 367,
	0, 368, 369, 370, 371, 372, 0, 374, 375, 376,
	373, 377, 378, 379, 380, 0, 381, 0, 382, 383,
	384, 385, 491, 386, 0, 387, 391, 392, 393, 394,
	395, 396, 397, 0, 404, 405, 398, 400, 401, 402,
	399, 403, 406, 407, 0, 408, 388, 389, 409, 0,
	410, 492, 411, 412, 0, 422, 413, 414, 415, 390,
	416, 420, 421, 417, 418, 419, 493, 0, 424, 425,
	423, 0, 426, 427, 428, 429, 430, 269, 431, 270,
	432, 0, 494, 495, 496, 497, 0, 439, 0, 433,
	434, 498, 435, 499, 0, 436, 437, 438, 0, 440,
	441, 0, 0, 442, 443, 444, 445, 447, 0, 448,
	0, 446, 449, 450, 451, 500, 501, 502, 0, 453,
	452, 503, 207, 0, 0, 0, 454, 455, 504, 456,
	457, 458, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	459, 0, 0, 0, 2295, 219, 220, 221, 222, 460,
	461, 223, 462, 224, 225, 463, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 464, 465, 466, 0,
	233, 467, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 468, 469,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 470, 265,
	266, 268, 271, 267, 272, 273, 274, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 473,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 474, 0, 475, 285, 0, 286, 287,
	288, 289, 476, 477, 478, 0, 290, 291, 0, 292,
	293, 295, 0, 0, 0, 0, 294, 296, 303, 0,
	0, 297, 479, 299, 298, 300, 301, 302, 480, 0,
	481, 0, 304, 0, 482, 0, 305, 306, 307, 0,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 483, 0, 317, 318, 0, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 332, 330, 0, 333, 334, 336,
	335, 0, 0, 0, 0, 484, 485, 337, 338, 0,
	339, 340, 341, 0, 0, 343, 344, 345, 0, 0,
	346, 486, 0, 347, 0, 487, 348, 342, 349, 350,
	351, 352, 353, 354, 0, 355, 356, 488, 357, 489,
	358, 0, 359, 0, 360, 361, 362, 363, 364, 365,
	490, 366, 367, 0, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 0, 381,
	0, 382, 383, 384, 385, 491, 386, 0, 387, 391,
	392, 393, 394, 395, 396, 397, 0, 404, 405, 398,
	400, 401, 402, 399, 403, 406, 407, 0, 408, 388,
	389, 409, 0, 410, 492, 411, 412, 0, 422, 413,
	414, 415, 390, 416, 420, 421, 417, 418, 419, 493,
	0, 424, 425, 423, 0, 426, 427, 428, 429, 430,
	269, 431, 270, 432, 0, 494, 495, 496, 497, 0,
	439, 0, 433, 434, 498, 435, 499, 0, 436, 437,
	438, 0, 440, 441, 0, 0, 442, 443, 444, 445,
	447, 0, 448, 0, 446, 449, 450, 451, 500, 501,
	502, 0, 453, 452, 503, 681, 0, 573, 0, 454,
	455, 504, 456, 457, 458, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 459, 0, 2761, 0, 0,
	219, 220, 221, 222, 460, 461, 223, 462, 224, 225,
	463, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 464, 465, 466, 0, 233, 467, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 579,
	252, 253, 254, 468, 469, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 470, 265, 266, 268, 271, 267, 272,
	273, 274, 471, 472, 0, 210, 0, 0, 0, 0,
	0, 275, 276, 277, 473, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 474, 0,
	475, 285, 0, 286, 287, 288, 289, 476, 477, 478,
	0, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	211, 294, 296, 303, 0, 0, 297, 479, 299, 298,
	300, 301, 302, 480, 0, 481, 0, 304, 0, 482,
	0, 305, 306, 307, 0, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 483, 0,
	317, 318, 0, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 0, 333, 334, 336, 335, 0, 212, 0, 0,
	484, 485, 337, 338, 0, 339, 340, 341, 0, 0,
	343, 344, 345, 0, 0, 346, 486, 0, 347, 0,
	487, 348, 342, 349, 350, 351, 352, 353, 354, 0,
	355, 356, 488, 357, 489, 358, 0, 359, 0, 360,
	361, 362, 363, 364, 365, 490, 366, 367, 0, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 0, 381, 0, 382, 383, 384, 385,
	491, 386, 0, 387, 391, 392, 393, 394, 395, 396,
	397, 0, 404, 405, 398, 400, 401, 402, 399, 403,
	406, 407, 0, 408, 388, 389, 409, 0, 410, 492,
	411, 412, 0, 422, 413, 414, 415, 390, 416, 420,
	421, 417, 418, 419, 493, 0, 424, 425, 423, 578,
	426, 427, 428, 429, 430, 269, 431, 270, 432, 0,
	494, 495, 496, 497, 0, 439, 0, 433, 434, 498,
	435, 499, 0, 436, 437, 438, 0, 440, 441, 0,
	0, 442, 443, 444, 445, 447, 0, 448, 0, 446,
	449, 450, 451, 500, 501, 502, 0, 453, 452, 503,
	0, 572, 0, 573, 454, 455, 504, 456, 457, 458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 582, 218, 0, 0, 0,
	0, 459, 0, 0, 0, 0, 219, 220, 221, 222,
	460, 461, 223, 462, 224, 225, 463, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 464, 465, 466,
	0, 233, 467, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 579, 252, 253, 254, 468,
	469, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 470,
	265, 266, 268, 271, 267, 272, 273, 274, 471, 472,
	0, 210, 0, 0, 0, 0, 0, 275, 276, 277,
	473, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 474, 0, 475, 285, 0, 286,
	287, 288, 289, 476, 477, 478, 0, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 211, 294, 296, 303,
	0, 0, 297, 479, 299, 298, 300, 301, 302, 480,
	0, 481, 0, 304, 0, 482, 0, 305, 306, 307,
	0, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 483, 0, 317, 318, 0, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 0, 333, 334,
	336, 335, 0, 212, 0, 0, 484, 485, 337, 338,
	0, 339, 340, 341, 0, 0, 343, 344, 345, 0,
	0, 346, 486, 0, 347, 0, 487, 348, 342, 349,
	350, 351, 352, 353, 354, 0, 355, 356, 488, 357,
	489, 358, 0, 359, 0, 360, 361, 362, 363, 364,
	365, 490, 366, 367, 0, 368, 369, 370, 371, 372,
	0, 374, 375, 376, 373, 377, 378, 379, 380, 0,
	381, 0, 382, 383, 384, 385, 491, 386, 0, 387,
	391, 392, 393, 394, 395, 396, 397, 0, 404, 405,
	398, 400, 401, 402, 399, 403, 406, 407, 0, 408,
	388, 389, 409, 0, 410, 492, 411, 412, 0, 422,
	413, 414, 415, 390, 416, 420, 421, 417, 418, 419,
	493, 0, 424, 425, 423, 578, 426, 427, 428, 429,
	430, 269, 431, 270, 432, 0, 494, 495, 496, 497,
	0, 439, 0, 433, 434, 498, 435, 499, 0, 436,
	437, 438, 0, 440, 441, 0, 0, 442, 443, 444,
	445, 447, 0, 448, 0, 446, 449, 450, 451, 500,
	501, 502, 573, 453, 452, 503, 0, 0, 0, 0,
	454, 455, 504, 456, 457, 458, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	459, 582, 0, 0, 0, 219, 220, 221, 222, 460,
	461, 223, 462, 224, 225, 463, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 464, 465, 466, 0,
	233, 467, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 579, 252, 253, 254, 468, 469,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 470, 265,
	266, 268, 271, 267, 272, 273, 274, 471, 472, 0,
	210, 0, 0, 0, 0, 0, 275, 276, 277, 473,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 474, 0, 475, 285, 0, 286, 287,
	288, 289, 476, 477, 478, 0, 290, 291, 0, 292,
	293, 295, 0, 0, 0, 211, 294, 296, 303, 0,
	0, 297, 479, 299, 298, 300, 301, 302, 480, 0,
	481, 0, 304, 0, 482, 0, 305, 306, 307, 0,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 483, 0, 317, 318, 0, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 332, 330, 0, 333, 334, 336,
	335, 0, 212, 0, 0, 484, 485, 337, 338, 0,
	339, 340, 341, 0, 0, 343, 344, 345, 0, 0,
	346, 486, 0, 347, 0, 487, 348, 342, 349, 350,
	351, 352, 353, 354, 0, 355, 356, 488, 357, 489,
	358, 0, 359, 0, 360, 361, 362, 363, 364, 365,
	490, 366, 367, 0, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 0, 381,
	0, 1857, 383, 384, 385, 491, 386, 0, 387, 391,
	392, 393, 394, 395, 396, 397, 0, 404, 405, 398,
	400, 401, 402, 399, 403, 406, 407, 0, 408, 388,
	389, 409, 0, 410, 492, 411, 412, 0, 422, 413,
	414, 415, 390, 416, 420, 421, 417, 418, 419, 493,
	0, 424, 425, 423, 578, 426, 427, 428, 429, 430,
	269, 431, 270, 432, 0, 494, 495, 496, 497, 0,
	439, 0, 433, 434, 498, 435, 499, 0, 436, 437,
	438, 0, 440, 441, 0, 0, 442, 443, 444, 445,
	447, 0, 448, 0, 446, 449, 450, 451, 500, 501,
	502, 573, 453, 452, 503, 0, 0, 0, 0, 454,
	455, 504, 456, 457, 458, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 459,
	582, 0, 0, 0, 219, 220, 221, 222, 460, 461,
	223, 462, 224, 225, 463, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 464, 465, 466, 0, 233,
	467, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 579, 252, 253, 254, 468, 469, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 470, 265, 266,
	268, 271, 267, 272, 273, 274, 471, 472, 0, 210,
	0, 0, 0, 0, 0, 275, 276, 277, 473, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 474, 0, 475, 285, 0, 286, 287, 288,
	289, 476, 477, 478, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 211, 294, 296, 303, 0, 0,
	297, 479, 299, 298, 300, 301, 302, 480, 0, 481,
	0, 304, 0, 482, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 483, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 212, 0, 0, 484, 485, 337, 338, 0, 339,
	340, 341, 0, 0, 343, 344, 345, 0, 0, 346,
	486, 0, 347, 0, 487, 348, 342, 349, 350, 351,
	352, 353, 354, 0, 355, 356, 488, 357, 489, 358,
	0, 359, 0, 360, 361, 362, 363, 364, 365, 490,
	366, 367, 0, 368, 369, 370, 371, 372, 0, 374,
	375, 376, 373, 377, 378, 379, 380, 0, 381, 0,
	382, 383, 384, 385, 491, 386, 0, 387, 391, 392,
	393, 394, 395, 396, 397, 0, 404, 405, 398, 400,
	401, 402, 399, 403, 406, 407, 0, 408, 388, 389,
	409, 0, 410, 492, 411, 412, 0, 422, 413, 414,
	415, 390, 416, 420, 421, 417, 418, 419, 493, 0,
	424, 425, 423, 578, 426, 427, 428, 429, 430, 269,
	431, 270, 432, 0, 494, 495, 496, 497, 0, 439,
	0, 433, 434, 498, 435, 499, 0, 436, 437, 438,
	0, 440, 441, 0, 0, 442, 443, 444, 445, 447,
	0, 448, 0, 446, 449, 450, 451, 500, 501, 502,
	207, 453, 452, 503, 0, 0, 0, 0, 454, 455,
	504, 456, 457, 458, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 459, 582,
	0, 0, 0, 219, 220, 221, 222, 460, 461, 223,
	462, 224, 225, 463, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 464, 465, 466, 0, 233, 467,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 468, 469, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 470, 265, 266, 268,
	271, 267, 272, 273, 274, 471, 472, 0, 210, 0,
	0, 0, 0, 0, 275, 276, 277, 473, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 474, 0, 475, 285, 0, 286, 287, 288, 289,
	476, 477, 478, 0, 290, 291, 0, 292, 293, 295,
	0, 0, 0, 211, 294, 296, 303, 0, 0, 297,
	479, 299, 298, 300, 301, 302, 480, 0, 481, 0,
	304, 0, 482, 0, 305, 306, 307, 0, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 483, 0, 317, 318, 0, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 332, 330, 0, 333, 334, 336, 335, 0,
	212, 0, 0, 484, 485, 337, 338, 0, 339, 340,
	341, 0, 0, 343, 344, 345, 0, 0, 346, 486,
	0, 347, 0, 487, 348, 342, 349, 350, 351, 352,
	353, 354, 0, 355, 356, 488, 357, 489, 358, 0,
	359, 0, 360, 361, 362, 363, 364, 365, 490, 366,
	367, 0, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 0, 381, 0, 382,
	383, 384, 385, 491, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 0, 404, 405, 398, 400, 401,
	402, 399, 403, 406, 407, 0, 408, 388, 389, 409,
	0, 410, 492, 411, 412, 0, 422, 413, 414, 415,
	390, 416, 420, 421, 417, 418, 419, 493, 0, 424,
	425, 423, 0, 426, 427, 428, 429, 430, 269, 431,
	270, 432, 0, 494, 495, 496, 497, 0, 439, 0,
	433, 434, 498, 435, 499, 0, 436, 437, 438, 0,
	440, 441, 0, 0, 442, 443, 444, 445, 447, 0,
	448, 0, 446, 449, 450, 451, 500, 501, 502, 0,
	453, 452, 503, 0, 0, 0, 0, 454, 455, 504,
	456, 457, 458, 1325, 0, 1153, 1152, 0, 0, 0,
	0, 1150, 0, 0, 0, 0, 0, 0, 582, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 459, 0, 0, 0, 0, 219, 220,
	221, 222, 460, 461, 223, 462, 224, 225, 463, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 464,
	465, 466, 0, 233, 467, 0, 1057, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 932, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 468, 469, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 470, 265, 266, 268, 271, 267, 272, 273, 274,
	471, 472, 0, 210, 0, 0, 0, 0, 0, 1324,
	276, 277, 473, 278, 279, 0, 280, 0, 281, 0,
	0, 933, 282, 283, 0, 284, 474, 0, 475, 285,
	0, 286, 287, 288, 289, 476, 477, 478, 935, 290,
	291, 0, 292, 293, 295, 0, 0, 0, 0, 294,
	296, 303, 0, 934, 297, 479, 299, 298, 300, 301,
	302, 480, 0, 481, 0, 304, 936, 482, 937, 305,
	306, 307, 938, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 483, 939, 317, 318,
	940, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 941,
	333, 334, 336, 335, 0, 0, 942, 0, 484, 485,
	337, 338, 0, 339, 340, 341, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 943, 347, 944, 487, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	488, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 1323, 365, 490, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 945, 382, 383, 384, 385, 491, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 0,
	404, 405, 398, 400, 401, 402, 399, 403, 406, 407,
	0, 408, 388, 389, 409, 946, 410, 492, 411, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 421, 417,
	418, 419, 493, 0, 424, 425, 423, 0, 426, 427,
	428, 429, 430, 269, 431, 270, 432, 0, 494, 495,
	496, 497, 0, 439, 0, 433, 434, 498, 435, 499,
	0, 436, 437, 438, 0, 440, 441, 0, 0, 442,
	443, 444, 445, 447, 0, 448, 0, 446, 449, 450,
	451, 500, 501, 502, 0, 453, 452, 503, 0, 0,
	0, 0, 454, 455, 504, 456, 457, 458, 1294, 0,
	1153, 1152, 0, 0, 0, 0, 1150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 459, 0,
	0, 0, 0, 219, 220, 221, 222, 460, 461, 223,
	462, 224, 225, 463, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 464, 465, 466, 0, 233, 467,
	0, 1057, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	932, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 468, 469, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 470, 265, 266, 268,
	271, 267, 272, 273, 274, 471, 472, 0, 210, 0,
	0, 0, 0, 0, 275, 276, 277, 473, 278, 279,
	0, 280, 0, 281, 0, 0, 933, 282, 283, 0,
	284, 474, 0, 475, 285, 0, 286, 287, 288, 289,
	1293, 477, 478, 935, 290, 291, 0, 292, 293, 295,
	0, 0, 0, 0, 294, 296, 303, 0, 934, 297,
	479, 299, 298, 300, 301, 302, 480, 0, 481, 0,
	304, 936, 482, 937, 305, 306, 307, 938, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 483, 939, 317, 318, 940, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 332, 330, 941, 333, 334, 336, 335, 0,
	0, 942, 0, 484, 485, 337, 338, 0, 339, 340,
	341, 0, 0, 343, 344, 345, 0, 0, 346, 486,
	943, 347, 944, 487, 348, 342, 349, 350, 351, 352,
	353, 354, 0, 355, 356, 488, 357, 489, 358, 0,
	359, 0, 360, 361, 362, 363, 364, 365, 490, 366,
	367, 0, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 0, 381, 945, 382,
	383, 384, 385, 491, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 0, 404, 405, 398, 400, 401,
	402, 399, 403, 406, 407, 0, 408, 388, 389, 409,
	946, 410, 492, 411, 412, 0, 422, 413, 414, 415,
	390, 416, 420, 421, 417, 418, 419, 493, 0, 424,
	425, 423, 0, 426, 427, 428, 429, 430, 269, 431,
	270, 432, 0, 494, 495, 496, 497, 0, 439, 0,
	433, 434, 498, 435, 499, 0, 436, 437, 438, 0,
	440, 441, 0, 0, 442, 443, 444, 445, 447, 0,
	448, 0, 446, 449, 450, 451, 500, 501, 502, 0,
	453, 452, 503, 0, 0, 0, 0, 454, 455, 504,
	456, 457, 458, 1290, 0, 1153, 1152, 0, 0, 0,
	0, 1150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 459, 0, 0, 0, 0, 219, 220,
	221, 222, 460, 461, 223, 462, 224, 225, 463, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 464,
	465, 466, 0, 233, 467, 0, 1057, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 932, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 468, 469, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 470, 265, 266, 268, 271, 267, 272, 273, 274,
	471, 472, 0, 210, 0, 0, 0, 0, 0, 275,
	276, 277, 473, 278, 279, 0, 280, 0, 281, 0,
	0, 933, 282, 283, 0, 284, 474, 0, 475, 285,
	0, 286, 287, 288, 289, 1289, 477, 478, 935, 290,
	291, 0, 292, 293, 295, 0, 0, 0, 0, 294,
	296, 303, 0, 934, 297, 479, 299, 298, 300, 301,
	302, 480, 0, 481, 0, 304, 936, 482, 937, 305,
	306, 307, 938, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 483, 939, 317, 318,
	940, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 941,
	333, 334, 336, 335, 0, 0, 942, 0, 484, 485,
	337, 338, 0, 339, 340, 341, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 943, 347, 944, 487, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	488, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 490, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 945, 382, 383, 384, 385, 491, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 0,
	404, 405, 398, 400, 401, 402, 399, 403, 406, 407,
	0, 408, 388, 389, 409, 946, 410, 492, 411, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 421, 417,
	418, 419, 493, 0, 424, 425, 423, 0, 426, 427,
	428, 429, 430, 269, 431, 270, 432, 0, 494, 495,
	496, 497, 0, 439, 0, 433, 434, 498, 435, 499,
	0, 436, 437, 438, 0, 440, 441, 0, 0, 442,
	443, 444, 445, 447, 0, 448, 0, 446, 449, 450,
	451, 500, 501, 502, 0, 453, 452, 503, 0, 0,
	0, 0, 454, 455, 504, 456, 457, 458, 1228, 0,
	1153, 1152, 0, 0, 0, 0, 1150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 459, 0,
	0, 0, 0, 219, 220, 221, 222, 460, 461, 223,
	462, 224, 225, 463, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 464, 465, 466, 0, 233, 467,
	0, 1057, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	932, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 468, 469, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 470, 265, 266, 268,
	271, 267, 272, 273, 274, 471, 472, 0, 210, 0,
	0, 0, 0, 0, 275, 276, 277, 473, 278, 279,
	0, 280, 0, 281, 0, 0, 933, 282, 283, 0,
	284, 474, 0, 475, 285, 0, 286, 287, 288, 289,
	1227, 477, 478, 935, 290, 291, 0, 292, 293, 295,
	0, 0, 0, 0, 294, 296, 303, 0, 934, 297,
	479, 299, 298, 300, 301, 302, 480, 0, 481, 0,
	304, 936, 482, 937, 305, 306, 307, 938, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 483, 939, 317, 318, 940, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 332, 330, 941, 333, 334, 336, 335, 0,
	0, 942, 0, 484, 485, 337, 338, 0, 339, 340,
	341, 0, 0, 343, 344, 345, 0, 0, 346, 486,
	943, 347, 944, 487, 348, 342, 349, 350, 351, 352,
	353, 354, 0, 355, 356, 488, 357, 489, 358, 0,
	359, 0, 360, 361, 362, 363, 364, 365, 490, 366,
	367, 0, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 0, 381, 945, 382,
	383, 384, 385, 491, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 0, 404, 405, 398, 400, 401,
	402, 399, 403, 406, 407, 0, 408, 388, 389, 409,
	946, 410, 492, 411, 412, 0, 422, 413, 414, 415,
	390, 416, 420, 421, 417, 418, 419, 493, 0, 424,
	425, 423, 0, 426, 427, 428, 429, 430, 269, 431,
	270, 432, 0, 494, 495, 496, 497, 0, 439, 0,
	433, 434, 498, 435, 499, 0, 436, 437, 438, 0,
	440, 441, 0, 0, 442, 443, 444, 445, 447, 0,
	448, 0, 446, 449, 450, 451, 500, 501, 502, 0,
	453, 452, 503, 0, 0, 0, 0, 454, 455, 504,
	456, 457, 458, 1225, 0, 1153, 1152, 0, 0, 0,
	0, 1150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 459, 0, 0, 0, 0, 219, 220,
	221, 222, 460, 461, 223, 462, 224, 225, 463, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 464,
	465, 466, 0, 233, 467, 0, 1057, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 932, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 468, 469, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 470, 265, 266, 268, 271, 267, 272, 273, 274,
	471, 472, 0, 210, 0, 0, 0, 0, 0, 275,
	276, 277, 473, 278, 279, 0, 280, 0, 281, 0,
	0, 933, 282, 283, 0, 284, 474, 0, 475, 285,
	0, 286, 287, 288, 289, 1224, 477, 478, 935, 290,
	291, 0, 292, 293, 295, 0, 0, 0, 0, 294,
	296, 303, 0, 934, 297, 479, 299, 298, 300, 301,
	302, 480, 0, 481, 0, 304, 936, 482, 937, 305,
	306, 307, 938, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 483, 939, 317, 318,
	940, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 941,
	333, 334, 336, 335, 0, 0, 942, 0, 484, 485,
	337, 338, 0, 339, 340, 341, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 943, 347, 944, 487, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	488, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 490, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 945, 382, 383, 384, 385, 491, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 0,
	404, 405, 398, 400, 401, 402, 399, 403, 406, 407,
	0, 408, 388, 389, 409, 946, 410, 492, 411, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 421, 417,
	418, 419, 493, 0, 424, 425, 423, 0, 426, 427,
	428, 429, 430, 269, 431, 270, 432, 0, 494, 495,
	496, 497, 0, 439, 0, 433, 434, 498, 435, 499,
	0, 436, 437, 438, 0, 440, 441, 0, 0, 442,
	443, 444, 445, 447, 0, 448, 0, 446, 449, 450,
	451, 500, 501, 502, 0, 453, 452, 503, 0, 0,
	0, 0, 454, 455, 504, 456, 457, 458, 1146, 0,
	1153, 1152, 0, 0, 0, 0, 1150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 459, 0,
	0, 0, 0, 219, 220, 221, 222, 460, 461, 223,
	462, 224, 225, 463, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 464, 465, 466, 0, 233, 467,
	0, 1057, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	932, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 468, 469, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 470, 265, 266, 268,
	271, 267, 272, 273, 274, 471, 472, 0, 210, 0,
	0, 0, 0, 0, 275, 276, 277, 473, 278, 279,
	0, 280, 0, 281, 0, 0, 933, 282, 283, 0,
	284, 474, 0, 475, 285, 0, 286, 287, 288, 289,
	1148, 477, 478, 935, 290, 291, 0, 292, 293, 295,
	0, 0, 0, 0, 294, 296, 303, 0, 934, 297,
	479, 299, 298, 300, 301, 302, 480, 0, 481, 0,
	304, 936, 482, 937, 305, 306, 307, 938, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 483, 939, 317, 318, 940, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 332, 330, 941, 333, 334, 336, 335, 0,
	0, 942, 0, 484, 485, 337, 338, 0, 339, 340,
	341, 0, 0, 343, 344, 345, 0, 0, 346, 486,
	943, 347, 944, 487, 348, 342, 349, 350, 351, 352,
	353, 354, 0, 355, 356, 488, 357, 489, 358, 0,
	359, 0, 360, 361, 362, 363, 364, 365, 490, 366,
	367, 0, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 0, 381, 945, 382,
	383, 384, 385, 491, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 0, 404, 405, 398, 400, 401,
	402, 399, 403, 406, 407, 0, 408, 388, 389, 409,
	946, 410, 492, 411, 412, 0, 422, 413, 414, 415,
	390, 416, 420, 421, 417, 418, 419, 493, 0, 424,
	425, 423, 0, 426, 427, 428, 429, 430, 269, 431,
	270, 432, 0, 494, 495, 496, 497, 0, 439, 0,
	433, 434, 498, 435, 499, 0, 436, 437, 438, 0,
	440, 441, 0, 0, 442, 443, 444, 445, 447, 0,
	448, 0, 446, 449, 450, 451, 500, 501, 502, 0,
	453, 452, 503, 0, 0, 0, 0, 454, 455, 504,
	456, 457, 458, 1153, 1152, 0, 0, 0, 0, 1150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 459, 0, 0, 0, 0, 219, 220, 221, 222,
	460, 461, 223, 462, 224, 225, 463, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 464, 465, 466,
	0, 233, 467, 0, 1057, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 932, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 468,
	469, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 470,
	265, 266, 268, 271, 267, 272, 273, 274, 471, 472,
	0, 210, 0, 0, 0, 0, 0, 275, 276, 277,
	473, 278, 279, 0, 280, 0, 281, 0, 0, 933,
	282, 283, 0, 284, 474, 0, 475, 285, 0, 286,
	287, 288, 289, 476, 477, 478, 935, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 0, 294, 296, 303,
	0, 934, 297, 479, 299, 298, 300, 301, 302, 480,
	0, 481, 0, 304, 936, 482, 937, 305, 306, 307,
	938, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 483, 939, 317, 318, 940, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 941, 333, 334,
	336, 335, 0, 0, 942, 0, 484, 485, 337, 338,
	0, 339, 340, 341, 0, 0, 343, 344, 345, 0,
	0, 346, 486, 943, 347, 944, 487, 348, 342, 349,
	350, 351, 352, 353, 354, 0, 355, 356, 488, 357,
	489, 358, 0, 359, 0, 360, 361, 362, 363, 364,
	365, 490, 366, 367, 0, 368, 369, 370, 371, 372,
	0, 374, 375, 376, 373, 377, 378, 379, 380, 0,
	381, 945, 382, 383, 384, 385, 491, 386, 0, 387,
	391, 392, 393, 394, 395, 396, 397, 0, 404, 405,
	398, 400, 401, 402, 399, 403, 406, 407, 0, 408,
	388, 389, 409, 946, 410, 492, 411, 412, 0, 422,
	413, 414, 415, 390, 416, 420, 421, 417, 418, 419,
	493, 0, 424, 425, 423, 0, 426, 427, 428, 429,
	430, 269, 431, 270, 432, 0, 494, 495, 496, 497,
	0, 439, 0, 433, 434, 498, 435, 499, 0, 436,
	437, 438, 0, 440, 441, 0, 0, 442, 443, 444,
	445, 447, 0, 448, 0, 446, 449, 450, 451, 500,
	501, 502, 0, 453, 452, 503, 1153, 1152, 0, 0,
	454, 455, 504, 456, 457, 458, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 459, 0, 0, 0, 0, 219,
	220, 221, 222, 460, 461, 223, 462, 224, 225, 463,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	464, 465, 466, 0, 233, 467, 0, 1057, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 932, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 468, 469, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 470, 265, 266, 268, 271, 267, 272, 273,
	274, 471, 472, 0, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 473, 278, 279, 0, 280, 0, 281,
	0, 0, 933, 282, 283, 0, 284, 474, 0, 475,
	285, 0, 286, 287, 288, 289, 476, 477, 478, 935,
	290, 291, 0, 292, 293, 295, 0, 0, 0, 0,
	294, 296, 303, 0, 934, 297, 479, 299, 298, 300,
	301, 302, 480, 0, 481, 0, 304, 936, 482, 937,
	305, 306, 307, 938, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 483, 939, 317,
	318, 940, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 332, 330,
	941, 333, 334, 336, 335, 0, 0, 942, 0, 484,
	485, 337, 338, 0, 339, 340, 341, 0, 0, 343,
	344, 345, 0, 0, 346, 486, 943, 347, 944, 487,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 488, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 490, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 945, 382, 383, 384, 385, 491,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	0, 404, 405, 398, 400, 401, 402, 399, 403, 406,
	407, 0, 408, 388, 389, 409, 946, 410, 492, 411,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 421,
	417, 418, 419, 493, 0, 424, 425, 423, 0, 426,
	427, 428, 429, 430, 269, 431, 270, 432, 0, 494,
	495, 496, 497, 0, 439, 0, 433, 434, 498, 435,
	499, 0, 436, 437, 438, 0, 440, 441, 0, 0,
	442, 443, 444, 445, 447, 0, 448, 0, 446, 449,
	450, 451, 500, 501, 502, 1153, 453, 452, 503, 0,
	0, 0, 0, 454, 455, 504, 456, 457, 458, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 459, 0, 0, 0, 0, 219, 220,
	221, 222, 460, 461, 223, 462, 224, 225, 463, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 464,
	465, 466, 0, 233, 467, 0, 1057, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 932, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 468, 469, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 470, 265, 266, 268, 271, 267, 272, 273, 274,
	471, 472, 0, 210, 0, 0, 0, 0, 0, 275,
	276, 277, 473, 278, 279, 0, 280, 0, 281, 0,
	0, 933, 282, 283, 0, 284, 474, 0, 475, 285,
	0, 286, 287, 288, 289, 476, 477, 478, 935, 290,
	291, 0, 292, 293, 295, 0, 0, 0, 0, 294,
	296, 303, 0, 934, 297, 479, 299, 298, 300, 301,
	302, 480, 0, 481, 0, 304, 936, 482, 937, 305,
	306, 307, 938, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 483, 939, 317, 318,
	940, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 941,
	333, 334, 336, 335, 0, 0, 942, 0, 484, 485,
	337, 338, 0, 339, 340, 341, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 943, 347, 944, 487, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	488, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 490, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 945, 382, 383, 384, 385, 491, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 0,
	404, 405, 398, 400, 401, 402, 399, 403, 406, 407,
	0, 408, 388, 389, 409, 946, 410, 492, 411, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 421, 417,
	418, 419, 493, 0, 424, 425, 423, 0, 426, 427,
	428, 429, 430, 269, 431, 270, 432, 0, 494, 495,
	496, 497, 0, 439, 0, 433, 434, 498, 435, 499,
	0, 436, 437, 438, 0, 440, 441, 0, 0, 442,
	443, 444, 445, 447, 0, 448, 0, 446, 449, 450,
	451, 500, 501, 502, 207, 453, 452, 503, 0, 0,
	0, 0, 454, 455, 504, 456, 457, 458, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 459, 0, 0, 0, 0, 219, 220, 221,
	222, 460, 461, 223, 462, 224, 225, 463, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 464, 465,
	466, 2189, 233, 467, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 2186, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	468, 469, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	470, 265, 266, 268, 271, 267, 272, 273, 274, 471,
	472, 0, 2330, 0, 0, 0, 0, 0, 275, 276,
	277, 473, 278, 279, 0, 280, 0, 281, 2192, 0,
	0, 282, 283, 0, 284, 474, 0, 475, 285, 0,
	286, 287, 288, 289, 476, 477, 478, 0, 290, 291,
	0, 292, 293, 295, 0, 0, 0, 2327, 294, 296,
	303, 0, 0, 297, 479, 299, 298, 300, 301, 302,
	480, 0, 481, 0, 2329, 0, 482, 0, 305, 306,
	307, 0, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 483, 0, 317, 318, 2326,
	0, 319, 320, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 332, 330, 0, 333,
	334, 336, 335, 0, 0, 0, 0, 484, 485, 337,
	338, 0, 339, 340, 341, 0, 0, 343, 344, 345,
	0, 0, 346, 486, 0, 347, 0, 487, 348, 342,
	349, 350, 351, 352, 353, 354, 0, 355, 356, 488,
	357, 489, 358, 2191, 359, 0, 360, 361, 362, 363,
	364, 365, 490, 366, 367, 0, 368, 369, 370, 371,
	372, 0, 374, 375, 376, 373, 377, 378, 379, 380,
	0, 381, 0, 382, 383, 384, 385, 491, 386, 0,
	387, 391, 392, 393, 394, 395, 396, 397, 0, 404,
	405, 398, 400, 401, 402, 399, 403, 406, 407, 0,
	408, 388, 389, 409, 0, 410, 492, 411, 412, 0,
	422, 413, 414, 415, 390, 416, 420, 421, 417, 418,
	419, 493, 0, 424, 425, 423, 0, 426, 427, 428,
	429, 430, 269, 431, 270, 432, 0, 494, 495, 496,
	497, 0, 439, 0, 433, 434, 498, 435, 499, 0,
	436, 437, 438, 0, 440, 441, 0, 2328, 442, 443,
	444, 445, 447, 0, 448, 0, 446, 449, 450, 451,
	500, 501, 502, 207, 453, 452, 503, 0, 0, 0,
	0, 454, 455, 504, 456, 457, 458, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 459, 0, 0, 0, 0, 219, 220, 221, 222,
	460, 461, 223, 462, 224, 225, 463, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 464, 465, 466,
	2189, 233, 467, 0, 0, 2183, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 2186, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 468,
	469, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 470,
	265, 266, 268, 271, 267, 272, 273, 274, 471, 472,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	473, 278, 279, 0, 280, 0, 281, 2192, 0, 0,
	282, 283, 0, 284, 474, 0, 475, 285, 0, 286,
	287, 288, 289, 2182, 477, 478, 0, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 0, 294, 296, 303,
	0, 0, 297, 479, 299, 298, 300, 301, 302, 480,
	0, 481, 0, 304, 0, 482, 0, 305, 306, 307,
	0, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 483, 0, 317, 318, 0, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 0, 333, 334,
	336, 335, 0, 0, 0, 0, 484, 485, 337, 338,
	0, 339, 340, 341, 0, 0, 343, 344, 345, 0,
	0, 346, 486, 0, 347, 0, 487, 348, 342, 349,
	350, 351, 352, 353, 354, 0, 355, 356, 488, 357,
	489, 358, 2191, 359, 0, 360, 361, 362, 363, 364,
	365, 490, 366, 367, 0, 368, 369, 370, 371, 372,
	0, 374, 375, 376, 373, 377, 378, 379, 380, 0,
	381, 0, 382, 383, 384, 385, 491, 386, 0, 387,
	391, 392, 393, 394, 395, 396, 397, 0, 404, 405,
	398, 400, 401, 402, 399, 403, 406, 407, 0, 408,
	388, 389, 409, 0, 410, 492, 411, 412, 0, 422,
	413, 414, 415, 390, 416, 420, 421, 417, 418, 419,
	493, 0, 424, 425, 423, 0, 426, 427, 428, 429,
	430, 269, 431, 270, 432, 0, 494, 495, 496, 497,
	0, 439, 0, 433, 434, 498, 435, 499, 0, 436,
	437, 438, 0, 440, 441, 0, 2190, 442, 443, 444,
	445, 447, 0, 448, 0, 446, 449, 450, 451, 500,
	501, 502, 0, 453, 452, 503, 1369, 0, 207, 0,
	454, 455, 504, 456, 457, 458, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 459, 0, 0, 0,
	0, 219, 220, 221, 222, 460, 461, 223, 462, 224,
	225, 463, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 464, 465, 466, 0, 233, 467, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 468, 469, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 470, 265, 266, 268, 271, 267,
	272, 273, 274, 471, 472, 0, 210, 0, 0, 0,
	0, 0, 275, 276, 277, 473, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 474,
	0, 475, 285, 0, 286, 287, 288, 289, 476, 477,
	478, 0, 290, 291, 0, 292, 293, 295, 0, 0,
	0, 211, 294, 296, 303, 0, 0, 297, 479, 299,
	298, 300, 301, 302, 480, 0, 481, 0, 304, 0,
	482, 0, 305, 306, 307, 0, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 483,
	0, 317, 318, 0, 0, 319, 320, 0, 0, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	332, 330, 0, 333, 334, 336, 335, 0, 212, 0,
	0, 484, 485, 337, 338, 0, 339, 340, 341, 0,
	0, 343, 344, 345, 0, 0, 346, 486, 0, 347,
	0, 487, 348, 342, 349, 350, 351, 352, 353, 354,
	0, 355, 356, 488, 357, 489, 358, 0, 359, 0,
	360, 361, 362, 363, 364, 365, 490, 366, 367, 0,
	368, 369, 370, 371, 372, 0, 374, 375, 376, 373,
	377, 378, 379, 380, 0, 381, 0, 382, 383, 384,
	385, 491, 386, 0, 387, 391, 392, 393, 394, 395,
	396, 397, 0, 1372, 405, 398, 400, 401, 402, 399,
	403, 406, 407, 0, 408, 388, 389, 409, 0, 410,
	492, 411, 412, 0, 422, 413, 414, 415, 390, 416,
	420, 421, 417, 418, 419, 493, 0, 424, 425, 423,
	1370, 426, 427, 428, 429, 430, 269, 431, 270, 432,
	0, 494, 495, 496, 497, 0, 439, 0, 433, 434,
	498, 435, 499, 0, 436, 437, 438, 0, 440, 441,
	0, 0, 442, 443, 444, 445, 447, 0, 448, 0,
	446, 449, 450, 451, 500, 501, 502, 0, 1371, 452,
	503, 1141, 0, 207, 0, 454, 455, 504, 456, 457,
	458, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 459, 0, 0, 0, 0, 219, 220, 221, 222,
	460, 461, 223, 462, 224, 225, 463, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 464, 465, 466,
	0, 233, 467, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 468,
	469, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 470,
	265, 266, 268, 271, 267, 272, 273, 274, 471, 472,
	0, 210, 0, 0, 0, 0, 0, 275, 276, 277,
	473, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 474, 0, 475, 285, 0, 286,
	287, 288, 289, 1143, 477, 478, 0, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 211, 294, 296, 303,
	0, 0, 297, 479, 299, 298, 300, 301, 302, 480,
	0, 481, 0, 304, 0, 482, 0, 305, 306, 307,
	0, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 483, 0, 317, 318, 0, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 0, 333, 334,
	336, 335, 0, 212, 0, 0, 484, 485, 337, 338,
	0, 339, 340, 341, 0, 987, 343, 344, 345, 0,
	0, 346, 486, 0, 347, 0, 487, 348, 342, 349,
	350, 351, 352, 353, 354, 0, 355, 356, 488, 357,
	489, 358, 0, 359, 0, 360, 361, 362, 363, 364,
	365, 490, 366, 367, 0, 368, 369, 370, 371, 372,
	0, 374, 375, 376, 373, 377, 378, 379, 380, 0,
	381, 0, 382, 383, 384, 385, 491, 386, 0, 387,
	391, 392, 393, 394, 395, 396, 397, 0, 404, 405,
	398, 400, 401, 402, 399, 403, 406, 407, 0, 408,
	388, 389, 409, 0, 410, 492, 411, 412, 0, 422,
	413, 414, 415, 390, 416, 420, 421, 417, 418, 419,
	493, 0, 424, 425, 423, 0, 426, 427, 428, 429,
	430, 269, 431, 270, 432, 0, 494, 495, 496, 497,
	0, 439, 0, 433, 434, 498, 435, 499, 0, 436,
	437, 438, 0, 440, 441, 0, 0, 442, 443, 444,
	445, 447, 0, 448, 0, 446, 449, 450, 451, 500,
	501, 502, 0, 453, 452, 503, 1138, 0, 207, 0,
	454, 455, 504, 456, 457, 458, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 459, 0, 0, 0,
	0, 219, 220, 221, 222, 460, 461, 223, 462, 224,
	225, 463, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 464, 465, 466, 0, 233, 467, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 468, 469, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 470, 265, 266, 268, 271, 267,
	272, 273, 274, 471, 472, 0, 210, 0, 0, 0,
	0, 0, 275, 276, 277, 473, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 474,
	0, 475, 285, 0, 286, 287, 288, 289, 1140, 477,
	478, 0, 290, 291, 0, 292, 293, 295, 0, 0,
	0, 211, 294, 296, 303, 0, 0, 297, 479, 299,
	298, 300, 301, 302, 480, 0, 481, 0, 304, 0,
	482, 0, 305, 306, 307, 0, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 483,
	0, 317, 318, 0, 0, 319, 320, 0, 0, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	332, 330, 0, 333, 334, 336, 335, 0, 212, 0,
	0, 484, 485, 337, 338, 0, 339, 340, 341, 0,
	987, 343, 344, 345, 0, 0, 346, 486, 0, 347,
	0, 487, 348, 342, 349, 350, 351, 352, 353, 354,
	0, 355, 356, 488, 357, 489, 358, 0, 359, 0,
	360, 361, 362, 363, 364, 365, 490, 366, 367, 0,
	368, 369, 370, 371, 372, 0, 374, 375, 376, 373,
	377, 378, 379, 380, 0, 381, 0, 382, 383, 384,
	385, 491, 386, 0, 387, 391, 392, 393, 394, 395,
	396, 397, 0, 404, 405, 398, 400, 401, 402, 399,
	403, 406, 407, 0, 408, 388, 389, 409, 0, 410,
	492, 411, 412, 0, 422, 413, 414, 415, 390, 416,
	420, 421, 417, 418, 419, 493, 0, 424, 425, 423,
	0, 426, 427, 428, 429, 430, 269, 431, 270, 432,
	0, 494, 495, 496, 497, 0, 439, 0, 433, 434,
	498, 435, 499, 0, 436, 437, 438, 0, 440, 441,
	0, 0, 442, 443, 444, 445, 447, 0, 448, 0,
	446, 449, 450, 451, 500, 501, 502, 0, 453, 452,
	503, 1045, 0, 207, 0, 454, 455, 504, 456, 457,
	458, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 459, 0, 0, 0, 0, 219, 220, 221, 222,
	460, 461, 223, 462, 224, 225, 463, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 464, 465, 466,
	0, 233, 467, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 468,
	469, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 470,
	265, 266, 268, 271, 267, 272, 273, 274, 471, 472,
	0, 210, 0, 0, 0, 0, 0, 275, 276, 277,
	473, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 474, 0, 475, 285, 0, 286,
	287, 288, 289, 1047, 477, 478, 0, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 211, 294, 296, 303,
	0, 0, 297, 479, 299, 298, 300, 301, 302, 480,
	0, 481, 0, 304, 0, 482, 0, 305, 306, 307,
	0, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 483, 0, 317, 318, 0, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 0, 333, 334,
	336, 335, 0, 212, 0, 0, 484, 485, 337, 338,
	0, 339, 340, 341, 0, 987, 343, 344, 345, 0,
	0, 346, 486, 0, 347, 0, 487, 348, 342, 349,
	350, 351, 352, 353, 354, 0, 355, 356, 488, 357,
	489, 358, 0, 359, 0, 360, 361, 362, 363, 364,
	365, 490, 366, 367, 0, 368, 369, 370, 371, 372,
	0, 374, 375, 376, 373, 377, 378, 379, 380, 0,
	381, 0, 382, 383, 384, 385, 491, 386, 0, 387,
	391, 392, 393, 394, 395, 396, 397, 0, 404, 405,
	398, 400, 401, 402, 399, 403, 406, 407, 0, 408,
	388, 389, 409, 0, 410, 492, 411, 412, 0, 422,
	413, 414, 415, 390, 416, 420, 421, 417, 418, 419,
	493, 0, 424, 425, 423, 0, 426, 427, 428, 429,
	430, 269, 431, 270, 432, 0, 494, 495, 496, 497,
	0, 439, 0, 433, 434, 498, 435, 499, 0, 436,
	437, 438, 0, 440, 441, 0, 0, 442, 443, 444,
	445, 447, 0, 448, 0, 446, 449, 450, 451, 500,
	501, 502, 0, 453, 452, 503, 535, 0, 207, 0,
	454, 455, 504, 456, 457, 458, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 534, 217,
	524, 218, 0, 0, 0, 0, 459, 0, 0, 0,
	0, 219, 220, 221, 222, 460, 461, 223, 462, 224,
	225, 463, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 464, 465, 466, 0, 233, 467, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 527, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 468, 469, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 470, 265, 266, 268, 271, 267,
	272, 273, 274, 471, 472, 0, 0, 0, 0, 0,
	0, 0, 275, 276, 277, 473, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 528, 284, 474,
	0, 475, 285, 0, 286, 287, 288, 289, 476, 477,
	478, 0, 290, 291, 0, 292, 293, 295, 0, 0,
	0, 0, 294, 296, 303, 0, 0, 297, 479, 299,
	298, 300, 301, 302, 480, 0, 481, 0, 304, 0,
	482, 0, 305, 306, 307, 0, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 483,
	0, 317, 318, 0, 0, 319, 320, 0, 0, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	332, 330, 0, 333, 334, 336, 335, 0, 0, 0,
	0, 484, 485, 337, 338, 0, 339, 340, 341, 0,
	0, 343, 344, 345, 0, 0, 346, 486, 0, 347,
	0, 487, 348, 342, 349, 350, 351, 352, 353, 354,
	0, 355, 356, 488, 357, 489, 358, 0, 359, 0,
	360, 361, 362, 363, 364, 365, 490, 366, 367, 0,
	368, 369, 370, 371, 372, 0, 374, 375, 376, 373,
	377, 378, 379, 380, 0, 381, 0, 382, 383, 384,
	385, 491, 386, 0, 387, 391, 392, 393, 394, 395,
	396, 397, 529, 404, 405, 398, 400, 401, 402, 399,
	403, 406, 407, 0, 408, 388, 389, 409, 0, 410,
	492, 411, 412, 0, 422, 413, 414, 415, 390, 416,
	420, 421, 417, 418, 419, 493, 0, 424, 425, 423,
	0, 426, 427, 428, 429, 430, 269, 431, 270, 432,
	0, 494, 495, 496, 497, 0, 439, 0, 433, 434,
	498, 435, 499, 0, 436, 437, 438, 0, 440, 441,
	0, 0, 442, 443, 444, 445, 447, 0, 448, 0,
	446, 449, 450, 451, 500, 501, 502, 0, 453, 452,
	503, 523, 0, 207, 0, 454, 455, 504, 456, 457,
	458, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 524, 218, 0, 0, 0,
	0, 459, 0, 0, 0, 0, 219, 220, 221, 222,
	460, 461, 223, 462, 224, 225, 463, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 464, 465, 466,
	0, 233, 467, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 527, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 468,
	469, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 470,
	265, 266, 268, 271, 267, 272, 273, 274, 471, 472,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	473, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 528, 284, 474, 0, 475, 285, 0, 286,
	287, 288, 289, 476, 477, 478, 0, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 0, 294, 296, 303,
	0, 0, 297, 479, 299, 298, 300, 301, 302, 480,
	0, 481, 0, 304, 0, 482, 0, 305, 306, 307,
	0, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 483, 0, 317, 318, 0, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 0, 333, 334,
	336, 335, 0, 0, 0, 0, 484, 485, 337, 338,
	0, 339, 340, 341, 0, 0, 343, 344, 345, 0,
	0, 346, 486, 0, 347, 0, 487, 348, 342, 349,
	350, 351, 352, 353, 354, 0, 355, 356, 488, 357,
	489, 358, 0, 359, 0, 360, 361, 362, 363, 364,
	365, 490, 366, 367, 0, 368, 369, 370, 371, 372,
	0, 374, 375, 376, 373, 377, 378, 379, 380, 0,
	381, 0, 382, 383, 384, 385, 491, 386, 0, 387,
	391, 392, 393, 394, 395, 396, 397, 529, 404, 405,
	398, 400, 401, 402, 399, 403, 406, 407, 0, 408,
	388, 389, 409, 0, 410, 492, 411, 412, 0, 422,
	413, 414, 415, 390, 416, 420, 421, 417, 418, 419,
	493, 0, 424, 425, 423, 0, 426, 427, 428, 429,
	430, 269, 431, 270, 432, 0, 494, 495, 496, 497,
	0, 439, 0, 433, 434, 498, 435, 499, 0, 436,
	437, 438, 0, 440, 441, 0, 0, 442, 443, 444,
	445, 447, 0, 448, 0, 446, 449, 450, 451, 500,
	501, 502, 207, 453, 452, 503, 0, 0, 0, 0,
	454, 455, 504, 456, 457, 458, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	459, 0, 0, 0, 0, 219, 220, 221, 222, 460,
	461, 223, 462, 224, 225, 463, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 464, 465, 466, 0,
	233, 467, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 468, 469,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 470, 265,
	266, 268, 271, 267, 272, 273, 274, 471, 472, 0,
	210, 0, 0, 0, 0, 0, 275, 276, 277, 473,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 474, 0, 475, 285, 0, 286, 287,
	288, 289, 476, 477, 478, 0, 290, 291, 0, 292,
	293, 295, 0, 0, 0, 211, 294, 296, 303, 0,
	0, 297, 479, 299, 298, 300, 301, 302, 480, 0,
	481, 0, 304, 0, 482, 0, 305, 306, 307, 0,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 483, 0, 317, 318, 0, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 332, 330, 0, 333, 334, 336,
	335, 0, 212, 0, 0, 484, 485, 337, 338, 0,
	339, 340, 341, 0, 987, 343, 344, 345, 0, 0,
	346, 486, 0, 347, 0, 487, 348, 342, 349, 350,
	351, 352, 353, 354, 0, 355, 356, 488, 357, 489,
	358, 0, 359, 0, 360, 361, 362, 363, 364, 365,
	490, 366, 367, 0, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 0, 381,
	0, 382, 383, 384, 385, 491, 386, 0, 387, 391,
	392, 393, 394, 395, 396, 397, 0, 404, 405, 398,
	400, 401, 402, 399, 403, 406, 407, 0, 408, 388,
	389, 409, 0, 410, 492, 411, 412, 0, 422, 413,
	414, 415, 390, 416, 420, 421, 417, 418, 419, 493,
	0, 424, 425, 423, 0, 426, 427, 428, 429, 430,
	269, 431, 270, 432, 0, 494, 495, 496, 497, 0,
	439, 0, 433, 434, 498, 435, 499, 0, 436, 437,
	438, 0, 440, 441, 0, 0, 442, 443, 444, 445,
	447, 0, 448, 0, 446, 449, 450, 451, 500, 501,
	502, 0, 453, 452, 503, 2259, 0, 207, 0, 454,
	455, 504, 456, 457, 458, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 459, 0, 0, 0, 0,
	219, 220, 221, 222, 460, 461, 223, 462, 224, 225,
	463, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 464, 465, 466, 0, 233, 467, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 468, 469, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 470, 265, 266, 268, 271, 267, 272,
	273, 274, 471, 472, 0, 210, 0, 0, 0, 0,
	0, 275, 276, 277, 473, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 474, 0,
	475, 285, 0, 286, 287, 288, 289, 476, 477, 478,
	0, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	211, 294, 296, 303, 0, 0, 297, 479, 299, 298,
	300, 301, 302, 480, 0, 481, 0, 304, 0, 482,
	0, 305, 306, 307, 0, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 483, 0,
	317, 318, 0, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 0, 333, 334, 336, 335, 0, 212, 0, 0,
	484, 485, 337, 338, 0, 339, 340, 341, 0, 0,
	343, 344, 345, 0, 0, 346, 486, 0, 347, 0,
	487, 348, 342, 349, 350, 351, 352, 353, 354, 0,
	355, 356, 488, 357, 489, 358, 0, 359, 0, 360,
	361, 362, 363, 364, 365, 490, 366, 367, 0, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 0, 381, 0, 382, 383, 384, 385,
	491, 386, 0, 387, 391, 392, 393, 394, 395, 396,
	397, 0, 404, 405, 398, 400, 401, 402, 399, 403,
	406, 407, 0, 408, 388, 389, 409, 0, 410, 492,
	411, 412, 0, 422, 413, 414, 415, 390, 416, 420,
	421, 417, 418, 419, 493, 0, 424, 425, 423, 0,
	426, 427, 428, 429, 430, 269, 431, 270, 432, 0,
	494, 495, 496, 497, 0, 439, 0, 433, 434, 498,
	435, 499, 0, 436, 437, 438, 0, 440, 441, 0,
	0, 442, 443, 444, 445, 447, 0, 448, 0, 446,
	449, 450, 451, 500, 501, 502, 0, 453, 452, 503,
	1841, 0, 207, 0, 454, 455, 504, 456, 457, 458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	459, 0, 0, 0, 0, 219, 220, 221, 222, 460,
	461, 223, 462, 224, 225, 463, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 464, 465, 466, 0,
	233, 467, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 468, 469,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 470, 265,
	266, 268, 271, 267, 272, 273, 274, 471, 472, 0,
	210, 0, 0, 0, 0, 0, 275, 276, 277, 473,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 474, 0, 475, 285, 0, 286, 287,
	288, 289, 476, 477, 478, 0, 290, 291, 0, 292,
	293, 295, 0, 0, 0, 211, 294, 296, 303, 0,
	0, 297, 479, 299, 298, 300, 301, 302, 480, 0,
	481, 0, 304, 0, 482, 0, 305, 306, 307, 0,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 483, 0, 317, 318, 0, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 332, 330, 0, 333, 334, 336,
	335, 0, 212, 0, 0, 484, 485, 337, 338, 0,
	339, 340, 341, 0, 0, 343, 344, 345, 0, 0,
	346, 486, 0, 347, 0, 487, 348, 342, 349, 350,
	351, 352, 353, 354, 0, 355, 356, 488, 357, 489,
	358, 0, 359, 0, 360, 361, 362, 363, 364, 365,
	490, 366, 367, 0, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 0, 381,
	0, 382, 383, 384, 385, 491, 386, 0, 387, 391,
	392, 393, 394, 395, 396, 397, 0, 404, 405, 398,
	400, 401, 402, 399, 403, 406, 407, 0, 408, 388,
	389, 409, 0, 410, 492, 411, 412, 0, 422, 413,
	414, 415, 390, 416, 420, 421, 417, 418, 419, 493,
	0, 424, 425, 423, 0, 426, 427, 428, 429, 430,
	269, 431, 270, 432, 0, 494, 495, 496, 497, 0,
	439, 0, 433, 434, 498, 435, 499, 0, 436, 437,
	438, 0, 440, 441, 0, 0, 442, 443, 444, 445,
	447, 0, 448, 0, 446, 449, 450, 451, 500, 501,
	502, 207, 453, 452, 503, 0, 0, 0, 0, 454,
	455, 504, 456, 457, 458, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 459,
	0, 0, 0, 0, 219, 220, 221, 222, 460, 461,
	223, 462, 224, 225, 463, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 464, 465, 466, 0, 233,
	467, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 468, 469, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 470, 265, 266,
	268, 271, 267, 272, 273, 274, 471, 472, 0, 210,
	0, 0, 0, 0, 0, 275, 276, 277, 473, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 474, 0, 475, 285, 0, 286, 287, 288,
	289, 476, 477, 478, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 211, 294, 296, 303, 0, 0,
	297, 479, 299, 298, 300, 301, 302, 480, 0, 481,
	0, 304, 0, 482, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 483, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 212, 0, 0, 484, 485, 337, 338, 0, 339,
	340, 341, 0, 0, 343, 344, 345, 0, 0, 346,
	486, 0, 347, 0, 487, 348, 342, 349, 350, 351,
	352, 353, 354, 0, 355, 356, 488, 357, 489, 358,
	0, 359, 0, 360, 361, 362, 363, 364, 365, 490,
	366, 367, 0, 368, 369, 370, 371, 372, 0, 374,
	375, 376, 373, 377, 378, 379, 380, 0, 381, 0,
	382, 383, 384, 385, 491, 386, 0, 387, 391, 392,
	393, 394, 395, 396, 397, 0, 404, 405, 398, 400,
	401, 402, 399, 403, 406, 407, 0, 408, 388, 389,
	409, 0, 410, 492, 411, 412, 0, 422, 413, 414,
	415, 390, 416, 420, 421, 417, 418, 419, 493, 0,
	424, 425, 423, 1779, 426, 427, 428, 429, 430, 269,
	431, 270, 432, 0, 494, 495, 496, 497, 0, 439,
	0, 433, 434, 498, 435, 499, 0, 436, 437, 438,
	0, 440, 441, 0, 0, 442, 443, 444, 445, 447,
	0, 448, 0, 446, 449, 450, 451, 500, 501, 502,
	0, 453, 452, 503, 1772, 0, 207, 0, 454, 455,
	504, 456, 457, 458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 459, 0, 0, 0, 0, 219,
	220, 221, 222, 460, 461, 223, 462, 224, 225, 463,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	464, 465, 466, 0, 233, 467, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 468, 469, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 470, 265, 266, 268, 271, 267, 272, 273,
	274, 471, 472, 0, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 473, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 474, 0, 475,
	285, 0, 286, 287, 288, 289, 1771, 477, 478, 0,
	290, 291, 0, 292, 293, 295, 0, 0, 0, 211,
	294, 296, 303, 0, 0, 297, 479, 299, 298, 300,
	301, 302, 480, 0, 481, 0, 304, 0, 482, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 483, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 332, 330,
	0, 333, 334, 336, 335, 0, 212, 0, 0, 484,
	485, 337, 338, 0, 339, 340, 341, 0, 0, 343,
	344, 345, 0, 0, 346, 486, 0, 347, 0, 487,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 488, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 490, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 0, 382, 383, 384, 385, 491,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	0, 404, 405, 398, 400, 401, 402, 399, 403, 406,
	407, 0, 408, 388, 389, 409, 0, 410, 492, 411,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 421,
	417, 418, 419, 493, 0, 424, 425, 423, 0, 426,
	427, 428, 429, 430, 269, 431, 270, 432, 0, 494,
	495, 496, 497, 0, 439, 0, 433, 434, 498, 435,
	499, 0, 436, 437, 438, 0, 440, 441, 0, 0,
	442, 443, 444, 445, 447, 0, 448, 0, 446, 449,
	450, 451, 500, 501, 502, 0, 453, 452, 503, 1767,
	0, 207, 0, 454, 455, 504, 456, 457, 458, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 459,
	0, 0, 0, 0, 219, 220, 221, 222, 460, 461,
	223, 462, 224, 225, 463, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 464, 465, 466, 0, 233,
	467, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 468, 469, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 470, 265, 266,
	268, 271, 267, 272, 273, 274, 471, 472, 0, 210,
	0, 0, 0, 0, 0, 275, 276, 277, 473, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 474, 0, 475, 285, 0, 286, 287, 288,
	289, 1769, 477, 478, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 211, 294, 296, 303, 0, 0,
	297, 479, 299, 298, 300, 301, 302, 480, 0, 481,
	0, 304, 0, 482, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 483, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 212, 0, 0, 484, 485, 337, 338, 0, 339,
	340, 341, 0, 0, 343, 344, 345, 0, 0, 346,
	486, 0, 347, 0, 487, 348, 342, 349, 350, 351,
	352, 353, 354, 0, 355, 356, 488, 357, 489, 358,
	0, 359, 0, 360, 361, 362, 363, 364, 365, 490,
	366, 367, 0, 368, 369, 370, 371, 372, 0, 374,
	375, 376, 373, 377, 378, 379, 380, 0, 381, 0,
	382, 383, 384, 385, 491, 386, 0, 387, 391, 392,
	393, 394, 395, 396, 397, 0, 404, 405, 398, 400,
	401, 402, 399, 403, 406, 407, 0, 408, 388, 389,
	409, 0, 410, 492, 411, 412, 0, 422, 413, 414,
	415, 390, 416, 420, 421, 417, 418, 419, 493, 0,
	424, 425, 423, 0, 426, 427, 428, 429, 430, 269,
	431, 270, 432, 0, 494, 495, 496, 497, 0, 439,
	0, 433, 434, 498, 435, 499, 0, 436, 437, 438,
	0, 440, 441, 0, 0, 442, 443, 444, 445, 447,
	0, 448, 0, 446, 449, 450, 451, 500, 501, 502,
	0, 453, 452, 503, 1283, 0, 207, 0, 454, 455,
	504, 456, 457, 458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 459, 0, 0, 0, 0, 219,
	220, 221, 222, 460, 461, 223, 462, 224, 225, 463,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	464, 465, 466, 0, 233, 467, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 468, 469, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 470, 265, 266, 268, 271, 267, 272, 273,
	274, 471, 472, 0, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 473, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 474, 0, 475,
	285, 0, 286, 287, 288, 289, 1282, 477, 478, 0,
	290, 291, 0, 292, 293, 295, 0, 0, 0, 211,
	294, 296, 303, 0, 0, 297, 479, 299, 298, 300,
	301, 302, 480, 0, 481, 0, 304, 0, 482, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 483, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 332, 330,
	0, 333, 334, 336, 335, 0, 212, 0, 0, 484,
	485, 337, 338, 0, 339, 340, 341, 0, 0, 343,
	344, 345, 0, 0, 346, 486, 0, 347, 0, 487,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 488, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 490, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 0, 382, 383, 384, 385, 491,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	0, 404, 405, 398, 400, 401, 402, 399, 403, 406,
	407, 0, 408, 388, 389, 409, 0, 410, 492, 411,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 421,
	417, 418, 419, 493, 0, 424, 425, 423, 0, 426,
	427, 428, 429, 430, 269, 431, 270, 432, 0, 494,
	495, 496, 497, 0, 439, 0, 433, 434, 498, 435,
	499, 0, 436, 437, 438, 0, 440, 441, 0, 0,
	442, 443, 444, 445, 447, 0, 448, 0, 446, 449,
	450, 451, 500, 501, 502, 0, 453, 452, 503, 1280,
	0, 207, 0, 454, 455, 504, 456, 457, 458, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 459,
	0, 0, 0, 0, 219, 220, 221, 222, 460, 461,
	223, 462, 224, 225, 463, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 464, 465, 466, 0, 233,
	467, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 468, 469, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 470, 265, 266,
	268, 271, 267, 272, 273, 274, 471, 472, 0, 210,
	0, 0, 0, 0, 0, 275, 276, 277, 473, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 474, 0, 475, 285, 0, 286, 287, 288,
	289, 1279, 477, 478, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 211, 294, 296, 303, 0, 0,
	297, 479, 299, 298, 300, 301, 302, 480, 0, 481,
	0, 304, 0, 482, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 483, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 212, 0, 0, 484, 485, 337, 338, 0, 339,
	340, 341, 0, 0, 343, 344, 345, 0, 0, 346,
	486, 0, 347, 0, 487, 348, 342, 349, 350, 351,
	352, 353, 354, 0, 355, 356, 488, 357, 489, 358,
	0, 359, 0, 360, 361, 362, 363, 364, 365, 490,
	366, 367, 0, 368, 369, 370, 371, 372, 0, 374,
	375, 376, 373, 377, 378, 379, 380, 0, 381, 0,
	382, 383, 384, 385, 491, 386, 0, 387, 391, 392,
	393, 394, 395, 396, 397, 0, 404, 405, 398, 400,
	401, 402, 399, 403, 406, 407, 0, 408, 388, 389,
	409, 0, 410, 492, 411, 412, 0, 422, 413, 414,
	415, 390, 416, 420, 421, 417, 418, 419, 493, 0,
	424, 425, 423, 0, 426, 427, 428, 429, 430, 269,
	431, 270, 432, 0, 494, 495, 496, 497, 0, 439,
	0, 433, 434, 498, 435, 499, 0, 436, 437, 438,
	0, 440, 441, 0, 0, 442, 443, 444, 445, 447,
	0, 448, 0, 446, 449, 450, 451, 500, 501, 502,
	0, 453, 452, 503, 1277, 0, 207, 0, 454, 455,
	504, 456, 457, 458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 459, 0, 0, 0, 0, 219,
	220, 221, 222, 460, 461, 223, 462, 224, 225, 463,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	464, 465, 466, 0, 233, 467, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 468, 469, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 470, 265, 266, 268, 271, 267, 272, 273,
	274, 471, 472, 0, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 473, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 474, 0, 475,
	285, 0, 286, 287, 288, 289, 1276, 477, 478, 0,
	290, 291, 0, 292, 293, 295, 0, 0, 0, 211,
	294, 296, 303, 0, 0, 297, 479, 299, 298, 300,
	301, 302, 480, 0, 481, 0, 304, 0, 482, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 483, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 332, 330,
	0, 333, 334, 336, 335, 0, 212, 0, 0, 484,
	485, 337, 338, 0, 339, 340, 341, 0, 0, 343,
	344, 345, 0, 0, 346, 486, 0, 347, 0, 487,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 488, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 490, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 0, 382, 383, 384, 385, 491,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	0, 404, 405, 398, 400, 401, 402, 399, 403, 406,
	407, 0, 408, 388, 389, 409, 0, 410, 492, 411,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 421,
	417, 418, 419, 493, 0, 424, 425, 423, 0, 426,
	427, 428, 429, 430, 269, 431, 270, 432, 0, 494,
	495, 496, 497, 0, 439, 0, 433, 434, 498, 435,
	499, 0, 436, 437, 438, 0, 440, 441, 0, 0,
	442, 443, 444, 445, 447, 0, 448, 0, 446, 449,
	450, 451, 500, 501, 502, 0, 453, 452, 503, 1273,
	0, 207, 0, 454, 455, 504, 456, 457, 458, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 459,
	0, 0, 0, 0, 219, 220, 221, 222, 460, 461,
	223, 462, 224, 225, 463, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 464, 465, 466, 0, 233,
	467, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 468, 469, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 470, 265, 266,
	268, 271, 267, 272, 273, 274, 471, 472, 0, 210,
	0, 0, 0, 0, 0, 275, 276, 277, 473, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 474, 0, 475, 285, 0, 286, 287, 288,
	289, 1272, 477, 478, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 211, 294, 296, 303, 0, 0,
	297, 479, 299, 298, 300, 301, 302, 480, 0, 481,
	0, 304, 0, 482, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 483, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 212, 0, 0, 484, 485, 337, 338, 0, 339,
	340, 341, 0, 0, 343, 344, 345, 0, 0, 346,
	486, 0, 347, 0, 487, 348, 342, 349, 350, 351,
	352, 353, 354, 0, 355, 356, 488, 357, 489, 358,
	0, 359, 0, 360, 361, 362, 363, 364, 365, 490,
	366, 367, 0, 368, 369, 370, 371, 372, 0, 374,
	375, 376, 373, 377, 378, 379, 380, 0, 381, 0,
	382, 383, 384, 385, 491, 386, 0, 387, 391, 392,
	393, 394, 395, 396, 397, 0, 404, 405, 398, 400,
	401, 402, 399, 403, 406, 407, 0, 408, 388, 389,
	409, 0, 410, 492, 411, 412, 0, 422, 413, 414,
	415, 390, 416, 420, 421, 417, 418, 419, 493, 0,
	424, 425, 423, 0, 426, 427, 428, 429, 430, 269,
	431, 270, 432, 0, 494, 495, 496, 497, 0, 439,
	0, 433, 434, 498, 435, 499, 0, 436, 437, 438,
	0, 440, 441, 0, 0, 442, 443, 444, 445, 447,
	0, 448, 0, 446, 449, 450, 451, 500, 501, 502,
	0, 453, 452, 503, 1248, 0, 207, 0, 454, 455,
	504, 456, 457, 458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 459, 0, 0, 0, 0, 219,
	220, 221, 222, 460, 461, 223, 462, 224, 225, 463,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	464, 465, 466, 0, 233, 467, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 468, 469, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 470, 265, 266, 268, 271, 267, 272, 273,
	274, 471, 472, 0, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 473, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 474, 0, 475,
	285, 0, 286, 287, 288, 289, 476, 477, 478, 0,
	290, 291, 0, 292, 293, 295, 0, 0, 0, 211,
	294, 296, 303, 0, 0, 297, 479, 299, 298, 300,
	301, 302, 480, 0, 481, 0, 304, 0, 482, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 483, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 332, 330,
	0, 333, 334, 336, 335, 0, 212, 0, 0, 484,
	485, 337, 338, 0, 339, 340, 341, 0, 0, 343,
	344, 345, 0, 0, 346, 486, 0, 347, 0, 487,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 488, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 490, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 0, 382, 383, 384, 385, 491,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	0, 404, 405, 398, 400, 401, 402, 399, 403, 406,
	407, 0, 408, 388, 389, 409, 0, 410, 492, 411,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 421,
	417, 418, 419, 493, 0, 424, 425, 423, 0, 426,
	427, 428, 429, 430, 269, 431, 270, 432, 0, 494,
	495, 496, 497, 0, 439, 0, 433, 434, 498, 435,
	499, 0, 436, 437, 438, 0, 440, 441, 0, 0,
	442, 443, 444, 445, 447, 0, 448, 0, 446, 449,
	450, 451, 500, 501, 502, 0, 453, 452, 503, 1163,
	0, 207, 0, 454, 455, 504, 456, 457, 458, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 459,
	0, 0, 0, 0, 219, 220, 221, 222, 460, 461,
	223, 462, 224, 225, 463, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 464, 465, 466, 0, 233,
	467, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 468, 469, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 470, 265, 266,
	268, 271, 267, 272, 273, 274, 471, 472, 0, 210,
	0, 0, 0, 0, 0, 275, 276, 277, 473, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 474, 0, 475, 285, 0, 286, 287, 288,
	289, 1165, 477, 478, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 211, 294, 296, 303, 0, 0,
	297, 479, 299, 298, 300, 301, 302, 480, 0, 481,
	0, 304, 0, 482, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 483, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 212, 0, 0, 484, 485, 337, 338, 0, 339,
	340, 341, 0, 0, 343, 344, 345, 0, 0, 346,
	486, 0, 347, 0, 487, 348, 342, 349, 350, 351,
	352, 353, 354, 0, 355, 356, 488, 357, 489, 358,
	0, 359, 0, 360, 361, 362, 363, 364, 365, 490,
	366, 367, 0, 368, 369, 370, 371, 372, 0, 374,
	375, 376, 373, 377, 378, 379, 380, 0, 381, 0,
	382, 383, 384, 385, 491, 386, 0, 387, 391, 392,
	393, 394, 395, 396, 397, 0, 404, 405, 398, 400,
	401, 402, 399, 403, 406, 407, 0, 408, 388, 389,
	409, 0, 410, 492, 411, 412, 0, 422, 413, 414,
	415, 390, 416, 420, 421, 417, 418, 419, 493, 0,
	424, 425, 423, 0, 426, 427, 428, 429, 430, 269,
	431, 270, 432, 0, 494, 495, 496, 497, 0, 439,
	0, 433, 434, 498, 435, 499, 0, 436, 437, 438,
	0, 440, 441, 0, 0, 442, 443, 444, 445, 447,
	0, 448, 0, 446, 449, 450, 451, 500, 501, 502,
	207, 453, 452, 503, 0, 0, 0, 0, 454, 455,
	504, 456, 457, 458, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 459, 0,
	0, 0, 0, 219, 220, 221, 222, 460, 461, 223,
	462, 224, 225, 463, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 464, 465, 466, 0, 233, 467,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 468, 469, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 470, 265, 266, 268,
	271, 267, 272, 273, 274, 471, 472, 0, 210, 0,
	0, 0, 0, 0, 275, 276, 277, 473, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 474, 0, 475, 285, 0, 286, 287, 288, 289,
	476, 477, 478, 0, 290, 291, 0, 292, 293, 295,
	0, 0, 0, 211, 294, 296, 303, 0, 0, 297,
	479, 299, 298, 300, 301, 302, 480, 0, 481, 0,
	304, 0, 482, 0, 305, 306, 307, 0, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 483, 0, 317, 318, 0, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 332, 330, 0, 333, 334, 336, 335, 0,
	212, 0, 0, 484, 485, 337, 338, 0, 339, 340,
	341, 0, 0, 343, 344, 345, 0, 0, 346, 486,
	0, 347, 0, 487, 348, 342, 349, 350, 351, 352,
	353, 354, 0, 355, 356, 488, 357, 489, 358, 0,
	359, 0, 360, 361, 362, 363, 364, 365, 490, 366,
	367, 0, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 0, 381, 0, 382,
	383, 384, 385, 491, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 0, 404, 405, 398, 400, 401,
	402, 399, 403, 406, 407, 0, 408, 388, 389, 409,
	0, 410, 492, 411, 412, 0, 422, 413, 414, 415,
	390, 416, 420, 421, 417, 418, 419, 493, 0, 424,
	425, 423, 0, 426, 427, 428, 429, 430, 269, 431,
	270, 432, 0, 494, 495, 496, 497, 0, 439, 0,
	433, 434, 498, 435, 499, 0, 436, 437, 438, 0,
	440, 441, 0, 0, 442, 443, 444, 445, 447, 0,
	448, 0, 446, 449, 450, 451, 500, 501, 502, 207,
	453, 452, 503, 0, 0, 0, 0, 454, 455, 504,
	456, 457, 458, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 459, 0, 0,
	0, 0, 219, 220, 221, 222, 460, 461, 223, 462,
	224, 225, 463, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 464, 465, 466, 0, 233, 467, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 527, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 468, 469, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 470, 265, 266, 268, 271,
	267, 272, 273, 274, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 473, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 528, 284,
	474, 0, 475, 285, 0, 286, 287, 288, 289, 476,
	477, 478, 0, 290, 291, 0, 292, 293, 295, 0,
	0, 0, 0, 294, 296, 303, 0, 0, 297, 479,
	299, 298, 300, 301, 302, 480, 0, 481, 0, 304,
	0, 482, 0, 305, 306, 307, 0, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	483, 0, 317, 318, 0, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 332, 330, 0, 333, 334, 336, 335, 0, 0,
	0, 0, 484, 485, 337, 338, 0, 339, 340, 341,
	0, 0, 343, 344, 345, 0, 0, 346, 486, 0,
	347, 0, 487, 348, 342, 349, 350, 351, 352, 353,
	354, 0, 355, 356, 488, 357, 489, 358, 0, 359,
	0, 360, 361, 362, 363, 364, 365, 490, 366, 367,
	0, 368, 369, 370, 371, 372, 0, 374, 375, 376,
	373, 377, 378, 379, 380, 0, 381, 0, 382, 383,
	384, 385, 491, 386, 0, 387, 391, 392, 393, 394,
	395, 396, 397, 529, 404, 405, 398, 400, 401, 402,
	399, 403, 406, 407, 0, 408, 388, 389, 409, 0,
	410, 492, 411, 412, 0, 422, 413, 414, 415, 390,
	416, 420, 421, 417, 418, 419, 493, 0, 424, 425,
	423, 0, 426, 427, 428, 429, 430, 269, 431, 270,
	432, 0, 494, 495, 496, 497, 0, 439, 0, 433,
	434, 498, 435, 499, 0, 436, 437, 438, 0, 440,
	441, 0, 0, 442, 443, 444, 445, 447, 0, 448,
	0, 446, 449, 450, 451, 500, 501, 502, 0, 453,
	452, 503, 673, 0, 207, 0, 454, 455, 504, 456,
	457, 458, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 459, 0, 0, 0, 0, 219, 220, 221,
	222, 460, 461, 223, 462, 224, 225, 463, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 464, 465,
	466, 0, 233, 467, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	468, 469, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	470, 265, 266, 268, 271, 267, 272, 273, 274, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 275, 276,
	277, 473, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 474, 0, 475, 285, 0,
	286, 287, 288, 289, 476, 477, 478, 0, 290, 291,
	0, 292, 293, 295, 0, 0, 0, 0, 294, 296,
	303, 0, 0, 297, 479, 299, 298, 300, 301, 302,
	480, 0, 481, 0, 304, 0, 482, 0, 305, 306,
	307, 0, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 483, 0, 317, 318, 0,
	0, 319, 320, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 332, 330, 0, 333,
	334, 336, 335, 0, 0, 0, 0, 484, 485, 337,
	338, 0, 339, 340, 341, 0, 0, 343, 344, 345,
	0, 0, 346, 486, 0, 347, 0, 487, 348, 342,
	349, 350, 351, 352, 353, 354, 0, 355, 356, 488,
	357, 489, 358, 0, 359, 0, 360, 361, 362, 363,
	364, 365, 490, 366, 367, 0, 368, 369, 370, 371,
	372, 0, 374, 375, 376, 373, 377, 378, 379, 380,
	0, 381, 0, 382, 383, 384, 385, 491, 386, 0,
	387, 391, 392, 393, 394, 395, 396, 397, 0, 404,
	405, 398, 400, 401, 402, 399, 403, 406, 407, 0,
	408, 388, 389, 409, 0, 410, 492, 411, 412, 0,
	422, 413, 414, 415, 390, 416, 420, 421, 417, 418,
	419, 493, 0, 424, 425, 423, 672, 426, 427, 428,
	429, 430, 269, 431, 270, 432, 0, 494, 495, 496,
	497, 0, 439, 0, 433, 434, 498, 435, 499, 0,
	436, 437, 438, 0, 440, 441, 0, 0, 442, 443,
	444, 445, 447, 0, 448, 0, 446, 449, 450, 451,
	500, 501, 502, 0, 453, 452, 503, 512, 0, 207,
	0, 454, 455, 504, 456, 457, 458, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 511, 218, 0, 0, 0, 0, 459, 0, 0,
	0, 0, 219, 220, 221, 222, 460, 461, 223, 462,
	224, 225, 463, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 464, 465, 466, 0, 233, 467, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 468, 469, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 470, 265, 266, 268, 271,
	267, 272, 273, 274, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 473, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	474, 0, 475, 285, 0, 286, 287, 288, 289, 476,
	477, 478, 0, 290, 291, 0, 292, 293, 295, 0,
	0, 0, 0, 294, 296, 303, 0, 0, 297, 479,
	299, 298, 300, 301, 302, 480, 0, 481, 0, 304,
	0, 482, 0, 305, 306, 307, 0, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	483, 0, 317, 318, 0, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 332, 330, 0, 333, 334, 336, 335, 0, 0,
	0, 0, 484, 485, 337, 338, 0, 339, 340, 341,
	0, 0, 343, 344, 345, 0, 0, 346, 486, 0,
	347, 0, 487, 348, 342, 349, 350, 351, 352, 353,
	354, 0, 355, 356, 488, 357, 489, 510, 0, 359,
	0, 360, 361, 362, 363, 364, 365, 490, 366, 367,
	0, 368, 369, 370, 371, 372, 0, 374, 375, 376,
	373, 377, 378, 379, 380, 0, 381, 0, 382, 383,
	384, 385, 491, 386, 0, 387, 391, 392, 393, 394,
	395, 396, 397, 0, 404, 405, 398, 400, 401, 402,
	399, 403, 406, 407, 0, 408, 388, 389, 409, 0,
	410, 492, 411, 412, 0, 422, 413, 414, 415, 390,
	416, 420, 421, 417, 418, 419, 493, 0, 424, 425,
	423, 0, 426, 427, 428, 429, 430, 269, 431, 270,
	432, 0, 494, 495, 496, 497, 0, 439, 0, 433,
	434, 498, 435, 499, 0, 436, 437, 438, 0, 440,
	441, 0, 0, 442, 443, 444, 445, 447, 0, 448,
	0, 446, 449, 450, 451, 500, 501, 502, 207, 453,
	452, 503, 0, 0, 0, 0, 454, 455, 504, 456,
	457, 458, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 459, 0, 2123, 0,
	0, 219, 220, 221, 222, 460, 461, 223, 462, 224,
	225, 463, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 464, 465, 466, 0, 233, 467, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 468, 469, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 470, 265, 266, 268, 271, 267,
	272, 273, 274, 471, 472, 0, 0, 0, 0, 0,
	0, 0, 275, 276, 277, 473, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 474,
	0, 475, 285, 0, 286, 287, 288, 289, 476, 477,
	478, 0, 290, 291, 0, 292, 293, 295, 0, 0,
	0, 0, 294, 296, 303, 0, 0, 297, 479, 299,
	298, 300, 301, 302, 480, 0, 481, 0, 304, 0,
	482, 0, 305, 306, 307, 0, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 483,
	0, 317, 318, 0, 0, 319, 320, 0, 0, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	332, 330, 0, 333, 334, 336, 335, 0, 0, 0,
	0, 484, 485, 337, 338, 0, 339, 340, 341, 0,
	0, 343, 344, 345, 0, 0, 346, 486, 0, 347,
	0, 487, 348, 342, 349, 350, 351, 352, 353, 354,
	0, 355, 356, 488, 357, 489, 358, 0, 359, 0,
	360, 361, 362, 363, 364, 365, 490, 366, 367, 0,
	368, 369, 370, 371, 372, 0, 374, 375, 376, 373,
	377, 378, 379, 380, 0, 381, 0, 382, 383, 384,
	385, 491, 386, 0, 387, 391, 392, 393, 394, 395,
	396, 397, 0, 404, 405, 398, 400, 401, 402, 399,
	403, 406, 407, 0, 408, 388, 389, 409, 0, 410,
	492, 411, 412, 0, 422, 413, 414, 415, 390, 416,
	420, 421, 417, 418, 419, 493, 0, 424, 425, 423,
	0, 426, 427, 428, 429, 430, 269, 431, 270, 432,
	0, 494, 495, 496, 497, 0, 439, 0, 433, 434,
	498, 435, 499, 0, 436, 437, 438, 0, 440, 441,
	0, 0, 442, 443, 444, 445, 447, 0, 448, 0,
	446, 449, 450, 451, 500, 501, 502, 0, 453, 452,
	503, 207, 2317, 0, 0, 454, 455, 504, 456, 457,
	458, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 459,
	0, 0, 0, 0, 219, 220, 221, 222, 460, 461,
	223, 462, 224, 225, 463, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 464, 465, 466, 0, 233,
	467, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 468, 469, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 470, 265, 266,
	268, 271, 267, 272, 273, 274, 471, 472, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 473, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 474, 0, 475, 285, 0, 286, 287, 288,
	289, 476, 477, 478, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 0,
	297, 479, 299, 298, 300, 301, 302, 480, 0, 481,
	0, 304, 0, 482, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 483, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 0, 0, 0, 484, 485, 337, 338, 0, 339,
	340, 341, 0, 0, 343, 344, 345, 0, 0, 346,
	486, 0, 347, 0, 487, 348, 342, 349, 350, 351,
	352, 353, 354, 0, 355, 356, 488, 357, 489, 358,
	0, 359, 0, 360, 361, 362, 363, 364, 365, 490,
	366, 367, 0, 368, 369, 370, 371, 372, 0, 374,
	375, 376, 373, 377, 378, 379, 380, 0, 381, 0,
	382, 383, 384, 385, 491, 386, 0, 387, 391, 392,
	393, 394, 395, 396, 397, 0, 404, 405, 398, 400,
	401, 402, 399, 403, 406, 407, 0, 408, 388, 389,
	409, 0, 410, 492, 411, 412, 0, 422, 413, 414,
	415, 390, 416, 420, 421, 417, 418, 419, 493, 0,
	424, 425, 423, 0, 426, 427, 428, 429, 430, 269,
	431, 270, 432, 0, 494, 495, 496, 497, 0, 439,
	0, 433, 434, 498, 435, 499, 0, 436, 437, 438,
	0, 440, 441, 0, 0, 442, 443, 444, 445, 447,
	0, 448, 0, 446, 449, 450, 451, 500, 501, 502,
	207, 453, 452, 503, 0, 0, 0, 0, 454, 455,
	504, 456, 457, 458, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 459, 0,
	0, 0, 0, 219, 220, 221, 222, 460, 461, 223,
	462, 224, 225, 463, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 464, 465, 466, 0, 233, 467,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 468, 469, 2884, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 470, 265, 266, 268,
	271, 267, 272, 273, 274, 471, 472, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 473, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 474, 0, 475, 285, 0, 286, 287, 288, 289,
	476, 477, 478, 0, 290, 291, 0, 292, 293, 295,
	0, 0, 0, 0, 294, 296, 303, 0, 0, 297,
	479, 299, 298, 300, 301, 302, 480, 0, 481, 0,
	304, 0, 482, 0, 305, 306, 307, 0, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 483, 0, 317, 318, 0, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 332, 330, 0, 333, 334, 336, 335, 0,
	0, 0, 0, 484, 485, 337, 338, 0, 339, 340,
	341, 0, 0, 343, 344, 345, 0, 0, 346, 486,
	0, 347, 0, 487, 348, 342, 349, 350, 351, 352,
	353, 354, 0, 355, 356, 488, 357, 489, 358, 0,
	359, 0, 360, 361, 362, 363, 364, 365, 490, 366,
	367, 0, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 0, 381, 0, 382,
	383, 384, 385, 491, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 0, 404, 405, 398, 400, 401,
	402, 399, 403, 406, 407, 0, 408, 388, 389, 409,
	0, 410, 492, 411, 412, 0, 422, 413, 414, 415,
	390, 416, 420, 421, 417, 418, 419, 493, 0, 424,
	425, 423, 0, 426, 427, 428, 429, 430, 269, 431,
	270, 432, 0, 494, 495, 496, 497, 0, 439, 0,
	433, 434, 498, 435, 499, 0, 436, 437, 438, 0,
	440, 441, 0, 0, 442, 443, 444, 445, 447, 0,
	448, 0, 446, 449, 450, 451, 500, 501, 502, 0,
	453, 452, 503, 207, 2317, 0, 0, 454, 455, 504,
	456, 457, 458, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 459, 0, 0, 0, 0, 219, 220, 221, 222,
	460, 461, 223, 462, 224, 225, 463, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 464, 465, 466,
	0, 233, 467, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 468,
	469, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 470,
	265, 266, 268, 271, 267, 272, 273, 274, 471, 472,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	473, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 474, 0, 475, 285, 0, 286,
	287, 288, 289, 476, 477, 478, 0, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 0, 294, 296, 303,
	0, 0, 297, 479, 299, 298, 300, 301, 302, 480,
	0, 481, 0, 304, 0, 482, 0, 305, 306, 307,
	0, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 483, 0, 317, 318, 0, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 0, 333, 334,
	336, 335, 0, 0, 0, 0, 484, 485, 337, 338,
	0, 339, 340, 341, 0, 0, 343, 344, 2314, 0,
	0, 346, 486, 0, 347, 0, 487, 348, 342, 349,
	350, 351, 352, 353, 354, 0, 355, 356, 488, 357,
	489, 358, 0, 359, 0, 360, 361, 362, 363, 364,
	365, 490, 366, 367, 0, 368, 369, 370, 371, 372,
	0, 374, 375, 376, 373, 377, 378, 379, 380, 0,
	381, 0, 382, 383, 384, 385, 491, 386, 0, 387,
	391, 392, 393, 394, 395, 396, 397, 0, 404, 405,
	398, 400, 401, 402, 399, 403, 406, 407, 0, 408,
	388, 389, 409, 0, 410, 492, 411, 412, 0, 422,
	413, 414, 415, 390, 416, 420, 421, 417, 418, 419,
	493, 0, 424, 425, 423, 0, 426, 427, 428, 429,
	430, 269, 431, 270, 432, 0, 494, 495, 496, 497,
	0, 439, 0, 433, 434, 498, 435, 499, 0, 436,
	437, 438, 0, 440, 441, 0, 0, 442, 443, 444,
	445, 447, 0, 448, 0, 446, 449, 450, 451, 500,
	501, 502, 207, 453, 452, 503, 0, 0, 0, 0,
	454, 455, 504, 456, 457, 458, 0, 0, 0, 213,
	214, 215, 216, 217, 1847, 218, 0, 0, 0, 0,
	459, 0, 0, 0, 0, 219, 220, 221, 222, 460,
	461, 223, 462, 224, 225, 463, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 464, 465, 466, 0,
	233, 467, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 468, 469,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 470, 265,
	266, 268, 271, 267, 272, 273, 274, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 473,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 474, 0, 475, 285, 0, 286, 287,
	288, 289, 476, 477, 478, 0, 290, 291, 0, 292,
	293, 295, 0, 0, 0, 0, 294, 296, 303, 0,
	0, 297, 479, 299, 298, 300, 301, 302, 480, 0,
	481, 0, 304, 0, 482, 0, 305, 306, 307, 0,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 483, 0, 317, 318, 0, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 332, 330, 0, 333, 334, 336,
	335, 0, 0, 0, 0, 484, 485, 337, 338, 0,
	339, 340, 341, 0, 0, 343, 344, 345, 0, 0,
	346, 486, 0, 347, 0, 487, 348, 342, 349, 350,
	351, 352, 353, 354, 0, 355, 356, 488, 357, 489,
	358, 0, 359, 0, 360, 361, 362, 363, 364, 365,
	490, 366, 367, 0, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 0, 381,
	0, 382, 383, 384, 385, 491, 386, 0, 387, 391,
	392, 393, 394, 395, 396, 397, 0, 404, 405, 398,
	400, 401, 402, 399, 403, 406, 407, 0, 408, 388,
	389, 409, 0, 410, 492, 411, 412, 0, 422, 413,
	414, 415, 390, 416, 420, 421, 417, 418, 419, 493,
	0, 424, 425, 423, 0, 426, 427, 428, 429, 430,
	269, 431, 270, 432, 0, 494, 495, 496, 497, 0,
	439, 0, 433, 434, 498, 435, 499, 0, 436, 437,
	438, 0, 440, 441, 0, 0, 442, 443, 444, 445,
	447, 0, 448, 0, 446, 449, 450, 451, 500, 501,
	502, 0, 453, 452, 503, 1839, 0, 207, 0, 454,
	455, 504, 456, 457, 458, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 459, 0, 0, 0, 0,
	219, 220, 221, 222, 460, 461, 223, 462, 224, 225,
	463, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 464, 465, 466, 0, 233, 467, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 468, 469, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 470, 265, 266, 268, 271, 267, 272,
	273, 274, 471, 472, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 473, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 474, 0,
	475, 285, 0, 286, 287, 288, 289, 476, 477, 478,
	0, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	0, 294, 296, 303, 0, 0, 297, 479, 299, 298,
	300, 301, 302, 480, 0, 481, 0, 304, 0, 482,
	0, 305, 306, 307, 0, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 483, 0,
	317, 318, 0, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 0, 333, 334, 336, 335, 0, 0, 0, 0,
	484, 485, 337, 338, 0, 339, 340, 341, 0, 0,
	343, 344, 345, 0, 0, 346, 486, 0, 347, 0,
	487, 348, 342, 349, 350, 351, 352, 353, 354, 0,
	355, 356, 488, 357, 489, 358, 0, 359, 0, 360,
	361, 362, 363, 364, 365, 490, 366, 367, 0, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 0, 381, 0, 382, 383, 384, 385,
	491, 386, 0, 387, 391, 392, 393, 394, 395, 396,
	397, 0, 404, 405, 398, 400, 401, 402, 399, 403,
	406, 407, 0, 408, 388, 389, 409, 0, 410, 492,
	411, 412, 0, 422, 413, 414, 415, 390, 416, 420,
	421, 417, 418, 419, 493, 0, 424, 425, 423, 0,
	426, 427, 428, 429, 430, 269, 431, 270, 432, 0,
	494, 495, 496, 497, 0, 439, 0, 433, 434, 498,
	435, 499, 0, 436, 437, 438, 0, 440, 441, 0,
	0, 442, 443, 444, 445, 447, 0, 448, 0, 446,
	449, 450, 451, 500, 501, 502, 0, 453, 452, 503,
	555, 0, 207, 0, 454, 455, 504, 456, 457, 458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	459, 0, 0, 0, 0, 219, 220, 221, 222, 460,
	461, 223, 462, 224, 225, 463, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 464, 465, 1023, 0,
	233, 467, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 468, 469,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 470, 265,
	266, 268, 271, 267, 272, 273, 274, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 473,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 474, 0, 475, 285, 0, 286, 287,
	288, 289, 476, 477, 478, 0, 290, 291, 0, 292,
	293, 295, 0, 0, 0, 0, 294, 296, 303, 0,
	0, 297, 479, 299, 298, 300, 301, 302, 480, 0,
	481, 0, 304, 0, 482, 0, 305, 306, 307, 0,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 483, 0, 317, 318, 0, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 332, 556, 0, 333, 334, 336,
	335, 0, 0, 0, 0, 484, 485, 337, 338, 0,
	339, 340, 341, 0, 0, 343, 344, 345, 0, 0,
	346, 486, 0, 347, 0, 487, 348, 342, 349, 350,
	351, 352, 353, 354, 0, 355, 356, 488, 357, 489,
	358, 0, 359, 0, 360, 361, 362, 363, 364, 365,
	490, 366, 367, 0, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 0, 381,
	0, 382, 383, 384, 385, 491, 386, 0, 387, 391,
	392, 552, 394, 395, 396, 397, 0, 404, 405, 398,
	400, 401, 402, 399, 403, 406, 407, 0, 408, 388,
	389, 409, 0, 410, 492, 411, 412, 0, 422, 413,
	414, 415, 390, 416, 420, 421, 417, 418, 419, 493,
	0, 424, 425, 423, 0, 426, 427, 428, 429, 430,
	269, 431, 270, 432, 0, 551, 495, 496, 497, 0,
	439, 0, 433, 434, 498, 435, 499, 0, 436, 437,
	438, 0, 440, 441, 0, 0, 442, 443, 444, 445,
	447, 0, 448, 0, 446, 449, 450, 451, 500, 501,
	502, 0, 453, 452, 503, 1791, 0, 207, 0, 454,
	455, 504, 456, 457, 458, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 459, 0, 0, 0, 0,
	219, 220, 221, 222, 460, 461, 223, 462, 224, 225,
	463, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 464, 465, 466, 0, 233, 467, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 468, 469, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 470, 265, 266, 268, 271, 267, 272,
	273, 274, 471, 472, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 473, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 474, 0,
	475, 285, 0, 286, 287, 288, 289, 1790, 477, 478,
	0, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	0, 294, 296, 303, 0, 0, 297, 479, 299, 298,
	300, 301, 302, 480, 0, 481, 0, 304, 0, 482,
	0, 305, 306, 307, 0, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 483, 0,
	317, 318, 0, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 0, 333, 334, 336, 335, 0, 0, 0, 0,
	484, 485, 337, 338, 0, 339, 340, 341, 0, 0,
	343, 344, 345, 0, 0, 346, 486, 0, 347, 0,
	487, 348, 342, 349, 350, 351, 352, 353, 354, 0,
	355, 356, 488, 357, 489, 358, 0, 359, 0, 360,
	361, 362, 363, 364, 365, 490, 366, 367, 0, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 0, 381, 0, 382, 383, 384, 385,
	491, 386, 0, 387, 391, 392, 393, 394, 395, 396,
	397, 0, 404, 405, 398, 400, 401, 402, 399, 403,
	406, 407, 0, 408, 388, 389, 409, 0, 410, 492,
	411, 412, 0, 422, 413, 414, 415, 390, 416, 420,
	421, 417, 418, 419, 493, 0, 424, 425, 423, 0,
	426, 427, 428, 429, 430, 269, 431, 270, 432, 0,
	494, 495, 496, 497, 0, 439, 0, 433, 434, 498,
	435, 499, 0, 436, 437, 438, 0, 440, 441, 0,
	0, 442, 443, 444, 445, 447, 0, 448, 0, 446,
	449, 450, 451, 500, 501, 502, 0, 453, 452, 503,
	555, 0, 207, 0, 454, 455, 504, 456, 457, 458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	459, 0, 0, 0, 0, 219, 220, 221, 222, 460,
	461, 223, 462, 224, 225, 463, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 464, 465, 466, 0,
	545, 467, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 468, 469,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 470, 265,
	266, 268, 271, 267, 272, 273, 274, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 473,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 474, 0, 475, 285, 0, 286, 287,
	288, 289, 476, 477, 478, 0, 290, 291, 0, 292,
	293, 295, 0, 0, 0, 0, 294, 296, 303, 0,
	0, 297, 479, 299, 298, 300, 301, 302, 480, 0,
	481, 0, 304, 0, 482, 0, 305, 306, 307, 0,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 483, 0, 317, 318, 0, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 332, 556, 0, 333, 334, 336,
	335, 0, 0, 0, 0, 484, 485, 337, 338, 0,
	339, 340, 341, 0, 0, 343, 344, 345, 0, 0,
	346, 486, 0, 347, 0, 487, 348, 342, 349, 350,
	351, 352, 353, 354, 0, 355, 356, 488, 357, 489,
	358, 0, 359, 0, 360, 361, 362, 363, 364, 365,
	490, 366, 367, 0, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 0, 381,
	0, 382, 383, 384, 385, 491, 386, 0, 387, 391,
	392, 552, 394, 395, 396, 397, 0, 404, 405, 398,
	400, 401, 402, 399, 403, 1302, 407, 0, 408, 388,
	389, 409, 0, 410, 492, 411, 412, 0, 422, 413,
	414, 415, 390, 416, 420, 421, 417, 418, 419, 493,
	0, 424, 425, 423, 0, 426, 427, 428, 429, 430,
	269, 431, 270, 432, 0, 551, 495, 496, 497, 0,
	439, 0, 433, 434, 498, 435, 499, 0, 436, 437,
	438, 0, 440, 441, 0, 0, 442, 443, 444, 445,
	447, 0, 448, 0, 446, 449, 450, 451, 500, 501,
	502, 0, 453, 452, 503, 1287, 0, 207, 0, 454,
	455, 504, 456, 457, 458, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 459, 0, 0, 0, 0,
	219, 220, 221, 222, 460, 461, 223, 462, 224, 225,
	463, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 464, 465, 466, 0, 233, 467, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 468, 469, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 470, 265, 266, 268, 271, 267, 272,
	273, 274, 471, 472, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 473, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 474, 0,
	475, 285, 0, 286, 287, 288, 289, 1286, 477, 478,
	0, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	0, 294, 296, 303, 0, 0, 297, 479, 299, 298,
	300, 301, 302, 480, 0, 481, 0, 304, 0, 482,
	0, 305, 306, 307, 0, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 483, 0,
	317, 318, 0, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 0, 333, 334, 336, 335, 0, 0, 0, 0,
	484, 485, 337, 338, 0, 339, 340, 341, 0, 0,
	343, 344, 345, 0, 0, 346, 486, 0, 347, 0,
	487, 348, 342, 349, 350, 351, 352, 353, 354, 0,
	355, 356, 488, 357, 489, 358, 0, 359, 0, 360,
	361, 362, 363, 364, 365, 490, 366, 367, 0, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 0, 381, 0, 382, 383, 384, 385,
	491, 386, 0, 387, 391, 392, 393, 394, 395, 396,
	397, 0, 404, 405, 398, 400, 401, 402, 399, 403,
	406, 407, 0, 408, 388, 389, 409, 0, 410, 492,
	411, 412, 0, 422, 413, 414, 415, 390, 416, 420,
	421, 417, 418, 419, 493, 0, 424, 425, 423, 0,
	426, 427, 428, 429, 430, 269, 431, 270, 432, 0,
	494, 495, 496, 497, 0, 439, 0, 433, 434, 498,
	435, 499, 0, 436, 437, 438, 0, 440, 441, 0,
	0, 442, 443, 444, 445, 447, 0, 448, 0, 446,
	449, 450, 451, 500, 501, 502, 0, 453, 452, 503,
	1236, 0, 207, 0, 454, 455, 504, 456, 457, 458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	459, 0, 0, 0, 0, 219, 220, 221, 222, 460,
	461, 223, 462, 224, 225, 463, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 464, 465, 466, 0,
	233, 467, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 468, 469,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 470, 265,
	266, 268, 271, 267, 272, 273, 274, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 473,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 474, 0, 475, 285, 0, 286, 287,
	288, 289, 1235, 477, 478, 0, 290, 291, 0, 292,
	293, 295, 0, 0, 0, 0, 294, 296, 303, 0,
	0, 297, 479, 299, 298, 300, 301, 302, 480, 0,
	481, 0, 304, 0, 482, 0, 305, 306, 307, 0,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 483, 0, 317, 318, 0, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 332, 330, 0, 333, 334, 336,
	335, 0, 0, 0, 0, 484, 485, 337, 338, 0,
	339, 340, 341, 0, 0, 343, 344, 345, 0, 0,
	346, 486, 0, 347, 0, 487, 348, 342, 349, 350,
	351, 352, 353, 354, 0, 355, 356, 488, 357, 489,
	358, 0, 359, 0, 360, 361, 362, 363, 364, 365,
	490, 366, 367, 0, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 0, 381,
	0, 382, 383, 384, 385, 491, 386, 0, 387, 391,
	392, 393, 394, 395, 396, 397, 0, 404, 405, 398,
	400, 401, 402, 399, 403, 406, 407, 0, 408, 388,
	389, 409, 0, 410, 492, 411, 412, 0, 422, 413,
	414, 415, 390, 416, 420, 421, 417, 418, 419, 493,
	0, 424, 425, 423, 0, 426, 427, 428, 429, 430,
	269, 431, 270, 432, 0, 494, 495, 496, 497, 0,
	439, 0, 433, 434, 498, 435, 499, 0, 436, 437,
	438, 0, 440, 441, 0, 0, 442, 443, 444, 445,
	447, 0, 448, 0, 446, 449, 450, 451, 500, 501,
	502, 0, 453, 452, 503, 1220, 0, 207, 0, 454,
	455, 504, 456, 457, 458, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 459, 0, 0, 0, 0,
	219, 220, 221, 222, 460, 461, 223, 462, 224, 225,
	463, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 464, 465, 466, 0, 233, 467, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 468, 469, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 470, 265, 266, 268, 271, 267, 272,
	273, 274, 471, 472, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 473, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 474, 0,
	475, 285, 0, 286, 287, 288, 289, 476, 477, 478,
	0, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	0, 294, 296, 303, 0, 0, 297, 479, 299, 298,
	300, 301, 302, 480, 0, 481, 0, 304, 0, 482,
	0, 305, 306, 307, 0, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 483, 0,
	317, 318, 0, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 0, 333, 334, 336, 335, 0, 0, 0, 0,
	484, 485, 337, 338, 0, 339, 340, 341, 0, 0,
	343, 344, 345, 0, 0, 346, 486, 0, 347, 0,
	487, 348, 342, 349, 350, 351, 352, 353, 354, 0,
	355, 356, 488, 357, 489, 358, 0, 359, 0, 360,
	361, 362, 363, 364, 365, 490, 366, 367, 0, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 0, 381, 0, 382, 383, 384, 385,
	491, 386, 0, 387, 391, 392, 393, 394, 395, 396,
	397, 0, 404, 405, 398, 400, 401, 402, 399, 403,
	406, 407, 0, 408, 388, 389, 409, 0, 410, 492,
	411, 412, 0, 422, 413, 414, 415, 390, 416, 420,
	421, 417, 418, 419, 493, 0, 424, 425, 423, 0,
	426, 427, 428, 429, 430, 269, 431, 270, 432, 0,
	494, 495, 496, 497, 0, 439, 0, 433, 434, 498,
	435, 499, 0, 436, 437, 438, 0, 440, 441, 0,
	0, 442, 443, 444, 445, 447, 0, 448, 0, 446,
	449, 450, 451, 500, 501, 502, 0, 453, 452, 503,
	1157, 0, 207, 0, 454, 455, 504, 456, 457, 458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	459, 0, 0, 0, 0, 219, 220, 221, 222, 460,
	461, 223, 462, 224, 225, 463, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 464, 465, 466, 0,
	233, 467, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 468, 469,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 470, 265,
	266, 268, 271, 267, 272, 273, 274, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 473,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 474, 0, 475, 285, 0, 286, 287,
	288, 289, 476, 477, 478, 0, 290, 291, 0, 292,
	293, 295, 0, 0, 0, 0, 294, 296, 303, 0,
	0, 297, 479, 299, 298, 300, 301, 302, 480, 0,
	481, 0, 304, 0, 482, 0, 305, 306, 307, 0,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 483, 0, 317, 318, 0, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 332, 330, 0, 333, 334, 336,
	335, 0, 0, 0, 0, 484, 485, 337, 338, 0,
	339, 340, 341, 0, 0, 343, 344, 345, 0, 0,
	346, 486, 0, 347, 0, 487, 348, 342, 349, 350,
	351, 352, 353, 354, 0, 355, 356, 488, 357, 489,
	358, 0, 359, 0, 360, 361, 362, 363, 364, 365,
	490, 366, 367, 0, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 0, 381,
	0, 382, 383, 384, 385, 491, 386, 0, 387, 391,
	392, 393, 394, 395, 396, 397, 0, 404, 405, 398,
	400, 401, 402, 399, 403, 406, 407, 0, 408, 388,
	389, 409, 0, 410, 492, 411, 412, 0, 422, 413,
	414, 415, 390, 416, 420, 421, 417, 418, 419, 493,
	0, 424, 425, 423, 0, 426, 427, 428, 429, 430,
	269, 431, 270, 432, 0, 494, 495, 496, 497, 0,
	439, 0, 433, 434, 498, 435, 499, 0, 436, 437,
	438, 0, 440, 441, 0, 0, 442, 443, 444, 445,
	447, 0, 448, 0, 446, 449, 450, 451, 500, 501,
	502, 0, 453, 452, 503, 555, 0, 207, 0, 454,
	455, 504, 456, 457, 458, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 459, 0, 0, 0, 0,
	219, 220, 221, 222, 460, 461, 223, 462, 224, 225,
	463, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 464, 465, 1023, 0, 233, 467, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 468, 469, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 470, 265, 266, 268, 271, 267, 272,
	273, 274, 471, 472, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 473, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 474, 0,
	475, 285, 0, 286, 287, 288, 289, 476, 477, 478,
	0, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	0, 294, 296, 303, 0, 0, 297, 479, 299, 298,
	300, 301, 302, 480, 0, 481, 0, 304, 0, 482,
	0, 305, 306, 307, 0, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 483, 0,
	317, 318, 0, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	556, 0, 333, 334, 336, 335, 0, 0, 0, 0,
	484, 485, 337, 338, 0, 339, 340, 341, 0, 0,
	343, 344, 345, 0, 0, 346, 486, 0, 347, 0,
	487, 348, 342, 349, 350, 351, 352, 353, 354, 0,
	355, 356, 488, 357, 489, 358, 0, 359, 0, 360,
	361, 362, 363, 364, 365, 490, 366, 367, 0, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 0, 381, 0, 382, 383, 384, 385,
	491, 386, 0, 387, 391, 392, 552, 394, 395, 396,
	397, 0, 404, 405, 398, 400, 401, 402, 399, 403,
	406, 407, 0, 408, 388, 389, 409, 0, 410, 492,
	411, 412, 0, 422, 413, 414, 415, 390, 416, 420,
	421, 417, 418, 419, 493, 0, 424, 425, 423, 0,
	426, 427, 428, 429, 430, 269, 431, 270, 432, 0,
	551, 495, 496, 497, 0, 439, 0, 433, 1024, 498,
	435, 499, 0, 436, 437, 438, 0, 440, 441, 0,
	0, 442, 443, 444, 445, 447, 0, 448, 0, 446,
	449, 450, 451, 500, 501, 502, 207, 453, 452, 503,
	0, 0, 0, 0, 454, 455, 504, 456, 457, 458,
	0, 0, 0, 213, 214, 215, 216, 217, 1006, 218,
	0, 0, 0, 0, 459, 0, 0, 0, 0, 219,
	220, 221, 222, 460, 461, 223, 462, 224, 225, 463,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	464, 465, 466, 0, 233, 467, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 468, 469, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 470, 265, 266, 268, 271, 267, 272, 273,
	274, 471, 472, 0, 0, 0, 0, 0, 0, 0,
	275, 276, 277, 473, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 474, 0, 475,
	285, 0, 286, 287, 288, 289, 476, 477, 478, 0,
	290, 291, 0, 292, 293, 295, 0, 0, 0, 0,
	294, 296, 303, 0, 0, 297, 479, 299, 298, 300,
	301, 302, 480, 0, 481, 0, 304, 0, 482, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 483, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 332, 330,
	0, 333, 334, 336, 335, 0, 0, 0, 0, 484,
	485, 337, 338, 0, 339, 340, 341, 0, 0, 343,
	344, 345, 0, 0, 346, 486, 0, 347, 0, 487,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 488, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 490, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 0, 382, 383, 384, 385, 491,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	0, 404, 405, 398, 400, 401, 402, 399, 403, 406,
	407, 0, 408, 388, 389, 409, 0, 410, 492, 411,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 421,
	417, 418, 419, 493, 0, 424, 425, 423, 0, 426,
	427, 428, 429, 430, 269, 431, 270, 432, 0, 494,
	495, 496, 497, 0, 439, 0, 433, 434, 498, 435,
	499, 0, 436, 437, 438, 0, 440, 441, 0, 0,
	442, 443, 444, 445, 447, 0, 448, 0, 446, 449,
	450, 451, 500, 501, 502, 0, 453, 452, 503, 555,
	0, 207, 0, 454, 455, 504, 456, 457, 458, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 459,
	0, 0, 0, 0, 219, 220, 221, 222, 460, 461,
	223, 462, 224, 225, 463, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 464, 465, 466, 0, 545,
	467, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 543, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 468, 469, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 470, 265, 266,
	268, 271, 267, 272, 273, 274, 471, 472, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 473, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 474, 0, 475, 285, 0, 286, 287, 288,
	289, 476, 477, 478, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 0,
	297, 479, 299, 298, 300, 301, 302, 480, 0, 481,
	0, 304, 0, 482, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 483, 0, 317, 318, 0, 0, 319, 544,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 556, 0, 333, 334, 336, 335,
	0, 0, 0, 0, 484, 485, 337, 338, 0, 339,
	340, 341, 0, 0, 343, 344, 345, 0, 0, 346,
	486, 0, 347, 0, 487, 348, 342, 349, 350, 351,
	352, 353, 354, 0, 355, 356, 488, 357, 489, 358,
	0, 359, 0, 360, 361, 362, 363, 364, 365, 490,
	366, 367, 0, 368, 369, 370, 371, 372, 0, 374,
	375, 376, 373, 377, 378, 379, 380, 0, 381, 0,
	382, 383, 384, 385, 546, 386, 0, 387, 391, 392,
	552, 394, 395, 396, 397, 0, 404, 405, 398, 400,
	401, 402, 399, 403, 547, 407, 0, 408, 388, 389,
	409, 0, 410, 492, 411, 412, 0, 422, 413, 414,
	415, 390, 416, 420, 421, 417, 418, 419, 493, 0,
	424, 425, 423, 0, 426, 427, 428, 429, 430, 269,
	431, 270, 432, 0, 551, 495, 496, 497, 0, 439,
	0, 433, 549, 498, 435, 499, 0, 436, 437, 438,
	0, 440, 441, 0, 0, 442, 443, 444, 445, 447,
	0, 448, 0, 446, 449, 450, 451, 500, 501, 502,
	0, 453, 452, 503, 539, 0, 207, 0, 454, 455,
	504, 456, 457, 458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 459, 0, 0, 0, 0, 219,
	220, 221, 222, 460, 461, 223, 462, 224, 225, 463,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	464, 465, 466, 0, 233, 467, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 468, 469, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 470, 265, 266, 268, 271, 267, 272, 273,
	274, 471, 472, 0, 0, 0, 0, 0, 0, 0,
	275, 276, 277, 473, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 474, 0, 475,
	285, 0, 286, 287, 288, 289, 476, 477, 478, 0,
	290, 291, 0, 292, 293, 295, 0, 0, 0, 0,
	294, 296, 303, 0, 0, 297, 479, 299, 298, 300,
	301, 302, 480, 0, 481, 0, 304, 0, 482, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 483, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 332, 330,
	0, 333, 334, 336, 335, 0, 0, 0, 0, 484,
	485, 337, 338, 0, 339, 340, 341, 0, 0, 343,
	344, 345, 0, 0, 346, 486, 0, 347, 0, 487,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 488, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 490, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 0, 382, 383, 384, 385, 491,
	386, 0, 387, 540, 392, 393, 394, 395, 396, 397,
	0, 404, 405, 398, 400, 401, 402, 399, 403, 406,
	407, 0, 408, 388, 389, 409, 0, 410, 492, 411,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 421,
	417, 418, 419, 493, 0, 424, 425, 423, 0, 426,
	427, 428, 429, 430, 269, 431, 270, 432, 0, 494,
	495, 496, 497, 0, 439, 0, 433, 434, 498, 435,
	499, 0, 436, 437, 438, 0, 440, 441, 0, 0,
	442, 443, 444, 445, 447, 0, 448, 0, 446, 449,
	450, 451, 500, 501, 502, 0, 453, 452, 503, 537,
	0, 207, 0, 454, 455, 504, 456, 457, 458, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 459,
	0, 0, 0, 0, 219, 220, 221, 222, 460, 461,
	223, 462, 224, 225, 463, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 464, 465, 466, 0, 233,
	467, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 468, 469, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 470, 265, 266,
	268, 271, 267, 272, 273, 274, 471, 472, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 473, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 474, 0, 475, 285, 0, 286, 287, 288,
	289, 476, 477, 478, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 0,
	297, 479, 299, 298, 300, 301, 302, 480, 0, 481,
	0, 304, 0, 482, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 483, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 0, 0, 0, 484, 485, 337, 338, 0, 339,
	340, 341, 0, 0, 343, 344, 345, 0, 0, 346,
	486, 0, 347, 0, 487, 348, 342, 349, 350, 351,
	352, 353, 354, 0, 355, 356, 488, 357, 489, 358,
	0, 359, 0, 360, 361, 362, 363, 364, 365, 490,
	366, 367, 0, 368, 369, 370, 371, 372, 0, 374,
	375, 376, 373, 377, 378, 379, 380, 0, 381, 0,
	382, 383, 384, 385, 491, 386, 0, 387, 391, 392,
	393, 394, 395, 396, 397, 0, 404, 405, 398, 400,
	401, 402, 399, 403, 406, 407, 0, 408, 388, 389,
	409, 0, 410, 492, 411, 412, 0, 422, 413, 414,
	415, 390, 416, 420, 421, 417, 418, 419, 493, 0,
	424, 425, 423, 0, 426, 427, 428, 429, 430, 269,
	431, 270, 432, 0, 494, 495, 496, 497, 0, 439,
	0, 433, 434, 498, 435, 499, 0, 436, 437, 438,
	0, 440, 441, 0, 0, 442, 443, 444, 445, 447,
	0, 448, 0, 446, 449, 450, 451, 500, 501, 502,
	0, 453, 452, 503, 531, 0, 207, 0, 454, 455,
	504, 456, 457, 458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 459, 0, 0, 0, 0, 219,
	220, 221, 222, 460, 461, 223, 462, 224, 225, 463,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	464, 465, 466, 0, 233, 467, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 468, 469, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 470, 265, 266, 268, 271, 267, 272, 273,
	274, 471, 472, 0, 0, 0, 0, 0, 0, 0,
	275, 276, 277, 473, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 474, 0, 475,
	285, 0, 286, 287, 288, 289, 476, 477, 478, 0,
	290, 291, 0, 292, 293, 295, 0, 0, 0, 0,
	294, 296, 303, 0, 0, 297, 479, 299, 298, 300,
	301, 302, 480, 0, 481, 0, 304, 0, 482, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 483, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 332, 330,
	0, 333, 334, 336, 335, 0, 0, 0, 0, 484,
	485, 337, 338, 0, 339, 340, 341, 0, 0, 343,
	344, 345, 0, 0, 346, 486, 0, 347, 0, 487,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 488, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 490, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 0, 382, 383, 384, 385, 491,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	0, 404, 405, 398, 400, 401, 402, 399, 403, 406,
	407, 0, 408, 388, 389, 409, 0, 410, 492, 411,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 421,
	417, 418, 419, 493, 0, 424, 425, 423, 0, 426,
	427, 428, 429, 430, 269, 431, 270, 432, 0, 494,
	495, 496, 497, 0, 439, 0, 433, 434, 498, 435,
	499, 0, 436, 437, 438, 0, 440, 441, 0, 0,
	442, 443, 444, 445, 447, 0, 448, 0, 446, 449,
	450, 451, 500, 501, 502, 0, 453, 452, 503, 507,
	0, 207, 0, 454, 455, 504, 456, 457, 458, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 459,
	0, 0, 0, 0, 219, 220, 221, 222, 460, 461,
	223, 462, 224, 225, 463, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 464, 465, 466, 0, 233,
	467, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 468, 469, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 470, 265, 266,
	268, 271, 267, 272, 273, 274, 471, 472, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 473, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 474, 0, 475, 285, 0, 286, 287, 288,
	289, 476, 477, 478, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 0,
	297, 479, 299, 298, 300, 301, 302, 480, 0, 481,
	0, 304, 0, 482, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 483, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 0, 0, 0, 484, 485, 337, 338, 0, 339,
	340, 341, 0, 0, 343, 344, 345, 0, 0, 346,
	486, 0, 347, 0, 487, 348, 342, 349, 350, 351,
	352, 353, 354, 0, 355, 356, 488, 357, 489, 358,
	0, 359, 0, 360, 361, 362, 363, 364, 365, 490,
	366, 367, 0, 368, 369, 370, 371, 372, 0, 374,
	375, 376, 373, 377, 378, 379, 380, 0, 381, 0,
	382, 383, 384, 385, 491, 386, 0, 387, 391, 392,
	393, 394, 395, 396, 397, 0, 404, 405, 398, 400,
	401, 402, 399, 403, 406, 407, 0, 408, 388, 389,
	409, 0, 410, 492, 411, 412, 0, 422, 413, 414,
	415, 390, 416, 420, 421, 417, 418, 419, 493, 0,
	424, 425, 423, 0, 426, 427, 428, 429, 430, 269,
	431, 270, 432, 0, 494, 495, 496, 497, 0, 439,
	0, 433, 434, 498, 435, 499, 0, 436, 437, 438,
	0, 440, 441, 0, 0, 442, 443, 444, 445, 447,
	0, 448, 0, 446, 449, 450, 451, 500, 501, 502,
	207, 453, 452, 503, 0, 0, 0, 0, 454, 455,
	504, 456, 457, 458, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 459, 0,
	0, 0, 0, 219, 220, 221, 222, 460, 461, 223,
	462, 224, 225, 463, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 464, 465, 466, 0, 233, 467,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 468, 469, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 470, 265, 266, 268,
	271, 267, 272, 273, 274, 471, 472, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 473, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 474, 0, 475, 285, 0, 286, 287, 288, 289,
	476, 477, 478, 0, 290, 291, 0, 292, 293, 295,
	0, 0, 0, 0, 294, 296, 303, 0, 0, 297,
	479, 299, 298, 300, 301, 302, 480, 0, 481, 0,
	304, 0, 482, 0, 305, 306, 307, 0, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 483, 0, 317, 318, 0, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 332, 330, 0, 333, 334, 336, 335, 0,
	0, 0, 0, 484, 485, 337, 338, 0, 339, 340,
	341, 0, 0, 343, 344, 345, 0, 0, 346, 486,
	0, 347, 0, 487, 348, 342, 349, 350, 351, 352,
	353, 354, 0, 355, 356, 488, 357, 489, 358, 0,
	359, 0, 360, 361, 362, 363, 364, 365, 490, 366,
	367, 0, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 0, 381, 0, 382,
	383, 384, 385, 491, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 0, 404, 405, 398, 400, 401,
	402, 399, 403, 406, 407, 0, 408, 388, 389, 409,
	0, 410, 492, 411, 412, 0, 422, 413, 414, 415,
	390, 416, 420, 421, 417, 418, 419, 493, 0, 424,
	425, 423, 0, 426, 427, 428, 429, 430, 269, 431,
	270, 432, 0, 494, 495, 496, 497, 0, 439, 0,
	433, 434, 498, 435, 499, 0, 436, 437, 438, 0,
	440, 441, 0, 0, 442, 443, 444, 445, 447, 0,
	448, 0, 446, 449, 450, 451, 500, 501, 502, 207,
	453, 452, 503, 0, 0, 0, 0, 454, 455, 504,
	456, 457, 458, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 459, 0, 0,
	0, 0, 219, 220, 221, 222, 460, 461, 223, 462,
	224, 225, 463, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 464, 465, 466, 0, 233, 467, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 468, 469, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 470, 265, 266, 268, 271,
	267, 272, 273, 274, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 473, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	474, 0, 475, 285, 0, 286, 287, 288, 289, 2585,
	477, 478, 0, 290, 291, 0, 292, 293, 295, 0,
	0, 0, 0, 294, 296, 303, 0, 0, 297, 479,
	299, 298, 300, 301, 302, 480, 0, 481, 0, 304,
	0, 482, 0, 305, 306, 307, 0, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	483, 0, 317, 318, 0, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 332, 330, 0, 333, 334, 336, 335, 0, 0,
	0, 0, 484, 485, 337, 338, 0, 339, 340, 341,
	0, 0, 343, 344, 345, 0, 0, 346, 486, 0,
	347, 0, 487, 348, 342, 349, 350, 351, 352, 353,
	354, 0, 355, 356, 488, 357, 489, 358, 0, 359,
	0, 360, 361, 362, 363, 364, 365, 490, 366, 367,
	0, 368, 369, 370, 371, 372, 0, 374, 375, 376,
	373, 377, 378, 379, 380, 0, 381, 0, 382, 383,
	384, 385, 491, 386, 0, 387, 391, 392, 393, 394,
	395, 396, 397, 0, 404, 405, 398, 400, 401, 402,
	399, 403, 406, 407, 0, 408, 388, 389, 409, 0,
	410, 492, 411, 412, 0, 422, 413, 414, 415, 390,
	416, 420, 421, 417, 418, 419, 493, 0, 424, 425,
	423, 0, 426, 427, 428, 429, 430, 269, 431, 270,
	432, 0, 494, 495, 496, 497, 0, 439, 0, 433,
	434, 498, 435, 499, 0, 436, 437, 438, 0, 440,
	441, 0, 0, 442, 443, 444, 445, 447, 0, 448,
	0, 446, 449, 450, 451, 500, 501, 502, 207, 453,
	452, 503, 0, 0, 0, 0, 454, 455, 504, 456,
	457, 458, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 459, 0, 0, 0,
	0, 219, 220, 221, 222, 460, 461, 223, 462, 224,
	225, 463, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 464, 465, 466, 0, 233, 467, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 468, 469, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 470, 265, 266, 268, 271, 267,
	272, 273, 274, 471, 472, 0, 0, 0, 0, 0,
	0, 0, 275, 276, 277, 473, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 474,
	0, 475, 285, 0, 286, 287, 288, 289, 2583, 477,
	478, 0, 290, 291, 0, 292, 293, 295, 0, 0,
	0, 0, 294, 296, 303, 0, 0, 297, 479, 299,
	298, 300, 301, 302, 480, 0, 481, 0, 304, 0,
	482, 0, 305, 306, 307, 0, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 483,
	0, 317, 318, 0, 0, 319, 320, 0, 0, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	332, 330, 0, 333, 334, 336, 335, 0, 0, 0,
	0, 484, 485, 337, 338, 0, 339, 340, 341, 0,
	0, 343, 344, 345, 0, 0, 346, 486, 0, 347,
	0, 487, 348, 342, 349, 350, 351, 352, 353, 354,
	0, 355, 356, 488, 357, 489, 358, 0, 359, 0,
	360, 361, 362, 363, 364, 365, 490, 366, 367, 0,
	368, 369, 370, 371, 372, 0, 374, 375, 376, 373,
	377, 378, 379, 380, 0, 381, 0, 382, 383, 384,
	385, 491, 386, 0, 387, 391, 392, 393, 394, 395,
	396, 397, 0, 404, 405, 398, 400, 401, 402, 399,
	403, 406, 407, 0, 408, 388, 389, 409, 0, 410,
	492, 411, 412, 0, 422, 413, 414, 415, 390, 416,
	420, 421, 417, 418, 419, 493, 0, 424, 425, 423,
	0, 426, 427, 428, 429, 430, 269, 431, 270, 432,
	0, 494, 495, 496, 497, 0, 439, 0, 433, 434,
	498, 435, 499, 0, 436, 437, 438, 0, 440, 441,
	0, 0, 442, 443, 444, 445, 447, 0, 448, 0,
	446, 449, 450, 451, 500, 501, 502, 207, 453, 452,
	503, 0, 0, 0, 0, 454, 455, 504, 456, 457,
	458, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 459, 0, 0, 0, 0,
	219, 220, 221, 222, 460, 461, 223, 462, 224, 225,
	463, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 464, 465, 466, 0, 233, 467, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 468, 469, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 470, 265, 266, 268, 271, 267, 272,
	273, 274, 471, 472, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 473, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 474, 0,
	475, 285, 0, 286, 287, 288, 289, 2571, 477, 478,
	0, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	0, 294, 296, 303, 0, 0, 297, 479, 299, 298,
	300, 301, 302, 480, 0, 481, 0, 304, 0, 482,
	0, 305, 306, 307, 0, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 483, 0,
	317, 318, 0, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 0, 333, 334, 336, 335, 0, 0, 0, 0,
	484, 485, 337, 338, 0, 339, 340, 341, 0, 0,
	343, 344, 345, 0, 0, 346, 486, 0, 347, 0,
	487, 348, 342, 349, 350, 351, 352, 353, 354, 0,
	355, 356, 488, 357, 489, 358, 0, 359, 0, 360,
	361, 362, 363, 364, 365, 490, 366, 367, 0, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 0, 381, 0, 382, 383, 384, 385,
	491, 386, 0, 387, 391, 392, 393, 394, 395, 396,
	397, 0, 404, 405, 398, 400, 401, 402, 399, 403,
	406, 407, 0, 408, 388, 389, 409, 0, 410, 492,
	411, 412, 0, 422, 413, 414, 415, 390, 416, 420,
	421, 417, 418, 419, 493, 0, 424, 425, 423, 0,
	426, 427, 428, 429, 430, 269, 431, 270, 432, 0,
	494, 495, 496, 497, 0, 439, 0, 433, 434, 498,
	435, 499, 0, 436, 437, 438, 0, 440, 441, 0,
	0, 442, 443, 444, 445, 447, 0, 448, 0, 446,
	449, 450, 451, 500, 501, 502, 207, 453, 452, 503,
	0, 0, 0, 0, 454, 455, 504, 456, 457, 458,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 459, 0, 0, 0, 0, 219,
	220, 221, 222, 460, 461, 223, 462, 224, 225, 463,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	464, 465, 466, 0, 233, 467, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 468, 469, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 470, 265, 266, 268, 271, 267, 272, 273,
	274, 471, 472, 0, 0, 0, 0, 0, 0, 0,
	275, 276, 277, 473, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 474, 0, 475,
	285, 0, 286, 287, 288, 289, 2277, 477, 478, 0,
	290, 291, 0, 292, 293, 295, 0, 0, 0, 0,
	294, 296, 303, 0, 0, 297, 479, 299, 298, 300,
	301, 302, 480, 0, 481, 0, 304, 0, 482, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 483, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 332, 330,
	0, 333, 334, 336, 335, 0, 0, 0, 0, 484,
	485, 337, 338, 0, 339, 340, 341, 0, 0, 343,
	344, 345, 0, 0, 346, 486, 0, 347, 0, 487,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 488, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 490, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 0, 382, 383, 384, 385, 491,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	0, 404, 405, 398, 400, 401, 402, 399, 403, 406,
	407, 0, 408, 388, 389, 409, 0, 410, 492, 411,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 421,
	417, 418, 419, 493, 0, 424, 425, 423, 0, 426,
	427, 428, 429, 430, 269, 431, 270, 432, 0, 494,
	495, 496, 497, 0, 439, 0, 433, 434, 498, 435,
	499, 0, 436, 437, 438, 0, 440, 441, 0, 0,
	442, 443, 444, 445, 447, 0, 448, 0, 446, 449,
	450, 451, 500, 501, 502, 207, 453, 452, 503, 0,
	0, 0, 0, 454, 455, 504, 456, 457, 458, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 459, 0, 0, 0, 0, 219, 220,
	221, 222, 460, 461, 223, 462, 224, 225, 463, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 464,
	465, 466, 0, 233, 467, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 468, 469, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 470, 265, 266, 268, 271, 267, 272, 273, 274,
	471, 472, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 473, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 474, 0, 475, 285,
	0, 286, 287, 288, 289, 476, 477, 478, 0, 290,
	291, 0, 292, 293, 295, 0, 0, 0, 0, 294,
	296, 303, 0, 0, 297, 479, 299, 298, 300, 301,
	302, 480, 0, 481, 0, 304, 0, 482, 0, 305,
	306, 307, 0, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 483, 0, 317, 318,
	0, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 0,
	333, 334, 336, 335, 0, 0, 0, 0, 484, 485,
	337, 338, 0, 339, 340, 341, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 0, 347, 0, 487, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	488, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 490, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 0, 382, 383, 384, 385, 491, 386,
	0, 387, 540, 392, 393, 394, 395, 396, 397, 0,
	404, 405, 398, 400, 401, 402, 399, 403, 406, 407,
	0, 408, 388, 389, 409, 0, 410, 492, 411, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 421, 417,
	418, 419, 493, 0, 424, 425, 423, 0, 426, 427,
	428, 429, 430, 269, 431, 270, 432, 0, 494, 495,
	496, 497, 0, 439, 0, 433, 434, 498, 435, 499,
	0, 436, 437, 438, 0, 440, 441, 0, 0, 442,
	443, 444, 445, 447, 0, 448, 0, 446, 449, 450,
	451, 500, 501, 502, 207, 453, 452, 503, 0, 0,
	0, 0, 454, 455, 504, 456, 457, 458, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 459, 0, 1803, 0, 0, 219, 220, 221,
	222, 460, 461, 223, 462, 224, 225, 463, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 464, 465,
	466, 0, 233, 467, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	468, 469, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	470, 265, 266, 268, 271, 267, 272, 273, 274, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 275, 276,
	277, 473, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 474, 0, 475, 285, 0,
	286, 287, 288, 289, 476, 477, 478, 0, 290, 291,
	0, 292, 293, 295, 0, 0, 0, 0, 294, 296,
	303, 0, 0, 297, 479, 299, 298, 300, 301, 302,
	480, 0, 481, 0, 304, 0, 482, 0, 305, 306,
	307, 0, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 483, 0, 317, 318, 0,
	0, 319, 320, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 332, 330, 0, 333,
	334, 336, 335, 0, 0, 0, 0, 484, 485, 337,
	338, 0, 339, 340, 341, 0, 0, 343, 344, 345,
	0, 0, 346, 486, 0, 347, 0, 487, 348, 342,
	349, 350, 351, 352, 353, 354, 0, 355, 356, 488,
	357, 489, 358, 0, 359, 0, 360, 361, 362, 363,
	364, 365, 490, 366, 367, 0, 368, 369, 370, 371,
	372, 0, 374, 375, 376, 373, 377, 378, 379, 380,
	0, 381, 0, 382, 383, 384, 385, 491, 386, 0,
	387, 391, 392, 393, 394, 395, 396, 397, 0, 404,
	405, 398, 400, 401, 402, 399, 403, 406, 407, 0,
	0, 388, 389, 409, 0, 410, 492, 411, 412, 0,
	422, 413, 414, 415, 390, 416, 420, 421, 417, 418,
	419, 493, 0, 424, 425, 423, 0, 426, 427, 428,
	429, 430, 269, 431, 270, 432, 0, 494, 495, 496,
	497, 0, 439, 0, 433, 434, 498, 435, 499, 0,
	436, 437, 438, 0, 440, 441, 0, 0, 442, 443,
	444, 445, 447, 0, 448, 0, 446, 449, 450, 451,
	500, 501, 502, 207, 453, 452, 503, 0, 0, 0,
	0, 454, 455, 504, 456, 457, 458, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 459, 0, 0, 0, 0, 219, 220, 221, 222,
	460, 461, 223, 462, 224, 225, 463, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 464, 465, 466,
	0, 233, 467, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 468,
	469, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 470,
	265, 266, 268, 271, 267, 272, 273, 274, 471, 472,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	473, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 474, 0, 475, 285, 0, 286,
	287, 288, 289, 1256, 477, 478, 0, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 0, 294, 296, 303,
	0, 0, 297, 479, 299, 298, 300, 301, 302, 480,
	0, 481, 0, 304, 0, 482, 0, 305, 306, 307,
	0, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 483, 0, 317, 318, 0, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 0, 333, 334,
	336, 335, 0, 0, 0, 0, 484, 485, 337, 338,
	0, 339, 340, 341, 0, 0, 343, 344, 345, 0,
	0, 346, 486, 0, 347, 0, 487, 348, 342, 349,
	350, 351, 352, 353, 354, 0, 355, 356, 488, 357,
	489, 358, 0, 359, 0, 360, 361, 362, 363, 364,
	365, 490, 366, 367, 0, 368, 369, 370, 371, 372,
	0, 374, 375, 376, 373, 377, 378, 379, 380, 0,
	381, 0, 382, 383, 384, 385, 491, 386, 0, 387,
	391, 392, 393, 394, 395, 396, 397, 0, 404, 405,
	398, 400, 401, 402, 399, 403, 406, 407, 0, 408,
	388, 389, 409, 0, 410, 492, 411, 412, 0, 422,
	413, 414, 415, 390, 416, 420, 421, 417, 418, 419,
	493, 0, 424, 425, 423, 0, 426, 427, 428, 429,
	430, 269, 431, 270, 432, 0, 494, 495, 496, 497,
	0, 439, 0, 433, 434, 498, 435, 499, 0, 436,
	437, 438, 0, 440, 441, 0, 0, 442, 443, 444,
	445, 447, 0, 448, 0, 446, 449, 450, 451, 500,
	501, 502, 207, 453, 452, 503, 0, 0, 0, 0,
	454, 455, 504, 456, 457, 458, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	459, 0, 0, 0, 0, 219, 220, 221, 222, 460,
	461, 223, 462, 224, 225, 463, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 464, 465, 466, 0,
	233, 467, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 468, 469,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 470, 265,
	266, 268, 271, 267, 272, 273, 274, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 473,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 474, 0, 475, 285, 0, 286, 287,
	288, 289, 1198, 477, 478, 0, 290, 291, 0, 292,
	293, 295, 0, 0, 0, 0, 294, 296, 303, 0,
	0, 297, 479, 299, 298, 300, 301, 302, 480, 0,
	481, 0, 304, 0, 482, 0, 305, 306, 307, 0,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 483, 0, 317, 318, 0, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 332, 330, 0, 333, 334, 336,
	335, 0, 0, 0, 0, 484, 485, 337, 338, 0,
	339, 340, 341, 0, 0, 343, 344, 345, 0, 0,
	346, 486, 0, 347, 0, 487, 348, 342, 349, 350,
	351, 352, 353, 354, 0, 355, 356, 488, 357, 489,
	358, 0, 359, 0, 360, 361, 362, 363, 364, 365,
	490, 366, 367, 0, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 0, 381,
	0, 382, 383, 384, 385, 491, 386, 0, 387, 391,
	392, 393, 394, 395, 396, 397, 0, 404, 405, 398,
	400, 401, 402, 399, 403, 406, 407, 0, 408, 388,
	389, 409, 0, 410, 492, 411, 412, 0, 422, 413,
	414, 415, 390, 416, 420, 421, 417, 418, 419, 493,
	0, 424, 425, 423, 0, 426, 427, 428, 429, 430,
	269, 431, 270, 432, 0, 494, 495, 496, 497, 0,
	439, 0, 433, 434, 498, 435, 499, 0, 436, 437,
	438, 0, 440, 441, 0, 0, 442, 443, 444, 445,
	447, 0, 448, 0, 446, 449, 450, 451, 500, 501,
	502, 207, 453, 452, 503, 0, 0, 0, 0, 454,
	455, 504, 456, 457, 458, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 459,
	0, 0, 0, 0, 219, 220, 221, 222, 460, 461,
	223, 462, 224, 225, 463, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 464, 465, 466, 0, 233,
	467, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 468, 469, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 470, 265, 266,
	268, 271, 267, 272, 273, 274, 471, 472, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 473, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 474, 0, 475, 285, 0, 286, 287, 288,
	289, 476, 477, 478, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 0,
	297, 479, 299, 298, 300, 301, 302, 480, 0, 481,
	0, 304, 0, 482, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 483, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 0, 0, 0, 484, 485, 337, 338, 0, 339,
	340, 341, 0, 0, 343, 344, 345, 0, 0, 346,
	486, 0, 347, 0, 487, 348, 342, 349, 350, 351,
	352, 353, 354, 0, 355, 356, 488, 357, 489, 358,
	0, 359, 0, 360, 361, 362, 363, 364, 365, 490,
	961, 367, 0, 368, 369, 370, 371, 372, 0, 374,
	375, 376, 373, 377, 378, 379, 380, 0, 381, 0,
	382, 383, 384, 385, 491, 386, 0, 387, 391, 392,
	393, 394, 395, 396, 397, 0, 404, 405, 398, 400,
	401, 402, 399, 403, 406, 407, 0, 408, 388, 389,
	409, 0, 410, 492, 411, 412, 0, 422, 413, 414,
	415, 390, 416, 420, 421, 417, 418, 419, 493, 0,
	424, 425, 423, 0, 426, 427, 428, 429, 430, 269,
	431, 270, 432, 0, 494, 495, 496, 497, 0, 439,
	0, 433, 434, 498, 435, 499, 0, 436, 437, 438,
	0, 440, 441, 0, 0, 442, 443, 444, 445, 447,
	0, 448, 0, 446, 449, 450, 451, 500, 501, 502,
	207, 453, 452, 503, 0, 0, 0, 0, 454, 455,
	504, 456, 457, 458, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 459, 0,
	0, 0, 0, 219, 220, 221, 222, 460, 461, 223,
	462, 224, 225, 463, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 464, 465, 466, 0, 233, 467,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 468, 469, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 470, 265, 266, 268,
	271, 267, 272, 273, 274, 471, 472, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 473, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 474, 0, 475, 0, 0, 286, 287, 288, 289,
	476, 477, 478, 0, 290, 291, 0, 292, 293, 295,
	0, 0, 0, 0, 294, 296, 303, 0, 0, 297,
	479, 299, 298, 300, 301, 302, 480, 0, 481, 0,
	304, 0, 482, 0, 305, 306, 307, 0, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 483, 0, 317, 318, 0, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 332, 330, 0, 333, 334, 336, 335, 0,
	0, 0, 0, 484, 485, 337, 338, 0, 339, 340,
	341, 0, 0, 343, 344, 345, 0, 0, 346, 486,
	0, 347, 0, 487, 348, 342, 349, 350, 0, 352,
	353, 354, 0, 355, 356, 488, 357, 489, 358, 0,
	359, 0, 360, 361, 362, 0, 364, 365, 490, 366,
	367, 0, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 0, 381, 0, 382,
	383, 384, 385, 491, 0, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 0, 404, 405, 398, 400, 401,
	402, 399, 403, 406, 407, 0, 408, 388, 389, 409,
	0, 410, 492, 411, 412, 0, 422, 413, 414, 415,
	390, 416, 420, 421, 417, 418, 419, 493, 0, 424,
	425, 423, 0, 426, 427, 428, 429, 430, 269, 431,
	270, 432, 0, 494, 495, 496, 497, 0, 439, 0,
	433, 434, 498, 435, 499, 0, 436, 437, 438, 0,
	440, 441, 0, 0, 442, 443, 444, 445, 447, 0,
	448, 0, 446, 449, 450, 451, 500, 501, 502, 0,
	453, 452, 503, 0, 0, 0, 0, 454, 455, 504,
	456, 457, 458, 1411, 1412, 0, 1444, 1445, 1446, 1454,
	1455, 1456, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1447, 0, 0, 0, 0, 0, 0, 1414,
	0, 0, 0, 1460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1413, 0, 0, 0,
	0, 0, 0, 0, 1433, 0, 0, 0, 0, 1411,
	1412, 1430, 1444, 1445, 1446, 1454, 1455, 1456, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1447, 0,
	0, 0, 0, 0, 0, 1414, 0, 0, 0, 1460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1413, 0, 0, 0, 1436, 1437, 1438, 1439,
	1433, 0, 0, 0, 0, 0, 1419, 1430, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1451,
	0, 0, 1461, 0, 0, 0, 1441, 1442, 1443, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1457, 0, 1458,
	0, 0, 1436, 1437, 1438, 1439, 1428, 1429, 0, 0,
	0, 0, 1419, 0, 0, 0, 0, 0, 0, 0,
	0, 1449, 0, 0, 0, 0, 0, 0, 0, 1434,
	0, 0, 0, 0, 0, 1451, 0, 0, 1461, 0,
	0, 0, 1441, 1442, 1443, 0, 0, 1459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1448, 1457, 0, 1458, 0, 0, 0, 0,
	0, 0, 1428, 1429, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1449, 0, 0,
	0, 0, 0, 0, 0, 1434, 0, 0, 0, 0,
	0, 0, 0, 1440, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1459, 0, 0, 0, 0, 0, 0,
	0, 1435, 0, 0, 0, 0, 0, 0, 1448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1411, 1412, 0, 1444, 1445, 1446, 1454, 1455, 1456, 1440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1447,
	0, 0, 0, 0, 0, 0, 1414, 1435, 0, 0,
	1460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1452, 1413, 0, 0, 0, 0, 0, 0,
	0, 1433, 0, 0, 0, 0, 0, 0, 1430, 1450,
	0, 0, 1425, 1426, 1432, 1431, 1427, 1453, 0, 1424,
	1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421, 0, 0,
	0, 0, 0, 0, 0, 2438, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1436, 1437, 1438, 1439, 0, 0, 0,
	0, 0, 0, 1419, 0, 1450, 0, 0, 1425, 1426,
	1432, 1431, 1427, 1453, 0, 1424, 1422, 1423, 1415, 1416,
	1417, 1418, 1420, 1421, 0, 0, 1451, 0, 0, 1461,
	0, 2437, 0, 1441, 1442, 1443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1457, 0, 1458, 0, 0, 0,
	0, 0, 0, 1428, 1429, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1449, 0,
	0, 0, 0, 0, 0, 0, 1434, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1459, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1411, 1412, 0, 1444, 1445, 1446, 1454, 1455, 1456,
	1440, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1447, 0, 0, 0, 0, 0, 0, 1414, 1435, 0,
	0, 1460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1452, 1413, 0, 0, 0, 0, 0,
	0, 0, 1433, 0, 0, 0, 0, 1411, 1412, 1430,
	1444, 1445, 1446, 1454, 1455, 1456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1447, 0, 0, 0,
	0, 0, 0, 1414, 0, 0, 0, 1460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1413, 0, 0, 0, 1436, 1437, 1438, 1439, 1433, 0,
	0, 0, 0, 0, 1419, 1430, 1450, 0, 0, 1425,
	1426, 1432, 1431, 1427, 1453, 0, 1424, 1422, 1423, 1415,
	1416, 1417, 1418, 1420, 1421, 0, 0, 1451, 0, 0,
	1461, 0, 2005, 0, 1441, 1442, 1443, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1457, 0, 1458, 0, 0,
	1436, 1437, 1438, 1439, 1428, 1429, 0, 0, 0, 0,
	1419, 0, 0, 0, 0, 0, 0, 0, 0, 1449,
	0, 0, 0, 0, 0, 0, 0, 1434, 0, 0,
	0, 0, 0, 1451, 0, 0, 1461, 0, 0, 0,
	1441, 1442, 1443, 0, 0, 1459, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1448, 1457, 0, 1458, 0, 0, 0, 0, 0, 0,
	1428, 1429, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1449, 0, 0, 0, 0,
	0, 0, 0, 1434, 0, 0, 0, 0, 0, 0,
	0, 1440, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1459, 0, 0, 0, 0, 0, 0, 0, 1435,
	0, 0, 0, 0, 0, 0, 1448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1411, 1412, 0, 1444,
	1445, 1446, 1454, 1455, 1456, 0, 0, 1440, 0, 0,
	0, 0, 0, 0, 0, 1447, 0, 0, 0, 0,
	0, 0, 1414, 0, 0, 1435, 1460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1413,
	1452, 0, 0, 0, 0, 0, 0, 1433, 0, 0,
	0, 0, 0, 0, 1430, 0, 0, 1450, 0, 0,
	1425, 1426, 1432, 1431, 1427, 1453, 0, 1424, 1422, 1423,
	1415, 1416, 1417, 1418, 1420, 1421, 0, 0, 0, 0,
	3289, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1436,
	1437, 1438, 1439, 0, 0, 0, 0, 0, 0, 1419,
	0, 0, 0, 1450, 0, 0, 1425, 1426, 1432, 1431,
	1427, 1453, 0, 1424, 1422, 1423, 1415, 1416, 1417, 1418,
	1420, 1421, 1451, 0, 0, 1461, 3285, 0, 0, 1441,
	1442, 1443, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1457, 0, 1458, 0, 0, 0, 0, 0, 0, 1428,
	1429, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1449, 0, 0, 0, 0, 0,
	0, 0, 1434, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1411, 1412, 0, 1444, 1445,
	1446, 1454, 1455, 1456, 0, 0, 1440, 0, 0, 0,
	0, 0, 0, 0, 1447, 0, 0, 0, 0, 0,
	0, 1414, 0, 0, 1435, 1460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1413, 1452,
	0, 0, 0, 0, 0, 0, 1433, 0, 0, 0,
	0, 1411, 1412, 1430, 1444, 1445, 1446, 1454, 1455, 1456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1447, 0, 0, 0, 0, 0, 0, 1414, 0, 0,
	0, 1460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1413, 0, 0, 0, 1436, 1437,
	1438, 1439, 1433, 0, 0, 0, 0, 0, 1419, 1430,
	0, 0, 1450, 0, 0, 1425, 1426, 1432, 1431, 1427,
	1453, 0, 1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420,
	1421, 1451, 0, 0, 1461, 3218, 0, 0, 1441, 1442,
	1443, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1457,
	0, 1458, 0, 0, 1436, 1437, 1438, 1439, 1428, 1429,
	0, 0, 0, 0, 1419, 0, 0, 0, 0, 0,
	0, 0, 0, 1449, 0, 0, 0, 0, 0, 0,
	0, 1434, 0, 0, 0, 0, 0, 1451, 0, 0,
	1461, 0, 0, 0, 1441, 1442, 1443, 0, 0, 1459,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1448, 1457, 0, 1458, 0, 0,
	0, 0, 0, 0, 1428, 1429, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1449,
	0, 0, 0, 0, 0, 0, 0, 1434, 0, 0,
	0, 0, 0, 0, 0, 1440, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1459, 0, 0, 0, 0,
	0, 0, 0, 1435, 0, 0, 0, 0, 0, 0,
	1448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1411, 1412, 0, 1444, 1445, 1446, 1454, 1455, 1456, 0,
	0, 1440, 0, 0, 0, 0, 0, 0, 0, 1447,
	0, 0, 0, 0, 0, 0, 1414, 0, 0, 1435,
	1460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1413, 1452, 0, 0, 0, 0, 0,
	0, 1433, 0, 0, 0, 0, 0, 0, 1430, 0,
	0, 1450, 0, 0, 1425, 1426, 1432, 1431, 1427, 1453,
	0, 1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421,
	0, 0, 0, 0, 3217, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1436, 1437, 1438, 1439, 0, 0, 0,
	0, 0, 0, 1419, 0, 0, 0, 1450, 0, 0,
	1425, 1426, 1432, 1431, 1427, 1453, 0, 1424, 1422, 1423,
	1415, 1416, 1417, 1418, 1420, 1421, 1451, 0, 0, 1461,
	3122, 0, 0, 1441, 1442, 1443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1457, 0, 1458, 0, 0, 0,
	0, 0, 0, 1428, 1429, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1449, 0,
	0, 0, 0, 0, 0, 0, 1434, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1459, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1411,
	1412, 0, 1444, 1445, 1446, 1454, 1455, 1456, 0, 0,
	1440, 0, 0, 0, 0, 0, 0, 0, 1447, 0,
	0, 0, 0, 0, 0, 1414, 0, 0, 1435, 1460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1413, 1452, 0, 0, 0, 0, 0, 0,
	1433, 0, 0, 0, 0, 1411, 1412, 1430, 1444, 1445,
	1446, 1454, 1455, 1456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1447, 0, 0, 0, 0, 0,
	0, 1414, 0, 0, 0, 1460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1413, 0,
	0, 0, 1436, 1437, 1438, 1439, 1433, 0, 0, 0,
	0, 0, 1419, 1430, 0, 0, 1450, 0, 0, 1425,
	1426, 1432, 1431, 1427, 1453, 0, 1424, 1422, 1423, 1415,
	1416, 1417, 1418, 1420, 1421, 1451, 0, 0, 1461, 3041,
	0, 0, 1441, 1442, 1443, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1457, 0, 1458, 0, 0, 1436, 1437,
	1438, 1439, 1428, 1429, 0, 0, 0, 0, 1419, 0,
	0, 0, 0, 0, 0, 0, 0, 1449, 0, 0,
	0, 0, 0, 0, 0, 1434, 0, 0, 0, 0,
	0, 1451, 0, 0, 1461, 0, 0, 0, 1441, 1442,
	1443, 0, 0, 1459, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1448, 1457,
	0, 1458, 0, 0, 0, 0, 0, 0, 1428, 1429,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1449, 0, 0, 0, 0, 0, 0,
	0, 1434, 0, 0, 0, 0, 0, 0, 0, 1440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1459,
	0, 0, 0, 0, 0, 0, 0, 1435, 0, 0,
	0, 0, 0, 0, 1448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1411, 1412, 0, 1444, 1445, 1446,
	1454, 1455, 1456, 0, 0, 1440, 0, 0, 0, 0,
	0, 0, 0, 1447, 0, 0, 0, 0, 0, 0,
	1414, 0, 0, 1435, 1460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1413, 1452, 0,
	0, 0, 0, 0, 0, 1433, 0, 0, 0, 0,
	0, 0, 1430, 0, 0, 1450, 0, 0, 1425, 1426,
	1432, 1431, 1427, 1453, 0, 1424, 1422, 1423, 1415, 1416,
	1417, 1418, 1420, 1421, 0, 0, 0, 0, 2993, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1436, 1437, 1438,
	1439, 0, 0, 0, 0, 0, 0, 1419, 0, 0,
	0, 1450, 0, 0, 1425, 1426, 1432, 1431, 1427, 1453,
	0, 1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421,
	1451, 0, 0, 1461, 2992, 0, 0, 1441, 1442, 1443,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1457, 0,
	1458, 0, 0, 0, 0, 0, 0, 1428, 1429, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1449, 0, 0, 0, 0, 0, 0, 0,
	1434, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1459, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1448, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1411, 1412, 0, 1444, 1445, 1446, 1454,
	1455, 1456, 0, 0, 1440, 0, 0, 0, 0, 0,
	0, 0, 1447, 0, 0, 0, 0, 0, 0, 1414,
	0, 0, 1435, 1460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1413, 1452, 0, 0,
	0, 0, 0, 0, 1433, 0, 0, 0, 0, 1411,
	1412, 1430, 1444, 1445, 1446, 1454, 1455, 1456, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1447, 0,
	0, 0, 0, 0, 0, 1414, 0, 0, 0, 1460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1413, 0, 0, 0, 1436, 1437, 1438, 1439,
	1433, 0, 0, 0, 0, 0, 1419, 1430, 0, 0,
	1450, 0, 0, 1425, 1426, 1432, 1431, 1427, 1453, 0,
	1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421, 1451,
	0, 0, 1461, 2991, 0, 0, 1441, 1442, 1443, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1457, 0, 1458,
	0, 0, 1436, 1437, 1438, 1439, 1428, 1429, 0, 0,
	0, 0, 1419, 0, 0, 0, 0, 0, 0, 0,
	0, 1449, 0, 0, 0, 0, 0, 0, 0, 1434,
	0, 0, 0, 0, 0, 1451, 0, 0, 1461, 0,
	0, 0, 1441, 1442, 1443, 0, 0, 1459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1448, 1457, 0, 1458, 0, 0, 0, 0,
	0, 0, 1428, 1429, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1449, 0, 0,
	0, 0, 0, 0, 0, 1434, 0, 0, 0, 0,
	0, 0, 0, 1440, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1459, 0, 0, 0, 0, 0, 0,
	0, 1435, 0, 0, 0, 0, 0, 0, 1448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1411, 1412,
	0, 1444, 1445, 1446, 1454, 1455, 1456, 0, 0, 1440,
	0, 0, 0, 0, 0, 0, 0, 1447, 0, 0,
	0, 0, 0, 0, 1414, 0, 0, 1435, 1460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1413, 1452, 0, 0, 0, 0, 0, 0, 1433,
	0, 0, 0, 0, 0, 0, 1430, 0, 0, 1450,
	0, 0, 1425, 1426, 1432, 1431, 1427, 1453, 0, 1424,
	1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421, 0, 0,
	0, 0, 2957, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1436, 1437, 1438, 1439, 0, 0, 0, 0, 0,
	0, 1419, 0, 0, 0, 1450, 0, 0, 1425, 1426,
	1432, 1431, 1427, 1453, 0, 1424, 1422, 1423, 1415, 1416,
	1417, 1418, 1420, 1421, 1451, 0, 0, 1461, 2768, 0,
	0, 1441, 1442, 1443, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1457, 0, 1458, 0, 0, 0, 0, 0,
	0, 1428, 1429, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1449, 0, 0, 0,
	0, 0, 0, 0, 1434, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1459, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1411, 1412, 0,
	1444, 1445, 1446, 1454, 1455, 1456, 0, 0, 1440, 0,
	0, 0, 0, 0, 0, 0, 1447, 0, 0, 0,
	0, 0, 0, 1414, 0, 0, 1435, 1460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1413, 1452, 0, 0, 0, 0, 0, 0, 1433, 0,
	0, 0, 0, 0, 0, 1430, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1436, 1437, 1438, 1439, 0, 0, 0, 0, 0, 0,
	1419, 3378, 0, 0, 1450, 0, 0, 1425, 1426, 1432,
	1431, 1427, 1453, 0, 1424, 1422, 1423, 1415, 1416, 1417,
	1418, 1420, 1421, 1451, 0, 2394, 1461, 0, 0, 0,
	1441, 1442, 1443, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1457, 0, 1458, 0, 0, 0, 0, 0, 0,
	1428, 1429, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1449, 0, 0, 0, 0,
	0, 0, 0, 1434, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1459, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3377, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1411, 1412, 0, 1444,
	1445, 1446, 1454, 1455, 1456, 0, 0, 1440, 0, 0,
	0, 0, 0, 0, 0, 1447, 0, 0, 0, 0,
	2365, 0, 1414, 0, 0, 1435, 1460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1413,
	1452, 0, 0, 0, 0, 0, 0, 1433, 0, 0,
	0, 0, 0, 0, 1430, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2366, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1436,
	1437, 1438, 1439, 0, 0, 0, 0, 0, 0, 1419,
	0, 0, 0, 1450, 0, 0, 1425, 1426, 1432, 1431,
	1427, 1453, 0, 1424, 1422, 1423, 1415, 1416, 1417, 1418,
	1420, 1421, 1451, 0, 0, 1461, 0, 0, 0, 1441,
	1442, 1443, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1457, 0, 1458, 0, 0, 0, 0, 0, 0, 1428,
	1429, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1449, 0, 0, 0, 0, 0,
	0, 0, 1434, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1411, 1412, 0, 1444, 1445,
	1446, 1454, 1455, 1456, 0, 0, 1440, 0, 0, 0,
	0, 0, 0, 0, 1447, 0, 0, 0, 0, 0,
	0, 1414, 0, 0, 1435, 1460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1413, 1452,
	0, 0, 0, 0, 2095, 0, 1433, 0, 0, 0,
	0, 1411, 1412, 1430, 1444, 1445, 1446, 1454, 1455, 1456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1447, 0, 0, 0, 2094, 0, 0, 1414, 0, 0,
	0, 1460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1413, 0, 0, 0, 1436, 1437,
	1438, 1439, 1433, 0, 0, 0, 0, 0, 1419, 1430,
	2482, 0, 1450, 2481, 0, 1425, 1426, 1432, 1431, 1427,
	1453, 0, 1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420,
	1421, 1451, 0, 0, 1461, 0, 0, 0, 1441, 1442,
	1443, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1457,
	0, 1458, 0, 0, 1436, 1437, 1438, 1439, 1428, 1429,
	0, 0, 0, 0, 1419, 0, 0, 0, 0, 0,
	0, 0, 0, 1449, 0, 0, 0, 0, 0, 0,
	0, 1434, 0, 0, 0, 0, 0, 1451, 0, 0,
	1461, 0, 0, 0, 1441, 1442, 1443, 0, 0, 1459,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1448, 1457, 0, 1458, 0, 0,
	0, 0, 0, 0, 1428, 1429, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1449,
	0, 0, 0, 0, 0, 0, 0, 1434, 0, 0,
	0, 0, 0, 0, 0, 1440, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1459, 0, 0, 0, 0,
	0, 0, 0, 1435, 0, 0, 0, 0, 0, 0,
	1448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1411, 1412, 0, 1444, 1445, 1446, 1454, 1455, 1456, 0,
	0, 1440, 0, 0, 0, 0, 0, 0, 0, 1447,
	0, 0, 0, 0, 0, 0, 1414, 0, 0, 1435,
	1460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1413, 1452, 0, 0, 0, 0, 0,
	0, 1433, 0, 0, 0, 0, 0, 0, 1430, 0,
	0, 1450, 0, 0, 1425, 1426, 1432, 1431, 1427, 1453,
	0, 1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1436, 1437, 1438, 1439, 0, 0, 0,
	0, 0, 0, 1419, 0, 0, 0, 1450, 0, 0,
	1425, 1426, 1432, 1431, 1427, 1453, 0, 1424, 1422, 1423,
	1415, 1416, 1417, 1418, 1420, 1421, 1451, 0, 0, 1461,
	0, 0, 0, 1441, 1442, 1443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1457, 0, 1458, 0, 0, 0,
	0, 0, 0, 1428, 1429, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1449, 0,
	0, 0, 0, 0, 0, 0, 1434, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1459, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1448,
	804, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1411,
	1412, 0, 1444, 1445, 1446, 1454, 1455, 1456, 0, 0,
	1440, 0, 0, 0, 0, 0, 0, 0, 1447, 0,
	0, 0, 0, 0, 0, 1414, 0, 0, 1435, 1460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1413, 1452, 0, 0, 0, 0, 0, 0,
	1433, 0, 0, 0, 0, 1411, 1412, 1430, 1444, 1445,
	1446, 1454, 1455, 1456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1447, 0, 0, 0, 0, 0,
	0, 1414, 0, 0, 0, 1460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1413, 0,
	0, 0, 1436, 1437, 1438, 1439, 1433, 0, 0, 0,
	0, 0, 1419, 1430, 0, 0, 1450, 0, 0, 1425,
	1426, 1432, 1431, 1427, 1453, 0, 1424, 1422, 1423, 1415,
	1416, 1417, 1418, 1420, 1421, 1451, 0, 0, 1461, 0,
	0, 0, 1441, 1442, 1443, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1457, 0, 1458, 0, 0, 1436, 1437,
	1438, 1439, 1428, 1429, 0, 0, 0, 0, 1419, 0,
	0, 0, 0, 2488, 0, 0, 0, 1449, 0, 0,
	0, 0, 0, 0, 0, 1434, 0, 0, 0, 0,
	0, 1451, 0, 0, 1461, 0, 0, 0, 1441, 1442,
	1443, 0, 0, 1459, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1448, 1457,
	0, 1458, 0, 0, 0, 0, 0, 0, 1428, 1429,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1449, 0, 0, 0, 0, 0, 0,
	0, 1434, 0, 0, 0, 0, 0, 0, 0, 1440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1459,
	0, 0, 0, 0, 0, 0, 0, 1435, 0, 0,
	0, 0, 0, 0, 1448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1411, 1412, 0, 1444, 1445, 1446,
	1454, 1455, 1456, 0, 0, 1440, 0, 0, 0, 0,
	0, 0, 0, 1447, 2756, 0, 0, 2483, 0, 0,
	1414, 0, 0, 1435, 1460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1413, 1452, 0,
	0, 0, 0, 0, 0, 1433, 0, 0, 0, 0,
	0, 0, 1430, 0, 0, 1450, 0, 0, 1425, 1426,
	1432, 1431, 1427, 1453, 0, 1424, 1422, 1423, 1415, 1416,
	1417, 1418, 1420, 1421, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1436, 1437, 1438,
	1439, 0, 0, 0, 0, 0, 0, 1419, 0, 0,
	0, 1450, 0, 0, 1425, 1426, 1432, 1431, 1427, 1453,
	0, 1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421,
	1451, 0, 0, 1461, 0, 0, 0, 1441, 1442, 1443,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1457, 0,
	1458, 0, 0, 0, 0, 0, 0, 1428, 1429, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1449, 0, 0, 0, 0, 0, 0, 0,
	1434, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1459, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1448, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1411, 1412, 0, 1444, 1445, 1446, 1454,
	1455, 1456, 0, 0, 1440, 0, 0, 0, 0, 0,
	0, 0, 1447, 0, 0, 0, 0, 0, 0, 1414,
	0, 0, 1435, 1460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1413, 1452, 0, 0,
	0, 0, 0, 0, 1433, 0, 0, 0, 0, 1411,
	1412, 1430, 1444, 1445, 1446, 1454, 1455, 1456, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1447, 0,
	0, 0, 2436, 0, 0, 1414, 0, 0, 0, 1460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1413, 0, 0, 0, 1436, 1437, 1438, 1439,
	1433, 0, 0, 0, 0, 0, 1419, 1430, 0, 0,
	1450, 0, 0, 1425, 1426, 1432, 1431, 1427, 1453, 0,
	1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421, 1451,
	0, 0, 1461, 0, 0, 0, 1441, 1442, 1443, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1457, 0, 1458,
	0, 0, 1436, 1437, 1438, 1439, 1428, 1429, 0, 0,
	0, 0, 1419, 0, 0, 0, 0, 0, 0, 0,
	0, 1449, 0, 0, 0, 0, 0, 0, 0, 1434,
	0, 0, 0, 0, 0, 1451, 0, 0, 1461, 0,
	0, 0, 1441, 1442, 1443, 0, 0, 1459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1448, 1457, 0, 1458, 0, 0, 0, 0,
	0, 0, 1428, 1429, 0, 0, 0, 0, 2450, 0,
	0, 0, 0, 0, 0, 0, 0, 1449, 0, 0,
	0, 0, 0, 0, 0, 1434, 0, 0, 0, 0,
	0, 0, 0, 1440, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1459, 0, 0, 0, 0, 0, 0,
	0, 1435, 0, 0, 0, 0, 0, 0, 1448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1411, 1412,
	0, 1444, 1445, 1446, 1454, 1455, 1456, 0, 0, 1440,
	0, 0, 0, 0, 0, 0, 0, 1447, 0, 0,
	0, 0, 0, 0, 1414, 0, 0, 1435, 1460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1413, 1452, 0, 0, 0, 0, 0, 0, 1433,
	0, 0, 0, 0, 0, 0, 1430, 0, 0, 1450,
	0, 0, 1425, 1426, 1432, 1431, 1427, 1453, 0, 1424,
	1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1411, 1412, 0, 1444, 1445, 1446, 1454,
	1455, 1456, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1436, 1437, 1438, 1439, 0, 0, 0, 0, 1414,
	0, 1419, 0, 1460, 0, 1450, 0, 0, 1425, 1426,
	1432, 1431, 1427, 1453, 0, 1424, 1422, 1423, 1415, 1416,
	1417, 1418, 1420, 1421, 1451, 0, 1413, 1461, 0, 0,
	0, 1441, 1442, 1443, 1433, 0, 0, 0, 0, 0,
	0, 1430, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1457, 0, 1458, 0, 0, 0, 0, 0,
	0, 1428, 1429, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1449, 0, 0, 0,
	0, 0, 0, 0, 1434, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1436, 1437, 1438, 1439,
	0, 0, 1459, 0, 0, 0, 1419, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1451,
	0, 0, 1461, 0, 0, 0, 1441, 1442, 1443, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1457, 1440, 1458,
	0, 0, 0, 0, 0, 0, 1428, 1429, 0, 0,
	0, 0, 0, 0, 0, 0, 1435, 1625, 0, 0,
	0, 1449, 0, 0, 0, 0, 0, 0, 0, 1434,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1452, 0, 0, 0, 0, 0, 1459, 0, 0,
	0, 0, 0, 0, 0, 1637, 1619, 1626, 1609, 1647,
	1646, 0, 0, 1611, 1610, 0, 0, 0, 0, 0,
	0, 1657, 1658, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1440, 0, 0, 0, 0, 0, 0,
	0, 1648, 0, 1644, 1643, 0, 0, 0, 0, 0,
	0, 1435, 0, 0, 1450, 1642, 0, 1425, 1426, 1432,
	1431, 1427, 1453, 0, 1424, 1422, 1423, 1415, 1416, 1417,
	1418, 1420, 1421, 0, 0, 0, 1452, 0, 0, 0,
	0, 0, 0, 0, 1641, 1639, 1640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1621, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1630, 1624, 1632,
	1634, 1635, 1636, 1631, 0, 1629, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1653, 1654, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1450,
	0, 0, 1425, 1426, 1432, 1431, 1427, 1453, 0, 1424,
	1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421, 0, 1613,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1645, 0, 0, 0, 1622, 0, 1623, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1638, 0, 0, 0, 1606,
	1604, 1605, 1608, 1607, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1614, 1615, 1617, 1618, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1633,
	1616, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1656, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1612, 0,
	1649, 1650, 1651, 1652, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1620,
	0, 0, 0, 0, 1627, 1655,
}
var sqlPact = [...]int{

	5882, -1000, -1000, -1000, -1000, -1000, -1000, 182, 177, 176,
	175, 174, 172, 167, 163, 155, -1000, -1000, -1000, 151,
	-1000, -1000, 150, -1000, 146, 138, 137, 136, -1000, 133,
	125, -1000, -1000, -1000, -1000, 124, 122, 121, 49236, 1586,
	58747, 50475, 1690, 2106, 43859, 58332, 43444, 57917, 57502, 109,
	-1000, 57087, 108, 107, 106, -1000, -1000, 104, 1575, 35529,
	100, 99, 97, 2293, 93, 91, -1000, 90, -1000, 9566,
	1195, -1000, 88, 87, -1000, 8103, 424, 50060, 2073, 86,
	84, 35113, 2060, -1000, -1000, 1526, -1000, -1000, 78, 75,
	74, 73, 72, 71, 69, 67, 66, -1000, 65, 63,
	62, 61, 60, 56, 54, 53, 52, 49, 48, 47,
	45, 44, 43, 42, 40, -1000, 7686, 1357, 1280, 1276,
	1268, 1259, 1256, 774, 39, 37, 33, 30, 28, 27,
	-1000, -1000, 24, 21, 14, 12, -1000, 10, 9, 165,
	8, 6, 3, 0, -2, 1809, 2065, 1179, 514, 16927,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	62837, 59156, -8, -60, -14, -1000, 2371, 764, 29710, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 405,
	-1000, -1000, -1000, 256, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1372, 622, -1000, -1000, -1000,
	56672, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 59156,
	-1000, 1582, 1, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	617, -1000, 1577, 213, 1508, -1000, -1000, -1000, -1000, -1000,
	59156, -1000, -1000, 2655, 2653, 1522, 616, 56263, -1000, 1141,
	-1000, 765, 19568, -1000, 970, -1000, 19568, 255, -1000, -1000,
	-1000, -1000, -1000, 43029, 13863, 42614, 42199, 39306, 55848, 13438,
	48827, 953, -1000, -1000, -1000, -1000, -1000, -18, 36756, 59156,
	-1000, 252, -1000, -1000, -1000, -1000, -1000, -1000, 25843, 440,
	25392, 530, 24941, 527, -1000, -1000, -1000, -1000, 2652, 2651,
	864, 2648, 2303, 62428, 1331, 2647, 1304, 929, 815, 2645,
	2644, 2643, 2642, 2641, 2640, 2639, 1294, 55433, 2089, 38881,
	38456, 49236, 49236, 1913, 55018, -1000, -1000, 1038, 1017, -1000,
	-1000, -1000, -1000, 2168, 2095, 2092, 48412, -1000, -1000, 2636,
	2635, 2630, 2625, 2622, 62019, 1301, 2621, 1812, 2620, 2615,
	2614, 2613, 2612, 2611, 2610, 2609, 2608, -1000, 47997, 47582,
	47167, 46752, 54603, 38031, 37606, -1000, -1000, -1000, 31366, 4038,
	54188, 32218, 49236, -1000, -1000, 26281, -89, -1000, -1000, -1000,
	2061, -1000, 26281, -89, -1000, 2087, 1377, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1722, 1272, 2471, 37181, 1509,
	1084, 2166, 2607, 1769, 2164, 2162, 2160, 2155, 2142, 1281,
	1837, 1156, 1194, 2137, 2133, 2502, 1460, 41784, 2604, 2601,
	2333, 2130, 2055, -1000, -1000, -1000, -1000, 1145, -1000, -1000,
	-1000, -1000, -1000, 44268, -1000, -1000, 968, -1000, -1000, 968,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 952, 61201, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1176, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1426, -1000, 1504, -1000, -1000, 2599, 2065,
	1788, 2344, 2344, 2344, 2397, 393, 381, -1000, 165, -1000,
	-1000, 68937, -1000, -1000, 26281, 26281, 26281, 26281, 26281, 1468,
	-1000, 615, -1000, -1000, 668, -1000, 611, 540, -1000, -1000,
	-1000, -1000, -1000, -1000, 610, 2508, -1000, 827, -1000, -1000,
	-1000, -1000, 2467, -1000, 16038, -1000, -1000, -1000, 316, 605,
	26281, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 251, 741, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 521, 1387, 520, 520, 520, -1000, -1000,
	807, -1000, -1000, -1000, 273, 512, 268, 507, -1000, -1000,
	-1000, -1000, 2086, 602, 601, -1000, 600, 599, 598, -1000,
	-1000, -1000, 595, 594, 591, 590, 589, 587, 586, 585,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 806, -1000, 575,
	573, 572, 569, 568, 567, 564, 554, 545, -1000, -1000,
	-19, 59156, -1000, 405, -19, -1000, -1000, 542, -1000, 20006,
	20006, 20006, -1000, -1000, 1561, 26281, -1000, 1840, -1000, 555,
	-242, 693, 30536, -1000, 28865, 693, 675, 33459, -1000, 2053,
	-1000, -1000, 541, 238, -1000, -1000, 2052, 59156, 14286, 59156,
	49236, 49236, -1000, 2266, 26281, -1000, -1000, 39729, 36347, 59156,
	49645, 2430, 69253, 36347, 59156, 2081, -1000, -1000, -1000, 59156,
	-1000, 26281, -1000, 2429, 1121, -28, -1000, -1000, -1000, -1000,
	-1000, -1000, 1791, 1768, 938, 1629, 1053, -1000, 19568, 2296,
	-1000, -1000, -1000, 228, 14286, -1000, 1485, 2238, 1054, -1000,
	1621, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1329,
	2236, -1000, 1695, 2227, 1325, -1000, -1000, 786, 2225, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1537, -1000,
	-1000, 2325, -1000, -1000, 1703, 2223, -91, -1000, -1000, 39729,
	36756, -21, -1000, -1000, -42, -1000, 13013, 68937, -1000, -1000,
	-1000, 68937, 733, -1000, -1000, 2222, -1000, 68937, 731, -1000,
	-1000, 2220, -1000, -1000, -1000, 2596, -1000, 2594, 1745, 2593,
	2592, 2590, -1000, 1323, 1381, 2589, -1000, 2588, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 46337, 45922, 813, -1000, 1552,
	-1000, -1000, 45507, 782, 1744, -1000, -1000, 1743, -1000, 775,
	-1000, 2585, 53773, 1932, 782, 1724, -1000, -1000, -1000, -1000,
	-1000, 49236, -1000, 49236, -1000, 49236, -1000, 1164, -1000, 61610,
	-242, -1000, -1000, -1000, -1000, -1000, 2219, 2584, 2582, 2577,
	-1000, 59156, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 159, 2218, -1000, -1000, 159, 2214, -1000, 159, 2212,
	-1000, 157, 2206, -1000, -1000, 1595, 2204, -1000, -85, 2201,
	-1000, -1000, -85, 2196, -1000, -29, -1000, -1000, -1000, 764,
	-1000, 30951, 53358, 39729, 737, 630, 68937, -1000, 39729, 68937,
	-1000, 45507, -1000, 52943, 45098, -1000, -1000, 1076, 1834, -1000,
	-1000, -1000, -1000, 39729, 39729, -1000, 52528, -1000, 1478, 1243,
	2339, 49236, -1000, -1000, 2078, -1000, 35938, 49236, -1000, 49236,
	-1000, 49236, -1000, 49236, -1000, 49236, -1000, 2574, 2573, 2569,
	2216, 1261, 1254, 59156, -1000, -1000, 2352, 59156, -1000, 59156,
	-1000, -1000, -1000, 1784, -1000, -1000, -1000, -1000, 49236, -1000,
	-1000, -1000, -1000, -1000, -1000, 2076, -1000, 1203, -1000, 1069,
	-1000, -1000, 160, -1000, -1000, -28, -1000, 61201, -1000, -1000,
	2065, 1788, -1000, 59156, -1000, -1000, -1000, 2065, 1597, 1868,
	24490, 1793, 26281, 165, -1000, -1000, 165, 165, 19130, -1000,
	-1000, 69253, 69253, 14286, 976, 26281, 26281, 26281, 26281, 26281,
	26281, 26281, 26281, 26281, 26281, 26281, 26281, 26281, 26281, 26281,
	26281, 26281, 26281, 26281, 26281, 26281, 26281, 26281, 26281, 26281,
	26281, 26281, 26281, 26281, 26281, 26281, 26281, 26281, 26281, 26281,
	1799, 26281, 947, 26281, 26281, 26281, 26281, 1548, -1000, -1000,
	1430, 433, 1602, -1000, 2475, 2475, 2475, 69042, 69042, 524,
	2564, 668, -1000, 26281, -1000, -89, 26281, 14711, -1000, 2492,
	1182, -1000, -1000, 381, 6434, 1708, -1000, 363, 15162, -1000,
	-1000, -1000, 16038, 540, 24039, 26281, 801, 68937, 12590, 2080,
	1970, -1000, 2491, -1000, -1000, 2467, -1000, -1000, -1000, -1000,
	2467, 971, 964, 2490, -1000, 2467, 2467, 537, 703, 702,
	674, 479, 470, 26281, 26281, 26281, 26281, 26281, 26281, 26281,
	26281, -1000, 23601, 23150, 22699, 27595, 22248, 26281, 16476, 21797,
	21346, 59156, -19, 2428, 26281, 179, -1000, 67410, -1000, 179,
	179, 535, -38, 68937, 1859, 1859, 30123, 1798, 1489, 1489,
	1489, -1000, 531, 647, 693, 10036, 50884, 1494, 693, 693,
	219, 230, 360, 28452, 1840, 50884, -1000, -1000, 49236, 529,
	14711, 14286, 1092, -44, 206, 1888, 1887, 1864, -1000, 1275,
	-45, 737, 942, -40, -1000, 1043, -46, -1000, 1048, -1000,
	-1000, -1000, -1000, 132, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 804, 528, 525, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 521, 1387, 520, 520, 520, -1000, -1000, -1000, 273,
	512, 268, 507, -1000, -1000, -1000, -1000, -1000, -1000, 2041,
	-42, 49645, 744, -51, 868, -28, -1000, 968, -1000, 1658,
	-1000, -1000, -1000, -1000, -1000, -1000, 1056, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2505, -1000, 2480, -1000, -1000, 2488,
	-20, -1000, -1000, 14286, -1000, -31, 1230, -1000, 41369, 2350,
	2327, 2311, 1132, -1000, 1106, 2393, 44268, 2413, 29, -1000,
	2039, -1000, -1000, 763, 1065, 940, 44268, 1695, -1000, 69253,
	-1000, 1902, 2392, 1122, 1029, 1122, 1122, 1108, -1000, 44268,
	937, 1414, 39729, -1000, 935, -1000, -33, 2411, 20, -1000,
	2036, 932, -1000, -1000, 49236, 14286, 716, -21, 36756, 59156,
	205, -1000, 26281, -89, 26281, -89, -1000, -1000, 2194, -1000,
	-1000, -1000, 2563, 1362, 1807, -1000, -1000, -1000, 504, 1721,
	1695, 1719, -1000, -1000, 44683, 2028, 59156, 1893, -24, 49236,
	-1000, -1000, 1413, -1000, 2188, 2187, 538, 2558, -1000, 1544,
	1710, -1000, -1000, -1000, 60792, 986, 2180, 793, 181, 2427,
	181, 34285, -1000, 59156, -1000, 59156, -1000, -1000, -1000, 2557,
	-1000, 49236, -1000, -1000, 49236, -1000, 49236, -1000, 49236, -1000,
	49236, 49236, -1000, 59156, 39729, 39729, 39729, 1115, 40551, -52,
	358, -1000, 52119, 59156, 834, 40960, -211, 737, 716, -1000,
	716, -1000, 49236, 2074, -1000, -1000, -1000, -1000, -1000, -1000,
	2554, 2553, -1000, -1000, -1000, 59156, -1000, 59156, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1209, -1000, 2071,
	-1000, 2067, -1000, 23, -1000, -1000, -1000, -1000, -1000, 1343,
	49236, 49236, 49236, -1000, 44268, -1000, -1000, 2065, -1000, -1000,
	-1000, -1000, -1000, 68937, -1000, 482, -1000, -1000, 68937, 1282,
	1896, -1000, 1896, -22, -1000, 67065, 1829, 49236, -1000, -1000,
	-1000, -1000, -1000, 760, 948, 948, 955, 955, 955, 955,
	2414, 243, 359, 4050, 209, 209, 209, 209, 209, 209,
	209, 209, 663, 434, 434, 663, 663, 663, 663, 663,
	434, 434, 434, 209, 209, 209, 69042, 4536, 7432, 26281,
	26281, 930, 1420, 433, 6871, 26281, 6367, 6367, 6367, 6367,
	-1000, 1292, -1000, -1000, -1000, -1000, 2024, 503, 27595, 27595,
	-1000, -1000, -1000, -1000, 15600, 26281, -1000, -1000, -1000, -1000,
	20895, -1000, -1000, 66507, -247, 355, -188, -12, -1000, 26281,
	26281, 26281, 348, -1000, 345, -1000, -1000, 927, -1000, 924,
	918, 916, -1000, 502, 189, 26281, 59156, -1000, 64009, 645,
	-113, -1000, -56, 1101, -1000, 26281, 188, -1000, 1486, 500,
	499, 344, -62, 343, 747, 734, 342, 339, 338, 26281,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	68658, 63728, 63662, 9380, 5630, 9314, 8849, -75, 337, -1000,
	2023, -188, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 336,
	-1000, 335, -1000, 68592, -188, 334, 4609, -1000, 27595, 27595,
	27595, -1000, 333, -1000, 67344, -1000, 68313, 20457, 20457, 20457,
	332, 68034, 26281, -188, -76, -1000, -81, -1000, -1000, 497,
	-86, 793, 20006, 29294, 14286, -1000, 793, 793, 26281, -1000,
	26281, 1863, -1000, -1000, -1000, 1853, 1472, 1859, 30123, -1000,
	-1000, -1000, -1000, 50884, 633, 693, 50884, -1000, 2467, 1910,
	-1000, -1000, -1000, 59156, 405, -1000, 50884, 50884, 14286, 693,
	-1000, 331, 32631, -12, 184, -1000, -1000, 14286, 1875, 1875,
	1875, -1000, -1000, 2022, 59156, 2442, -1000, 1405, -1000, 69253,
	-1000, 667, 920, -1000, 2487, 495, -1000, 2467, 2467, 59156,
	143, 19568, -1000, 968, -1000, -1000, 1185, -1000, 1368, -1000,
	958, -1000, -1000, -1000, 19568, -1000, 1434, 59156, 59156, 49236,
	-1000, -1000, 1707, 60383, 1696, 69253, 59156, -1000, -1000, 494,
	490, 1828, 1827, 59156, 59156, 59974, 59565, 59156, 1464, 26281,
	1520, 1354, -89, -1000, -89, 489, 1014, 49236, 49236, 1316,
	-1000, -1000, -1000, -1000, -1000, 49236, -1000, -1000, 2483, -1000,
	1122, -1000, -1000, -1000, 1122, 1695, 1315, 49236, 39729, 785,
	59156, 1431, -89, -1000, -89, 487, 14286, 1378, -1000, 1940,
	-1000, -1000, -1000, 12167, 68937, -1000, 68937, -1000, 59156, -1000,
	811, 59156, 40960, 779, 2178, -1000, 1695, 2177, 405, -1000,
	-1000, 33872, -42, 737, 39729, 49236, -24, 39729, 39729, 39729,
	2551, 486, 2550, -1000, 49236, 2173, 1541, 1687, 2135, 688,
	59156, 1497, -1000, 26281, 1374, -1000, 33046, 822, 59156, 1287,
	102, -1000, -1000, -1000, 5, 59156, -1000, 2545, -1000, -1000,
	159, 159, 159, -1000, 157, 1595, -1000, -85, -85, -1000,
	-1000, 1115, 737, -26, 484, -1000, 707, 701, 31795, 39729,
	-92, -1000, -1000, -1000, -1000, -1000, 49236, 59156, 546, 1921,
	59156, -1000, 737, -1000, -1000, 783, -1000, 1009, -1000, -1000,
	-42, -42, -1000, 1192, 1184, 59156, -1000, 14286, 59156, 49236,
	14286, 49236, -1000, -1000, -1000, -1000, -1000, 1282, -1000, 26281,
	-1000, -1000, -1000, 19130, -1000, -1000, -1000, 49236, -231, 26281,
	26281, 6347, 5008, 26281, 27595, 27595, -1000, 26281, 4972, -1000,
	-1000, -1000, -1000, -1000, 2010, 483, 26281, 69253, 6960, 5739,
	-1000, 330, 8388, 663, -1000, 26281, -1000, 328, 18692, -1000,
	67689, -39, -39, -1000, 2503, 1761, 1356, 1351, 1225, 2482,
	11744, -188, -94, -1000, -1000, 666, -1000, 2141, -1000, 26281,
	67968, 11321, -1000, 34698, 796, 1497, -1000, -1000, 2467, 736,
	-1000, -1000, -1000, 736, -1000, 66228, 69253, 69253, 26281, 26281,
	-1000, 26281, 26281, 26281, -1000, -1000, 26281, -1000, -1000, 2009,
	26281, -1000, 69253, 69253, 27595, 27595, 27595, 27595, 27595, 27595,
	27595, 27595, 27595, 27595, 27595, 27595, 27595, 27595, 27595, 27595,
	27595, 27595, 27595, 1831, 27595, 2473, 2473, 2473, -1000, 1994,
	2009, 26281, 26281, 69253, 327, 324, 323, -1000, 26281, -188,
	-1000, -1000, 1115, -1000, 1969, -1000, -111, -1000, 1840, -1000,
	-1000, 1969, 1969, -98, 68937, 30123, 30123, -1000, 476, 26281,
	1842, -1000, 643, -1000, -99, -1000, 50884, -1000, 642, -248,
	-1000, 700, -1000, -1000, -1000, 405, -1000, -1000, -1000, 180,
	50884, -1000, -103, -1000, 2424, 312, 14286, -1000, -1000, -1000,
	-1000, -1000, -1000, -89, -42, 1505, 2501, -1000, 2469, 662,
	641, 308, 2467, 307, 306, -42, 59156, -1000, -28, -1000,
	-1000, -1000, 26281, -1000, -1000, 2321, 913, 910, -1000, 2170,
	-1000, 1679, -1000, 828, -1000, 1224, -1000, 26281, 26281, 469,
	459, 1388, 2539, 2147, 1595, 2134, 1595, -1000, -1000, 725,
	-1000, 68937, 457, 456, -1000, -31, 1213, -1000, -1000, 26281,
	26281, 51706, -1000, 2325, -1000, 908, -1000, -1000, -1000, 1695,
	907, -1000, -1000, 1412, -1000, -1000, -1000, -1000, 26281, -1000,
	-33, 906, 737, 2005, -1000, 2538, 2537, 2536, 303, -37,
	-1000, 2423, 1593, 59156, 49236, 49236, 2422, 715, -1000, 2467,
	-1000, -1000, -1000, -1000, 782, -1000, -1000, 2534, -1000, 833,
	14286, 49236, 2128, 1801, 688, 40142, -1000, 782, 1868, -1000,
	68937, -1000, 1287, 18241, 2314, -116, -1000, 166, -1000, -1000,
	-1000, 793, 34285, 30123, 26281, 2533, -117, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 51297, 51297, 39729, 39729, 39729,
	737, 59156, 59156, 40960, 2532, 452, 59156, 59156, 451, -1000,
	-1000, -1000, 1501, 49236, -1000, -1000, 773, -1000, -1000, 1433,
	1600, -1000, 1511, 66162, -1000, 2336, 14286, 2418, 6367, 26281,
	26281, 3495, 3605, 472, 6367, 26281, 26281, 69253, 7191, -123,
	26281, 26281, -1000, 26281, 640, 68937, 2500, 26281, 301, 299,
	297, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 295,
	-1000, -1000, -1000, -1000, -1000, 68937, 26281, 144, -1000, -1000,
	-1000, 63246, -1000, 26281, 293, 292, -1000, -1000, -1000, 291,
	290, 3884, 5287, 65883, 65604, 65538, 68937, 1994, 68937, -1000,
	-1000, 631, 631, 1099, 1099, 1099, 1099, 2473, 378, 588,
	1044, 1628, 1628, 1628, 3631, 824, 824, 1628, 1628, 1628,
	2000, 1748, 448, 5085, -1000, -1000, 68937, 68937, 284, -1000,
	-1000, -1000, -188, 278, 1957, 2386, -1000, 30123, 1957, 1957,
	-1000, -1000, 1472, 59156, 68937, 30123, -242, -1000, 2467, -1000,
	-1000, 1910, -1000, 10471, -1000, 14286, -1000, -1000, 32631, -1000,
	445, -1000, 103, -1000, -1000, -1000, 639, 2531, 651, -1000,
	276, -1000, -1000, -42, 68937, 59156, 59156, 59156, 2123, -1000,
	3632, -1000, 65259, -124, -1000, 67065, 26281, 59156, -1000, 1429,
	1836, 856, -1000, 59156, -1000, 59156, -1000, -1000, 59156, 59156,
	49236, -128, 68937, -43, -1000, 699, -1000, 49236, 49236, 39729,
	-130, 14286, -1000, 39729, -1000, -1000, -1000, 1916, -89, -1000,
	2528, 443, 1695, -89, -1000, 1500, -1000, 637, -1000, -1000,
	442, 59156, 1535, 439, 14286, 1804, 688, 40142, -1000, 986,
	1287, -1000, -1000, -53, -1000, 481, -89, 59156, 2527, 1497,
	-1000, -72, 68937, -1000, 696, -1000, -134, -1000, -1000, 271,
	-1000, 2286, 2285, -1000, -1000, 26281, 438, 437, 59156, 1599,
	-1000, -1000, -1000, -1000, 14286, 990, -1000, -1000, -1000, 2336,
	6367, 6367, 26281, 26281, 26281, 6367, 7191, -136, -1000, 6367,
	6367, -188, -1000, -1000, 67689, -1000, -1000, -1000, -1000, 68937,
	10898, 1436, -1000, 64980, -1000, -1000, -1000, -1000, 26281, 26281,
	-1000, -1000, -1000, -1000, -1000, 27595, 1998, 436, 69253, -1000,
	-1000, 789, 26281, 26281, 1840, 789, 789, -1000, -138, -1000,
	693, -1000, -1000, -1000, 2467, 103, -1000, 2525, 14286, 650,
	-1000, 2524, -1000, -1000, -1000, -1000, 59156, -1000, 59156, -1000,
	14286, 59156, 1991, 1665, -1000, -1000, 1821, 435, 27595, 49236,
	723, 1988, 1394, 26281, -1000, -140, -142, 1652, -1000, -1000,
	1640, 26281, -1000, 69253, 1595, 1595, -144, -148, -1000, 905,
	59156, 17803, -1000, -1000, -1000, 902, -1000, -85, 1431, 1945,
	772, -1000, 40960, 779, -1000, -1000, 758, -1000, 26281, -1000,
	49236, 26281, 1524, -1000, 688, 40142, -1000, 2135, -1000, 2226,
	59156, 2307, -1000, -1000, -1000, 1868, 433, -1000, 737, 432,
	423, -152, 26281, 26281, -154, -112, -1000, 692, 689, -1000,
	-1000, 49236, -1000, 6367, 6367, 6367, -1000, 264, -1000, -1000,
	1497, 2382, -1000, 64914, 64635, 3538, 27595, 69253, -156, -1000,
	59156, 68937, -188, -1000, -1000, -1000, 50884, 636, -1000, 2522,
	-1000, -1000, 1858, -1000, -1000, -1000, 59156, 1673, -1000, -1000,
	26281, 5085, 422, 26281, -1000, -1000, 1912, 2015, 1916, 421,
	-1000, -1000, -1000, -1000, 1348, -1000, -1000, 68937, 2359, -1000,
	-1000, 420, 418, 417, 686, 1987, -1000, 416, 779, -1000,
	1469, -1000, 1897, 260, 2421, 758, -1000, 2443, -1000, -160,
	833, -164, 49236, 40142, -1000, 1801, 1003, -165, 59156, 1287,
	-1000, -1000, 39729, 39729, 1394, -166, -171, -1000, 1599, -1000,
	59156, -1000, 59156, -1000, -1000, 1400, 26281, -1000, -1000, 3538,
	-175, -1000, -153, -1000, 2420, -1000, -1000, -1000, -1000, -1000,
	2122, 64356, 1772, 59156, 64290, 2013, -1000, -1000, 1431, 59156,
	49236, 831, 14286, 1433, 1433, 26281, 17365, 1445, 26281, -1000,
	49236, -1000, 2284, 1916, -89, -1000, -1000, 1394, 414, 1394,
	408, -1000, 1804, 1114, -1000, 793, -1000, -1000, -179, -181,
	1916, 1394, -1000, -1000, -183, -187, 134, 27157, 27157, 27157,
	-188, -1000, 59156, 407, 2104, -1000, 1514, 1353, 25, 861,
	-1000, -1000, 1988, -189, 405, -1000, 26281, -1000, -191, -1000,
	821, -193, -1000, 820, -197, -1000, 1982, -1000, -205, 400,
	-1000, 1431, 772, 1916, 26281, 1916, 26281, -1000, 34285, -1000,
	737, 737, 1431, 1916, -1000, -1000, -1000, -1000, -1000, 28018,
	1530, 1269, 66786, -1000, -1000, -1000, -1000, 59156, -1000, 1519,
	1515, 1134, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1772, 68937, -1000, 1433, 1943, -1000, 1433, 1981, -1000, 1443,
	-1000, 59156, 779, -1000, 1431, -209, 1431, -213, -201, -1000,
	-1000, -1000, 1431, 2435, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2270, -1000, 843, 1683, 1683, 1514, -1000, 399, -1000,
	397, -1000, -215, -1000, 766, 1394, 766, 1394, -1000, -1000,
	26719, -1000, 2445, -1000, -1000, 1782, -1000, 1988, 26281, 26281,
	1580, -1000, 2513, 1916, -1000, 1916, -1000, -1000, -1000, -1000,
	-1000, -220, -221, -1000, -1000, -1000, -1000, 1431, 1431, 1431,
	892, 766, 766, -1000, 396, -1000, -1000, 26281, -234, 1431,
	-1000,
}
var sqlPgo = [...]int{

	0, 3184, 3182, 3181, 3180, 3177, 3176, 3173, 3172, 3171,
	3170, 3167, 3166, 3163, 3162, 3161, 3160, 3159, 3157, 3156,
	3155, 3154, 3152, 3151, 3150, 3148, 3145, 3144, 3143, 3138,
	3136, 3135, 3130, 3129, 3128, 3126, 3125, 3124, 3121, 3120,
	3117, 3116, 3115, 3114, 37, 3113, 3110, 3109, 3107, 3103,
	3100, 3099, 3095, 3094, 3093, 3089, 3087, 3085, 3084, 3082,
	3079, 3078, 35, 3077, 3076, 3075, 3074, 3072, 3071, 3070,
	3069, 3066, 3062, 3059, 3054, 3053, 3052, 100, 3051, 3049,
	3048, 3047, 3045, 3043, 3041, 3037, 3036, 3035, 3034, 3033,
	3022, 3020, 156, 3016, 3015, 3011, 3006, 3005, 3002, 3000,
	2999, 2994, 2993, 187, 2990, 2989, 2987, 2979, 2978, 2977,
	2971, 2970, 2969, 2967, 2966, 2963, 2962, 2961, 2957, 2956,
	2954, 2952, 2951, 2950, 2947, 2946, 2945, 2944, 2943, 2940,
	2939, 203, 143, 2937, 2936, 2935, 2933, 2929, 2927, 87,
	89, 59, 2925, 86, 127, 198, 6702, 184, 2921, 2917,
	2909, 2907, 2905, 68, 135, 133, 121, 126, 131, 2902,
	2897, 63, 51, 34, 26, 97, 2895, 2893, 2891, 2003,
	114, 2887, 2886, 199, 185, 2883, 1411, 2882, 134, 92,
	111, 67, 70, 2878, 108, 18, 2877, 132, 28, 2875,
	120, 66, 33, 6485, 2903, 2873, 75, 207, 71, 149,
	176, 165, 160, 158, 125, 224, 2872, 190, 2871, 122,
	150, 2870, 2869, 2867, 54, 146, 10, 9, 128, 11,
	2865, 12, 2862, 7, 2861, 2860, 2854, 2853, 17, 123,
	2850, 43, 62, 2849, 29, 31, 168, 2848, 181, 2846,
	90, 2845, 194, 152, 164, 20, 175, 2844, 2843, 2842,
	2841, 2840, 96, 23, 93, 2839, 2838, 102, 182, 2837,
	32, 129, 73, 110, 202, 99, 159, 85, 167, 139,
	170, 2833, 2832, 2831, 161, 2827, 2826, 113, 157, 2825,
	2823, 206, 38, 50, 179, 53, 2822, 2821, 118, 2820,
	151, 2819, 2818, 2817, 204, 142, 163, 3, 74, 80,
	25, 8, 180, 115, 79, 84, 2816, 3951, 1136, 332,
	2815, 104, 88, 44, 94, 109, 197, 40, 2814, 2813,
	1027, 2811, 2810, 2783, 2782, 136, 2781, 2780, 2777, 98,
	72, 77, 2775, 2771, 117, 58, 112, 200, 83, 166,
	145, 192, 2770, 137, 2769, 76, 103, 2767, 148, 189,
	65, 2765, 572, 116, 2763, 155, 2761, 2756, 2755, 2753,
	124, 2751, 2748, 447, 2747, 105, 2746, 2745, 144, 174,
	119, 30, 2744, 57, 27, 2739, 147, 56, 2738, 140,
	64, 0, 6813, 5251, 5597, 2737, 2294, 2736, 162, 101,
	2734, 2733, 2732, 2729, 36, 14, 5, 4, 15, 13,
	1178, 971, 2728, 2727, 81, 91, 106, 2726, 201, 169,
	2725, 2724, 2723, 61, 2719, 21, 2715, 19, 2713, 2706,
	22, 6, 2705, 2703, 186, 2702, 188, 2701, 2696, 2447,
	2691, 196, 2685, 95, 2684, 130, 153, 2683, 2681, 2679,
	2678, 193, 2675, 195, 2671, 16, 24, 2, 2670, 2669,
	2668, 154, 1, 2264, 2667, 2661, 55, 141, 69, 2660,
	2658, 138,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 3, 3, 3,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 32, 32, 10,
	10, 9, 9, 9, 11, 11, 6, 6, 6, 6,
	6, 6, 6, 6, 13, 13, 23, 23, 14, 25,
	431, 431, 17, 27, 18, 28, 12, 433, 433, 433,
	433, 21, 19, 19, 29, 142, 142, 142, 142, 16,
	16, 24, 24, 155, 155, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 430, 430, 157, 157,
	156, 152, 152, 434, 434, 158, 158, 158, 160, 160,
	33, 33, 90, 90, 90, 143, 83, 83, 83, 83,
	83, 83, 83, 78, 78, 379, 379, 380, 380, 138,
	138, 139, 139, 139, 139, 140, 140, 141, 141, 141,
	47, 35, 35, 35, 35, 35, 35, 35, 36, 36,
	36, 36, 37, 37, 37, 37, 37, 37, 38, 38,
	38, 38, 38, 38, 45, 45, 45, 45, 132, 132,
	48, 48, 48, 48, 48, 48, 48, 48, 48, 438,
	438, 438, 438, 438, 438, 438, 438, 438, 438, 438,
	438, 438, 438, 438, 438, 438, 438, 438, 438, 438,
	439, 439, 440, 440, 441, 441, 442, 442, 442, 442,
	442, 442, 442, 442, 442, 442, 442, 442, 442, 442,
	442, 442, 442, 442, 442, 442, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 59, 59, 230, 230, 208, 208, 60, 60, 60,
	61, 61, 62, 62, 49, 49, 426, 426, 243, 243,
	347, 347, 64, 64, 65, 65, 65, 65, 65, 65,
	66, 66, 66, 66, 66, 66, 66, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 73, 73, 73,
	74, 74, 74, 71, 71, 71, 69, 69, 69, 68,
	68, 68, 72, 72, 72, 70, 70, 70, 244, 244,
	75, 75, 75, 75, 75, 75, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 349, 349, 76,
	76, 76, 318, 318, 79, 79, 79, 275, 275, 80,
	80, 80, 80, 80, 81, 81, 81, 81, 91, 91,
	91, 91, 429, 429, 236, 236, 173, 173, 173, 173,
	86, 86, 86, 86, 87, 87, 87, 88, 88, 137,
	137, 97, 97, 97, 97, 97, 96, 96, 96, 96,
	96, 96, 39, 39, 39, 40, 40, 41, 41, 42,
	42, 43, 43, 44, 44, 44, 44, 44, 99, 99,
	435, 435, 101, 98, 98, 98, 100, 100, 100, 100,
	102, 103, 103, 103, 103, 103, 103, 104, 104, 373,
	373, 251, 251, 371, 371, 387, 387, 372, 372, 212,
	212, 212, 212, 212, 213, 213, 213, 378, 378, 378,
	378, 378, 378, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 122, 122, 122, 131, 131, 131, 131, 131,
	131, 131, 124, 124, 124, 114, 114, 106, 106, 106,
	106, 110, 110, 110, 110, 110, 107, 107, 111, 111,
	113, 113, 115, 115, 115, 115, 115, 115, 108, 108,
	108, 108, 117, 117, 117, 117, 281, 281, 281, 116,
	116, 333, 333, 127, 127, 127, 127, 127, 127, 332,
	332, 123, 123, 123, 123, 126, 126, 126, 126, 265,
	265, 120, 120, 120, 121, 121, 121, 125, 125, 128,
	128, 128, 128, 109, 109, 109, 444, 444, 444, 129,
	129, 119, 119, 130, 130, 130, 130, 130, 130, 130,
	118, 118, 118, 432, 432, 112, 427, 427, 424, 424,
	424, 424, 424, 424, 424, 425, 425, 428, 428, 84,
	84, 84, 54, 54, 445, 445, 445, 55, 55, 446,
	446, 446, 443, 443, 443, 443, 443, 443, 443, 443,
	214, 214, 215, 215, 299, 299, 299, 299, 299, 216,
	216, 159, 159, 159, 219, 220, 220, 217, 217, 218,
	218, 218, 222, 222, 221, 224, 224, 223, 298, 392,
	392, 393, 393, 393, 393, 393, 393, 393, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 390, 390,
	390, 391, 388, 388, 389, 389, 389, 389, 447, 447,
	447, 447, 447, 447, 448, 448, 297, 297, 228, 228,
	395, 395, 395, 395, 396, 396, 396, 396, 396, 399,
	398, 397, 397, 397, 397, 397, 328, 328, 328, 58,
	58, 58, 262, 262, 261, 261, 263, 263, 263, 263,
	263, 263, 263, 263, 263, 263, 263, 263, 263, 263,
	134, 134, 56, 56, 56, 165, 165, 53, 53, 53,
	450, 450, 57, 57, 57, 451, 451, 63, 63, 63,
	63, 63, 63, 52, 52, 52, 52, 52, 452, 452,
	282, 282, 280, 280, 234, 234, 335, 177, 177, 153,
	153, 153, 20, 22, 22, 15, 15, 30, 30, 31,
	31, 26, 26, 436, 436, 437, 437, 85, 85, 89,
	89, 89, 95, 95, 133, 133, 133, 133, 133, 133,
	133, 34, 34, 34, 34, 46, 46, 46, 46, 93,
	454, 454, 454, 94, 94, 453, 453, 172, 172, 172,
	172, 174, 174, 294, 294, 295, 295, 455, 455, 296,
	296, 296, 296, 167, 166, 168, 168, 51, 51, 51,
	161, 161, 162, 162, 163, 163, 164, 164, 456, 456,
	82, 82, 82, 136, 136, 207, 207, 290, 290, 290,
	229, 229, 182, 182, 293, 293, 291, 291, 291, 291,
	260, 260, 260, 135, 135, 239, 239, 253, 253, 254,
	254, 344, 344, 255, 92, 92, 146, 146, 144, 144,
	144, 144, 144, 144, 457, 457, 145, 145, 145, 147,
	147, 147, 147, 147, 147, 147, 150, 150, 150, 150,
	151, 151, 151, 149, 149, 406, 406, 406, 408, 408,
	409, 405, 405, 407, 407, 449, 449, 264, 264, 264,
	226, 227, 225, 225, 458, 458, 232, 232, 231, 233,
	233, 334, 334, 334, 258, 258, 258, 258, 285, 285,
	283, 283, 284, 284, 286, 286, 287, 287, 287, 288,
	288, 289, 289, 257, 257, 314, 314, 148, 148, 148,
	238, 238, 238, 240, 240, 305, 305, 305, 305, 305,
	306, 306, 304, 304, 304, 304, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 337, 337, 241, 241, 338,
	292, 292, 422, 422, 422, 423, 423, 331, 331, 339,
	339, 339, 339, 339, 339, 329, 329, 330, 330, 345,
	346, 346, 268, 268, 268, 268, 266, 266, 269, 269,
	269, 269, 267, 267, 340, 340, 340, 340, 259, 259,
	341, 341, 341, 342, 300, 301, 301, 350, 350, 350,
	350, 350, 365, 237, 237, 237, 237, 237, 459, 459,
	351, 351, 351, 351, 351, 351, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 355, 355,
	355, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 364,
	364, 364, 364, 364, 356, 356, 361, 361, 362, 362,
	362, 357, 358, 363, 363, 363, 363, 460, 460, 367,
	367, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	353, 353, 353, 360, 278, 278, 278, 278, 278, 278,
	278, 278, 278, 278, 278, 278, 278, 276, 276, 277,
	277, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 309, 309, 309, 309,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 400, 400, 400, 400, 400,
	400, 400, 400, 403, 403, 404, 404, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 410, 410, 411, 411,
	413, 413, 414, 414, 415, 416, 416, 416, 417, 418,
	418, 412, 412, 419, 419, 419, 419, 420, 420, 421,
	421, 421, 421, 421, 320, 320, 321, 321, 327, 327,
	327, 211, 211, 211, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 211, 211, 211, 211, 175, 175, 175,
	175, 175, 249, 249, 247, 247, 247, 250, 250, 248,
	248, 246, 246, 245, 245, 317, 317, 315, 315, 319,
	319, 270, 270, 366, 366, 366, 366, 366, 366, 366,
	271, 271, 271, 279, 272, 272, 273, 273, 273, 273,
	273, 311, 312, 274, 274, 274, 313, 313, 322, 326,
	326, 325, 324, 324, 323, 323, 302, 302, 303, 303,
	256, 256, 461, 461, 252, 252, 343, 343, 343, 343,
	210, 210, 242, 242, 209, 209, 202, 202, 203, 203,
	203, 203, 235, 235, 368, 368, 368, 369, 370, 316,
	192, 191, 179, 180, 190, 189, 188, 178, 181, 185,
	186, 187, 183, 184, 198, 197, 196, 194, 195, 348,
	204, 204, 205, 205, 205, 206, 206, 206, 206, 176,
	176, 199, 199, 200, 201, 201, 193, 193, 193, 169,
	169, 169, 170, 170, 171, 171, 377, 377, 375, 375,
	375, 376, 376, 376, 376, 374, 374, 374, 374, 374,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 384, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 383,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 386,
	386,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 0, 1, 1, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 1, 3, 1, 1, 3, 4, 6, 1,
	3, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 3, 4, 6, 4, 6, 6, 6,
	1, 1, 5, 5, 6, 6, 4, 4, 4, 4,
	3, 4, 4, 7, 4, 5, 3, 5, 7, 4,
	12, 4, 12, 1, 3, 5, 5, 2, 5, 3,
	6, 4, 6, 5, 6, 6, 4, 8, 3, 4,
	3, 6, 4, 3, 1, 3, 2, 1, 1, 3,
	1, 3, 2, 2, 0, 1, 1, 0, 2, 0,
	7, 2, 5, 6, 2, 1, 6, 4, 9, 7,
	12, 12, 2, 7, 2, 1, 1, 1, 3, 3,
	0, 3, 1, 3, 1, 1, 3, 2, 5, 0,
	5, 1, 2, 1, 2, 1, 2, 2, 3, 3,
	3, 3, 3, 5, 3, 3, 5, 3, 3, 5,
	3, 3, 5, 3, 6, 6, 6, 3, 1, 1,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 3,
	3, 4, 3, 4, 7, 4, 4, 4, 3, 5,
	7, 4, 3, 3, 4, 3, 3, 3, 3, 3,
	2, 0, 1, 0, 1, 0, 3, 3, 3, 3,
	3, 6, 4, 4, 4, 3, 5, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 4, 1, 1, 2, 1,
	2, 7, 3, 2, 0, 1, 3, 3, 1, 0,
	1, 2, 2, 1, 6, 5, 1, 2, 1, 3,
	2, 0, 8, 3, 2, 2, 2, 2, 2, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 3, 5, 3, 3, 5, 3, 1, 3,
	2, 2, 5, 3, 6, 3, 1, 1, 2, 1,
	1, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 3, 5,
	7, 2, 3, 0, 3, 5, 2, 3, 0, 2,
	3, 2, 3, 2, 6, 4, 7, 2, 6, 4,
	7, 2, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 2, 1, 2, 2, 3, 2, 4, 3, 2,
	2, 1, 2, 1, 3, 3, 1, 2, 1, 2,
	1, 2, 1, 1, 3, 5, 4, 6, 4, 3,
	0, 1, 3, 2, 4, 2, 4, 1, 6, 3,
	1, 1, 5, 3, 2, 6, 3, 3, 4, 4,
	3, 1, 3, 2, 1, 3, 1, 2, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 1, 3, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 3, 3, 1, 1, 1, 1, 1,
	2, 2, 5, 7, 3, 3, 3, 3, 4, 4,
	3, 4, 4, 3, 4, 4, 4, 3, 2, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 3, 4, 4, 5, 0, 1, 1, 3,
	4, 1, 0, 5, 4, 6, 4, 6, 4, 1,
	0, 3, 4, 4, 5, 7, 5, 3, 3, 2,
	0, 4, 2, 3, 4, 2, 3, 3, 3, 4,
	3, 3, 3, 3, 4, 3, 1, 1, 1, 2,
	3, 2, 3, 6, 6, 7, 9, 6, 3, 4,
	5, 5, 3, 1, 1, 5, 2, 0, 1, 1,
	1, 1, 3, 2, 2, 2, 1, 2, 0, 3,
	3, 2, 10, 13, 0, 2, 3, 9, 12, 0,
	2, 3, 1, 1, 2, 2, 2, 2, 1, 0,
	1, 0, 1, 3, 1, 1, 1, 1, 3, 8,
	0, 1, 1, 0, 2, 1, 0, 1, 0, 9,
	9, 3, 1, 3, 7, 1, 3, 11, 3, 2,
	0, 3, 1, 2, 2, 3, 2, 6, 2, 1,
	1, 2, 4, 2, 5, 5, 5, 2, 8, 9,
	6, 5, 3, 1, 5, 8, 5, 11, 0, 1,
	3, 3, 2, 2, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 5,
	8, 4, 1, 0, 1, 2, 2, 1, 2, 3,
	2, 2, 3, 2, 2, 2, 2, 2, 3, 1,
	4, 2, 4, 7, 3, 3, 0, 3, 6, 3,
	1, 1, 8, 7, 5, 0, 1, 6, 7, 6,
	5, 3, 4, 14, 17, 14, 17, 4, 0, 2,
	2, 0, 1, 0, 1, 3, 2, 2, 0, 1,
	1, 0, 6, 6, 8, 6, 8, 6, 8, 6,
	8, 6, 8, 1, 0, 2, 0, 2, 2, 3,
	3, 2, 2, 2, 1, 2, 1, 2, 1, 2,
	1, 3, 2, 3, 2, 2, 2, 2, 2, 2,
	1, 1, 0, 2, 2, 1, 0, 1, 3, 2,
	0, 2, 1, 1, 0, 1, 3, 1, 0, 1,
	1, 1, 1, 2, 3, 2, 2, 8, 11, 3,
	3, 0, 3, 0, 3, 0, 3, 0, 1, 0,
	6, 7, 3, 6, 3, 1, 3, 1, 4, 2,
	1, 3, 1, 3, 8, 5, 3, 4, 3, 0,
	2, 2, 0, 10, 3, 2, 0, 1, 3, 1,
	1, 3, 3, 5, 1, 1, 3, 3, 2, 3,
	4, 3, 4, 5, 0, 2, 2, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 8, 8, 8, 2,
	4, 4, 4, 2, 2, 2, 2, 3, 1, 3,
	6, 1, 0, 1, 0, 1, 0, 1, 1, 0,
	1, 5, 1, 0, 1, 0, 1, 0, 3, 1,
	3, 2, 4, 5, 2, 2, 1, 1, 1, 0,
	2, 5, 2, 3, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 3, 0, 2, 0, 4, 2, 5,
	3, 2, 0, 1, 3, 3, 5, 1, 1, 1,
	1, 3, 2, 4, 4, 0, 8, 4, 3, 4,
	1, 5, 3, 4, 5, 1, 5, 1, 3, 2,
	0, 3, 0, 2, 3, 1, 3, 2, 0, 3,
	5, 6, 4, 6, 4, 3, 2, 1, 0, 5,
	1, 0, 2, 2, 2, 1, 1, 0, 1, 1,
	1, 0, 4, 2, 1, 2, 2, 4, 1, 3,
	1, 2, 3, 2, 2, 1, 0, 2, 5, 7,
	2, 1, 1, 2, 4, 3, 5, 0, 1, 1,
	1, 1, 1, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 5, 4, 1, 2,
	1, 4, 1, 1, 2, 1, 1, 1, 1, 1,
	0, 1, 2, 5, 1, 4, 2, 5, 1, 4,
	3, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 1, 0, 1,
	4, 1, 3, 3, 3, 5, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 3, 5, 4, 6, 3,
	5, 4, 6, 4, 6, 5, 7, 3, 3, 3,
	3, 3, 4, 3, 2, 4, 2, 3, 3, 4,
	3, 4, 3, 4, 5, 6, 6, 7, 6, 7,
	6, 7, 3, 4, 4, 1, 3, 1, 3, 3,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 6, 7, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 6, 2, 1, 5, 1,
	1, 1, 1, 2, 1, 5, 5, 3, 1, 1,
	1, 2, 2, 2, 4, 3, 5, 6, 8, 6,
	6, 4, 3, 4, 1, 1, 1, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 6, 6, 8,
	8, 6, 4, 6, 6, 6, 4, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 3,
	4, 3, 4, 3, 4, 4, 3, 6, 5, 5,
	5, 4, 4, 3, 4, 3, 5, 0, 5, 0,
	2, 0, 1, 3, 3, 2, 2, 0, 6, 1,
	0, 3, 0, 2, 2, 2, 0, 1, 4, 2,
	2, 2, 2, 2, 4, 1, 1, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 2, 3, 1, 2, 3, 2, 3, 2,
	3, 1, 0, 1, 3, 1, 3, 3, 3, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 1, 2, 3, 0, 3, 3, 2, 2,
	1, 2, 2, 3, 2, 1, 1, 1, 5, 1,
	2, 4, 2, 0, 1, 0, 3, 5, 1, 0,
	1, 2, 1, 0, 1, 3, 3, 2, 1, 1,
	1, 3, 1, 3, 3, 1, 1, 1, 1, 5,
	3, 1, 1, 3, 1, 2, 2, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 7, 1, 7, 5, 3, 1,
	1, 1, 1, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 452, -77, -47, -45, -79, -80, -65,
	-78, -81, -76, -91, -95, -85, -97, -133, -3, -33,
	-35, -48, -64, -66, -75, -83, -82, -84, -86, -90,
	-89, -39, -92, -96, -105, -134, -135, -136, 81, 68,
	121, 103, 108, 127, 153, 282, 311, 321, 305, -100,
	-101, 340, -34, -46, -94, -93, -4, -10, 27, 39,
	-36, -37, -38, 53, -56, -53, -50, -59, -438, 83,
	-407, -67, -70, -72, -442, 113, 126, 169, 274, -87,
	-88, 307, 309, -41, -40, 122, -144, -146, -98, -99,
	-137, -106, -107, -108, -109, -110, -111, -112, -113, -114,
	-115, -116, -117, -118, -119, -120, -121, -122, -123, -124,
	-125, -126, -127, -128, -129, -130, 343, 390, 40, 352,
	69, 116, 315, 21, -5, -6, -7, -8, -9, -11,
	-22, -49, -51, -52, -54, -55, -63, -57, -58, -406,
	-68, -69, -71, -73, -74, 306, -147, -145, 449, 402,
	-13, -17, -18, -14, -16, -19, -15, -23, -27, -28,
	-25, -24, -26, -29, -30, -31, -32, -20, -21, -12,
	420, 428, -150, -148, -149, -151, 328, 410, 366, 452,
	452, 452, 452, 452, 452, 452, 452, 452, 452, 452,
	452, 452, 452, 452, 452, 452, 452, 452, 452, -194,
	-199, -200, -201, -193, -169, -383, -386, 4, -381, -384,
	132, 177, 244, 21, 22, 23, 24, 25, 27, 37,
	38, 39, 40, 43, 45, 46, 49, 50, 51, 52,
	53, 54, 57, 62, 67, 68, 69, 70, 71, 76,
	73, 74, 75, 78, 80, 81, 82, 85, 86, 94,
	95, 96, 97, 98, 99, 103, 106, 105, 108, 111,
	112, 113, 115, 117, 118, 121, 122, 125, 123, 372,
	374, 124, 126, 127, 128, 138, 139, 140, 142, 143,
	145, 147, 151, 152, 154, 158, 160, 161, 162, 163,
	168, 169, 171, 172, 178, 173, 179, 183, 186, 185,
	187, 188, 189, 180, 194, 198, 199, 200, 202, 203,
	206, 207, 208, 209, 212, 211, 214, 217, 218, 221,
	222, 225, 226, 228, 229, 232, 230, 233, 231, 234,
	237, 235, 236, 239, 240, 242, 241, 249, 250, 252,
	253, 254, 269, 257, 258, 259, 262, 265, 268, 270,
	271, 272, 273, 274, 275, 277, 278, 280, 282, 284,
	286, 287, 288, 289, 290, 291, 293, 294, 296, 297,
	298, 299, 300, 305, 302, 303, 304, 306, 307, 308,
	309, 311, 313, 314, 315, 316, 318, 320, 341, 342,
	354, 321, 322, 323, 324, 325, 326, 327, 331, 335,
	332, 333, 334, 336, 329, 330, 337, 338, 340, 343,
	345, 347, 348, 351, 352, 353, 355, 358, 359, 360,
	356, 357, 350, 365, 363, 364, 367, 368, 369, 370,
	371, 373, 375, 384, 385, 387, 390, 391, 392, 382,
	394, 395, 398, 399, 400, 401, 406, 402, 404, 407,
	408, 409, 415, 414, 421, 422, 424, 425, 426, 32,
	41, 42, 44, 47, 58, 59, 60, 63, 100, 101,
	120, 129, 130, 141, 155, 157, 164, 165, 166, 184,
	190, 192, 196, 215, 247, 248, 263, 267, 279, 281,
	292, 317, 346, 361, 377, 378, 379, 380, 386, 388,
	410, 411, 412, 416, 423, 255, -187, 2, -169, -169,
	282, 26, 2, 26, 278, 330, 368, 370, 2, 193,
	2, -429, -236, 2, 26, -173, -169, 83, 153, 328,
	-187, 2, -429, -236, 24, 2, -169, 2, -174, 2,
	321, -169, 452, 78, 222, 62, 317, 337, -103, 385,
	-102, 377, 323, -104, -373, 2, 237, -169, 452, 452,
	452, 452, 2, 366, 272, 414, 329, 403, 96, 289,
	177, -424, 2, 4, -384, -381, -203, -202, 366, 96,
	-201, -193, 442, -200, 452, 452, 452, 2, 199, 200,
	288, 287, 337, 338, 452, 452, 452, 2, 25, 56,
	77, 80, 102, 128, 148, 151, 260, -439, 229, 269,
	286, 323, 336, 365, 375, 387, -443, 353, 57, 403,
	-450, 392, 111, -280, 96, 370, 368, 222, 152, 399,
	313, 156, 397, 106, 183, 401, 400, 452, 452, 25,
	56, 65, 80, 111, 128, 148, 151, -441, 269, 286,
	320, 323, 336, 365, 375, 392, 387, 2, 414, 329,
	366, 177, 96, 403, 313, 285, -77, 2, 449, 29,
	340, -143, 366, 2, -169, 199, 200, 2, 452, 452,
	-424, 2, 199, 200, 2, 57, 325, 452, 452, 452,
	452, 452, 452, 452, 452, 452, 452, 452, 452, 452,
	452, 452, 452, 452, 452, 452, 452, 452, 452, 452,
	452, 452, 452, 2, -131, 337, 353, 162, 39, 62,
	26, 67, 97, 154, 177, 178, 207, 77, 78, -281,
	-333, -332, 367, 324, 330, 363, 385, 83, 404, 314,
	426, -432, 123, 4, 96, 237, 339, 377, 222, 38,
	71, 371, 372, -449, 2, 366, -453, 2, 385, 385,
	2, -453, 2, -453, 2, -172, 2, 385, 381, -454,
	385, 423, 452, 452, 452, 452, 452, 452, 452, 452,
	452, 452, 452, 452, -145, -147, -146, 452, 452, 452,
	452, 452, -131, 337, 2, 62, 26, -457, 146, -231,
	-232, 396, 191, 119, 261, -144, -146, 2, -406, -371,
	2, -307, -387, -309, 440, 441, 435, 243, 427, -320,
	102, 397, 255, -386, -310, -322, 120, 317, -250, 8,
	9, 5, 6, 7, -176, -352, -316, -360, 389, 131,
	246, -206, 454, 10, 449, -403, -146, -321, 33, 157,
	55, -375, -205, -354, -362, -358, -359, -459, 45, 51,
	50, 375, 236, 331, 332, 347, 333, 334, 43, 406,
	173, 252, 254, 185, 4, 192, -204, -193, -400, -401,
	-381, -382, 184, 190, 186, 346, 187, 188, 189, 42,
	292, 142, 143, 141, 112, 101, 100, 248, 47, 46,
	44, 411, -363, 98, 377, 378, 379, 380, 202, 203,
	-169, -383, 65, 88, 89, 87, 92, 91, 93, 90,
	339, 403, 56, 32, 164, 165, 196, 247, 166, 63,
	-402, 357, 84, 150, 182, 167, 195, 197, 201, 216,
	219, 238, 245, 264, 266, 312, 344, -460, 412, 129,
	130, 267, 279, 361, 386, 388, 155, 215, 58, 59,
	-408, 293, -409, -187, -408, 452, 452, 453, 452, -225,
	-226, -227, 2, 26, 109, 449, 2, -336, 2, 447,
	-340, -146, 210, -339, 449, -337, -194, 256, -404, 318,
	-400, -401, -176, -193, -205, 4, -228, 449, 451, 96,
	366, 66, 2, -275, 449, -169, 26, -143, 255, 381,
	453, -318, 449, 255, 149, 258, -169, 2, 2, 341,
	2, 449, -103, 60, 385, -295, 2, -296, -166, -167,
	-168, -345, 198, 284, 291, 429, 426, -371, -435, 149,
	432, 381, -371, -251, 451, 2, -340, 164, -194, 2,
	-191, -374, 4, -381, -384, -382, -385, 65, -383, 26,
	28, 29, 30, 31, 33, 34, 35, 36, 48, 55,
	56, 61, 64, 66, 77, 83, 87, 88, 90, 89,
	91, 92, 93, 102, 104, 107, 109, 110, 114, 116,
	119, 131, 133, 146, 148, 149, 153, 156, 159, 170,
	181, 191, 193, 210, 213, 220, 223, 224, 243, 246,
	251, 255, 256, 260, 261, 276, 283, 295, 310, 328,
	339, 349, 362, 366, 376, 381, 383, 389, 396, 397,
	403, 405, 413, 417, 418, 419, 420, -386, 2, -340,
	164, 2, -196, 164, -340, -199, 2, -379, 164, -377,
	10, -376, 5, 4, -381, -384, -382, 2, -178, -169,
	2, -190, -374, 2, -209, 164, -194, -195, -199, 381,
	453, -242, -202, -203, -235, -169, 451, -307, 2, -92,
	2, -307, 164, 2, -92, 164, 2, -307, 164, 2,
	-92, 164, 2, 2, 2, 387, 2, 80, 164, -169,
	366, 95, 2, 304, -440, 320, 391, 414, 2, 2,
	2, 2, 2, 2, 2, 366, 329, -451, 293, -183,
	2, -169, 146, -379, 164, 2, -379, 164, 2, -197,
	-199, -197, 177, 194, -178, 164, 2, 370, 368, 370,
	368, 149, 2, 193, 2, 193, 2, -341, 2, -342,
	-194, 2, 2, 2, 2, 2, 164, -169, 366, 95,
	2, 209, 2, 2, 2, 2, 2, 2, 2, 2,
	2, -244, 164, 2, -194, -244, 164, 2, -244, 164,
	2, -210, 164, 2, -209, -178, 164, 2, -380, 164,
	2, -379, -380, 164, 2, -349, 2, -348, -376, 410,
	-77, 449, 337, 449, -379, -194, -307, -92, 149, -307,
	-92, 146, 2, 96, 366, -131, 2, 146, 405, 2,
	8, 2, -379, 290, 138, 2, 341, 2, 62, -281,
	426, 149, 2, 2, -427, 2, 255, 149, 2, 149,
	2, 149, 2, 149, 2, 149, 2, 287, 338, 200,
	384, 208, 124, 149, -265, 2, 420, 149, 2, 149,
	2, 5, 2, 198, 284, 354, 2, -194, -444, 2,
	366, 414, 329, 2, 2, 73, 74, 149, 2, 149,
	426, 2, -259, -340, -294, -295, -294, 381, -174, -457,
	-231, -232, -131, 341, 2, 2, -457, -258, -283, -284,
	220, 133, 251, -264, 26, 109, -264, -264, 49, 450,
	450, 11, 12, 64, 37, 440, 441, 442, 443, 144,
	444, 445, 438, 439, 437, 430, 431, 434, 204, 205,
	79, 433, 432, 72, 227, 319, 134, 135, 136, 137,
	301, 174, 175, 176, 14, 15, 16, 30, 260, 219,
	427, 167, 344, 435, 17, 18, 19, 195, 197, 245,
	41, 170, -175, -211, -307, -307, -307, -307, -307, 266,
	449, -256, -302, 447, -146, 449, 449, 449, 5, 449,
	5, -370, 8, -146, -307, -320, 450, -248, 449, -146,
	-320, -315, 449, 317, 447, 449, -323, -307, 451, -410,
	421, -356, 449, 281, -355, 449, -355, -355, 415, -353,
	449, 428, 422, 449, -353, 449, 449, 146, 449, 449,
	449, 449, 449, 449, 449, 449, 449, 449, 449, 449,
	449, 415, 449, 449, 449, 449, 449, 449, 449, 449,
	449, 453, -408, -228, 449, -252, -343, -307, 442, -252,
	-252, 255, -245, -307, 84, -268, 201, 238, 150, 216,
	312, 182, -370, -77, -304, 454, -331, 428, -146, -337,
	-193, -146, -339, 449, -336, -331, 442, -194, 449, 149,
	449, 451, 149, -235, -374, -178, -194, -204, -205, 108,
	-245, -379, -424, -235, -173, 34, -317, -350, -351, -364,
	-352, -361, -357, -360, 297, 298, 296, 300, 299, 45,
	51, 50, 375, 236, 331, 332, 347, 333, 334, 43,
	406, 173, 252, 254, 185, 4, 44, 411, -363, 192,
	184, 190, 186, 346, 187, 188, 189, 42, 292, 142,
	143, 141, 112, 101, 100, 248, 47, 46, 98, 377,
	378, 379, 380, 202, 203, 412, 357, 58, 59, -424,
	-235, 146, -373, -245, 34, -295, 2, -455, 453, 218,
	-213, 226, 242, 161, 256, 424, 249, -378, 5, 4,
	-316, -328, 102, 222, -360, 9, 441, -368, 8, 440,
	-372, -371, 86, 451, -374, -155, 302, -154, 23, 27,
	113, 408, 125, -218, 179, 272, 120, 350, -431, -433,
	322, 373, 374, 75, 249, 302, 120, -261, -263, 34,
	94, 240, 268, 52, 171, 231, 232, 352, 416, 120,
	302, 420, 120, -433, 302, -433, -157, 350, -431, -433,
	322, 302, -156, -218, 120, 454, -379, -242, 453, 453,
	-374, 442, 120, 120, 120, 120, 2, 2, 243, 2,
	2, 2, 151, -443, -441, 2, 2, 2, -194, 164,
	-196, 164, 2, -199, 414, -230, 255, -426, -243, 366,
	-194, -165, -405, 420, 243, 243, 34, 449, 2, -180,
	164, 2, -170, -169, 177, -405, 243, -341, -207, -194,
	-207, 340, -187, 34, -304, 120, 2, 2, 2, -169,
	-158, 453, 54, 308, 120, -158, 120, -158, 120, -158,
	453, 120, -158, 120, 453, 120, 120, 450, 453, -349,
	-379, -141, 420, 149, 83, 449, -380, -426, -178, 2,
	-194, 2, 366, 202, -379, -379, -373, 26, 342, 2,
	287, 338, 74, -194, -428, 146, -425, 313, -424, -194,
	-194, -194, -194, -194, 2, 2, 2, 146, 2, 384,
	2, 384, 2, -169, 68, -169, -169, 218, -194, 146,
	366, 177, 366, -158, 453, -174, -457, -258, -373, -457,
	-284, -283, -286, -307, 26, -289, 140, 239, -307, -309,
	-145, -145, -145, -233, -334, -307, 283, 177, -365, -350,
	-350, -192, -374, 377, -307, -307, -307, -307, -307, -307,
	-307, -307, -307, -307, -307, -307, -307, -307, -307, -307,
	-307, -307, -307, -307, -307, -307, -307, -307, -307, -307,
	-307, -307, -307, -307, -307, -307, -307, -307, -307, 219,
	167, 344, 41, 170, -307, 381, -307, -307, -307, -307,
	235, 243, 246, 389, 131, 398, 109, 249, -461, 362,
	36, -313, -146, -249, 449, -327, 31, 349, 26, -320,
	449, 2, -302, -307, -303, -246, -245, -245, 450, 413,
	26, 109, 442, 2, 8, -276, -278, 425, 234, 99,
	163, 233, -277, 327, 450, 453, 34, 450, -307, -246,
	-319, -315, -245, -326, -325, 417, -374, 442, -411, 139,
	156, 8, -370, -370, 377, 377, 8, -370, -370, 449,
	450, 2, 450, 2, 450, 2, 450, 2, 450, 2,
	-307, -307, -307, -307, -307, -307, -307, -245, -270, 2,
	-366, -245, 4, 425, 234, 99, 163, 233, 327, -270,
	2, -271, 2, -307, -245, -272, -308, -309, 440, 441,
	435, -320, -273, 2, -307, -246, -307, 48, 213, 383,
	-274, -307, 149, -245, -245, 2, -245, 2, -409, 34,
	-245, -238, 453, 149, 34, 4, -238, -238, 449, 450,
	453, -269, 160, 230, 225, -269, -336, -268, 201, -266,
	264, -266, -266, -422, 449, 448, -331, -179, 447, 455,
	-374, -330, -329, 34, -187, 262, -331, -331, 451, 450,
	-330, -194, 449, -245, -374, 355, 450, 451, 195, 195,
	195, 318, 450, -141, 381, 420, -77, 257, 450, 453,
	-237, 33, 447, -278, 449, -367, 415, 449, 449, 149,
	-236, -435, 450, 385, -296, -212, 291, 348, 303, 335,
	364, 9, 8, 8, 453, -374, 453, -436, 77, 381,
	66, -298, 164, 66, -388, -181, 77, -389, -169, 61,
	397, 283, 148, -436, 77, -436, 77, 77, 340, 353,
	49, -340, 37, -92, 214, 149, 426, 366, 381, -340,
	-263, -350, 94, 231, 232, 49, -369, -368, 441, -369,
	49, -369, -369, -369, 420, -196, -340, 381, 273, -379,
	381, 453, 37, -92, 214, 149, 381, -209, -179, -346,
	-345, -202, -169, 451, -307, -92, -307, -92, 120, 2,
	-451, 209, 449, -228, 243, -262, -261, 243, -198, 2,
	-194, 149, -235, -347, 193, 453, -243, 273, 120, 120,
	449, 117, 289, 2, 255, 243, -180, 164, -161, 369,
	120, -301, -300, 418, -290, -92, 449, 102, 34, -290,
	-253, -254, -344, -255, -181, 449, -187, -169, 2, -194,
	-244, -244, -244, -209, -210, -178, -379, -380, -380, -77,
	-348, 450, 450, -140, 259, -139, -169, 5, -143, 405,
	-215, -299, -298, -390, -391, -388, 219, 177, 397, 194,
	132, -141, -345, -141, -346, -346, -194, 146, 2, 2,
	-235, -235, 337, 146, 146, 451, -265, 289, 96, 366,
	272, 177, -194, -209, -194, -340, -457, -287, -368, 449,
	-288, 317, 318, 453, -153, 35, 107, 206, -194, 426,
	118, -307, -307, 381, -461, 362, -313, 118, -307, 235,
	246, 389, 131, 398, 109, 249, 149, 449, -308, -308,
	450, -247, -307, -307, 448, 457, 450, -458, 453, -231,
	-307, -245, -245, 450, 450, 381, 381, 381, 381, 449,
	451, -245, -235, 448, 448, 453, 450, -324, -325, 114,
	-307, 451, -416, 265, 449, 449, 450, 450, 453, 450,
	426, 426, 450, 450, 450, -307, 34, 453, 453, 453,
	450, 453, 453, 453, 450, 450, 149, 450, 450, -279,
	276, 450, 11, 12, 440, 441, 442, 443, 144, 444,
	445, 438, 439, 437, 430, 431, 432, 72, 227, 319,
	14, 15, 16, 195, 170, -308, -308, -308, 450, -311,
	-312, 149, 146, 34, -274, -274, -274, 450, 149, -245,
	450, 450, 449, 450, -301, -343, -240, 2, -336, -189,
	-374, -301, -301, -245, -307, 201, 201, -267, 405, 255,
	-269, -336, -329, 450, -423, -370, -331, -330, -370, -306,
	-305, 147, 35, 107, 241, -187, -228, -330, -330, -374,
	-331, 450, -241, -338, -404, -458, 451, -374, -132, 5,
	246, -132, -132, 149, -235, 24, 277, -350, 447, 448,
	8, 8, 449, -370, -370, -235, 149, -371, -295, 395,
	70, 291, 377, -371, -154, 302, -181, -181, -194, 243,
	-298, 164, -160, 243, -350, -188, -169, 449, 449, 206,
	206, -181, -188, 164, -181, 164, -188, -188, -430, 291,
	250, -307, 221, 289, 244, -155, 302, -92, -92, 449,
	-435, 405, 108, -194, -198, 302, -204, -369, -369, -261,
	302, -196, -379, 420, -178, -156, -92, -92, 449, -179,
	-157, 302, -138, 172, 442, -169, 414, -169, -214, -215,
	-169, -445, 422, 420, 120, 120, -228, -208, -194, 447,
	-141, -379, -194, -379, -379, -379, 2, 449, 2, -194,
	120, 255, 243, -162, 115, -456, 432, -178, -232, -231,
	-307, -260, -293, 310, 255, -229, -182, -181, 410, -187,
	-260, -239, 453, 149, 432, 451, -229, 2, -158, -158,
	-158, -158, -158, -77, -141, 453, 449, 432, 432, 449,
	-379, -379, 450, 453, -194, -180, 177, 177, -186, -170,
	-141, -42, 420, 366, 337, 337, -169, -190, -178, -194,
	-191, -209, -288, -307, -334, -194, 454, -307, -307, 118,
	118, -307, -308, -308, -307, 118, 149, 449, -307, -317,
	30, 30, 450, 453, -303, -307, 450, 413, -458, -458,
	-458, 5, 234, 163, 233, -277, 233, -277, -277, 8,
	442, -374, 450, -315, 116, -307, 376, -374, 442, -417,
	-184, 449, -169, 418, -231, -370, -353, -353, 450, -365,
	-350, -307, -307, -307, -307, -307, -307, -311, -307, -365,
	-350, -308, -308, -308, -308, -308, -308, -308, -308, -308,
	-308, -308, -308, -308, -308, -308, -308, -308, -308, -308,
	109, 243, 249, -308, -312, -311, -307, -307, -350, 450,
	450, 450, -245, -77, -257, 156, -346, 453, -257, -257,
	450, -336, -336, 449, -307, 201, 448, 450, 453, -330,
	448, 453, 456, 432, -228, 451, -329, 450, 453, -292,
	34, 450, -374, -92, 258, 5, 8, 447, 448, 450,
	-370, 450, 450, -235, -307, 381, 381, 120, 243, 407,
	-392, -389, -307, -234, -335, -307, 449, 449, -152, 113,
	340, -437, 2, 120, -158, 120, -158, 424, 449, 449,
	381, -245, -307, -142, 102, -373, -433, 381, 381, 273,
	-245, 381, -141, 149, 2, 2, 2, 450, 34, 253,
	-169, -194, -196, 34, -60, 420, -345, -370, -165, 2,
	-282, 405, -179, -194, 120, -163, 212, -456, -377, -405,
	-285, -283, -260, -252, 244, 76, 450, 453, 451, -301,
	-254, -240, -307, 2, 450, -139, -140, -379, -379, -379,
	-141, -143, -143, -299, 2, 449, -180, -170, 449, 259,
	-194, -265, -220, -219, 272, 249, 256, 450, -153, -179,
	-307, -307, 118, 30, 30, -307, -307, -317, 450, -307,
	-307, -245, 448, 5, -307, 450, 450, 450, 450, -307,
	451, -418, -169, -307, 450, 450, 450, 450, 453, 453,
	450, 450, 450, 450, -312, 149, 109, 249, 449, 450,
	450, -314, 159, 49, -336, -314, -314, -267, -235, -336,
	-304, -370, -305, -179, 447, -374, -338, 449, 451, 448,
	2, 447, 450, -181, -181, -298, 120, -393, 77, -394,
	64, 132, 83, 243, 246, 397, 283, 61, 102, 295,
	34, 450, 450, 453, -153, -234, -235, 243, 359, 102,
	243, 102, 95, 392, -181, -188, -235, -235, -194, 450,
	453, 432, -198, -196, -379, 450, -179, -380, -216, 180,
	-92, 2, 449, -228, -262, -92, 259, 448, 449, -169,
	255, 449, -179, -164, 211, -456, -377, -161, -260, -291,
	449, 255, -92, -182, 2, -232, 432, 450, 450, 95,
	95, -234, 449, 449, -235, -43, -44, 177, 77, 275,
	-191, 366, -153, -307, -307, -307, 450, -458, -374, 442,
	-412, 272, 450, -307, -307, -308, 149, 449, -317, -413,
	419, -307, -245, -413, -413, 450, -331, -370, 2, 447,
	2, -298, -188, -192, -185, -169, 132, 164, 246, 206,
	449, -308, -194, 449, 2, -447, 104, 181, -297, -448,
	82, 360, -335, 450, 450, 246, 246, -307, -350, -158,
	-158, 450, 450, 381, -373, 81, -371, 381, -217, -218,
	170, -446, 420, -214, -445, -61, -62, 382, -345, -234,
	-194, -234, 255, -456, -377, -162, 110, -235, 77, -285,
	-313, -141, 449, 449, 450, -234, -234, 450, 453, 26,
	449, 26, 449, -194, 450, -232, 49, 450, 450, -308,
	-317, 450, -414, -415, -184, -330, 448, 2, -394, -185,
	243, -307, -171, 449, -307, 181, 105, 168, -216, 449,
	295, -177, 64, 449, 449, 449, 432, 149, 449, -445,
	270, 95, 240, 450, 34, -62, 9, 450, -282, 450,
	-194, -377, -163, 400, 244, 450, -188, -260, -380, -380,
	-297, 450, 450, -44, -235, -235, -419, 289, 318, 158,
	-245, 450, 453, 34, 120, 450, -395, 228, -169, 450,
	105, 168, -217, -235, -194, -434, 405, -192, -222, -221,
	-219, -224, -223, -219, -245, -371, 81, 270, -245, -194,
	95, -216, -92, -297, 449, -297, 449, -164, 340, -300,
	450, 450, -216, -297, 450, 450, 450, -420, -421, 41,
	394, 86, -307, -420, -420, -415, -417, 132, -396, -399,
	-398, 255, 345, 150, 271, 450, 359, 416, -447, 450,
	-228, -307, 450, 453, 410, 450, 453, 410, 450, 149,
	450, 449, -217, -446, -216, -234, -216, -234, -253, -141,
	-141, -217, -216, -421, 280, 145, 317, 280, 145, -185,
	-398, 255, -399, 255, 400, 106, -395, -221, 170, -223,
	149, 270, -235, -445, -217, 450, -217, 450, -301, -217,
	30, -397, 240, 308, 54, 340, -397, -396, 449, 449,
	450, -452, 418, -297, -452, -297, -421, 22, 246, 102,
	-447, -245, -245, -159, 54, 308, 2, -216, -216, 450,
	450, -217, -217, -217, 381, -452, -452, 449, -245, 450,
	-217,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 24, 25, 346, 347,
	349, 350, 351, 353, 354, 356, 358, 360, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 421,
	423, 0, 854, 856, 858, 860, 27, 28, 0, 0,
	171, 173, 175, 0, 200, 202, 204, 205, 207, -2,
	0, 300, 301, 303, 305, -2, -2, 0, 0, 410,
	412, 0, 0, 432, 433, 0, 944, -2, 426, 428,
	430, 493, 495, 497, 499, 501, 503, 505, 506, 508,
	510, 512, 514, 516, 518, 520, 522, 524, 526, 528,
	530, 532, 534, 536, 538, 540, -2, -2, -2, 0,
	-2, -2, -2, 872, 31, 33, 35, 37, 39, 41,
	59, 256, 257, 259, 261, 263, 266, 267, 269, 983,
	307, 309, 311, 313, 315, 0, -2, 997, 0, 0,
	43, 44, 45, 46, 47, 48, 49, 66, 67, 68,
	69, 70, 71, 72, 52, 54, 55, 61, 62, 64,
	0, 0, 959, 961, 963, 965, -2, 0, 0, 7,
	9, 11, 13, 15, 17, 19, 21, 23, 348, 352,
	355, 357, 359, 361, 364, 366, 372, 374, 376, 749,
	1587, 1601, 1602, 1603, 1606, 1607, 1608, 1609, 1610, 1611,
	1939, 2019, 2020, 1630, 1631, 1632, 1633, 1634, 1635, 1636,
	1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646,
	1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656,
	1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666,
	1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676,
	1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686,
	1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696,
	1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706,
	1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716,
	1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726,
	1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736,
	1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746,
	1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756,
	1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766,
	1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776,
	1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786,
	1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796,
	1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806,
	1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816,
	1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826,
	1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836,
	1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846,
	1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856,
	1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866,
	1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876,
	1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886,
	1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896,
	1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906,
	1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916,
	1917, 1918, 1919, 1920, 1921, 0, 388, 386, 1581, 389,
	1775, 391, 393, 294, 295, 296, 297, 298, 299, 0,
	154, 0, 403, 397, 402, 404, 406, 407, 408, 409,
	383, 381, 0, 403, 1633, 401, 852, 853, 847, 848,
	1808, 882, 422, -2, -2, -2, 1908, -2, 454, -2,
	461, 1911, 1810, 464, 0, 466, -2, 469, 855, 857,
	859, 29, 30, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, -2, -2, -2, -2, 0, 0, 1668,
	1558, 1603, 1561, 1556, 172, 174, 176, 177, 0, 0,
	0, 0, 0, 0, 201, 203, 206, 208, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 233, 0, 0,
	0, 0, 0, 0, 0, 0, 805, 0, 0, 0,
	0, 0, 0, 0, 0, 672, 673, 0, 0, 678,
	800, 801, 822, 0, 0, 0, 0, 302, 304, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 234, 340, 341, 0, 984,
	0, 0, 0, 152, 145, 0, 0, 661, 411, 413,
	0, 144, 0, 0, 851, 0, 0, 427, 429, 431,
	494, 496, 498, 500, 502, 504, 507, 509, 511, 513,
	515, 517, 519, 521, 523, 525, 527, 529, 531, 533,
	535, 537, 539, 541, 542, 0, 0, 0, 0, -2,
	-2, 0, -2, -2, 0, 0, 0, 0, 0, 0,
	0, 0, -2, -2, -2, 0, 0, 0, -2, -2,
	0, 0, 0, 545, 547, 548, 549, 0, 588, 591,
	599, 643, 644, 0, 791, 985, 884, 862, 875, 884,
	864, 865, 866, 867, 868, 873, 874, 877, 0, 869,
	870, 871, 32, 34, 36, 38, 40, 42, 258, 260,
	262, 264, 268, 270, -2, 957, 958, 308, 310, 312,
	314, 316, 414, 0, 416, 0, 546, 948, 0, -2,
	0, 989, 989, 989, 0, 0, 958, 956, 0, 419,
	420, 473, 474, 1221, 0, 0, 0, 0, 0, 1456,
	1305, 0, 475, -2, 1336, 1338, 1887, 1908, 1455, 1340,
	1341, 1342, 1343, 1344, 0, 0, 1347, 0, 1349, 1350,
	1351, 1352, 0, 1354, 0, 1358, 1359, 1360, 0, 1892,
	1535, 1599, -2, 1126, 1127, 1128, 1129, 1130, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1595, 0, 1427, 1374,
	-2, 1620, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1677, -2, -2, -2, -2, -2,
	-2, -2, 1182, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1922, 1378, 1379, 1380, 1381, 1382, 1383, 1384,
	1385, 1386, 0, 1876, 1893, 1894, 1899, 1901, 1895, 1884,
	1397, -2, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930,
	1931, 1932, 1933, 1934, 1935, 1936, 1937, 1183, -2, 1888,
	1889, 1904, 1905, 1910, 1915, 1916, 1891, 1900, -2, -2,
	975, 1783, 978, 749, 976, 960, 962, 0, 964, 0,
	0, 0, 969, 992, 990, 0, 1028, 973, 974, 984,
	1045, 1068, 0, 1050, 0, 1068, 1094, 0, 1055, 1803,
	1375, 1376, 0, 1603, 1600, -2, 0, 0, 0, 0,
	0, 0, 197, 384, 0, 390, 392, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 881, 424, 425, 0,
	449, 0, 453, 1883, -2, -2, 457, 885, 889, 890,
	891, 892, 0, 0, 0, 0, 0, 463, 0, 0,
	450, 451, 467, 470, 0, 50, 0, 1893, 1094, 51,
	0, 1571, 1625, 1626, 1627, 1628, 1629, 1922, 1938, 1940,
	1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950,
	1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960,
	1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970,
	1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980,
	1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990,
	1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
	2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
	2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 53, 0,
	1893, 56, 0, 1893, 0, -2, 60, 0, 1893, 155,
	156, 1616, 1617, 1621, 1622, 1623, 1624, 63, 0, 1577,
	65, 0, 1574, 73, 0, 1893, 0, 1555, -2, 0,
	0, 653, 1552, 1557, 654, 1562, 0, 178, 179, 180,
	181, 182, 1893, 184, 185, 0, 187, 188, 1893, 190,
	191, 0, 193, 209, 210, 0, 212, 0, 1893, 0,
	0, 0, 218, -2, 235, 0, 232, 0, 222, 223,
	225, 226, 227, 228, 229, 0, 0, 0, 806, 274,
	272, 1582, 0, -2, 1893, 794, 797, 1893, 799, 811,
	1585, 0, -2, 0, 982, 1893, 899, 674, 675, 676,
	677, 0, 293, 0, 912, 0, 914, 0, 934, 1100,
	1045, 236, 237, 238, 239, 240, 1893, 0, 0, 0,
	245, 0, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 137, 1893, 319, 338, 137, 1893, 322, 137, 1893,
	325, 137, 1893, 328, 1550, 137, 1893, 331, 332, 1893,
	334, 157, 335, 1893, 337, 0, -2, 377, 1589, -2,
	343, 0, -2, 0, 169, 0, 659, 660, 0, 849,
	850, 0, 434, 0, 0, 543, 544, 0, 0, 554,
	555, 556, 557, 1781, 1692, 560, 0, 563, -2, 0,
	0, 0, 567, 569, 658, 571, 0, 0, 573, 0,
	575, 0, 577, 0, 579, 0, 581, -2, -2, -2,
	0, 0, 0, 0, 607, 608, 0, 0, 613, 0,
	616, 617, 618, 0, 620, 621, 622, 623, 0, 625,
	626, -2, -2, 630, 632, 0, 638, 0, 642, 0,
	550, 551, 137, 1098, 861, -2, 863, 0, 879, 951,
	-2, 0, 415, 0, 418, 955, 949, 954, 1006, 1007,
	0, 0, 0, 0, 987, 988, 0, 0, 0, 946,
	947, 0, 0, 0, 0, 1461, 1462, 1463, 1464, 1465,
	1466, 1469, 1470, 1467, 1468, 1471, 1472, 0, 0, 0,
	0, 0, 1473, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1474, 1475, 1476, 0, 0, 1478,
	0, 1480, 0, 0, 0, 0, 0, 0, 1284, 1286,
	1543, 0, 0, 1477, 1226, 1227, 1228, 1263, 1264, 0,
	0, 1337, 1540, 1539, 1339, 0, 1492, 0, 1346, 0,
	1218, 1353, 1568, -2, 0, 1456, 1487, 0, 0, 1361,
	1362, 1363, 0, 0, 1492, 0, 0, 1534, 0, 1429,
	0, 1162, 0, 1163, 1164, 0, 1165, 1166, 1179, 1192,
	0, 0, 0, 0, 1196, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1184, 0, 0, 0, 1515, -2, 0, 0, 0,
	0, 0, 977, 0, 0, 1032, 1544, 1548, 1549, 1032,
	1032, 0, 0, 1493, 1091, 1091, 0, 0, 1087, 1087,
	1087, 1085, 1062, 0, 1068, 0, 1078, 0, 1068, 1068,
	0, -2, 1050, 0, 0, 1078, 1095, 1096, 0, 0,
	0, 0, 0, 0, 1604, 0, 0, 0, 1591, 0,
	0, 169, 0, 395, 405, 984, 0, 1495, 1117, 1111,
	1120, 1121, 1122, 1123, 1169, 1170, 1171, 1172, 1173, 1131,
	1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141,
	1142, 1143, 1144, 1145, 1146, 1147, -2, 1180, 1182, 1203,
	1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160,
	1161, 1175, 0, 1150, 1150, 1150, 1167, 1168, 1191, 1202,
	1194, 1202, 1198, 1118, 1119, 1185, 1186, 1187, 1188, 0,
	399, 0, 0, 0, 0, -2, 459, 0, 887, 0,
	893, 484, 485, 486, 895, 896, 0, 462, 487, 488,
	489, 490, 491, 492, 0, 766, 0, 768, 1564, 0,
	460, 477, 465, 0, 471, 74, 844, 103, 0, 844,
	844, 0, 0, 124, 0, 0, 0, 0, 0, 92,
	99, 80, 81, 0, 0, 0, 0, 57, 774, 0,
	777, 0, 0, 0, 0, 0, 0, 0, 789, 0,
	0, 0, 0, 91, 0, 86, 76, 0, 0, 94,
	101, 0, 128, 130, 0, 0, 1081, 652, 0, 0,
	1604, 1560, 0, 0, 0, 0, 211, 213, 0, 215,
	216, 217, 0, 805, 0, 224, 221, 265, 749, 1893,
	773, 1893, 771, 1586, 0, 0, 0, 291, 286, 0,
	288, 792, 0, 981, 0, 0, 0, 0, 812, 0,
	1893, 817, 1573, 1612, 1613, 901, 0, 1106, 0, 915,
	0, 0, 1101, 0, 1103, 0, 242, 243, 244, 0,
	317, 0, 135, 136, 0, 320, 0, 323, 0, 326,
	0, 0, 329, 0, 0, 0, 0, 984, 0, 0,
	0, 147, 0, 0, 0, 0, 169, 169, 1081, 436,
	1081, 438, 0, 0, 558, 559, 561, 562, 564, 565,
	-2, -2, 639, 566, 570, 0, 646, 1799, 656, 572,
	574, 576, 578, 580, 583, 602, 590, 0, 594, 0,
	596, 0, 598, 610, 609, 611, 614, 619, 624, 0,
	0, 0, 0, 790, 0, 878, 952, 954, 417, 950,
	1004, 1005, 1010, 1014, 1015, 1018, 1021, 1022, 1012, 1221,
	970, 971, 972, 998, 999, 831, 0, 2019, 1222, 1112,
	1223, 1224, 1570, 0, 1229, 1230, 1231, 1232, 1233, 1234,
	1235, 1236, 1237, 1238, -2, -2, -2, -2, -2, -2,
	-2, -2, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254,
	1255, 1256, 1257, -2, -2, -2, 1261, 1262, -2, 1479,
	1481, 0, 1543, 0, -2, 0, -2, -2, -2, -2,
	1281, 0, 1283, 1288, 1290, 1292, 0, 0, 0, 0,
	1542, 1302, 1526, 1527, 0, 0, 1458, 1459, 1460, 1287,
	0, 1306, 1541, 1538, 0, 0, 1491, 995, 1365, 0,
	0, 0, 0, 1372, 0, 1569, 1217, 1204, 1205, 1206,
	1207, 1208, 1209, 1219, 1357, 1489, 0, 1488, 0, 0,
	0, 1499, 0, 1533, 1529, 0, 1592, 1598, 1437, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1409,
	0, 1502, -2, -2, -2, -2, -2, -2, -2, 0,
	1411, 0, 1413, 1493, 1512, 0, 0, 1307, 0, 0,
	0, 1456, 0, 1416, 1493, 1520, 0, 0, 0, 0,
	0, 1493, 0, 1525, 0, 1423, 0, 1425, 979, 0,
	0, 1106, 0, 0, 0, 1547, 1106, 1106, 0, 1027,
	0, 0, 1088, 1089, 1090, 0, 0, 1091, 0, 1082,
	1086, 1083, 1084, 0, 0, 1068, 1078, 1042, 0, 0,
	1572, 1048, 1077, 0, 749, 1067, 1078, 1078, 0, -2,
	1052, 0, 0, 995, -2, 170, 748, 0, 0, 0,
	0, 385, 387, 0, 0, 0, 379, 0, 382, 0,
	1107, 1110, 0, 1124, 0, 0, -2, 0, 0, 0,
	0, 0, 452, 0, 886, 894, 0, 481, 0, 483,
	0, 767, 1566, 1565, 0, 472, 0, 0, 0, 0,
	843, 107, 1893, 0, 139, 0, 0, 733, 1578, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 0, 0,
	775, 776, 778, 784, 786, 0, 780, 1567, 0, 781,
	0, 783, 785, 787, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 0, 0, 0, 0, 1554, 160,
	1080, 1553, 1563, 0, 183, 186, 189, 192, 0, 219,
	0, 0, 681, 664, 0, 769, 772, 0, 749, 804,
	1584, 0, 273, 169, 0, 0, 287, 0, 0, 0,
	0, 0, 0, 810, 0, 0, 0, 1893, 903, 909,
	0, 997, 1105, 0, 932, 917, 0, 0, 0, 932,
	936, 937, 939, 940, 0, 0, 1102, 0, 246, 339,
	137, 137, 137, 1551, 137, 137, 158, 333, 336, 342,
	378, 984, 169, 167, 1762, 165, 162, 164, 0, 0,
	0, 682, 684, 685, 686, 687, 0, 1613, 0, 1721,
	1613, 142, 169, 285, 435, 440, 552, 0, 585, 604,
	657, 655, 593, 0, 0, 0, 606, 0, 0, 0,
	0, 0, 640, 641, 645, 1099, 953, 0, 1016, 0,
	1013, 1019, 1020, 0, 1001, 829, 830, 0, 0, 0,
	0, -2, -2, 0, 0, 0, 1303, 0, -2, 1282,
	1285, 1289, 1291, 1293, 0, 0, 0, 0, 0, 0,
	1482, 0, 1484, 1304, 1536, 1539, 1454, 0, 0, 994,
	995, 995, 995, 1371, 0, 0, 0, 0, 0, 0,
	0, 1490, 0, 1497, 1498, 0, 1364, 0, 1530, 0,
	0, 0, 1373, 0, 0, 0, 1174, 1148, 0, 1202,
	1200, 1201, 1195, 1202, 1199, 0, 0, 0, 0, 0,
	1392, 0, 0, 0, 1396, 1408, 0, 1410, 1412, 0,
	0, 1414, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1310, 1311, 1312, 1415, 1518,
	1519, 0, 0, 0, 0, 0, 0, 1421, 0, 1524,
	1422, 1424, 984, 1029, 1024, 1545, 1081, 1031, 1033, 1546,
	1575, 1024, 1024, 0, 1494, 0, 0, 1072, 0, 0,
	0, 1074, 0, 1063, 0, 1065, 1078, 1047, 0, 0,
	1040, 0, 1037, 1038, 1039, 749, 1076, 1049, 1053, 1592,
	0, 1097, 0, 1057, 1060, 0, 0, 1605, 194, 198,
	199, 195, 196, 0, 394, 0, 0, 1496, 0, 1113,
	0, 0, 0, 0, 0, 398, 0, 448, -2, 479,
	480, 482, 0, 478, 104, 844, 0, 0, 835, 0,
	109, 1893, 118, 0, 710, 0, 1576, 0, 0, 0,
	0, 846, 0, 1893, 137, 1893, 137, 120, 123, 0,
	127, 125, 0, 0, 701, 75, 844, 78, 84, 0,
	0, 0, 90, 0, 837, 0, 779, 782, 788, 58,
	0, 839, 833, 0, 832, 129, 79, 85, 0, 841,
	77, 0, 169, 0, 1559, 0, 0, 0, 0, 680,
	-2, 0, 0, 0, 0, 0, 0, 279, 275, 0,
	284, 290, 289, 795, -2, 798, 807, 0, 809, 821,
	0, 0, 0, 905, 909, 0, 908, 982, 1009, 996,
	1104, 910, 932, 0, 0, 0, 920, 922, 919, 916,
	913, 1106, 0, 0, 0, 0, 0, 241, 318, 321,
	324, 327, 330, 344, 146, 0, 0, 0, 0, 0,
	169, 0, 0, 0, 0, 0, 1613, 1613, 0, 1580,
	143, 437, 0, 0, 595, 597, 610, 633, 634, 696,
	0, 637, 0, 0, 1000, 831, 0, 1225, 1266, 0,
	0, -2, 0, 0, 1270, 0, 0, 0, -2, 0,
	0, 0, 1483, 1485, 0, 1538, 1366, 0, 0, 0,
	0, 1348, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 0,
	1355, 1356, 1457, 1500, 1528, 1532, 0, 1593, 1597, 1435,
	1436, 1440, 1583, 0, 0, 0, 1193, 1197, 1377, 0,
	0, 0, 0, 0, 0, 0, 1501, 1511, 1513, 1308,
	1309, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321,
	1322, -2, -2, -2, 1326, 1327, 1328, -2, -2, -2,
	0, 0, 0, 1514, 1516, 1517, 1521, 1522, 0, 1418,
	1419, 1420, 1523, 0, 1026, 0, 1030, 0, 1026, 1026,
	991, 1070, 0, 0, 1093, 0, 1045, 1064, 0, 1054,
	1043, 0, 1044, 0, 1075, 0, 1051, 1056, 0, 1059,
	0, 1366, -2, 153, 396, 380, 0, 0, 1115, 1125,
	0, 1177, 1181, 400, 1079, 0, 0, 0, 0, 138,
	708, 732, 0, 0, 824, 831, 0, 0, 111, 0,
	0, 0, 119, 0, 116, 0, 122, 126, 0, 0,
	0, 0, 87, 88, 89, 0, 93, 0, 0, 0,
	0, 0, 140, 0, 214, 803, 220, 690, 0, 665,
	0, 749, 773, 0, 271, 0, 278, 0, 793, 808,
	0, 0, 0, 0, 0, 907, 909, 0, 900, 901,
	932, 1008, 911, 930, -2, 929, 0, 0, 0, 997,
	938, 935, 941, 942, 0, 166, 0, 161, 163, 0,
	149, 0, 0, 683, 688, 0, 0, 0, 0, 0,
	553, 605, 635, 695, 0, 0, 1011, 1017, 1002, 831,
	1268, 1272, 0, 0, 0, 1274, -2, 0, 1296, -2,
	-2, 1486, 1537, 1345, 995, 1367, 1369, 1370, 1220, 1531,
	0, 1442, 1439, 0, 1426, 1149, 1387, 1388, 0, 0,
	1391, 1393, 1394, 1395, 1510, 0, 0, 0, 0, 1417,
	980, 1431, 0, 0, 1034, 1431, 1431, 1071, 0, 1073,
	1068, 1066, 1041, 1035, 0, 1593, 1058, 0, 0, 1108,
	1114, 0, 1176, 105, 106, 108, 0, 709, 0, 712,
	0, 0, 0, 0, 719, 720, 0, 0, 0, 0,
	0, 738, 747, 0, 826, 0, 0, 0, 113, 132,
	0, 0, 845, 0, 137, 137, 0, 0, 836, 0,
	0, 0, 838, 840, 834, 0, 842, 159, 698, 0,
	669, 666, 681, 664, 770, 802, 0, 276, 0, 820,
	0, 0, 0, 897, 909, 0, 902, 903, 292, 0,
	0, 0, 918, 921, 923, 1009, 0, 168, 169, 0,
	0, 0, 0, 0, 0, 439, 441, 0, 0, 447,
	694, 0, 1003, 1276, -2, -2, 1297, 0, 1594, 1596,
	997, 0, 1428, 0, 0, -2, 0, 0, 0, 966,
	0, 1025, 1023, 967, 968, 1092, 1078, 0, 1061, 0,
	1116, 110, 0, 713, 714, 1579, 716, 0, 718, 721,
	0, 723, 1615, 0, 727, 734, 739, 0, 690, 0,
	744, 745, 825, 736, 0, 112, 114, 131, 828, 115,
	121, 0, 0, 0, 0, 1662, 96, 0, 664, 697,
	0, 667, 0, 0, 0, 277, 280, 0, 283, 0,
	821, 0, 0, 0, 904, 905, 0, 0, 0, 932,
	943, 148, 0, 0, 747, 0, 0, 731, 0, 443,
	0, 445, 0, 636, 1368, 1446, 0, 1389, 1390, -2,
	0, 1334, 1430, 1432, 0, 1046, 1036, 1109, 711, 715,
	0, 0, 753, 0, 0, 0, 742, 743, 698, 0,
	0, 134, 0, 0, 0, 0, 0, 0, 0, 662,
	0, 670, 0, 690, 0, 281, 282, 747, 0, 747,
	0, 906, 907, 0, 925, 926, 928, 933, 0, 0,
	690, 747, 730, 442, 0, 0, 0, 0, 0, 0,
	1441, 1335, 0, 0, 0, 722, 758, 0, 0, 0,
	740, 741, 738, 0, 749, 117, 0, 827, 0, 702,
	0, 0, 705, 0, 0, 97, 1662, 95, 0, 0,
	671, 698, 669, 690, 0, 690, 0, 898, 0, 927,
	169, 169, 698, 690, 444, 446, 1438, 1443, 1447, -2,
	1857, 1665, 0, 1444, 1445, 1433, 1434, 0, 724, 754,
	755, 0, 750, 751, 752, 1614, 725, 726, 735, 746,
	753, 133, 699, 0, 0, 700, 0, 0, 100, 0,
	102, 0, 664, 668, 698, 0, 698, 0, 1106, 150,
	151, 728, 698, 0, 1449, 1450, 1451, 1452, 1453, 717,
	756, 0, 757, 0, 0, 0, 758, 703, 0, 706,
	0, 98, 0, 663, 818, 747, 818, 747, 924, 729,
	0, 759, 0, 762, 763, 0, 760, 738, 0, 0,
	693, 813, 0, 690, 815, 690, 1448, 761, 764, 765,
	737, 0, 0, 689, 691, 692, 819, 698, 698, 698,
	0, 818, 818, 704, 0, 814, 816, 0, 0, 698,
	707,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 438, 3, 444, 439, 3,
	449, 450, 442, 440, 453, 441, 451, 443, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 457, 3,
	430, 432, 431, 434, 454, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 447, 3, 448, 445, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 455, 437, 456, 435,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 433, 57773, 436, 57774, 446,
	57775, 452, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1050
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1055
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1059
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1060
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1061
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1062
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1063
		{
			return helpWith(sqllex, "GRANT")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1064
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1065
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1066
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1067
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1071
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1080
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1081
		{
			return helpWith(sqllex, "ALTER")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1084
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1085
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1086
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1087
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1088
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1089
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1140
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1141
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1152
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1167
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1171
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1176
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1188
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1200
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1219
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1242
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1246
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1251
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1258
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1262
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1268
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{Table: &name, Rows: sqlDollar[6].union.slct()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1275
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1285
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[5].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1293
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1300
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1308
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1315
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 87:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1323
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1328
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1332
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1337
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1343
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1351
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 93:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1360
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1372
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 95:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1382
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1386
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1390
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 98:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1394
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1400
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{Table: &name}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1405
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{Table: &name, From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1412
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableIndexName()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1416
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1422
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1426
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1433
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1438
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1443
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1448
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1453
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1458
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1463
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1468
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1473
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1477
		{
			return unimplementedWithIssue(sqllex, 28751)
		}
	case 115:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1480
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1489
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1501
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1511
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1518
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1521
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1528
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1537
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1546
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1551
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1558
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1566
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1567
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1571
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1575
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1581
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1589
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1593
		{
			sqlVAL.union.val = nil
		}
	case 133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1599
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1603
		{
			sqlVAL.union.val = nil
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1610
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1614
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1618
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1624
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1628
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 140:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1654
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1657
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 142:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1680
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1684
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1687
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1691
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 146:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1728
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1733
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1737
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1743
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1748
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1753
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1757
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1773
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1776
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1780
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1784
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1792
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1796
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1802
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 160:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1806
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1812
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1816
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1820
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1824
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1830
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1834
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1840
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 168:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1844
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1848
		{
			sqlVAL.union.val = nil
		}
	case 170:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1854
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1867
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1868
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1869
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1870
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1880
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1888
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1890
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1893
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1903
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1912
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1920
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1922
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1926
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1929
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1939
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1948
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1956
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1958
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1962
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1965
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1969
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1973
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CommentOnTable{Table: name, Comment: sqlDollar[6].union.strPtr()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1978
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1993
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1999
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2004
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2016
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2017
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2019
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2020
		{
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2021
		{
			return helpWith(sqllex, "CREATE")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2024
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2025
		{
			return unimplemented(sqllex, "create cast")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2026
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2027
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2028
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2029
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2030
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2031
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2032
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2033
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2034
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2035
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2036
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2037
		{
			return unimplemented(sqllex, "create operator")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2038
		{
			return unimplemented(sqllex, "create publication")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2039
		{
			return unimplemented(sqllex, "create rule")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2040
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2041
		{
			return unimplemented(sqllex, "create server")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2042
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2043
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2044
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2047
		{
		}
	case 231:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2048
		{
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2051
		{
		}
	case 233:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2052
		{
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2055
		{
		}
	case 235:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2056
		{
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2059
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2060
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2061
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2062
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2063
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2064
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2065
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 243:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2066
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2067
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2068
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2069
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2070
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2071
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2072
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2073
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2074
		{
			return unimplemented(sqllex, "drop server")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2075
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2076
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2077
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2078
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2082
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2083
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2084
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2085
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2087
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2088
		{
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2089
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2090
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2100
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2108
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2112
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2116
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2122
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2127
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2136
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2143
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2149
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2155
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2159
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2170
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().Value)
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2182
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2190
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2198
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2208
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2212
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2218
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2222
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2229
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2233
		{

			sqlVAL.union.val = nil
		}
	case 292:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2247
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2257
		{
			return helpWith(sqllex, "DELETE")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2264
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2267
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2268
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2269
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2270
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2271
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2280
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2281
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2282
		{
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2283
		{
			return helpWith(sqllex, "DROP")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2286
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2287
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2288
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2289
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2290
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2298
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2302
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2305
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2313
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2317
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2320
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2328
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2332
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2335
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2343
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2351
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2358
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2366
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2374
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2381
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2389
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2393
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2396
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2404
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2408
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2411
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2415
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2420
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2443
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2446
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2448
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2452
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2456
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2463
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2467
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2470
		{
			return helpWith(sqllex, "DELETE")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2472
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2473
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2474
		{
			return helpWith(sqllex, "INSERT")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2475
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2477
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2478
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2481
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2486
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2487
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2488
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2492
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2496
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 379:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2506
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2514
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2522
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2526
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 383:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2530
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2540
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2547
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2555
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2559
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 388:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2563
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2573
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2577
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2581
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2585
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2588
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2608
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2612
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2616
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2619
		{
			return helpWith(sqllex, "GRANT")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2639
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2643
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2647
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2650
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2655
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2659
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2669
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2673
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2687
		{
			return helpWith(sqllex, "RESET")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2688
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2696
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2700
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2703
		{
			return helpWith(sqllex, "RESET")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2711
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2714
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2725
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2728
		{
			return helpWith(sqllex, "USE")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2732
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2733
		{
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2734
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2735
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2739
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2740
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2741
		{
			return helpWith(sqllex, "USE")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2757
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2772
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2775
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2793
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   name,
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2802
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2806
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 440:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2810
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2816
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2820
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2826
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2830
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2834
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2838
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2842
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2853
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2856
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2866
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2882
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2886
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 455:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2891
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2908
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2911
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2913
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2916
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2920
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2939
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2946
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2952
		{
			return unimplemented(sqllex, "set from current")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2953
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2961
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2966
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2973
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2977
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2983
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2987
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2994
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3015
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3019
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3025
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3029
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3033
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3037
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3041
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3047
		{
			sqlVAL.union.val = tree.Low
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3051
		{
			sqlVAL.union.val = tree.Normal
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3055
		{
			sqlVAL.union.val = tree.High
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3066
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3070
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3074
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3079
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3083
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3096
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3097
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3098
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3099
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3100
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3101
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3103
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3104
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3105
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3106
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3107
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3108
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3109
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3110
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3111
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3112
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3113
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3114
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3115
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3116
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3117
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3118
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3119
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3121
		{
			return helpWith(sqllex, "SHOW")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3128
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3129
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3130
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3141
		{
			sqlVAL.str = "client_encoding"
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3144
		{
			sqlVAL.str = "timezone"
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3145
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3159
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowTableStats{Table: name}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3164
		{

			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowTableStats{Table: name, UsingJSON: true}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3169
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3180
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3188
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3196
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3203
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3211
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3218
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3228
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3232
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3235
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3237
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3240
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3248
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowColumns{Table: name}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3252
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3260
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3263
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3276
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3284
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3292
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3296
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3298
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3302
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3304
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3308
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3316
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3320
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3322
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3326
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3334
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3337
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3339
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3342
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3346
		{
			sqlVAL.union.val = true
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3348
		{
			sqlVAL.union.val = true
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3350
		{
			sqlVAL.union.val = false
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3358
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: sqlDollar[2].union.bool()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3361
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3364
		{
			sqlVAL.union.val = true
		}
	case 592:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3365
		{
			sqlVAL.union.val = false
		}
	case 593:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3374
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3377
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3379
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3382
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3384
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3388
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3391
		{
			sqlVAL.union.val = true
		}
	case 600:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3392
		{
			sqlVAL.union.val = false
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3400
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3403
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3405
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3408
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3416
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3426
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3436
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3439
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3442
		{
			sqlVAL.union.val = true
		}
	case 610:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3443
		{
			sqlVAL.union.val = false
		}
	case 611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3450
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3454
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3457
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 614:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3464
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3468
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3471
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3478
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3482
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3490
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3495
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3500
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3504
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3512
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3517
		{

			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3522
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3535
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3538
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3546
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3549
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3553
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3557
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3561
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3568
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3576
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
			}}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3582
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3586
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3597
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{Table: &name}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3602
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableIndexName()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3605
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 645:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3613
		{

			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowFingerprints{Table: name}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3621
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 647:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3626
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3746
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3750
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3754
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3793
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3797
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3802
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3806
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3815
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3822
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3826
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3838
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3847
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3850
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 662:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3886
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
			}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:3899
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
			}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3913
		{
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3914
		{
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3915
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 667:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3919
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[8].union.slct(),
				AsColumnNames: sqlDollar[5].union.nameList(),
			}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:3931
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[11].union.slct(),
				AsColumnNames: sqlDollar[8].union.nameList(),
			}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3944
		{
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3945
		{
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3946
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3960
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3961
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3962
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3963
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3964
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3965
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3966
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3967
		{
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3972
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3978
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3982
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3988
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3994
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3997
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 689:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4001
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4010
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4017
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4022
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 693:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4027
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4033
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 696:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4040
		{
			sqlVAL.str = ""
		}
	case 698:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4047
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 699:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4053
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4060
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4067
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4073
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4077
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 704:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4083
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4093
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4097
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 707:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4103
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4114
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4124
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 710:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4128
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4134
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4138
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4142
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4146
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4150
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4154
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4158
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4176
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4180
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4184
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4188
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4192
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4196
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4200
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4210
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4214
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4218
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 728:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4225
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4235
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4247
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4257
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4269
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4274
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 734:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4280
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4286
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4297
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4307
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4319
		{
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4320
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4321
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4322
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4323
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4324
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 746:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4341
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 747:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4345
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4351
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 749:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4355
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4375
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4379
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4383
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 753:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4387
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4396
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4400
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4404
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4408
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4412
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4418
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4424
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4432
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4436
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4440
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4444
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4448
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4454
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4458
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4464
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4483
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4488
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4492
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4496
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4499
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4500
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4503
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().String())
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4504
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4506
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4507
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4508
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4511
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4513
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4515
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4517
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4518
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4520
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4521
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4523
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4525
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4533
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4536
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 792:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4544
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4548
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4551
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4555
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 796:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4559
		{
			sqlVAL.union.val = nil
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4569
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4573
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4576
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4581
		{
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4582
		{
		}
	case 802:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4590
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4598
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 804:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4599
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 805:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4602
		{
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4603
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 807:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4609
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 808:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4611
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 809:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4613
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 810:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4615
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4617
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 812:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4619
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 813:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4635
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4649
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4664
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4678
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4692
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 818:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4695
		{
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4696
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4700
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4715
		{
			sqlVAL.union.val = false
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4721
		{
			sqlVAL.union.val = true
		}
	case 823:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4725
		{
			sqlVAL.union.val = false
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4731
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4735
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4744
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4755
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 828:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4756
		{
			sqlVAL.str = ""
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4760
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4764
		{
			sqlVAL.union.val = tree.Descending
		}
	case 831:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4768
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 832:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4774
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4781
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4785
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4791
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4797
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4805
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4811
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4819
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4825
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4833
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4837
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4842
		{
		}
	case 844:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4843
		{
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4846
		{
		}
	case 846:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4847
		{
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4855
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4858
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4868
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4877
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4880
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4888
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4891
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4895
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4896
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4897
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4913
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4916
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4918
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4921
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4931
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4934
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4936
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4939
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4943
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4948
		{
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4949
		{
		}
	case 872:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4950
		{
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4958
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4965
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4968
		{
		}
	case 876:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4969
		{
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4973
		{
			sqlVAL.str = ""
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4977
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4981
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 880:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4985
		{
			sqlVAL.str = ""
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4991
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4995
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5001
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5005
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5011
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5015
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5028
		{
		}
	case 888:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5030
		{
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5034
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5039
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5043
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5047
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5053
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5059
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5065
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5069
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 897:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5079
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5089
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5099
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5103
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 901:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5107
		{
			sqlVAL.str = ""
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5113
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5117
		{
			sqlVAL.str = ""
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5123
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 905:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5127
		{
			sqlVAL.str = ""
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5133
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 907:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5137
		{
			sqlVAL.str = ""
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5142
		{
		}
	case 909:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5143
		{
		}
	case 910:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5155
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 911:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5162
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5169
		{
			return helpWith(sqllex, "INSERT")
		}
	case 913:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5180
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5187
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5191
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5200
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5207
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5211
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5215
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5221
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5225
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5245
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 924:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5249
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5253
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5259
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 927:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5262
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5263
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 929:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5265
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5271
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5276
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 932:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5280
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 933:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5297
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5308
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 935:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5312
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 936:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5313
		{
		}
	case 937:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5317
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5321
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5334
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5337
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 943:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5341
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5384
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5390
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5394
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5409
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5413
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5417
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5421
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5425
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5429
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5434
		{
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5435
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5440
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 960:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5475
		{
			return helpWith(sqllex, "SELECT")
		}
	case 962:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5476
		{
			return helpWith(sqllex, "VALUES")
		}
	case 964:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5477
		{
			return helpWith(sqllex, "TABLE")
		}
	case 966:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5499
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5512
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5526
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5538
		{
			return helpWith(sqllex, "SELECT")
		}
	case 970:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5542
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5551
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5560
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5575
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5582
		{
			return helpWith(sqllex, "TABLE")
		}
	case 975:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5594
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5598
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5602
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5606
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5610
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 980:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5616
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5624
		{
		}
	case 982:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5625
		{
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5629
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 984:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5633
		{
			sqlVAL.union.val = nil
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5638
		{
		}
	case 986:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5639
		{
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5643
		{
			sqlVAL.union.val = true
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5647
		{
			sqlVAL.union.val = false
		}
	case 989:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5651
		{
			sqlVAL.union.val = false
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5657
		{
			sqlVAL.union.val = true
		}
	case 991:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5663
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5668
		{
		}
	case 993:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5669
		{
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5672
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 995:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5673
		{
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5677
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 997:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5681
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5687
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5693
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5697
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5703
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5707
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5712
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5727
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5736
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5747
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5751
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5760
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5766
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5773
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5780
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5789
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5793
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5797
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5803
		{
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5804
		{
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5807
		{
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5808
		{
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5825
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5829
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5835
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5839
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5858
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5861
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5863
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5875
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5878
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5880
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5886
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5890
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5896
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5900
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5905
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5910
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5916
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5922
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5927
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5938
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5942
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5946
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5954
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5984
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5998
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6008
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6016
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6025
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6029
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6033
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6044
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6068
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6074
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6078
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6084
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6086
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6090
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6096
		{
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6098
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6101
		{
			sqlVAL.union.val = nil
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6102
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6103
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6107
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6111
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6117
		{
			sqlVAL.union.val = true
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6121
		{
			sqlVAL.union.val = false
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6141
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6145
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6149
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6153
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6157
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6161
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6167
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6171
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6178
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6184
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6191
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6197
		{
			sqlVAL.str = tree.AstFull
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6201
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6205
		{
			sqlVAL.str = tree.AstRight
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6209
		{
			sqlVAL.str = tree.AstInner
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6215
		{
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6216
		{
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6237
		{
			sqlVAL.str = tree.AstHash
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6241
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6245
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6249
		{
			sqlVAL.str = ""
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6262
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6266
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6271
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6272
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6273
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6274
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6278
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6283
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6297
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6301
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6307
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6315
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6325
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6332
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6344
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6357
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6365
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6366
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6374
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6380
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6387
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6388
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6390
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6398
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6399
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6410
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6411
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6428
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6432
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6436
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6440
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6444
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6448
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6452
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedSerialType
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6456
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6460
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6464
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6468
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6472
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6476
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6480
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6484
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6488
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6492
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6496
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.QChar
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6527
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6531
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6535
		{
			sqlVAL.union.val = nil
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6542
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6546
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6550
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6554
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6558
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6562
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6566
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6570
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6574
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6578
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6582
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6586
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6590
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6594
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6601
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6608
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6615
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6619
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6626
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6630
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6634
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6638
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6642
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6648
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := coltypes.NewFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6661
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6667
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[4].union.int64()), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6673
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[3].union.int64()), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6681
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6685
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6689
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6695
		{
			colTyp := *(sqlDollar[1].union.colType().(*coltypes.TString))
			n := sqlDollar[3].union.int64()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", &colTyp))
				return 1
			}
			colTyp.N = uint(n)
			sqlVAL.union.val = &colTyp
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6708
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6714
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6718
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6722
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6726
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6735
		{
			sqlVAL.union.val = true
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6736
		{
			sqlVAL.union.val = false
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6741
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6745
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = coltypes.Time
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6750
		{
			prec := sqlDollar[3].union.int64()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = &coltypes.TTime{PrecisionSet: true, Precision: int(prec)}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6757
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6758
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6760
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = coltypes.TimestampWithTZ
			} else {
				sqlVAL.union.val = coltypes.Timestamp
			}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6768
		{
			prec := sqlDollar[3].union.int64()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = &coltypes.TTimestampTZ{PrecisionSet: true, Precision: int(prec)}
			} else {
				sqlVAL.union.val = &coltypes.TTimestamp{PrecisionSet: true, Precision: int(prec)}
			}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6780
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6784
		{
			prec := sqlDollar[3].union.int64()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = &coltypes.TTimestampTZ{PrecisionSet: true, Precision: int(prec)}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6793
		{
			sqlVAL.union.val = true
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6794
		{
			sqlVAL.union.val = false
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6795
		{
			sqlVAL.union.val = false
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6799
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6805
		{
			sqlVAL.union.val = tree.Year
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6809
		{
			sqlVAL.union.val = tree.Month
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6813
		{
			sqlVAL.union.val = tree.Day
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6817
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6821
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6825
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6831
		{
			sqlVAL.union.val = tree.Month
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6835
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6839
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6843
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6847
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6851
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6855
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6862
		{
			sqlVAL.union.val = nil
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6868
		{
			sqlVAL.union.val = tree.Second
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6871
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6895
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6899
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6903
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6906
		{
			return unimplementedWithIssue(sqllex, 32005)
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6915
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6920
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6924
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6928
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6932
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6936
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6940
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6944
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6948
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6952
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6956
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6960
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6964
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6968
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6972
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6976
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6980
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6984
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6988
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6992
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6996
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7000
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7004
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7008
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7012
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7016
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7020
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7024
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7028
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7032
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7036
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7040
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7044
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7048
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7052
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7056
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7060
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7064
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7068
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7072
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7076
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7080
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7084
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7088
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7092
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7096
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7100
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7104
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7108
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7112
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7116
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7120
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7124
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7128
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7132
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7136
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7140
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7144
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7148
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7152
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7156
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7159
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7161
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7165
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7169
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7173
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7177
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7181
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7185
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7189
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7193
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7197
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7201
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7205
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7209
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7213
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7217
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7221
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7225
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7242
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7247
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7259
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7263
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7267
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7271
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7275
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7279
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7283
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7287
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7291
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7295
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7299
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7303
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7307
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7311
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7315
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7319
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7323
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7327
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7331
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7335
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7339
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7343
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7347
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7351
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7355
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7359
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7363
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7367
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7381
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7389
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7425
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7429
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7433
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7437
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7441
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7446
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7448
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7452
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7455
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7457
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7461
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7465
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7469
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7473
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7482
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7489
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7493
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7497
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7502
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7506
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7510
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7514
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7518
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7521
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7525
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7529
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7532
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7533
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7535
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7539
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7543
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7546
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7557
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7564
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7573
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7574
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7578
		{
			return unimplementedWithIssue(sqllex, 32563)
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7580
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7584
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7590
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7594
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7598
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7602
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7608
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7612
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7616
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7620
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7624
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7628
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7632
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7636
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7640
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7644
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7648
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7652
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7656
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7663
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7666
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7668
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7671
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7673
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7676
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7678
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7681
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7683
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7686
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7688
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7691
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7693
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7696
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7698
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7701
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7703
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7707
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7710
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7711
		{
			return unimplemented(sqllex, "treat")
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7713
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7717
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7721
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7725
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7729
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7732
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7734
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7737
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7742
		{
			return unimplemented(sqllex, "within group")
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7743
		{
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7747
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7751
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7758
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7762
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7768
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7772
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7778
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7786
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7790
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7794
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7801
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7821
		{
			sqlVAL.str = ""
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7827
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7831
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7842
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7849
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7856
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7863
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7869
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7882
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7910
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7914
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7918
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7922
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7929
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7945
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7949
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7956
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7968
		{
			sqlVAL.union.val = tree.Any
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7972
		{
			sqlVAL.union.val = tree.Some
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7976
		{
			sqlVAL.union.val = tree.All
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7981
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7982
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7983
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7984
		{
			sqlVAL.union.val = tree.Div
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7985
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7986
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7987
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7988
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7989
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7990
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7991
		{
			sqlVAL.union.val = tree.LT
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7992
		{
			sqlVAL.union.val = tree.GT
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7993
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7994
		{
			sqlVAL.union.val = tree.LE
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7995
		{
			sqlVAL.union.val = tree.GE
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7996
		{
			sqlVAL.union.val = tree.NE
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8000
		{
			sqlVAL.union.val = tree.Like
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8001
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8002
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8003
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8026
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8030
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8036
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8040
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8044
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8055
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8059
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8065
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8069
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8076
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8082
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8086
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8092
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8096
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8102
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8106
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8112
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8116
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8122
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8126
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8148
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8152
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8156
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8162
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8169
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8173
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8190
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8194
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8198
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8202
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8206
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8212
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8218
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8224
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8228
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8232
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8238
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8250
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8257
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8261
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8267
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8273
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8277
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8284
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8290
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8294
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8301
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8307
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8311
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8316
		{
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8317
		{
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8321
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8325
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8331
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8340
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8344
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8348
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8356
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8360
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8366
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8370
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8389
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8397
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8420
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8429
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8433
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8437
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8441
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8447
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8451
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8459
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8463
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8474
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8483
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8491
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8588
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8595
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8599
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8603
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8617
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8621
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8625
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8638
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8656
		{
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str})
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8668
		{
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str})
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8674
		{
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str})
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8698
		{
			sqlVAL.str = ""
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8704
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8708
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
