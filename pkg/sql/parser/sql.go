// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:60
type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:567
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMMEDIATE",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9238

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 26,
	-2, 964,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 69,
	176, 800,
	193, 800,
	207, 228,
	279, 228,
	287, 656,
	314, 228,
	323, 656,
	360, 656,
	384, 228,
	407, 656,
	-2, 0,
	-1, 75,
	207, 232,
	-2, 0,
	-1, 76,
	105, 964,
	182, 964,
	393, 964,
	394, 964,
	-2, 0,
	-1, 87,
	118, 938,
	132, 938,
	190, 938,
	218, 938,
	247, 938,
	256, 938,
	389, 938,
	-2, 925,
	-1, 115,
	123, 580,
	206, 580,
	377, 580,
	-2, 0,
	-1, 116,
	4, 966,
	21, 966,
	22, 966,
	23, 966,
	24, 966,
	25, 966,
	27, 966,
	32, 966,
	37, 966,
	38, 966,
	39, 966,
	40, 966,
	41, 966,
	42, 966,
	43, 966,
	44, 966,
	45, 966,
	46, 966,
	48, 966,
	49, 966,
	50, 966,
	51, 966,
	52, 966,
	53, 966,
	56, 966,
	57, 966,
	58, 966,
	59, 966,
	61, 966,
	62, 966,
	66, 966,
	67, 966,
	68, 966,
	69, 966,
	70, 966,
	72, 966,
	73, 966,
	74, 966,
	75, 966,
	77, 966,
	79, 966,
	80, 966,
	81, 966,
	84, 966,
	85, 966,
	93, 966,
	94, 966,
	95, 966,
	96, 966,
	97, 966,
	98, 966,
	99, 966,
	100, 966,
	102, 966,
	104, 966,
	105, 966,
	107, 966,
	110, 966,
	111, 966,
	112, 966,
	114, 966,
	116, 966,
	117, 966,
	119, 966,
	120, 966,
	121, 966,
	122, 966,
	123, 966,
	124, 966,
	125, 966,
	126, 966,
	127, 966,
	128, 966,
	129, 966,
	131, 966,
	137, 966,
	138, 966,
	139, 966,
	140, 966,
	141, 966,
	142, 966,
	144, 966,
	146, 966,
	150, 966,
	151, 966,
	153, 966,
	154, 966,
	156, 966,
	157, 966,
	159, 966,
	160, 966,
	161, 966,
	162, 966,
	163, 966,
	164, 966,
	165, 966,
	166, 966,
	167, 966,
	168, 966,
	171, 966,
	172, 966,
	176, 966,
	177, 966,
	178, 966,
	179, 966,
	182, 966,
	183, 966,
	184, 966,
	185, 966,
	186, 966,
	187, 966,
	188, 966,
	189, 966,
	191, 966,
	193, 966,
	196, 966,
	197, 966,
	198, 966,
	200, 966,
	201, 966,
	204, 966,
	205, 966,
	206, 966,
	207, 966,
	209, 966,
	210, 966,
	212, 966,
	213, 966,
	215, 966,
	216, 966,
	219, 966,
	220, 966,
	223, 966,
	225, 966,
	226, 966,
	227, 966,
	228, 966,
	229, 966,
	230, 966,
	231, 966,
	232, 966,
	233, 966,
	235, 966,
	236, 966,
	237, 966,
	238, 966,
	240, 966,
	243, 966,
	244, 966,
	245, 966,
	246, 966,
	248, 966,
	249, 966,
	250, 966,
	252, 966,
	253, 966,
	254, 966,
	257, 966,
	258, 966,
	260, 966,
	262, 966,
	263, 966,
	264, 966,
	265, 966,
	266, 966,
	267, 966,
	268, 966,
	269, 966,
	270, 966,
	272, 966,
	273, 966,
	274, 966,
	275, 966,
	276, 966,
	278, 966,
	280, 966,
	281, 966,
	282, 966,
	283, 966,
	284, 966,
	285, 966,
	286, 966,
	287, 966,
	288, 966,
	290, 966,
	291, 966,
	292, 966,
	293, 966,
	294, 966,
	296, 966,
	297, 966,
	298, 966,
	299, 966,
	300, 966,
	301, 966,
	302, 966,
	303, 966,
	305, 966,
	307, 966,
	308, 966,
	309, 966,
	310, 966,
	311, 966,
	312, 966,
	314, 966,
	315, 966,
	316, 966,
	317, 966,
	318, 966,
	319, 966,
	320, 966,
	321, 966,
	323, 966,
	324, 966,
	325, 966,
	326, 966,
	327, 966,
	328, 966,
	329, 966,
	330, 966,
	331, 966,
	332, 966,
	334, 966,
	335, 966,
	336, 966,
	337, 966,
	339, 966,
	340, 966,
	341, 966,
	342, 966,
	344, 966,
	345, 966,
	346, 966,
	347, 966,
	348, 966,
	349, 966,
	350, 966,
	351, 966,
	352, 966,
	353, 966,
	354, 966,
	355, 966,
	357, 966,
	358, 966,
	359, 966,
	361, 966,
	362, 966,
	363, 966,
	364, 966,
	365, 966,
	366, 966,
	367, 966,
	368, 966,
	369, 966,
	371, 966,
	372, 966,
	373, 966,
	374, 966,
	377, 966,
	378, 966,
	379, 966,
	380, 966,
	381, 966,
	383, 966,
	384, 966,
	385, 966,
	387, 966,
	388, 966,
	391, 966,
	392, 966,
	393, 966,
	394, 966,
	395, 966,
	397, 966,
	399, 966,
	400, 966,
	401, 966,
	402, 966,
	403, 966,
	404, 966,
	405, 966,
	407, 966,
	408, 966,
	409, 966,
	414, 966,
	415, 966,
	416, 966,
	417, 966,
	418, 966,
	419, 966,
	-2, 0,
	-1, 117,
	1, 857,
	196, 857,
	278, 857,
	285, 857,
	445, 857,
	-2, 0,
	-1, 119,
	1, 857,
	445, 857,
	-2, 0,
	-1, 120,
	1, 857,
	445, 857,
	-2, 0,
	-1, 121,
	1, 861,
	445, 861,
	-2, 0,
	-1, 145,
	118, 937,
	132, 937,
	190, 937,
	218, 937,
	247, 937,
	256, 937,
	389, 937,
	-2, 934,
	-1, 175,
	4, 973,
	5, 973,
	6, 973,
	7, 973,
	8, 973,
	9, 973,
	10, 973,
	21, 973,
	22, 973,
	23, 973,
	24, 973,
	25, 973,
	27, 973,
	32, 973,
	33, 973,
	37, 973,
	38, 973,
	39, 973,
	40, 973,
	41, 973,
	42, 973,
	43, 973,
	44, 973,
	45, 973,
	46, 973,
	48, 973,
	49, 973,
	50, 973,
	51, 973,
	52, 973,
	53, 973,
	54, 973,
	55, 973,
	56, 973,
	57, 973,
	58, 973,
	59, 973,
	61, 973,
	62, 973,
	64, 973,
	66, 973,
	67, 973,
	68, 973,
	69, 973,
	70, 973,
	72, 973,
	73, 973,
	74, 973,
	75, 973,
	77, 973,
	79, 973,
	80, 973,
	81, 973,
	83, 973,
	84, 973,
	85, 973,
	86, 973,
	87, 973,
	88, 973,
	89, 973,
	90, 973,
	91, 973,
	92, 973,
	93, 973,
	94, 973,
	95, 973,
	96, 973,
	97, 973,
	98, 973,
	99, 973,
	100, 973,
	101, 973,
	102, 973,
	104, 973,
	105, 973,
	107, 973,
	110, 973,
	111, 973,
	112, 973,
	114, 973,
	116, 973,
	117, 973,
	119, 973,
	120, 973,
	121, 973,
	122, 973,
	123, 973,
	124, 973,
	125, 973,
	126, 973,
	127, 973,
	128, 973,
	129, 973,
	130, 973,
	131, 973,
	137, 973,
	138, 973,
	139, 973,
	140, 973,
	141, 973,
	142, 973,
	144, 973,
	146, 973,
	149, 973,
	150, 973,
	151, 973,
	153, 973,
	154, 973,
	156, 973,
	157, 973,
	159, 973,
	160, 973,
	161, 973,
	162, 973,
	163, 973,
	164, 973,
	165, 973,
	166, 973,
	167, 973,
	168, 973,
	169, 973,
	171, 973,
	172, 973,
	176, 973,
	177, 973,
	178, 973,
	179, 973,
	181, 973,
	182, 973,
	183, 973,
	184, 973,
	185, 973,
	186, 973,
	187, 973,
	188, 973,
	189, 973,
	191, 973,
	193, 973,
	194, 973,
	195, 973,
	196, 973,
	197, 973,
	198, 973,
	199, 973,
	200, 973,
	201, 973,
	204, 973,
	205, 973,
	206, 973,
	207, 973,
	209, 973,
	210, 973,
	212, 973,
	213, 973,
	214, 973,
	215, 973,
	216, 973,
	217, 973,
	219, 973,
	220, 973,
	223, 973,
	225, 973,
	226, 973,
	227, 973,
	228, 973,
	229, 973,
	230, 973,
	231, 973,
	232, 973,
	233, 973,
	234, 973,
	235, 973,
	236, 973,
	237, 973,
	238, 973,
	239, 973,
	240, 973,
	241, 973,
	242, 973,
	243, 973,
	244, 973,
	245, 973,
	246, 973,
	248, 973,
	249, 973,
	250, 973,
	253, 973,
	254, 973,
	257, 973,
	258, 973,
	259, 973,
	260, 973,
	261, 973,
	262, 973,
	263, 973,
	264, 973,
	265, 973,
	266, 973,
	267, 973,
	268, 973,
	269, 973,
	270, 973,
	272, 973,
	273, 973,
	274, 973,
	275, 973,
	276, 973,
	278, 973,
	280, 973,
	281, 973,
	282, 973,
	283, 973,
	284, 973,
	285, 973,
	286, 973,
	287, 973,
	288, 973,
	290, 973,
	291, 973,
	292, 973,
	293, 973,
	294, 973,
	296, 973,
	297, 973,
	298, 973,
	299, 973,
	300, 973,
	301, 973,
	302, 973,
	303, 973,
	305, 973,
	306, 973,
	307, 973,
	308, 973,
	309, 973,
	310, 973,
	311, 973,
	312, 973,
	314, 973,
	315, 973,
	316, 973,
	317, 973,
	318, 973,
	319, 973,
	320, 973,
	321, 973,
	323, 973,
	324, 973,
	325, 973,
	326, 973,
	327, 973,
	328, 973,
	329, 973,
	330, 973,
	331, 973,
	332, 973,
	333, 973,
	334, 973,
	335, 973,
	336, 973,
	337, 973,
	338, 973,
	339, 973,
	340, 973,
	341, 973,
	342, 973,
	344, 973,
	345, 973,
	346, 973,
	347, 973,
	348, 973,
	349, 973,
	350, 973,
	351, 973,
	352, 973,
	353, 973,
	354, 973,
	355, 973,
	357, 973,
	358, 973,
	359, 973,
	361, 973,
	362, 973,
	363, 973,
	364, 973,
	365, 973,
	366, 973,
	367, 973,
	368, 973,
	369, 973,
	371, 973,
	372, 973,
	373, 973,
	374, 973,
	377, 973,
	378, 973,
	379, 973,
	380, 973,
	381, 973,
	382, 973,
	383, 973,
	384, 973,
	385, 973,
	387, 973,
	388, 973,
	390, 973,
	391, 973,
	392, 973,
	393, 973,
	394, 973,
	395, 973,
	396, 973,
	397, 973,
	399, 973,
	400, 973,
	401, 973,
	402, 973,
	403, 973,
	404, 973,
	405, 973,
	407, 973,
	408, 973,
	409, 973,
	414, 973,
	415, 973,
	416, 973,
	417, 973,
	418, 973,
	419, 973,
	420, 973,
	428, 973,
	433, 973,
	434, 973,
	435, 973,
	442, 973,
	447, 973,
	-2, 0,
	-1, 535,
	148, 1629,
	375, 1629,
	425, 1629,
	444, 1629,
	-2, 0,
	-1, 536,
	148, 1705,
	375, 1705,
	425, 1705,
	444, 1705,
	-2, 0,
	-1, 537,
	148, 1619,
	375, 1619,
	425, 1619,
	444, 1619,
	-2, 0,
	-1, 539,
	148, 1787,
	375, 1787,
	425, 1787,
	444, 1787,
	-2, 0,
	-1, 541,
	148, 1815,
	375, 1815,
	425, 1815,
	444, 1815,
	-2, 0,
	-1, 548,
	148, 1713,
	375, 1713,
	425, 1713,
	444, 1713,
	-2, 455,
	-1, 565,
	444, 1579,
	446, 1579,
	-2, 625,
	-1, 566,
	444, 1581,
	446, 1581,
	-2, 626,
	-1, 567,
	444, 1580,
	446, 1580,
	-2, 627,
	-1, 568,
	446, 1528,
	-2, 628,
	-1, 712,
	1, 553,
	441, 553,
	443, 553,
	445, 553,
	-2, 0,
	-1, 713,
	1, 624,
	145, 624,
	441, 624,
	443, 624,
	445, 624,
	-2, 0,
	-1, 719,
	1, 567,
	441, 567,
	443, 567,
	445, 567,
	-2, 0,
	-1, 721,
	1, 571,
	441, 571,
	443, 571,
	445, 571,
	-2, 0,
	-1, 723,
	1, 581,
	441, 581,
	443, 581,
	445, 581,
	-2, 0,
	-1, 724,
	1, 590,
	441, 590,
	443, 590,
	445, 590,
	-2, 0,
	-1, 725,
	1, 592,
	441, 592,
	443, 592,
	445, 592,
	-2, 0,
	-1, 729,
	1, 606,
	441, 606,
	443, 606,
	445, 606,
	-2, 0,
	-1, 730,
	1, 608,
	441, 608,
	443, 608,
	445, 608,
	-2, 0,
	-1, 773,
	132, 977,
	218, 977,
	247, 977,
	-2, 934,
	-1, 788,
	132, 976,
	218, 976,
	247, 976,
	-2, 934,
	-1, 812,
	444, 1578,
	-2, 463,
	-1, 841,
	442, 1570,
	-2, 1561,
	-1, 847,
	5, 1102,
	-2, 1610,
	-1, 848,
	5, 1103,
	-2, 1614,
	-1, 849,
	5, 1104,
	-2, 1613,
	-1, 850,
	5, 1105,
	-2, 1813,
	-1, 851,
	5, 1106,
	-2, 1715,
	-1, 852,
	5, 1107,
	-2, 1779,
	-1, 853,
	5, 1108,
	-2, 1781,
	-1, 854,
	5, 1109,
	-2, 1792,
	-1, 855,
	5, 1110,
	-2, 1782,
	-1, 856,
	5, 1111,
	-2, 1783,
	-1, 857,
	5, 1112,
	-2, 1609,
	-1, 858,
	5, 1113,
	-2, 1826,
	-1, 859,
	5, 1114,
	-2, 1680,
	-1, 860,
	5, 1115,
	-2, 1722,
	-1, 861,
	5, 1116,
	-2, 1724,
	-1, 862,
	5, 1117,
	-2, 1684,
	-1, 863,
	5, 1118,
	442, 1588,
	-2, 1579,
	-1, 864,
	5, 1174,
	442, 1174,
	-2, 1861,
	-1, 869,
	442, 1589,
	-2, 1580,
	-1, 871,
	5, 1122,
	-2, 1859,
	-1, 872,
	5, 1123,
	-2, 1860,
	-1, 873,
	5, 1124,
	-2, 1683,
	-1, 874,
	5, 1125,
	-2, 1872,
	-1, 875,
	5, 1126,
	-2, 1685,
	-1, 876,
	5, 1127,
	-2, 1686,
	-1, 877,
	5, 1128,
	-2, 1687,
	-1, 878,
	5, 1129,
	-2, 1841,
	-1, 879,
	5, 1130,
	-2, 1870,
	-1, 880,
	5, 1131,
	-2, 1664,
	-1, 881,
	5, 1132,
	-2, 1665,
	-1, 882,
	5, 1146,
	-2, 1853,
	-1, 884,
	5, 1121,
	-2, 1849,
	-1, 885,
	5, 1121,
	-2, 1848,
	-1, 886,
	5, 1121,
	-2, 1865,
	-1, 887,
	5, 1138,
	-2, 1843,
	-1, 888,
	5, 1139,
	-2, 1611,
	-1, 889,
	5, 1149,
	-2, 1842,
	-1, 890,
	5, 1151,
	-2, 1881,
	-1, 892,
	5, 1162,
	-2, 1639,
	-1, 893,
	5, 1173,
	-2, 1874,
	-1, 894,
	5, 1165,
	-2, 1875,
	-1, 895,
	5, 1173,
	-2, 1876,
	-1, 896,
	5, 1169,
	-2, 1877,
	-1, 897,
	5, 1089,
	-2, 1693,
	-1, 898,
	5, 1090,
	-2, 1694,
	-1, 899,
	444, 1576,
	-2, 1560,
	-1, 900,
	442, 1901,
	-2, 1577,
	-1, 920,
	5, 1157,
	-2, 1802,
	-1, 937,
	5, 1156,
	-2, 1882,
	-1, 947,
	5, 1158,
	408, 1158,
	-2, 1844,
	-1, 948,
	5, 1159,
	408, 1159,
	-2, 1845,
	-1, 984,
	442, 1588,
	-2, 1579,
	-1, 1012,
	148, 1815,
	375, 1815,
	425, 1815,
	444, 1815,
	-2, 0,
	-1, 1013,
	1, 443,
	445, 443,
	-2, 869,
	-1, 1131,
	296, 1558,
	435, 1558,
	-2, 1557,
	-1, 1187,
	287, 656,
	407, 656,
	-2, 227,
	-1, 1207,
	268, 962,
	-2, 773,
	-1, 1216,
	251, 1583,
	-2, 0,
	-1, 1280,
	1, 334,
	441, 334,
	443, 334,
	445, 334,
	-2, 936,
	-1, 1283,
	4, 1880,
	11, 1880,
	12, 1880,
	14, 1880,
	15, 1880,
	16, 1880,
	17, 1880,
	18, 1880,
	19, 1880,
	21, 1880,
	22, 1880,
	23, 1880,
	24, 1880,
	25, 1880,
	27, 1880,
	30, 1880,
	32, 1880,
	34, 1880,
	37, 1880,
	38, 1880,
	39, 1880,
	40, 1880,
	41, 1880,
	42, 1880,
	43, 1880,
	44, 1880,
	45, 1880,
	46, 1880,
	48, 1880,
	49, 1880,
	50, 1880,
	51, 1880,
	52, 1880,
	53, 1880,
	56, 1880,
	57, 1880,
	58, 1880,
	59, 1880,
	61, 1880,
	62, 1880,
	63, 1880,
	66, 1880,
	67, 1880,
	68, 1880,
	69, 1880,
	70, 1880,
	71, 1880,
	72, 1880,
	73, 1880,
	74, 1880,
	75, 1880,
	77, 1880,
	78, 1880,
	79, 1880,
	80, 1880,
	81, 1880,
	83, 1880,
	84, 1880,
	85, 1880,
	93, 1880,
	94, 1880,
	95, 1880,
	96, 1880,
	97, 1880,
	98, 1880,
	99, 1880,
	100, 1880,
	102, 1880,
	104, 1880,
	105, 1880,
	107, 1880,
	110, 1880,
	111, 1880,
	112, 1880,
	114, 1880,
	116, 1880,
	117, 1880,
	119, 1880,
	120, 1880,
	121, 1880,
	122, 1880,
	123, 1880,
	124, 1880,
	125, 1880,
	126, 1880,
	127, 1880,
	128, 1880,
	129, 1880,
	133, 1880,
	134, 1880,
	135, 1880,
	136, 1880,
	137, 1880,
	138, 1880,
	139, 1880,
	140, 1880,
	141, 1880,
	142, 1880,
	143, 1880,
	144, 1880,
	146, 1880,
	149, 1880,
	150, 1880,
	151, 1880,
	153, 1880,
	154, 1880,
	156, 1880,
	157, 1880,
	159, 1880,
	160, 1880,
	161, 1880,
	162, 1880,
	163, 1880,
	164, 1880,
	165, 1880,
	166, 1880,
	167, 1880,
	168, 1880,
	169, 1880,
	170, 1880,
	171, 1880,
	172, 1880,
	173, 1880,
	174, 1880,
	175, 1880,
	177, 1880,
	178, 1880,
	179, 1880,
	181, 1880,
	182, 1880,
	183, 1880,
	184, 1880,
	185, 1880,
	186, 1880,
	187, 1880,
	188, 1880,
	189, 1880,
	191, 1880,
	193, 1880,
	194, 1880,
	195, 1880,
	196, 1880,
	197, 1880,
	198, 1880,
	199, 1880,
	200, 1880,
	201, 1880,
	202, 1880,
	203, 1880,
	204, 1880,
	205, 1880,
	206, 1880,
	207, 1880,
	209, 1880,
	210, 1880,
	212, 1880,
	213, 1880,
	214, 1880,
	215, 1880,
	216, 1880,
	217, 1880,
	219, 1880,
	220, 1880,
	223, 1880,
	224, 1880,
	225, 1880,
	226, 1880,
	227, 1880,
	228, 1880,
	229, 1880,
	230, 1880,
	231, 1880,
	232, 1880,
	233, 1880,
	234, 1880,
	235, 1880,
	236, 1880,
	237, 1880,
	238, 1880,
	241, 1880,
	243, 1880,
	244, 1880,
	245, 1880,
	246, 1880,
	248, 1880,
	249, 1880,
	250, 1880,
	253, 1880,
	254, 1880,
	255, 1880,
	257, 1880,
	258, 1880,
	260, 1880,
	262, 1880,
	263, 1880,
	264, 1880,
	265, 1880,
	266, 1880,
	267, 1880,
	268, 1880,
	269, 1880,
	270, 1880,
	272, 1880,
	273, 1880,
	274, 1880,
	275, 1880,
	276, 1880,
	278, 1880,
	280, 1880,
	281, 1880,
	282, 1880,
	283, 1880,
	284, 1880,
	285, 1880,
	286, 1880,
	287, 1880,
	288, 1880,
	290, 1880,
	291, 1880,
	292, 1880,
	293, 1880,
	294, 1880,
	295, 1880,
	296, 1880,
	297, 1880,
	298, 1880,
	299, 1880,
	300, 1880,
	301, 1880,
	302, 1880,
	303, 1880,
	305, 1880,
	306, 1880,
	307, 1880,
	308, 1880,
	309, 1880,
	310, 1880,
	311, 1880,
	312, 1880,
	313, 1880,
	314, 1880,
	315, 1880,
	316, 1880,
	317, 1880,
	318, 1880,
	319, 1880,
	320, 1880,
	321, 1880,
	323, 1880,
	324, 1880,
	325, 1880,
	326, 1880,
	327, 1880,
	328, 1880,
	329, 1880,
	330, 1880,
	331, 1880,
	332, 1880,
	334, 1880,
	335, 1880,
	336, 1880,
	337, 1880,
	338, 1880,
	339, 1880,
	340, 1880,
	341, 1880,
	342, 1880,
	344, 1880,
	345, 1880,
	346, 1880,
	347, 1880,
	348, 1880,
	349, 1880,
	350, 1880,
	351, 1880,
	352, 1880,
	353, 1880,
	354, 1880,
	355, 1880,
	357, 1880,
	358, 1880,
	359, 1880,
	361, 1880,
	362, 1880,
	363, 1880,
	364, 1880,
	365, 1880,
	366, 1880,
	367, 1880,
	368, 1880,
	369, 1880,
	371, 1880,
	372, 1880,
	373, 1880,
	374, 1880,
	377, 1880,
	378, 1880,
	379, 1880,
	380, 1880,
	381, 1880,
	383, 1880,
	384, 1880,
	385, 1880,
	387, 1880,
	388, 1880,
	391, 1880,
	392, 1880,
	393, 1880,
	394, 1880,
	395, 1880,
	397, 1880,
	399, 1880,
	400, 1880,
	401, 1880,
	402, 1880,
	403, 1880,
	404, 1880,
	405, 1880,
	407, 1880,
	408, 1880,
	409, 1880,
	414, 1880,
	415, 1880,
	416, 1880,
	417, 1880,
	418, 1880,
	419, 1880,
	420, 1880,
	421, 1880,
	423, 1880,
	424, 1880,
	425, 1880,
	426, 1880,
	427, 1880,
	428, 1880,
	430, 1880,
	431, 1880,
	432, 1880,
	433, 1880,
	434, 1880,
	435, 1880,
	436, 1880,
	437, 1880,
	438, 1880,
	440, 1880,
	443, 1880,
	444, 1880,
	446, 1880,
	447, 1880,
	-2, 0,
	-1, 1286,
	148, 1787,
	375, 1787,
	425, 1787,
	444, 1787,
	-2, 0,
	-1, 1355,
	1, 1833,
	441, 1833,
	443, 1833,
	444, 1833,
	445, 1833,
	-2, 604,
	-1, 1356,
	1, 1785,
	441, 1785,
	443, 1785,
	444, 1785,
	445, 1785,
	-2, 605,
	-1, 1369,
	1, 864,
	445, 864,
	-2, 869,
	-1, 1374,
	132, 976,
	218, 976,
	247, 976,
	-2, 934,
	-1, 1467,
	118, 938,
	132, 938,
	190, 938,
	218, 938,
	247, 938,
	256, 938,
	389, 938,
	-2, 1330,
	-1, 1520,
	443, 1463,
	-2, 0,
	-1, 1555,
	118, 938,
	132, 938,
	190, 938,
	218, 938,
	247, 938,
	256, 938,
	389, 938,
	-2, 1046,
	-1, 1608,
	442, 1161,
	-2, 1149,
	-1, 1647,
	1, 445,
	445, 445,
	-2, 869,
	-1, 1898,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1210,
	-1, 1899,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1211,
	-1, 1900,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1212,
	-1, 1901,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1213,
	-1, 1902,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1214,
	-1, 1903,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1215,
	-1, 1904,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1216,
	-1, 1905,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1217,
	-1, 1917,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1229,
	-1, 1918,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1230,
	-1, 1919,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1231,
	-1, 1922,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1236,
	-1, 1928,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1240,
	-1, 1930,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1248,
	-1, 1931,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1249,
	-1, 1932,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1250,
	-1, 1933,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1251,
	-1, 2026,
	5, 1118,
	148, 1474,
	442, 1588,
	-2, 1579,
	-1, 2027,
	148, 1475,
	-2, 1837,
	-1, 2028,
	148, 1476,
	-2, 1712,
	-1, 2029,
	148, 1477,
	-2, 1640,
	-1, 2030,
	148, 1478,
	-2, 1674,
	-1, 2031,
	148, 1479,
	-2, 1710,
	-1, 2032,
	148, 1480,
	-2, 1778,
	-1, 2100,
	1, 1047,
	83, 1047,
	118, 1047,
	132, 1047,
	145, 1047,
	149, 1047,
	155, 1047,
	158, 1047,
	181, 1047,
	190, 1047,
	199, 1047,
	214, 1047,
	218, 1047,
	234, 1047,
	247, 1047,
	251, 1047,
	256, 1047,
	304, 1047,
	306, 1047,
	389, 1047,
	398, 1047,
	411, 1047,
	412, 1047,
	413, 1047,
	422, 1047,
	441, 1047,
	443, 1047,
	445, 1047,
	446, 1047,
	-2, 1046,
	-1, 2105,
	442, 1562,
	-2, 1574,
	-1, 2124,
	442, 1160,
	-2, 1150,
	-1, 2336,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1238,
	-1, 2337,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1242,
	-1, 2343,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1244,
	-1, 2519,
	196, 869,
	278, 869,
	285, 869,
	-2, 442,
	-1, 2590,
	443, 1533,
	446, 1533,
	-2, 1549,
	-1, 2604,
	268, 962,
	-2, 773,
	-1, 2681,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1246,
	-1, 2688,
	194, 0,
	195, 0,
	241, 0,
	-2, 1265,
	-1, 2751,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1294,
	-1, 2752,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1295,
	-1, 2753,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1296,
	-1, 2757,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1300,
	-1, 2758,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1301,
	-1, 2759,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1302,
	-1, 2801,
	442, 1563,
	-2, 1575,
	-1, 2881,
	444, 1983,
	-2, 911,
	-1, 2923,
	194, 0,
	195, 0,
	241, 0,
	-2, 1266,
	-1, 2926,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1269,
	-1, 2927,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1271,
	-1, 3069,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1270,
	-1, 3070,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1272,
	-1, 3080,
	194, 0,
	-2, 1303,
	-1, 3171,
	194, 0,
	-2, 1304,
	-1, 3280,
	40, 0,
	169, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1840,
}

const sqlPrivate = 57344

const sqlLast = 68486

var sqlAct = [...]int{

	869, 3108, 3362, 3134, 3024, 3111, 3279, 3289, 2591, 3352,
	3251, 2249, 3253, 3237, 3290, 3097, 3291, 2819, 3250, 2719,
	2258, 3175, 3278, 2250, 3137, 798, 1885, 1812, 3038, 3061,
	2867, 2872, 2621, 2091, 2982, 1578, 1945, 2613, 985, 207,
	1272, 207, 207, 1135, 2588, 207, 207, 207, 207, 207,
	826, 1382, 207, 2364, 2877, 789, 2820, 2290, 2615, 2329,
	567, 546, 2057, 1036, 2362, 1550, 2246, 2626, 977, 2496,
	2485, 3084, 2092, 1340, 2223, 1128, 1548, 2226, 207, 1773,
	199, 2445, 567, 2152, 2958, 1791, 2281, 2289, 891, 1770,
	2283, 2461, 2154, 2259, 1763, 1567, 2527, 1529, 2088, 1762,
	1690, 2472, 1882, 2774, 32, 1699, 4, 2093, 663, 841,
	2444, 1558, 3176, 2206, 1475, 1976, 797, 138, 1958, 2325,
	1878, 1144, 1717, 1147, 3135, 1723, 865, 2095, 1268, 2625,
	2145, 1676, 1530, 1493, 1369, 86, 1024, 1678, 1988, 2224,
	2501, 1942, 2207, 2184, 2589, 1281, 786, 1137, 2054, 1255,
	1265, 2252, 969, 1759, 1201, 2293, 1970, 568, 972, 569,
	2080, 1539, 2065, 1015, 951, 2183, 1959, 2022, 498, 1456,
	207, 207, 514, 522, 201, 1383, 145, 1381, 563, 540,
	200, 146, 530, 658, 1279, 1779, 1231, 639, 1155, 608,
	1689, 517, 825, 138, 949, 974, 1368, 704, 1213, 2790,
	788, 1387, 2791, 1813, 2360, 1488, 2251, 1793, 1973, 2201,
	1275, 3390, 2208, 3381, 2074, 1793, 2074, 793, 1549, 525,
	2171, 868, 1395, 1396, 3380, 3361, 1793, 2074, 1730, 3348,
	3346, 2676, 2996, 2996, 572, 3311, 1805, 2208, 2074, 3309,
	575, 2632, 2074, 3306, 3303, 1465, 3307, 3304, 1398, 3300,
	3276, 3275, 1730, 1730, 1730, 3272, 572, 175, 1805, 793,
	672, 2777, 575, 3271, 2255, 1579, 1805, 3232, 1726, 3223,
	2117, 1974, 2996, 3222, 1397, 3216, 2996, 3210, 1730, 2074,
	2996, 3208, 1417, 794, 2996, 3173, 3233, 983, 2117, 966,
	3159, 1395, 1396, 1730, 2633, 177, 3156, 952, 952, 2996,
	2417, 2418, 3125, 3124, 3117, 1730, 1730, 1730, 2517, 3116,
	1395, 1396, 2996, 3090, 3160, 774, 1730, 1398, 3071, 175,
	773, 2117, 3052, 3020, 3014, 2645, 2074, 2074, 2919, 2995,
	175, 2925, 2996, 2067, 2117, 1002, 1398, 997, 176, 1975,
	1972, 1805, 781, 1397, 1420, 1421, 1422, 1423, 169, 2891,
	2883, 2777, 2884, 2884, 1403, 2796, 170, 177, 2797, 2066,
	2417, 2418, 1397, 2786, 2780, 953, 2787, 2074, 177, 2712,
	2652, 2458, 1730, 2653, 2074, 2456, 2455, 147, 2074, 2074,
	2409, 2114, 3015, 2074, 1425, 1426, 1427, 2392, 2381, 1730,
	2393, 2074, 2379, 2279, 2417, 2418, 1809, 2380, 2130, 980,
	176, 2074, 2116, 2111, 2653, 2117, 2074, 2074, 998, 2107,
	169, 176, 1730, 2073, 1730, 2198, 2074, 2143, 170, 1395,
	1396, 169, 1650, 1403, 824, 1438, 1439, 1440, 2645, 170,
	1808, 1977, 2423, 1809, 2233, 1418, 955, 956, 2328, 147,
	1729, 2141, 1403, 1342, 1525, 1398, 1154, 2634, 1444, 2363,
	147, 957, 954, 1425, 1426, 1427, 1794, 2417, 2418, 780,
	2435, 2436, 2437, 779, 1794, 778, 2635, 2417, 2418, 777,
	776, 1397, 772, 771, 2310, 1794, 2921, 770, 769, 1417,
	768, 767, 766, 175, 765, 175, 2417, 2418, 764, 2435,
	2436, 2437, 2423, 763, 762, 761, 702, 701, 700, 699,
	698, 697, 1669, 207, 1418, 2920, 1424, 696, 695, 694,
	693, 692, 207, 2433, 1176, 691, 690, 2432, 689, 688,
	687, 177, 686, 177, 1419, 685, 2423, 2432, 1971, 684,
	683, 682, 681, 207, 680, 679, 678, 671, 1170, 670,
	207, 1420, 1421, 1422, 1423, 630, 2432, 629, 588, 587,
	586, 1403, 2122, 578, 577, 2973, 207, 1039, 207, 207,
	1140, 207, 1039, 207, 176, 1164, 176, 576, 553, 552,
	1023, 207, 207, 2433, 1028, 551, 169, 1435, 1445, 550,
	534, 1425, 1426, 1427, 170, 197, 196, 195, 194, 2423,
	1037, 2937, 2632, 1419, 193, 1148, 207, 192, 191, 2423,
	1801, 190, 2434, 147, 189, 2254, 998, 2433, 1792, 188,
	207, 187, 1140, 1140, 207, 207, 186, 207, 2423, 1858,
	995, 185, 2417, 2418, 184, 1433, 183, 182, 181, 207,
	2885, 2066, 1418, 998, 180, 179, 178, 207, 2794, 1131,
	2438, 1408, 1406, 1407, 1399, 1400, 1401, 1402, 1404, 1405,
	2499, 207, 207, 207, 207, 207, 1140, 1140, 2386, 2375,
	1466, 1140, 2434, 207, 1140, 207, 2239, 1158, 2211, 2438,
	2433, 1496, 2108, 2099, 867, 796, 1013, 1495, 1175, 1496,
	2433, 1674, 1551, 1565, 1482, 1495, 1163, 2013, 1168, 2011,
	1174, 1150, 1160, 2009, 1214, 1214, 2434, 1276, 1499, 2433,
	2417, 2418, 1169, 1424, 1394, 2007, 1494, 2005, 1032, 1140,
	1125, 1130, 1407, 1399, 1400, 1401, 1402, 1404, 1405, 1010,
	1477, 1419, 2419, 2420, 2421, 2422, 2424, 2425, 1157, 207,
	1156, 1030, 1399, 1400, 1401, 1402, 1404, 1405, 1218, 987,
	3296, 1815, 3163, 207, 3277, 572, 1436, 3206, 3166, 3161,
	3053, 575, 3107, 3046, 2423, 2975, 2957, 2956, 207, 2434,
	2944, 2943, 2942, 2941, 2935, 2934, 2933, 2932, 1284, 2434,
	1133, 2856, 2809, 1291, 2808, 2806, 1269, 2800, 138, 2771,
	1294, 2427, 2419, 2420, 2421, 2422, 2424, 2425, 2434, 2770,
	2769, 2696, 965, 2692, 2656, 2494, 794, 2452, 1395, 1396,
	2443, 1259, 1262, 2416, 2413, 2412, 2410, 1814, 1282, 2399,
	2398, 1395, 1396, 1215, 2426, 2427, 2419, 2420, 2421, 2422,
	2424, 2425, 1207, 1210, 1398, 2397, 1735, 1374, 1434, 1375,
	2394, 2391, 2423, 2240, 175, 2433, 1437, 1398, 1408, 1406,
	1407, 1399, 1400, 1401, 1402, 1404, 1405, 2369, 2368, 1478,
	1397, 1476, 979, 2417, 2418, 2361, 2280, 823, 175, 2100,
	1981, 1394, 1733, 1397, 1767, 1464, 1393, 3388, 3360, 2429,
	2430, 2431, 177, 1477, 1288, 3359, 2428, 2426, 2427, 2419,
	2420, 2421, 2422, 2424, 2425, 175, 2428, 2426, 2427, 2419,
	2420, 2421, 2422, 2424, 2425, 1367, 177, 3312, 2429, 2430,
	2431, 986, 2721, 1298, 3267, 2428, 2426, 2427, 2419, 2420,
	2421, 2422, 2424, 2425, 3265, 176, 3201, 2511, 3198, 1305,
	1373, 3195, 3194, 177, 2434, 169, 3190, 1670, 2185, 3184,
	1403, 3155, 3154, 170, 1948, 1380, 2324, 3103, 3082, 176,
	1372, 3058, 3057, 1403, 3045, 1370, 3036, 3033, 3028, 169,
	2972, 207, 2955, 2905, 147, 2902, 2835, 170, 2834, 2823,
	1425, 1426, 1427, 2822, 2782, 2687, 176, 2646, 2607, 794,
	2577, 2558, 2537, 2536, 774, 2513, 169, 207, 147, 773,
	1376, 2457, 2390, 2389, 170, 2423, 2374, 207, 1039, 207,
	207, 1527, 2238, 1390, 1391, 175, 1140, 567, 207, 207,
	2352, 2220, 567, 207, 1954, 147, 1500, 1497, 207, 1489,
	1486, 1418, 2126, 1395, 1396, 2125, 2103, 2085, 2072, 2003,
	1460, 1568, 1564, 1528, 1524, 1523, 1522, 1536, 1521, 1498,
	1520, 1039, 1519, 177, 1518, 981, 1517, 1516, 1514, 1398,
	1559, 2428, 2426, 2427, 2419, 2420, 2421, 2422, 2424, 2425,
	1672, 1585, 1513, 2119, 1512, 1572, 1511, 1533, 1534, 1510,
	2537, 1509, 1508, 1507, 1675, 1397, 1506, 1505, 1504, 1644,
	1503, 1502, 1645, 1665, 1479, 1547, 176, 1461, 952, 1459,
	1454, 983, 1009, 983, 1000, 138, 169, 992, 3178, 1610,
	3032, 1490, 1491, 1575, 170, 2478, 2974, 2929, 1642, 1571,
	1419, 1816, 2805, 2789, 2785, 2378, 2086, 1395, 1396, 794,
	2417, 2418, 1478, 1669, 2509, 147, 1570, 1457, 1669, 1560,
	1694, 3199, 2419, 2420, 2421, 2422, 2424, 2425, 2012, 1025,
	2010, 1669, 1556, 1398, 2008, 2561, 1027, 2616, 3051, 3016,
	2792, 2208, 2648, 2647, 1496, 1526, 2006, 1647, 2004, 1509,
	1495, 1551, 1313, 2187, 1140, 207, 2396, 1684, 3164, 1397,
	2395, 1039, 1656, 2334, 2173, 3162, 1668, 1553, 1365, 2833,
	1022, 572, 759, 1484, 3085, 1574, 572, 575, 802, 2593,
	1641, 2592, 575, 1813, 3138, 1509, 1026, 1973, 1342, 1764,
	1576, 1341, 3106, 980, 1731, 980, 2662, 2572, 1712, 3363,
	207, 207, 2251, 2723, 1660, 1659, 1573, 207, 1669, 1666,
	760, 2384, 1989, 2124, 1546, 1661, 1515, 207, 1406, 1407,
	1399, 1400, 1401, 1402, 1404, 1405, 207, 3297, 207, 1492,
	207, 2586, 964, 1755, 207, 1401, 1402, 1404, 1405, 1403,
	1191, 3308, 3305, 2628, 2815, 1714, 207, 3247, 1716, 2868,
	1974, 1720, 2287, 1679, 3215, 3335, 2521, 1680, 1302, 625,
	3006, 1743, 620, 1179, 1189, 755, 1337, 3336, 1698, 1425,
	1426, 1427, 1768, 753, 2131, 1724, 1751, 2421, 2422, 2424,
	2425, 1754, 1847, 3298, 751, 3023, 1140, 207, 1140, 749,
	746, 3385, 2156, 1140, 792, 1845, 3132, 207, 207, 3128,
	3127, 1663, 1463, 3126, 2849, 2846, 2147, 1140, 1140, 2845,
	207, 1785, 1157, 1776, 1156, 2812, 207, 2838, 1975, 1972,
	1418, 567, 207, 2811, 207, 792, 207, 1657, 207, 572,
	207, 619, 2373, 1817, 1190, 575, 626, 1339, 2372, 2371,
	207, 1719, 1681, 1728, 207, 1796, 2147, 2370, 1798, 1336,
	2510, 1800, 787, 207, 1683, 1803, 1027, 2146, 2338, 2203,
	2197, 1783, 1691, 2194, 1727, 2175, 791, 2113, 1929, 1371,
	1153, 1826, 207, 1243, 1999, 1998, 1745, 1744, 207, 2159,
	734, 1887, 2247, 1295, 1538, 1679, 1224, 1855, 1223, 1680,
	1688, 1611, 1222, 2040, 1221, 3066, 990, 791, 1039, 743,
	2663, 1300, 785, 1027, 2174, 1202, 1026, 3214, 1685, 1419,
	1977, 1185, 1778, 1692, 1693, 1781, 1856, 1822, 1818, 2852,
	1664, 794, 3113, 2106, 1944, 1582, 2560, 2166, 1944, 3269,
	1829, 1886, 793, 1282, 1350, 1865, 1310, 1378, 1952, 1862,
	1405, 1200, 2825, 1950, 808, 2134, 1585, 1585, 2165, 1008,
	1542, 1782, 1857, 1026, 1332, 2665, 2664, 2136, 2307, 989,
	2120, 3294, 1977, 793, 3355, 677, 1010, 3002, 510, 1940,
	1810, 735, 3327, 618, 1681, 617, 1296, 2703, 1199, 2623,
	1694, 1560, 1545, 1039, 1610, 1610, 1683, 2569, 1187, 2137,
	2706, 1938, 505, 2624, 1926, 572, 1686, 1686, 1811, 1836,
	1540, 575, 2135, 621, 3230, 1333, 2564, 1971, 1989, 2158,
	1314, 3375, 2326, 2327, 1711, 1543, 1990, 1824, 1825, 1696,
	1335, 1860, 3191, 1960, 1961, 2580, 207, 1694, 1863, 1399,
	1400, 1401, 1402, 1404, 1405, 1541, 2191, 2425, 1670, 2185,
	1685, 1960, 1986, 1670, 2185, 2704, 2623, 628, 627, 1202,
	1039, 207, 2474, 1861, 1859, 3335, 1670, 2185, 1864, 2549,
	207, 2522, 554, 207, 774, 790, 1039, 774, 774, 1874,
	1793, 1854, 1875, 1876, 657, 2520, 2551, 2021, 3295, 2025,
	2025, 2038, 1977, 1960, 1487, 1364, 2058, 2060, 2847, 2235,
	3326, 2064, 1934, 1985, 1019, 794, 790, 2553, 2548, 2105,
	1935, 2112, 1342, 1936, 2195, 3000, 1941, 1544, 794, 736,
	1686, 2911, 794, 3076, 2087, 3342, 2836, 1679, 2097, 2098,
	3258, 1680, 2157, 1924, 1927, 1956, 1453, 2104, 1347, 1686,
	3228, 1682, 2101, 1670, 1667, 3203, 2081, 1977, 757, 1242,
	2552, 756, 1980, 2388, 207, 1983, 979, 3353, 979, 747,
	983, 3293, 2077, 952, 1301, 560, 2144, 1846, 2555, 3229,
	747, 1883, 1884, 793, 2826, 748, 747, 983, 1648, 2906,
	1844, 1923, 2313, 1686, 2096, 1039, 1020, 1184, 2803, 1003,
	207, 2913, 3292, 1021, 2115, 2033, 1014, 2049, 207, 1319,
	2062, 3334, 3332, 794, 138, 3114, 2070, 2071, 207, 2473,
	3144, 3063, 1722, 2078, 2082, 2083, 1681, 579, 2142, 737,
	1348, 207, 3035, 3354, 1140, 1311, 1556, 2858, 1683, 3001,
	3325, 2611, 1721, 2242, 1757, 1535, 207, 1039, 1001, 996,
	207, 207, 497, 1386, 2912, 1996, 562, 2148, 506, 2760,
	2583, 1297, 2121, 1937, 2340, 3356, 1695, 738, 1943, 1715,
	1718, 1585, 1939, 2316, 988, 1951, 207, 744, 207, 2953,
	3376, 207, 980, 1682, 1828, 3370, 1312, 1498, 2502, 1309,
	1377, 2993, 1685, 1692, 1693, 1299, 207, 734, 1700, 980,
	1349, 2129, 1007, 207, 3119, 207, 2192, 207, 2221, 1610,
	507, 1131, 1925, 207, 2170, 1704, 207, 2990, 207, 785,
	207, 3062, 207, 207, 2177, 207, 1140, 1140, 1140, 3118,
	1140, 2160, 2162, 2132, 207, 207, 2128, 207, 3101, 1794,
	1582, 1582, 3181, 207, 2200, 2205, 2814, 556, 508, 981,
	509, 981, 1490, 1491, 207, 2151, 207, 1701, 2991, 2213,
	2168, 2215, 2612, 561, 2315, 2299, 2533, 2275, 2276, 2993,
	2176, 3005, 1538, 2230, 2204, 207, 207, 207, 3004, 207,
	2312, 1686, 1019, 2193, 2702, 2244, 2262, 2529, 735, 1453,
	2761, 2186, 2188, 2189, 2190, 2990, 2762, 1385, 2983, 2243,
	1019, 2225, 207, 558, 2253, 2222, 2253, 1157, 1777, 2209,
	1677, 2981, 1766, 1765, 1739, 3064, 2954, 2985, 2179, 2218,
	3238, 3204, 580, 581, 572, 1851, 3369, 1651, 1705, 1542,
	575, 1655, 2264, 1870, 2234, 2277, 2991, 2873, 1542, 3039,
	555, 2219, 2311, 2286, 2196, 138, 2273, 2486, 1245, 2305,
	2271, 2306, 2301, 2257, 2302, 1385, 2349, 2314, 1320, 3102,
	2539, 1545, 2538, 2332, 1020, 2268, 2984, 2269, 1823, 2270,
	1545, 1021, 899, 2272, 676, 2278, 559, 1282, 2347, 2079,
	2300, 2288, 1020, 1384, 2341, 2475, 2178, 557, 1540, 1021,
	2076, 1706, 1707, 2110, 1543, 1653, 2986, 2075, 669, 2987,
	1702, 207, 2109, 1543, 2318, 1216, 583, 582, 1230, 2232,
	1654, 203, 1386, 500, 501, 1682, 3003, 518, 500, 518,
	528, 533, 1217, 1541, 549, 2503, 736, 1703, 2321, 1871,
	791, 2320, 203, 2323, 2989, 3186, 2274, 1228, 2487, 3109,
	3025, 1384, 2657, 1775, 512, 3339, 2992, 2366, 2367, 3136,
	666, 2582, 2180, 2181, 203, 3241, 584, 585, 783, 3099,
	734, 2959, 2376, 3205, 2775, 3187, 1994, 1362, 1344, 3341,
	3310, 1330, 3200, 3081, 2986, 2952, 2447, 2987, 2851, 2344,
	2446, 2686, 785, 2505, 1993, 1328, 1544, 2411, 2339, 1039,
	2345, 2351, 1326, 2350, 3100, 1544, 2377, 2459, 1324, 1322,
	1316, 1226, 2466, 2467, 794, 207, 2229, 2202, 207, 787,
	1708, 2172, 2989, 3242, 2127, 207, 3110, 784, 207, 207,
	1039, 1566, 2465, 3188, 2992, 1563, 737, 1363, 1292, 1039,
	2309, 1843, 2308, 2304, 207, 1853, 1833, 1643, 1501, 2454,
	1206, 3288, 500, 500, 3235, 1582, 2383, 2988, 207, 2979,
	203, 735, 2871, 2492, 2489, 2468, 2831, 2829, 2813, 2610,
	2595, 2714, 2500, 2594, 738, 207, 207, 207, 2248, 674,
	675, 207, 2481, 1709, 207, 2518, 2237, 2236, 2216, 745,
	2482, 207, 207, 207, 207, 207, 2493, 2523, 1585, 2498,
	2490, 2491, 2497, 667, 668, 207, 207, 983, 1229, 2463,
	1807, 1806, 2614, 207, 1804, 983, 983, 2470, 2471, 983,
	1802, 2476, 2477, 1361, 1343, 207, 1140, 1329, 207, 2460,
	2449, 2450, 2451, 1585, 1039, 2988, 1610, 1227, 2530, 2506,
	2346, 1327, 1039, 983, 511, 979, 1799, 207, 1325, 2348,
	207, 207, 2488, 2516, 1323, 1321, 1315, 1225, 3148, 2526,
	207, 1797, 979, 1140, 207, 1795, 1140, 1140, 1140, 1786,
	1736, 1610, 1734, 207, 2540, 2500, 2543, 1725, 1713, 207,
	2535, 2504, 1710, 2563, 1842, 207, 1697, 207, 2541, 2600,
	2545, 2546, 1687, 1388, 207, 2596, 2519, 961, 1684, 736,
	2570, 2330, 3336, 3261, 2556, 1754, 2557, 3055, 1469, 750,
	752, 2524, 1474, 3054, 1673, 1181, 3150, 1140, 1140, 980,
	2630, 962, 1571, 1684, 2164, 207, 207, 980, 980, 207,
	2554, 980, 2578, 2619, 2575, 2618, 2576, 2147, 2644, 2565,
	2559, 207, 1694, 1039, 207, 207, 1039, 207, 2163, 2573,
	2882, 1359, 1360, 1724, 2574, 980, 2147, 2579, 2660, 1724,
	2177, 2480, 2568, 207, 1849, 2483, 1830, 2161, 2627, 1395,
	1396, 3193, 2331, 1395, 1396, 1389, 1148, 2627, 3168, 1037,
	2960, 2182, 2167, 2566, 2638, 2639, 2640, 2567, 2641, 2642,
	1392, 513, 2199, 2169, 3234, 1398, 3351, 782, 3207, 737,
	2617, 2514, 2515, 963, 2862, 2857, 1039, 2799, 2659, 2670,
	2256, 2063, 1646, 2508, 2629, 2655, 2643, 1039, 2689, 207,
	794, 1397, 1577, 2636, 2507, 1397, 138, 3368, 981, 2417,
	2418, 1395, 1396, 1585, 2139, 2138, 2571, 738, 524, 2711,
	1304, 1466, 2804, 2709, 2139, 981, 1303, 2512, 2534, 2140,
	2717, 2002, 2001, 2000, 1997, 1995, 1968, 2930, 2701, 1464,
	2698, 2699, 2700, 1462, 1346, 2668, 2667, 1345, 3377, 3093,
	3049, 1610, 2672, 2601, 2724, 2671, 2603, 2604, 2605, 2674,
	3027, 2901, 1585, 1585, 2890, 993, 2866, 2855, 2854, 2853,
	2828, 2637, 2608, 2606, 666, 2266, 2241, 2217, 1585, 1585,
	1955, 1789, 1788, 1787, 1769, 1747, 1746, 1742, 1741, 2694,
	1740, 1738, 207, 1737, 1379, 1004, 1358, 2705, 2707, 2708,
	1610, 1610, 549, 1357, 207, 2713, 1338, 2650, 2651, 1585,
	1039, 2720, 1334, 1331, 2729, 1317, 1610, 1610, 203, 1254,
	203, 203, 1253, 1145, 1252, 203, 2772, 1251, 207, 1250,
	2739, 1249, 1248, 203, 1159, 2737, 2764, 2793, 2726, 1247,
	1246, 1244, 2727, 2801, 1239, 1238, 1237, 1610, 1236, 1235,
	1198, 1197, 1582, 1196, 1195, 1194, 1193, 1192, 1183, 1186,
	1180, 1178, 1177, 1006, 2788, 1005, 2765, 936, 846, 1649,
	758, 207, 1205, 612, 2773, 1873, 203, 203, 742, 1145,
	2778, 2779, 3112, 2781, 138, 2776, 1352, 1582, 74, 1188,
	599, 203, 68, 2827, 3246, 983, 732, 2784, 2547, 1241,
	1832, 1318, 1758, 1834, 207, 207, 207, 2479, 2084, 3227,
	2938, 2795, 2387, 203, 203, 203, 203, 1145, 3174, 2850,
	2802, 1039, 207, 2810, 3075, 549, 1140, 203, 1992, 1483,
	70, 2839, 2843, 834, 919, 2980, 2816, 2292, 2817, 2830,
	2291, 2832, 801, 207, 1042, 1658, 840, 1671, 2123, 2725,
	2848, 2024, 1581, 2886, 843, 1583, 207, 207, 1140, 1140,
	1140, 845, 207, 207, 207, 2879, 844, 207, 207, 2875,
	1584, 1485, 842, 2844, 207, 1580, 2231, 1883, 2730, 2260,
	2878, 2861, 1233, 2874, 2177, 722, 1754, 1039, 2897, 1662,
	2910, 203, 1949, 1883, 2740, 1987, 2837, 2382, 1480, 814,
	836, 1984, 999, 813, 2484, 203, 2622, 980, 2041, 2798,
	3044, 1869, 2322, 1866, 2865, 615, 2414, 1969, 991, 2869,
	533, 2863, 2876, 2046, 2768, 2039, 2262, 2035, 1366, 1455,
	2261, 2880, 207, 2924, 1029, 2888, 2887, 817, 1947, 1471,
	2356, 2495, 2631, 2893, 2118, 2915, 2892, 2904, 1585, 1877,
	2908, 2900, 979, 983, 1756, 2463, 2903, 960, 959, 958,
	979, 979, 3252, 3249, 979, 2909, 2928, 1652, 2133, 2807,
	2898, 2899, 1447, 2597, 830, 2464, 2658, 1203, 3192, 1446,
	754, 3183, 1018, 1017, 1016, 2916, 1610, 1582, 979, 2532,
	3374, 2824, 174, 207, 171, 173, 172, 2841, 2581, 90,
	37, 36, 35, 1039, 17, 1039, 114, 113, 112, 111,
	110, 109, 108, 107, 106, 105, 104, 103, 102, 101,
	100, 99, 207, 207, 207, 98, 97, 96, 95, 2951,
	94, 93, 92, 91, 207, 34, 1582, 1582, 2970, 545,
	207, 542, 207, 50, 49, 207, 207, 207, 207, 207,
	2998, 89, 1582, 1582, 88, 2864, 207, 207, 1140, 16,
	1039, 33, 1140, 14, 54, 980, 55, 13, 2894, 2895,
	2896, 2967, 2965, 2962, 2963, 29, 2497, 2971, 30, 207,
	80, 2978, 1039, 1582, 79, 1140, 28, 15, 2964, 27,
	25, 2997, 26, 11, 8, 207, 7, 983, 10, 2961,
	1537, 2968, 3022, 12, 24, 2976, 143, 142, 1953, 3029,
	73, 141, 72, 500, 140, 139, 207, 983, 71, 2977,
	3043, 23, 1039, 3007, 9, 22, 135, 1469, 3041, 2999,
	3056, 3012, 3018, 3017, 203, 981, 203, 1754, 3008, 203,
	3009, 3010, 3040, 981, 981, 3013, 3030, 981, 1039, 1159,
	2619, 203, 3050, 3042, 67, 1037, 137, 136, 3021, 203,
	1159, 518, 3048, 64, 203, 1159, 134, 133, 65, 132,
	549, 981, 3026, 131, 2045, 66, 130, 3031, 2627, 21,
	3037, 3073, 5, 53, 1039, 3065, 3067, 6, 3060, 2661,
	207, 83, 207, 84, 1039, 207, 31, 62, 3047, 61,
	60, 3083, 20, 207, 52, 19, 3072, 165, 164, 980,
	163, 3059, 162, 158, 157, 161, 1585, 3073, 159, 160,
	3096, 156, 129, 167, 166, 154, 207, 1886, 151, 980,
	150, 153, 155, 3087, 152, 149, 168, 205, 128, 207,
	57, 3091, 127, 2966, 3088, 3089, 207, 3094, 3140, 800,
	126, 1140, 3131, 125, 1610, 124, 207, 123, 56, 18,
	2, 3141, 1, 3115, 3143, 0, 0, 1585, 3019, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 0,
	0, 0, 0, 3139, 0, 3157, 3158, 3129, 3095, 0,
	3147, 3153, 0, 0, 3146, 0, 207, 0, 3152, 0,
	0, 0, 207, 3122, 3123, 1610, 0, 0, 3145, 0,
	207, 0, 2878, 0, 0, 3151, 0, 203, 0, 0,
	0, 0, 1582, 0, 0, 3180, 3189, 0, 3172, 0,
	0, 2041, 2041, 0, 0, 0, 0, 207, 207, 2619,
	3179, 3167, 0, 1585, 0, 0, 0, 0, 0, 0,
	0, 3149, 0, 3202, 0, 207, 1140, 0, 0, 0,
	979, 207, 203, 203, 0, 1140, 1140, 0, 0, 203,
	0, 0, 3221, 207, 3177, 207, 0, 0, 0, 1774,
	0, 1610, 0, 3209, 0, 0, 812, 0, 203, 3213,
	203, 0, 203, 0, 3218, 207, 500, 0, 0, 3212,
	3224, 207, 207, 3243, 1039, 3219, 3220, 0, 1790, 0,
	0, 0, 0, 0, 207, 0, 3254, 0, 0, 0,
	3196, 3262, 0, 0, 3264, 3092, 3266, 0, 0, 0,
	3248, 2041, 2041, 2041, 3197, 3256, 3273, 1886, 3274, 0,
	0, 3231, 0, 0, 207, 0, 0, 0, 0, 549,
	3270, 0, 3268, 0, 0, 3299, 0, 3217, 0, 1145,
	203, 0, 3284, 3285, 3287, 3286, 0, 0, 3225, 0,
	3226, 3255, 549, 0, 3259, 0, 3313, 0, 203, 3315,
	207, 3317, 3121, 203, 203, 0, 203, 3322, 203, 3323,
	203, 0, 203, 3316, 3301, 3318, 3244, 3324, 3314, 207,
	3319, 0, 1848, 0, 0, 0, 1850, 0, 0, 3320,
	3321, 0, 0, 0, 3330, 203, 3333, 3331, 979, 0,
	0, 0, 3263, 207, 0, 3337, 0, 0, 3254, 3345,
	3340, 3347, 3344, 3338, 533, 0, 0, 3350, 0, 0,
	549, 3349, 0, 981, 0, 0, 2353, 2354, 0, 0,
	0, 0, 0, 0, 0, 3358, 3357, 0, 0, 0,
	3365, 0, 3364, 2262, 3366, 0, 0, 0, 3367, 0,
	3371, 0, 0, 0, 0, 0, 0, 0, 0, 3378,
	0, 3379, 0, 0, 0, 0, 0, 0, 0, 0,
	1582, 0, 3382, 3383, 3384, 3386, 3387, 2045, 2045, 0,
	0, 0, 0, 0, 3391, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3343, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3372, 3373, 0, 0, 0, 0, 0, 0,
	0, 1582, 0, 0, 0, 800, 2440, 2441, 2442, 800,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3389, 979, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1161, 979, 1165, 0, 1171, 0, 0, 500, 0,
	0, 0, 0, 0, 0, 0, 0, 2045, 2045, 2045,
	0, 981, 0, 203, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 500, 0, 0, 0, 1582, 0, 0,
	203, 0, 500, 0, 0, 203, 0, 0, 2041, 2041,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2417, 2418, 0, 2435, 2436, 2437, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2691, 0, 0, 0, 0, 0, 1290, 0,
	0, 0, 0, 0, 0, 1293, 0, 0, 0, 0,
	0, 0, 812, 0, 0, 0, 812, 0, 0, 0,
	0, 0, 0, 0, 1123, 0, 0, 0, 0, 1123,
	0, 0, 0, 2432, 0, 0, 518, 0, 2041, 2041,
	2041, 2041, 2041, 2041, 2041, 2041, 2041, 2041, 2041, 2041,
	2041, 2041, 2041, 2041, 2041, 2041, 2041, 0, 2041, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2155, 0, 0, 981, 0, 0, 0, 0,
	203, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 0, 0, 0, 981, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 2423, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 203, 2210, 0, 0, 0, 1466, 0, 0,
	0, 0, 0, 0, 1448, 1449, 1450, 1451, 1452, 0,
	0, 0, 0, 0, 0, 0, 58, 0, 203, 0,
	1159, 0, 0, 203, 0, 0, 2438, 59, 0, 0,
	0, 0, 0, 0, 1468, 0, 0, 0, 1774, 0,
	1481, 63, 0, 2682, 2683, 2155, 0, 500, 0, 2265,
	0, 0, 0, 0, 0, 203, 2433, 0, 203, 0,
	203, 0, 203, 0, 203, 203, 0, 1145, 0, 0,
	0, 69, 0, 0, 0, 0, 2284, 666, 0, 2155,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 0,
	0, 0, 0, 0, 2045, 2045, 1159, 0, 1159, 0,
	0, 75, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 0, 0, 0, 76, 0, 0, 203, 203, 203,
	0, 203, 0, 2741, 2742, 2743, 2744, 2745, 2746, 2747,
	2748, 2749, 2750, 2751, 2752, 2753, 2754, 2755, 2756, 2757,
	2758, 2759, 0, 2763, 203, 2434, 0, 0, 0, 0,
	0, 0, 77, 0, 0, 0, 0, 0, 0, 1531,
	1531, 1531, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2045, 2045, 2045, 2045, 2045, 2045,
	2045, 2045, 2045, 2045, 2045, 2045, 2045, 2045, 2045, 2045,
	2045, 2045, 2045, 0, 2045, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1395, 1396, 800, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2417, 2418, 1159, 2435, 2436, 2437, 0, 0, 1398,
	0, 0, 0, 0, 0, 2429, 2430, 2431, 78, 0,
	0, 0, 2428, 2426, 2427, 2419, 2420, 2421, 2422, 2424,
	2425, 0, 0, 0, 0, 1397, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 144,
	81, 0, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 2432, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 662, 0, 1123, 115, 0, 0, 0,
	203, 0, 0, 0, 0, 0, 0, 0, 203, 203,
	0, 0, 203, 0, 0, 0, 0, 500, 0, 177,
	500, 0, 0, 0, 0, 1403, 0, 500, 0, 0,
	500, 500, 812, 0, 0, 0, 203, 0, 1123, 0,
	0, 0, 116, 2423, 0, 0, 1159, 0, 0, 0,
	0, 0, 0, 0, 148, 1425, 1426, 1427, 0, 0,
	1159, 0, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 169, 0, 0, 0, 0, 203, 2155, 2528,
	170, 0, 0, 2155, 0, 0, 2528, 0, 0, 0,
	0, 0, 0, 2155, 2528, 2155, 2528, 2528, 0, 0,
	0, 147, 0, 0, 0, 0, 1418, 203, 203, 0,
	0, 2041, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2433, 0, 0, 203, 0, 0,
	1145, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2585,
	2041, 0, 2587, 2590, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 0, 203, 0, 1123, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 0,
	0, 1145, 0, 0, 0, 0, 0, 2155, 0, 500,
	0, 0, 0, 0, 0, 1419, 2155, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2434, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 1774, 0,
	0, 1774, 0, 0, 0, 0, 0, 0, 0, 0,
	2041, 0, 0, 2666, 0, 0, 1145, 203, 0, 203,
	0, 0, 0, 0, 0, 1867, 0, 1872, 0, 0,
	0, 0, 0, 1879, 0, 203, 0, 0, 0, 0,
	1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897,
	1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907,
	1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917,
	1918, 1919, 1920, 1921, 1922, 0, 1928, 0, 1930, 1931,
	1932, 1933, 1408, 1406, 1407, 1399, 1400, 1401, 1402, 1404,
	1405, 2722, 0, 2429, 2430, 2431, 3080, 0, 1957, 0,
	2428, 2426, 2427, 2419, 2420, 2421, 2422, 2424, 2425, 122,
	0, 0, 0, 1468, 0, 58, 0, 1982, 0, 0,
	0, 0, 0, 0, 0, 0, 59, 117, 0, 0,
	0, 0, 0, 0, 0, 3104, 0, 0, 0, 0,
	63, 0, 0, 0, 0, 0, 0, 2045, 2014, 2015,
	2016, 2017, 2018, 2019, 2020, 39, 119, 0, 0, 2037,
	0, 2048, 2050, 2055, 0, 0, 0, 0, 38, 0,
	69, 0, 0, 0, 0, 1123, 0, 0, 203, 0,
	0, 0, 0, 0, 500, 0, 2045, 0, 0, 0,
	41, 0, 0, 0, 0, 42, 500, 0, 0, 0,
	75, 0, 0, 120, 0, 900, 0, 0, 40, 85,
	0, 0, 0, 76, 43, 0, 0, 0, 0, 0,
	1159, 0, 659, 0, 0, 3171, 2417, 2418, 0, 2435,
	2436, 2437, 0, 0, 0, 0, 0, 0, 0, 0,
	44, 0, 0, 0, 204, 2690, 0, 58, 0, 661,
	0, 77, 0, 0, 0, 0, 0, 0, 59, 0,
	1123, 0, 0, 549, 0, 204, 0, 0, 0, 0,
	0, 0, 63, 0, 0, 0, 2045, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2432, 204, 0, 0,
	0, 0, 0, 0, 0, 0, 2859, 203, 203, 0,
	0, 0, 69, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1123, 0, 0,
	0, 0, 75, 0, 0, 2155, 203, 0, 0, 0,
	0, 85, 0, 1123, 0, 76, 0, 0, 2284, 2284,
	0, 0, 0, 0, 666, 666, 2155, 78, 2423, 1774,
	1774, 0, 0, 0, 45, 0, 203, 0, 0, 0,
	0, 0, 0, 0, 2212, 0, 2214, 0, 0, 0,
	0, 0, 0, 77, 0, 0, 0, 48, 144, 81,
	0, 82, 0, 46, 0, 0, 0, 121, 0, 0,
	0, 0, 0, 47, 0, 0, 0, 0, 0, 2438,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 51, 0, 2939, 115, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 0, 0, 0, 0, 2433,
	0, 0, 0, 0, 0, 0, 0, 0, 177, 0,
	0, 0, 1123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 0, 148, 0, 1159, 0, 0, 0, 78,
	0, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 169, 0, 0, 1123, 0, 0, 0, 0, 170,
	0, 0, 0, 0, 2155, 2528, 2155, 0, 0, 0,
	144, 81, 0, 82, 0, 0, 1159, 0, 2434, 0,
	147, 0, 2155, 3, 2528, 0, 0, 1159, 1159, 203,
	2155, 2528, 175, 0, 0, 0, 0, 0, 203, 203,
	0, 0, 0, 0, 662, 0, 0, 115, 0, 0,
	0, 0, 0, 0, 2336, 2337, 0, 0, 0, 0,
	2343, 3034, 0, 0, 0, 0, 0, 0, 0, 0,
	177, 0, 0, 0, 0, 0, 0, 2155, 0, 2357,
	2358, 0, 0, 0, 0, 1982, 0, 0, 0, 0,
	0, 0, 0, 116, 2365, 0, 0, 0, 1159, 0,
	0, 0, 0, 0, 0, 148, 0, 0, 0, 0,
	0, 0, 0, 176, 0, 0, 0, 0, 0, 0,
	2385, 0, 0, 169, 0, 0, 0, 0, 2429, 2430,
	2431, 170, 0, 0, 2400, 2428, 2426, 2427, 2419, 2420,
	2421, 2422, 2424, 2425, 0, 0, 0, 866, 0, 0,
	0, 0, 660, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2155, 0, 2528, 0, 0, 3098, 0, 0,
	0, 0, 2055, 2055, 2055, 203, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1531, 0, 0,
	0, 0, 0, 0, 0, 2469, 0, 573, 549, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2590, 0, 0, 0, 0, 0, 0, 203, 573,
	0, 0, 0, 0, 0, 0, 0, 0, 1159, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 1044, 204, 204, 1044, 0, 1044, 204, 203,
	800, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	0, 0, 800, 0, 0, 0, 0, 0, 2722, 0,
	58, 0, 0, 0, 500, 0, 0, 0, 0, 0,
	0, 59, 3098, 0, 0, 0, 0, 2550, 0, 0,
	0, 0, 0, 0, 0, 63, 0, 1044, 1044, 204,
	204, 0, 1395, 1396, 0, 0, 0, 0, 0, 2155,
	2528, 0, 0, 0, 204, 982, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 1123, 203, 1398, 0,
	0, 0, 0, 2528, 0, 0, 204, 204, 204, 204,
	0, 1044, 1044, 0, 0, 1159, 1044, 1159, 0, 1044,
	204, 0, 0, 0, 1397, 75, 0, 1123, 0, 0,
	0, 0, 1417, 0, 85, 0, 1123, 3239, 76, 0,
	0, 0, 2620, 1159, 203, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 812, 0, 0,
	0, 0, 0, 0, 1044, 0, 0, 0, 0, 812,
	0, 0, 0, 0, 0, 0, 77, 0, 2685, 0,
	0, 0, 0, 0, 204, 0, 2722, 0, 0, 0,
	0, 0, 0, 0, 1420, 1421, 1422, 1423, 204, 0,
	0, 0, 0, 0, 1403, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2673, 0, 0, 0, 1879,
	0, 0, 2155, 0, 0, 2677, 2678, 0, 0, 2681,
	0, 1123, 0, 2684, 1425, 1426, 1427, 0, 0, 1123,
	0, 3098, 2688, 0, 0, 0, 0, 0, 0, 0,
	0, 2695, 0, 0, 2469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1159, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2715, 0, 0, 0, 0,
	0, 0, 78, 0, 0, 1418, 0, 0, 0, 0,
	0, 0, 0, 0, 2731, 2732, 0, 2733, 2734, 2735,
	0, 0, 2736, 0, 0, 0, 2738, 0, 0, 0,
	0, 0, 0, 144, 81, 0, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 208, 0,
	0, 0, 0, 0, 0, 175, 0, 2766, 2767, 0,
	1123, 0, 0, 1123, 0, 0, 0, 662, 0, 0,
	115, 0, 0, 0, 0, 0, 1424, 0, 0, 0,
	0, 0, 0, 0, 0, 2783, 0, 0, 0, 0,
	0, 0, 0, 177, 1419, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 566, 0,
	0, 0, 0, 0, 0, 0, 116, 0, 0, 0,
	0, 0, 0, 1123, 0, 0, 0, 0, 148, 0,
	566, 0, 0, 0, 1123, 0, 176, 0, 0, 0,
	0, 0, 1395, 1396, 0, 0, 169, 2818, 2821, 0,
	0, 0, 204, 0, 170, 0, 0, 0, 0, 0,
	0, 0, 0, 1044, 204, 204, 0, 0, 1398, 0,
	2840, 1044, 204, 0, 0, 147, 0, 204, 0, 0,
	0, 0, 0, 202, 0, 202, 202, 0, 0, 0,
	202, 0, 0, 0, 1397, 0, 0, 0, 573, 0,
	0, 0, 1417, 0, 0, 0, 1044, 0, 0, 0,
	0, 1408, 1406, 1407, 1399, 1400, 1401, 1402, 1404, 1405,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1531, 0, 0, 0, 0, 0,
	0, 202, 202, 0, 0, 2889, 0, 1123, 2680, 0,
	0, 0, 0, 0, 0, 0, 202, 0, 0, 0,
	0, 0, 0, 0, 1420, 1421, 1422, 1423, 0, 0,
	0, 0, 0, 0, 1403, 0, 0, 0, 202, 202,
	202, 202, 0, 0, 0, 0, 0, 0, 0, 0,
	2917, 2918, 202, 0, 0, 0, 2922, 2923, 0, 0,
	0, 2926, 2927, 0, 1425, 1426, 1427, 0, 2931, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2936, 0, 1044,
	204, 0, 0, 0, 2940, 0, 1044, 0, 835, 87,
	0, 0, 0, 0, 0, 0, 0, 1395, 1396, 0,
	0, 0, 0, 0, 0, 1418, 202, 0, 1123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 0, 0, 1398, 0, 204, 204, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1397,
	0, 204, 0, 204, 0, 204, 0, 1417, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 1123, 0, 1424, 0, 0, 0,
	0, 0, 0, 2821, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1419, 0, 0, 0, 0, 0,
	0, 0, 0, 2679, 0, 0, 0, 0, 0, 0,
	0, 1044, 0, 1044, 0, 0, 0, 0, 1044, 1420,
	1421, 1422, 1423, 204, 0, 0, 0, 775, 0, 1403,
	0, 0, 1044, 1044, 0, 0, 795, 0, 0, 0,
	0, 204, 0, 0, 0, 0, 204, 204, 0, 204,
	0, 204, 0, 204, 0, 204, 0, 0, 0, 1425,
	1426, 1427, 0, 2821, 0, 0, 970, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	3068, 3069, 3070, 0, 0, 0, 0, 0, 0, 0,
	1123, 0, 1123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3078, 3079, 0, 0,
	1418, 1408, 1406, 1407, 1399, 1400, 1401, 1402, 1404, 1405,
	3086, 0, 0, 1044, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1123, 0, 1554,
	0, 982, 0, 0, 202, 1040, 0, 2821, 1141, 0,
	1040, 0, 0, 0, 0, 3120, 202, 1554, 0, 1123,
	0, 0, 0, 0, 573, 0, 0, 800, 0, 573,
	0, 1424, 0, 0, 3133, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2821, 0, 0, 2821, 0, 1419,
	0, 0, 0, 0, 0, 0, 0, 0, 1044, 1123,
	1141, 1141, 0, 0, 0, 0, 0, 0, 2821, 2821,
	0, 0, 0, 0, 1395, 1396, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1123, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1398, 0, 0, 0, 1141, 1141, 0, 0, 0, 1141,
	0, 0, 1141, 0, 3182, 0, 0, 3185, 0, 0,
	0, 1123, 0, 0, 0, 1044, 1397, 0, 0, 0,
	0, 1123, 0, 0, 1417, 0, 0, 0, 204, 975,
	0, 1044, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1141, 0, 0,
	0, 0, 0, 0, 812, 0, 1408, 1406, 1407, 1399,
	1400, 1401, 1402, 1404, 1405, 0, 0, 0, 198, 0,
	2342, 0, 573, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1420, 1421, 1422, 1423,
	0, 0, 0, 0, 0, 0, 1403, 0, 0, 0,
	800, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 202, 0,
	0, 0, 0, 0, 202, 0, 1425, 1426, 1427, 3283,
	3283, 3283, 0, 0, 0, 0, 0, 0, 0, 0,
	1044, 0, 0, 202, 0, 202, 0, 202, 3302, 0,
	0, 0, 0, 204, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 2821, 0, 2821, 0,
	0, 0, 0, 0, 0, 0, 204, 1418, 0, 1044,
	0, 3283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 1044, 0, 0, 204, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 87, 0, 87, 202, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 0, 204, 0, 0, 0,
	870, 1123, 0, 202, 0, 0, 0, 812, 573, 202,
	0, 202, 0, 202, 0, 202, 0, 202, 1424, 0,
	0, 0, 3283, 0, 0, 0, 0, 0, 204, 0,
	0, 204, 0, 204, 0, 204, 1419, 204, 204, 0,
	202, 1044, 1044, 1044, 0, 1044, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 795,
	87, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 87, 1395, 1396, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 204, 204, 0, 204, 0, 1040, 0, 0, 0,
	0, 1398, 0, 0, 1141, 566, 0, 0, 0, 0,
	566, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1397, 0, 0,
	0, 0, 0, 0, 0, 1417, 0, 0, 0, 1040,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1408, 1406, 1407, 1399, 1400, 1401, 1402,
	1404, 1405, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1395, 1396, 0, 0, 0,
	0, 2335, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 775, 1420, 1421, 1422,
	1423, 1398, 0, 0, 0, 0, 0, 1403, 0, 0,
	0, 0, 0, 0, 1458, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1397, 982, 0,
	0, 0, 1467, 0, 0, 1417, 1473, 1425, 1426, 1427,
	0, 0, 0, 0, 0, 982, 0, 0, 0, 0,
	202, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1141, 0, 0, 0, 0, 0, 0, 1040,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1418, 0,
	0, 0, 0, 0, 0, 0, 0, 1420, 1421, 1422,
	1423, 0, 0, 0, 1044, 2417, 2418, 1403, 2435, 2436,
	2437, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1044, 0, 1425, 1426, 1427,
	0, 0, 0, 0, 1044, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1034, 0, 0, 0, 1424,
	0, 0, 1152, 0, 0, 2432, 0, 87, 0, 0,
	1552, 0, 1555, 0, 0, 202, 0, 1419, 0, 0,
	204, 0, 0, 0, 0, 202, 0, 0, 1418, 0,
	0, 0, 0, 0, 1141, 0, 1141, 0, 202, 0,
	0, 1141, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 204, 0, 202, 0, 1141, 1141, 573, 204, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1234, 566,
	204, 1044, 0, 0, 0, 0, 0, 2423, 0, 1044,
	0, 0, 0, 202, 0, 0, 0, 1044, 202, 0,
	1258, 1258, 1258, 1152, 0, 0, 0, 0, 0, 1424,
	0, 0, 0, 0, 1289, 204, 0, 0, 1044, 204,
	0, 1044, 1044, 1044, 0, 0, 0, 1419, 204, 0,
	202, 0, 0, 202, 0, 202, 0, 202, 2438, 202,
	202, 0, 0, 0, 1408, 1406, 1407, 1399, 1400, 1401,
	1402, 1404, 1405, 0, 0, 0, 1040, 0, 0, 0,
	202, 0, 0, 0, 0, 0, 0, 0, 2433, 0,
	0, 0, 1044, 1044, 0, 0, 0, 0, 1351, 0,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 202, 202, 202, 0, 202, 0, 1044, 0,
	204, 1044, 204, 0, 0, 0, 0, 1041, 0, 0,
	1142, 0, 1041, 0, 0, 0, 0, 0, 204, 202,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1040, 0, 0, 1408, 1406, 1407, 1399, 1400, 1401,
	1402, 1404, 1405, 0, 0, 0, 0, 2434, 0, 0,
	0, 1044, 1142, 1142, 0, 0, 0, 0, 0, 0,
	0, 0, 1044, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1395, 1396, 0, 1428,
	1429, 1430, 1438, 1439, 1440, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1431, 1142, 1142, 1040, 0,
	0, 1142, 1398, 0, 1142, 1444, 0, 0, 0, 0,
	0, 0, 0, 0, 1040, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 795, 0, 0, 0, 1397, 0,
	0, 0, 0, 0, 0, 0, 1417, 0, 0, 0,
	0, 0, 0, 1414, 0, 0, 0, 0, 0, 1142,
	0, 0, 0, 0, 0, 0, 0, 2429, 2430, 2431,
	0, 0, 0, 0, 2428, 2426, 2427, 2419, 2420, 2421,
	2422, 2424, 2425, 0, 0, 1044, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 982, 0, 0, 1420, 1421,
	1422, 1423, 0, 982, 982, 0, 0, 982, 1403, 0,
	0, 0, 0, 0, 0, 0, 1561, 0, 0, 0,
	0, 0, 0, 1040, 0, 0, 775, 0, 1569, 775,
	775, 1554, 0, 0, 1435, 1445, 0, 0, 1425, 1426,
	1427, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1441,
	1442, 0, 1141, 0, 0, 0, 0, 1412, 1413, 0,
	204, 204, 202, 0, 0, 1040, 0, 0, 0, 0,
	0, 0, 1433, 0, 1946, 0, 1044, 204, 0, 1418,
	0, 1044, 0, 0, 0, 0, 0, 0, 795, 0,
	0, 0, 202, 202, 0, 0, 1443, 0, 0, 0,
	1554, 1467, 0, 0, 0, 1467, 0, 0, 0, 0,
	1432, 0, 202, 1044, 1044, 1044, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1044, 0, 1141, 1141, 1141, 202, 1141, 0,
	1424, 202, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 0, 0, 0, 0, 0, 0, 0, 1419, 970,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1555, 0, 0, 0,
	0, 0, 0, 1436, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 202, 0, 0, 0, 0, 0, 1041, 0,
	0, 0, 0, 0, 0, 0, 1142, 0, 0, 1749,
	0, 0, 202, 0, 202, 0, 1761, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 0, 0, 0, 0, 1234, 0, 1780, 1044, 1780,
	1044, 1041, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1434, 0, 0, 1409, 1410,
	1416, 1415, 1411, 1437, 0, 1408, 1406, 1407, 1399, 1400,
	1401, 1402, 1404, 1405, 58, 0, 0, 0, 2947, 0,
	0, 2946, 204, 0, 0, 59, 0, 0, 0, 0,
	0, 204, 204, 1044, 0, 1044, 0, 1044, 87, 63,
	0, 0, 0, 0, 0, 0, 0, 1820, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1044, 0, 0,
	1044, 0, 0, 0, 0, 1831, 0, 0, 87, 69,
	0, 1837, 0, 1838, 0, 1839, 0, 1840, 0, 1841,
	0, 0, 0, 87, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1044, 0, 75,
	0, 0, 1852, 0, 1142, 0, 0, 0, 85, 0,
	0, 1041, 76, 982, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1044, 0, 0, 0, 1040, 87, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 0, 0, 0, 0, 0, 0, 87, 1040, 1044,
	0, 0, 0, 0, 0, 0, 0, 1040, 0, 1044,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 0, 1044, 0, 0, 0,
	0, 0, 202, 202, 0, 0, 1142, 0, 1142, 0,
	0, 0, 0, 1142, 0, 0, 0, 0, 0, 202,
	0, 0, 204, 0, 1141, 0, 78, 1142, 1142, 0,
	0, 0, 1040, 0, 0, 0, 0, 0, 0, 0,
	1040, 982, 0, 0, 0, 0, 1946, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 144, 81, 0,
	82, 1141, 0, 0, 1141, 1141, 1141, 1467, 0, 0,
	0, 202, 0, 0, 0, 0, 0, 0, 0, 175,
	0, 0, 2102, 0, 0, 0, 0, 0, 0, 0,
	0, 662, 0, 0, 115, 0, 0, 0, 0, 0,
	204, 1044, 0, 0, 0, 0, 0, 0, 0, 0,
	1044, 1044, 0, 0, 0, 1141, 1141, 177, 1041, 0,
	2417, 2418, 0, 2435, 2436, 2437, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 1040, 0, 0, 1040, 0, 0, 204, 0, 1044,
	0, 0, 148, 0, 0, 0, 0, 0, 0, 204,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	169, 0, 0, 0, 0, 0, 0, 0, 170, 0,
	2432, 0, 0, 0, 0, 982, 970, 0, 0, 0,
	0, 0, 0, 0, 970, 970, 0, 0, 970, 1285,
	0, 0, 0, 1041, 1040, 1554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1040, 0, 0, 0, 0,
	0, 0, 1395, 1396, 0, 1428, 1429, 1430, 1438, 1439,
	1440, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1431, 0, 0, 202, 1152, 0, 0, 1398, 0,
	0, 1444, 2423, 202, 202, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1041, 0, 0, 0, 1397, 2228, 0, 0, 0, 2439,
	1761, 0, 1417, 0, 0, 0, 1041, 0, 87, 1414,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1395, 1396, 2438, 1428, 1429, 1430, 1438, 1439, 1440,
	0, 0, 2267, 0, 0, 1258, 0, 1258, 87, 1258,
	87, 1152, 1152, 0, 0, 0, 0, 1398, 1040, 0,
	1444, 0, 0, 2433, 0, 0, 0, 0, 0, 0,
	0, 0, 2303, 0, 1420, 1421, 1422, 1423, 0, 0,
	0, 0, 0, 1397, 1403, 0, 0, 0, 0, 0,
	0, 1417, 0, 0, 0, 0, 0, 0, 1414, 0,
	0, 0, 0, 795, 2317, 1152, 2319, 0, 0, 0,
	1435, 1445, 0, 0, 1425, 1426, 1427, 0, 0, 0,
	0, 0, 0, 0, 0, 1041, 0, 0, 87, 0,
	202, 2333, 0, 0, 0, 1441, 1442, 0, 0, 0,
	0, 0, 0, 1412, 1413, 0, 0, 0, 0, 0,
	0, 0, 2434, 1420, 1421, 1422, 1423, 0, 1433, 0,
	0, 0, 0, 1403, 1142, 1418, 0, 0, 0, 1040,
	0, 0, 0, 202, 1141, 0, 0, 1041, 0, 0,
	0, 0, 1443, 0, 0, 0, 0, 0, 0, 1435,
	1445, 0, 0, 1425, 1426, 1427, 1432, 0, 0, 0,
	0, 0, 0, 0, 202, 0, 1141, 1141, 1141, 0,
	0, 0, 0, 0, 1441, 1442, 0, 0, 0, 0,
	0, 0, 1412, 1413, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1040, 1424, 1433, 0, 0,
	0, 0, 0, 0, 1418, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1419, 0, 1142, 1142, 1142, 0,
	1142, 1443, 2429, 2430, 2431, 0, 0, 0, 0, 2428,
	2426, 2427, 2419, 2420, 2421, 2422, 2424, 2425, 0, 1436,
	0, 0, 202, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 1424, 0, 0, 0, 0,
	0, 0, 0, 0, 970, 0, 0, 0, 0, 202,
	0, 0, 0, 1419, 0, 0, 0, 0, 0, 0,
	0, 202, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1040, 0, 1040, 87, 0, 0, 0, 1436, 0,
	0, 1434, 0, 0, 1409, 1410, 1416, 1415, 1411, 1437,
	0, 1408, 1406, 1407, 1399, 1400, 1401, 1402, 1404, 1405,
	0, 0, 0, 0, 2405, 0, 0, 2406, 0, 0,
	0, 0, 0, 0, 2525, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1141, 0, 1040, 0,
	1141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2562, 2228, 0, 0, 0, 0,
	1040, 0, 0, 1141, 0, 0, 0, 0, 0, 0,
	1434, 0, 0, 1409, 1410, 1416, 1415, 1411, 1437, 0,
	1408, 1406, 1407, 1399, 1400, 1401, 1402, 1404, 1405, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1040, 0, 0, 0, 0, 0, 0, 0, 0, 2598,
	0, 0, 970, 2602, 0, 0, 0, 0, 0, 0,
	0, 0, 2609, 0, 0, 0, 1040, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1395,
	1396, 0, 1428, 1429, 1430, 1438, 1439, 1440, 0, 1041,
	0, 0, 0, 0, 0, 0, 0, 0, 1431, 0,
	0, 0, 1040, 0, 0, 1398, 0, 0, 1444, 0,
	0, 0, 1040, 0, 2654, 0, 0, 0, 0, 0,
	1041, 0, 0, 0, 0, 0, 0, 0, 0, 1041,
	0, 1397, 0, 0, 2669, 0, 1152, 0, 0, 1417,
	0, 0, 0, 0, 0, 0, 1414, 0, 0, 0,
	0, 0, 2675, 0, 0, 1395, 1396, 0, 1428, 1429,
	1430, 1438, 1439, 1440, 0, 0, 0, 0, 0, 1141,
	0, 0, 0, 0, 1431, 0, 0, 0, 0, 0,
	0, 1398, 0, 0, 1444, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 970, 0, 0, 0,
	0, 1420, 1421, 1422, 1423, 0, 0, 1397, 0, 0,
	0, 1403, 0, 0, 0, 1417, 1142, 0, 0, 0,
	0, 0, 1414, 0, 1041, 0, 0, 0, 0, 0,
	0, 0, 1041, 0, 0, 0, 0, 1435, 1445, 0,
	0, 1425, 1426, 1427, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1142, 0, 0, 1142, 1142, 1142, 0,
	0, 0, 1441, 1442, 0, 0, 0, 0, 0, 0,
	1412, 1413, 0, 0, 1141, 0, 87, 1420, 1421, 1422,
	1423, 87, 0, 1141, 1141, 1433, 0, 1403, 0, 0,
	0, 0, 1418, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 1142, 1142, 1443,
	0, 0, 0, 1435, 1445, 0, 0, 1425, 1426, 1427,
	0, 0, 1040, 1432, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1041, 0, 0, 1041, 0, 1441, 1442,
	0, 0, 0, 0, 0, 0, 1412, 1413, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1433, 0, 1424, 0, 0, 0, 0, 1418, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1419, 0, 0, 0, 1443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1041, 0, 0, 1432,
	0, 0, 0, 0, 0, 0, 1436, 1041, 0, 0,
	0, 0, 0, 0, 2860, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2870, 0, 0, 0, 0, 0, 0, 0, 1424,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1419, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1946, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1436, 2907, 0, 0, 0, 0, 1434, 0,
	0, 1409, 1410, 1416, 1415, 1411, 1437, 0, 1408, 1406,
	1407, 1399, 1400, 1401, 1402, 1404, 1405, 0, 0, 0,
	0, 1978, 0, 0, 1979, 0, 0, 0, 0, 0,
	1041, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1434, 0, 0, 1409, 1410, 1416,
	1415, 1411, 1437, 0, 1408, 1406, 1407, 1399, 1400, 1401,
	1402, 1404, 1405, 0, 0, 0, 0, 0, 0, 0,
	2945, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1395, 1396, 0, 1428, 1429,
	1430, 1438, 1439, 1440, 0, 0, 87, 0, 0, 0,
	0, 1041, 0, 0, 1431, 0, 1142, 0, 0, 0,
	0, 1398, 0, 0, 1444, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3011, 0, 0, 0,
	0, 0, 0, 0, 0, 2228, 0, 1397, 1142, 1142,
	1142, 0, 0, 0, 0, 1417, 0, 0, 0, 0,
	0, 0, 1414, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1041, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1395, 1396, 0, 1428,
	1429, 1430, 1438, 1439, 1440, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1420, 1421, 1422,
	1423, 0, 1398, 0, 0, 1444, 0, 1403, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1397, 0,
	0, 0, 0, 1435, 1445, 0, 1417, 1425, 1426, 1427,
	0, 0, 0, 1414, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 649, 0, 1441, 1442,
	0, 0, 0, 0, 0, 0, 1412, 1413, 0, 0,
	0, 0, 3105, 1041, 0, 1041, 0, 0, 0, 631,
	0, 1433, 0, 0, 0, 0, 0, 0, 1418, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1420, 1421,
	1422, 1423, 0, 0, 0, 1443, 0, 0, 1403, 632,
	0, 0, 0, 0, 0, 3142, 0, 0, 633, 1432,
	0, 0, 0, 0, 0, 0, 0, 0, 1142, 0,
	1041, 0, 1142, 634, 1435, 1445, 0, 0, 1425, 1426,
	1427, 0, 0, 0, 0, 0, 3165, 0, 0, 654,
	0, 0, 1041, 0, 0, 1142, 0, 0, 0, 1424,
	0, 0, 0, 0, 635, 0, 0, 1412, 1413, 0,
	0, 0, 0, 0, 0, 0, 0, 1419, 0, 0,
	0, 636, 1433, 0, 0, 0, 0, 0, 0, 1418,
	0, 0, 1041, 0, 0, 0, 0, 0, 0, 0,
	0, 637, 1436, 0, 638, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1041, 0,
	0, 0, 0, 0, 3211, 0, 0, 0, 0, 0,
	653, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1041, 0, 0, 0, 0, 0,
	1424, 0, 0, 0, 1041, 0, 0, 0, 0, 0,
	0, 3245, 0, 0, 0, 0, 0, 0, 1419, 0,
	0, 0, 0, 3260, 1434, 0, 0, 1409, 1410, 1416,
	1415, 1411, 1437, 0, 1408, 1406, 1407, 1399, 1400, 1401,
	1402, 1404, 1405, 1436, 0, 0, 0, 0, 0, 0,
	2693, 0, 0, 0, 0, 0, 0, 0, 640, 0,
	0, 1142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 657, 641, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 656, 0, 0, 0, 0, 0, 0, 642, 0,
	0, 643, 0, 0, 0, 0, 0, 651, 0, 0,
	0, 0, 0, 0, 644, 1434, 0, 0, 1409, 1410,
	1416, 1415, 1411, 1437, 0, 1408, 1406, 1407, 1399, 1400,
	1401, 1402, 1404, 1405, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 645, 652, 0, 0, 0, 0, 0,
	0, 0, 0, 646, 0, 0, 1142, 0, 0, 0,
	0, 0, 0, 0, 648, 1142, 1142, 0, 0, 647,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	655, 0, 0, 0, 0, 0, 0, 0, 1038, 0,
	0, 650, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1041, 212, 213, 214, 215, 216,
	1045, 217, 1046, 1047, 1048, 1049, 451, 1050, 1051, 1052,
	1053, 218, 219, 220, 452, 453, 221, 454, 222, 223,
	455, 1054, 224, 225, 226, 227, 228, 229, 1055, 1056,
	230, 456, 457, 458, 1057, 231, 459, 1058, 1043, 1059,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	1060, 241, 0, 242, 243, 244, 1061, 921, 245, 246,
	1062, 1063, 1065, 1064, 1066, 1067, 1068, 247, 248, 249,
	250, 251, 252, 460, 461, 1069, 253, 1070, 255, 254,
	1071, 256, 1072, 1073, 257, 258, 259, 1074, 260, 1075,
	261, 262, 1076, 462, 263, 264, 266, 269, 265, 270,
	271, 272, 463, 464, 1077, 209, 1078, 0, 0, 0,
	0, 273, 274, 275, 465, 276, 277, 0, 278, 1079,
	279, 1080, 1081, 922, 280, 281, 1082, 282, 466, 1083,
	467, 283, 1084, 284, 285, 286, 287, 288, 289, 290,
	468, 469, 470, 924, 1085, 474, 292, 0, 0, 0,
	210, 291, 293, 300, 1086, 923, 294, 471, 296, 295,
	297, 298, 299, 472, 1087, 473, 1088, 301, 925, 926,
	302, 303, 304, 927, 305, 306, 0, 0, 307, 308,
	309, 310, 1089, 312, 311, 1090, 313, 475, 928, 314,
	315, 929, 1091, 316, 317, 1092, 1093, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 930, 328,
	329, 331, 330, 1094, 211, 931, 1095, 476, 477, 332,
	333, 1096, 334, 335, 336, 1097, 1098, 338, 339, 1099,
	1100, 340, 478, 932, 341, 933, 479, 342, 337, 343,
	344, 345, 346, 347, 348, 1101, 349, 480, 350, 481,
	351, 1102, 352, 0, 353, 354, 355, 356, 357, 358,
	482, 359, 360, 1103, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 1104, 374,
	934, 375, 376, 377, 378, 483, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 1105, 397, 398, 391,
	393, 394, 395, 392, 396, 399, 400, 1106, 401, 381,
	382, 402, 935, 403, 484, 404, 405, 1107, 415, 406,
	407, 408, 383, 409, 413, 414, 410, 411, 412, 485,
	1108, 417, 418, 416, 1109, 419, 420, 421, 422, 423,
	267, 424, 268, 425, 1110, 486, 487, 488, 489, 1111,
	1112, 426, 427, 490, 428, 491, 1113, 429, 430, 431,
	0, 432, 433, 1114, 1115, 434, 435, 436, 437, 439,
	1116, 440, 1117, 438, 441, 442, 443, 492, 493, 494,
	1118, 445, 444, 495, 1119, 1120, 1121, 1122, 446, 447,
	496, 448, 449, 450, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1038, 0, 0, 0,
	0, 0, 0, 0, 2089, 0, 0, 0, 0, 0,
	0, 0, 2090, 212, 213, 214, 215, 216, 1045, 217,
	1046, 1047, 1048, 1049, 451, 1050, 1051, 1052, 1053, 218,
	219, 220, 452, 453, 221, 454, 222, 223, 455, 1054,
	224, 225, 226, 227, 228, 229, 1055, 1056, 230, 456,
	457, 458, 1057, 231, 459, 1058, 1043, 1059, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 1060, 241,
	0, 242, 243, 244, 1061, 921, 245, 246, 1062, 1063,
	1065, 1064, 1066, 1067, 1068, 247, 248, 249, 250, 251,
	252, 460, 461, 1069, 253, 1070, 255, 254, 1071, 256,
	1072, 1073, 257, 258, 259, 1074, 260, 1075, 261, 262,
	1076, 462, 263, 264, 266, 269, 265, 270, 271, 272,
	463, 464, 1077, 209, 1078, 0, 0, 0, 0, 273,
	274, 275, 465, 276, 277, 0, 278, 1079, 279, 1080,
	1081, 922, 280, 281, 1082, 282, 466, 1083, 467, 283,
	1084, 284, 285, 286, 287, 288, 289, 290, 468, 469,
	470, 924, 1085, 474, 292, 0, 0, 0, 210, 291,
	293, 300, 1086, 923, 294, 471, 296, 295, 297, 298,
	299, 472, 1087, 473, 1088, 301, 925, 926, 302, 303,
	304, 927, 305, 306, 0, 0, 307, 308, 309, 310,
	1089, 312, 311, 1090, 313, 475, 928, 314, 315, 929,
	1091, 316, 317, 1092, 1093, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 930, 328, 329, 331,
	330, 1094, 211, 931, 1095, 476, 477, 332, 333, 1096,
	334, 335, 336, 1097, 1098, 338, 339, 1099, 1100, 340,
	478, 932, 341, 933, 479, 342, 337, 343, 344, 345,
	346, 347, 348, 1101, 349, 480, 350, 481, 351, 1102,
	352, 0, 353, 354, 355, 356, 357, 358, 482, 359,
	360, 1103, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 1104, 374, 934, 375,
	376, 377, 378, 483, 379, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 1105, 397, 398, 391, 393, 394,
	395, 392, 396, 399, 400, 1106, 401, 381, 382, 402,
	935, 403, 484, 404, 405, 1107, 415, 406, 407, 408,
	383, 409, 413, 414, 410, 411, 412, 485, 1108, 417,
	418, 416, 1109, 419, 420, 421, 422, 423, 267, 424,
	268, 425, 1110, 486, 487, 488, 489, 1111, 1112, 426,
	427, 490, 428, 491, 1113, 429, 430, 431, 0, 432,
	433, 1114, 1115, 434, 435, 436, 437, 439, 1116, 440,
	1117, 438, 441, 442, 443, 492, 493, 494, 1118, 445,
	444, 495, 1119, 1120, 1121, 1122, 446, 447, 496, 448,
	449, 450, 0, 0, 0, 0, 1038, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2969, 212, 213, 214, 215, 216, 1045, 217,
	1046, 1047, 1048, 1049, 451, 1050, 1051, 1052, 1053, 218,
	219, 220, 452, 453, 221, 454, 222, 223, 455, 1054,
	224, 225, 226, 227, 228, 229, 1055, 1056, 230, 456,
	457, 458, 1057, 231, 459, 1058, 1043, 1059, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 1060, 241,
	0, 242, 243, 244, 1061, 921, 245, 246, 1062, 1063,
	1065, 1064, 1066, 1067, 1068, 247, 248, 249, 250, 251,
	252, 460, 461, 1069, 253, 1070, 255, 254, 1071, 256,
	1072, 1073, 257, 258, 259, 1074, 260, 1075, 261, 262,
	1076, 462, 263, 264, 266, 269, 265, 270, 271, 272,
	463, 464, 1077, 209, 1078, 0, 0, 0, 0, 273,
	274, 275, 465, 276, 277, 0, 278, 1079, 279, 1080,
	1081, 922, 280, 281, 1082, 282, 466, 1083, 467, 283,
	1084, 284, 285, 286, 287, 288, 289, 290, 468, 469,
	470, 924, 1085, 474, 292, 0, 0, 0, 210, 291,
	293, 300, 1086, 923, 294, 471, 296, 295, 297, 298,
	299, 472, 1087, 473, 1088, 301, 925, 926, 302, 303,
	304, 927, 305, 306, 0, 0, 307, 308, 309, 310,
	1089, 312, 311, 1090, 313, 475, 928, 314, 315, 929,
	1091, 316, 317, 1092, 1093, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 930, 328, 329, 331,
	330, 1094, 211, 931, 1095, 476, 477, 332, 333, 1096,
	334, 335, 336, 1097, 1098, 338, 339, 1099, 1100, 340,
	478, 932, 341, 933, 479, 342, 337, 343, 344, 345,
	346, 347, 348, 1101, 349, 480, 350, 481, 351, 1102,
	352, 0, 353, 354, 355, 356, 357, 358, 482, 359,
	360, 1103, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 1104, 374, 934, 375,
	376, 377, 378, 483, 379, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 1105, 397, 398, 391, 393, 394,
	395, 392, 396, 399, 400, 1106, 401, 381, 382, 402,
	935, 403, 484, 404, 405, 1107, 415, 406, 407, 408,
	383, 409, 413, 414, 410, 411, 412, 485, 1108, 417,
	418, 416, 1109, 419, 420, 421, 422, 423, 267, 424,
	268, 425, 1110, 486, 487, 488, 489, 1111, 1112, 426,
	427, 490, 428, 491, 1113, 429, 430, 431, 0, 432,
	433, 1114, 1115, 434, 435, 436, 437, 439, 1116, 440,
	1117, 438, 441, 442, 443, 492, 493, 494, 1118, 445,
	444, 495, 1119, 1120, 1121, 1122, 446, 447, 496, 448,
	449, 450, 1038, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3074, 0, 212,
	213, 214, 215, 216, 1045, 217, 1046, 1047, 1048, 1049,
	451, 1050, 1051, 1052, 1053, 218, 219, 220, 452, 453,
	221, 454, 222, 223, 455, 1054, 224, 225, 226, 227,
	228, 229, 1055, 1056, 230, 456, 457, 458, 1057, 231,
	459, 1058, 1043, 1059, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 1060, 241, 0, 242, 243, 244,
	1061, 921, 245, 246, 1062, 1063, 1065, 1064, 1066, 1067,
	1068, 247, 248, 249, 250, 251, 252, 460, 461, 1069,
	253, 1070, 255, 254, 1071, 256, 1072, 1073, 257, 258,
	259, 1074, 260, 1075, 261, 262, 1076, 462, 263, 264,
	266, 269, 265, 270, 271, 272, 463, 464, 1077, 209,
	1078, 0, 0, 0, 0, 273, 274, 275, 465, 276,
	277, 0, 278, 1079, 279, 1080, 1081, 922, 280, 281,
	1082, 282, 466, 1083, 467, 283, 1084, 284, 285, 286,
	287, 288, 289, 290, 468, 469, 470, 924, 1085, 474,
	292, 0, 0, 0, 210, 291, 293, 300, 1086, 923,
	294, 471, 296, 295, 297, 298, 299, 472, 1087, 473,
	1088, 301, 925, 926, 302, 303, 304, 927, 305, 306,
	0, 0, 307, 308, 309, 310, 1089, 312, 311, 1090,
	313, 475, 928, 314, 315, 929, 1091, 316, 317, 1092,
	1093, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 930, 328, 329, 331, 330, 1094, 211, 931,
	1095, 476, 477, 332, 333, 1096, 334, 335, 336, 1097,
	1098, 338, 339, 1099, 1100, 340, 478, 932, 341, 933,
	479, 342, 337, 343, 344, 345, 346, 347, 348, 1101,
	349, 480, 350, 481, 351, 1102, 352, 0, 353, 354,
	355, 356, 357, 358, 482, 359, 360, 1103, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 1104, 374, 934, 375, 376, 377, 378, 483,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	1105, 397, 398, 391, 393, 394, 395, 392, 396, 399,
	400, 1106, 401, 381, 382, 402, 935, 403, 484, 404,
	405, 1107, 415, 406, 407, 408, 383, 409, 413, 414,
	410, 411, 412, 485, 1108, 417, 418, 416, 1109, 419,
	420, 421, 422, 423, 267, 424, 268, 425, 1110, 486,
	487, 488, 489, 1111, 1112, 426, 427, 490, 428, 491,
	1113, 429, 430, 431, 0, 432, 433, 1114, 1115, 434,
	435, 436, 437, 439, 1116, 440, 1117, 438, 441, 442,
	443, 492, 493, 494, 1118, 445, 444, 495, 1119, 1120,
	1121, 1122, 446, 447, 496, 448, 449, 450, 1038, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2718, 0, 212, 213, 214, 215, 216,
	1045, 217, 1046, 1047, 1048, 1049, 451, 1050, 1051, 1052,
	1053, 218, 219, 220, 452, 453, 221, 454, 222, 223,
	455, 1054, 224, 225, 226, 227, 228, 229, 1055, 1056,
	230, 456, 457, 458, 1057, 231, 459, 1058, 1043, 1059,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	1060, 241, 0, 242, 243, 244, 1061, 921, 245, 246,
	1062, 1063, 1065, 1064, 1066, 1067, 1068, 247, 248, 249,
	250, 251, 252, 460, 461, 1069, 253, 1070, 255, 254,
	1071, 256, 1072, 1073, 257, 258, 259, 1074, 260, 1075,
	261, 262, 1076, 462, 263, 264, 266, 269, 265, 270,
	271, 272, 463, 464, 1077, 209, 1078, 0, 0, 0,
	0, 273, 274, 275, 465, 276, 277, 0, 278, 1079,
	279, 1080, 1081, 922, 280, 281, 1082, 282, 466, 1083,
	467, 283, 1084, 284, 285, 286, 287, 288, 289, 290,
	468, 469, 470, 924, 1085, 474, 292, 0, 0, 0,
	210, 291, 293, 300, 1086, 923, 294, 471, 296, 295,
	297, 298, 299, 472, 1087, 473, 1088, 301, 925, 926,
	302, 303, 304, 927, 305, 306, 0, 0, 307, 308,
	309, 310, 1089, 312, 311, 1090, 313, 475, 928, 314,
	315, 929, 1091, 316, 317, 1092, 1093, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 930, 328,
	329, 331, 330, 1094, 211, 931, 1095, 476, 477, 332,
	333, 1096, 334, 335, 336, 1097, 1098, 338, 339, 1099,
	1100, 340, 478, 932, 341, 933, 479, 342, 337, 343,
	344, 345, 346, 347, 348, 1101, 349, 480, 350, 481,
	351, 1102, 352, 0, 353, 354, 355, 356, 357, 358,
	482, 359, 360, 1103, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 1104, 374,
	934, 375, 376, 377, 378, 483, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 1105, 397, 398, 391,
	393, 394, 395, 392, 396, 399, 400, 1106, 401, 381,
	382, 402, 935, 403, 484, 404, 405, 1107, 415, 406,
	407, 408, 383, 409, 413, 414, 410, 411, 412, 485,
	1108, 417, 418, 416, 1109, 419, 420, 421, 422, 423,
	267, 424, 268, 425, 1110, 486, 487, 488, 489, 1111,
	1112, 426, 427, 490, 428, 491, 1113, 429, 430, 431,
	0, 432, 433, 1114, 1115, 434, 435, 436, 437, 439,
	1116, 440, 1117, 438, 441, 442, 443, 492, 493, 494,
	1118, 445, 444, 495, 1119, 1120, 1121, 1122, 446, 447,
	496, 448, 449, 450, 1038, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2710,
	0, 212, 213, 214, 215, 216, 1045, 217, 1046, 1047,
	1048, 1049, 451, 1050, 1051, 1052, 1053, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 1054, 224, 225,
	226, 227, 228, 229, 1055, 1056, 230, 456, 457, 458,
	1057, 231, 459, 1058, 1043, 1059, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 1060, 241, 0, 242,
	243, 244, 1061, 921, 245, 246, 1062, 1063, 1065, 1064,
	1066, 1067, 1068, 247, 248, 249, 250, 251, 252, 460,
	461, 1069, 253, 1070, 255, 254, 1071, 256, 1072, 1073,
	257, 258, 259, 1074, 260, 1075, 261, 262, 1076, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 463, 464,
	1077, 209, 1078, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 1079, 279, 1080, 1081, 922,
	280, 281, 1082, 282, 466, 1083, 467, 283, 1084, 284,
	285, 286, 287, 288, 289, 290, 468, 469, 470, 924,
	1085, 474, 292, 0, 0, 0, 210, 291, 293, 300,
	1086, 923, 294, 471, 296, 295, 297, 298, 299, 472,
	1087, 473, 1088, 301, 925, 926, 302, 303, 304, 927,
	305, 306, 0, 0, 307, 308, 309, 310, 1089, 312,
	311, 1090, 313, 475, 928, 314, 315, 929, 1091, 316,
	317, 1092, 1093, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 930, 328, 329, 331, 330, 1094,
	211, 931, 1095, 476, 477, 332, 333, 1096, 334, 335,
	336, 1097, 1098, 338, 339, 1099, 1100, 340, 478, 932,
	341, 933, 479, 342, 337, 343, 344, 345, 346, 347,
	348, 1101, 349, 480, 350, 481, 351, 1102, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 1103,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 1104, 374, 934, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 1105, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 1106, 401, 381, 382, 402, 935, 403,
	484, 404, 405, 1107, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 485, 1108, 417, 418, 416,
	1109, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	1110, 486, 487, 488, 489, 1111, 1112, 426, 427, 490,
	428, 491, 1113, 429, 430, 431, 0, 432, 433, 1114,
	1115, 434, 435, 436, 437, 439, 1116, 440, 1117, 438,
	441, 442, 443, 492, 493, 494, 1118, 445, 444, 495,
	1119, 1120, 1121, 1122, 446, 447, 496, 448, 449, 450,
	1038, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2584, 0, 212, 213, 214,
	215, 216, 1045, 217, 1046, 1047, 1048, 1049, 451, 1050,
	1051, 1052, 1053, 218, 219, 220, 452, 453, 221, 454,
	222, 223, 455, 1054, 224, 225, 226, 227, 228, 229,
	1055, 1056, 230, 456, 457, 458, 1057, 231, 459, 1058,
	1043, 1059, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 1060, 241, 0, 242, 243, 244, 1061, 921,
	245, 246, 1062, 1063, 1065, 1064, 1066, 1067, 1068, 247,
	248, 249, 250, 251, 252, 460, 461, 1069, 253, 1070,
	255, 254, 1071, 256, 1072, 1073, 257, 258, 259, 1074,
	260, 1075, 261, 262, 1076, 462, 263, 264, 266, 269,
	265, 270, 271, 272, 463, 464, 1077, 209, 1078, 0,
	0, 0, 0, 273, 274, 275, 465, 276, 277, 0,
	278, 1079, 279, 1080, 1081, 922, 280, 281, 1082, 282,
	466, 1083, 467, 283, 1084, 284, 285, 286, 287, 288,
	289, 290, 468, 469, 470, 924, 1085, 474, 292, 0,
	0, 0, 210, 291, 293, 300, 1086, 923, 294, 471,
	296, 295, 297, 298, 299, 472, 1087, 473, 1088, 301,
	925, 926, 302, 303, 304, 927, 305, 306, 0, 0,
	307, 308, 309, 310, 1089, 312, 311, 1090, 313, 475,
	928, 314, 315, 929, 1091, 316, 317, 1092, 1093, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	930, 328, 329, 331, 330, 1094, 211, 931, 1095, 476,
	477, 332, 333, 1096, 334, 335, 336, 1097, 1098, 338,
	339, 1099, 1100, 340, 478, 932, 341, 933, 479, 342,
	337, 343, 344, 345, 346, 347, 348, 1101, 349, 480,
	350, 481, 351, 1102, 352, 0, 353, 354, 355, 356,
	357, 358, 482, 359, 360, 1103, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	1104, 374, 934, 375, 376, 377, 378, 483, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 1105, 397,
	398, 391, 393, 394, 395, 392, 396, 399, 400, 1106,
	401, 381, 382, 402, 935, 403, 484, 404, 405, 1107,
	415, 406, 407, 408, 383, 409, 413, 414, 410, 411,
	412, 485, 1108, 417, 418, 416, 1109, 419, 420, 421,
	422, 423, 267, 424, 268, 425, 1110, 486, 487, 488,
	489, 1111, 1112, 426, 427, 490, 428, 491, 1113, 429,
	430, 431, 0, 432, 433, 1114, 1115, 434, 435, 436,
	437, 439, 1116, 440, 1117, 438, 441, 442, 443, 492,
	493, 494, 1118, 445, 444, 495, 1119, 1120, 1121, 1122,
	446, 447, 496, 448, 449, 450, 1038, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1991, 0, 212, 213, 214, 215, 216, 1045, 217,
	1046, 1047, 1048, 1049, 451, 1050, 1051, 1052, 1053, 218,
	219, 220, 452, 453, 221, 454, 222, 223, 455, 1054,
	224, 225, 226, 227, 228, 229, 1055, 1056, 230, 456,
	457, 458, 1057, 231, 459, 1058, 1043, 1059, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 1060, 241,
	0, 242, 243, 244, 1061, 921, 245, 246, 1062, 1063,
	1065, 1064, 1066, 1067, 1068, 247, 248, 249, 250, 251,
	252, 460, 461, 1069, 253, 1070, 255, 254, 1071, 256,
	1072, 1073, 257, 258, 259, 1074, 260, 1075, 261, 262,
	1076, 462, 263, 264, 266, 269, 265, 270, 271, 272,
	463, 464, 1077, 209, 1078, 0, 0, 0, 0, 273,
	274, 275, 465, 276, 277, 0, 278, 1079, 279, 1080,
	1081, 922, 280, 281, 1082, 282, 466, 1083, 467, 283,
	1084, 284, 285, 286, 287, 288, 289, 290, 468, 469,
	470, 924, 1085, 474, 292, 0, 0, 0, 210, 291,
	293, 300, 1086, 923, 294, 471, 296, 295, 297, 298,
	299, 472, 1087, 473, 1088, 301, 925, 926, 302, 303,
	304, 927, 305, 306, 0, 0, 307, 308, 309, 310,
	1089, 312, 311, 1090, 313, 475, 928, 314, 315, 929,
	1091, 316, 317, 1092, 1093, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 930, 328, 329, 331,
	330, 1094, 211, 931, 1095, 476, 477, 332, 333, 1096,
	334, 335, 336, 1097, 1098, 338, 339, 1099, 1100, 340,
	478, 932, 341, 933, 479, 342, 337, 343, 344, 345,
	346, 347, 348, 1101, 349, 480, 350, 481, 351, 1102,
	352, 0, 353, 354, 355, 356, 357, 358, 482, 359,
	360, 1103, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 1104, 374, 934, 375,
	376, 377, 378, 483, 379, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 1105, 397, 398, 391, 393, 394,
	395, 392, 396, 399, 400, 1106, 401, 381, 382, 402,
	935, 403, 484, 404, 405, 1107, 415, 406, 407, 408,
	383, 409, 413, 414, 410, 411, 412, 485, 1108, 417,
	418, 416, 1109, 419, 420, 421, 422, 423, 267, 424,
	268, 425, 1110, 486, 487, 488, 489, 1111, 1112, 426,
	427, 490, 428, 491, 1113, 429, 430, 431, 0, 432,
	433, 1114, 1115, 434, 435, 436, 437, 439, 1116, 440,
	1117, 438, 441, 442, 443, 492, 493, 494, 1118, 445,
	444, 495, 1119, 1120, 1121, 1122, 446, 447, 496, 448,
	449, 450, 1146, 0, 1038, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1732, 0, 0,
	0, 212, 213, 214, 215, 216, 1045, 217, 1046, 1047,
	1048, 1049, 451, 1050, 1051, 1052, 1053, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 1054, 224, 225,
	226, 227, 228, 229, 1055, 1056, 230, 456, 457, 458,
	1057, 231, 459, 1058, 1043, 1059, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 1060, 241, 0, 242,
	243, 244, 1061, 921, 245, 246, 1062, 1063, 1065, 1064,
	1066, 1067, 1068, 247, 248, 249, 250, 251, 252, 460,
	461, 1069, 253, 1070, 255, 254, 1071, 256, 1072, 1073,
	257, 258, 259, 1074, 260, 1075, 261, 262, 1076, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 463, 464,
	1077, 209, 1078, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 1079, 279, 1080, 1081, 922,
	280, 281, 1082, 282, 466, 1083, 467, 283, 1084, 284,
	285, 286, 287, 288, 289, 290, 468, 469, 470, 924,
	1085, 474, 292, 0, 0, 0, 210, 291, 293, 300,
	1086, 923, 294, 471, 296, 295, 297, 298, 299, 472,
	1087, 473, 1088, 301, 925, 926, 302, 303, 304, 927,
	305, 306, 0, 0, 307, 308, 309, 310, 1089, 312,
	311, 1090, 313, 475, 928, 314, 315, 929, 1091, 316,
	317, 1092, 1093, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 930, 328, 329, 331, 330, 1094,
	211, 931, 1095, 476, 477, 332, 333, 1096, 334, 335,
	336, 1097, 1098, 338, 339, 1099, 1100, 340, 478, 932,
	341, 933, 479, 342, 337, 343, 344, 345, 346, 347,
	348, 1101, 349, 480, 350, 481, 351, 1102, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 1103,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 1104, 374, 934, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 1105, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 1106, 401, 381, 382, 402, 935, 403,
	484, 404, 405, 1107, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 485, 1108, 417, 418, 416,
	1109, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	1110, 486, 487, 488, 489, 1111, 1112, 426, 427, 490,
	428, 491, 1113, 429, 430, 431, 0, 432, 433, 1114,
	1115, 434, 435, 436, 437, 439, 1116, 440, 1117, 438,
	441, 442, 443, 492, 493, 494, 1118, 445, 444, 495,
	1119, 1120, 1121, 1122, 446, 447, 496, 448, 449, 450,
	1035, 0, 1038, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 1045, 217, 1046, 1047, 1048, 1049,
	451, 1050, 1051, 1052, 1053, 218, 219, 220, 452, 453,
	221, 454, 222, 223, 455, 1054, 224, 225, 226, 227,
	228, 229, 1055, 1056, 230, 456, 457, 458, 1057, 231,
	459, 1058, 1043, 1059, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 1060, 241, 0, 242, 243, 244,
	1061, 921, 245, 246, 1062, 1063, 1065, 1064, 1066, 1067,
	1068, 247, 248, 249, 250, 251, 252, 460, 461, 1069,
	253, 1070, 255, 254, 1071, 256, 1072, 1073, 257, 258,
	259, 1074, 260, 1075, 261, 262, 1076, 462, 263, 264,
	266, 269, 265, 270, 271, 272, 463, 464, 1077, 209,
	1078, 0, 0, 0, 0, 273, 274, 275, 465, 276,
	277, 0, 278, 1079, 279, 1080, 1081, 922, 280, 281,
	1082, 282, 466, 1083, 467, 283, 1084, 284, 285, 286,
	287, 288, 289, 290, 468, 469, 470, 924, 1085, 474,
	292, 0, 0, 0, 210, 291, 293, 300, 1086, 923,
	294, 471, 296, 295, 297, 298, 299, 472, 1087, 473,
	1088, 301, 925, 926, 302, 303, 304, 927, 305, 306,
	0, 0, 307, 308, 309, 310, 1089, 312, 311, 1090,
	313, 475, 928, 314, 315, 929, 1091, 316, 317, 1092,
	1093, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 930, 328, 329, 331, 330, 1094, 211, 931,
	1095, 476, 477, 332, 333, 1096, 334, 335, 336, 1097,
	1098, 338, 339, 1099, 1100, 340, 478, 932, 341, 933,
	479, 342, 337, 343, 344, 345, 346, 347, 348, 1101,
	349, 480, 350, 481, 351, 1102, 352, 0, 353, 354,
	355, 356, 357, 358, 482, 359, 360, 1103, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 1104, 374, 934, 375, 376, 377, 378, 483,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	1105, 397, 398, 391, 393, 394, 395, 392, 396, 399,
	400, 1106, 401, 381, 382, 402, 935, 403, 484, 404,
	405, 1107, 415, 406, 407, 408, 383, 409, 413, 414,
	410, 411, 412, 485, 1108, 417, 418, 416, 1109, 419,
	420, 421, 422, 423, 267, 424, 268, 425, 1110, 486,
	487, 488, 489, 1111, 1112, 426, 427, 490, 428, 491,
	1113, 429, 430, 431, 0, 432, 433, 1114, 1115, 434,
	435, 436, 437, 439, 1116, 440, 1117, 438, 441, 442,
	443, 492, 493, 494, 1118, 445, 444, 495, 1119, 1120,
	1121, 1122, 446, 447, 496, 448, 449, 450, 1038, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	1045, 217, 1046, 1047, 1048, 1049, 451, 1050, 1051, 1052,
	1053, 218, 219, 220, 452, 453, 221, 454, 222, 223,
	455, 1054, 224, 225, 226, 227, 228, 229, 1055, 1056,
	230, 456, 457, 458, 1057, 231, 459, 1058, 1043, 1059,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	1060, 241, 0, 242, 243, 244, 1061, 921, 245, 246,
	1062, 1063, 1065, 1064, 1066, 1067, 1068, 247, 248, 249,
	250, 251, 252, 460, 461, 1069, 253, 1070, 255, 254,
	1071, 256, 1072, 1073, 257, 258, 259, 1074, 260, 1075,
	261, 262, 1076, 462, 263, 264, 266, 269, 265, 270,
	271, 272, 463, 464, 1077, 209, 1078, 0, 0, 0,
	0, 273, 274, 275, 465, 276, 277, 0, 278, 1079,
	279, 1080, 1081, 922, 280, 281, 1082, 282, 466, 1083,
	467, 283, 1084, 284, 285, 286, 287, 288, 289, 290,
	468, 469, 470, 924, 1085, 474, 292, 0, 0, 0,
	210, 291, 293, 300, 1086, 923, 294, 471, 296, 295,
	297, 298, 299, 472, 1087, 473, 1088, 301, 925, 926,
	302, 303, 304, 927, 305, 306, 0, 0, 307, 308,
	309, 310, 1089, 312, 311, 1090, 313, 475, 928, 314,
	315, 929, 1091, 316, 317, 1092, 1093, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 930, 328,
	329, 331, 330, 1094, 211, 931, 1095, 476, 477, 332,
	333, 1096, 334, 335, 336, 1097, 1098, 338, 339, 1099,
	1100, 340, 478, 932, 341, 933, 479, 342, 337, 343,
	344, 345, 346, 347, 348, 1101, 349, 480, 350, 481,
	351, 1102, 352, 0, 353, 354, 355, 356, 357, 358,
	482, 359, 360, 1103, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 1104, 374,
	934, 375, 376, 377, 378, 483, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 1105, 397, 398, 391,
	393, 394, 395, 392, 396, 399, 400, 1106, 401, 381,
	382, 402, 935, 403, 484, 404, 405, 1107, 415, 406,
	407, 408, 383, 409, 413, 414, 410, 411, 412, 485,
	1108, 417, 418, 416, 1109, 419, 420, 421, 422, 423,
	267, 424, 268, 425, 1110, 486, 487, 488, 489, 1111,
	1112, 426, 427, 490, 428, 491, 1113, 429, 430, 431,
	0, 432, 433, 1114, 1115, 434, 435, 436, 437, 439,
	1116, 440, 1117, 438, 441, 442, 443, 492, 493, 494,
	1118, 445, 444, 495, 1119, 1120, 1121, 1122, 446, 447,
	496, 448, 449, 450, 1967, 0, 863, 820, 821, 822,
	818, 819, 832, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 1964, 217,
	0, 0, 0, 0, 912, 837, 0, 0, 0, 218,
	219, 220, 452, 878, 857, 889, 847, 888, 887, 0,
	224, 849, 848, 227, 228, 229, 839, 911, 230, 947,
	948, 458, 0, 231, 918, 0, 901, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 921, 245, 246, 904, 902,
	903, 908, 906, 905, 907, 247, 248, 249, 250, 892,
	252, 885, 884, 809, 253, 0, 255, 254, 0, 256,
	1965, 0, 257, 883, 259, 0, 260, 0, 261, 262,
	0, 815, 263, 264, 266, 269, 265, 270, 271, 272,
	938, 939, 828, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 882, 880, 881, 0, 278, 0, 279, 0,
	0, 922, 280, 281, 0, 282, 945, 0, 838, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 913, 914,
	917, 924, 0, 915, 859, 0, 0, 0, 210, 291,
	293, 300, 0, 923, 294, 871, 862, 873, 875, 876,
	877, 872, 0, 864, 0, 301, 925, 926, 302, 303,
	304, 927, 897, 898, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 946, 928, 314, 315, 929,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 851, 325, 930, 328, 329, 331,
	330, 806, 211, 931, 829, 916, 886, 332, 333, 0,
	860, 335, 861, 0, 0, 338, 339, 0, 0, 340,
	478, 932, 341, 933, 940, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 941, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 356, 357, 358, 879, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 934, 375,
	376, 377, 378, 816, 379, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 0, 397, 398, 852, 853, 855,
	856, 392, 396, 399, 400, 909, 401, 381, 382, 402,
	935, 403, 874, 854, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 920, 410, 411, 412, 942, 0, 417,
	418, 416, 0, 419, 420, 421, 422, 423, 267, 424,
	268, 850, 0, 893, 894, 895, 896, 0, 0, 426,
	427, 943, 428, 944, 827, 429, 430, 431, 0, 432,
	433, 0, 810, 434, 435, 436, 437, 439, 910, 440,
	0, 858, 441, 442, 443, 492, 890, 937, 1963, 445,
	444, 495, 0, 0, 0, 0, 446, 447, 496, 448,
	449, 450, 807, 0, 0, 0, 0, 0, 0, 0,
	805, 0, 0, 0, 0, 803, 804, 1966, 0, 0,
	0, 0, 0, 0, 833, 1962, 0, 0, 796, 831,
	863, 820, 821, 822, 818, 819, 832, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 912, 837,
	0, 0, 0, 218, 219, 220, 452, 878, 857, 889,
	847, 888, 887, 0, 224, 849, 848, 227, 228, 229,
	839, 911, 230, 947, 948, 458, 0, 231, 918, 0,
	901, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 921,
	245, 246, 904, 902, 903, 908, 906, 905, 907, 247,
	248, 249, 250, 892, 252, 885, 884, 809, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 883, 259, 0,
	260, 0, 261, 262, 0, 815, 263, 264, 266, 269,
	265, 270, 271, 272, 938, 939, 828, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 882, 880, 881, 0,
	278, 0, 279, 0, 0, 922, 280, 281, 0, 282,
	945, 0, 838, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 913, 914, 917, 924, 0, 915, 859, 0,
	0, 0, 210, 291, 293, 300, 0, 923, 294, 871,
	862, 873, 875, 876, 877, 872, 0, 864, 0, 301,
	925, 926, 302, 303, 304, 927, 897, 898, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 946,
	928, 314, 315, 929, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 851, 325,
	930, 328, 329, 331, 330, 806, 211, 931, 829, 916,
	886, 332, 333, 0, 860, 335, 861, 0, 0, 338,
	339, 0, 0, 340, 478, 932, 341, 933, 940, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 941,
	350, 481, 351, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 879, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 934, 375, 376, 377, 378, 816, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 175, 397,
	398, 852, 853, 855, 856, 392, 396, 399, 400, 909,
	401, 381, 382, 402, 935, 403, 874, 854, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 920, 410, 411,
	412, 942, 0, 417, 418, 416, 177, 419, 420, 421,
	422, 423, 267, 424, 268, 850, 0, 893, 894, 895,
	896, 0, 0, 426, 427, 943, 428, 944, 827, 429,
	430, 431, 0, 432, 433, 0, 810, 434, 435, 436,
	437, 439, 910, 440, 0, 858, 441, 442, 443, 1283,
	890, 937, 0, 445, 444, 495, 0, 0, 0, 169,
	446, 447, 496, 448, 449, 450, 807, 170, 0, 0,
	0, 0, 0, 0, 805, 0, 0, 0, 0, 803,
	804, 863, 820, 821, 822, 818, 819, 832, 1472, 1470,
	0, 0, 0, 831, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 912,
	837, 0, 0, 0, 218, 219, 220, 452, 878, 857,
	889, 847, 888, 887, 0, 224, 849, 848, 227, 228,
	229, 839, 911, 230, 947, 948, 458, 0, 231, 918,
	0, 901, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	921, 245, 246, 904, 902, 903, 908, 906, 905, 907,
	247, 248, 249, 250, 892, 252, 885, 884, 809, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 883, 259,
	0, 260, 0, 261, 262, 0, 815, 263, 264, 266,
	269, 265, 270, 271, 272, 938, 939, 828, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 882, 880, 881,
	0, 278, 0, 279, 0, 0, 922, 280, 281, 0,
	282, 945, 0, 838, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 913, 914, 917, 924, 0, 915, 859,
	0, 0, 0, 210, 291, 293, 300, 0, 923, 294,
	871, 862, 873, 875, 876, 877, 872, 0, 864, 0,
	301, 925, 926, 302, 303, 304, 927, 897, 898, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	946, 928, 314, 315, 929, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 851,
	325, 930, 328, 329, 331, 330, 806, 211, 931, 829,
	916, 886, 332, 333, 0, 860, 335, 861, 0, 0,
	338, 339, 0, 0, 340, 478, 932, 341, 933, 940,
	342, 337, 343, 344, 345, 346, 347, 348, 0, 349,
	941, 350, 481, 351, 0, 352, 0, 353, 354, 355,
	356, 357, 358, 879, 359, 360, 0, 361, 362, 363,
	364, 365, 0, 367, 368, 369, 366, 370, 371, 372,
	373, 0, 374, 934, 375, 376, 377, 378, 816, 379,
	0, 380, 384, 385, 386, 387, 388, 389, 390, 175,
	397, 398, 852, 853, 855, 856, 392, 396, 399, 400,
	909, 401, 381, 382, 402, 935, 403, 874, 854, 405,
	0, 415, 406, 407, 408, 383, 409, 413, 920, 410,
	411, 412, 942, 0, 417, 418, 416, 177, 419, 420,
	421, 422, 423, 267, 424, 268, 850, 0, 893, 894,
	895, 896, 0, 0, 426, 427, 943, 428, 944, 827,
	429, 430, 431, 0, 432, 433, 0, 810, 434, 435,
	436, 437, 439, 910, 440, 0, 858, 441, 442, 443,
	1283, 890, 937, 0, 445, 444, 495, 0, 0, 0,
	169, 446, 447, 496, 448, 449, 450, 807, 170, 0,
	0, 0, 0, 0, 0, 805, 0, 0, 0, 0,
	803, 804, 863, 820, 821, 822, 818, 819, 832, 1472,
	2355, 0, 0, 0, 831, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	912, 837, 0, 0, 0, 218, 219, 220, 452, 878,
	857, 889, 847, 888, 887, 0, 224, 849, 848, 227,
	228, 229, 839, 911, 230, 947, 948, 458, 0, 231,
	918, 0, 901, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 921, 245, 246, 904, 902, 903, 908, 906, 905,
	907, 247, 248, 249, 250, 892, 252, 885, 884, 809,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 883,
	259, 0, 260, 0, 261, 262, 0, 815, 263, 264,
	266, 269, 265, 270, 271, 272, 938, 939, 828, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 882, 880,
	881, 0, 278, 0, 279, 0, 0, 922, 280, 281,
	0, 282, 945, 0, 838, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 913, 914, 917, 924, 0, 915,
	859, 0, 0, 0, 210, 291, 293, 300, 0, 923,
	294, 871, 862, 873, 875, 876, 877, 872, 0, 864,
	0, 301, 925, 926, 302, 303, 304, 927, 897, 898,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 946, 928, 314, 315, 929, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	851, 325, 930, 328, 329, 331, 330, 806, 211, 931,
	829, 916, 886, 332, 333, 0, 860, 335, 861, 0,
	0, 338, 339, 0, 0, 340, 478, 932, 341, 933,
	940, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 941, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 879, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 934, 375, 376, 377, 378, 816,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	175, 397, 398, 852, 853, 855, 856, 392, 396, 399,
	400, 909, 401, 381, 382, 402, 935, 403, 874, 854,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 920,
	410, 411, 412, 942, 0, 417, 418, 416, 177, 419,
	420, 421, 422, 423, 267, 424, 268, 850, 0, 893,
	894, 895, 896, 0, 0, 426, 427, 943, 428, 944,
	827, 429, 430, 431, 0, 432, 433, 0, 810, 434,
	435, 436, 437, 439, 910, 440, 0, 858, 441, 442,
	443, 1283, 890, 937, 0, 445, 444, 495, 0, 0,
	0, 169, 446, 447, 496, 448, 449, 450, 807, 170,
	0, 0, 0, 0, 0, 0, 805, 0, 0, 0,
	0, 803, 804, 863, 820, 821, 822, 818, 819, 832,
	1472, 1470, 0, 0, 0, 831, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 912, 837, 0, 0, 0, 218, 219, 220, 452,
	878, 857, 889, 847, 888, 887, 2051, 224, 849, 848,
	227, 228, 229, 839, 911, 230, 947, 948, 458, 0,
	231, 918, 0, 901, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 921, 245, 246, 904, 902, 903, 908, 906,
	905, 907, 247, 248, 249, 250, 892, 252, 885, 884,
	809, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	883, 259, 0, 260, 0, 261, 262, 0, 815, 263,
	264, 266, 269, 265, 270, 271, 272, 938, 939, 828,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 882,
	880, 881, 0, 278, 0, 279, 0, 2056, 922, 280,
	281, 0, 282, 945, 0, 838, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 913, 914, 917, 924, 0,
	915, 859, 0, 0, 0, 210, 291, 293, 300, 0,
	923, 294, 871, 862, 873, 875, 876, 877, 872, 0,
	864, 0, 301, 925, 926, 302, 303, 304, 927, 897,
	898, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	2052, 313, 946, 928, 314, 315, 929, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 851, 325, 930, 328, 329, 331, 330, 806, 211,
	931, 829, 916, 886, 332, 333, 0, 860, 335, 861,
	0, 0, 338, 339, 0, 0, 340, 478, 932, 341,
	933, 940, 342, 337, 343, 344, 345, 346, 347, 348,
	0, 349, 941, 350, 481, 351, 0, 352, 0, 353,
	354, 355, 356, 357, 358, 879, 359, 360, 0, 361,
	362, 363, 364, 365, 0, 367, 368, 369, 366, 370,
	371, 372, 373, 0, 374, 934, 375, 376, 377, 378,
	816, 379, 0, 380, 384, 385, 386, 387, 388, 389,
	390, 0, 397, 398, 852, 853, 855, 856, 392, 396,
	399, 400, 909, 401, 381, 382, 402, 935, 403, 874,
	854, 405, 0, 415, 406, 407, 408, 383, 409, 413,
	920, 410, 411, 412, 942, 0, 417, 418, 416, 0,
	419, 420, 421, 422, 423, 267, 424, 268, 850, 0,
	893, 894, 895, 896, 0, 2053, 426, 427, 943, 428,
	944, 827, 429, 430, 431, 0, 432, 433, 0, 810,
	434, 435, 436, 437, 439, 910, 440, 0, 858, 441,
	442, 443, 492, 890, 937, 0, 445, 444, 495, 0,
	0, 0, 0, 446, 447, 496, 448, 449, 450, 807,
	0, 0, 0, 0, 0, 0, 0, 805, 0, 0,
	0, 0, 803, 804, 0, 0, 0, 0, 0, 0,
	0, 833, 0, 0, 0, 799, 831, 863, 820, 821,
	822, 818, 819, 832, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 912, 837, 0, 0, 0,
	218, 219, 220, 452, 878, 857, 889, 847, 888, 887,
	0, 224, 849, 848, 227, 228, 229, 839, 911, 230,
	947, 948, 458, 0, 231, 918, 0, 901, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 921, 245, 246, 904,
	902, 903, 908, 906, 905, 907, 247, 248, 249, 250,
	892, 252, 885, 884, 809, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 883, 259, 0, 260, 0, 261,
	262, 0, 815, 263, 264, 266, 269, 265, 270, 271,
	272, 938, 939, 828, 209, 0, 0, 0, 0, 0,
	273, 274, 275, 882, 880, 881, 0, 278, 0, 279,
	0, 0, 922, 280, 281, 0, 282, 945, 0, 838,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 913,
	914, 917, 924, 0, 915, 859, 0, 0, 0, 210,
	291, 293, 300, 0, 923, 294, 871, 862, 873, 875,
	876, 877, 872, 0, 864, 0, 301, 925, 926, 302,
	303, 304, 927, 897, 898, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 946, 928, 314, 315,
	929, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 851, 325, 930, 328, 329,
	331, 330, 806, 211, 931, 829, 916, 886, 332, 333,
	0, 860, 335, 861, 811, 0, 338, 339, 0, 0,
	340, 478, 932, 341, 933, 940, 342, 337, 343, 344,
	345, 346, 347, 348, 0, 349, 941, 350, 481, 351,
	0, 352, 0, 353, 354, 355, 356, 357, 358, 879,
	359, 360, 0, 361, 362, 363, 364, 365, 0, 367,
	368, 369, 366, 370, 371, 372, 373, 0, 374, 934,
	375, 376, 377, 378, 816, 379, 0, 380, 384, 385,
	386, 387, 388, 389, 390, 0, 397, 398, 852, 853,
	855, 856, 392, 396, 399, 400, 909, 401, 381, 382,
	402, 935, 403, 874, 854, 405, 0, 415, 406, 407,
	408, 383, 409, 413, 920, 410, 411, 412, 942, 0,
	417, 418, 416, 0, 419, 420, 421, 422, 423, 267,
	424, 268, 850, 0, 893, 894, 895, 896, 0, 0,
	426, 427, 943, 428, 944, 827, 429, 430, 431, 0,
	432, 433, 0, 810, 434, 435, 436, 437, 439, 910,
	440, 0, 858, 441, 442, 443, 492, 890, 937, 0,
	445, 444, 495, 0, 0, 0, 0, 446, 447, 496,
	448, 449, 450, 807, 0, 0, 0, 0, 0, 0,
	0, 805, 0, 0, 0, 0, 803, 804, 863, 820,
	821, 822, 818, 819, 832, 833, 0, 0, 0, 0,
	831, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 912, 837, 0, 0,
	0, 218, 219, 220, 452, 878, 857, 889, 847, 888,
	887, 0, 224, 849, 848, 227, 228, 229, 839, 911,
	230, 947, 948, 458, 0, 231, 918, 0, 901, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 3257, 244, 0, 921, 245, 246,
	904, 902, 903, 908, 906, 905, 907, 247, 248, 249,
	250, 892, 252, 885, 884, 809, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 883, 259, 0, 260, 0,
	261, 262, 0, 815, 263, 264, 266, 269, 265, 270,
	271, 272, 938, 939, 828, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 882, 880, 881, 0, 278, 0,
	279, 0, 0, 922, 280, 281, 0, 282, 945, 0,
	838, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	913, 914, 917, 924, 0, 915, 859, 0, 0, 0,
	210, 291, 293, 300, 0, 923, 294, 871, 862, 873,
	875, 876, 877, 872, 0, 864, 0, 301, 925, 926,
	302, 303, 304, 927, 897, 898, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 946, 928, 314,
	315, 929, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 851, 325, 930, 328,
	329, 331, 330, 806, 211, 931, 829, 916, 886, 332,
	333, 0, 860, 335, 861, 811, 0, 338, 339, 0,
	0, 340, 478, 932, 341, 933, 940, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 941, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	879, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	934, 375, 376, 377, 378, 816, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 0, 397, 398, 852,
	853, 855, 856, 392, 396, 399, 400, 909, 401, 381,
	382, 402, 935, 403, 874, 854, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 920, 410, 411, 412, 942,
	0, 417, 418, 416, 0, 419, 420, 421, 422, 423,
	267, 424, 268, 850, 0, 893, 894, 895, 896, 0,
	0, 426, 427, 943, 428, 944, 827, 429, 430, 431,
	0, 432, 433, 0, 810, 434, 435, 436, 437, 439,
	910, 440, 0, 858, 441, 442, 443, 492, 890, 937,
	0, 445, 444, 495, 0, 0, 0, 0, 446, 447,
	496, 448, 449, 450, 807, 0, 0, 0, 0, 0,
	0, 0, 805, 0, 0, 0, 0, 803, 804, 863,
	820, 821, 822, 818, 819, 832, 833, 0, 0, 0,
	0, 831, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 912, 837, 0,
	0, 0, 218, 219, 220, 452, 878, 857, 889, 847,
	888, 887, 0, 224, 849, 848, 227, 228, 229, 839,
	911, 230, 947, 948, 458, 0, 231, 918, 0, 901,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 3130, 244, 0, 921, 245,
	246, 904, 902, 903, 908, 906, 905, 907, 247, 248,
	249, 250, 892, 252, 885, 884, 809, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 883, 259, 0, 260,
	0, 261, 262, 0, 815, 263, 264, 266, 269, 265,
	270, 271, 272, 938, 939, 828, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 882, 880, 881, 0, 278,
	0, 279, 0, 0, 922, 280, 281, 0, 282, 945,
	0, 838, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 913, 914, 917, 924, 0, 915, 859, 0, 0,
	0, 210, 291, 293, 300, 0, 923, 294, 871, 862,
	873, 875, 876, 877, 872, 0, 864, 0, 301, 925,
	926, 302, 303, 304, 927, 897, 898, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 946, 928,
	314, 315, 929, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 851, 325, 930,
	328, 329, 331, 330, 806, 211, 931, 829, 916, 886,
	332, 333, 0, 860, 335, 861, 811, 0, 338, 339,
	0, 0, 340, 478, 932, 341, 933, 940, 342, 337,
	343, 344, 345, 346, 347, 348, 0, 349, 941, 350,
	481, 351, 0, 352, 0, 353, 354, 355, 356, 357,
	358, 879, 359, 360, 0, 361, 362, 363, 364, 365,
	0, 367, 368, 369, 366, 370, 371, 372, 373, 0,
	374, 934, 375, 376, 377, 378, 816, 379, 0, 380,
	384, 385, 386, 387, 388, 389, 390, 0, 397, 398,
	852, 853, 855, 856, 392, 396, 399, 400, 909, 401,
	381, 382, 402, 935, 403, 874, 854, 405, 0, 415,
	406, 407, 408, 383, 409, 413, 920, 410, 411, 412,
	942, 0, 417, 418, 416, 0, 419, 420, 421, 422,
	423, 267, 424, 268, 850, 0, 893, 894, 895, 896,
	0, 0, 426, 427, 943, 428, 944, 827, 429, 430,
	431, 0, 432, 433, 0, 810, 434, 435, 436, 437,
	439, 910, 440, 0, 858, 441, 442, 443, 492, 890,
	937, 0, 445, 444, 495, 0, 0, 0, 0, 446,
	447, 496, 448, 449, 450, 807, 0, 0, 0, 0,
	0, 0, 0, 805, 0, 0, 0, 0, 803, 804,
	863, 820, 821, 822, 818, 819, 832, 833, 0, 0,
	0, 0, 831, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 912, 837,
	0, 0, 0, 218, 219, 220, 452, 878, 857, 889,
	847, 888, 887, 0, 224, 849, 848, 227, 228, 229,
	839, 911, 230, 947, 948, 458, 0, 231, 918, 0,
	901, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 921,
	245, 246, 904, 902, 903, 908, 906, 905, 907, 247,
	248, 249, 250, 892, 252, 885, 884, 809, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 883, 259, 0,
	260, 0, 261, 262, 0, 815, 263, 264, 266, 269,
	265, 270, 271, 272, 938, 939, 828, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 882, 880, 881, 0,
	278, 0, 279, 0, 0, 922, 280, 281, 0, 282,
	945, 0, 838, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 913, 914, 917, 924, 0, 915, 859, 0,
	0, 0, 210, 291, 293, 300, 0, 923, 294, 871,
	862, 873, 875, 876, 877, 872, 0, 864, 0, 301,
	925, 926, 302, 303, 304, 927, 897, 898, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 946,
	928, 314, 315, 929, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 851, 325,
	930, 328, 329, 331, 330, 806, 2881, 931, 829, 916,
	886, 332, 333, 0, 860, 335, 861, 0, 0, 338,
	339, 0, 0, 340, 478, 932, 341, 933, 940, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 941,
	350, 481, 351, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 879, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 934, 375, 376, 377, 378, 816, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 0, 397,
	398, 852, 853, 855, 856, 392, 396, 399, 400, 909,
	401, 381, 382, 402, 935, 403, 874, 854, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 920, 410, 411,
	412, 942, 0, 417, 418, 416, 0, 419, 420, 421,
	422, 423, 267, 424, 268, 850, 0, 893, 894, 895,
	896, 0, 0, 426, 427, 943, 428, 944, 827, 429,
	430, 431, 0, 432, 433, 0, 810, 434, 435, 436,
	437, 439, 910, 440, 0, 858, 441, 442, 443, 492,
	890, 937, 0, 445, 444, 495, 0, 0, 0, 0,
	446, 447, 496, 448, 449, 450, 807, 0, 0, 0,
	0, 0, 0, 0, 805, 0, 0, 0, 0, 803,
	804, 1532, 0, 0, 0, 0, 0, 0, 833, 0,
	0, 0, 0, 831, 863, 820, 821, 822, 818, 819,
	832, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 912, 837, 0, 0, 0, 218, 219, 220,
	452, 878, 857, 889, 847, 888, 887, 0, 224, 849,
	848, 227, 228, 229, 839, 911, 230, 947, 948, 458,
	0, 231, 918, 0, 901, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 921, 245, 246, 904, 902, 903, 908,
	906, 905, 907, 247, 248, 249, 250, 892, 252, 885,
	884, 809, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 883, 259, 0, 260, 0, 261, 262, 0, 815,
	263, 264, 266, 269, 265, 270, 271, 272, 938, 939,
	828, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	882, 880, 881, 0, 278, 0, 279, 0, 0, 922,
	280, 281, 0, 282, 945, 0, 838, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 913, 914, 917, 924,
	0, 915, 859, 0, 0, 0, 210, 291, 293, 300,
	0, 923, 294, 871, 862, 873, 875, 876, 877, 872,
	0, 864, 0, 301, 925, 926, 302, 303, 304, 927,
	897, 898, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 946, 928, 314, 315, 929, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 851, 325, 930, 328, 329, 331, 330, 806,
	211, 931, 829, 916, 886, 332, 333, 0, 860, 335,
	861, 0, 0, 338, 339, 0, 0, 340, 478, 932,
	341, 933, 940, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 941, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 879, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 934, 375, 376, 377,
	378, 816, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 852, 853, 855, 856, 392,
	396, 399, 400, 909, 401, 381, 382, 402, 935, 403,
	874, 854, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 920, 410, 411, 412, 942, 0, 417, 418, 416,
	0, 419, 420, 421, 422, 423, 267, 424, 268, 850,
	0, 893, 894, 895, 896, 0, 0, 426, 427, 943,
	428, 944, 827, 429, 430, 431, 0, 432, 433, 0,
	810, 434, 435, 436, 437, 439, 910, 440, 0, 858,
	441, 442, 443, 492, 890, 937, 2697, 445, 444, 495,
	0, 0, 0, 0, 446, 447, 496, 448, 449, 450,
	807, 0, 0, 0, 0, 0, 0, 0, 805, 0,
	0, 0, 0, 803, 804, 863, 820, 821, 822, 818,
	819, 832, 833, 0, 0, 0, 0, 831, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 912, 837, 0, 0, 0, 218, 219,
	220, 452, 878, 857, 889, 847, 888, 887, 0, 224,
	849, 848, 227, 228, 229, 839, 911, 230, 947, 948,
	458, 0, 231, 918, 0, 901, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 921, 245, 246, 904, 902, 903,
	908, 906, 905, 907, 247, 248, 249, 250, 892, 252,
	885, 884, 809, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 883, 259, 0, 260, 0, 261, 262, 0,
	815, 263, 264, 266, 269, 265, 270, 271, 272, 938,
	939, 828, 209, 0, 0, 0, 0, 0, 273, 274,
	275, 882, 880, 881, 0, 278, 0, 279, 0, 0,
	922, 280, 281, 0, 282, 945, 0, 838, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 913, 914, 917,
	924, 0, 915, 859, 0, 0, 0, 1881, 291, 293,
	300, 0, 923, 294, 871, 862, 873, 875, 876, 877,
	872, 0, 864, 0, 301, 925, 926, 302, 303, 304,
	927, 897, 898, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 946, 928, 314, 315, 929, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 851, 325, 930, 328, 329, 331, 330,
	806, 211, 931, 829, 916, 886, 332, 333, 0, 860,
	335, 861, 0, 0, 338, 339, 0, 0, 340, 478,
	932, 341, 933, 940, 342, 337, 343, 344, 345, 346,
	347, 348, 0, 349, 941, 350, 481, 351, 1880, 352,
	0, 353, 354, 355, 356, 357, 358, 879, 359, 360,
	0, 361, 362, 363, 364, 365, 0, 367, 368, 369,
	366, 370, 371, 372, 373, 0, 374, 934, 375, 376,
	377, 378, 816, 379, 0, 380, 384, 385, 386, 387,
	388, 389, 390, 0, 397, 398, 852, 853, 855, 856,
	392, 396, 399, 400, 909, 401, 381, 382, 402, 935,
	403, 874, 854, 405, 0, 415, 406, 407, 408, 383,
	409, 413, 920, 410, 411, 412, 942, 0, 417, 418,
	416, 0, 419, 420, 421, 422, 423, 267, 424, 268,
	850, 0, 893, 894, 895, 896, 0, 0, 426, 427,
	943, 428, 944, 827, 429, 430, 431, 0, 432, 433,
	0, 810, 434, 435, 436, 437, 439, 910, 440, 0,
	858, 441, 442, 443, 492, 890, 937, 0, 445, 444,
	495, 0, 0, 0, 0, 446, 447, 496, 448, 449,
	450, 807, 0, 0, 0, 0, 0, 0, 0, 805,
	0, 0, 0, 0, 803, 804, 863, 820, 821, 822,
	818, 819, 832, 833, 0, 0, 0, 0, 831, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 912, 837, 0, 0, 0, 218,
	219, 220, 452, 878, 857, 889, 847, 888, 887, 0,
	224, 849, 848, 227, 228, 229, 839, 911, 230, 947,
	948, 458, 0, 231, 918, 0, 901, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 921, 245, 246, 904, 902,
	903, 908, 906, 905, 907, 247, 248, 249, 250, 892,
	252, 885, 884, 809, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 883, 259, 0, 260, 0, 261, 262,
	0, 815, 263, 264, 266, 269, 265, 270, 271, 272,
	938, 939, 828, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 882, 880, 881, 0, 278, 0, 279, 0,
	0, 922, 280, 281, 0, 282, 945, 0, 838, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 913, 914,
	917, 924, 0, 915, 859, 0, 0, 0, 210, 291,
	293, 300, 0, 923, 294, 871, 862, 873, 875, 876,
	877, 872, 0, 864, 0, 301, 925, 926, 302, 303,
	304, 927, 897, 898, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 946, 928, 314, 315, 929,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 851, 325, 930, 328, 329, 331,
	330, 806, 211, 931, 829, 916, 886, 332, 333, 0,
	860, 335, 861, 811, 0, 338, 339, 0, 0, 340,
	478, 932, 341, 933, 940, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 941, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 356, 357, 358, 879, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 934, 375,
	376, 377, 378, 816, 379, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 0, 397, 398, 852, 853, 855,
	856, 392, 396, 399, 400, 909, 401, 381, 382, 402,
	935, 403, 874, 854, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 920, 410, 411, 412, 942, 0, 417,
	418, 416, 0, 419, 420, 421, 422, 423, 267, 424,
	268, 850, 0, 893, 894, 895, 896, 0, 0, 426,
	427, 943, 428, 944, 827, 429, 430, 431, 0, 432,
	433, 0, 810, 434, 435, 436, 437, 439, 910, 440,
	0, 858, 441, 442, 443, 492, 890, 937, 0, 445,
	444, 495, 0, 0, 0, 0, 446, 447, 496, 448,
	449, 450, 807, 0, 0, 0, 0, 0, 0, 0,
	805, 0, 0, 0, 0, 803, 804, 863, 820, 821,
	822, 818, 819, 832, 833, 0, 0, 0, 0, 831,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 912, 837, 0, 0, 0,
	218, 219, 220, 452, 878, 857, 889, 847, 888, 887,
	0, 224, 849, 848, 227, 228, 229, 839, 911, 230,
	947, 948, 458, 0, 231, 918, 0, 901, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 921, 245, 246, 904,
	902, 903, 908, 906, 905, 907, 247, 248, 249, 250,
	892, 252, 885, 884, 809, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 883, 259, 0, 260, 0, 261,
	262, 0, 815, 263, 264, 266, 269, 265, 270, 271,
	272, 938, 939, 828, 209, 0, 0, 0, 0, 0,
	273, 274, 275, 882, 880, 881, 0, 278, 0, 279,
	0, 0, 922, 280, 281, 0, 282, 945, 0, 838,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 913,
	914, 917, 924, 0, 915, 859, 0, 0, 0, 210,
	291, 293, 300, 0, 923, 294, 871, 862, 873, 875,
	876, 877, 872, 0, 864, 0, 301, 925, 926, 302,
	303, 304, 927, 897, 898, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 946, 928, 314, 315,
	929, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 851, 325, 930, 328, 329,
	331, 330, 806, 211, 931, 829, 916, 886, 332, 333,
	0, 860, 335, 861, 0, 0, 338, 339, 0, 0,
	340, 478, 932, 341, 933, 940, 342, 337, 343, 344,
	345, 346, 347, 348, 0, 349, 941, 350, 481, 351,
	0, 352, 0, 353, 354, 355, 356, 357, 358, 879,
	359, 360, 0, 361, 362, 363, 364, 365, 0, 367,
	368, 369, 366, 370, 371, 372, 373, 0, 374, 934,
	375, 376, 377, 378, 816, 379, 0, 380, 384, 385,
	386, 387, 388, 389, 390, 0, 397, 398, 852, 853,
	855, 856, 392, 396, 399, 400, 909, 401, 381, 382,
	402, 935, 403, 874, 854, 405, 0, 415, 406, 407,
	408, 383, 409, 413, 920, 410, 411, 412, 942, 0,
	417, 418, 416, 0, 419, 420, 421, 422, 423, 267,
	424, 268, 850, 0, 893, 894, 895, 896, 0, 0,
	426, 427, 943, 428, 944, 827, 429, 430, 431, 0,
	432, 433, 0, 810, 434, 435, 436, 437, 439, 910,
	440, 0, 858, 441, 442, 443, 492, 890, 937, 0,
	445, 444, 495, 0, 0, 0, 0, 446, 447, 496,
	448, 449, 450, 807, 0, 0, 0, 0, 0, 0,
	0, 805, 0, 0, 0, 0, 803, 804, 1532, 0,
	0, 0, 0, 0, 0, 833, 0, 0, 0, 0,
	831, 863, 820, 821, 822, 818, 819, 832, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 912,
	837, 0, 0, 0, 218, 219, 220, 452, 878, 857,
	889, 847, 888, 887, 0, 224, 849, 848, 227, 228,
	229, 839, 911, 230, 947, 948, 458, 0, 231, 918,
	0, 901, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	921, 245, 246, 904, 902, 903, 908, 906, 905, 907,
	247, 248, 249, 250, 892, 252, 885, 884, 809, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 883, 259,
	0, 260, 0, 261, 262, 0, 815, 263, 264, 266,
	269, 265, 270, 271, 272, 938, 939, 828, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 882, 880, 881,
	0, 278, 0, 279, 0, 2056, 922, 280, 281, 0,
	282, 945, 0, 838, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 913, 914, 917, 924, 0, 915, 859,
	0, 0, 0, 210, 291, 293, 300, 0, 923, 294,
	871, 862, 873, 875, 876, 877, 872, 0, 864, 0,
	301, 925, 926, 302, 303, 304, 927, 897, 898, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	946, 928, 314, 315, 929, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 851,
	325, 930, 328, 329, 331, 330, 806, 211, 931, 829,
	916, 886, 332, 333, 0, 860, 335, 861, 0, 0,
	338, 339, 0, 0, 340, 478, 932, 341, 933, 940,
	342, 337, 343, 344, 345, 346, 347, 348, 0, 349,
	941, 350, 481, 351, 0, 352, 0, 353, 354, 355,
	356, 357, 358, 879, 359, 360, 0, 361, 362, 363,
	364, 365, 0, 367, 368, 369, 366, 370, 371, 372,
	373, 0, 374, 934, 375, 376, 377, 378, 816, 379,
	0, 380, 384, 385, 386, 387, 388, 389, 390, 0,
	397, 398, 852, 853, 855, 856, 392, 396, 399, 400,
	909, 401, 381, 382, 402, 935, 403, 874, 854, 405,
	0, 415, 406, 407, 408, 383, 409, 413, 920, 410,
	411, 412, 942, 0, 417, 418, 416, 0, 419, 420,
	421, 422, 423, 267, 424, 268, 850, 0, 893, 894,
	895, 896, 0, 0, 426, 427, 943, 428, 944, 827,
	429, 430, 431, 0, 432, 433, 0, 810, 434, 435,
	436, 437, 439, 910, 440, 0, 858, 441, 442, 443,
	492, 890, 937, 0, 445, 444, 495, 0, 0, 0,
	0, 446, 447, 496, 448, 449, 450, 807, 0, 0,
	0, 0, 0, 0, 0, 805, 0, 0, 0, 0,
	803, 804, 863, 820, 821, 822, 818, 819, 832, 833,
	0, 0, 0, 0, 831, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	912, 837, 0, 0, 0, 218, 219, 220, 452, 878,
	857, 889, 847, 888, 887, 0, 224, 849, 848, 227,
	228, 229, 839, 911, 230, 947, 948, 458, 0, 231,
	918, 0, 901, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 921, 245, 246, 904, 902, 903, 908, 906, 905,
	907, 247, 248, 249, 250, 892, 252, 885, 884, 809,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 883,
	259, 0, 260, 0, 261, 262, 0, 815, 263, 264,
	266, 269, 265, 270, 271, 272, 938, 939, 828, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 882, 880,
	881, 0, 278, 0, 279, 0, 0, 922, 280, 281,
	0, 282, 945, 0, 838, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 913, 914, 917, 924, 0, 915,
	859, 0, 0, 0, 210, 291, 293, 300, 0, 923,
	294, 871, 862, 873, 875, 876, 877, 872, 0, 864,
	0, 301, 925, 926, 302, 303, 304, 927, 897, 898,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 946, 928, 314, 315, 929, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	851, 325, 930, 328, 329, 331, 330, 806, 211, 931,
	829, 916, 886, 332, 333, 0, 860, 335, 861, 0,
	0, 338, 339, 0, 0, 340, 478, 932, 341, 933,
	940, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 941, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 879, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 934, 375, 376, 377, 378, 816,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	0, 397, 398, 852, 853, 855, 856, 392, 396, 399,
	400, 909, 401, 381, 382, 402, 935, 403, 874, 854,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 920,
	410, 411, 412, 942, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 850, 0, 893,
	894, 895, 896, 0, 0, 426, 427, 943, 428, 944,
	827, 429, 430, 431, 0, 432, 433, 0, 810, 434,
	435, 436, 437, 439, 910, 440, 0, 858, 441, 442,
	443, 492, 890, 937, 0, 445, 444, 495, 0, 0,
	0, 0, 446, 447, 496, 448, 449, 450, 807, 0,
	0, 0, 0, 0, 0, 0, 805, 0, 0, 0,
	0, 803, 804, 0, 0, 0, 0, 0, 0, 0,
	833, 1470, 0, 0, 2061, 831, 863, 820, 821, 822,
	818, 819, 832, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 912, 837, 0, 0, 0, 218,
	219, 220, 452, 878, 857, 889, 847, 888, 887, 0,
	224, 849, 848, 227, 228, 229, 839, 911, 230, 947,
	948, 458, 0, 231, 918, 0, 901, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 921, 245, 246, 904, 902,
	903, 908, 906, 905, 907, 247, 248, 249, 250, 892,
	252, 885, 884, 809, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 883, 259, 0, 260, 0, 261, 262,
	0, 815, 263, 264, 266, 269, 265, 270, 271, 272,
	938, 939, 828, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 882, 880, 881, 0, 278, 0, 279, 0,
	0, 922, 280, 281, 0, 282, 945, 0, 838, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 913, 914,
	917, 924, 0, 915, 859, 0, 0, 0, 210, 291,
	293, 300, 0, 923, 294, 871, 862, 873, 875, 876,
	877, 872, 0, 864, 0, 301, 925, 926, 302, 303,
	304, 927, 897, 898, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 946, 928, 314, 315, 929,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 851, 325, 930, 328, 329, 331,
	330, 806, 211, 931, 829, 916, 886, 332, 333, 0,
	860, 335, 861, 0, 0, 338, 339, 0, 0, 340,
	478, 932, 341, 933, 940, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 941, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 356, 357, 358, 879, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 934, 375,
	376, 377, 378, 816, 379, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 0, 397, 398, 852, 853, 855,
	856, 392, 396, 399, 400, 909, 401, 381, 382, 402,
	935, 403, 874, 854, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 920, 410, 411, 412, 942, 0, 417,
	418, 416, 0, 419, 420, 421, 422, 423, 267, 424,
	268, 850, 0, 893, 894, 895, 896, 0, 0, 426,
	427, 943, 428, 944, 827, 429, 430, 431, 0, 432,
	433, 0, 810, 434, 435, 436, 437, 439, 910, 440,
	0, 858, 441, 442, 443, 492, 890, 937, 0, 445,
	444, 495, 0, 0, 0, 0, 446, 447, 496, 448,
	449, 450, 807, 0, 0, 0, 0, 0, 0, 0,
	805, 0, 0, 0, 0, 803, 804, 0, 0, 0,
	0, 0, 0, 0, 833, 0, 0, 0, 2059, 831,
	863, 820, 821, 822, 818, 819, 832, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 912, 837,
	0, 0, 0, 218, 219, 220, 452, 878, 857, 889,
	847, 888, 887, 0, 224, 849, 848, 227, 228, 229,
	839, 911, 230, 947, 948, 458, 0, 231, 918, 0,
	901, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 921,
	245, 246, 904, 902, 903, 908, 906, 905, 907, 247,
	248, 249, 250, 892, 252, 885, 884, 809, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 883, 259, 0,
	260, 0, 261, 262, 0, 815, 263, 264, 266, 269,
	265, 270, 271, 272, 938, 939, 828, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 882, 880, 881, 0,
	278, 0, 279, 0, 0, 922, 280, 281, 0, 282,
	945, 0, 838, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 913, 914, 917, 924, 0, 915, 859, 0,
	0, 0, 210, 291, 293, 300, 0, 923, 294, 871,
	862, 873, 875, 876, 877, 872, 0, 864, 0, 301,
	925, 926, 302, 303, 304, 927, 897, 898, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 946,
	928, 314, 315, 929, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 851, 325,
	930, 328, 329, 331, 330, 806, 211, 931, 829, 916,
	886, 332, 333, 0, 860, 335, 861, 0, 0, 338,
	339, 0, 0, 340, 478, 932, 341, 933, 940, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 941,
	350, 481, 351, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 879, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 934, 375, 376, 377, 378, 816, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 0, 397,
	398, 852, 853, 855, 856, 392, 396, 399, 400, 909,
	401, 381, 382, 402, 935, 403, 874, 854, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 920, 410, 411,
	412, 942, 0, 417, 418, 416, 0, 419, 420, 421,
	422, 423, 267, 424, 268, 850, 0, 893, 894, 895,
	896, 0, 0, 426, 427, 943, 428, 944, 827, 429,
	430, 431, 0, 432, 433, 0, 810, 434, 435, 436,
	437, 439, 910, 440, 0, 858, 441, 442, 443, 492,
	890, 937, 0, 445, 444, 495, 0, 0, 0, 0,
	446, 447, 496, 448, 449, 450, 807, 0, 0, 0,
	0, 0, 0, 0, 805, 0, 0, 0, 0, 803,
	804, 0, 0, 0, 0, 0, 0, 0, 833, 0,
	0, 0, 2047, 831, 863, 820, 821, 822, 818, 819,
	832, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 912, 837, 0, 0, 0, 218, 219, 220,
	452, 878, 857, 889, 847, 888, 887, 0, 224, 849,
	848, 227, 228, 229, 839, 911, 230, 947, 948, 458,
	0, 231, 918, 0, 901, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 921, 245, 246, 904, 902, 903, 908,
	906, 905, 907, 247, 248, 249, 250, 892, 252, 885,
	884, 809, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 883, 259, 0, 260, 0, 261, 262, 0, 815,
	263, 264, 266, 269, 265, 270, 271, 272, 938, 939,
	828, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	882, 880, 881, 0, 278, 0, 279, 0, 0, 922,
	280, 281, 0, 282, 945, 0, 838, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 913, 914, 917, 924,
	0, 915, 859, 0, 0, 0, 210, 291, 293, 300,
	0, 923, 294, 871, 862, 873, 875, 876, 877, 872,
	0, 864, 0, 301, 925, 926, 302, 303, 304, 927,
	897, 898, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 946, 928, 314, 315, 929, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 851, 325, 930, 328, 329, 331, 330, 806,
	211, 931, 829, 916, 886, 332, 333, 0, 860, 335,
	861, 0, 0, 338, 339, 0, 0, 340, 478, 932,
	341, 933, 940, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 941, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 879, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 934, 375, 376, 377,
	378, 816, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 852, 853, 855, 856, 392,
	396, 399, 400, 909, 401, 381, 382, 402, 935, 403,
	874, 854, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 920, 410, 411, 412, 942, 0, 417, 418, 416,
	0, 419, 420, 421, 422, 423, 267, 424, 268, 850,
	0, 893, 894, 895, 896, 0, 0, 426, 427, 943,
	428, 944, 827, 429, 430, 431, 0, 432, 433, 0,
	810, 434, 435, 436, 437, 439, 910, 440, 0, 858,
	441, 442, 443, 492, 890, 937, 0, 445, 444, 495,
	0, 0, 0, 0, 446, 447, 496, 448, 449, 450,
	807, 0, 0, 0, 0, 0, 0, 0, 805, 0,
	0, 0, 0, 803, 804, 0, 0, 0, 0, 0,
	0, 0, 833, 0, 0, 0, 2036, 831, 863, 820,
	821, 822, 818, 819, 832, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 912, 837, 0, 0,
	0, 218, 219, 220, 452, 878, 857, 889, 847, 888,
	887, 0, 224, 849, 848, 227, 228, 229, 839, 911,
	230, 947, 948, 458, 0, 231, 918, 0, 901, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 921, 245, 246,
	904, 902, 903, 908, 906, 905, 907, 247, 248, 249,
	250, 892, 252, 885, 884, 809, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 883, 259, 0, 260, 0,
	261, 262, 0, 815, 263, 264, 266, 269, 265, 270,
	271, 272, 938, 939, 828, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 882, 880, 881, 0, 278, 0,
	279, 0, 0, 922, 280, 281, 0, 282, 945, 0,
	838, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	913, 914, 917, 924, 0, 915, 859, 0, 0, 0,
	210, 291, 293, 300, 0, 923, 294, 871, 862, 873,
	875, 876, 877, 872, 0, 864, 0, 301, 925, 926,
	302, 303, 304, 927, 897, 898, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 946, 928, 314,
	315, 929, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 851, 325, 930, 328,
	329, 331, 330, 806, 211, 931, 829, 916, 886, 332,
	333, 0, 860, 335, 861, 0, 0, 338, 339, 0,
	0, 340, 478, 932, 341, 933, 940, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 941, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	879, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	934, 375, 376, 377, 378, 816, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 0, 397, 398, 852,
	853, 855, 856, 392, 396, 399, 400, 909, 401, 381,
	382, 402, 935, 403, 874, 854, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 920, 410, 411, 412, 942,
	0, 417, 418, 416, 0, 419, 420, 421, 422, 423,
	267, 424, 268, 850, 0, 893, 894, 895, 896, 0,
	0, 426, 427, 943, 428, 944, 827, 429, 430, 431,
	0, 432, 433, 0, 810, 434, 435, 436, 437, 439,
	910, 440, 0, 858, 441, 442, 443, 492, 890, 937,
	0, 445, 444, 495, 0, 0, 0, 0, 446, 447,
	496, 448, 449, 450, 807, 0, 0, 0, 0, 0,
	0, 0, 805, 0, 0, 0, 0, 803, 804, 0,
	0, 0, 0, 0, 0, 0, 833, 0, 0, 0,
	2034, 831, 2026, 820, 821, 822, 818, 819, 832, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	912, 837, 0, 0, 0, 218, 219, 220, 452, 878,
	857, 889, 847, 888, 887, 0, 224, 849, 848, 227,
	228, 229, 839, 911, 230, 947, 948, 458, 0, 231,
	918, 0, 901, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 921, 245, 246, 904, 902, 903, 908, 906, 905,
	907, 247, 248, 249, 250, 892, 2029, 885, 884, 809,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 883,
	259, 0, 260, 0, 261, 262, 0, 815, 263, 264,
	266, 269, 265, 270, 271, 272, 938, 939, 828, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 882, 880,
	881, 0, 278, 0, 279, 0, 0, 922, 280, 281,
	0, 282, 945, 0, 838, 283, 0, 284, 285, 2030,
	287, 288, 289, 290, 913, 914, 917, 924, 0, 915,
	859, 0, 0, 0, 210, 291, 293, 300, 0, 923,
	294, 871, 862, 873, 875, 876, 877, 872, 0, 864,
	0, 301, 925, 926, 302, 303, 304, 927, 897, 898,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 946, 928, 314, 315, 929, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 2031, 2028, 326,
	851, 325, 930, 328, 329, 331, 330, 806, 211, 931,
	829, 916, 886, 332, 333, 0, 860, 335, 861, 0,
	0, 338, 339, 0, 0, 340, 478, 932, 341, 933,
	940, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 941, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 879, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 934, 375, 376, 377, 378, 816,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 2032,
	0, 397, 398, 852, 853, 855, 856, 392, 396, 399,
	400, 909, 401, 381, 382, 402, 935, 403, 874, 854,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 920,
	410, 411, 412, 942, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 850, 0, 893,
	894, 895, 896, 0, 0, 426, 427, 943, 428, 944,
	827, 429, 430, 431, 0, 432, 433, 0, 810, 434,
	435, 436, 437, 439, 910, 440, 0, 858, 441, 442,
	443, 492, 890, 937, 0, 445, 444, 495, 0, 0,
	0, 0, 446, 447, 496, 448, 2027, 450, 807, 0,
	0, 0, 0, 0, 0, 0, 805, 0, 0, 0,
	0, 803, 804, 0, 0, 0, 0, 0, 0, 0,
	833, 0, 0, 0, 2023, 831, 2026, 820, 821, 822,
	818, 819, 832, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 912, 837, 0, 0, 0, 218,
	219, 220, 452, 878, 857, 889, 847, 888, 887, 0,
	224, 849, 848, 227, 228, 229, 839, 911, 230, 947,
	948, 458, 0, 231, 918, 0, 901, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 921, 245, 246, 904, 902,
	903, 908, 906, 905, 907, 247, 248, 249, 250, 892,
	2029, 885, 884, 809, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 883, 259, 0, 260, 0, 261, 262,
	0, 815, 263, 264, 266, 269, 265, 270, 271, 272,
	938, 939, 828, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 882, 880, 881, 0, 278, 0, 279, 0,
	0, 922, 280, 281, 0, 282, 945, 0, 838, 283,
	0, 284, 285, 2030, 287, 288, 289, 290, 913, 914,
	917, 924, 0, 915, 859, 0, 0, 0, 210, 291,
	293, 300, 0, 923, 294, 871, 862, 873, 875, 876,
	877, 872, 0, 864, 0, 301, 925, 926, 302, 303,
	304, 927, 897, 898, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 946, 928, 314, 315, 929,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 2031, 2028, 326, 851, 325, 930, 328, 329, 331,
	330, 806, 211, 931, 829, 916, 886, 332, 333, 0,
	860, 335, 861, 0, 0, 338, 339, 0, 0, 340,
	478, 932, 341, 933, 940, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 941, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 356, 357, 358, 879, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 934, 375,
	376, 377, 378, 816, 379, 0, 380, 384, 385, 386,
	387, 388, 389, 2032, 0, 397, 398, 852, 853, 855,
	856, 392, 396, 399, 400, 909, 401, 381, 382, 402,
	935, 403, 874, 854, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 920, 410, 411, 412, 942, 0, 417,
	418, 416, 0, 419, 420, 421, 422, 423, 267, 424,
	268, 850, 0, 893, 894, 895, 896, 0, 0, 426,
	427, 943, 428, 944, 827, 429, 430, 431, 0, 432,
	433, 0, 810, 434, 435, 436, 437, 439, 910, 440,
	0, 858, 441, 442, 443, 492, 890, 937, 0, 445,
	444, 495, 0, 0, 0, 0, 446, 447, 496, 448,
	2027, 450, 807, 0, 0, 0, 0, 0, 0, 0,
	805, 0, 0, 0, 0, 803, 804, 863, 820, 821,
	822, 818, 819, 832, 833, 0, 0, 0, 0, 831,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 912, 837, 0, 0, 0,
	218, 219, 220, 452, 878, 857, 889, 847, 888, 887,
	0, 224, 849, 848, 227, 228, 229, 839, 911, 230,
	947, 948, 458, 0, 231, 918, 0, 901, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 921, 245, 246, 904,
	902, 903, 908, 906, 905, 907, 247, 248, 249, 250,
	892, 252, 885, 884, 809, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 883, 259, 0, 260, 0, 261,
	262, 0, 815, 263, 264, 266, 269, 265, 270, 271,
	272, 938, 939, 828, 209, 0, 0, 0, 0, 0,
	273, 274, 275, 882, 880, 881, 0, 278, 0, 279,
	0, 0, 922, 280, 281, 0, 282, 945, 0, 838,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 913,
	914, 917, 924, 0, 915, 859, 0, 0, 0, 210,
	291, 293, 300, 0, 923, 294, 871, 862, 873, 875,
	876, 877, 872, 0, 864, 0, 301, 925, 926, 302,
	303, 304, 927, 897, 898, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 946, 928, 314, 315,
	929, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 851, 325, 930, 328, 329,
	331, 330, 806, 211, 931, 829, 916, 886, 332, 333,
	0, 860, 335, 861, 0, 0, 338, 339, 0, 0,
	340, 478, 932, 341, 933, 940, 342, 337, 343, 344,
	345, 346, 347, 348, 0, 349, 941, 350, 481, 351,
	0, 352, 0, 353, 354, 355, 356, 357, 358, 879,
	359, 360, 0, 361, 362, 363, 364, 365, 0, 367,
	368, 369, 366, 370, 371, 372, 373, 0, 374, 934,
	375, 376, 377, 378, 816, 379, 0, 380, 384, 385,
	386, 387, 388, 389, 390, 0, 397, 398, 852, 853,
	855, 856, 392, 396, 399, 400, 909, 401, 381, 382,
	402, 935, 403, 874, 854, 405, 0, 415, 406, 407,
	408, 383, 409, 413, 920, 410, 411, 412, 942, 0,
	417, 418, 416, 0, 419, 420, 421, 422, 423, 267,
	424, 268, 850, 0, 893, 894, 895, 896, 0, 0,
	426, 427, 943, 428, 944, 827, 429, 430, 431, 0,
	432, 433, 0, 810, 434, 435, 436, 437, 439, 910,
	440, 0, 858, 441, 442, 443, 492, 890, 937, 0,
	445, 444, 495, 0, 0, 0, 0, 446, 447, 496,
	448, 449, 450, 807, 0, 0, 0, 0, 0, 0,
	0, 805, 0, 0, 0, 0, 803, 804, 0, 0,
	0, 0, 0, 1478, 0, 833, 0, 0, 0, 0,
	831, 863, 820, 821, 822, 818, 819, 832, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 1868, 217, 0, 0, 0, 0, 912,
	837, 0, 0, 0, 218, 219, 220, 452, 878, 857,
	889, 847, 888, 887, 0, 224, 849, 848, 227, 228,
	229, 839, 911, 230, 947, 948, 458, 0, 231, 918,
	0, 901, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	921, 245, 246, 904, 902, 903, 908, 906, 905, 907,
	247, 248, 249, 250, 892, 252, 885, 884, 809, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 883, 259,
	0, 260, 0, 261, 262, 0, 815, 263, 264, 266,
	269, 265, 270, 271, 272, 938, 939, 828, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 882, 880, 881,
	0, 278, 0, 279, 0, 0, 922, 280, 281, 0,
	282, 945, 0, 838, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 913, 914, 917, 924, 0, 915, 859,
	0, 0, 0, 210, 291, 293, 300, 0, 923, 294,
	871, 862, 873, 875, 876, 877, 872, 0, 864, 0,
	301, 925, 926, 302, 303, 304, 927, 897, 898, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	946, 928, 314, 315, 929, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 851,
	325, 930, 328, 329, 331, 330, 806, 211, 931, 829,
	916, 886, 332, 333, 0, 860, 335, 861, 0, 0,
	338, 339, 0, 0, 340, 478, 932, 341, 933, 940,
	342, 337, 343, 344, 345, 346, 347, 348, 0, 349,
	941, 350, 481, 351, 0, 352, 0, 353, 354, 355,
	356, 357, 358, 879, 359, 360, 0, 361, 362, 363,
	364, 365, 0, 367, 368, 369, 366, 370, 371, 372,
	373, 0, 374, 934, 375, 376, 377, 378, 816, 379,
	0, 380, 384, 385, 386, 387, 388, 389, 390, 0,
	397, 398, 852, 853, 855, 856, 392, 396, 399, 400,
	909, 401, 381, 382, 402, 935, 403, 874, 854, 405,
	0, 415, 406, 407, 408, 383, 409, 413, 920, 410,
	411, 412, 942, 0, 417, 418, 416, 0, 419, 420,
	421, 422, 423, 267, 424, 268, 850, 0, 893, 894,
	895, 896, 0, 0, 426, 427, 943, 428, 944, 827,
	429, 430, 431, 0, 432, 433, 0, 810, 434, 435,
	436, 437, 439, 910, 440, 0, 858, 441, 442, 443,
	492, 890, 937, 0, 445, 444, 495, 0, 0, 0,
	0, 446, 447, 496, 448, 449, 450, 807, 0, 0,
	0, 0, 0, 0, 0, 805, 0, 0, 0, 0,
	803, 804, 0, 0, 0, 0, 0, 0, 0, 833,
	0, 0, 0, 1173, 831, 863, 820, 821, 822, 818,
	819, 832, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 912, 837, 0, 0, 0, 218, 219,
	220, 452, 878, 857, 889, 847, 888, 887, 0, 224,
	849, 848, 227, 228, 229, 839, 911, 230, 947, 948,
	458, 0, 231, 918, 0, 901, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 921, 245, 246, 904, 902, 903,
	908, 906, 905, 907, 247, 248, 249, 250, 892, 252,
	885, 884, 809, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 883, 259, 0, 260, 0, 261, 262, 0,
	815, 263, 264, 266, 269, 265, 270, 271, 272, 938,
	939, 828, 209, 0, 0, 0, 0, 0, 273, 274,
	275, 882, 880, 881, 0, 278, 0, 279, 0, 0,
	922, 280, 281, 0, 282, 945, 0, 838, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 1172, 914, 917,
	924, 0, 915, 859, 0, 0, 0, 210, 291, 293,
	300, 0, 923, 294, 871, 862, 873, 875, 876, 877,
	872, 0, 864, 0, 301, 925, 926, 302, 303, 304,
	927, 897, 898, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 946, 928, 314, 315, 929, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 851, 325, 930, 328, 329, 331, 330,
	806, 211, 931, 829, 916, 886, 332, 333, 0, 860,
	335, 861, 0, 0, 338, 339, 0, 0, 340, 478,
	932, 341, 933, 940, 342, 337, 343, 344, 345, 346,
	347, 348, 0, 349, 941, 350, 481, 351, 0, 352,
	0, 353, 354, 355, 356, 357, 358, 879, 359, 360,
	0, 361, 362, 363, 364, 365, 0, 367, 368, 369,
	366, 370, 371, 372, 373, 0, 374, 934, 375, 376,
	377, 378, 816, 379, 0, 380, 384, 385, 386, 387,
	388, 389, 390, 0, 397, 398, 852, 853, 855, 856,
	392, 396, 399, 400, 909, 401, 381, 382, 402, 935,
	403, 874, 854, 405, 0, 415, 406, 407, 408, 383,
	409, 413, 920, 410, 411, 412, 942, 0, 417, 418,
	416, 0, 419, 420, 421, 422, 423, 267, 424, 268,
	850, 0, 893, 894, 895, 896, 0, 0, 426, 427,
	943, 428, 944, 827, 429, 430, 431, 0, 432, 433,
	0, 810, 434, 435, 436, 437, 439, 910, 440, 0,
	858, 441, 442, 443, 492, 890, 937, 0, 445, 444,
	495, 0, 0, 0, 0, 446, 447, 496, 448, 449,
	450, 807, 0, 0, 0, 0, 0, 0, 0, 805,
	0, 0, 0, 0, 803, 804, 0, 0, 0, 0,
	0, 0, 0, 833, 0, 0, 0, 1167, 831, 863,
	820, 821, 822, 818, 819, 832, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 912, 837, 0,
	0, 0, 218, 219, 220, 452, 878, 857, 889, 847,
	888, 887, 0, 224, 849, 848, 227, 228, 229, 839,
	911, 230, 947, 948, 458, 0, 231, 918, 0, 901,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 921, 245,
	246, 904, 902, 903, 908, 906, 905, 907, 247, 248,
	249, 250, 892, 252, 885, 884, 809, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 883, 259, 0, 260,
	0, 261, 262, 0, 815, 263, 264, 266, 269, 265,
	270, 271, 272, 938, 939, 828, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 882, 880, 881, 0, 278,
	0, 279, 0, 0, 922, 280, 281, 0, 282, 945,
	0, 838, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 1166, 914, 917, 924, 0, 915, 859, 0, 0,
	0, 210, 291, 293, 300, 0, 923, 294, 871, 862,
	873, 875, 876, 877, 872, 0, 864, 0, 301, 925,
	926, 302, 303, 304, 927, 897, 898, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 946, 928,
	314, 315, 929, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 851, 325, 930,
	328, 329, 331, 330, 806, 211, 931, 829, 916, 886,
	332, 333, 0, 860, 335, 861, 0, 0, 338, 339,
	0, 0, 340, 478, 932, 341, 933, 940, 342, 337,
	343, 344, 345, 346, 347, 348, 0, 349, 941, 350,
	481, 351, 0, 352, 0, 353, 354, 355, 356, 357,
	358, 879, 359, 360, 0, 361, 362, 363, 364, 365,
	0, 367, 368, 369, 366, 370, 371, 372, 373, 0,
	374, 934, 375, 376, 377, 378, 816, 379, 0, 380,
	384, 385, 386, 387, 388, 389, 390, 0, 397, 398,
	852, 853, 855, 856, 392, 396, 399, 400, 909, 401,
	381, 382, 402, 935, 403, 874, 854, 405, 0, 415,
	406, 407, 408, 383, 409, 413, 920, 410, 411, 412,
	942, 0, 417, 418, 416, 0, 419, 420, 421, 422,
	423, 267, 424, 268, 850, 0, 893, 894, 895, 896,
	0, 0, 426, 427, 943, 428, 944, 827, 429, 430,
	431, 0, 432, 433, 0, 810, 434, 435, 436, 437,
	439, 910, 440, 0, 858, 441, 442, 443, 492, 890,
	937, 0, 445, 444, 495, 0, 0, 0, 0, 446,
	447, 496, 448, 449, 450, 807, 0, 0, 0, 0,
	0, 0, 0, 805, 0, 0, 0, 0, 803, 804,
	0, 0, 0, 0, 0, 0, 0, 833, 0, 0,
	0, 1162, 831, 863, 820, 821, 822, 818, 819, 832,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 912, 837, 0, 0, 0, 218, 219, 220, 452,
	878, 857, 889, 847, 888, 887, 0, 224, 849, 848,
	227, 228, 229, 839, 911, 230, 947, 948, 458, 0,
	231, 918, 0, 901, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 921, 245, 246, 904, 902, 903, 908, 906,
	905, 907, 247, 248, 249, 250, 892, 252, 885, 884,
	809, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	883, 259, 0, 260, 0, 261, 262, 0, 815, 263,
	264, 266, 269, 265, 270, 271, 272, 938, 939, 828,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 882,
	880, 881, 0, 278, 0, 279, 0, 0, 922, 280,
	281, 0, 282, 945, 0, 838, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 913, 914, 917, 924, 0,
	915, 859, 0, 0, 0, 210, 291, 293, 300, 0,
	923, 294, 871, 862, 873, 875, 876, 877, 872, 0,
	864, 0, 301, 925, 926, 302, 303, 304, 927, 897,
	898, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 946, 928, 314, 315, 929, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 851, 325, 930, 328, 329, 331, 330, 806, 211,
	931, 829, 916, 886, 332, 333, 0, 860, 335, 861,
	0, 0, 338, 339, 0, 0, 340, 478, 932, 341,
	933, 940, 342, 337, 343, 344, 345, 346, 347, 348,
	0, 349, 941, 350, 481, 351, 0, 352, 0, 353,
	354, 355, 356, 357, 358, 879, 359, 360, 0, 361,
	362, 363, 364, 365, 0, 367, 368, 369, 366, 370,
	371, 372, 373, 0, 374, 934, 375, 376, 377, 378,
	816, 379, 0, 380, 384, 385, 386, 387, 388, 389,
	390, 0, 397, 398, 852, 853, 855, 856, 392, 396,
	399, 400, 909, 401, 381, 382, 402, 935, 403, 874,
	854, 405, 0, 415, 406, 407, 408, 383, 409, 413,
	920, 410, 411, 412, 942, 0, 417, 418, 416, 0,
	419, 420, 421, 422, 423, 267, 424, 268, 850, 0,
	893, 894, 895, 896, 0, 0, 426, 427, 943, 428,
	944, 827, 429, 430, 431, 0, 432, 433, 0, 810,
	434, 435, 436, 437, 439, 910, 440, 0, 858, 441,
	442, 443, 492, 890, 937, 0, 445, 444, 495, 0,
	0, 0, 0, 446, 447, 496, 448, 449, 450, 807,
	0, 0, 0, 0, 0, 0, 0, 805, 0, 0,
	0, 0, 803, 804, 863, 820, 821, 822, 818, 819,
	832, 833, 0, 0, 0, 0, 831, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 912, 837, 0, 0, 0, 218, 219, 220,
	452, 878, 857, 889, 847, 888, 887, 0, 224, 849,
	848, 227, 228, 229, 839, 911, 230, 947, 948, 458,
	0, 231, 918, 0, 901, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 921, 245, 246, 904, 902, 903, 908,
	906, 905, 907, 247, 248, 249, 250, 892, 252, 885,
	884, 809, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 883, 259, 0, 260, 0, 261, 262, 0, 815,
	263, 264, 266, 269, 265, 270, 271, 272, 938, 939,
	828, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	882, 880, 881, 0, 278, 0, 279, 0, 0, 922,
	280, 281, 0, 282, 945, 0, 838, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 913, 914, 917, 924,
	0, 915, 859, 0, 0, 0, 210, 291, 293, 300,
	0, 923, 294, 871, 862, 873, 875, 876, 877, 872,
	0, 864, 0, 301, 925, 926, 302, 303, 304, 927,
	897, 898, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 946, 928, 314, 315, 929, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 851, 325, 930, 328, 329, 331, 330, 806,
	211, 931, 829, 916, 886, 332, 333, 0, 860, 335,
	861, 0, 0, 338, 339, 0, 0, 340, 478, 932,
	341, 933, 940, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 941, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 879, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 934, 375, 376, 377,
	378, 816, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 852, 853, 855, 856, 392,
	396, 399, 400, 909, 401, 381, 382, 402, 935, 403,
	874, 854, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 920, 410, 411, 412, 942, 0, 417, 418, 416,
	0, 419, 420, 421, 422, 423, 267, 424, 268, 850,
	0, 893, 894, 895, 896, 0, 0, 426, 427, 943,
	428, 944, 827, 429, 430, 431, 0, 432, 433, 0,
	810, 434, 435, 436, 437, 439, 910, 440, 0, 858,
	441, 442, 443, 492, 890, 937, 0, 445, 444, 495,
	0, 0, 0, 0, 446, 447, 496, 448, 449, 450,
	807, 0, 0, 0, 0, 0, 0, 0, 805, 0,
	0, 0, 0, 803, 804, 863, 820, 821, 822, 818,
	819, 832, 833, 0, 0, 0, 0, 831, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 912, 837, 0, 0, 0, 218, 219,
	220, 452, 878, 857, 889, 847, 888, 887, 0, 224,
	849, 848, 227, 228, 229, 839, 911, 230, 947, 948,
	458, 0, 231, 918, 0, 901, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 921, 245, 3282, 904, 902, 903,
	908, 906, 905, 907, 247, 248, 249, 250, 892, 252,
	885, 884, 809, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 883, 259, 0, 260, 0, 261, 262, 0,
	815, 263, 264, 266, 269, 265, 270, 271, 272, 938,
	939, 828, 209, 0, 0, 0, 0, 0, 273, 274,
	275, 882, 880, 881, 0, 278, 0, 279, 0, 0,
	922, 280, 281, 0, 282, 945, 0, 838, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 913, 914, 917,
	924, 0, 915, 859, 0, 0, 0, 210, 291, 293,
	300, 0, 923, 294, 871, 862, 873, 875, 876, 877,
	872, 0, 864, 0, 301, 925, 926, 302, 303, 304,
	927, 897, 898, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 946, 928, 314, 315, 929, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 851, 325, 930, 328, 329, 331, 330,
	806, 211, 931, 829, 916, 886, 332, 333, 0, 860,
	335, 861, 0, 0, 338, 339, 0, 0, 340, 478,
	932, 341, 933, 940, 342, 337, 343, 344, 345, 346,
	347, 348, 0, 349, 941, 350, 481, 351, 0, 352,
	0, 353, 354, 355, 356, 357, 358, 879, 359, 360,
	0, 361, 362, 363, 364, 365, 0, 367, 368, 369,
	366, 370, 371, 372, 373, 0, 374, 934, 375, 376,
	377, 378, 816, 379, 0, 380, 384, 385, 386, 387,
	388, 389, 390, 0, 397, 398, 852, 853, 855, 856,
	392, 396, 399, 400, 909, 401, 381, 382, 402, 935,
	403, 874, 854, 405, 0, 415, 406, 407, 408, 383,
	409, 413, 920, 410, 411, 412, 942, 0, 417, 418,
	416, 0, 419, 420, 421, 422, 423, 267, 424, 268,
	850, 0, 893, 894, 895, 896, 0, 0, 426, 427,
	943, 428, 944, 827, 429, 430, 431, 0, 3281, 433,
	0, 810, 434, 435, 436, 437, 439, 910, 440, 0,
	858, 441, 442, 443, 492, 890, 937, 0, 445, 444,
	495, 0, 0, 0, 0, 446, 447, 496, 448, 449,
	450, 807, 0, 0, 0, 0, 0, 0, 0, 805,
	0, 0, 0, 0, 803, 804, 863, 820, 821, 822,
	818, 819, 832, 833, 0, 0, 0, 0, 831, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 912, 837, 0, 0, 0, 218,
	219, 220, 3280, 878, 857, 889, 847, 888, 887, 0,
	224, 849, 848, 227, 228, 229, 839, 911, 230, 947,
	948, 458, 0, 231, 918, 0, 901, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 921, 245, 3282, 904, 902,
	903, 908, 906, 905, 907, 247, 248, 249, 250, 892,
	252, 885, 884, 809, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 883, 259, 0, 260, 0, 261, 262,
	0, 815, 263, 264, 266, 269, 265, 270, 271, 272,
	938, 939, 828, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 882, 880, 881, 0, 278, 0, 279, 0,
	0, 922, 280, 281, 0, 282, 945, 0, 838, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 913, 914,
	917, 924, 0, 915, 859, 0, 0, 0, 210, 291,
	293, 300, 0, 923, 294, 871, 862, 873, 875, 876,
	877, 872, 0, 864, 0, 301, 925, 926, 302, 303,
	304, 927, 897, 898, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 946, 928, 314, 315, 929,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 851, 325, 930, 328, 329, 331,
	330, 806, 211, 931, 829, 916, 886, 332, 333, 0,
	860, 335, 861, 0, 0, 338, 339, 0, 0, 340,
	478, 932, 341, 933, 940, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 941, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 356, 357, 358, 879, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 934, 375,
	376, 377, 378, 816, 379, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 0, 397, 398, 852, 853, 855,
	856, 392, 396, 399, 400, 909, 401, 381, 382, 402,
	935, 403, 874, 854, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 920, 410, 411, 412, 942, 0, 417,
	418, 416, 0, 419, 420, 421, 422, 423, 267, 424,
	268, 850, 0, 893, 894, 895, 896, 0, 0, 426,
	427, 943, 428, 944, 827, 429, 430, 431, 0, 3281,
	433, 0, 810, 434, 435, 436, 437, 439, 910, 440,
	0, 858, 441, 442, 443, 492, 890, 937, 0, 445,
	444, 495, 0, 0, 0, 0, 446, 447, 496, 448,
	449, 450, 807, 0, 0, 0, 0, 0, 0, 0,
	805, 0, 0, 0, 0, 803, 804, 863, 820, 821,
	822, 818, 819, 832, 833, 0, 0, 0, 0, 831,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 912, 837, 0, 0, 0,
	218, 219, 220, 452, 878, 857, 889, 847, 888, 887,
	0, 224, 849, 848, 227, 228, 229, 839, 911, 230,
	947, 948, 458, 0, 231, 918, 0, 901, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 921, 245, 246, 904,
	902, 903, 908, 906, 905, 907, 247, 248, 249, 250,
	892, 252, 885, 884, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 883, 259, 0, 260, 0, 261,
	262, 0, 815, 263, 264, 266, 269, 265, 270, 271,
	272, 938, 939, 828, 209, 0, 0, 0, 0, 0,
	273, 274, 275, 882, 880, 881, 0, 278, 0, 279,
	0, 0, 922, 280, 281, 0, 282, 945, 0, 838,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 913,
	914, 917, 924, 0, 915, 859, 0, 0, 0, 210,
	291, 293, 300, 0, 923, 294, 871, 862, 873, 875,
	876, 877, 872, 0, 864, 0, 301, 925, 926, 302,
	303, 304, 927, 897, 898, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 946, 928, 314, 315,
	929, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 851, 325, 930, 328, 329,
	331, 330, 0, 211, 931, 829, 916, 886, 332, 333,
	0, 860, 335, 861, 0, 0, 338, 339, 0, 0,
	340, 478, 932, 341, 933, 940, 342, 337, 343, 344,
	345, 346, 347, 348, 0, 349, 941, 350, 481, 351,
	0, 352, 0, 353, 354, 355, 356, 357, 358, 879,
	359, 360, 0, 361, 362, 363, 364, 365, 0, 367,
	368, 369, 366, 370, 371, 372, 373, 0, 374, 934,
	375, 376, 377, 378, 816, 379, 0, 380, 384, 385,
	386, 387, 388, 389, 390, 0, 397, 398, 852, 853,
	855, 856, 392, 396, 399, 400, 909, 401, 381, 382,
	402, 935, 403, 874, 854, 405, 0, 415, 406, 407,
	408, 383, 409, 413, 920, 410, 411, 412, 942, 0,
	417, 418, 416, 0, 419, 420, 421, 422, 423, 267,
	424, 268, 850, 0, 893, 894, 895, 896, 0, 0,
	426, 427, 943, 428, 944, 827, 429, 430, 431, 0,
	432, 433, 0, 0, 434, 435, 436, 437, 439, 910,
	440, 0, 858, 441, 442, 443, 492, 890, 937, 0,
	445, 444, 495, 0, 0, 0, 0, 446, 447, 496,
	448, 449, 450, 863, 820, 821, 822, 818, 819, 832,
	0, 2044, 0, 0, 0, 0, 2042, 2043, 0, 0,
	212, 213, 214, 215, 216, 833, 217, 0, 0, 0,
	831, 912, 837, 0, 0, 0, 218, 219, 220, 0,
	878, 857, 889, 847, 888, 887, 0, 224, 849, 848,
	227, 228, 229, 839, 911, 230, 947, 948, 458, 0,
	231, 918, 0, 901, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 921, 245, 3282, 904, 902, 903, 908, 906,
	905, 907, 247, 248, 249, 250, 892, 252, 885, 884,
	809, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	883, 259, 0, 260, 0, 261, 262, 0, 815, 263,
	264, 266, 269, 265, 270, 271, 272, 938, 939, 828,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 882,
	880, 881, 0, 278, 0, 279, 0, 0, 922, 280,
	281, 0, 282, 945, 0, 838, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 913, 914, 917, 0, 0,
	915, 859, 0, 0, 0, 210, 291, 293, 300, 0,
	923, 294, 871, 862, 873, 875, 876, 877, 872, 0,
	864, 0, 301, 0, 0, 302, 303, 304, 927, 897,
	898, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 946, 928, 314, 315, 0, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 851, 325, 930, 328, 329, 331, 330, 806, 211,
	0, 829, 916, 886, 332, 333, 0, 860, 335, 861,
	0, 0, 338, 339, 0, 0, 340, 478, 932, 341,
	933, 940, 342, 337, 343, 344, 345, 346, 347, 348,
	0, 349, 941, 350, 481, 351, 0, 352, 0, 353,
	354, 355, 356, 357, 358, 879, 359, 360, 0, 361,
	362, 363, 364, 365, 0, 367, 368, 369, 366, 370,
	371, 372, 373, 0, 374, 934, 375, 376, 377, 378,
	816, 379, 0, 380, 384, 385, 386, 387, 388, 389,
	390, 0, 397, 398, 852, 853, 855, 856, 392, 396,
	399, 400, 909, 401, 381, 382, 402, 0, 403, 874,
	854, 405, 0, 415, 406, 407, 408, 383, 409, 413,
	920, 410, 411, 412, 942, 0, 417, 418, 416, 0,
	419, 420, 421, 422, 423, 267, 424, 268, 850, 0,
	893, 894, 895, 896, 0, 0, 426, 427, 943, 428,
	944, 827, 429, 430, 431, 0, 3281, 433, 0, 810,
	434, 435, 436, 437, 439, 910, 440, 0, 858, 441,
	442, 443, 492, 890, 937, 0, 445, 444, 495, 0,
	0, 0, 0, 446, 447, 496, 448, 449, 450, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 796, 0,
	984, 0, 803, 804, 0, 0, 0, 0, 0, 0,
	0, 833, 0, 0, 0, 0, 831, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 912, 0,
	0, 0, 0, 218, 219, 220, 452, 453, 221, 454,
	222, 223, 455, 0, 224, 225, 226, 227, 228, 229,
	0, 911, 230, 456, 457, 458, 0, 231, 918, 0,
	901, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 921,
	245, 246, 904, 902, 903, 908, 906, 905, 907, 247,
	248, 249, 250, 251, 252, 460, 461, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 462, 263, 264, 266, 269,
	265, 270, 271, 272, 938, 939, 0, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 465, 276, 277, 0,
	278, 0, 279, 0, 0, 922, 280, 281, 0, 282,
	945, 0, 467, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 913, 914, 917, 924, 0, 915, 292, 0,
	0, 0, 210, 291, 293, 300, 0, 923, 294, 471,
	296, 295, 297, 298, 299, 472, 0, 473, 0, 301,
	925, 926, 302, 303, 304, 927, 305, 306, 0, 0,
	307, 308, 309, 310, 971, 312, 311, 0, 313, 946,
	928, 314, 315, 929, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	930, 328, 329, 331, 330, 0, 211, 931, 0, 916,
	477, 332, 333, 0, 334, 335, 336, 0, 976, 338,
	339, 0, 0, 340, 478, 932, 341, 933, 940, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 941,
	350, 481, 351, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 482, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 934, 375, 376, 377, 378, 483, 978, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 175, 397,
	398, 391, 393, 394, 395, 392, 396, 399, 400, 909,
	401, 381, 382, 402, 935, 403, 484, 404, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 414, 410, 411,
	412, 942, 0, 417, 418, 416, 177, 419, 420, 421,
	422, 423, 267, 424, 268, 425, 0, 486, 487, 488,
	489, 0, 0, 426, 427, 943, 428, 944, 0, 429,
	430, 431, 0, 432, 433, 0, 0, 434, 435, 436,
	437, 439, 910, 440, 0, 438, 441, 442, 443, 1283,
	493, 494, 0, 445, 444, 495, 984, 0, 0, 169,
	446, 447, 496, 448, 449, 450, 0, 170, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 912, 0, 968, 0, 1557, 218,
	219, 220, 452, 453, 221, 454, 222, 223, 455, 0,
	224, 225, 226, 227, 228, 229, 0, 911, 230, 456,
	457, 458, 0, 231, 918, 0, 901, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 921, 245, 246, 904, 902,
	903, 908, 906, 905, 907, 247, 248, 249, 250, 251,
	252, 460, 461, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 462, 263, 264, 266, 269, 265, 270, 271, 272,
	938, 939, 0, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 465, 276, 277, 0, 278, 0, 279, 0,
	0, 922, 280, 281, 0, 282, 945, 0, 467, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 913, 914,
	917, 924, 0, 915, 292, 0, 0, 0, 210, 291,
	293, 300, 0, 923, 294, 471, 296, 295, 297, 298,
	299, 472, 0, 473, 0, 301, 925, 926, 302, 303,
	304, 927, 305, 306, 0, 0, 307, 308, 309, 310,
	971, 312, 311, 0, 313, 946, 928, 314, 315, 929,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 930, 328, 329, 331,
	330, 0, 211, 931, 0, 916, 477, 332, 333, 0,
	334, 335, 336, 0, 976, 338, 339, 0, 0, 340,
	478, 932, 341, 933, 940, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 941, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 356, 357, 358, 482, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 934, 375,
	376, 377, 378, 483, 978, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 175, 397, 398, 391, 393, 394,
	395, 392, 396, 399, 400, 909, 401, 381, 382, 402,
	935, 403, 484, 404, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 414, 410, 411, 412, 942, 0, 417,
	418, 416, 177, 419, 420, 421, 422, 423, 267, 424,
	268, 425, 0, 486, 487, 488, 489, 0, 0, 426,
	427, 943, 428, 944, 0, 429, 430, 431, 0, 432,
	433, 0, 0, 434, 435, 436, 437, 439, 910, 440,
	0, 438, 441, 442, 443, 1283, 493, 494, 0, 445,
	444, 495, 0, 0, 0, 169, 446, 447, 496, 448,
	449, 450, 0, 170, 0, 0, 2462, 0, 984, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 968, 0, 1557, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 912, 0, 0, 0,
	0, 218, 219, 220, 452, 453, 221, 454, 222, 223,
	455, 0, 224, 225, 226, 227, 228, 229, 0, 911,
	230, 456, 457, 458, 0, 231, 918, 0, 901, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 921, 245, 246,
	904, 902, 903, 908, 906, 905, 907, 247, 248, 249,
	250, 251, 252, 460, 461, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 462, 263, 264, 266, 269, 265, 270,
	271, 272, 938, 939, 0, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 465, 276, 277, 0, 278, 0,
	279, 0, 0, 922, 280, 281, 0, 282, 945, 0,
	467, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	913, 914, 917, 924, 0, 915, 292, 0, 0, 0,
	210, 291, 293, 300, 0, 923, 294, 471, 296, 295,
	297, 298, 299, 472, 0, 473, 0, 301, 925, 926,
	302, 303, 304, 927, 305, 306, 0, 0, 307, 308,
	309, 310, 971, 312, 311, 0, 313, 946, 928, 314,
	315, 929, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 930, 328,
	329, 331, 330, 0, 211, 931, 0, 916, 477, 332,
	333, 0, 334, 335, 336, 0, 976, 338, 339, 0,
	0, 340, 478, 932, 341, 933, 940, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 941, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	482, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	934, 375, 376, 377, 378, 483, 978, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 0, 397, 398, 391,
	393, 394, 395, 392, 396, 399, 400, 909, 401, 381,
	382, 402, 935, 403, 484, 404, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 414, 410, 411, 412, 942,
	0, 417, 418, 416, 0, 419, 420, 421, 422, 423,
	267, 424, 268, 425, 0, 486, 487, 488, 489, 0,
	0, 426, 427, 943, 428, 944, 0, 429, 430, 431,
	0, 432, 433, 0, 0, 434, 435, 436, 437, 439,
	910, 440, 0, 438, 441, 442, 443, 492, 493, 494,
	0, 445, 444, 495, 0, 967, 0, 984, 446, 447,
	496, 448, 449, 450, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 968, 912, 973, 0, 0, 0,
	218, 219, 220, 452, 453, 221, 454, 222, 223, 455,
	0, 224, 225, 226, 227, 228, 229, 0, 911, 230,
	456, 457, 458, 0, 231, 918, 0, 901, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 921, 245, 246, 904,
	902, 903, 908, 906, 905, 907, 247, 248, 249, 250,
	251, 252, 460, 461, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 462, 263, 264, 266, 269, 265, 270, 271,
	272, 938, 939, 0, 209, 0, 0, 0, 0, 0,
	273, 274, 275, 465, 276, 277, 0, 278, 0, 279,
	0, 0, 922, 280, 281, 0, 282, 945, 0, 467,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 913,
	914, 917, 924, 0, 915, 292, 0, 0, 0, 210,
	291, 293, 300, 0, 923, 294, 471, 296, 295, 297,
	298, 299, 472, 0, 473, 0, 301, 925, 926, 302,
	303, 304, 927, 305, 306, 0, 0, 307, 308, 309,
	310, 971, 312, 311, 0, 313, 946, 928, 314, 315,
	929, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 327, 325, 930, 328, 329,
	331, 330, 0, 211, 931, 0, 916, 477, 332, 333,
	0, 334, 335, 336, 0, 976, 338, 339, 0, 0,
	340, 478, 932, 341, 933, 940, 342, 337, 343, 344,
	345, 346, 347, 348, 0, 349, 941, 350, 481, 351,
	0, 352, 0, 353, 354, 355, 356, 357, 358, 482,
	359, 360, 0, 361, 362, 363, 364, 365, 0, 367,
	368, 369, 366, 370, 371, 372, 373, 0, 374, 934,
	375, 376, 377, 378, 483, 978, 0, 380, 384, 385,
	386, 387, 388, 389, 390, 0, 397, 398, 391, 393,
	394, 395, 392, 396, 399, 400, 909, 401, 381, 382,
	402, 935, 403, 484, 404, 405, 0, 415, 406, 407,
	408, 383, 409, 413, 414, 410, 411, 412, 942, 0,
	417, 418, 416, 0, 419, 420, 421, 422, 423, 267,
	424, 268, 425, 0, 486, 487, 488, 489, 0, 0,
	426, 427, 943, 428, 944, 0, 429, 430, 431, 0,
	432, 433, 0, 0, 434, 435, 436, 437, 439, 910,
	440, 0, 438, 441, 442, 443, 492, 493, 494, 0,
	445, 444, 495, 984, 0, 0, 0, 446, 447, 496,
	448, 449, 450, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 912, 0, 968, 0, 973, 218, 219, 220, 452,
	453, 221, 454, 222, 223, 455, 0, 224, 225, 226,
	227, 228, 229, 0, 911, 230, 456, 457, 458, 0,
	231, 918, 0, 901, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 921, 245, 246, 904, 902, 903, 908, 906,
	905, 907, 247, 248, 249, 250, 251, 252, 460, 461,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 462, 263,
	264, 266, 269, 265, 270, 271, 272, 938, 939, 0,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 465,
	276, 277, 0, 278, 0, 279, 0, 0, 922, 280,
	281, 0, 282, 945, 0, 467, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 913, 914, 917, 924, 0,
	915, 292, 0, 0, 0, 210, 291, 293, 300, 0,
	923, 294, 471, 296, 295, 297, 298, 299, 472, 0,
	473, 0, 301, 925, 926, 302, 303, 304, 927, 305,
	306, 0, 0, 307, 308, 309, 310, 971, 312, 311,
	0, 313, 946, 928, 314, 315, 929, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 930, 328, 329, 331, 330, 0, 211,
	931, 0, 916, 477, 332, 333, 0, 334, 335, 336,
	0, 976, 338, 339, 0, 0, 340, 478, 932, 341,
	933, 940, 342, 337, 343, 344, 345, 346, 347, 348,
	0, 349, 941, 350, 481, 351, 0, 352, 0, 353,
	354, 355, 356, 357, 358, 482, 359, 360, 0, 361,
	362, 363, 364, 365, 0, 367, 368, 369, 366, 370,
	371, 372, 373, 0, 374, 934, 375, 376, 377, 378,
	483, 978, 0, 380, 384, 385, 386, 387, 388, 389,
	390, 0, 397, 398, 391, 393, 394, 395, 392, 396,
	399, 400, 909, 401, 381, 382, 402, 935, 403, 484,
	404, 405, 0, 415, 406, 407, 408, 383, 409, 413,
	414, 410, 411, 412, 942, 0, 417, 418, 416, 0,
	419, 420, 421, 422, 423, 267, 424, 268, 425, 0,
	486, 487, 488, 489, 0, 0, 426, 427, 943, 428,
	944, 0, 429, 430, 431, 0, 432, 433, 0, 0,
	434, 435, 436, 437, 439, 910, 440, 0, 438, 441,
	442, 443, 492, 493, 494, 0, 445, 444, 495, 984,
	0, 0, 0, 446, 447, 496, 448, 449, 450, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 912, 0, 968,
	0, 973, 218, 219, 220, 452, 453, 221, 454, 222,
	223, 455, 0, 224, 225, 226, 227, 228, 229, 0,
	911, 230, 456, 457, 458, 0, 231, 918, 0, 901,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 921, 245,
	246, 904, 902, 903, 908, 906, 905, 907, 247, 248,
	249, 250, 251, 252, 460, 461, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 462, 263, 264, 266, 269, 265,
	270, 271, 272, 938, 939, 0, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 465, 276, 277, 0, 278,
	0, 279, 0, 0, 922, 280, 281, 0, 282, 945,
	0, 467, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 913, 914, 917, 924, 0, 915, 292, 0, 0,
	0, 210, 291, 293, 300, 0, 923, 294, 471, 296,
	295, 297, 298, 299, 472, 0, 473, 0, 301, 925,
	926, 302, 303, 304, 927, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 946, 928,
	314, 315, 929, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 930,
	328, 329, 331, 330, 0, 211, 931, 0, 916, 477,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	0, 0, 340, 478, 932, 341, 933, 940, 342, 337,
	343, 344, 345, 346, 347, 348, 0, 349, 941, 350,
	481, 351, 0, 352, 0, 353, 354, 355, 356, 357,
	358, 482, 359, 360, 0, 361, 362, 363, 364, 365,
	0, 367, 368, 369, 366, 370, 371, 372, 373, 0,
	374, 934, 375, 376, 377, 378, 483, 978, 0, 380,
	384, 385, 386, 387, 388, 389, 390, 0, 397, 398,
	391, 393, 394, 395, 392, 396, 399, 400, 909, 401,
	381, 382, 402, 935, 403, 484, 404, 405, 0, 415,
	406, 407, 408, 383, 409, 413, 414, 410, 411, 412,
	942, 0, 417, 418, 416, 0, 419, 420, 421, 422,
	423, 267, 424, 268, 425, 0, 486, 487, 488, 489,
	0, 0, 426, 427, 943, 428, 944, 0, 429, 430,
	431, 0, 432, 433, 0, 0, 434, 435, 436, 437,
	439, 910, 440, 0, 438, 441, 442, 443, 492, 493,
	494, 0, 445, 444, 495, 796, 0, 1139, 0, 446,
	447, 496, 448, 449, 450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 451, 0, 1459, 0, 0,
	218, 219, 220, 452, 453, 221, 454, 222, 223, 455,
	0, 224, 225, 226, 227, 228, 229, 0, 0, 230,
	456, 457, 458, 0, 231, 459, 0, 1043, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 921, 245, 246, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 460, 461, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 462, 263, 264, 266, 269, 265, 270, 271,
	272, 463, 464, 0, 209, 0, 0, 0, 0, 0,
	273, 274, 275, 465, 276, 277, 0, 278, 0, 279,
	0, 0, 922, 280, 281, 0, 282, 466, 0, 467,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 468,
	469, 470, 924, 0, 474, 292, 0, 0, 0, 0,
	291, 293, 300, 0, 923, 294, 471, 296, 295, 297,
	298, 299, 472, 0, 473, 0, 301, 925, 926, 302,
	303, 304, 927, 305, 306, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 475, 928, 314, 315,
	929, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 327, 325, 930, 328, 329,
	331, 330, 0, 0, 931, 0, 476, 477, 332, 333,
	0, 334, 335, 336, 0, 0, 338, 339, 0, 0,
	340, 478, 932, 341, 933, 479, 342, 337, 343, 344,
	345, 346, 347, 348, 0, 349, 480, 350, 481, 351,
	0, 352, 0, 353, 354, 355, 356, 357, 358, 482,
	359, 360, 0, 361, 362, 363, 364, 365, 0, 367,
	368, 369, 366, 370, 371, 372, 373, 0, 374, 934,
	375, 376, 377, 378, 483, 379, 0, 380, 384, 385,
	386, 387, 388, 389, 390, 175, 397, 398, 391, 393,
	394, 395, 392, 396, 399, 400, 0, 401, 381, 382,
	402, 935, 403, 484, 404, 405, 0, 415, 406, 407,
	408, 383, 409, 413, 414, 410, 411, 412, 485, 0,
	417, 418, 416, 177, 419, 420, 421, 422, 423, 267,
	424, 268, 425, 0, 486, 487, 488, 489, 0, 0,
	426, 427, 490, 428, 491, 0, 429, 430, 431, 0,
	432, 433, 0, 0, 434, 435, 436, 437, 439, 0,
	440, 0, 438, 441, 442, 443, 1283, 493, 494, 0,
	445, 444, 495, 1280, 0, 1139, 169, 446, 447, 496,
	448, 449, 450, 0, 170, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 451, 0, 147, 0, 0, 218, 219,
	220, 452, 453, 221, 454, 222, 223, 455, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 456, 457,
	458, 0, 231, 459, 0, 1043, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 921, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	460, 461, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	462, 263, 264, 266, 269, 265, 270, 271, 272, 463,
	464, 0, 209, 0, 0, 0, 0, 0, 273, 274,
	275, 465, 276, 277, 0, 278, 0, 279, 0, 0,
	922, 280, 281, 0, 282, 466, 0, 467, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 468, 469, 470,
	924, 0, 474, 292, 0, 0, 0, 0, 291, 293,
	300, 0, 923, 294, 471, 296, 295, 297, 298, 299,
	472, 0, 473, 0, 301, 925, 926, 302, 303, 304,
	927, 305, 306, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 475, 928, 314, 315, 929, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 930, 328, 329, 331, 330,
	0, 0, 931, 0, 476, 477, 332, 333, 0, 334,
	335, 336, 0, 0, 338, 339, 0, 0, 340, 478,
	932, 341, 933, 479, 342, 337, 343, 344, 345, 346,
	347, 348, 0, 349, 480, 350, 481, 351, 0, 352,
	0, 353, 354, 355, 356, 357, 358, 482, 359, 360,
	0, 361, 362, 363, 364, 365, 0, 367, 368, 369,
	366, 370, 371, 372, 373, 0, 374, 934, 375, 376,
	377, 378, 483, 379, 0, 380, 384, 385, 386, 387,
	388, 389, 390, 175, 397, 398, 391, 393, 394, 395,
	392, 396, 399, 400, 0, 401, 381, 382, 402, 935,
	403, 484, 404, 405, 0, 415, 406, 407, 408, 383,
	409, 413, 414, 410, 411, 412, 485, 0, 417, 418,
	416, 177, 419, 420, 421, 422, 423, 267, 424, 268,
	425, 0, 486, 487, 488, 489, 0, 0, 426, 427,
	490, 428, 491, 0, 429, 430, 431, 0, 432, 433,
	0, 0, 434, 435, 436, 437, 439, 0, 440, 0,
	438, 441, 442, 443, 1283, 493, 494, 0, 445, 444,
	495, 0, 0, 0, 169, 446, 447, 496, 448, 449,
	450, 0, 170, 0, 0, 0, 0, 1139, 1138, 0,
	0, 0, 0, 1136, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 451, 0, 0, 0, 0,
	218, 219, 220, 452, 453, 221, 454, 222, 223, 455,
	0, 224, 225, 226, 227, 228, 229, 0, 0, 230,
	456, 457, 458, 0, 231, 459, 0, 1043, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 921, 245, 246, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 460, 461, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 462, 263, 264, 266, 269, 265, 270, 271,
	272, 463, 464, 0, 209, 0, 0, 0, 0, 0,
	273, 274, 275, 465, 276, 277, 0, 278, 0, 279,
	0, 0, 922, 280, 281, 0, 282, 466, 0, 467,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 468,
	469, 470, 924, 0, 474, 292, 0, 0, 0, 0,
	291, 293, 300, 0, 923, 294, 471, 296, 295, 297,
	298, 299, 472, 0, 473, 0, 301, 925, 926, 302,
	303, 304, 927, 305, 306, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 475, 928, 314, 315,
	929, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 327, 325, 930, 328, 329,
	331, 330, 0, 0, 931, 0, 476, 477, 332, 333,
	0, 334, 335, 336, 0, 0, 338, 339, 0, 0,
	340, 478, 932, 341, 933, 479, 342, 337, 343, 344,
	345, 346, 347, 348, 0, 349, 480, 350, 481, 351,
	0, 352, 0, 353, 354, 355, 356, 357, 358, 482,
	359, 360, 0, 361, 362, 363, 364, 365, 0, 367,
	368, 369, 366, 370, 371, 372, 373, 0, 374, 934,
	375, 376, 377, 378, 483, 379, 0, 380, 384, 385,
	386, 387, 388, 389, 390, 0, 397, 398, 391, 393,
	394, 395, 392, 396, 399, 400, 0, 401, 381, 382,
	402, 935, 403, 484, 404, 405, 0, 415, 406, 407,
	408, 383, 409, 413, 414, 410, 411, 412, 485, 0,
	417, 418, 416, 0, 419, 420, 421, 422, 423, 267,
	424, 268, 425, 0, 486, 487, 488, 489, 0, 0,
	426, 427, 490, 428, 491, 0, 429, 430, 431, 0,
	432, 433, 0, 0, 434, 435, 436, 437, 439, 0,
	440, 0, 438, 441, 442, 443, 492, 493, 494, 0,
	445, 444, 495, 0, 0, 0, 0, 446, 447, 496,
	448, 449, 450, 1139, 1138, 0, 0, 0, 0, 1136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 2649, 217, 0, 0, 0,
	0, 451, 0, 0, 0, 0, 218, 219, 220, 452,
	453, 221, 454, 222, 223, 455, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 456, 457, 458, 0,
	231, 459, 0, 1043, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 921, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 460, 461,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 462, 263,
	264, 266, 269, 265, 270, 271, 272, 463, 464, 0,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 465,
	276, 277, 0, 278, 0, 279, 0, 0, 922, 280,
	281, 0, 282, 466, 0, 467, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 468, 469, 470, 924, 0,
	474, 292, 0, 0, 0, 0, 291, 293, 300, 0,
	923, 294, 471, 296, 295, 297, 298, 299, 472, 0,
	473, 0, 301, 925, 926, 302, 303, 304, 927, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 475, 928, 314, 315, 929, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 930, 328, 329, 331, 330, 0, 0,
	931, 0, 476, 477, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 339, 0, 0, 340, 478, 932, 341,
	933, 479, 342, 337, 343, 344, 345, 346, 347, 348,
	0, 349, 480, 350, 481, 351, 0, 352, 0, 353,
	354, 355, 356, 357, 358, 482, 359, 360, 0, 361,
	362, 363, 364, 365, 0, 367, 368, 369, 366, 370,
	371, 372, 373, 0, 374, 934, 375, 376, 377, 378,
	483, 379, 0, 380, 384, 385, 386, 387, 388, 389,
	390, 0, 397, 398, 391, 393, 394, 395, 392, 396,
	399, 400, 0, 401, 381, 382, 402, 935, 403, 484,
	404, 405, 0, 415, 406, 407, 408, 383, 409, 413,
	414, 410, 411, 412, 485, 0, 417, 418, 416, 0,
	419, 420, 421, 422, 423, 267, 424, 268, 425, 0,
	486, 487, 488, 489, 0, 0, 426, 427, 490, 428,
	491, 0, 429, 430, 431, 0, 432, 433, 0, 0,
	434, 435, 436, 437, 439, 0, 440, 0, 438, 441,
	442, 443, 492, 493, 494, 0, 445, 444, 495, 984,
	0, 0, 0, 446, 447, 496, 448, 449, 450, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 912, 0, 0,
	0, 1287, 218, 219, 220, 452, 453, 221, 454, 222,
	223, 455, 0, 224, 225, 226, 227, 228, 229, 0,
	911, 230, 456, 457, 458, 0, 231, 918, 0, 901,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 921, 245,
	246, 904, 902, 903, 908, 906, 905, 907, 247, 248,
	249, 250, 251, 252, 460, 461, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 462, 263, 264, 266, 269, 265,
	270, 271, 272, 938, 939, 0, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 465, 276, 277, 0, 278,
	0, 279, 0, 0, 922, 280, 281, 0, 282, 945,
	0, 467, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 913, 914, 917, 924, 0, 915, 292, 0, 0,
	0, 210, 291, 293, 300, 0, 923, 294, 471, 296,
	295, 297, 298, 299, 472, 0, 473, 0, 301, 925,
	926, 302, 303, 304, 927, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 946, 928,
	314, 315, 929, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 930,
	328, 329, 331, 330, 0, 211, 931, 0, 916, 477,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	0, 0, 340, 478, 932, 341, 933, 940, 342, 337,
	343, 344, 345, 346, 347, 348, 0, 349, 941, 350,
	481, 351, 0, 352, 0, 353, 354, 355, 356, 357,
	358, 482, 359, 360, 0, 361, 362, 363, 364, 365,
	0, 367, 368, 369, 366, 370, 371, 372, 373, 0,
	374, 934, 375, 376, 377, 378, 483, 379, 0, 380,
	384, 385, 386, 387, 388, 389, 390, 0, 397, 398,
	391, 393, 394, 395, 392, 396, 399, 400, 909, 401,
	381, 382, 402, 935, 403, 484, 404, 405, 0, 415,
	406, 407, 408, 383, 409, 413, 414, 410, 411, 412,
	942, 0, 417, 418, 416, 0, 419, 420, 421, 422,
	423, 267, 424, 268, 425, 0, 486, 487, 488, 489,
	0, 0, 426, 427, 943, 428, 944, 0, 429, 430,
	431, 0, 432, 433, 0, 0, 434, 435, 436, 437,
	439, 910, 440, 0, 438, 441, 442, 443, 492, 493,
	494, 0, 445, 444, 495, 796, 0, 206, 0, 446,
	447, 496, 448, 449, 450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 451, 0, 0, 0, 0,
	218, 219, 220, 452, 453, 221, 454, 222, 223, 455,
	0, 224, 225, 226, 227, 228, 229, 0, 0, 230,
	456, 457, 458, 0, 231, 459, 0, 0, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 0, 245, 246, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 460, 461, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 462, 263, 264, 266, 269, 265, 270, 271,
	272, 463, 464, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 465, 276, 277, 0, 278, 0, 279,
	0, 0, 0, 280, 281, 0, 282, 466, 0, 467,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 468,
	469, 470, 0, 0, 474, 292, 0, 0, 0, 0,
	291, 293, 300, 0, 0, 294, 471, 296, 295, 297,
	298, 299, 472, 0, 473, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 306, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 475, 0, 314, 315,
	0, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 327, 325, 0, 328, 329,
	331, 330, 0, 0, 0, 0, 476, 477, 332, 333,
	0, 334, 335, 336, 0, 0, 338, 339, 0, 0,
	340, 478, 0, 341, 0, 479, 342, 337, 343, 344,
	345, 346, 347, 348, 0, 349, 480, 350, 481, 351,
	0, 352, 0, 353, 354, 355, 356, 357, 358, 482,
	359, 360, 0, 361, 362, 363, 364, 365, 0, 367,
	368, 369, 366, 370, 371, 372, 373, 0, 374, 0,
	375, 376, 377, 378, 483, 379, 0, 380, 384, 385,
	386, 387, 388, 389, 390, 175, 397, 398, 391, 393,
	394, 395, 392, 396, 399, 400, 0, 401, 381, 382,
	402, 0, 403, 484, 404, 405, 0, 415, 406, 407,
	408, 383, 409, 413, 414, 410, 411, 412, 485, 0,
	417, 418, 416, 177, 419, 420, 421, 422, 423, 267,
	424, 268, 425, 0, 486, 487, 488, 489, 0, 0,
	426, 427, 490, 428, 491, 0, 429, 430, 431, 0,
	432, 433, 0, 0, 434, 435, 436, 437, 439, 0,
	440, 0, 438, 441, 442, 443, 1283, 493, 494, 0,
	445, 444, 495, 206, 0, 0, 169, 446, 447, 496,
	448, 449, 450, 0, 170, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 451, 0, 0, 0, 147, 218, 219, 220, 452,
	453, 221, 454, 222, 223, 455, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 456, 457, 458, 0,
	231, 459, 0, 0, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 0, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 460, 461,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 462, 263,
	264, 266, 269, 265, 270, 271, 272, 463, 464, 0,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 465,
	276, 277, 0, 278, 0, 279, 0, 0, 0, 280,
	281, 0, 282, 466, 0, 467, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 468, 469, 470, 0, 0,
	474, 292, 0, 0, 0, 210, 291, 293, 300, 0,
	0, 294, 471, 296, 295, 297, 298, 299, 472, 0,
	473, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 475, 0, 314, 315, 0, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 0, 328, 329, 331, 330, 0, 211,
	0, 0, 476, 477, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 339, 0, 0, 340, 478, 0, 341,
	0, 479, 342, 337, 343, 344, 345, 346, 347, 348,
	0, 349, 480, 350, 481, 351, 0, 352, 0, 353,
	354, 355, 356, 357, 358, 482, 359, 360, 0, 361,
	362, 363, 364, 365, 0, 367, 368, 369, 366, 370,
	371, 372, 373, 0, 374, 0, 375, 376, 377, 378,
	483, 379, 0, 380, 384, 385, 386, 387, 388, 389,
	390, 0, 397, 398, 391, 393, 394, 395, 392, 396,
	399, 400, 0, 401, 381, 382, 402, 0, 403, 484,
	404, 405, 0, 415, 406, 407, 408, 383, 409, 413,
	414, 410, 411, 412, 485, 0, 417, 418, 416, 0,
	419, 420, 421, 422, 423, 267, 424, 268, 425, 0,
	486, 487, 488, 489, 0, 0, 426, 427, 490, 428,
	491, 0, 429, 430, 431, 0, 432, 433, 0, 0,
	434, 435, 436, 437, 439, 0, 440, 0, 438, 441,
	442, 443, 492, 493, 494, 0, 445, 444, 495, 206,
	0, 0, 0, 446, 447, 496, 448, 449, 450, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 451, 0, 0,
	0, 1562, 218, 219, 220, 452, 453, 221, 454, 222,
	223, 455, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 456, 457, 458, 0, 231, 459, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 460, 461, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 462, 263, 264, 266, 269, 265,
	270, 271, 272, 463, 464, 0, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 465, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 466,
	0, 467, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 468, 469, 470, 0, 0, 474, 292, 0, 0,
	0, 210, 291, 293, 300, 0, 0, 294, 471, 296,
	295, 297, 298, 299, 472, 0, 473, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 475, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 0,
	328, 329, 331, 330, 0, 211, 0, 0, 476, 477,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	0, 0, 340, 478, 0, 341, 0, 479, 342, 337,
	343, 344, 345, 346, 347, 348, 0, 349, 480, 350,
	481, 351, 0, 352, 0, 353, 354, 355, 356, 357,
	358, 482, 359, 360, 0, 361, 362, 363, 364, 365,
	0, 367, 368, 369, 366, 370, 371, 372, 373, 0,
	374, 0, 375, 376, 377, 378, 483, 379, 0, 380,
	384, 385, 386, 387, 388, 389, 390, 0, 397, 398,
	391, 393, 394, 395, 392, 396, 399, 400, 0, 401,
	381, 382, 402, 0, 403, 484, 404, 405, 0, 415,
	406, 407, 408, 383, 409, 413, 414, 410, 411, 412,
	485, 0, 417, 418, 416, 0, 419, 420, 421, 422,
	423, 267, 424, 268, 425, 0, 486, 487, 488, 489,
	0, 0, 426, 427, 490, 428, 491, 0, 429, 430,
	431, 0, 432, 433, 0, 0, 434, 435, 436, 437,
	439, 0, 440, 0, 438, 441, 442, 443, 492, 493,
	494, 0, 445, 444, 495, 206, 0, 0, 0, 446,
	447, 496, 448, 449, 450, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 451, 0, 2599, 0, 0, 218, 219,
	220, 452, 453, 221, 454, 222, 223, 455, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 456, 457,
	458, 0, 231, 459, 0, 0, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	460, 461, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	462, 263, 264, 266, 269, 265, 270, 271, 272, 463,
	464, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 465, 276, 277, 0, 278, 0, 279, 0, 0,
	0, 280, 281, 0, 282, 466, 0, 467, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 468, 469, 470,
	0, 0, 474, 292, 0, 0, 0, 0, 291, 293,
	300, 0, 0, 294, 471, 296, 295, 297, 298, 299,
	472, 0, 473, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 306, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 475, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 0, 328, 329, 331, 330,
	0, 0, 0, 0, 476, 477, 332, 333, 0, 334,
	335, 336, 0, 0, 338, 339, 0, 0, 340, 478,
	0, 341, 0, 479, 342, 337, 343, 344, 345, 346,
	347, 348, 0, 349, 480, 350, 481, 351, 0, 352,
	0, 353, 354, 355, 356, 357, 358, 482, 359, 360,
	0, 361, 362, 363, 364, 365, 0, 367, 368, 369,
	366, 370, 371, 372, 373, 0, 374, 0, 375, 376,
	377, 378, 483, 379, 0, 380, 384, 385, 386, 387,
	388, 389, 390, 0, 397, 398, 391, 393, 394, 395,
	392, 396, 399, 400, 0, 401, 381, 382, 402, 0,
	403, 484, 404, 405, 0, 415, 406, 407, 408, 383,
	409, 413, 414, 410, 411, 412, 485, 0, 417, 418,
	416, 0, 419, 420, 421, 422, 423, 267, 424, 268,
	425, 0, 486, 487, 488, 489, 0, 0, 426, 427,
	490, 428, 491, 0, 429, 430, 431, 0, 432, 433,
	0, 0, 434, 435, 436, 437, 439, 0, 440, 0,
	438, 441, 442, 443, 492, 493, 494, 0, 445, 444,
	495, 206, 0, 0, 0, 446, 447, 496, 448, 449,
	450, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 451,
	0, 0, 0, 2263, 218, 219, 220, 452, 453, 221,
	454, 222, 223, 455, 0, 224, 225, 226, 227, 228,
	229, 0, 0, 230, 456, 457, 458, 0, 231, 459,
	0, 0, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	0, 245, 246, 0, 0, 0, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 460, 461, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 462, 263, 264, 266,
	269, 265, 270, 271, 272, 463, 464, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 465, 276, 277,
	0, 278, 0, 279, 0, 0, 0, 280, 281, 0,
	282, 466, 0, 467, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 468, 469, 470, 0, 0, 474, 292,
	0, 0, 0, 0, 291, 293, 300, 0, 0, 294,
	471, 296, 295, 297, 298, 299, 472, 0, 473, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 306, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	475, 0, 314, 315, 0, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 327,
	325, 0, 328, 329, 331, 330, 0, 0, 0, 0,
	476, 477, 332, 333, 0, 334, 335, 336, 0, 0,
	338, 339, 0, 0, 340, 478, 0, 341, 0, 479,
	342, 337, 343, 344, 345, 346, 347, 348, 0, 349,
	480, 350, 481, 351, 0, 352, 0, 353, 354, 355,
	356, 357, 358, 482, 359, 360, 0, 361, 362, 363,
	364, 365, 0, 367, 368, 369, 366, 370, 371, 372,
	373, 0, 374, 0, 375, 376, 377, 378, 483, 379,
	0, 380, 384, 385, 386, 387, 388, 389, 390, 0,
	397, 398, 391, 393, 394, 395, 392, 396, 399, 400,
	0, 401, 381, 382, 402, 0, 403, 484, 404, 405,
	0, 415, 406, 407, 408, 383, 409, 413, 414, 410,
	411, 412, 485, 0, 417, 418, 416, 0, 419, 420,
	421, 422, 423, 267, 424, 268, 425, 0, 486, 487,
	488, 489, 0, 0, 426, 427, 490, 428, 491, 0,
	429, 430, 431, 0, 432, 433, 0, 0, 434, 435,
	436, 437, 439, 0, 440, 0, 438, 441, 442, 443,
	492, 493, 494, 0, 445, 444, 495, 673, 0, 565,
	0, 446, 447, 496, 448, 449, 450, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 451, 0, 2721,
	0, 0, 218, 219, 220, 452, 453, 221, 454, 222,
	223, 455, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 456, 457, 458, 0, 231, 459, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	571, 250, 251, 252, 460, 461, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 462, 263, 264, 266, 269, 265,
	270, 271, 272, 463, 464, 0, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 465, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 466,
	0, 467, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 468, 469, 470, 0, 0, 474, 292, 0, 0,
	0, 210, 291, 293, 300, 0, 0, 294, 471, 296,
	295, 297, 298, 299, 472, 0, 473, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 475, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 0,
	328, 329, 331, 330, 0, 211, 0, 0, 476, 477,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	0, 0, 340, 478, 0, 341, 0, 479, 342, 337,
	343, 344, 345, 346, 347, 348, 0, 349, 480, 350,
	481, 351, 0, 352, 0, 353, 354, 355, 356, 357,
	358, 482, 359, 360, 0, 361, 362, 363, 364, 365,
	0, 367, 368, 369, 366, 370, 371, 372, 373, 0,
	374, 0, 375, 376, 377, 378, 483, 379, 0, 380,
	384, 385, 386, 387, 388, 389, 390, 0, 397, 398,
	391, 393, 394, 395, 392, 396, 399, 400, 0, 401,
	381, 382, 402, 0, 403, 484, 404, 405, 0, 415,
	406, 407, 408, 383, 409, 413, 414, 410, 411, 412,
	485, 0, 417, 418, 416, 570, 419, 420, 421, 422,
	423, 267, 424, 268, 425, 0, 486, 487, 488, 489,
	0, 0, 426, 427, 490, 428, 491, 0, 429, 430,
	431, 0, 432, 433, 0, 0, 434, 435, 436, 437,
	439, 0, 440, 0, 438, 441, 442, 443, 492, 493,
	494, 0, 445, 444, 495, 0, 564, 0, 565, 446,
	447, 496, 448, 449, 450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	574, 217, 0, 0, 0, 0, 451, 0, 0, 0,
	0, 218, 219, 220, 452, 453, 221, 454, 222, 223,
	455, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 456, 457, 458, 0, 231, 459, 0, 0, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 0, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 571,
	250, 251, 252, 460, 461, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 462, 263, 264, 266, 269, 265, 270,
	271, 272, 463, 464, 0, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 465, 276, 277, 0, 278, 0,
	279, 0, 0, 0, 280, 281, 0, 282, 466, 0,
	467, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	468, 469, 470, 0, 0, 474, 292, 0, 0, 0,
	210, 291, 293, 300, 0, 0, 294, 471, 296, 295,
	297, 298, 299, 472, 0, 473, 0, 301, 0, 0,
	302, 303, 304, 0, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 475, 0, 314,
	315, 0, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 0, 328,
	329, 331, 330, 0, 211, 0, 0, 476, 477, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 0,
	0, 340, 478, 0, 341, 0, 479, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 480, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	482, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	0, 375, 376, 377, 378, 483, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 0, 397, 398, 391,
	393, 394, 395, 392, 396, 399, 400, 0, 401, 381,
	382, 402, 0, 403, 484, 404, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 414, 410, 411, 412, 485,
	0, 417, 418, 416, 570, 419, 420, 421, 422, 423,
	267, 424, 268, 425, 0, 486, 487, 488, 489, 0,
	0, 426, 427, 490, 428, 491, 0, 429, 430, 431,
	0, 432, 433, 0, 0, 434, 435, 436, 437, 439,
	0, 440, 0, 438, 441, 442, 443, 492, 493, 494,
	565, 445, 444, 495, 0, 0, 0, 0, 446, 447,
	496, 448, 449, 450, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 451, 574,
	0, 0, 0, 218, 219, 220, 452, 453, 221, 454,
	222, 223, 455, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 456, 457, 458, 0, 231, 459, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 571, 250, 251, 252, 460, 461, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 462, 263, 264, 266, 269,
	265, 270, 271, 272, 463, 464, 0, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 465, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	466, 0, 467, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 468, 469, 470, 0, 0, 474, 292, 0,
	0, 0, 210, 291, 293, 300, 0, 0, 294, 471,
	296, 295, 297, 298, 299, 472, 0, 473, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 475,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 211, 0, 0, 476,
	477, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 0, 0, 340, 478, 0, 341, 0, 479, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 480,
	350, 481, 351, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 482, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 0, 1835, 376, 377, 378, 483, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 0, 397,
	398, 391, 393, 394, 395, 392, 396, 399, 400, 0,
	401, 381, 382, 402, 0, 403, 484, 404, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 414, 410, 411,
	412, 485, 0, 417, 418, 416, 570, 419, 420, 421,
	422, 423, 267, 424, 268, 425, 0, 486, 487, 488,
	489, 0, 0, 426, 427, 490, 428, 491, 0, 429,
	430, 431, 0, 432, 433, 0, 0, 434, 435, 436,
	437, 439, 0, 440, 0, 438, 441, 442, 443, 492,
	493, 494, 565, 445, 444, 495, 0, 0, 0, 0,
	446, 447, 496, 448, 449, 450, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	451, 574, 0, 0, 0, 218, 219, 220, 452, 453,
	221, 454, 222, 223, 455, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 456, 457, 458, 0, 231,
	459, 0, 0, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 0, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 571, 250, 251, 252, 460, 461, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 462, 263, 264,
	266, 269, 265, 270, 271, 272, 463, 464, 0, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 465, 276,
	277, 0, 278, 0, 279, 0, 0, 0, 280, 281,
	0, 282, 466, 0, 467, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 468, 469, 470, 0, 0, 474,
	292, 0, 0, 0, 210, 291, 293, 300, 0, 0,
	294, 471, 296, 295, 297, 298, 299, 472, 0, 473,
	0, 301, 0, 0, 302, 303, 304, 0, 305, 306,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 475, 0, 314, 315, 0, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 0, 328, 329, 331, 330, 0, 211, 0,
	0, 476, 477, 332, 333, 0, 334, 335, 336, 0,
	0, 338, 339, 0, 0, 340, 478, 0, 341, 0,
	479, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 480, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 482, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 0, 375, 376, 377, 378, 483,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	0, 397, 398, 391, 393, 394, 395, 392, 396, 399,
	400, 0, 401, 381, 382, 402, 0, 403, 484, 404,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 414,
	410, 411, 412, 485, 0, 417, 418, 416, 570, 419,
	420, 421, 422, 423, 267, 424, 268, 425, 0, 486,
	487, 488, 489, 0, 0, 426, 427, 490, 428, 491,
	0, 429, 430, 431, 0, 432, 433, 0, 0, 434,
	435, 436, 437, 439, 0, 440, 0, 438, 441, 442,
	443, 492, 493, 494, 206, 445, 444, 495, 0, 0,
	0, 0, 446, 447, 496, 448, 449, 450, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 451, 574, 0, 0, 0, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 456, 457, 458,
	0, 231, 459, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 460,
	461, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 463, 464,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 466, 0, 467, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 468, 469, 470, 0,
	0, 474, 292, 0, 0, 0, 210, 291, 293, 300,
	0, 0, 294, 471, 296, 295, 297, 298, 299, 472,
	0, 473, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 475, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	211, 0, 0, 476, 477, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 0, 0, 340, 478, 0,
	341, 0, 479, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 480, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 0, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 0, 401, 381, 382, 402, 0, 403,
	484, 404, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 485, 0, 417, 418, 416,
	0, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	0, 486, 487, 488, 489, 0, 0, 426, 427, 490,
	428, 491, 0, 429, 430, 431, 0, 432, 433, 0,
	0, 434, 435, 436, 437, 439, 0, 440, 0, 438,
	441, 442, 443, 492, 493, 494, 0, 445, 444, 495,
	0, 0, 0, 0, 446, 447, 496, 448, 449, 450,
	1308, 0, 1139, 1138, 0, 0, 0, 0, 1136, 0,
	0, 0, 0, 0, 0, 574, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	451, 0, 0, 0, 0, 218, 219, 220, 452, 453,
	221, 454, 222, 223, 455, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 456, 457, 458, 0, 231,
	459, 0, 1043, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 921, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 460, 461, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 462, 263, 264,
	266, 269, 265, 270, 271, 272, 463, 464, 0, 209,
	0, 0, 0, 0, 0, 1307, 274, 275, 465, 276,
	277, 0, 278, 0, 279, 0, 0, 922, 280, 281,
	0, 282, 466, 0, 467, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 468, 469, 470, 924, 0, 474,
	292, 0, 0, 0, 0, 291, 293, 300, 0, 923,
	294, 471, 296, 295, 297, 298, 299, 472, 0, 473,
	0, 301, 925, 926, 302, 303, 304, 927, 305, 306,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 475, 928, 314, 315, 929, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 930, 328, 329, 331, 330, 0, 0, 931,
	0, 476, 477, 332, 333, 0, 334, 335, 336, 0,
	0, 338, 339, 0, 0, 340, 478, 932, 341, 933,
	479, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 480, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 1306, 358, 482, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 934, 375, 376, 377, 378, 483,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	0, 397, 398, 391, 393, 394, 395, 392, 396, 399,
	400, 0, 401, 381, 382, 402, 935, 403, 484, 404,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 414,
	410, 411, 412, 485, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 425, 0, 486,
	487, 488, 489, 0, 0, 426, 427, 490, 428, 491,
	0, 429, 430, 431, 0, 432, 433, 0, 0, 434,
	435, 436, 437, 439, 0, 440, 0, 438, 441, 442,
	443, 492, 493, 494, 0, 445, 444, 495, 0, 0,
	0, 0, 446, 447, 496, 448, 449, 450, 1278, 0,
	1139, 1138, 0, 0, 0, 0, 1136, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 451, 0,
	0, 0, 0, 218, 219, 220, 452, 453, 221, 454,
	222, 223, 455, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 456, 457, 458, 0, 231, 459, 0,
	1043, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 921,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 460, 461, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 462, 263, 264, 266, 269,
	265, 270, 271, 272, 463, 464, 0, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 465, 276, 277, 0,
	278, 0, 279, 0, 0, 922, 280, 281, 0, 282,
	466, 0, 467, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 1277, 469, 470, 924, 0, 474, 292, 0,
	0, 0, 0, 291, 293, 300, 0, 923, 294, 471,
	296, 295, 297, 298, 299, 472, 0, 473, 0, 301,
	925, 926, 302, 303, 304, 927, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 475,
	928, 314, 315, 929, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	930, 328, 329, 331, 330, 0, 0, 931, 0, 476,
	477, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 0, 0, 340, 478, 932, 341, 933, 479, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 480,
	350, 481, 351, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 482, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 934, 375, 376, 377, 378, 483, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 0, 397,
	398, 391, 393, 394, 395, 392, 396, 399, 400, 0,
	401, 381, 382, 402, 935, 403, 484, 404, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 414, 410, 411,
	412, 485, 0, 417, 418, 416, 0, 419, 420, 421,
	422, 423, 267, 424, 268, 425, 0, 486, 487, 488,
	489, 0, 0, 426, 427, 490, 428, 491, 0, 429,
	430, 431, 0, 432, 433, 0, 0, 434, 435, 436,
	437, 439, 0, 440, 0, 438, 441, 442, 443, 492,
	493, 494, 0, 445, 444, 495, 0, 0, 0, 0,
	446, 447, 496, 448, 449, 450, 1274, 0, 1139, 1138,
	0, 0, 0, 0, 1136, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 451, 0, 0, 0,
	0, 218, 219, 220, 452, 453, 221, 454, 222, 223,
	455, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 456, 457, 458, 0, 231, 459, 0, 1043, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 921, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 460, 461, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 462, 263, 264, 266, 269, 265, 270,
	271, 272, 463, 464, 0, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 465, 276, 277, 0, 278, 0,
	279, 0, 0, 922, 280, 281, 0, 282, 466, 0,
	467, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	1273, 469, 470, 924, 0, 474, 292, 0, 0, 0,
	0, 291, 293, 300, 0, 923, 294, 471, 296, 295,
	297, 298, 299, 472, 0, 473, 0, 301, 925, 926,
	302, 303, 304, 927, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 475, 928, 314,
	315, 929, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 930, 328,
	329, 331, 330, 0, 0, 931, 0, 476, 477, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 0,
	0, 340, 478, 932, 341, 933, 479, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 480, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	482, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	934, 375, 376, 377, 378, 483, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 0, 397, 398, 391,
	393, 394, 395, 392, 396, 399, 400, 0, 401, 381,
	382, 402, 935, 403, 484, 404, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 414, 410, 411, 412, 485,
	0, 417, 418, 416, 0, 419, 420, 421, 422, 423,
	267, 424, 268, 425, 0, 486, 487, 488, 489, 0,
	0, 426, 427, 490, 428, 491, 0, 429, 430, 431,
	0, 432, 433, 0, 0, 434, 435, 436, 437, 439,
	0, 440, 0, 438, 441, 442, 443, 492, 493, 494,
	0, 445, 444, 495, 0, 0, 0, 0, 446, 447,
	496, 448, 449, 450, 1212, 0, 1139, 1138, 0, 0,
	0, 0, 1136, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 451, 0, 0, 0, 0, 218,
	219, 220, 452, 453, 221, 454, 222, 223, 455, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 456,
	457, 458, 0, 231, 459, 0, 1043, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 921, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 460, 461, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 462, 263, 264, 266, 269, 265, 270, 271, 272,
	463, 464, 0, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 465, 276, 277, 0, 278, 0, 279, 0,
	0, 922, 280, 281, 0, 282, 466, 0, 467, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 1211, 469,
	470, 924, 0, 474, 292, 0, 0, 0, 0, 291,
	293, 300, 0, 923, 294, 471, 296, 295, 297, 298,
	299, 472, 0, 473, 0, 301, 925, 926, 302, 303,
	304, 927, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 475, 928, 314, 315, 929,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 930, 328, 329, 331,
	330, 0, 0, 931, 0, 476, 477, 332, 333, 0,
	334, 335, 336, 0, 0, 338, 339, 0, 0, 340,
	478, 932, 341, 933, 479, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 480, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 356, 357, 358, 482, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 934, 375,
	376, 377, 378, 483, 379, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 0, 397, 398, 391, 393, 394,
	395, 392, 396, 399, 400, 0, 401, 381, 382, 402,
	935, 403, 484, 404, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 414, 410, 411, 412, 485, 0, 417,
	418, 416, 0, 419, 420, 421, 422, 423, 267, 424,
	268, 425, 0, 486, 487, 488, 489, 0, 0, 426,
	427, 490, 428, 491, 0, 429, 430, 431, 0, 432,
	433, 0, 0, 434, 435, 436, 437, 439, 0, 440,
	0, 438, 441, 442, 443, 492, 493, 494, 0, 445,
	444, 495, 0, 0, 0, 0, 446, 447, 496, 448,
	449, 450, 1209, 0, 1139, 1138, 0, 0, 0, 0,
	1136, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 451, 0, 0, 0, 0, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 456, 457, 458,
	0, 231, 459, 0, 1043, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 921, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 460,
	461, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 463, 464,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 0, 279, 0, 0, 922,
	280, 281, 0, 282, 466, 0, 467, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 1208, 469, 470, 924,
	0, 474, 292, 0, 0, 0, 0, 291, 293, 300,
	0, 923, 294, 471, 296, 295, 297, 298, 299, 472,
	0, 473, 0, 301, 925, 926, 302, 303, 304, 927,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 475, 928, 314, 315, 929, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 930, 328, 329, 331, 330, 0,
	0, 931, 0, 476, 477, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 0, 0, 340, 478, 932,
	341, 933, 479, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 480, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 934, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 0, 401, 381, 382, 402, 935, 403,
	484, 404, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 485, 0, 417, 418, 416,
	0, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	0, 486, 487, 488, 489, 0, 0, 426, 427, 490,
	428, 491, 0, 429, 430, 431, 0, 432, 433, 0,
	0, 434, 435, 436, 437, 439, 0, 440, 0, 438,
	441, 442, 443, 492, 493, 494, 0, 445, 444, 495,
	0, 0, 0, 0, 446, 447, 496, 448, 449, 450,
	1132, 0, 1139, 1138, 0, 0, 0, 0, 1136, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	451, 0, 0, 0, 0, 218, 219, 220, 452, 453,
	221, 454, 222, 223, 455, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 456, 457, 458, 0, 231,
	459, 0, 1043, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 921, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 460, 461, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 462, 263, 264,
	266, 269, 265, 270, 271, 272, 463, 464, 0, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 465, 276,
	277, 0, 278, 0, 279, 0, 0, 922, 280, 281,
	0, 282, 466, 0, 467, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 1134, 469, 470, 924, 0, 474,
	292, 0, 0, 0, 0, 291, 293, 300, 0, 923,
	294, 471, 296, 295, 297, 298, 299, 472, 0, 473,
	0, 301, 925, 926, 302, 303, 304, 927, 305, 306,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 475, 928, 314, 315, 929, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 930, 328, 329, 331, 330, 0, 0, 931,
	0, 476, 477, 332, 333, 0, 334, 335, 336, 0,
	0, 338, 339, 0, 0, 340, 478, 932, 341, 933,
	479, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 480, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 482, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 934, 375, 376, 377, 378, 483,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	0, 397, 398, 391, 393, 394, 395, 392, 396, 399,
	400, 0, 401, 381, 382, 402, 935, 403, 484, 404,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 414,
	410, 411, 412, 485, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 425, 0, 486,
	487, 488, 489, 0, 0, 426, 427, 490, 428, 491,
	0, 429, 430, 431, 0, 432, 433, 0, 0, 434,
	435, 436, 437, 439, 0, 440, 0, 438, 441, 442,
	443, 492, 493, 494, 0, 445, 444, 495, 0, 0,
	0, 0, 446, 447, 496, 448, 449, 450, 1139, 1138,
	0, 0, 0, 0, 1136, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 451, 0, 0, 0,
	0, 218, 219, 220, 452, 453, 221, 454, 222, 223,
	455, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 456, 457, 458, 0, 231, 459, 0, 1043, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 921, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 460, 461, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 462, 263, 264, 266, 269, 265, 270,
	271, 272, 463, 464, 0, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 465, 276, 277, 0, 278, 0,
	279, 0, 0, 922, 280, 281, 0, 282, 466, 0,
	467, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	468, 469, 470, 924, 0, 474, 292, 0, 0, 0,
	0, 291, 293, 300, 0, 923, 294, 471, 296, 295,
	297, 298, 299, 472, 0, 473, 0, 301, 925, 926,
	302, 303, 304, 927, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 475, 928, 314,
	315, 929, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 930, 328,
	329, 331, 330, 0, 0, 931, 0, 476, 477, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 0,
	0, 340, 478, 932, 341, 933, 479, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 480, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	482, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	934, 375, 376, 377, 378, 483, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 0, 397, 398, 391,
	393, 394, 395, 392, 396, 399, 400, 0, 401, 381,
	382, 402, 935, 403, 484, 404, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 414, 410, 411, 412, 485,
	0, 417, 418, 416, 0, 419, 420, 421, 422, 423,
	267, 424, 268, 425, 0, 486, 487, 488, 489, 0,
	0, 426, 427, 490, 428, 491, 0, 429, 430, 431,
	0, 432, 433, 0, 0, 434, 435, 436, 437, 439,
	0, 440, 0, 438, 441, 442, 443, 492, 493, 494,
	0, 445, 444, 495, 1139, 1138, 0, 0, 446, 447,
	496, 448, 449, 450, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 451, 0, 0, 0, 0, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 456, 457, 458,
	0, 231, 459, 0, 1043, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 921, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 460,
	461, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 463, 464,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 0, 279, 0, 0, 922,
	280, 281, 0, 282, 466, 0, 467, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 468, 469, 470, 924,
	0, 474, 292, 0, 0, 0, 0, 291, 293, 300,
	0, 923, 294, 471, 296, 295, 297, 298, 299, 472,
	0, 473, 0, 301, 925, 926, 302, 303, 304, 927,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 475, 928, 314, 315, 929, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 930, 328, 329, 331, 330, 0,
	0, 931, 0, 476, 477, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 0, 0, 340, 478, 932,
	341, 933, 479, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 480, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 934, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 0, 401, 381, 382, 402, 935, 403,
	484, 404, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 485, 0, 417, 418, 416,
	0, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	0, 486, 487, 488, 489, 0, 0, 426, 427, 490,
	428, 491, 0, 429, 430, 431, 0, 432, 433, 0,
	0, 434, 435, 436, 437, 439, 0, 440, 0, 438,
	441, 442, 443, 492, 493, 494, 1139, 445, 444, 495,
	0, 0, 0, 0, 446, 447, 496, 448, 449, 450,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 451, 0, 0, 0, 0, 218,
	219, 220, 452, 453, 221, 454, 222, 223, 455, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 456,
	457, 458, 0, 231, 459, 0, 1043, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 921, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 460, 461, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 462, 263, 264, 266, 269, 265, 270, 271, 272,
	463, 464, 0, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 465, 276, 277, 0, 278, 0, 279, 0,
	0, 922, 280, 281, 0, 282, 466, 0, 467, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 468, 469,
	470, 924, 0, 474, 292, 0, 0, 0, 0, 291,
	293, 300, 0, 923, 294, 471, 296, 295, 297, 298,
	299, 472, 0, 473, 0, 301, 925, 926, 302, 303,
	304, 927, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 475, 928, 314, 315, 929,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 930, 328, 329, 331,
	330, 0, 0, 931, 0, 476, 477, 332, 333, 0,
	334, 335, 336, 0, 0, 338, 339, 0, 0, 340,
	478, 932, 341, 933, 479, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 480, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 356, 357, 358, 482, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 934, 375,
	376, 377, 378, 483, 379, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 0, 397, 398, 391, 393, 394,
	395, 392, 396, 399, 400, 0, 401, 381, 382, 402,
	935, 403, 484, 404, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 414, 410, 411, 412, 485, 0, 417,
	418, 416, 0, 419, 420, 421, 422, 423, 267, 424,
	268, 425, 0, 486, 487, 488, 489, 0, 0, 426,
	427, 490, 428, 491, 0, 429, 430, 431, 0, 432,
	433, 0, 0, 434, 435, 436, 437, 439, 0, 440,
	0, 438, 441, 442, 443, 492, 493, 494, 206, 445,
	444, 495, 0, 0, 0, 0, 446, 447, 496, 448,
	449, 450, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 451, 0, 0, 0,
	0, 218, 219, 220, 452, 453, 221, 454, 222, 223,
	455, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 456, 457, 458, 2156, 231, 459, 0, 0, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	2153, 241, 0, 242, 243, 244, 0, 0, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 460, 461, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 462, 263, 264, 266, 269, 265, 270,
	271, 272, 463, 464, 0, 2298, 0, 0, 0, 0,
	0, 273, 274, 275, 465, 276, 277, 0, 278, 0,
	279, 2159, 0, 0, 280, 281, 0, 282, 466, 0,
	467, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	468, 469, 470, 0, 0, 474, 292, 0, 0, 0,
	2295, 291, 293, 300, 0, 0, 294, 471, 296, 295,
	297, 298, 299, 472, 0, 473, 0, 2297, 0, 0,
	302, 303, 304, 0, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 475, 0, 314,
	315, 2294, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 0, 328,
	329, 331, 330, 0, 0, 0, 0, 476, 477, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 0,
	0, 340, 478, 0, 341, 0, 479, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 480, 350, 481,
	351, 2158, 352, 0, 353, 354, 355, 356, 357, 358,
	482, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	0, 375, 376, 377, 378, 483, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 0, 397, 398, 391,
	393, 394, 395, 392, 396, 399, 400, 0, 401, 381,
	382, 402, 0, 403, 484, 404, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 414, 410, 411, 412, 485,
	0, 417, 418, 416, 0, 419, 420, 421, 422, 423,
	267, 424, 268, 425, 0, 486, 487, 488, 489, 0,
	0, 426, 427, 490, 428, 491, 0, 429, 430, 431,
	0, 432, 433, 0, 2296, 434, 435, 436, 437, 439,
	0, 440, 0, 438, 441, 442, 443, 492, 493, 494,
	206, 445, 444, 495, 0, 0, 0, 0, 446, 447,
	496, 448, 449, 450, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 451, 0,
	0, 0, 0, 218, 219, 220, 452, 453, 221, 454,
	222, 223, 455, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 456, 457, 458, 2156, 231, 459, 0,
	0, 2150, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 2153, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 460, 461, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 462, 263, 264, 266, 269,
	265, 270, 271, 272, 463, 464, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 465, 276, 277, 0,
	278, 0, 279, 2159, 0, 0, 280, 281, 0, 282,
	466, 0, 467, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 2149, 469, 470, 0, 0, 474, 292, 0,
	0, 0, 0, 291, 293, 300, 0, 0, 294, 471,
	296, 295, 297, 298, 299, 472, 0, 473, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 475,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 0, 0, 0, 476,
	477, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 0, 0, 340, 478, 0, 341, 0, 479, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 480,
	350, 481, 351, 2158, 352, 0, 353, 354, 355, 356,
	357, 358, 482, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 0, 375, 376, 377, 378, 483, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 0, 397,
	398, 391, 393, 394, 395, 392, 396, 399, 400, 0,
	401, 381, 382, 402, 0, 403, 484, 404, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 414, 410, 411,
	412, 485, 0, 417, 418, 416, 0, 419, 420, 421,
	422, 423, 267, 424, 268, 425, 0, 486, 487, 488,
	489, 0, 0, 426, 427, 490, 428, 491, 0, 429,
	430, 431, 0, 432, 433, 0, 2157, 434, 435, 436,
	437, 439, 0, 440, 0, 438, 441, 442, 443, 492,
	493, 494, 0, 445, 444, 495, 1353, 0, 206, 0,
	446, 447, 496, 448, 449, 450, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 451, 0, 0, 0,
	0, 218, 219, 220, 452, 453, 221, 454, 222, 223,
	455, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 456, 457, 458, 0, 231, 459, 0, 0, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 0, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 460, 461, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 462, 263, 264, 266, 269, 265, 270,
	271, 272, 463, 464, 0, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 465, 276, 277, 0, 278, 0,
	279, 0, 0, 0, 280, 281, 0, 282, 466, 0,
	467, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	468, 469, 470, 0, 0, 474, 292, 0, 0, 0,
	210, 291, 293, 300, 0, 0, 294, 471, 296, 295,
	297, 298, 299, 472, 0, 473, 0, 301, 0, 0,
	302, 303, 304, 0, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 475, 0, 314,
	315, 0, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 0, 328,
	329, 331, 330, 0, 211, 0, 0, 476, 477, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 0,
	0, 340, 478, 0, 341, 0, 479, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 480, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	482, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	0, 375, 376, 377, 378, 483, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 0, 1356, 398, 391,
	393, 394, 395, 392, 396, 399, 400, 0, 401, 381,
	382, 402, 0, 403, 484, 404, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 414, 410, 411, 412, 485,
	0, 417, 418, 416, 1354, 419, 420, 421, 422, 423,
	267, 424, 268, 425, 0, 486, 487, 488, 489, 0,
	0, 426, 427, 490, 428, 491, 0, 429, 430, 431,
	0, 432, 433, 0, 0, 434, 435, 436, 437, 439,
	0, 440, 0, 438, 441, 442, 443, 492, 493, 494,
	0, 1355, 444, 495, 1127, 0, 206, 0, 446, 447,
	496, 448, 449, 450, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 451, 0, 0, 0, 0, 218,
	219, 220, 452, 453, 221, 454, 222, 223, 455, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 456,
	457, 458, 0, 231, 459, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 460, 461, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 462, 263, 264, 266, 269, 265, 270, 271, 272,
	463, 464, 0, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 465, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 0, 282, 466, 0, 467, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 1129, 469,
	470, 0, 0, 474, 292, 0, 0, 0, 210, 291,
	293, 300, 0, 0, 294, 471, 296, 295, 297, 298,
	299, 472, 0, 473, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 475, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 0, 328, 329, 331,
	330, 0, 211, 0, 0, 476, 477, 332, 333, 0,
	334, 335, 336, 0, 976, 338, 339, 0, 0, 340,
	478, 0, 341, 0, 479, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 480, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 356, 357, 358, 482, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 0, 375,
	376, 377, 378, 483, 379, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 0, 397, 398, 391, 393, 394,
	395, 392, 396, 399, 400, 0, 401, 381, 382, 402,
	0, 403, 484, 404, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 414, 410, 411, 412, 485, 0, 417,
	418, 416, 0, 419, 420, 421, 422, 423, 267, 424,
	268, 425, 0, 486, 487, 488, 489, 0, 0, 426,
	427, 490, 428, 491, 0, 429, 430, 431, 0, 432,
	433, 0, 0, 434, 435, 436, 437, 439, 0, 440,
	0, 438, 441, 442, 443, 492, 493, 494, 0, 445,
	444, 495, 1124, 0, 206, 0, 446, 447, 496, 448,
	449, 450, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 451, 0, 0, 0, 0, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 456, 457, 458,
	0, 231, 459, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 460,
	461, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 463, 464,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 466, 0, 467, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 1126, 469, 470, 0,
	0, 474, 292, 0, 0, 0, 210, 291, 293, 300,
	0, 0, 294, 471, 296, 295, 297, 298, 299, 472,
	0, 473, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 475, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	211, 0, 0, 476, 477, 332, 333, 0, 334, 335,
	336, 0, 976, 338, 339, 0, 0, 340, 478, 0,
	341, 0, 479, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 480, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 0, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 0, 401, 381, 382, 402, 0, 403,
	484, 404, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 485, 0, 417, 418, 416,
	0, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	0, 486, 487, 488, 489, 0, 0, 426, 427, 490,
	428, 491, 0, 429, 430, 431, 0, 432, 433, 0,
	0, 434, 435, 436, 437, 439, 0, 440, 0, 438,
	441, 442, 443, 492, 493, 494, 0, 445, 444, 495,
	1031, 0, 206, 0, 446, 447, 496, 448, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	451, 0, 0, 0, 0, 218, 219, 220, 452, 453,
	221, 454, 222, 223, 455, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 456, 457, 458, 0, 231,
	459, 0, 0, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 0, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 460, 461, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 462, 263, 264,
	266, 269, 265, 270, 271, 272, 463, 464, 0, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 465, 276,
	277, 0, 278, 0, 279, 0, 0, 0, 280, 281,
	0, 282, 466, 0, 467, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 1033, 469, 470, 0, 0, 474,
	292, 0, 0, 0, 210, 291, 293, 300, 0, 0,
	294, 471, 296, 295, 297, 298, 299, 472, 0, 473,
	0, 301, 0, 0, 302, 303, 304, 0, 305, 306,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 475, 0, 314, 315, 0, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 0, 328, 329, 331, 330, 0, 211, 0,
	0, 476, 477, 332, 333, 0, 334, 335, 336, 0,
	976, 338, 339, 0, 0, 340, 478, 0, 341, 0,
	479, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 480, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 482, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 0, 375, 376, 377, 378, 483,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	0, 397, 398, 391, 393, 394, 395, 392, 396, 399,
	400, 0, 401, 381, 382, 402, 0, 403, 484, 404,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 414,
	410, 411, 412, 485, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 425, 0, 486,
	487, 488, 489, 0, 0, 426, 427, 490, 428, 491,
	0, 429, 430, 431, 0, 432, 433, 0, 0, 434,
	435, 436, 437, 439, 0, 440, 0, 438, 441, 442,
	443, 492, 493, 494, 0, 445, 444, 495, 527, 0,
	206, 0, 446, 447, 496, 448, 449, 450, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	526, 216, 516, 217, 0, 0, 0, 0, 451, 0,
	0, 0, 0, 218, 219, 220, 452, 453, 221, 454,
	222, 223, 455, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 456, 457, 458, 0, 231, 459, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 519, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 460, 461, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 462, 263, 264, 266, 269,
	265, 270, 271, 272, 463, 464, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 465, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 520, 282,
	466, 0, 467, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 468, 469, 470, 0, 0, 474, 292, 0,
	0, 0, 0, 291, 293, 300, 0, 0, 294, 471,
	296, 295, 297, 298, 299, 472, 0, 473, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 475,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 0, 0, 0, 476,
	477, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 0, 0, 340, 478, 0, 341, 0, 479, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 480,
	350, 481, 351, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 482, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 0, 375, 376, 377, 378, 483, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 521, 397,
	398, 391, 393, 394, 395, 392, 396, 399, 400, 0,
	401, 381, 382, 402, 0, 403, 484, 404, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 414, 410, 411,
	412, 485, 0, 417, 418, 416, 0, 419, 420, 421,
	422, 423, 267, 424, 268, 425, 0, 486, 487, 488,
	489, 0, 0, 426, 427, 490, 428, 491, 0, 429,
	430, 431, 0, 432, 433, 0, 0, 434, 435, 436,
	437, 439, 0, 440, 0, 438, 441, 442, 443, 492,
	493, 494, 0, 445, 444, 495, 515, 0, 206, 0,
	446, 447, 496, 448, 449, 450, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	516, 217, 0, 0, 0, 0, 451, 0, 0, 0,
	0, 218, 219, 220, 452, 453, 221, 454, 222, 223,
	455, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 456, 457, 458, 0, 231, 459, 0, 0, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 519, 0, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 460, 461, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 462, 263, 264, 266, 269, 265, 270,
	271, 272, 463, 464, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 465, 276, 277, 0, 278, 0,
	279, 0, 0, 0, 280, 281, 520, 282, 466, 0,
	467, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	468, 469, 470, 0, 0, 474, 292, 0, 0, 0,
	0, 291, 293, 300, 0, 0, 294, 471, 296, 295,
	297, 298, 299, 472, 0, 473, 0, 301, 0, 0,
	302, 303, 304, 0, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 475, 0, 314,
	315, 0, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 0, 328,
	329, 331, 330, 0, 0, 0, 0, 476, 477, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 0,
	0, 340, 478, 0, 341, 0, 479, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 480, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	482, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	0, 375, 376, 377, 378, 483, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 521, 397, 398, 391,
	393, 394, 395, 392, 396, 399, 400, 0, 401, 381,
	382, 402, 0, 403, 484, 404, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 414, 410, 411, 412, 485,
	0, 417, 418, 416, 0, 419, 420, 421, 422, 423,
	267, 424, 268, 425, 0, 486, 487, 488, 489, 0,
	0, 426, 427, 490, 428, 491, 0, 429, 430, 431,
	0, 432, 433, 0, 0, 434, 435, 436, 437, 439,
	0, 440, 0, 438, 441, 442, 443, 492, 493, 494,
	206, 445, 444, 495, 0, 0, 0, 0, 446, 447,
	496, 448, 449, 450, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 451, 0,
	0, 0, 0, 218, 219, 220, 452, 453, 221, 454,
	222, 223, 455, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 456, 457, 458, 0, 231, 459, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 460, 461, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 462, 263, 264, 266, 269,
	265, 270, 271, 272, 463, 464, 0, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 465, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	466, 0, 467, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 468, 469, 470, 0, 0, 474, 292, 0,
	0, 0, 210, 291, 293, 300, 0, 0, 294, 471,
	296, 295, 297, 298, 299, 472, 0, 473, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 475,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 211, 0, 0, 476,
	477, 332, 333, 0, 334, 335, 336, 0, 976, 338,
	339, 0, 0, 340, 478, 0, 341, 0, 479, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 480,
	350, 481, 351, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 482, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 0, 375, 376, 377, 378, 483, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 0, 397,
	398, 391, 393, 394, 395, 392, 396, 399, 400, 0,
	401, 381, 382, 402, 0, 403, 484, 404, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 414, 410, 411,
	412, 485, 0, 417, 418, 416, 0, 419, 420, 421,
	422, 423, 267, 424, 268, 425, 0, 486, 487, 488,
	489, 0, 0, 426, 427, 490, 428, 491, 0, 429,
	430, 431, 0, 432, 433, 0, 0, 434, 435, 436,
	437, 439, 0, 440, 0, 438, 441, 442, 443, 492,
	493, 494, 0, 445, 444, 495, 2227, 0, 206, 0,
	446, 447, 496, 448, 449, 450, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 451, 0, 0, 0,
	0, 218, 219, 220, 452, 453, 221, 454, 222, 223,
	455, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 456, 457, 458, 0, 231, 459, 0, 0, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 0, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 460, 461, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 462, 263, 264, 266, 269, 265, 270,
	271, 272, 463, 464, 0, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 465, 276, 277, 0, 278, 0,
	279, 0, 0, 0, 280, 281, 0, 282, 466, 0,
	467, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	468, 469, 470, 0, 0, 474, 292, 0, 0, 0,
	210, 291, 293, 300, 0, 0, 294, 471, 296, 295,
	297, 298, 299, 472, 0, 473, 0, 301, 0, 0,
	302, 303, 304, 0, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 475, 0, 314,
	315, 0, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 0, 328,
	329, 331, 330, 0, 211, 0, 0, 476, 477, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 0,
	0, 340, 478, 0, 341, 0, 479, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 480, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	482, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	0, 375, 376, 377, 378, 483, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 0, 397, 398, 391,
	393, 394, 395, 392, 396, 399, 400, 0, 401, 381,
	382, 402, 0, 403, 484, 404, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 414, 410, 411, 412, 485,
	0, 417, 418, 416, 0, 419, 420, 421, 422, 423,
	267, 424, 268, 425, 0, 486, 487, 488, 489, 0,
	0, 426, 427, 490, 428, 491, 0, 429, 430, 431,
	0, 432, 433, 0, 0, 434, 435, 436, 437, 439,
	0, 440, 0, 438, 441, 442, 443, 492, 493, 494,
	0, 445, 444, 495, 1821, 0, 206, 0, 446, 447,
	496, 448, 449, 450, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 451, 0, 0, 0, 0, 218,
	219, 220, 452, 453, 221, 454, 222, 223, 455, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 456,
	457, 458, 0, 231, 459, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 460, 461, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 462, 263, 264, 266, 269, 265, 270, 271, 272,
	463, 464, 0, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 465, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 0, 282, 466, 0, 467, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 468, 469,
	470, 0, 0, 474, 292, 0, 0, 0, 210, 291,
	293, 300, 0, 0, 294, 471, 296, 295, 297, 298,
	299, 472, 0, 473, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 475, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 0, 328, 329, 331,
	330, 0, 211, 0, 0, 476, 477, 332, 333, 0,
	334, 335, 336, 0, 0, 338, 339, 0, 0, 340,
	478, 0, 341, 0, 479, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 480, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 356, 357, 358, 482, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 0, 375,
	376, 377, 378, 483, 379, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 0, 397, 398, 391, 393, 394,
	395, 392, 396, 399, 400, 0, 401, 381, 382, 402,
	0, 403, 484, 404, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 414, 410, 411, 412, 485, 0, 417,
	418, 416, 0, 419, 420, 421, 422, 423, 267, 424,
	268, 425, 0, 486, 487, 488, 489, 0, 0, 426,
	427, 490, 428, 491, 0, 429, 430, 431, 0, 432,
	433, 0, 0, 434, 435, 436, 437, 439, 0, 440,
	0, 438, 441, 442, 443, 492, 493, 494, 206, 445,
	444, 495, 0, 0, 0, 0, 446, 447, 496, 448,
	449, 450, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 451, 0, 0, 0,
	0, 218, 219, 220, 452, 453, 221, 454, 222, 223,
	455, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 456, 457, 458, 0, 231, 459, 0, 0, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 0, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 460, 461, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 462, 263, 264, 266, 269, 265, 270,
	271, 272, 463, 464, 0, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 465, 276, 277, 0, 278, 0,
	279, 0, 0, 0, 280, 281, 0, 282, 466, 0,
	467, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	468, 469, 470, 0, 0, 474, 292, 0, 0, 0,
	210, 291, 293, 300, 0, 0, 294, 471, 296, 295,
	297, 298, 299, 472, 0, 473, 0, 301, 0, 0,
	302, 303, 304, 0, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 475, 0, 314,
	315, 0, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 0, 328,
	329, 331, 330, 0, 211, 0, 0, 476, 477, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 0,
	0, 340, 478, 0, 341, 0, 479, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 480, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	482, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	0, 375, 376, 377, 378, 483, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 0, 397, 398, 391,
	393, 394, 395, 392, 396, 399, 400, 0, 401, 381,
	382, 402, 0, 403, 484, 404, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 414, 410, 411, 412, 485,
	0, 417, 418, 416, 1760, 419, 420, 421, 422, 423,
	267, 424, 268, 425, 0, 486, 487, 488, 489, 0,
	0, 426, 427, 490, 428, 491, 0, 429, 430, 431,
	0, 432, 433, 0, 0, 434, 435, 436, 437, 439,
	0, 440, 0, 438, 441, 442, 443, 492, 493, 494,
	0, 445, 444, 495, 1753, 0, 206, 0, 446, 447,
	496, 448, 449, 450, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 451, 0, 0, 0, 0, 218,
	219, 220, 452, 453, 221, 454, 222, 223, 455, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 456,
	457, 458, 0, 231, 459, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 460, 461, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 462, 263, 264, 266, 269, 265, 270, 271, 272,
	463, 464, 0, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 465, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 0, 282, 466, 0, 467, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 1752, 469,
	470, 0, 0, 474, 292, 0, 0, 0, 210, 291,
	293, 300, 0, 0, 294, 471, 296, 295, 297, 298,
	299, 472, 0, 473, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 475, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 0, 328, 329, 331,
	330, 0, 211, 0, 0, 476, 477, 332, 333, 0,
	334, 335, 336, 0, 0, 338, 339, 0, 0, 340,
	478, 0, 341, 0, 479, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 480, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 356, 357, 358, 482, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 0, 375,
	376, 377, 378, 483, 379, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 0, 397, 398, 391, 393, 394,
	395, 392, 396, 399, 400, 0, 401, 381, 382, 402,
	0, 403, 484, 404, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 414, 410, 411, 412, 485, 0, 417,
	418, 416, 0, 419, 420, 421, 422, 423, 267, 424,
	268, 425, 0, 486, 487, 488, 489, 0, 0, 426,
	427, 490, 428, 491, 0, 429, 430, 431, 0, 432,
	433, 0, 0, 434, 435, 436, 437, 439, 0, 440,
	0, 438, 441, 442, 443, 492, 493, 494, 0, 445,
	444, 495, 1748, 0, 206, 0, 446, 447, 496, 448,
	449, 450, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 451, 0, 0, 0, 0, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 456, 457, 458,
	0, 231, 459, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 460,
	461, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 463, 464,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 466, 0, 467, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 1750, 469, 470, 0,
	0, 474, 292, 0, 0, 0, 210, 291, 293, 300,
	0, 0, 294, 471, 296, 295, 297, 298, 299, 472,
	0, 473, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 475, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	211, 0, 0, 476, 477, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 0, 0, 340, 478, 0,
	341, 0, 479, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 480, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 0, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 0, 401, 381, 382, 402, 0, 403,
	484, 404, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 485, 0, 417, 418, 416,
	0, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	0, 486, 487, 488, 489, 0, 0, 426, 427, 490,
	428, 491, 0, 429, 430, 431, 0, 432, 433, 0,
	0, 434, 435, 436, 437, 439, 0, 440, 0, 438,
	441, 442, 443, 492, 493, 494, 0, 445, 444, 495,
	1267, 0, 206, 0, 446, 447, 496, 448, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	451, 0, 0, 0, 0, 218, 219, 220, 452, 453,
	221, 454, 222, 223, 455, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 456, 457, 458, 0, 231,
	459, 0, 0, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 0, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 460, 461, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 462, 263, 264,
	266, 269, 265, 270, 271, 272, 463, 464, 0, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 465, 276,
	277, 0, 278, 0, 279, 0, 0, 0, 280, 281,
	0, 282, 466, 0, 467, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 1266, 469, 470, 0, 0, 474,
	292, 0, 0, 0, 210, 291, 293, 300, 0, 0,
	294, 471, 296, 295, 297, 298, 299, 472, 0, 473,
	0, 301, 0, 0, 302, 303, 304, 0, 305, 306,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 475, 0, 314, 315, 0, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 0, 328, 329, 331, 330, 0, 211, 0,
	0, 476, 477, 332, 333, 0, 334, 335, 336, 0,
	0, 338, 339, 0, 0, 340, 478, 0, 341, 0,
	479, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 480, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 482, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 0, 375, 376, 377, 378, 483,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	0, 397, 398, 391, 393, 394, 395, 392, 396, 399,
	400, 0, 401, 381, 382, 402, 0, 403, 484, 404,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 414,
	410, 411, 412, 485, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 425, 0, 486,
	487, 488, 489, 0, 0, 426, 427, 490, 428, 491,
	0, 429, 430, 431, 0, 432, 433, 0, 0, 434,
	435, 436, 437, 439, 0, 440, 0, 438, 441, 442,
	443, 492, 493, 494, 0, 445, 444, 495, 1264, 0,
	206, 0, 446, 447, 496, 448, 449, 450, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 451, 0,
	0, 0, 0, 218, 219, 220, 452, 453, 221, 454,
	222, 223, 455, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 456, 457, 458, 0, 231, 459, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 460, 461, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 462, 263, 264, 266, 269,
	265, 270, 271, 272, 463, 464, 0, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 465, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	466, 0, 467, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 1263, 469, 470, 0, 0, 474, 292, 0,
	0, 0, 210, 291, 293, 300, 0, 0, 294, 471,
	296, 295, 297, 298, 299, 472, 0, 473, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 475,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 211, 0, 0, 476,
	477, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 0, 0, 340, 478, 0, 341, 0, 479, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 480,
	350, 481, 351, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 482, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 0, 375, 376, 377, 378, 483, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 0, 397,
	398, 391, 393, 394, 395, 392, 396, 399, 400, 0,
	401, 381, 382, 402, 0, 403, 484, 404, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 414, 410, 411,
	412, 485, 0, 417, 418, 416, 0, 419, 420, 421,
	422, 423, 267, 424, 268, 425, 0, 486, 487, 488,
	489, 0, 0, 426, 427, 490, 428, 491, 0, 429,
	430, 431, 0, 432, 433, 0, 0, 434, 435, 436,
	437, 439, 0, 440, 0, 438, 441, 442, 443, 492,
	493, 494, 0, 445, 444, 495, 1261, 0, 206, 0,
	446, 447, 496, 448, 449, 450, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 451, 0, 0, 0,
	0, 218, 219, 220, 452, 453, 221, 454, 222, 223,
	455, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 456, 457, 458, 0, 231, 459, 0, 0, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 0, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 460, 461, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 462, 263, 264, 266, 269, 265, 270,
	271, 272, 463, 464, 0, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 465, 276, 277, 0, 278, 0,
	279, 0, 0, 0, 280, 281, 0, 282, 466, 0,
	467, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	1260, 469, 470, 0, 0, 474, 292, 0, 0, 0,
	210, 291, 293, 300, 0, 0, 294, 471, 296, 295,
	297, 298, 299, 472, 0, 473, 0, 301, 0, 0,
	302, 303, 304, 0, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 475, 0, 314,
	315, 0, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 0, 328,
	329, 331, 330, 0, 211, 0, 0, 476, 477, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 0,
	0, 340, 478, 0, 341, 0, 479, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 480, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	482, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	0, 375, 376, 377, 378, 483, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 0, 397, 398, 391,
	393, 394, 395, 392, 396, 399, 400, 0, 401, 381,
	382, 402, 0, 403, 484, 404, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 414, 410, 411, 412, 485,
	0, 417, 418, 416, 0, 419, 420, 421, 422, 423,
	267, 424, 268, 425, 0, 486, 487, 488, 489, 0,
	0, 426, 427, 490, 428, 491, 0, 429, 430, 431,
	0, 432, 433, 0, 0, 434, 435, 436, 437, 439,
	0, 440, 0, 438, 441, 442, 443, 492, 493, 494,
	0, 445, 444, 495, 1257, 0, 206, 0, 446, 447,
	496, 448, 449, 450, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 451, 0, 0, 0, 0, 218,
	219, 220, 452, 453, 221, 454, 222, 223, 455, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 456,
	457, 458, 0, 231, 459, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 460, 461, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 462, 263, 264, 266, 269, 265, 270, 271, 272,
	463, 464, 0, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 465, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 0, 282, 466, 0, 467, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 1256, 469,
	470, 0, 0, 474, 292, 0, 0, 0, 210, 291,
	293, 300, 0, 0, 294, 471, 296, 295, 297, 298,
	299, 472, 0, 473, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 475, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 0, 328, 329, 331,
	330, 0, 211, 0, 0, 476, 477, 332, 333, 0,
	334, 335, 336, 0, 0, 338, 339, 0, 0, 340,
	478, 0, 341, 0, 479, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 480, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 356, 357, 358, 482, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 0, 375,
	376, 377, 378, 483, 379, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 0, 397, 398, 391, 393, 394,
	395, 392, 396, 399, 400, 0, 401, 381, 382, 402,
	0, 403, 484, 404, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 414, 410, 411, 412, 485, 0, 417,
	418, 416, 0, 419, 420, 421, 422, 423, 267, 424,
	268, 425, 0, 486, 487, 488, 489, 0, 0, 426,
	427, 490, 428, 491, 0, 429, 430, 431, 0, 432,
	433, 0, 0, 434, 435, 436, 437, 439, 0, 440,
	0, 438, 441, 442, 443, 492, 493, 494, 0, 445,
	444, 495, 1232, 0, 206, 0, 446, 447, 496, 448,
	449, 450, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 451, 0, 0, 0, 0, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 456, 457, 458,
	0, 231, 459, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 460,
	461, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 463, 464,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 466, 0, 467, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 468, 469, 470, 0,
	0, 474, 292, 0, 0, 0, 210, 291, 293, 300,
	0, 0, 294, 471, 296, 295, 297, 298, 299, 472,
	0, 473, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 475, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	211, 0, 0, 476, 477, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 0, 0, 340, 478, 0,
	341, 0, 479, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 480, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 0, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 0, 401, 381, 382, 402, 0, 403,
	484, 404, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 485, 0, 417, 418, 416,
	0, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	0, 486, 487, 488, 489, 0, 0, 426, 427, 490,
	428, 491, 0, 429, 430, 431, 0, 432, 433, 0,
	0, 434, 435, 436, 437, 439, 0, 440, 0, 438,
	441, 442, 443, 492, 493, 494, 0, 445, 444, 495,
	1149, 0, 206, 0, 446, 447, 496, 448, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	451, 0, 0, 0, 0, 218, 219, 220, 452, 453,
	221, 454, 222, 223, 455, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 456, 457, 458, 0, 231,
	459, 0, 0, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 0, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 460, 461, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 462, 263, 264,
	266, 269, 265, 270, 271, 272, 463, 464, 0, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 465, 276,
	277, 0, 278, 0, 279, 0, 0, 0, 280, 281,
	0, 282, 466, 0, 467, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 1151, 469, 470, 0, 0, 474,
	292, 0, 0, 0, 210, 291, 293, 300, 0, 0,
	294, 471, 296, 295, 297, 298, 299, 472, 0, 473,
	0, 301, 0, 0, 302, 303, 304, 0, 305, 306,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 475, 0, 314, 315, 0, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 0, 328, 329, 331, 330, 0, 211, 0,
	0, 476, 477, 332, 333, 0, 334, 335, 336, 0,
	0, 338, 339, 0, 0, 340, 478, 0, 341, 0,
	479, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 480, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 482, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 0, 375, 376, 377, 378, 483,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	0, 397, 398, 391, 393, 394, 395, 392, 396, 399,
	400, 0, 401, 381, 382, 402, 0, 403, 484, 404,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 414,
	410, 411, 412, 485, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 425, 0, 486,
	487, 488, 489, 0, 0, 426, 427, 490, 428, 491,
	0, 429, 430, 431, 0, 432, 433, 0, 0, 434,
	435, 436, 437, 439, 0, 440, 0, 438, 441, 442,
	443, 492, 493, 494, 206, 445, 444, 495, 0, 0,
	0, 0, 446, 447, 496, 448, 449, 450, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 451, 0, 0, 0, 0, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 456, 457, 458,
	0, 231, 459, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 460,
	461, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 463, 464,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 466, 0, 467, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 468, 469, 470, 0,
	0, 474, 292, 0, 0, 0, 210, 291, 293, 300,
	0, 0, 294, 471, 296, 295, 297, 298, 299, 472,
	0, 473, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 475, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	211, 0, 0, 476, 477, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 0, 0, 340, 478, 0,
	341, 0, 479, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 480, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 0, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 0, 401, 381, 382, 402, 0, 403,
	484, 404, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 485, 0, 417, 418, 416,
	0, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	0, 486, 487, 488, 489, 0, 0, 426, 427, 490,
	428, 491, 0, 429, 430, 431, 0, 432, 433, 0,
	0, 434, 435, 436, 437, 439, 0, 440, 0, 438,
	441, 442, 443, 492, 493, 494, 206, 445, 444, 495,
	0, 0, 0, 0, 446, 447, 496, 448, 449, 450,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 451, 0, 0, 0, 0, 218,
	219, 220, 452, 453, 221, 454, 222, 223, 455, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 456,
	457, 458, 0, 231, 459, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 519, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 460, 461, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 462, 263, 264, 266, 269, 265, 270, 271, 272,
	463, 464, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 465, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 520, 282, 466, 0, 467, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 468, 469,
	470, 0, 0, 474, 292, 0, 0, 0, 0, 291,
	293, 300, 0, 0, 294, 471, 296, 295, 297, 298,
	299, 472, 0, 473, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 475, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 0, 328, 329, 331,
	330, 0, 0, 0, 0, 476, 477, 332, 333, 0,
	334, 335, 336, 0, 0, 338, 339, 0, 0, 340,
	478, 0, 341, 0, 479, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 480, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 356, 357, 358, 482, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 0, 375,
	376, 377, 378, 483, 379, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 521, 397, 398, 391, 393, 394,
	395, 392, 396, 399, 400, 0, 401, 381, 382, 402,
	0, 403, 484, 404, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 414, 410, 411, 412, 485, 0, 417,
	418, 416, 0, 419, 420, 421, 422, 423, 267, 424,
	268, 425, 0, 486, 487, 488, 489, 0, 0, 426,
	427, 490, 428, 491, 0, 429, 430, 431, 0, 432,
	433, 0, 0, 434, 435, 436, 437, 439, 0, 440,
	0, 438, 441, 442, 443, 492, 493, 494, 0, 445,
	444, 495, 665, 0, 206, 0, 446, 447, 496, 448,
	449, 450, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 451, 0, 0, 0, 0, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 456, 457, 458,
	0, 231, 459, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 460,
	461, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 466, 0, 467, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 468, 469, 470, 0,
	0, 474, 292, 0, 0, 0, 0, 291, 293, 300,
	0, 0, 294, 471, 296, 295, 297, 298, 299, 472,
	0, 473, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 475, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	0, 0, 0, 476, 477, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 0, 0, 340, 478, 0,
	341, 0, 479, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 480, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 0, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 0, 401, 381, 382, 402, 0, 403,
	484, 404, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 485, 0, 417, 418, 416,
	664, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	0, 486, 487, 488, 489, 0, 0, 426, 427, 490,
	428, 491, 0, 429, 430, 431, 0, 432, 433, 0,
	0, 434, 435, 436, 437, 439, 0, 440, 0, 438,
	441, 442, 443, 492, 493, 494, 0, 445, 444, 495,
	504, 0, 206, 0, 446, 447, 496, 448, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 503, 217, 0, 0, 0, 0,
	451, 0, 0, 0, 0, 218, 219, 220, 452, 453,
	221, 454, 222, 223, 455, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 456, 457, 458, 0, 231,
	459, 0, 0, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 0, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 460, 461, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 462, 263, 264,
	266, 269, 265, 270, 271, 272, 463, 464, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 465, 276,
	277, 0, 278, 0, 279, 0, 0, 0, 280, 281,
	0, 282, 466, 0, 467, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 468, 469, 470, 0, 0, 474,
	292, 0, 0, 0, 0, 291, 293, 300, 0, 0,
	294, 471, 296, 295, 297, 298, 299, 472, 0, 473,
	0, 301, 0, 0, 302, 303, 304, 0, 305, 306,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 475, 0, 314, 315, 0, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 0, 328, 329, 331, 330, 0, 0, 0,
	0, 476, 477, 332, 333, 0, 334, 335, 336, 0,
	0, 338, 339, 0, 0, 340, 478, 0, 341, 0,
	479, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 480, 350, 481, 502, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 482, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 0, 375, 376, 377, 378, 483,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	0, 397, 398, 391, 393, 394, 395, 392, 396, 399,
	400, 0, 401, 381, 382, 402, 0, 403, 484, 404,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 414,
	410, 411, 412, 485, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 425, 0, 486,
	487, 488, 489, 0, 0, 426, 427, 490, 428, 491,
	0, 429, 430, 431, 0, 432, 433, 0, 0, 434,
	435, 436, 437, 439, 0, 440, 0, 438, 441, 442,
	443, 492, 493, 494, 206, 445, 444, 495, 0, 0,
	0, 0, 446, 447, 496, 448, 449, 450, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 451, 0, 2094, 0, 0, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 456, 457, 458,
	0, 231, 459, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 460,
	461, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 466, 0, 467, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 468, 469, 470, 0,
	0, 474, 292, 0, 0, 0, 0, 291, 293, 300,
	0, 0, 294, 471, 296, 295, 297, 298, 299, 472,
	0, 473, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 475, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	0, 0, 0, 476, 477, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 0, 0, 340, 478, 0,
	341, 0, 479, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 480, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 0, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 0, 401, 381, 382, 402, 0, 403,
	484, 404, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 485, 0, 417, 418, 416,
	0, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	0, 486, 487, 488, 489, 0, 0, 426, 427, 490,
	428, 491, 0, 429, 430, 431, 0, 432, 433, 0,
	0, 434, 435, 436, 437, 439, 0, 440, 0, 438,
	441, 442, 443, 492, 493, 494, 0, 445, 444, 495,
	206, 2285, 0, 0, 446, 447, 496, 448, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 451, 0,
	0, 0, 0, 218, 219, 220, 452, 453, 221, 454,
	222, 223, 455, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 456, 457, 458, 0, 231, 459, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 460, 461, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 462, 263, 264, 266, 269,
	265, 270, 271, 272, 463, 464, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 465, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	466, 0, 467, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 468, 469, 470, 0, 0, 474, 292, 0,
	0, 0, 0, 291, 293, 300, 0, 0, 294, 471,
	296, 295, 297, 298, 299, 472, 0, 473, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 475,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 0, 0, 0, 476,
	477, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 0, 0, 340, 478, 0, 341, 0, 479, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 480,
	350, 481, 351, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 482, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 0, 375, 376, 377, 378, 483, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 0, 397,
	398, 391, 393, 394, 395, 392, 396, 399, 400, 0,
	401, 381, 382, 402, 0, 403, 484, 404, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 414, 410, 411,
	412, 485, 0, 417, 418, 416, 0, 419, 420, 421,
	422, 423, 267, 424, 268, 425, 0, 486, 487, 488,
	489, 0, 0, 426, 427, 490, 428, 491, 0, 429,
	430, 431, 0, 432, 433, 0, 0, 434, 435, 436,
	437, 439, 0, 440, 0, 438, 441, 442, 443, 492,
	493, 494, 206, 445, 444, 495, 0, 0, 0, 0,
	446, 447, 496, 448, 449, 450, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	451, 0, 0, 0, 0, 218, 219, 220, 452, 453,
	221, 454, 222, 223, 455, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 456, 457, 458, 0, 231,
	459, 0, 0, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 0, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 460, 461, 2842,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 462, 263, 264,
	266, 269, 265, 270, 271, 272, 463, 464, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 465, 276,
	277, 0, 278, 0, 279, 0, 0, 0, 280, 281,
	0, 282, 466, 0, 467, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 468, 469, 470, 0, 0, 474,
	292, 0, 0, 0, 0, 291, 293, 300, 0, 0,
	294, 471, 296, 295, 297, 298, 299, 472, 0, 473,
	0, 301, 0, 0, 302, 303, 304, 0, 305, 306,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 475, 0, 314, 315, 0, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 0, 328, 329, 331, 330, 0, 0, 0,
	0, 476, 477, 332, 333, 0, 334, 335, 336, 0,
	0, 338, 339, 0, 0, 340, 478, 0, 341, 0,
	479, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 480, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 482, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 0, 375, 376, 377, 378, 483,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	0, 397, 398, 391, 393, 394, 395, 392, 396, 399,
	400, 0, 401, 381, 382, 402, 0, 403, 484, 404,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 414,
	410, 411, 412, 485, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 425, 0, 486,
	487, 488, 489, 0, 0, 426, 427, 490, 428, 491,
	0, 429, 430, 431, 0, 432, 433, 0, 0, 434,
	435, 436, 437, 439, 0, 440, 0, 438, 441, 442,
	443, 492, 493, 494, 0, 445, 444, 495, 206, 2285,
	0, 0, 446, 447, 496, 448, 449, 450, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 451, 0, 0, 0,
	0, 218, 219, 220, 452, 453, 221, 454, 222, 223,
	455, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 456, 457, 458, 0, 231, 459, 0, 0, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 0, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 460, 461, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 462, 263, 264, 266, 269, 265, 270,
	271, 272, 463, 464, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 465, 276, 277, 0, 278, 0,
	279, 0, 0, 0, 280, 281, 0, 282, 466, 0,
	467, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	468, 469, 470, 0, 0, 474, 292, 0, 0, 0,
	0, 291, 293, 300, 0, 0, 294, 471, 296, 295,
	297, 298, 299, 472, 0, 473, 0, 301, 0, 0,
	302, 303, 304, 0, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 475, 0, 314,
	315, 0, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 0, 328,
	329, 331, 330, 0, 0, 0, 0, 476, 477, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 2282, 0,
	0, 340, 478, 0, 341, 0, 479, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 480, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	482, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	0, 375, 376, 377, 378, 483, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 0, 397, 398, 391,
	393, 394, 395, 392, 396, 399, 400, 0, 401, 381,
	382, 402, 0, 403, 484, 404, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 414, 410, 411, 412, 485,
	0, 417, 418, 416, 0, 419, 420, 421, 422, 423,
	267, 424, 268, 425, 0, 486, 487, 488, 489, 0,
	0, 426, 427, 490, 428, 491, 0, 429, 430, 431,
	0, 432, 433, 0, 0, 434, 435, 436, 437, 439,
	0, 440, 0, 438, 441, 442, 443, 492, 493, 494,
	206, 445, 444, 495, 0, 0, 0, 0, 446, 447,
	496, 448, 449, 450, 0, 0, 0, 212, 213, 214,
	215, 216, 1827, 217, 0, 0, 0, 0, 451, 0,
	0, 0, 0, 218, 219, 220, 452, 453, 221, 454,
	222, 223, 455, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 456, 457, 458, 0, 231, 459, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 460, 461, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 462, 263, 264, 266, 269,
	265, 270, 271, 272, 463, 464, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 465, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	466, 0, 467, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 468, 469, 470, 0, 0, 474, 292, 0,
	0, 0, 0, 291, 293, 300, 0, 0, 294, 471,
	296, 295, 297, 298, 299, 472, 0, 473, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 475,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 0, 0, 0, 476,
	477, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 0, 0, 340, 478, 0, 341, 0, 479, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 480,
	350, 481, 351, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 482, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 0, 375, 376, 377, 378, 483, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 0, 397,
	398, 391, 393, 394, 395, 392, 396, 399, 400, 0,
	401, 381, 382, 402, 0, 403, 484, 404, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 414, 410, 411,
	412, 485, 0, 417, 418, 416, 0, 419, 420, 421,
	422, 423, 267, 424, 268, 425, 0, 486, 487, 488,
	489, 0, 0, 426, 427, 490, 428, 491, 0, 429,
	430, 431, 0, 432, 433, 0, 0, 434, 435, 436,
	437, 439, 0, 440, 0, 438, 441, 442, 443, 492,
	493, 494, 0, 445, 444, 495, 1819, 0, 206, 0,
	446, 447, 496, 448, 449, 450, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 451, 0, 0, 0,
	0, 218, 219, 220, 452, 453, 221, 454, 222, 223,
	455, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 456, 457, 458, 0, 231, 459, 0, 0, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 0, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 460, 461, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 462, 263, 264, 266, 269, 265, 270,
	271, 272, 463, 464, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 465, 276, 277, 0, 278, 0,
	279, 0, 0, 0, 280, 281, 0, 282, 466, 0,
	467, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	468, 469, 470, 0, 0, 474, 292, 0, 0, 0,
	0, 291, 293, 300, 0, 0, 294, 471, 296, 295,
	297, 298, 299, 472, 0, 473, 0, 301, 0, 0,
	302, 303, 304, 0, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 475, 0, 314,
	315, 0, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 0, 328,
	329, 331, 330, 0, 0, 0, 0, 476, 477, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 0,
	0, 340, 478, 0, 341, 0, 479, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 480, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	482, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	0, 375, 376, 377, 378, 483, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 0, 397, 398, 391,
	393, 394, 395, 392, 396, 399, 400, 0, 401, 381,
	382, 402, 0, 403, 484, 404, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 414, 410, 411, 412, 485,
	0, 417, 418, 416, 0, 419, 420, 421, 422, 423,
	267, 424, 268, 425, 0, 486, 487, 488, 489, 0,
	0, 426, 427, 490, 428, 491, 0, 429, 430, 431,
	0, 432, 433, 0, 0, 434, 435, 436, 437, 439,
	0, 440, 0, 438, 441, 442, 443, 492, 493, 494,
	0, 445, 444, 495, 547, 0, 206, 0, 446, 447,
	496, 448, 449, 450, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 451, 0, 0, 0, 0, 218,
	219, 220, 452, 453, 221, 454, 222, 223, 455, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 456,
	457, 1011, 0, 231, 459, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 460, 461, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 462, 263, 264, 266, 269, 265, 270, 271, 272,
	463, 464, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 465, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 0, 282, 466, 0, 467, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 468, 469,
	470, 0, 0, 474, 292, 0, 0, 0, 0, 291,
	293, 300, 0, 0, 294, 471, 296, 295, 297, 298,
	299, 472, 0, 473, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 475, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 548, 0, 328, 329, 331,
	330, 0, 0, 0, 0, 476, 477, 332, 333, 0,
	334, 335, 336, 0, 0, 338, 339, 0, 0, 340,
	478, 0, 341, 0, 479, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 480, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 356, 357, 358, 482, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 0, 375,
	376, 377, 378, 483, 379, 0, 380, 384, 385, 544,
	387, 388, 389, 390, 0, 397, 398, 391, 393, 394,
	395, 392, 396, 399, 400, 0, 401, 381, 382, 402,
	0, 403, 484, 404, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 414, 410, 411, 412, 485, 0, 417,
	418, 416, 0, 419, 420, 421, 422, 423, 267, 424,
	268, 425, 0, 543, 487, 488, 489, 0, 0, 426,
	427, 490, 428, 491, 0, 429, 430, 431, 0, 432,
	433, 0, 0, 434, 435, 436, 437, 439, 0, 440,
	0, 438, 441, 442, 443, 492, 493, 494, 0, 445,
	444, 495, 1772, 0, 206, 0, 446, 447, 496, 448,
	449, 450, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 451, 0, 0, 0, 0, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 456, 457, 458,
	0, 231, 459, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 460,
	461, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 466, 0, 467, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 1771, 469, 470, 0,
	0, 474, 292, 0, 0, 0, 0, 291, 293, 300,
	0, 0, 294, 471, 296, 295, 297, 298, 299, 472,
	0, 473, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 475, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	0, 0, 0, 476, 477, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 0, 0, 340, 478, 0,
	341, 0, 479, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 480, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 0, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 0, 401, 381, 382, 402, 0, 403,
	484, 404, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 485, 0, 417, 418, 416,
	0, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	0, 486, 487, 488, 489, 0, 0, 426, 427, 490,
	428, 491, 0, 429, 430, 431, 0, 432, 433, 0,
	0, 434, 435, 436, 437, 439, 0, 440, 0, 438,
	441, 442, 443, 492, 493, 494, 0, 445, 444, 495,
	547, 0, 206, 0, 446, 447, 496, 448, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	451, 0, 0, 0, 0, 218, 219, 220, 452, 453,
	221, 454, 222, 223, 455, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 456, 457, 458, 0, 537,
	459, 0, 0, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 0, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 460, 461, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 462, 263, 264,
	266, 269, 265, 270, 271, 272, 463, 464, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 465, 276,
	277, 0, 278, 0, 279, 0, 0, 0, 280, 281,
	0, 282, 466, 0, 467, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 468, 469, 470, 0, 0, 474,
	292, 0, 0, 0, 0, 291, 293, 300, 0, 0,
	294, 471, 296, 295, 297, 298, 299, 472, 0, 473,
	0, 301, 0, 0, 302, 303, 304, 0, 305, 306,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 475, 0, 314, 315, 0, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 548, 0, 328, 329, 331, 330, 0, 0, 0,
	0, 476, 477, 332, 333, 0, 334, 335, 336, 0,
	0, 338, 339, 0, 0, 340, 478, 0, 341, 0,
	479, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 480, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 482, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 0, 375, 376, 377, 378, 483,
	379, 0, 380, 384, 385, 544, 387, 388, 389, 390,
	0, 397, 398, 391, 393, 394, 395, 392, 396, 1286,
	400, 0, 401, 381, 382, 402, 0, 403, 484, 404,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 414,
	410, 411, 412, 485, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 425, 0, 543,
	487, 488, 489, 0, 0, 426, 427, 490, 428, 491,
	0, 429, 430, 431, 0, 432, 433, 0, 0, 434,
	435, 436, 437, 439, 0, 440, 0, 438, 441, 442,
	443, 492, 493, 494, 0, 445, 444, 495, 1271, 0,
	206, 0, 446, 447, 496, 448, 449, 450, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 451, 0,
	0, 0, 0, 218, 219, 220, 452, 453, 221, 454,
	222, 223, 455, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 456, 457, 458, 0, 231, 459, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 460, 461, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 462, 263, 264, 266, 269,
	265, 270, 271, 272, 463, 464, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 465, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	466, 0, 467, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 1270, 469, 470, 0, 0, 474, 292, 0,
	0, 0, 0, 291, 293, 300, 0, 0, 294, 471,
	296, 295, 297, 298, 299, 472, 0, 473, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 475,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 0, 0, 0, 476,
	477, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 0, 0, 340, 478, 0, 341, 0, 479, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 480,
	350, 481, 351, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 482, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 0, 375, 376, 377, 378, 483, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 0, 397,
	398, 391, 393, 394, 395, 392, 396, 399, 400, 0,
	401, 381, 382, 402, 0, 403, 484, 404, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 414, 410, 411,
	412, 485, 0, 417, 418, 416, 0, 419, 420, 421,
	422, 423, 267, 424, 268, 425, 0, 486, 487, 488,
	489, 0, 0, 426, 427, 490, 428, 491, 0, 429,
	430, 431, 0, 432, 433, 0, 0, 434, 435, 436,
	437, 439, 0, 440, 0, 438, 441, 442, 443, 492,
	493, 494, 0, 445, 444, 495, 1220, 0, 206, 0,
	446, 447, 496, 448, 449, 450, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 451, 0, 0, 0,
	0, 218, 219, 220, 452, 453, 221, 454, 222, 223,
	455, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 456, 457, 458, 0, 231, 459, 0, 0, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 0, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 460, 461, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 462, 263, 264, 266, 269, 265, 270,
	271, 272, 463, 464, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 465, 276, 277, 0, 278, 0,
	279, 0, 0, 0, 280, 281, 0, 282, 466, 0,
	467, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	1219, 469, 470, 0, 0, 474, 292, 0, 0, 0,
	0, 291, 293, 300, 0, 0, 294, 471, 296, 295,
	297, 298, 299, 472, 0, 473, 0, 301, 0, 0,
	302, 303, 304, 0, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 475, 0, 314,
	315, 0, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 0, 328,
	329, 331, 330, 0, 0, 0, 0, 476, 477, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 0,
	0, 340, 478, 0, 341, 0, 479, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 480, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	482, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	0, 375, 376, 377, 378, 483, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 0, 397, 398, 391,
	393, 394, 395, 392, 396, 399, 400, 0, 401, 381,
	382, 402, 0, 403, 484, 404, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 414, 410, 411, 412, 485,
	0, 417, 418, 416, 0, 419, 420, 421, 422, 423,
	267, 424, 268, 425, 0, 486, 487, 488, 489, 0,
	0, 426, 427, 490, 428, 491, 0, 429, 430, 431,
	0, 432, 433, 0, 0, 434, 435, 436, 437, 439,
	0, 440, 0, 438, 441, 442, 443, 492, 493, 494,
	0, 445, 444, 495, 1204, 0, 206, 0, 446, 447,
	496, 448, 449, 450, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 451, 0, 0, 0, 0, 218,
	219, 220, 452, 453, 221, 454, 222, 223, 455, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 456,
	457, 458, 0, 231, 459, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 460, 461, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 462, 263, 264, 266, 269, 265, 270, 271, 272,
	463, 464, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 465, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 0, 282, 466, 0, 467, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 468, 469,
	470, 0, 0, 474, 292, 0, 0, 0, 0, 291,
	293, 300, 0, 0, 294, 471, 296, 295, 297, 298,
	299, 472, 0, 473, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 475, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 0, 328, 329, 331,
	330, 0, 0, 0, 0, 476, 477, 332, 333, 0,
	334, 335, 336, 0, 0, 338, 339, 0, 0, 340,
	478, 0, 341, 0, 479, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 480, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 356, 357, 358, 482, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 0, 375,
	376, 377, 378, 483, 379, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 0, 397, 398, 391, 393, 394,
	395, 392, 396, 399, 400, 0, 401, 381, 382, 402,
	0, 403, 484, 404, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 414, 410, 411, 412, 485, 0, 417,
	418, 416, 0, 419, 420, 421, 422, 423, 267, 424,
	268, 425, 0, 486, 487, 488, 489, 0, 0, 426,
	427, 490, 428, 491, 0, 429, 430, 431, 0, 432,
	433, 0, 0, 434, 435, 436, 437, 439, 0, 440,
	0, 438, 441, 442, 443, 492, 493, 494, 0, 445,
	444, 495, 1143, 0, 206, 0, 446, 447, 496, 448,
	449, 450, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 451, 0, 0, 0, 0, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 456, 457, 458,
	0, 231, 459, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 460,
	461, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 466, 0, 467, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 468, 469, 470, 0,
	0, 474, 292, 0, 0, 0, 0, 291, 293, 300,
	0, 0, 294, 471, 296, 295, 297, 298, 299, 472,
	0, 473, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 475, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	0, 0, 0, 476, 477, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 0, 0, 340, 478, 0,
	341, 0, 479, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 480, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 0, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 0, 401, 381, 382, 402, 0, 403,
	484, 404, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 485, 0, 417, 418, 416,
	0, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	0, 486, 487, 488, 489, 0, 0, 426, 427, 490,
	428, 491, 0, 429, 430, 431, 0, 432, 433, 0,
	0, 434, 435, 436, 437, 439, 0, 440, 0, 438,
	441, 442, 443, 492, 493, 494, 0, 445, 444, 495,
	547, 0, 206, 0, 446, 447, 496, 448, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	451, 0, 0, 0, 0, 218, 219, 220, 452, 453,
	221, 454, 222, 223, 455, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 456, 457, 1011, 0, 231,
	459, 0, 0, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 0, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 460, 461, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 462, 263, 264,
	266, 269, 265, 270, 271, 272, 463, 464, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 465, 276,
	277, 0, 278, 0, 279, 0, 0, 0, 280, 281,
	0, 282, 466, 0, 467, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 468, 469, 470, 0, 0, 474,
	292, 0, 0, 0, 0, 291, 293, 300, 0, 0,
	294, 471, 296, 295, 297, 298, 299, 472, 0, 473,
	0, 301, 0, 0, 302, 303, 304, 0, 305, 306,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 475, 0, 314, 315, 0, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 548, 0, 328, 329, 331, 330, 0, 0, 0,
	0, 476, 477, 332, 333, 0, 334, 335, 336, 0,
	0, 338, 339, 0, 0, 340, 478, 0, 341, 0,
	479, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 480, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 482, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 0, 375, 376, 377, 378, 483,
	379, 0, 380, 384, 385, 544, 387, 388, 389, 390,
	0, 397, 398, 391, 393, 394, 395, 392, 396, 399,
	400, 0, 401, 381, 382, 402, 0, 403, 484, 404,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 414,
	410, 411, 412, 485, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 425, 0, 543,
	487, 488, 489, 0, 0, 426, 1012, 490, 428, 491,
	0, 429, 430, 431, 0, 432, 433, 0, 0, 434,
	435, 436, 437, 439, 0, 440, 0, 438, 441, 442,
	443, 492, 493, 494, 206, 445, 444, 495, 0, 0,
	0, 0, 446, 447, 496, 448, 449, 450, 0, 0,
	0, 212, 213, 214, 215, 216, 994, 217, 0, 0,
	0, 0, 451, 0, 0, 0, 0, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 456, 457, 458,
	0, 231, 459, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 460,
	461, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 466, 0, 467, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 468, 469, 470, 0,
	0, 474, 292, 0, 0, 0, 0, 291, 293, 300,
	0, 0, 294, 471, 296, 295, 297, 298, 299, 472,
	0, 473, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 475, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	0, 0, 0, 476, 477, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 0, 0, 340, 478, 0,
	341, 0, 479, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 480, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 0, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 0, 401, 381, 382, 402, 0, 403,
	484, 404, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 485, 0, 417, 418, 416,
	0, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	0, 486, 487, 488, 489, 0, 0, 426, 427, 490,
	428, 491, 0, 429, 430, 431, 0, 432, 433, 0,
	0, 434, 435, 436, 437, 439, 0, 440, 0, 438,
	441, 442, 443, 492, 493, 494, 0, 445, 444, 495,
	547, 0, 206, 0, 446, 447, 496, 448, 449, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	451, 0, 0, 0, 0, 218, 219, 220, 452, 453,
	221, 454, 222, 223, 455, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 456, 457, 458, 0, 537,
	459, 0, 0, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 535, 0, 242, 243, 244,
	0, 0, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 460, 461, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 462, 263, 264,
	266, 269, 265, 270, 271, 272, 463, 464, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 465, 276,
	277, 0, 278, 0, 279, 0, 0, 0, 280, 281,
	0, 282, 466, 0, 467, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 468, 469, 470, 0, 0, 474,
	292, 0, 0, 0, 0, 291, 293, 300, 0, 0,
	294, 471, 296, 295, 297, 298, 299, 472, 0, 473,
	0, 301, 0, 0, 302, 303, 304, 0, 305, 306,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 475, 0, 314, 315, 0, 0, 316, 536, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 548, 0, 328, 329, 331, 330, 0, 0, 0,
	0, 476, 477, 332, 333, 0, 334, 335, 336, 0,
	0, 338, 339, 0, 0, 340, 478, 0, 341, 0,
	479, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 480, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 482, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 0, 375, 376, 377, 378, 538,
	379, 0, 380, 384, 385, 544, 387, 388, 389, 390,
	0, 397, 398, 391, 393, 394, 395, 392, 396, 539,
	400, 0, 401, 381, 382, 402, 0, 403, 484, 404,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 414,
	410, 411, 412, 485, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 425, 0, 543,
	487, 488, 489, 0, 0, 426, 541, 490, 428, 491,
	0, 429, 430, 431, 0, 432, 433, 0, 0, 434,
	435, 436, 437, 439, 0, 440, 0, 438, 441, 442,
	443, 492, 493, 494, 0, 445, 444, 495, 531, 0,
	206, 0, 446, 447, 496, 448, 449, 450, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 451, 0,
	0, 0, 0, 218, 219, 220, 452, 453, 221, 454,
	222, 223, 455, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 456, 457, 458, 0, 231, 459, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 460, 461, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 462, 263, 264, 266, 269,
	265, 270, 271, 272, 463, 464, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 465, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	466, 0, 467, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 468, 469, 470, 0, 0, 474, 292, 0,
	0, 0, 0, 291, 293, 300, 0, 0, 294, 471,
	296, 295, 297, 298, 299, 472, 0, 473, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 475,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 0, 0, 0, 476,
	477, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 0, 0, 340, 478, 0, 341, 0, 479, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 480,
	350, 481, 351, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 482, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 0, 375, 376, 377, 378, 483, 379, 0,
	380, 532, 385, 386, 387, 388, 389, 390, 0, 397,
	398, 391, 393, 394, 395, 392, 396, 399, 400, 0,
	401, 381, 382, 402, 0, 403, 484, 404, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 414, 410, 411,
	412, 485, 0, 417, 418, 416, 0, 419, 420, 421,
	422, 423, 267, 424, 268, 425, 0, 486, 487, 488,
	489, 0, 0, 426, 427, 490, 428, 491, 0, 429,
	430, 431, 0, 432, 433, 0, 0, 434, 435, 436,
	437, 439, 0, 440, 0, 438, 441, 442, 443, 492,
	493, 494, 0, 445, 444, 495, 529, 0, 206, 0,
	446, 447, 496, 448, 449, 450, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 451, 0, 0, 0,
	0, 218, 219, 220, 452, 453, 221, 454, 222, 223,
	455, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 456, 457, 458, 0, 231, 459, 0, 0, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 0, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 460, 461, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 462, 263, 264, 266, 269, 265, 270,
	271, 272, 463, 464, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 465, 276, 277, 0, 278, 0,
	279, 0, 0, 0, 280, 281, 0, 282, 466, 0,
	467, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	468, 469, 470, 0, 0, 474, 292, 0, 0, 0,
	0, 291, 293, 300, 0, 0, 294, 471, 296, 295,
	297, 298, 299, 472, 0, 473, 0, 301, 0, 0,
	302, 303, 304, 0, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 475, 0, 314,
	315, 0, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 0, 328,
	329, 331, 330, 0, 0, 0, 0, 476, 477, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 0,
	0, 340, 478, 0, 341, 0, 479, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 480, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	482, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	0, 375, 376, 377, 378, 483, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 0, 397, 398, 391,
	393, 394, 395, 392, 396, 399, 400, 0, 401, 381,
	382, 402, 0, 403, 484, 404, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 414, 410, 411, 412, 485,
	0, 417, 418, 416, 0, 419, 420, 421, 422, 423,
	267, 424, 268, 425, 0, 486, 487, 488, 489, 0,
	0, 426, 427, 490, 428, 491, 0, 429, 430, 431,
	0, 432, 433, 0, 0, 434, 435, 436, 437, 439,
	0, 440, 0, 438, 441, 442, 443, 492, 493, 494,
	0, 445, 444, 495, 523, 0, 206, 0, 446, 447,
	496, 448, 449, 450, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 451, 0, 0, 0, 0, 218,
	219, 220, 452, 453, 221, 454, 222, 223, 455, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 456,
	457, 458, 0, 231, 459, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 460, 461, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 462, 263, 264, 266, 269, 265, 270, 271, 272,
	463, 464, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 465, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 0, 282, 466, 0, 467, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 468, 469,
	470, 0, 0, 474, 292, 0, 0, 0, 0, 291,
	293, 300, 0, 0, 294, 471, 296, 295, 297, 298,
	299, 472, 0, 473, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 475, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 0, 328, 329, 331,
	330, 0, 0, 0, 0, 476, 477, 332, 333, 0,
	334, 335, 336, 0, 0, 338, 339, 0, 0, 340,
	478, 0, 341, 0, 479, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 480, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 356, 357, 358, 482, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 0, 375,
	376, 377, 378, 483, 379, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 0, 397, 398, 391, 393, 394,
	395, 392, 396, 399, 400, 0, 401, 381, 382, 402,
	0, 403, 484, 404, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 414, 410, 411, 412, 485, 0, 417,
	418, 416, 0, 419, 420, 421, 422, 423, 267, 424,
	268, 425, 0, 486, 487, 488, 489, 0, 0, 426,
	427, 490, 428, 491, 0, 429, 430, 431, 0, 432,
	433, 0, 0, 434, 435, 436, 437, 439, 0, 440,
	0, 438, 441, 442, 443, 492, 493, 494, 0, 445,
	444, 495, 499, 0, 206, 0, 446, 447, 496, 448,
	449, 450, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 451, 0, 0, 0, 0, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 456, 457, 458,
	0, 231, 459, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 460,
	461, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 466, 0, 467, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 468, 469, 470, 0,
	0, 474, 292, 0, 0, 0, 0, 291, 293, 300,
	0, 0, 294, 471, 296, 295, 297, 298, 299, 472,
	0, 473, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 475, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	0, 0, 0, 476, 477, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 0, 0, 340, 478, 0,
	341, 0, 479, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 480, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 0, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 0, 401, 381, 382, 402, 0, 403,
	484, 404, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 485, 0, 417, 418, 416,
	0, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	0, 486, 487, 488, 489, 0, 0, 426, 427, 490,
	428, 491, 0, 429, 430, 431, 0, 432, 433, 0,
	0, 434, 435, 436, 437, 439, 0, 440, 0, 438,
	441, 442, 443, 492, 493, 494, 206, 445, 444, 495,
	0, 0, 0, 0, 446, 447, 496, 448, 449, 450,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 451, 0, 0, 0, 0, 218,
	219, 220, 452, 453, 221, 454, 222, 223, 455, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 456,
	457, 458, 0, 231, 459, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 460, 461, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 462, 263, 264, 266, 269, 265, 270, 271, 272,
	463, 464, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 465, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 0, 282, 466, 0, 467, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 468, 469,
	470, 0, 0, 474, 292, 0, 0, 0, 0, 291,
	293, 300, 0, 0, 294, 471, 296, 295, 297, 298,
	299, 472, 0, 473, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 475, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 0, 328, 329, 331,
	330, 0, 0, 0, 0, 476, 477, 332, 333, 0,
	334, 335, 336, 0, 0, 338, 339, 0, 0, 340,
	478, 0, 341, 0, 479, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 480, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 356, 357, 358, 482, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 0, 375,
	376, 377, 378, 483, 379, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 0, 397, 398, 391, 393, 394,
	395, 392, 396, 399, 400, 0, 401, 381, 382, 402,
	0, 403, 484, 404, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 414, 410, 411, 412, 485, 0, 417,
	418, 416, 0, 419, 420, 421, 422, 423, 267, 424,
	268, 425, 0, 486, 487, 488, 489, 0, 0, 426,
	427, 490, 428, 491, 0, 429, 430, 431, 0, 432,
	433, 0, 0, 434, 435, 436, 437, 439, 0, 440,
	0, 438, 441, 442, 443, 492, 493, 494, 206, 445,
	444, 495, 0, 0, 0, 0, 446, 447, 496, 448,
	449, 450, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 451, 0, 0, 0,
	0, 218, 219, 220, 452, 453, 221, 454, 222, 223,
	455, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 456, 457, 458, 0, 231, 459, 0, 0, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 0, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 460, 461, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 462, 263, 264, 266, 269, 265, 270,
	271, 272, 463, 464, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 465, 276, 277, 0, 278, 0,
	279, 0, 0, 0, 280, 281, 0, 282, 466, 0,
	467, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	2544, 469, 470, 0, 0, 474, 292, 0, 0, 0,
	0, 291, 293, 300, 0, 0, 294, 471, 296, 295,
	297, 298, 299, 472, 0, 473, 0, 301, 0, 0,
	302, 303, 304, 0, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 475, 0, 314,
	315, 0, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 0, 328,
	329, 331, 330, 0, 0, 0, 0, 476, 477, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 0,
	0, 340, 478, 0, 341, 0, 479, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 480, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	482, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	0, 375, 376, 377, 378, 483, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 0, 397, 398, 391,
	393, 394, 395, 392, 396, 399, 400, 0, 401, 381,
	382, 402, 0, 403, 484, 404, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 414, 410, 411, 412, 485,
	0, 417, 418, 416, 0, 419, 420, 421, 422, 423,
	267, 424, 268, 425, 0, 486, 487, 488, 489, 0,
	0, 426, 427, 490, 428, 491, 0, 429, 430, 431,
	0, 432, 433, 0, 0, 434, 435, 436, 437, 439,
	0, 440, 0, 438, 441, 442, 443, 492, 493, 494,
	206, 445, 444, 495, 0, 0, 0, 0, 446, 447,
	496, 448, 449, 450, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 451, 0,
	0, 0, 0, 218, 219, 220, 452, 453, 221, 454,
	222, 223, 455, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 456, 457, 458, 0, 231, 459, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 460, 461, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 462, 263, 264, 266, 269,
	265, 270, 271, 272, 463, 464, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 465, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	466, 0, 467, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 2542, 469, 470, 0, 0, 474, 292, 0,
	0, 0, 0, 291, 293, 300, 0, 0, 294, 471,
	296, 295, 297, 298, 299, 472, 0, 473, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 475,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 0, 0, 0, 476,
	477, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 0, 0, 340, 478, 0, 341, 0, 479, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 480,
	350, 481, 351, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 482, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 0, 375, 376, 377, 378, 483, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 0, 397,
	398, 391, 393, 394, 395, 392, 396, 399, 400, 0,
	401, 381, 382, 402, 0, 403, 484, 404, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 414, 410, 411,
	412, 485, 0, 417, 418, 416, 0, 419, 420, 421,
	422, 423, 267, 424, 268, 425, 0, 486, 487, 488,
	489, 0, 0, 426, 427, 490, 428, 491, 0, 429,
	430, 431, 0, 432, 433, 0, 0, 434, 435, 436,
	437, 439, 0, 440, 0, 438, 441, 442, 443, 492,
	493, 494, 206, 445, 444, 495, 0, 0, 0, 0,
	446, 447, 496, 448, 449, 450, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	451, 0, 0, 0, 0, 218, 219, 220, 452, 453,
	221, 454, 222, 223, 455, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 456, 457, 458, 0, 231,
	459, 0, 0, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 0, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 460, 461, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 462, 263, 264,
	266, 269, 265, 270, 271, 272, 463, 464, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 465, 276,
	277, 0, 278, 0, 279, 0, 0, 0, 280, 281,
	0, 282, 466, 0, 467, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 2531, 469, 470, 0, 0, 474,
	292, 0, 0, 0, 0, 291, 293, 300, 0, 0,
	294, 471, 296, 295, 297, 298, 299, 472, 0, 473,
	0, 301, 0, 0, 302, 303, 304, 0, 305, 306,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 475, 0, 314, 315, 0, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 0, 328, 329, 331, 330, 0, 0, 0,
	0, 476, 477, 332, 333, 0, 334, 335, 336, 0,
	0, 338, 339, 0, 0, 340, 478, 0, 341, 0,
	479, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 480, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 482, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 0, 375, 376, 377, 378, 483,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	0, 397, 398, 391, 393, 394, 395, 392, 396, 399,
	400, 0, 401, 381, 382, 402, 0, 403, 484, 404,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 414,
	410, 411, 412, 485, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 425, 0, 486,
	487, 488, 489, 0, 0, 426, 427, 490, 428, 491,
	0, 429, 430, 431, 0, 432, 433, 0, 0, 434,
	435, 436, 437, 439, 0, 440, 0, 438, 441, 442,
	443, 492, 493, 494, 206, 445, 444, 495, 0, 0,
	0, 0, 446, 447, 496, 448, 449, 450, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 451, 0, 0, 0, 0, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 456, 457, 458,
	0, 231, 459, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 460,
	461, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 466, 0, 467, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 2245, 469, 470, 0,
	0, 474, 292, 0, 0, 0, 0, 291, 293, 300,
	0, 0, 294, 471, 296, 295, 297, 298, 299, 472,
	0, 473, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 475, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	0, 0, 0, 476, 477, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 0, 0, 340, 478, 0,
	341, 0, 479, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 480, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 359, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 0, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 0, 401, 381, 382, 402, 0, 403,
	484, 404, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 485, 0, 417, 418, 416,
	0, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	0, 486, 487, 488, 489, 0, 0, 426, 427, 490,
	428, 491, 0, 429, 430, 431, 0, 432, 433, 0,
	0, 434, 435, 436, 437, 439, 0, 440, 0, 438,
	441, 442, 443, 492, 493, 494, 206, 445, 444, 495,
	0, 0, 0, 0, 446, 447, 496, 448, 449, 450,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 451, 0, 0, 0, 0, 218,
	219, 220, 452, 453, 221, 454, 222, 223, 455, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 456,
	457, 458, 0, 231, 459, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 460, 461, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 462, 263, 264, 266, 269, 265, 270, 271, 272,
	463, 464, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 465, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 0, 282, 466, 0, 467, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 468, 469,
	470, 0, 0, 474, 292, 0, 0, 0, 0, 291,
	293, 300, 0, 0, 294, 471, 296, 295, 297, 298,
	299, 472, 0, 473, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 475, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 0, 328, 329, 331,
	330, 0, 0, 0, 0, 476, 477, 332, 333, 0,
	334, 335, 336, 0, 0, 338, 339, 0, 0, 340,
	478, 0, 341, 0, 479, 342, 337, 343, 344, 345,
	346, 347, 348, 0, 349, 480, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 356, 357, 358, 482, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 0, 375,
	376, 377, 378, 483, 379, 0, 380, 532, 385, 386,
	387, 388, 389, 390, 0, 397, 398, 391, 393, 394,
	395, 392, 396, 399, 400, 0, 401, 381, 382, 402,
	0, 403, 484, 404, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 414, 410, 411, 412, 485, 0, 417,
	418, 416, 0, 419, 420, 421, 422, 423, 267, 424,
	268, 425, 0, 486, 487, 488, 489, 0, 0, 426,
	427, 490, 428, 491, 0, 429, 430, 431, 0, 432,
	433, 0, 0, 434, 435, 436, 437, 439, 0, 440,
	0, 438, 441, 442, 443, 492, 493, 494, 206, 445,
	444, 495, 0, 0, 0, 0, 446, 447, 496, 448,
	449, 450, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 451, 0, 1784, 0,
	0, 218, 219, 220, 452, 453, 221, 454, 222, 223,
	455, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 456, 457, 458, 0, 231, 459, 0, 0, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 0, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 460, 461, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 462, 263, 264, 266, 269, 265, 270,
	271, 272, 463, 464, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 465, 276, 277, 0, 278, 0,
	279, 0, 0, 0, 280, 281, 0, 282, 466, 0,
	467, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	468, 469, 470, 0, 0, 474, 292, 0, 0, 0,
	0, 291, 293, 300, 0, 0, 294, 471, 296, 295,
	297, 298, 299, 472, 0, 473, 0, 301, 0, 0,
	302, 303, 304, 0, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 475, 0, 314,
	315, 0, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 0, 328,
	329, 331, 330, 0, 0, 0, 0, 476, 477, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 0,
	0, 340, 478, 0, 341, 0, 479, 342, 337, 343,
	344, 345, 346, 347, 348, 0, 349, 480, 350, 481,
	351, 0, 352, 0, 353, 354, 355, 356, 357, 358,
	482, 359, 360, 0, 361, 362, 363, 364, 365, 0,
	367, 368, 369, 366, 370, 371, 372, 373, 0, 374,
	0, 375, 376, 377, 378, 483, 379, 0, 380, 384,
	385, 386, 387, 388, 389, 390, 0, 397, 398, 391,
	393, 394, 395, 392, 396, 399, 400, 0, 0, 381,
	382, 402, 0, 403, 484, 404, 405, 0, 415, 406,
	407, 408, 383, 409, 413, 414, 410, 411, 412, 485,
	0, 417, 418, 416, 0, 419, 420, 421, 422, 423,
	267, 424, 268, 425, 0, 486, 487, 488, 489, 0,
	0, 426, 427, 490, 428, 491, 0, 429, 430, 431,
	0, 432, 433, 0, 0, 434, 435, 436, 437, 439,
	0, 440, 0, 438, 441, 442, 443, 492, 493, 494,
	206, 445, 444, 495, 0, 0, 0, 0, 446, 447,
	496, 448, 449, 450, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 451, 0,
	0, 0, 0, 218, 219, 220, 452, 453, 221, 454,
	222, 223, 455, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 456, 457, 458, 0, 231, 459, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 460, 461, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 462, 263, 264, 266, 269,
	265, 270, 271, 272, 463, 464, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 465, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	466, 0, 467, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 1240, 469, 470, 0, 0, 474, 292, 0,
	0, 0, 0, 291, 293, 300, 0, 0, 294, 471,
	296, 295, 297, 298, 299, 472, 0, 473, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 475,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 0, 0, 0, 476,
	477, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 0, 0, 340, 478, 0, 341, 0, 479, 342,
	337, 343, 344, 345, 346, 347, 348, 0, 349, 480,
	350, 481, 351, 0, 352, 0, 353, 354, 355, 356,
	357, 358, 482, 359, 360, 0, 361, 362, 363, 364,
	365, 0, 367, 368, 369, 366, 370, 371, 372, 373,
	0, 374, 0, 375, 376, 377, 378, 483, 379, 0,
	380, 384, 385, 386, 387, 388, 389, 390, 0, 397,
	398, 391, 393, 394, 395, 392, 396, 399, 400, 0,
	401, 381, 382, 402, 0, 403, 484, 404, 405, 0,
	415, 406, 407, 408, 383, 409, 413, 414, 410, 411,
	412, 485, 0, 417, 418, 416, 0, 419, 420, 421,
	422, 423, 267, 424, 268, 425, 0, 486, 487, 488,
	489, 0, 0, 426, 427, 490, 428, 491, 0, 429,
	430, 431, 0, 432, 433, 0, 0, 434, 435, 436,
	437, 439, 0, 440, 0, 438, 441, 442, 443, 492,
	493, 494, 206, 445, 444, 495, 0, 0, 0, 0,
	446, 447, 496, 448, 449, 450, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	451, 0, 0, 0, 0, 218, 219, 220, 452, 453,
	221, 454, 222, 223, 455, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 456, 457, 458, 0, 231,
	459, 0, 0, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 0, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 460, 461, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 462, 263, 264,
	266, 269, 265, 270, 271, 272, 463, 464, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 465, 276,
	277, 0, 278, 0, 279, 0, 0, 0, 280, 281,
	0, 282, 466, 0, 467, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 1182, 469, 470, 0, 0, 474,
	292, 0, 0, 0, 0, 291, 293, 300, 0, 0,
	294, 471, 296, 295, 297, 298, 299, 472, 0, 473,
	0, 301, 0, 0, 302, 303, 304, 0, 305, 306,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 475, 0, 314, 315, 0, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 0, 328, 329, 331, 330, 0, 0, 0,
	0, 476, 477, 332, 333, 0, 334, 335, 336, 0,
	0, 338, 339, 0, 0, 340, 478, 0, 341, 0,
	479, 342, 337, 343, 344, 345, 346, 347, 348, 0,
	349, 480, 350, 481, 351, 0, 352, 0, 353, 354,
	355, 356, 357, 358, 482, 359, 360, 0, 361, 362,
	363, 364, 365, 0, 367, 368, 369, 366, 370, 371,
	372, 373, 0, 374, 0, 375, 376, 377, 378, 483,
	379, 0, 380, 384, 385, 386, 387, 388, 389, 390,
	0, 397, 398, 391, 393, 394, 395, 392, 396, 399,
	400, 0, 401, 381, 382, 402, 0, 403, 484, 404,
	405, 0, 415, 406, 407, 408, 383, 409, 413, 414,
	410, 411, 412, 485, 0, 417, 418, 416, 0, 419,
	420, 421, 422, 423, 267, 424, 268, 425, 0, 486,
	487, 488, 489, 0, 0, 426, 427, 490, 428, 491,
	0, 429, 430, 431, 0, 432, 433, 0, 0, 434,
	435, 436, 437, 439, 0, 440, 0, 438, 441, 442,
	443, 492, 493, 494, 206, 445, 444, 495, 0, 0,
	0, 0, 446, 447, 496, 448, 449, 450, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 451, 0, 0, 0, 0, 218, 219, 220,
	452, 453, 221, 454, 222, 223, 455, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 456, 457, 458,
	0, 231, 459, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 460,
	461, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 462,
	263, 264, 266, 269, 265, 270, 271, 272, 463, 464,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	465, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 466, 0, 467, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 468, 469, 470, 0,
	0, 474, 292, 0, 0, 0, 0, 291, 293, 300,
	0, 0, 294, 471, 296, 295, 297, 298, 299, 472,
	0, 473, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 475, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	0, 0, 0, 476, 477, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 0, 0, 340, 478, 0,
	341, 0, 479, 342, 337, 343, 344, 345, 346, 347,
	348, 0, 349, 480, 350, 481, 351, 0, 352, 0,
	353, 354, 355, 356, 357, 358, 482, 950, 360, 0,
	361, 362, 363, 364, 365, 0, 367, 368, 369, 366,
	370, 371, 372, 373, 0, 374, 0, 375, 376, 377,
	378, 483, 379, 0, 380, 384, 385, 386, 387, 388,
	389, 390, 0, 397, 398, 391, 393, 394, 395, 392,
	396, 399, 400, 0, 401, 381, 382, 402, 0, 403,
	484, 404, 405, 0, 415, 406, 407, 408, 383, 409,
	413, 414, 410, 411, 412, 485, 0, 417, 418, 416,
	0, 419, 420, 421, 422, 423, 267, 424, 268, 425,
	0, 486, 487, 488, 489, 0, 0, 426, 427, 490,
	428, 491, 0, 429, 430, 431, 0, 432, 433, 0,
	0, 434, 435, 436, 437, 439, 0, 440, 0, 438,
	441, 442, 443, 492, 493, 494, 206, 445, 444, 495,
	0, 0, 0, 0, 446, 447, 496, 448, 449, 450,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 451, 0, 0, 0, 0, 218,
	219, 220, 452, 453, 221, 454, 222, 223, 455, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 456,
	457, 458, 0, 231, 459, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 460, 461, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 462, 263, 264, 266, 269, 265, 270, 271, 272,
	463, 464, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 465, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 0, 282, 466, 0, 467, 0,
	0, 284, 285, 286, 287, 288, 289, 290, 468, 469,
	470, 0, 0, 474, 292, 0, 0, 0, 0, 291,
	293, 300, 0, 0, 294, 471, 296, 295, 297, 298,
	299, 472, 0, 473, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 475, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 0, 328, 329, 331,
	330, 0, 0, 0, 0, 476, 477, 332, 333, 0,
	334, 335, 336, 0, 0, 338, 339, 0, 0, 340,
	478, 0, 341, 0, 479, 342, 337, 343, 344, 0,
	346, 347, 348, 0, 349, 480, 350, 481, 351, 0,
	352, 0, 353, 354, 355, 0, 357, 358, 482, 359,
	360, 0, 361, 362, 363, 364, 365, 0, 367, 368,
	369, 366, 370, 371, 372, 373, 0, 374, 0, 375,
	376, 377, 378, 483, 0, 0, 380, 384, 385, 386,
	387, 388, 389, 390, 0, 397, 398, 391, 393, 394,
	395, 392, 396, 399, 400, 0, 401, 381, 382, 402,
	0, 403, 484, 404, 405, 0, 415, 406, 407, 408,
	383, 409, 413, 414, 410, 411, 412, 485, 0, 417,
	418, 416, 0, 419, 420, 421, 422, 423, 267, 424,
	268, 425, 0, 486, 487, 488, 489, 0, 0, 426,
	427, 490, 428, 491, 0, 429, 430, 431, 0, 432,
	433, 0, 0, 434, 435, 436, 437, 439, 0, 440,
	0, 438, 441, 442, 443, 492, 493, 494, 0, 445,
	444, 495, 0, 0, 0, 0, 446, 447, 496, 448,
	449, 450, 1395, 1396, 0, 1428, 1429, 1430, 1438, 1439,
	1440, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1431, 0, 0, 0, 0, 0, 0, 1398, 0,
	0, 1444, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1397, 0, 0, 0, 0, 0,
	0, 0, 1417, 0, 0, 0, 0, 0, 0, 1414,
	0, 0, 0, 0, 0, 0, 0, 1395, 1396, 0,
	1428, 1429, 1430, 1438, 1439, 1440, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1431, 0, 0, 0,
	0, 0, 0, 1398, 0, 0, 1444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1420, 1421, 1422, 1423, 0, 1397,
	0, 0, 0, 0, 1403, 0, 0, 1417, 0, 0,
	0, 0, 0, 0, 1414, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1435, 1445, 0, 0, 1425, 1426, 1427, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1441, 1442, 0, 0, 0,
	0, 0, 0, 1412, 1413, 0, 0, 0, 0, 1420,
	1421, 1422, 1423, 0, 0, 0, 0, 0, 1433, 1403,
	0, 0, 0, 0, 0, 1418, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1443, 0, 0, 1435, 1445, 0, 0, 1425,
	1426, 1427, 0, 0, 0, 0, 1432, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1441, 1442, 0, 0, 0, 0, 0, 0, 1412, 1413,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1433, 0, 0, 1424, 0, 0, 0,
	1418, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1419, 0, 0, 1443, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1432, 0, 0, 0, 0, 0, 0, 0, 1436,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1424, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1419,
	0, 0, 0, 1395, 1396, 0, 1428, 1429, 1430, 1438,
	1439, 1440, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1431, 0, 1436, 0, 0, 0, 0, 1398,
	0, 1434, 1444, 0, 1409, 1410, 1416, 1415, 1411, 1437,
	0, 1408, 1406, 1407, 1399, 1400, 1401, 1402, 1404, 1405,
	0, 0, 0, 0, 0, 1397, 0, 2408, 0, 0,
	0, 0, 0, 1417, 0, 0, 0, 0, 0, 0,
	1414, 0, 0, 0, 0, 0, 0, 0, 1395, 1396,
	0, 1428, 1429, 1430, 1438, 1439, 1440, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1431, 0, 0,
	0, 0, 0, 0, 1398, 0, 1434, 1444, 0, 1409,
	1410, 1416, 1415, 1411, 1437, 0, 1408, 1406, 1407, 1399,
	1400, 1401, 1402, 1404, 1405, 1420, 1421, 1422, 1423, 0,
	1397, 0, 2407, 0, 0, 1403, 0, 0, 1417, 0,
	0, 0, 0, 0, 0, 1414, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1435, 1445, 0, 0, 1425, 1426, 1427, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1441, 1442, 0, 0,
	0, 0, 0, 0, 1412, 1413, 0, 0, 0, 0,
	1420, 1421, 1422, 1423, 0, 0, 0, 0, 0, 1433,
	1403, 0, 0, 0, 0, 0, 1418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1443, 0, 0, 1435, 1445, 0, 0,
	1425, 1426, 1427, 0, 0, 0, 0, 1432, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1441, 1442, 0, 0, 0, 0, 0, 0, 1412,
	1413, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1433, 0, 0, 1424, 0, 0,
	0, 1418, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1419, 0, 0, 1443, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1432, 0, 0, 0, 0, 0, 0, 0,
	1436, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1424, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1419, 0, 0, 0, 1395, 1396, 0, 1428, 1429, 1430,
	1438, 1439, 1440, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1431, 0, 1436, 0, 0, 0, 0,
	1398, 0, 1434, 1444, 0, 1409, 1410, 1416, 1415, 1411,
	1437, 0, 1408, 1406, 1407, 1399, 1400, 1401, 1402, 1404,
	1405, 0, 0, 0, 0, 0, 1397, 0, 2404, 0,
	0, 0, 0, 0, 1417, 0, 0, 0, 0, 0,
	0, 1414, 0, 0, 0, 0, 0, 0, 0, 1395,
	1396, 0, 1428, 1429, 1430, 1438, 1439, 1440, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1431, 0,
	0, 0, 0, 0, 0, 1398, 0, 1434, 1444, 0,
	1409, 1410, 1416, 1415, 1411, 1437, 0, 1408, 1406, 1407,
	1399, 1400, 1401, 1402, 1404, 1405, 1420, 1421, 1422, 1423,
	0, 1397, 0, 2403, 0, 0, 1403, 0, 0, 1417,
	0, 0, 0, 0, 0, 0, 1414, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1435, 1445, 0, 0, 1425, 1426, 1427, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1441, 1442, 0,
	0, 0, 0, 0, 0, 1412, 1413, 0, 0, 0,
	0, 1420, 1421, 1422, 1423, 0, 0, 0, 0, 0,
	1433, 1403, 0, 0, 0, 0, 0, 1418, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1443, 0, 0, 1435, 1445, 0,
	0, 1425, 1426, 1427, 0, 0, 0, 0, 1432, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1441, 1442, 0, 0, 0, 0, 0, 0,
	1412, 1413, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1433, 0, 0, 1424, 0,
	0, 0, 1418, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1419, 0, 0, 1443,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1432, 0, 0, 0, 0, 0, 0,
	0, 1436, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1424, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1419, 0, 0, 0, 1395, 1396, 0, 1428, 1429,
	1430, 1438, 1439, 1440, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1431, 0, 1436, 0, 0, 0,
	0, 1398, 0, 1434, 1444, 0, 1409, 1410, 1416, 1415,
	1411, 1437, 0, 1408, 1406, 1407, 1399, 1400, 1401, 1402,
	1404, 1405, 0, 0, 0, 0, 0, 1397, 0, 2402,
	0, 0, 0, 0, 0, 1417, 0, 0, 0, 0,
	0, 0, 1414, 0, 0, 0, 0, 0, 0, 0,
	1395, 1396, 0, 1428, 1429, 1430, 1438, 1439, 1440, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1431,
	0, 0, 0, 0, 0, 0, 1398, 0, 1434, 1444,
	0, 1409, 1410, 1416, 1415, 1411, 1437, 0, 1408, 1406,
	1407, 1399, 1400, 1401, 1402, 1404, 1405, 1420, 1421, 1422,
	1423, 0, 1397, 0, 1979, 0, 0, 1403, 0, 0,
	1417, 0, 0, 0, 0, 0, 0, 1414, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1435, 1445, 0, 0, 1425, 1426, 1427,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1441, 1442,
	0, 0, 0, 0, 0, 0, 1412, 1413, 0, 0,
	0, 0, 1420, 1421, 1422, 1423, 0, 0, 0, 0,
	0, 1433, 1403, 0, 0, 0, 0, 0, 1418, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1443, 0, 0, 1435, 1445,
	0, 0, 1425, 1426, 1427, 0, 0, 0, 0, 1432,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1441, 1442, 0, 0, 0, 0, 0,
	0, 1412, 1413, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1433, 0, 0, 1424,
	0, 0, 0, 1418, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1419, 0, 0,
	1443, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1432, 0, 0, 0, 0, 0,
	0, 0, 1436, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1424, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1419, 0, 0, 0, 1395, 1396, 0, 1428,
	1429, 1430, 1438, 1439, 1440, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1431, 0, 1436, 0, 0,
	0, 0, 1398, 0, 1434, 1444, 0, 1409, 1410, 1416,
	1415, 1411, 1437, 0, 1408, 1406, 1407, 1399, 1400, 1401,
	1402, 1404, 1405, 0, 0, 0, 0, 3240, 1397, 0,
	0, 0, 0, 0, 0, 0, 1417, 0, 0, 0,
	0, 0, 0, 1414, 0, 0, 0, 0, 0, 0,
	0, 1395, 1396, 0, 1428, 1429, 1430, 1438, 1439, 1440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1431, 0, 0, 0, 0, 0, 0, 1398, 0, 1434,
	1444, 0, 1409, 1410, 1416, 1415, 1411, 1437, 0, 1408,
	1406, 1407, 1399, 1400, 1401, 1402, 1404, 1405, 1420, 1421,
	1422, 1423, 3236, 1397, 0, 0, 0, 0, 1403, 0,
	0, 1417, 0, 0, 0, 0, 0, 0, 1414, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1435, 1445, 0, 0, 1425, 1426,
	1427, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1441,
	1442, 0, 0, 0, 0, 0, 0, 1412, 1413, 0,
	0, 0, 0, 1420, 1421, 1422, 1423, 0, 0, 0,
	0, 0, 1433, 1403, 0, 0, 0, 0, 0, 1418,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1443, 0, 0, 1435,
	1445, 0, 0, 1425, 1426, 1427, 0, 0, 0, 0,
	1432, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1441, 1442, 0, 0, 0, 0,
	0, 0, 1412, 1413, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1433, 0, 0,
	1424, 0, 0, 0, 1418, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1419, 0,
	0, 1443, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1432, 0, 0, 0, 0,
	0, 0, 0, 1436, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1424, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1419, 0, 0, 0, 1395, 1396, 0,
	1428, 1429, 1430, 1438, 1439, 1440, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1431, 0, 1436, 0,
	0, 0, 0, 1398, 0, 1434, 1444, 0, 1409, 1410,
	1416, 1415, 1411, 1437, 0, 1408, 1406, 1407, 1399, 1400,
	1401, 1402, 1404, 1405, 0, 0, 0, 0, 3170, 1397,
	0, 0, 0, 0, 0, 0, 0, 1417, 0, 0,
	0, 0, 0, 0, 1414, 0, 0, 0, 0, 0,
	0, 0, 1395, 1396, 0, 1428, 1429, 1430, 1438, 1439,
	1440, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1431, 0, 0, 0, 0, 0, 0, 1398, 0,
	1434, 1444, 0, 1409, 1410, 1416, 1415, 1411, 1437, 0,
	1408, 1406, 1407, 1399, 1400, 1401, 1402, 1404, 1405, 1420,
	1421, 1422, 1423, 3169, 1397, 0, 0, 0, 0, 1403,
	0, 0, 1417, 0, 0, 0, 0, 0, 0, 1414,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1435, 1445, 0, 0, 1425,
	1426, 1427, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1441, 1442, 0, 0, 0, 0, 0, 0, 1412, 1413,
	0, 0, 0, 0, 1420, 1421, 1422, 1423, 0, 0,
	0, 0, 0, 1433, 1403, 0, 0, 0, 0, 0,
	1418, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1443, 0, 0,
	1435, 1445, 0, 0, 1425, 1426, 1427, 0, 0, 0,
	0, 1432, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1441, 1442, 0, 0, 0,
	0, 0, 0, 1412, 1413, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1433, 0,
	0, 1424, 0, 0, 0, 1418, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1419,
	0, 0, 1443, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1432, 0, 0, 0,
	0, 0, 0, 0, 1436, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1424, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1419, 0, 0, 0, 1395, 1396,
	0, 1428, 1429, 1430, 1438, 1439, 1440, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1431, 0, 1436,
	0, 0, 0, 0, 1398, 0, 1434, 1444, 0, 1409,
	1410, 1416, 1415, 1411, 1437, 0, 1408, 1406, 1407, 1399,
	1400, 1401, 1402, 1404, 1405, 0, 0, 0, 0, 3077,
	1397, 0, 0, 0, 0, 0, 0, 0, 1417, 0,
	0, 0, 0, 0, 0, 1414, 0, 0, 0, 0,
	0, 0, 0, 1395, 1396, 0, 1428, 1429, 1430, 1438,
	1439, 1440, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1431, 0, 0, 0, 0, 0, 0, 1398,
	0, 1434, 1444, 0, 1409, 1410, 1416, 1415, 1411, 1437,
	0, 1408, 1406, 1407, 1399, 1400, 1401, 1402, 1404, 1405,
	1420, 1421, 1422, 1423, 2994, 1397, 0, 0, 0, 0,
	1403, 0, 0, 1417, 0, 0, 0, 0, 0, 0,
	1414, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1435, 1445, 0, 0,
	1425, 1426, 1427, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1441, 1442, 0, 0, 0, 0, 0, 0, 1412,
	1413, 0, 0, 0, 0, 1420, 1421, 1422, 1423, 0,
	0, 0, 0, 0, 1433, 1403, 0, 0, 0, 0,
	0, 1418, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1443, 0,
	0, 1435, 1445, 0, 0, 1425, 1426, 1427, 0, 0,
	0, 0, 1432, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1441, 1442, 0, 0,
	0, 0, 0, 0, 1412, 1413, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1433,
	0, 0, 1424, 0, 0, 0, 1418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1419, 0, 0, 1443, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1432, 0, 0,
	0, 0, 0, 0, 0, 1436, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1424, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1419, 0, 0, 0, 1395,
	1396, 0, 1428, 1429, 1430, 1438, 1439, 1440, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1431, 0,
	1436, 0, 0, 0, 0, 1398, 0, 1434, 1444, 0,
	1409, 1410, 1416, 1415, 1411, 1437, 0, 1408, 1406, 1407,
	1399, 1400, 1401, 1402, 1404, 1405, 0, 0, 0, 0,
	2950, 1397, 0, 0, 0, 0, 0, 0, 0, 1417,
	0, 0, 0, 0, 0, 0, 1414, 0, 0, 0,
	0, 0, 0, 0, 1395, 1396, 0, 1428, 1429, 1430,
	1438, 1439, 1440, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1431, 0, 0, 0, 0, 0, 0,
	1398, 0, 1434, 1444, 0, 1409, 1410, 1416, 1415, 1411,
	1437, 0, 1408, 1406, 1407, 1399, 1400, 1401, 1402, 1404,
	1405, 1420, 1421, 1422, 1423, 2949, 1397, 0, 0, 0,
	0, 1403, 0, 0, 1417, 0, 0, 0, 0, 0,
	0, 1414, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1435, 1445, 0,
	0, 1425, 1426, 1427, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1441, 1442, 0, 0, 0, 0, 0, 0,
	1412, 1413, 0, 0, 0, 0, 1420, 1421, 1422, 1423,
	0, 0, 0, 0, 0, 1433, 1403, 0, 0, 0,
	0, 0, 1418, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1443,
	0, 0, 1435, 1445, 0, 0, 1425, 1426, 1427, 0,
	0, 0, 0, 1432, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1441, 1442, 0,
	0, 0, 0, 0, 0, 1412, 1413, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1433, 0, 0, 1424, 0, 0, 0, 1418, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1419, 0, 0, 1443, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1432, 0,
	0, 0, 0, 0, 0, 0, 1436, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1424, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1419, 0, 0, 0,
	1395, 1396, 0, 1428, 1429, 1430, 1438, 1439, 1440, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1431,
	0, 1436, 0, 0, 0, 0, 1398, 0, 1434, 1444,
	0, 1409, 1410, 1416, 1415, 1411, 1437, 0, 1408, 1406,
	1407, 1399, 1400, 1401, 1402, 1404, 1405, 0, 0, 0,
	0, 2948, 1397, 0, 0, 0, 0, 0, 0, 0,
	1417, 0, 0, 0, 0, 0, 0, 1414, 0, 0,
	0, 0, 0, 0, 0, 1395, 1396, 0, 1428, 1429,
	1430, 1438, 1439, 1440, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1431, 0, 0, 0, 0, 0,
	0, 1398, 0, 1434, 1444, 0, 1409, 1410, 1416, 1415,
	1411, 1437, 0, 1408, 1406, 1407, 1399, 1400, 1401, 1402,
	1404, 1405, 1420, 1421, 1422, 1423, 2914, 1397, 0, 0,
	0, 0, 1403, 0, 0, 1417, 0, 0, 0, 0,
	0, 0, 1414, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1435, 1445,
	0, 0, 1425, 1426, 1427, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1441, 1442, 0, 0, 0, 0, 0,
	0, 1412, 1413, 0, 0, 0, 0, 1420, 1421, 1422,
	1423, 0, 0, 0, 0, 0, 1433, 1403, 0, 0,
	0, 0, 0, 1418, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1443, 0, 0, 1435, 1445, 0, 0, 1425, 1426, 1427,
	0, 0, 0, 0, 1432, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1441, 1442,
	0, 0, 0, 0, 0, 0, 1412, 1413, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1433, 0, 0, 1424, 0, 0, 0, 1418, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1419, 0, 0, 1443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1432,
	0, 0, 0, 0, 0, 0, 0, 1436, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1424,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1419, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1436, 0, 0, 0, 0, 0, 0, 1434,
	0, 0, 1409, 1410, 1416, 1415, 1411, 1437, 0, 1408,
	1406, 1407, 1399, 1400, 1401, 1402, 1404, 1405, 0, 0,
	0, 0, 2728, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1395, 1396, 0, 1428, 1429, 1430, 1438, 1439, 1440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1431, 0, 0, 0, 0, 0, 0, 1398, 0, 0,
	1444, 0, 0, 0, 1434, 0, 0, 1409, 1410, 1416,
	1415, 1411, 1437, 0, 1408, 1406, 1407, 1399, 1400, 1401,
	1402, 1404, 1405, 1397, 0, 2359, 0, 0, 0, 0,
	0, 1417, 0, 0, 0, 0, 0, 0, 1414, 0,
	0, 0, 0, 0, 0, 0, 1395, 1396, 0, 1428,
	1429, 1430, 1438, 1439, 1440, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1431, 0, 0, 0, 0,
	2330, 0, 1398, 0, 0, 1444, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1420, 1421, 1422, 1423, 0, 1397, 0,
	0, 0, 0, 1403, 3329, 0, 1417, 0, 0, 0,
	0, 0, 0, 1414, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1435,
	1445, 0, 0, 1425, 1426, 1427, 0, 0, 0, 0,
	0, 2331, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1441, 1442, 0, 0, 0, 0,
	0, 0, 1412, 1413, 0, 0, 0, 0, 1420, 1421,
	1422, 1423, 0, 0, 0, 0, 0, 1433, 1403, 0,
	0, 0, 0, 0, 1418, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1443, 0, 0, 1435, 1445, 0, 0, 1425, 1426,
	1427, 0, 0, 0, 0, 1432, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1441,
	1442, 0, 0, 0, 3328, 0, 0, 1412, 1413, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1433, 0, 0, 1424, 0, 0, 0, 1418,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1419, 0, 0, 1443, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1432, 0, 0, 0, 0, 0, 0, 0, 1436, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1424, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1419, 0,
	0, 0, 1395, 1396, 0, 1428, 1429, 1430, 1438, 1439,
	1440, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1431, 0, 1436, 0, 0, 0, 0, 1398, 0,
	1434, 1444, 0, 1409, 1410, 1416, 1415, 1411, 1437, 0,
	1408, 1406, 1407, 1399, 1400, 1401, 1402, 1404, 1405, 0,
	0, 0, 0, 0, 1397, 0, 0, 0, 0, 0,
	0, 0, 1417, 0, 0, 0, 0, 0, 0, 1414,
	2069, 0, 0, 0, 0, 0, 0, 1395, 1396, 0,
	1428, 1429, 1430, 1438, 1439, 1440, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1431, 0, 0, 0,
	2068, 0, 0, 1398, 0, 1434, 1444, 0, 1409, 1410,
	1416, 1415, 1411, 1437, 0, 1408, 1406, 1407, 1399, 1400,
	1401, 1402, 1404, 1405, 1420, 1421, 1422, 1423, 0, 1397,
	0, 0, 0, 0, 1403, 0, 2447, 1417, 0, 2446,
	0, 0, 0, 0, 1414, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1435, 1445, 0, 0, 1425, 1426, 1427, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1441, 1442, 0, 0, 0,
	0, 0, 0, 1412, 1413, 0, 0, 0, 0, 1420,
	1421, 1422, 1423, 0, 0, 0, 0, 0, 1433, 1403,
	0, 0, 0, 0, 0, 1418, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1443, 0, 0, 1435, 1445, 0, 0, 1425,
	1426, 1427, 0, 0, 0, 0, 1432, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1441, 1442, 0, 0, 0, 0, 0, 0, 1412, 1413,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1433, 0, 0, 1424, 0, 0, 0,
	1418, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1419, 0, 0, 1443, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1432, 0, 0, 0, 0, 0, 0, 0, 1436,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1424, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1419,
	0, 0, 0, 1395, 1396, 0, 1428, 1429, 1430, 1438,
	1439, 1440, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1431, 0, 1436, 0, 0, 0, 0, 1398,
	0, 1434, 1444, 0, 1409, 1410, 1416, 1415, 1411, 1437,
	0, 1408, 1406, 1407, 1399, 1400, 1401, 1402, 1404, 1405,
	0, 0, 0, 0, 0, 1397, 0, 0, 0, 0,
	0, 0, 0, 1417, 0, 0, 0, 0, 0, 0,
	1414, 0, 0, 0, 0, 0, 0, 0, 1395, 1396,
	0, 1428, 1429, 1430, 1438, 1439, 1440, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1431, 0, 0,
	0, 0, 0, 0, 1398, 0, 1434, 1444, 0, 1409,
	1410, 1416, 1415, 1411, 1437, 0, 1408, 1406, 1407, 1399,
	1400, 1401, 1402, 1404, 1405, 1420, 1421, 1422, 1423, 0,
	1397, 0, 0, 0, 0, 1403, 0, 0, 1417, 0,
	0, 0, 0, 0, 0, 1414, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1435, 1445, 0, 0, 1425, 1426, 1427, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1441, 1442, 0, 0,
	0, 0, 0, 0, 1412, 1413, 0, 0, 0, 0,
	1420, 1421, 1422, 1423, 0, 0, 0, 0, 0, 1433,
	1403, 0, 0, 0, 0, 0, 1418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1443, 0, 0, 1435, 1445, 0, 0,
	1425, 1426, 1427, 0, 0, 0, 0, 1432, 793, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1441, 1442, 0, 0, 0, 0, 0, 0, 1412,
	1413, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1433, 0, 0, 1424, 0, 0,
	0, 1418, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1419, 0, 0, 1443, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1432, 0, 0, 0, 0, 0, 0, 0,
	1436, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1424, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1419, 0, 0, 0, 1395, 1396, 0, 1428, 1429, 1430,
	1438, 1439, 1440, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1431, 0, 1436, 0, 0, 0, 0,
	1398, 0, 1434, 1444, 0, 1409, 1410, 1416, 1415, 1411,
	1437, 0, 1408, 1406, 1407, 1399, 1400, 1401, 1402, 1404,
	1405, 0, 0, 0, 0, 0, 1397, 2716, 0, 0,
	0, 0, 0, 0, 1417, 0, 0, 0, 0, 0,
	0, 1414, 0, 0, 0, 0, 0, 0, 0, 1395,
	1396, 0, 1428, 1429, 1430, 1438, 1439, 1440, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1431, 0,
	0, 0, 2448, 0, 0, 1398, 0, 1434, 1444, 0,
	1409, 1410, 1416, 1415, 1411, 1437, 0, 1408, 1406, 1407,
	1399, 1400, 1401, 1402, 1404, 1405, 1420, 1421, 1422, 1423,
	0, 1397, 0, 0, 0, 0, 1403, 0, 0, 1417,
	0, 2453, 0, 0, 0, 0, 1414, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1435, 1445, 0, 0, 1425, 1426, 1427, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1441, 1442, 0,
	0, 0, 0, 0, 0, 1412, 1413, 0, 0, 0,
	0, 1420, 1421, 1422, 1423, 0, 0, 0, 0, 0,
	1433, 1403, 0, 0, 0, 0, 0, 1418, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1443, 0, 0, 1435, 1445, 0,
	0, 1425, 1426, 1427, 0, 0, 0, 0, 1432, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1441, 1442, 0, 0, 0, 0, 0, 0,
	1412, 1413, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1433, 0, 0, 1424, 0,
	0, 0, 1418, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1419, 0, 0, 1443,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1432, 0, 0, 0, 0, 0, 0,
	0, 1436, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1424, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1419, 0, 0, 0, 1395, 1396, 0, 1428, 1429,
	1430, 1438, 1439, 1440, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1431, 0, 1436, 0, 0, 0,
	0, 1398, 0, 1434, 1444, 0, 1409, 1410, 1416, 1415,
	1411, 1437, 0, 1408, 1406, 1407, 1399, 1400, 1401, 1402,
	1404, 1405, 0, 0, 0, 0, 0, 1397, 0, 0,
	0, 0, 0, 0, 0, 1417, 0, 0, 0, 0,
	0, 0, 1414, 0, 0, 0, 0, 0, 0, 0,
	1395, 1396, 0, 1428, 1429, 1430, 1438, 1439, 1440, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1431,
	0, 0, 0, 2401, 0, 0, 1398, 0, 1434, 1444,
	0, 1409, 1410, 1416, 1415, 1411, 1437, 0, 1408, 1406,
	1407, 1399, 1400, 1401, 1402, 1404, 1405, 1420, 1421, 1422,
	1423, 0, 1397, 0, 0, 0, 0, 1403, 0, 0,
	1417, 0, 0, 0, 0, 0, 0, 1414, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1435, 1445, 0, 0, 1425, 1426, 1427,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1441, 1442,
	0, 0, 0, 0, 0, 0, 1412, 1413, 0, 0,
	0, 0, 1420, 1421, 1422, 1423, 0, 0, 0, 0,
	0, 1433, 1403, 0, 0, 0, 0, 0, 1418, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1443, 0, 0, 1435, 1445,
	0, 0, 1425, 1426, 1427, 0, 0, 0, 0, 1432,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1441, 1442, 2415, 0, 0, 0, 0,
	0, 1412, 1413, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1433, 0, 0, 1424,
	0, 0, 0, 1418, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1419, 0, 0,
	1443, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1432, 0, 0, 0, 0, 0,
	0, 0, 1436, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1424, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1419, 0, 0, 0, 1395, 1396, 0, 1428,
	1429, 1430, 1438, 1439, 1440, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1431, 0, 1436, 0, 0,
	0, 0, 1398, 0, 1434, 1444, 0, 1409, 1410, 1416,
	1415, 1411, 1437, 0, 1408, 1406, 1407, 1399, 1400, 1401,
	1402, 1404, 1405, 0, 0, 0, 0, 0, 1397, 0,
	0, 0, 0, 0, 0, 0, 1417, 0, 0, 0,
	0, 0, 0, 1414, 0, 0, 0, 0, 0, 0,
	0, 1395, 1396, 0, 1428, 1429, 1430, 1438, 1439, 1440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1431, 0, 0, 0, 0, 0, 0, 1398, 0, 1434,
	1444, 0, 1409, 1410, 1416, 1415, 1411, 1437, 0, 1408,
	1406, 1407, 1399, 1400, 1401, 1402, 1404, 1405, 1420, 1421,
	1422, 1423, 0, 1397, 0, 0, 0, 0, 1403, 0,
	0, 1417, 0, 0, 0, 0, 0, 0, 1414, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1435, 1445, 0, 0, 1425, 1426,
	1427, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1441,
	1442, 0, 0, 0, 0, 0, 0, 1412, 1413, 0,
	0, 0, 0, 1420, 1421, 1422, 1423, 0, 0, 0,
	0, 0, 1433, 1403, 0, 0, 0, 0, 0, 1418,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1443, 0, 0, 1435,
	1445, 0, 0, 1425, 1426, 1427, 0, 0, 0, 0,
	1432, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1441, 1442, 0, 0, 0, 0,
	0, 0, 1412, 1413, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1433, 0, 0,
	1424, 0, 0, 0, 1418, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1419, 0,
	0, 1443, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1436, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1607, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1424, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1419, 1619, 1601, 1608, 1591, 1629, 1628,
	0, 0, 1593, 1592, 0, 0, 0, 0, 0, 0,
	1639, 1640, 0, 0, 0, 0, 0, 0, 1436, 0,
	0, 0, 0, 0, 0, 1434, 0, 0, 1409, 1410,
	1416, 1415, 1411, 1437, 0, 1408, 1406, 1407, 1399, 1400,
	1401, 1402, 1404, 1405, 0, 0, 0, 0, 0, 0,
	1630, 0, 1626, 1625, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1624, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1623, 1621, 1622, 0, 0, 0, 703,
	1434, 734, 0, 1409, 1410, 1416, 1415, 1411, 1437, 0,
	1408, 1406, 1407, 1399, 1400, 1401, 1402, 1404, 1405, 0,
	0, 0, 0, 710, 0, 1603, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 708, 1612, 1606, 1614, 1616,
	1617, 1618, 1613, 0, 1611, 0, 0, 0, 0, 0,
	0, 0, 0, 1635, 1636, 0, 0, 0, 709, 0,
	0, 589, 0, 711, 0, 0, 0, 739, 0, 0,
	0, 0, 0, 717, 718, 0, 0, 0, 0, 728,
	0, 0, 0, 0, 590, 1595, 0, 0, 0, 0,
	0, 0, 735, 712, 0, 0, 0, 1627, 0, 0,
	0, 1604, 0, 1605, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 610, 0, 0, 0, 733,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 0, 0, 593, 1620,
	0, 0, 0, 1588, 1586, 1587, 1590, 1589, 0, 0,
	713, 0, 0, 0, 616, 0, 0, 707, 0, 0,
	594, 0, 0, 0, 0, 0, 0, 0, 0, 614,
	0, 0, 0, 714, 715, 0, 0, 0, 1596, 1597,
	1599, 1600, 0, 0, 0, 0, 595, 0, 0, 0,
	0, 0, 0, 1615, 1598, 721, 0, 0, 0, 0,
	0, 0, 716, 0, 1638, 0, 596, 0, 0, 597,
	620, 0, 0, 0, 623, 0, 0, 720, 0, 0,
	0, 0, 1594, 0, 1631, 1632, 1633, 1634, 0, 0,
	736, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1602, 0, 0, 0, 0, 1609, 1637, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 719, 619,
	0, 0, 0, 0, 0, 600, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 730, 0, 0, 0, 0,
	0, 0, 0, 0, 598, 725, 0, 0, 0, 0,
	0, 0, 0, 601, 0, 0, 0, 0, 705, 723,
	737, 0, 0, 0, 0, 0, 0, 0, 0, 602,
	0, 0, 0, 0, 706, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 726, 0, 0, 0, 724, 0,
	0, 0, 740, 741, 0, 0, 622, 0, 738, 0,
	0, 0, 0, 0, 0, 727, 603, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 604,
	0, 0, 0, 0, 729, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 609, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 731, 0, 605, 0,
	0, 618, 0, 617, 0, 0, 0, 0, 606, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 607,
	0, 0, 0, 0, 613, 0, 0, 0, 0, 624,
	0, 621, 0, 0, 0, 611,
}
var sqlPact = [...]int{

	4338, -1000, -1000, -1000, -1000, -1000, -1000, 191, 190, 189,
	183, 182, 181, 179, 176, 171, -1000, -1000, -1000, 166,
	-1000, -1000, 164, -1000, 159, 156, 153, 152, -1000, 149,
	143, -1000, -1000, -1000, -1000, 142, 141, 140, 47950, 1481,
	57300, 49168, 1466, 2022, 42664, 56892, 42256, 56484, 56076, 135,
	-1000, 55668, 134, 130, 124, -1000, -1000, 123, 1560, 34474,
	122, 109, 108, 1705, 105, 104, -1000, 103, -1000, 68089,
	1154, -1000, 102, 100, -1000, 8994, 4470, 48760, 1976, 94,
	92, 34065, 1952, -1000, -1000, 1146, -1000, -1000, 91, 90,
	89, 87, 86, 85, 84, 80, 77, -1000, 75, 74,
	73, 71, 70, 66, 65, 64, 63, 62, 56, 55,
	54, 53, 52, 51, -1000, 68027, 1397, 1288, 1287, 1282,
	1271, 1263, 794, 50, 49, 48, 43, 39, 37, -1000,
	-1000, 36, 35, 33, 32, -1000, 28, 27, 161, 25,
	24, 20, 18, 14, 2036, 1944, 1176, 673, 16173, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 61320,
	57702, 7, -9, 6, -1000, 2265, 790, 28753, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 459, -1000,
	-1000, -1000, 295, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1394, 645, -1000,
	-1000, -1000, 55260, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 57702, -1000, 1478, -38, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 642, -1000, 1477, 187, 1426, -1000, -1000, -1000,
	-1000, -1000, 57702, -1000, -1000, 2553, 2551, 1447, 640, 54858,
	-1000, 1684, -1000, 751, 18772, -1000, 981, -1000, 18772, 287,
	-1000, -1000, -1000, -1000, -1000, 41848, 13158, 41440, 41032, 38188,
	54450, 12740, 47548, 995, -1000, -1000, -1000, -1000, -1000, 0,
	35680, 57702, -1000, 248, -1000, -1000, -1000, -1000, -1000, -1000,
	24949, 563, 24505, 536, 24061, 512, -1000, -1000, -1000, -1000,
	2550, 2549, 883, 2548, 2206, 60918, 1317, 2547, 1190, 950,
	833, 2545, 2544, 2543, 2542, 2541, 2539, 2538, 1118, 54042,
	1975, 37770, 37352, 47950, 47950, 1809, 53634, -1000, -1000, 1030,
	1024, -1000, -1000, -1000, -1000, 2079, 2015, 1986, 47140, -1000,
	-1000, 2537, 2536, 2534, 2533, 2532, 60516, 1279, 2529, 1721,
	2528, 2527, 2520, 2519, 2517, 2515, 2512, 2510, 2507, -1000,
	46732, 46324, 45916, 45508, 53226, 36934, 36516, -1000, -1000, -1000,
	30381, 7257, 52818, 31219, 47950, -1000, -1000, 25380, -65, -1000,
	-1000, -1000, 1960, -1000, 25380, -65, -1000, 1381, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1773, 1256, 2408, 36098, 1434,
	1091, 2078, 2503, 1687, 2077, 2076, 2070, 2063, 2049, 2501,
	1173, 2500, 1143, 2494, 1189, 2046, 2432, 1432, 40624, 2491,
	2484, 2249, 2045, 1959, -1000, -1000, -1000, -1000, 1166, -1000,
	-1000, -1000, 43066, -1000, -1000, 1398, -1000, -1000, 1398, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 994, 59712, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1207, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1376, -1000, 1435, -1000, -1000, 2482, 1944, 1745,
	2237, 2237, 2237, 2312, 423, 418, -1000, 161, -1000, -1000,
	67535, -1000, -1000, 25380, 25380, 25380, 25380, 25380, 1365, -1000,
	638, -1000, -1000, 677, -1000, 637, 578, -1000, -1000, -1000,
	-1000, -1000, -1000, 635, 2428, -1000, 860, -1000, -1000, -1000,
	-1000, 2403, -1000, 15298, -1000, -1000, -1000, 409, 632, 25380,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 240, 759, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 568, 1309, 567, 567, 567, -1000, -1000, 821,
	-1000, -1000, -1000, 264, 565, 256, 564, -1000, -1000, -1000,
	-1000, 1973, 629, 628, -1000, 626, 625, 624, -1000, -1000,
	-1000, 621, 620, 619, 617, 614, 612, 610, 596, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 808, -1000, 595, 594,
	592, 590, 588, 586, 584, 583, 582, -1000, -1000, -2,
	57702, -1000, 459, -2, -1000, -1000, 581, -1000, 19203, 19203,
	19203, -1000, -1000, 1474, 25380, -1000, 1769, -1000, 3679, -229,
	730, 29565, -1000, 27922, 730, 684, 32439, -1000, 1957, -1000,
	-1000, 580, 239, -1000, -1000, 1953, 57702, 13574, 47950, 47950,
	-1000, -1000, 25380, -1000, -1000, 38604, 35278, 57702, 48352, 2358,
	67883, 35278, 57702, 1972, -1000, -1000, -1000, 57702, -1000, 25380,
	-1000, 2348, 1666, -24, -1000, -1000, -1000, -1000, -1000, 1691,
	1752, 910, 1200, -1000, 18772, 2199, -1000, -1000, -1000, 237,
	13574, -1000, 1594, 2143, 1046, -1000, 1501, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1223, 2137, -1000, 1744, 2133,
	1218, -1000, -1000, 785, 2129, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1453, -1000, -1000, 2238, -1000, -1000,
	1406, 2128, -179, 38604, 35680, -6, -1000, -1000, -57, -1000,
	12322, 67535, -1000, -1000, -1000, 67535, 743, -1000, -1000, 2123,
	-1000, 67535, 707, -1000, -1000, 2121, -1000, -1000, -1000, 2481,
	-1000, 2479, 1655, 2478, 2476, 2475, -1000, 1111, 1295, 2474,
	-1000, 2473, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 45100,
	44692, 826, -1000, 1473, -1000, -1000, 44284, 776, 1654, -1000,
	-1000, 1653, -1000, 830, -1000, 2472, 52410, 1847, 776, 1649,
	-1000, -1000, -1000, -1000, -1000, 47950, -1000, 47950, -1000, 47950,
	-1000, 1117, -1000, 60114, -229, -1000, -1000, -1000, -1000, -1000,
	2120, 2471, 2470, 2469, -1000, 57702, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 162, 2116, -1000, -1000, 162,
	2112, -1000, 162, 2097, -1000, 154, 2071, -1000, -1000, 1517,
	2065, -1000, -105, 2062, -1000, -1000, -105, 2061, -1000, -13,
	-1000, -1000, -1000, 790, -1000, 29973, 52002, 38604, 770, 659,
	67535, -1000, 38604, 67535, -1000, -1000, 51594, 43882, -1000, -1000,
	1057, 1748, -1000, -1000, -1000, -1000, 38604, 38604, -1000, 51186,
	-1000, -1000, -1000, 1428, 2263, 47950, -1000, -1000, 1971, -1000,
	34876, 47950, -1000, 47950, -1000, 47950, -1000, 47950, -1000, 47950,
	-1000, -1000, -1000, -1000, -1000, 2109, 1293, 1280, -1000, 57702,
	-1000, -1000, 2267, 57702, -1000, -1000, -1000, 1689, -1000, -1000,
	-1000, -1000, 47950, -1000, -1000, -1000, -1000, -1000, -1000, 1970,
	-1000, 1211, -1000, 1056, -1000, -1000, 173, -1000, -1000, -24,
	-1000, 59712, -1000, -1000, 1944, 1745, -1000, 57702, -1000, -1000,
	-1000, 1944, 1486, 1803, 23617, 1774, 25380, 161, -1000, -1000,
	161, 161, 18341, -1000, -1000, 67883, 67883, 13574, 1010, 25380,
	25380, 25380, 25380, 25380, 25380, 25380, 25380, 25380, 25380, 25380,
	25380, 25380, 25380, 25380, 25380, 25380, 25380, 25380, 25380, 25380,
	25380, 25380, 25380, 25380, 25380, 25380, 25380, 25380, 25380, 25380,
	25380, 25380, 25380, 25380, 1454, 25380, 993, 25380, 25380, 25380,
	25380, 1361, -1000, -1000, 1392, 492, 1412, -1000, 2390, 2390,
	2390, 7790, 7790, 562, 2468, 677, -1000, 25380, -1000, -65,
	25380, 13992, -1000, 2418, 1089, -1000, -1000, 418, 8268, 1608,
	-1000, 417, 14436, -1000, -1000, -1000, 15298, 578, 23173, 25380,
	802, 67535, 11906, 1926, 1891, -1000, 2417, -1000, -1000, 2403,
	-1000, -1000, -1000, -1000, 2416, 1004, 1003, 2415, -1000, 2414,
	2413, 577, 705, 703, 691, 687, 685, 25380, 25380, 25380,
	25380, 25380, 25380, 25380, 25380, -1000, 22742, 22298, 21854, 26673,
	21410, 25380, 15729, 20966, 20522, 57702, -2, 2347, 25380, 185,
	-1000, 66086, -1000, 185, 185, 576, -30, 67535, 1778, 1771,
	29159, 1760, 1377, 1377, 1377, -1000, 575, 665, 730, 9394,
	49570, 1417, 730, 730, 229, 261, 416, 27516, 1769, 49570,
	-1000, -1000, 47950, 574, 13992, 13574, 1074, -34, 228, 1788,
	1779, -1000, -40, 770, 992, -32, -1000, 5013, -41, -1000,
	1020, -1000, -1000, -1000, -1000, 110, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 805, 573,
	570, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 568, 1309, 567, 567, 567, -1000, -1000,
	-1000, 264, 565, 256, 564, -1000, -1000, -1000, -1000, -1000,
	-1000, 1946, -57, 48352, 761, -45, 896, -24, -1000, 1398,
	-1000, 1160, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2424, -1000, 2396, -1000, -1000,
	2411, -5, -1000, -1000, 13574, -1000, -29, 1281, -1000, 40216,
	2261, 2242, 2218, 1114, -1000, 1080, 2304, 43066, 2326, 8,
	-1000, 1943, -1000, -1000, 745, 1044, 990, 43066, 1744, -1000,
	67883, -1000, 1805, 2303, 1110, 1105, 1110, 1110, 1123, -1000,
	43066, 988, 1336, 38604, -1000, 985, -1000, -31, 2325, -3,
	-1000, 1939, 984, -1000, -1000, 47950, 13574, 719, -6, 35680,
	57702, 224, -1000, 25380, -65, 25380, -65, -1000, -1000, 2039,
	-1000, -1000, -1000, 2465, 1262, 1714, -1000, -1000, -1000, 559,
	1646, 1744, 1642, -1000, -1000, 43474, 1938, 57702, 1797, -12,
	47950, -1000, -1000, 1321, -1000, 2038, 2037, 550, 2464, -1000,
	1472, 1640, -1000, -1000, -1000, 59310, 1019, 2029, 791, 163,
	2346, 163, 33251, -1000, 57702, -1000, 57702, -1000, -1000, -1000,
	2463, -1000, 47950, -1000, -1000, 47950, -1000, 47950, -1000, 47950,
	-1000, 47950, 47950, -1000, 57702, 38604, 38604, 38604, 5013, 39412,
	-50, 413, -1000, 50784, 57702, 854, 39814, -210, 719, -1000,
	719, -1000, 47950, 1968, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 57702, -1000, 57702, -1000, -1000, -1000, -1000,
	-1000, -1000, 1127, -1000, 1967, -1000, 1965, -1000, 30, -1000,
	-1000, -1000, -1000, 1577, 47950, 47950, 47950, -1000, 43066, -1000,
	-1000, 1944, -1000, -1000, -1000, -1000, -1000, 67535, -1000, 494,
	-1000, -1000, 67535, 1201, 1820, -1000, 1820, -8, -1000, 65705,
	1739, 47950, -1000, -1000, -1000, -1000, -1000, 744, 800, 800,
	1002, 1002, 1002, 1002, 2328, 280, 1096, 787, 408, 408,
	408, 408, 408, 408, 408, 408, 3902, 299, 299, 3902,
	3902, 3902, 3902, 3902, 299, 299, 299, 408, 408, 408,
	7790, 67610, 6284, 25380, 25380, 983, 1388, 492, 5943, 25380,
	6384, 6384, 6384, 6384, -1000, 1828, -1000, -1000, -1000, -1000,
	1923, 558, 26673, 26673, -1000, -1000, -1000, -1000, 14867, 25380,
	-1000, -1000, -1000, -1000, 20078, -1000, -1000, 65254, -246, 412,
	-167, 3, -1000, 25380, 25380, 25380, 405, -1000, 404, -1000,
	-1000, 972, -1000, 964, 963, 957, -1000, 544, 215, 25380,
	57702, -1000, 62968, 664, -49, -1000, -55, 1098, -1000, 25380,
	214, -1000, 1383, 541, 540, 388, -56, 387, 741, 737,
	382, 367, 366, 25380, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 67229, 62893, 62587, 62512, 7711, 62206,
	62131, -63, 363, -1000, 1919, -167, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 362, -1000, 361, -1000, 67154, -167, 360,
	7609, -1000, 26673, 26673, 26673, -1000, 357, -1000, 66011, -1000,
	66848, 19647, 19647, 19647, 354, 66773, 25380, -167, -67, -1000,
	-68, -1000, -1000, 539, -72, 791, 19203, 28344, 13574, -1000,
	791, 791, 25380, -1000, 25380, 29159, 29159, 1301, 1766, 29159,
	-1000, -1000, -1000, -1000, 49570, 652, 730, 49570, -1000, 2403,
	1781, -1000, -1000, -1000, 57702, 459, -1000, 49570, 49570, 13574,
	730, -1000, 352, 31625, 3, 206, -1000, -1000, 13574, 1763,
	1763, -1000, 1915, 57702, 2370, -1000, -1000, 67883, -1000, 674,
	909, -1000, 2409, 533, -1000, 2403, 2403, 57702, 160, 18772,
	-1000, 1398, -1000, -1000, 1187, -1000, 1276, -1000, -1000, -1000,
	-1000, 18772, -1000, 1230, 47950, 57702, 57702, -1000, -1000, 1628,
	58908, 1607, 67883, 57702, -1000, -1000, 531, 530, 1738, 1736,
	57702, 57702, 58506, 58104, 57702, 1313, 25380, 1357, 1362, -65,
	-1000, -65, 529, 1028, 47950, 47950, 1210, -1000, -1000, -1000,
	-1000, -1000, 47950, -1000, -1000, 2406, -1000, 1110, -1000, -1000,
	-1000, 1110, 1744, 1191, 47950, 38604, 784, 57702, 1343, -65,
	-1000, -65, 528, 13574, 1229, -1000, 1866, -1000, 1495, -1000,
	-1000, 11490, 67535, -1000, 67535, -1000, 57702, -1000, 824, 57702,
	39814, 766, 2024, -1000, 1744, 2021, 459, -1000, -1000, 32845,
	-57, 770, 38604, 47950, -12, 38604, 38604, 38604, 2461, 526,
	2460, -1000, 47950, 2020, 1470, 1603, 2068, 712, 57702, 1407,
	-1000, 25380, 1242, -1000, 32033, 840, 57702, 1175, 146, -1000,
	-1000, -1000, 22, 57702, -1000, 2459, -1000, -1000, 162, 162,
	162, -1000, 154, 1517, -1000, -105, -105, -1000, -1000, 5013,
	770, -18, 525, -1000, 718, 717, 30803, 38604, -73, -1000,
	-1000, -1000, -1000, -1000, 47950, 57702, 618, 1846, 57702, -1000,
	770, -1000, 783, -1000, 1040, -57, -57, -1000, 1125, 1124,
	57702, -1000, 13574, 57702, 47950, 13574, 47950, -1000, -1000, -1000,
	-1000, -1000, 1201, -1000, 25380, -1000, -1000, -1000, 18341, -1000,
	-1000, -1000, 47950, -216, 25380, 25380, 5616, 5411, 25380, 26673,
	26673, -1000, 25380, 5061, -1000, -1000, -1000, -1000, -1000, 1913,
	523, 25380, 67883, 4465, 3522, -1000, 350, 8804, 3902, -1000,
	25380, -1000, 348, 17910, -1000, 66392, -39, -39, -1000, 2423,
	1634, 1316, 1261, 1141, 2405, 11074, -167, -74, -1000, -1000,
	672, -1000, 2026, -1000, 25380, 66467, 10658, -1000, 33657, 792,
	1407, -1000, -1000, 2403, 729, -1000, -1000, -1000, 729, -1000,
	65179, 67883, 67883, 25380, 25380, -1000, 25380, 25380, 25380, -1000,
	-1000, 25380, -1000, -1000, 1912, 25380, -1000, 67883, 67883, 26673,
	26673, 26673, 26673, 26673, 26673, 26673, 26673, 26673, 26673, 26673,
	26673, 26673, 26673, 26673, 26673, 26673, 26673, 26673, 1631, 26673,
	2388, 2388, 2388, -1000, 1911, 1912, 25380, 25380, 67883, 347,
	346, 336, -1000, 25380, -167, -1000, -1000, 5013, -1000, 1889,
	-1000, -185, -1000, 1769, -1000, -1000, 1889, 1889, -79, 67535,
	-1000, 1301, -1000, 522, 25380, 29159, -1000, 663, -1000, -80,
	-1000, 49570, -1000, 662, -247, -1000, 715, -1000, 459, -1000,
	-1000, -1000, 194, 49570, -1000, -88, -1000, 2343, 334, 13574,
	-1000, -1000, -1000, -1000, -1000, -65, -57, 1425, -1000, 2404,
	-1000, 661, 332, 2403, 331, 329, -57, 57702, -1000, -24,
	-1000, -1000, -1000, -1000, -1000, -1000, 948, 940, -1000, 2019,
	-1000, 1587, -1000, 844, -1000, 1232, 25380, 25380, 521, 517,
	1330, 2458, 2018, 1517, 2017, 1517, -1000, -1000, 752, -1000,
	67535, 516, 514, -1000, -29, 1241, -1000, -1000, 25380, 25380,
	50378, -1000, 2238, -1000, 934, -1000, -1000, -1000, 1744, 930,
	-1000, -1000, 1320, -1000, -1000, -1000, -1000, 25380, -1000, -31,
	929, 770, 1910, 1061, -1000, 2457, 2456, 2455, 328, -42,
	-1000, 2341, 1468, 57702, 47950, 47950, 2340, 719, -1000, 2403,
	-1000, -1000, -1000, -1000, 776, -1000, -1000, 2454, -1000, 851,
	13574, 47950, 2013, 1707, 712, 39010, -1000, 776, 1803, -1000,
	67535, -1000, 1175, 17466, 2245, -93, -1000, 186, -1000, -1000,
	-1000, 791, 33251, 29159, 25380, 2452, -94, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 49976, 49976, 38604, 38604, 38604,
	770, 57702, 57702, 39814, 2449, 513, 57702, 57702, 511, -1000,
	-1000, -1000, 1415, 47950, -1000, -1000, 775, -1000, -1000, 1344,
	1489, -1000, 1429, 64873, -1000, 2236, 13574, 2332, 6384, 25380,
	25380, 211, 475, 446, 6384, 25380, 25380, 67883, 8905, -112,
	25380, 25380, -1000, 25380, 656, 67535, 2422, 25380, 324, 323,
	322, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 321,
	-1000, -1000, -1000, -1000, -1000, 67535, 25380, 147, -1000, -1000,
	-1000, 61722, -1000, 25380, 320, 319, -1000, -1000, -1000, 318,
	317, 8344, 6845, 64798, 64492, 64417, 67535, 1911, 67535, -1000,
	-1000, 842, 842, 1099, 1099, 1099, 1099, 2388, 349, 289,
	383, 456, 456, 456, 611, 689, 689, 456, 456, 456,
	1907, 1651, 510, 6514, -1000, -1000, 67535, 67535, 314, -1000,
	-1000, -1000, -167, 313, 1883, 2302, -1000, 29159, 1883, 1883,
	-1000, -1000, 57702, 67535, -1000, -229, -1000, 2403, -1000, -1000,
	1781, -1000, 9822, -1000, 13574, -1000, -1000, 31625, -1000, 508,
	-1000, 111, -1000, -1000, 655, -1000, -1000, 312, -1000, -1000,
	-57, 57702, 57702, 57702, 2010, -1000, 1815, -1000, 64111, -114,
	-1000, 65705, 25380, 57702, -1000, 1366, 1757, 875, -1000, 57702,
	-1000, 57702, -1000, -1000, 57702, 57702, 47950, 57702, 57702, -119,
	67535, -64, -1000, 714, -1000, 47950, 47950, 38604, -120, 13574,
	-1000, 38604, 914, -1000, -1000, -1000, 1841, -65, -1000, 2448,
	506, 1744, -65, -1000, 649, -1000, -1000, 505, 57702, 1461,
	504, 13574, 1710, 712, 39010, -1000, 1019, 1175, -1000, -1000,
	-87, -1000, 502, -65, 57702, 2438, 1407, -1000, -95, 67535,
	-1000, 713, -1000, -121, -1000, -1000, 307, -1000, 2189, 2183,
	-1000, -1000, 25380, 500, 499, 57702, 1625, -1000, -1000, -1000,
	-1000, 13574, 1035, -1000, -1000, -1000, 2236, 6384, 6384, 25380,
	25380, 25380, 6384, 8905, -125, -1000, 6384, 6384, -167, -1000,
	-1000, 66392, -1000, -1000, -1000, -1000, 67535, 10242, 1346, -1000,
	64036, -1000, -1000, -1000, -1000, 25380, 25380, -1000, -1000, -1000,
	-1000, -1000, 26673, 1905, 496, 67883, -1000, -1000, 762, 25380,
	25380, 1769, 762, 762, -130, 730, -1000, -1000, -1000, 2403,
	111, -1000, 2437, 13574, -1000, -1000, -1000, -1000, -1000, 57702,
	-1000, 57702, -1000, 13574, 57702, 1908, 1576, -1000, -1000, 1735,
	495, 26673, 47950, 750, 1916, 1341, 25380, -1000, -134, -139,
	1567, -1000, -1000, 1542, 25380, -1000, 67883, 1517, 1517, -140,
	-141, -1000, 928, 925, 924, 57702, 17035, -1000, -1000, -1000,
	921, -1000, -105, 25380, 1343, 1859, 771, -1000, 39814, 766,
	-1000, -1000, -1000, 25380, -1000, 47950, 25380, 1449, -1000, 712,
	39010, -1000, 2068, -1000, 2119, 57702, 2210, -1000, -1000, -1000,
	1803, 492, -1000, 770, 490, 489, -147, 25380, 25380, -153,
	-132, -1000, 723, 716, -1000, -1000, 47950, -1000, 6384, 6384,
	6384, -1000, 305, -1000, -1000, 1407, 2300, -1000, 63730, 63655,
	3920, 26673, 67883, -158, -1000, 57702, 67535, -167, -1000, -1000,
	-1000, 49570, 647, -1000, -1000, 1737, -1000, -1000, -1000, 57702,
	1583, -1000, -1000, 25380, 6514, 487, 25380, -1000, -1000, 1835,
	1941, 1841, 484, -1000, -1000, -1000, -1000, 1233, -1000, -1000,
	67535, 2278, -1000, -1000, 480, 479, 57702, 57702, 476, 696,
	1904, -1000, 474, 67535, 766, -1000, 1370, -1000, 1807, 304,
	2334, -162, 851, -166, 47950, 39010, -1000, 1707, 1014, -168,
	57702, 1175, -1000, -1000, 38604, 38604, 1341, -170, -174, -1000,
	1625, -1000, 57702, -1000, 57702, -1000, -1000, 1347, 25380, -1000,
	-1000, 3920, -176, -1000, -160, -1000, 2330, -1000, -1000, -1000,
	-1000, 2005, 63349, 1675, 57702, 63274, 1931, -1000, -1000, 1343,
	57702, 47950, 849, 13574, 1344, 1344, -1000, -1000, 25380, 16604,
	1355, 25380, -1000, 47950, -1000, 2179, 1841, -65, 1341, 472,
	1341, 462, -1000, 1710, 1095, -1000, 791, -1000, -1000, -180,
	-188, 1841, 1341, -1000, -1000, -192, -193, 301, 26242, 26242,
	26242, -167, -1000, 57702, 460, 1990, -1000, 1431, 1312, 297,
	874, -1000, -1000, 1916, -194, 459, -1000, 25380, -1000, -199,
	-1000, 839, -200, -1000, 838, -204, -1000, 1902, -1000, -208,
	455, -1000, 1343, 771, 1841, 25380, 1841, 25380, -1000, 33251,
	-1000, 770, 770, 1343, 1841, -1000, -1000, -1000, -1000, -1000,
	27089, 1446, 1161, 65630, -1000, -1000, -1000, -1000, 57702, -1000,
	1441, 1440, 1162, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1675, 67535, -1000, 1344, 1855, -1000, 1344, 1901, -1000,
	1350, -1000, 57702, 766, -1000, 1343, -213, 1343, -214, -205,
	-1000, -1000, -1000, 1343, 2336, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2167, -1000, 862, 1411, 1411, 1431, -1000, 433,
	-1000, 426, -1000, -218, -1000, 788, 1341, 788, 1341, -1000,
	-1000, 25811, -1000, 2375, -1000, -1000, 1664, -1000, 1916, 25380,
	25380, 1458, -1000, 2436, 1841, -1000, 1841, -1000, -1000, -1000,
	-1000, -1000, -219, -230, -1000, -1000, -1000, -1000, 1343, 1343,
	1343, 916, 788, 788, -1000, 425, -1000, -1000, 25380, -232,
	1343, -1000,
}
var sqlPgo = [...]int{

	0, 3052, 3050, 3049, 3048, 3047, 3045, 3043, 3040, 3032,
	3030, 3028, 3026, 3025, 3024, 3022, 3021, 3020, 3018, 3015,
	3014, 3013, 3012, 3011, 3009, 3008, 3005, 3004, 3003, 3002,
	3000, 2998, 2997, 2995, 2994, 2992, 2990, 2989, 2987, 2986,
	2983, 2981, 2979, 2978, 29, 2977, 2973, 2972, 2969, 2966,
	2965, 2963, 2959, 2958, 2957, 2956, 2953, 2947, 2946, 2944,
	2916, 2915, 2914, 2911, 2908, 2905, 2904, 2902, 2901, 2900,
	2897, 2896, 2894, 2893, 106, 2888, 2886, 2884, 2883, 2882,
	2880, 2879, 2877, 2876, 2874, 2870, 2868, 2865, 2857, 104,
	2856, 2854, 2853, 2851, 2849, 2844, 2841, 2834, 2833, 2831,
	179, 2829, 2825, 2823, 2822, 2821, 2820, 2818, 2817, 2816,
	2815, 2811, 2810, 2809, 2808, 2807, 2806, 2805, 2804, 2803,
	2802, 2801, 2800, 2799, 2798, 2797, 2796, 197, 140, 2794,
	2792, 2791, 2790, 2789, 2788, 90, 86, 27, 2787, 108,
	135, 181, 5618, 176, 2786, 2785, 2784, 2782, 2781, 59,
	137, 131, 125, 122, 85, 2780, 2779, 66, 37, 31,
	28, 99, 2774, 2773, 2772, 1952, 79, 2771, 2770, 191,
	182, 2769, 857, 2768, 121, 98, 89, 83, 67, 2767,
	112, 15, 2766, 127, 96, 2765, 123, 63, 26, 4907,
	6019, 75, 198, 77, 80, 180, 174, 159, 157, 126,
	109, 2764, 185, 2763, 128, 150, 2762, 2758, 2757, 44,
	144, 4, 3, 124, 10, 2755, 18, 2753, 12, 2752,
	2749, 2748, 2747, 38, 129, 2744, 53, 55, 2739, 17,
	95, 172, 2734, 162, 2732, 91, 2731, 188, 153, 149,
	62, 166, 2730, 2729, 2728, 2727, 2724, 97, 20, 93,
	2720, 2719, 103, 177, 2718, 32, 139, 74, 105, 201,
	73, 160, 101, 161, 167, 2717, 2715, 2713, 148, 2708,
	2707, 115, 156, 2706, 2705, 30, 51, 175, 54, 2703,
	2702, 119, 2701, 151, 2700, 2699, 2696, 196, 134, 163,
	5, 57, 87, 23, 11, 169, 118, 76, 70, 2694,
	2890, 1393, 1178, 2693, 110, 81, 36, 84, 114, 192,
	35, 2692, 2691, 1444, 2690, 2689, 2688, 2687, 138, 2685,
	2682, 2679, 107, 72, 65, 2675, 120, 56, 111, 195,
	69, 158, 152, 186, 2672, 132, 2669, 142, 113, 2666,
	145, 184, 265, 2665, 424, 133, 2662, 205, 2661, 2660,
	2656, 2651, 50, 2645, 2644, 88, 2642, 102, 2641, 2638,
	143, 165, 245, 25, 2637, 61, 33, 2636, 147, 43,
	2635, 210, 40, 0, 6220, 4455, 5328, 2634, 3027, 2632,
	155, 92, 2630, 2627, 2626, 2625, 34, 13, 7, 9,
	16, 14, 674, 221, 2624, 2623, 68, 94, 116, 2620,
	194, 164, 2619, 2618, 2614, 71, 2608, 21, 2602, 19,
	2600, 2599, 22, 6, 2598, 2597, 178, 2593, 2592, 2591,
	2590, 2361, 2588, 190, 2586, 100, 2584, 136, 130, 2583,
	2582, 2580, 2579, 187, 2578, 189, 2576, 8, 24, 1,
	2572, 2568, 2563, 154, 2, 2159, 2560, 2559, 58, 146,
	64, 2558, 2557, 141,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 3, 3, 3,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 32, 32, 10,
	10, 9, 9, 9, 11, 11, 6, 6, 6, 6,
	6, 6, 6, 6, 13, 13, 23, 23, 14, 25,
	423, 423, 17, 27, 18, 28, 12, 425, 425, 425,
	425, 21, 19, 19, 29, 138, 138, 138, 138, 16,
	16, 24, 24, 151, 151, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 422, 422, 153, 153, 152, 148,
	148, 426, 426, 154, 154, 154, 156, 156, 33, 33,
	87, 87, 87, 139, 80, 80, 80, 80, 80, 80,
	80, 75, 75, 371, 371, 372, 372, 134, 134, 135,
	135, 135, 135, 136, 136, 137, 137, 137, 47, 35,
	35, 35, 35, 35, 35, 35, 36, 36, 36, 36,
	37, 37, 37, 37, 37, 37, 38, 38, 38, 38,
	38, 38, 45, 45, 45, 128, 128, 48, 48, 48,
	48, 48, 48, 48, 48, 48, 430, 430, 430, 430,
	430, 430, 430, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 430, 430, 430, 430, 430, 431, 431, 432,
	432, 433, 433, 434, 434, 434, 434, 434, 434, 434,
	434, 434, 434, 434, 434, 434, 434, 434, 434, 434,
	434, 434, 434, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 59, 59,
	225, 225, 203, 203, 49, 418, 418, 238, 238, 339,
	339, 61, 61, 62, 62, 62, 62, 62, 62, 63,
	63, 63, 63, 63, 63, 63, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 70, 70, 70, 71,
	71, 71, 68, 68, 68, 66, 66, 66, 65, 65,
	65, 69, 69, 69, 67, 67, 67, 239, 239, 72,
	72, 72, 72, 72, 72, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 341, 341, 73, 73,
	311, 311, 76, 76, 269, 269, 77, 77, 77, 77,
	77, 78, 78, 78, 78, 88, 88, 88, 88, 421,
	421, 231, 231, 169, 169, 169, 169, 83, 83, 83,
	83, 84, 84, 84, 85, 85, 133, 133, 94, 94,
	94, 94, 94, 93, 93, 93, 93, 93, 93, 39,
	39, 39, 40, 40, 41, 41, 42, 42, 43, 43,
	44, 44, 44, 44, 44, 96, 96, 427, 427, 98,
	95, 95, 95, 97, 97, 97, 97, 99, 100, 100,
	100, 100, 100, 100, 101, 101, 365, 365, 246, 246,
	363, 363, 379, 379, 364, 364, 207, 207, 207, 207,
	207, 208, 208, 208, 370, 370, 370, 370, 370, 370,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 118, 118, 118,
	127, 127, 127, 127, 127, 127, 127, 120, 120, 120,
	111, 111, 103, 103, 103, 103, 107, 107, 107, 107,
	107, 104, 104, 108, 108, 110, 110, 112, 112, 112,
	112, 112, 112, 105, 105, 105, 105, 114, 114, 114,
	114, 113, 113, 123, 123, 123, 123, 123, 123, 325,
	325, 119, 119, 119, 119, 122, 122, 122, 122, 260,
	260, 117, 117, 117, 121, 121, 124, 124, 124, 124,
	106, 106, 106, 436, 436, 436, 125, 125, 116, 116,
	126, 126, 126, 126, 126, 126, 126, 115, 115, 115,
	424, 424, 109, 419, 419, 416, 416, 416, 416, 416,
	416, 416, 417, 417, 420, 420, 81, 81, 81, 54,
	54, 437, 437, 437, 55, 55, 438, 438, 438, 435,
	435, 435, 435, 435, 435, 435, 435, 209, 209, 210,
	210, 292, 292, 292, 292, 292, 211, 211, 155, 155,
	155, 214, 215, 215, 212, 212, 213, 213, 213, 217,
	217, 216, 219, 219, 218, 291, 384, 384, 385, 385,
	385, 385, 385, 385, 385, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 382, 382, 382, 383, 380,
	380, 381, 381, 381, 381, 439, 439, 439, 439, 439,
	439, 440, 440, 290, 290, 223, 223, 387, 387, 387,
	387, 388, 388, 388, 388, 388, 391, 390, 389, 389,
	389, 389, 389, 321, 321, 321, 58, 58, 58, 257,
	257, 256, 256, 258, 258, 258, 258, 258, 258, 258,
	258, 258, 258, 258, 258, 258, 258, 130, 130, 56,
	56, 56, 161, 161, 53, 53, 53, 442, 442, 57,
	57, 57, 443, 443, 60, 60, 60, 60, 60, 60,
	52, 52, 52, 52, 52, 444, 444, 275, 275, 274,
	274, 229, 229, 327, 173, 173, 149, 149, 149, 20,
	22, 22, 15, 15, 15, 15, 15, 15, 30, 30,
	31, 31, 26, 26, 428, 428, 429, 429, 82, 82,
	86, 86, 86, 92, 92, 129, 129, 129, 129, 129,
	129, 129, 34, 34, 34, 34, 46, 46, 46, 46,
	90, 446, 446, 446, 91, 91, 445, 445, 168, 168,
	168, 168, 170, 170, 287, 287, 288, 288, 447, 447,
	289, 289, 289, 163, 162, 164, 164, 51, 51, 51,
	157, 157, 158, 158, 159, 159, 160, 160, 448, 448,
	79, 79, 79, 132, 132, 202, 202, 283, 283, 283,
	224, 224, 178, 178, 286, 286, 284, 284, 284, 284,
	255, 255, 255, 131, 131, 234, 234, 248, 248, 249,
	249, 336, 336, 250, 89, 89, 142, 142, 140, 140,
	140, 140, 140, 140, 449, 449, 141, 141, 141, 143,
	143, 143, 143, 143, 143, 143, 146, 146, 146, 146,
	147, 147, 147, 145, 145, 398, 398, 398, 400, 400,
	401, 397, 397, 399, 399, 441, 441, 259, 259, 259,
	221, 222, 220, 220, 450, 450, 227, 227, 226, 228,
	228, 326, 326, 326, 253, 253, 253, 253, 278, 278,
	276, 276, 277, 277, 279, 279, 280, 280, 280, 281,
	281, 282, 282, 252, 252, 307, 307, 144, 144, 144,
	233, 233, 233, 235, 235, 298, 298, 298, 299, 299,
	297, 297, 297, 297, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 329, 329, 236, 236, 330, 285, 285,
	414, 414, 414, 415, 415, 324, 324, 331, 331, 331,
	331, 331, 331, 322, 322, 323, 323, 337, 338, 338,
	263, 263, 263, 263, 261, 261, 262, 262, 332, 332,
	332, 332, 254, 254, 333, 333, 333, 334, 293, 294,
	294, 342, 342, 342, 342, 357, 232, 232, 232, 451,
	451, 343, 343, 343, 343, 343, 343, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 347,
	347, 347, 346, 346, 346, 346, 346, 346, 346, 346,
	346, 346, 346, 346, 346, 346, 346, 346, 346, 346,
	356, 356, 356, 356, 356, 348, 348, 353, 353, 354,
	354, 354, 349, 350, 355, 355, 355, 355, 452, 452,
	359, 359, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 345, 345, 345, 352, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 270, 270,
	271, 271, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 302, 302, 302,
	302, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 392, 392, 392, 392,
	392, 392, 392, 392, 395, 395, 396, 396, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 402, 402, 403,
	403, 405, 405, 406, 406, 407, 408, 408, 408, 409,
	410, 410, 404, 404, 411, 411, 411, 411, 412, 412,
	413, 413, 413, 413, 413, 313, 313, 314, 314, 320,
	320, 320, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 171, 171,
	171, 171, 171, 244, 244, 242, 242, 242, 245, 245,
	243, 243, 241, 241, 240, 240, 310, 310, 308, 308,
	312, 312, 264, 264, 358, 358, 358, 358, 358, 358,
	358, 265, 265, 265, 273, 266, 266, 267, 267, 267,
	267, 267, 304, 305, 268, 268, 268, 306, 306, 315,
	319, 319, 318, 317, 317, 316, 316, 295, 295, 296,
	296, 251, 251, 453, 453, 247, 247, 335, 335, 335,
	335, 205, 205, 237, 237, 204, 204, 197, 197, 198,
	198, 198, 198, 230, 230, 360, 360, 360, 361, 362,
	309, 188, 187, 175, 176, 186, 185, 184, 174, 177,
	181, 182, 183, 179, 180, 193, 192, 191, 190, 340,
	199, 199, 200, 200, 200, 201, 201, 201, 201, 172,
	172, 194, 194, 195, 196, 196, 189, 189, 189, 165,
	165, 165, 166, 166, 167, 167, 369, 369, 367, 367,
	367, 368, 368, 368, 368, 366, 366, 366, 366, 366,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 375, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 378, 378,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 0, 1, 1, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 1, 3, 1, 1, 3, 4, 6, 1,
	3, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 3, 4, 6, 4, 6, 6, 6,
	1, 1, 5, 5, 6, 6, 4, 4, 4, 4,
	3, 4, 4, 7, 4, 5, 3, 5, 7, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 5, 6, 6, 4, 8, 3, 4, 3, 6,
	4, 3, 1, 3, 2, 1, 1, 3, 1, 3,
	2, 2, 0, 1, 1, 0, 2, 0, 7, 2,
	5, 6, 2, 1, 6, 4, 9, 7, 12, 12,
	2, 7, 2, 1, 1, 1, 3, 3, 0, 3,
	1, 3, 1, 1, 3, 2, 5, 0, 5, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 3, 3,
	3, 5, 3, 3, 5, 3, 3, 5, 3, 3,
	5, 3, 6, 6, 3, 1, 1, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 3, 3, 4, 3,
	4, 7, 4, 4, 4, 3, 5, 7, 4, 3,
	3, 4, 3, 3, 3, 3, 3, 2, 0, 1,
	0, 1, 0, 3, 3, 3, 3, 3, 6, 4,
	4, 4, 3, 5, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 4, 1, 1, 2, 1, 2, 7, 3,
	2, 0, 1, 3, 6, 1, 2, 1, 3, 2,
	0, 8, 3, 2, 2, 2, 2, 2, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 3, 5, 3, 3, 5, 3, 1, 3, 2,
	2, 5, 3, 6, 3, 1, 1, 2, 1, 1,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 3, 5, 2,
	3, 0, 3, 2, 3, 0, 2, 3, 2, 3,
	2, 6, 4, 7, 2, 6, 4, 7, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 2, 1,
	2, 2, 3, 2, 4, 3, 2, 2, 1, 2,
	1, 3, 3, 1, 2, 1, 2, 1, 2, 1,
	1, 3, 5, 4, 6, 4, 3, 0, 1, 3,
	2, 4, 2, 4, 1, 6, 3, 1, 1, 5,
	3, 2, 6, 3, 3, 4, 4, 3, 1, 3,
	2, 1, 3, 1, 2, 1, 1, 2, 2, 3,
	1, 1, 1, 1, 1, 3, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 2, 3, 3,
	1, 1, 1, 1, 1, 2, 2, 5, 7, 3,
	3, 3, 3, 4, 4, 3, 4, 4, 3, 4,
	4, 4, 3, 2, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 2, 3, 3,
	3, 2, 3, 5, 4, 6, 4, 6, 4, 1,
	0, 2, 3, 3, 3, 7, 5, 3, 3, 2,
	0, 4, 2, 3, 3, 3, 4, 3, 3, 3,
	3, 4, 3, 1, 1, 1, 2, 3, 2, 3,
	6, 6, 7, 9, 6, 3, 4, 5, 5, 3,
	1, 1, 5, 2, 0, 1, 1, 1, 1, 3,
	2, 2, 2, 1, 2, 0, 3, 3, 2, 10,
	13, 0, 2, 3, 9, 12, 0, 2, 3, 1,
	1, 2, 2, 2, 2, 1, 0, 1, 0, 1,
	3, 1, 1, 1, 1, 3, 8, 0, 1, 1,
	0, 2, 1, 0, 1, 0, 9, 9, 3, 1,
	3, 7, 1, 3, 11, 3, 2, 0, 3, 1,
	2, 2, 3, 2, 6, 2, 1, 1, 2, 4,
	2, 5, 5, 5, 2, 8, 9, 6, 5, 3,
	1, 5, 8, 5, 11, 0, 1, 3, 3, 2,
	2, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 5, 8, 4, 1,
	0, 1, 2, 2, 1, 2, 3, 2, 2, 3,
	2, 2, 2, 2, 2, 3, 1, 4, 2, 4,
	7, 3, 3, 0, 3, 6, 3, 1, 1, 8,
	7, 5, 0, 1, 6, 7, 6, 5, 3, 4,
	14, 17, 14, 17, 4, 0, 2, 2, 0, 1,
	0, 1, 3, 2, 2, 0, 1, 1, 0, 6,
	6, 8, 6, 8, 8, 10, 8, 10, 6, 8,
	6, 8, 6, 8, 1, 0, 2, 0, 2, 2,
	3, 3, 2, 2, 2, 1, 2, 1, 2, 1,
	2, 1, 3, 2, 3, 2, 2, 2, 2, 2,
	2, 1, 1, 0, 2, 2, 1, 0, 1, 3,
	2, 0, 2, 1, 1, 0, 1, 3, 1, 0,
	1, 1, 1, 2, 3, 2, 2, 8, 11, 3,
	3, 0, 3, 0, 3, 0, 3, 0, 1, 0,
	6, 7, 3, 6, 3, 1, 3, 1, 4, 2,
	1, 3, 1, 3, 8, 5, 3, 4, 3, 0,
	2, 2, 0, 10, 3, 2, 0, 1, 3, 1,
	1, 3, 3, 5, 1, 1, 3, 3, 2, 3,
	4, 3, 4, 5, 0, 2, 2, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 8, 8, 8, 2,
	4, 4, 4, 2, 2, 2, 2, 3, 1, 3,
	6, 1, 0, 1, 0, 1, 0, 1, 1, 0,
	1, 5, 1, 0, 1, 0, 1, 0, 3, 1,
	3, 2, 4, 5, 2, 2, 1, 1, 1, 0,
	2, 5, 2, 3, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 3, 0, 2, 0, 4, 2, 5,
	3, 2, 0, 1, 3, 3, 5, 1, 1, 3,
	2, 4, 4, 0, 8, 4, 3, 4, 1, 5,
	3, 4, 5, 1, 5, 1, 3, 2, 0, 3,
	0, 2, 3, 1, 3, 2, 0, 3, 4, 5,
	4, 5, 4, 3, 2, 1, 0, 5, 1, 0,
	2, 2, 2, 1, 1, 0, 4, 2, 1, 2,
	2, 4, 1, 3, 1, 2, 3, 2, 2, 1,
	0, 2, 5, 2, 1, 1, 2, 3, 0, 1,
	1, 1, 1, 1, 1, 2, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 5, 4, 1,
	2, 1, 4, 1, 1, 2, 1, 1, 1, 1,
	1, 0, 1, 2, 5, 1, 4, 2, 5, 1,
	4, 3, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 1, 0,
	1, 4, 1, 3, 3, 3, 5, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 5, 4, 6,
	3, 5, 4, 6, 4, 6, 5, 7, 3, 3,
	3, 3, 3, 4, 3, 2, 4, 2, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 4, 1, 3, 1, 3,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 6, 2, 1, 5,
	1, 1, 1, 1, 2, 1, 5, 5, 3, 1,
	1, 1, 2, 2, 2, 4, 3, 5, 6, 8,
	6, 6, 4, 3, 4, 1, 1, 1, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 6, 6,
	8, 8, 6, 4, 6, 6, 6, 4, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	3, 4, 3, 4, 3, 4, 4, 3, 6, 5,
	5, 5, 4, 4, 3, 4, 3, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 2, 0, 1, 4,
	2, 2, 2, 2, 2, 4, 1, 1, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 2, 3, 1, 2, 3, 2, 3,
	2, 3, 1, 0, 1, 3, 1, 3, 3, 3,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 1, 2, 3, 0, 3, 3, 2,
	2, 1, 2, 2, 3, 2, 1, 1, 1, 5,
	1, 2, 4, 2, 0, 1, 0, 3, 5, 1,
	0, 1, 2, 1, 0, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 3, 1, 1, 1, 1,
	5, 3, 1, 1, 3, 1, 2, 2, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 7, 1, 7, 5, 3, 1,
	1, 1, 1, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 445, -74, -47, -45, -76, -77, -62,
	-75, -78, -73, -88, -92, -82, -94, -129, -3, -33,
	-35, -48, -61, -63, -72, -80, -79, -81, -83, -87,
	-86, -39, -89, -93, -102, -130, -131, -132, 80, 67,
	120, 102, 107, 126, 152, 276, 305, 315, 299, -97,
	-98, 334, -34, -46, -91, -90, -4, -10, 27, 38,
	-36, -37, -38, 52, -56, -53, -50, -59, -430, 82,
	-399, -64, -67, -69, -434, 112, 125, 163, 269, -84,
	-85, 301, 303, -41, -40, 121, -140, -142, -95, -96,
	-133, -103, -104, -105, -106, -107, -108, -109, -110, -111,
	-112, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, 337, 383, 39, 346, 68,
	115, 309, 21, -5, -6, -7, -8, -9, -11, -22,
	-49, -51, -52, -54, -55, -60, -57, -58, -398, -65,
	-66, -68, -70, -71, 300, -143, -141, 442, 395, -13,
	-17, -18, -14, -16, -19, -15, -23, -27, -28, -25,
	-24, -26, -29, -30, -31, -32, -20, -21, -12, 413,
	421, -146, -144, -145, -147, 322, 403, 360, 445, 445,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, 445, 445, 445, -190, -194,
	-195, -196, -189, -165, -375, -378, 4, -373, -376, 131,
	176, 240, 21, 22, 23, 24, 25, 27, 37, 38,
	39, 42, 44, 45, 48, 49, 50, 51, 52, 53,
	56, 61, 66, 67, 68, 69, 70, 75, 72, 73,
	74, 77, 79, 80, 81, 84, 85, 93, 94, 95,
	96, 97, 98, 102, 105, 104, 107, 110, 111, 112,
	114, 116, 117, 120, 121, 124, 122, 366, 368, 123,
	125, 126, 127, 137, 138, 139, 141, 142, 144, 146,
	150, 151, 153, 157, 159, 160, 161, 162, 163, 164,
	165, 177, 172, 178, 182, 185, 184, 186, 187, 188,
	179, 193, 196, 197, 198, 200, 201, 204, 205, 206,
	207, 210, 209, 212, 215, 216, 219, 220, 223, 225,
	226, 228, 229, 227, 230, 233, 231, 232, 235, 236,
	238, 237, 245, 246, 248, 249, 250, 264, 253, 254,
	257, 260, 263, 265, 266, 267, 268, 269, 270, 272,
	274, 276, 278, 280, 281, 282, 283, 284, 285, 287,
	288, 290, 291, 292, 293, 294, 299, 296, 297, 298,
	300, 301, 302, 303, 305, 307, 308, 309, 310, 312,
	314, 335, 336, 348, 315, 316, 317, 318, 319, 320,
	321, 325, 329, 326, 327, 328, 330, 323, 324, 331,
	332, 334, 337, 339, 341, 342, 345, 346, 347, 349,
	352, 353, 354, 350, 351, 344, 359, 357, 358, 361,
	362, 363, 364, 365, 367, 369, 377, 378, 380, 383,
	384, 385, 387, 388, 391, 392, 393, 394, 399, 395,
	397, 400, 401, 402, 408, 407, 414, 415, 417, 418,
	419, 32, 40, 41, 43, 46, 57, 58, 59, 62,
	99, 100, 119, 128, 129, 140, 154, 156, 166, 167,
	168, 183, 189, 191, 171, 213, 243, 244, 258, 262,
	273, 275, 286, 311, 340, 355, 371, 372, 373, 374,
	379, 381, 403, 404, 405, 409, 416, 251, -183, 2,
	-165, -165, 276, 26, 2, 26, 272, 324, 362, 364,
	2, 192, 2, -421, -231, 2, 26, -169, -165, 82,
	152, 322, -183, 2, -421, -231, 24, 2, -165, 2,
	-170, 2, 315, -165, 445, 77, 220, 61, 311, 331,
	-100, 378, -99, 371, 317, -101, -365, 2, 233, -165,
	445, 445, 445, 445, 2, 360, 267, 407, 323, 396,
	95, 283, 176, -416, 2, 4, -376, -373, -198, -197,
	360, 95, -196, -189, 435, -195, 445, 445, 445, 2,
	197, 198, 282, 281, 331, 332, 445, 445, 445, 2,
	25, 55, 76, 79, 101, 127, 147, 150, 255, -431,
	226, 264, 280, 317, 330, 359, 369, 380, -435, 347,
	56, 396, -442, 385, 110, -274, 95, 364, 362, 220,
	151, 392, 307, 155, 390, 105, 182, 394, 393, 445,
	445, 25, 55, 64, 79, 110, 127, 147, 150, -433,
	264, 280, 314, 317, 330, 359, 369, 385, 380, 2,
	407, 323, 360, 176, 95, 396, 307, 279, -74, 2,
	442, 29, 334, -139, 360, 2, -165, 197, 198, 2,
	445, 445, -416, 2, 197, 198, 2, 319, 445, 445,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 2, -127, 331, 347, 160, 38, 61,
	26, 66, 96, 153, 176, 177, 205, 76, 77, 281,
	220, 198, -325, 332, 361, 318, 357, 378, 82, 397,
	308, 419, -424, 122, 4, 95, 233, 333, 371, 70,
	365, 366, -441, 2, 360, -445, 2, 378, 378, 2,
	-445, 2, -445, 2, -168, 2, 378, 375, -446, 378,
	416, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, -141, -143, -142, 445, 445, 445, 445,
	445, -127, 331, 2, 61, 26, -449, 145, -226, -227,
	389, 190, 118, 256, -140, -142, 2, -398, -363, 2,
	-300, -379, -302, 433, 434, 428, 239, 420, -313, 101,
	390, 251, -378, -303, -315, 119, 311, -245, 8, 9,
	5, 6, 7, -172, -344, -309, -352, 382, 130, 242,
	-201, 447, 10, 442, -395, -142, -314, 33, 156, 54,
	-367, -200, -346, -354, -350, -351, -451, 44, 50, 49,
	369, 232, 325, 326, 341, 327, 328, 42, 399, 172,
	248, 250, 184, 4, 191, -199, -189, -392, -393, -373,
	-374, 183, 189, 185, 340, 186, 187, 188, 41, 286,
	141, 142, 140, 111, 100, 99, 244, 46, 45, 43,
	404, -355, 97, 371, 372, 373, 374, 200, 201, -165,
	-375, 64, 87, 88, 86, 91, 90, 92, 89, 333,
	396, 55, 32, 166, 167, 171, 243, 168, 62, -394,
	351, 83, 149, 181, 169, 194, 195, 199, 214, 217,
	234, 241, 259, 261, 306, 338, -452, 405, 128, 129,
	262, 273, 355, 379, 381, 154, 213, 57, 58, -400,
	287, -401, -183, -400, 445, 445, 446, 445, -220, -221,
	-222, 2, 26, 108, 442, 2, -328, 2, 440, -332,
	-142, 208, -331, 442, -329, -190, 252, -396, 312, -392,
	-393, -172, -189, -200, 4, -223, 442, 444, 360, 65,
	2, -269, 442, -165, 26, -139, 251, 375, 446, -311,
	442, 251, 148, 253, -165, 2, 2, 335, 2, 442,
	-100, 59, 378, -288, 2, -289, -162, -163, -164, 196,
	278, 285, 419, -363, -427, 148, 425, 375, -363, -246,
	444, 2, -332, 166, -190, 2, -187, -366, 4, -373,
	-376, -374, -377, 64, -375, 26, 28, 29, 30, 31,
	33, 34, 35, 36, 47, 54, 55, 60, 63, 65,
	76, 82, 86, 87, 89, 88, 90, 91, 92, 101,
	103, 106, 108, 109, 113, 115, 118, 130, 132, 145,
	147, 148, 152, 155, 158, 170, 180, 190, 192, 208,
	211, 218, 221, 222, 239, 242, 247, 251, 252, 255,
	256, 271, 277, 289, 304, 322, 333, 343, 356, 360,
	370, 375, 376, 382, 389, 390, 396, 398, 406, 410,
	411, 412, 413, -378, 2, -332, 166, 2, -191, 166,
	-332, -194, 2, -371, 166, -369, 10, -368, 5, 4,
	-373, -376, -374, 2, -174, -165, 2, -186, -366, 2,
	-204, 166, -190, 375, 446, -237, -197, -198, -230, -165,
	444, -300, 2, -89, 2, -300, 166, 2, -89, 166,
	2, -300, 166, 2, -89, 166, 2, 2, 2, 380,
	2, 79, 166, -165, 360, 94, 2, 298, -432, 314,
	384, 407, 2, 2, 2, 2, 2, 2, 2, 360,
	323, -443, 287, -179, 2, -165, 145, -371, 166, 2,
	-371, 166, 2, -192, -194, -192, 176, 193, -174, 166,
	2, 364, 362, 364, 362, 148, 2, 192, 2, 192,
	2, -333, 2, -334, -190, 2, 2, 2, 2, 2,
	166, -165, 360, 94, 2, 207, 2, 2, 2, 2,
	2, 2, 2, 2, 2, -239, 166, 2, -190, -239,
	166, 2, -239, 166, 2, -205, 166, 2, -204, -174,
	166, 2, -372, 166, 2, -371, -372, 166, 2, -341,
	2, -340, -368, 403, -74, 442, 331, 442, -371, -190,
	-300, -89, 148, -300, -89, 2, 95, 360, -127, 2,
	145, 398, 2, 8, 2, -371, 284, 137, 2, 335,
	2, 281, 332, 61, 419, 148, 2, 2, -419, 2,
	251, 148, 2, 148, 2, 148, 2, 148, 2, 148,
	2, 2, 281, 332, 2, 377, 206, 123, 2, 148,
	-260, 2, 413, 148, 2, 5, 2, 196, 278, 348,
	2, -190, -436, 2, 360, 407, 323, 2, 2, 72,
	73, 148, 2, 148, 419, 2, -254, -332, -287, -288,
	-287, 375, -170, -449, -226, -227, -127, 335, 2, 2,
	-449, -253, -276, -277, 218, 132, 247, -259, 26, 108,
	-259, -259, 48, 443, 443, 11, 12, 63, 37, 433,
	434, 435, 436, 143, 437, 438, 431, 432, 430, 423,
	424, 427, 202, 203, 78, 426, 425, 71, 224, 313,
	133, 134, 135, 136, 295, 173, 174, 175, 14, 15,
	16, 30, 255, 217, 420, 169, 338, 428, 17, 18,
	19, 194, 195, 241, 40, 170, -171, -206, -300, -300,
	-300, -300, -300, 261, 442, -251, -295, 440, -142, 442,
	442, 442, 5, 442, 5, -362, 8, -142, -300, -313,
	443, -243, 442, -142, -313, -308, 442, 311, 440, 442,
	-316, -300, 444, -402, 414, -348, 442, 275, -347, 442,
	-347, -347, 408, -345, 442, 421, 415, 442, -345, 442,
	442, 145, 442, 442, 442, 442, 442, 442, 442, 442,
	442, 442, 442, 442, 442, 408, 442, 442, 442, 442,
	442, 442, 442, 442, 442, 446, -400, -223, 442, -247,
	-335, -300, 435, -247, -247, 251, -240, -300, 83, -263,
	199, 234, 149, 214, 306, 181, -362, -74, -297, 447,
	-324, 421, -142, -329, -189, -142, -331, 442, -328, -324,
	435, -190, 442, 148, 442, 444, 148, -230, -366, -190,
	-199, -200, -240, -371, -416, -230, -169, 34, -310, -342,
	-343, -356, -344, -353, -349, -352, 291, 292, 290, 294,
	293, 44, 50, 49, 369, 232, 325, 326, 341, 327,
	328, 42, 399, 172, 248, 250, 184, 4, 43, 404,
	-355, 191, 183, 189, 185, 340, 186, 187, 188, 41,
	286, 141, 142, 140, 111, 100, 99, 244, 46, 45,
	97, 371, 372, 373, 374, 200, 201, 405, 351, 57,
	58, -416, -230, 145, -365, -240, 34, -288, 2, -447,
	446, 216, -208, 223, 238, 159, 252, 417, -370, 5,
	4, -309, -321, 101, 220, -352, 9, 434, -360, 8,
	433, -364, -363, 85, 444, -366, -151, 296, -150, 23,
	27, 112, 401, 124, -213, 178, 267, 119, 344, -423,
	-425, 316, 367, 368, 74, 245, 296, 119, -256, -258,
	34, 93, 236, 263, 51, 164, 227, 228, 346, 409,
	119, 296, 413, 119, -425, 296, -425, -153, 344, -423,
	-425, 316, 296, -152, -213, 119, 447, -371, -237, 446,
	446, -366, 435, 119, 119, 119, 119, 2, 2, 239,
	2, 2, 2, 150, -435, -433, 2, 2, 2, -190,
	166, -191, 166, 2, -194, 407, -225, 251, -418, -238,
	360, -190, -161, -397, 413, 239, 239, 34, 442, 2,
	-176, 166, 2, -166, -165, 176, -397, 239, -333, -202,
	-190, -202, 334, -183, 34, -297, 119, 2, 2, 2,
	-165, -154, 446, 53, 302, 119, -154, 119, -154, 119,
	-154, 446, 119, -154, 119, 446, 119, 119, 443, 446,
	-341, -371, -137, 413, 148, 82, 442, -372, -174, 2,
	-190, 2, 360, 200, -371, -371, -365, 26, 336, 2,
	73, -190, -420, 145, -417, 307, -416, -190, -190, -190,
	-190, -190, 145, 2, 377, 2, 377, 2, -165, 67,
	-165, 216, -190, 145, 360, 176, 360, -154, 446, -170,
	-449, -253, -365, -449, -277, -276, -279, -300, 26, -282,
	139, 235, -300, -302, -141, -141, -141, -228, -326, -300,
	277, 176, -357, -342, -342, -188, -366, 371, -300, -300,
	-300, -300, -300, -300, -300, -300, -300, -300, -300, -300,
	-300, -300, -300, -300, -300, -300, -300, -300, -300, -300,
	-300, -300, -300, -300, -300, -300, -300, -300, -300, -300,
	-300, -300, -300, 217, 169, 338, 40, 170, -300, 375,
	-300, -300, -300, -300, 231, 239, 242, 382, 130, 391,
	108, 245, -453, 356, 36, -306, -142, -244, 442, -320,
	31, 343, 26, -313, 442, 2, -295, -300, -296, -241,
	-240, -240, 443, 406, 26, 108, 435, 2, 8, -270,
	-272, 418, 230, 98, 161, 229, -271, 321, 443, 446,
	34, 443, -300, -241, -312, -308, -240, -319, -318, 410,
	-366, 435, -403, 138, 155, 8, -362, 8, 371, 371,
	8, 8, 8, 442, 443, 2, 443, 2, 443, 2,
	443, 2, 443, 2, -300, -300, -300, -300, -300, -300,
	-300, -240, -264, 2, -358, -240, 4, 418, 230, 98,
	161, 229, 321, -264, 2, -265, 2, -300, -240, -266,
	-301, -302, 433, 434, 428, -313, -267, 2, -300, -241,
	-300, 47, 211, 376, -268, -300, 148, -240, -240, 2,
	-240, 2, -401, 34, -240, -233, 446, 148, 34, 4,
	-233, -233, 442, 443, 446, 199, 199, -328, -263, 199,
	-261, 259, -261, -261, -414, 442, 441, -324, -175, 440,
	448, -366, -323, -322, 34, -183, 257, -324, -324, 444,
	443, -323, -190, 442, -240, -366, 349, 443, 444, 194,
	194, 443, -137, 375, 413, -74, 443, 446, -232, 33,
	440, -272, 442, -359, 408, 442, 442, 148, -231, -427,
	443, 378, -289, -207, 285, 342, 297, 329, 9, 8,
	8, 446, -366, 446, 375, -428, 76, 65, -291, 166,
	65, -380, -177, 76, -381, -165, 60, 390, 277, 147,
	-428, 76, -428, 76, 76, 334, 347, 48, -332, 37,
	-89, 212, 148, 419, 360, 375, -332, -258, -342, 93,
	227, 228, 48, -361, -360, 434, -361, 48, -361, -361,
	-361, 413, -191, -332, 375, 268, -371, 375, 446, 37,
	-89, 212, 148, 375, -204, -175, -338, -337, 422, -197,
	-165, 444, -300, -89, -300, -89, 119, 2, -443, 207,
	442, -223, 239, -257, -256, 239, -193, 2, -190, 148,
	-230, -339, 192, 446, -238, 268, 119, 119, 442, 116,
	283, 2, 251, 239, -176, 166, -157, 363, 119, -294,
	-293, 411, -283, -89, 442, 101, 34, -283, -248, -249,
	-336, -250, -177, 442, -183, -165, 2, -190, -239, -239,
	-239, -204, -205, -174, -371, -372, -372, -74, -340, 443,
	443, -136, 254, -135, -165, 5, -139, 398, -210, -292,
	-291, -382, -383, -380, 217, 176, 390, 193, 131, -137,
	-337, -338, -338, -190, 145, -230, -230, 331, 145, 145,
	444, -260, 283, 95, 360, 267, 176, -190, -204, -190,
	-332, -449, -280, -360, 442, -281, 311, 312, 446, -149,
	35, 106, 204, -190, 419, 117, -300, -300, 375, -453,
	356, -306, 117, -300, 231, 242, 382, 130, 391, 108,
	245, 148, 442, -301, -301, 443, -242, -300, -300, 441,
	450, 443, -450, 446, -226, -300, -240, -240, 443, 443,
	375, 375, 375, 375, 442, 444, -240, -230, 441, 441,
	446, 443, -317, -318, 113, -300, 444, -408, 260, 442,
	442, 443, 443, 446, 443, 419, 419, 443, 443, 443,
	-300, 34, 446, 446, 446, 443, 446, 446, 446, 443,
	443, 148, 443, 443, -273, 271, 443, 11, 12, 433,
	434, 435, 436, 143, 437, 438, 431, 432, 430, 423,
	424, 425, 71, 224, 313, 14, 15, 16, 194, 170,
	-301, -301, -301, 443, -304, -305, 148, 145, 34, -268,
	-268, -268, 443, 148, -240, 443, 443, 442, 443, -294,
	-335, -235, 2, -328, -185, -366, -294, -294, -240, -300,
	-328, -328, -262, 398, 251, 199, -328, -322, 443, -415,
	-362, -324, -323, -362, -299, -298, 146, 237, -183, -223,
	-323, -323, -366, -324, 443, -236, -330, -396, -450, 444,
	-366, -128, 5, 242, -128, 148, -230, 24, -342, 440,
	441, 8, 8, 442, -362, -362, -230, 148, -363, -288,
	388, 69, 285, -363, -150, -190, -177, -184, -165, 239,
	-291, 166, -156, 239, -342, -184, 442, 442, 204, 204,
	-177, -184, 166, -177, 166, -184, -184, -422, 285, 246,
	-300, 219, 283, 240, -151, 296, -89, -89, 442, -427,
	398, 107, -190, -193, 296, -199, -361, -361, -256, 296,
	-191, -371, 413, -174, -152, -89, -89, 442, -175, -153,
	296, -134, 165, 245, 435, -165, 407, -165, -209, -210,
	-165, -437, 415, 413, 119, 119, -223, -203, -190, 440,
	-137, -371, -190, -371, -371, -371, 2, 442, 2, -190,
	119, 251, 239, -158, 114, -448, 425, -174, -227, -226,
	-300, -255, -286, 304, 251, -224, -178, -177, 403, -183,
	-255, -234, 446, 148, 425, 444, -224, 2, -154, -154,
	-154, -154, -154, -74, -137, 446, 442, 425, 425, 442,
	-371, -371, 443, 446, -190, -176, 176, 176, -182, -166,
	-137, -42, 413, 360, 331, 331, -165, -186, -174, -190,
	-187, -204, -281, -300, -326, -190, 447, -300, -300, 117,
	117, -300, -301, -301, -300, 117, 148, 442, -300, -310,
	30, 30, 443, 446, -296, -300, 443, 406, -450, -450,
	-450, 5, 230, 161, 229, -271, 229, -271, -271, 8,
	435, -366, 443, -308, 115, -300, 370, -366, 435, -409,
	-180, 442, -165, 411, -226, -362, -345, -345, 443, -357,
	-342, -300, -300, -300, -300, -300, -300, -304, -300, -357,
	-342, -301, -301, -301, -301, -301, -301, -301, -301, -301,
	-301, -301, -301, -301, -301, -301, -301, -301, -301, -301,
	108, 239, 245, -301, -305, -304, -300, -300, -342, 443,
	443, 443, -240, -74, -252, 155, -338, 446, -252, -252,
	443, -262, 442, -300, -328, 441, 443, 446, -323, 441,
	446, 449, 425, -223, 444, -322, 443, 446, -285, 34,
	443, -366, -89, 253, 8, 441, 443, -362, 443, 443,
	-230, 375, 375, 119, 239, 400, -384, -381, -300, -229,
	-327, -300, 442, 442, -148, 112, 334, -429, 2, 119,
	-154, 119, -154, 417, 442, 442, 375, -428, 76, -240,
	-300, -138, 101, -365, -425, 375, 375, 268, -240, 375,
	-137, 148, 358, 2, 2, 2, 443, 34, 249, -165,
	-190, -191, 34, -338, -362, -161, 2, -275, 398, -175,
	-190, 119, -159, 210, -448, -369, -397, -278, -276, -255,
	-247, 240, 75, 443, 446, 444, -294, -249, -235, -300,
	2, 443, -135, -136, -371, -371, -371, -137, -139, -139,
	-292, 2, 442, -176, -166, 442, 254, -190, -260, -215,
	-214, 267, 245, 252, 443, -149, -175, -300, -300, 117,
	30, 30, -300, -300, -310, 443, -300, -300, -240, 441,
	5, -300, 443, 443, 443, 443, -300, 444, -410, -165,
	-300, 443, 443, 443, 443, 446, 446, 443, 443, 443,
	443, -305, 148, 108, 245, 442, 443, 443, -307, 158,
	48, -328, -307, -307, -230, -297, -362, -298, -175, 440,
	-366, -330, 442, 444, 441, 443, -177, -184, -291, 119,
	-385, 76, -386, 63, 131, 82, 239, 242, 390, 277,
	60, 101, 289, 34, 443, 443, 446, -149, -229, -230,
	239, 353, 101, 239, 101, 94, 385, -177, -184, -230,
	-230, -190, -177, -184, 443, 446, 425, -193, -191, -371,
	443, -175, -372, 371, -211, 179, -89, 2, 442, -223,
	-257, -89, 441, 442, -165, 251, 442, -175, -160, 209,
	-448, -369, -157, -255, -284, 442, 251, -89, -178, 2,
	-227, 425, 443, 443, 94, 94, -229, 442, 442, -230,
	-43, -44, 176, 76, 270, -187, 360, -149, -300, -300,
	-300, 443, -450, -366, 435, -404, 267, 443, -300, -300,
	-301, 148, 442, -310, -405, 412, -300, -240, -405, -405,
	443, -324, -362, 2, -291, -184, -188, -181, -165, 131,
	166, 242, 204, 442, -301, -190, 442, 2, -439, 103,
	180, -290, -440, 81, 354, -327, 443, 443, 242, 242,
	-300, -342, -154, -154, 443, 443, 375, 375, 375, -365,
	80, -363, 375, -300, -212, -213, 170, -438, 413, -209,
	-437, -229, -190, -229, 251, -448, -369, -158, 109, -230,
	76, -278, -306, -137, 442, 442, 443, -229, -229, 443,
	446, 26, 442, 26, 442, -190, 443, -227, 48, 443,
	443, -301, -310, 443, -406, -407, -180, -323, 441, -386,
	-181, 239, -300, -167, 442, -300, 180, 104, 162, -211,
	442, 289, -173, 63, 442, 442, -177, -184, 442, 425,
	148, 442, -437, 265, 94, 236, 443, 34, 443, -275,
	443, -190, -369, -159, 393, 240, 443, -184, -255, -372,
	-372, -290, 443, 443, -44, -230, -230, -411, 283, 312,
	157, -240, 443, 446, 34, 119, 443, -387, 225, -165,
	443, 104, 162, -212, -230, -190, -426, 398, -188, -217,
	-216, -214, -219, -218, -214, -240, -363, 80, 265, -240,
	-190, 94, -211, -89, -290, 442, -290, 442, -160, 334,
	-293, 443, 443, -211, -290, 443, 443, 443, -412, -413,
	40, 387, 85, -300, -412, -412, -407, -409, 131, -388,
	-391, -390, 251, 339, 149, 266, 443, 353, 409, -439,
	443, -223, -300, 443, 446, 403, 443, 446, 403, 443,
	148, 443, 442, -212, -438, -211, -229, -211, -229, -248,
	-137, -137, -212, -211, -413, 274, 144, 311, 274, 144,
	-181, -390, 251, -391, 251, 393, 105, -387, -216, 170,
	-218, 148, 265, -230, -437, -212, 443, -212, 443, -294,
	-212, 30, -389, 236, 302, 53, 334, -389, -388, 442,
	442, 443, -444, 411, -290, -444, -290, -413, 22, 242,
	101, -439, -240, -240, -155, 53, 302, 2, -211, -211,
	443, 443, -212, -212, -212, 375, -444, -444, 442, -240,
	443, -212,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 24, 25, 335, 336,
	338, 339, 340, 342, 343, 345, 347, 349, 351, 352,
	354, 356, 357, 358, 359, 360, 362, 364, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 408,
	410, 0, 835, 837, 839, 841, 27, 28, 0, 0,
	169, 171, 173, 0, 197, 199, 201, 202, 204, -2,
	0, 289, 290, 292, 294, -2, -2, 0, 0, 397,
	399, 0, 0, 419, 420, 0, 924, -2, 413, 415,
	417, 480, 482, 484, 486, 488, 490, 492, 493, 495,
	497, 499, 501, 503, 505, 507, 509, 511, 513, 515,
	517, 519, 521, 523, 525, -2, -2, -2, 0, -2,
	-2, -2, 853, 31, 33, 35, 37, 39, 41, 59,
	253, 254, 256, 258, 260, 263, 264, 266, 963, 296,
	298, 300, 302, 304, 0, -2, 977, 0, 0, 43,
	44, 45, 46, 47, 48, 49, 66, 67, 68, 69,
	70, 71, 72, 52, 54, 55, 61, 62, 64, 0,
	0, 939, 941, 943, 945, -2, 0, 0, 7, 9,
	11, 13, 15, 17, 19, 21, 23, 337, 341, 344,
	346, 348, 350, 353, 355, 361, 363, 365, 726, 1558,
	1571, 1572, 1573, 1576, 1577, 1578, 1579, 1580, 1581, 1902,
	1982, 1983, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607,
	1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617,
	1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627,
	1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637,
	1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647,
	1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657,
	1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667,
	1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677,
	1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687,
	1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697,
	1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707,
	1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717,
	1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727,
	1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737,
	1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747,
	1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757,
	1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767,
	1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777,
	1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787,
	1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797,
	1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807,
	1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817,
	1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827,
	1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837,
	1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847,
	1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857,
	1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867,
	1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877,
	1878, 1879, 1880, 1881, 1882, 1883, 1884, 0, 375, 373,
	1552, 376, 1739, 378, 380, 283, 284, 285, 286, 287,
	288, 0, 152, 0, 390, 384, 389, 391, 393, 394,
	395, 396, 371, 369, 0, 390, 1603, 388, 833, 834,
	828, 829, 1772, 863, 409, -2, -2, -2, 1871, -2,
	441, -2, 448, 1874, 1774, 451, 0, 453, -2, 456,
	836, 838, 840, 29, 30, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, -2, -2, -2, -2, 0,
	0, 1637, 1529, 1573, 1532, 1527, 170, 172, 174, 175,
	0, 0, 0, 0, 0, 0, 198, 200, 203, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 230,
	0, 0, 0, 0, 0, 0, 0, 0, 782, 0,
	0, 0, 0, 0, 0, 0, 0, 649, 650, 0,
	0, 655, 777, 778, 799, 0, 0, 0, 0, 291,
	293, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 295,
	0, 0, 0, 0, 0, 0, 0, 231, 329, 330,
	0, 964, 0, 0, 0, 150, 143, 0, 0, 638,
	398, 400, 0, 142, 0, 0, 832, 0, 414, 416,
	418, 481, 483, 485, 487, 489, 491, 494, 496, 498,
	500, 502, 504, 506, 508, 510, 512, 514, 516, 518,
	520, 522, 524, 526, 527, 0, 0, 0, 0, 0,
	531, 0, -2, -2, 0, 0, 0, 0, 0, -2,
	0, -2, 0, -2, -2, -2, 0, 0, 0, -2,
	-2, 0, 0, 0, 530, 532, 533, 534, 0, 579,
	620, 621, 0, 768, 965, 865, 843, 856, 865, 845,
	846, 847, 848, 849, 854, 855, 858, 0, 850, 851,
	852, 32, 34, 36, 38, 40, 42, 255, 257, 259,
	261, 265, 267, -2, 937, 938, 297, 299, 301, 303,
	305, 401, 0, 403, 0, 531, 928, 0, -2, 0,
	969, 969, 969, 0, 0, 938, 936, 0, 406, 407,
	460, 461, 1192, 0, 0, 0, 0, 0, 1427, 1276,
	0, 462, -2, 1307, 1309, 1850, 1871, 1426, 1311, 1312,
	1313, 1314, 1315, 0, 0, 1318, 0, 1320, 1321, 1322,
	1323, 0, 1325, 0, 1329, 1330, 1331, 0, 1855, 1506,
	1569, -2, 1097, 1098, 1099, 1100, 1101, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1565, 0, 1398, 1345, -2,
	1590, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1646, -2, -2, -2, -2, -2, -2,
	-2, 1153, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1885, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356,
	1357, 0, 1839, 1856, 1857, 1862, 1864, 1858, 1847, 1368,
	-2, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894,
	1895, 1896, 1897, 1898, 1899, 1900, 1154, -2, 1851, 1852,
	1867, 1868, 1873, 1878, 1879, 1854, 1863, -2, -2, 955,
	1747, 958, 726, 956, 940, 942, 0, 944, 0, 0,
	0, 949, 972, 970, 0, 1008, 953, 954, 964, 1023,
	1046, 0, 1028, 0, 1046, 1068, 0, 1033, 1767, 1346,
	1347, 0, 1573, 1570, -2, 0, 0, 0, 0, 0,
	194, 372, 0, 377, 379, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 862, 411, 412, 0, 436, 0,
	440, 1846, -2, -2, 444, 866, 870, 871, 872, 0,
	0, 0, 0, 450, 0, 0, 437, 438, 454, 457,
	0, 50, 0, 1856, 1068, 51, 0, 1542, 1595, 1596,
	1597, 1598, 1599, 1885, 1901, 1903, 1904, 1905, 1906, 1907,
	1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917,
	1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927,
	1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937,
	1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947,
	1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957,
	1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967,
	1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977,
	1978, 1979, 1980, 1981, 53, 0, 1856, 56, 0, 1856,
	0, -2, 60, 0, 1856, 153, 154, 1586, 1587, 1591,
	1592, 1593, 1594, 63, 0, 1548, 65, 0, 1545, 73,
	0, 1856, 1526, 0, 0, 630, 1523, 1528, 631, 1533,
	0, 176, 177, 178, 179, 180, 1856, 182, 183, 0,
	185, 186, 1856, 188, 189, 0, 191, 206, 207, 0,
	209, 0, 1856, 0, 0, 0, 215, -2, 232, 0,
	229, 0, 219, 220, 222, 223, 224, 225, 226, 0,
	0, 0, 783, 271, 269, 1553, 0, -2, 1856, 771,
	774, 1856, 776, 788, 1556, 0, -2, 0, 962, 1856,
	879, 651, 652, 653, 654, 0, 282, 0, 892, 0,
	894, 0, 914, 1074, 1023, 233, 234, 235, 236, 237,
	1856, 0, 0, 0, 242, 0, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 135, 1856, 308, 327, 135,
	1856, 311, 135, 1856, 314, 135, 1856, 317, 1521, 135,
	1856, 320, 321, 1856, 323, 155, 324, 1856, 326, 0,
	-2, 366, 1559, -2, 332, 0, -2, 0, 167, 0,
	636, 637, 0, 830, 831, 421, 0, 0, 528, 529,
	0, 0, 539, 540, 541, 542, 1745, 1661, 545, 0,
	548, 569, 583, 0, 0, 0, 552, 554, 635, 556,
	0, 0, 558, 0, 560, 0, 562, 0, 564, 0,
	566, 568, 570, 584, 572, 0, 0, 0, 582, 0,
	587, 588, 0, 0, 593, 594, 595, 0, 597, 598,
	599, 600, 0, 602, 603, -2, -2, 607, 609, 0,
	615, 0, 619, 0, 535, 536, 135, 1072, 842, -2,
	844, 0, 860, 931, -2, 0, 402, 0, 405, 935,
	929, 934, 986, 987, 0, 0, 0, 0, 967, 968,
	0, 0, 0, 926, 927, 0, 0, 0, 0, 1432,
	1433, 1434, 1435, 1436, 1437, 1440, 1441, 1438, 1439, 1442,
	1443, 0, 0, 0, 0, 0, 1444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1445, 1446,
	1447, 0, 0, 1449, 0, 1451, 0, 0, 0, 0,
	0, 0, 1255, 1257, 1514, 0, 0, 1448, 1197, 1198,
	1199, 1234, 1235, 0, 0, 1308, 1511, 1510, 1310, 0,
	1463, 0, 1317, 0, 1189, 1324, 1539, -2, 0, 1427,
	1458, 0, 0, 1332, 1333, 1334, 0, 0, 1463, 0,
	0, 1505, 0, 1400, 0, 1133, 0, 1134, 1135, 0,
	1136, 1137, 1150, 1163, 0, 0, 0, 0, 1167, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1155, 0, 0, 0, 1486,
	-2, 0, 0, 0, 0, 0, 957, 0, 0, 1012,
	1515, 1519, 1520, 1012, 1012, 0, 0, 1464, 0, 0,
	0, 0, 1065, 1065, 1065, 1063, 1040, 0, 1046, 0,
	1056, 0, 1046, 1046, 0, -2, 1028, 0, 0, 1056,
	1069, 1070, 0, 0, 0, 0, 0, 0, 1574, 0,
	0, 1561, 0, 167, 0, 382, 392, 964, 0, 1466,
	1088, 1084, 1091, 1092, 1093, 1094, 1140, 1141, 1142, 1143,
	1144, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110,
	1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, -2, 1151,
	1153, 1174, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129,
	1130, 1131, 1132, 1146, 0, 1121, 1121, 1121, 1138, 1139,
	1162, 1173, 1165, 1173, 1169, 1089, 1090, 1156, 1157, 1158,
	1159, 0, 386, 0, 0, 0, 0, -2, 446, 0,
	868, 0, 873, 471, 472, 473, 875, 876, 449, 474,
	475, 476, 477, 478, 479, 0, 743, 0, 745, 1535,
	0, 447, 464, 452, 0, 458, 74, 825, 103, 0,
	825, 825, 0, 0, 122, 0, 0, 0, 0, 0,
	92, 99, 80, 81, 0, 0, 0, 0, 57, 751,
	0, 754, 0, 0, 0, 0, 0, 0, 0, 766,
	0, 0, 0, 0, 91, 0, 86, 76, 0, 0,
	94, 101, 0, 126, 128, 0, 0, 1059, 629, 0,
	0, 1574, 1531, 0, 0, 0, 0, 208, 210, 0,
	212, 213, 214, 0, 782, 0, 221, 218, 262, 726,
	1856, 750, 1856, 748, 1557, 0, 0, 0, 280, 275,
	0, 277, 769, 0, 961, 0, 0, 0, 0, 789,
	0, 1856, 794, 1544, 1582, 1583, 881, 0, 1080, 0,
	895, 0, 0, 1075, 0, 1077, 0, 239, 240, 241,
	0, 306, 0, 133, 134, 0, 309, 0, 312, 0,
	315, 0, 0, 318, 0, 0, 0, 0, 964, 0,
	0, 0, 145, 0, 0, 0, 0, 167, 1059, 423,
	1059, 425, 0, 0, 543, 544, 546, 547, 549, 550,
	616, 551, 555, 0, 623, 1763, 633, 557, 559, 561,
	563, 565, 0, 574, 0, 576, 0, 578, 590, 589,
	591, 596, 601, 0, 0, 0, 0, 767, 0, 859,
	932, 934, 404, 930, 984, 985, 990, 994, 995, 998,
	1001, 1002, 992, 1192, 950, 951, 952, 978, 979, 808,
	0, 1982, 1193, 1085, 1194, 1195, 1541, 0, 1200, 1201,
	1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, -2, -2,
	-2, -2, -2, -2, -2, -2, 1218, 1219, 1220, 1221,
	1222, 1223, 1224, 1225, 1226, 1227, 1228, -2, -2, -2,
	1232, 1233, -2, 1450, 1452, 0, 1514, 0, -2, 0,
	-2, -2, -2, -2, 1252, 0, 1254, 1259, 1261, 1263,
	0, 0, 0, 0, 1513, 1273, 1497, 1498, 0, 0,
	1429, 1430, 1431, 1258, 0, 1277, 1512, 1509, 0, 0,
	1462, 975, 1336, 0, 0, 0, 0, 1343, 0, 1540,
	1188, 1175, 1176, 1177, 1178, 1179, 1180, 1190, 1328, 1460,
	0, 1459, 0, 0, 0, 1470, 0, 1504, 1500, 0,
	1562, 1568, 1408, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1369, 1370, 1371, 1372, 1373, 1374,
	1375, 1376, 1377, 1378, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1380, 0, 1473, -2, -2, -2, -2,
	-2, -2, -2, 0, 1382, 0, 1384, 1464, 1483, 0,
	0, 1278, 0, 0, 0, 1427, 0, 1387, 1464, 1491,
	0, 0, 0, 0, 0, 1464, 0, 1496, 0, 1394,
	0, 1396, 959, 0, 0, 1080, 0, 0, 0, 1518,
	1080, 1080, 0, 1007, 0, 0, 0, 0, 0, 0,
	1060, 1064, 1061, 1062, 0, 0, 1046, 1056, 1020, 0,
	0, 1543, 1026, 1055, 0, 726, 1045, 1056, 1056, 0,
	-2, 1030, 0, 0, 975, -2, 168, 725, 0, 0,
	0, 374, 0, 0, 0, 368, 370, 0, 1081, 1083,
	0, 1095, 0, 0, -2, 0, 0, 0, 0, 0,
	439, 0, 867, 874, 0, 468, 0, 470, 744, 1537,
	1536, 0, 459, 0, 0, 0, 0, 824, 105, 1856,
	0, 137, 0, 0, 710, 1549, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 752, 753, 755,
	761, 763, 0, 757, 1538, 0, 758, 0, 760, 762,
	764, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	83, 0, 0, 0, 0, 1525, 158, 1058, 0, 1524,
	1534, 0, 181, 184, 187, 190, 0, 216, 0, 0,
	658, 641, 0, 746, 749, 0, 726, 781, 1555, 0,
	270, 167, 0, 0, 276, 0, 0, 0, 0, 0,
	0, 787, 0, 0, 0, 1856, 883, 889, 0, 977,
	1079, 0, 912, 897, 0, 0, 0, 912, 916, 917,
	919, 920, 0, 0, 1076, 0, 243, 328, 135, 135,
	135, 1522, 135, 135, 156, 322, 325, 331, 367, 964,
	167, 165, 1727, 163, 160, 162, 0, 0, 0, 659,
	661, 662, 663, 664, 0, 1583, 0, 1689, 1583, 140,
	167, 422, 427, 537, 0, 634, 632, 573, 0, 0,
	0, 586, 0, 0, 0, 0, 0, 617, 618, 622,
	1073, 933, 0, 996, 0, 993, 999, 1000, 0, 981,
	806, 807, 0, 0, 0, 0, -2, -2, 0, 0,
	0, 1274, 0, -2, 1253, 1256, 1260, 1262, 1264, 0,
	0, 0, 0, 0, 0, 1453, 0, 1455, 1275, 1507,
	1510, 1425, 0, 0, 974, 975, 975, 975, 1342, 0,
	0, 0, 0, 0, 0, 0, 1461, 0, 1468, 1469,
	0, 1335, 0, 1501, 0, 0, 0, 1344, 0, 0,
	0, 1145, 1119, 0, 1173, 1171, 1172, 1166, 1173, 1170,
	0, 0, 0, 0, 0, 1363, 0, 0, 0, 1367,
	1379, 0, 1381, 1383, 0, 0, 1385, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1281, 1282, 1283, 1386, 1489, 1490, 0, 0, 0, 0,
	0, 0, 1392, 0, 1495, 1393, 1395, 964, 1009, 1004,
	1516, 1059, 1011, 1013, 1517, 1546, 1004, 1004, 0, 1465,
	1048, 0, 1050, 0, 0, 0, 1052, 0, 1041, 0,
	1043, 1056, 1025, 0, 0, 1018, 0, 1017, 726, 1054,
	1027, 1031, 1562, 0, 1071, 0, 1035, 1038, 0, 0,
	1575, 192, 195, 196, 193, 0, 381, 0, 1467, 0,
	1086, 0, 0, 0, 0, 0, 385, 0, 435, -2,
	466, 467, 469, 465, 104, 812, 0, 0, 1547, 0,
	107, 1856, 116, 0, 687, 0, 0, 0, 0, 0,
	827, 0, 1856, 135, 1856, 135, 118, 121, 0, 125,
	123, 0, 0, 678, 75, 825, 78, 84, 0, 0,
	0, 90, 0, 818, 0, 756, 759, 765, 58, 0,
	820, 810, 0, 809, 127, 79, 85, 0, 822, 77,
	0, 167, 0, 0, 1530, 0, 0, 0, 0, 657,
	-2, 0, 0, 0, 0, 0, 0, 1059, 272, 0,
	274, 279, 278, 772, -2, 775, 784, 0, 786, 798,
	0, 0, 0, 885, 889, 0, 888, 962, 989, 976,
	1078, 890, 912, 0, 0, 0, 900, 902, 899, 896,
	893, 1080, 0, 0, 0, 0, 0, 238, 307, 310,
	313, 316, 319, 333, 144, 0, 0, 0, 0, 0,
	167, 0, 0, 0, 0, 0, 1583, 1583, 0, 1551,
	141, 424, 0, 0, 575, 577, 590, 610, 611, 673,
	0, 614, 0, 0, 980, 808, 0, 1196, 1237, 0,
	0, -2, 0, 0, 1241, 0, 0, 0, -2, 0,
	0, 0, 1454, 1456, 0, 1509, 1337, 0, 0, 0,
	0, 1319, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 0,
	1326, 1327, 1428, 1471, 1499, 1503, 0, 1563, 1567, 1406,
	1407, 1411, 1554, 0, 0, 0, 1164, 1168, 1348, 0,
	0, 0, 0, 0, 0, 0, 1472, 1482, 1484, 1279,
	1280, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292,
	1293, -2, -2, -2, 1297, 1298, 1299, -2, -2, -2,
	0, 0, 0, 1485, 1487, 1488, 1492, 1493, 0, 1389,
	1390, 1391, 1494, 0, 1006, 0, 1010, 0, 1006, 1006,
	971, 1049, 0, 1067, 1051, 1023, 1042, 0, 1032, 1021,
	0, 1022, 0, 1053, 0, 1029, 1034, 0, 1037, 0,
	1337, -2, 151, 383, 0, 1087, 1096, 0, 1148, 1152,
	387, 0, 0, 0, 0, 136, 685, 709, 0, 0,
	801, 808, 0, 0, 109, 0, 0, 0, 117, 0,
	114, 0, 120, 124, 0, 0, 0, 0, 0, 0,
	87, 88, 89, 0, 93, 0, 0, 0, 0, 0,
	138, 0, 0, 211, 780, 217, 667, 0, 642, 0,
	726, 750, 0, 268, 0, 770, 785, 0, 0, 0,
	0, 0, 887, 889, 0, 880, 881, 912, 988, 891,
	910, -2, 909, 0, 0, 0, 977, 918, 915, 921,
	922, 0, 164, 0, 159, 161, 0, 147, 0, 0,
	660, 665, 0, 0, 0, 0, 0, 538, 585, 612,
	672, 0, 0, 991, 997, 982, 808, 1239, 1243, 0,
	0, 0, 1245, -2, 0, 1267, -2, -2, 1457, 1508,
	1316, 975, 1338, 1340, 1341, 1191, 1502, 0, 1413, 1410,
	0, 1397, 1120, 1358, 1359, 0, 0, 1362, 1364, 1365,
	1366, 1481, 0, 0, 0, 0, 1388, 960, 1402, 0,
	0, 1014, 1402, 1402, 0, 1046, 1044, 1019, 1015, 0,
	1563, 1036, 0, 0, 1082, 1147, 814, 816, 106, 0,
	686, 0, 689, 0, 0, 0, 0, 696, 697, 0,
	0, 0, 0, 0, 715, 724, 0, 803, 0, 0,
	0, 111, 130, 0, 0, 826, 0, 135, 135, 0,
	0, 813, 0, 0, 0, 0, 0, 819, 821, 811,
	0, 823, 157, 0, 675, 0, 646, 643, 658, 641,
	747, 779, 273, 0, 797, 0, 0, 0, 877, 889,
	0, 882, 883, 281, 0, 0, 0, 898, 901, 903,
	989, 0, 166, 167, 0, 0, 0, 0, 0, 0,
	426, 428, 0, 0, 434, 671, 0, 983, 1247, -2,
	-2, 1268, 0, 1564, 1566, 977, 0, 1399, 0, 0,
	-2, 0, 0, 0, 946, 0, 1005, 1003, 947, 948,
	1066, 1056, 0, 1039, 108, 0, 690, 691, 1550, 693,
	0, 695, 698, 0, 700, 1585, 0, 704, 711, 716,
	0, 667, 0, 721, 722, 802, 713, 0, 110, 112,
	129, 805, 113, 119, 0, 0, 0, 0, 0, 0,
	1631, 96, 0, 1057, 641, 674, 0, 644, 0, 0,
	0, 0, 798, 0, 0, 0, 884, 885, 0, 0,
	0, 912, 923, 146, 0, 0, 724, 0, 0, 708,
	0, 430, 0, 432, 0, 613, 1339, 1417, 0, 1360,
	1361, -2, 0, 1305, 1401, 1403, 0, 1024, 1016, 688,
	692, 0, 0, 730, 0, 0, 0, 719, 720, 675,
	0, 0, 132, 0, 0, 0, 815, 817, 0, 0,
	0, 0, 639, 0, 647, 0, 667, 0, 724, 0,
	724, 0, 886, 887, 0, 905, 906, 908, 913, 0,
	0, 667, 724, 707, 429, 0, 0, 0, 0, 0,
	0, 1412, 1306, 0, 0, 0, 699, 735, 0, 0,
	0, 717, 718, 715, 0, 726, 115, 0, 804, 0,
	679, 0, 0, 682, 0, 0, 97, 1631, 95, 0,
	0, 648, 675, 646, 667, 0, 667, 0, 878, 0,
	907, 167, 167, 675, 667, 431, 433, 1409, 1414, 1418,
	-2, 1820, 1634, 0, 1415, 1416, 1404, 1405, 0, 701,
	731, 732, 0, 727, 728, 729, 1584, 702, 703, 712,
	723, 730, 131, 676, 0, 0, 677, 0, 0, 100,
	0, 102, 0, 641, 645, 675, 0, 675, 0, 1080,
	148, 149, 705, 675, 0, 1420, 1421, 1422, 1423, 1424,
	694, 733, 0, 734, 0, 0, 0, 735, 680, 0,
	683, 0, 98, 0, 640, 795, 724, 795, 724, 904,
	706, 0, 736, 0, 739, 740, 0, 737, 715, 0,
	0, 670, 790, 0, 667, 792, 667, 1419, 738, 741,
	742, 714, 0, 0, 666, 668, 669, 796, 675, 675,
	675, 0, 795, 795, 681, 0, 791, 793, 0, 0,
	675, 684,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 431, 3, 437, 432, 3,
	442, 443, 435, 433, 446, 434, 444, 436, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 450, 3,
	423, 425, 424, 427, 447, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 440, 3, 441, 438, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 448, 430, 449, 428,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 426, 57766, 429, 57767, 439, 57768, 445, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1030
		{
			sqllex.(*lexer).stmt = sqlDollar[1].union.stmt()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1035
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1039
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1040
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1041
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1042
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1043
		{
			return helpWith(sqllex, "GRANT")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1044
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1045
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1046
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1047
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1051
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1060
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1061
		{
			return helpWith(sqllex, "ALTER")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1064
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1065
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1066
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1067
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1068
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1069
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1120
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1121
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1132
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1147
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1151
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1160
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1176
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1188
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1207
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1230
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1234
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1243
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1254
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1258
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1264
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Split{Table: &name, Rows: sqlDollar[6].union.slct()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1275
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1285
		{

			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[5].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1297
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1304
		{

			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1316
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1323
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 87:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1331
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1336
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1340
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1345
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1351
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1359
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 93:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1372
		{
			name, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1388
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableWithIdx(),
			}
			sqlVAL.union.val = s
		}
	case 95:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1398
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1402
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1406
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 98:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1410
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1416
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Scatter{Table: &name}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1425
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Scatter{Table: &name, From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1436
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1440
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1446
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1450
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1457
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1462
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1467
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1472
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1477
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1482
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1487
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1491
		{
			return unimplementedWithIssue(sqllex, 28751)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1494
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1503
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1515
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1525
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1532
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1535
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1542
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1551
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1560
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1565
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1572
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1580
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1581
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1585
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1589
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1595
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1603
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1607
		{
			sqlVAL.union.val = nil
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1613
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1617
		{
			sqlVAL.union.val = nil
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1624
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1628
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1632
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1638
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1642
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 138:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1668
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1671
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 140:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1694
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1698
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1701
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1705
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 144:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1742
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1747
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1751
		{

			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1761
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1770
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1779
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1787
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 151:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1803
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1806
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1810
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1814
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1820
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1824
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1830
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1834
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1840
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1844
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1848
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1852
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1858
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1862
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1868
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1872
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 167:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1876
		{
			sqlVAL.union.val = nil
		}
	case 168:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1882
		{
			name, err := tree.NormalizeTableName(sqlDollar[2].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1899
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1900
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1901
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1902
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1912
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1920
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1922
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1925
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1935
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1944
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1952
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1954
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1958
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1961
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1971
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1980
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1988
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1990
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1994
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1997
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2001
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CommentOnTable{Table: name, Comment: sqlDollar[6].union.strPtr()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2010
		{
			return unimplementedWithIssueDetail(sqllex, 19472, "column")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2014
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2020
		{
			sqlVAL.union.val = &sqlDollar[1].str
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2024
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2036
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2037
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2039
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2040
		{
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2041
		{
			return helpWith(sqllex, "CREATE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2044
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2045
		{
			return unimplemented(sqllex, "create cast")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2046
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2047
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2048
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2049
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2050
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2051
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2052
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2053
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2054
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2055
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2056
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2057
		{
			return unimplemented(sqllex, "create operator")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2058
		{
			return unimplemented(sqllex, "create publication")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2059
		{
			return unimplemented(sqllex, "create rule")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2060
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2061
		{
			return unimplemented(sqllex, "create server")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2062
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2063
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2064
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2067
		{
		}
	case 228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2068
		{
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2071
		{
		}
	case 230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2072
		{
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2075
		{
		}
	case 232:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2076
		{
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2079
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2080
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2081
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2082
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2083
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2084
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2085
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2086
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2087
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2088
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2089
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2090
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2091
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2092
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2093
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2094
		{
			return unimplemented(sqllex, "drop server")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2095
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2096
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2097
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2098
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2102
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2103
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2104
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2105
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2107
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2108
		{
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2109
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2110
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2120
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				AsOf:        sqlDollar[7].union.asOfClause(),
			}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2128
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2132
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 271:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2136
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2142
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &name
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2151
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2160
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2170
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2174
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2180
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2184
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2191
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 280:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2195
		{

			sqlVAL.union.val = nil
		}
	case 281:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2209
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2219
		{
			return helpWith(sqllex, "DELETE")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2226
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2229
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2230
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2231
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2232
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2233
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2242
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2243
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2244
		{
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2245
		{
			return helpWith(sqllex, "DROP")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2248
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2249
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2250
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2251
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2252
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2260
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2264
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2267
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2275
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2279
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2282
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2290
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2294
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2297
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2305
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2313
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2320
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2328
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2336
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2343
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2351
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2355
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2358
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2366
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2370
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2373
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2377
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2386
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2413
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2416
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2418
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2422
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2426
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2433
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2437
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2440
		{
			return helpWith(sqllex, "DELETE")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2442
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2443
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2444
		{
			return helpWith(sqllex, "INSERT")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2445
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2447
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2448
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2451
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2456
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2457
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2458
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2462
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2466
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 368:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2476
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2483
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2487
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 371:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2491
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2501
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2507
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2511
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 375:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2515
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2525
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2529
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2533
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2537
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2540
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2560
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2564
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2568
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2571
		{
			return helpWith(sqllex, "GRANT")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2591
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2595
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2599
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2602
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2607
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2611
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2622
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2626
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2640
		{
			return helpWith(sqllex, "RESET")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2641
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2649
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2653
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2656
		{
			return helpWith(sqllex, "RESET")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2664
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2667
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2678
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2681
		{
			return helpWith(sqllex, "USE")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2685
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2686
		{
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2687
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2688
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2692
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2693
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2694
		{
			return helpWith(sqllex, "USE")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2710
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2725
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2728
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2746
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   name,
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2759
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2763
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 427:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2767
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2773
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2777
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2783
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2787
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2791
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2795
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2799
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2810
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2813
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2823
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2839
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2843
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 442:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2848
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2865
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2868
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2870
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2873
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2877
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2896
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2903
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2909
		{
			return unimplemented(sqllex, "set from current")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2910
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2918
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2923
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2930
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2934
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2940
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2944
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2951
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2972
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2976
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2982
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2986
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2990
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2994
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2998
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3004
		{
			sqlVAL.union.val = tree.Low
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3008
		{
			sqlVAL.union.val = tree.Normal
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3012
		{
			sqlVAL.union.val = tree.High
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3023
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3027
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3031
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3036
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3040
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3052
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3053
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3054
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3055
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3056
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3057
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3059
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3060
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3061
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3062
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3063
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3064
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3065
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3066
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3067
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3068
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3069
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3070
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3071
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3072
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3073
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3074
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3076
		{
			return helpWith(sqllex, "SHOW")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3083
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3084
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3085
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3096
		{
			sqlVAL.str = "client_encoding"
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3099
		{
			sqlVAL.str = "timezone"
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3100
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3114
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowTableStats{Table: name}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3123
		{

			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowTableStats{Table: name, UsingJSON: true}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3132
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3143
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3152
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3160
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3167
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3175
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3182
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3192
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3196
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3199
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3201
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3204
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3212
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowColumns{Table: name}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3220
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3228
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3231
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3244
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3252
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3260
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3268
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3270
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3278
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3280
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3288
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3296
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3304
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3306
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3314
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3322
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3325
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3327
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3331
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3341
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3344
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3353
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3356
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3358
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3361
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3363
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3367
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3370
		{
			sqlVAL.union.val = true
		}
	case 580:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3371
		{
			sqlVAL.union.val = false
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3379
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3382
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3384
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3388
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3398
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3408
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3418
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3421
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3424
		{
			sqlVAL.union.val = true
		}
	case 590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3425
		{
			sqlVAL.union.val = false
		}
	case 591:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3432
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3436
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3439
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3446
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3450
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3458
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3463
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3468
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3472
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3480
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3489
		{

			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3498
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3511
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3514
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3522
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3525
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3529
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3533
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3537
		{
			name, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: name},
			}}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3548
		{
			name, err := tree.NormalizeTableName(sqlDollar[9].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3560
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableWithIdx(),
			}}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3566
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3570
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3581
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowRanges{Table: &name}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3590
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3593
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3601
		{

			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowFingerprints{Table: name}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3613
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3618
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3738
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3742
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3746
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3785
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3789
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3794
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3798
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3807
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3814
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3818
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3830
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3839
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3842
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 639:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3878
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
			}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:3895
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
			}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3913
		{
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3914
		{
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3915
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 644:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3919
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[8].union.slct(),
				AsColumnNames: sqlDollar[5].union.nameList(),
			}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:3935
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[11].union.slct(),
				AsColumnNames: sqlDollar[8].union.nameList(),
			}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3952
		{
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3953
		{
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3954
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3968
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3969
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3970
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3971
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3972
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3973
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3974
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3975
		{
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3980
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3986
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3990
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3996
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4002
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4005
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 666:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4009
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4022
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4029
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4034
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 670:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4039
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4045
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4052
		{
			sqlVAL.str = ""
		}
	case 675:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4059
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 676:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4065
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4072
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4079
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4085
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4089
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 681:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4095
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4105
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4109
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 684:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4115
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4126
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4137
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 687:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4141
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4147
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4151
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4155
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4159
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4163
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4167
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4171
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4189
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4193
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4197
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4201
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4205
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4209
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4213
		{
			name, err := tree.NormalizeTableName(sqlDollar[2].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4227
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4231
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4235
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 705:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4242
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4252
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4264
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4274
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4286
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4291
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 711:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4297
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4303
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4314
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4324
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4340
		{
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4341
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4342
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4343
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4344
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4345
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4362
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4366
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4372
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4376
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4396
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4400
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4404
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4408
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4417
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4421
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4425
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4429
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4433
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4439
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4445
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4453
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4457
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4461
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4465
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4469
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4475
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4479
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4485
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4504
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4513
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4521
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 750:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4525
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4528
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4529
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4532
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().String())
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4533
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4535
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4536
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4537
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4540
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4542
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4544
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4546
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4547
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4549
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4550
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4552
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4554
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4562
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4565
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 769:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4573
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4577
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4580
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4584
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4588
		{
			sqlVAL.union.val = nil
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4598
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4602
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4605
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4610
		{
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4611
		{
		}
	case 779:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4619
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4631
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 781:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4632
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 782:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4635
		{
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4636
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 784:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4642
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 785:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4644
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 786:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4646
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 787:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4648
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4650
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 789:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4652
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 790:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4668
		{
			table, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4686
		{
			table, err := tree.NormalizeTableName(sqlDollar[9].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4705
		{
			table, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4723
		{
			table, err := tree.NormalizeTableName(sqlDollar[10].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4741
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 795:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4744
		{
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4745
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4749
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4764
		{
			sqlVAL.union.val = false
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4770
		{
			sqlVAL.union.val = true
		}
	case 800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4774
		{
			sqlVAL.union.val = false
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4780
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4784
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4793
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4804
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 805:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4805
		{
			sqlVAL.str = ""
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4809
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4813
		{
			sqlVAL.union.val = tree.Descending
		}
	case 808:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4817
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 809:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4823
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4830
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4834
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4840
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4854
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[8].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4868
		{
			table, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameColumn{
				Table:    table,
				Name:     tree.Name(sqlDollar[6].str),
				NewName:  tree.Name(sqlDollar[8].str),
				IfExists: false,
			}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4882
		{
			table, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameColumn{
				Table:    table,
				Name:     tree.Name(sqlDollar[8].str),
				NewName:  tree.Name(sqlDollar[10].str),
				IfExists: true,
			}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4896
		{
			return unimplementedWithIssue(sqllex, 32555)
		}
	case 817:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4898
		{
			return unimplementedWithIssue(sqllex, 32555)
		}
	case 818:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4902
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4916
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[8].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4932
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4946
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[8].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4962
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4966
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4971
		{
		}
	case 825:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4972
		{
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4975
		{
		}
	case 827:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4976
		{
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4984
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4987
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4997
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5006
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5009
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5017
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5020
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5024
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5025
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5026
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5042
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5045
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5047
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5050
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5060
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5063
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5065
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5068
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5072
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5077
		{
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5078
		{
		}
	case 853:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5079
		{
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5087
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5094
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5097
		{
		}
	case 857:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5098
		{
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5102
		{
			sqlVAL.str = ""
		}
	case 859:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5106
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5110
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 861:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5114
		{
			sqlVAL.str = ""
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5120
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5124
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5130
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5134
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5140
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5144
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5157
		{
		}
	case 869:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5159
		{
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5163
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5168
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5172
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5178
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5184
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5190
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5194
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 877:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5204
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5214
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5224
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5228
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 881:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5232
		{
			sqlVAL.str = ""
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5238
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 883:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5242
		{
			sqlVAL.str = ""
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5248
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 885:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5252
		{
			sqlVAL.str = ""
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5258
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 887:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5262
		{
			sqlVAL.str = ""
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5267
		{
		}
	case 889:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5268
		{
		}
	case 890:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5280
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 891:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5287
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5294
		{
			return helpWith(sqllex, "INSERT")
		}
	case 893:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5305
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5312
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5316
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &name
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5329
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5340
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5344
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5348
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5354
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5358
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5378
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 904:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5382
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5386
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5392
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 907:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5395
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5396
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 909:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5398
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5404
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 911:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5409
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 912:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5413
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 913:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5430
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5441
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5445
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 916:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5446
		{
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5450
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5454
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5467
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5470
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 923:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5474
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5517
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5523
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5527
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5542
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5546
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5550
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5554
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5558
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5562
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5567
		{
		}
	case 935:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5568
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5573
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5608
		{
			return helpWith(sqllex, "SELECT")
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5609
		{
			return helpWith(sqllex, "VALUES")
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5610
		{
			return helpWith(sqllex, "TABLE")
		}
	case 946:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5632
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5645
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5659
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5671
		{
			return helpWith(sqllex, "SELECT")
		}
	case 950:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5675
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5684
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5693
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5708
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5715
		{
			return helpWith(sqllex, "TABLE")
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5727
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5731
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5735
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 958:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5739
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5743
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 960:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5749
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5757
		{
		}
	case 962:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5758
		{
		}
	case 963:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5762
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 964:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5766
		{
			sqlVAL.union.val = nil
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5771
		{
		}
	case 966:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5772
		{
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5776
		{
			sqlVAL.union.val = true
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5780
		{
			sqlVAL.union.val = false
		}
	case 969:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5784
		{
			sqlVAL.union.val = false
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5790
		{
			sqlVAL.union.val = true
		}
	case 971:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5796
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5801
		{
		}
	case 973:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5802
		{
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5805
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 975:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5806
		{
		}
	case 976:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5810
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 977:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5814
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5820
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5826
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5830
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 981:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5836
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5840
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5849
		{
			name, err := tree.NormalizeTableName(sqlDollar[2].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5868
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5877
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5888
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 990:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5892
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5901
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5907
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5914
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5921
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5930
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5934
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 998:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5938
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5944
		{
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5945
		{
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5948
		{
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5949
		{
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5966
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5970
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5976
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5980
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5999
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6002
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6004
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6016
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6019
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6021
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6027
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6031
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6037
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6041
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6047
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6053
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6058
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6070
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6074
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6078
		{
			sqlVAL.union.val = sqlDollar[3].union.indexFlags()
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6082
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6109
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6123
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6137
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6144
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "select")
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6146
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6150
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6154
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6158
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "srf")
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6174
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6180
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6184
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6190
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6192
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6196
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6202
		{
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6204
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6207
		{
			sqlVAL.union.val = nil
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6208
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6209
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6213
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6217
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6223
		{
			sqlVAL.union.val = true
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6227
		{
			sqlVAL.union.val = false
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6247
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6251
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6255
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6259
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6263
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6267
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6273
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6277
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6284
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6290
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6297
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6303
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6307
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6311
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6315
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6321
		{
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6322
		{
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6333
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6337
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6342
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6343
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6344
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6345
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6349
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6358
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6376
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6380
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6386
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6394
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6408
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6415
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6427
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6441
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6450
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6459
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6465
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6472
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6474
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6483
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6494
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6495
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6512
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6516
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6520
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6524
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6528
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6532
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6536
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedSerialType
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6540
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6544
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6548
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6552
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6556
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6560
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6564
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6568
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6572
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6576
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6580
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.QChar
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6611
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6615
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6619
		{
			sqlVAL.union.val = nil
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6626
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6630
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6634
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6638
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6642
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6646
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6650
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6654
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6658
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6662
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6666
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6670
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6674
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6678
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6685
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6692
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6699
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6703
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6710
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6714
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6718
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6722
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6726
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6732
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			typ, err := coltypes.NewFloat(prec)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = typ
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6747
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6753
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[4].union.int64()), sqlDollar[2].union.bool())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6759
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[3].union.int64()), true)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6767
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6771
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6775
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6781
		{
			colTyp := *(sqlDollar[1].union.colType().(*coltypes.TString))
			n := sqlDollar[3].union.int64()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", &colTyp))
				return 1
			}
			colTyp.N = uint(n)
			sqlVAL.union.val = &colTyp
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6794
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6800
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6804
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6808
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6812
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6821
		{
			sqlVAL.union.val = true
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6822
		{
			sqlVAL.union.val = false
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6827
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6831
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = coltypes.Time
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6835
		{
			return unimplementedWithIssue(sqllex, 32565)
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6836
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6837
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6839
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = coltypes.TimestampWithTZ
			} else {
				sqlVAL.union.val = coltypes.Timestamp
			}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6846
		{
			return unimplementedWithIssue(sqllex, 32098)
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6848
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6851
		{
			return unimplementedWithIssue(sqllex, 32098)
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6854
		{
			sqlVAL.union.val = true
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6855
		{
			sqlVAL.union.val = false
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6856
		{
			sqlVAL.union.val = false
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6860
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6866
		{
			sqlVAL.union.val = tree.Year
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6870
		{
			sqlVAL.union.val = tree.Month
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6874
		{
			sqlVAL.union.val = tree.Day
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6878
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6882
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6886
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6892
		{
			sqlVAL.union.val = tree.Month
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6896
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6900
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6904
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6908
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6912
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6916
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6923
		{
			sqlVAL.union.val = nil
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6929
		{
			sqlVAL.union.val = tree.Second
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6932
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6956
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6960
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6964
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6967
		{
			return unimplementedWithIssue(sqllex, 32005)
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6976
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6981
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6985
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6989
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6993
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6997
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7001
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7005
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7009
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7013
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7017
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7021
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7025
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7029
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7033
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7037
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7041
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7045
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7049
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7053
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7057
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7061
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7065
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7069
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7073
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7077
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7081
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7085
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7089
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7093
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7097
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7101
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7105
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7109
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7113
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7117
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7121
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7125
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7129
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7133
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7137
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7141
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7145
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7149
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7153
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7157
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7161
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7165
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7169
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7173
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7177
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7181
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7185
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7189
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7193
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7197
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7201
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7205
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7209
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7213
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7217
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7220
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7222
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7226
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7230
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7234
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7238
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7242
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7246
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7250
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7254
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7258
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7262
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7266
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7270
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7274
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7278
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7282
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7286
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7303
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7308
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7320
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7324
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7328
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7332
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7336
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7340
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7344
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7348
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7352
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7356
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7360
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7364
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7368
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7372
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7376
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7380
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7384
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7388
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7392
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7396
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7400
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7404
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7408
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7412
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7416
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7420
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7424
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7428
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7442
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7450
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7486
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7490
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7494
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7498
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7502
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7507
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7509
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7513
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7516
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7518
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7522
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7526
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7530
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7534
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7543
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7548
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7552
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7556
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7561
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7565
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7569
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7573
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7577
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7580
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7584
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7588
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7591
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7592
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7594
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7598
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7602
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7605
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7616
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7623
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7632
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7633
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7637
		{
			return unimplementedWithIssue(sqllex, 32563)
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7639
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7643
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7649
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7653
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7657
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7661
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7667
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7671
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7675
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7679
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7683
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7687
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7691
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7695
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7699
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7703
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7707
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7711
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7715
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7722
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7725
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7727
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7730
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7732
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7735
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7737
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7740
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7742
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7745
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7747
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7750
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7752
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7755
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7757
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7760
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7762
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7766
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7769
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7770
		{
			return unimplemented(sqllex, "treat")
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7772
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7776
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7780
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7784
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7788
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7791
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7793
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7796
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7801
		{
			return unimplemented(sqllex, "within group")
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7802
		{
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7806
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7810
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7817
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7821
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7827
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7831
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7837
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7845
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7849
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7853
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7860
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7880
		{
			sqlVAL.str = ""
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7886
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7890
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7901
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7908
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7915
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7922
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7928
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7941
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7969
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7973
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7977
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7981
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7988
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8004
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8008
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8015
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8027
		{
			sqlVAL.union.val = tree.Any
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8031
		{
			sqlVAL.union.val = tree.Some
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8035
		{
			sqlVAL.union.val = tree.All
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8040
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8041
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8042
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8043
		{
			sqlVAL.union.val = tree.Div
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8044
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8045
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8046
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8047
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8048
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8049
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8050
		{
			sqlVAL.union.val = tree.LT
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8051
		{
			sqlVAL.union.val = tree.GT
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8052
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8053
		{
			sqlVAL.union.val = tree.LE
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8054
		{
			sqlVAL.union.val = tree.GE
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8055
		{
			sqlVAL.union.val = tree.NE
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8059
		{
			sqlVAL.union.val = tree.Like
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8060
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8061
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8062
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8085
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8089
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8095
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8099
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8103
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8114
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8118
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8124
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8128
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8135
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8141
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8145
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8151
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8155
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8161
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8165
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8171
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8175
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8181
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8185
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8207
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8211
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8215
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8221
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8228
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8232
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8249
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8253
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8257
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8261
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8265
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8271
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8277
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8283
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8287
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8291
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8297
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8309
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8316
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8320
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8326
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8332
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8336
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8343
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8349
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8353
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8360
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8366
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8370
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8375
		{
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8376
		{
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8380
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8384
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8390
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8399
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8403
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8407
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8415
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8419
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8425
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8429
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8435
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8447
		{

			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       name,
				SearchTable: true,
			}
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8480
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8484
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8488
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8494
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8498
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8506
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8510
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8521
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8532
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8542
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8640
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8647
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8651
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8655
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8669
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8673
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8677
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8690
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8708
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8718
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8722
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8744
		{
			sqlVAL.str = ""
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8750
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8754
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
