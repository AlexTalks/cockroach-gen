// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:64

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:579
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9314

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 26,
	-2, 1006,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 69,
	178, 845,
	195, 845,
	210, 237,
	286, 237,
	294, 701,
	321, 237,
	330, 701,
	367, 701,
	392, 237,
	416, 701,
	-2, 0,
	-1, 75,
	210, 241,
	-2, 0,
	-1, 76,
	106, 1006,
	184, 1006,
	402, 1006,
	403, 1006,
	-2, 0,
	-1, 87,
	119, 980,
	133, 980,
	192, 980,
	221, 980,
	252, 980,
	262, 980,
	397, 980,
	-2, 967,
	-1, 116,
	124, 621,
	201, 613,
	209, 621,
	288, 607,
	339, 607,
	385, 621,
	-2, 0,
	-1, 117,
	4, 1008,
	21, 1008,
	22, 1008,
	23, 1008,
	24, 1008,
	25, 1008,
	27, 1008,
	32, 1008,
	37, 1008,
	38, 1008,
	39, 1008,
	40, 1008,
	41, 1008,
	42, 1008,
	43, 1008,
	44, 1008,
	45, 1008,
	46, 1008,
	47, 1008,
	49, 1008,
	50, 1008,
	51, 1008,
	52, 1008,
	53, 1008,
	54, 1008,
	57, 1008,
	58, 1008,
	59, 1008,
	60, 1008,
	62, 1008,
	63, 1008,
	67, 1008,
	68, 1008,
	69, 1008,
	70, 1008,
	71, 1008,
	73, 1008,
	74, 1008,
	75, 1008,
	76, 1008,
	78, 1008,
	80, 1008,
	81, 1008,
	82, 1008,
	85, 1008,
	86, 1008,
	94, 1008,
	95, 1008,
	96, 1008,
	97, 1008,
	98, 1008,
	99, 1008,
	100, 1008,
	101, 1008,
	103, 1008,
	105, 1008,
	106, 1008,
	108, 1008,
	111, 1008,
	112, 1008,
	113, 1008,
	115, 1008,
	117, 1008,
	118, 1008,
	120, 1008,
	121, 1008,
	122, 1008,
	123, 1008,
	124, 1008,
	125, 1008,
	126, 1008,
	127, 1008,
	128, 1008,
	129, 1008,
	130, 1008,
	132, 1008,
	138, 1008,
	139, 1008,
	140, 1008,
	141, 1008,
	142, 1008,
	143, 1008,
	145, 1008,
	147, 1008,
	151, 1008,
	152, 1008,
	154, 1008,
	155, 1008,
	157, 1008,
	158, 1008,
	160, 1008,
	161, 1008,
	162, 1008,
	163, 1008,
	164, 1008,
	165, 1008,
	166, 1008,
	167, 1008,
	169, 1008,
	170, 1008,
	172, 1008,
	173, 1008,
	174, 1008,
	178, 1008,
	179, 1008,
	180, 1008,
	181, 1008,
	184, 1008,
	185, 1008,
	186, 1008,
	187, 1008,
	188, 1008,
	189, 1008,
	190, 1008,
	191, 1008,
	193, 1008,
	195, 1008,
	197, 1008,
	199, 1008,
	200, 1008,
	201, 1008,
	203, 1008,
	204, 1008,
	207, 1008,
	208, 1008,
	209, 1008,
	210, 1008,
	212, 1008,
	213, 1008,
	215, 1008,
	216, 1008,
	218, 1008,
	219, 1008,
	222, 1008,
	223, 1008,
	226, 1008,
	227, 1008,
	229, 1008,
	230, 1008,
	231, 1008,
	232, 1008,
	233, 1008,
	234, 1008,
	235, 1008,
	236, 1008,
	237, 1008,
	238, 1008,
	240, 1008,
	241, 1008,
	242, 1008,
	243, 1008,
	245, 1008,
	248, 1008,
	249, 1008,
	250, 1008,
	251, 1008,
	253, 1008,
	254, 1008,
	255, 1008,
	257, 1008,
	258, 1008,
	259, 1008,
	260, 1008,
	263, 1008,
	264, 1008,
	266, 1008,
	268, 1008,
	269, 1008,
	270, 1008,
	271, 1008,
	272, 1008,
	273, 1008,
	274, 1008,
	275, 1008,
	276, 1008,
	278, 1008,
	279, 1008,
	280, 1008,
	281, 1008,
	282, 1008,
	283, 1008,
	285, 1008,
	287, 1008,
	288, 1008,
	289, 1008,
	290, 1008,
	291, 1008,
	292, 1008,
	293, 1008,
	294, 1008,
	295, 1008,
	297, 1008,
	298, 1008,
	299, 1008,
	300, 1008,
	301, 1008,
	303, 1008,
	304, 1008,
	305, 1008,
	306, 1008,
	307, 1008,
	308, 1008,
	309, 1008,
	310, 1008,
	312, 1008,
	314, 1008,
	315, 1008,
	316, 1008,
	317, 1008,
	318, 1008,
	319, 1008,
	321, 1008,
	322, 1008,
	323, 1008,
	324, 1008,
	325, 1008,
	326, 1008,
	327, 1008,
	328, 1008,
	330, 1008,
	331, 1008,
	332, 1008,
	333, 1008,
	334, 1008,
	335, 1008,
	336, 1008,
	337, 1008,
	338, 1008,
	339, 1008,
	341, 1008,
	342, 1008,
	343, 1008,
	344, 1008,
	346, 1008,
	347, 1008,
	348, 1008,
	349, 1008,
	351, 1008,
	352, 1008,
	353, 1008,
	354, 1008,
	355, 1008,
	356, 1008,
	357, 1008,
	358, 1008,
	359, 1008,
	360, 1008,
	361, 1008,
	362, 1008,
	364, 1008,
	365, 1008,
	366, 1008,
	368, 1008,
	369, 1008,
	370, 1008,
	371, 1008,
	372, 1008,
	373, 1008,
	374, 1008,
	375, 1008,
	376, 1008,
	378, 1008,
	379, 1008,
	380, 1008,
	381, 1008,
	383, 1008,
	385, 1008,
	386, 1008,
	387, 1008,
	388, 1008,
	389, 1008,
	391, 1008,
	392, 1008,
	393, 1008,
	395, 1008,
	396, 1008,
	399, 1008,
	400, 1008,
	401, 1008,
	402, 1008,
	403, 1008,
	404, 1008,
	406, 1008,
	408, 1008,
	409, 1008,
	410, 1008,
	411, 1008,
	412, 1008,
	413, 1008,
	414, 1008,
	416, 1008,
	417, 1008,
	418, 1008,
	423, 1008,
	424, 1008,
	425, 1008,
	426, 1008,
	427, 1008,
	428, 1008,
	-2, 0,
	-1, 118,
	1, 898,
	199, 898,
	285, 898,
	292, 898,
	431, 898,
	454, 898,
	-2, 0,
	-1, 120,
	1, 898,
	454, 898,
	-2, 0,
	-1, 121,
	1, 898,
	454, 898,
	-2, 0,
	-1, 122,
	1, 902,
	454, 902,
	-2, 0,
	-1, 146,
	119, 979,
	133, 979,
	192, 979,
	221, 979,
	252, 979,
	262, 979,
	397, 979,
	-2, 976,
	-1, 178,
	4, 1015,
	5, 1015,
	6, 1015,
	7, 1015,
	8, 1015,
	9, 1015,
	10, 1015,
	21, 1015,
	22, 1015,
	23, 1015,
	24, 1015,
	25, 1015,
	27, 1015,
	32, 1015,
	33, 1015,
	37, 1015,
	38, 1015,
	39, 1015,
	40, 1015,
	41, 1015,
	42, 1015,
	43, 1015,
	44, 1015,
	45, 1015,
	46, 1015,
	47, 1015,
	49, 1015,
	50, 1015,
	51, 1015,
	52, 1015,
	53, 1015,
	54, 1015,
	55, 1015,
	56, 1015,
	57, 1015,
	58, 1015,
	59, 1015,
	60, 1015,
	62, 1015,
	63, 1015,
	65, 1015,
	67, 1015,
	68, 1015,
	69, 1015,
	70, 1015,
	71, 1015,
	73, 1015,
	74, 1015,
	75, 1015,
	76, 1015,
	78, 1015,
	80, 1015,
	81, 1015,
	82, 1015,
	84, 1015,
	85, 1015,
	86, 1015,
	87, 1015,
	88, 1015,
	89, 1015,
	90, 1015,
	91, 1015,
	92, 1015,
	93, 1015,
	94, 1015,
	95, 1015,
	96, 1015,
	97, 1015,
	98, 1015,
	99, 1015,
	100, 1015,
	101, 1015,
	102, 1015,
	103, 1015,
	105, 1015,
	106, 1015,
	108, 1015,
	111, 1015,
	112, 1015,
	113, 1015,
	115, 1015,
	117, 1015,
	118, 1015,
	120, 1015,
	121, 1015,
	122, 1015,
	123, 1015,
	124, 1015,
	125, 1015,
	126, 1015,
	127, 1015,
	128, 1015,
	129, 1015,
	130, 1015,
	131, 1015,
	132, 1015,
	138, 1015,
	139, 1015,
	140, 1015,
	141, 1015,
	142, 1015,
	143, 1015,
	145, 1015,
	147, 1015,
	150, 1015,
	151, 1015,
	152, 1015,
	154, 1015,
	155, 1015,
	157, 1015,
	158, 1015,
	160, 1015,
	161, 1015,
	162, 1015,
	163, 1015,
	164, 1015,
	165, 1015,
	166, 1015,
	167, 1015,
	168, 1015,
	169, 1015,
	170, 1015,
	172, 1015,
	173, 1015,
	174, 1015,
	178, 1015,
	179, 1015,
	180, 1015,
	181, 1015,
	183, 1015,
	184, 1015,
	185, 1015,
	186, 1015,
	187, 1015,
	188, 1015,
	189, 1015,
	190, 1015,
	191, 1015,
	193, 1015,
	195, 1015,
	196, 1015,
	197, 1015,
	198, 1015,
	199, 1015,
	200, 1015,
	201, 1015,
	202, 1015,
	203, 1015,
	204, 1015,
	207, 1015,
	208, 1015,
	209, 1015,
	210, 1015,
	212, 1015,
	213, 1015,
	215, 1015,
	216, 1015,
	217, 1015,
	218, 1015,
	219, 1015,
	220, 1015,
	222, 1015,
	223, 1015,
	226, 1015,
	227, 1015,
	229, 1015,
	230, 1015,
	231, 1015,
	232, 1015,
	233, 1015,
	234, 1015,
	235, 1015,
	236, 1015,
	237, 1015,
	238, 1015,
	239, 1015,
	240, 1015,
	241, 1015,
	242, 1015,
	243, 1015,
	244, 1015,
	245, 1015,
	246, 1015,
	247, 1015,
	248, 1015,
	249, 1015,
	250, 1015,
	251, 1015,
	253, 1015,
	254, 1015,
	255, 1015,
	258, 1015,
	259, 1015,
	260, 1015,
	263, 1015,
	264, 1015,
	265, 1015,
	266, 1015,
	267, 1015,
	268, 1015,
	269, 1015,
	270, 1015,
	271, 1015,
	272, 1015,
	273, 1015,
	274, 1015,
	275, 1015,
	276, 1015,
	278, 1015,
	279, 1015,
	280, 1015,
	281, 1015,
	282, 1015,
	283, 1015,
	285, 1015,
	287, 1015,
	288, 1015,
	289, 1015,
	290, 1015,
	291, 1015,
	292, 1015,
	293, 1015,
	294, 1015,
	295, 1015,
	297, 1015,
	298, 1015,
	299, 1015,
	300, 1015,
	301, 1015,
	303, 1015,
	304, 1015,
	305, 1015,
	306, 1015,
	307, 1015,
	308, 1015,
	309, 1015,
	310, 1015,
	312, 1015,
	313, 1015,
	314, 1015,
	315, 1015,
	316, 1015,
	317, 1015,
	318, 1015,
	319, 1015,
	321, 1015,
	322, 1015,
	323, 1015,
	324, 1015,
	325, 1015,
	326, 1015,
	327, 1015,
	328, 1015,
	330, 1015,
	331, 1015,
	332, 1015,
	333, 1015,
	334, 1015,
	335, 1015,
	336, 1015,
	337, 1015,
	338, 1015,
	339, 1015,
	340, 1015,
	341, 1015,
	342, 1015,
	343, 1015,
	344, 1015,
	345, 1015,
	346, 1015,
	347, 1015,
	348, 1015,
	349, 1015,
	351, 1015,
	352, 1015,
	353, 1015,
	354, 1015,
	355, 1015,
	356, 1015,
	357, 1015,
	358, 1015,
	359, 1015,
	360, 1015,
	361, 1015,
	362, 1015,
	364, 1015,
	365, 1015,
	366, 1015,
	368, 1015,
	369, 1015,
	370, 1015,
	371, 1015,
	372, 1015,
	373, 1015,
	374, 1015,
	375, 1015,
	376, 1015,
	378, 1015,
	379, 1015,
	380, 1015,
	381, 1015,
	383, 1015,
	385, 1015,
	386, 1015,
	387, 1015,
	388, 1015,
	389, 1015,
	390, 1015,
	391, 1015,
	392, 1015,
	393, 1015,
	395, 1015,
	396, 1015,
	398, 1015,
	399, 1015,
	400, 1015,
	401, 1015,
	402, 1015,
	403, 1015,
	404, 1015,
	405, 1015,
	406, 1015,
	408, 1015,
	409, 1015,
	410, 1015,
	411, 1015,
	412, 1015,
	413, 1015,
	414, 1015,
	416, 1015,
	417, 1015,
	418, 1015,
	423, 1015,
	424, 1015,
	425, 1015,
	426, 1015,
	427, 1015,
	428, 1015,
	429, 1015,
	437, 1015,
	442, 1015,
	443, 1015,
	444, 1015,
	451, 1015,
	456, 1015,
	-2, 0,
	-1, 547,
	149, 1684,
	382, 1684,
	434, 1684,
	453, 1684,
	-2, 0,
	-1, 548,
	149, 1761,
	382, 1761,
	434, 1761,
	453, 1761,
	-2, 0,
	-1, 549,
	149, 1674,
	382, 1674,
	434, 1674,
	453, 1674,
	-2, 0,
	-1, 551,
	149, 1848,
	382, 1848,
	434, 1848,
	453, 1848,
	-2, 0,
	-1, 553,
	149, 1876,
	382, 1876,
	434, 1876,
	453, 1876,
	-2, 0,
	-1, 560,
	149, 1771,
	382, 1771,
	434, 1771,
	453, 1771,
	-2, 486,
	-1, 577,
	453, 1633,
	455, 1633,
	-2, 670,
	-1, 578,
	453, 1635,
	455, 1635,
	-2, 671,
	-1, 579,
	453, 1634,
	455, 1634,
	-2, 672,
	-1, 580,
	455, 1580,
	-2, 673,
	-1, 724,
	288, 608,
	339, 608,
	-2, 0,
	-1, 725,
	288, 607,
	339, 607,
	-2, 564,
	-1, 727,
	1, 631,
	450, 631,
	452, 631,
	454, 631,
	-2, 0,
	-1, 728,
	1, 669,
	146, 669,
	450, 669,
	452, 669,
	454, 669,
	-2, 0,
	-1, 737,
	1, 631,
	450, 631,
	452, 631,
	454, 631,
	-2, 0,
	-1, 738,
	1, 633,
	450, 633,
	452, 633,
	454, 633,
	-2, 0,
	-1, 739,
	1, 636,
	450, 636,
	452, 636,
	454, 636,
	-2, 0,
	-1, 743,
	1, 650,
	450, 650,
	452, 650,
	454, 650,
	-2, 0,
	-1, 744,
	1, 652,
	450, 652,
	452, 652,
	454, 652,
	-2, 0,
	-1, 789,
	133, 1019,
	221, 1019,
	252, 1019,
	-2, 976,
	-1, 804,
	133, 1018,
	221, 1018,
	252, 1018,
	-2, 976,
	-1, 828,
	453, 1632,
	-2, 494,
	-1, 857,
	451, 1624,
	-2, 1615,
	-1, 863,
	5, 1154,
	-2, 1665,
	-1, 864,
	5, 1155,
	-2, 1669,
	-1, 865,
	5, 1156,
	-2, 1668,
	-1, 866,
	5, 1157,
	-2, 1874,
	-1, 867,
	5, 1158,
	-2, 1773,
	-1, 868,
	5, 1159,
	-2, 1840,
	-1, 869,
	5, 1160,
	-2, 1842,
	-1, 870,
	5, 1161,
	-2, 1853,
	-1, 871,
	5, 1162,
	-2, 1843,
	-1, 872,
	5, 1163,
	-2, 1844,
	-1, 873,
	5, 1164,
	-2, 1664,
	-1, 874,
	5, 1165,
	-2, 1889,
	-1, 875,
	5, 1166,
	-2, 1736,
	-1, 876,
	5, 1167,
	-2, 1781,
	-1, 877,
	5, 1168,
	-2, 1783,
	-1, 878,
	5, 1169,
	-2, 1740,
	-1, 879,
	5, 1170,
	451, 1642,
	-2, 1633,
	-1, 880,
	5, 1226,
	451, 1226,
	-2, 1924,
	-1, 885,
	451, 1643,
	-2, 1634,
	-1, 887,
	5, 1174,
	-2, 1922,
	-1, 888,
	5, 1175,
	-2, 1923,
	-1, 889,
	5, 1176,
	-2, 1739,
	-1, 890,
	5, 1177,
	-2, 1935,
	-1, 891,
	5, 1178,
	-2, 1741,
	-1, 892,
	5, 1179,
	-2, 1742,
	-1, 893,
	5, 1180,
	-2, 1743,
	-1, 894,
	5, 1181,
	-2, 1904,
	-1, 895,
	5, 1182,
	-2, 1933,
	-1, 896,
	5, 1183,
	-2, 1719,
	-1, 897,
	5, 1184,
	-2, 1720,
	-1, 898,
	5, 1198,
	-2, 1916,
	-1, 900,
	5, 1173,
	-2, 1912,
	-1, 901,
	5, 1173,
	-2, 1911,
	-1, 902,
	5, 1173,
	-2, 1928,
	-1, 903,
	5, 1190,
	-2, 1906,
	-1, 904,
	5, 1191,
	-2, 1666,
	-1, 905,
	5, 1201,
	-2, 1905,
	-1, 906,
	5, 1203,
	-2, 1944,
	-1, 908,
	5, 1214,
	-2, 1694,
	-1, 909,
	5, 1225,
	-2, 1937,
	-1, 910,
	5, 1217,
	-2, 1938,
	-1, 911,
	5, 1225,
	-2, 1939,
	-1, 912,
	5, 1221,
	-2, 1940,
	-1, 913,
	5, 1141,
	-2, 1749,
	-1, 914,
	5, 1142,
	-2, 1750,
	-1, 915,
	453, 1630,
	-2, 1614,
	-1, 916,
	451, 1964,
	-2, 1631,
	-1, 936,
	5, 1209,
	-2, 1863,
	-1, 953,
	5, 1208,
	-2, 1945,
	-1, 963,
	5, 1210,
	417, 1210,
	-2, 1907,
	-1, 964,
	5, 1211,
	417, 1211,
	-2, 1908,
	-1, 1000,
	451, 1642,
	-2, 1633,
	-1, 1029,
	149, 1876,
	382, 1876,
	434, 1876,
	453, 1876,
	-2, 0,
	-1, 1030,
	1, 474,
	454, 474,
	-2, 910,
	-1, 1150,
	303, 1611,
	444, 1611,
	-2, 1610,
	-1, 1173,
	456, 1611,
	-2, 1612,
	-1, 1208,
	294, 701,
	416, 701,
	-2, 236,
	-1, 1228,
	274, 1004,
	-2, 818,
	-1, 1237,
	256, 1637,
	-2, 0,
	-1, 1301,
	1, 351,
	450, 351,
	452, 351,
	454, 351,
	-2, 978,
	-1, 1304,
	4, 1943,
	11, 1943,
	12, 1943,
	14, 1943,
	15, 1943,
	16, 1943,
	17, 1943,
	18, 1943,
	19, 1943,
	21, 1943,
	22, 1943,
	23, 1943,
	24, 1943,
	25, 1943,
	27, 1943,
	30, 1943,
	32, 1943,
	34, 1943,
	37, 1943,
	38, 1943,
	39, 1943,
	40, 1943,
	41, 1943,
	42, 1943,
	43, 1943,
	44, 1943,
	45, 1943,
	46, 1943,
	47, 1943,
	49, 1943,
	50, 1943,
	51, 1943,
	52, 1943,
	53, 1943,
	54, 1943,
	57, 1943,
	58, 1943,
	59, 1943,
	60, 1943,
	62, 1943,
	63, 1943,
	64, 1943,
	67, 1943,
	68, 1943,
	69, 1943,
	70, 1943,
	71, 1943,
	72, 1943,
	73, 1943,
	74, 1943,
	75, 1943,
	76, 1943,
	78, 1943,
	79, 1943,
	80, 1943,
	81, 1943,
	82, 1943,
	84, 1943,
	85, 1943,
	86, 1943,
	94, 1943,
	95, 1943,
	96, 1943,
	97, 1943,
	98, 1943,
	99, 1943,
	100, 1943,
	101, 1943,
	103, 1943,
	105, 1943,
	106, 1943,
	108, 1943,
	111, 1943,
	112, 1943,
	113, 1943,
	115, 1943,
	117, 1943,
	118, 1943,
	120, 1943,
	121, 1943,
	122, 1943,
	123, 1943,
	124, 1943,
	125, 1943,
	126, 1943,
	127, 1943,
	128, 1943,
	129, 1943,
	130, 1943,
	134, 1943,
	135, 1943,
	136, 1943,
	137, 1943,
	138, 1943,
	139, 1943,
	140, 1943,
	141, 1943,
	142, 1943,
	143, 1943,
	144, 1943,
	145, 1943,
	147, 1943,
	150, 1943,
	151, 1943,
	152, 1943,
	154, 1943,
	155, 1943,
	157, 1943,
	158, 1943,
	160, 1943,
	161, 1943,
	162, 1943,
	163, 1943,
	164, 1943,
	165, 1943,
	166, 1943,
	167, 1943,
	168, 1943,
	169, 1943,
	170, 1943,
	171, 1943,
	172, 1943,
	173, 1943,
	174, 1943,
	175, 1943,
	176, 1943,
	177, 1943,
	179, 1943,
	180, 1943,
	181, 1943,
	183, 1943,
	184, 1943,
	185, 1943,
	186, 1943,
	187, 1943,
	188, 1943,
	189, 1943,
	190, 1943,
	191, 1943,
	193, 1943,
	195, 1943,
	196, 1943,
	197, 1943,
	198, 1943,
	199, 1943,
	200, 1943,
	201, 1943,
	202, 1943,
	203, 1943,
	204, 1943,
	205, 1943,
	206, 1943,
	207, 1943,
	208, 1943,
	209, 1943,
	210, 1943,
	212, 1943,
	213, 1943,
	215, 1943,
	216, 1943,
	217, 1943,
	218, 1943,
	219, 1943,
	220, 1943,
	222, 1943,
	223, 1943,
	226, 1943,
	227, 1943,
	228, 1943,
	229, 1943,
	230, 1943,
	231, 1943,
	232, 1943,
	233, 1943,
	234, 1943,
	235, 1943,
	236, 1943,
	237, 1943,
	238, 1943,
	239, 1943,
	240, 1943,
	241, 1943,
	242, 1943,
	243, 1943,
	246, 1943,
	248, 1943,
	249, 1943,
	250, 1943,
	251, 1943,
	253, 1943,
	254, 1943,
	255, 1943,
	258, 1943,
	259, 1943,
	260, 1943,
	261, 1943,
	263, 1943,
	264, 1943,
	266, 1943,
	268, 1943,
	269, 1943,
	270, 1943,
	271, 1943,
	272, 1943,
	273, 1943,
	274, 1943,
	275, 1943,
	276, 1943,
	278, 1943,
	279, 1943,
	280, 1943,
	281, 1943,
	282, 1943,
	283, 1943,
	285, 1943,
	287, 1943,
	288, 1943,
	289, 1943,
	290, 1943,
	291, 1943,
	292, 1943,
	293, 1943,
	294, 1943,
	295, 1943,
	297, 1943,
	298, 1943,
	299, 1943,
	300, 1943,
	301, 1943,
	302, 1943,
	303, 1943,
	304, 1943,
	305, 1943,
	306, 1943,
	307, 1943,
	308, 1943,
	309, 1943,
	310, 1943,
	312, 1943,
	313, 1943,
	314, 1943,
	315, 1943,
	316, 1943,
	317, 1943,
	318, 1943,
	319, 1943,
	320, 1943,
	321, 1943,
	322, 1943,
	323, 1943,
	324, 1943,
	325, 1943,
	326, 1943,
	327, 1943,
	328, 1943,
	330, 1943,
	331, 1943,
	332, 1943,
	333, 1943,
	334, 1943,
	335, 1943,
	336, 1943,
	337, 1943,
	338, 1943,
	339, 1943,
	341, 1943,
	342, 1943,
	343, 1943,
	344, 1943,
	345, 1943,
	346, 1943,
	347, 1943,
	348, 1943,
	349, 1943,
	351, 1943,
	352, 1943,
	353, 1943,
	354, 1943,
	355, 1943,
	356, 1943,
	357, 1943,
	358, 1943,
	359, 1943,
	360, 1943,
	361, 1943,
	362, 1943,
	364, 1943,
	365, 1943,
	366, 1943,
	368, 1943,
	369, 1943,
	370, 1943,
	371, 1943,
	372, 1943,
	373, 1943,
	374, 1943,
	375, 1943,
	376, 1943,
	378, 1943,
	379, 1943,
	380, 1943,
	381, 1943,
	383, 1943,
	385, 1943,
	386, 1943,
	387, 1943,
	388, 1943,
	389, 1943,
	391, 1943,
	392, 1943,
	393, 1943,
	395, 1943,
	396, 1943,
	399, 1943,
	400, 1943,
	401, 1943,
	402, 1943,
	403, 1943,
	404, 1943,
	406, 1943,
	408, 1943,
	409, 1943,
	410, 1943,
	411, 1943,
	412, 1943,
	413, 1943,
	414, 1943,
	416, 1943,
	417, 1943,
	418, 1943,
	423, 1943,
	424, 1943,
	425, 1943,
	426, 1943,
	427, 1943,
	428, 1943,
	429, 1943,
	430, 1943,
	432, 1943,
	433, 1943,
	434, 1943,
	435, 1943,
	436, 1943,
	437, 1943,
	439, 1943,
	440, 1943,
	441, 1943,
	442, 1943,
	443, 1943,
	444, 1943,
	445, 1943,
	446, 1943,
	447, 1943,
	449, 1943,
	452, 1943,
	453, 1943,
	455, 1943,
	456, 1943,
	-2, 0,
	-1, 1307,
	149, 1848,
	382, 1848,
	434, 1848,
	453, 1848,
	-2, 0,
	-1, 1334,
	288, 608,
	339, 608,
	-2, 0,
	-1, 1355,
	1, 603,
	450, 603,
	452, 603,
	454, 603,
	-2, 0,
	-1, 1356,
	1, 622,
	450, 622,
	452, 622,
	454, 622,
	-2, 0,
	-1, 1357,
	1, 610,
	450, 610,
	452, 610,
	454, 610,
	-2, 0,
	-1, 1378,
	1, 1896,
	450, 1896,
	452, 1896,
	453, 1896,
	454, 1896,
	-2, 648,
	-1, 1379,
	1, 1846,
	450, 1846,
	452, 1846,
	453, 1846,
	454, 1846,
	-2, 649,
	-1, 1392,
	1, 905,
	454, 905,
	-2, 910,
	-1, 1397,
	133, 1018,
	221, 1018,
	252, 1018,
	-2, 976,
	-1, 1490,
	119, 980,
	133, 980,
	192, 980,
	221, 980,
	252, 980,
	262, 980,
	397, 980,
	-2, 1382,
	-1, 1543,
	452, 1515,
	-2, 0,
	-1, 1585,
	119, 980,
	133, 980,
	192, 980,
	221, 980,
	252, 980,
	262, 980,
	397, 980,
	-2, 1091,
	-1, 1640,
	451, 1213,
	-2, 1201,
	-1, 1679,
	1, 476,
	454, 476,
	-2, 910,
	-1, 1867,
	1, 605,
	450, 605,
	452, 605,
	454, 605,
	-2, 0,
	-1, 1868,
	1, 624,
	450, 624,
	452, 624,
	454, 624,
	-2, 0,
	-1, 1944,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	205, 0,
	206, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1262,
	-1, 1945,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	205, 0,
	206, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1263,
	-1, 1946,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	205, 0,
	206, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1264,
	-1, 1947,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	205, 0,
	206, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1265,
	-1, 1948,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	205, 0,
	206, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1266,
	-1, 1949,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	205, 0,
	206, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1267,
	-1, 1950,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	205, 0,
	206, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1268,
	-1, 1951,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	205, 0,
	206, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1269,
	-1, 1963,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	205, 0,
	206, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1281,
	-1, 1964,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	205, 0,
	206, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1282,
	-1, 1965,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	205, 0,
	206, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1283,
	-1, 1968,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	429, 0,
	437, 0,
	-2, 1288,
	-1, 1974,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	429, 0,
	437, 0,
	-2, 1292,
	-1, 1976,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	429, 0,
	437, 0,
	-2, 1300,
	-1, 1977,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	429, 0,
	437, 0,
	-2, 1301,
	-1, 1978,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	429, 0,
	437, 0,
	-2, 1302,
	-1, 1979,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	429, 0,
	437, 0,
	-2, 1303,
	-1, 2073,
	5, 1170,
	149, 1526,
	451, 1642,
	-2, 1633,
	-1, 2074,
	149, 1527,
	-2, 1900,
	-1, 2075,
	149, 1528,
	-2, 1770,
	-1, 2076,
	149, 1529,
	-2, 1695,
	-1, 2077,
	149, 1530,
	-2, 1730,
	-1, 2078,
	149, 1531,
	-2, 1768,
	-1, 2079,
	149, 1532,
	-2, 1839,
	-1, 2155,
	1, 1092,
	84, 1092,
	119, 1092,
	133, 1092,
	146, 1092,
	150, 1092,
	156, 1092,
	159, 1092,
	183, 1092,
	192, 1092,
	202, 1092,
	217, 1092,
	221, 1092,
	239, 1092,
	252, 1092,
	256, 1092,
	262, 1092,
	311, 1092,
	313, 1092,
	397, 1092,
	407, 1092,
	420, 1092,
	421, 1092,
	422, 1092,
	431, 1092,
	450, 1092,
	452, 1092,
	454, 1092,
	455, 1092,
	-2, 1091,
	-1, 2160,
	451, 1616,
	-2, 1628,
	-1, 2182,
	451, 1212,
	-2, 1202,
	-1, 2407,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	429, 0,
	437, 0,
	-2, 1290,
	-1, 2408,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	429, 0,
	437, 0,
	-2, 1294,
	-1, 2414,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	429, 0,
	437, 0,
	-2, 1296,
	-1, 2595,
	199, 910,
	285, 910,
	292, 910,
	431, 910,
	-2, 473,
	-1, 2670,
	452, 1585,
	455, 1585,
	-2, 1602,
	-1, 2684,
	274, 1004,
	-2, 818,
	-1, 2762,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	429, 0,
	437, 0,
	-2, 1298,
	-1, 2769,
	196, 0,
	198, 0,
	246, 0,
	-2, 1317,
	-1, 2832,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1346,
	-1, 2833,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1347,
	-1, 2834,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1348,
	-1, 2838,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1352,
	-1, 2839,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1353,
	-1, 2840,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1354,
	-1, 2883,
	451, 1617,
	-2, 1629,
	-1, 2966,
	453, 2046,
	-2, 953,
	-1, 3010,
	196, 0,
	198, 0,
	246, 0,
	-2, 1318,
	-1, 3013,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	429, 0,
	437, 0,
	-2, 1321,
	-1, 3014,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	429, 0,
	437, 0,
	-2, 1323,
	-1, 3158,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	429, 0,
	437, 0,
	-2, 1322,
	-1, 3159,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	429, 0,
	437, 0,
	-2, 1324,
	-1, 3169,
	196, 0,
	-2, 1355,
	-1, 3265,
	196, 0,
	-2, 1356,
	-1, 3377,
	41, 0,
	168, 0,
	220, 0,
	345, 0,
	429, 0,
	437, 0,
	-2, 1903,
}

const sqlPrivate = 57344

const sqlLast = 71148

var sqlAct = [...]int{

	885, 3376, 3460, 3222, 3112, 3199, 3386, 3349, 3450, 2310,
	2671, 3346, 3333, 3387, 2104, 3388, 3202, 1597, 3188, 2904,
	2996, 2319, 3225, 2800, 3375, 3269, 2311, 1001, 3127, 1931,
	814, 3149, 2957, 1154, 2952, 2905, 3073, 3230, 1991, 210,
	1610, 210, 210, 2211, 2693, 210, 210, 210, 210, 210,
	1405, 2612, 210, 2435, 2701, 2962, 805, 558, 1580, 3173,
	579, 2695, 2668, 1488, 2284, 2400, 1293, 2351, 2307, 1055,
	1147, 2556, 2433, 2147, 2287, 993, 2570, 2516, 210, 2543,
	1578, 2995, 579, 1339, 2361, 3045, 2342, 2532, 675, 2350,
	1808, 2344, 1552, 2320, 1798, 1036, 2213, 3270, 2148, 1724,
	1588, 2268, 1797, 2515, 2143, 2042, 1928, 1289, 1805, 1498,
	2396, 1733, 2855, 2004, 1166, 1516, 813, 139, 1924, 1758,
	2285, 1847, 1163, 1751, 842, 4, 1711, 1043, 2360, 1392,
	1709, 881, 1553, 2122, 2034, 3223, 2575, 1988, 2245, 2101,
	802, 2669, 1156, 2022, 1302, 1794, 2313, 2244, 1286, 1276,
	1826, 2150, 1032, 1222, 2354, 2203, 526, 1511, 2016, 907,
	1562, 580, 86, 988, 204, 203, 2130, 2005, 967, 2069,
	202, 581, 2112, 210, 210, 1479, 1406, 146, 542, 1793,
	575, 552, 1252, 1300, 1404, 1814, 147, 651, 1176, 2146,
	620, 1723, 510, 139, 841, 529, 37, 534, 990, 719,
	985, 804, 670, 537, 36, 34, 26, 24, 1391, 1410,
	22, 734, 1234, 32, 2872, 2431, 2312, 2873, 965, 1848,
	1828, 1579, 1418, 1419, 584, 587, 2757, 1828, 1040, 1828,
	1040, 3488, 809, 2019, 2121, 857, 2711, 3479, 3478, 884,
	2121, 2121, 3459, 809, 2593, 1765, 584, 587, 1421, 2114,
	3446, 2710, 1840, 3087, 2858, 2121, 3444, 1418, 1419, 3087,
	3408, 2263, 685, 2121, 3406, 1761, 3403, 2121, 1296, 3404,
	3400, 3397, 1019, 3401, 1765, 1420, 3373, 3372, 1611, 1765,
	1765, 982, 2316, 1421, 3329, 3371, 1418, 1419, 1840, 1451,
	1452, 1453, 1461, 1462, 1463, 3368, 840, 2020, 1840, 3367,
	3328, 3318, 1840, 2175, 3087, 1454, 3317, 971, 972, 3087,
	1420, 810, 1421, 2231, 3253, 1840, 1467, 790, 1440, 3311,
	3305, 2858, 1765, 3087, 968, 968, 789, 3303, 3267, 3251,
	3087, 2175, 1765, 3248, 3216, 1014, 3087, 1765, 1489, 1420,
	3215, 3208, 2113, 1765, 1765, 797, 3207, 1440, 3179, 3087,
	3160, 1765, 2171, 2175, 1437, 1426, 3139, 3109, 3103, 2723,
	2121, 2121, 3086, 3104, 3006, 3087, 178, 1185, 2021, 2018,
	3012, 2974, 2450, 2175, 2739, 178, 2968, 2451, 1765, 2739,
	1443, 1444, 1445, 1446, 2731, 1765, 1448, 1449, 1450, 2259,
	1426, 2878, 969, 2202, 2879, 2868, 2488, 2489, 2869, 2506,
	2507, 2508, 2861, 2793, 180, 2121, 1765, 1682, 1015, 1443,
	1444, 1445, 1446, 180, 2738, 3008, 999, 2739, 2723, 1426,
	996, 1448, 1449, 1450, 2294, 2121, 2399, 178, 1197, 2488,
	2489, 1764, 2506, 2507, 2508, 2730, 2434, 2529, 2731, 1441,
	2121, 2527, 2526, 1458, 2121, 2121, 1468, 2200, 3007, 179,
	1448, 1449, 1450, 1418, 1419, 1548, 76, 2503, 179, 172,
	2480, 2463, 2023, 2121, 2464, 180, 2452, 173, 172, 2121,
	1175, 1464, 2141, 1465, 1441, 1829, 173, 2140, 1702, 1421,
	1435, 1436, 1829, 2340, 1829, 1341, 1844, 2139, 148, 2138,
	2503, 2188, 2137, 2174, 2121, 1456, 2175, 148, 2712, 2168,
	1418, 1419, 2121, 1441, 2162, 2120, 1420, 1765, 2121, 178,
	179, 1843, 973, 178, 1844, 210, 2381, 2713, 1489, 970,
	172, 1466, 796, 795, 210, 794, 1421, 793, 173, 2494,
	792, 1442, 788, 787, 786, 785, 1455, 784, 783, 782,
	781, 1191, 2710, 780, 779, 210, 778, 180, 1447, 148,
	1015, 180, 210, 1420, 3062, 2113, 777, 717, 716, 715,
	714, 2017, 2494, 713, 712, 711, 1442, 710, 210, 1058,
	210, 210, 1159, 210, 1058, 210, 709, 1447, 1015, 708,
	707, 2509, 706, 210, 210, 2180, 1426, 1042, 3393, 705,
	1196, 1047, 179, 704, 703, 1442, 179, 702, 701, 700,
	208, 1179, 172, 699, 698, 697, 696, 695, 210, 694,
	173, 693, 1012, 2504, 2509, 692, 684, 1448, 1449, 1450,
	1459, 1836, 210, 683, 1159, 1159, 210, 210, 1827, 210,
	1904, 2315, 642, 1426, 3024, 148, 641, 600, 2060, 599,
	598, 210, 590, 589, 588, 565, 2504, 564, 563, 210,
	1431, 1429, 1430, 1422, 1423, 1424, 1425, 1427, 1428, 178,
	562, 546, 200, 210, 210, 210, 210, 210, 1159, 1159,
	1441, 199, 198, 1159, 116, 210, 1159, 210, 210, 2488,
	2489, 197, 1169, 1030, 196, 1431, 1429, 1430, 1422, 1423,
	1424, 1425, 1427, 1428, 178, 195, 812, 180, 194, 193,
	2876, 2488, 2489, 1190, 1457, 2505, 192, 1432, 1433, 1439,
	1438, 1434, 1460, 191, 1431, 1429, 1430, 1422, 1423, 1424,
	1425, 1427, 1428, 190, 1159, 189, 188, 3034, 187, 2740,
	3033, 186, 180, 1027, 185, 1297, 184, 183, 2505, 182,
	2503, 1150, 179, 210, 1178, 1173, 181, 584, 587, 2573,
	828, 1239, 172, 2457, 1177, 178, 2446, 2272, 1056, 210,
	173, 1519, 1442, 1167, 2163, 2154, 1707, 1518, 1051, 1581,
	1144, 1149, 2488, 2489, 210, 1595, 1519, 179, 1850, 1505,
	2058, 148, 1518, 2300, 1418, 1419, 1181, 172, 1522, 1290,
	139, 1417, 3374, 180, 2056, 173, 1235, 1235, 2054, 1305,
	2052, 1049, 1003, 1517, 3198, 3299, 3260, 1184, 1500, 1189,
	1421, 1195, 2494, 1280, 1283, 1303, 148, 2500, 2501, 2502,
	3256, 1362, 3140, 3066, 2499, 2497, 2498, 2490, 2491, 2492,
	2493, 2495, 2496, 3254, 2494, 810, 1173, 1420, 179, 1236,
	1152, 2488, 2489, 1397, 1849, 1440, 1398, 3135, 172, 3044,
	2500, 2501, 2502, 3043, 2488, 2489, 173, 2499, 2497, 2498,
	2490, 2491, 2492, 2493, 2495, 2496, 2488, 2489, 178, 3031,
	2734, 3030, 3029, 3028, 3022, 3021, 3020, 148, 1500, 3019,
	2939, 2893, 1429, 1430, 1422, 1423, 1424, 1425, 1427, 1428,
	2892, 2766, 1228, 1231, 1802, 1313, 2504, 2890, 2882, 2852,
	2851, 2850, 1316, 2777, 2773, 2494, 180, 1443, 1444, 1445,
	1446, 2568, 1703, 2246, 2523, 2514, 2487, 1426, 2504, 2484,
	1321, 2395, 2488, 2489, 2483, 2481, 2470, 2469, 2468, 2465,
	1396, 1422, 1423, 1424, 1425, 1427, 1428, 1335, 2462, 1501,
	2440, 1499, 981, 2439, 1309, 1403, 2432, 2341, 1448, 1449,
	1450, 179, 1395, 2155, 2027, 1417, 2301, 1487, 1416, 1390,
	1770, 172, 2549, 3486, 1768, 3458, 3457, 210, 3409, 173,
	1002, 2802, 3363, 1393, 2494, 3361, 3294, 3291, 3290, 3289,
	3285, 3279, 3252, 3247, 3246, 1994, 3194, 2494, 2505, 2504,
	148, 790, 1328, 210, 3171, 1559, 1550, 3145, 1399, 2494,
	789, 1441, 3144, 210, 1058, 210, 210, 210, 3125, 3122,
	2505, 2000, 810, 1159, 579, 210, 210, 1413, 1414, 579,
	210, 3116, 3061, 178, 1604, 210, 3042, 1521, 2988, 2985,
	2920, 2919, 1607, 2908, 2907, 2864, 2768, 1674, 1418, 1419,
	2724, 1677, 3134, 2687, 2658, 2637, 2615, 2614, 1569, 1589,
	1058, 2589, 2587, 2528, 2461, 2494, 2460, 2445, 2504, 1513,
	1514, 180, 2423, 2281, 1421, 883, 1418, 1419, 1556, 1557,
	1523, 2504, 1520, 1512, 1705, 1447, 1509, 2184, 2183, 2158,
	2135, 2505, 1676, 2119, 2050, 1483, 1852, 3272, 2059, 1594,
	1551, 1420, 1421, 1442, 1547, 1546, 1545, 1544, 1543, 2488,
	2489, 139, 2506, 2507, 2508, 1542, 179, 2499, 2497, 2498,
	2490, 2491, 2492, 2493, 2495, 2496, 172, 2299, 968, 1420,
	1541, 1540, 1539, 1537, 173, 1536, 1535, 1599, 1534, 2499,
	2497, 2498, 2490, 2491, 2492, 2493, 2495, 2496, 1601, 1533,
	1532, 3121, 1617, 2615, 818, 148, 1851, 1531, 1530, 1529,
	2505, 1528, 810, 1586, 1527, 1526, 1525, 828, 1502, 1679,
	2503, 828, 1484, 2505, 1482, 1477, 1698, 1026, 1017, 1142,
	1009, 1426, 3063, 3016, 1142, 1159, 210, 1642, 584, 587,
	1701, 1577, 1058, 584, 587, 1549, 1583, 1717, 2889, 1576,
	1575, 1573, 1572, 1598, 1606, 1571, 2871, 2867, 1574, 1673,
	2449, 2497, 2498, 2490, 2491, 2492, 2493, 2495, 2496, 2177,
	2136, 1608, 1431, 1429, 1430, 1422, 1423, 1424, 1425, 1427,
	1428, 210, 210, 999, 3183, 999, 3065, 996, 210, 996,
	2057, 2888, 2494, 1501, 2488, 2489, 1694, 1728, 210, 1708,
	2585, 1590, 1602, 1702, 2055, 3257, 995, 210, 2053, 210,
	2051, 210, 1480, 3197, 1702, 210, 1680, 3292, 3255, 2510,
	1046, 2696, 1044, 1748, 1040, 3138, 1750, 210, 1732, 1755,
	1031, 2498, 2490, 2491, 2492, 2493, 2495, 2496, 3231, 3105,
	2874, 1605, 2726, 2725, 2509, 2490, 2491, 2492, 2493, 2495,
	2496, 1532, 1786, 1581, 1037, 1532, 2640, 2490, 2491, 2492,
	2493, 2495, 2496, 1702, 2947, 1759, 1688, 1159, 210, 1159,
	1388, 1803, 1045, 1040, 1614, 1159, 2504, 1519, 210, 2019,
	210, 210, 2467, 1518, 2466, 1334, 1040, 2405, 2233, 1041,
	1159, 1159, 2918, 210, 1811, 1363, 1820, 1178, 210, 775,
	584, 587, 1507, 824, 2248, 579, 210, 1177, 210, 2673,
	210, 2672, 210, 1340, 210, 2492, 2493, 2495, 2496, 1848,
	3226, 1754, 210, 1341, 1763, 210, 1799, 210, 1693, 1692,
	2743, 1766, 1702, 1699, 2087, 3174, 210, 2652, 776, 1746,
	1038, 1853, 3461, 2020, 2312, 2804, 3394, 1039, 2455, 2035,
	1863, 980, 1789, 2182, 1538, 210, 1515, 1780, 2666, 1779,
	1790, 210, 1212, 1486, 3405, 3402, 1818, 2706, 2505, 2900,
	1712, 3343, 2953, 2348, 1713, 3310, 1778, 632, 3433, 2189,
	1325, 1058, 3434, 637, 3097, 3084, 2597, 1200, 2206, 1813,
	769, 1831, 1210, 839, 1833, 767, 1816, 1835, 3483, 2204,
	765, 1838, 1855, 1762, 3395, 762, 771, 3221, 2206, 1303,
	3217, 2933, 3081, 1037, 2021, 2018, 1893, 1911, 1908, 2204,
	2930, 2929, 2897, 2215, 1891, 2896, 1696, 1037, 2444, 810,
	2599, 1424, 1425, 1427, 1428, 1689, 2443, 2308, 808, 2442,
	2441, 2409, 1361, 2265, 2258, 1725, 753, 2255, 631, 1027,
	1845, 2236, 2170, 3082, 2586, 1046, 808, 1854, 2006, 2007,
	1714, 638, 1428, 1211, 1975, 803, 1058, 1394, 1174, 584,
	587, 2046, 1716, 1721, 2045, 1933, 2006, 2032, 1360, 2744,
	2500, 2501, 2502, 3155, 1902, 1876, 1040, 2499, 2497, 2498,
	2490, 2491, 2492, 2493, 2495, 2496, 1726, 1727, 1906, 1038,
	1903, 1264, 1859, 1617, 1617, 1909, 1039, 1045, 2023, 210,
	2218, 807, 2068, 1038, 2072, 2072, 2085, 1643, 2006, 1318,
	1039, 2105, 2107, 1722, 1323, 2196, 2111, 1718, 2235, 807,
	1046, 1712, 3309, 1905, 1245, 1713, 1244, 1846, 1642, 1642,
	1058, 210, 1910, 1907, 1243, 1007, 1242, 1697, 790, 1901,
	210, 790, 790, 210, 1223, 2639, 1058, 1920, 1861, 1862,
	1921, 1922, 759, 1359, 1142, 3093, 1590, 1990, 1206, 2159,
	1932, 2031, 1712, 1990, 997, 2161, 1713, 3365, 2225, 3204,
	1866, 809, 1045, 2044, 2224, 2178, 1401, 2910, 2048, 2049,
	1221, 1817, 1867, 2784, 630, 3077, 629, 2142, 3078, 809,
	2746, 2152, 2153, 1355, 828, 810, 1998, 2017, 2745, 1006,
	1142, 1996, 1333, 1319, 2002, 2787, 2378, 2252, 810, 2023,
	1719, 1714, 810, 2156, 2127, 633, 690, 1220, 3391, 2029,
	2496, 1025, 2167, 1716, 2649, 3080, 210, 1703, 2246, 1004,
	2703, 2397, 2398, 1868, 3425, 1040, 2217, 3083, 1703, 2246,
	2633, 1336, 2644, 2035, 1356, 2036, 2126, 1929, 1930, 1040,
	968, 3473, 1714, 2704, 2785, 1208, 1745, 1730, 1058, 3286,
	2080, 2096, 3154, 210, 1716, 1614, 1614, 2109, 3433, 640,
	639, 210, 1828, 1373, 1728, 2128, 139, 2169, 1718, 2117,
	2118, 2192, 210, 2132, 2133, 2172, 1387, 1703, 2246, 3326,
	1719, 2598, 1223, 2194, 2921, 210, 669, 3091, 1159, 2023,
	810, 1586, 2596, 1728, 1510, 1341, 806, 2234, 2703, 3424,
	2627, 210, 1058, 2583, 2205, 210, 210, 2931, 2296, 1718,
	2661, 2256, 1719, 1341, 806, 2195, 2179, 2997, 1900, 1358,
	2207, 1521, 1142, 3165, 1476, 2160, 2629, 3453, 2193, 3079,
	3392, 210, 3440, 210, 3354, 3296, 210, 1715, 2023, 999,
	2216, 2626, 2384, 996, 2187, 2459, 1703, 1700, 2026, 2631,
	2291, 210, 2282, 1263, 763, 2253, 1513, 1514, 210, 763,
	210, 1719, 210, 999, 764, 1324, 773, 996, 210, 763,
	772, 210, 2186, 210, 2190, 210, 2151, 210, 210, 1892,
	210, 1159, 1159, 1159, 2238, 1159, 809, 1890, 3120, 210,
	210, 2602, 210, 210, 2630, 2911, 2131, 2992, 2269, 1617,
	210, 2323, 1719, 3092, 3390, 915, 2267, 2210, 2266, 2219,
	2221, 3324, 2885, 3389, 210, 1020, 210, 2420, 3000, 210,
	1205, 210, 3432, 210, 2387, 3430, 1343, 2247, 2249, 2250,
	2251, 2373, 1710, 2374, 1642, 3423, 2362, 2201, 3205, 2418,
	3325, 210, 210, 210, 206, 210, 512, 513, 2336, 2337,
	530, 512, 530, 540, 545, 1150, 3151, 561, 3236, 2305,
	1370, 2227, 1719, 3124, 1320, 206, 1178, 2691, 210, 584,
	587, 1173, 2237, 2279, 2411, 691, 2270, 2230, 2347, 2303,
	1989, 2295, 1792, 679, 2332, 2254, 1558, 206, 1561, 2364,
	1005, 2269, 1757, 2269, 2372, 1018, 3474, 2366, 1715, 2367,
	139, 1865, 2334, 2318, 522, 1972, 1400, 760, 2262, 2338,
	1997, 2325, 1756, 748, 3451, 2363, 2365, 1829, 2382, 2386,
	2329, 1749, 2330, 2274, 2331, 2276, 2333, 1303, 517, 2339,
	1561, 1013, 1332, 2349, 509, 801, 2383, 2941, 1986, 1715,
	1752, 2375, 1408, 2376, 2415, 2377, 1371, 1173, 1173, 2389,
	1565, 1024, 2412, 2239, 1565, 2416, 2257, 3150, 2421, 1409,
	1984, 1142, 3040, 1726, 1727, 2437, 2438, 210, 2314, 2998,
	2314, 1614, 1729, 1690, 2841, 3210, 3468, 3209, 512, 512,
	2447, 1476, 3452, 1568, 2448, 2576, 206, 1568, 2392, 3192,
	1753, 3096, 3276, 995, 2394, 995, 1565, 2899, 3095, 2692,
	2558, 2610, 2129, 2606, 1687, 749, 1563, 2304, 2286, 2283,
	1812, 1801, 1173, 2385, 3454, 1800, 1372, 1566, 1774, 3297,
	2783, 1566, 1916, 3334, 1897, 1683, 1408, 2958, 3128, 1568,
	1407, 2280, 1970, 1266, 3193, 1973, 2866, 2617, 2616, 2123,
	2403, 1860, 2542, 1564, 2240, 2391, 1142, 2541, 1563, 2335,
	2410, 1357, 2166, 2165, 689, 3152, 1058, 2164, 2525, 807,
	2545, 1409, 2530, 1566, 682, 1980, 2293, 2537, 2538, 1251,
	1685, 3200, 2559, 1981, 2539, 210, 1982, 3281, 1249, 1987,
	1344, 3113, 1237, 210, 1969, 1564, 1686, 524, 2735, 1810,
	210, 2663, 3437, 210, 210, 1058, 3224, 810, 2417, 1238,
	3046, 2856, 2040, 3041, 1058, 2125, 3190, 2419, 2454, 2842,
	2124, 210, 2557, 1567, 1407, 2843, 1889, 1567, 2563, 3439,
	1142, 3467, 1917, 2518, 3407, 3337, 210, 3282, 2581, 803,
	1385, 3293, 2561, 1492, 1734, 2552, 1142, 1497, 3191, 2551,
	3094, 3170, 3039, 2592, 210, 210, 210, 750, 2554, 3201,
	210, 2935, 1738, 210, 2567, 2534, 2553, 2517, 2594, 1567,
	210, 210, 210, 210, 210, 3298, 2564, 2565, 2767, 1367,
	2547, 2600, 2572, 2548, 2571, 210, 210, 210, 2520, 2521,
	2522, 518, 2241, 2242, 210, 2580, 2531, 2603, 2604, 3338,
	2482, 3283, 1365, 2422, 1735, 2290, 210, 1159, 1354, 210,
	1352, 1350, 2546, 2618, 1348, 2621, 1058, 2560, 1346, 1971,
	2264, 2544, 2619, 1058, 2623, 2624, 2380, 2607, 210, 1983,
	1338, 210, 210, 1322, 1247, 748, 2232, 2577, 1985, 2590,
	2591, 210, 2185, 519, 1159, 210, 1596, 1159, 1159, 1159,
	1617, 2562, 2578, 2579, 210, 2536, 1593, 801, 1142, 751,
	210, 2643, 687, 688, 1386, 2676, 210, 1314, 210, 2595,
	1888, 1250, 680, 681, 2379, 210, 2650, 2369, 1899, 2601,
	1248, 520, 1739, 521, 3385, 1642, 1617, 1384, 1717, 523,
	1873, 1675, 1524, 2642, 2566, 1317, 1227, 752, 1159, 1159,
	999, 2039, 3331, 2574, 996, 3070, 210, 210, 2632, 2362,
	210, 2638, 1142, 1717, 2699, 999, 2956, 2698, 2362, 996,
	2659, 1642, 2916, 2708, 2648, 2645, 1366, 749, 761, 2654,
	1010, 2653, 210, 2914, 1058, 210, 210, 1058, 210, 679,
	2660, 2898, 1740, 1741, 999, 1759, 2646, 2238, 996, 1364,
	2647, 1736, 1759, 2690, 210, 1353, 1173, 1351, 1349, 2675,
	1021, 1347, 2674, 2309, 2680, 1345, 2298, 561, 2297, 2277,
	1842, 997, 1841, 997, 1839, 1837, 1789, 1337, 1834, 1737,
	1832, 1246, 2697, 206, 1830, 206, 206, 1821, 1164, 1771,
	206, 1769, 2634, 2635, 2705, 2636, 1760, 1058, 206, 1180,
	2737, 1747, 1744, 2714, 2584, 1731, 2751, 139, 1058, 1720,
	210, 2795, 2574, 2722, 2770, 2733, 2721, 2694, 3240, 2707,
	1603, 3434, 1614, 1204, 2655, 2656, 1411, 2657, 810, 1602,
	2716, 2717, 2718, 2401, 2719, 2720, 2741, 1226, 3357, 3147,
	2611, 206, 206, 977, 1164, 2752, 3142, 3141, 2748, 766,
	768, 1706, 1202, 3242, 2753, 2206, 206, 2749, 1614, 2779,
	2780, 2781, 2206, 1742, 1262, 2805, 2204, 978, 2755, 750,
	2223, 2967, 2206, 2222, 1728, 2651, 1382, 1383, 206, 206,
	206, 206, 1164, 2220, 1869, 1871, 3288, 3262, 3047, 2853,
	561, 2243, 206, 206, 2226, 2775, 1418, 1419, 1617, 1418,
	1419, 1415, 2261, 210, 1919, 2402, 525, 2801, 1173, 1412,
	2260, 2794, 2681, 2229, 2228, 2683, 2684, 2685, 210, 3449,
	2806, 3330, 1421, 1167, 1058, 3300, 1056, 591, 1743, 2810,
	2945, 2807, 2940, 1642, 2881, 2808, 2786, 2788, 2789, 2818,
	2875, 2317, 2110, 2845, 210, 2820, 1678, 1617, 1617, 1420,
	979, 1609, 1420, 536, 2582, 3466, 2488, 2489, 206, 1418,
	1419, 2894, 3302, 1617, 1617, 1489, 2728, 2729, 2198, 2197,
	2846, 751, 2043, 2887, 206, 1327, 2870, 2790, 2269, 995,
	2198, 1326, 1642, 1642, 2857, 2588, 2792, 2199, 2047, 545,
	210, 2041, 2862, 2863, 1617, 139, 2014, 2798, 1642, 1642,
	2859, 2860, 2922, 995, 2854, 1369, 3017, 2886, 1368, 752,
	2782, 1487, 1485, 3475, 3273, 3184, 2877, 3182, 3115, 3064,
	2991, 2984, 2973, 2932, 210, 210, 210, 2951, 2938, 1642,
	2937, 2936, 2913, 2715, 2688, 2686, 2371, 2088, 2370, 2327,
	2302, 1058, 210, 2278, 2001, 2891, 1159, 2926, 1887, 1886,
	1885, 1824, 1823, 1822, 1804, 1782, 1781, 1777, 1776, 2902,
	1775, 210, 1773, 1772, 1402, 1381, 1142, 1380, 1275, 2969,
	1614, 1274, 1273, 1272, 210, 210, 1159, 1159, 1159, 2960,
	210, 210, 210, 1271, 1270, 210, 210, 1269, 1268, 210,
	210, 2927, 2928, 2949, 1267, 210, 2944, 1265, 1260, 2963,
	1259, 1929, 2811, 1258, 2323, 1142, 2959, 2964, 1058, 1257,
	2238, 1256, 1219, 2883, 1142, 1218, 1217, 1929, 2821, 1614,
	1614, 1216, 2915, 2948, 2917, 592, 593, 999, 999, 1215,
	1214, 996, 996, 2362, 2934, 1614, 1614, 2950, 828, 3015,
	1213, 1207, 2961, 1201, 2884, 2954, 2965, 1199, 2849, 2971,
	1198, 828, 1023, 210, 2970, 1022, 952, 862, 1681, 3011,
	774, 2976, 2534, 624, 758, 2975, 1614, 3203, 2981, 2982,
	1999, 2983, 3002, 1375, 2990, 74, 2987, 2989, 1209, 611,
	68, 2994, 512, 2912, 2999, 3342, 746, 2625, 1872, 1492,
	1342, 1874, 2550, 2986, 2134, 3323, 1789, 3025, 2458, 3268,
	2980, 3164, 2038, 206, 1506, 206, 70, 850, 206, 935,
	3071, 2901, 3003, 595, 594, 210, 1142, 2353, 1180, 2352,
	1164, 206, 817, 1142, 1061, 1058, 1691, 1058, 856, 206,
	1180, 530, 3052, 1704, 206, 1180, 2092, 2181, 2071, 1613,
	561, 859, 1615, 1617, 861, 860, 3038, 210, 210, 210,
	1616, 1508, 858, 1612, 2292, 2321, 1254, 735, 736, 210,
	1695, 1995, 2033, 596, 597, 210, 2453, 210, 1503, 830,
	210, 210, 210, 852, 2030, 1016, 3090, 3089, 1642, 829,
	210, 210, 1159, 3055, 1058, 2555, 1159, 3100, 3101, 2702,
	3067, 3068, 2880, 3051, 3056, 3049, 3050, 999, 3054, 3133,
	1915, 996, 2393, 1912, 210, 2571, 3060, 1058, 3098, 3048,
	1159, 627, 2485, 2015, 1008, 2093, 3069, 3053, 3099, 2086,
	2082, 3117, 3088, 1389, 1478, 2322, 1048, 833, 1993, 3057,
	1494, 2427, 2569, 2709, 1142, 2176, 1923, 1142, 1791, 210,
	976, 975, 974, 3130, 2977, 2978, 2979, 997, 1058, 3348,
	3345, 3107, 3111, 1684, 3106, 3143, 3146, 2191, 1470, 3118,
	2677, 846, 1172, 2535, 2736, 1224, 3287, 3132, 1469, 770,
	3129, 997, 3278, 2699, 1035, 1058, 3137, 1034, 1033, 2609,
	3131, 3472, 799, 2909, 748, 177, 174, 176, 3110, 175,
	2924, 206, 2662, 90, 35, 17, 115, 1142, 114, 113,
	112, 111, 110, 109, 108, 107, 801, 106, 1142, 105,
	104, 3126, 3176, 1058, 103, 1614, 3059, 3153, 102, 3156,
	101, 210, 100, 210, 99, 1058, 210, 98, 97, 96,
	95, 94, 93, 3172, 210, 92, 206, 206, 91, 557,
	554, 3161, 800, 206, 999, 50, 49, 89, 996, 88,
	16, 1789, 999, 1809, 3187, 210, 996, 33, 14, 3177,
	3178, 54, 206, 3180, 206, 999, 206, 210, 55, 996,
	512, 13, 3181, 3206, 3186, 210, 749, 29, 3228, 30,
	1159, 80, 1825, 2088, 2088, 210, 3220, 79, 3185, 28,
	15, 27, 3233, 25, 11, 3235, 8, 7, 566, 10,
	1570, 12, 3241, 144, 3114, 210, 210, 143, 73, 3119,
	142, 72, 3218, 3238, 3249, 3250, 141, 1617, 140, 71,
	23, 9, 136, 561, 1142, 210, 3239, 3244, 3229, 3227,
	995, 210, 3136, 206, 2946, 1164, 206, 1056, 2963, 67,
	3237, 210, 138, 3243, 137, 995, 64, 135, 561, 134,
	3108, 65, 1642, 206, 133, 132, 66, 3284, 131, 3275,
	206, 206, 3266, 206, 3162, 206, 3232, 206, 2699, 206,
	21, 3261, 1617, 3274, 995, 5, 53, 1894, 6, 3148,
	1895, 2742, 1896, 3295, 2088, 2088, 2088, 210, 1159, 83,
	84, 206, 572, 210, 31, 62, 61, 1159, 1159, 3213,
	3214, 60, 3162, 1159, 3271, 20, 210, 1642, 210, 52,
	545, 19, 3245, 3259, 1932, 3316, 561, 3301, 750, 3304,
	168, 3307, 3308, 3321, 167, 3322, 166, 3327, 165, 160,
	210, 159, 164, 162, 161, 3320, 210, 210, 3339, 1058,
	163, 1142, 158, 130, 3312, 170, 1617, 210, 3313, 169,
	156, 152, 151, 3340, 3358, 155, 3351, 157, 154, 3355,
	3347, 3350, 153, 3314, 3315, 150, 171, 129, 3344, 3319,
	3360, 3369, 3362, 3352, 574, 3232, 1173, 57, 128, 127,
	210, 1642, 2092, 2092, 3370, 126, 125, 3364, 3366, 1614,
	124, 56, 18, 2, 1, 3396, 0, 0, 0, 0,
	3381, 3382, 0, 0, 3384, 3383, 0, 0, 1142, 0,
	0, 0, 3410, 2424, 2425, 3412, 210, 3414, 798, 3398,
	751, 0, 0, 3419, 0, 3420, 3212, 0, 0, 3422,
	0, 3413, 3411, 3415, 0, 0, 210, 3416, 2488, 2489,
	0, 2506, 2507, 2508, 1614, 0, 0, 0, 0, 0,
	0, 0, 3431, 3429, 3428, 0, 0, 2772, 752, 2323,
	210, 3435, 3438, 3436, 512, 0, 3443, 0, 3445, 568,
	0, 3442, 3347, 0, 3448, 3350, 3447, 3441, 0, 206,
	0, 0, 0, 2092, 2092, 2092, 573, 0, 0, 0,
	0, 0, 3456, 3455, 0, 0, 512, 0, 3463, 2503,
	0, 3465, 1560, 206, 0, 512, 0, 0, 206, 0,
	0, 3462, 3469, 3464, 2511, 2512, 2513, 3476, 1614, 3477,
	0, 0, 3470, 3471, 0, 1142, 570, 1142, 1932, 0,
	3480, 3481, 3482, 3484, 3485, 0, 0, 0, 0, 3417,
	3418, 0, 3489, 3421, 0, 0, 0, 3084, 0, 0,
	0, 3487, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 567, 3359, 0, 0, 0, 0, 0,
	0, 2494, 0, 0, 3081, 0, 0, 3074, 0, 0,
	0, 0, 0, 0, 1142, 0, 0, 0, 0, 0,
	3072, 530, 0, 0, 0, 0, 3076, 0, 997, 0,
	0, 571, 0, 0, 0, 2088, 2088, 1142, 0, 0,
	0, 0, 569, 997, 0, 3082, 0, 0, 0, 0,
	0, 0, 0, 2509, 0, 0, 0, 0, 2214, 0,
	0, 0, 0, 0, 0, 0, 206, 0, 0, 0,
	0, 0, 997, 0, 0, 3075, 0, 206, 1142, 0,
	0, 0, 816, 0, 0, 2504, 0, 995, 995, 0,
	206, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1142, 206, 0, 0, 0,
	206, 2271, 0, 0, 0, 2088, 2088, 2088, 2088, 2088,
	2088, 2088, 2088, 2088, 2088, 2088, 2088, 2088, 2088, 2088,
	2088, 2088, 2088, 2088, 0, 2088, 206, 0, 1180, 0,
	0, 206, 0, 1142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1142, 1809, 0, 0, 0,
	0, 0, 0, 2214, 0, 512, 0, 2326, 0, 0,
	0, 0, 0, 206, 0, 0, 206, 2505, 206, 0,
	206, 0, 206, 206, 0, 1164, 828, 3077, 0, 0,
	3078, 0, 0, 0, 2345, 679, 0, 2214, 2214, 0,
	0, 0, 0, 0, 0, 206, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1180,
	0, 1180, 0, 0, 1164, 0, 1164, 3080, 1164, 0,
	0, 0, 0, 0, 2092, 2092, 0, 0, 0, 3083,
	0, 0, 0, 0, 0, 0, 206, 206, 206, 0,
	206, 0, 1418, 1419, 0, 0, 0, 995, 0, 0,
	0, 0, 0, 0, 0, 2763, 2764, 0, 0, 0,
	0, 0, 0, 206, 0, 0, 0, 0, 1421, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2500,
	2501, 2502, 0, 0, 0, 0, 2499, 2497, 2498, 2490,
	2491, 2492, 2493, 2495, 2496, 1420, 0, 0, 0, 0,
	0, 0, 0, 1440, 2092, 2092, 2092, 2092, 2092, 2092,
	2092, 2092, 2092, 2092, 2092, 2092, 2092, 2092, 2092, 2092,
	2092, 2092, 2092, 0, 2092, 0, 0, 0, 0, 0,
	0, 3079, 0, 0, 0, 2822, 2823, 2824, 2825, 2826,
	2827, 2828, 2829, 2830, 2831, 2832, 2833, 2834, 2835, 2836,
	2837, 2838, 2839, 2840, 0, 2844, 0, 0, 0, 1142,
	0, 0, 1180, 828, 0, 1443, 1444, 1445, 1446, 0,
	0, 0, 0, 0, 0, 1426, 2488, 2489, 0, 2506,
	2507, 2508, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 995, 2771, 0, 0, 0, 0,
	0, 0, 995, 1418, 1419, 0, 1448, 1449, 1450, 0,
	0, 0, 0, 0, 0, 995, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1421,
	0, 0, 0, 0, 0, 0, 0, 2503, 0, 0,
	0, 0, 0, 0, 0, 997, 997, 0, 0, 0,
	206, 0, 0, 0, 0, 0, 1420, 0, 0, 1441,
	0, 0, 0, 0, 0, 206, 0, 0, 0, 0,
	512, 0, 0, 0, 0, 0, 0, 0, 512, 816,
	0, 0, 0, 816, 0, 512, 0, 0, 512, 512,
	0, 0, 0, 0, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1180, 0, 0, 2494,
	0, 0, 0, 0, 0, 1182, 0, 1186, 0, 1192,
	0, 1180, 0, 0, 1418, 1419, 0, 1451, 1452, 1453,
	1461, 1462, 1463, 1447, 0, 0, 1426, 0, 0, 2214,
	2214, 206, 0, 1454, 0, 2214, 0, 0, 2613, 0,
	1421, 1442, 0, 0, 1467, 2214, 2613, 2214, 2613, 2613,
	0, 2509, 0, 0, 0, 0, 0, 1448, 1449, 1450,
	206, 206, 206, 0, 0, 0, 0, 1420, 0, 0,
	0, 0, 0, 0, 0, 1440, 0, 0, 0, 0,
	0, 206, 1437, 2504, 1164, 0, 0, 0, 0, 0,
	0, 0, 0, 1312, 0, 0, 0, 0, 0, 0,
	1315, 0, 0, 2665, 0, 997, 2667, 2670, 0, 0,
	1441, 0, 0, 0, 0, 0, 206, 0, 0, 0,
	206, 0, 0, 0, 0, 0, 0, 0, 0, 206,
	0, 0, 0, 0, 0, 1164, 0, 1443, 1444, 1445,
	1446, 2214, 0, 512, 2088, 0, 0, 1426, 0, 0,
	2214, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1431, 1429, 1430, 1422, 1423, 1424, 1425, 1427, 1428, 0,
	0, 1458, 0, 0, 1468, 2505, 0, 0, 1448, 1449,
	1450, 206, 1809, 0, 0, 1809, 0, 2088, 0, 1418,
	1419, 0, 1451, 1452, 1453, 1461, 1462, 1463, 0, 1464,
	0, 1465, 1442, 0, 0, 0, 0, 2747, 1435, 1436,
	1164, 206, 0, 206, 0, 1421, 0, 0, 0, 1467,
	0, 0, 0, 1456, 0, 0, 0, 0, 0, 206,
	0, 1441, 1471, 1472, 1473, 1474, 1475, 0, 0, 0,
	671, 0, 1420, 0, 0, 0, 0, 0, 0, 1466,
	1440, 0, 997, 0, 0, 0, 0, 1437, 0, 0,
	997, 0, 1491, 0, 1455, 58, 0, 673, 1504, 0,
	0, 0, 0, 997, 0, 2088, 0, 59, 0, 0,
	0, 0, 0, 0, 0, 2803, 0, 2500, 2501, 2502,
	0, 63, 0, 0, 2499, 2497, 2498, 2490, 2491, 2492,
	2493, 2495, 2496, 0, 0, 1447, 0, 0, 0, 0,
	0, 0, 1443, 1444, 1445, 1446, 0, 0, 0, 0,
	0, 69, 1426, 1442, 1422, 1423, 1424, 1425, 1427, 1428,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2092, 0, 0, 1458, 0, 1459, 1468,
	0, 75, 0, 1448, 1449, 1450, 0, 0, 0, 0,
	85, 0, 0, 0, 76, 0, 0, 206, 206, 0,
	0, 0, 0, 0, 3169, 0, 0, 0, 512, 0,
	0, 0, 0, 1435, 1436, 0, 2092, 1554, 1554, 1554,
	0, 0, 0, 512, 0, 0, 0, 58, 1456, 0,
	0, 0, 0, 0, 0, 0, 1441, 0, 77, 59,
	0, 0, 0, 0, 0, 0, 0, 3195, 0, 1180,
	0, 0, 0, 63, 0, 0, 0, 0, 0, 0,
	0, 0, 1457, 0, 0, 1432, 1433, 1439, 1438, 1434,
	1460, 0, 1431, 1429, 1430, 1422, 1423, 1424, 1425, 1427,
	1428, 916, 0, 69, 0, 2476, 816, 0, 2477, 0,
	0, 0, 0, 0, 0, 561, 0, 0, 0, 0,
	0, 0, 0, 0, 2092, 0, 0, 0, 0, 0,
	1447, 0, 0, 75, 0, 0, 0, 0, 0, 0,
	207, 0, 85, 0, 0, 0, 76, 0, 1442, 2942,
	206, 206, 0, 0, 0, 3265, 0, 0, 0, 0,
	0, 207, 0, 78, 0, 0, 0, 206, 0, 0,
	0, 0, 0, 1459, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 0, 2214, 206, 0, 0,
	77, 0, 0, 0, 0, 145, 81, 0, 82, 2345,
	2345, 0, 0, 0, 0, 679, 679, 2214, 0, 0,
	1809, 1809, 0, 0, 679, 2214, 0, 178, 0, 0,
	206, 0, 0, 0, 0, 0, 0, 0, 0, 674,
	0, 0, 116, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 661, 180, 0, 1457, 0, 0,
	1432, 1433, 1439, 1438, 1434, 1460, 0, 1431, 1429, 1430,
	1422, 1423, 1424, 1425, 1427, 1428, 0, 643, 3026, 117,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 149, 0, 0, 78, 0, 0, 0, 0,
	179, 0, 0, 0, 0, 0, 0, 0, 644, 0,
	172, 0, 0, 0, 0, 1418, 1419, 645, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 145, 81, 0,
	82, 0, 646, 0, 206, 0, 0, 0, 0, 672,
	1180, 1421, 206, 0, 0, 0, 0, 0, 666, 178,
	0, 0, 0, 0, 0, 206, 0, 0, 0, 0,
	0, 674, 0, 647, 116, 0, 0, 0, 1420, 0,
	0, 0, 2214, 2214, 2214, 0, 0, 0, 0, 0,
	648, 0, 0, 0, 1180, 0, 0, 180, 0, 0,
	2214, 0, 2613, 0, 0, 1180, 1180, 206, 0, 0,
	649, 0, 0, 650, 0, 206, 206, 0, 0, 0,
	0, 117, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 149, 0, 0, 0, 0, 3123,
	665, 0, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 172, 0, 0, 0, 0, 0, 1426, 0,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1180, 0, 0, 211, 0, 0,
	1913, 148, 1918, 0, 0, 0, 0, 0, 1925, 1448,
	1449, 1450, 0, 0, 0, 1934, 1935, 1936, 1937, 1938,
	1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948,
	1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958,
	1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968,
	0, 1974, 652, 1976, 1977, 1978, 1979, 578, 0, 0,
	0, 0, 1441, 0, 0, 0, 0, 0, 669, 653,
	0, 0, 0, 2003, 0, 0, 2214, 0, 2613, 578,
	0, 3189, 0, 0, 0, 0, 0, 0, 1491, 206,
	0, 0, 2028, 0, 0, 0, 668, 0, 0, 0,
	0, 0, 0, 654, 0, 0, 655, 0, 0, 0,
	561, 0, 663, 0, 0, 0, 0, 0, 0, 656,
	0, 0, 2670, 2061, 2062, 2063, 2064, 2065, 2066, 2067,
	206, 0, 0, 0, 2084, 0, 2095, 2097, 2102, 0,
	1180, 0, 0, 0, 0, 0, 0, 0, 657, 664,
	0, 0, 0, 0, 1442, 58, 0, 0, 658, 0,
	206, 206, 0, 0, 0, 0, 0, 59, 0, 0,
	660, 0, 0, 0, 0, 659, 0, 0, 0, 0,
	2803, 63, 0, 0, 0, 0, 512, 667, 0, 0,
	0, 0, 0, 0, 0, 0, 3189, 0, 662, 207,
	1063, 207, 207, 1063, 0, 1063, 207, 0, 0, 0,
	0, 69, 0, 0, 207, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 206, 0, 0, 0, 0, 0, 2613, 0,
	85, 0, 0, 0, 76, 1063, 1063, 207, 207, 0,
	0, 1180, 0, 1180, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 0, 0, 1430, 1422, 1423, 1424, 1425,
	1427, 1428, 0, 0, 0, 3335, 0, 0, 0, 0,
	0, 1180, 206, 0, 207, 207, 207, 207, 77, 1063,
	1063, 0, 206, 0, 1063, 0, 0, 1063, 207, 207,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2803, 0, 0, 0, 0,
	1418, 1419, 0, 1451, 1452, 1453, 1461, 1462, 1463, 0,
	0, 0, 0, 0, 0, 1063, 0, 0, 0, 1454,
	0, 2273, 0, 2275, 0, 0, 1421, 0, 0, 0,
	1467, 2214, 0, 0, 207, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2173, 0, 0, 0,
	207, 3189, 0, 1420, 0, 0, 0, 0, 0, 0,
	0, 1440, 0, 78, 0, 0, 0, 0, 1437, 0,
	0, 0, 0, 0, 0, 1180, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 145, 81, 0, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 0, 0,
	0, 0, 0, 1443, 1444, 1445, 1446, 0, 0, 674,
	0, 0, 116, 1426, 0, 0, 0, 0, 2488, 2489,
	0, 2506, 2507, 2508, 0, 0, 0, 0, 0, 0,
	0, 0, 1418, 1419, 0, 180, 0, 1458, 0, 0,
	1468, 0, 0, 0, 1448, 1449, 1450, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1421, 117,
	0, 0, 0, 0, 0, 1464, 0, 1465, 0, 0,
	0, 0, 149, 0, 1435, 1436, 0, 0, 0, 2503,
	179, 0, 0, 0, 0, 1420, 0, 0, 0, 1456,
	172, 0, 0, 1440, 0, 0, 0, 1441, 173, 0,
	0, 0, 2407, 2408, 0, 0, 1059, 0, 2414, 1160,
	0, 1059, 0, 0, 0, 1466, 0, 0, 0, 148,
	0, 0, 0, 0, 0, 0, 0, 2428, 2429, 0,
	1455, 0, 0, 2028, 0, 0, 0, 0, 0, 2761,
	0, 0, 2436, 0, 0, 0, 0, 0, 0, 0,
	0, 2494, 0, 0, 0, 1443, 1444, 1445, 1446, 0,
	0, 1160, 1160, 0, 207, 1426, 1418, 1419, 2456, 0,
	0, 1447, 0, 0, 0, 1063, 0, 207, 207, 0,
	0, 0, 0, 2471, 1063, 207, 0, 0, 0, 1442,
	207, 0, 1421, 0, 0, 0, 1448, 1449, 1450, 0,
	0, 0, 0, 2509, 0, 1160, 1160, 0, 0, 0,
	1160, 0, 0, 1160, 1459, 0, 0, 0, 0, 1420,
	0, 1063, 0, 0, 0, 0, 0, 1440, 0, 0,
	0, 2102, 2102, 2102, 0, 2504, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1554, 0, 0, 1441,
	0, 0, 0, 0, 2540, 0, 0, 0, 0, 0,
	0, 1160, 0, 0, 0, 2488, 2489, 0, 2506, 2507,
	2508, 0, 0, 2760, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 991, 0, 0, 1443,
	1444, 1445, 1446, 0, 0, 0, 0, 0, 1457, 1426,
	0, 1432, 1433, 1439, 1438, 1434, 1460, 0, 1431, 1429,
	1430, 1422, 1423, 1424, 1425, 1427, 1428, 0, 0, 0,
	816, 2024, 0, 1447, 2025, 201, 2503, 2505, 0, 0,
	1448, 1449, 1450, 816, 0, 0, 0, 0, 0, 0,
	0, 1442, 0, 0, 0, 0, 1063, 207, 1418, 1419,
	0, 0, 0, 1063, 1461, 1462, 1463, 0, 2628, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1421, 0, 0, 0, 1467, 0,
	0, 0, 0, 1441, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 207, 0, 0, 0, 0, 2494, 207,
	0, 1420, 0, 0, 0, 0, 0, 0, 0, 1440,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 0,
	207, 0, 207, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2500,
	2501, 2502, 0, 0, 0, 2700, 2499, 2497, 2498, 2490,
	2491, 2492, 2493, 2495, 2496, 0, 0, 1447, 0, 0,
	1431, 1429, 1430, 1422, 1423, 1424, 1425, 1427, 1428, 0,
	0, 1443, 1444, 1445, 1446, 1442, 0, 0, 1063, 0,
	1063, 1426, 2504, 0, 0, 0, 1063, 0, 0, 207,
	0, 0, 207, 0, 0, 0, 0, 0, 0, 0,
	0, 1063, 1063, 0, 0, 1458, 0, 0, 1468, 207,
	1418, 1419, 1448, 1449, 1450, 0, 207, 207, 0, 207,
	0, 207, 0, 207, 0, 207, 0, 0, 2754, 0,
	0, 0, 1925, 0, 0, 0, 1421, 0, 2758, 2759,
	0, 1059, 2762, 0, 0, 0, 2765, 207, 0, 0,
	1160, 578, 0, 0, 0, 2769, 578, 1456, 0, 0,
	0, 0, 0, 1420, 2776, 1441, 0, 2540, 0, 0,
	0, 1440, 0, 0, 2505, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1059, 2796, 0,
	0, 0, 1063, 0, 1431, 1429, 1430, 1422, 1423, 1424,
	1425, 1427, 1428, 0, 0, 0, 0, 2812, 2813, 0,
	2814, 2815, 2816, 0, 0, 2817, 0, 2413, 0, 2819,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1443, 1444, 1445, 1446, 0, 0, 1447,
	0, 0, 0, 1426, 0, 0, 0, 0, 0, 0,
	2847, 2848, 0, 0, 0, 0, 0, 1442, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1448, 1449, 1450, 1063, 2865, 0,
	0, 882, 1459, 0, 0, 0, 2500, 2501, 2502, 0,
	0, 1418, 1419, 2499, 2497, 2498, 2490, 2491, 2492, 2493,
	2495, 2496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1160, 0, 0, 0, 0, 1421, 0, 1059,
	205, 0, 0, 0, 0, 0, 0, 1441, 0, 0,
	0, 0, 2895, 0, 0, 0, 0, 0, 0, 0,
	0, 585, 0, 0, 1420, 0, 0, 2903, 2906, 0,
	0, 1063, 1440, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 585, 207, 0, 1457, 1063, 0, 0,
	0, 2923, 0, 0, 1460, 0, 1431, 1429, 1430, 1422,
	1423, 1424, 1425, 1427, 1428, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2406, 0,
	0, 1447, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1443, 1444, 1445, 1446, 0, 1442,
	0, 0, 0, 0, 1426, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1554, 0, 0, 0,
	0, 0, 0, 0, 1160, 2972, 1160, 0, 0, 0,
	0, 0, 1160, 0, 1053, 1448, 1449, 1450, 0, 0,
	0, 1171, 998, 0, 0, 0, 0, 1160, 1160, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1063,
	0, 0, 578, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 3004, 3005, 0, 0, 0, 0, 3009,
	3010, 0, 0, 207, 3013, 3014, 0, 0, 1441, 0,
	0, 3018, 0, 0, 0, 0, 207, 0, 0, 1063,
	0, 0, 0, 0, 0, 0, 0, 1255, 0, 0,
	3023, 0, 207, 1063, 0, 0, 207, 3027, 1431, 1429,
	1430, 1422, 1423, 1424, 1425, 1427, 1428, 0, 0, 1279,
	1279, 1279, 1171, 0, 0, 0, 0, 0, 1059, 0,
	0, 0, 207, 1310, 1311, 0, 0, 207, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1447, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	1442, 0, 207, 0, 207, 0, 207, 0, 207, 207,
	0, 0, 1063, 1063, 1063, 0, 1063, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1374,
	0, 207, 0, 0, 0, 0, 0, 0, 0, 0,
	2906, 0, 0, 1059, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 207, 207, 0, 207, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1059, 2906, 1431,
	1429, 1430, 1422, 1423, 1424, 1425, 1427, 1428, 0, 0,
	0, 0, 0, 1059, 0, 0, 0, 0, 0, 3157,
	3158, 3159, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3167, 3168, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3175,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 58, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 59,
	2906, 0, 0, 0, 0, 0, 0, 0, 3211, 0,
	0, 0, 0, 63, 0, 0, 0, 0, 816, 0,
	0, 0, 0, 0, 0, 1059, 0, 0, 0, 205,
	0, 205, 205, 0, 0, 2906, 205, 0, 2906, 0,
	0, 0, 0, 69, 585, 0, 0, 0, 0, 0,
	0, 0, 851, 87, 0, 0, 0, 2906, 2906, 1591,
	0, 0, 0, 0, 0, 1160, 0, 1063, 0, 0,
	0, 0, 1600, 75, 0, 0, 0, 0, 0, 1059,
	0, 0, 85, 0, 0, 0, 76, 205, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 0, 0, 0, 1063, 3277, 0, 0,
	3280, 0, 0, 0, 0, 1063, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 205, 205, 205, 0, 87,
	77, 0, 0, 0, 0, 0, 0, 0, 205, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 1160, 1160,
	1160, 0, 1160, 0, 0, 0, 0, 0, 0, 0,
	0, 886, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 207, 207, 0,
	0, 0, 791, 0, 0, 207, 0, 0, 0, 0,
	0, 811, 0, 0, 205, 816, 0, 207, 1063, 0,
	0, 0, 0, 0, 0, 0, 0, 1063, 0, 0,
	205, 0, 0, 0, 1063, 0, 0, 0, 0, 0,
	0, 0, 0, 986, 0, 78, 0, 3380, 3380, 3380,
	0, 0, 207, 0, 0, 1063, 207, 0, 1063, 1063,
	1063, 0, 0, 0, 0, 207, 3399, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 145, 81, 0,
	82, 0, 0, 0, 2906, 0, 2906, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1784, 0, 178,
	3380, 0, 0, 0, 1796, 0, 0, 0, 0, 1063,
	1063, 674, 0, 0, 116, 0, 0, 207, 0, 0,
	0, 0, 0, 1255, 0, 1815, 0, 1815, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 180, 0, 0,
	0, 0, 0, 0, 0, 1063, 0, 207, 1063, 207,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 0, 0, 207, 0, 0, 0, 0,
	0, 0, 3380, 0, 149, 0, 0, 0, 0, 0,
	0, 0, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 172, 0, 1796, 601, 0, 1857, 0, 0,
	173, 0, 0, 0, 0, 0, 0, 0, 1063, 0,
	0, 0, 0, 0, 1870, 0, 0, 0, 602, 1063,
	0, 1306, 1877, 0, 1879, 0, 1881, 0, 1883, 0,
	1884, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1059, 0, 0, 0, 0, 0, 603,
	622, 0, 1898, 0, 0, 0, 0, 0, 0, 1584,
	0, 998, 0, 0, 205, 0, 0, 0, 0, 0,
	604, 0, 0, 605, 0, 0, 0, 205, 1584, 0,
	0, 0, 1059, 0, 0, 585, 0, 0, 0, 628,
	585, 1059, 0, 0, 0, 606, 0, 0, 0, 0,
	0, 0, 0, 0, 626, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1063, 0, 0, 0, 0,
	0, 608, 0, 0, 609, 632, 0, 0, 0, 635,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1160, 0, 0, 0, 0, 0,
	0, 0, 0, 1059, 0, 0, 0, 0, 0, 0,
	1059, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 631, 0, 0, 0,
	0, 1160, 0, 612, 1160, 1160, 1160, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 207, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 585, 0, 0,
	0, 0, 1063, 207, 610, 0, 87, 1063, 87, 0,
	87, 0, 0, 613, 0, 0, 0, 0, 0, 2157,
	0, 0, 0, 0, 0, 1160, 1160, 0, 0, 0,
	614, 0, 0, 0, 0, 0, 0, 1063, 1063, 1063,
	0, 0, 205, 205, 0, 0, 0, 0, 0, 205,
	0, 0, 0, 0, 0, 0, 207, 634, 0, 0,
	0, 1059, 0, 0, 1059, 0, 0, 615, 205, 1063,
	205, 0, 205, 0, 0, 0, 0, 0, 0, 0,
	616, 0, 0, 0, 0, 811, 87, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 621, 0, 0,
	1060, 87, 0, 1161, 0, 1060, 0, 0, 0, 617,
	0, 0, 630, 0, 629, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 1059, 0, 0, 0, 0, 0,
	0, 619, 0, 0, 0, 1059, 625, 0, 0, 205,
	0, 636, 205, 633, 0, 0, 0, 0, 623, 0,
	0, 0, 0, 0, 0, 1161, 1161, 0, 0, 205,
	0, 0, 0, 0, 0, 0, 585, 205, 0, 205,
	0, 205, 0, 205, 0, 205, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1063, 1171, 1063, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 0, 1161,
	1161, 0, 0, 0, 1161, 0, 0, 1161, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2289, 0, 0,
	0, 0, 1796, 0, 0, 0, 791, 0, 0, 0,
	0, 0, 0, 207, 0, 0, 0, 0, 0, 0,
	0, 207, 207, 1063, 1481, 1063, 0, 1063, 0, 0,
	0, 1059, 0, 0, 2328, 1161, 0, 1279, 0, 1279,
	0, 1279, 1490, 1171, 1171, 0, 1496, 0, 1063, 0,
	0, 1063, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2368, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1063,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2388, 1171, 2390,
	0, 0, 0, 0, 0, 0, 1063, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2404, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1059, 0,
	0, 0, 0, 1160, 1063, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 998, 1063, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 87, 0, 0,
	1582, 0, 1585, 1160, 1160, 1160, 0, 0, 0, 998,
	0, 0, 0, 0, 205, 718, 0, 748, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1059, 207, 0, 0, 725,
	0, 1063, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 754, 723, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 207, 0, 0,
	0, 0, 0, 0, 0, 724, 0, 0, 0, 0,
	726, 0, 0, 0, 755, 0, 0, 0, 0, 0,
	732, 733, 0, 0, 0, 0, 742, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 749,
	727, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1060, 747, 0, 0, 0,
	0, 0, 205, 0, 1161, 0, 0, 0, 207, 1063,
	0, 0, 1059, 205, 1059, 0, 0, 0, 1063, 1063,
	0, 0, 0, 0, 1063, 0, 205, 728, 0, 0,
	0, 0, 0, 0, 0, 722, 0, 0, 0, 0,
	0, 1060, 205, 0, 0, 0, 585, 0, 0, 0,
	0, 729, 730, 0, 0, 0, 0, 0, 207, 0,
	1063, 0, 0, 0, 0, 0, 0, 0, 207, 1160,
	0, 1059, 205, 1160, 0, 0, 0, 205, 0, 0,
	0, 731, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2605, 0, 1059, 0, 753, 1160, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	0, 750, 205, 0, 205, 0, 205, 0, 205, 205,
	0, 2641, 1171, 2289, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1059, 0, 0, 0, 0,
	0, 205, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1059, 0, 0, 0, 1161, 0, 0, 0,
	0, 0, 0, 1060, 0, 0, 0, 2678, 0, 811,
	0, 2682, 205, 205, 205, 0, 205, 0, 744, 0,
	2689, 0, 0, 0, 0, 0, 0, 0, 738, 0,
	1059, 0, 0, 0, 739, 0, 0, 0, 0, 205,
	0, 720, 1059, 751, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 721, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 740, 0, 0,
	0, 737, 2732, 0, 0, 756, 757, 0, 0, 0,
	0, 752, 0, 0, 0, 0, 0, 0, 0, 741,
	0, 0, 0, 0, 0, 0, 0, 1160, 0, 0,
	0, 0, 2750, 0, 1171, 0, 0, 0, 0, 743,
	0, 0, 0, 791, 0, 0, 791, 791, 0, 0,
	2756, 0, 0, 0, 0, 0, 0, 0, 1161, 0,
	1161, 745, 0, 0, 0, 0, 1161, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1161, 1161, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1418,
	1419, 1992, 1451, 1452, 1453, 1461, 1462, 1463, 0, 0,
	0, 0, 0, 0, 0, 811, 0, 0, 1454, 0,
	0, 0, 0, 0, 0, 1421, 0, 0, 1490, 1467,
	0, 0, 1490, 0, 0, 1160, 0, 0, 0, 0,
	0, 0, 0, 0, 1160, 1160, 0, 0, 0, 0,
	1160, 0, 1420, 0, 0, 0, 998, 0, 0, 0,
	1440, 0, 0, 0, 0, 0, 0, 1437, 0, 0,
	0, 998, 1060, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1059, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 986, 0, 0, 0,
	1584, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1585, 0, 1443, 1444, 1445, 1446, 0, 0, 0, 0,
	0, 0, 1426, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 1458, 1060, 0, 1468,
	0, 0, 0, 1448, 1449, 1450, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 205, 205, 0,
	0, 0, 0, 0, 1464, 1584, 1465, 0, 0, 0,
	0, 0, 0, 1435, 1436, 0, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1456, 0,
	0, 0, 0, 0, 0, 0, 1441, 0, 0, 0,
	0, 2943, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1060, 205, 0, 1466, 0, 205, 0, 2955, 0,
	0, 0, 0, 0, 0, 205, 0, 1060, 0, 1455,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 0, 58, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 59, 118, 0, 87, 0, 0,
	1447, 2993, 0, 0, 0, 0, 0, 205, 63, 0,
	0, 0, 87, 0, 87, 0, 0, 0, 1442, 0,
	0, 0, 0, 39, 120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 38, 205, 69, 205,
	0, 0, 0, 1459, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 205, 0, 87, 41, 87,
	0, 0, 0, 42, 0, 0, 0, 0, 75, 1060,
	0, 121, 0, 0, 0, 0, 40, 85, 0, 0,
	0, 76, 43, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 44, 1161,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1060, 0, 77, 0, 1457, 0, 0,
	1432, 1433, 1439, 1438, 1434, 1460, 0, 1431, 1429, 1430,
	1422, 1423, 1424, 1425, 1427, 1428, 0, 0, 0, 0,
	0, 0, 0, 3032, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3102, 0,
	0, 0, 0, 0, 0, 0, 2289, 0, 0, 0,
	0, 0, 0, 998, 998, 0, 0, 0, 0, 0,
	0, 0, 1161, 1161, 1161, 0, 1161, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1992, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	78, 0, 0, 0, 0, 0, 0, 1490, 45, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1418, 1419, 0, 1451, 1452, 1453, 1461, 1462, 1463, 0,
	0, 48, 145, 81, 0, 82, 0, 46, 0, 1454,
	0, 122, 0, 0, 0, 0, 1421, 47, 0, 0,
	1467, 0, 0, 0, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 51, 0, 0, 116,
	0, 0, 0, 1420, 0, 0, 0, 0, 119, 0,
	0, 1440, 0, 0, 0, 0, 0, 0, 1437, 0,
	0, 0, 180, 0, 0, 0, 205, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3196, 0, 0, 205, 0, 0, 117, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 986, 0, 149,
	0, 0, 0, 998, 0, 0, 0, 179, 0, 0,
	0, 0, 986, 1443, 1444, 1445, 1446, 172, 0, 0,
	0, 3234, 0, 1426, 0, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 148, 1458, 0, 3,
	1468, 3258, 1171, 0, 1448, 1449, 1450, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1464, 0, 1465, 0, 0,
	0, 0, 0, 0, 1435, 1436, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1456,
	0, 0, 0, 0, 0, 0, 0, 1441, 0, 0,
	0, 87, 87, 0, 87, 0, 0, 1060, 0, 0,
	0, 0, 0, 0, 0, 1466, 0, 0, 0, 0,
	0, 0, 0, 3306, 0, 0, 0, 0, 0, 0,
	1455, 0, 0, 87, 87, 0, 87, 0, 0, 0,
	998, 0, 0, 0, 0, 0, 1060, 0, 998, 0,
	0, 0, 0, 0, 0, 1060, 0, 0, 0, 0,
	0, 1584, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1447, 0, 3341, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3356, 0, 0, 0, 0, 811, 1442,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 205, 0, 0, 0, 0, 0, 0,
	0, 205, 205, 87, 1459, 0, 0, 0, 0, 0,
	0, 0, 0, 1418, 1419, 0, 1451, 1452, 1453, 1461,
	1462, 1463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1454, 0, 0, 0, 0, 0, 1161, 1421,
	0, 0, 0, 1467, 0, 0, 0, 1060, 0, 0,
	0, 0, 0, 0, 1060, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1420, 0, 0, 0,
	0, 0, 0, 0, 1440, 1161, 0, 0, 1161, 1161,
	1161, 1437, 0, 0, 0, 0, 0, 0, 1457, 0,
	0, 1432, 1433, 1439, 1438, 1434, 1460, 0, 1431, 1429,
	1430, 1422, 1423, 1424, 1425, 1427, 1428, 0, 0, 0,
	0, 0, 0, 0, 2774, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1161,
	1161, 0, 0, 0, 0, 0, 1443, 1444, 1445, 1446,
	0, 0, 0, 0, 0, 0, 1426, 0, 0, 0,
	0, 0, 0, 0, 0, 205, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1060, 0, 0, 1060, 0,
	1458, 0, 0, 1468, 0, 0, 0, 1448, 1449, 1450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 205, 0, 1464, 0,
	1465, 0, 0, 0, 986, 986, 0, 1435, 1436, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1456, 0, 0, 0, 205, 205, 1060, 0,
	1441, 0, 0, 0, 0, 0, 0, 0, 0, 1060,
	0, 0, 0, 87, 0, 0, 0, 0, 1466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1455, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1447, 0, 0, 0, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1442, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1418, 1419, 0,
	1451, 1452, 1453, 1461, 1462, 1463, 0, 1459, 0, 0,
	0, 0, 0, 0, 0, 1060, 1454, 0, 205, 0,
	0, 0, 0, 1421, 0, 0, 0, 1467, 205, 0,
	0, 0, 0, 0, 986, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1420, 0, 0, 0, 0, 0, 0, 0, 1440, 0,
	0, 0, 0, 0, 0, 1437, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1457, 0, 0, 1432, 1433, 1439, 1438, 1434, 1460,
	0, 1431, 1429, 1430, 1422, 1423, 1424, 1425, 1427, 1428,
	0, 0, 0, 0, 0, 0, 0, 2479, 0, 0,
	1443, 1444, 1445, 1446, 0, 0, 0, 0, 0, 0,
	1426, 0, 1060, 0, 0, 0, 0, 1161, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1458, 0, 0, 1468, 0, 0,
	0, 1448, 1449, 1450, 0, 0, 0, 1161, 1161, 1161,
	0, 0, 1418, 1419, 0, 1451, 1452, 1453, 1461, 1462,
	1463, 986, 1464, 0, 1465, 0, 0, 0, 0, 986,
	0, 1435, 1436, 0, 0, 0, 0, 0, 1421, 1060,
	0, 0, 1467, 0, 0, 0, 1456, 0, 0, 0,
	0, 0, 0, 0, 1441, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1420, 0, 0, 0, 0,
	0, 0, 1466, 1440, 0, 0, 0, 0, 0, 0,
	1437, 0, 0, 0, 0, 0, 0, 1455, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1447, 0,
	0, 87, 0, 0, 0, 1443, 1444, 1445, 1446, 0,
	0, 0, 0, 0, 0, 1426, 1442, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1060, 0, 1060, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1458,
	0, 1459, 1468, 0, 0, 0, 1448, 1449, 1450, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1464, 0, 1465,
	0, 0, 0, 0, 0, 0, 1435, 1436, 0, 0,
	0, 0, 0, 1161, 0, 1060, 0, 1161, 0, 0,
	0, 1456, 0, 0, 0, 0, 0, 0, 0, 1441,
	0, 0, 0, 0, 0, 0, 0, 0, 1060, 0,
	0, 1161, 0, 0, 0, 0, 0, 1466, 0, 0,
	0, 0, 0, 0, 0, 1457, 0, 0, 1432, 1433,
	1439, 1438, 1434, 1460, 0, 1431, 1429, 1430, 1422, 1423,
	1424, 1425, 1427, 1428, 0, 0, 0, 0, 0, 1060,
	0, 2478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1992, 0, 1447, 0, 0, 1060, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1442, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1060, 0, 1459, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1060, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1161, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1457, 0, 0, 1432, 1433, 1439, 1438, 1434, 1460, 0,
	1431, 1429, 1430, 1422, 1423, 1424, 1425, 1427, 1428, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1161,
	0, 0, 0, 0, 0, 0, 0, 0, 1161, 1161,
	0, 0, 0, 0, 1161, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1057, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1060, 215, 216, 217, 218, 219, 1064, 220, 1065, 1066,
	1067, 1068, 463, 1069, 1070, 1071, 1072, 221, 222, 223,
	224, 464, 465, 225, 466, 226, 227, 467, 1073, 228,
	229, 230, 231, 232, 233, 1074, 1075, 234, 468, 469,
	470, 1076, 235, 471, 1077, 1062, 1078, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 1079, 245, 0,
	246, 247, 248, 1080, 937, 249, 250, 1081, 1082, 1084,
	1083, 1085, 1086, 1087, 251, 252, 253, 254, 255, 256,
	472, 473, 1088, 257, 1089, 259, 258, 1090, 260, 1091,
	1092, 261, 262, 263, 1093, 264, 1094, 265, 266, 1095,
	474, 267, 268, 270, 273, 269, 274, 275, 276, 475,
	476, 1096, 212, 1097, 0, 0, 0, 0, 277, 278,
	279, 477, 280, 281, 0, 282, 1098, 283, 1099, 1100,
	938, 284, 285, 1101, 286, 478, 1102, 479, 287, 1103,
	288, 289, 290, 291, 480, 481, 482, 339, 940, 292,
	293, 1104, 294, 295, 297, 0, 0, 0, 213, 296,
	298, 305, 1105, 939, 299, 483, 301, 300, 302, 303,
	304, 484, 1106, 485, 1107, 306, 941, 486, 942, 307,
	308, 309, 943, 310, 311, 0, 0, 312, 313, 314,
	315, 1108, 317, 316, 1109, 318, 487, 944, 319, 320,
	945, 1110, 321, 322, 1111, 1112, 323, 324, 0, 325,
	326, 328, 330, 327, 329, 331, 333, 334, 332, 946,
	335, 336, 338, 337, 1113, 214, 947, 1114, 488, 489,
	340, 341, 1115, 342, 343, 344, 1116, 1117, 346, 347,
	348, 1118, 1119, 349, 490, 948, 350, 949, 491, 351,
	345, 352, 353, 354, 355, 356, 357, 1120, 358, 359,
	492, 360, 493, 361, 1121, 362, 0, 363, 364, 365,
	366, 367, 368, 494, 369, 370, 1122, 371, 372, 373,
	374, 375, 0, 377, 378, 379, 376, 380, 381, 382,
	383, 1123, 384, 950, 385, 386, 387, 388, 495, 389,
	0, 390, 394, 395, 396, 397, 398, 399, 400, 1124,
	407, 408, 401, 403, 404, 405, 402, 406, 409, 410,
	1125, 411, 391, 392, 412, 951, 413, 496, 414, 415,
	1126, 425, 416, 417, 418, 393, 419, 423, 424, 420,
	421, 422, 497, 1127, 427, 428, 426, 1128, 429, 430,
	431, 432, 433, 271, 434, 272, 435, 1129, 498, 499,
	500, 501, 1130, 442, 1131, 436, 437, 502, 438, 503,
	1132, 439, 440, 441, 0, 443, 444, 1133, 1134, 445,
	446, 447, 448, 449, 451, 1135, 452, 1136, 450, 453,
	454, 455, 504, 505, 506, 1137, 457, 456, 507, 1138,
	1139, 1140, 1141, 458, 459, 508, 460, 461, 462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1057, 0, 0, 0, 0, 0, 0, 0, 2144,
	0, 0, 0, 0, 0, 0, 0, 2145, 215, 216,
	217, 218, 219, 1064, 220, 1065, 1066, 1067, 1068, 463,
	1069, 1070, 1071, 1072, 221, 222, 223, 224, 464, 465,
	225, 466, 226, 227, 467, 1073, 228, 229, 230, 231,
	232, 233, 1074, 1075, 234, 468, 469, 470, 1076, 235,
	471, 1077, 1062, 1078, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 1079, 245, 0, 246, 247, 248,
	1080, 937, 249, 250, 1081, 1082, 1084, 1083, 1085, 1086,
	1087, 251, 252, 253, 254, 255, 256, 472, 473, 1088,
	257, 1089, 259, 258, 1090, 260, 1091, 1092, 261, 262,
	263, 1093, 264, 1094, 265, 266, 1095, 474, 267, 268,
	270, 273, 269, 274, 275, 276, 475, 476, 1096, 212,
	1097, 0, 0, 0, 0, 277, 278, 279, 477, 280,
	281, 0, 282, 1098, 283, 1099, 1100, 938, 284, 285,
	1101, 286, 478, 1102, 479, 287, 1103, 288, 289, 290,
	291, 480, 481, 482, 339, 940, 292, 293, 1104, 294,
	295, 297, 0, 0, 0, 213, 296, 298, 305, 1105,
	939, 299, 483, 301, 300, 302, 303, 304, 484, 1106,
	485, 1107, 306, 941, 486, 942, 307, 308, 309, 943,
	310, 311, 0, 0, 312, 313, 314, 315, 1108, 317,
	316, 1109, 318, 487, 944, 319, 320, 945, 1110, 321,
	322, 1111, 1112, 323, 324, 0, 325, 326, 328, 330,
	327, 329, 331, 333, 334, 332, 946, 335, 336, 338,
	337, 1113, 214, 947, 1114, 488, 489, 340, 341, 1115,
	342, 343, 344, 1116, 1117, 346, 347, 348, 1118, 1119,
	349, 490, 948, 350, 949, 491, 351, 345, 352, 353,
	354, 355, 356, 357, 1120, 358, 359, 492, 360, 493,
	361, 1121, 362, 0, 363, 364, 365, 366, 367, 368,
	494, 369, 370, 1122, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 1123, 384,
	950, 385, 386, 387, 388, 495, 389, 0, 390, 394,
	395, 396, 397, 398, 399, 400, 1124, 407, 408, 401,
	403, 404, 405, 402, 406, 409, 410, 1125, 411, 391,
	392, 412, 951, 413, 496, 414, 415, 1126, 425, 416,
	417, 418, 393, 419, 423, 424, 420, 421, 422, 497,
	1127, 427, 428, 426, 1128, 429, 430, 431, 432, 433,
	271, 434, 272, 435, 1129, 498, 499, 500, 501, 1130,
	442, 1131, 436, 437, 502, 438, 503, 1132, 439, 440,
	441, 0, 443, 444, 1133, 1134, 445, 446, 447, 448,
	449, 451, 1135, 452, 1136, 450, 453, 454, 455, 504,
	505, 506, 1137, 457, 456, 507, 1138, 1139, 1140, 1141,
	458, 459, 508, 460, 461, 462, 0, 0, 0, 0,
	1057, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3058, 215, 216, 217,
	218, 219, 1064, 220, 1065, 1066, 1067, 1068, 463, 1069,
	1070, 1071, 1072, 221, 222, 223, 224, 464, 465, 225,
	466, 226, 227, 467, 1073, 228, 229, 230, 231, 232,
	233, 1074, 1075, 234, 468, 469, 470, 1076, 235, 471,
	1077, 1062, 1078, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 1079, 245, 0, 246, 247, 248, 1080,
	937, 249, 250, 1081, 1082, 1084, 1083, 1085, 1086, 1087,
	251, 252, 253, 254, 255, 256, 472, 473, 1088, 257,
	1089, 259, 258, 1090, 260, 1091, 1092, 261, 262, 263,
	1093, 264, 1094, 265, 266, 1095, 474, 267, 268, 270,
	273, 269, 274, 275, 276, 475, 476, 1096, 212, 1097,
	0, 0, 0, 0, 277, 278, 279, 477, 280, 281,
	0, 282, 1098, 283, 1099, 1100, 938, 284, 285, 1101,
	286, 478, 1102, 479, 287, 1103, 288, 289, 290, 291,
	480, 481, 482, 339, 940, 292, 293, 1104, 294, 295,
	297, 0, 0, 0, 213, 296, 298, 305, 1105, 939,
	299, 483, 301, 300, 302, 303, 304, 484, 1106, 485,
	1107, 306, 941, 486, 942, 307, 308, 309, 943, 310,
	311, 0, 0, 312, 313, 314, 315, 1108, 317, 316,
	1109, 318, 487, 944, 319, 320, 945, 1110, 321, 322,
	1111, 1112, 323, 324, 0, 325, 326, 328, 330, 327,
	329, 331, 333, 334, 332, 946, 335, 336, 338, 337,
	1113, 214, 947, 1114, 488, 489, 340, 341, 1115, 342,
	343, 344, 1116, 1117, 346, 347, 348, 1118, 1119, 349,
	490, 948, 350, 949, 491, 351, 345, 352, 353, 354,
	355, 356, 357, 1120, 358, 359, 492, 360, 493, 361,
	1121, 362, 0, 363, 364, 365, 366, 367, 368, 494,
	369, 370, 1122, 371, 372, 373, 374, 375, 0, 377,
	378, 379, 376, 380, 381, 382, 383, 1123, 384, 950,
	385, 386, 387, 388, 495, 389, 0, 390, 394, 395,
	396, 397, 398, 399, 400, 1124, 407, 408, 401, 403,
	404, 405, 402, 406, 409, 410, 1125, 411, 391, 392,
	412, 951, 413, 496, 414, 415, 1126, 425, 416, 417,
	418, 393, 419, 423, 424, 420, 421, 422, 497, 1127,
	427, 428, 426, 1128, 429, 430, 431, 432, 433, 271,
	434, 272, 435, 1129, 498, 499, 500, 501, 1130, 442,
	1131, 436, 437, 502, 438, 503, 1132, 439, 440, 441,
	0, 443, 444, 1133, 1134, 445, 446, 447, 448, 449,
	451, 1135, 452, 1136, 450, 453, 454, 455, 504, 505,
	506, 1137, 457, 456, 507, 1138, 1139, 1140, 1141, 458,
	459, 508, 460, 461, 462, 1057, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3163, 0, 215, 216, 217, 218, 219, 1064, 220, 1065,
	1066, 1067, 1068, 463, 1069, 1070, 1071, 1072, 221, 222,
	223, 224, 464, 465, 225, 466, 226, 227, 467, 1073,
	228, 229, 230, 231, 232, 233, 1074, 1075, 234, 468,
	469, 470, 1076, 235, 471, 1077, 1062, 1078, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 1079, 245,
	0, 246, 247, 248, 1080, 937, 249, 250, 1081, 1082,
	1084, 1083, 1085, 1086, 1087, 251, 252, 253, 254, 255,
	256, 472, 473, 1088, 257, 1089, 259, 258, 1090, 260,
	1091, 1092, 261, 262, 263, 1093, 264, 1094, 265, 266,
	1095, 474, 267, 268, 270, 273, 269, 274, 275, 276,
	475, 476, 1096, 212, 1097, 0, 0, 0, 0, 277,
	278, 279, 477, 280, 281, 0, 282, 1098, 283, 1099,
	1100, 938, 284, 285, 1101, 286, 478, 1102, 479, 287,
	1103, 288, 289, 290, 291, 480, 481, 482, 339, 940,
	292, 293, 1104, 294, 295, 297, 0, 0, 0, 213,
	296, 298, 305, 1105, 939, 299, 483, 301, 300, 302,
	303, 304, 484, 1106, 485, 1107, 306, 941, 486, 942,
	307, 308, 309, 943, 310, 311, 0, 0, 312, 313,
	314, 315, 1108, 317, 316, 1109, 318, 487, 944, 319,
	320, 945, 1110, 321, 322, 1111, 1112, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	946, 335, 336, 338, 337, 1113, 214, 947, 1114, 488,
	489, 340, 341, 1115, 342, 343, 344, 1116, 1117, 346,
	347, 348, 1118, 1119, 349, 490, 948, 350, 949, 491,
	351, 345, 352, 353, 354, 355, 356, 357, 1120, 358,
	359, 492, 360, 493, 361, 1121, 362, 0, 363, 364,
	365, 366, 367, 368, 494, 369, 370, 1122, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 1123, 384, 950, 385, 386, 387, 388, 495,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	1124, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 1125, 411, 391, 392, 412, 951, 413, 496, 414,
	415, 1126, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 497, 1127, 427, 428, 426, 1128, 429,
	430, 431, 432, 433, 271, 434, 272, 435, 1129, 498,
	499, 500, 501, 1130, 442, 1131, 436, 437, 502, 438,
	503, 1132, 439, 440, 441, 0, 443, 444, 1133, 1134,
	445, 446, 447, 448, 449, 451, 1135, 452, 1136, 450,
	453, 454, 455, 504, 505, 506, 1137, 457, 456, 507,
	1138, 1139, 1140, 1141, 458, 459, 508, 460, 461, 462,
	1057, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2799, 0, 215, 216, 217,
	218, 219, 1064, 220, 1065, 1066, 1067, 1068, 463, 1069,
	1070, 1071, 1072, 221, 222, 223, 224, 464, 465, 225,
	466, 226, 227, 467, 1073, 228, 229, 230, 231, 232,
	233, 1074, 1075, 234, 468, 469, 470, 1076, 235, 471,
	1077, 1062, 1078, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 1079, 245, 0, 246, 247, 248, 1080,
	937, 249, 250, 1081, 1082, 1084, 1083, 1085, 1086, 1087,
	251, 252, 253, 254, 255, 256, 472, 473, 1088, 257,
	1089, 259, 258, 1090, 260, 1091, 1092, 261, 262, 263,
	1093, 264, 1094, 265, 266, 1095, 474, 267, 268, 270,
	273, 269, 274, 275, 276, 475, 476, 1096, 212, 1097,
	0, 0, 0, 0, 277, 278, 279, 477, 280, 281,
	0, 282, 1098, 283, 1099, 1100, 938, 284, 285, 1101,
	286, 478, 1102, 479, 287, 1103, 288, 289, 290, 291,
	480, 481, 482, 339, 940, 292, 293, 1104, 294, 295,
	297, 0, 0, 0, 213, 296, 298, 305, 1105, 939,
	299, 483, 301, 300, 302, 303, 304, 484, 1106, 485,
	1107, 306, 941, 486, 942, 307, 308, 309, 943, 310,
	311, 0, 0, 312, 313, 314, 315, 1108, 317, 316,
	1109, 318, 487, 944, 319, 320, 945, 1110, 321, 322,
	1111, 1112, 323, 324, 0, 325, 326, 328, 330, 327,
	329, 331, 333, 334, 332, 946, 335, 336, 338, 337,
	1113, 214, 947, 1114, 488, 489, 340, 341, 1115, 342,
	343, 344, 1116, 1117, 346, 347, 348, 1118, 1119, 349,
	490, 948, 350, 949, 491, 351, 345, 352, 353, 354,
	355, 356, 357, 1120, 358, 359, 492, 360, 493, 361,
	1121, 362, 0, 363, 364, 365, 366, 367, 368, 494,
	369, 370, 1122, 371, 372, 373, 374, 375, 0, 377,
	378, 379, 376, 380, 381, 382, 383, 1123, 384, 950,
	385, 386, 387, 388, 495, 389, 0, 390, 394, 395,
	396, 397, 398, 399, 400, 1124, 407, 408, 401, 403,
	404, 405, 402, 406, 409, 410, 1125, 411, 391, 392,
	412, 951, 413, 496, 414, 415, 1126, 425, 416, 417,
	418, 393, 419, 423, 424, 420, 421, 422, 497, 1127,
	427, 428, 426, 1128, 429, 430, 431, 432, 433, 271,
	434, 272, 435, 1129, 498, 499, 500, 501, 1130, 442,
	1131, 436, 437, 502, 438, 503, 1132, 439, 440, 441,
	0, 443, 444, 1133, 1134, 445, 446, 447, 448, 449,
	451, 1135, 452, 1136, 450, 453, 454, 455, 504, 505,
	506, 1137, 457, 456, 507, 1138, 1139, 1140, 1141, 458,
	459, 508, 460, 461, 462, 1057, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2791, 0, 215, 216, 217, 218, 219, 1064, 220, 1065,
	1066, 1067, 1068, 463, 1069, 1070, 1071, 1072, 221, 222,
	223, 224, 464, 465, 225, 466, 226, 227, 467, 1073,
	228, 229, 230, 231, 232, 233, 1074, 1075, 234, 468,
	469, 470, 1076, 235, 471, 1077, 1062, 1078, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 1079, 245,
	0, 246, 247, 248, 1080, 937, 249, 250, 1081, 1082,
	1084, 1083, 1085, 1086, 1087, 251, 252, 253, 254, 255,
	256, 472, 473, 1088, 257, 1089, 259, 258, 1090, 260,
	1091, 1092, 261, 262, 263, 1093, 264, 1094, 265, 266,
	1095, 474, 267, 268, 270, 273, 269, 274, 275, 276,
	475, 476, 1096, 212, 1097, 0, 0, 0, 0, 277,
	278, 279, 477, 280, 281, 0, 282, 1098, 283, 1099,
	1100, 938, 284, 285, 1101, 286, 478, 1102, 479, 287,
	1103, 288, 289, 290, 291, 480, 481, 482, 339, 940,
	292, 293, 1104, 294, 295, 297, 0, 0, 0, 213,
	296, 298, 305, 1105, 939, 299, 483, 301, 300, 302,
	303, 304, 484, 1106, 485, 1107, 306, 941, 486, 942,
	307, 308, 309, 943, 310, 311, 0, 0, 312, 313,
	314, 315, 1108, 317, 316, 1109, 318, 487, 944, 319,
	320, 945, 1110, 321, 322, 1111, 1112, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	946, 335, 336, 338, 337, 1113, 214, 947, 1114, 488,
	489, 340, 341, 1115, 342, 343, 344, 1116, 1117, 346,
	347, 348, 1118, 1119, 349, 490, 948, 350, 949, 491,
	351, 345, 352, 353, 354, 355, 356, 357, 1120, 358,
	359, 492, 360, 493, 361, 1121, 362, 0, 363, 364,
	365, 366, 367, 368, 494, 369, 370, 1122, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 1123, 384, 950, 385, 386, 387, 388, 495,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	1124, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 1125, 411, 391, 392, 412, 951, 413, 496, 414,
	415, 1126, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 497, 1127, 427, 428, 426, 1128, 429,
	430, 431, 432, 433, 271, 434, 272, 435, 1129, 498,
	499, 500, 501, 1130, 442, 1131, 436, 437, 502, 438,
	503, 1132, 439, 440, 441, 0, 443, 444, 1133, 1134,
	445, 446, 447, 448, 449, 451, 1135, 452, 1136, 450,
	453, 454, 455, 504, 505, 506, 1137, 457, 456, 507,
	1138, 1139, 1140, 1141, 458, 459, 508, 460, 461, 462,
	1057, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2664, 0, 215, 216, 217,
	218, 219, 1064, 220, 1065, 1066, 1067, 1068, 463, 1069,
	1070, 1071, 1072, 221, 222, 223, 224, 464, 465, 225,
	466, 226, 227, 467, 1073, 228, 229, 230, 231, 232,
	233, 1074, 1075, 234, 468, 469, 470, 1076, 235, 471,
	1077, 1062, 1078, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 1079, 245, 0, 246, 247, 248, 1080,
	937, 249, 250, 1081, 1082, 1084, 1083, 1085, 1086, 1087,
	251, 252, 253, 254, 255, 256, 472, 473, 1088, 257,
	1089, 259, 258, 1090, 260, 1091, 1092, 261, 262, 263,
	1093, 264, 1094, 265, 266, 1095, 474, 267, 268, 270,
	273, 269, 274, 275, 276, 475, 476, 1096, 212, 1097,
	0, 0, 0, 0, 277, 278, 279, 477, 280, 281,
	0, 282, 1098, 283, 1099, 1100, 938, 284, 285, 1101,
	286, 478, 1102, 479, 287, 1103, 288, 289, 290, 291,
	480, 481, 482, 339, 940, 292, 293, 1104, 294, 295,
	297, 0, 0, 0, 213, 296, 298, 305, 1105, 939,
	299, 483, 301, 300, 302, 303, 304, 484, 1106, 485,
	1107, 306, 941, 486, 942, 307, 308, 309, 943, 310,
	311, 0, 0, 312, 313, 314, 315, 1108, 317, 316,
	1109, 318, 487, 944, 319, 320, 945, 1110, 321, 322,
	1111, 1112, 323, 324, 0, 325, 326, 328, 330, 327,
	329, 331, 333, 334, 332, 946, 335, 336, 338, 337,
	1113, 214, 947, 1114, 488, 489, 340, 341, 1115, 342,
	343, 344, 1116, 1117, 346, 347, 348, 1118, 1119, 349,
	490, 948, 350, 949, 491, 351, 345, 352, 353, 354,
	355, 356, 357, 1120, 358, 359, 492, 360, 493, 361,
	1121, 362, 0, 363, 364, 365, 366, 367, 368, 494,
	369, 370, 1122, 371, 372, 373, 374, 375, 0, 377,
	378, 379, 376, 380, 381, 382, 383, 1123, 384, 950,
	385, 386, 387, 388, 495, 389, 0, 390, 394, 395,
	396, 397, 398, 399, 400, 1124, 407, 408, 401, 403,
	404, 405, 402, 406, 409, 410, 1125, 411, 391, 392,
	412, 951, 413, 496, 414, 415, 1126, 425, 416, 417,
	418, 393, 419, 423, 424, 420, 421, 422, 497, 1127,
	427, 428, 426, 1128, 429, 430, 431, 432, 433, 271,
	434, 272, 435, 1129, 498, 499, 500, 501, 1130, 442,
	1131, 436, 437, 502, 438, 503, 1132, 439, 440, 441,
	0, 443, 444, 1133, 1134, 445, 446, 447, 448, 449,
	451, 1135, 452, 1136, 450, 453, 454, 455, 504, 505,
	506, 1137, 457, 456, 507, 1138, 1139, 1140, 1141, 458,
	459, 508, 460, 461, 462, 1057, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2037, 0, 215, 216, 217, 218, 219, 1064, 220, 1065,
	1066, 1067, 1068, 463, 1069, 1070, 1071, 1072, 221, 222,
	223, 224, 464, 465, 225, 466, 226, 227, 467, 1073,
	228, 229, 230, 231, 232, 233, 1074, 1075, 234, 468,
	469, 470, 1076, 235, 471, 1077, 1062, 1078, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 1079, 245,
	0, 246, 247, 248, 1080, 937, 249, 250, 1081, 1082,
	1084, 1083, 1085, 1086, 1087, 251, 252, 253, 254, 255,
	256, 472, 473, 1088, 257, 1089, 259, 258, 1090, 260,
	1091, 1092, 261, 262, 263, 1093, 264, 1094, 265, 266,
	1095, 474, 267, 268, 270, 273, 269, 274, 275, 276,
	475, 476, 1096, 212, 1097, 0, 0, 0, 0, 277,
	278, 279, 477, 280, 281, 0, 282, 1098, 283, 1099,
	1100, 938, 284, 285, 1101, 286, 478, 1102, 479, 287,
	1103, 288, 289, 290, 291, 480, 481, 482, 339, 940,
	292, 293, 1104, 294, 295, 297, 0, 0, 0, 213,
	296, 298, 305, 1105, 939, 299, 483, 301, 300, 302,
	303, 304, 484, 1106, 485, 1107, 306, 941, 486, 942,
	307, 308, 309, 943, 310, 311, 0, 0, 312, 313,
	314, 315, 1108, 317, 316, 1109, 318, 487, 944, 319,
	320, 945, 1110, 321, 322, 1111, 1112, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	946, 335, 336, 338, 337, 1113, 214, 947, 1114, 488,
	489, 340, 341, 1115, 342, 343, 344, 1116, 1117, 346,
	347, 348, 1118, 1119, 349, 490, 948, 350, 949, 491,
	351, 345, 352, 353, 354, 355, 356, 357, 1120, 358,
	359, 492, 360, 493, 361, 1121, 362, 0, 363, 364,
	365, 366, 367, 368, 494, 369, 370, 1122, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 1123, 384, 950, 385, 386, 387, 388, 495,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	1124, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 1125, 411, 391, 392, 412, 951, 413, 496, 414,
	415, 1126, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 497, 1127, 427, 428, 426, 1128, 429,
	430, 431, 432, 433, 271, 434, 272, 435, 1129, 498,
	499, 500, 501, 1130, 442, 1131, 436, 437, 502, 438,
	503, 1132, 439, 440, 441, 0, 443, 444, 1133, 1134,
	445, 446, 447, 448, 449, 451, 1135, 452, 1136, 450,
	453, 454, 455, 504, 505, 506, 1137, 457, 456, 507,
	1138, 1139, 1140, 1141, 458, 459, 508, 460, 461, 462,
	1165, 0, 1057, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1767, 0, 0, 0, 215,
	216, 217, 218, 219, 1064, 220, 1065, 1066, 1067, 1068,
	463, 1069, 1070, 1071, 1072, 221, 222, 223, 224, 464,
	465, 225, 466, 226, 227, 467, 1073, 228, 229, 230,
	231, 232, 233, 1074, 1075, 234, 468, 469, 470, 1076,
	235, 471, 1077, 1062, 1078, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 1079, 245, 0, 246, 247,
	248, 1080, 937, 249, 250, 1081, 1082, 1084, 1083, 1085,
	1086, 1087, 251, 252, 253, 254, 255, 256, 472, 473,
	1088, 257, 1089, 259, 258, 1090, 260, 1091, 1092, 261,
	262, 263, 1093, 264, 1094, 265, 266, 1095, 474, 267,
	268, 270, 273, 269, 274, 275, 276, 475, 476, 1096,
	212, 1097, 0, 0, 0, 0, 277, 278, 279, 477,
	280, 281, 0, 282, 1098, 283, 1099, 1100, 938, 284,
	285, 1101, 286, 478, 1102, 479, 287, 1103, 288, 289,
	290, 291, 480, 481, 482, 339, 940, 292, 293, 1104,
	294, 295, 297, 0, 0, 0, 213, 296, 298, 305,
	1105, 939, 299, 483, 301, 300, 302, 303, 304, 484,
	1106, 485, 1107, 306, 941, 486, 942, 307, 308, 309,
	943, 310, 311, 0, 0, 312, 313, 314, 315, 1108,
	317, 316, 1109, 318, 487, 944, 319, 320, 945, 1110,
	321, 322, 1111, 1112, 323, 324, 0, 325, 326, 328,
	330, 327, 329, 331, 333, 334, 332, 946, 335, 336,
	338, 337, 1113, 214, 947, 1114, 488, 489, 340, 341,
	1115, 342, 343, 344, 1116, 1117, 346, 347, 348, 1118,
	1119, 349, 490, 948, 350, 949, 491, 351, 345, 352,
	353, 354, 355, 356, 357, 1120, 358, 359, 492, 360,
	493, 361, 1121, 362, 0, 363, 364, 365, 366, 367,
	368, 494, 369, 370, 1122, 371, 372, 373, 374, 375,
	0, 377, 378, 379, 376, 380, 381, 382, 383, 1123,
	384, 950, 385, 386, 387, 388, 495, 389, 0, 390,
	394, 395, 396, 397, 398, 399, 400, 1124, 407, 408,
	401, 403, 404, 405, 402, 406, 409, 410, 1125, 411,
	391, 392, 412, 951, 413, 496, 414, 415, 1126, 425,
	416, 417, 418, 393, 419, 423, 424, 420, 421, 422,
	497, 1127, 427, 428, 426, 1128, 429, 430, 431, 432,
	433, 271, 434, 272, 435, 1129, 498, 499, 500, 501,
	1130, 442, 1131, 436, 437, 502, 438, 503, 1132, 439,
	440, 441, 0, 443, 444, 1133, 1134, 445, 446, 447,
	448, 449, 451, 1135, 452, 1136, 450, 453, 454, 455,
	504, 505, 506, 1137, 457, 456, 507, 1138, 1139, 1140,
	1141, 458, 459, 508, 460, 461, 462, 1054, 0, 1057,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 1064, 220, 1065, 1066, 1067, 1068, 463, 1069, 1070,
	1071, 1072, 221, 222, 223, 224, 464, 465, 225, 466,
	226, 227, 467, 1073, 228, 229, 230, 231, 232, 233,
	1074, 1075, 234, 468, 469, 470, 1076, 235, 471, 1077,
	1062, 1078, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 1079, 245, 0, 246, 247, 248, 1080, 937,
	249, 250, 1081, 1082, 1084, 1083, 1085, 1086, 1087, 251,
	252, 253, 254, 255, 256, 472, 473, 1088, 257, 1089,
	259, 258, 1090, 260, 1091, 1092, 261, 262, 263, 1093,
	264, 1094, 265, 266, 1095, 474, 267, 268, 270, 273,
	269, 274, 275, 276, 475, 476, 1096, 212, 1097, 0,
	0, 0, 0, 277, 278, 279, 477, 280, 281, 0,
	282, 1098, 283, 1099, 1100, 938, 284, 285, 1101, 286,
	478, 1102, 479, 287, 1103, 288, 289, 290, 291, 480,
	481, 482, 339, 940, 292, 293, 1104, 294, 295, 297,
	0, 0, 0, 213, 296, 298, 305, 1105, 939, 299,
	483, 301, 300, 302, 303, 304, 484, 1106, 485, 1107,
	306, 941, 486, 942, 307, 308, 309, 943, 310, 311,
	0, 0, 312, 313, 314, 315, 1108, 317, 316, 1109,
	318, 487, 944, 319, 320, 945, 1110, 321, 322, 1111,
	1112, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 946, 335, 336, 338, 337, 1113,
	214, 947, 1114, 488, 489, 340, 341, 1115, 342, 343,
	344, 1116, 1117, 346, 347, 348, 1118, 1119, 349, 490,
	948, 350, 949, 491, 351, 345, 352, 353, 354, 355,
	356, 357, 1120, 358, 359, 492, 360, 493, 361, 1121,
	362, 0, 363, 364, 365, 366, 367, 368, 494, 369,
	370, 1122, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 1123, 384, 950, 385,
	386, 387, 388, 495, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 1124, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 1125, 411, 391, 392, 412,
	951, 413, 496, 414, 415, 1126, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 497, 1127, 427,
	428, 426, 1128, 429, 430, 431, 432, 433, 271, 434,
	272, 435, 1129, 498, 499, 500, 501, 1130, 442, 1131,
	436, 437, 502, 438, 503, 1132, 439, 440, 441, 0,
	443, 444, 1133, 1134, 445, 446, 447, 448, 449, 451,
	1135, 452, 1136, 450, 453, 454, 455, 504, 505, 506,
	1137, 457, 456, 507, 1138, 1139, 1140, 1141, 458, 459,
	508, 460, 461, 462, 1057, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 1064, 220, 1065, 1066,
	1067, 1068, 463, 1069, 1070, 1071, 1072, 221, 222, 223,
	224, 464, 465, 225, 466, 226, 227, 467, 1073, 228,
	229, 230, 231, 232, 233, 1074, 1075, 234, 468, 469,
	470, 1076, 235, 471, 1077, 1062, 1078, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 1079, 245, 0,
	246, 247, 248, 1080, 937, 249, 250, 1081, 1082, 1084,
	1083, 1085, 1086, 1087, 251, 252, 253, 254, 255, 256,
	472, 473, 1088, 257, 1089, 259, 258, 1090, 260, 1091,
	1092, 261, 262, 263, 1093, 264, 1094, 265, 266, 1095,
	474, 267, 268, 270, 273, 269, 274, 275, 276, 475,
	476, 1096, 212, 1097, 0, 0, 0, 0, 277, 278,
	279, 477, 280, 281, 0, 282, 1098, 283, 1099, 1100,
	938, 284, 285, 1101, 286, 478, 1102, 479, 287, 1103,
	288, 289, 290, 291, 480, 481, 482, 339, 940, 292,
	293, 1104, 294, 295, 297, 0, 0, 0, 213, 296,
	298, 305, 1105, 939, 299, 483, 301, 300, 302, 303,
	304, 484, 1106, 485, 1107, 306, 941, 486, 942, 307,
	308, 309, 943, 310, 311, 0, 0, 312, 313, 314,
	315, 1108, 317, 316, 1109, 318, 487, 944, 319, 320,
	945, 1110, 321, 322, 1111, 1112, 323, 324, 0, 325,
	326, 328, 330, 327, 329, 331, 333, 334, 332, 946,
	335, 336, 338, 337, 1113, 214, 947, 1114, 488, 489,
	340, 341, 1115, 342, 343, 344, 1116, 1117, 346, 347,
	348, 1118, 1119, 349, 490, 948, 350, 949, 491, 351,
	345, 352, 353, 354, 355, 356, 357, 1120, 358, 359,
	492, 360, 493, 361, 1121, 362, 0, 363, 364, 365,
	366, 367, 368, 494, 369, 370, 1122, 371, 372, 373,
	374, 375, 0, 377, 378, 379, 376, 380, 381, 382,
	383, 1123, 384, 950, 385, 386, 387, 388, 495, 389,
	0, 390, 394, 395, 396, 397, 398, 399, 400, 1124,
	407, 408, 401, 403, 404, 405, 402, 406, 409, 410,
	1125, 411, 391, 392, 412, 951, 413, 496, 414, 415,
	1126, 425, 416, 417, 418, 393, 419, 423, 424, 420,
	421, 422, 497, 1127, 427, 428, 426, 1128, 429, 430,
	431, 432, 433, 271, 434, 272, 435, 1129, 498, 499,
	500, 501, 1130, 442, 1131, 436, 437, 502, 438, 503,
	1132, 439, 440, 441, 0, 443, 444, 1133, 1134, 445,
	446, 447, 448, 449, 451, 1135, 452, 1136, 450, 453,
	454, 455, 504, 505, 506, 1137, 457, 456, 507, 1138,
	1139, 1140, 1141, 458, 459, 508, 460, 461, 462, 2013,
	0, 879, 836, 837, 838, 834, 835, 848, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 2010, 220, 0, 0, 0, 0, 928,
	853, 0, 0, 0, 221, 222, 223, 224, 464, 894,
	873, 905, 863, 904, 903, 0, 228, 865, 864, 231,
	232, 233, 855, 927, 234, 963, 964, 470, 0, 235,
	934, 0, 917, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 937, 249, 250, 920, 918, 919, 924, 922, 921,
	923, 251, 252, 253, 254, 908, 256, 901, 900, 825,
	257, 0, 259, 258, 0, 260, 2011, 0, 261, 899,
	263, 0, 264, 0, 265, 266, 0, 831, 267, 268,
	270, 273, 269, 274, 275, 276, 954, 955, 844, 212,
	0, 0, 0, 0, 0, 277, 278, 279, 898, 896,
	897, 0, 282, 0, 283, 0, 0, 938, 284, 285,
	0, 286, 961, 0, 854, 287, 0, 288, 289, 290,
	291, 929, 930, 933, 339, 940, 292, 293, 0, 294,
	295, 875, 0, 0, 0, 213, 296, 298, 305, 0,
	939, 299, 887, 878, 889, 891, 892, 893, 888, 0,
	880, 0, 306, 941, 931, 942, 307, 308, 309, 943,
	913, 914, 0, 0, 312, 313, 314, 315, 0, 317,
	316, 0, 318, 962, 944, 319, 320, 945, 0, 321,
	322, 0, 0, 323, 324, 0, 325, 326, 328, 330,
	327, 329, 331, 333, 867, 332, 946, 335, 336, 338,
	337, 822, 214, 947, 845, 932, 902, 340, 341, 0,
	876, 343, 877, 0, 0, 346, 347, 348, 0, 0,
	349, 490, 948, 350, 949, 956, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 957, 360, 493,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	895, 369, 370, 0, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 0, 384,
	950, 385, 386, 387, 388, 832, 389, 0, 390, 394,
	395, 396, 397, 398, 399, 400, 0, 407, 408, 868,
	869, 871, 872, 402, 406, 409, 410, 925, 411, 391,
	392, 412, 951, 413, 890, 870, 415, 0, 425, 416,
	417, 418, 393, 419, 423, 936, 420, 421, 422, 958,
	0, 427, 428, 426, 0, 429, 430, 431, 432, 433,
	271, 434, 272, 866, 0, 909, 910, 911, 912, 0,
	442, 0, 436, 437, 959, 438, 960, 843, 439, 440,
	441, 0, 443, 444, 0, 826, 445, 446, 447, 448,
	449, 451, 926, 452, 0, 874, 453, 454, 455, 504,
	906, 953, 2009, 457, 456, 507, 0, 0, 0, 0,
	458, 459, 508, 460, 461, 462, 823, 0, 0, 0,
	0, 0, 0, 0, 821, 0, 0, 0, 0, 819,
	820, 2012, 0, 0, 0, 0, 0, 0, 849, 2008,
	0, 0, 812, 847, 879, 836, 837, 838, 834, 835,
	848, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 928, 853, 0, 0, 0, 221, 222, 223,
	224, 464, 894, 873, 905, 863, 904, 903, 0, 228,
	865, 864, 231, 232, 233, 855, 927, 234, 963, 964,
	470, 0, 235, 934, 0, 917, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 937, 249, 250, 920, 918, 919,
	924, 922, 921, 923, 251, 252, 253, 254, 908, 256,
	901, 900, 825, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 899, 263, 0, 264, 0, 265, 266, 0,
	831, 267, 268, 270, 273, 269, 274, 275, 276, 954,
	955, 844, 212, 0, 0, 0, 0, 0, 277, 278,
	279, 898, 896, 897, 0, 282, 0, 283, 0, 0,
	938, 284, 285, 0, 286, 961, 0, 854, 287, 0,
	288, 289, 290, 291, 929, 930, 933, 339, 940, 292,
	293, 0, 294, 295, 875, 0, 0, 0, 213, 296,
	298, 305, 0, 939, 299, 887, 878, 889, 891, 892,
	893, 888, 0, 880, 0, 306, 941, 931, 942, 307,
	308, 309, 943, 913, 914, 0, 0, 312, 313, 314,
	315, 0, 317, 316, 0, 318, 962, 944, 319, 320,
	945, 0, 321, 322, 0, 0, 323, 324, 0, 325,
	326, 328, 330, 327, 329, 331, 333, 867, 332, 946,
	335, 336, 338, 337, 822, 214, 947, 845, 932, 902,
	340, 341, 0, 876, 343, 877, 0, 0, 346, 347,
	348, 0, 0, 349, 490, 948, 350, 949, 956, 351,
	345, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	957, 360, 493, 361, 0, 362, 0, 363, 364, 365,
	366, 367, 368, 895, 369, 370, 0, 371, 372, 373,
	374, 375, 0, 377, 378, 379, 376, 380, 381, 382,
	383, 0, 384, 950, 385, 386, 387, 388, 832, 389,
	0, 390, 394, 395, 396, 397, 398, 399, 400, 178,
	407, 408, 868, 869, 871, 872, 402, 406, 409, 410,
	925, 411, 391, 392, 412, 951, 413, 890, 870, 415,
	0, 425, 416, 417, 418, 393, 419, 423, 936, 420,
	421, 422, 958, 0, 427, 428, 426, 180, 429, 430,
	431, 432, 433, 271, 434, 272, 866, 0, 909, 910,
	911, 912, 0, 442, 0, 436, 437, 959, 438, 960,
	843, 439, 440, 441, 0, 443, 444, 0, 826, 445,
	446, 447, 448, 449, 451, 926, 452, 0, 874, 453,
	454, 455, 1304, 906, 953, 0, 457, 456, 507, 0,
	0, 0, 172, 458, 459, 508, 460, 461, 462, 823,
	173, 0, 0, 0, 0, 0, 0, 821, 0, 0,
	0, 0, 819, 820, 879, 836, 837, 838, 834, 835,
	848, 1495, 1493, 0, 0, 0, 847, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 928, 853, 0, 0, 0, 221, 222, 223,
	224, 464, 894, 873, 905, 863, 904, 903, 0, 228,
	865, 864, 231, 232, 233, 855, 927, 234, 963, 964,
	470, 0, 235, 934, 0, 917, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 937, 249, 250, 920, 918, 919,
	924, 922, 921, 923, 251, 252, 253, 254, 908, 256,
	901, 900, 825, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 899, 263, 0, 264, 0, 265, 266, 0,
	831, 267, 268, 270, 273, 269, 274, 275, 276, 954,
	955, 844, 212, 0, 0, 0, 0, 0, 277, 278,
	279, 898, 896, 897, 0, 282, 0, 283, 0, 0,
	938, 284, 285, 0, 286, 961, 0, 854, 287, 0,
	288, 289, 290, 291, 929, 930, 933, 339, 940, 292,
	293, 0, 294, 295, 875, 0, 0, 0, 213, 296,
	298, 305, 0, 939, 299, 887, 878, 889, 891, 892,
	893, 888, 0, 880, 0, 306, 941, 931, 942, 307,
	308, 309, 943, 913, 914, 0, 0, 312, 313, 314,
	315, 0, 317, 316, 0, 318, 962, 944, 319, 320,
	945, 0, 321, 322, 0, 0, 323, 324, 0, 325,
	326, 328, 330, 327, 329, 331, 333, 867, 332, 946,
	335, 336, 338, 337, 822, 214, 947, 845, 932, 902,
	340, 341, 0, 876, 343, 877, 0, 0, 346, 347,
	348, 0, 0, 349, 490, 948, 350, 949, 956, 351,
	345, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	957, 360, 493, 361, 0, 362, 0, 363, 364, 365,
	366, 367, 368, 895, 369, 370, 0, 371, 372, 373,
	374, 375, 0, 377, 378, 379, 376, 380, 381, 382,
	383, 0, 384, 950, 385, 386, 387, 388, 832, 389,
	0, 390, 394, 395, 396, 397, 398, 399, 400, 178,
	407, 408, 868, 869, 871, 872, 402, 406, 409, 410,
	925, 411, 391, 392, 412, 951, 413, 890, 870, 415,
	0, 425, 416, 417, 418, 393, 419, 423, 936, 420,
	421, 422, 958, 0, 427, 428, 426, 180, 429, 430,
	431, 432, 433, 271, 434, 272, 866, 0, 909, 910,
	911, 912, 0, 442, 0, 436, 437, 959, 438, 960,
	843, 439, 440, 441, 0, 443, 444, 0, 826, 445,
	446, 447, 448, 449, 451, 926, 452, 0, 874, 453,
	454, 455, 1304, 906, 953, 0, 457, 456, 507, 0,
	0, 0, 172, 458, 459, 508, 460, 461, 462, 823,
	173, 0, 0, 0, 0, 0, 0, 821, 0, 0,
	0, 0, 819, 820, 879, 836, 837, 838, 834, 835,
	848, 1495, 2426, 0, 0, 0, 847, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 928, 853, 0, 0, 0, 221, 222, 223,
	224, 464, 894, 873, 905, 863, 904, 903, 0, 228,
	865, 864, 231, 232, 233, 855, 927, 234, 963, 964,
	470, 0, 235, 934, 0, 917, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 937, 249, 250, 920, 918, 919,
	924, 922, 921, 923, 251, 252, 253, 254, 908, 256,
	901, 900, 825, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 899, 263, 0, 264, 0, 265, 266, 0,
	831, 267, 268, 270, 273, 269, 274, 275, 276, 954,
	955, 844, 212, 0, 0, 0, 0, 0, 277, 278,
	279, 898, 896, 897, 0, 282, 0, 283, 0, 0,
	938, 284, 285, 0, 286, 961, 0, 854, 287, 0,
	288, 289, 290, 291, 929, 930, 933, 339, 940, 292,
	293, 0, 294, 295, 875, 0, 0, 0, 213, 296,
	298, 305, 0, 939, 299, 887, 878, 889, 891, 892,
	893, 888, 0, 880, 0, 306, 941, 931, 942, 307,
	308, 309, 943, 913, 914, 0, 0, 312, 313, 314,
	315, 0, 317, 316, 0, 318, 962, 944, 319, 320,
	945, 0, 321, 322, 0, 0, 323, 324, 0, 325,
	326, 328, 330, 327, 329, 331, 333, 867, 332, 946,
	335, 336, 338, 337, 822, 214, 947, 845, 932, 902,
	340, 341, 0, 876, 343, 877, 0, 0, 346, 347,
	348, 0, 0, 349, 490, 948, 350, 949, 956, 351,
	345, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	957, 360, 493, 361, 0, 362, 0, 363, 364, 365,
	366, 367, 368, 895, 369, 370, 0, 371, 372, 373,
	374, 375, 0, 377, 378, 379, 376, 380, 381, 382,
	383, 0, 384, 950, 385, 386, 387, 388, 832, 389,
	0, 390, 394, 395, 396, 397, 398, 399, 400, 178,
	407, 408, 868, 869, 871, 872, 402, 406, 409, 410,
	925, 411, 391, 392, 412, 951, 413, 890, 870, 415,
	0, 425, 416, 417, 418, 393, 419, 423, 936, 420,
	421, 422, 958, 0, 427, 428, 426, 180, 429, 430,
	431, 432, 433, 271, 434, 272, 866, 0, 909, 910,
	911, 912, 0, 442, 0, 436, 437, 959, 438, 960,
	843, 439, 440, 441, 0, 443, 444, 0, 826, 445,
	446, 447, 448, 449, 451, 926, 452, 0, 874, 453,
	454, 455, 1304, 906, 953, 0, 457, 456, 507, 0,
	0, 0, 172, 458, 459, 508, 460, 461, 462, 823,
	173, 0, 0, 0, 0, 0, 0, 821, 0, 0,
	0, 0, 819, 820, 879, 836, 837, 838, 834, 835,
	848, 1495, 1493, 0, 0, 0, 847, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 928, 853, 0, 0, 0, 221, 222, 223,
	224, 464, 894, 873, 905, 863, 904, 903, 2098, 228,
	865, 864, 231, 232, 233, 855, 927, 234, 963, 964,
	470, 0, 235, 934, 0, 917, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 937, 249, 250, 920, 918, 919,
	924, 922, 921, 923, 251, 252, 253, 254, 908, 256,
	901, 900, 825, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 899, 263, 0, 264, 0, 265, 266, 0,
	831, 267, 268, 270, 273, 269, 274, 275, 276, 954,
	955, 844, 212, 0, 0, 0, 0, 0, 277, 278,
	279, 898, 896, 897, 0, 282, 0, 283, 0, 2103,
	938, 284, 285, 0, 286, 961, 0, 854, 287, 0,
	288, 289, 290, 291, 929, 930, 933, 339, 940, 292,
	293, 0, 294, 295, 875, 0, 0, 0, 213, 296,
	298, 305, 0, 939, 299, 887, 878, 889, 891, 892,
	893, 888, 0, 880, 0, 306, 941, 931, 942, 307,
	308, 309, 943, 913, 914, 0, 0, 312, 313, 314,
	315, 0, 317, 316, 2099, 318, 962, 944, 319, 320,
	945, 0, 321, 322, 0, 0, 323, 324, 0, 325,
	326, 328, 330, 327, 329, 331, 333, 867, 332, 946,
	335, 336, 338, 337, 822, 214, 947, 845, 932, 902,
	340, 341, 0, 876, 343, 877, 0, 0, 346, 347,
	348, 0, 0, 349, 490, 948, 350, 949, 956, 351,
	345, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	957, 360, 493, 361, 0, 362, 0, 363, 364, 365,
	366, 367, 368, 895, 369, 370, 0, 371, 372, 373,
	374, 375, 0, 377, 378, 379, 376, 380, 381, 382,
	383, 0, 384, 950, 385, 386, 387, 388, 832, 389,
	0, 390, 394, 395, 396, 397, 398, 399, 400, 0,
	407, 408, 868, 869, 871, 872, 402, 406, 409, 410,
	925, 411, 391, 392, 412, 951, 413, 890, 870, 415,
	0, 425, 416, 417, 418, 393, 419, 423, 936, 420,
	421, 422, 958, 0, 427, 428, 426, 0, 429, 430,
	431, 432, 433, 271, 434, 272, 866, 0, 909, 910,
	911, 912, 0, 442, 2100, 436, 437, 959, 438, 960,
	843, 439, 440, 441, 0, 443, 444, 0, 826, 445,
	446, 447, 448, 449, 451, 926, 452, 0, 874, 453,
	454, 455, 504, 906, 953, 0, 457, 456, 507, 0,
	0, 0, 0, 458, 459, 508, 460, 461, 462, 823,
	0, 0, 0, 0, 0, 0, 0, 821, 0, 0,
	0, 0, 819, 820, 0, 0, 0, 0, 0, 0,
	0, 849, 0, 0, 0, 815, 847, 879, 836, 837,
	838, 834, 835, 848, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 928, 853, 0, 0, 0,
	221, 222, 223, 224, 464, 894, 873, 905, 863, 904,
	903, 0, 228, 865, 864, 231, 232, 233, 855, 927,
	234, 963, 964, 470, 0, 235, 934, 0, 917, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 937, 249, 250,
	920, 918, 919, 924, 922, 921, 923, 251, 252, 253,
	254, 908, 256, 901, 900, 825, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 899, 263, 0, 264, 0,
	265, 266, 0, 831, 267, 268, 270, 273, 269, 274,
	275, 276, 954, 955, 844, 212, 0, 0, 0, 0,
	0, 277, 278, 279, 898, 896, 897, 0, 282, 0,
	283, 0, 0, 938, 284, 285, 0, 286, 961, 0,
	854, 287, 0, 288, 289, 290, 291, 929, 930, 933,
	339, 940, 292, 293, 0, 294, 295, 875, 0, 0,
	0, 213, 296, 298, 305, 0, 939, 299, 887, 878,
	889, 891, 892, 893, 888, 0, 880, 0, 306, 941,
	931, 942, 307, 308, 309, 943, 913, 914, 0, 0,
	312, 313, 314, 315, 0, 317, 316, 0, 318, 962,
	944, 319, 320, 945, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	867, 332, 946, 335, 336, 338, 337, 822, 214, 947,
	845, 932, 902, 340, 341, 0, 876, 343, 877, 827,
	0, 346, 347, 348, 0, 0, 349, 490, 948, 350,
	949, 956, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 957, 360, 493, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 895, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 950, 385, 386, 387,
	388, 832, 389, 0, 390, 394, 395, 396, 397, 398,
	399, 400, 0, 407, 408, 868, 869, 871, 872, 402,
	406, 409, 410, 925, 411, 391, 392, 412, 951, 413,
	890, 870, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 936, 420, 421, 422, 958, 0, 427, 428, 426,
	0, 429, 430, 431, 432, 433, 271, 434, 272, 866,
	0, 909, 910, 911, 912, 0, 442, 0, 436, 437,
	959, 438, 960, 843, 439, 440, 441, 0, 443, 444,
	0, 826, 445, 446, 447, 448, 449, 451, 926, 452,
	0, 874, 453, 454, 455, 504, 906, 953, 0, 457,
	456, 507, 0, 0, 0, 0, 458, 459, 508, 460,
	461, 462, 823, 0, 0, 0, 0, 0, 0, 0,
	821, 0, 0, 0, 0, 819, 820, 879, 836, 837,
	838, 834, 835, 848, 849, 0, 0, 0, 0, 847,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 928, 853, 0, 0, 0,
	221, 222, 223, 224, 464, 894, 873, 905, 863, 904,
	903, 0, 228, 865, 864, 231, 232, 233, 855, 927,
	234, 963, 964, 470, 0, 235, 934, 0, 917, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 3353, 248, 0, 937, 249, 250,
	920, 918, 919, 924, 922, 921, 923, 251, 252, 253,
	254, 908, 256, 901, 900, 825, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 899, 263, 0, 264, 0,
	265, 266, 0, 831, 267, 268, 270, 273, 269, 274,
	275, 276, 954, 955, 844, 212, 0, 0, 0, 0,
	0, 277, 278, 279, 898, 896, 897, 0, 282, 0,
	283, 0, 0, 938, 284, 285, 0, 286, 961, 0,
	854, 287, 0, 288, 289, 290, 291, 929, 930, 933,
	339, 940, 292, 293, 0, 294, 295, 875, 0, 0,
	0, 213, 296, 298, 305, 0, 939, 299, 887, 878,
	889, 891, 892, 893, 888, 0, 880, 0, 306, 941,
	931, 942, 307, 308, 309, 943, 913, 914, 0, 0,
	312, 313, 314, 315, 0, 317, 316, 0, 318, 962,
	944, 319, 320, 945, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	867, 332, 946, 335, 336, 338, 337, 822, 214, 947,
	845, 932, 902, 340, 341, 0, 876, 343, 877, 827,
	0, 346, 347, 348, 0, 0, 349, 490, 948, 350,
	949, 956, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 957, 360, 493, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 895, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 950, 385, 386, 387,
	388, 832, 389, 0, 390, 394, 395, 396, 397, 398,
	399, 400, 0, 407, 408, 868, 869, 871, 872, 402,
	406, 409, 410, 925, 411, 391, 392, 412, 951, 413,
	890, 870, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 936, 420, 421, 422, 958, 0, 427, 428, 426,
	0, 429, 430, 431, 432, 433, 271, 434, 272, 866,
	0, 909, 910, 911, 912, 0, 442, 0, 436, 437,
	959, 438, 960, 843, 439, 440, 441, 0, 443, 444,
	0, 826, 445, 446, 447, 448, 449, 451, 926, 452,
	0, 874, 453, 454, 455, 504, 906, 953, 0, 457,
	456, 507, 0, 0, 0, 0, 458, 459, 508, 460,
	461, 462, 823, 0, 0, 0, 0, 0, 0, 0,
	821, 0, 0, 0, 0, 819, 820, 879, 836, 837,
	838, 834, 835, 848, 849, 0, 0, 0, 0, 847,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 928, 853, 0, 0, 0,
	221, 222, 223, 224, 464, 894, 873, 905, 863, 904,
	903, 0, 228, 865, 864, 231, 232, 233, 855, 927,
	234, 963, 964, 470, 0, 235, 934, 0, 917, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 3219, 248, 0, 937, 249, 250,
	920, 918, 919, 924, 922, 921, 923, 251, 252, 253,
	254, 908, 256, 901, 900, 825, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 899, 263, 0, 264, 0,
	265, 266, 0, 831, 267, 268, 270, 273, 269, 274,
	275, 276, 954, 955, 844, 212, 0, 0, 0, 0,
	0, 277, 278, 279, 898, 896, 897, 0, 282, 0,
	283, 0, 0, 938, 284, 285, 0, 286, 961, 0,
	854, 287, 0, 288, 289, 290, 291, 929, 930, 933,
	339, 940, 292, 293, 0, 294, 295, 875, 0, 0,
	0, 213, 296, 298, 305, 0, 939, 299, 887, 878,
	889, 891, 892, 893, 888, 0, 880, 0, 306, 941,
	931, 942, 307, 308, 309, 943, 913, 914, 0, 0,
	312, 313, 314, 315, 0, 317, 316, 0, 318, 962,
	944, 319, 320, 945, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	867, 332, 946, 335, 336, 338, 337, 822, 214, 947,
	845, 932, 902, 340, 341, 0, 876, 343, 877, 827,
	0, 346, 347, 348, 0, 0, 349, 490, 948, 350,
	949, 956, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 957, 360, 493, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 895, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 950, 385, 386, 387,
	388, 832, 389, 0, 390, 394, 395, 396, 397, 398,
	399, 400, 0, 407, 408, 868, 869, 871, 872, 402,
	406, 409, 410, 925, 411, 391, 392, 412, 951, 413,
	890, 870, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 936, 420, 421, 422, 958, 0, 427, 428, 426,
	0, 429, 430, 431, 432, 433, 271, 434, 272, 866,
	0, 909, 910, 911, 912, 0, 442, 0, 436, 437,
	959, 438, 960, 843, 439, 440, 441, 0, 443, 444,
	0, 826, 445, 446, 447, 448, 449, 451, 926, 452,
	0, 874, 453, 454, 455, 504, 906, 953, 0, 457,
	456, 507, 0, 0, 0, 0, 458, 459, 508, 460,
	461, 462, 823, 0, 0, 0, 0, 0, 0, 0,
	821, 0, 0, 0, 0, 819, 820, 879, 836, 837,
	838, 834, 835, 848, 849, 0, 0, 0, 0, 847,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 928, 853, 0, 0, 0,
	221, 222, 223, 224, 464, 894, 873, 905, 863, 904,
	903, 0, 228, 865, 864, 231, 232, 233, 855, 927,
	234, 963, 964, 470, 0, 235, 934, 0, 917, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 937, 249, 250,
	920, 918, 919, 924, 922, 921, 923, 251, 252, 253,
	254, 908, 256, 901, 900, 825, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 899, 263, 0, 264, 0,
	265, 266, 0, 831, 267, 268, 270, 273, 269, 274,
	275, 276, 954, 955, 844, 212, 0, 0, 0, 0,
	0, 277, 278, 279, 898, 896, 897, 0, 282, 0,
	283, 0, 0, 938, 284, 285, 0, 286, 961, 0,
	854, 287, 0, 288, 289, 290, 291, 929, 930, 933,
	339, 940, 292, 293, 0, 294, 295, 875, 0, 0,
	0, 213, 296, 298, 305, 0, 939, 299, 887, 878,
	889, 891, 892, 893, 888, 0, 880, 0, 306, 941,
	931, 942, 307, 308, 309, 943, 913, 914, 0, 0,
	312, 313, 314, 315, 0, 317, 316, 0, 318, 962,
	944, 319, 320, 945, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	867, 332, 946, 335, 336, 338, 337, 822, 2966, 947,
	845, 932, 902, 340, 341, 0, 876, 343, 877, 0,
	0, 346, 347, 348, 0, 0, 349, 490, 948, 350,
	949, 956, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 957, 360, 493, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 895, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 950, 385, 386, 387,
	388, 832, 389, 0, 390, 394, 395, 396, 397, 398,
	399, 400, 0, 407, 408, 868, 869, 871, 872, 402,
	406, 409, 410, 925, 411, 391, 392, 412, 951, 413,
	890, 870, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 936, 420, 421, 422, 958, 0, 427, 428, 426,
	0, 429, 430, 431, 432, 433, 271, 434, 272, 866,
	0, 909, 910, 911, 912, 0, 442, 0, 436, 437,
	959, 438, 960, 843, 439, 440, 441, 0, 443, 444,
	0, 826, 445, 446, 447, 448, 449, 451, 926, 452,
	0, 874, 453, 454, 455, 504, 906, 953, 0, 457,
	456, 507, 0, 0, 0, 0, 458, 459, 508, 460,
	461, 462, 823, 0, 0, 0, 0, 0, 0, 0,
	821, 0, 0, 0, 0, 819, 820, 1555, 0, 0,
	0, 0, 0, 0, 849, 0, 0, 0, 0, 847,
	879, 836, 837, 838, 834, 835, 848, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 928, 853,
	0, 0, 0, 221, 222, 223, 224, 464, 894, 873,
	905, 863, 904, 903, 0, 228, 865, 864, 231, 232,
	233, 855, 927, 234, 963, 964, 470, 0, 235, 934,
	0, 917, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	937, 249, 250, 920, 918, 919, 924, 922, 921, 923,
	251, 252, 253, 254, 908, 256, 901, 900, 825, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 899, 263,
	0, 264, 0, 265, 266, 0, 831, 267, 268, 270,
	273, 269, 274, 275, 276, 954, 955, 844, 212, 0,
	0, 0, 0, 0, 277, 278, 279, 898, 896, 897,
	0, 282, 0, 283, 0, 0, 938, 284, 285, 0,
	286, 961, 0, 854, 287, 0, 288, 289, 290, 291,
	929, 930, 933, 339, 940, 292, 293, 0, 294, 295,
	875, 0, 0, 0, 213, 296, 298, 305, 0, 939,
	299, 887, 878, 889, 891, 892, 893, 888, 0, 880,
	0, 306, 941, 931, 942, 307, 308, 309, 943, 913,
	914, 0, 0, 312, 313, 314, 315, 0, 317, 316,
	0, 318, 962, 944, 319, 320, 945, 0, 321, 322,
	0, 0, 323, 324, 0, 325, 326, 328, 330, 327,
	329, 331, 333, 867, 332, 946, 335, 336, 338, 337,
	822, 214, 947, 845, 932, 902, 340, 341, 0, 876,
	343, 877, 0, 0, 346, 347, 348, 0, 0, 349,
	490, 948, 350, 949, 956, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 957, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 895,
	369, 370, 0, 371, 372, 373, 374, 375, 0, 377,
	378, 379, 376, 380, 381, 382, 383, 0, 384, 950,
	385, 386, 387, 388, 832, 389, 0, 390, 394, 395,
	396, 397, 398, 399, 400, 0, 407, 408, 868, 869,
	871, 872, 402, 406, 409, 410, 925, 411, 391, 392,
	412, 951, 413, 890, 870, 415, 0, 425, 416, 417,
	418, 393, 419, 423, 936, 420, 421, 422, 958, 0,
	427, 428, 426, 0, 429, 430, 431, 432, 433, 271,
	434, 272, 866, 0, 909, 910, 911, 912, 0, 442,
	0, 436, 437, 959, 438, 960, 843, 439, 440, 441,
	0, 443, 444, 0, 826, 445, 446, 447, 448, 449,
	451, 926, 452, 0, 874, 453, 454, 455, 504, 906,
	953, 2778, 457, 456, 507, 0, 0, 0, 0, 458,
	459, 508, 460, 461, 462, 823, 0, 0, 0, 0,
	0, 0, 0, 821, 0, 0, 0, 0, 819, 820,
	879, 836, 837, 838, 834, 835, 848, 849, 0, 0,
	0, 0, 847, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 928, 853,
	0, 0, 0, 221, 222, 223, 224, 464, 894, 873,
	905, 863, 904, 903, 0, 228, 865, 864, 231, 232,
	233, 855, 927, 234, 963, 964, 470, 0, 235, 934,
	0, 917, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	937, 249, 250, 920, 918, 919, 924, 922, 921, 923,
	251, 252, 253, 254, 908, 256, 901, 900, 825, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 899, 263,
	0, 264, 0, 265, 266, 0, 831, 267, 268, 270,
	273, 269, 274, 275, 276, 954, 955, 844, 212, 0,
	0, 0, 0, 0, 277, 278, 279, 898, 896, 897,
	0, 282, 0, 283, 0, 0, 938, 284, 285, 0,
	286, 961, 0, 854, 287, 0, 288, 289, 290, 291,
	929, 930, 933, 339, 940, 292, 293, 0, 294, 295,
	875, 0, 0, 0, 1927, 296, 298, 305, 0, 939,
	299, 887, 878, 889, 891, 892, 893, 888, 0, 880,
	0, 306, 941, 931, 942, 307, 308, 309, 943, 913,
	914, 0, 0, 312, 313, 314, 315, 0, 317, 316,
	0, 318, 962, 944, 319, 320, 945, 0, 321, 322,
	0, 0, 323, 324, 0, 325, 326, 328, 330, 327,
	329, 331, 333, 867, 332, 946, 335, 336, 338, 337,
	822, 214, 947, 845, 932, 902, 340, 341, 0, 876,
	343, 877, 0, 0, 346, 347, 348, 0, 0, 349,
	490, 948, 350, 949, 956, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 957, 360, 493, 361,
	1926, 362, 0, 363, 364, 365, 366, 367, 368, 895,
	369, 370, 0, 371, 372, 373, 374, 375, 0, 377,
	378, 379, 376, 380, 381, 382, 383, 0, 384, 950,
	385, 386, 387, 388, 832, 389, 0, 390, 394, 395,
	396, 397, 398, 399, 400, 0, 407, 408, 868, 869,
	871, 872, 402, 406, 409, 410, 925, 411, 391, 392,
	412, 951, 413, 890, 870, 415, 0, 425, 416, 417,
	418, 393, 419, 423, 936, 420, 421, 422, 958, 0,
	427, 428, 426, 0, 429, 430, 431, 432, 433, 271,
	434, 272, 866, 0, 909, 910, 911, 912, 0, 442,
	0, 436, 437, 959, 438, 960, 843, 439, 440, 441,
	0, 443, 444, 0, 826, 445, 446, 447, 448, 449,
	451, 926, 452, 0, 874, 453, 454, 455, 504, 906,
	953, 0, 457, 456, 507, 0, 0, 0, 0, 458,
	459, 508, 460, 461, 462, 823, 0, 0, 0, 0,
	0, 0, 0, 821, 0, 0, 0, 0, 819, 820,
	879, 836, 837, 838, 834, 835, 848, 849, 0, 0,
	0, 0, 847, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 928, 853,
	0, 0, 0, 221, 222, 223, 224, 464, 894, 873,
	905, 863, 904, 903, 0, 228, 865, 864, 231, 232,
	233, 855, 927, 234, 963, 964, 470, 0, 235, 934,
	0, 917, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	937, 249, 250, 920, 918, 919, 924, 922, 921, 923,
	251, 252, 253, 254, 908, 256, 901, 900, 825, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 899, 263,
	0, 264, 0, 265, 266, 0, 831, 267, 268, 270,
	273, 269, 274, 275, 276, 954, 955, 844, 212, 0,
	0, 0, 0, 0, 277, 278, 279, 898, 896, 897,
	0, 282, 0, 283, 0, 0, 938, 284, 285, 0,
	286, 961, 0, 854, 287, 0, 288, 289, 290, 291,
	929, 930, 933, 339, 940, 292, 293, 0, 294, 295,
	875, 0, 0, 0, 213, 296, 298, 305, 0, 939,
	299, 887, 878, 889, 891, 892, 893, 888, 0, 880,
	0, 306, 941, 931, 942, 307, 308, 309, 943, 913,
	914, 0, 0, 312, 313, 314, 315, 0, 317, 316,
	0, 318, 962, 944, 319, 320, 945, 0, 321, 322,
	0, 0, 323, 324, 0, 325, 326, 328, 330, 327,
	329, 331, 333, 867, 332, 946, 335, 336, 338, 337,
	822, 214, 947, 845, 932, 902, 340, 341, 0, 876,
	343, 877, 827, 0, 346, 347, 348, 0, 0, 349,
	490, 948, 350, 949, 956, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 957, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 895,
	369, 370, 0, 371, 372, 373, 374, 375, 0, 377,
	378, 379, 376, 380, 381, 382, 383, 0, 384, 950,
	385, 386, 387, 388, 832, 389, 0, 390, 394, 395,
	396, 397, 398, 399, 400, 0, 407, 408, 868, 869,
	871, 872, 402, 406, 409, 410, 925, 411, 391, 392,
	412, 951, 413, 890, 870, 415, 0, 425, 416, 417,
	418, 393, 419, 423, 936, 420, 421, 422, 958, 0,
	427, 428, 426, 0, 429, 430, 431, 432, 433, 271,
	434, 272, 866, 0, 909, 910, 911, 912, 0, 442,
	0, 436, 437, 959, 438, 960, 843, 439, 440, 441,
	0, 443, 444, 0, 826, 445, 446, 447, 448, 449,
	451, 926, 452, 0, 874, 453, 454, 455, 504, 906,
	953, 0, 457, 456, 507, 0, 0, 0, 0, 458,
	459, 508, 460, 461, 462, 823, 0, 0, 0, 0,
	0, 0, 0, 821, 0, 0, 0, 0, 819, 820,
	879, 836, 837, 838, 834, 835, 848, 849, 0, 0,
	0, 0, 847, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 928, 853,
	0, 0, 0, 221, 222, 223, 224, 464, 894, 873,
	905, 863, 904, 903, 0, 228, 865, 864, 231, 232,
	233, 855, 927, 234, 963, 964, 470, 0, 235, 934,
	0, 917, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	937, 249, 250, 920, 918, 919, 924, 922, 921, 923,
	251, 252, 253, 254, 908, 256, 901, 900, 825, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 899, 263,
	0, 264, 0, 265, 266, 0, 831, 267, 268, 270,
	273, 269, 274, 275, 276, 954, 955, 844, 212, 0,
	0, 0, 0, 0, 277, 278, 279, 898, 896, 897,
	0, 282, 0, 283, 0, 0, 938, 284, 285, 0,
	286, 961, 0, 854, 287, 0, 288, 289, 290, 291,
	929, 930, 933, 339, 940, 292, 293, 0, 294, 295,
	875, 0, 0, 0, 213, 296, 298, 305, 0, 939,
	299, 887, 878, 889, 891, 892, 893, 888, 0, 880,
	0, 306, 941, 931, 942, 307, 308, 309, 943, 913,
	914, 0, 0, 312, 313, 314, 315, 0, 317, 316,
	0, 318, 962, 944, 319, 320, 945, 0, 321, 322,
	0, 0, 323, 324, 0, 325, 326, 328, 330, 327,
	329, 331, 333, 867, 332, 946, 335, 336, 338, 337,
	822, 214, 947, 845, 932, 902, 340, 341, 0, 876,
	343, 877, 0, 0, 346, 347, 348, 0, 0, 349,
	490, 948, 350, 949, 956, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 957, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 895,
	369, 370, 0, 371, 372, 373, 374, 375, 0, 377,
	378, 379, 376, 380, 381, 382, 383, 0, 384, 950,
	385, 386, 387, 388, 832, 389, 0, 390, 394, 395,
	396, 397, 398, 399, 400, 0, 407, 408, 868, 869,
	871, 872, 402, 406, 409, 410, 925, 411, 391, 392,
	412, 951, 413, 890, 870, 415, 0, 425, 416, 417,
	418, 393, 419, 423, 936, 420, 421, 422, 958, 0,
	427, 428, 426, 0, 429, 430, 431, 432, 433, 271,
	434, 272, 866, 0, 909, 910, 911, 912, 0, 442,
	0, 436, 437, 959, 438, 960, 843, 439, 440, 441,
	0, 443, 444, 0, 826, 445, 446, 447, 448, 449,
	451, 926, 452, 0, 874, 453, 454, 455, 504, 906,
	953, 0, 457, 456, 507, 0, 0, 0, 0, 458,
	459, 508, 460, 461, 462, 823, 0, 0, 0, 0,
	0, 0, 0, 821, 0, 0, 0, 0, 819, 820,
	1555, 0, 0, 0, 0, 0, 0, 849, 0, 0,
	0, 0, 847, 879, 836, 837, 838, 834, 835, 848,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 928, 853, 0, 0, 0, 221, 222, 223, 224,
	464, 894, 873, 905, 863, 904, 903, 0, 228, 865,
	864, 231, 232, 233, 855, 927, 234, 963, 964, 470,
	0, 235, 934, 0, 917, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 937, 249, 250, 920, 918, 919, 924,
	922, 921, 923, 251, 252, 253, 254, 908, 256, 901,
	900, 825, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 899, 263, 0, 264, 0, 265, 266, 0, 831,
	267, 268, 270, 273, 269, 274, 275, 276, 954, 955,
	844, 212, 0, 0, 0, 0, 0, 277, 278, 279,
	898, 896, 897, 0, 282, 0, 283, 0, 2103, 938,
	284, 285, 0, 286, 961, 0, 854, 287, 0, 288,
	289, 290, 291, 929, 930, 933, 339, 940, 292, 293,
	0, 294, 295, 875, 0, 0, 0, 213, 296, 298,
	305, 0, 939, 299, 887, 878, 889, 891, 892, 893,
	888, 0, 880, 0, 306, 941, 931, 942, 307, 308,
	309, 943, 913, 914, 0, 0, 312, 313, 314, 315,
	0, 317, 316, 0, 318, 962, 944, 319, 320, 945,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 867, 332, 946, 335,
	336, 338, 337, 822, 214, 947, 845, 932, 902, 340,
	341, 0, 876, 343, 877, 0, 0, 346, 347, 348,
	0, 0, 349, 490, 948, 350, 949, 956, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 957,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 895, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 950, 385, 386, 387, 388, 832, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 0, 407,
	408, 868, 869, 871, 872, 402, 406, 409, 410, 925,
	411, 391, 392, 412, 951, 413, 890, 870, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 936, 420, 421,
	422, 958, 0, 427, 428, 426, 0, 429, 430, 431,
	432, 433, 271, 434, 272, 866, 0, 909, 910, 911,
	912, 0, 442, 0, 436, 437, 959, 438, 960, 843,
	439, 440, 441, 0, 443, 444, 0, 826, 445, 446,
	447, 448, 449, 451, 926, 452, 0, 874, 453, 454,
	455, 504, 906, 953, 0, 457, 456, 507, 0, 0,
	0, 0, 458, 459, 508, 460, 461, 462, 823, 0,
	0, 0, 0, 0, 0, 0, 821, 0, 0, 0,
	0, 819, 820, 879, 836, 837, 838, 834, 835, 848,
	849, 0, 0, 0, 0, 847, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 928, 853, 0, 0, 0, 221, 222, 223, 224,
	464, 894, 873, 905, 863, 904, 903, 0, 228, 865,
	864, 231, 232, 233, 855, 927, 234, 963, 964, 470,
	0, 235, 934, 0, 917, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 937, 249, 250, 920, 918, 919, 924,
	922, 921, 923, 251, 252, 253, 254, 908, 256, 901,
	900, 825, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 899, 263, 0, 264, 0, 265, 266, 0, 831,
	267, 268, 270, 273, 269, 274, 275, 276, 954, 955,
	844, 212, 0, 0, 0, 0, 0, 277, 278, 279,
	898, 896, 897, 0, 282, 0, 283, 0, 0, 938,
	284, 285, 0, 286, 961, 0, 854, 287, 0, 288,
	289, 290, 291, 929, 930, 933, 339, 940, 292, 293,
	0, 294, 295, 875, 0, 0, 0, 213, 296, 298,
	305, 0, 939, 299, 887, 878, 889, 891, 892, 893,
	888, 0, 880, 0, 306, 941, 931, 942, 307, 308,
	309, 943, 913, 914, 0, 0, 312, 313, 314, 315,
	0, 317, 316, 0, 318, 962, 944, 319, 320, 945,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 867, 332, 946, 335,
	336, 338, 337, 822, 214, 947, 845, 932, 902, 340,
	341, 0, 876, 343, 877, 0, 0, 346, 347, 348,
	0, 0, 349, 490, 948, 350, 949, 956, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 957,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 895, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 950, 385, 386, 387, 388, 832, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 0, 407,
	408, 868, 869, 871, 872, 402, 406, 409, 410, 925,
	411, 391, 392, 412, 951, 413, 890, 870, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 936, 420, 421,
	422, 958, 0, 427, 428, 426, 0, 429, 430, 431,
	432, 433, 271, 434, 272, 866, 0, 909, 910, 911,
	912, 0, 442, 0, 436, 437, 959, 438, 960, 843,
	439, 440, 441, 0, 443, 444, 0, 826, 445, 446,
	447, 448, 449, 451, 926, 452, 0, 874, 453, 454,
	455, 504, 906, 953, 0, 457, 456, 507, 0, 0,
	0, 0, 458, 459, 508, 460, 461, 462, 823, 0,
	0, 0, 0, 0, 0, 0, 821, 0, 0, 0,
	0, 819, 820, 0, 0, 0, 0, 0, 0, 0,
	849, 1493, 0, 0, 2108, 847, 879, 836, 837, 838,
	834, 835, 848, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 928, 853, 0, 0, 0, 221,
	222, 223, 224, 464, 894, 873, 905, 863, 904, 903,
	0, 228, 865, 864, 231, 232, 233, 855, 927, 234,
	963, 964, 470, 0, 235, 934, 0, 917, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 937, 249, 250, 920,
	918, 919, 924, 922, 921, 923, 251, 252, 253, 254,
	908, 256, 901, 900, 825, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 899, 263, 0, 264, 0, 265,
	266, 0, 831, 267, 268, 270, 273, 269, 274, 275,
	276, 954, 955, 844, 212, 0, 0, 0, 0, 0,
	277, 278, 279, 898, 896, 897, 0, 282, 0, 283,
	0, 0, 938, 284, 285, 0, 286, 961, 0, 854,
	287, 0, 288, 289, 290, 291, 929, 930, 933, 339,
	940, 292, 293, 0, 294, 295, 875, 0, 0, 0,
	213, 296, 298, 305, 0, 939, 299, 887, 878, 889,
	891, 892, 893, 888, 0, 880, 0, 306, 941, 931,
	942, 307, 308, 309, 943, 913, 914, 0, 0, 312,
	313, 314, 315, 0, 317, 316, 0, 318, 962, 944,
	319, 320, 945, 0, 321, 322, 0, 0, 323, 324,
	0, 325, 326, 328, 330, 327, 329, 331, 333, 867,
	332, 946, 335, 336, 338, 337, 822, 214, 947, 845,
	932, 902, 340, 341, 0, 876, 343, 877, 0, 0,
	346, 347, 348, 0, 0, 349, 490, 948, 350, 949,
	956, 351, 345, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 957, 360, 493, 361, 0, 362, 0, 363,
	364, 365, 366, 367, 368, 895, 369, 370, 0, 371,
	372, 373, 374, 375, 0, 377, 378, 379, 376, 380,
	381, 382, 383, 0, 384, 950, 385, 386, 387, 388,
	832, 389, 0, 390, 394, 395, 396, 397, 398, 399,
	400, 0, 407, 408, 868, 869, 871, 872, 402, 406,
	409, 410, 925, 411, 391, 392, 412, 951, 413, 890,
	870, 415, 0, 425, 416, 417, 418, 393, 419, 423,
	936, 420, 421, 422, 958, 0, 427, 428, 426, 0,
	429, 430, 431, 432, 433, 271, 434, 272, 866, 0,
	909, 910, 911, 912, 0, 442, 0, 436, 437, 959,
	438, 960, 843, 439, 440, 441, 0, 443, 444, 0,
	826, 445, 446, 447, 448, 449, 451, 926, 452, 0,
	874, 453, 454, 455, 504, 906, 953, 0, 457, 456,
	507, 0, 0, 0, 0, 458, 459, 508, 460, 461,
	462, 823, 0, 0, 0, 0, 0, 0, 0, 821,
	0, 0, 0, 0, 819, 820, 0, 0, 0, 0,
	0, 0, 0, 849, 0, 0, 0, 2106, 847, 879,
	836, 837, 838, 834, 835, 848, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 928, 853, 0,
	0, 0, 221, 222, 223, 224, 464, 894, 873, 905,
	863, 904, 903, 0, 228, 865, 864, 231, 232, 233,
	855, 927, 234, 963, 964, 470, 0, 235, 934, 0,
	917, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 937,
	249, 250, 920, 918, 919, 924, 922, 921, 923, 251,
	252, 253, 254, 908, 256, 901, 900, 825, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 899, 263, 0,
	264, 0, 265, 266, 0, 831, 267, 268, 270, 273,
	269, 274, 275, 276, 954, 955, 844, 212, 0, 0,
	0, 0, 0, 277, 278, 279, 898, 896, 897, 0,
	282, 0, 283, 0, 0, 938, 284, 285, 0, 286,
	961, 0, 854, 287, 0, 288, 289, 290, 291, 929,
	930, 933, 339, 940, 292, 293, 0, 294, 295, 875,
	0, 0, 0, 213, 296, 298, 305, 0, 939, 299,
	887, 878, 889, 891, 892, 893, 888, 0, 880, 0,
	306, 941, 931, 942, 307, 308, 309, 943, 913, 914,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 962, 944, 319, 320, 945, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 867, 332, 946, 335, 336, 338, 337, 822,
	214, 947, 845, 932, 902, 340, 341, 0, 876, 343,
	877, 0, 0, 346, 347, 348, 0, 0, 349, 490,
	948, 350, 949, 956, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 957, 360, 493, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 895, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 950, 385,
	386, 387, 388, 832, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 868, 869, 871,
	872, 402, 406, 409, 410, 925, 411, 391, 392, 412,
	951, 413, 890, 870, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 936, 420, 421, 422, 958, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	272, 866, 0, 909, 910, 911, 912, 0, 442, 0,
	436, 437, 959, 438, 960, 843, 439, 440, 441, 0,
	443, 444, 0, 826, 445, 446, 447, 448, 449, 451,
	926, 452, 0, 874, 453, 454, 455, 504, 906, 953,
	0, 457, 456, 507, 0, 0, 0, 0, 458, 459,
	508, 460, 461, 462, 823, 0, 0, 0, 0, 0,
	0, 0, 821, 0, 0, 0, 0, 819, 820, 0,
	0, 0, 0, 0, 0, 0, 849, 0, 0, 0,
	2094, 847, 879, 836, 837, 838, 834, 835, 848, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	928, 853, 0, 0, 0, 221, 222, 223, 224, 464,
	894, 873, 905, 863, 904, 903, 0, 228, 865, 864,
	231, 232, 233, 855, 927, 234, 963, 964, 470, 0,
	235, 934, 0, 917, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 937, 249, 250, 920, 918, 919, 924, 922,
	921, 923, 251, 252, 253, 254, 908, 256, 901, 900,
	825, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	899, 263, 0, 264, 0, 265, 266, 0, 831, 267,
	268, 270, 273, 269, 274, 275, 276, 954, 955, 844,
	212, 0, 0, 0, 0, 0, 277, 278, 279, 898,
	896, 897, 0, 282, 0, 283, 0, 0, 938, 284,
	285, 0, 286, 961, 0, 854, 287, 0, 288, 289,
	290, 291, 929, 930, 933, 339, 940, 292, 293, 0,
	294, 295, 875, 0, 0, 0, 213, 296, 298, 305,
	0, 939, 299, 887, 878, 889, 891, 892, 893, 888,
	0, 880, 0, 306, 941, 931, 942, 307, 308, 309,
	943, 913, 914, 0, 0, 312, 313, 314, 315, 0,
	317, 316, 0, 318, 962, 944, 319, 320, 945, 0,
	321, 322, 0, 0, 323, 324, 0, 325, 326, 328,
	330, 327, 329, 331, 333, 867, 332, 946, 335, 336,
	338, 337, 822, 214, 947, 845, 932, 902, 340, 341,
	0, 876, 343, 877, 0, 0, 346, 347, 348, 0,
	0, 349, 490, 948, 350, 949, 956, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 957, 360,
	493, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 895, 369, 370, 0, 371, 372, 373, 374, 375,
	0, 377, 378, 379, 376, 380, 381, 382, 383, 0,
	384, 950, 385, 386, 387, 388, 832, 389, 0, 390,
	394, 395, 396, 397, 398, 399, 400, 0, 407, 408,
	868, 869, 871, 872, 402, 406, 409, 410, 925, 411,
	391, 392, 412, 951, 413, 890, 870, 415, 0, 425,
	416, 417, 418, 393, 419, 423, 936, 420, 421, 422,
	958, 0, 427, 428, 426, 0, 429, 430, 431, 432,
	433, 271, 434, 272, 866, 0, 909, 910, 911, 912,
	0, 442, 0, 436, 437, 959, 438, 960, 843, 439,
	440, 441, 0, 443, 444, 0, 826, 445, 446, 447,
	448, 449, 451, 926, 452, 0, 874, 453, 454, 455,
	504, 906, 953, 0, 457, 456, 507, 0, 0, 0,
	0, 458, 459, 508, 460, 461, 462, 823, 0, 0,
	0, 0, 0, 0, 0, 821, 0, 0, 0, 0,
	819, 820, 0, 0, 0, 0, 0, 0, 0, 849,
	0, 0, 0, 2083, 847, 879, 836, 837, 838, 834,
	835, 848, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 928, 853, 0, 0, 0, 221, 222,
	223, 224, 464, 894, 873, 905, 863, 904, 903, 0,
	228, 865, 864, 231, 232, 233, 855, 927, 234, 963,
	964, 470, 0, 235, 934, 0, 917, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 937, 249, 250, 920, 918,
	919, 924, 922, 921, 923, 251, 252, 253, 254, 908,
	256, 901, 900, 825, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 899, 263, 0, 264, 0, 265, 266,
	0, 831, 267, 268, 270, 273, 269, 274, 275, 276,
	954, 955, 844, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 898, 896, 897, 0, 282, 0, 283, 0,
	0, 938, 284, 285, 0, 286, 961, 0, 854, 287,
	0, 288, 289, 290, 291, 929, 930, 933, 339, 940,
	292, 293, 0, 294, 295, 875, 0, 0, 0, 213,
	296, 298, 305, 0, 939, 299, 887, 878, 889, 891,
	892, 893, 888, 0, 880, 0, 306, 941, 931, 942,
	307, 308, 309, 943, 913, 914, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 962, 944, 319,
	320, 945, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 867, 332,
	946, 335, 336, 338, 337, 822, 214, 947, 845, 932,
	902, 340, 341, 0, 876, 343, 877, 0, 0, 346,
	347, 348, 0, 0, 349, 490, 948, 350, 949, 956,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 957, 360, 493, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 895, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 950, 385, 386, 387, 388, 832,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 407, 408, 868, 869, 871, 872, 402, 406, 409,
	410, 925, 411, 391, 392, 412, 951, 413, 890, 870,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 936,
	420, 421, 422, 958, 0, 427, 428, 426, 0, 429,
	430, 431, 432, 433, 271, 434, 272, 866, 0, 909,
	910, 911, 912, 0, 442, 0, 436, 437, 959, 438,
	960, 843, 439, 440, 441, 0, 443, 444, 0, 826,
	445, 446, 447, 448, 449, 451, 926, 452, 0, 874,
	453, 454, 455, 504, 906, 953, 0, 457, 456, 507,
	0, 0, 0, 0, 458, 459, 508, 460, 461, 462,
	823, 0, 0, 0, 0, 0, 0, 0, 821, 0,
	0, 0, 0, 819, 820, 0, 0, 0, 0, 0,
	0, 0, 849, 0, 0, 0, 2081, 847, 2073, 836,
	837, 838, 834, 835, 848, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 928, 853, 0, 0,
	0, 221, 222, 223, 224, 464, 894, 873, 905, 863,
	904, 903, 0, 228, 865, 864, 231, 232, 233, 855,
	927, 234, 963, 964, 470, 0, 235, 934, 0, 917,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 937, 249,
	250, 920, 918, 919, 924, 922, 921, 923, 251, 252,
	253, 254, 908, 2076, 901, 900, 825, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 899, 263, 0, 264,
	0, 265, 266, 0, 831, 267, 268, 270, 273, 269,
	274, 275, 276, 954, 955, 844, 212, 0, 0, 0,
	0, 0, 277, 278, 279, 898, 896, 897, 0, 282,
	0, 283, 0, 0, 938, 284, 285, 0, 286, 961,
	0, 854, 287, 0, 288, 289, 290, 2077, 929, 930,
	933, 339, 940, 292, 293, 0, 294, 295, 875, 0,
	0, 0, 213, 296, 298, 305, 0, 939, 299, 887,
	878, 889, 891, 892, 893, 888, 0, 880, 0, 306,
	941, 931, 942, 307, 308, 309, 943, 913, 914, 0,
	0, 312, 313, 314, 315, 0, 317, 316, 0, 318,
	962, 944, 319, 320, 945, 0, 321, 322, 0, 0,
	323, 324, 0, 325, 326, 328, 330, 327, 2078, 2075,
	333, 867, 332, 946, 335, 336, 338, 337, 822, 214,
	947, 845, 932, 902, 340, 341, 0, 876, 343, 877,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 948,
	350, 949, 956, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 957, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 895, 369, 370,
	0, 371, 372, 373, 374, 375, 0, 377, 378, 379,
	376, 380, 381, 382, 383, 0, 384, 950, 385, 386,
	387, 388, 832, 389, 0, 390, 394, 395, 396, 397,
	398, 399, 2079, 0, 407, 408, 868, 869, 871, 872,
	402, 406, 409, 410, 925, 411, 391, 392, 412, 951,
	413, 890, 870, 415, 0, 425, 416, 417, 418, 393,
	419, 423, 936, 420, 421, 422, 958, 0, 427, 428,
	426, 0, 429, 430, 431, 432, 433, 271, 434, 272,
	866, 0, 909, 910, 911, 912, 0, 442, 0, 436,
	437, 959, 438, 960, 843, 439, 440, 441, 0, 443,
	444, 0, 826, 445, 446, 447, 448, 449, 451, 926,
	452, 0, 874, 453, 454, 455, 504, 906, 953, 0,
	457, 456, 507, 0, 0, 0, 0, 458, 459, 508,
	460, 2074, 462, 823, 0, 0, 0, 0, 0, 0,
	0, 821, 0, 0, 0, 0, 819, 820, 0, 0,
	0, 0, 0, 0, 0, 849, 0, 0, 0, 2070,
	847, 2073, 836, 837, 838, 834, 835, 848, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 928,
	853, 0, 0, 0, 221, 222, 223, 224, 464, 894,
	873, 905, 863, 904, 903, 0, 228, 865, 864, 231,
	232, 233, 855, 927, 234, 963, 964, 470, 0, 235,
	934, 0, 917, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 937, 249, 250, 920, 918, 919, 924, 922, 921,
	923, 251, 252, 253, 254, 908, 2076, 901, 900, 825,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 899,
	263, 0, 264, 0, 265, 266, 0, 831, 267, 268,
	270, 273, 269, 274, 275, 276, 954, 955, 844, 212,
	0, 0, 0, 0, 0, 277, 278, 279, 898, 896,
	897, 0, 282, 0, 283, 0, 0, 938, 284, 285,
	0, 286, 961, 0, 854, 287, 0, 288, 289, 290,
	2077, 929, 930, 933, 339, 940, 292, 293, 0, 294,
	295, 875, 0, 0, 0, 213, 296, 298, 305, 0,
	939, 299, 887, 878, 889, 891, 892, 893, 888, 0,
	880, 0, 306, 941, 931, 942, 307, 308, 309, 943,
	913, 914, 0, 0, 312, 313, 314, 315, 0, 317,
	316, 0, 318, 962, 944, 319, 320, 945, 0, 321,
	322, 0, 0, 323, 324, 0, 325, 326, 328, 330,
	327, 2078, 2075, 333, 867, 332, 946, 335, 336, 338,
	337, 822, 214, 947, 845, 932, 902, 340, 341, 0,
	876, 343, 877, 0, 0, 346, 347, 348, 0, 0,
	349, 490, 948, 350, 949, 956, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 957, 360, 493,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	895, 369, 370, 0, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 0, 384,
	950, 385, 386, 387, 388, 832, 389, 0, 390, 394,
	395, 396, 397, 398, 399, 2079, 0, 407, 408, 868,
	869, 871, 872, 402, 406, 409, 410, 925, 411, 391,
	392, 412, 951, 413, 890, 870, 415, 0, 425, 416,
	417, 418, 393, 419, 423, 936, 420, 421, 422, 958,
	0, 427, 428, 426, 0, 429, 430, 431, 432, 433,
	271, 434, 272, 866, 0, 909, 910, 911, 912, 0,
	442, 0, 436, 437, 959, 438, 960, 843, 439, 440,
	441, 0, 443, 444, 0, 826, 445, 446, 447, 448,
	449, 451, 926, 452, 0, 874, 453, 454, 455, 504,
	906, 953, 0, 457, 456, 507, 0, 0, 0, 0,
	458, 459, 508, 460, 2074, 462, 823, 0, 0, 0,
	0, 0, 0, 0, 821, 0, 0, 0, 0, 819,
	820, 879, 836, 837, 838, 834, 835, 848, 849, 0,
	0, 0, 0, 847, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 928,
	853, 0, 0, 0, 221, 222, 223, 224, 464, 894,
	873, 905, 863, 904, 903, 0, 228, 865, 864, 231,
	232, 233, 855, 927, 234, 963, 964, 470, 0, 235,
	934, 0, 917, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 937, 249, 250, 920, 918, 919, 924, 922, 921,
	923, 251, 252, 253, 254, 908, 256, 901, 900, 825,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 899,
	263, 0, 264, 0, 265, 266, 0, 831, 267, 268,
	270, 273, 269, 274, 275, 276, 954, 955, 844, 212,
	0, 0, 0, 0, 0, 277, 278, 279, 898, 896,
	897, 0, 282, 0, 283, 0, 0, 938, 284, 285,
	0, 286, 961, 0, 854, 287, 0, 288, 289, 290,
	291, 929, 930, 933, 339, 940, 292, 293, 0, 294,
	295, 875, 0, 0, 0, 213, 296, 298, 305, 0,
	939, 299, 887, 878, 889, 891, 892, 893, 888, 0,
	880, 0, 306, 941, 931, 942, 307, 308, 309, 943,
	913, 914, 0, 0, 312, 313, 314, 315, 0, 317,
	316, 0, 318, 962, 944, 319, 320, 945, 0, 321,
	322, 0, 0, 323, 324, 0, 325, 326, 328, 330,
	327, 329, 331, 333, 867, 332, 946, 335, 336, 338,
	337, 822, 214, 947, 845, 932, 902, 340, 341, 0,
	876, 343, 877, 0, 0, 346, 347, 348, 0, 0,
	349, 490, 948, 350, 949, 956, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 957, 360, 493,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	895, 369, 370, 0, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 0, 384,
	950, 385, 386, 387, 388, 832, 389, 0, 390, 394,
	395, 396, 397, 398, 399, 400, 0, 407, 408, 868,
	869, 871, 872, 402, 406, 409, 410, 925, 411, 391,
	392, 412, 951, 413, 890, 870, 415, 0, 425, 416,
	417, 418, 393, 419, 423, 936, 420, 421, 422, 958,
	0, 427, 428, 426, 0, 429, 430, 431, 432, 433,
	271, 434, 272, 866, 0, 909, 910, 911, 912, 0,
	442, 0, 436, 437, 959, 438, 960, 843, 439, 440,
	441, 0, 443, 444, 0, 826, 445, 446, 447, 448,
	449, 451, 926, 452, 0, 874, 453, 454, 455, 504,
	906, 953, 0, 457, 456, 507, 0, 0, 0, 0,
	458, 459, 508, 460, 461, 462, 823, 0, 0, 0,
	0, 0, 0, 0, 821, 0, 0, 0, 0, 819,
	820, 0, 0, 0, 0, 0, 1501, 0, 849, 0,
	0, 0, 0, 847, 879, 836, 837, 838, 834, 835,
	848, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 1914, 220, 0, 0,
	0, 0, 928, 853, 0, 0, 0, 221, 222, 223,
	224, 464, 894, 873, 905, 863, 904, 903, 0, 228,
	865, 864, 231, 232, 233, 855, 927, 234, 963, 964,
	470, 0, 235, 934, 0, 917, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 937, 249, 250, 920, 918, 919,
	924, 922, 921, 923, 251, 252, 253, 254, 908, 256,
	901, 900, 825, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 899, 263, 0, 264, 0, 265, 266, 0,
	831, 267, 268, 270, 273, 269, 274, 275, 276, 954,
	955, 844, 212, 0, 0, 0, 0, 0, 277, 278,
	279, 898, 896, 897, 0, 282, 0, 283, 0, 0,
	938, 284, 285, 0, 286, 961, 0, 854, 287, 0,
	288, 289, 290, 291, 929, 930, 933, 339, 940, 292,
	293, 0, 294, 295, 875, 0, 0, 0, 213, 296,
	298, 305, 0, 939, 299, 887, 878, 889, 891, 892,
	893, 888, 0, 880, 0, 306, 941, 931, 942, 307,
	308, 309, 943, 913, 914, 0, 0, 312, 313, 314,
	315, 0, 317, 316, 0, 318, 962, 944, 319, 320,
	945, 0, 321, 322, 0, 0, 323, 324, 0, 325,
	326, 328, 330, 327, 329, 331, 333, 867, 332, 946,
	335, 336, 338, 337, 822, 214, 947, 845, 932, 902,
	340, 341, 0, 876, 343, 877, 0, 0, 346, 347,
	348, 0, 0, 349, 490, 948, 350, 949, 956, 351,
	345, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	957, 360, 493, 361, 0, 362, 0, 363, 364, 365,
	366, 367, 368, 895, 369, 370, 0, 371, 372, 373,
	374, 375, 0, 377, 378, 379, 376, 380, 381, 382,
	383, 0, 384, 950, 385, 386, 387, 388, 832, 389,
	0, 390, 394, 395, 396, 397, 398, 399, 400, 0,
	407, 408, 868, 869, 871, 872, 402, 406, 409, 410,
	925, 411, 391, 392, 412, 951, 413, 890, 870, 415,
	0, 425, 416, 417, 418, 393, 419, 423, 936, 420,
	421, 422, 958, 0, 427, 428, 426, 0, 429, 430,
	431, 432, 433, 271, 434, 272, 866, 0, 909, 910,
	911, 912, 0, 442, 0, 436, 437, 959, 438, 960,
	843, 439, 440, 441, 0, 443, 444, 0, 826, 445,
	446, 447, 448, 449, 451, 926, 452, 0, 874, 453,
	454, 455, 504, 906, 953, 0, 457, 456, 507, 0,
	0, 0, 0, 458, 459, 508, 460, 461, 462, 823,
	0, 0, 0, 0, 0, 0, 0, 821, 0, 0,
	0, 0, 819, 820, 0, 0, 0, 0, 0, 0,
	0, 849, 0, 0, 0, 1194, 847, 879, 836, 837,
	838, 834, 835, 848, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 928, 853, 0, 0, 0,
	221, 222, 223, 224, 464, 894, 873, 905, 863, 904,
	903, 0, 228, 865, 864, 231, 232, 233, 855, 927,
	234, 963, 964, 470, 0, 235, 934, 0, 917, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 937, 249, 250,
	920, 918, 919, 924, 922, 921, 923, 251, 252, 253,
	254, 908, 256, 901, 900, 825, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 899, 263, 0, 264, 0,
	265, 266, 0, 831, 267, 268, 270, 273, 269, 274,
	275, 276, 954, 955, 844, 212, 0, 0, 0, 0,
	0, 277, 278, 279, 898, 896, 897, 0, 282, 0,
	283, 0, 0, 938, 284, 285, 0, 286, 961, 0,
	854, 287, 0, 288, 289, 290, 291, 1193, 930, 933,
	339, 940, 292, 293, 0, 294, 295, 875, 0, 0,
	0, 213, 296, 298, 305, 0, 939, 299, 887, 878,
	889, 891, 892, 893, 888, 0, 880, 0, 306, 941,
	931, 942, 307, 308, 309, 943, 913, 914, 0, 0,
	312, 313, 314, 315, 0, 317, 316, 0, 318, 962,
	944, 319, 320, 945, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	867, 332, 946, 335, 336, 338, 337, 822, 214, 947,
	845, 932, 902, 340, 341, 0, 876, 343, 877, 0,
	0, 346, 347, 348, 0, 0, 349, 490, 948, 350,
	949, 956, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 957, 360, 493, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 895, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 950, 385, 386, 387,
	388, 832, 389, 0, 390, 394, 395, 396, 397, 398,
	399, 400, 0, 407, 408, 868, 869, 871, 872, 402,
	406, 409, 410, 925, 411, 391, 392, 412, 951, 413,
	890, 870, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 936, 420, 421, 422, 958, 0, 427, 428, 426,
	0, 429, 430, 431, 432, 433, 271, 434, 272, 866,
	0, 909, 910, 911, 912, 0, 442, 0, 436, 437,
	959, 438, 960, 843, 439, 440, 441, 0, 443, 444,
	0, 826, 445, 446, 447, 448, 449, 451, 926, 452,
	0, 874, 453, 454, 455, 504, 906, 953, 0, 457,
	456, 507, 0, 0, 0, 0, 458, 459, 508, 460,
	461, 462, 823, 0, 0, 0, 0, 0, 0, 0,
	821, 0, 0, 0, 0, 819, 820, 0, 0, 0,
	0, 0, 0, 0, 849, 0, 0, 0, 1188, 847,
	879, 836, 837, 838, 834, 835, 848, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 928, 853,
	0, 0, 0, 221, 222, 223, 224, 464, 894, 873,
	905, 863, 904, 903, 0, 228, 865, 864, 231, 232,
	233, 855, 927, 234, 963, 964, 470, 0, 235, 934,
	0, 917, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	937, 249, 250, 920, 918, 919, 924, 922, 921, 923,
	251, 252, 253, 254, 908, 256, 901, 900, 825, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 899, 263,
	0, 264, 0, 265, 266, 0, 831, 267, 268, 270,
	273, 269, 274, 275, 276, 954, 955, 844, 212, 0,
	0, 0, 0, 0, 277, 278, 279, 898, 896, 897,
	0, 282, 0, 283, 0, 0, 938, 284, 285, 0,
	286, 961, 0, 854, 287, 0, 288, 289, 290, 291,
	1187, 930, 933, 339, 940, 292, 293, 0, 294, 295,
	875, 0, 0, 0, 213, 296, 298, 305, 0, 939,
	299, 887, 878, 889, 891, 892, 893, 888, 0, 880,
	0, 306, 941, 931, 942, 307, 308, 309, 943, 913,
	914, 0, 0, 312, 313, 314, 315, 0, 317, 316,
	0, 318, 962, 944, 319, 320, 945, 0, 321, 322,
	0, 0, 323, 324, 0, 325, 326, 328, 330, 327,
	329, 331, 333, 867, 332, 946, 335, 336, 338, 337,
	822, 214, 947, 845, 932, 902, 340, 341, 0, 876,
	343, 877, 0, 0, 346, 347, 348, 0, 0, 349,
	490, 948, 350, 949, 956, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 957, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 895,
	369, 370, 0, 371, 372, 373, 374, 375, 0, 377,
	378, 379, 376, 380, 381, 382, 383, 0, 384, 950,
	385, 386, 387, 388, 832, 389, 0, 390, 394, 395,
	396, 397, 398, 399, 400, 0, 407, 408, 868, 869,
	871, 872, 402, 406, 409, 410, 925, 411, 391, 392,
	412, 951, 413, 890, 870, 415, 0, 425, 416, 417,
	418, 393, 419, 423, 936, 420, 421, 422, 958, 0,
	427, 428, 426, 0, 429, 430, 431, 432, 433, 271,
	434, 272, 866, 0, 909, 910, 911, 912, 0, 442,
	0, 436, 437, 959, 438, 960, 843, 439, 440, 441,
	0, 443, 444, 0, 826, 445, 446, 447, 448, 449,
	451, 926, 452, 0, 874, 453, 454, 455, 504, 906,
	953, 0, 457, 456, 507, 0, 0, 0, 0, 458,
	459, 508, 460, 461, 462, 823, 0, 0, 0, 0,
	0, 0, 0, 821, 0, 0, 0, 0, 819, 820,
	0, 0, 0, 0, 0, 0, 0, 849, 0, 0,
	0, 1183, 847, 879, 836, 837, 838, 834, 835, 848,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 928, 853, 0, 0, 0, 221, 222, 223, 224,
	464, 894, 873, 905, 863, 904, 903, 0, 228, 865,
	864, 231, 232, 233, 855, 927, 234, 963, 964, 470,
	0, 235, 934, 0, 917, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 937, 249, 250, 920, 918, 919, 924,
	922, 921, 923, 251, 252, 253, 254, 908, 256, 901,
	900, 825, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 899, 263, 0, 264, 0, 265, 266, 0, 831,
	267, 268, 270, 273, 269, 274, 275, 276, 954, 955,
	844, 212, 0, 0, 0, 0, 0, 277, 278, 279,
	898, 896, 897, 0, 282, 0, 283, 0, 0, 938,
	284, 285, 0, 286, 961, 0, 854, 287, 0, 288,
	289, 290, 291, 929, 930, 933, 339, 940, 292, 293,
	0, 294, 295, 875, 0, 0, 0, 213, 296, 298,
	305, 0, 939, 299, 887, 878, 889, 891, 892, 893,
	888, 0, 880, 0, 306, 941, 931, 942, 307, 308,
	309, 943, 913, 914, 0, 0, 312, 313, 314, 315,
	0, 317, 316, 0, 318, 962, 944, 319, 320, 945,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 867, 332, 946, 335,
	336, 338, 337, 822, 214, 947, 845, 932, 902, 340,
	341, 0, 876, 343, 877, 0, 0, 346, 347, 348,
	0, 0, 349, 490, 948, 350, 949, 956, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 957,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 895, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 950, 385, 386, 387, 388, 832, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 0, 407,
	408, 868, 869, 871, 872, 402, 406, 409, 410, 925,
	411, 391, 392, 412, 951, 413, 890, 870, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 936, 420, 421,
	422, 958, 0, 427, 428, 426, 0, 429, 430, 431,
	432, 433, 271, 434, 272, 866, 0, 909, 910, 911,
	912, 0, 442, 0, 436, 437, 959, 438, 960, 843,
	439, 440, 441, 0, 443, 444, 0, 826, 445, 446,
	447, 448, 449, 451, 926, 452, 0, 874, 453, 454,
	455, 504, 906, 953, 0, 457, 456, 507, 0, 0,
	0, 0, 458, 459, 508, 460, 461, 462, 823, 0,
	0, 0, 0, 0, 0, 0, 821, 0, 0, 0,
	0, 819, 820, 879, 836, 837, 838, 834, 835, 848,
	849, 0, 0, 0, 0, 847, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 928, 853, 0, 0, 0, 221, 222, 223, 224,
	464, 894, 873, 905, 863, 904, 903, 0, 228, 865,
	864, 231, 232, 233, 855, 927, 234, 963, 964, 470,
	0, 235, 934, 0, 917, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 937, 249, 250, 920, 918, 919, 924,
	922, 921, 923, 251, 252, 253, 254, 908, 256, 901,
	900, 825, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 899, 263, 0, 264, 0, 265, 266, 0, 831,
	267, 268, 270, 273, 269, 274, 275, 276, 954, 955,
	844, 212, 0, 0, 0, 0, 0, 277, 278, 279,
	898, 896, 897, 0, 282, 0, 283, 0, 0, 938,
	284, 285, 0, 286, 961, 0, 854, 287, 0, 288,
	289, 290, 291, 929, 930, 933, 339, 940, 292, 293,
	0, 294, 295, 875, 0, 0, 0, 213, 296, 298,
	305, 0, 939, 299, 887, 878, 889, 891, 892, 893,
	888, 0, 880, 0, 306, 941, 931, 942, 307, 308,
	309, 943, 913, 914, 0, 0, 312, 313, 314, 315,
	0, 317, 316, 0, 318, 962, 944, 319, 320, 945,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 867, 332, 946, 335,
	336, 338, 337, 822, 214, 947, 845, 932, 902, 340,
	341, 0, 876, 343, 877, 0, 0, 346, 347, 348,
	0, 0, 349, 490, 948, 350, 949, 956, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 957,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 895, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 950, 385, 386, 387, 388, 832, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 0, 407,
	408, 868, 869, 871, 872, 402, 406, 409, 410, 925,
	411, 391, 392, 412, 951, 413, 890, 870, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 936, 420, 421,
	422, 958, 0, 427, 428, 426, 0, 429, 430, 431,
	432, 433, 271, 434, 272, 866, 0, 909, 910, 911,
	912, 0, 442, 0, 436, 437, 959, 438, 960, 843,
	439, 440, 441, 0, 443, 444, 0, 826, 445, 446,
	447, 448, 449, 451, 926, 452, 0, 874, 453, 454,
	455, 504, 906, 953, 0, 457, 456, 507, 0, 0,
	0, 0, 458, 459, 508, 460, 461, 462, 823, 0,
	0, 0, 0, 0, 0, 0, 821, 0, 0, 0,
	0, 819, 820, 879, 836, 837, 838, 834, 835, 848,
	849, 0, 0, 0, 0, 847, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 928, 853, 0, 0, 0, 221, 222, 223, 224,
	464, 894, 873, 905, 863, 904, 903, 0, 228, 865,
	864, 231, 232, 233, 855, 927, 234, 963, 964, 470,
	0, 235, 934, 0, 917, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 937, 249, 3379, 920, 918, 919, 924,
	922, 921, 923, 251, 252, 253, 254, 908, 256, 901,
	900, 825, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 899, 263, 0, 264, 0, 265, 266, 0, 831,
	267, 268, 270, 273, 269, 274, 275, 276, 954, 955,
	844, 212, 0, 0, 0, 0, 0, 277, 278, 279,
	898, 896, 897, 0, 282, 0, 283, 0, 0, 938,
	284, 285, 0, 286, 961, 0, 854, 287, 0, 288,
	289, 290, 291, 929, 930, 933, 339, 940, 292, 293,
	0, 294, 295, 875, 0, 0, 0, 213, 296, 298,
	305, 0, 939, 299, 887, 878, 889, 891, 892, 893,
	888, 0, 880, 0, 306, 941, 931, 942, 307, 308,
	309, 943, 913, 914, 0, 0, 312, 313, 314, 315,
	0, 317, 316, 0, 318, 962, 944, 319, 320, 945,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 867, 332, 946, 335,
	336, 338, 337, 822, 214, 947, 845, 932, 902, 340,
	341, 0, 876, 343, 877, 0, 0, 346, 347, 348,
	0, 0, 349, 490, 948, 350, 949, 956, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 957,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 895, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 950, 385, 386, 387, 388, 832, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 0, 407,
	408, 868, 869, 871, 872, 402, 406, 409, 410, 925,
	411, 391, 392, 412, 951, 413, 890, 870, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 936, 420, 421,
	422, 958, 0, 427, 428, 426, 0, 429, 430, 431,
	432, 433, 271, 434, 272, 866, 0, 909, 910, 911,
	912, 0, 442, 0, 436, 437, 959, 438, 960, 843,
	439, 440, 441, 0, 3378, 444, 0, 826, 445, 446,
	447, 448, 449, 451, 926, 452, 0, 874, 453, 454,
	455, 504, 906, 953, 0, 457, 456, 507, 0, 0,
	0, 0, 458, 459, 508, 460, 461, 462, 823, 0,
	0, 0, 0, 0, 0, 0, 821, 0, 0, 0,
	0, 819, 820, 879, 836, 837, 838, 834, 835, 848,
	849, 0, 0, 0, 0, 847, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 928, 853, 0, 0, 0, 221, 222, 223, 224,
	3377, 894, 873, 905, 863, 904, 903, 0, 228, 865,
	864, 231, 232, 233, 855, 927, 234, 963, 964, 470,
	0, 235, 934, 0, 917, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 937, 249, 3379, 920, 918, 919, 924,
	922, 921, 923, 251, 252, 253, 254, 908, 256, 901,
	900, 825, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 899, 263, 0, 264, 0, 265, 266, 0, 831,
	267, 268, 270, 273, 269, 274, 275, 276, 954, 955,
	844, 212, 0, 0, 0, 0, 0, 277, 278, 279,
	898, 896, 897, 0, 282, 0, 283, 0, 0, 938,
	284, 285, 0, 286, 961, 0, 854, 287, 0, 288,
	289, 290, 291, 929, 930, 933, 339, 940, 292, 293,
	0, 294, 295, 875, 0, 0, 0, 213, 296, 298,
	305, 0, 939, 299, 887, 878, 889, 891, 892, 893,
	888, 0, 880, 0, 306, 941, 931, 942, 307, 308,
	309, 943, 913, 914, 0, 0, 312, 313, 314, 315,
	0, 317, 316, 0, 318, 962, 944, 319, 320, 945,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 867, 332, 946, 335,
	336, 338, 337, 822, 214, 947, 845, 932, 902, 340,
	341, 0, 876, 343, 877, 0, 0, 346, 347, 348,
	0, 0, 349, 490, 948, 350, 949, 956, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 957,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 895, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 950, 385, 386, 387, 388, 832, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 0, 407,
	408, 868, 869, 871, 872, 402, 406, 409, 410, 925,
	411, 391, 392, 412, 951, 413, 890, 870, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 936, 420, 421,
	422, 958, 0, 427, 428, 426, 0, 429, 430, 431,
	432, 433, 271, 434, 272, 866, 0, 909, 910, 911,
	912, 0, 442, 0, 436, 437, 959, 438, 960, 843,
	439, 440, 441, 0, 3378, 444, 0, 826, 445, 446,
	447, 448, 449, 451, 926, 452, 0, 874, 453, 454,
	455, 504, 906, 953, 0, 457, 456, 507, 0, 0,
	0, 0, 458, 459, 508, 460, 461, 462, 823, 0,
	0, 0, 0, 0, 0, 0, 821, 0, 0, 0,
	0, 819, 820, 879, 836, 837, 838, 834, 835, 848,
	849, 0, 0, 0, 0, 847, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 928, 853, 0, 0, 0, 221, 222, 223, 224,
	464, 894, 873, 905, 863, 904, 903, 0, 228, 865,
	864, 231, 232, 233, 855, 927, 234, 963, 964, 470,
	0, 235, 934, 0, 917, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 937, 249, 250, 920, 918, 919, 924,
	922, 921, 923, 251, 252, 253, 254, 908, 256, 901,
	900, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 899, 263, 0, 264, 0, 265, 266, 0, 831,
	267, 268, 270, 273, 269, 274, 275, 276, 954, 955,
	844, 212, 0, 0, 0, 0, 0, 277, 278, 279,
	898, 896, 897, 0, 282, 0, 283, 0, 0, 938,
	284, 285, 0, 286, 961, 0, 854, 287, 0, 288,
	289, 290, 291, 929, 930, 933, 339, 940, 292, 293,
	0, 294, 295, 875, 0, 0, 0, 213, 296, 298,
	305, 0, 939, 299, 887, 878, 889, 891, 892, 893,
	888, 0, 880, 0, 306, 941, 931, 942, 307, 308,
	309, 943, 913, 914, 0, 0, 312, 313, 314, 315,
	0, 317, 316, 0, 318, 962, 944, 319, 320, 945,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 867, 332, 946, 335,
	336, 338, 337, 0, 214, 947, 845, 932, 902, 340,
	341, 0, 876, 343, 877, 0, 0, 346, 347, 348,
	0, 0, 349, 490, 948, 350, 949, 956, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 957,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 895, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 950, 385, 386, 387, 388, 832, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 0, 407,
	408, 868, 869, 871, 872, 402, 406, 409, 410, 925,
	411, 391, 392, 412, 951, 413, 890, 870, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 936, 420, 421,
	422, 958, 0, 427, 428, 426, 0, 429, 430, 431,
	432, 433, 271, 434, 272, 866, 0, 909, 910, 911,
	912, 0, 442, 0, 436, 437, 959, 438, 960, 843,
	439, 440, 441, 0, 443, 444, 0, 0, 445, 446,
	447, 448, 449, 451, 926, 452, 0, 874, 453, 454,
	455, 504, 906, 953, 0, 457, 456, 507, 0, 0,
	0, 0, 458, 459, 508, 460, 461, 462, 879, 836,
	837, 838, 834, 835, 848, 0, 2091, 0, 0, 0,
	0, 2089, 2090, 0, 0, 215, 216, 217, 218, 219,
	849, 220, 0, 0, 0, 847, 928, 853, 0, 0,
	0, 221, 222, 223, 224, 0, 894, 873, 905, 863,
	904, 903, 0, 228, 865, 864, 231, 232, 233, 855,
	927, 234, 963, 964, 470, 0, 235, 934, 0, 917,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 937, 249,
	3379, 920, 918, 919, 924, 922, 921, 923, 251, 252,
	253, 254, 908, 256, 901, 900, 825, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 899, 263, 0, 264,
	0, 265, 266, 0, 831, 267, 268, 270, 273, 269,
	274, 275, 276, 954, 955, 844, 212, 0, 0, 0,
	0, 0, 277, 278, 279, 898, 896, 897, 0, 282,
	0, 283, 0, 0, 938, 284, 285, 0, 286, 961,
	0, 854, 287, 0, 288, 289, 290, 291, 929, 930,
	933, 339, 0, 292, 293, 0, 294, 295, 875, 0,
	0, 0, 213, 296, 298, 305, 0, 939, 299, 887,
	878, 889, 891, 892, 893, 888, 0, 880, 0, 306,
	0, 931, 0, 307, 308, 309, 943, 913, 914, 0,
	0, 312, 313, 314, 315, 0, 317, 316, 0, 318,
	962, 944, 319, 320, 0, 0, 321, 322, 0, 0,
	323, 324, 0, 325, 326, 328, 330, 327, 329, 331,
	333, 867, 332, 946, 335, 336, 338, 337, 822, 214,
	0, 845, 932, 902, 340, 341, 0, 876, 343, 877,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 948,
	350, 949, 956, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 957, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 895, 369, 370,
	0, 371, 372, 373, 374, 375, 0, 377, 378, 379,
	376, 380, 381, 382, 383, 0, 384, 950, 385, 386,
	387, 388, 832, 389, 0, 390, 394, 395, 396, 397,
	398, 399, 400, 0, 407, 408, 868, 869, 871, 872,
	402, 406, 409, 410, 925, 411, 391, 392, 412, 0,
	413, 890, 870, 415, 0, 425, 416, 417, 418, 393,
	419, 423, 936, 420, 421, 422, 958, 0, 427, 428,
	426, 0, 429, 430, 431, 432, 433, 271, 434, 272,
	866, 0, 909, 910, 911, 912, 0, 442, 0, 436,
	437, 959, 438, 960, 843, 439, 440, 441, 0, 3378,
	444, 0, 826, 445, 446, 447, 448, 449, 451, 926,
	452, 0, 874, 453, 454, 455, 504, 906, 953, 0,
	457, 456, 507, 0, 0, 0, 0, 458, 459, 508,
	460, 461, 462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 812, 0, 1000, 0, 819, 820, 0, 0,
	0, 0, 0, 0, 0, 849, 0, 0, 0, 0,
	847, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 928, 0, 0, 0, 0, 221, 222, 223,
	224, 464, 465, 225, 466, 226, 227, 467, 0, 228,
	229, 230, 231, 232, 233, 0, 927, 234, 468, 469,
	470, 0, 235, 934, 0, 917, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 937, 249, 250, 920, 918, 919,
	924, 922, 921, 923, 251, 252, 253, 254, 255, 256,
	472, 473, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	474, 267, 268, 270, 273, 269, 274, 275, 276, 954,
	955, 0, 212, 0, 0, 0, 0, 0, 277, 278,
	279, 477, 280, 281, 0, 282, 0, 283, 0, 0,
	938, 284, 285, 0, 286, 961, 0, 479, 287, 0,
	288, 289, 290, 291, 929, 930, 933, 339, 940, 292,
	293, 0, 294, 295, 297, 0, 0, 0, 213, 296,
	298, 305, 0, 939, 299, 483, 301, 300, 302, 303,
	304, 484, 0, 485, 0, 306, 941, 931, 942, 307,
	308, 309, 943, 310, 311, 0, 0, 312, 313, 314,
	315, 987, 317, 316, 0, 318, 962, 944, 319, 320,
	945, 0, 321, 322, 0, 0, 323, 324, 0, 325,
	326, 328, 330, 327, 329, 331, 333, 334, 332, 946,
	335, 336, 338, 337, 0, 214, 947, 0, 932, 489,
	340, 341, 0, 342, 343, 344, 0, 992, 346, 347,
	348, 0, 0, 349, 490, 948, 350, 949, 956, 351,
	345, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	957, 360, 493, 361, 0, 362, 0, 363, 364, 365,
	366, 367, 368, 494, 369, 370, 0, 371, 372, 373,
	374, 375, 0, 377, 378, 379, 376, 380, 381, 382,
	383, 0, 384, 950, 385, 386, 387, 388, 495, 994,
	0, 390, 394, 395, 396, 397, 398, 399, 400, 178,
	407, 408, 401, 403, 404, 405, 402, 406, 409, 410,
	925, 411, 391, 392, 412, 951, 413, 496, 414, 415,
	0, 425, 416, 417, 418, 393, 419, 423, 424, 420,
	421, 422, 958, 0, 427, 428, 426, 180, 429, 430,
	431, 432, 433, 271, 434, 272, 435, 0, 498, 499,
	500, 501, 0, 442, 0, 436, 437, 959, 438, 960,
	0, 439, 440, 441, 0, 443, 444, 0, 0, 445,
	446, 447, 448, 449, 451, 926, 452, 0, 450, 453,
	454, 455, 1304, 505, 506, 0, 457, 456, 507, 1000,
	0, 0, 172, 458, 459, 508, 460, 461, 462, 0,
	173, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 928, 0, 984,
	0, 1587, 221, 222, 223, 224, 464, 465, 225, 466,
	226, 227, 467, 0, 228, 229, 230, 231, 232, 233,
	0, 927, 234, 468, 469, 470, 0, 235, 934, 0,
	917, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 937,
	249, 250, 920, 918, 919, 924, 922, 921, 923, 251,
	252, 253, 254, 255, 256, 472, 473, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 474, 267, 268, 270, 273,
	269, 274, 275, 276, 954, 955, 0, 212, 0, 0,
	0, 0, 0, 277, 278, 279, 477, 280, 281, 0,
	282, 0, 283, 0, 0, 938, 284, 285, 0, 286,
	961, 0, 479, 287, 0, 288, 289, 290, 291, 929,
	930, 933, 339, 940, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 213, 296, 298, 305, 0, 939, 299,
	483, 301, 300, 302, 303, 304, 484, 0, 485, 0,
	306, 941, 931, 942, 307, 308, 309, 943, 310, 311,
	0, 0, 312, 313, 314, 315, 987, 317, 316, 0,
	318, 962, 944, 319, 320, 945, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 946, 335, 336, 338, 337, 0,
	214, 947, 0, 932, 489, 340, 341, 0, 342, 343,
	344, 0, 992, 346, 347, 348, 0, 0, 349, 490,
	948, 350, 949, 956, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 957, 360, 493, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 494, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 950, 385,
	386, 387, 388, 495, 994, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 178, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 925, 411, 391, 392, 412,
	951, 413, 496, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 958, 0, 427,
	428, 426, 180, 429, 430, 431, 432, 433, 271, 434,
	272, 435, 0, 498, 499, 500, 501, 0, 442, 0,
	436, 437, 959, 438, 960, 0, 439, 440, 441, 0,
	443, 444, 0, 0, 445, 446, 447, 448, 449, 451,
	926, 452, 0, 450, 453, 454, 455, 1304, 505, 506,
	0, 457, 456, 507, 0, 0, 0, 172, 458, 459,
	508, 460, 461, 462, 0, 173, 0, 0, 2533, 0,
	1000, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 984, 0, 1587, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 928, 0,
	0, 0, 0, 221, 222, 223, 224, 464, 465, 225,
	466, 226, 227, 467, 0, 228, 229, 230, 231, 232,
	233, 0, 927, 234, 468, 469, 470, 0, 235, 934,
	0, 917, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	937, 249, 250, 920, 918, 919, 924, 922, 921, 923,
	251, 252, 253, 254, 255, 256, 472, 473, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 474, 267, 268, 270,
	273, 269, 274, 275, 276, 954, 955, 0, 212, 0,
	0, 0, 0, 0, 277, 278, 279, 477, 280, 281,
	0, 282, 0, 283, 0, 0, 938, 284, 285, 0,
	286, 961, 0, 479, 287, 0, 288, 289, 290, 291,
	929, 930, 933, 339, 940, 292, 293, 0, 294, 295,
	297, 0, 0, 0, 213, 296, 298, 305, 0, 939,
	299, 483, 301, 300, 302, 303, 304, 484, 0, 485,
	0, 306, 941, 931, 942, 307, 308, 309, 943, 310,
	311, 0, 0, 312, 313, 314, 315, 987, 317, 316,
	0, 318, 962, 944, 319, 320, 945, 0, 321, 322,
	0, 0, 323, 324, 0, 325, 326, 328, 330, 327,
	329, 331, 333, 334, 332, 946, 335, 336, 338, 337,
	0, 214, 947, 0, 932, 489, 340, 341, 0, 342,
	343, 344, 0, 992, 346, 347, 348, 0, 0, 349,
	490, 948, 350, 949, 956, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 957, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 494,
	369, 370, 0, 371, 372, 373, 374, 375, 0, 377,
	378, 379, 376, 380, 381, 382, 383, 0, 384, 950,
	385, 386, 387, 388, 495, 994, 0, 390, 394, 395,
	396, 397, 398, 399, 400, 0, 407, 408, 401, 403,
	404, 405, 402, 406, 409, 410, 925, 411, 391, 392,
	412, 951, 413, 496, 414, 415, 0, 425, 416, 417,
	418, 393, 419, 423, 424, 420, 421, 422, 958, 0,
	427, 428, 426, 0, 429, 430, 431, 432, 433, 271,
	434, 272, 435, 0, 498, 499, 500, 501, 0, 442,
	0, 436, 437, 959, 438, 960, 0, 439, 440, 441,
	0, 443, 444, 0, 0, 445, 446, 447, 448, 449,
	451, 926, 452, 0, 450, 453, 454, 455, 504, 505,
	506, 0, 457, 456, 507, 0, 983, 0, 1000, 458,
	459, 508, 460, 461, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 984, 928, 989, 0, 0,
	0, 221, 222, 223, 224, 464, 465, 225, 466, 226,
	227, 467, 0, 228, 229, 230, 231, 232, 233, 0,
	927, 234, 468, 469, 470, 0, 235, 934, 0, 917,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 937, 249,
	250, 920, 918, 919, 924, 922, 921, 923, 251, 252,
	253, 254, 255, 256, 472, 473, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 474, 267, 268, 270, 273, 269,
	274, 275, 276, 954, 955, 0, 212, 0, 0, 0,
	0, 0, 277, 278, 279, 477, 280, 281, 0, 282,
	0, 283, 0, 0, 938, 284, 285, 0, 286, 961,
	0, 479, 287, 0, 288, 289, 290, 291, 929, 930,
	933, 339, 940, 292, 293, 0, 294, 295, 297, 0,
	0, 0, 213, 296, 298, 305, 0, 939, 299, 483,
	301, 300, 302, 303, 304, 484, 0, 485, 0, 306,
	941, 931, 942, 307, 308, 309, 943, 310, 311, 0,
	0, 312, 313, 314, 315, 987, 317, 316, 0, 318,
	962, 944, 319, 320, 945, 0, 321, 322, 0, 0,
	323, 324, 0, 325, 326, 328, 330, 327, 329, 331,
	333, 334, 332, 946, 335, 336, 338, 337, 0, 214,
	947, 0, 932, 489, 340, 341, 0, 342, 343, 344,
	0, 992, 346, 347, 348, 0, 0, 349, 490, 948,
	350, 949, 956, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 957, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 494, 369, 370,
	0, 371, 372, 373, 374, 375, 0, 377, 378, 379,
	376, 380, 381, 382, 383, 0, 384, 950, 385, 386,
	387, 388, 495, 994, 0, 390, 394, 395, 396, 397,
	398, 399, 400, 0, 407, 408, 401, 403, 404, 405,
	402, 406, 409, 410, 925, 411, 391, 392, 412, 951,
	413, 496, 414, 415, 0, 425, 416, 417, 418, 393,
	419, 423, 424, 420, 421, 422, 958, 0, 427, 428,
	426, 0, 429, 430, 431, 432, 433, 271, 434, 272,
	435, 0, 498, 499, 500, 501, 0, 442, 0, 436,
	437, 959, 438, 960, 0, 439, 440, 441, 0, 443,
	444, 0, 0, 445, 446, 447, 448, 449, 451, 926,
	452, 0, 450, 453, 454, 455, 504, 505, 506, 0,
	457, 456, 507, 1000, 0, 0, 0, 458, 459, 508,
	460, 461, 462, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 928, 0, 984, 0, 989, 221, 222, 223, 224,
	464, 465, 225, 466, 226, 227, 467, 0, 228, 229,
	230, 231, 232, 233, 0, 927, 234, 468, 469, 470,
	0, 235, 934, 0, 917, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 937, 249, 250, 920, 918, 919, 924,
	922, 921, 923, 251, 252, 253, 254, 255, 256, 472,
	473, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 474,
	267, 268, 270, 273, 269, 274, 275, 276, 954, 955,
	0, 212, 0, 0, 0, 0, 0, 277, 278, 279,
	477, 280, 281, 0, 282, 0, 283, 0, 0, 938,
	284, 285, 0, 286, 961, 0, 479, 287, 0, 288,
	289, 290, 291, 929, 930, 933, 339, 940, 292, 293,
	0, 294, 295, 297, 0, 0, 0, 213, 296, 298,
	305, 0, 939, 299, 483, 301, 300, 302, 303, 304,
	484, 0, 485, 0, 306, 941, 931, 942, 307, 308,
	309, 943, 310, 311, 0, 0, 312, 313, 314, 315,
	987, 317, 316, 0, 318, 962, 944, 319, 320, 945,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 334, 332, 946, 335,
	336, 338, 337, 0, 214, 947, 0, 932, 489, 340,
	341, 0, 342, 343, 344, 0, 992, 346, 347, 348,
	0, 0, 349, 490, 948, 350, 949, 956, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 957,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 494, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 950, 385, 386, 387, 388, 495, 994, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 0, 407,
	408, 401, 403, 404, 405, 402, 406, 409, 410, 925,
	411, 391, 392, 412, 951, 413, 496, 414, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 424, 420, 421,
	422, 958, 0, 427, 428, 426, 0, 429, 430, 431,
	432, 433, 271, 434, 272, 435, 0, 498, 499, 500,
	501, 0, 442, 0, 436, 437, 959, 438, 960, 0,
	439, 440, 441, 0, 443, 444, 0, 0, 445, 446,
	447, 448, 449, 451, 926, 452, 0, 450, 453, 454,
	455, 504, 505, 506, 0, 457, 456, 507, 1000, 0,
	0, 0, 458, 459, 508, 460, 461, 462, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 928, 0, 984, 0,
	989, 221, 222, 223, 224, 464, 465, 225, 466, 226,
	227, 467, 0, 228, 229, 230, 231, 232, 233, 0,
	927, 234, 468, 469, 470, 0, 235, 934, 0, 917,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 937, 249,
	250, 920, 918, 919, 924, 922, 921, 923, 251, 252,
	253, 254, 255, 256, 472, 473, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 474, 267, 268, 270, 273, 269,
	274, 275, 276, 954, 955, 0, 212, 0, 0, 0,
	0, 0, 277, 278, 279, 477, 280, 281, 0, 282,
	0, 283, 0, 0, 938, 284, 285, 0, 286, 961,
	0, 479, 287, 0, 288, 289, 290, 291, 929, 930,
	933, 339, 940, 292, 293, 0, 294, 295, 297, 0,
	0, 0, 213, 296, 298, 305, 0, 939, 299, 483,
	301, 300, 302, 303, 304, 484, 0, 485, 0, 306,
	941, 931, 942, 307, 308, 309, 943, 310, 311, 0,
	0, 312, 313, 314, 315, 0, 317, 316, 0, 318,
	962, 944, 319, 320, 945, 0, 321, 322, 0, 0,
	323, 324, 0, 325, 326, 328, 330, 327, 329, 331,
	333, 334, 332, 946, 335, 336, 338, 337, 0, 214,
	947, 0, 932, 489, 340, 341, 0, 342, 343, 344,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 948,
	350, 949, 956, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 957, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 494, 369, 370,
	0, 371, 372, 373, 374, 375, 0, 377, 378, 379,
	376, 380, 381, 382, 383, 0, 384, 950, 385, 386,
	387, 388, 495, 994, 0, 390, 394, 395, 396, 397,
	398, 399, 400, 0, 407, 408, 401, 403, 404, 405,
	402, 406, 409, 410, 925, 411, 391, 392, 412, 951,
	413, 496, 414, 415, 0, 425, 416, 417, 418, 393,
	419, 423, 424, 420, 421, 422, 958, 0, 427, 428,
	426, 0, 429, 430, 431, 432, 433, 271, 434, 272,
	435, 0, 498, 499, 500, 501, 0, 442, 0, 436,
	437, 959, 438, 960, 0, 439, 440, 441, 0, 443,
	444, 0, 0, 445, 446, 447, 448, 449, 451, 926,
	452, 0, 450, 453, 454, 455, 504, 505, 506, 0,
	457, 456, 507, 812, 0, 1158, 0, 458, 459, 508,
	460, 461, 462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 463, 0, 1482, 0, 0, 221, 222,
	223, 224, 464, 465, 225, 466, 226, 227, 467, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 468,
	469, 470, 0, 235, 471, 0, 1062, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 937, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 472, 473, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 474, 267, 268, 270, 273, 269, 274, 275, 276,
	475, 476, 0, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 477, 280, 281, 0, 282, 0, 283, 0,
	0, 938, 284, 285, 0, 286, 478, 0, 479, 287,
	0, 288, 289, 290, 291, 480, 481, 482, 339, 940,
	292, 293, 0, 294, 295, 297, 0, 0, 0, 0,
	296, 298, 305, 0, 939, 299, 483, 301, 300, 302,
	303, 304, 484, 0, 485, 0, 306, 941, 486, 942,
	307, 308, 309, 943, 310, 311, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 487, 944, 319,
	320, 945, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	946, 335, 336, 338, 337, 0, 0, 947, 0, 488,
	489, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 490, 948, 350, 949, 491,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 492, 360, 493, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 494, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 950, 385, 386, 387, 388, 495,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	178, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 0, 411, 391, 392, 412, 951, 413, 496, 414,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 497, 0, 427, 428, 426, 180, 429,
	430, 431, 432, 433, 271, 434, 272, 435, 0, 498,
	499, 500, 501, 0, 442, 0, 436, 437, 502, 438,
	503, 0, 439, 440, 441, 0, 443, 444, 0, 0,
	445, 446, 447, 448, 449, 451, 0, 452, 0, 450,
	453, 454, 455, 1304, 505, 506, 0, 457, 456, 507,
	1301, 0, 1158, 172, 458, 459, 508, 460, 461, 462,
	0, 173, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	463, 0, 148, 0, 0, 221, 222, 223, 224, 464,
	465, 225, 466, 226, 227, 467, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 468, 469, 470, 0,
	235, 471, 0, 1062, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 937, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 472, 473,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 474, 267,
	268, 270, 273, 269, 274, 275, 276, 475, 476, 0,
	212, 0, 0, 0, 0, 0, 277, 278, 279, 477,
	280, 281, 0, 282, 0, 283, 0, 0, 938, 284,
	285, 0, 286, 478, 0, 479, 287, 0, 288, 289,
	290, 291, 480, 481, 482, 339, 940, 292, 293, 0,
	294, 295, 297, 0, 0, 0, 0, 296, 298, 305,
	0, 939, 299, 483, 301, 300, 302, 303, 304, 484,
	0, 485, 0, 306, 941, 486, 942, 307, 308, 309,
	943, 310, 311, 0, 0, 312, 313, 314, 315, 0,
	317, 316, 0, 318, 487, 944, 319, 320, 945, 0,
	321, 322, 0, 0, 323, 324, 0, 325, 326, 328,
	330, 327, 329, 331, 333, 334, 332, 946, 335, 336,
	338, 337, 0, 0, 947, 0, 488, 489, 340, 341,
	0, 342, 343, 344, 0, 0, 346, 347, 348, 0,
	0, 349, 490, 948, 350, 949, 491, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 492, 360,
	493, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 494, 369, 370, 0, 371, 372, 373, 374, 375,
	0, 377, 378, 379, 376, 380, 381, 382, 383, 0,
	384, 950, 385, 386, 387, 388, 495, 389, 0, 390,
	394, 395, 396, 397, 398, 399, 400, 178, 407, 408,
	401, 403, 404, 405, 402, 406, 409, 410, 0, 411,
	391, 392, 412, 951, 413, 496, 414, 415, 0, 425,
	416, 417, 418, 393, 419, 423, 424, 420, 421, 422,
	497, 0, 427, 428, 426, 180, 429, 430, 431, 432,
	433, 271, 434, 272, 435, 0, 498, 499, 500, 501,
	0, 442, 0, 436, 437, 502, 438, 503, 0, 439,
	440, 441, 0, 443, 444, 0, 0, 445, 446, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	1304, 505, 506, 0, 457, 456, 507, 0, 0, 0,
	172, 458, 459, 508, 460, 461, 462, 0, 173, 0,
	0, 0, 0, 1158, 1157, 0, 0, 0, 0, 1155,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 148,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 463, 0, 0, 0, 0, 221, 222, 223, 224,
	464, 465, 225, 466, 226, 227, 467, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 468, 469, 470,
	0, 235, 471, 0, 1062, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 937, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 472,
	473, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 474,
	267, 268, 270, 273, 269, 274, 275, 276, 475, 476,
	0, 212, 0, 0, 0, 0, 0, 277, 278, 279,
	477, 280, 281, 0, 282, 0, 283, 0, 0, 938,
	284, 285, 0, 286, 478, 0, 479, 287, 0, 288,
	289, 290, 291, 480, 481, 482, 339, 940, 292, 293,
	0, 294, 295, 297, 0, 0, 0, 0, 296, 298,
	305, 0, 939, 299, 483, 301, 300, 302, 303, 304,
	484, 0, 485, 0, 306, 941, 486, 942, 307, 308,
	309, 943, 310, 311, 0, 0, 312, 313, 314, 315,
	0, 317, 316, 0, 318, 487, 944, 319, 320, 945,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 334, 332, 946, 335,
	336, 338, 337, 0, 0, 947, 0, 488, 489, 340,
	341, 0, 342, 343, 344, 0, 0, 346, 347, 348,
	0, 0, 349, 490, 948, 350, 949, 491, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 492,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 494, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 950, 385, 386, 387, 388, 495, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 0, 407,
	408, 401, 403, 404, 405, 402, 406, 409, 410, 0,
	411, 391, 392, 412, 951, 413, 496, 414, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 424, 420, 421,
	422, 497, 0, 427, 428, 426, 0, 429, 430, 431,
	432, 433, 271, 434, 272, 435, 0, 498, 499, 500,
	501, 0, 442, 0, 436, 437, 502, 438, 503, 0,
	439, 440, 441, 0, 443, 444, 0, 0, 445, 446,
	447, 448, 449, 451, 0, 452, 0, 450, 453, 454,
	455, 504, 505, 506, 0, 457, 456, 507, 0, 0,
	0, 0, 458, 459, 508, 460, 461, 462, 1158, 1157,
	0, 0, 0, 0, 1155, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	2727, 220, 0, 0, 0, 0, 463, 0, 0, 0,
	0, 221, 222, 223, 224, 464, 465, 225, 466, 226,
	227, 467, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 468, 469, 470, 0, 235, 471, 0, 1062,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 937, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 472, 473, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 474, 267, 268, 270, 273, 269,
	274, 275, 276, 475, 476, 0, 212, 0, 0, 0,
	0, 0, 277, 278, 279, 477, 280, 281, 0, 282,
	0, 283, 0, 0, 938, 284, 285, 0, 286, 478,
	0, 479, 287, 0, 288, 289, 290, 291, 480, 481,
	482, 339, 940, 292, 293, 0, 294, 295, 297, 0,
	0, 0, 0, 296, 298, 305, 0, 939, 299, 483,
	301, 300, 302, 303, 304, 484, 0, 485, 0, 306,
	941, 486, 942, 307, 308, 309, 943, 310, 311, 0,
	0, 312, 313, 314, 315, 0, 317, 316, 0, 318,
	487, 944, 319, 320, 945, 0, 321, 322, 0, 0,
	323, 324, 0, 325, 326, 328, 330, 327, 329, 331,
	333, 334, 332, 946, 335, 336, 338, 337, 0, 0,
	947, 0, 488, 489, 340, 341, 0, 342, 343, 344,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 948,
	350, 949, 491, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 492, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 494, 369, 370,
	0, 371, 372, 373, 374, 375, 0, 377, 378, 379,
	376, 380, 381, 382, 383, 0, 384, 950, 385, 386,
	387, 388, 495, 389, 0, 390, 394, 395, 396, 397,
	398, 399, 400, 0, 407, 408, 401, 403, 404, 405,
	402, 406, 409, 410, 0, 411, 391, 392, 412, 951,
	413, 496, 414, 415, 0, 425, 416, 417, 418, 393,
	419, 423, 424, 420, 421, 422, 497, 0, 427, 428,
	426, 0, 429, 430, 431, 432, 433, 271, 434, 272,
	435, 0, 498, 499, 500, 501, 0, 442, 0, 436,
	437, 502, 438, 503, 0, 439, 440, 441, 0, 443,
	444, 0, 0, 445, 446, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 504, 505, 506, 0,
	457, 456, 507, 1000, 0, 0, 0, 458, 459, 508,
	460, 461, 462, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 928, 0, 0, 0, 1308, 221, 222, 223, 224,
	464, 465, 225, 466, 226, 227, 467, 0, 228, 229,
	230, 231, 232, 233, 0, 927, 234, 468, 469, 470,
	0, 235, 934, 0, 917, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 937, 249, 250, 920, 918, 919, 924,
	922, 921, 923, 251, 252, 253, 254, 255, 256, 472,
	473, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 474,
	267, 268, 270, 273, 269, 274, 275, 276, 954, 955,
	0, 212, 0, 0, 0, 0, 0, 277, 278, 279,
	477, 280, 281, 0, 282, 0, 283, 0, 0, 938,
	284, 285, 0, 286, 961, 0, 479, 287, 0, 288,
	289, 290, 291, 929, 930, 933, 339, 940, 292, 293,
	0, 294, 295, 297, 0, 0, 0, 213, 296, 298,
	305, 0, 939, 299, 483, 301, 300, 302, 303, 304,
	484, 0, 485, 0, 306, 941, 931, 942, 307, 308,
	309, 943, 310, 311, 0, 0, 312, 313, 314, 315,
	0, 317, 316, 0, 318, 962, 944, 319, 320, 945,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 334, 332, 946, 335,
	336, 338, 337, 0, 214, 947, 0, 932, 489, 340,
	341, 0, 342, 343, 344, 0, 0, 346, 347, 348,
	0, 0, 349, 490, 948, 350, 949, 956, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 957,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 494, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 950, 385, 386, 387, 388, 495, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 0, 407,
	408, 401, 403, 404, 405, 402, 406, 409, 410, 925,
	411, 391, 392, 412, 951, 413, 496, 414, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 424, 420, 421,
	422, 958, 0, 427, 428, 426, 0, 429, 430, 431,
	432, 433, 271, 434, 272, 435, 0, 498, 499, 500,
	501, 0, 442, 0, 436, 437, 959, 438, 960, 0,
	439, 440, 441, 0, 443, 444, 0, 0, 445, 446,
	447, 448, 449, 451, 926, 452, 0, 450, 453, 454,
	455, 504, 505, 506, 0, 457, 456, 507, 812, 0,
	209, 0, 458, 459, 508, 460, 461, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 463, 0,
	0, 0, 0, 221, 222, 223, 224, 464, 465, 225,
	466, 226, 227, 467, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 468, 469, 470, 0, 235, 471,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 472, 473, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 474, 267, 268, 270,
	273, 269, 274, 275, 276, 475, 476, 0, 0, 0,
	0, 0, 0, 0, 277, 278, 279, 477, 280, 281,
	0, 282, 0, 283, 0, 0, 0, 284, 285, 0,
	286, 478, 0, 479, 287, 0, 288, 289, 290, 291,
	480, 481, 482, 339, 0, 292, 293, 0, 294, 295,
	297, 0, 0, 0, 0, 296, 298, 305, 0, 0,
	299, 483, 301, 300, 302, 303, 304, 484, 0, 485,
	0, 306, 0, 486, 0, 307, 308, 309, 0, 310,
	311, 0, 0, 312, 313, 314, 315, 0, 317, 316,
	0, 318, 487, 0, 319, 320, 0, 0, 321, 322,
	0, 0, 323, 324, 0, 325, 326, 328, 330, 327,
	329, 331, 333, 334, 332, 0, 335, 336, 338, 337,
	0, 0, 0, 0, 488, 489, 340, 341, 0, 342,
	343, 344, 0, 0, 346, 347, 348, 0, 0, 349,
	490, 0, 350, 0, 491, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 492, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 494,
	369, 370, 0, 371, 372, 373, 374, 375, 0, 377,
	378, 379, 376, 380, 381, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 495, 389, 0, 390, 394, 395,
	396, 397, 398, 399, 400, 178, 407, 408, 401, 403,
	404, 405, 402, 406, 409, 410, 0, 411, 391, 392,
	412, 0, 413, 496, 414, 415, 0, 425, 416, 417,
	418, 393, 419, 423, 424, 420, 421, 422, 497, 0,
	427, 428, 426, 180, 429, 430, 431, 432, 433, 271,
	434, 272, 435, 0, 498, 499, 500, 501, 0, 442,
	0, 436, 437, 502, 438, 503, 0, 439, 440, 441,
	0, 443, 444, 0, 0, 445, 446, 447, 448, 449,
	451, 0, 452, 0, 450, 453, 454, 455, 1304, 505,
	506, 0, 457, 456, 507, 209, 0, 0, 172, 458,
	459, 508, 460, 461, 462, 0, 173, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 463, 0, 0, 0, 148, 221, 222,
	223, 224, 464, 465, 225, 466, 226, 227, 467, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 468,
	469, 470, 0, 235, 471, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 472, 473, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 474, 267, 268, 270, 273, 269, 274, 275, 276,
	475, 476, 0, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 477, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 0, 286, 478, 0, 479, 287,
	0, 288, 289, 290, 291, 480, 481, 482, 339, 0,
	292, 293, 0, 294, 295, 297, 0, 0, 0, 213,
	296, 298, 305, 0, 0, 299, 483, 301, 300, 302,
	303, 304, 484, 0, 485, 0, 306, 0, 486, 0,
	307, 308, 309, 0, 310, 311, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 487, 0, 319,
	320, 0, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	0, 335, 336, 338, 337, 0, 214, 0, 0, 488,
	489, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 490, 0, 350, 0, 491,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 492, 360, 493, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 494, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 495,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 0, 411, 391, 392, 412, 0, 413, 496, 414,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 497, 0, 427, 428, 426, 0, 429,
	430, 431, 432, 433, 271, 434, 272, 435, 0, 498,
	499, 500, 501, 0, 442, 0, 436, 437, 502, 438,
	503, 0, 439, 440, 441, 0, 443, 444, 0, 0,
	445, 446, 447, 448, 449, 451, 0, 452, 0, 450,
	453, 454, 455, 504, 505, 506, 0, 457, 456, 507,
	209, 0, 0, 0, 458, 459, 508, 460, 461, 462,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 463, 0,
	0, 0, 1592, 221, 222, 223, 224, 464, 465, 225,
	466, 226, 227, 467, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 468, 469, 470, 0, 235, 471,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 472, 473, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 474, 267, 268, 270,
	273, 269, 274, 275, 276, 475, 476, 0, 212, 0,
	0, 0, 0, 0, 277, 278, 279, 477, 280, 281,
	0, 282, 0, 283, 0, 0, 0, 284, 285, 0,
	286, 478, 0, 479, 287, 0, 288, 289, 290, 291,
	480, 481, 482, 339, 0, 292, 293, 0, 294, 295,
	297, 0, 0, 0, 213, 296, 298, 305, 0, 0,
	299, 483, 301, 300, 302, 303, 304, 484, 0, 485,
	0, 306, 0, 486, 0, 307, 308, 309, 0, 310,
	311, 0, 0, 312, 313, 314, 315, 0, 317, 316,
	0, 318, 487, 0, 319, 320, 0, 0, 321, 322,
	0, 0, 323, 324, 0, 325, 326, 328, 330, 327,
	329, 331, 333, 334, 332, 0, 335, 336, 338, 337,
	0, 214, 0, 0, 488, 489, 340, 341, 0, 342,
	343, 344, 0, 0, 346, 347, 348, 0, 0, 349,
	490, 0, 350, 0, 491, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 492, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 494,
	369, 370, 0, 371, 372, 373, 374, 375, 0, 377,
	378, 379, 376, 380, 381, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 495, 389, 0, 390, 394, 395,
	396, 397, 398, 399, 400, 0, 407, 408, 401, 403,
	404, 405, 402, 406, 409, 410, 0, 411, 391, 392,
	412, 0, 413, 496, 414, 415, 0, 425, 416, 417,
	418, 393, 419, 423, 424, 420, 421, 422, 497, 0,
	427, 428, 426, 0, 429, 430, 431, 432, 433, 271,
	434, 272, 435, 0, 498, 499, 500, 501, 0, 442,
	0, 436, 437, 502, 438, 503, 0, 439, 440, 441,
	0, 443, 444, 0, 0, 445, 446, 447, 448, 449,
	451, 0, 452, 0, 450, 453, 454, 455, 504, 505,
	506, 0, 457, 456, 507, 209, 0, 0, 0, 458,
	459, 508, 460, 461, 462, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 463, 0, 2679, 0, 0, 221, 222,
	223, 224, 464, 465, 225, 466, 226, 227, 467, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 468,
	469, 470, 0, 235, 471, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 472, 473, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 474, 267, 268, 270, 273, 269, 274, 275, 276,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 277,
	278, 279, 477, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 0, 286, 478, 0, 479, 287,
	0, 288, 289, 290, 291, 480, 481, 482, 339, 0,
	292, 293, 0, 294, 295, 297, 0, 0, 0, 0,
	296, 298, 305, 0, 0, 299, 483, 301, 300, 302,
	303, 304, 484, 0, 485, 0, 306, 0, 486, 0,
	307, 308, 309, 0, 310, 311, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 487, 0, 319,
	320, 0, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	0, 335, 336, 338, 337, 0, 0, 0, 0, 488,
	489, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 490, 0, 350, 0, 491,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 492, 360, 493, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 494, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 495,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 0, 411, 391, 392, 412, 0, 413, 496, 414,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 497, 0, 427, 428, 426, 0, 429,
	430, 431, 432, 433, 271, 434, 272, 435, 0, 498,
	499, 500, 501, 0, 442, 0, 436, 437, 502, 438,
	503, 0, 439, 440, 441, 0, 443, 444, 0, 0,
	445, 446, 447, 448, 449, 451, 0, 452, 0, 450,
	453, 454, 455, 504, 505, 506, 0, 457, 456, 507,
	209, 0, 0, 0, 458, 459, 508, 460, 461, 462,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 463, 0,
	0, 0, 2324, 221, 222, 223, 224, 464, 465, 225,
	466, 226, 227, 467, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 468, 469, 470, 0, 235, 471,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 472, 473, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 474, 267, 268, 270,
	273, 269, 274, 275, 276, 475, 476, 0, 0, 0,
	0, 0, 0, 0, 277, 278, 279, 477, 280, 281,
	0, 282, 0, 283, 0, 0, 0, 284, 285, 0,
	286, 478, 0, 479, 287, 0, 288, 289, 290, 291,
	480, 481, 482, 339, 0, 292, 293, 0, 294, 295,
	297, 0, 0, 0, 0, 296, 298, 305, 0, 0,
	299, 483, 301, 300, 302, 303, 304, 484, 0, 485,
	0, 306, 0, 486, 0, 307, 308, 309, 0, 310,
	311, 0, 0, 312, 313, 314, 315, 0, 317, 316,
	0, 318, 487, 0, 319, 320, 0, 0, 321, 322,
	0, 0, 323, 324, 0, 325, 326, 328, 330, 327,
	329, 331, 333, 334, 332, 0, 335, 336, 338, 337,
	0, 0, 0, 0, 488, 489, 340, 341, 0, 342,
	343, 344, 0, 0, 346, 347, 348, 0, 0, 349,
	490, 0, 350, 0, 491, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 492, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 494,
	369, 370, 0, 371, 372, 373, 374, 375, 0, 377,
	378, 379, 376, 380, 381, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 495, 389, 0, 390, 394, 395,
	396, 397, 398, 399, 400, 0, 407, 408, 401, 403,
	404, 405, 402, 406, 409, 410, 0, 411, 391, 392,
	412, 0, 413, 496, 414, 415, 0, 425, 416, 417,
	418, 393, 419, 423, 424, 420, 421, 422, 497, 0,
	427, 428, 426, 0, 429, 430, 431, 432, 433, 271,
	434, 272, 435, 0, 498, 499, 500, 501, 0, 442,
	0, 436, 437, 502, 438, 503, 0, 439, 440, 441,
	0, 443, 444, 0, 0, 445, 446, 447, 448, 449,
	451, 0, 452, 0, 450, 453, 454, 455, 504, 505,
	506, 0, 457, 456, 507, 686, 0, 577, 0, 458,
	459, 508, 460, 461, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 463, 0, 2802, 0, 0,
	221, 222, 223, 224, 464, 465, 225, 466, 226, 227,
	467, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 468, 469, 470, 0, 235, 471, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 583,
	254, 255, 256, 472, 473, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 474, 267, 268, 270, 273, 269, 274,
	275, 276, 475, 476, 0, 212, 0, 0, 0, 0,
	0, 277, 278, 279, 477, 280, 281, 0, 282, 0,
	283, 0, 0, 0, 284, 285, 0, 286, 478, 0,
	479, 287, 0, 288, 289, 290, 291, 480, 481, 482,
	339, 0, 292, 293, 0, 294, 295, 297, 0, 0,
	0, 213, 296, 298, 305, 0, 0, 299, 483, 301,
	300, 302, 303, 304, 484, 0, 485, 0, 306, 0,
	486, 0, 307, 308, 309, 0, 310, 311, 0, 0,
	312, 313, 314, 315, 0, 317, 316, 0, 318, 487,
	0, 319, 320, 0, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	334, 332, 0, 335, 336, 338, 337, 0, 214, 0,
	0, 488, 489, 340, 341, 0, 342, 343, 344, 0,
	0, 346, 347, 348, 0, 0, 349, 490, 0, 350,
	0, 491, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 492, 360, 493, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 494, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 495, 389, 0, 390, 394, 395, 396, 397, 398,
	399, 400, 0, 407, 408, 401, 403, 404, 405, 402,
	406, 409, 410, 0, 411, 391, 392, 412, 0, 413,
	496, 414, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 424, 420, 421, 422, 497, 0, 427, 428, 426,
	582, 429, 430, 431, 432, 433, 271, 434, 272, 435,
	0, 498, 499, 500, 501, 0, 442, 0, 436, 437,
	502, 438, 503, 0, 439, 440, 441, 0, 443, 444,
	0, 0, 445, 446, 447, 448, 449, 451, 0, 452,
	0, 450, 453, 454, 455, 504, 505, 506, 0, 457,
	456, 507, 0, 576, 0, 577, 458, 459, 508, 460,
	461, 462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 586, 220, 0,
	0, 0, 0, 463, 0, 0, 0, 0, 221, 222,
	223, 224, 464, 465, 225, 466, 226, 227, 467, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 468,
	469, 470, 0, 235, 471, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 583, 254, 255,
	256, 472, 473, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 474, 267, 268, 270, 273, 269, 274, 275, 276,
	475, 476, 0, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 477, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 0, 286, 478, 0, 479, 287,
	0, 288, 289, 290, 291, 480, 481, 482, 339, 0,
	292, 293, 0, 294, 295, 297, 0, 0, 0, 213,
	296, 298, 305, 0, 0, 299, 483, 301, 300, 302,
	303, 304, 484, 0, 485, 0, 306, 0, 486, 0,
	307, 308, 309, 0, 310, 311, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 487, 0, 319,
	320, 0, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	0, 335, 336, 338, 337, 0, 214, 0, 0, 488,
	489, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 490, 0, 350, 0, 491,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 492, 360, 493, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 494, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 495,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 0, 411, 391, 392, 412, 0, 413, 496, 414,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 497, 0, 427, 428, 426, 582, 429,
	430, 431, 432, 433, 271, 434, 272, 435, 0, 498,
	499, 500, 501, 0, 442, 0, 436, 437, 502, 438,
	503, 0, 439, 440, 441, 0, 443, 444, 0, 0,
	445, 446, 447, 448, 449, 451, 0, 452, 0, 450,
	453, 454, 455, 504, 505, 506, 577, 457, 456, 507,
	0, 0, 0, 0, 458, 459, 508, 460, 461, 462,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 463, 586, 0, 0, 0, 221,
	222, 223, 224, 464, 465, 225, 466, 226, 227, 467,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	468, 469, 470, 0, 235, 471, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 583, 254,
	255, 256, 472, 473, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 474, 267, 268, 270, 273, 269, 274, 275,
	276, 475, 476, 0, 212, 0, 0, 0, 0, 0,
	277, 278, 279, 477, 280, 281, 0, 282, 0, 283,
	0, 0, 0, 284, 285, 0, 286, 478, 0, 479,
	287, 0, 288, 289, 290, 291, 480, 481, 482, 339,
	0, 292, 293, 0, 294, 295, 297, 0, 0, 0,
	213, 296, 298, 305, 0, 0, 299, 483, 301, 300,
	302, 303, 304, 484, 0, 485, 0, 306, 0, 486,
	0, 307, 308, 309, 0, 310, 311, 0, 0, 312,
	313, 314, 315, 0, 317, 316, 0, 318, 487, 0,
	319, 320, 0, 0, 321, 322, 0, 0, 323, 324,
	0, 325, 326, 328, 330, 327, 329, 331, 333, 334,
	332, 0, 335, 336, 338, 337, 0, 214, 0, 0,
	488, 489, 340, 341, 0, 342, 343, 344, 0, 0,
	346, 347, 348, 0, 0, 349, 490, 0, 350, 0,
	491, 351, 345, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 492, 360, 493, 361, 0, 362, 0, 363,
	364, 365, 366, 367, 368, 494, 369, 370, 0, 371,
	372, 373, 374, 375, 0, 377, 378, 379, 376, 380,
	381, 382, 383, 0, 384, 0, 1875, 386, 387, 388,
	495, 389, 0, 390, 394, 395, 396, 397, 398, 399,
	400, 0, 407, 408, 401, 403, 404, 405, 402, 406,
	409, 410, 0, 411, 391, 392, 412, 0, 413, 496,
	414, 415, 0, 425, 416, 417, 418, 393, 419, 423,
	424, 420, 421, 422, 497, 0, 427, 428, 426, 582,
	429, 430, 431, 432, 433, 271, 434, 272, 435, 0,
	498, 499, 500, 501, 0, 442, 0, 436, 437, 502,
	438, 503, 0, 439, 440, 441, 0, 443, 444, 0,
	0, 445, 446, 447, 448, 449, 451, 0, 452, 0,
	450, 453, 454, 455, 504, 505, 506, 577, 457, 456,
	507, 0, 0, 0, 0, 458, 459, 508, 460, 461,
	462, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 463, 586, 0, 0, 0,
	221, 222, 223, 224, 464, 465, 225, 466, 226, 227,
	467, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 468, 469, 470, 0, 235, 471, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 583,
	254, 255, 256, 472, 473, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 474, 267, 268, 270, 273, 269, 274,
	275, 276, 475, 476, 0, 212, 0, 0, 0, 0,
	0, 277, 278, 279, 477, 280, 281, 0, 282, 0,
	283, 0, 0, 0, 284, 285, 0, 286, 478, 0,
	479, 287, 0, 288, 289, 290, 291, 480, 481, 482,
	339, 0, 292, 293, 0, 294, 295, 297, 0, 0,
	0, 213, 296, 298, 305, 0, 0, 299, 483, 301,
	300, 302, 303, 304, 484, 0, 485, 0, 306, 0,
	486, 0, 307, 308, 309, 0, 310, 311, 0, 0,
	312, 313, 314, 315, 0, 317, 316, 0, 318, 487,
	0, 319, 320, 0, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	334, 332, 0, 335, 336, 338, 337, 0, 214, 0,
	0, 488, 489, 340, 341, 0, 342, 343, 344, 0,
	0, 346, 347, 348, 0, 0, 349, 490, 0, 350,
	0, 491, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 492, 360, 493, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 494, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 495, 389, 0, 390, 394, 395, 396, 397, 398,
	399, 400, 0, 407, 408, 401, 403, 404, 405, 402,
	406, 409, 410, 0, 411, 391, 392, 412, 0, 413,
	496, 414, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 424, 420, 421, 422, 497, 0, 427, 428, 426,
	582, 429, 430, 431, 432, 433, 271, 434, 272, 435,
	0, 498, 499, 500, 501, 0, 442, 0, 436, 437,
	502, 438, 503, 0, 439, 440, 441, 0, 443, 444,
	0, 0, 445, 446, 447, 448, 449, 451, 0, 452,
	0, 450, 453, 454, 455, 504, 505, 506, 209, 457,
	456, 507, 0, 0, 0, 0, 458, 459, 508, 460,
	461, 462, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 463, 586, 0, 0,
	0, 221, 222, 223, 224, 464, 465, 225, 466, 226,
	227, 467, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 468, 469, 470, 0, 235, 471, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 472, 473, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 474, 267, 268, 270, 273, 269,
	274, 275, 276, 475, 476, 0, 212, 0, 0, 0,
	0, 0, 277, 278, 279, 477, 280, 281, 0, 282,
	0, 283, 0, 0, 0, 284, 285, 0, 286, 478,
	0, 479, 287, 0, 288, 289, 290, 291, 480, 481,
	482, 339, 0, 292, 293, 0, 294, 295, 297, 0,
	0, 0, 213, 296, 298, 305, 0, 0, 299, 483,
	301, 300, 302, 303, 304, 484, 0, 485, 0, 306,
	0, 486, 0, 307, 308, 309, 0, 310, 311, 0,
	0, 312, 313, 314, 315, 0, 317, 316, 0, 318,
	487, 0, 319, 320, 0, 0, 321, 322, 0, 0,
	323, 324, 0, 325, 326, 328, 330, 327, 329, 331,
	333, 334, 332, 0, 335, 336, 338, 337, 0, 214,
	0, 0, 488, 489, 340, 341, 0, 342, 343, 344,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 0,
	350, 0, 491, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 492, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 494, 369, 370,
	0, 371, 372, 373, 374, 375, 0, 377, 378, 379,
	376, 380, 381, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 495, 389, 0, 390, 394, 395, 396, 397,
	398, 399, 400, 0, 407, 408, 401, 403, 404, 405,
	402, 406, 409, 410, 0, 411, 391, 392, 412, 0,
	413, 496, 414, 415, 0, 425, 416, 417, 418, 393,
	419, 423, 424, 420, 421, 422, 497, 0, 427, 428,
	426, 0, 429, 430, 431, 432, 433, 271, 434, 272,
	435, 0, 498, 499, 500, 501, 0, 442, 0, 436,
	437, 502, 438, 503, 0, 439, 440, 441, 0, 443,
	444, 0, 0, 445, 446, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 504, 505, 506, 0,
	457, 456, 507, 0, 0, 0, 0, 458, 459, 508,
	460, 461, 462, 1331, 0, 1158, 1157, 0, 0, 0,
	0, 1155, 0, 0, 0, 0, 0, 0, 586, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 463, 0, 0, 0, 0, 221, 222,
	223, 224, 464, 465, 225, 466, 226, 227, 467, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 468,
	469, 470, 0, 235, 471, 0, 1062, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 937, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 472, 473, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 474, 267, 268, 270, 273, 269, 274, 275, 276,
	475, 476, 0, 212, 0, 0, 0, 0, 0, 1330,
	278, 279, 477, 280, 281, 0, 282, 0, 283, 0,
	0, 938, 284, 285, 0, 286, 478, 0, 479, 287,
	0, 288, 289, 290, 291, 480, 481, 482, 339, 940,
	292, 293, 0, 294, 295, 297, 0, 0, 0, 0,
	296, 298, 305, 0, 939, 299, 483, 301, 300, 302,
	303, 304, 484, 0, 485, 0, 306, 941, 486, 942,
	307, 308, 309, 943, 310, 311, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 487, 944, 319,
	320, 945, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	946, 335, 336, 338, 337, 0, 0, 947, 0, 488,
	489, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 490, 948, 350, 949, 491,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 492, 360, 493, 361, 0, 362, 0, 363, 364,
	365, 366, 1329, 368, 494, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 950, 385, 386, 387, 388, 495,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 0, 411, 391, 392, 412, 951, 413, 496, 414,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 497, 0, 427, 428, 426, 0, 429,
	430, 431, 432, 433, 271, 434, 272, 435, 0, 498,
	499, 500, 501, 0, 442, 0, 436, 437, 502, 438,
	503, 0, 439, 440, 441, 0, 443, 444, 0, 0,
	445, 446, 447, 448, 449, 451, 0, 452, 0, 450,
	453, 454, 455, 504, 505, 506, 0, 457, 456, 507,
	0, 0, 0, 0, 458, 459, 508, 460, 461, 462,
	1299, 0, 1158, 1157, 0, 0, 0, 0, 1155, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	463, 0, 0, 0, 0, 221, 222, 223, 224, 464,
	465, 225, 466, 226, 227, 467, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 468, 469, 470, 0,
	235, 471, 0, 1062, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 937, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 472, 473,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 474, 267,
	268, 270, 273, 269, 274, 275, 276, 475, 476, 0,
	212, 0, 0, 0, 0, 0, 277, 278, 279, 477,
	280, 281, 0, 282, 0, 283, 0, 0, 938, 284,
	285, 0, 286, 478, 0, 479, 287, 0, 288, 289,
	290, 291, 1298, 481, 482, 339, 940, 292, 293, 0,
	294, 295, 297, 0, 0, 0, 0, 296, 298, 305,
	0, 939, 299, 483, 301, 300, 302, 303, 304, 484,
	0, 485, 0, 306, 941, 486, 942, 307, 308, 309,
	943, 310, 311, 0, 0, 312, 313, 314, 315, 0,
	317, 316, 0, 318, 487, 944, 319, 320, 945, 0,
	321, 322, 0, 0, 323, 324, 0, 325, 326, 328,
	330, 327, 329, 331, 333, 334, 332, 946, 335, 336,
	338, 337, 0, 0, 947, 0, 488, 489, 340, 341,
	0, 342, 343, 344, 0, 0, 346, 347, 348, 0,
	0, 349, 490, 948, 350, 949, 491, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 492, 360,
	493, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 494, 369, 370, 0, 371, 372, 373, 374, 375,
	0, 377, 378, 379, 376, 380, 381, 382, 383, 0,
	384, 950, 385, 386, 387, 388, 495, 389, 0, 390,
	394, 395, 396, 397, 398, 399, 400, 0, 407, 408,
	401, 403, 404, 405, 402, 406, 409, 410, 0, 411,
	391, 392, 412, 951, 413, 496, 414, 415, 0, 425,
	416, 417, 418, 393, 419, 423, 424, 420, 421, 422,
	497, 0, 427, 428, 426, 0, 429, 430, 431, 432,
	433, 271, 434, 272, 435, 0, 498, 499, 500, 501,
	0, 442, 0, 436, 437, 502, 438, 503, 0, 439,
	440, 441, 0, 443, 444, 0, 0, 445, 446, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	504, 505, 506, 0, 457, 456, 507, 0, 0, 0,
	0, 458, 459, 508, 460, 461, 462, 1295, 0, 1158,
	1157, 0, 0, 0, 0, 1155, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 463, 0, 0,
	0, 0, 221, 222, 223, 224, 464, 465, 225, 466,
	226, 227, 467, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 468, 469, 470, 0, 235, 471, 0,
	1062, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 937,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 472, 473, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 474, 267, 268, 270, 273,
	269, 274, 275, 276, 475, 476, 0, 212, 0, 0,
	0, 0, 0, 277, 278, 279, 477, 280, 281, 0,
	282, 0, 283, 0, 0, 938, 284, 285, 0, 286,
	478, 0, 479, 287, 0, 288, 289, 290, 291, 1294,
	481, 482, 339, 940, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 0, 296, 298, 305, 0, 939, 299,
	483, 301, 300, 302, 303, 304, 484, 0, 485, 0,
	306, 941, 486, 942, 307, 308, 309, 943, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 487, 944, 319, 320, 945, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 946, 335, 336, 338, 337, 0,
	0, 947, 0, 488, 489, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 490,
	948, 350, 949, 491, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 492, 360, 493, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 494, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 950, 385,
	386, 387, 388, 495, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	951, 413, 496, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 497, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	272, 435, 0, 498, 499, 500, 501, 0, 442, 0,
	436, 437, 502, 438, 503, 0, 439, 440, 441, 0,
	443, 444, 0, 0, 445, 446, 447, 448, 449, 451,
	0, 452, 0, 450, 453, 454, 455, 504, 505, 506,
	0, 457, 456, 507, 0, 0, 0, 0, 458, 459,
	508, 460, 461, 462, 1233, 0, 1158, 1157, 0, 0,
	0, 0, 1155, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 463, 0, 0, 0, 0, 221,
	222, 223, 224, 464, 465, 225, 466, 226, 227, 467,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	468, 469, 470, 0, 235, 471, 0, 1062, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 937, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 472, 473, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 474, 267, 268, 270, 273, 269, 274, 275,
	276, 475, 476, 0, 212, 0, 0, 0, 0, 0,
	277, 278, 279, 477, 280, 281, 0, 282, 0, 283,
	0, 0, 938, 284, 285, 0, 286, 478, 0, 479,
	287, 0, 288, 289, 290, 291, 1232, 481, 482, 339,
	940, 292, 293, 0, 294, 295, 297, 0, 0, 0,
	0, 296, 298, 305, 0, 939, 299, 483, 301, 300,
	302, 303, 304, 484, 0, 485, 0, 306, 941, 486,
	942, 307, 308, 309, 943, 310, 311, 0, 0, 312,
	313, 314, 315, 0, 317, 316, 0, 318, 487, 944,
	319, 320, 945, 0, 321, 322, 0, 0, 323, 324,
	0, 325, 326, 328, 330, 327, 329, 331, 333, 334,
	332, 946, 335, 336, 338, 337, 0, 0, 947, 0,
	488, 489, 340, 341, 0, 342, 343, 344, 0, 0,
	346, 347, 348, 0, 0, 349, 490, 948, 350, 949,
	491, 351, 345, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 492, 360, 493, 361, 0, 362, 0, 363,
	364, 365, 366, 367, 368, 494, 369, 370, 0, 371,
	372, 373, 374, 375, 0, 377, 378, 379, 376, 380,
	381, 382, 383, 0, 384, 950, 385, 386, 387, 388,
	495, 389, 0, 390, 394, 395, 396, 397, 398, 399,
	400, 0, 407, 408, 401, 403, 404, 405, 402, 406,
	409, 410, 0, 411, 391, 392, 412, 951, 413, 496,
	414, 415, 0, 425, 416, 417, 418, 393, 419, 423,
	424, 420, 421, 422, 497, 0, 427, 428, 426, 0,
	429, 430, 431, 432, 433, 271, 434, 272, 435, 0,
	498, 499, 500, 501, 0, 442, 0, 436, 437, 502,
	438, 503, 0, 439, 440, 441, 0, 443, 444, 0,
	0, 445, 446, 447, 448, 449, 451, 0, 452, 0,
	450, 453, 454, 455, 504, 505, 506, 0, 457, 456,
	507, 0, 0, 0, 0, 458, 459, 508, 460, 461,
	462, 1230, 0, 1158, 1157, 0, 0, 0, 0, 1155,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 463, 0, 0, 0, 0, 221, 222, 223, 224,
	464, 465, 225, 466, 226, 227, 467, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 468, 469, 470,
	0, 235, 471, 0, 1062, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 937, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 472,
	473, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 474,
	267, 268, 270, 273, 269, 274, 275, 276, 475, 476,
	0, 212, 0, 0, 0, 0, 0, 277, 278, 279,
	477, 280, 281, 0, 282, 0, 283, 0, 0, 938,
	284, 285, 0, 286, 478, 0, 479, 287, 0, 288,
	289, 290, 291, 1229, 481, 482, 339, 940, 292, 293,
	0, 294, 295, 297, 0, 0, 0, 0, 296, 298,
	305, 0, 939, 299, 483, 301, 300, 302, 303, 304,
	484, 0, 485, 0, 306, 941, 486, 942, 307, 308,
	309, 943, 310, 311, 0, 0, 312, 313, 314, 315,
	0, 317, 316, 0, 318, 487, 944, 319, 320, 945,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 334, 332, 946, 335,
	336, 338, 337, 0, 0, 947, 0, 488, 489, 340,
	341, 0, 342, 343, 344, 0, 0, 346, 347, 348,
	0, 0, 349, 490, 948, 350, 949, 491, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 492,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 494, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 950, 385, 386, 387, 388, 495, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 0, 407,
	408, 401, 403, 404, 405, 402, 406, 409, 410, 0,
	411, 391, 392, 412, 951, 413, 496, 414, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 424, 420, 421,
	422, 497, 0, 427, 428, 426, 0, 429, 430, 431,
	432, 433, 271, 434, 272, 435, 0, 498, 499, 500,
	501, 0, 442, 0, 436, 437, 502, 438, 503, 0,
	439, 440, 441, 0, 443, 444, 0, 0, 445, 446,
	447, 448, 449, 451, 0, 452, 0, 450, 453, 454,
	455, 504, 505, 506, 0, 457, 456, 507, 0, 0,
	0, 0, 458, 459, 508, 460, 461, 462, 1151, 0,
	1158, 1157, 0, 0, 0, 0, 1155, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 463, 0,
	0, 0, 0, 221, 222, 223, 224, 464, 465, 225,
	466, 226, 227, 467, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 468, 469, 470, 0, 235, 471,
	0, 1062, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	937, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 472, 473, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 474, 267, 268, 270,
	273, 269, 274, 275, 276, 475, 476, 0, 212, 0,
	0, 0, 0, 0, 277, 278, 279, 477, 280, 281,
	0, 282, 0, 283, 0, 0, 938, 284, 285, 0,
	286, 478, 0, 479, 287, 0, 288, 289, 290, 291,
	1153, 481, 482, 339, 940, 292, 293, 0, 294, 295,
	297, 0, 0, 0, 0, 296, 298, 305, 0, 939,
	299, 483, 301, 300, 302, 303, 304, 484, 0, 485,
	0, 306, 941, 486, 942, 307, 308, 309, 943, 310,
	311, 0, 0, 312, 313, 314, 315, 0, 317, 316,
	0, 318, 487, 944, 319, 320, 945, 0, 321, 322,
	0, 0, 323, 324, 0, 325, 326, 328, 330, 327,
	329, 331, 333, 334, 332, 946, 335, 336, 338, 337,
	0, 0, 947, 0, 488, 489, 340, 341, 0, 342,
	343, 344, 0, 0, 346, 347, 348, 0, 0, 349,
	490, 948, 350, 949, 491, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 492, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 494,
	369, 370, 0, 371, 372, 373, 374, 375, 0, 377,
	378, 379, 376, 380, 381, 382, 383, 0, 384, 950,
	385, 386, 387, 388, 495, 389, 0, 390, 394, 395,
	396, 397, 398, 399, 400, 0, 407, 408, 401, 403,
	404, 405, 402, 406, 409, 410, 0, 411, 391, 392,
	412, 951, 413, 496, 414, 415, 0, 425, 416, 417,
	418, 393, 419, 423, 424, 420, 421, 422, 497, 0,
	427, 428, 426, 0, 429, 430, 431, 432, 433, 271,
	434, 272, 435, 0, 498, 499, 500, 501, 0, 442,
	0, 436, 437, 502, 438, 503, 0, 439, 440, 441,
	0, 443, 444, 0, 0, 445, 446, 447, 448, 449,
	451, 0, 452, 0, 450, 453, 454, 455, 504, 505,
	506, 0, 457, 456, 507, 0, 0, 0, 0, 458,
	459, 508, 460, 461, 462, 1158, 1157, 0, 0, 0,
	0, 1155, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 463, 0, 0, 0, 0, 221, 222,
	223, 224, 464, 465, 225, 466, 226, 227, 467, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 468,
	469, 470, 0, 235, 471, 0, 1062, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 937, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 472, 473, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 474, 267, 268, 270, 273, 269, 274, 275, 276,
	475, 476, 0, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 477, 280, 281, 0, 282, 0, 283, 0,
	0, 938, 284, 285, 0, 286, 478, 0, 479, 287,
	0, 288, 289, 290, 291, 480, 481, 482, 339, 940,
	292, 293, 0, 294, 295, 297, 0, 0, 0, 0,
	296, 298, 305, 0, 939, 299, 483, 301, 300, 302,
	303, 304, 484, 0, 485, 0, 306, 941, 486, 942,
	307, 308, 309, 943, 310, 311, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 487, 944, 319,
	320, 945, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	946, 335, 336, 338, 337, 0, 0, 947, 0, 488,
	489, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 490, 948, 350, 949, 491,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 492, 360, 493, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 494, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 950, 385, 386, 387, 388, 495,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 0, 411, 391, 392, 412, 951, 413, 496, 414,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 497, 0, 427, 428, 426, 0, 429,
	430, 431, 432, 433, 271, 434, 272, 435, 0, 498,
	499, 500, 501, 0, 442, 0, 436, 437, 502, 438,
	503, 0, 439, 440, 441, 0, 443, 444, 0, 0,
	445, 446, 447, 448, 449, 451, 0, 452, 0, 450,
	453, 454, 455, 504, 505, 506, 0, 457, 456, 507,
	1158, 1157, 0, 0, 458, 459, 508, 460, 461, 462,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 463, 0,
	0, 0, 0, 221, 222, 223, 224, 464, 465, 225,
	466, 226, 227, 467, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 468, 469, 470, 0, 235, 471,
	0, 1062, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	937, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 472, 473, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 474, 267, 268, 270,
	273, 269, 274, 275, 276, 475, 476, 0, 212, 0,
	0, 0, 0, 0, 277, 278, 279, 477, 280, 281,
	0, 282, 0, 283, 0, 0, 938, 284, 285, 0,
	286, 478, 0, 479, 287, 0, 288, 289, 290, 291,
	480, 481, 482, 339, 940, 292, 293, 0, 294, 295,
	297, 0, 0, 0, 0, 296, 298, 305, 0, 939,
	299, 483, 301, 300, 302, 303, 304, 484, 0, 485,
	0, 306, 941, 486, 942, 307, 308, 309, 943, 310,
	311, 0, 0, 312, 313, 314, 315, 0, 317, 316,
	0, 318, 487, 944, 319, 320, 945, 0, 321, 322,
	0, 0, 323, 324, 0, 325, 326, 328, 330, 327,
	329, 331, 333, 334, 332, 946, 335, 336, 338, 337,
	0, 0, 947, 0, 488, 489, 340, 341, 0, 342,
	343, 344, 0, 0, 346, 347, 348, 0, 0, 349,
	490, 948, 350, 949, 491, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 492, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 494,
	369, 370, 0, 371, 372, 373, 374, 375, 0, 377,
	378, 379, 376, 380, 381, 382, 383, 0, 384, 950,
	385, 386, 387, 388, 495, 389, 0, 390, 394, 395,
	396, 397, 398, 399, 400, 0, 407, 408, 401, 403,
	404, 405, 402, 406, 409, 410, 0, 411, 391, 392,
	412, 951, 413, 496, 414, 415, 0, 425, 416, 417,
	418, 393, 419, 423, 424, 420, 421, 422, 497, 0,
	427, 428, 426, 0, 429, 430, 431, 432, 433, 271,
	434, 272, 435, 0, 498, 499, 500, 501, 0, 442,
	0, 436, 437, 502, 438, 503, 0, 439, 440, 441,
	0, 443, 444, 0, 0, 445, 446, 447, 448, 449,
	451, 0, 452, 0, 450, 453, 454, 455, 504, 505,
	506, 1158, 457, 456, 507, 0, 0, 0, 0, 458,
	459, 508, 460, 461, 462, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 463,
	0, 0, 0, 0, 221, 222, 223, 224, 464, 465,
	225, 466, 226, 227, 467, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 468, 469, 470, 0, 235,
	471, 0, 1062, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 937, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 472, 473, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 474, 267, 268,
	270, 273, 269, 274, 275, 276, 475, 476, 0, 212,
	0, 0, 0, 0, 0, 277, 278, 279, 477, 280,
	281, 0, 282, 0, 283, 0, 0, 938, 284, 285,
	0, 286, 478, 0, 479, 287, 0, 288, 289, 290,
	291, 480, 481, 482, 339, 940, 292, 293, 0, 294,
	295, 297, 0, 0, 0, 0, 296, 298, 305, 0,
	939, 299, 483, 301, 300, 302, 303, 304, 484, 0,
	485, 0, 306, 941, 486, 942, 307, 308, 309, 943,
	310, 311, 0, 0, 312, 313, 314, 315, 0, 317,
	316, 0, 318, 487, 944, 319, 320, 945, 0, 321,
	322, 0, 0, 323, 324, 0, 325, 326, 328, 330,
	327, 329, 331, 333, 334, 332, 946, 335, 336, 338,
	337, 0, 0, 947, 0, 488, 489, 340, 341, 0,
	342, 343, 344, 0, 0, 346, 347, 348, 0, 0,
	349, 490, 948, 350, 949, 491, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 492, 360, 493,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	494, 369, 370, 0, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 0, 384,
	950, 385, 386, 387, 388, 495, 389, 0, 390, 394,
	395, 396, 397, 398, 399, 400, 0, 407, 408, 401,
	403, 404, 405, 402, 406, 409, 410, 0, 411, 391,
	392, 412, 951, 413, 496, 414, 415, 0, 425, 416,
	417, 418, 393, 419, 423, 424, 420, 421, 422, 497,
	0, 427, 428, 426, 0, 429, 430, 431, 432, 433,
	271, 434, 272, 435, 0, 498, 499, 500, 501, 0,
	442, 0, 436, 437, 502, 438, 503, 0, 439, 440,
	441, 0, 443, 444, 0, 0, 445, 446, 447, 448,
	449, 451, 0, 452, 0, 450, 453, 454, 455, 504,
	505, 506, 209, 457, 456, 507, 0, 0, 0, 0,
	458, 459, 508, 460, 461, 462, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	463, 0, 0, 0, 0, 221, 222, 223, 224, 464,
	465, 225, 466, 226, 227, 467, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 468, 469, 470, 2215,
	235, 471, 0, 0, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 2212, 245, 0, 246, 247,
	248, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 472, 473,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 474, 267,
	268, 270, 273, 269, 274, 275, 276, 475, 476, 0,
	2359, 0, 0, 0, 0, 0, 277, 278, 279, 477,
	280, 281, 0, 282, 0, 283, 2218, 0, 0, 284,
	285, 0, 286, 478, 0, 479, 287, 0, 288, 289,
	290, 291, 480, 481, 482, 339, 0, 292, 293, 0,
	294, 295, 297, 0, 0, 0, 2356, 296, 298, 305,
	0, 0, 299, 483, 301, 300, 302, 303, 304, 484,
	0, 485, 0, 2358, 0, 486, 0, 307, 308, 309,
	0, 310, 311, 0, 0, 312, 313, 314, 315, 0,
	317, 316, 0, 318, 487, 0, 319, 320, 2355, 0,
	321, 322, 0, 0, 323, 324, 0, 325, 326, 328,
	330, 327, 329, 331, 333, 334, 332, 0, 335, 336,
	338, 337, 0, 0, 0, 0, 488, 489, 340, 341,
	0, 342, 343, 344, 0, 0, 346, 347, 348, 0,
	0, 349, 490, 0, 350, 0, 491, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 492, 360,
	493, 361, 2217, 362, 0, 363, 364, 365, 366, 367,
	368, 494, 369, 370, 0, 371, 372, 373, 374, 375,
	0, 377, 378, 379, 376, 380, 381, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 495, 389, 0, 390,
	394, 395, 396, 397, 398, 399, 400, 0, 407, 408,
	401, 403, 404, 405, 402, 406, 409, 410, 0, 411,
	391, 392, 412, 0, 413, 496, 414, 415, 0, 425,
	416, 417, 418, 393, 419, 423, 424, 420, 421, 422,
	497, 0, 427, 428, 426, 0, 429, 430, 431, 432,
	433, 271, 434, 272, 435, 0, 498, 499, 500, 501,
	0, 442, 0, 436, 437, 502, 438, 503, 0, 439,
	440, 441, 0, 443, 444, 0, 2357, 445, 446, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	504, 505, 506, 209, 457, 456, 507, 0, 0, 0,
	0, 458, 459, 508, 460, 461, 462, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 463, 0, 0, 0, 0, 221, 222, 223, 224,
	464, 465, 225, 466, 226, 227, 467, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 468, 469, 470,
	2215, 235, 471, 0, 0, 2209, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 2212, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 472,
	473, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 474,
	267, 268, 270, 273, 269, 274, 275, 276, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 277, 278, 279,
	477, 280, 281, 0, 282, 0, 283, 2218, 0, 0,
	284, 285, 0, 286, 478, 0, 479, 287, 0, 288,
	289, 290, 291, 2208, 481, 482, 339, 0, 292, 293,
	0, 294, 295, 297, 0, 0, 0, 0, 296, 298,
	305, 0, 0, 299, 483, 301, 300, 302, 303, 304,
	484, 0, 485, 0, 306, 0, 486, 0, 307, 308,
	309, 0, 310, 311, 0, 0, 312, 313, 314, 315,
	0, 317, 316, 0, 318, 487, 0, 319, 320, 0,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 334, 332, 0, 335,
	336, 338, 337, 0, 0, 0, 0, 488, 489, 340,
	341, 0, 342, 343, 344, 0, 0, 346, 347, 348,
	0, 0, 349, 490, 0, 350, 0, 491, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 492,
	360, 493, 361, 2217, 362, 0, 363, 364, 365, 366,
	367, 368, 494, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 495, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 0, 407,
	408, 401, 403, 404, 405, 402, 406, 409, 410, 0,
	411, 391, 392, 412, 0, 413, 496, 414, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 424, 420, 421,
	422, 497, 0, 427, 428, 426, 0, 429, 430, 431,
	432, 433, 271, 434, 272, 435, 0, 498, 499, 500,
	501, 0, 442, 0, 436, 437, 502, 438, 503, 0,
	439, 440, 441, 0, 443, 444, 0, 2216, 445, 446,
	447, 448, 449, 451, 0, 452, 0, 450, 453, 454,
	455, 504, 505, 506, 0, 457, 456, 507, 1376, 0,
	209, 0, 458, 459, 508, 460, 461, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 463, 0,
	0, 0, 0, 221, 222, 223, 224, 464, 465, 225,
	466, 226, 227, 467, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 468, 469, 470, 0, 235, 471,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 472, 473, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 474, 267, 268, 270,
	273, 269, 274, 275, 276, 475, 476, 0, 212, 0,
	0, 0, 0, 0, 277, 278, 279, 477, 280, 281,
	0, 282, 0, 283, 0, 0, 0, 284, 285, 0,
	286, 478, 0, 479, 287, 0, 288, 289, 290, 291,
	480, 481, 482, 339, 0, 292, 293, 0, 294, 295,
	297, 0, 0, 0, 213, 296, 298, 305, 0, 0,
	299, 483, 301, 300, 302, 303, 304, 484, 0, 485,
	0, 306, 0, 486, 0, 307, 308, 309, 0, 310,
	311, 0, 0, 312, 313, 314, 315, 0, 317, 316,
	0, 318, 487, 0, 319, 320, 0, 0, 321, 322,
	0, 0, 323, 324, 0, 325, 326, 328, 330, 327,
	329, 331, 333, 334, 332, 0, 335, 336, 338, 337,
	0, 214, 0, 0, 488, 489, 340, 341, 0, 342,
	343, 344, 0, 0, 346, 347, 348, 0, 0, 349,
	490, 0, 350, 0, 491, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 492, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 494,
	369, 370, 0, 371, 372, 373, 374, 375, 0, 377,
	378, 379, 376, 380, 381, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 495, 389, 0, 390, 394, 395,
	396, 397, 398, 399, 400, 0, 1379, 408, 401, 403,
	404, 405, 402, 406, 409, 410, 0, 411, 391, 392,
	412, 0, 413, 496, 414, 415, 0, 425, 416, 417,
	418, 393, 419, 423, 424, 420, 421, 422, 497, 0,
	427, 428, 426, 1377, 429, 430, 431, 432, 433, 271,
	434, 272, 435, 0, 498, 499, 500, 501, 0, 442,
	0, 436, 437, 502, 438, 503, 0, 439, 440, 441,
	0, 443, 444, 0, 0, 445, 446, 447, 448, 449,
	451, 0, 452, 0, 450, 453, 454, 455, 504, 505,
	506, 0, 1378, 456, 507, 1146, 0, 209, 0, 458,
	459, 508, 460, 461, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 463, 0, 0, 0, 0,
	221, 222, 223, 224, 464, 465, 225, 466, 226, 227,
	467, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 468, 469, 470, 0, 235, 471, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 472, 473, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 474, 267, 268, 270, 273, 269, 274,
	275, 276, 475, 476, 0, 212, 0, 0, 0, 0,
	0, 277, 278, 279, 477, 280, 281, 0, 282, 0,
	283, 0, 0, 0, 284, 285, 0, 286, 478, 0,
	479, 287, 0, 288, 289, 290, 291, 1148, 481, 482,
	339, 0, 292, 293, 0, 294, 295, 297, 0, 0,
	0, 213, 296, 298, 305, 0, 0, 299, 483, 301,
	300, 302, 303, 304, 484, 0, 485, 0, 306, 0,
	486, 0, 307, 308, 309, 0, 310, 311, 0, 0,
	312, 313, 314, 315, 0, 317, 316, 0, 318, 487,
	0, 319, 320, 0, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	334, 332, 0, 335, 336, 338, 337, 0, 214, 0,
	0, 488, 489, 340, 341, 0, 342, 343, 344, 0,
	992, 346, 347, 348, 0, 0, 349, 490, 0, 350,
	0, 491, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 492, 360, 493, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 494, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 495, 389, 0, 390, 394, 395, 396, 397, 398,
	399, 400, 0, 407, 408, 401, 403, 404, 405, 402,
	406, 409, 410, 0, 411, 391, 392, 412, 0, 413,
	496, 414, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 424, 420, 421, 422, 497, 0, 427, 428, 426,
	0, 429, 430, 431, 432, 433, 271, 434, 272, 435,
	0, 498, 499, 500, 501, 0, 442, 0, 436, 437,
	502, 438, 503, 0, 439, 440, 441, 0, 443, 444,
	0, 0, 445, 446, 447, 448, 449, 451, 0, 452,
	0, 450, 453, 454, 455, 504, 505, 506, 0, 457,
	456, 507, 1143, 0, 209, 0, 458, 459, 508, 460,
	461, 462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 463, 0, 0, 0, 0, 221, 222, 223,
	224, 464, 465, 225, 466, 226, 227, 467, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 468, 469,
	470, 0, 235, 471, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	472, 473, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	474, 267, 268, 270, 273, 269, 274, 275, 276, 475,
	476, 0, 212, 0, 0, 0, 0, 0, 277, 278,
	279, 477, 280, 281, 0, 282, 0, 283, 0, 0,
	0, 284, 285, 0, 286, 478, 0, 479, 287, 0,
	288, 289, 290, 291, 1145, 481, 482, 339, 0, 292,
	293, 0, 294, 295, 297, 0, 0, 0, 213, 296,
	298, 305, 0, 0, 299, 483, 301, 300, 302, 303,
	304, 484, 0, 485, 0, 306, 0, 486, 0, 307,
	308, 309, 0, 310, 311, 0, 0, 312, 313, 314,
	315, 0, 317, 316, 0, 318, 487, 0, 319, 320,
	0, 0, 321, 322, 0, 0, 323, 324, 0, 325,
	326, 328, 330, 327, 329, 331, 333, 334, 332, 0,
	335, 336, 338, 337, 0, 214, 0, 0, 488, 489,
	340, 341, 0, 342, 343, 344, 0, 992, 346, 347,
	348, 0, 0, 349, 490, 0, 350, 0, 491, 351,
	345, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	492, 360, 493, 361, 0, 362, 0, 363, 364, 365,
	366, 367, 368, 494, 369, 370, 0, 371, 372, 373,
	374, 375, 0, 377, 378, 379, 376, 380, 381, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 495, 389,
	0, 390, 394, 395, 396, 397, 398, 399, 400, 0,
	407, 408, 401, 403, 404, 405, 402, 406, 409, 410,
	0, 411, 391, 392, 412, 0, 413, 496, 414, 415,
	0, 425, 416, 417, 418, 393, 419, 423, 424, 420,
	421, 422, 497, 0, 427, 428, 426, 0, 429, 430,
	431, 432, 433, 271, 434, 272, 435, 0, 498, 499,
	500, 501, 0, 442, 0, 436, 437, 502, 438, 503,
	0, 439, 440, 441, 0, 443, 444, 0, 0, 445,
	446, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 504, 505, 506, 0, 457, 456, 507, 1050,
	0, 209, 0, 458, 459, 508, 460, 461, 462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 463,
	0, 0, 0, 0, 221, 222, 223, 224, 464, 465,
	225, 466, 226, 227, 467, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 468, 469, 470, 0, 235,
	471, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 472, 473, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 474, 267, 268,
	270, 273, 269, 274, 275, 276, 475, 476, 0, 212,
	0, 0, 0, 0, 0, 277, 278, 279, 477, 280,
	281, 0, 282, 0, 283, 0, 0, 0, 284, 285,
	0, 286, 478, 0, 479, 287, 0, 288, 289, 290,
	291, 1052, 481, 482, 339, 0, 292, 293, 0, 294,
	295, 297, 0, 0, 0, 213, 296, 298, 305, 0,
	0, 299, 483, 301, 300, 302, 303, 304, 484, 0,
	485, 0, 306, 0, 486, 0, 307, 308, 309, 0,
	310, 311, 0, 0, 312, 313, 314, 315, 0, 317,
	316, 0, 318, 487, 0, 319, 320, 0, 0, 321,
	322, 0, 0, 323, 324, 0, 325, 326, 328, 330,
	327, 329, 331, 333, 334, 332, 0, 335, 336, 338,
	337, 0, 214, 0, 0, 488, 489, 340, 341, 0,
	342, 343, 344, 0, 992, 346, 347, 348, 0, 0,
	349, 490, 0, 350, 0, 491, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 492, 360, 493,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	494, 369, 370, 0, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 495, 389, 0, 390, 394,
	395, 396, 397, 398, 399, 400, 0, 407, 408, 401,
	403, 404, 405, 402, 406, 409, 410, 0, 411, 391,
	392, 412, 0, 413, 496, 414, 415, 0, 425, 416,
	417, 418, 393, 419, 423, 424, 420, 421, 422, 497,
	0, 427, 428, 426, 0, 429, 430, 431, 432, 433,
	271, 434, 272, 435, 0, 498, 499, 500, 501, 0,
	442, 0, 436, 437, 502, 438, 503, 0, 439, 440,
	441, 0, 443, 444, 0, 0, 445, 446, 447, 448,
	449, 451, 0, 452, 0, 450, 453, 454, 455, 504,
	505, 506, 0, 457, 456, 507, 539, 0, 209, 0,
	458, 459, 508, 460, 461, 462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 538, 219,
	528, 220, 0, 0, 0, 0, 463, 0, 0, 0,
	0, 221, 222, 223, 224, 464, 465, 225, 466, 226,
	227, 467, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 468, 469, 470, 0, 235, 471, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 531, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 472, 473, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 474, 267, 268, 270, 273, 269,
	274, 275, 276, 475, 476, 0, 0, 0, 0, 0,
	0, 0, 277, 278, 279, 477, 280, 281, 0, 282,
	0, 283, 0, 0, 0, 284, 285, 532, 286, 478,
	0, 479, 287, 0, 288, 289, 290, 291, 480, 481,
	482, 339, 0, 292, 293, 0, 294, 295, 297, 0,
	0, 0, 0, 296, 298, 305, 0, 0, 299, 483,
	301, 300, 302, 303, 304, 484, 0, 485, 0, 306,
	0, 486, 0, 307, 308, 309, 0, 310, 311, 0,
	0, 312, 313, 314, 315, 0, 317, 316, 0, 318,
	487, 0, 319, 320, 0, 0, 321, 322, 0, 0,
	323, 324, 0, 325, 326, 328, 330, 327, 329, 331,
	333, 334, 332, 0, 335, 336, 338, 337, 0, 0,
	0, 0, 488, 489, 340, 341, 0, 342, 343, 344,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 0,
	350, 0, 491, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 492, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 494, 369, 370,
	0, 371, 372, 373, 374, 375, 0, 377, 378, 379,
	376, 380, 381, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 495, 389, 0, 390, 394, 395, 396, 397,
	398, 399, 400, 533, 407, 408, 401, 403, 404, 405,
	402, 406, 409, 410, 0, 411, 391, 392, 412, 0,
	413, 496, 414, 415, 0, 425, 416, 417, 418, 393,
	419, 423, 424, 420, 421, 422, 497, 0, 427, 428,
	426, 0, 429, 430, 431, 432, 433, 271, 434, 272,
	435, 0, 498, 499, 500, 501, 0, 442, 0, 436,
	437, 502, 438, 503, 0, 439, 440, 441, 0, 443,
	444, 0, 0, 445, 446, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 504, 505, 506, 0,
	457, 456, 507, 527, 0, 209, 0, 458, 459, 508,
	460, 461, 462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 528, 220, 0,
	0, 0, 0, 463, 0, 0, 0, 0, 221, 222,
	223, 224, 464, 465, 225, 466, 226, 227, 467, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 468,
	469, 470, 0, 235, 471, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 531, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 472, 473, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 474, 267, 268, 270, 273, 269, 274, 275, 276,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 277,
	278, 279, 477, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 532, 286, 478, 0, 479, 287,
	0, 288, 289, 290, 291, 480, 481, 482, 339, 0,
	292, 293, 0, 294, 295, 297, 0, 0, 0, 0,
	296, 298, 305, 0, 0, 299, 483, 301, 300, 302,
	303, 304, 484, 0, 485, 0, 306, 0, 486, 0,
	307, 308, 309, 0, 310, 311, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 487, 0, 319,
	320, 0, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	0, 335, 336, 338, 337, 0, 0, 0, 0, 488,
	489, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 490, 0, 350, 0, 491,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 492, 360, 493, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 494, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 495,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	533, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 0, 411, 391, 392, 412, 0, 413, 496, 414,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 497, 0, 427, 428, 426, 0, 429,
	430, 431, 432, 433, 271, 434, 272, 435, 0, 498,
	499, 500, 501, 0, 442, 0, 436, 437, 502, 438,
	503, 0, 439, 440, 441, 0, 443, 444, 0, 0,
	445, 446, 447, 448, 449, 451, 0, 452, 0, 450,
	453, 454, 455, 504, 505, 506, 209, 457, 456, 507,
	0, 0, 0, 0, 458, 459, 508, 460, 461, 462,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 463, 0, 0, 0, 0, 221,
	222, 223, 224, 464, 465, 225, 466, 226, 227, 467,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	468, 469, 470, 0, 235, 471, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 472, 473, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 474, 267, 268, 270, 273, 269, 274, 275,
	276, 475, 476, 0, 212, 0, 0, 0, 0, 0,
	277, 278, 279, 477, 280, 281, 0, 282, 0, 283,
	0, 0, 0, 284, 285, 0, 286, 478, 0, 479,
	287, 0, 288, 289, 290, 291, 480, 481, 482, 339,
	0, 292, 293, 0, 294, 295, 297, 0, 0, 0,
	213, 296, 298, 305, 0, 0, 299, 483, 301, 300,
	302, 303, 304, 484, 0, 485, 0, 306, 0, 486,
	0, 307, 308, 309, 0, 310, 311, 0, 0, 312,
	313, 314, 315, 0, 317, 316, 0, 318, 487, 0,
	319, 320, 0, 0, 321, 322, 0, 0, 323, 324,
	0, 325, 326, 328, 330, 327, 329, 331, 333, 334,
	332, 0, 335, 336, 338, 337, 0, 214, 0, 0,
	488, 489, 340, 341, 0, 342, 343, 344, 0, 992,
	346, 347, 348, 0, 0, 349, 490, 0, 350, 0,
	491, 351, 345, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 492, 360, 493, 361, 0, 362, 0, 363,
	364, 365, 366, 367, 368, 494, 369, 370, 0, 371,
	372, 373, 374, 375, 0, 377, 378, 379, 376, 380,
	381, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	495, 389, 0, 390, 394, 395, 396, 397, 398, 399,
	400, 0, 407, 408, 401, 403, 404, 405, 402, 406,
	409, 410, 0, 411, 391, 392, 412, 0, 413, 496,
	414, 415, 0, 425, 416, 417, 418, 393, 419, 423,
	424, 420, 421, 422, 497, 0, 427, 428, 426, 0,
	429, 430, 431, 432, 433, 271, 434, 272, 435, 0,
	498, 499, 500, 501, 0, 442, 0, 436, 437, 502,
	438, 503, 0, 439, 440, 441, 0, 443, 444, 0,
	0, 445, 446, 447, 448, 449, 451, 0, 452, 0,
	450, 453, 454, 455, 504, 505, 506, 0, 457, 456,
	507, 2288, 0, 209, 0, 458, 459, 508, 460, 461,
	462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 463, 0, 0, 0, 0, 221, 222, 223, 224,
	464, 465, 225, 466, 226, 227, 467, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 468, 469, 470,
	0, 235, 471, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 472,
	473, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 474,
	267, 268, 270, 273, 269, 274, 275, 276, 475, 476,
	0, 212, 0, 0, 0, 0, 0, 277, 278, 279,
	477, 280, 281, 0, 282, 0, 283, 0, 0, 0,
	284, 285, 0, 286, 478, 0, 479, 287, 0, 288,
	289, 290, 291, 480, 481, 482, 339, 0, 292, 293,
	0, 294, 295, 297, 0, 0, 0, 213, 296, 298,
	305, 0, 0, 299, 483, 301, 300, 302, 303, 304,
	484, 0, 485, 0, 306, 0, 486, 0, 307, 308,
	309, 0, 310, 311, 0, 0, 312, 313, 314, 315,
	0, 317, 316, 0, 318, 487, 0, 319, 320, 0,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 334, 332, 0, 335,
	336, 338, 337, 0, 214, 0, 0, 488, 489, 340,
	341, 0, 342, 343, 344, 0, 0, 346, 347, 348,
	0, 0, 349, 490, 0, 350, 0, 491, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 492,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 494, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 495, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 0, 407,
	408, 401, 403, 404, 405, 402, 406, 409, 410, 0,
	411, 391, 392, 412, 0, 413, 496, 414, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 424, 420, 421,
	422, 497, 0, 427, 428, 426, 0, 429, 430, 431,
	432, 433, 271, 434, 272, 435, 0, 498, 499, 500,
	501, 0, 442, 0, 436, 437, 502, 438, 503, 0,
	439, 440, 441, 0, 443, 444, 0, 0, 445, 446,
	447, 448, 449, 451, 0, 452, 0, 450, 453, 454,
	455, 504, 505, 506, 0, 457, 456, 507, 1858, 0,
	209, 0, 458, 459, 508, 460, 461, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 463, 0,
	0, 0, 0, 221, 222, 223, 224, 464, 465, 225,
	466, 226, 227, 467, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 468, 469, 470, 0, 235, 471,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 472, 473, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 474, 267, 268, 270,
	273, 269, 274, 275, 276, 475, 476, 0, 212, 0,
	0, 0, 0, 0, 277, 278, 279, 477, 280, 281,
	0, 282, 0, 283, 0, 0, 0, 284, 285, 0,
	286, 478, 0, 479, 287, 0, 288, 289, 290, 291,
	480, 481, 482, 339, 0, 292, 293, 0, 294, 295,
	297, 0, 0, 0, 213, 296, 298, 305, 0, 0,
	299, 483, 301, 300, 302, 303, 304, 484, 0, 485,
	0, 306, 0, 486, 0, 307, 308, 309, 0, 310,
	311, 0, 0, 312, 313, 314, 315, 0, 317, 316,
	0, 318, 487, 0, 319, 320, 0, 0, 321, 322,
	0, 0, 323, 324, 0, 325, 326, 328, 330, 327,
	329, 331, 333, 334, 332, 0, 335, 336, 338, 337,
	0, 214, 0, 0, 488, 489, 340, 341, 0, 342,
	343, 344, 0, 0, 346, 347, 348, 0, 0, 349,
	490, 0, 350, 0, 491, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 492, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 494,
	369, 370, 0, 371, 372, 373, 374, 375, 0, 377,
	378, 379, 376, 380, 381, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 495, 389, 0, 390, 394, 395,
	396, 397, 398, 399, 400, 0, 407, 408, 401, 403,
	404, 405, 402, 406, 409, 410, 0, 411, 391, 392,
	412, 0, 413, 496, 414, 415, 0, 425, 416, 417,
	418, 393, 419, 423, 424, 420, 421, 422, 497, 0,
	427, 428, 426, 0, 429, 430, 431, 432, 433, 271,
	434, 272, 435, 0, 498, 499, 500, 501, 0, 442,
	0, 436, 437, 502, 438, 503, 0, 439, 440, 441,
	0, 443, 444, 0, 0, 445, 446, 447, 448, 449,
	451, 0, 452, 0, 450, 453, 454, 455, 504, 505,
	506, 209, 457, 456, 507, 0, 0, 0, 0, 458,
	459, 508, 460, 461, 462, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 463,
	0, 0, 0, 0, 221, 222, 223, 224, 464, 465,
	225, 466, 226, 227, 467, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 468, 469, 470, 0, 235,
	471, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 472, 473, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 474, 267, 268,
	270, 273, 269, 274, 275, 276, 475, 476, 0, 212,
	0, 0, 0, 0, 0, 277, 278, 279, 477, 280,
	281, 0, 282, 0, 283, 0, 0, 0, 284, 285,
	0, 286, 478, 0, 479, 287, 0, 288, 289, 290,
	291, 480, 481, 482, 339, 0, 292, 293, 0, 294,
	295, 297, 0, 0, 0, 213, 296, 298, 305, 0,
	0, 299, 483, 301, 300, 302, 303, 304, 484, 0,
	485, 0, 306, 0, 486, 0, 307, 308, 309, 0,
	310, 311, 0, 0, 312, 313, 314, 315, 0, 317,
	316, 0, 318, 487, 0, 319, 320, 0, 0, 321,
	322, 0, 0, 323, 324, 0, 325, 326, 328, 330,
	327, 329, 331, 333, 334, 332, 0, 335, 336, 338,
	337, 0, 214, 0, 0, 488, 489, 340, 341, 0,
	342, 343, 344, 0, 0, 346, 347, 348, 0, 0,
	349, 490, 0, 350, 0, 491, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 492, 360, 493,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	494, 369, 370, 0, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 495, 389, 0, 390, 394,
	395, 396, 397, 398, 399, 400, 0, 407, 408, 401,
	403, 404, 405, 402, 406, 409, 410, 0, 411, 391,
	392, 412, 0, 413, 496, 414, 415, 0, 425, 416,
	417, 418, 393, 419, 423, 424, 420, 421, 422, 497,
	0, 427, 428, 426, 1795, 429, 430, 431, 432, 433,
	271, 434, 272, 435, 0, 498, 499, 500, 501, 0,
	442, 0, 436, 437, 502, 438, 503, 0, 439, 440,
	441, 0, 443, 444, 0, 0, 445, 446, 447, 448,
	449, 451, 0, 452, 0, 450, 453, 454, 455, 504,
	505, 506, 0, 457, 456, 507, 1788, 0, 209, 0,
	458, 459, 508, 460, 461, 462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 463, 0, 0, 0,
	0, 221, 222, 223, 224, 464, 465, 225, 466, 226,
	227, 467, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 468, 469, 470, 0, 235, 471, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 472, 473, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 474, 267, 268, 270, 273, 269,
	274, 275, 276, 475, 476, 0, 212, 0, 0, 0,
	0, 0, 277, 278, 279, 477, 280, 281, 0, 282,
	0, 283, 0, 0, 0, 284, 285, 0, 286, 478,
	0, 479, 287, 0, 288, 289, 290, 291, 1787, 481,
	482, 339, 0, 292, 293, 0, 294, 295, 297, 0,
	0, 0, 213, 296, 298, 305, 0, 0, 299, 483,
	301, 300, 302, 303, 304, 484, 0, 485, 0, 306,
	0, 486, 0, 307, 308, 309, 0, 310, 311, 0,
	0, 312, 313, 314, 315, 0, 317, 316, 0, 318,
	487, 0, 319, 320, 0, 0, 321, 322, 0, 0,
	323, 324, 0, 325, 326, 328, 330, 327, 329, 331,
	333, 334, 332, 0, 335, 336, 338, 337, 0, 214,
	0, 0, 488, 489, 340, 341, 0, 342, 343, 344,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 0,
	350, 0, 491, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 492, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 494, 369, 370,
	0, 371, 372, 373, 374, 375, 0, 377, 378, 379,
	376, 380, 381, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 495, 389, 0, 390, 394, 395, 396, 397,
	398, 399, 400, 0, 407, 408, 401, 403, 404, 405,
	402, 406, 409, 410, 0, 411, 391, 392, 412, 0,
	413, 496, 414, 415, 0, 425, 416, 417, 418, 393,
	419, 423, 424, 420, 421, 422, 497, 0, 427, 428,
	426, 0, 429, 430, 431, 432, 433, 271, 434, 272,
	435, 0, 498, 499, 500, 501, 0, 442, 0, 436,
	437, 502, 438, 503, 0, 439, 440, 441, 0, 443,
	444, 0, 0, 445, 446, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 504, 505, 506, 0,
	457, 456, 507, 1783, 0, 209, 0, 458, 459, 508,
	460, 461, 462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 463, 0, 0, 0, 0, 221, 222,
	223, 224, 464, 465, 225, 466, 226, 227, 467, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 468,
	469, 470, 0, 235, 471, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 472, 473, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 474, 267, 268, 270, 273, 269, 274, 275, 276,
	475, 476, 0, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 477, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 0, 286, 478, 0, 479, 287,
	0, 288, 289, 290, 291, 1785, 481, 482, 339, 0,
	292, 293, 0, 294, 295, 297, 0, 0, 0, 213,
	296, 298, 305, 0, 0, 299, 483, 301, 300, 302,
	303, 304, 484, 0, 485, 0, 306, 0, 486, 0,
	307, 308, 309, 0, 310, 311, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 487, 0, 319,
	320, 0, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	0, 335, 336, 338, 337, 0, 214, 0, 0, 488,
	489, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 490, 0, 350, 0, 491,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 492, 360, 493, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 494, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 495,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 0, 411, 391, 392, 412, 0, 413, 496, 414,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 497, 0, 427, 428, 426, 0, 429,
	430, 431, 432, 433, 271, 434, 272, 435, 0, 498,
	499, 500, 501, 0, 442, 0, 436, 437, 502, 438,
	503, 0, 439, 440, 441, 0, 443, 444, 0, 0,
	445, 446, 447, 448, 449, 451, 0, 452, 0, 450,
	453, 454, 455, 504, 505, 506, 0, 457, 456, 507,
	1288, 0, 209, 0, 458, 459, 508, 460, 461, 462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	463, 0, 0, 0, 0, 221, 222, 223, 224, 464,
	465, 225, 466, 226, 227, 467, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 468, 469, 470, 0,
	235, 471, 0, 0, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 472, 473,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 474, 267,
	268, 270, 273, 269, 274, 275, 276, 475, 476, 0,
	212, 0, 0, 0, 0, 0, 277, 278, 279, 477,
	280, 281, 0, 282, 0, 283, 0, 0, 0, 284,
	285, 0, 286, 478, 0, 479, 287, 0, 288, 289,
	290, 291, 1287, 481, 482, 339, 0, 292, 293, 0,
	294, 295, 297, 0, 0, 0, 213, 296, 298, 305,
	0, 0, 299, 483, 301, 300, 302, 303, 304, 484,
	0, 485, 0, 306, 0, 486, 0, 307, 308, 309,
	0, 310, 311, 0, 0, 312, 313, 314, 315, 0,
	317, 316, 0, 318, 487, 0, 319, 320, 0, 0,
	321, 322, 0, 0, 323, 324, 0, 325, 326, 328,
	330, 327, 329, 331, 333, 334, 332, 0, 335, 336,
	338, 337, 0, 214, 0, 0, 488, 489, 340, 341,
	0, 342, 343, 344, 0, 0, 346, 347, 348, 0,
	0, 349, 490, 0, 350, 0, 491, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 492, 360,
	493, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 494, 369, 370, 0, 371, 372, 373, 374, 375,
	0, 377, 378, 379, 376, 380, 381, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 495, 389, 0, 390,
	394, 395, 396, 397, 398, 399, 400, 0, 407, 408,
	401, 403, 404, 405, 402, 406, 409, 410, 0, 411,
	391, 392, 412, 0, 413, 496, 414, 415, 0, 425,
	416, 417, 418, 393, 419, 423, 424, 420, 421, 422,
	497, 0, 427, 428, 426, 0, 429, 430, 431, 432,
	433, 271, 434, 272, 435, 0, 498, 499, 500, 501,
	0, 442, 0, 436, 437, 502, 438, 503, 0, 439,
	440, 441, 0, 443, 444, 0, 0, 445, 446, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	504, 505, 506, 0, 457, 456, 507, 1285, 0, 209,
	0, 458, 459, 508, 460, 461, 462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 463, 0, 0,
	0, 0, 221, 222, 223, 224, 464, 465, 225, 466,
	226, 227, 467, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 468, 469, 470, 0, 235, 471, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 472, 473, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 474, 267, 268, 270, 273,
	269, 274, 275, 276, 475, 476, 0, 212, 0, 0,
	0, 0, 0, 277, 278, 279, 477, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	478, 0, 479, 287, 0, 288, 289, 290, 291, 1284,
	481, 482, 339, 0, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 213, 296, 298, 305, 0, 0, 299,
	483, 301, 300, 302, 303, 304, 484, 0, 485, 0,
	306, 0, 486, 0, 307, 308, 309, 0, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 487, 0, 319, 320, 0, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 0, 335, 336, 338, 337, 0,
	214, 0, 0, 488, 489, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 490,
	0, 350, 0, 491, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 492, 360, 493, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 494, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 495, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	0, 413, 496, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 497, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	272, 435, 0, 498, 499, 500, 501, 0, 442, 0,
	436, 437, 502, 438, 503, 0, 439, 440, 441, 0,
	443, 444, 0, 0, 445, 446, 447, 448, 449, 451,
	0, 452, 0, 450, 453, 454, 455, 504, 505, 506,
	0, 457, 456, 507, 1282, 0, 209, 0, 458, 459,
	508, 460, 461, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 463, 0, 0, 0, 0, 221,
	222, 223, 224, 464, 465, 225, 466, 226, 227, 467,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	468, 469, 470, 0, 235, 471, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 472, 473, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 474, 267, 268, 270, 273, 269, 274, 275,
	276, 475, 476, 0, 212, 0, 0, 0, 0, 0,
	277, 278, 279, 477, 280, 281, 0, 282, 0, 283,
	0, 0, 0, 284, 285, 0, 286, 478, 0, 479,
	287, 0, 288, 289, 290, 291, 1281, 481, 482, 339,
	0, 292, 293, 0, 294, 295, 297, 0, 0, 0,
	213, 296, 298, 305, 0, 0, 299, 483, 301, 300,
	302, 303, 304, 484, 0, 485, 0, 306, 0, 486,
	0, 307, 308, 309, 0, 310, 311, 0, 0, 312,
	313, 314, 315, 0, 317, 316, 0, 318, 487, 0,
	319, 320, 0, 0, 321, 322, 0, 0, 323, 324,
	0, 325, 326, 328, 330, 327, 329, 331, 333, 334,
	332, 0, 335, 336, 338, 337, 0, 214, 0, 0,
	488, 489, 340, 341, 0, 342, 343, 344, 0, 0,
	346, 347, 348, 0, 0, 349, 490, 0, 350, 0,
	491, 351, 345, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 492, 360, 493, 361, 0, 362, 0, 363,
	364, 365, 366, 367, 368, 494, 369, 370, 0, 371,
	372, 373, 374, 375, 0, 377, 378, 379, 376, 380,
	381, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	495, 389, 0, 390, 394, 395, 396, 397, 398, 399,
	400, 0, 407, 408, 401, 403, 404, 405, 402, 406,
	409, 410, 0, 411, 391, 392, 412, 0, 413, 496,
	414, 415, 0, 425, 416, 417, 418, 393, 419, 423,
	424, 420, 421, 422, 497, 0, 427, 428, 426, 0,
	429, 430, 431, 432, 433, 271, 434, 272, 435, 0,
	498, 499, 500, 501, 0, 442, 0, 436, 437, 502,
	438, 503, 0, 439, 440, 441, 0, 443, 444, 0,
	0, 445, 446, 447, 448, 449, 451, 0, 452, 0,
	450, 453, 454, 455, 504, 505, 506, 0, 457, 456,
	507, 1278, 0, 209, 0, 458, 459, 508, 460, 461,
	462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 463, 0, 0, 0, 0, 221, 222, 223, 224,
	464, 465, 225, 466, 226, 227, 467, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 468, 469, 470,
	0, 235, 471, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 472,
	473, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 474,
	267, 268, 270, 273, 269, 274, 275, 276, 475, 476,
	0, 212, 0, 0, 0, 0, 0, 277, 278, 279,
	477, 280, 281, 0, 282, 0, 283, 0, 0, 0,
	284, 285, 0, 286, 478, 0, 479, 287, 0, 288,
	289, 290, 291, 1277, 481, 482, 339, 0, 292, 293,
	0, 294, 295, 297, 0, 0, 0, 213, 296, 298,
	305, 0, 0, 299, 483, 301, 300, 302, 303, 304,
	484, 0, 485, 0, 306, 0, 486, 0, 307, 308,
	309, 0, 310, 311, 0, 0, 312, 313, 314, 315,
	0, 317, 316, 0, 318, 487, 0, 319, 320, 0,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 334, 332, 0, 335,
	336, 338, 337, 0, 214, 0, 0, 488, 489, 340,
	341, 0, 342, 343, 344, 0, 0, 346, 347, 348,
	0, 0, 349, 490, 0, 350, 0, 491, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 492,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 494, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 495, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 0, 407,
	408, 401, 403, 404, 405, 402, 406, 409, 410, 0,
	411, 391, 392, 412, 0, 413, 496, 414, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 424, 420, 421,
	422, 497, 0, 427, 428, 426, 0, 429, 430, 431,
	432, 433, 271, 434, 272, 435, 0, 498, 499, 500,
	501, 0, 442, 0, 436, 437, 502, 438, 503, 0,
	439, 440, 441, 0, 443, 444, 0, 0, 445, 446,
	447, 448, 449, 451, 0, 452, 0, 450, 453, 454,
	455, 504, 505, 506, 0, 457, 456, 507, 1253, 0,
	209, 0, 458, 459, 508, 460, 461, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 463, 0,
	0, 0, 0, 221, 222, 223, 224, 464, 465, 225,
	466, 226, 227, 467, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 468, 469, 470, 0, 235, 471,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 472, 473, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 474, 267, 268, 270,
	273, 269, 274, 275, 276, 475, 476, 0, 212, 0,
	0, 0, 0, 0, 277, 278, 279, 477, 280, 281,
	0, 282, 0, 283, 0, 0, 0, 284, 285, 0,
	286, 478, 0, 479, 287, 0, 288, 289, 290, 291,
	480, 481, 482, 339, 0, 292, 293, 0, 294, 295,
	297, 0, 0, 0, 213, 296, 298, 305, 0, 0,
	299, 483, 301, 300, 302, 303, 304, 484, 0, 485,
	0, 306, 0, 486, 0, 307, 308, 309, 0, 310,
	311, 0, 0, 312, 313, 314, 315, 0, 317, 316,
	0, 318, 487, 0, 319, 320, 0, 0, 321, 322,
	0, 0, 323, 324, 0, 325, 326, 328, 330, 327,
	329, 331, 333, 334, 332, 0, 335, 336, 338, 337,
	0, 214, 0, 0, 488, 489, 340, 341, 0, 342,
	343, 344, 0, 0, 346, 347, 348, 0, 0, 349,
	490, 0, 350, 0, 491, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 492, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 494,
	369, 370, 0, 371, 372, 373, 374, 375, 0, 377,
	378, 379, 376, 380, 381, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 495, 389, 0, 390, 394, 395,
	396, 397, 398, 399, 400, 0, 407, 408, 401, 403,
	404, 405, 402, 406, 409, 410, 0, 411, 391, 392,
	412, 0, 413, 496, 414, 415, 0, 425, 416, 417,
	418, 393, 419, 423, 424, 420, 421, 422, 497, 0,
	427, 428, 426, 0, 429, 430, 431, 432, 433, 271,
	434, 272, 435, 0, 498, 499, 500, 501, 0, 442,
	0, 436, 437, 502, 438, 503, 0, 439, 440, 441,
	0, 443, 444, 0, 0, 445, 446, 447, 448, 449,
	451, 0, 452, 0, 450, 453, 454, 455, 504, 505,
	506, 0, 457, 456, 507, 1168, 0, 209, 0, 458,
	459, 508, 460, 461, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 463, 0, 0, 0, 0,
	221, 222, 223, 224, 464, 465, 225, 466, 226, 227,
	467, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 468, 469, 470, 0, 235, 471, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 472, 473, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 474, 267, 268, 270, 273, 269, 274,
	275, 276, 475, 476, 0, 212, 0, 0, 0, 0,
	0, 277, 278, 279, 477, 280, 281, 0, 282, 0,
	283, 0, 0, 0, 284, 285, 0, 286, 478, 0,
	479, 287, 0, 288, 289, 290, 291, 1170, 481, 482,
	339, 0, 292, 293, 0, 294, 295, 297, 0, 0,
	0, 213, 296, 298, 305, 0, 0, 299, 483, 301,
	300, 302, 303, 304, 484, 0, 485, 0, 306, 0,
	486, 0, 307, 308, 309, 0, 310, 311, 0, 0,
	312, 313, 314, 315, 0, 317, 316, 0, 318, 487,
	0, 319, 320, 0, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	334, 332, 0, 335, 336, 338, 337, 0, 214, 0,
	0, 488, 489, 340, 341, 0, 342, 343, 344, 0,
	0, 346, 347, 348, 0, 0, 349, 490, 0, 350,
	0, 491, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 492, 360, 493, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 494, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 495, 389, 0, 390, 394, 395, 396, 397, 398,
	399, 400, 0, 407, 408, 401, 403, 404, 405, 402,
	406, 409, 410, 0, 411, 391, 392, 412, 0, 413,
	496, 414, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 424, 420, 421, 422, 497, 0, 427, 428, 426,
	0, 429, 430, 431, 432, 433, 271, 434, 272, 435,
	0, 498, 499, 500, 501, 0, 442, 0, 436, 437,
	502, 438, 503, 0, 439, 440, 441, 0, 443, 444,
	0, 0, 445, 446, 447, 448, 449, 451, 0, 452,
	0, 450, 453, 454, 455, 504, 505, 506, 209, 457,
	456, 507, 0, 0, 0, 0, 458, 459, 508, 460,
	461, 462, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 463, 0, 0, 0,
	0, 221, 222, 223, 224, 464, 465, 225, 466, 226,
	227, 467, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 468, 469, 470, 0, 235, 471, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 472, 473, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 474, 267, 268, 270, 273, 269,
	274, 275, 276, 475, 476, 0, 212, 0, 0, 0,
	0, 0, 277, 278, 279, 477, 280, 281, 0, 282,
	0, 283, 0, 0, 0, 284, 285, 0, 286, 478,
	0, 479, 287, 0, 288, 289, 290, 291, 480, 481,
	482, 339, 0, 292, 293, 0, 294, 295, 297, 0,
	0, 0, 213, 296, 298, 305, 0, 0, 299, 483,
	301, 300, 302, 303, 304, 484, 0, 485, 0, 306,
	0, 486, 0, 307, 308, 309, 0, 310, 311, 0,
	0, 312, 313, 314, 315, 0, 317, 316, 0, 318,
	487, 0, 319, 320, 0, 0, 321, 322, 0, 0,
	323, 324, 0, 325, 326, 328, 330, 327, 329, 331,
	333, 334, 332, 0, 335, 336, 338, 337, 0, 214,
	0, 0, 488, 489, 340, 341, 0, 342, 343, 344,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 0,
	350, 0, 491, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 492, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 494, 369, 370,
	0, 371, 372, 373, 374, 375, 0, 377, 378, 379,
	376, 380, 381, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 495, 389, 0, 390, 394, 395, 396, 397,
	398, 399, 400, 0, 407, 408, 401, 403, 404, 405,
	402, 406, 409, 410, 0, 411, 391, 392, 412, 0,
	413, 496, 414, 415, 0, 425, 416, 417, 418, 393,
	419, 423, 424, 420, 421, 422, 497, 0, 427, 428,
	426, 0, 429, 430, 431, 432, 433, 271, 434, 272,
	435, 0, 498, 499, 500, 501, 0, 442, 0, 436,
	437, 502, 438, 503, 0, 439, 440, 441, 0, 443,
	444, 0, 0, 445, 446, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 504, 505, 506, 209,
	457, 456, 507, 0, 0, 0, 0, 458, 459, 508,
	460, 461, 462, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 463, 0, 0,
	0, 0, 221, 222, 223, 224, 464, 465, 225, 466,
	226, 227, 467, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 468, 469, 470, 0, 235, 471, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 531, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 472, 473, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 474, 267, 268, 270, 273,
	269, 274, 275, 276, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 277, 278, 279, 477, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 532, 286,
	478, 0, 479, 287, 0, 288, 289, 290, 291, 480,
	481, 482, 339, 0, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 0, 296, 298, 305, 0, 0, 299,
	483, 301, 300, 302, 303, 304, 484, 0, 485, 0,
	306, 0, 486, 0, 307, 308, 309, 0, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 487, 0, 319, 320, 0, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 0, 335, 336, 338, 337, 0,
	0, 0, 0, 488, 489, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 490,
	0, 350, 0, 491, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 492, 360, 493, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 494, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 495, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 533, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	0, 413, 496, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 497, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	272, 435, 0, 498, 499, 500, 501, 0, 442, 0,
	436, 437, 502, 438, 503, 0, 439, 440, 441, 0,
	443, 444, 0, 0, 445, 446, 447, 448, 449, 451,
	0, 452, 0, 450, 453, 454, 455, 504, 505, 506,
	209, 457, 456, 507, 0, 0, 0, 0, 458, 459,
	508, 460, 461, 462, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 463, 0,
	0, 0, 0, 221, 222, 223, 224, 464, 465, 225,
	466, 226, 227, 467, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 468, 469, 470, 0, 235, 471,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 1882, 254, 255, 256, 472, 473, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 474, 267, 268, 270,
	273, 269, 274, 275, 276, 475, 476, 0, 212, 0,
	0, 0, 0, 0, 277, 278, 279, 477, 280, 281,
	0, 282, 0, 283, 0, 0, 0, 284, 285, 0,
	286, 478, 0, 479, 287, 0, 288, 289, 290, 291,
	480, 481, 482, 339, 0, 292, 293, 0, 294, 295,
	297, 0, 0, 0, 213, 296, 298, 305, 0, 0,
	299, 483, 301, 300, 302, 303, 304, 484, 0, 485,
	0, 306, 0, 486, 0, 307, 308, 309, 0, 310,
	311, 0, 0, 312, 313, 314, 315, 0, 317, 316,
	0, 318, 487, 0, 319, 320, 0, 0, 321, 322,
	0, 0, 323, 324, 0, 325, 326, 328, 330, 327,
	329, 331, 333, 334, 332, 0, 335, 336, 338, 337,
	0, 214, 0, 0, 488, 489, 340, 341, 0, 342,
	343, 344, 0, 0, 346, 347, 348, 0, 0, 349,
	490, 0, 350, 0, 491, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 492, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 494,
	369, 370, 0, 371, 372, 373, 374, 375, 0, 377,
	378, 379, 376, 380, 381, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 495, 389, 0, 390, 394, 395,
	396, 397, 398, 399, 400, 0, 407, 408, 401, 403,
	404, 405, 402, 406, 409, 410, 0, 411, 391, 392,
	412, 0, 413, 496, 414, 415, 0, 425, 416, 417,
	418, 393, 419, 423, 424, 420, 421, 422, 497, 0,
	427, 428, 426, 0, 429, 430, 431, 432, 433, 271,
	434, 272, 435, 0, 498, 499, 500, 501, 0, 442,
	0, 436, 437, 502, 438, 503, 0, 439, 440, 441,
	0, 443, 444, 0, 0, 445, 446, 447, 448, 449,
	451, 0, 452, 0, 450, 453, 454, 455, 504, 505,
	506, 209, 457, 456, 507, 0, 0, 0, 0, 458,
	459, 508, 460, 461, 462, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 463,
	0, 0, 0, 0, 221, 222, 223, 224, 464, 465,
	225, 466, 226, 227, 467, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 468, 469, 470, 0, 235,
	471, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 1880, 254, 255, 256, 472, 473, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 474, 267, 268,
	270, 273, 269, 274, 275, 276, 475, 476, 0, 212,
	0, 0, 0, 0, 0, 277, 278, 279, 477, 280,
	281, 0, 282, 0, 283, 0, 0, 0, 284, 285,
	0, 286, 478, 0, 479, 287, 0, 288, 289, 290,
	291, 480, 481, 482, 339, 0, 292, 293, 0, 294,
	295, 297, 0, 0, 0, 213, 296, 298, 305, 0,
	0, 299, 483, 301, 300, 302, 303, 304, 484, 0,
	485, 0, 306, 0, 486, 0, 307, 308, 309, 0,
	310, 311, 0, 0, 312, 313, 314, 315, 0, 317,
	316, 0, 318, 487, 0, 319, 320, 0, 0, 321,
	322, 0, 0, 323, 324, 0, 325, 326, 328, 330,
	327, 329, 331, 333, 334, 332, 0, 335, 336, 338,
	337, 0, 214, 0, 0, 488, 489, 340, 341, 0,
	342, 343, 344, 0, 0, 346, 347, 348, 0, 0,
	349, 490, 0, 350, 0, 491, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 492, 360, 493,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	494, 369, 370, 0, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 495, 389, 0, 390, 394,
	395, 396, 397, 398, 399, 400, 0, 407, 408, 401,
	403, 404, 405, 402, 406, 409, 410, 0, 411, 391,
	392, 412, 0, 413, 496, 414, 415, 0, 425, 416,
	417, 418, 393, 419, 423, 424, 420, 421, 422, 497,
	0, 427, 428, 426, 0, 429, 430, 431, 432, 433,
	271, 434, 272, 435, 0, 498, 499, 500, 501, 0,
	442, 0, 436, 437, 502, 438, 503, 0, 439, 440,
	441, 0, 443, 444, 0, 0, 445, 446, 447, 448,
	449, 451, 0, 452, 0, 450, 453, 454, 455, 504,
	505, 506, 209, 457, 456, 507, 0, 0, 0, 0,
	458, 459, 508, 460, 461, 462, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	463, 0, 0, 0, 0, 221, 222, 223, 224, 464,
	465, 225, 466, 226, 227, 467, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 468, 469, 470, 0,
	235, 471, 0, 0, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 1878, 254, 255, 256, 472, 473,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 474, 267,
	268, 270, 273, 269, 274, 275, 276, 475, 476, 0,
	212, 0, 0, 0, 0, 0, 277, 278, 279, 477,
	280, 281, 0, 282, 0, 283, 0, 0, 0, 284,
	285, 0, 286, 478, 0, 479, 287, 0, 288, 289,
	290, 291, 480, 481, 482, 339, 0, 292, 293, 0,
	294, 295, 297, 0, 0, 0, 213, 296, 298, 305,
	0, 0, 299, 483, 301, 300, 302, 303, 304, 484,
	0, 485, 0, 306, 0, 486, 0, 307, 308, 309,
	0, 310, 311, 0, 0, 312, 313, 314, 315, 0,
	317, 316, 0, 318, 487, 0, 319, 320, 0, 0,
	321, 322, 0, 0, 323, 324, 0, 325, 326, 328,
	330, 327, 329, 331, 333, 334, 332, 0, 335, 336,
	338, 337, 0, 214, 0, 0, 488, 489, 340, 341,
	0, 342, 343, 344, 0, 0, 346, 347, 348, 0,
	0, 349, 490, 0, 350, 0, 491, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 492, 360,
	493, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 494, 369, 370, 0, 371, 372, 373, 374, 375,
	0, 377, 378, 379, 376, 380, 381, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 495, 389, 0, 390,
	394, 395, 396, 397, 398, 399, 400, 0, 407, 408,
	401, 403, 404, 405, 402, 406, 409, 410, 0, 411,
	391, 392, 412, 0, 413, 496, 414, 415, 0, 425,
	416, 417, 418, 393, 419, 423, 424, 420, 421, 422,
	497, 0, 427, 428, 426, 0, 429, 430, 431, 432,
	433, 271, 434, 272, 435, 0, 498, 499, 500, 501,
	0, 442, 0, 436, 437, 502, 438, 503, 0, 439,
	440, 441, 0, 443, 444, 0, 0, 445, 446, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	504, 505, 506, 0, 457, 456, 507, 678, 0, 209,
	0, 458, 459, 508, 460, 461, 462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 463, 0, 0,
	0, 0, 221, 222, 223, 224, 464, 465, 225, 466,
	226, 227, 467, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 468, 469, 470, 0, 235, 471, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 472, 473, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 474, 267, 268, 270, 273,
	269, 274, 275, 276, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 277, 278, 279, 477, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	478, 0, 479, 287, 0, 288, 289, 290, 291, 480,
	481, 482, 339, 0, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 0, 296, 298, 305, 0, 0, 299,
	483, 301, 300, 302, 303, 304, 484, 0, 485, 677,
	306, 0, 486, 0, 307, 308, 309, 0, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 487, 0, 319, 320, 0, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 0, 335, 336, 338, 337, 0,
	0, 0, 0, 488, 489, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 490,
	0, 350, 0, 491, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 492, 360, 493, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 494, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 495, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	0, 413, 496, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 497, 0, 427,
	428, 426, 676, 429, 430, 431, 432, 433, 271, 434,
	272, 435, 0, 498, 499, 500, 501, 0, 442, 0,
	436, 437, 502, 438, 503, 0, 439, 440, 441, 0,
	443, 444, 0, 0, 445, 446, 447, 448, 449, 451,
	0, 452, 0, 450, 453, 454, 455, 504, 505, 506,
	0, 457, 456, 507, 516, 0, 209, 0, 458, 459,
	508, 460, 461, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 515, 220,
	0, 0, 0, 0, 463, 0, 0, 0, 0, 221,
	222, 223, 224, 464, 465, 225, 466, 226, 227, 467,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	468, 469, 470, 0, 235, 471, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 472, 473, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 474, 267, 268, 270, 273, 269, 274, 275,
	276, 475, 476, 0, 0, 0, 0, 0, 0, 0,
	277, 278, 279, 477, 280, 281, 0, 282, 0, 283,
	0, 0, 0, 284, 285, 0, 286, 478, 0, 479,
	287, 0, 288, 289, 290, 291, 480, 481, 482, 339,
	0, 292, 293, 0, 294, 295, 297, 0, 0, 0,
	0, 296, 298, 305, 0, 0, 299, 483, 301, 300,
	302, 303, 304, 484, 0, 485, 0, 306, 0, 486,
	0, 307, 308, 309, 0, 310, 311, 0, 0, 312,
	313, 314, 315, 0, 317, 316, 0, 318, 487, 0,
	319, 320, 0, 0, 321, 322, 0, 0, 323, 324,
	0, 325, 326, 328, 330, 327, 329, 331, 333, 334,
	332, 0, 335, 336, 338, 337, 0, 0, 0, 0,
	488, 489, 340, 341, 0, 342, 343, 344, 0, 0,
	346, 347, 348, 0, 0, 349, 490, 0, 350, 0,
	491, 351, 345, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 492, 360, 493, 514, 0, 362, 0, 363,
	364, 365, 366, 367, 368, 494, 369, 370, 0, 371,
	372, 373, 374, 375, 0, 377, 378, 379, 376, 380,
	381, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	495, 389, 0, 390, 394, 395, 396, 397, 398, 399,
	400, 0, 407, 408, 401, 403, 404, 405, 402, 406,
	409, 410, 0, 411, 391, 392, 412, 0, 413, 496,
	414, 415, 0, 425, 416, 417, 418, 393, 419, 423,
	424, 420, 421, 422, 497, 0, 427, 428, 426, 0,
	429, 430, 431, 432, 433, 271, 434, 272, 435, 0,
	498, 499, 500, 501, 0, 442, 0, 436, 437, 502,
	438, 503, 0, 439, 440, 441, 0, 443, 444, 0,
	0, 445, 446, 447, 448, 449, 451, 0, 452, 0,
	450, 453, 454, 455, 504, 505, 506, 209, 457, 456,
	507, 0, 0, 0, 0, 458, 459, 508, 460, 461,
	462, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 463, 0, 2149, 0, 0,
	221, 222, 223, 224, 464, 465, 225, 466, 226, 227,
	467, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 468, 469, 470, 0, 235, 471, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 472, 473, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 474, 267, 268, 270, 273, 269, 274,
	275, 276, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 277, 278, 279, 477, 280, 281, 0, 282, 0,
	283, 0, 0, 0, 284, 285, 0, 286, 478, 0,
	479, 287, 0, 288, 289, 290, 291, 480, 481, 482,
	339, 0, 292, 293, 0, 294, 295, 297, 0, 0,
	0, 0, 296, 298, 305, 0, 0, 299, 483, 301,
	300, 302, 303, 304, 484, 0, 485, 0, 306, 0,
	486, 0, 307, 308, 309, 0, 310, 311, 0, 0,
	312, 313, 314, 315, 0, 317, 316, 0, 318, 487,
	0, 319, 320, 0, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	334, 332, 0, 335, 336, 338, 337, 0, 0, 0,
	0, 488, 489, 340, 341, 0, 342, 343, 344, 0,
	0, 346, 347, 348, 0, 0, 349, 490, 0, 350,
	0, 491, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 492, 360, 493, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 494, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 495, 389, 0, 390, 394, 395, 396, 397, 398,
	399, 400, 0, 407, 408, 401, 403, 404, 405, 402,
	406, 409, 410, 0, 411, 391, 392, 412, 0, 413,
	496, 414, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 424, 420, 421, 422, 497, 0, 427, 428, 426,
	0, 429, 430, 431, 432, 433, 271, 434, 272, 435,
	0, 498, 499, 500, 501, 0, 442, 0, 436, 437,
	502, 438, 503, 0, 439, 440, 441, 0, 443, 444,
	0, 0, 445, 446, 447, 448, 449, 451, 0, 452,
	0, 450, 453, 454, 455, 504, 505, 506, 0, 457,
	456, 507, 209, 2346, 0, 0, 458, 459, 508, 460,
	461, 462, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	463, 0, 0, 0, 0, 221, 222, 223, 224, 464,
	465, 225, 466, 226, 227, 467, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 468, 469, 470, 0,
	235, 471, 0, 0, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 472, 473,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 474, 267,
	268, 270, 273, 269, 274, 275, 276, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 277, 278, 279, 477,
	280, 281, 0, 282, 0, 283, 0, 0, 0, 284,
	285, 0, 286, 478, 0, 479, 287, 0, 288, 289,
	290, 291, 480, 481, 482, 339, 0, 292, 293, 0,
	294, 295, 297, 0, 0, 0, 0, 296, 298, 305,
	0, 0, 299, 483, 301, 300, 302, 303, 304, 484,
	0, 485, 0, 306, 0, 486, 0, 307, 308, 309,
	0, 310, 311, 0, 0, 312, 313, 314, 315, 0,
	317, 316, 0, 318, 487, 0, 319, 320, 0, 0,
	321, 322, 0, 0, 323, 324, 0, 325, 326, 328,
	330, 327, 329, 331, 333, 334, 332, 0, 335, 336,
	338, 337, 0, 0, 0, 0, 488, 489, 340, 341,
	0, 342, 343, 344, 0, 0, 346, 347, 348, 0,
	0, 349, 490, 0, 350, 0, 491, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 492, 360,
	493, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 494, 369, 370, 0, 371, 372, 373, 374, 375,
	0, 377, 378, 379, 376, 380, 381, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 495, 389, 0, 390,
	394, 395, 396, 397, 398, 399, 400, 0, 407, 408,
	401, 403, 404, 405, 402, 406, 409, 410, 0, 411,
	391, 392, 412, 0, 413, 496, 414, 415, 0, 425,
	416, 417, 418, 393, 419, 423, 424, 420, 421, 422,
	497, 0, 427, 428, 426, 0, 429, 430, 431, 432,
	433, 271, 434, 272, 435, 0, 498, 499, 500, 501,
	0, 442, 0, 436, 437, 502, 438, 503, 0, 439,
	440, 441, 0, 443, 444, 0, 0, 445, 446, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	504, 505, 506, 209, 457, 456, 507, 0, 0, 0,
	0, 458, 459, 508, 460, 461, 462, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 463, 0, 0, 0, 0, 221, 222, 223, 224,
	464, 465, 225, 466, 226, 227, 467, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 468, 469, 470,
	0, 235, 471, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 472,
	473, 2925, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 474,
	267, 268, 270, 273, 269, 274, 275, 276, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 277, 278, 279,
	477, 280, 281, 0, 282, 0, 283, 0, 0, 0,
	284, 285, 0, 286, 478, 0, 479, 287, 0, 288,
	289, 290, 291, 480, 481, 482, 339, 0, 292, 293,
	0, 294, 295, 297, 0, 0, 0, 0, 296, 298,
	305, 0, 0, 299, 483, 301, 300, 302, 303, 304,
	484, 0, 485, 0, 306, 0, 486, 0, 307, 308,
	309, 0, 310, 311, 0, 0, 312, 313, 314, 315,
	0, 317, 316, 0, 318, 487, 0, 319, 320, 0,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 334, 332, 0, 335,
	336, 338, 337, 0, 0, 0, 0, 488, 489, 340,
	341, 0, 342, 343, 344, 0, 0, 346, 347, 348,
	0, 0, 349, 490, 0, 350, 0, 491, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 492,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 494, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 495, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 0, 407,
	408, 401, 403, 404, 405, 402, 406, 409, 410, 0,
	411, 391, 392, 412, 0, 413, 496, 414, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 424, 420, 421,
	422, 497, 0, 427, 428, 426, 0, 429, 430, 431,
	432, 433, 271, 434, 272, 435, 0, 498, 499, 500,
	501, 0, 442, 0, 436, 437, 502, 438, 503, 0,
	439, 440, 441, 0, 443, 444, 0, 0, 445, 446,
	447, 448, 449, 451, 0, 452, 0, 450, 453, 454,
	455, 504, 505, 506, 0, 457, 456, 507, 209, 2346,
	0, 0, 458, 459, 508, 460, 461, 462, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 463, 0, 0, 0,
	0, 221, 222, 223, 224, 464, 465, 225, 466, 226,
	227, 467, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 468, 469, 470, 0, 235, 471, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 472, 473, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 474, 267, 268, 270, 273, 269,
	274, 275, 276, 475, 476, 0, 0, 0, 0, 0,
	0, 0, 277, 278, 279, 477, 280, 281, 0, 282,
	0, 283, 0, 0, 0, 284, 285, 0, 286, 478,
	0, 479, 287, 0, 288, 289, 290, 291, 480, 481,
	482, 339, 0, 292, 293, 0, 294, 295, 297, 0,
	0, 0, 0, 296, 298, 305, 0, 0, 299, 483,
	301, 300, 302, 303, 304, 484, 0, 485, 0, 306,
	0, 486, 0, 307, 308, 309, 0, 310, 311, 0,
	0, 312, 313, 314, 315, 0, 317, 316, 0, 318,
	487, 0, 319, 320, 0, 0, 321, 322, 0, 0,
	323, 324, 0, 325, 326, 328, 330, 327, 329, 331,
	333, 334, 332, 0, 335, 336, 338, 337, 0, 0,
	0, 0, 488, 489, 340, 341, 0, 342, 343, 344,
	0, 0, 346, 347, 2343, 0, 0, 349, 490, 0,
	350, 0, 491, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 492, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 494, 369, 370,
	0, 371, 372, 373, 374, 375, 0, 377, 378, 379,
	376, 380, 381, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 495, 389, 0, 390, 394, 395, 396, 397,
	398, 399, 400, 0, 407, 408, 401, 403, 404, 405,
	402, 406, 409, 410, 0, 411, 391, 392, 412, 0,
	413, 496, 414, 415, 0, 425, 416, 417, 418, 393,
	419, 423, 424, 420, 421, 422, 497, 0, 427, 428,
	426, 0, 429, 430, 431, 432, 433, 271, 434, 272,
	435, 0, 498, 499, 500, 501, 0, 442, 0, 436,
	437, 502, 438, 503, 0, 439, 440, 441, 0, 443,
	444, 0, 0, 445, 446, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 504, 505, 506, 209,
	457, 456, 507, 0, 0, 0, 0, 458, 459, 508,
	460, 461, 462, 0, 0, 0, 215, 216, 217, 218,
	219, 1864, 220, 0, 0, 0, 0, 463, 0, 0,
	0, 0, 221, 222, 223, 224, 464, 465, 225, 466,
	226, 227, 467, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 468, 469, 470, 0, 235, 471, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 472, 473, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 474, 267, 268, 270, 273,
	269, 274, 275, 276, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 277, 278, 279, 477, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	478, 0, 479, 287, 0, 288, 289, 290, 291, 480,
	481, 482, 339, 0, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 0, 296, 298, 305, 0, 0, 299,
	483, 301, 300, 302, 303, 304, 484, 0, 485, 0,
	306, 0, 486, 0, 307, 308, 309, 0, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 487, 0, 319, 320, 0, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 0, 335, 336, 338, 337, 0,
	0, 0, 0, 488, 489, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 490,
	0, 350, 0, 491, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 492, 360, 493, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 494, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 495, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	0, 413, 496, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 497, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	272, 435, 0, 498, 499, 500, 501, 0, 442, 0,
	436, 437, 502, 438, 503, 0, 439, 440, 441, 0,
	443, 444, 0, 0, 445, 446, 447, 448, 449, 451,
	0, 452, 0, 450, 453, 454, 455, 504, 505, 506,
	0, 457, 456, 507, 1856, 0, 209, 0, 458, 459,
	508, 460, 461, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 463, 0, 0, 0, 0, 221,
	222, 223, 224, 464, 465, 225, 466, 226, 227, 467,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	468, 469, 470, 0, 235, 471, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 472, 473, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 474, 267, 268, 270, 273, 269, 274, 275,
	276, 475, 476, 0, 0, 0, 0, 0, 0, 0,
	277, 278, 279, 477, 280, 281, 0, 282, 0, 283,
	0, 0, 0, 284, 285, 0, 286, 478, 0, 479,
	287, 0, 288, 289, 290, 291, 480, 481, 482, 339,
	0, 292, 293, 0, 294, 295, 297, 0, 0, 0,
	0, 296, 298, 305, 0, 0, 299, 483, 301, 300,
	302, 303, 304, 484, 0, 485, 0, 306, 0, 486,
	0, 307, 308, 309, 0, 310, 311, 0, 0, 312,
	313, 314, 315, 0, 317, 316, 0, 318, 487, 0,
	319, 320, 0, 0, 321, 322, 0, 0, 323, 324,
	0, 325, 326, 328, 330, 327, 329, 331, 333, 334,
	332, 0, 335, 336, 338, 337, 0, 0, 0, 0,
	488, 489, 340, 341, 0, 342, 343, 344, 0, 0,
	346, 347, 348, 0, 0, 349, 490, 0, 350, 0,
	491, 351, 345, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 492, 360, 493, 361, 0, 362, 0, 363,
	364, 365, 366, 367, 368, 494, 369, 370, 0, 371,
	372, 373, 374, 375, 0, 377, 378, 379, 376, 380,
	381, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	495, 389, 0, 390, 394, 395, 396, 397, 398, 399,
	400, 0, 407, 408, 401, 403, 404, 405, 402, 406,
	409, 410, 0, 411, 391, 392, 412, 0, 413, 496,
	414, 415, 0, 425, 416, 417, 418, 393, 419, 423,
	424, 420, 421, 422, 497, 0, 427, 428, 426, 0,
	429, 430, 431, 432, 433, 271, 434, 272, 435, 0,
	498, 499, 500, 501, 0, 442, 0, 436, 437, 502,
	438, 503, 0, 439, 440, 441, 0, 443, 444, 0,
	0, 445, 446, 447, 448, 449, 451, 0, 452, 0,
	450, 453, 454, 455, 504, 505, 506, 0, 457, 456,
	507, 559, 0, 209, 0, 458, 459, 508, 460, 461,
	462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 463, 0, 0, 0, 0, 221, 222, 223, 224,
	464, 465, 225, 466, 226, 227, 467, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 468, 469, 1028,
	0, 235, 471, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 472,
	473, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 474,
	267, 268, 270, 273, 269, 274, 275, 276, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 277, 278, 279,
	477, 280, 281, 0, 282, 0, 283, 0, 0, 0,
	284, 285, 0, 286, 478, 0, 479, 287, 0, 288,
	289, 290, 291, 480, 481, 482, 339, 0, 292, 293,
	0, 294, 295, 297, 0, 0, 0, 0, 296, 298,
	305, 0, 0, 299, 483, 301, 300, 302, 303, 304,
	484, 0, 485, 0, 306, 0, 486, 0, 307, 308,
	309, 0, 310, 311, 0, 0, 312, 313, 314, 315,
	0, 317, 316, 0, 318, 487, 0, 319, 320, 0,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 334, 560, 0, 335,
	336, 338, 337, 0, 0, 0, 0, 488, 489, 340,
	341, 0, 342, 343, 344, 0, 0, 346, 347, 348,
	0, 0, 349, 490, 0, 350, 0, 491, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 492,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 494, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 495, 389, 0,
	390, 394, 395, 556, 397, 398, 399, 400, 0, 407,
	408, 401, 403, 404, 405, 402, 406, 409, 410, 0,
	411, 391, 392, 412, 0, 413, 496, 414, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 424, 420, 421,
	422, 497, 0, 427, 428, 426, 0, 429, 430, 431,
	432, 433, 271, 434, 272, 435, 0, 555, 499, 500,
	501, 0, 442, 0, 436, 437, 502, 438, 503, 0,
	439, 440, 441, 0, 443, 444, 0, 0, 445, 446,
	447, 448, 449, 451, 0, 452, 0, 450, 453, 454,
	455, 504, 505, 506, 0, 457, 456, 507, 1807, 0,
	209, 0, 458, 459, 508, 460, 461, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 463, 0,
	0, 0, 0, 221, 222, 223, 224, 464, 465, 225,
	466, 226, 227, 467, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 468, 469, 470, 0, 235, 471,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 472, 473, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 474, 267, 268, 270,
	273, 269, 274, 275, 276, 475, 476, 0, 0, 0,
	0, 0, 0, 0, 277, 278, 279, 477, 280, 281,
	0, 282, 0, 283, 0, 0, 0, 284, 285, 0,
	286, 478, 0, 479, 287, 0, 288, 289, 290, 291,
	1806, 481, 482, 339, 0, 292, 293, 0, 294, 295,
	297, 0, 0, 0, 0, 296, 298, 305, 0, 0,
	299, 483, 301, 300, 302, 303, 304, 484, 0, 485,
	0, 306, 0, 486, 0, 307, 308, 309, 0, 310,
	311, 0, 0, 312, 313, 314, 315, 0, 317, 316,
	0, 318, 487, 0, 319, 320, 0, 0, 321, 322,
	0, 0, 323, 324, 0, 325, 326, 328, 330, 327,
	329, 331, 333, 334, 332, 0, 335, 336, 338, 337,
	0, 0, 0, 0, 488, 489, 340, 341, 0, 342,
	343, 344, 0, 0, 346, 347, 348, 0, 0, 349,
	490, 0, 350, 0, 491, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 492, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 494,
	369, 370, 0, 371, 372, 373, 374, 375, 0, 377,
	378, 379, 376, 380, 381, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 495, 389, 0, 390, 394, 395,
	396, 397, 398, 399, 400, 0, 407, 408, 401, 403,
	404, 405, 402, 406, 409, 410, 0, 411, 391, 392,
	412, 0, 413, 496, 414, 415, 0, 425, 416, 417,
	418, 393, 419, 423, 424, 420, 421, 422, 497, 0,
	427, 428, 426, 0, 429, 430, 431, 432, 433, 271,
	434, 272, 435, 0, 498, 499, 500, 501, 0, 442,
	0, 436, 437, 502, 438, 503, 0, 439, 440, 441,
	0, 443, 444, 0, 0, 445, 446, 447, 448, 449,
	451, 0, 452, 0, 450, 453, 454, 455, 504, 505,
	506, 0, 457, 456, 507, 559, 0, 209, 0, 458,
	459, 508, 460, 461, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 463, 0, 0, 0, 0,
	221, 222, 223, 224, 464, 465, 225, 466, 226, 227,
	467, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 468, 469, 470, 0, 549, 471, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 472, 473, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 474, 267, 268, 270, 273, 269, 274,
	275, 276, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 277, 278, 279, 477, 280, 281, 0, 282, 0,
	283, 0, 0, 0, 284, 285, 0, 286, 478, 0,
	479, 287, 0, 288, 289, 290, 291, 480, 481, 482,
	339, 0, 292, 293, 0, 294, 295, 297, 0, 0,
	0, 0, 296, 298, 305, 0, 0, 299, 483, 301,
	300, 302, 303, 304, 484, 0, 485, 0, 306, 0,
	486, 0, 307, 308, 309, 0, 310, 311, 0, 0,
	312, 313, 314, 315, 0, 317, 316, 0, 318, 487,
	0, 319, 320, 0, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	334, 560, 0, 335, 336, 338, 337, 0, 0, 0,
	0, 488, 489, 340, 341, 0, 342, 343, 344, 0,
	0, 346, 347, 348, 0, 0, 349, 490, 0, 350,
	0, 491, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 492, 360, 493, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 494, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 495, 389, 0, 390, 394, 395, 556, 397, 398,
	399, 400, 0, 407, 408, 401, 403, 404, 405, 402,
	406, 1307, 410, 0, 411, 391, 392, 412, 0, 413,
	496, 414, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 424, 420, 421, 422, 497, 0, 427, 428, 426,
	0, 429, 430, 431, 432, 433, 271, 434, 272, 435,
	0, 555, 499, 500, 501, 0, 442, 0, 436, 437,
	502, 438, 503, 0, 439, 440, 441, 0, 443, 444,
	0, 0, 445, 446, 447, 448, 449, 451, 0, 452,
	0, 450, 453, 454, 455, 504, 505, 506, 0, 457,
	456, 507, 1292, 0, 209, 0, 458, 459, 508, 460,
	461, 462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 463, 0, 0, 0, 0, 221, 222, 223,
	224, 464, 465, 225, 466, 226, 227, 467, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 468, 469,
	470, 0, 235, 471, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	472, 473, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	474, 267, 268, 270, 273, 269, 274, 275, 276, 475,
	476, 0, 0, 0, 0, 0, 0, 0, 277, 278,
	279, 477, 280, 281, 0, 282, 0, 283, 0, 0,
	0, 284, 285, 0, 286, 478, 0, 479, 287, 0,
	288, 289, 290, 291, 1291, 481, 482, 339, 0, 292,
	293, 0, 294, 295, 297, 0, 0, 0, 0, 296,
	298, 305, 0, 0, 299, 483, 301, 300, 302, 303,
	304, 484, 0, 485, 0, 306, 0, 486, 0, 307,
	308, 309, 0, 310, 311, 0, 0, 312, 313, 314,
	315, 0, 317, 316, 0, 318, 487, 0, 319, 320,
	0, 0, 321, 322, 0, 0, 323, 324, 0, 325,
	326, 328, 330, 327, 329, 331, 333, 334, 332, 0,
	335, 336, 338, 337, 0, 0, 0, 0, 488, 489,
	340, 341, 0, 342, 343, 344, 0, 0, 346, 347,
	348, 0, 0, 349, 490, 0, 350, 0, 491, 351,
	345, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	492, 360, 493, 361, 0, 362, 0, 363, 364, 365,
	366, 367, 368, 494, 369, 370, 0, 371, 372, 373,
	374, 375, 0, 377, 378, 379, 376, 380, 381, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 495, 389,
	0, 390, 394, 395, 396, 397, 398, 399, 400, 0,
	407, 408, 401, 403, 404, 405, 402, 406, 409, 410,
	0, 411, 391, 392, 412, 0, 413, 496, 414, 415,
	0, 425, 416, 417, 418, 393, 419, 423, 424, 420,
	421, 422, 497, 0, 427, 428, 426, 0, 429, 430,
	431, 432, 433, 271, 434, 272, 435, 0, 498, 499,
	500, 501, 0, 442, 0, 436, 437, 502, 438, 503,
	0, 439, 440, 441, 0, 443, 444, 0, 0, 445,
	446, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 504, 505, 506, 0, 457, 456, 507, 1241,
	0, 209, 0, 458, 459, 508, 460, 461, 462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 463,
	0, 0, 0, 0, 221, 222, 223, 224, 464, 465,
	225, 466, 226, 227, 467, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 468, 469, 470, 0, 235,
	471, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 472, 473, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 474, 267, 268,
	270, 273, 269, 274, 275, 276, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 277, 278, 279, 477, 280,
	281, 0, 282, 0, 283, 0, 0, 0, 284, 285,
	0, 286, 478, 0, 479, 287, 0, 288, 289, 290,
	291, 1240, 481, 482, 339, 0, 292, 293, 0, 294,
	295, 297, 0, 0, 0, 0, 296, 298, 305, 0,
	0, 299, 483, 301, 300, 302, 303, 304, 484, 0,
	485, 0, 306, 0, 486, 0, 307, 308, 309, 0,
	310, 311, 0, 0, 312, 313, 314, 315, 0, 317,
	316, 0, 318, 487, 0, 319, 320, 0, 0, 321,
	322, 0, 0, 323, 324, 0, 325, 326, 328, 330,
	327, 329, 331, 333, 334, 332, 0, 335, 336, 338,
	337, 0, 0, 0, 0, 488, 489, 340, 341, 0,
	342, 343, 344, 0, 0, 346, 347, 348, 0, 0,
	349, 490, 0, 350, 0, 491, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 492, 360, 493,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	494, 369, 370, 0, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 495, 389, 0, 390, 394,
	395, 396, 397, 398, 399, 400, 0, 407, 408, 401,
	403, 404, 405, 402, 406, 409, 410, 0, 411, 391,
	392, 412, 0, 413, 496, 414, 415, 0, 425, 416,
	417, 418, 393, 419, 423, 424, 420, 421, 422, 497,
	0, 427, 428, 426, 0, 429, 430, 431, 432, 433,
	271, 434, 272, 435, 0, 498, 499, 500, 501, 0,
	442, 0, 436, 437, 502, 438, 503, 0, 439, 440,
	441, 0, 443, 444, 0, 0, 445, 446, 447, 448,
	449, 451, 0, 452, 0, 450, 453, 454, 455, 504,
	505, 506, 0, 457, 456, 507, 1225, 0, 209, 0,
	458, 459, 508, 460, 461, 462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 463, 0, 0, 0,
	0, 221, 222, 223, 224, 464, 465, 225, 466, 226,
	227, 467, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 468, 469, 470, 0, 235, 471, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 472, 473, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 474, 267, 268, 270, 273, 269,
	274, 275, 276, 475, 476, 0, 0, 0, 0, 0,
	0, 0, 277, 278, 279, 477, 280, 281, 0, 282,
	0, 283, 0, 0, 0, 284, 285, 0, 286, 478,
	0, 479, 287, 0, 288, 289, 290, 291, 480, 481,
	482, 339, 0, 292, 293, 0, 294, 295, 297, 0,
	0, 0, 0, 296, 298, 305, 0, 0, 299, 483,
	301, 300, 302, 303, 304, 484, 0, 485, 0, 306,
	0, 486, 0, 307, 308, 309, 0, 310, 311, 0,
	0, 312, 313, 314, 315, 0, 317, 316, 0, 318,
	487, 0, 319, 320, 0, 0, 321, 322, 0, 0,
	323, 324, 0, 325, 326, 328, 330, 327, 329, 331,
	333, 334, 332, 0, 335, 336, 338, 337, 0, 0,
	0, 0, 488, 489, 340, 341, 0, 342, 343, 344,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 0,
	350, 0, 491, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 492, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 494, 369, 370,
	0, 371, 372, 373, 374, 375, 0, 377, 378, 379,
	376, 380, 381, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 495, 389, 0, 390, 394, 395, 396, 397,
	398, 399, 400, 0, 407, 408, 401, 403, 404, 405,
	402, 406, 409, 410, 0, 411, 391, 392, 412, 0,
	413, 496, 414, 415, 0, 425, 416, 417, 418, 393,
	419, 423, 424, 420, 421, 422, 497, 0, 427, 428,
	426, 0, 429, 430, 431, 432, 433, 271, 434, 272,
	435, 0, 498, 499, 500, 501, 0, 442, 0, 436,
	437, 502, 438, 503, 0, 439, 440, 441, 0, 443,
	444, 0, 0, 445, 446, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 504, 505, 506, 0,
	457, 456, 507, 1162, 0, 209, 0, 458, 459, 508,
	460, 461, 462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 463, 0, 0, 0, 0, 221, 222,
	223, 224, 464, 465, 225, 466, 226, 227, 467, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 468,
	469, 470, 0, 235, 471, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 472, 473, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 474, 267, 268, 270, 273, 269, 274, 275, 276,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 277,
	278, 279, 477, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 0, 286, 478, 0, 479, 287,
	0, 288, 289, 290, 291, 480, 481, 482, 339, 0,
	292, 293, 0, 294, 295, 297, 0, 0, 0, 0,
	296, 298, 305, 0, 0, 299, 483, 301, 300, 302,
	303, 304, 484, 0, 485, 0, 306, 0, 486, 0,
	307, 308, 309, 0, 310, 311, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 487, 0, 319,
	320, 0, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	0, 335, 336, 338, 337, 0, 0, 0, 0, 488,
	489, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 490, 0, 350, 0, 491,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 492, 360, 493, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 494, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 495,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 0, 411, 391, 392, 412, 0, 413, 496, 414,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 497, 0, 427, 428, 426, 0, 429,
	430, 431, 432, 433, 271, 434, 272, 435, 0, 498,
	499, 500, 501, 0, 442, 0, 436, 437, 502, 438,
	503, 0, 439, 440, 441, 0, 443, 444, 0, 0,
	445, 446, 447, 448, 449, 451, 0, 452, 0, 450,
	453, 454, 455, 504, 505, 506, 0, 457, 456, 507,
	559, 0, 209, 0, 458, 459, 508, 460, 461, 462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	463, 0, 0, 0, 0, 221, 222, 223, 224, 464,
	465, 225, 466, 226, 227, 467, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 468, 469, 1028, 0,
	235, 471, 0, 0, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 472, 473,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 474, 267,
	268, 270, 273, 269, 274, 275, 276, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 277, 278, 279, 477,
	280, 281, 0, 282, 0, 283, 0, 0, 0, 284,
	285, 0, 286, 478, 0, 479, 287, 0, 288, 289,
	290, 291, 480, 481, 482, 339, 0, 292, 293, 0,
	294, 295, 297, 0, 0, 0, 0, 296, 298, 305,
	0, 0, 299, 483, 301, 300, 302, 303, 304, 484,
	0, 485, 0, 306, 0, 486, 0, 307, 308, 309,
	0, 310, 311, 0, 0, 312, 313, 314, 315, 0,
	317, 316, 0, 318, 487, 0, 319, 320, 0, 0,
	321, 322, 0, 0, 323, 324, 0, 325, 326, 328,
	330, 327, 329, 331, 333, 334, 560, 0, 335, 336,
	338, 337, 0, 0, 0, 0, 488, 489, 340, 341,
	0, 342, 343, 344, 0, 0, 346, 347, 348, 0,
	0, 349, 490, 0, 350, 0, 491, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 492, 360,
	493, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 494, 369, 370, 0, 371, 372, 373, 374, 375,
	0, 377, 378, 379, 376, 380, 381, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 495, 389, 0, 390,
	394, 395, 556, 397, 398, 399, 400, 0, 407, 408,
	401, 403, 404, 405, 402, 406, 409, 410, 0, 411,
	391, 392, 412, 0, 413, 496, 414, 415, 0, 425,
	416, 417, 418, 393, 419, 423, 424, 420, 421, 422,
	497, 0, 427, 428, 426, 0, 429, 430, 431, 432,
	433, 271, 434, 272, 435, 0, 555, 499, 500, 501,
	0, 442, 0, 436, 1029, 502, 438, 503, 0, 439,
	440, 441, 0, 443, 444, 0, 0, 445, 446, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	504, 505, 506, 209, 457, 456, 507, 0, 0, 0,
	0, 458, 459, 508, 460, 461, 462, 0, 0, 0,
	215, 216, 217, 218, 219, 1011, 220, 0, 0, 0,
	0, 463, 0, 0, 0, 0, 221, 222, 223, 224,
	464, 465, 225, 466, 226, 227, 467, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 468, 469, 470,
	0, 235, 471, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 472,
	473, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 474,
	267, 268, 270, 273, 269, 274, 275, 276, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 277, 278, 279,
	477, 280, 281, 0, 282, 0, 283, 0, 0, 0,
	284, 285, 0, 286, 478, 0, 479, 287, 0, 288,
	289, 290, 291, 480, 481, 482, 339, 0, 292, 293,
	0, 294, 295, 297, 0, 0, 0, 0, 296, 298,
	305, 0, 0, 299, 483, 301, 300, 302, 303, 304,
	484, 0, 485, 0, 306, 0, 486, 0, 307, 308,
	309, 0, 310, 311, 0, 0, 312, 313, 314, 315,
	0, 317, 316, 0, 318, 487, 0, 319, 320, 0,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 334, 332, 0, 335,
	336, 338, 337, 0, 0, 0, 0, 488, 489, 340,
	341, 0, 342, 343, 344, 0, 0, 346, 347, 348,
	0, 0, 349, 490, 0, 350, 0, 491, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 492,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 494, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 495, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 0, 407,
	408, 401, 403, 404, 405, 402, 406, 409, 410, 0,
	411, 391, 392, 412, 0, 413, 496, 414, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 424, 420, 421,
	422, 497, 0, 427, 428, 426, 0, 429, 430, 431,
	432, 433, 271, 434, 272, 435, 0, 498, 499, 500,
	501, 0, 442, 0, 436, 437, 502, 438, 503, 0,
	439, 440, 441, 0, 443, 444, 0, 0, 445, 446,
	447, 448, 449, 451, 0, 452, 0, 450, 453, 454,
	455, 504, 505, 506, 0, 457, 456, 507, 559, 0,
	209, 0, 458, 459, 508, 460, 461, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 463, 0,
	0, 0, 0, 221, 222, 223, 224, 464, 465, 225,
	466, 226, 227, 467, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 468, 469, 470, 0, 549, 471,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 547, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 472, 473, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 474, 267, 268, 270,
	273, 269, 274, 275, 276, 475, 476, 0, 0, 0,
	0, 0, 0, 0, 277, 278, 279, 477, 280, 281,
	0, 282, 0, 283, 0, 0, 0, 284, 285, 0,
	286, 478, 0, 479, 287, 0, 288, 289, 290, 291,
	480, 481, 482, 339, 0, 292, 293, 0, 294, 295,
	297, 0, 0, 0, 0, 296, 298, 305, 0, 0,
	299, 483, 301, 300, 302, 303, 304, 484, 0, 485,
	0, 306, 0, 486, 0, 307, 308, 309, 0, 310,
	311, 0, 0, 312, 313, 314, 315, 0, 317, 316,
	0, 318, 487, 0, 319, 320, 0, 0, 321, 548,
	0, 0, 323, 324, 0, 325, 326, 328, 330, 327,
	329, 331, 333, 334, 560, 0, 335, 336, 338, 337,
	0, 0, 0, 0, 488, 489, 340, 341, 0, 342,
	343, 344, 0, 0, 346, 347, 348, 0, 0, 349,
	490, 0, 350, 0, 491, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 492, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 494,
	369, 370, 0, 371, 372, 373, 374, 375, 0, 377,
	378, 379, 376, 380, 381, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 550, 389, 0, 390, 394, 395,
	556, 397, 398, 399, 400, 0, 407, 408, 401, 403,
	404, 405, 402, 406, 551, 410, 0, 411, 391, 392,
	412, 0, 413, 496, 414, 415, 0, 425, 416, 417,
	418, 393, 419, 423, 424, 420, 421, 422, 497, 0,
	427, 428, 426, 0, 429, 430, 431, 432, 433, 271,
	434, 272, 435, 0, 555, 499, 500, 501, 0, 442,
	0, 436, 553, 502, 438, 503, 0, 439, 440, 441,
	0, 443, 444, 0, 0, 445, 446, 447, 448, 449,
	451, 0, 452, 0, 450, 453, 454, 455, 504, 505,
	506, 0, 457, 456, 507, 543, 0, 209, 0, 458,
	459, 508, 460, 461, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 463, 0, 0, 0, 0,
	221, 222, 223, 224, 464, 465, 225, 466, 226, 227,
	467, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 468, 469, 470, 0, 235, 471, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 472, 473, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 474, 267, 268, 270, 273, 269, 274,
	275, 276, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 277, 278, 279, 477, 280, 281, 0, 282, 0,
	283, 0, 0, 0, 284, 285, 0, 286, 478, 0,
	479, 287, 0, 288, 289, 290, 291, 480, 481, 482,
	339, 0, 292, 293, 0, 294, 295, 297, 0, 0,
	0, 0, 296, 298, 305, 0, 0, 299, 483, 301,
	300, 302, 303, 304, 484, 0, 485, 0, 306, 0,
	486, 0, 307, 308, 309, 0, 310, 311, 0, 0,
	312, 313, 314, 315, 0, 317, 316, 0, 318, 487,
	0, 319, 320, 0, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	334, 332, 0, 335, 336, 338, 337, 0, 0, 0,
	0, 488, 489, 340, 341, 0, 342, 343, 344, 0,
	0, 346, 347, 348, 0, 0, 349, 490, 0, 350,
	0, 491, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 492, 360, 493, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 494, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 495, 389, 0, 390, 544, 395, 396, 397, 398,
	399, 400, 0, 407, 408, 401, 403, 404, 405, 402,
	406, 409, 410, 0, 411, 391, 392, 412, 0, 413,
	496, 414, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 424, 420, 421, 422, 497, 0, 427, 428, 426,
	0, 429, 430, 431, 432, 433, 271, 434, 272, 435,
	0, 498, 499, 500, 501, 0, 442, 0, 436, 437,
	502, 438, 503, 0, 439, 440, 441, 0, 443, 444,
	0, 0, 445, 446, 447, 448, 449, 451, 0, 452,
	0, 450, 453, 454, 455, 504, 505, 506, 0, 457,
	456, 507, 541, 0, 209, 0, 458, 459, 508, 460,
	461, 462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 463, 0, 0, 0, 0, 221, 222, 223,
	224, 464, 465, 225, 466, 226, 227, 467, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 468, 469,
	470, 0, 235, 471, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	472, 473, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	474, 267, 268, 270, 273, 269, 274, 275, 276, 475,
	476, 0, 0, 0, 0, 0, 0, 0, 277, 278,
	279, 477, 280, 281, 0, 282, 0, 283, 0, 0,
	0, 284, 285, 0, 286, 478, 0, 479, 287, 0,
	288, 289, 290, 291, 480, 481, 482, 339, 0, 292,
	293, 0, 294, 295, 297, 0, 0, 0, 0, 296,
	298, 305, 0, 0, 299, 483, 301, 300, 302, 303,
	304, 484, 0, 485, 0, 306, 0, 486, 0, 307,
	308, 309, 0, 310, 311, 0, 0, 312, 313, 314,
	315, 0, 317, 316, 0, 318, 487, 0, 319, 320,
	0, 0, 321, 322, 0, 0, 323, 324, 0, 325,
	326, 328, 330, 327, 329, 331, 333, 334, 332, 0,
	335, 336, 338, 337, 0, 0, 0, 0, 488, 489,
	340, 341, 0, 342, 343, 344, 0, 0, 346, 347,
	348, 0, 0, 349, 490, 0, 350, 0, 491, 351,
	345, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	492, 360, 493, 361, 0, 362, 0, 363, 364, 365,
	366, 367, 368, 494, 369, 370, 0, 371, 372, 373,
	374, 375, 0, 377, 378, 379, 376, 380, 381, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 495, 389,
	0, 390, 394, 395, 396, 397, 398, 399, 400, 0,
	407, 408, 401, 403, 404, 405, 402, 406, 409, 410,
	0, 411, 391, 392, 412, 0, 413, 496, 414, 415,
	0, 425, 416, 417, 418, 393, 419, 423, 424, 420,
	421, 422, 497, 0, 427, 428, 426, 0, 429, 430,
	431, 432, 433, 271, 434, 272, 435, 0, 498, 499,
	500, 501, 0, 442, 0, 436, 437, 502, 438, 503,
	0, 439, 440, 441, 0, 443, 444, 0, 0, 445,
	446, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 504, 505, 506, 0, 457, 456, 507, 535,
	0, 209, 0, 458, 459, 508, 460, 461, 462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 463,
	0, 0, 0, 0, 221, 222, 223, 224, 464, 465,
	225, 466, 226, 227, 467, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 468, 469, 470, 0, 235,
	471, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 472, 473, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 474, 267, 268,
	270, 273, 269, 274, 275, 276, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 277, 278, 279, 477, 280,
	281, 0, 282, 0, 283, 0, 0, 0, 284, 285,
	0, 286, 478, 0, 479, 287, 0, 288, 289, 290,
	291, 480, 481, 482, 339, 0, 292, 293, 0, 294,
	295, 297, 0, 0, 0, 0, 296, 298, 305, 0,
	0, 299, 483, 301, 300, 302, 303, 304, 484, 0,
	485, 0, 306, 0, 486, 0, 307, 308, 309, 0,
	310, 311, 0, 0, 312, 313, 314, 315, 0, 317,
	316, 0, 318, 487, 0, 319, 320, 0, 0, 321,
	322, 0, 0, 323, 324, 0, 325, 326, 328, 330,
	327, 329, 331, 333, 334, 332, 0, 335, 336, 338,
	337, 0, 0, 0, 0, 488, 489, 340, 341, 0,
	342, 343, 344, 0, 0, 346, 347, 348, 0, 0,
	349, 490, 0, 350, 0, 491, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 492, 360, 493,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	494, 369, 370, 0, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 495, 389, 0, 390, 394,
	395, 396, 397, 398, 399, 400, 0, 407, 408, 401,
	403, 404, 405, 402, 406, 409, 410, 0, 411, 391,
	392, 412, 0, 413, 496, 414, 415, 0, 425, 416,
	417, 418, 393, 419, 423, 424, 420, 421, 422, 497,
	0, 427, 428, 426, 0, 429, 430, 431, 432, 433,
	271, 434, 272, 435, 0, 498, 499, 500, 501, 0,
	442, 0, 436, 437, 502, 438, 503, 0, 439, 440,
	441, 0, 443, 444, 0, 0, 445, 446, 447, 448,
	449, 451, 0, 452, 0, 450, 453, 454, 455, 504,
	505, 506, 0, 457, 456, 507, 511, 0, 209, 0,
	458, 459, 508, 460, 461, 462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 463, 0, 0, 0,
	0, 221, 222, 223, 224, 464, 465, 225, 466, 226,
	227, 467, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 468, 469, 470, 0, 235, 471, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 472, 473, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 474, 267, 268, 270, 273, 269,
	274, 275, 276, 475, 476, 0, 0, 0, 0, 0,
	0, 0, 277, 278, 279, 477, 280, 281, 0, 282,
	0, 283, 0, 0, 0, 284, 285, 0, 286, 478,
	0, 479, 287, 0, 288, 289, 290, 291, 480, 481,
	482, 339, 0, 292, 293, 0, 294, 295, 297, 0,
	0, 0, 0, 296, 298, 305, 0, 0, 299, 483,
	301, 300, 302, 303, 304, 484, 0, 485, 0, 306,
	0, 486, 0, 307, 308, 309, 0, 310, 311, 0,
	0, 312, 313, 314, 315, 0, 317, 316, 0, 318,
	487, 0, 319, 320, 0, 0, 321, 322, 0, 0,
	323, 324, 0, 325, 326, 328, 330, 327, 329, 331,
	333, 334, 332, 0, 335, 336, 338, 337, 0, 0,
	0, 0, 488, 489, 340, 341, 0, 342, 343, 344,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 0,
	350, 0, 491, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 492, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 494, 369, 370,
	0, 371, 372, 373, 374, 375, 0, 377, 378, 379,
	376, 380, 381, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 495, 389, 0, 390, 394, 395, 396, 397,
	398, 399, 400, 0, 407, 408, 401, 403, 404, 405,
	402, 406, 409, 410, 0, 411, 391, 392, 412, 0,
	413, 496, 414, 415, 0, 425, 416, 417, 418, 393,
	419, 423, 424, 420, 421, 422, 497, 0, 427, 428,
	426, 0, 429, 430, 431, 432, 433, 271, 434, 272,
	435, 0, 498, 499, 500, 501, 0, 442, 0, 436,
	437, 502, 438, 503, 0, 439, 440, 441, 0, 443,
	444, 0, 0, 445, 446, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 504, 505, 506, 209,
	457, 456, 507, 0, 0, 0, 0, 458, 459, 508,
	460, 461, 462, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 463, 0, 0,
	0, 0, 221, 222, 223, 224, 464, 465, 225, 466,
	226, 227, 467, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 468, 469, 470, 0, 235, 471, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 472, 473, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 474, 267, 268, 270, 273,
	269, 274, 275, 276, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 277, 278, 279, 477, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	478, 0, 479, 287, 0, 288, 289, 290, 291, 480,
	481, 482, 339, 0, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 0, 296, 298, 305, 0, 0, 299,
	483, 301, 300, 302, 303, 304, 484, 0, 485, 0,
	306, 0, 486, 0, 307, 308, 309, 0, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 487, 0, 319, 320, 0, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 0, 335, 336, 338, 337, 0,
	0, 0, 0, 488, 489, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 490,
	0, 350, 0, 491, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 492, 360, 493, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 494, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 495, 389, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	0, 413, 496, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 497, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	272, 435, 0, 498, 499, 500, 501, 0, 442, 0,
	436, 437, 502, 438, 503, 0, 439, 440, 441, 0,
	443, 444, 0, 0, 445, 446, 447, 448, 449, 451,
	0, 452, 0, 450, 453, 454, 455, 504, 505, 506,
	209, 457, 456, 507, 0, 0, 0, 0, 458, 459,
	508, 460, 461, 462, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 463, 0,
	0, 0, 0, 221, 222, 223, 224, 464, 465, 225,
	466, 226, 227, 467, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 468, 469, 470, 0, 235, 471,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 472, 473, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 474, 267, 268, 270,
	273, 269, 274, 275, 276, 475, 476, 0, 0, 0,
	0, 0, 0, 0, 277, 278, 279, 477, 280, 281,
	0, 282, 0, 283, 0, 0, 0, 284, 285, 0,
	286, 478, 0, 479, 287, 0, 288, 289, 290, 291,
	2622, 481, 482, 339, 0, 292, 293, 0, 294, 295,
	297, 0, 0, 0, 0, 296, 298, 305, 0, 0,
	299, 483, 301, 300, 302, 303, 304, 484, 0, 485,
	0, 306, 0, 486, 0, 307, 308, 309, 0, 310,
	311, 0, 0, 312, 313, 314, 315, 0, 317, 316,
	0, 318, 487, 0, 319, 320, 0, 0, 321, 322,
	0, 0, 323, 324, 0, 325, 326, 328, 330, 327,
	329, 331, 333, 334, 332, 0, 335, 336, 338, 337,
	0, 0, 0, 0, 488, 489, 340, 341, 0, 342,
	343, 344, 0, 0, 346, 347, 348, 0, 0, 349,
	490, 0, 350, 0, 491, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 492, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 494,
	369, 370, 0, 371, 372, 373, 374, 375, 0, 377,
	378, 379, 376, 380, 381, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 495, 389, 0, 390, 394, 395,
	396, 397, 398, 399, 400, 0, 407, 408, 401, 403,
	404, 405, 402, 406, 409, 410, 0, 411, 391, 392,
	412, 0, 413, 496, 414, 415, 0, 425, 416, 417,
	418, 393, 419, 423, 424, 420, 421, 422, 497, 0,
	427, 428, 426, 0, 429, 430, 431, 432, 433, 271,
	434, 272, 435, 0, 498, 499, 500, 501, 0, 442,
	0, 436, 437, 502, 438, 503, 0, 439, 440, 441,
	0, 443, 444, 0, 0, 445, 446, 447, 448, 449,
	451, 0, 452, 0, 450, 453, 454, 455, 504, 505,
	506, 209, 457, 456, 507, 0, 0, 0, 0, 458,
	459, 508, 460, 461, 462, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 463,
	0, 0, 0, 0, 221, 222, 223, 224, 464, 465,
	225, 466, 226, 227, 467, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 468, 469, 470, 0, 235,
	471, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 472, 473, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 474, 267, 268,
	270, 273, 269, 274, 275, 276, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 277, 278, 279, 477, 280,
	281, 0, 282, 0, 283, 0, 0, 0, 284, 285,
	0, 286, 478, 0, 479, 287, 0, 288, 289, 290,
	291, 2620, 481, 482, 339, 0, 292, 293, 0, 294,
	295, 297, 0, 0, 0, 0, 296, 298, 305, 0,
	0, 299, 483, 301, 300, 302, 303, 304, 484, 0,
	485, 0, 306, 0, 486, 0, 307, 308, 309, 0,
	310, 311, 0, 0, 312, 313, 314, 315, 0, 317,
	316, 0, 318, 487, 0, 319, 320, 0, 0, 321,
	322, 0, 0, 323, 324, 0, 325, 326, 328, 330,
	327, 329, 331, 333, 334, 332, 0, 335, 336, 338,
	337, 0, 0, 0, 0, 488, 489, 340, 341, 0,
	342, 343, 344, 0, 0, 346, 347, 348, 0, 0,
	349, 490, 0, 350, 0, 491, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 492, 360, 493,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	494, 369, 370, 0, 371, 372, 373, 374, 375, 0,
	377, 378, 379, 376, 380, 381, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 495, 389, 0, 390, 394,
	395, 396, 397, 398, 399, 400, 0, 407, 408, 401,
	403, 404, 405, 402, 406, 409, 410, 0, 411, 391,
	392, 412, 0, 413, 496, 414, 415, 0, 425, 416,
	417, 418, 393, 419, 423, 424, 420, 421, 422, 497,
	0, 427, 428, 426, 0, 429, 430, 431, 432, 433,
	271, 434, 272, 435, 0, 498, 499, 500, 501, 0,
	442, 0, 436, 437, 502, 438, 503, 0, 439, 440,
	441, 0, 443, 444, 0, 0, 445, 446, 447, 448,
	449, 451, 0, 452, 0, 450, 453, 454, 455, 504,
	505, 506, 209, 457, 456, 507, 0, 0, 0, 0,
	458, 459, 508, 460, 461, 462, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	463, 0, 0, 0, 0, 221, 222, 223, 224, 464,
	465, 225, 466, 226, 227, 467, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 468, 469, 470, 0,
	235, 471, 0, 0, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 472, 473,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 474, 267,
	268, 270, 273, 269, 274, 275, 276, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 277, 278, 279, 477,
	280, 281, 0, 282, 0, 283, 0, 0, 0, 284,
	285, 0, 286, 478, 0, 479, 287, 0, 288, 289,
	290, 291, 2608, 481, 482, 339, 0, 292, 293, 0,
	294, 295, 297, 0, 0, 0, 0, 296, 298, 305,
	0, 0, 299, 483, 301, 300, 302, 303, 304, 484,
	0, 485, 0, 306, 0, 486, 0, 307, 308, 309,
	0, 310, 311, 0, 0, 312, 313, 314, 315, 0,
	317, 316, 0, 318, 487, 0, 319, 320, 0, 0,
	321, 322, 0, 0, 323, 324, 0, 325, 326, 328,
	330, 327, 329, 331, 333, 334, 332, 0, 335, 336,
	338, 337, 0, 0, 0, 0, 488, 489, 340, 341,
	0, 342, 343, 344, 0, 0, 346, 347, 348, 0,
	0, 349, 490, 0, 350, 0, 491, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 492, 360,
	493, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 494, 369, 370, 0, 371, 372, 373, 374, 375,
	0, 377, 378, 379, 376, 380, 381, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 495, 389, 0, 390,
	394, 395, 396, 397, 398, 399, 400, 0, 407, 408,
	401, 403, 404, 405, 402, 406, 409, 410, 0, 411,
	391, 392, 412, 0, 413, 496, 414, 415, 0, 425,
	416, 417, 418, 393, 419, 423, 424, 420, 421, 422,
	497, 0, 427, 428, 426, 0, 429, 430, 431, 432,
	433, 271, 434, 272, 435, 0, 498, 499, 500, 501,
	0, 442, 0, 436, 437, 502, 438, 503, 0, 439,
	440, 441, 0, 443, 444, 0, 0, 445, 446, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	504, 505, 506, 209, 457, 456, 507, 0, 0, 0,
	0, 458, 459, 508, 460, 461, 462, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 463, 0, 0, 0, 0, 221, 222, 223, 224,
	464, 465, 225, 466, 226, 227, 467, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 468, 469, 470,
	0, 235, 471, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 472,
	473, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 474,
	267, 268, 270, 273, 269, 274, 275, 276, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 277, 278, 279,
	477, 280, 281, 0, 282, 0, 283, 0, 0, 0,
	284, 285, 0, 286, 478, 0, 479, 287, 0, 288,
	289, 290, 291, 2306, 481, 482, 339, 0, 292, 293,
	0, 294, 295, 297, 0, 0, 0, 0, 296, 298,
	305, 0, 0, 299, 483, 301, 300, 302, 303, 304,
	484, 0, 485, 0, 306, 0, 486, 0, 307, 308,
	309, 0, 310, 311, 0, 0, 312, 313, 314, 315,
	0, 317, 316, 0, 318, 487, 0, 319, 320, 0,
	0, 321, 322, 0, 0, 323, 324, 0, 325, 326,
	328, 330, 327, 329, 331, 333, 334, 332, 0, 335,
	336, 338, 337, 0, 0, 0, 0, 488, 489, 340,
	341, 0, 342, 343, 344, 0, 0, 346, 347, 348,
	0, 0, 349, 490, 0, 350, 0, 491, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 492,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 494, 369, 370, 0, 371, 372, 373, 374,
	375, 0, 377, 378, 379, 376, 380, 381, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 495, 389, 0,
	390, 394, 395, 396, 397, 398, 399, 400, 0, 407,
	408, 401, 403, 404, 405, 402, 406, 409, 410, 0,
	411, 391, 392, 412, 0, 413, 496, 414, 415, 0,
	425, 416, 417, 418, 393, 419, 423, 424, 420, 421,
	422, 497, 0, 427, 428, 426, 0, 429, 430, 431,
	432, 433, 271, 434, 272, 435, 0, 498, 499, 500,
	501, 0, 442, 0, 436, 437, 502, 438, 503, 0,
	439, 440, 441, 0, 443, 444, 0, 0, 445, 446,
	447, 448, 449, 451, 0, 452, 0, 450, 453, 454,
	455, 504, 505, 506, 209, 457, 456, 507, 0, 0,
	0, 0, 458, 459, 508, 460, 461, 462, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 463, 0, 0, 0, 0, 221, 222, 223,
	224, 464, 465, 225, 466, 226, 227, 467, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 468, 469,
	470, 0, 235, 471, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	472, 473, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	474, 267, 268, 270, 273, 269, 274, 275, 276, 475,
	476, 0, 0, 0, 0, 0, 0, 0, 277, 278,
	279, 477, 280, 281, 0, 282, 0, 283, 0, 0,
	0, 284, 285, 0, 286, 478, 0, 479, 287, 0,
	288, 289, 290, 291, 480, 481, 482, 339, 0, 292,
	293, 0, 294, 295, 297, 0, 0, 0, 0, 296,
	298, 305, 0, 0, 299, 483, 301, 300, 302, 303,
	304, 484, 0, 485, 0, 306, 0, 486, 0, 307,
	308, 309, 0, 310, 311, 0, 0, 312, 313, 314,
	315, 0, 317, 316, 0, 318, 487, 0, 319, 320,
	0, 0, 321, 322, 0, 0, 323, 324, 0, 325,
	326, 328, 330, 327, 329, 331, 333, 334, 332, 0,
	335, 336, 338, 337, 0, 0, 0, 0, 488, 489,
	340, 341, 0, 342, 343, 344, 0, 0, 346, 347,
	348, 0, 0, 349, 490, 0, 350, 0, 491, 351,
	345, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	492, 360, 493, 361, 0, 362, 0, 363, 364, 365,
	366, 367, 368, 494, 369, 370, 0, 371, 372, 373,
	374, 375, 0, 377, 378, 379, 376, 380, 381, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 495, 389,
	0, 390, 544, 395, 396, 397, 398, 399, 400, 0,
	407, 408, 401, 403, 404, 405, 402, 406, 409, 410,
	0, 411, 391, 392, 412, 0, 413, 496, 414, 415,
	0, 425, 416, 417, 418, 393, 419, 423, 424, 420,
	421, 422, 497, 0, 427, 428, 426, 0, 429, 430,
	431, 432, 433, 271, 434, 272, 435, 0, 498, 499,
	500, 501, 0, 442, 0, 436, 437, 502, 438, 503,
	0, 439, 440, 441, 0, 443, 444, 0, 0, 445,
	446, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 504, 505, 506, 209, 457, 456, 507, 0,
	0, 0, 0, 458, 459, 508, 460, 461, 462, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 463, 0, 1819, 0, 0, 221, 222,
	223, 224, 464, 465, 225, 466, 226, 227, 467, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 468,
	469, 470, 0, 235, 471, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 472, 473, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 474, 267, 268, 270, 273, 269, 274, 275, 276,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 277,
	278, 279, 477, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 0, 286, 478, 0, 479, 287,
	0, 288, 289, 290, 291, 480, 481, 482, 339, 0,
	292, 293, 0, 294, 295, 297, 0, 0, 0, 0,
	296, 298, 305, 0, 0, 299, 483, 301, 300, 302,
	303, 304, 484, 0, 485, 0, 306, 0, 486, 0,
	307, 308, 309, 0, 310, 311, 0, 0, 312, 313,
	314, 315, 0, 317, 316, 0, 318, 487, 0, 319,
	320, 0, 0, 321, 322, 0, 0, 323, 324, 0,
	325, 326, 328, 330, 327, 329, 331, 333, 334, 332,
	0, 335, 336, 338, 337, 0, 0, 0, 0, 488,
	489, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 490, 0, 350, 0, 491,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 492, 360, 493, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 494, 369, 370, 0, 371, 372,
	373, 374, 375, 0, 377, 378, 379, 376, 380, 381,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 495,
	389, 0, 390, 394, 395, 396, 397, 398, 399, 400,
	0, 407, 408, 401, 403, 404, 405, 402, 406, 409,
	410, 0, 0, 391, 392, 412, 0, 413, 496, 414,
	415, 0, 425, 416, 417, 418, 393, 419, 423, 424,
	420, 421, 422, 497, 0, 427, 428, 426, 0, 429,
	430, 431, 432, 433, 271, 434, 272, 435, 0, 498,
	499, 500, 501, 0, 442, 0, 436, 437, 502, 438,
	503, 0, 439, 440, 441, 0, 443, 444, 0, 0,
	445, 446, 447, 448, 449, 451, 0, 452, 0, 450,
	453, 454, 455, 504, 505, 506, 209, 457, 456, 507,
	0, 0, 0, 0, 458, 459, 508, 460, 461, 462,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 463, 0, 0, 0, 0, 221,
	222, 223, 224, 464, 465, 225, 466, 226, 227, 467,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	468, 469, 470, 0, 235, 471, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 472, 473, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 474, 267, 268, 270, 273, 269, 274, 275,
	276, 475, 476, 0, 0, 0, 0, 0, 0, 0,
	277, 278, 279, 477, 280, 281, 0, 282, 0, 283,
	0, 0, 0, 284, 285, 0, 286, 478, 0, 479,
	287, 0, 288, 289, 290, 291, 1261, 481, 482, 339,
	0, 292, 293, 0, 294, 295, 297, 0, 0, 0,
	0, 296, 298, 305, 0, 0, 299, 483, 301, 300,
	302, 303, 304, 484, 0, 485, 0, 306, 0, 486,
	0, 307, 308, 309, 0, 310, 311, 0, 0, 312,
	313, 314, 315, 0, 317, 316, 0, 318, 487, 0,
	319, 320, 0, 0, 321, 322, 0, 0, 323, 324,
	0, 325, 326, 328, 330, 327, 329, 331, 333, 334,
	332, 0, 335, 336, 338, 337, 0, 0, 0, 0,
	488, 489, 340, 341, 0, 342, 343, 344, 0, 0,
	346, 347, 348, 0, 0, 349, 490, 0, 350, 0,
	491, 351, 345, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 492, 360, 493, 361, 0, 362, 0, 363,
	364, 365, 366, 367, 368, 494, 369, 370, 0, 371,
	372, 373, 374, 375, 0, 377, 378, 379, 376, 380,
	381, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	495, 389, 0, 390, 394, 395, 396, 397, 398, 399,
	400, 0, 407, 408, 401, 403, 404, 405, 402, 406,
	409, 410, 0, 411, 391, 392, 412, 0, 413, 496,
	414, 415, 0, 425, 416, 417, 418, 393, 419, 423,
	424, 420, 421, 422, 497, 0, 427, 428, 426, 0,
	429, 430, 431, 432, 433, 271, 434, 272, 435, 0,
	498, 499, 500, 501, 0, 442, 0, 436, 437, 502,
	438, 503, 0, 439, 440, 441, 0, 443, 444, 0,
	0, 445, 446, 447, 448, 449, 451, 0, 452, 0,
	450, 453, 454, 455, 504, 505, 506, 209, 457, 456,
	507, 0, 0, 0, 0, 458, 459, 508, 460, 461,
	462, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 463, 0, 0, 0, 0,
	221, 222, 223, 224, 464, 465, 225, 466, 226, 227,
	467, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 468, 469, 470, 0, 235, 471, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 472, 473, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 474, 267, 268, 270, 273, 269, 274,
	275, 276, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 277, 278, 279, 477, 280, 281, 0, 282, 0,
	283, 0, 0, 0, 284, 285, 0, 286, 478, 0,
	479, 287, 0, 288, 289, 290, 291, 1203, 481, 482,
	339, 0, 292, 293, 0, 294, 295, 297, 0, 0,
	0, 0, 296, 298, 305, 0, 0, 299, 483, 301,
	300, 302, 303, 304, 484, 0, 485, 0, 306, 0,
	486, 0, 307, 308, 309, 0, 310, 311, 0, 0,
	312, 313, 314, 315, 0, 317, 316, 0, 318, 487,
	0, 319, 320, 0, 0, 321, 322, 0, 0, 323,
	324, 0, 325, 326, 328, 330, 327, 329, 331, 333,
	334, 332, 0, 335, 336, 338, 337, 0, 0, 0,
	0, 488, 489, 340, 341, 0, 342, 343, 344, 0,
	0, 346, 347, 348, 0, 0, 349, 490, 0, 350,
	0, 491, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 492, 360, 493, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 494, 369, 370, 0,
	371, 372, 373, 374, 375, 0, 377, 378, 379, 376,
	380, 381, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 495, 389, 0, 390, 394, 395, 396, 397, 398,
	399, 400, 0, 407, 408, 401, 403, 404, 405, 402,
	406, 409, 410, 0, 411, 391, 392, 412, 0, 413,
	496, 414, 415, 0, 425, 416, 417, 418, 393, 419,
	423, 424, 420, 421, 422, 497, 0, 427, 428, 426,
	0, 429, 430, 431, 432, 433, 271, 434, 272, 435,
	0, 498, 499, 500, 501, 0, 442, 0, 436, 437,
	502, 438, 503, 0, 439, 440, 441, 0, 443, 444,
	0, 0, 445, 446, 447, 448, 449, 451, 0, 452,
	0, 450, 453, 454, 455, 504, 505, 506, 209, 457,
	456, 507, 0, 0, 0, 0, 458, 459, 508, 460,
	461, 462, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 463, 0, 0, 0,
	0, 221, 222, 223, 224, 464, 465, 225, 466, 226,
	227, 467, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 468, 469, 470, 0, 235, 471, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 472, 473, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 474, 267, 268, 270, 273, 269,
	274, 275, 276, 475, 476, 0, 0, 0, 0, 0,
	0, 0, 277, 278, 279, 477, 280, 281, 0, 282,
	0, 283, 0, 0, 0, 284, 285, 0, 286, 478,
	0, 479, 287, 0, 288, 289, 290, 291, 480, 481,
	482, 339, 0, 292, 293, 0, 294, 295, 297, 0,
	0, 0, 0, 296, 298, 305, 0, 0, 299, 483,
	301, 300, 302, 303, 304, 484, 0, 485, 0, 306,
	0, 486, 0, 307, 308, 309, 0, 310, 311, 0,
	0, 312, 313, 314, 315, 0, 317, 316, 0, 318,
	487, 0, 319, 320, 0, 0, 321, 322, 0, 0,
	323, 324, 0, 325, 326, 328, 330, 327, 329, 331,
	333, 334, 332, 0, 335, 336, 338, 337, 0, 0,
	0, 0, 488, 489, 340, 341, 0, 342, 343, 344,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 0,
	350, 0, 491, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 492, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 494, 966, 370,
	0, 371, 372, 373, 374, 375, 0, 377, 378, 379,
	376, 380, 381, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 495, 389, 0, 390, 394, 395, 396, 397,
	398, 399, 400, 0, 407, 408, 401, 403, 404, 405,
	402, 406, 409, 410, 0, 411, 391, 392, 412, 0,
	413, 496, 414, 415, 0, 425, 416, 417, 418, 393,
	419, 423, 424, 420, 421, 422, 497, 0, 427, 428,
	426, 0, 429, 430, 431, 432, 433, 271, 434, 272,
	435, 0, 498, 499, 500, 501, 0, 442, 0, 436,
	437, 502, 438, 503, 0, 439, 440, 441, 0, 443,
	444, 0, 0, 445, 446, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 504, 505, 506, 209,
	457, 456, 507, 0, 0, 0, 0, 458, 459, 508,
	460, 461, 462, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 463, 0, 0,
	0, 0, 221, 222, 223, 224, 464, 465, 225, 466,
	226, 227, 467, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 468, 469, 470, 0, 235, 471, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 472, 473, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 474, 267, 268, 270, 273,
	269, 274, 275, 276, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 277, 278, 279, 477, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	478, 0, 479, 0, 0, 288, 289, 290, 291, 480,
	481, 482, 339, 0, 292, 293, 0, 294, 295, 297,
	0, 0, 0, 0, 296, 298, 305, 0, 0, 299,
	483, 301, 300, 302, 303, 304, 484, 0, 485, 0,
	306, 0, 486, 0, 307, 308, 309, 0, 310, 311,
	0, 0, 312, 313, 314, 315, 0, 317, 316, 0,
	318, 487, 0, 319, 320, 0, 0, 321, 322, 0,
	0, 323, 324, 0, 325, 326, 328, 330, 327, 329,
	331, 333, 334, 332, 0, 335, 336, 338, 337, 0,
	0, 0, 0, 488, 489, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 490,
	0, 350, 0, 491, 351, 345, 352, 353, 0, 355,
	356, 357, 0, 358, 359, 492, 360, 493, 361, 0,
	362, 0, 363, 364, 365, 0, 367, 368, 494, 369,
	370, 0, 371, 372, 373, 374, 375, 0, 377, 378,
	379, 376, 380, 381, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 495, 0, 0, 390, 394, 395, 396,
	397, 398, 399, 400, 0, 407, 408, 401, 403, 404,
	405, 402, 406, 409, 410, 0, 411, 391, 392, 412,
	0, 413, 496, 414, 415, 0, 425, 416, 417, 418,
	393, 419, 423, 424, 420, 421, 422, 497, 0, 427,
	428, 426, 0, 429, 430, 431, 432, 433, 271, 434,
	272, 435, 0, 498, 499, 500, 501, 0, 442, 0,
	436, 437, 502, 438, 503, 0, 439, 440, 441, 0,
	443, 444, 0, 0, 445, 446, 447, 448, 449, 451,
	0, 452, 0, 450, 453, 454, 455, 504, 505, 506,
	0, 457, 456, 507, 0, 0, 0, 0, 458, 459,
	508, 460, 461, 462, 1418, 1419, 0, 1451, 1452, 1453,
	1461, 1462, 1463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1454, 0, 0, 0, 0, 0, 0,
	1421, 0, 0, 0, 1467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1420, 0, 0,
	0, 0, 0, 0, 0, 1440, 0, 0, 0, 0,
	1418, 1419, 1437, 1451, 1452, 1453, 1461, 1462, 1463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1454,
	0, 0, 0, 0, 0, 0, 1421, 0, 0, 0,
	1467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1420, 0, 0, 0, 1443, 1444, 1445,
	1446, 1440, 0, 0, 0, 0, 0, 1426, 1437, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1458, 0, 0, 1468, 0, 0, 0, 1448, 1449,
	1450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1464,
	0, 1465, 0, 1443, 1444, 1445, 1446, 0, 1435, 1436,
	0, 0, 0, 1426, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1456, 0, 0, 0, 0, 0, 0,
	0, 1441, 0, 0, 0, 0, 0, 1458, 0, 0,
	1468, 0, 0, 0, 1448, 1449, 1450, 0, 0, 1466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1455, 1464, 0, 1465, 0, 0,
	0, 0, 0, 0, 1435, 1436, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1456,
	0, 0, 0, 0, 0, 0, 0, 1441, 0, 0,
	0, 0, 0, 0, 0, 1447, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1466, 0, 0, 0, 0,
	0, 0, 0, 1442, 0, 0, 0, 0, 0, 0,
	1455, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1459, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1418, 1419, 0, 1451, 1452, 1453, 1461, 1462,
	1463, 1447, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1454, 0, 0, 0, 0, 0, 0, 1421, 1442,
	0, 0, 1467, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1459, 1420, 0, 0, 0, 0,
	0, 0, 0, 1440, 0, 0, 0, 0, 0, 0,
	1437, 0, 1457, 0, 0, 1432, 1433, 1439, 1438, 1434,
	1460, 0, 1431, 1429, 1430, 1422, 1423, 1424, 1425, 1427,
	1428, 0, 0, 0, 0, 0, 0, 0, 2475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1418, 1419, 0, 1451, 1452, 1453, 1461, 1462, 1463, 0,
	0, 0, 0, 0, 0, 1443, 1444, 1445, 1446, 1454,
	0, 0, 0, 0, 0, 1426, 1421, 0, 1457, 0,
	1467, 1432, 1433, 1439, 1438, 1434, 1460, 0, 1431, 1429,
	1430, 1422, 1423, 1424, 1425, 1427, 1428, 0, 0, 1458,
	0, 0, 1468, 1420, 2474, 0, 1448, 1449, 1450, 0,
	0, 1440, 0, 0, 0, 0, 0, 0, 1437, 0,
	0, 0, 0, 0, 0, 0, 0, 1464, 0, 1465,
	0, 0, 0, 0, 0, 0, 1435, 1436, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1456, 0, 0, 0, 0, 0, 0, 0, 1441,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1443, 1444, 1445, 1446, 1466, 0, 0,
	0, 0, 0, 1426, 0, 0, 0, 0, 0, 0,
	0, 0, 1455, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1458, 0, 0,
	1468, 0, 0, 0, 1448, 1449, 1450, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1447, 0, 1464, 0, 1465, 0, 0,
	0, 0, 0, 0, 1435, 1436, 0, 0, 0, 0,
	0, 1442, 0, 0, 0, 0, 0, 0, 0, 1456,
	0, 0, 0, 0, 0, 0, 0, 1441, 0, 0,
	0, 0, 0, 0, 0, 0, 1459, 0, 0, 0,
	0, 0, 0, 0, 0, 1466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1455, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1418, 1419, 0, 1451, 1452, 1453, 1461, 1462,
	1463, 1447, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1454, 0, 0, 0, 0, 0, 0, 1421, 1442,
	1457, 0, 1467, 1432, 1433, 1439, 1438, 1434, 1460, 0,
	1431, 1429, 1430, 1422, 1423, 1424, 1425, 1427, 1428, 0,
	0, 0, 0, 0, 1459, 1420, 2473, 0, 0, 0,
	0, 0, 0, 1440, 0, 0, 0, 0, 1418, 1419,
	1437, 1451, 1452, 1453, 1461, 1462, 1463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1454, 0, 0,
	0, 0, 0, 0, 1421, 0, 0, 0, 1467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1420, 0, 0, 0, 1443, 1444, 1445, 1446, 1440,
	0, 0, 0, 0, 0, 1426, 1437, 0, 1457, 0,
	0, 1432, 1433, 1439, 1438, 1434, 1460, 0, 1431, 1429,
	1430, 1422, 1423, 1424, 1425, 1427, 1428, 0, 0, 1458,
	0, 0, 1468, 0, 2025, 0, 1448, 1449, 1450, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1464, 0, 1465,
	0, 1443, 1444, 1445, 1446, 0, 1435, 1436, 0, 0,
	0, 1426, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1456, 0, 0, 0, 0, 0, 0, 0, 1441,
	0, 0, 0, 0, 0, 1458, 0, 0, 1468, 0,
	0, 0, 1448, 1449, 1450, 0, 0, 1466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1455, 1464, 0, 1465, 0, 0, 0, 0,
	0, 0, 1435, 1436, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1456, 0, 0,
	0, 0, 0, 0, 0, 1441, 0, 0, 0, 0,
	0, 0, 0, 1447, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1466, 0, 0, 0, 0, 0, 0,
	0, 1442, 0, 0, 0, 0, 0, 0, 1455, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1459, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1418, 1419,
	0, 1451, 1452, 1453, 1461, 1462, 1463, 0, 0, 1447,
	0, 0, 0, 0, 0, 0, 0, 1454, 0, 0,
	0, 0, 0, 0, 1421, 0, 0, 1442, 1467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1420, 1459, 0, 0, 0, 0, 0, 0, 1440,
	0, 0, 0, 0, 0, 0, 1437, 0, 0, 0,
	1457, 0, 0, 1432, 1433, 1439, 1438, 1434, 1460, 0,
	1431, 1429, 1430, 1422, 1423, 1424, 1425, 1427, 1428, 0,
	0, 0, 0, 3336, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1443, 1444, 1445, 1446, 0, 0, 0, 0, 0,
	0, 1426, 0, 0, 0, 0, 1457, 0, 0, 1432,
	1433, 1439, 1438, 1434, 1460, 0, 1431, 1429, 1430, 1422,
	1423, 1424, 1425, 1427, 1428, 1458, 0, 0, 1468, 3332,
	0, 0, 1448, 1449, 1450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1464, 0, 1465, 0, 0, 0, 0,
	0, 0, 1435, 1436, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1456, 0, 0,
	0, 0, 0, 0, 0, 1441, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1455, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1418, 1419,
	0, 1451, 1452, 1453, 1461, 1462, 1463, 0, 0, 1447,
	0, 0, 0, 0, 0, 0, 0, 1454, 0, 0,
	0, 0, 0, 0, 1421, 0, 0, 1442, 1467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1420, 1459, 0, 0, 0, 0, 0, 0, 1440,
	0, 0, 0, 0, 1418, 1419, 1437, 1451, 1452, 1453,
	1461, 1462, 1463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1454, 0, 0, 0, 0, 0, 0,
	1421, 0, 0, 0, 1467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1420, 0, 0,
	0, 1443, 1444, 1445, 1446, 1440, 0, 0, 0, 0,
	0, 1426, 1437, 0, 0, 0, 1457, 0, 0, 1432,
	1433, 1439, 1438, 1434, 1460, 0, 1431, 1429, 1430, 1422,
	1423, 1424, 1425, 1427, 1428, 1458, 0, 0, 1468, 3264,
	0, 0, 1448, 1449, 1450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1464, 0, 1465, 0, 1443, 1444, 1445,
	1446, 0, 1435, 1436, 0, 0, 0, 1426, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1456, 0, 0,
	0, 0, 0, 0, 0, 1441, 0, 0, 0, 0,
	0, 1458, 0, 0, 1468, 0, 0, 0, 1448, 1449,
	1450, 0, 0, 1466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1455, 1464,
	0, 1465, 0, 0, 0, 0, 0, 0, 1435, 1436,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1456, 0, 0, 0, 0, 0, 0,
	0, 1441, 0, 0, 0, 0, 0, 0, 0, 1447,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1466,
	0, 0, 0, 0, 0, 0, 0, 1442, 0, 0,
	0, 0, 0, 0, 1455, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1459, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1418, 1419, 0, 1451, 1452, 1453,
	1461, 1462, 1463, 0, 0, 1447, 0, 0, 0, 0,
	0, 0, 0, 1454, 0, 0, 0, 0, 0, 0,
	1421, 0, 0, 1442, 1467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1420, 1459, 0,
	0, 0, 0, 0, 0, 1440, 0, 0, 0, 0,
	0, 0, 1437, 0, 0, 0, 1457, 0, 0, 1432,
	1433, 1439, 1438, 1434, 1460, 0, 1431, 1429, 1430, 1422,
	1423, 1424, 1425, 1427, 1428, 0, 0, 0, 0, 3263,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1443, 1444, 1445,
	1446, 0, 0, 0, 0, 0, 0, 1426, 0, 0,
	0, 0, 1457, 0, 0, 1432, 1433, 1439, 1438, 1434,
	1460, 0, 1431, 1429, 1430, 1422, 1423, 1424, 1425, 1427,
	1428, 1458, 0, 0, 1468, 3166, 0, 0, 1448, 1449,
	1450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1464,
	0, 1465, 0, 0, 0, 0, 0, 0, 1435, 1436,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1456, 0, 0, 0, 0, 0, 0,
	0, 1441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1455, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1418, 1419, 0, 1451, 1452, 1453,
	1461, 1462, 1463, 0, 0, 1447, 0, 0, 0, 0,
	0, 0, 0, 1454, 0, 0, 0, 0, 0, 0,
	1421, 0, 0, 1442, 1467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1420, 1459, 0,
	0, 0, 0, 0, 0, 1440, 0, 0, 0, 0,
	1418, 1419, 1437, 1451, 1452, 1453, 1461, 1462, 1463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1454,
	0, 0, 0, 0, 0, 0, 1421, 0, 0, 0,
	1467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1420, 0, 0, 0, 1443, 1444, 1445,
	1446, 1440, 0, 0, 0, 0, 0, 1426, 1437, 0,
	0, 0, 1457, 0, 0, 1432, 1433, 1439, 1438, 1434,
	1460, 0, 1431, 1429, 1430, 1422, 1423, 1424, 1425, 1427,
	1428, 1458, 0, 0, 1468, 3085, 0, 0, 1448, 1449,
	1450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1464,
	0, 1465, 0, 1443, 1444, 1445, 1446, 0, 1435, 1436,
	0, 0, 0, 1426, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1456, 0, 0, 0, 0, 0, 0,
	0, 1441, 0, 0, 0, 0, 0, 1458, 0, 0,
	1468, 0, 0, 0, 1448, 1449, 1450, 0, 0, 1466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1455, 1464, 0, 1465, 0, 0,
	0, 0, 0, 0, 1435, 1436, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1456,
	0, 0, 0, 0, 0, 0, 0, 1441, 0, 0,
	0, 0, 0, 0, 0, 1447, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1466, 0, 0, 0, 0,
	0, 0, 0, 1442, 0, 0, 0, 0, 0, 0,
	1455, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1459, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1418, 1419, 0, 1451, 1452, 1453, 1461, 1462, 1463, 0,
	0, 1447, 0, 0, 0, 0, 0, 0, 0, 1454,
	0, 0, 0, 0, 0, 0, 1421, 0, 0, 1442,
	1467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1420, 1459, 0, 0, 0, 0, 0,
	0, 1440, 0, 0, 0, 0, 0, 0, 1437, 0,
	0, 0, 1457, 0, 0, 1432, 1433, 1439, 1438, 1434,
	1460, 0, 1431, 1429, 1430, 1422, 1423, 1424, 1425, 1427,
	1428, 0, 0, 0, 0, 3037, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1443, 1444, 1445, 1446, 0, 0, 0,
	0, 0, 0, 1426, 0, 0, 0, 0, 1457, 0,
	0, 1432, 1433, 1439, 1438, 1434, 1460, 0, 1431, 1429,
	1430, 1422, 1423, 1424, 1425, 1427, 1428, 1458, 0, 0,
	1468, 3036, 0, 0, 1448, 1449, 1450, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1464, 0, 1465, 0, 0,
	0, 0, 0, 0, 1435, 1436, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1456,
	0, 0, 0, 0, 0, 0, 0, 1441, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1455, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1418, 1419, 0, 1451, 1452, 1453, 1461, 1462, 1463, 0,
	0, 1447, 0, 0, 0, 0, 0, 0, 0, 1454,
	0, 0, 0, 0, 0, 0, 1421, 0, 0, 1442,
	1467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1420, 1459, 0, 0, 0, 0, 0,
	0, 1440, 0, 0, 0, 0, 1418, 1419, 1437, 1451,
	1452, 1453, 1461, 1462, 1463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1454, 0, 0, 0, 0,
	0, 0, 1421, 0, 0, 0, 1467, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1420,
	0, 0, 0, 1443, 1444, 1445, 1446, 1440, 0, 0,
	0, 0, 0, 1426, 1437, 0, 0, 0, 1457, 0,
	0, 1432, 1433, 1439, 1438, 1434, 1460, 0, 1431, 1429,
	1430, 1422, 1423, 1424, 1425, 1427, 1428, 1458, 0, 0,
	1468, 3035, 0, 0, 1448, 1449, 1450, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1464, 0, 1465, 0, 1443,
	1444, 1445, 1446, 0, 1435, 1436, 0, 0, 0, 1426,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1456,
	0, 0, 0, 0, 0, 0, 0, 1441, 0, 0,
	0, 0, 0, 1458, 0, 0, 1468, 0, 0, 0,
	1448, 1449, 1450, 0, 0, 1466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1455, 1464, 0, 1465, 0, 0, 0, 0, 0, 0,
	1435, 1436, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1456, 0, 0, 0, 0,
	0, 0, 0, 1441, 0, 0, 0, 0, 0, 0,
	0, 1447, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1466, 0, 0, 0, 0, 0, 0, 0, 1442,
	0, 0, 0, 0, 0, 0, 1455, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1459, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1418, 1419, 0, 1451,
	1452, 1453, 1461, 1462, 1463, 0, 0, 1447, 0, 0,
	0, 0, 0, 0, 0, 1454, 0, 0, 0, 0,
	0, 0, 1421, 0, 0, 1442, 1467, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1420,
	1459, 0, 0, 0, 0, 0, 0, 1440, 0, 0,
	0, 0, 0, 0, 1437, 0, 0, 0, 1457, 0,
	0, 1432, 1433, 1439, 1438, 1434, 1460, 0, 1431, 1429,
	1430, 1422, 1423, 1424, 1425, 1427, 1428, 0, 0, 0,
	0, 3001, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1443,
	1444, 1445, 1446, 0, 0, 0, 0, 0, 0, 1426,
	0, 0, 0, 0, 1457, 0, 0, 1432, 1433, 1439,
	1438, 1434, 1460, 0, 1431, 1429, 1430, 1422, 1423, 1424,
	1425, 1427, 1428, 1458, 0, 0, 1468, 2809, 0, 0,
	1448, 1449, 1450, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1464, 0, 1465, 0, 0, 0, 0, 0, 0,
	1435, 1436, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1456, 0, 0, 0, 0,
	0, 0, 0, 1441, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1455, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1418, 1419, 0, 1451,
	1452, 1453, 1461, 1462, 1463, 0, 0, 1447, 0, 0,
	0, 0, 0, 0, 0, 1454, 0, 0, 0, 0,
	0, 0, 1421, 0, 0, 1442, 1467, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1420,
	1459, 0, 0, 0, 0, 0, 0, 1440, 0, 0,
	0, 0, 0, 0, 1437, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1418, 1419, 0, 1451, 1452,
	1453, 1461, 1462, 1463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1454, 0, 0, 0, 0, 2401,
	0, 1421, 0, 0, 0, 1467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1443,
	1444, 1445, 1446, 0, 0, 0, 0, 0, 1420, 1426,
	3427, 0, 0, 0, 1457, 0, 1440, 1432, 1433, 1439,
	1438, 1434, 1460, 1437, 1431, 1429, 1430, 1422, 1423, 1424,
	1425, 1427, 1428, 1458, 0, 2430, 1468, 0, 0, 0,
	1448, 1449, 1450, 0, 0, 0, 0, 0, 0, 0,
	0, 2402, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1464, 0, 1465, 0, 0, 0, 0, 0, 0,
	1435, 1436, 0, 0, 0, 0, 0, 0, 1443, 1444,
	1445, 1446, 0, 0, 0, 1456, 0, 0, 1426, 0,
	0, 0, 0, 1441, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1466, 1458, 0, 0, 1468, 0, 0, 0, 1448,
	1449, 1450, 0, 0, 0, 0, 1455, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1464, 0, 1465, 0, 0, 0, 3426, 0, 0, 1435,
	1436, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1456, 0, 0, 1447, 0, 0,
	0, 0, 1441, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1442, 0, 0, 0, 0,
	1466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1455, 0, 0, 0, 0,
	1459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1447, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1442, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1459,
	0, 0, 0, 0, 1457, 0, 0, 1432, 1433, 1439,
	1438, 1434, 1460, 0, 1431, 1429, 1430, 1422, 1423, 1424,
	1425, 1427, 1428, 0, 1418, 1419, 0, 1451, 1452, 1453,
	1461, 1462, 1463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1454, 0, 0, 0, 0, 0, 0,
	1421, 0, 0, 0, 1467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1420, 0, 0,
	0, 0, 0, 1457, 0, 1440, 1432, 1433, 1439, 1438,
	1434, 1460, 1437, 1431, 1429, 1430, 1422, 1423, 1424, 1425,
	1427, 1428, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1443, 1444, 1445,
	1446, 0, 0, 0, 0, 0, 0, 1426, 0, 2518,
	0, 0, 2517, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1458, 0, 0, 1468, 0, 0, 0, 1448, 1449,
	1450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1464,
	0, 1465, 0, 0, 0, 0, 0, 0, 1435, 1436,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1456, 0, 0, 0, 0, 0, 0,
	0, 1441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1455, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2116, 0, 0,
	0, 0, 0, 0, 1418, 1419, 0, 1451, 1452, 1453,
	1461, 1462, 1463, 0, 0, 1447, 0, 0, 0, 0,
	0, 0, 0, 1454, 0, 0, 0, 2115, 0, 0,
	1421, 0, 0, 1442, 1467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1420, 1459, 0,
	0, 0, 0, 0, 0, 1440, 0, 0, 0, 0,
	1418, 1419, 1437, 1451, 1452, 1453, 1461, 1462, 1463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1454,
	0, 0, 0, 0, 0, 0, 1421, 0, 0, 0,
	1467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1420, 0, 0, 0, 1443, 1444, 1445,
	1446, 1440, 0, 0, 0, 0, 0, 1426, 1437, 0,
	0, 0, 1457, 0, 0, 1432, 1433, 1439, 1438, 1434,
	1460, 0, 1431, 1429, 1430, 1422, 1423, 1424, 1425, 1427,
	1428, 1458, 0, 0, 1468, 0, 0, 0, 1448, 1449,
	1450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1464,
	0, 1465, 0, 1443, 1444, 1445, 1446, 0, 1435, 1436,
	0, 0, 0, 1426, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1456, 0, 0, 0, 0, 0, 0,
	0, 1441, 0, 0, 0, 0, 0, 1458, 0, 0,
	1468, 0, 0, 0, 1448, 1449, 1450, 0, 0, 1466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1455, 1464, 0, 1465, 0, 0,
	0, 0, 0, 0, 1435, 1436, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1456,
	0, 0, 0, 0, 0, 0, 0, 1441, 0, 0,
	0, 0, 0, 0, 0, 1447, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1466, 0, 0, 0, 0,
	0, 0, 0, 1442, 0, 0, 0, 0, 0, 0,
	1455, 809, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1459, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1418, 1419, 0, 1451, 1452, 1453, 1461, 1462, 1463, 0,
	0, 1447, 0, 0, 0, 0, 0, 0, 0, 1454,
	0, 0, 0, 0, 0, 0, 1421, 0, 0, 1442,
	1467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1420, 1459, 0, 0, 0, 0, 0,
	0, 1440, 0, 0, 0, 0, 0, 0, 1437, 0,
	0, 0, 1457, 0, 0, 1432, 1433, 1439, 1438, 1434,
	1460, 0, 1431, 1429, 1430, 1422, 1423, 1424, 1425, 1427,
	1428, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1443, 1444, 1445, 1446, 0, 0, 0,
	0, 0, 0, 1426, 0, 0, 0, 0, 1457, 0,
	0, 1432, 1433, 1439, 1438, 1434, 1460, 0, 1431, 1429,
	1430, 1422, 1423, 1424, 1425, 1427, 1428, 1458, 0, 0,
	1468, 0, 0, 0, 1448, 1449, 1450, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1464, 0, 1465, 0, 0,
	0, 0, 0, 0, 1435, 1436, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1456,
	0, 0, 0, 0, 0, 0, 0, 1441, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1455, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1418, 1419, 0, 1451, 1452, 1453, 1461, 1462,
	1463, 1447, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1454, 0, 0, 0, 0, 0, 0, 1421, 1442,
	0, 0, 1467, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1459, 1420, 0, 0, 0, 0,
	0, 0, 0, 1440, 0, 0, 0, 0, 1418, 1419,
	1437, 1451, 1452, 1453, 1461, 1462, 1463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2797, 1454, 0, 0,
	0, 2519, 0, 0, 1421, 0, 0, 0, 1467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1420, 0, 0, 0, 1443, 1444, 1445, 1446, 1440,
	0, 0, 0, 0, 0, 1426, 1437, 0, 1457, 0,
	2524, 1432, 1433, 1439, 1438, 1434, 1460, 0, 1431, 1429,
	1430, 1422, 1423, 1424, 1425, 1427, 1428, 0, 0, 1458,
	0, 0, 1468, 0, 0, 0, 1448, 1449, 1450, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1464, 0, 1465,
	0, 1443, 1444, 1445, 1446, 0, 1435, 1436, 0, 0,
	0, 1426, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1456, 0, 0, 0, 0, 0, 0, 0, 1441,
	0, 0, 0, 0, 0, 1458, 0, 0, 1468, 0,
	0, 0, 1448, 1449, 1450, 0, 0, 1466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1455, 1464, 0, 1465, 0, 0, 0, 0,
	0, 0, 1435, 1436, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1456, 0, 0,
	0, 0, 0, 0, 0, 1441, 0, 0, 0, 0,
	0, 0, 0, 1447, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1466, 0, 0, 0, 0, 0, 0,
	0, 1442, 0, 0, 0, 0, 0, 0, 1455, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1459, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1418, 1419,
	0, 1451, 1452, 1453, 1461, 1462, 1463, 0, 0, 1447,
	0, 0, 0, 0, 0, 0, 0, 1454, 0, 0,
	0, 0, 0, 0, 1421, 0, 0, 1442, 1467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1420, 1459, 0, 0, 0, 0, 0, 0, 1440,
	0, 0, 0, 0, 0, 0, 1437, 0, 0, 0,
	1457, 0, 0, 1432, 1433, 1439, 1438, 1434, 1460, 0,
	1431, 1429, 1430, 1422, 1423, 1424, 1425, 1427, 1428, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1443, 1444, 1445, 1446, 0, 0, 0, 0, 0,
	0, 1426, 0, 0, 0, 0, 1457, 0, 0, 1432,
	1433, 1439, 1438, 1434, 1460, 0, 1431, 1429, 1430, 1422,
	1423, 1424, 1425, 1427, 1428, 1458, 0, 0, 1468, 0,
	0, 0, 1448, 1449, 1450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1464, 0, 1465, 0, 0, 0, 0,
	0, 0, 1435, 1436, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1456, 0, 0,
	0, 0, 0, 0, 0, 1441, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1455, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2486, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1418, 1419,
	0, 1451, 1452, 1453, 1461, 1462, 1463, 0, 0, 1447,
	0, 0, 0, 0, 0, 0, 0, 1454, 0, 0,
	0, 2472, 0, 0, 1421, 0, 0, 1442, 1467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1420, 1459, 0, 0, 0, 0, 0, 0, 1440,
	0, 0, 0, 0, 1418, 1419, 1437, 1451, 1452, 1453,
	1461, 1462, 1463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1454, 0, 0, 0, 0, 0, 0,
	1421, 0, 0, 0, 1467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1420, 0, 0,
	0, 1443, 1444, 1445, 1446, 1440, 0, 0, 0, 0,
	0, 1426, 1437, 0, 0, 0, 1457, 0, 0, 1432,
	1433, 1439, 1438, 1434, 1460, 0, 1431, 1429, 1430, 1422,
	1423, 1424, 1425, 1427, 1428, 1458, 0, 0, 1468, 0,
	0, 0, 1448, 1449, 1450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1464, 0, 1465, 0, 1443, 1444, 1445,
	1446, 0, 1435, 1436, 0, 0, 0, 1426, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1456, 0, 0,
	0, 0, 0, 0, 0, 1441, 0, 0, 0, 0,
	0, 1458, 0, 0, 1468, 0, 0, 0, 1448, 1449,
	1450, 0, 0, 1466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1455, 1464,
	0, 1465, 0, 0, 0, 0, 0, 0, 1435, 1436,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1456, 0, 0, 0, 0, 0, 0,
	0, 1441, 0, 0, 0, 0, 0, 0, 0, 1447,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1466,
	0, 0, 0, 0, 0, 0, 0, 1442, 0, 0,
	0, 0, 0, 0, 1455, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1459, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1418, 1419, 0, 1451, 1452, 1453,
	1461, 1462, 1463, 0, 0, 1447, 0, 0, 0, 0,
	0, 0, 0, 1454, 0, 0, 0, 0, 0, 0,
	1421, 0, 0, 1442, 1467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1420, 1459, 0,
	0, 0, 0, 0, 0, 1440, 0, 0, 0, 0,
	0, 0, 1437, 0, 0, 0, 1457, 1639, 0, 1432,
	1433, 1439, 1438, 1434, 1460, 0, 1431, 1429, 1430, 1422,
	1423, 1424, 1425, 1427, 1428, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1651, 1633, 1640, 1623, 1661,
	1660, 0, 0, 1625, 1624, 0, 0, 1443, 1444, 1445,
	1446, 1671, 1672, 0, 0, 0, 0, 1426, 0, 0,
	0, 0, 1457, 0, 0, 1432, 1433, 1439, 1438, 1434,
	1460, 0, 1431, 1429, 1430, 1422, 1423, 1424, 1425, 1427,
	1428, 1458, 0, 0, 1468, 0, 0, 0, 1448, 1449,
	1450, 1662, 0, 1658, 1657, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1656, 0, 0, 0, 1464,
	0, 1465, 0, 0, 0, 0, 0, 0, 1435, 1436,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1456, 1655, 1653, 1654, 0, 0, 0,
	0, 1441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1466,
	0, 0, 0, 0, 0, 0, 0, 1635, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1644, 1638,
	1646, 1648, 1649, 1650, 1645, 0, 1643, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1667, 1668, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1447, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1627, 0, 0, 1442, 0, 0, 0, 0, 0, 0,
	0, 0, 1659, 0, 0, 0, 1636, 0, 1637, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1459, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1652, 0, 0, 0,
	1620, 1618, 1619, 1622, 1621, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1628, 1629, 1631, 1632, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1647, 1630, 1457, 0, 0, 1432, 1433, 1439, 1438, 1434,
	1460, 1670, 1431, 1429, 1430, 1422, 1423, 1424, 1425, 1427,
	1428, 0, 0, 0, 0, 0, 0, 0, 0, 1626,
	0, 1663, 1664, 1665, 1666, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1634, 0, 0, 0, 0, 1641, 1669,
}
var sqlPact = [...]int{

	8305, -1000, -1000, -1000, -1000, -1000, -1000, 292, 285, 283,
	282, 280, 277, 274, 272, 271, -1000, -1000, -1000, 269,
	-1000, -1000, 259, -1000, 252, 245, 244, 241, -1000, 230,
	227, -1000, -1000, -1000, -1000, 218, 217, 208, 49364, 1738,
	60154, 51842, 1962, 2145, 43961, 59737, 43544, 59320, 58903, 207,
	-1000, 58486, 206, 194, 193, -1000, -1000, 191, 3146, 35591,
	190, 189, 188, 2575, 186, 185, -1000, 183, -1000, 6923,
	1317, -1000, 182, 178, -1000, 4642, 4278, 51425, 2122, 169,
	162, 35173, 2112, -1000, -1000, 1609, -1000, -1000, 161, 157,
	155, 153, 152, 151, 150, 149, 145, -1000, 144, 143,
	140, 139, 135, 128, 126, 125, 122, 113, 111, 110,
	109, 106, 105, 104, 103, -1000, 7593, 1600, 1443, 1438,
	1433, 1428, 1444, 953, 102, 92, 90, 89, 86, 85,
	-1000, -1000, 84, 83, 81, 80, -1000, 79, 78, 184,
	76, 73, 71, 69, 68, 3030, 2043, 1377, 694, 16903,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 64264, 60565, 65, -147, 58, -1000, 2491, 940,
	29744, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 519, -1000, -1000, -1000, 349, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1583,
	719, -1000, -1000, -1000, 58069, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 60565, -1000, 1735, -47, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 717, -1000, 1699, 123, 1616, -1000,
	-1000, -1000, -1000, -1000, 60565, -1000, -1000, 2803, 2800, 1669,
	716, 57658, -1000, 1268, -1000, 901, 19556, -1000, 1113, -1000,
	19556, 348, -1000, -1000, -1000, -1000, -1000, 43127, 13825, 42710,
	42293, 39386, 57241, 13398, 48953, 1126, -1000, -1000, -1000, -1000,
	-1000, 15, 36824, 60565, -1000, 333, -1000, -1000, -1000, -1000,
	-1000, -1000, 25859, 365, 25406, 539, 24953, 426, -1000, -1000,
	-1000, -1000, 2798, 2795, 1039, 2791, 2422, 63853, 1513, 2789,
	1400, 1111, 986, 2788, 2778, 2777, 2769, 2764, 2763, 2760,
	1300, 56824, 2200, 38959, 38532, 49364, 49364, 1964, 56407, -1000,
	-1000, 1215, 1205, -1000, -1000, -1000, -1000, 2282, 2136, 2127,
	48536, -1000, -1000, 2759, 2757, 2751, 2748, 2746, 63442, 1446,
	2745, 1883, 2742, 2736, 2735, 2732, 2731, 2721, 2720, 2719,
	2716, -1000, 48119, 47702, 47285, 46868, 55990, 38105, 37678, -1000,
	-1000, -1000, 31408, 6500, 55573, 32264, 49364, 49364, -1000, -1000,
	26299, 37, -1000, -1000, -1000, 2168, -1000, 26299, 37, -1000,
	2199, 1557, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2281, 1418, 2623, 37251, 1650, 1263, 2278, 1351, 1884, 2266,
	2262, 2259, 2258, 2256, 1355, 1910, 1394, 1333, 2250, 2227,
	2653, 1721, 41876, 2715, 2713, 2453, 2188, 2165, -1000, -1000,
	-1000, -1000, 1308, -1000, -1000, -1000, -1000, -1000, 44372, -1000,
	-1000, 1095, -1000, -1000, 1095, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1125, 62620, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1359,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1969, -1000,
	1624, -1000, -1000, 2712, 2043, 1869, 2450, 2450, 2450, 2502,
	506, 503, -1000, 184, -1000, -1000, 70373, -1000, -1000, 26299,
	26299, 26299, 26299, 26299, 1517, -1000, 714, -1000, -1000, 803,
	-1000, 713, 634, -1000, -1000, -1000, -1000, -1000, -1000, 711,
	2657, -1000, 952, -1000, -1000, -1000, -1000, 2607, -1000, 16010,
	-1000, -1000, -1000, 490, 707, 26299, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 326, 919, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 625, 1472,
	622, 622, 622, -1000, -1000, 979, -1000, -1000, -1000, 352,
	621, 337, 619, -1000, -1000, -1000, -1000, 2196, 705, 704,
	-1000, 703, 700, 698, -1000, -1000, -1000, 697, 696, 689,
	688, 677, 675, 674, 672, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 977, -1000, 671, 670, 669, 654, 647, 646,
	645, 644, 643, -1000, -1000, 0, 60565, -1000, 519, 0,
	-1000, -1000, 639, -1000, 19996, 19996, 19996, -1000, -1000, 1690,
	26299, -1000, 1906, -1000, 330, -235, 863, 30574, -1000, 28895,
	863, 797, 33511, -1000, 2157, -1000, -1000, 638, 322, -1000,
	-1000, 2147, 60565, 14250, 60565, 49364, 49364, -1000, 2362, 26299,
	-1000, -1000, 39811, 36413, 60565, 49775, 2567, 70733, 36413, 60565,
	2195, -1000, -1000, -1000, 60565, -1000, 26299, -1000, 2562, 1254,
	-48, -1000, -1000, -1000, -1000, -1000, -1000, 1866, 1903, 1049,
	1783, 1364, -1000, 19556, 2415, -1000, -1000, -1000, 313, 14250,
	-1000, 1589, 2339, 1162, -1000, 1782, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1404, 2335, -1000, 2160, 2332, 1403,
	-1000, -1000, 957, 2331, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1678, -1000, -1000, 2449, -1000, -1000, 1649,
	2326, -191, -1000, -1000, 39811, 36824, -24, -1000, -1000, -77,
	-1000, 12971, 70373, -1000, -1000, -1000, 70373, 844, -1000, -1000,
	2321, -1000, 70373, 840, -1000, -1000, 2319, -1000, -1000, -1000,
	2711, -1000, 2710, 1834, 2708, 2706, 2705, -1000, 1265, 1460,
	2704, -1000, 2703, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	46451, 46034, 984, -1000, 1686, -1000, -1000, 45617, 944, 1831,
	-1000, -1000, 1827, -1000, 860, -1000, 2702, 55156, 1971, 944,
	1826, -1000, -1000, -1000, -1000, -1000, 49364, -1000, 49364, -1000,
	49364, -1000, 1290, -1000, 63031, -235, -1000, -1000, -1000, -1000,
	-1000, 2317, 2701, 2700, 2699, -1000, 60565, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 173, 2314, -1000, -1000,
	173, 2310, -1000, 173, 2308, -1000, 166, 2305, -1000, -1000,
	1668, 2304, -1000, -140, 2302, -1000, -1000, -140, 2300, -1000,
	59, -1000, -1000, -1000, 940, -1000, 30991, 54739, 39811, 937,
	695, 635, 70373, -1000, 39811, 70373, -1000, 45617, -1000, 54322,
	45206, -1000, -1000, 1175, 1898, -1000, -1000, -1000, -1000, 39811,
	39811, -1000, 53905, -1000, 1618, 1344, 2460, 49364, -1000, -1000,
	-1000, 2467, 2194, -1000, 36002, 51008, -1000, 50597, -1000, 50186,
	-1000, 49364, -1000, 49364, -1000, 2698, 2697, 2696, 2174, 1462,
	1454, 60565, -1000, -1000, 60565, -1000, 60565, -1000, -1000, -1000,
	1865, -1000, -1000, -1000, -1000, 49364, -1000, -1000, -1000, -1000,
	-1000, -1000, 2182, -1000, 1411, -1000, 1157, -1000, -1000, 175,
	-1000, -1000, -48, -1000, 62620, -1000, -1000, 2043, 1869, -1000,
	60565, -1000, -1000, -1000, 2043, 1767, 1953, 24500, 1942, 26299,
	184, -1000, -1000, 184, 184, 19116, -1000, -1000, 70733, 70733,
	14250, 1137, 26299, 26299, 26299, 26299, 26299, 26299, 26299, 26299,
	26299, 26299, 26299, 26299, 26299, 26299, 26299, 26299, 26299, 26299,
	26299, 26299, 26299, 26299, 26299, 26299, 26299, 26299, 26299, 26299,
	26299, 26299, 26299, 26299, 26299, 26299, 26299, 1924, 26299, 1122,
	26299, 26299, 26299, 26299, 1889, -1000, -1000, 1577, 534, 1620,
	-1000, 2598, 2598, 2598, 9431, 9431, 560, 2692, 803, -1000,
	26299, -1000, 37, 26299, 14677, -1000, 2638, 1220, -1000, -1000,
	503, 5189, 1774, -1000, 502, 15130, -1000, -1000, -1000, 16010,
	634, 24047, 26299, 970, 70373, 12546, 2212, 2006, -1000, 2633,
	-1000, -1000, 2614, -1000, -1000, -1000, -1000, 2614, 1136, 1133,
	2630, -1000, 2614, 2614, 633, 798, 796, 792, 778, 636,
	26299, 26299, 26299, 26299, 26299, 26299, 26299, 26299, -1000, 23607,
	23154, 22701, 27619, 22248, 26299, 16450, 21795, 21342, 60565, 0,
	2558, 26299, 100, -1000, 69053, -1000, 100, 100, 632, 53,
	70373, 1939, 1939, 30159, 1860, 1591, 1591, 1591, -1000, 629,
	760, 38, 35, 33, -1000, -1000, 23, 18, 863, 9980,
	52253, 1573, 863, 863, 312, 339, 501, 28480, 1906, 52253,
	-1000, -1000, 49364, 628, 14677, 14250, 1259, 52, 311, 1921,
	1917, 1916, -1000, 1353, 47, 937, 1110, -70, -1000, 4988,
	41, -1000, 1176, -1000, -1000, -1000, -1000, 134, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	976, 627, 626, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 625, 1472, 622, 622, 622,
	-1000, -1000, -1000, 352, 621, 337, 619, -1000, -1000, -1000,
	-1000, -1000, -1000, 2143, -77, 49775, 878, 39, 1033, -48,
	-1000, 1095, -1000, 1439, -1000, -1000, -1000, -1000, -1000, -1000,
	1200, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2656, -1000,
	2610, -1000, -1000, 2629, -8, -1000, -1000, 14250, -1000, -62,
	1382, -1000, 41459, 2456, 2446, 2443, 1283, -1000, 1264, 2495,
	44372, 2527, 2526, 98, -1000, 2137, -1000, -1000, 900, 1390,
	1109, 44372, 2160, -1000, 70733, -1000, 2010, 2492, 1246, 1295,
	1246, 1246, 1235, -1000, 44372, 1105, 1497, 39811, -1000, 1102,
	-1000, -66, 2523, 2515, 46, -1000, 2121, 1101, -1000, -1000,
	49364, 14250, 833, -24, 36824, 60565, 304, -1000, 26299, 37,
	26299, 37, -1000, -1000, 2299, -1000, -1000, -1000, 2691, 1448,
	1881, -1000, -1000, -1000, 612, 1825, 2160, 1824, -1000, -1000,
	44789, 2106, 60565, 1932, -31, 49364, -1000, -1000, 1494, -1000,
	2298, 2296, 666, 2688, -1000, 1683, 1823, -1000, -1000, -1000,
	62209, 1107, 2293, 964, 180, 2557, 180, 34341, -1000, 60565,
	-1000, 60565, -1000, -1000, -1000, 2687, -1000, 49364, -1000, -1000,
	49364, -1000, 49364, -1000, 49364, -1000, 49364, 49364, -1000, 60565,
	39811, 39811, 39811, 4410, 40637, 31, 495, -1000, 53494, 60565,
	1006, 41048, 60565, -203, 937, 833, -1000, 833, -1000, 49364,
	2181, -1000, -1000, -1000, -1000, -1000, -1000, 2686, 2684, -1000,
	941, -1000, -1000, 60565, -1000, 60565, -1000, -1000, 60565, -1000,
	60565, -1000, 60565, -1000, -1000, -1000, -1000, -1000, 1318, -1000,
	2178, -1000, 2130, -1000, 63, -1000, -1000, -1000, -1000, 1706,
	49364, 49364, 49364, -1000, 44372, -1000, -1000, 2043, -1000, -1000,
	-1000, -1000, -1000, 70373, -1000, 470, -1000, -1000, 70373, 1363,
	1927, -1000, 1927, -29, -1000, 68414, 1893, 49364, -1000, -1000,
	-1000, -1000, -1000, 899, 1027, 1027, 1055, 1055, 1055, 1055,
	2535, 4694, 3922, 442, 5657, 5657, 5657, 5657, 5657, 5657,
	5657, 5657, 211, 489, 489, 211, 211, 211, 211, 211,
	489, 489, 489, 5657, 5657, 5657, 9431, 70653, 6000, 26299,
	26299, 1099, 1571, 534, 5819, 26299, 3761, 3761, 3761, 3761,
	-1000, 1768, -1000, -1000, -1000, -1000, 2104, 611, 27619, 27619,
	-1000, -1000, -1000, -1000, 15570, 26299, -1000, -1000, -1000, -1000,
	20889, -1000, -1000, 68055, -244, 494, -200, -19, -1000, 26299,
	26299, 26299, 491, -1000, 488, -1000, -1000, 1098, -1000, 1097,
	1094, 1086, -1000, 606, 303, 26299, 60565, -1000, 65549, 750,
	-78, -1000, 14, 1274, -1000, 26299, 300, -1000, 1539, 605,
	603, 486, 9, -1000, 477, 896, 894, 476, 475, 474,
	26299, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 70307, 65441, 65159, 65093, 4043, 9256, 8932, 8, 473,
	-1000, 2101, -200, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	472, -1000, 467, -1000, 70027, -200, 464, 1088, -1000, 27619,
	27619, 27619, -1000, 463, -1000, 68773, -1000, 69747, 20449, 20449,
	20449, 462, 69681, 26299, -200, -10, -1000, -11, -1000, -1000,
	602, -15, 964, 19996, 29326, 14250, -1000, 964, 964, 26299,
	-1000, 26299, 1905, -1000, -1000, -1000, 1900, 1864, 1939, 30159,
	-1000, -1000, -1000, -1000, 52253, 510, 863, -1000, -1000, -1000,
	-1000, -1000, 52253, -1000, 2607, 2025, -1000, -1000, -1000, 60565,
	519, -1000, 52253, 52253, 14250, 863, -1000, 459, 32679, -19,
	296, -1000, -1000, 14250, 2040, 2040, 2040, -1000, -1000, 2096,
	60565, 2580, -1000, 1485, -1000, 70733, -1000, 791, 1044, -1000,
	2627, 600, -1000, 2614, 2614, 60565, 95, 19556, -1000, 1095,
	-1000, -1000, 1356, -1000, 1449, -1000, 1092, -1000, -1000, -1000,
	19556, -1000, 1548, 60565, 60565, 49364, -1000, -1000, 1819, 61798,
	1817, 70733, 60565, -1000, -1000, 596, 595, 1891, 1890, 60565,
	60565, 61387, 60976, 60565, 1509, 26299, 1564, 1387, 37, 37,
	-1000, 37, 594, 1188, 49364, 49364, 49364, 1389, -1000, -1000,
	-1000, -1000, -1000, 49364, -1000, -1000, 2622, -1000, 1246, -1000,
	-1000, -1000, 1246, 2160, 1371, 49364, 39811, 955, 60565, 1499,
	37, 37, -1000, 37, 593, 14250, 1467, -1000, 1978, -1000,
	-1000, -1000, 12121, 70373, -1000, 70373, -1000, 60565, -1000, 982,
	60565, 41048, 927, 2292, -1000, 2160, 2289, 519, -1000, -1000,
	33926, -77, 937, 39811, 49364, -31, 39811, 39811, 39811, 2683,
	592, 2682, -1000, 49364, 2283, 1671, 1815, 2352, 827, 60565,
	1584, -1000, 26299, 1447, -1000, 33096, 995, 60565, 1369, 87,
	-1000, -1000, -1000, 64, 60565, -1000, 2681, -1000, -1000, 173,
	173, 173, -1000, 166, 1668, -1000, -140, -140, -1000, -1000,
	4410, 937, -37, 589, -1000, 849, 848, 31839, 39811, -17,
	-1000, -1000, -1000, -1000, -1000, 49364, 60565, 692, 1970, 60565,
	-38, -1000, 276, -1000, 937, -1000, -1000, 948, -1000, 1152,
	-1000, -1000, -1000, -77, -77, -1000, -1000, -1000, -1000, 1310,
	1302, 60565, -1000, 14250, 60565, 49364, 14250, 49364, -1000, -1000,
	-1000, -1000, -1000, 1363, -1000, 26299, -1000, -1000, -1000, 19116,
	-1000, -1000, -1000, 49364, -230, 26299, 26299, 5475, 5341, 26299,
	27619, 27619, -1000, 26299, 773, -1000, -1000, -1000, -1000, -1000,
	2079, 585, 26299, 70733, 3895, 3377, -1000, 452, 8589, 211,
	-1000, 26299, -1000, 451, 18676, -1000, 69119, -30, -30, -1000,
	2655, 1845, 1470, 1421, 1331, 2619, 11696, -200, -49, -1000,
	-1000, 784, -1000, 2345, -1000, 26299, 69399, 11271, -1000, 34756,
	965, 1584, -1000, -1000, 2614, 893, -1000, -1000, -1000, 893,
	-1000, 67775, 70733, 70733, 26299, 26299, -1000, 26299, 26299, 26299,
	-1000, -1000, 26299, -1000, -1000, 2068, 26299, -1000, 70733, 70733,
	27619, 27619, 27619, 27619, 27619, 27619, 27619, 27619, 27619, 27619,
	27619, 27619, 27619, 27619, 27619, 27619, 27619, 27619, 27619, 1925,
	27619, 2595, 2595, 2595, -1000, 2037, 2068, 26299, 26299, 70733,
	449, 448, 447, -1000, 26299, -200, -1000, -1000, 4410, -1000,
	2005, -1000, -201, -1000, 1906, -1000, -1000, 2005, 2005, -50,
	70373, 30159, 30159, -1000, 584, 26299, 1894, -1000, 747, -1000,
	-57, -1000, 52253, -1000, 746, -241, -1000, 846, -1000, -1000,
	-1000, -1000, 519, -1000, -1000, -1000, 247, 52253, -1000, -61,
	-1000, 2550, 446, 14250, -1000, -1000, -1000, -1000, -1000, -1000,
	37, -77, 1613, 2652, -1000, 2615, 782, 738, 445, 2614,
	438, 429, -77, 60565, -1000, -48, -1000, -1000, -1000, 26299,
	-1000, -1000, 2439, 1083, 1080, -1000, 2271, -1000, 1813, -1000,
	1000, -1000, 1402, -1000, 26299, 26299, 583, 582, 1514, 2680,
	2263, 1668, 2252, 1668, -1000, -1000, 906, -1000, 70373, 580,
	579, -1000, -62, 1362, -1000, -1000, -1000, 26299, 26299, 53079,
	-1000, 2449, 2449, -1000, 1079, -1000, -1000, -1000, 2160, 1078,
	-1000, -1000, 1493, -1000, -1000, -1000, -1000, -1000, 26299, -1000,
	-66, 1069, 937, 2062, -1000, 2679, 2678, 2676, 428, -71,
	-1000, 2548, 1743, 60565, 49364, 49364, 2546, 882, -1000, 2607,
	-1000, -1000, -1000, -1000, 944, -1000, -1000, 2675, -1000, 1005,
	14250, 49364, 2246, 1874, 827, 40226, -1000, 944, 1953, -1000,
	70373, -1000, 1369, 18223, 2445, -76, -1000, -1000, -1000, 964,
	34341, 30159, 26299, 2670, -81, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 52668, 52668, 39811, 39811, 39811, 937, 60565,
	60565, 41048, 2669, 578, 60565, 60565, 577, -1000, 60565, 60565,
	2668, -1000, -1000, 1597, 49364, -1000, -1000, 941, -1000, -1000,
	1504, 1779, 1504, 1621, 67709, -1000, 2448, 14250, 2538, 3761,
	26299, 26299, 246, 418, 385, 3761, 26299, 26299, 70733, 4218,
	-82, 26299, 26299, -1000, 26299, 723, 70373, 2651, 26299, 427,
	424, 423, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	422, -1000, -1000, -1000, -1000, -1000, 70373, 26299, 181, -1000,
	-1000, -1000, 64675, -1000, 26299, 421, 420, -1000, -1000, -1000,
	419, 417, 8048, 275, 67429, 67149, 67083, 70373, 2037, 70373,
	-1000, -1000, 911, 911, 1223, 1223, 1223, 1223, 2595, 830,
	843, 761, 668, 668, 668, 690, 855, 855, 668, 668,
	668, 2053, 1913, 575, 5327, -1000, -1000, 70373, 70373, 401,
	-1000, -1000, -1000, -200, 397, 2001, 2489, -1000, 30159, 2001,
	2001, -1000, -1000, 1864, 60565, 70373, 30159, -235, -1000, 2607,
	-1000, -1000, 2025, -1000, 10417, -1000, 14250, -1000, -1000, 32679,
	-1000, 571, -1000, 101, -1000, -1000, -1000, 722, 2667, 777,
	-1000, 371, -1000, -1000, -77, 70373, 60565, 60565, 60565, 2235,
	-1000, 3463, -1000, 66803, -90, -1000, 68414, 26299, 60565, -1000,
	1503, 1956, 1031, -1000, 60565, -1000, 60565, -1000, -1000, 60565,
	60565, 49364, -94, 70373, -92, -1000, 845, -1000, -1000, 49364,
	49364, 39811, -95, 14250, -1000, 39811, -1000, -1000, -1000, 1960,
	37, -1000, 2666, 570, 2160, 37, -1000, 1588, -1000, 691,
	-1000, -1000, 558, 60565, 1667, 557, 14250, 1876, 827, 40226,
	-1000, 1107, 1369, -1000, -1000, -113, -1000, 591, 37, 1584,
	-1000, -134, 70373, -1000, 831, -1000, -96, -1000, -1000, 370,
	-1000, 2402, 2401, -1000, -1000, 26299, 551, 546, 60565, 2394,
	-1000, -1000, 1839, -1000, -1000, -1000, -1000, 14250, 1345, -1000,
	-1000, -1000, -1000, 2448, 3761, 3761, 26299, 26299, 26299, 3761,
	4218, -102, -1000, 3761, 3761, -200, -1000, -1000, 69119, -1000,
	-1000, -1000, -1000, 70373, 10846, 1510, -1000, 66523, -1000, -1000,
	-1000, -1000, 26299, 26299, -1000, -1000, -1000, -1000, -1000, 27619,
	2052, 543, 70733, -1000, -1000, 954, 26299, 26299, 1906, 954,
	954, -1000, -104, -1000, 863, -1000, -1000, -1000, 2607, 101,
	-1000, 2665, 14250, 775, -1000, 2663, -1000, -1000, -1000, -1000,
	60565, -1000, 60565, -1000, 14250, 60565, 2034, 1802, -1000, -1000,
	1887, 535, 27619, 49364, 802, 2027, 1537, 26299, -1000, -106,
	-111, 1790, -1000, -1000, 1788, 26299, -1000, 70733, 1668, 1668,
	-112, -118, -1000, 1068, 60565, 17783, -1000, -1000, -1000, 1065,
	-1000, -140, 1499, 1985, 938, -1000, 41048, 927, -1000, -1000,
	895, -1000, 26299, -1000, 49364, 26299, 1662, -1000, 827, 40226,
	-1000, 2352, -1000, 2358, 60565, 2426, -1000, 1953, 534, -1000,
	937, 533, 532, -119, 26299, 26299, -123, 531, -141, -1000,
	807, 794, -1000, -1000, 49364, 49364, -1000, 3761, 3761, 3761,
	-1000, 354, -1000, -1000, 1584, 2488, -1000, 66457, 66177, 5574,
	27619, 70733, -124, -1000, 60565, 70373, -200, -1000, -1000, -1000,
	52253, 637, -1000, 2662, -1000, -1000, 1391, -1000, -1000, -1000,
	60565, 1808, -1000, -1000, 26299, 5327, 530, 26299, -1000, -1000,
	1955, 2082, 1960, 529, -1000, -1000, -1000, -1000, 1413, -1000,
	-1000, 70373, 2472, -1000, -1000, 528, 527, 526, 823, 2042,
	-1000, 525, 927, -1000, 1524, -1000, 1984, 353, 2541, 895,
	-1000, 2603, -1000, -125, 1005, -132, 49364, 40226, -1000, 1874,
	1170, -133, 60565, 1369, -1000, -1000, 39811, 39811, 1537, -146,
	-151, -1000, 39811, 1839, -1000, 60565, -1000, 60565, -1000, -1000,
	-1000, 1581, 26299, -1000, -1000, 5574, -152, -1000, -171, -1000,
	2537, -1000, -1000, -1000, -1000, -1000, 2232, 65897, 1854, 60565,
	65831, 2080, -1000, -1000, 1499, 60565, 49364, 1004, 14250, 1504,
	1504, 26299, 17343, 1523, 26299, -1000, 49364, -1000, 2393, 1960,
	37, -1000, -1000, 1537, 524, 1537, 521, -1000, 1876, 1276,
	-1000, 964, -1000, -1000, -153, -157, 1960, 1537, -1000, -167,
	-1000, -175, -176, 340, 27179, 27179, 27179, -200, -1000, 60565,
	520, 2202, -1000, 1617, 1518, 136, 1026, -1000, -1000, 2027,
	-181, 519, -1000, 26299, -1000, -182, -1000, 993, -186, -1000,
	992, -188, -1000, 2035, -1000, -192, 517, -1000, 1499, 938,
	1960, 26299, 1960, 26299, -1000, 34341, -1000, 937, 937, 1499,
	1960, 937, -1000, -1000, -1000, -1000, -1000, 28044, 1614, 1366,
	68335, -1000, -1000, -1000, -1000, 60565, -1000, 1629, 1626, 1316,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1854, 70373,
	-1000, 1504, 1981, -1000, 1504, 2030, -1000, 1521, -1000, 60565,
	927, -1000, 1499, -196, 1499, -202, -204, -1000, -1000, -1000,
	1499, -1000, 2539, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2365, -1000, 1016, 1733, 1733, 1617, -1000, 515, -1000, 514,
	-1000, -210, -1000, 962, 1537, 962, 1537, -1000, -1000, 26739,
	-1000, 2583, -1000, -1000, 1934, -1000, 2027, 26299, 26299, 1647,
	-1000, 2661, 1960, -1000, 1960, -1000, -1000, -1000, -1000, -1000,
	-214, -215, -1000, -1000, -1000, -1000, 1499, 1499, 1499, 1056,
	962, 962, -1000, 512, -1000, -1000, 26299, -221, 1499, -1000,
}
var sqlPgo = [...]int{

	0, 3344, 3343, 3342, 3341, 3340, 3336, 3335, 3329, 3328,
	3327, 3317, 3316, 3315, 3312, 3308, 3307, 3305, 3302, 3301,
	3300, 3299, 3295, 3293, 3292, 3290, 3284, 3283, 3282, 3281,
	3279, 3278, 3276, 3274, 3270, 3261, 3259, 3255, 3251, 3246,
	3245, 3244, 3240, 3239, 3231, 3229, 31, 3228, 3226, 3225,
	3220, 3208, 3206, 3205, 3204, 3201, 3199, 3197, 3196, 3194,
	3192, 3189, 3184, 3178, 37, 3172, 210, 3171, 3170, 3169,
	3168, 3166, 3161, 3160, 3158, 3157, 3153, 207, 3151, 125,
	3150, 3149, 3147, 3146, 3144, 206, 3143, 3141, 3140, 3139,
	3137, 3131, 3129, 3127, 3121, 213, 3118, 3111, 3108, 3107,
	3100, 3099, 3097, 3096, 3095, 3090, 181, 3089, 205, 3088,
	3085, 3082, 3081, 3080, 3079, 3078, 3077, 3074, 3072, 3070,
	3068, 3064, 3060, 3059, 3057, 3055, 3054, 3053, 3052, 3051,
	3050, 3049, 3048, 3046, 199, 136, 3045, 3044, 204, 196,
	3043, 3042, 91, 86, 121, 3040, 88, 162, 186, 6592,
	177, 3039, 3037, 3036, 3035, 3033, 65, 126, 130, 119,
	123, 150, 3031, 3029, 68, 44, 32, 28, 102, 3028,
	3027, 3024, 1865, 90, 3022, 3019, 195, 178, 3018, 1433,
	3016, 122, 104, 108, 43, 84, 3015, 97, 18, 3014,
	151, 51, 3013, 114, 69, 29, 6001, 5606, 3012, 70,
	212, 74, 170, 165, 164, 171, 161, 131, 235, 3011,
	185, 3010, 107, 148, 3008, 3007, 3003, 62, 141, 4,
	3, 135, 20, 81, 11, 3000, 7, 2999, 2992, 2991,
	2990, 27, 128, 2988, 53, 56, 2986, 19, 17, 156,
	2985, 172, 2983, 87, 2982, 188, 145, 149, 14, 167,
	2981, 2980, 2978, 2977, 2976, 92, 21, 93, 2975, 2974,
	112, 184, 2973, 54, 120, 64, 111, 209, 83, 166,
	79, 160, 133, 169, 2970, 2969, 2965, 139, 2964, 2963,
	143, 158, 2962, 2961, 211, 34, 50, 176, 55, 2953,
	2952, 110, 2950, 146, 2949, 2942, 2939, 208, 129, 152,
	16, 67, 89, 26, 9, 175, 113, 80, 71, 2935,
	3452, 1374, 1144, 2929, 103, 77, 38, 85, 109, 194,
	40, 2925, 2924, 1343, 2923, 2919, 2918, 2916, 134, 2912,
	2911, 2910, 98, 73, 58, 2908, 2907, 118, 35, 100,
	198, 76, 163, 200, 182, 2906, 132, 2905, 95, 101,
	2904, 144, 183, 278, 2903, 296, 115, 2902, 157, 2901,
	2900, 2895, 2894, 124, 2892, 2891, 159, 2889, 106, 2888,
	2887, 138, 105, 147, 63, 30, 2883, 57, 189, 2878,
	142, 33, 2876, 268, 66, 0, 6711, 4491, 4857, 2874,
	600, 2872, 154, 96, 2869, 2867, 2861, 2860, 36, 12,
	6, 8, 15, 13, 1065, 239, 2859, 2857, 75, 94,
	116, 2856, 218, 168, 2854, 2852, 2851, 59, 2849, 25,
	2848, 23, 2847, 2845, 24, 1, 2844, 2842, 180, 2841,
	179, 2840, 2838, 2556, 2837, 191, 2836, 99, 2835, 127,
	155, 2833, 2830, 2829, 2828, 187, 2825, 190, 2823, 10,
	22, 5, 2817, 2814, 2813, 153, 2, 2378, 2810, 2808,
	61, 140, 72, 2807, 2806, 137,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 3, 3, 3,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 7, 7, 8, 8, 8, 34, 34,
	10, 10, 9, 9, 9, 11, 11, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 13, 13, 24, 24,
	14, 26, 15, 27, 435, 435, 18, 29, 19, 30,
	12, 437, 437, 437, 437, 22, 20, 20, 31, 31,
	145, 145, 145, 145, 17, 17, 25, 25, 158, 158,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 434, 434, 160, 160, 159, 155, 155, 438, 438,
	161, 161, 161, 163, 163, 35, 35, 93, 93, 93,
	146, 86, 86, 86, 86, 86, 86, 86, 86, 81,
	81, 383, 383, 384, 384, 141, 141, 142, 142, 142,
	142, 143, 143, 144, 144, 144, 49, 37, 37, 37,
	37, 37, 37, 37, 38, 38, 38, 38, 39, 39,
	39, 39, 39, 39, 40, 40, 40, 40, 40, 40,
	47, 47, 47, 47, 135, 135, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 442, 442, 442, 442, 442,
	442, 442, 442, 442, 442, 442, 442, 442, 442, 442,
	442, 442, 442, 442, 442, 442, 443, 443, 444, 444,
	445, 445, 446, 446, 446, 446, 446, 446, 446, 446,
	446, 446, 446, 446, 446, 446, 446, 446, 446, 446,
	446, 446, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 61, 61, 233,
	233, 211, 211, 62, 62, 62, 63, 63, 64, 64,
	51, 51, 430, 430, 246, 246, 350, 350, 66, 66,
	67, 67, 67, 67, 67, 67, 68, 68, 68, 68,
	68, 68, 68, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 75, 75, 75, 76, 76, 76, 73,
	73, 73, 71, 71, 71, 70, 70, 70, 74, 74,
	74, 72, 72, 72, 247, 247, 77, 77, 77, 77,
	77, 77, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 352, 352, 78, 78, 78,
	321, 321, 82, 82, 82, 278, 278, 83, 83, 83,
	83, 83, 84, 84, 84, 84, 94, 94, 94, 94,
	433, 433, 239, 239, 176, 176, 176, 176, 89, 89,
	89, 89, 90, 90, 90, 91, 91, 140, 140, 100,
	100, 100, 100, 100, 99, 99, 99, 99, 99, 99,
	41, 41, 41, 42, 42, 43, 43, 44, 44, 45,
	45, 46, 46, 46, 46, 46, 102, 102, 439, 439,
	104, 101, 101, 101, 103, 103, 103, 103, 105, 106,
	106, 106, 106, 106, 106, 107, 107, 377, 377, 254,
	254, 375, 375, 391, 391, 376, 376, 215, 215, 215,
	215, 215, 216, 216, 216, 382, 382, 382, 382, 382,
	382, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	125, 125, 125, 134, 134, 134, 134, 134, 134, 134,
	127, 127, 127, 117, 117, 109, 109, 109, 109, 113,
	113, 113, 113, 113, 110, 110, 114, 114, 116, 116,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 111,
	111, 111, 111, 120, 120, 120, 120, 284, 284, 284,
	119, 119, 336, 336, 130, 130, 130, 130, 130, 130,
	335, 335, 126, 126, 126, 126, 129, 129, 129, 129,
	268, 268, 123, 123, 123, 124, 124, 124, 128, 128,
	131, 131, 131, 131, 112, 112, 112, 448, 448, 448,
	132, 132, 122, 122, 133, 133, 133, 133, 133, 133,
	133, 133, 121, 121, 121, 436, 436, 115, 431, 431,
	428, 428, 428, 428, 428, 428, 428, 429, 429, 432,
	432, 87, 87, 87, 56, 56, 449, 449, 449, 57,
	57, 450, 450, 450, 447, 447, 447, 447, 447, 447,
	447, 447, 217, 217, 218, 218, 302, 302, 302, 302,
	302, 219, 219, 162, 162, 162, 222, 223, 223, 220,
	220, 221, 221, 221, 225, 225, 224, 227, 227, 226,
	301, 396, 396, 397, 397, 397, 397, 397, 397, 397,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	394, 394, 394, 395, 392, 392, 393, 393, 393, 393,
	451, 451, 451, 451, 451, 451, 452, 452, 300, 300,
	231, 231, 399, 399, 399, 399, 400, 400, 400, 400,
	400, 403, 402, 401, 401, 401, 401, 401, 331, 331,
	331, 60, 60, 60, 265, 265, 264, 264, 266, 266,
	266, 266, 266, 266, 266, 266, 266, 266, 266, 266,
	266, 266, 137, 137, 58, 58, 58, 168, 168, 55,
	55, 55, 454, 454, 59, 59, 59, 455, 455, 65,
	65, 65, 65, 65, 65, 54, 54, 54, 54, 54,
	456, 456, 285, 285, 283, 283, 237, 237, 338, 180,
	180, 156, 156, 156, 21, 23, 23, 16, 16, 32,
	32, 33, 33, 28, 28, 440, 440, 441, 441, 88,
	88, 92, 92, 92, 98, 98, 136, 136, 136, 136,
	136, 136, 136, 36, 36, 36, 36, 48, 48, 48,
	48, 96, 458, 458, 458, 97, 97, 457, 457, 175,
	175, 175, 175, 177, 177, 297, 297, 298, 298, 459,
	459, 299, 299, 299, 299, 170, 169, 171, 171, 53,
	53, 53, 164, 164, 165, 165, 166, 166, 167, 167,
	460, 460, 85, 85, 85, 139, 139, 210, 210, 293,
	293, 293, 232, 232, 185, 185, 296, 296, 294, 294,
	294, 294, 263, 263, 263, 138, 138, 242, 242, 256,
	256, 257, 257, 347, 347, 258, 95, 95, 149, 149,
	147, 147, 147, 147, 147, 147, 461, 461, 148, 148,
	148, 150, 150, 150, 150, 150, 150, 150, 153, 153,
	153, 153, 154, 154, 154, 152, 152, 410, 410, 410,
	412, 412, 413, 409, 409, 411, 411, 453, 453, 267,
	267, 267, 229, 230, 228, 228, 462, 462, 235, 235,
	234, 236, 236, 337, 337, 337, 261, 261, 261, 261,
	288, 288, 286, 286, 287, 287, 289, 289, 290, 290,
	290, 291, 291, 292, 292, 260, 260, 317, 317, 151,
	151, 151, 241, 241, 241, 243, 243, 308, 308, 308,
	308, 308, 308, 309, 309, 307, 307, 307, 307, 339,
	339, 339, 339, 339, 339, 339, 339, 339, 340, 340,
	244, 244, 341, 295, 295, 426, 426, 426, 427, 427,
	334, 334, 342, 342, 342, 342, 342, 342, 332, 332,
	333, 333, 348, 349, 349, 271, 271, 271, 271, 269,
	269, 272, 272, 272, 272, 270, 270, 343, 343, 343,
	343, 262, 262, 344, 344, 344, 345, 303, 304, 304,
	353, 353, 353, 353, 353, 368, 240, 240, 240, 240,
	240, 463, 463, 354, 354, 354, 354, 354, 354, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 358, 358, 358, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 367, 367, 367, 367, 367, 359, 359, 364,
	364, 365, 365, 365, 360, 361, 366, 366, 366, 366,
	464, 464, 370, 370, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 356, 356, 356, 363, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	279, 279, 280, 280, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 312,
	312, 312, 312, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 404, 404,
	404, 404, 404, 404, 404, 404, 407, 407, 408, 408,
	405, 405, 405, 405, 405, 405, 405, 405, 405, 405,
	405, 405, 405, 405, 405, 405, 405, 405, 405, 405,
	405, 406, 406, 406, 406, 406, 406, 406, 406, 406,
	406, 406, 406, 406, 406, 406, 406, 406, 406, 406,
	406, 406, 406, 406, 406, 406, 406, 406, 406, 414,
	414, 415, 415, 417, 417, 418, 418, 419, 420, 420,
	420, 421, 422, 422, 416, 416, 423, 423, 423, 423,
	424, 424, 425, 425, 425, 425, 425, 323, 323, 324,
	324, 330, 330, 330, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	178, 178, 178, 178, 178, 252, 252, 250, 250, 250,
	253, 253, 251, 251, 249, 249, 248, 248, 320, 320,
	318, 318, 322, 322, 273, 273, 369, 369, 369, 369,
	369, 369, 369, 274, 274, 274, 282, 275, 275, 276,
	276, 276, 276, 276, 314, 315, 277, 277, 277, 316,
	316, 325, 329, 329, 328, 327, 327, 326, 326, 305,
	305, 306, 306, 259, 259, 465, 465, 255, 255, 346,
	346, 346, 346, 213, 213, 245, 245, 212, 212, 205,
	205, 206, 206, 206, 206, 238, 238, 371, 371, 371,
	372, 373, 374, 319, 195, 194, 182, 183, 193, 192,
	191, 181, 184, 188, 189, 190, 186, 187, 201, 200,
	199, 197, 198, 351, 207, 207, 208, 208, 208, 209,
	209, 209, 209, 179, 179, 202, 202, 203, 204, 204,
	196, 196, 196, 172, 172, 172, 173, 173, 174, 174,
	381, 381, 379, 379, 379, 380, 380, 380, 380, 378,
	378, 378, 378, 378, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 388, 388, 388, 388, 388, 388, 388, 388,
	388, 388, 388, 388, 388, 388, 388, 388, 388, 388,
	388, 388, 388, 388, 388, 388, 388, 388, 388, 388,
	388, 388, 388, 388, 388, 388, 388, 388, 388, 388,
	388, 388, 388, 388, 388, 388, 388, 388, 386, 386,
	386, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 387, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 390, 390,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 0, 1, 1, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 1, 3, 1, 1, 3, 4, 6,
	1, 3, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 4, 6, 4, 6,
	6, 6, 6, 6, 1, 1, 5, 5, 6, 6,
	4, 4, 4, 4, 3, 4, 4, 7, 4, 7,
	5, 3, 5, 7, 4, 12, 4, 12, 1, 3,
	5, 5, 2, 5, 3, 6, 4, 6, 5, 6,
	6, 4, 8, 3, 4, 3, 6, 4, 3, 1,
	3, 2, 1, 1, 3, 1, 3, 2, 2, 0,
	1, 1, 0, 2, 0, 7, 2, 5, 6, 2,
	1, 6, 4, 9, 7, 12, 12, 12, 2, 7,
	2, 1, 1, 1, 3, 3, 0, 3, 1, 3,
	1, 1, 3, 2, 5, 0, 5, 1, 2, 1,
	2, 1, 2, 2, 3, 3, 3, 3, 3, 5,
	3, 3, 5, 3, 3, 5, 3, 3, 5, 3,
	6, 6, 6, 3, 1, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 3, 3, 4, 3, 4,
	7, 4, 4, 4, 3, 5, 7, 4, 3, 3,
	4, 3, 3, 3, 3, 3, 2, 0, 1, 0,
	1, 0, 3, 3, 3, 3, 3, 6, 4, 4,
	4, 3, 5, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 4, 1, 1, 2, 1, 2, 7, 3, 2,
	0, 1, 3, 3, 1, 0, 1, 2, 2, 1,
	6, 5, 1, 2, 1, 3, 2, 0, 8, 3,
	2, 2, 2, 2, 2, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 4, 6, 3, 3, 5,
	3, 3, 5, 3, 1, 3, 2, 2, 5, 3,
	6, 3, 1, 1, 2, 1, 1, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 2, 1, 2, 1, 3, 5, 7, 2,
	3, 0, 3, 5, 2, 3, 0, 2, 3, 2,
	3, 2, 6, 4, 7, 2, 6, 4, 7, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 2,
	1, 2, 2, 3, 2, 4, 3, 2, 2, 1,
	2, 1, 3, 3, 1, 2, 1, 2, 1, 2,
	1, 1, 3, 5, 4, 6, 4, 3, 0, 1,
	3, 2, 4, 2, 4, 1, 6, 3, 1, 1,
	5, 3, 2, 6, 3, 3, 4, 4, 3, 1,
	3, 2, 1, 3, 1, 2, 1, 1, 2, 2,
	3, 1, 1, 1, 1, 1, 3, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	2, 3, 3, 1, 1, 1, 1, 1, 2, 2,
	5, 7, 3, 3, 3, 3, 4, 4, 3, 4,
	4, 3, 4, 4, 5, 3, 3, 3, 4, 3,
	4, 3, 5, 4, 5, 3, 4, 5, 3, 4,
	3, 4, 3, 3, 4, 4, 5, 0, 1, 1,
	3, 4, 1, 0, 5, 4, 6, 4, 6, 4,
	1, 0, 3, 4, 4, 5, 7, 5, 3, 3,
	2, 0, 4, 2, 3, 4, 2, 3, 3, 3,
	4, 3, 3, 3, 3, 4, 3, 1, 1, 1,
	2, 3, 2, 3, 6, 6, 7, 9, 7, 9,
	3, 4, 5, 5, 3, 1, 1, 5, 2, 0,
	1, 1, 1, 1, 3, 2, 2, 2, 1, 2,
	0, 3, 3, 2, 10, 13, 0, 2, 3, 9,
	12, 0, 2, 3, 1, 1, 2, 2, 2, 2,
	1, 0, 1, 0, 1, 3, 1, 1, 1, 1,
	3, 8, 0, 1, 1, 0, 2, 1, 0, 1,
	0, 9, 9, 3, 1, 3, 7, 1, 3, 11,
	3, 2, 0, 3, 1, 2, 2, 3, 2, 6,
	2, 1, 1, 2, 4, 2, 5, 5, 5, 2,
	8, 9, 6, 5, 3, 1, 5, 8, 5, 11,
	0, 1, 3, 3, 2, 2, 1, 1, 4, 0,
	3, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 2, 2, 1, 2,
	1, 5, 8, 4, 1, 0, 1, 2, 2, 1,
	2, 3, 2, 2, 3, 2, 2, 2, 2, 2,
	3, 1, 4, 2, 4, 7, 3, 3, 0, 3,
	6, 3, 1, 1, 8, 7, 5, 0, 1, 6,
	7, 6, 5, 3, 4, 14, 17, 14, 17, 4,
	0, 2, 2, 0, 1, 0, 1, 3, 2, 2,
	0, 1, 1, 0, 6, 6, 8, 6, 8, 6,
	8, 6, 8, 6, 8, 1, 0, 2, 0, 2,
	2, 3, 3, 2, 2, 2, 1, 2, 1, 2,
	1, 2, 1, 3, 2, 3, 2, 2, 2, 2,
	2, 2, 1, 1, 0, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 0, 1, 3, 1,
	0, 1, 1, 1, 1, 2, 3, 2, 2, 8,
	11, 3, 3, 0, 3, 0, 3, 0, 3, 0,
	1, 0, 6, 7, 3, 6, 3, 1, 3, 1,
	4, 2, 1, 3, 1, 3, 8, 5, 3, 4,
	3, 0, 2, 2, 0, 10, 3, 2, 0, 1,
	3, 1, 1, 3, 3, 5, 1, 1, 3, 3,
	2, 3, 4, 3, 4, 5, 0, 2, 2, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 8, 8,
	8, 2, 4, 4, 4, 2, 2, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 5, 1, 0, 1, 0, 1, 0,
	3, 1, 3, 2, 4, 5, 2, 2, 1, 1,
	1, 0, 2, 5, 2, 3, 1, 1, 1, 3,
	0, 1, 1, 1, 1, 3, 0, 2, 0, 4,
	2, 5, 3, 2, 0, 1, 3, 3, 5, 1,
	1, 1, 1, 1, 3, 2, 4, 4, 0, 8,
	4, 3, 4, 1, 5, 3, 4, 5, 1, 5,
	1, 3, 2, 0, 3, 0, 2, 3, 1, 3,
	2, 0, 3, 5, 6, 4, 6, 4, 3, 2,
	1, 0, 5, 1, 0, 2, 2, 2, 1, 1,
	0, 1, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 2, 1, 0,
	2, 5, 7, 2, 1, 1, 2, 4, 3, 5,
	0, 1, 1, 1, 1, 1, 1, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 5,
	4, 1, 2, 1, 4, 1, 1, 2, 1, 1,
	1, 1, 1, 0, 1, 2, 5, 1, 4, 2,
	5, 1, 4, 3, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	1, 0, 1, 4, 1, 3, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 5,
	4, 6, 3, 5, 4, 6, 4, 6, 5, 7,
	3, 3, 3, 3, 3, 4, 3, 2, 4, 2,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 4, 1, 3,
	1, 3, 3, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 5, 6, 6, 7, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 6, 2,
	1, 5, 1, 1, 1, 1, 2, 1, 5, 5,
	3, 1, 1, 1, 2, 2, 2, 4, 3, 5,
	6, 8, 6, 6, 4, 3, 4, 1, 1, 1,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	6, 6, 8, 8, 6, 4, 6, 6, 6, 4,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 4, 3, 4, 3, 4, 3, 4, 4, 3,
	6, 5, 5, 5, 4, 4, 3, 4, 3, 5,
	0, 5, 0, 2, 0, 1, 3, 3, 2, 2,
	0, 6, 1, 0, 3, 0, 2, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 1, 1,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 2, 3, 1, 2, 3,
	2, 3, 2, 3, 1, 0, 1, 3, 1, 3,
	3, 3, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 1, 2, 3, 0, 3,
	3, 2, 2, 1, 2, 2, 3, 2, 1, 1,
	1, 5, 1, 2, 4, 2, 0, 1, 0, 3,
	5, 1, 0, 1, 2, 1, 0, 1, 3, 3,
	2, 1, 1, 1, 3, 1, 3, 3, 1, 1,
	1, 1, 5, 3, 1, 1, 3, 1, 2, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 7, 1,
	7, 5, 3, 1, 1, 1, 1, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 454, -79, -49, -47, -82, -83, -67,
	-81, -84, -78, -94, -98, -88, -100, -136, -3, -35,
	-37, -50, -66, -68, -77, -86, -85, -87, -89, -93,
	-92, -41, -95, -99, -108, -137, -138, -139, 81, 68,
	121, 103, 108, 127, 153, 283, 312, 322, 306, -103,
	-104, 341, -36, -48, -97, -96, -4, -10, 27, 39,
	-38, -39, -40, 53, -58, -55, -52, -61, -442, 83,
	-411, -69, -72, -74, -446, 113, 126, 170, 275, -90,
	-91, 308, 310, -43, -42, 122, -147, -149, -101, -102,
	-140, -109, -110, -111, -112, -113, -114, -115, -116, -117,
	-118, -119, -120, -121, -122, -123, -124, -125, -126, -127,
	-128, -129, -130, -131, -132, -133, 344, 391, 40, 353,
	69, 116, 316, 21, -5, -6, -7, -8, -9, -11,
	-23, -51, -53, -54, -56, -57, -65, -59, -60, -410,
	-70, -71, -73, -75, -76, 307, -150, -148, 451, 404,
	-13, -18, -19, -14, -15, -17, -20, -16, -24, -29,
	-30, -26, -27, -25, -28, -31, -32, -33, -34, -21,
	-22, -12, 422, 430, -153, -151, -152, -154, 329, 412,
	367, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	454, -197, -202, -203, -204, -196, -172, -387, -390, 4,
	-385, -388, 132, 178, 245, 21, 22, 23, 24, 25,
	27, 37, 38, 39, 40, 43, 45, 46, 49, 50,
	51, 52, 53, 54, 57, 62, 67, 68, 69, 70,
	71, 76, 73, 74, 75, 78, 80, 81, 82, 85,
	86, 94, 95, 96, 97, 98, 99, 103, 106, 105,
	108, 111, 112, 113, 115, 117, 118, 121, 122, 125,
	123, 373, 375, 124, 126, 127, 128, 138, 139, 140,
	142, 143, 145, 147, 151, 152, 154, 158, 160, 161,
	162, 163, 169, 170, 172, 173, 179, 174, 180, 184,
	187, 186, 188, 189, 190, 181, 195, 199, 200, 201,
	203, 204, 207, 208, 209, 210, 213, 212, 215, 218,
	219, 222, 223, 226, 227, 229, 230, 233, 231, 234,
	232, 235, 238, 236, 237, 240, 241, 243, 242, 167,
	250, 251, 253, 254, 255, 270, 258, 259, 260, 263,
	266, 269, 271, 272, 273, 274, 275, 276, 278, 279,
	281, 283, 285, 287, 288, 289, 290, 291, 292, 294,
	295, 297, 298, 299, 300, 301, 306, 303, 304, 305,
	307, 308, 309, 310, 312, 314, 315, 316, 317, 319,
	321, 342, 343, 355, 322, 323, 324, 325, 326, 327,
	328, 332, 336, 333, 334, 335, 337, 330, 331, 338,
	339, 341, 344, 346, 348, 349, 352, 353, 354, 356,
	359, 360, 361, 357, 358, 351, 366, 364, 365, 368,
	369, 370, 371, 372, 374, 376, 385, 386, 388, 391,
	392, 393, 383, 395, 396, 399, 400, 401, 402, 403,
	408, 404, 406, 409, 410, 411, 417, 416, 423, 424,
	426, 427, 428, 32, 41, 42, 44, 47, 58, 59,
	60, 63, 100, 101, 120, 129, 130, 141, 155, 157,
	164, 165, 166, 185, 191, 193, 197, 216, 248, 249,
	264, 268, 280, 282, 293, 318, 347, 362, 378, 379,
	380, 381, 387, 389, 412, 413, 414, 418, 425, 256,
	-190, 2, -172, -172, 283, 26, 2, 26, 279, 331,
	369, 371, 2, 194, 2, -433, -239, 2, 26, -176,
	-172, 83, 153, 329, -190, 2, -433, -239, 24, 2,
	-172, 2, -177, 2, 322, -172, 454, 78, 223, 62,
	318, 338, -106, 386, -105, 378, 324, -107, -377, 2,
	238, -172, 454, 454, 454, 454, 2, 367, 273, 416,
	330, 405, 96, 290, 178, -428, 2, 4, -388, -385,
	-206, -205, 367, 96, -204, -196, 444, -203, 454, 454,
	454, 2, 200, 201, 289, 288, 338, 339, 454, 454,
	454, 2, 25, 56, 77, 80, 102, 128, 148, 151,
	261, -443, 230, 270, 287, 324, 337, 366, 376, 388,
	-447, 354, 57, 405, -454, 393, 111, -283, 96, 371,
	369, 223, 152, 400, 314, 156, 398, 106, 184, 403,
	402, 454, 454, 25, 56, 65, 80, 111, 128, 148,
	151, -445, 270, 287, 321, 324, 337, 366, 376, 393,
	388, 2, 416, 330, 367, 178, 96, 405, 314, 286,
	-79, 2, 451, 29, 341, -146, 367, 194, 2, -172,
	200, 201, 2, 454, 454, -428, 2, 200, 201, 2,
	57, 326, 454, 454, 454, 454, 454, 454, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 2, -134,
	338, 354, 162, 39, 62, 26, 67, 97, 154, 178,
	179, 208, 77, 78, -284, -336, -335, 368, 325, 331,
	364, 386, 83, 406, 315, 428, -436, 123, 4, 96,
	238, 340, 378, 223, 38, 71, 372, 373, -453, 2,
	367, -457, 2, 386, 386, 2, -457, 2, -457, 2,
	-175, 2, 386, 382, -458, 386, 425, 454, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, -148,
	-150, -149, 454, 454, 454, 454, 454, -134, 338, 2,
	62, 26, -461, 146, -234, -235, 397, 192, 119, 262,
	-147, -149, 2, -410, -375, 2, -310, -391, -312, 442,
	443, 437, 244, 429, -323, 102, 398, 256, -390, -313,
	-325, 120, 318, -253, 8, 9, 5, 6, 7, -179,
	-355, -319, -363, 390, 131, 247, -209, 456, 10, 451,
	-407, -149, -324, 33, 157, 55, -379, -208, -357, -365,
	-361, -362, -463, 45, 51, 50, 376, 237, 332, 333,
	348, 334, 335, 43, 408, 174, 253, 255, 186, 4,
	193, -207, -196, -404, -405, -385, -386, 185, 191, 187,
	347, 188, 189, 190, 42, 293, 142, 143, 141, 112,
	101, 100, 249, 47, 46, 44, 413, -366, 98, 378,
	379, 380, 381, 203, 204, -172, -387, 65, 88, 89,
	87, 92, 91, 93, 90, 340, 405, 56, 32, 164,
	165, 197, 248, 166, 63, -406, 358, 84, 150, 183,
	168, 196, 198, 202, 217, 220, 239, 246, 265, 267,
	313, 345, -464, 414, 129, 130, 268, 280, 362, 387,
	389, 155, 216, 58, 59, -412, 294, -413, -190, -412,
	454, 454, 455, 454, -228, -229, -230, 2, 26, 109,
	451, 2, -339, 2, 449, -343, -149, 211, -342, 451,
	-340, -197, 257, -408, 319, -404, -405, -179, -196, -208,
	4, -231, 451, 453, 96, 367, 66, 2, -278, 451,
	-172, 26, -146, 256, 382, 455, -321, 451, 256, 149,
	259, -172, 2, 2, 342, 2, 451, -106, 60, 386,
	-298, 2, -299, -169, -170, -171, -348, 199, 285, 292,
	431, 428, -375, -439, 149, 434, 382, -375, -254, 453,
	2, -343, 164, -197, 2, -194, -378, 4, -385, -388,
	-386, -389, 65, -387, 26, 28, 29, 30, 31, 33,
	34, 35, 36, 48, 55, 56, 61, 64, 66, 77,
	83, 87, 88, 90, 89, 91, 92, 93, 102, 104,
	107, 109, 110, 114, 116, 119, 131, 133, 146, 148,
	149, 153, 156, 159, 171, 182, 192, 194, 211, 214,
	221, 224, 225, 244, 247, 252, 256, 257, 261, 262,
	277, 284, 296, 311, 329, 340, 350, 363, 367, 377,
	382, 384, 390, 397, 398, 405, 407, 415, 419, 420,
	421, 422, -390, 2, -343, 164, 2, -199, 164, -343,
	-202, 2, -383, 164, -381, 10, -380, 5, 4, -385,
	-388, -386, 2, -181, -172, 2, -193, -378, 2, -212,
	164, -197, -198, -202, 382, 455, -245, -205, -206, -238,
	-172, 453, -310, 2, -95, 2, -310, 164, 2, -95,
	164, 2, -310, 164, 2, -95, 164, 2, 2, 2,
	388, 2, 80, 164, -172, 367, 95, 2, 305, -444,
	321, 392, 416, 2, 2, 2, 2, 2, 2, 2,
	367, 330, -455, 294, -186, 2, -172, 146, -383, 164,
	2, -383, 164, 2, -200, -202, -200, 178, 195, -181,
	164, 2, 371, 369, 371, 369, 149, 2, 194, 2,
	194, 2, -344, 2, -345, -197, 2, 2, 2, 2,
	2, 164, -172, 367, 95, 2, 210, 2, 2, 2,
	2, 2, 2, 2, 2, 2, -247, 164, 2, -197,
	-247, 164, 2, -247, 164, 2, -213, 164, 2, -212,
	-181, 164, 2, -384, 164, 2, -383, -384, 164, 2,
	-352, 2, -351, -380, 412, -79, 451, 338, 451, -383,
	-197, -197, -310, -95, 149, -310, -95, 146, 2, 96,
	367, -134, 2, 146, 407, 2, 8, 2, -383, 291,
	138, 2, 342, 2, 62, -284, 428, 149, 2, -268,
	2, 422, -431, 2, 256, 149, 2, 149, 2, 149,
	2, 149, 2, 149, 2, 288, 339, 201, 385, 209,
	124, 149, -268, 2, 149, 2, 149, 2, 5, 2,
	199, 285, 355, 2, -197, -448, 2, 367, 416, 330,
	2, 2, 73, 74, 149, 2, 149, 428, 2, -262,
	-343, -297, -298, -297, 382, -177, -461, -234, -235, -134,
	342, 2, 2, -461, -261, -286, -287, 221, 133, 252,
	-267, 26, 109, -267, -267, 49, 452, 452, 11, 12,
	64, 37, 442, 443, 444, 445, 144, 446, 447, 440,
	441, 439, 432, 433, 436, 205, 206, 79, 435, 434,
	72, 228, 320, 134, 135, 136, 137, 302, 175, 176,
	177, 14, 15, 16, 30, 261, 220, 429, 168, 345,
	437, 17, 18, 19, 196, 198, 246, 41, 171, -178,
	-214, -310, -310, -310, -310, -310, 267, 451, -259, -305,
	449, -149, 451, 451, 451, 5, 451, 5, -374, 8,
	-149, -310, -323, 452, -251, 451, -149, -323, -318, 451,
	318, 449, 451, -326, -310, 453, -414, 423, -359, 451,
	282, -358, 451, -358, -358, 417, -356, 451, 430, 424,
	451, -356, 451, 451, 146, 451, 451, 451, 451, 451,
	451, 451, 451, 451, 451, 451, 451, 451, 417, 451,
	451, 451, 451, 451, 451, 451, 451, 451, 455, -412,
	-231, 451, -255, -346, -310, 444, -255, -255, 256, -248,
	-310, 84, -271, 202, 239, 150, 217, 313, 183, -374,
	-80, -66, -77, -85, -95, -108, -138, -139, -307, 456,
	-334, 430, -149, -340, -196, -149, -342, 451, -339, -334,
	444, -197, 451, 149, 451, 453, 149, -238, -378, -181,
	-197, -207, -208, 108, -248, -383, -428, -238, -176, 34,
	-320, -353, -354, -367, -355, -364, -360, -363, 298, 299,
	297, 301, 300, 45, 51, 50, 376, 237, 332, 333,
	348, 334, 335, 43, 408, 174, 253, 255, 186, 4,
	44, 413, -366, 193, 185, 191, 187, 347, 188, 189,
	190, 42, 293, 142, 143, 141, 112, 101, 100, 249,
	47, 46, 98, 378, 379, 380, 381, 203, 204, 414,
	358, 58, 59, -428, -238, 146, -377, -248, 34, -298,
	2, -459, 455, 219, -216, 227, 243, 161, 257, 426,
	250, -382, 5, 4, -319, -331, 102, 223, -363, 9,
	443, -371, 8, 442, -376, -375, 86, 453, -378, -158,
	303, -157, 23, 27, 113, 410, 125, -221, 180, 273,
	120, 351, 401, -435, -437, 323, 374, 375, 75, 250,
	303, 120, -264, -266, 34, 94, 241, 269, 52, 172,
	232, 233, 353, 418, 120, 303, 422, 120, -437, 303,
	-437, -160, 351, 401, -435, -437, 323, 303, -159, -221,
	120, 456, -383, -245, 455, 455, -378, 444, 120, 120,
	120, 120, 2, 2, 244, 2, 2, 2, 151, -447,
	-445, 2, 2, 2, -197, 164, -199, 164, 2, -202,
	416, -233, 256, -430, -246, 367, -197, -168, -409, 422,
	244, 244, 34, 451, 2, -183, 164, 2, -173, -172,
	178, -409, 244, -344, -210, -197, -210, 341, -190, 34,
	-307, 120, 2, 2, 2, -172, -161, 455, 54, 309,
	120, -161, 120, -161, 120, -161, 455, 120, -161, 120,
	455, 120, 120, 452, 455, -352, -383, -144, 422, 149,
	83, 451, 451, -384, -430, -181, 2, -197, 2, 367,
	203, -383, -383, -377, 26, 343, 2, 288, 339, 74,
	-197, 68, -432, 146, -429, 314, -428, -197, 96, -197,
	96, -197, 96, -197, -197, 2, 2, 2, 146, 2,
	385, 2, 385, 2, -172, -172, -172, 219, -197, 146,
	367, 178, 367, -161, 455, -177, -461, -261, -377, -461,
	-287, -286, -289, -310, 26, -292, 140, 240, -310, -312,
	-148, -148, -148, -236, -337, -310, 284, 178, -368, -353,
	-353, -195, -378, 378, -310, -310, -310, -310, -310, -310,
	-310, -310, -310, -310, -310, -310, -310, -310, -310, -310,
	-310, -310, -310, -310, -310, -310, -310, -310, -310, -310,
	-310, -310, -310, -310, -310, -310, -310, -310, -310, 220,
	168, 345, 41, 171, -310, 382, -310, -310, -310, -310,
	236, 244, 247, 390, 131, 399, 109, 250, -465, 363,
	36, -316, -149, -252, 451, -330, 31, 350, 26, -323,
	451, 2, -305, -310, -306, -249, -248, -248, 452, 415,
	26, 109, 444, 2, 8, -279, -281, 427, 235, 99,
	163, 234, -280, 328, 452, 455, 34, 452, -310, -249,
	-322, -318, -248, -329, -328, 419, -378, 444, -415, 139,
	156, 8, -372, 8, -372, 378, 378, 8, -372, -372,
	451, 452, 2, 452, 2, 452, 2, 452, 2, 452,
	2, -310, -310, -310, -310, -310, -310, -310, -248, -273,
	2, -369, -248, 4, 427, 235, 99, 163, 234, 328,
	-273, 2, -274, 2, -310, -248, -275, -311, -312, 442,
	443, 437, -323, -276, 2, -310, -249, -310, 48, 214,
	384, -277, -310, 149, -248, -248, 2, -248, 2, -413,
	34, -248, -241, 455, 149, 34, 4, -241, -241, 451,
	452, 455, -272, 160, 231, 226, -272, -339, -271, 202,
	-269, 265, -269, -269, -426, 451, 450, 454, 454, 454,
	454, 454, -334, -182, 449, 457, -378, -333, -332, 34,
	-190, 263, -334, -334, 453, 452, -333, -197, 451, -248,
	-378, 356, 452, 453, 196, 196, 196, 319, 452, -144,
	382, 422, -79, 258, 452, 455, -240, 33, 449, -281,
	451, -370, 417, 451, 451, 149, -239, -439, 452, 386,
	-299, -215, 292, 349, 304, 336, 365, 9, 8, 8,
	455, -378, 455, -440, 77, 382, 66, -301, 164, 66,
	-392, -184, 77, -393, -172, 61, 398, 284, 148, -440,
	77, -440, 77, 77, 341, 354, 49, -343, 37, 37,
	-95, 215, 149, 428, 367, 178, 382, -343, -266, -353,
	94, 232, 233, 49, -373, -371, 443, -373, 49, -373,
	-373, -373, 422, -199, -343, 382, 274, -383, 382, 455,
	37, 37, -95, 215, 149, 382, -212, -182, -349, -348,
	-205, -172, 453, -310, -95, -310, -95, 120, 2, -455,
	210, 451, -231, 244, -265, -264, 244, -201, 2, -197,
	149, -238, -350, 194, 455, -246, 274, 120, 120, 451,
	117, 290, 2, 256, 244, -183, 164, -164, 370, 120,
	-304, -303, 420, -293, -95, 451, 102, 34, -293, -256,
	-257, -347, -258, -184, 451, -190, -172, 2, -197, -247,
	-247, -247, -212, -213, -181, -383, -384, -384, -79, -351,
	452, 452, -143, 260, -142, -172, 5, -146, 407, -218,
	-302, -301, -394, -395, -392, 220, 178, 398, 195, 132,
	-232, -185, -184, -144, -348, -144, -349, -349, -197, 146,
	2, 2, -268, -238, -238, -181, -181, -181, 338, 146,
	146, 453, -268, 290, 96, 367, 273, 178, -197, -212,
	-197, -343, -461, -290, -371, 451, -291, 318, 319, 455,
	-156, 35, 107, 207, -197, 428, 118, -310, -310, 382,
	-465, 363, -316, 118, -310, 236, 247, 390, 131, 399,
	109, 250, 149, 451, -311, -311, 452, -250, -310, -310,
	450, 459, 452, -462, 455, -234, -310, -248, -248, 452,
	452, 382, 382, 382, 382, 451, 453, -248, -238, 450,
	450, 455, 452, -327, -328, 114, -310, 453, -420, 266,
	451, 451, 452, 452, 455, 452, 428, 428, 452, 452,
	452, -310, 34, 455, 455, 455, 452, 455, 455, 455,
	452, 452, 149, 452, 452, -282, 277, 452, 11, 12,
	442, 443, 444, 445, 144, 446, 447, 440, 441, 439,
	432, 433, 434, 72, 228, 320, 14, 15, 16, 196,
	171, -311, -311, -311, 452, -314, -315, 149, 146, 34,
	-277, -277, -277, 452, 149, -248, 452, 452, 451, 452,
	-304, -346, -243, 2, -339, -192, -378, -304, -304, -248,
	-310, 202, 202, -270, 407, 256, -272, -339, -332, 452,
	-427, -374, -334, -333, -374, -309, -308, 147, 35, 107,
	242, 167, -190, -231, -333, -333, -378, -334, 452, -244,
	-341, -408, -462, 453, -378, -135, 5, 247, -135, -135,
	149, -238, 24, 278, -353, 449, 450, 8, 8, 451,
	-372, -372, -238, 149, -375, -298, 396, 70, 292, 378,
	-375, -157, 303, -184, -184, -197, 244, -301, 164, -163,
	244, -353, -191, -172, 451, 451, 207, 207, -184, -191,
	164, -184, 164, -191, -191, -434, 292, 251, -310, 222,
	290, 245, -158, 303, -95, -95, -95, 451, -439, 407,
	108, -197, -212, -201, 303, -207, -373, -373, -264, 303,
	-199, -383, 422, -181, -159, -95, -95, -95, 451, -182,
	-160, 303, -141, 173, 444, -172, 416, -172, -217, -218,
	-172, -449, 424, 422, 120, 120, -231, -211, -197, 449,
	-144, -383, -197, -383, -383, -383, 2, 451, 2, -197,
	120, 256, 244, -165, 115, -460, 434, -181, -235, -234,
	-310, -263, -296, 311, 256, -232, 412, -190, -263, -242,
	455, 149, 434, 453, -232, 2, -161, -161, -161, -161,
	-161, -79, -144, 455, 451, 434, 434, 451, -383, -383,
	452, 455, -197, -183, 178, 178, -189, -173, 452, 455,
	453, -144, -44, 422, 367, 338, 338, -172, -193, -181,
	-197, -194, -212, -291, -310, -337, -197, 456, -310, -310,
	118, 118, -310, -311, -311, -310, 118, 149, 451, -310,
	-320, 30, 30, 452, 455, -306, -310, 452, 415, -462,
	-462, -462, 5, 235, 163, 234, -280, 234, -280, -280,
	8, 444, -378, 452, -318, 116, -310, 377, -378, 444,
	-421, -187, 451, -172, 420, -234, -372, -356, -356, 452,
	-368, -353, -310, -310, -310, -310, -310, -310, -314, -310,
	-368, -353, -311, -311, -311, -311, -311, -311, -311, -311,
	-311, -311, -311, -311, -311, -311, -311, -311, -311, -311,
	-311, 109, 244, 250, -311, -315, -314, -310, -310, -353,
	452, 452, 452, -248, -79, -260, 156, -349, 455, -260,
	-260, 452, -339, -339, 451, -310, 202, 450, 452, 455,
	-333, 450, 455, 458, 434, -231, 453, -332, 452, 455,
	-295, 34, 452, -378, -95, 259, 5, 8, 449, 450,
	452, -372, 452, 452, -238, -310, 382, 382, 120, 244,
	409, -396, -393, -310, -237, -338, -310, 451, 451, -155,
	113, 341, -441, 2, 120, -161, 120, -161, 426, 451,
	451, 382, -248, -310, -145, 102, -377, -437, -437, 382,
	382, 274, -248, 382, -144, 149, 2, 2, 2, 452,
	34, 254, -172, -197, -199, 34, -62, 422, -348, -374,
	-168, 2, -285, 407, -182, -197, 120, -166, 213, -460,
	-381, -409, -288, -286, -263, -255, 245, 76, 452, -304,
	-257, -243, -310, 2, 452, -142, -143, -383, -383, -383,
	-144, -146, -146, -302, 2, 451, -183, -173, 451, -146,
	-185, 2, 260, -197, -268, -223, -222, 273, 250, -223,
	257, 452, -156, -182, -310, -310, 118, 30, 30, -310,
	-310, -320, 452, -310, -310, -248, 450, 5, -310, 452,
	452, 452, 452, -310, 453, -422, -172, -310, 452, 452,
	452, 452, 455, 455, 452, 452, 452, 452, -315, 149,
	109, 250, 451, 452, 452, -317, 159, 49, -339, -317,
	-317, -270, -238, -339, -307, -374, -308, -182, 449, -378,
	-341, 451, 453, 450, 2, 449, 452, -184, -184, -301,
	120, -397, 77, -398, 64, 132, 83, 244, 247, 398,
	284, 61, 102, 296, 34, 452, 452, 455, -156, -237,
	-238, 244, 360, 102, 244, 102, 95, 393, -184, -191,
	-238, -238, -197, 452, 455, 434, -201, -199, -383, 452,
	-182, -384, -219, 181, -95, 2, 451, -231, -265, -95,
	260, 450, 451, -172, 256, 451, -182, -167, 212, -460,
	-381, -164, -263, -294, 451, 256, -95, -235, 434, 452,
	452, 95, 95, -237, 451, 451, -238, 95, -45, -46,
	178, 77, 276, -194, 367, 178, -156, -310, -310, -310,
	452, -462, -378, 444, -416, 273, 452, -310, -310, -311,
	149, 451, -320, -417, 421, -310, -248, -417, -417, 452,
	-334, -374, 2, 449, 2, -301, -191, -195, -188, -172,
	132, 164, 247, 207, 451, -311, -197, 451, 2, -451,
	104, 182, -300, -452, 82, 361, -338, 452, 452, 247,
	247, -310, -353, -161, -161, 452, 452, 382, -377, 81,
	-375, 382, -220, -221, 171, -450, 422, -217, -449, -63,
	-64, 383, -348, -237, -197, -237, 256, -460, -381, -165,
	110, -238, 77, -288, -316, -144, 451, 451, 452, -237,
	-237, 452, 451, 455, 26, 451, 26, 451, -197, -212,
	452, -235, 49, 452, 452, -311, -320, 452, -418, -419,
	-187, -333, 450, 2, -398, -188, 244, -310, -174, 451,
	-310, 182, 105, 169, -219, 451, 296, -180, 64, 451,
	451, 451, 434, 149, 451, -449, 271, 95, 241, 452,
	34, -64, 9, 452, -285, 452, -197, -381, -166, 402,
	245, 452, -191, -263, -384, -384, -300, 452, 452, -384,
	-46, -238, -238, -423, 290, 319, 158, -248, 452, 455,
	34, 120, 452, -399, 229, -172, 452, 105, 169, -220,
	-238, -197, -438, 407, -195, -225, -224, -222, -227, -226,
	-222, -248, -375, 81, 271, -248, -197, 95, -219, -95,
	-300, 451, -300, 451, -167, 341, -303, 452, 452, -219,
	-300, 452, 452, 452, 452, -424, -425, 41, 395, 86,
	-310, -424, -424, -419, -421, 132, -400, -403, -402, 256,
	346, 150, 272, 452, 360, 418, -451, 452, -231, -310,
	452, 455, 412, 452, 455, 412, 452, 149, 452, 451,
	-220, -450, -219, -237, -219, -237, -256, -144, -144, -220,
	-219, -144, -425, 281, 145, 318, 281, 145, -188, -402,
	256, -403, 256, 402, 106, -399, -224, 171, -226, 149,
	271, -238, -449, -220, 452, -220, 452, -304, -220, 30,
	-401, 241, 309, 54, 341, -401, -400, 451, 451, 452,
	-456, 420, -300, -456, -300, -425, 22, 247, 102, -451,
	-248, -248, -162, 54, 309, 2, -219, -219, 452, 452,
	-220, -220, -220, 382, -456, -456, 451, -248, 452, -220,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 24, 25, 352, 353,
	355, 356, 357, 359, 360, 362, 364, 366, 368, 369,
	371, 373, 374, 375, 376, 377, 379, 381, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 439,
	441, 0, 876, 878, 880, 882, 27, 28, 0, 0,
	177, 179, 181, 0, 206, 208, 210, 211, 213, -2,
	0, 306, 307, 309, 311, -2, -2, 0, 0, 428,
	430, 0, 0, 450, 451, 0, 966, -2, 444, 446,
	448, 511, 513, 515, 517, 519, 521, 523, 524, 526,
	528, 530, 532, 534, 536, 538, 540, 542, 544, 546,
	548, 550, 552, 554, 556, 558, -2, -2, -2, 0,
	-2, -2, -2, 894, 31, 33, 35, 37, 39, 41,
	60, 262, 263, 265, 267, 269, 272, 273, 275, 1005,
	313, 315, 317, 319, 321, 0, -2, 1019, 0, 0,
	43, 44, 45, 46, 47, 48, 49, 50, 67, 68,
	69, 70, 71, 72, 73, 74, 53, 55, 56, 62,
	63, 65, 0, 0, 981, 983, 985, 987, -2, 0,
	0, 7, 9, 11, 13, 15, 17, 19, 21, 23,
	354, 358, 361, 363, 365, 367, 370, 372, 378, 380,
	382, 771, 1611, 1625, 1626, 1627, 1630, 1631, 1632, 1633,
	1634, 1635, 1965, 2045, 2046, 1654, 1655, 1656, 1657, 1658,
	1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668,
	1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678,
	1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688,
	1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698,
	1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708,
	1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718,
	1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728,
	1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738,
	1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748,
	1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758,
	1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768,
	1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778,
	1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788,
	1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798,
	1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808,
	1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818,
	1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828,
	1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838,
	1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848,
	1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858,
	1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868,
	1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878,
	1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888,
	1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898,
	1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908,
	1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918,
	1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928,
	1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938,
	1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 0,
	406, 404, 1605, 407, 1800, 409, 411, 300, 301, 302,
	303, 304, 305, 0, 160, 0, 421, 415, 420, 422,
	424, 425, 426, 427, 401, 399, 0, 421, 1657, 419,
	874, 875, 869, 870, 1833, 904, 440, -2, -2, -2,
	1934, -2, 472, -2, 479, 1937, 1835, 482, 0, 484,
	-2, 487, 877, 879, 881, 29, 30, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, -2, -2, -2,
	-2, 0, 0, 1692, 1581, 1627, 1584, 1579, 178, 180,
	182, 183, 0, 0, 0, 0, 0, 0, 207, 209,
	212, 214, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 239, 0, 0, 0, 0, 0, 0, 0, 0,
	827, 0, 0, 0, 0, 0, 0, 0, 0, 694,
	695, 0, 0, 700, 822, 823, 844, 0, 0, 0,
	0, 308, 310, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 240,
	346, 347, 0, 1006, 0, 0, 0, 0, 158, 150,
	0, 0, 683, 429, 431, 0, 149, 0, 0, 873,
	0, 0, 445, 447, 449, 512, 514, 516, 518, 520,
	522, 525, 527, 529, 531, 533, 535, 537, 539, 541,
	543, 545, 547, 549, 551, 553, 555, 557, 559, 560,
	0, 0, 0, 0, -2, -2, 0, -2, -2, 0,
	0, 0, 0, 0, 0, 0, 0, -2, -2, -2,
	0, 0, 0, -2, -2, 0, 0, 0, 563, 565,
	566, 567, 0, 609, 612, 620, 665, 666, 0, 813,
	1007, 906, 884, 897, 906, 886, 887, 888, 889, 890,
	895, 896, 899, 0, 891, 892, 893, 32, 34, 36,
	38, 40, 42, 264, 266, 268, 270, 274, 276, -2,
	979, 980, 314, 316, 318, 320, 322, 432, 0, 434,
	0, 564, 970, 0, -2, 0, 1011, 1011, 1011, 0,
	0, 980, 978, 0, 437, 438, 491, 492, 1244, 0,
	0, 0, 0, 0, 1479, 1328, 0, 493, -2, 1359,
	1361, 1913, 1934, 1478, 1363, 1364, 1365, 1366, 1367, 0,
	0, 1370, 0, 1372, 1373, 1374, 1375, 0, 1377, 0,
	1381, 1382, 1383, 0, 1918, 1558, 1623, -2, 1149, 1150,
	1151, 1152, 1153, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1619, 0, 1450, 1397, -2, 1644, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1701,
	-2, -2, -2, -2, -2, -2, -2, 1205, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1948, 1401, 1402,
	1403, 1404, 1405, 1406, 1407, 1408, 1409, 0, 1902, 1919,
	1920, 1925, 1927, 1921, 1910, 1420, -2, 1949, 1950, 1951,
	1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961,
	1962, 1963, 1206, -2, 1914, 1915, 1930, 1931, 1936, 1941,
	1942, 1917, 1926, -2, -2, 997, 1808, 1000, 771, 998,
	982, 984, 0, 986, 0, 0, 0, 991, 1014, 1012,
	0, 1050, 995, 996, 1006, 1068, 1091, 0, 1073, 0,
	1091, 1117, 0, 1078, 1828, 1398, 1399, 0, 1627, 1624,
	-2, 0, 0, 0, 0, 0, 0, 203, 402, 0,
	408, 410, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 903, 442, 443, 0, 467, 0, 471, 1909, -2,
	-2, 475, 907, 911, 912, 913, 914, 0, 0, 0,
	0, 0, 481, 0, 0, 468, 469, 485, 488, 0,
	51, 0, 1919, 1117, 52, 0, 1595, 1649, 1650, 1651,
	1652, 1653, 1948, 1964, 1966, 1967, 1968, 1969, 1970, 1971,
	1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981,
	1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991,
	1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,
	2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011,
	2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021,
	2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031,
	2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041,
	2042, 2043, 2044, 54, 0, 1919, 57, 0, 1919, 0,
	-2, 61, 0, 1919, 161, 162, 1640, 1641, 1645, 1646,
	1647, 1648, 64, 0, 1601, 66, 0, 1598, 75, 0,
	1919, 0, 1578, -2, 0, 0, 675, 1575, 1580, 676,
	1585, 0, 184, 185, 186, 187, 188, 1919, 190, 191,
	0, 193, 194, 1919, 196, 197, 0, 199, 215, 216,
	0, 218, 0, 1919, 0, 0, 0, 224, -2, 241,
	0, 238, 0, 228, 229, 231, 232, 233, 234, 235,
	0, 0, 0, 828, 280, 278, 1606, 0, -2, 1919,
	816, 819, 1919, 821, 833, 1609, 0, -2, 0, 1004,
	1919, 921, 696, 697, 698, 699, 0, 299, 0, 934,
	0, 936, 0, 956, 1123, 1068, 242, 243, 244, 245,
	246, 1919, 0, 0, 0, 251, 0, 253, 254, 255,
	256, 257, 258, 259, 260, 261, 142, 1919, 325, 344,
	142, 1919, 328, 142, 1919, 331, 142, 1919, 334, 1573,
	142, 1919, 337, 338, 1919, 340, 163, 341, 1919, 343,
	0, -2, 395, 1613, -2, 349, 0, -2, 0, 175,
	0, 0, 681, 682, 0, 871, 872, 0, 452, 0,
	0, 561, 562, 0, 0, 572, 573, 574, 575, 1806,
	1716, 578, 0, 581, -2, 0, 0, 0, 585, 586,
	587, 0, 680, 589, 0, 0, 591, 0, 595, 0,
	598, 0, 600, 0, 602, -2, -2, -2, 0, 0,
	0, 0, 628, 629, 0, 634, 0, 637, 638, 639,
	0, 641, 642, 643, 644, 0, 646, 647, -2, -2,
	651, 653, 0, 660, 0, 664, 0, 568, 569, 142,
	1121, 883, -2, 885, 0, 901, 973, -2, 0, 433,
	0, 436, 977, 971, 976, 1028, 1029, 0, 0, 0,
	0, 1009, 1010, 0, 0, 0, 968, 969, 0, 0,
	0, 0, 1484, 1485, 1486, 1487, 1488, 1489, 1492, 1493,
	1490, 1491, 1494, 1495, 0, 0, 0, 0, 0, 1496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1497, 1498, 1499, 0, 0, 1501, 0, 1503, 0,
	0, 0, 0, 0, 0, 1307, 1309, 1566, 0, 0,
	1500, 1249, 1250, 1251, 1286, 1287, 0, 0, 1360, 1563,
	1562, 1362, 0, 1515, 0, 1369, 0, 1241, 1376, 1592,
	-2, 0, 1479, 1510, 0, 0, 1384, 1385, 1386, 0,
	0, 1515, 0, 0, 1557, 0, 1452, 0, 1185, 0,
	1186, 1187, 0, 1188, 1189, 1202, 1215, 0, 0, 0,
	0, 1219, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1207, 0,
	0, 0, 1538, -2, 0, 0, 0, 0, 0, 999,
	0, 0, 1054, 1567, 1571, 1572, 1054, 1054, 0, 0,
	1516, 1114, 1114, 0, 0, 1110, 1110, 1110, 1108, 1085,
	0, 383, 385, 387, 389, 390, 391, 393, 1091, 0,
	1101, 0, 1091, 1091, 0, -2, 1073, 0, 0, 1101,
	1118, 1119, 0, 0, 0, 0, 0, 0, 1628, 0,
	0, 0, 1615, 0, 0, 175, 0, 413, 423, 1006,
	0, 1518, 1140, 1134, 1143, 1144, 1145, 1146, 1192, 1193,
	1194, 1195, 1196, 1154, 1155, 1156, 1157, 1158, 1159, 1160,
	1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170,
	-2, 1203, 1205, 1226, 1174, 1175, 1176, 1177, 1178, 1179,
	1180, 1181, 1182, 1183, 1184, 1198, 0, 1173, 1173, 1173,
	1190, 1191, 1214, 1225, 1217, 1225, 1221, 1141, 1142, 1208,
	1209, 1210, 1211, 0, 417, 0, 0, 0, 0, -2,
	477, 0, 909, 0, 915, 502, 503, 504, 917, 918,
	0, 480, 505, 506, 507, 508, 509, 510, 0, 788,
	0, 790, 1587, 0, 478, 495, 483, 0, 489, 76,
	866, 108, 0, 866, 866, 0, 0, 129, 0, 0,
	0, 0, 0, 0, 96, 104, 84, 85, 0, 0,
	0, 0, 58, 796, 0, 799, 0, 0, 0, 0,
	0, 0, 0, 811, 0, 0, 0, 0, 95, 0,
	90, 78, 0, 0, 0, 98, 106, 0, 133, 135,
	0, 0, 1104, 674, 0, 0, 1628, 1583, 0, 0,
	0, 0, 217, 219, 0, 221, 222, 223, 0, 827,
	0, 230, 227, 271, 771, 1919, 795, 1919, 793, 1610,
	0, 0, 0, 297, 292, 0, 294, 814, 0, 1003,
	0, 0, 0, 0, 834, 0, 1919, 839, 1597, 1636,
	1637, 923, 0, 1129, 0, 937, 0, 0, 1124, 0,
	1126, 0, 248, 249, 250, 0, 323, 0, 140, 141,
	0, 326, 0, 329, 0, 332, 0, 0, 335, 0,
	0, 0, 0, 1006, 0, 0, 0, 152, 0, 0,
	0, 0, 0, 175, 175, 1104, 454, 1104, 456, 0,
	0, 576, 577, 579, 580, 582, 583, -2, -2, 661,
	631, 630, 588, 0, 668, 1824, 678, 590, 1692, 593,
	1692, 596, 1692, 599, 601, 604, 623, 611, 0, 615,
	0, 617, 0, 619, 631, 632, 635, 640, 645, 0,
	0, 0, 0, 812, 0, 900, 974, 976, 435, 972,
	1026, 1027, 1032, 1036, 1037, 1040, 1043, 1044, 1034, 1244,
	992, 993, 994, 1020, 1021, 853, 0, 2045, 1245, 1135,
	1246, 1247, 1594, 0, 1252, 1253, 1254, 1255, 1256, 1257,
	1258, 1259, 1260, 1261, -2, -2, -2, -2, -2, -2,
	-2, -2, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277,
	1278, 1279, 1280, -2, -2, -2, 1284, 1285, -2, 1502,
	1504, 0, 1566, 0, -2, 0, -2, -2, -2, -2,
	1304, 0, 1306, 1311, 1313, 1315, 0, 0, 0, 0,
	1565, 1325, 1549, 1550, 0, 0, 1481, 1482, 1483, 1310,
	0, 1329, 1564, 1561, 0, 0, 1514, 1017, 1388, 0,
	0, 0, 0, 1395, 0, 1593, 1240, 1227, 1228, 1229,
	1230, 1231, 1232, 1242, 1380, 1512, 0, 1511, 0, 0,
	0, 1522, 0, 1556, 1552, 0, 1616, 1622, 1460, 0,
	0, 0, 0, 1590, 0, 0, 0, 0, 0, 0,
	0, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429,
	1430, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1432, 0, 1525, -2, -2, -2, -2, -2, -2, -2,
	0, 1434, 0, 1436, 1516, 1535, 0, 0, 1330, 0,
	0, 0, 1479, 0, 1439, 1516, 1543, 0, 0, 0,
	0, 0, 1516, 0, 1548, 0, 1446, 0, 1448, 1001,
	0, 0, 1129, 0, 0, 0, 1570, 1129, 1129, 0,
	1049, 0, 0, 1111, 1112, 1113, 0, 0, 1114, 0,
	1105, 1109, 1106, 1107, 0, 0, 1091, 384, 386, 388,
	392, 394, 1101, 1065, 0, 0, 1596, 1071, 1100, 0,
	771, 1090, 1101, 1101, 0, -2, 1075, 0, 0, 1017,
	-2, 176, 770, 0, 0, 0, 0, 403, 405, 0,
	0, 0, 397, 0, 400, 0, 1130, 1133, 0, 1147,
	0, 0, -2, 0, 0, 0, 0, 0, 470, 0,
	908, 916, 0, 499, 0, 501, 0, 789, 1589, 1588,
	0, 490, 0, 0, 0, 0, 865, 112, 1919, 0,
	144, 0, 0, 755, 1602, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 797, 798,
	800, 806, 808, 0, 802, 1591, 0, 803, 0, 805,
	807, 809, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 1577, 166, 1103,
	1576, 1586, 0, 189, 192, 195, 198, 0, 225, 0,
	0, 703, 686, 0, 791, 794, 0, 771, 826, 1608,
	0, 279, 175, 0, 0, 293, 0, 0, 0, 0,
	0, 0, 832, 0, 0, 0, 1919, 925, 931, 0,
	1019, 1128, 0, 954, 939, 0, 0, 0, 954, 958,
	959, 961, 962, 0, 0, 1125, 0, 252, 345, 142,
	142, 142, 1574, 142, 142, 164, 339, 342, 348, 396,
	1006, 175, 173, 1787, 171, 168, 170, 0, 0, 0,
	704, 706, 707, 708, 709, 0, 1637, 0, 1745, 1637,
	0, 942, 944, 147, 175, 291, 453, 458, 570, 0,
	606, 625, 584, 679, 677, 592, 594, 597, 614, 0,
	0, 0, 627, 0, 0, 0, 0, 0, 662, 663,
	667, 1122, 975, 0, 1038, 0, 1035, 1041, 1042, 0,
	1023, 851, 852, 0, 0, 0, 0, -2, -2, 0,
	0, 0, 1326, 0, -2, 1305, 1308, 1312, 1314, 1316,
	0, 0, 0, 0, 0, 0, 1505, 0, 1507, 1327,
	1559, 1562, 1477, 0, 0, 1016, 1017, 1017, 1017, 1394,
	0, 0, 0, 0, 0, 0, 0, 1513, 0, 1520,
	1521, 0, 1387, 0, 1553, 0, 0, 0, 1396, 0,
	0, 0, 1197, 1171, 0, 1225, 1223, 1224, 1218, 1225,
	1222, 0, 0, 0, 0, 0, 1415, 0, 0, 0,
	1419, 1431, 0, 1433, 1435, 0, 0, 1437, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1333, 1334, 1335, 1438, 1541, 1542, 0, 0, 0,
	0, 0, 0, 1444, 0, 1547, 1445, 1447, 1006, 1051,
	1046, 1568, 1104, 1053, 1055, 1569, 1599, 1046, 1046, 0,
	1517, 0, 0, 1095, 0, 0, 0, 1097, 0, 1086,
	0, 1088, 1101, 1070, 0, 0, 1063, 0, 1059, 1060,
	1061, 1062, 771, 1099, 1072, 1076, 1616, 0, 1120, 0,
	1080, 1083, 0, 0, 1629, 200, 204, 205, 201, 202,
	0, 412, 0, 0, 1519, 0, 1136, 0, 0, 0,
	0, 0, 416, 0, 466, -2, 497, 498, 500, 0,
	496, 109, 866, 0, 0, 857, 0, 114, 1919, 123,
	0, 732, 0, 1600, 0, 0, 0, 0, 868, 0,
	1919, 142, 1919, 142, 125, 128, 0, 132, 130, 0,
	0, 723, 77, 866, 80, 82, 88, 0, 0, 0,
	94, 0, 0, 859, 0, 801, 804, 810, 59, 0,
	861, 855, 0, 854, 134, 81, 83, 89, 0, 863,
	79, 0, 175, 0, 1582, 0, 0, 0, 0, 702,
	-2, 0, 0, 0, 0, 0, 0, 285, 281, 0,
	290, 296, 295, 817, -2, 820, 829, 0, 831, 843,
	0, 0, 0, 927, 931, 0, 930, 1004, 1031, 1018,
	1127, 932, 954, 0, 0, 0, 941, 938, 935, 1129,
	0, 0, 0, 0, 0, 247, 324, 327, 330, 333,
	336, 350, 151, 0, 0, 0, 0, 0, 175, 0,
	0, 0, 0, 0, 1637, 1637, 0, 1604, 0, 0,
	0, 148, 455, 0, 0, 616, 618, 631, 654, 655,
	718, 0, 718, 0, 0, 1022, 853, 0, 1248, 1289,
	0, 0, -2, 0, 0, 1293, 0, 0, 0, -2,
	0, 0, 0, 1506, 1508, 0, 1561, 1389, 0, 0,
	0, 0, 1371, 1233, 1234, 1235, 1236, 1237, 1238, 1239,
	0, 1378, 1379, 1480, 1523, 1551, 1555, 0, 1617, 1621,
	1458, 1459, 1463, 1607, 0, 0, 0, 1216, 1220, 1400,
	0, 0, 0, 0, 0, 0, 0, 1524, 1534, 1536,
	1331, 1332, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343,
	1344, 1345, -2, -2, -2, 1349, 1350, 1351, -2, -2,
	-2, 0, 0, 0, 1537, 1539, 1540, 1544, 1545, 0,
	1441, 1442, 1443, 1546, 0, 1048, 0, 1052, 0, 1048,
	1048, 1013, 1093, 0, 0, 1116, 0, 1068, 1087, 0,
	1077, 1066, 0, 1067, 0, 1098, 0, 1074, 1079, 0,
	1082, 0, 1389, -2, 159, 414, 398, 0, 0, 1138,
	1148, 0, 1200, 1204, 418, 1102, 0, 0, 0, 0,
	143, 730, 754, 0, 0, 846, 853, 0, 0, 116,
	0, 0, 0, 124, 0, 121, 0, 127, 131, 0,
	0, 0, 0, 91, 92, 93, 0, 97, 99, 0,
	0, 0, 0, 0, 145, 0, 220, 825, 226, 712,
	0, 687, 0, 771, 795, 0, 277, 0, 284, 0,
	815, 830, 0, 0, 0, 0, 0, 929, 931, 0,
	922, 923, 954, 1030, 933, 952, -2, 951, 0, 1019,
	960, 957, 963, 964, 0, 172, 0, 167, 169, 0,
	154, 0, 0, 705, 710, 0, 0, 0, 0, 0,
	943, 945, 0, 571, 626, 656, 717, 0, 0, 658,
	1033, 1039, 1024, 853, 1291, 1295, 0, 0, 0, 1297,
	-2, 0, 1319, -2, -2, 1509, 1560, 1368, 1017, 1390,
	1392, 1393, 1243, 1554, 0, 1465, 1462, 0, 1449, 1172,
	1410, 1411, 0, 0, 1414, 1416, 1417, 1418, 1533, 0,
	0, 0, 0, 1440, 1002, 1454, 0, 0, 1056, 1454,
	1454, 1094, 0, 1096, 1091, 1089, 1064, 1057, 0, 1617,
	1081, 0, 0, 1131, 1137, 0, 1199, 110, 111, 113,
	0, 731, 0, 734, 0, 0, 0, 0, 741, 742,
	0, 0, 0, 0, 0, 760, 769, 0, 848, 0,
	0, 0, 118, 137, 0, 0, 867, 0, 142, 142,
	0, 0, 858, 0, 0, 0, 860, 862, 856, 0,
	864, 165, 720, 0, 691, 688, 703, 686, 792, 824,
	0, 282, 0, 842, 0, 0, 0, 919, 931, 0,
	924, 925, 298, 0, 0, 0, 940, 1031, 0, 174,
	175, 0, 0, 0, 0, 0, 0, 0, 457, 459,
	0, 0, 465, 716, 0, 0, 1025, 1299, -2, -2,
	1320, 0, 1618, 1620, 1019, 0, 1451, 0, 0, -2,
	0, 0, 0, 988, 0, 1047, 1045, 989, 990, 1115,
	1101, 0, 1084, 0, 1139, 115, 0, 735, 736, 1603,
	738, 0, 740, 743, 0, 745, 1639, 0, 749, 756,
	761, 0, 712, 0, 766, 767, 847, 758, 0, 117,
	119, 136, 850, 120, 126, 0, 0, 0, 0, 1686,
	101, 0, 686, 719, 0, 689, 0, 0, 0, 283,
	286, 0, 289, 0, 843, 0, 0, 0, 926, 927,
	0, 0, 0, 954, 965, 153, 0, 0, 769, 0,
	0, 753, 0, 0, 461, 0, 463, 0, 657, 659,
	1391, 1469, 0, 1412, 1413, -2, 0, 1357, 1453, 1455,
	0, 1069, 1058, 1132, 733, 737, 0, 0, 775, 0,
	0, 0, 764, 765, 720, 0, 0, 139, 0, 0,
	0, 0, 0, 0, 0, 684, 0, 692, 0, 712,
	0, 287, 288, 769, 0, 769, 0, 928, 929, 0,
	947, 948, 950, 955, 0, 0, 712, 769, 752, 0,
	460, 0, 0, 0, 0, 0, 0, 1464, 1358, 0,
	0, 0, 744, 780, 0, 0, 0, 762, 763, 760,
	0, 771, 122, 0, 849, 0, 724, 0, 0, 727,
	0, 0, 102, 1686, 100, 0, 0, 693, 720, 691,
	712, 0, 712, 0, 920, 0, 949, 175, 175, 720,
	712, 175, 462, 464, 1461, 1466, 1470, -2, 1882, 1689,
	0, 1467, 1468, 1456, 1457, 0, 746, 776, 777, 0,
	772, 773, 774, 1638, 747, 748, 757, 768, 775, 138,
	721, 0, 0, 722, 0, 0, 105, 0, 107, 0,
	686, 690, 720, 0, 720, 0, 1129, 155, 156, 750,
	720, 157, 0, 1472, 1473, 1474, 1475, 1476, 739, 778,
	0, 779, 0, 0, 0, 780, 725, 0, 728, 0,
	103, 0, 685, 840, 769, 840, 769, 946, 751, 0,
	781, 0, 784, 785, 0, 782, 760, 0, 0, 715,
	835, 0, 712, 837, 712, 1471, 783, 786, 787, 759,
	0, 0, 711, 713, 714, 841, 720, 720, 720, 0,
	840, 840, 726, 0, 836, 838, 0, 0, 720, 729,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 440, 3, 446, 441, 3,
	451, 452, 444, 442, 455, 443, 453, 445, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 459, 3,
	432, 434, 433, 436, 456, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 449, 3, 450, 447, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 457, 439, 458, 437,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 435,
	57775, 438, 57776, 448, 57777, 454, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1053
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1058
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1062
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1063
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1064
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1065
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1066
		{
			return helpWith(sqllex, "GRANT")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1067
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1068
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1069
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1070
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1074
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1083
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1084
		{
			return helpWith(sqllex, "ALTER")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1087
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1088
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1089
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1090
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1091
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1092
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1145
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1146
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1157
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1172
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1176
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1180
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1191
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1203
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 66:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1222
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1254
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1258
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1262
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1268
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1272
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1278
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1288
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1294
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1304
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1314
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1325
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1332
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1344
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1351
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1359
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1364
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1368
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1373
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1379
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1387
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 97:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1396
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1408
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 99:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1416
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 100:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1427
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1431
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1435
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 103:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1439
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1445
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1450
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1461
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1465
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1471
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1475
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1482
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1487
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1492
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1497
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1502
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1507
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1512
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1517
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1522
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1526
		{
			return unimplementedWithIssue(sqllex, 28751)
		}
	case 120:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1529
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1538
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1550
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1560
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1567
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1570
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1577
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1586
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1595
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1600
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1607
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1615
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1616
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1620
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1624
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1630
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1638
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1642
		{
			sqlVAL.union.val = nil
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1648
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1652
		{
			sqlVAL.union.val = nil
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1659
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1663
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 142:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1667
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1673
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 144:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1677
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 145:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1703
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1706
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 147:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1729
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1733
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1736
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1740
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 151:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1777
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1782
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1786
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1792
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1797
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1802
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1807
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1811
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1827
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1830
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1834
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1838
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1846
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1850
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1856
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1860
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1866
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1870
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1874
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1878
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1884
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1888
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1894
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 174:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1898
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 175:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1902
		{
			sqlVAL.union.val = nil
		}
	case 176:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1908
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1921
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1922
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1923
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1924
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1934
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1942
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1944
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1947
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1957
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1966
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1974
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1976
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1980
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1983
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1993
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2002
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2010
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2012
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2016
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2019
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2023
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2027
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2031
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2046
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2052
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2057
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2069
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2070
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2072
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2073
		{
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2074
		{
			return helpWith(sqllex, "CREATE")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2077
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2078
		{
			return unimplemented(sqllex, "create cast")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2079
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2080
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2081
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2082
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2083
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2084
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2085
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2086
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2087
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2088
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 227:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2089
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2090
		{
			return unimplemented(sqllex, "create operator")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2091
		{
			return unimplemented(sqllex, "create publication")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2092
		{
			return unimplemented(sqllex, "create rule")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2093
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2094
		{
			return unimplemented(sqllex, "create server")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2095
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2096
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2097
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2100
		{
		}
	case 237:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2101
		{
		}
	case 238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2104
		{
		}
	case 239:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2105
		{
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2108
		{
		}
	case 241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2109
		{
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2112
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2113
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2114
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2115
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2116
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2117
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 248:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2118
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 249:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2119
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2120
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2121
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2122
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2123
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2124
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2125
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2126
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2127
		{
			return unimplemented(sqllex, "drop server")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2128
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2129
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2130
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2131
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2135
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2136
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2137
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2138
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2140
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2141
		{
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2142
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2143
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 277:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2153
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2161
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2165
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 280:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2169
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2175
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2179
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2188
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2195
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2201
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2207
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2211
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2222
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().Value)
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2234
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2242
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2250
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2260
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2264
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2270
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2274
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2281
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 297:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2285
		{

			sqlVAL.union.val = nil
		}
	case 298:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2299
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2309
		{
			return helpWith(sqllex, "DELETE")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2316
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2319
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2320
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2321
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2322
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2323
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2332
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2333
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2334
		{
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2335
		{
			return helpWith(sqllex, "DROP")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2338
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2339
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2340
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2341
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2342
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2350
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2354
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2357
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2365
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2369
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2372
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2380
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2384
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2387
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2395
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2403
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2410
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2418
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2426
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2433
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2441
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2445
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2448
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2456
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2460
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2463
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2467
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2472
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2495
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2498
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2500
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2504
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2508
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2515
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2519
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2522
		{
			return helpWith(sqllex, "DELETE")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2524
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2525
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2526
		{
			return helpWith(sqllex, "INSERT")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2527
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2529
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2530
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2533
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2538
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2539
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2540
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2545
		{
			return helpWith(sqllex, "DELETE")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2546
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2547
		{
			return helpWith(sqllex, "INSERT")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2549
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2553
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2554
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2558
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2562
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 397:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2572
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2580
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2588
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2592
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2596
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2606
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2613
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2621
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2625
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 406:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2629
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2639
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2643
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2647
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2651
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2654
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2674
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2678
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2682
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2685
		{
			return helpWith(sqllex, "GRANT")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2705
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2709
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2713
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2716
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2721
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2725
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2735
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2739
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2753
		{
			return helpWith(sqllex, "RESET")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2754
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2762
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2766
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2769
		{
			return helpWith(sqllex, "RESET")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2777
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2780
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2791
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2794
		{
			return helpWith(sqllex, "USE")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2798
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2799
		{
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2800
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2801
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2805
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2806
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2807
		{
			return helpWith(sqllex, "USE")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2823
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2838
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2841
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2859
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2867
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2871
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2875
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2881
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2885
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2891
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2895
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2899
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2903
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2907
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2918
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2921
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2931
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2947
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2951
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2956
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2973
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2976
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2978
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2981
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2985
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3004
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3011
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3017
		{
			return unimplemented(sqllex, "set from current")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3018
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3026
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3031
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3038
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3042
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3048
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3052
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3059
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3080
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3084
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3090
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3094
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3098
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3102
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3106
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3112
		{
			sqlVAL.union.val = tree.Low
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3116
		{
			sqlVAL.union.val = tree.Normal
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3120
		{
			sqlVAL.union.val = tree.High
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3131
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3135
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3139
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3144
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3148
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3161
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3162
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3163
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3164
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3165
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3166
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3168
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3169
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3170
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3171
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3172
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3173
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3174
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3175
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3176
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3177
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3178
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3179
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3180
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3181
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3182
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3183
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3184
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3186
		{
			return helpWith(sqllex, "SHOW")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3193
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3194
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3195
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3206
		{
			sqlVAL.str = "client_encoding"
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3209
		{
			sqlVAL.str = "timezone"
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3210
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3224
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3228
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3232
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3243
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3251
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3259
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3266
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3274
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3281
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3291
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3295
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3298
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3300
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3303
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3311
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3314
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3322
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3325
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3338
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3346
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3354
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3357
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 592:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3359
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3363
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3367
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3370
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3372
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3376
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3379
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 599:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3387
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3390
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3392
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3395
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3403
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3406
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3408
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3411
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3415
		{
			sqlVAL.union.val = true
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3417
		{
			sqlVAL.union.val = true
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3419
		{
			sqlVAL.union.val = false
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3427
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: sqlDollar[2].union.bool()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3430
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3433
		{
			sqlVAL.union.val = true
		}
	case 613:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3434
		{
			sqlVAL.union.val = false
		}
	case 614:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3443
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3446
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 616:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3448
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3451
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3453
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3457
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3460
		{
			sqlVAL.union.val = true
		}
	case 621:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3461
		{
			sqlVAL.union.val = false
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3469
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3472
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 624:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3474
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3477
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 626:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3485
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3495
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3505
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3508
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3511
		{
			sqlVAL.union.val = true
		}
	case 631:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3512
		{
			sqlVAL.union.val = false
		}
	case 632:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3519
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3523
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3526
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3533
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3537
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3540
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3547
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3551
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3559
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3564
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3569
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3573
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3581
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3585
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3589
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3602
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3605
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3613
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3616
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3620
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3624
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3628
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3636
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3644
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3651
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3658
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3662
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3673
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3678
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3681
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3689
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3696
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3701
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3821
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3825
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3829
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3868
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3872
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3877
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3881
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3890
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3897
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 680:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3901
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3913
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3922
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3925
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 684:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3961
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
			}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:3974
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
			}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3988
		{
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3989
		{
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3990
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 689:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3994
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[8].union.slct(),
				AsColumnNames: sqlDollar[5].union.nameList(),
			}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:4006
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[11].union.slct(),
				AsColumnNames: sqlDollar[8].union.nameList(),
			}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4019
		{
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4020
		{
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4021
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4035
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4036
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4037
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4038
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4039
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4040
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4041
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 701:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4042
		{
		}
	case 703:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4047
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4053
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4057
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4063
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4069
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4072
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4076
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4085
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4092
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4097
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4102
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4108
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4115
		{
			sqlVAL.str = ""
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4122
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4128
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4135
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4142
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4148
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4152
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 726:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4158
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4168
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4172
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 729:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4178
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4192
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4203
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4207
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4213
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4217
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4221
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4225
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4229
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4233
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4237
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4255
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4259
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4263
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4267
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4271
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4275
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4279
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4289
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4293
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4297
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 750:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4304
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4314
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4326
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4336
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4348
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4353
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 756:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4359
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4365
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4376
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4386
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4398
		{
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4399
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4400
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4401
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4402
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4403
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 768:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4420
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4424
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4430
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4434
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4454
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4458
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4462
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4466
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4475
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4479
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4483
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4487
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4491
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4497
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4503
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4511
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4515
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4519
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4523
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4527
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4533
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4537
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4543
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 791:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4562
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4567
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4571
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 795:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4575
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4578
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4579
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4582
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4583
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4585
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4586
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4587
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4590
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4592
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4594
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4596
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4597
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4599
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4600
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4602
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4604
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4612
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4615
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 814:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4623
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4627
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4630
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4634
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 818:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4638
		{
			sqlVAL.union.val = nil
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4648
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4652
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4655
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4660
		{
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4661
		{
		}
	case 824:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4669
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4677
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 826:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4678
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 827:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4681
		{
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4682
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 829:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4688
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 830:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4690
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 831:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4692
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 832:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4694
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 833:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4696
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 834:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4698
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 835:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4714
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4728
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4743
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4757
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4771
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 840:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4774
		{
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4775
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4779
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4794
		{
			sqlVAL.union.val = false
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4800
		{
			sqlVAL.union.val = true
		}
	case 845:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4804
		{
			sqlVAL.union.val = false
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4810
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4814
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4823
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4834
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 850:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4835
		{
			sqlVAL.str = ""
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4839
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4843
		{
			sqlVAL.union.val = tree.Descending
		}
	case 853:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4847
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 854:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4853
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4860
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4864
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4870
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4876
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4884
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4890
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4898
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4904
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4912
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4916
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4921
		{
		}
	case 866:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4922
		{
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4925
		{
		}
	case 868:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4926
		{
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4934
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4937
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4947
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4956
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4959
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4967
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4970
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4974
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4975
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4976
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4992
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4995
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4997
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5000
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5010
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5013
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5015
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5018
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5022
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5027
		{
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5028
		{
		}
	case 894:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5029
		{
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5037
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5044
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5047
		{
		}
	case 898:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5048
		{
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5052
		{
			sqlVAL.str = ""
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5056
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5060
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 902:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5064
		{
			sqlVAL.str = ""
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5070
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5074
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5080
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5084
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5090
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5094
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5107
		{
		}
	case 910:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5109
		{
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5113
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5118
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5122
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5126
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5132
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5138
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5144
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5148
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 919:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5158
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5168
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5178
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5182
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 923:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5186
		{
			sqlVAL.str = ""
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5192
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 925:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5196
		{
			sqlVAL.str = ""
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5202
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 927:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5206
		{
			sqlVAL.str = ""
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5212
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 929:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5216
		{
			sqlVAL.str = ""
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5221
		{
		}
	case 931:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5222
		{
		}
	case 932:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5234
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 933:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5241
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5248
		{
			return helpWith(sqllex, "INSERT")
		}
	case 935:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5259
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5266
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 937:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5270
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5279
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5286
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5290
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5294
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5300
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5304
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5324
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 946:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5328
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5332
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5338
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 949:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5341
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5342
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 951:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5344
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5350
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 953:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5355
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 954:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5359
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 955:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5376
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5387
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5391
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 958:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5392
		{
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5396
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5400
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5413
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5416
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 965:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5420
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5463
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5469
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5473
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5488
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5492
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5496
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5500
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5504
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5508
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5513
		{
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5514
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5519
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 982:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5554
		{
			return helpWith(sqllex, "SELECT")
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5555
		{
			return helpWith(sqllex, "VALUES")
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5556
		{
			return helpWith(sqllex, "TABLE")
		}
	case 988:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5578
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5591
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5605
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5617
		{
			return helpWith(sqllex, "SELECT")
		}
	case 992:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5621
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5630
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5639
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5654
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5661
		{
			return helpWith(sqllex, "TABLE")
		}
	case 997:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5673
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5677
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5681
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5685
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5689
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5695
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5703
		{
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5704
		{
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5708
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5712
		{
			sqlVAL.union.val = nil
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5717
		{
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5718
		{
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5722
		{
			sqlVAL.union.val = true
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5726
		{
			sqlVAL.union.val = false
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5730
		{
			sqlVAL.union.val = false
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5736
		{
			sqlVAL.union.val = true
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5742
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5747
		{
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5748
		{
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5751
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5752
		{
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5756
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5760
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5766
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5772
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5776
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5782
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5786
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5791
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5806
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5815
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5826
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5830
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5839
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5845
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5852
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5859
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5868
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5872
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5876
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5882
		{
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5883
		{
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5886
		{
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5887
		{
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5904
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5908
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5914
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5918
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5937
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5940
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5942
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5954
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5957
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5959
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5965
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5969
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5975
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5979
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5984
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5989
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5995
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6000
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6007
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6012
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6023
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6027
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6031
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6039
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6070
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6084
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6094
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6102
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6111
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6115
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6119
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6130
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6154
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6160
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6164
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6170
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6172
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6176
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6182
		{
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6184
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6187
		{
			sqlVAL.union.val = nil
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6188
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6189
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6193
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6197
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6203
		{
			sqlVAL.union.val = true
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6207
		{
			sqlVAL.union.val = false
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6227
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6231
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6235
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6239
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6243
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6247
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6253
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6257
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6264
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6270
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6277
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6283
		{
			sqlVAL.str = tree.AstFull
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6287
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6291
		{
			sqlVAL.str = tree.AstRight
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6295
		{
			sqlVAL.str = tree.AstInner
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6301
		{
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6302
		{
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6323
		{
			sqlVAL.str = tree.AstHash
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6327
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6331
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6335
		{
			sqlVAL.str = ""
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6348
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6352
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6357
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6358
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6359
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6360
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6364
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6369
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6383
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6387
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6393
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6401
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6411
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6418
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6430
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6443
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6451
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6452
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6460
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6466
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6473
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6474
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6476
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6484
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6485
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6496
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6497
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6514
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6518
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6522
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6526
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6530
		{
			sqlVAL.union.val = types.String
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6534
		{
			sqlVAL.union.val = types.Name
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6538
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6547
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6551
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6555
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6559
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6563
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6567
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6571
		{
			sqlVAL.union.val = types.INet
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6575
		{
			sqlVAL.union.val = types.Oid
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6579
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6583
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6587
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6618
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6626
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6634
		{
			sqlVAL.union.val = nil
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6641
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6645
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6649
		{
			sqlVAL.union.val = types.Int2
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6653
		{
			sqlVAL.union.val = types.Int2
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6657
		{
			sqlVAL.union.val = types.Int4
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6661
		{
			sqlVAL.union.val = types.Int
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6665
		{
			sqlVAL.union.val = types.Int
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6669
		{
			sqlVAL.union.val = types.Int
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6673
		{
			sqlVAL.union.val = types.Float4
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6677
		{
			sqlVAL.union.val = types.Float4
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6681
		{
			sqlVAL.union.val = types.Float
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6685
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6689
		{
			sqlVAL.union.val = types.Float
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6693
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6701
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6709
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6717
		{
			sqlVAL.union.val = types.Bool
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6721
		{
			sqlVAL.union.val = types.Bool
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6728
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6732
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6736
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6740
		{
			sqlVAL.union.val = types.RegType
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6744
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6750
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6763
		{
			sqlVAL.union.val = types.Float
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6769
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6775
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6783
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6787
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6791
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6797
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6809
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6815
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6819
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6823
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6827
		{
			sqlVAL.union.val = types.String
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6836
		{
			sqlVAL.union.val = true
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6837
		{
			sqlVAL.union.val = false
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6842
		{
			sqlVAL.union.val = types.Date
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6846
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = types.Time
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6851
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = types.MakeTime(prec)
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6858
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6859
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6861
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6869
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6881
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6885
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6894
		{
			sqlVAL.union.val = true
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6895
		{
			sqlVAL.union.val = false
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6896
		{
			sqlVAL.union.val = false
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6900
		{
			sqlVAL.union.val = types.Interval
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6906
		{
			sqlVAL.union.val = tree.Year
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6910
		{
			sqlVAL.union.val = tree.Month
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6914
		{
			sqlVAL.union.val = tree.Day
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6918
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6922
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6926
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6932
		{
			sqlVAL.union.val = tree.Month
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6936
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6940
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6944
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6948
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6952
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6956
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6963
		{
			sqlVAL.union.val = nil
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6969
		{
			sqlVAL.union.val = tree.Second
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6972
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6996
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7000
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7004
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7007
		{
			return unimplementedWithIssue(sqllex, 32005)
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7016
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7021
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7025
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7029
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7033
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7037
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7041
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7045
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7049
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7053
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7057
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7061
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7065
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7069
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7073
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7077
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7081
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7085
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7089
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7093
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7097
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7101
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7105
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7109
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7113
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7117
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7121
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7125
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7129
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7133
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7137
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7141
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7145
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7149
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7153
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7157
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7161
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7165
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7169
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7173
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7177
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7181
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7185
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7189
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7193
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7197
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7201
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7205
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7209
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7213
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7217
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7221
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7225
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7229
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7233
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7237
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7241
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7245
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7249
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7253
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7257
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7260
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7262
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7266
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7270
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7274
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7278
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7282
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7286
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7290
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7294
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7298
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7302
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7306
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7310
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7314
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7318
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7322
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7326
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7343
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7348
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7360
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7364
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7368
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7372
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7376
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7380
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7384
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7388
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7392
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7396
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7400
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7404
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7408
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7412
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7416
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7420
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7424
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7428
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7432
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7436
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7440
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7444
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7448
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7452
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7456
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7460
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7464
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7468
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7482
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7490
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7526
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7530
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7534
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7538
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7542
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7547
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7549
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7553
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7556
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7558
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7562
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7566
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7570
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7574
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7583
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7590
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7594
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7598
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7603
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7607
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7611
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7615
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7619
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7622
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7626
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7630
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7633
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7634
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7636
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7640
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7644
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7647
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7658
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7665
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7674
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7675
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7679
		{
			return unimplementedWithIssue(sqllex, 32563)
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7681
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7685
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7691
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7695
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7699
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7703
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7709
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7713
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7717
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7721
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7725
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7729
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7733
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7737
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7741
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7745
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7749
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7753
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7757
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7764
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7767
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7769
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7772
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7774
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7777
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7779
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7782
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7784
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7787
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7789
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7792
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7794
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7797
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7799
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7802
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7804
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7808
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7811
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7812
		{
			return unimplemented(sqllex, "treat")
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7814
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7818
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7822
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7826
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7830
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7833
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7835
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7838
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7843
		{
			return unimplemented(sqllex, "within group")
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7844
		{
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7848
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7852
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7859
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7863
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7869
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7873
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7879
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7887
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7891
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7895
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7902
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7922
		{
			sqlVAL.str = ""
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7928
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7932
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7943
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7950
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7957
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7964
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7970
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7983
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8011
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8015
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8019
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8023
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8030
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8046
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8050
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8057
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8069
		{
			sqlVAL.union.val = tree.Any
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8073
		{
			sqlVAL.union.val = tree.Some
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8077
		{
			sqlVAL.union.val = tree.All
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8082
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8083
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8084
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8085
		{
			sqlVAL.union.val = tree.Div
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8086
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8087
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8088
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8089
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8090
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8091
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8092
		{
			sqlVAL.union.val = tree.LT
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8093
		{
			sqlVAL.union.val = tree.GT
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8094
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8095
		{
			sqlVAL.union.val = tree.LE
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8096
		{
			sqlVAL.union.val = tree.GE
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8097
		{
			sqlVAL.union.val = tree.NE
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8101
		{
			sqlVAL.union.val = tree.Like
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8102
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8103
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8104
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8127
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8131
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8137
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8141
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8145
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8156
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8160
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8166
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8170
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8177
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8183
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8187
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8193
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8197
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8203
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8207
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8213
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8217
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8223
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8227
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8249
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8253
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8257
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8263
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8270
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8274
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8291
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8295
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8299
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8303
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8307
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8313
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8319
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8325
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8329
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8333
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8339
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8351
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8358
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8362
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8368
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8374
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8378
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8385
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8391
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8395
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8402
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8408
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8412
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8417
		{
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8418
		{
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8422
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8426
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8432
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8441
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8445
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8449
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8457
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8461
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8467
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8471
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8490
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8498
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8521
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8530
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8534
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8538
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8542
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8548
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8552
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8560
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8564
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8573
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8584
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8593
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8601
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8698
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8705
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8709
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8713
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8727
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8731
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8735
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8748
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8766
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8779
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1629:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8786
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8811
		{
			sqlVAL.str = ""
		}
	case 1638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8817
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8821
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
